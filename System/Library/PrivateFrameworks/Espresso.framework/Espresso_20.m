void sub_1915F4A7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  *(_QWORD *)(v25 - 104) = &a22;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 104));
  a22 = (void **)&a25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a22);
  _Unwind_Resume(a1);
}

void *wrapper_kernel<Espresso::general_slice_kernel_cpu,Espresso::general_slice_params_t>::__set_weight_raw_blob(void *result, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  void *v7;
  int v8;
  uint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::runtime_error *exception;
  unint64_t v15;
  std::runtime_error *v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  std::string v39;
  _QWORD v40[2];
  unsigned __int8 v41;
  _QWORD v42[2];
  unsigned __int8 v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;

  v7 = result;
  v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10)
      return result;
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    v10 = (uint64_t)v7 + 544;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v10, (__int128 *)&v52);
    size = (std::__shared_weak_count *)v52.__r_.__value_.__l.__size_;
    if (v52.__r_.__value_.__l.__size_)
    {
      v12 = (unint64_t *)(v52.__r_.__value_.__l.__size_ + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    if (a5 != 4 * *(int *)(*(_QWORD *)v10 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      v15 = a5;
      v16 = exception;
      std::to_string(&v45, v15);
      v17 = std::string::insert(&v45, 0, "Unexpected size s=");
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      v19 = std::string::append(&v46, "/blob=");
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, 4 * *(int *)(*(_QWORD *)v10 + 8));
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v21 = &v44;
      else
        v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      else
        v22 = v44.__r_.__value_.__l.__size_;
      v23 = std::string::append(&v47, (const std::string::value_type *)v21, v22);
      v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, " @ ");
      if ((v43 & 0x80u) == 0)
        v25 = (const std::string::value_type *)v42;
      else
        v25 = (const std::string::value_type *)v42[0];
      if ((v43 & 0x80u) == 0)
        v26 = v43;
      else
        v26 = v42[1];
      v27 = std::string::append(&v48, v25, v26);
      v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      v29 = std::string::append(&v49, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v40, ":");
      if ((v41 & 0x80u) == 0)
        v31 = (const std::string::value_type *)v40;
      else
        v31 = (const std::string::value_type *)v40[0];
      if ((v41 & 0x80u) == 0)
        v32 = v41;
      else
        v32 = v40[1];
      v33 = std::string::append(&v50, v31, v32);
      v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, 197);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = &v39;
      else
        v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      else
        v36 = v39.__r_.__value_.__l.__size_;
      v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
      v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v16, &v52);
      __cxa_throw(v16, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    return memcpy(*(void **)(*(_QWORD *)v10 + 16), a4, a5);
  }
  return result;
}

void sub_1915F4E34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  void *v59;
  int v60;
  uint64_t v61;

  if (*(char *)(v61 - 57) < 0)
    operator delete(*(void **)(v61 - 80));
  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v61 - 89) < 0)
    operator delete(*(void **)(v61 - 112));
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v61 - 121) < 0)
    operator delete(*(void **)(v61 - 144));
  if (*(char *)(v61 - 153) < 0)
    operator delete(*(void **)(v61 - 176));
  if (a27 < 0)
    operator delete(a22);
  if (a59 < 0)
    operator delete(a54);
  if (a33 < 0)
    operator delete(a28);
  if (a52 < 0)
    operator delete(a47);
  if (a45 < 0)
    operator delete(a40);
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0)
LABEL_28:
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

BOOL wrapper_kernel<Espresso::general_slice_kernel_cpu,Espresso::general_slice_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2;

  v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10)
      return 0;
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

void wrapper_kernel<Espresso::general_slice_kernel_cpu,Espresso::general_slice_params_t>::convert_layer_data_to_fp32(_QWORD *a1, char **a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v9;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  const void *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  __int128 v43;
  int64x2_t v44;
  char *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  __int128 v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  int64x2_t v59;
  char *v60;
  _QWORD *v61;
  void *__p;
  void *v63;
  __int128 v64;
  const void *v65;
  std::__shared_weak_count *v66;

  if (a3 != a4)
  {
    v9 = a3;
    v12 = a2 + 2;
    while (1)
    {
      v14 = *(const void **)v9;
      v13 = *(std::__shared_weak_count **)(v9 + 8);
      v65 = *(const void **)v9;
      v66 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
      }
      v17 = operator new(0x118uLL);
      v17[1] = 0;
      v17[2] = 0;
      *v17 = &off_1E2DC1868;
      Espresso::blob_cpu::blob_cpu((uint64_t)(v17 + 3), a1);
      *(_QWORD *)&v64 = v17 + 3;
      *((_QWORD *)&v64 + 1) = v17;
      Espresso::abstract_blob_container::shape((char *)&v58, (uint64_t)v14);
      v56 = 0;
      v57 = 0;
      (*(void (**)(_QWORD *, uint64_t *, uint64_t *))(v17[3] + 16))(v17 + 3, &v58, &v56);
      v18 = v57;
      if (v57)
      {
        v19 = (unint64_t *)&v57->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if (__p)
      {
        v63 = __p;
        operator delete(__p);
      }
      if (v65)
      {
        if (v21)
          break;
      }
      v21 = 0;
      v55 = 0;
      if (a5)
        goto LABEL_21;
LABEL_28:
      v27 = v64;
      if (*((_QWORD *)&v64 + 1))
      {
        v28 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v31 = a2[1];
      v30 = (unint64_t)a2[2];
      if ((unint64_t)v31 >= v30)
      {
        v54 = v27;
        v33 = (v31 - *a2) >> 4;
        if ((unint64_t)(v33 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v34 = v30 - (_QWORD)*a2;
        v35 = v34 >> 3;
        if (v34 >> 3 <= (unint64_t)(v33 + 1))
          v35 = v33 + 1;
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0)
          v36 = 0xFFFFFFFFFFFFFFFLL;
        else
          v36 = v35;
        v61 = v12;
        v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v36);
        v39 = &v37[16 * v33];
        *(_OWORD *)v39 = v54;
        v41 = *a2;
        v40 = a2[1];
        if (v40 == *a2)
        {
          v44 = vdupq_n_s64((unint64_t)v40);
          v42 = &v37[16 * v33];
        }
        else
        {
          v42 = &v37[16 * v33];
          do
          {
            v43 = *((_OWORD *)v40 - 1);
            v40 -= 16;
            *((_OWORD *)v42 - 1) = v43;
            v42 -= 16;
            *(_QWORD *)v40 = 0;
            *((_QWORD *)v40 + 1) = 0;
          }
          while (v40 != v41);
          v44 = *(int64x2_t *)a2;
        }
        v32 = v39 + 16;
        *a2 = v42;
        a2[1] = v39 + 16;
        v59 = v44;
        v45 = a2[2];
        a2[2] = &v37[16 * v38];
        v60 = v45;
        v58 = v44.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v58);
      }
      else
      {
        *(_OWORD *)v31 = v27;
        v32 = v31 + 16;
      }
      a2[1] = v32;
      if (v55)
      {
        v46 = (unint64_t *)&v55->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      v48 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
      if (*((_QWORD *)&v64 + 1))
      {
        v49 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      v51 = v66;
      if (v66)
      {
        v52 = (unint64_t *)&v66->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v9 += 16;
      if (v9 == a4)
        return;
    }
    v55 = v66;
    if (v66)
    {
      v22 = (unint64_t *)&v66->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    if (!a5)
      goto LABEL_28;
LABEL_21:
    if (a6)
    {
      v58 = 0;
      v59.i64[0] = 0;
      (*(void (**)(void *, uint64_t *, uint64_t))(*(_QWORD *)v21 + 40))(v21, &v58, v64 + 160);
      v24 = (std::__shared_weak_count *)v59.i64[0];
      if (v59.i64[0])
      {
        v25 = (unint64_t *)(v59.i64[0] + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v21, v64 + 160, 1.0);
    }
    goto LABEL_28;
  }
}

void sub_1915F5390(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::general_slice_kernel_cpu,Espresso::general_slice_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB5008;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::general_slice_kernel_cpu,Espresso::general_slice_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB5008;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::general_slice_kernel_cpu,Espresso::general_slice_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_58@<Q0>(uint64_t *a1@<X1>, __int128 *a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  __int128 v7;
  __n128 result;

  v6 = (char *)operator new(0x1B0uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DB4D68;
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((_QWORD *)v6 + 39) = 0;
  *((_QWORD *)v6 + 40) = 0;
  *((_QWORD *)v6 + 38) = v6 + 312;
  *((_OWORD *)v6 + 22) = 0u;
  *((_OWORD *)v6 + 23) = 0u;
  v7 = *a2;
  *((_QWORD *)v6 + 3) = &off_1E2D527F8;
  *(_OWORD *)(v6 + 328) = v7;
  *((_DWORD *)v6 + 86) = *((_DWORD *)a2 + 4);
  *((_OWORD *)v6 + 24) = 0u;
  *((_OWORD *)v6 + 25) = 0u;
  *((_OWORD *)v6 + 26) = 0u;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v6 + 50, *a1, a1[1]);
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1915F55A8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::transplant_kernel_cpu,Espresso::transplant_params_t>::~wrapper_kernel(Espresso::generic_transplant_kernel *a1)
{
  *(_QWORD *)a1 = &off_1E2D527F8;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 392);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 376);
  Espresso::generic_transplant_kernel::~generic_transplant_kernel(a1);
}

{
  *(_QWORD *)a1 = &off_1E2D527F8;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 392);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 376);
  Espresso::generic_transplant_kernel::~generic_transplant_kernel(a1);
  JUMPOUT(0x19401CD90);
}

void wrapper_kernel<Espresso::transplant_kernel_cpu,Espresso::transplant_params_t>::__launch(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v5;
  _BOOL4 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  void **v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  float *v31;
  vDSP_Length v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  __n128 v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  void **v44;
  void **v45;
  void **v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  int *v52;
  float *v53;
  vDSP_Length v54;
  int *v55;
  int v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  vDSP_Length v60;
  vDSP_Length v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  const void *v74;
  void **v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  void **v80;
  const void *v81;
  void *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  _QWORD *v94;
  uint64_t *v95;
  std::__shared_weak_count *v96;
  float __B;
  _QWORD v98[2];
  _QWORD v99[2];
  void **v100[3];
  void **v101[3];
  void *v102;
  std::__shared_weak_count *v103;
  void ***v104;
  std::__shared_weak_count *v105;

  v5 = a3;
  memset(v101, 0, sizeof(v101));
  memset(v100, 0, sizeof(v100));
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)*a3 + 32))(*(_QWORD *)*a3))
    v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)*v5 + 32))(*(_QWORD *)*v5) == 1;
  else
    v7 = 1;
  v8 = (std::__shared_weak_count *)a1[48];
  v99[0] = a1[47];
  v99[1] = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  wrapper_kernel<Espresso::transplant_kernel_cpu,Espresso::transplant_params_t>::convert_layer_data_to_fp32(v99, (char **)v101, *a4, a4[1], 1, v7);
  if (v8)
  {
    v11 = (unint64_t *)&v8->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v13 = (std::__shared_weak_count *)a1[48];
  v98[0] = a1[47];
  v98[1] = v13;
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  wrapper_kernel<Espresso::transplant_kernel_cpu,Espresso::transplant_params_t>::convert_layer_data_to_fp32(v98, (char **)v100, *v5, v5[1], 0, 0);
  if (v13)
  {
    v17 = (unint64_t *)&v13->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v19 = *a4;
  if (a4[1] != *a4)
  {
    v20 = 0;
    do
    {
      if (!v7
        && (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v19 + 16 * v20) + 32))(*(_QWORD *)(v19 + 16 * v20))
         || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(*a4 + 16 * v20) + 32))(*(_QWORD *)(*a4 + 16 * v20)) == 1))
      {
        __B = *(float *)(*(_QWORD *)(*a4 + 16 * v20) + 112);
        v21 = &v101[0][2 * v20];
        v104 = (void ***)v22;
        v23 = (std::__shared_weak_count *)v21[1];
        v105 = v23;
        if (v23)
        {
          v24 = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
        }
        v26 = *((_QWORD *)v22 + 20);
        v27 = (std::__shared_weak_count *)*((_QWORD *)v22 + 21);
        v102 = (void *)v26;
        v103 = v27;
        if (v27)
        {
          v28 = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldxr(v28);
          while (__stxr(v29 + 1, v28));
        }
        v30 = 0;
        v31 = *(float **)(v26 + 24);
        v32 = *(int *)(v26 + 8);
        v33 = v26 + 12;
        do
        {
          v32 *= *(int *)(v33 + v30);
          v30 += 4;
        }
        while (v30 != 12);
        vDSP_vsmul(v31, 1, &__B, v31, 1, v32);
        if (v27)
        {
          v34 = (unint64_t *)&v27->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        v36 = v105;
        if (v105)
        {
          v37 = (unint64_t *)&v105->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
      }
      ++v20;
      v19 = *a4;
    }
    while (v20 < (a4[1] - *a4) >> 4);
  }
  Espresso::transplant_kernel_cpu::__launch((uint64_t)a1, v16, v100, v101);
  v40 = a1[49];
  if (v40)
  {
    v41 = (std::__shared_weak_count *)a1[50];
    v96 = v41;
    if (v41)
    {
      v42 = (unint64_t *)&v41->__shared_owners_;
      do
        v43 = __ldxr(v42);
      while (__stxr(v43 + 1, v42));
    }
    v44 = v100[0];
    if (*v100[0]
    {
      v46 = v45;
      v47 = (std::__shared_weak_count *)v44[1];
      v104 = (void ***)v45;
      v105 = v47;
      if (v47)
      {
        v48 = (unint64_t *)&v47->__shared_owners_;
        do
          v49 = __ldxr(v48);
        while (__stxr(v49 + 1, v48));
      }
    }
    else
    {
      v47 = 0;
      v46 = 0;
      v104 = 0;
      v105 = 0;
    }
    LODWORD(v50) = *(_DWORD *)(v40 + 8);
    v94 = a1;
    v95 = v5;
    v93 = v47;
    if ((_DWORD)v50 == 1)
    {
      v51 = 0;
      v52 = (int *)v46[20];
      v53 = (float *)*((_QWORD *)v52 + 3);
      v54 = v52[2];
      v55 = v52 + 3;
      do
        v54 *= v55[v51++];
      while (v51 != 3);
      vDSP_vsmul(v53, 1, *(const float **)(v40 + 16), v53, 1, v54);
    }
    else
    {
      v56 = *((_DWORD *)v46 + 4);
      if ((_DWORD)v50 != v56)
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v50, v56);
      v57 = *((_DWORD *)v46 + 5);
      if (v57)
      {
        v58 = 0;
        v59 = 0;
        v60 = *((int *)v46 + 2) * (uint64_t)*((int *)v46 + 3);
        v61 = 4 * (int)v50 * v60;
        do
        {
          if ((_DWORD)v50)
          {
            v62 = 0;
            v63 = 0;
            v64 = v58;
            do
            {
              vDSP_vsmul((const float *)(*((_QWORD *)v46[20] + 3) + v64), 1, (const float *)(*(_QWORD *)(v40 + 16) + v62), (float *)(*((_QWORD *)v46[20] + 3) + v64), 1, v60);
              ++v63;
              v50 = *((int *)v46 + 4);
              v62 += 4;
              v64 += 4 * v60;
            }
            while (v63 < v50);
            v57 = *((_DWORD *)v46 + 5);
          }
          ++v59;
          v58 += v61;
        }
        while (v59 < v57);
      }
    }
    a1 = v94;
    v5 = v95;
    if (v93)
    {
      v65 = (unint64_t *)&v93->__shared_owners_;
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 - 1, v65));
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
        std::__shared_weak_count::__release_weak(v93);
      }
    }
    if (v96)
    {
      v67 = (unint64_t *)&v96->__shared_owners_;
      do
        v68 = __ldaxr(v67);
      while (__stlxr(v68 - 1, v67));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
        std::__shared_weak_count::__release_weak(v96);
      }
    }
  }
  v69 = (std::__shared_weak_count *)a1[48];
  if (v69)
  {
    v70 = (unint64_t *)&v69->__shared_owners_;
    do
      v71 = __ldxr(v70);
    while (__stxr(v71 + 1, v70));
  }
  v72 = *v5;
  if (v5[1] != *v5)
  {
    v73 = 0;
    do
    {
      v74 = *(const void **)(v72 + 16 * v73);
      if (v74
      {
        v76 = (uint64_t)v75;
        v104 = (void ***)v75;
        v77 = *(std::__shared_weak_count **)(v72 + 16 * v73 + 8);
        v105 = v77;
        if (v77)
        {
          v78 = (unint64_t *)&v77->__shared_owners_;
          do
            v79 = __ldxr(v78);
          while (__stxr(v79 + 1, v78));
        }
      }
      else
      {
        v76 = 0;
        v104 = 0;
        v105 = 0;
      }
      v80 = v100[0];
      v81 = v100[0][2 * v73];
      if (v81
      {
        v102 = v82;
        v83 = (std::__shared_weak_count *)v80[2 * v73 + 1];
        v103 = v83;
        if (v83)
        {
          v84 = (unint64_t *)&v83->__shared_owners_;
          do
            v85 = __ldxr(v84);
          while (__stxr(v85 + 1, v84));
        }
      }
      else
      {
        v83 = 0;
        v82 = 0;
        v102 = 0;
        v103 = 0;
      }
      v39.n128_u64[0] = Espresso::QuantSimEngine::blob_container::copy_from_fp32(v76, (uint64_t)v82 + 160, 1.0);
      if (v83)
      {
        v86 = (unint64_t *)&v83->__shared_owners_;
        do
          v87 = __ldaxr(v86);
        while (__stlxr(v87 - 1, v86));
        if (!v87)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v83->__on_zero_shared)(v83, v39);
          std::__shared_weak_count::__release_weak(v83);
        }
      }
      v88 = v105;
      if (v105)
      {
        v89 = (unint64_t *)&v105->__shared_owners_;
        do
          v90 = __ldaxr(v89);
        while (__stlxr(v90 - 1, v89));
        if (!v90)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v88->__on_zero_shared)(v88, v39);
          std::__shared_weak_count::__release_weak(v88);
        }
      }
      ++v73;
      v72 = *v5;
    }
    while (v73 < (v5[1] - *v5) >> 4);
  }
  if (v69)
  {
    v91 = (unint64_t *)&v69->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v69->__on_zero_shared)(v69, v39);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  v104 = v100;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v104);
  v100[0] = (void **)v101;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v100);
}

void sub_1915F5D18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  *(_QWORD *)(v25 - 104) = &a22;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 104));
  a22 = (void **)&a25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a22);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::transplant_kernel_cpu,Espresso::transplant_params_t>::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, unint64_t a5, uint64_t *a6)
{
  uint64_t *v8;
  int v10;
  uint64_t v12;
  std::__shared_weak_count *size;
  unint64_t *v14;
  unint64_t v15;
  std::runtime_error *exception;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  std::string v39;
  _QWORD v40[2];
  unsigned __int8 v41;
  _QWORD v42[2];
  unsigned __int8 v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;

  v8 = a3;
  Espresso::generic_transplant_kernel::__set_weight_raw_blob(a1, a2, a3, a4, a5, a6);
  v10 = *((char *)v8 + 23);
  if (v10 < 0)
  {
    if (v8[1] != 10)
      return;
    v8 = (uint64_t *)*v8;
  }
  else if (v10 != 10)
  {
    return;
  }
  if (*v8 == 0x6163735F74736F70 && *((_WORD *)v8 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    v12 = a1 + 392;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v12, (__int128 *)&v52);
    size = (std::__shared_weak_count *)v52.__r_.__value_.__l.__size_;
    if (v52.__r_.__value_.__l.__size_)
    {
      v14 = (unint64_t *)(v52.__r_.__value_.__l.__size_ + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    if (a5 != 4 * *(int *)(*(_QWORD *)v12 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v45, a5);
      v17 = std::string::insert(&v45, 0, "Unexpected size s=");
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      v19 = std::string::append(&v46, "/blob=");
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, 4 * *(int *)(*(_QWORD *)v12 + 8));
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v21 = &v44;
      else
        v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      else
        v22 = v44.__r_.__value_.__l.__size_;
      v23 = std::string::append(&v47, (const std::string::value_type *)v21, v22);
      v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, " @ ");
      if ((v43 & 0x80u) == 0)
        v25 = (const std::string::value_type *)v42;
      else
        v25 = (const std::string::value_type *)v42[0];
      if ((v43 & 0x80u) == 0)
        v26 = v43;
      else
        v26 = v42[1];
      v27 = std::string::append(&v48, v25, v26);
      v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      v29 = std::string::append(&v49, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v40, ":");
      if ((v41 & 0x80u) == 0)
        v31 = (const std::string::value_type *)v40;
      else
        v31 = (const std::string::value_type *)v40[0];
      if ((v41 & 0x80u) == 0)
        v32 = v41;
      else
        v32 = v40[1];
      v33 = std::string::append(&v50, v31, v32);
      v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, 197);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = &v39;
      else
        v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      else
        v36 = v39.__r_.__value_.__l.__size_;
      v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
      v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v52);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    memcpy(*(void **)(*(_QWORD *)v12 + 16), a4, a5);
  }
}

void sub_1915F60D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  void *v59;
  int v60;
  uint64_t v61;

  if (*(char *)(v61 - 57) < 0)
    operator delete(*(void **)(v61 - 80));
  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v61 - 89) < 0)
    operator delete(*(void **)(v61 - 112));
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v61 - 121) < 0)
    operator delete(*(void **)(v61 - 144));
  if (*(char *)(v61 - 153) < 0)
    operator delete(*(void **)(v61 - 176));
  if (a27 < 0)
    operator delete(a22);
  if (a59 < 0)
    operator delete(a54);
  if (a33 < 0)
    operator delete(a28);
  if (a52 < 0)
    operator delete(a47);
  if (a45 < 0)
    operator delete(a40);
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0)
LABEL_28:
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

BOOL wrapper_kernel<Espresso::transplant_kernel_cpu,Espresso::transplant_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  int v4;

  v2 = a2;
  if (Espresso::generic_transplant_kernel::supports_weight_key(a1, a2))
    return 1;
  v4 = *((char *)v2 + 23);
  if (v4 < 0)
  {
    if (v2[1] != 10)
      return 0;
    v2 = (uint64_t *)*v2;
  }
  else if (v4 != 10)
  {
    return 0;
  }
  return *v2 == 0x6163735F74736F70 && *((_WORD *)v2 + 4) == 25964;
}

void Espresso::transplant_kernel_cpu::get_weights_blob(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t Espresso::transplant_kernel_cpu::get_weights@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 352);
  *a2 = *(_QWORD *)(this + 344);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

void wrapper_kernel<Espresso::transplant_kernel_cpu,Espresso::transplant_params_t>::convert_layer_data_to_fp32(_QWORD *a1, char **a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v9;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  const void *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  __int128 v43;
  int64x2_t v44;
  char *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  __int128 v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  int64x2_t v59;
  char *v60;
  _QWORD *v61;
  void *__p;
  void *v63;
  __int128 v64;
  const void *v65;
  std::__shared_weak_count *v66;

  if (a3 != a4)
  {
    v9 = a3;
    v12 = a2 + 2;
    while (1)
    {
      v14 = *(const void **)v9;
      v13 = *(std::__shared_weak_count **)(v9 + 8);
      v65 = *(const void **)v9;
      v66 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
      }
      v17 = operator new(0x118uLL);
      v17[1] = 0;
      v17[2] = 0;
      *v17 = &off_1E2DC1868;
      Espresso::blob_cpu::blob_cpu((uint64_t)(v17 + 3), a1);
      *(_QWORD *)&v64 = v17 + 3;
      *((_QWORD *)&v64 + 1) = v17;
      Espresso::abstract_blob_container::shape((char *)&v58, (uint64_t)v14);
      v56 = 0;
      v57 = 0;
      (*(void (**)(_QWORD *, uint64_t *, uint64_t *))(v17[3] + 16))(v17 + 3, &v58, &v56);
      v18 = v57;
      if (v57)
      {
        v19 = (unint64_t *)&v57->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if (__p)
      {
        v63 = __p;
        operator delete(__p);
      }
      if (v65)
      {
        if (v21)
          break;
      }
      v21 = 0;
      v55 = 0;
      if (a5)
        goto LABEL_21;
LABEL_28:
      v27 = v64;
      if (*((_QWORD *)&v64 + 1))
      {
        v28 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v31 = a2[1];
      v30 = (unint64_t)a2[2];
      if ((unint64_t)v31 >= v30)
      {
        v54 = v27;
        v33 = (v31 - *a2) >> 4;
        if ((unint64_t)(v33 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v34 = v30 - (_QWORD)*a2;
        v35 = v34 >> 3;
        if (v34 >> 3 <= (unint64_t)(v33 + 1))
          v35 = v33 + 1;
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0)
          v36 = 0xFFFFFFFFFFFFFFFLL;
        else
          v36 = v35;
        v61 = v12;
        v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v36);
        v39 = &v37[16 * v33];
        *(_OWORD *)v39 = v54;
        v41 = *a2;
        v40 = a2[1];
        if (v40 == *a2)
        {
          v44 = vdupq_n_s64((unint64_t)v40);
          v42 = &v37[16 * v33];
        }
        else
        {
          v42 = &v37[16 * v33];
          do
          {
            v43 = *((_OWORD *)v40 - 1);
            v40 -= 16;
            *((_OWORD *)v42 - 1) = v43;
            v42 -= 16;
            *(_QWORD *)v40 = 0;
            *((_QWORD *)v40 + 1) = 0;
          }
          while (v40 != v41);
          v44 = *(int64x2_t *)a2;
        }
        v32 = v39 + 16;
        *a2 = v42;
        a2[1] = v39 + 16;
        v59 = v44;
        v45 = a2[2];
        a2[2] = &v37[16 * v38];
        v60 = v45;
        v58 = v44.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v58);
      }
      else
      {
        *(_OWORD *)v31 = v27;
        v32 = v31 + 16;
      }
      a2[1] = v32;
      if (v55)
      {
        v46 = (unint64_t *)&v55->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      v48 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
      if (*((_QWORD *)&v64 + 1))
      {
        v49 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      v51 = v66;
      if (v66)
      {
        v52 = (unint64_t *)&v66->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v9 += 16;
      if (v9 == a4)
        return;
    }
    v55 = v66;
    if (v66)
    {
      v22 = (unint64_t *)&v66->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    if (!a5)
      goto LABEL_28;
LABEL_21:
    if (a6)
    {
      v58 = 0;
      v59.i64[0] = 0;
      (*(void (**)(void *, uint64_t *, uint64_t))(*(_QWORD *)v21 + 40))(v21, &v58, v64 + 160);
      v24 = (std::__shared_weak_count *)v59.i64[0];
      if (v59.i64[0])
      {
        v25 = (unint64_t *)(v59.i64[0] + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v21, v64 + 160, 1.0);
    }
    goto LABEL_28;
  }
}

void sub_1915F6684(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::transplant_kernel_cpu,Espresso::transplant_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB4D68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::transplant_kernel_cpu,Espresso::transplant_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB4D68;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::transplant_kernel_cpu,Espresso::transplant_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_57@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  __n128 result;

  v6 = (char *)operator new(0x218uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DB47F0;
  Espresso::builtin_kernel_cpu::builtin_kernel_cpu((uint64_t)(v6 + 24), a1, a2);
  *((_QWORD *)v6 + 3) = &off_1E2D50560;
  *(_OWORD *)(v6 + 504) = 0u;
  *(_OWORD *)(v6 + 520) = 0u;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v6 + 63, *a1, a1[1]);
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1915F67E0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::builtin_kernel_cpu,Espresso::builtin_params_t>::~wrapper_kernel(void **a1)
{
  *a1 = &off_1E2D50560;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 62));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 60));
  *a1 = &off_1E2D829E0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 58));
  Espresso::generic_builtin_kernel::~generic_builtin_kernel(a1);
}

{
  *a1 = &off_1E2D50560;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 62));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 60));
  *a1 = &off_1E2D829E0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 58));
  Espresso::generic_builtin_kernel::~generic_builtin_kernel(a1);
  JUMPOUT(0x19401CD90);
}

void wrapper_kernel<Espresso::builtin_kernel_cpu,Espresso::builtin_params_t>::__launch(uint64_t a1, const char *a2, uint64_t *a3, uint64_t *a4)
{
  _BOOL4 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  float *v31;
  vDSP_Length v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  Espresso *v39;
  __n128 v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  void **v45;
  void **v46;
  void **v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  int *v53;
  float *v54;
  vDSP_Length v55;
  int *v56;
  int v57;
  int v58;
  uint64_t v59;
  unint64_t v60;
  vDSP_Length v61;
  vDSP_Length v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  const void *v75;
  void **v76;
  uint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  void **v81;
  const void *v82;
  void *v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  Espresso *v95;
  std::__shared_weak_count *v96;
  float __B;
  _QWORD v98[2];
  _QWORD v99[2];
  void **v100[3];
  char *v101[3];
  void *v102;
  std::__shared_weak_count *v103;
  void ***v104;
  std::__shared_weak_count *v105;

  memset(v101, 0, sizeof(v101));
  memset(v100, 0, sizeof(v100));
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)*a3 + 32))(*(_QWORD *)*a3))
    v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)*a3 + 32))(*(_QWORD *)*a3) == 1;
  else
    v8 = 1;
  v9 = *(std::__shared_weak_count **)(a1 + 488);
  v99[0] = *(_QWORD *)(a1 + 480);
  v99[1] = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  wrapper_kernel<Espresso::builtin_kernel_cpu,Espresso::builtin_params_t>::convert_layer_data_to_fp32(v99, v101, *a4, a4[1], 1, v8);
  if (v9)
  {
    v12 = (unint64_t *)&v9->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v14 = *(std::__shared_weak_count **)(a1 + 488);
  v98[0] = *(_QWORD *)(a1 + 480);
  v98[1] = v14;
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  wrapper_kernel<Espresso::builtin_kernel_cpu,Espresso::builtin_params_t>::convert_layer_data_to_fp32(v98, (char **)v100, *a3, a3[1], 0, 0);
  if (v14)
  {
    v17 = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v95 = (Espresso *)a1;
  v19 = *a4;
  if (a4[1] != *a4)
  {
    v20 = 0;
    do
    {
      if (!v8
        && (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v19 + 16 * v20) + 32))(*(_QWORD *)(v19 + 16 * v20))
         || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(*a4 + 16 * v20) + 32))(*(_QWORD *)(*a4 + 16 * v20)) == 1))
      {
        __B = *(float *)(*(_QWORD *)(*a4 + 16 * v20) + 112);
        v21 = &v101[0][16 * v20];
        v104 = (void ***)v22;
        v23 = (std::__shared_weak_count *)*((_QWORD *)v21 + 1);
        v105 = v23;
        if (v23)
        {
          v24 = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
        }
        v26 = *((_QWORD *)v22 + 20);
        v27 = (std::__shared_weak_count *)*((_QWORD *)v22 + 21);
        v102 = (void *)v26;
        v103 = v27;
        if (v27)
        {
          v28 = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldxr(v28);
          while (__stxr(v29 + 1, v28));
        }
        v30 = 0;
        v31 = *(float **)(v26 + 24);
        v32 = *(int *)(v26 + 8);
        v33 = v26 + 12;
        do
        {
          v32 *= *(int *)(v33 + v30);
          v30 += 4;
        }
        while (v30 != 12);
        vDSP_vsmul(v31, 1, &__B, v31, 1, v32);
        if (v27)
        {
          v34 = (unint64_t *)&v27->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        v36 = v105;
        if (v105)
        {
          v37 = (unint64_t *)&v105->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
      }
      ++v20;
      v19 = *a4;
    }
    while (v20 < (a4[1] - *a4) >> 4);
  }
  v39 = v95;
  Espresso::builtin_kernel_cpu::__launch(v95, a2, v100, (uint64_t **)v101);
  v41 = *((_QWORD *)v95 + 62);
  if (v41)
  {
    v42 = (std::__shared_weak_count *)*((_QWORD *)v95 + 63);
    v96 = v42;
    if (v42)
    {
      v43 = (unint64_t *)&v42->__shared_owners_;
      do
        v44 = __ldxr(v43);
      while (__stxr(v44 + 1, v43));
    }
    v45 = v100[0];
    if (*v100[0]
    {
      v47 = v46;
      v48 = (std::__shared_weak_count *)v45[1];
      v104 = (void ***)v46;
      v105 = v48;
      if (v48)
      {
        v49 = (unint64_t *)&v48->__shared_owners_;
        do
          v50 = __ldxr(v49);
        while (__stxr(v50 + 1, v49));
      }
    }
    else
    {
      v48 = 0;
      v47 = 0;
      v104 = 0;
      v105 = 0;
    }
    LODWORD(v51) = *(_DWORD *)(v41 + 8);
    v94 = v48;
    if ((_DWORD)v51 == 1)
    {
      v52 = 0;
      v53 = (int *)v47[20];
      v54 = (float *)*((_QWORD *)v53 + 3);
      v55 = v53[2];
      v56 = v53 + 3;
      do
        v55 *= v56[v52++];
      while (v52 != 3);
      vDSP_vsmul(v54, 1, *(const float **)(v41 + 16), v54, 1, v55);
    }
    else
    {
      v57 = *((_DWORD *)v47 + 4);
      if ((_DWORD)v51 != v57)
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v51, v57);
      v58 = *((_DWORD *)v47 + 5);
      if (v58)
      {
        v59 = 0;
        v60 = 0;
        v61 = *((int *)v47 + 2) * (uint64_t)*((int *)v47 + 3);
        v62 = 4 * (int)v51 * v61;
        do
        {
          if ((_DWORD)v51)
          {
            v63 = 0;
            v64 = 0;
            v65 = v59;
            do
            {
              vDSP_vsmul((const float *)(*((_QWORD *)v47[20] + 3) + v65), 1, (const float *)(*(_QWORD *)(v41 + 16) + v63), (float *)(*((_QWORD *)v47[20] + 3) + v65), 1, v61);
              ++v64;
              v51 = *((int *)v47 + 4);
              v63 += 4;
              v65 += 4 * v61;
            }
            while (v64 < v51);
            v58 = *((_DWORD *)v47 + 5);
          }
          ++v60;
          v59 += v62;
        }
        while (v60 < v58);
      }
    }
    v39 = v95;
    if (v94)
    {
      v66 = (unint64_t *)&v94->__shared_owners_;
      do
        v67 = __ldaxr(v66);
      while (__stlxr(v67 - 1, v66));
      if (!v67)
      {
        ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
        std::__shared_weak_count::__release_weak(v94);
      }
    }
    if (v96)
    {
      v68 = (unint64_t *)&v96->__shared_owners_;
      do
        v69 = __ldaxr(v68);
      while (__stlxr(v69 - 1, v68));
      if (!v69)
      {
        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
        std::__shared_weak_count::__release_weak(v96);
      }
    }
  }
  v70 = (std::__shared_weak_count *)*((_QWORD *)v39 + 61);
  if (v70)
  {
    v71 = (unint64_t *)&v70->__shared_owners_;
    do
      v72 = __ldxr(v71);
    while (__stxr(v72 + 1, v71));
  }
  v73 = *a3;
  if (a3[1] != *a3)
  {
    v74 = 0;
    do
    {
      v75 = *(const void **)(v73 + 16 * v74);
      if (v75
      {
        v77 = (uint64_t)v76;
        v104 = (void ***)v76;
        v78 = *(std::__shared_weak_count **)(v73 + 16 * v74 + 8);
        v105 = v78;
        if (v78)
        {
          v79 = (unint64_t *)&v78->__shared_owners_;
          do
            v80 = __ldxr(v79);
          while (__stxr(v80 + 1, v79));
        }
      }
      else
      {
        v77 = 0;
        v104 = 0;
        v105 = 0;
      }
      v81 = v100[0];
      v82 = v100[0][2 * v74];
      if (v82
      {
        v102 = v83;
        v84 = (std::__shared_weak_count *)v81[2 * v74 + 1];
        v103 = v84;
        if (v84)
        {
          v85 = (unint64_t *)&v84->__shared_owners_;
          do
            v86 = __ldxr(v85);
          while (__stxr(v86 + 1, v85));
        }
      }
      else
      {
        v84 = 0;
        v83 = 0;
        v102 = 0;
        v103 = 0;
      }
      v40.n128_u64[0] = Espresso::QuantSimEngine::blob_container::copy_from_fp32(v77, (uint64_t)v83 + 160, 1.0);
      if (v84)
      {
        v87 = (unint64_t *)&v84->__shared_owners_;
        do
          v88 = __ldaxr(v87);
        while (__stlxr(v88 - 1, v87));
        if (!v88)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v84->__on_zero_shared)(v84, v40);
          std::__shared_weak_count::__release_weak(v84);
        }
      }
      v89 = v105;
      if (v105)
      {
        v90 = (unint64_t *)&v105->__shared_owners_;
        do
          v91 = __ldaxr(v90);
        while (__stlxr(v91 - 1, v90));
        if (!v91)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v89->__on_zero_shared)(v89, v40);
          std::__shared_weak_count::__release_weak(v89);
        }
      }
      ++v74;
      v73 = *a3;
    }
    while (v74 < (a3[1] - *a3) >> 4);
  }
  if (v70)
  {
    v92 = (unint64_t *)&v70->__shared_owners_;
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v70->__on_zero_shared)(v70, v40);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  v104 = v100;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v104);
  v100[0] = (void **)v101;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v100);
}

void sub_1915F6F84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  *(_QWORD *)(v25 - 104) = &a22;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 104));
  a22 = (void **)&a25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a22);
  _Unwind_Resume(a1);
}

void *wrapper_kernel<Espresso::builtin_kernel_cpu,Espresso::builtin_params_t>::__set_weight_raw_blob(void *result, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  void *v7;
  int v8;
  uint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::runtime_error *exception;
  unint64_t v15;
  std::runtime_error *v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  std::string v39;
  _QWORD v40[2];
  unsigned __int8 v41;
  _QWORD v42[2];
  unsigned __int8 v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;

  v7 = result;
  v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10)
      return result;
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    v10 = (uint64_t)v7 + 496;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v10, (__int128 *)&v52);
    size = (std::__shared_weak_count *)v52.__r_.__value_.__l.__size_;
    if (v52.__r_.__value_.__l.__size_)
    {
      v12 = (unint64_t *)(v52.__r_.__value_.__l.__size_ + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    if (a5 != 4 * *(int *)(*(_QWORD *)v10 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      v15 = a5;
      v16 = exception;
      std::to_string(&v45, v15);
      v17 = std::string::insert(&v45, 0, "Unexpected size s=");
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      v19 = std::string::append(&v46, "/blob=");
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, 4 * *(int *)(*(_QWORD *)v10 + 8));
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v21 = &v44;
      else
        v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      else
        v22 = v44.__r_.__value_.__l.__size_;
      v23 = std::string::append(&v47, (const std::string::value_type *)v21, v22);
      v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, " @ ");
      if ((v43 & 0x80u) == 0)
        v25 = (const std::string::value_type *)v42;
      else
        v25 = (const std::string::value_type *)v42[0];
      if ((v43 & 0x80u) == 0)
        v26 = v43;
      else
        v26 = v42[1];
      v27 = std::string::append(&v48, v25, v26);
      v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      v29 = std::string::append(&v49, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v40, ":");
      if ((v41 & 0x80u) == 0)
        v31 = (const std::string::value_type *)v40;
      else
        v31 = (const std::string::value_type *)v40[0];
      if ((v41 & 0x80u) == 0)
        v32 = v41;
      else
        v32 = v40[1];
      v33 = std::string::append(&v50, v31, v32);
      v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, 197);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = &v39;
      else
        v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      else
        v36 = v39.__r_.__value_.__l.__size_;
      v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
      v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v16, &v52);
      __cxa_throw(v16, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    return memcpy(*(void **)(*(_QWORD *)v10 + 16), a4, a5);
  }
  return result;
}

void sub_1915F733C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  void *v59;
  int v60;
  uint64_t v61;

  if (*(char *)(v61 - 57) < 0)
    operator delete(*(void **)(v61 - 80));
  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v61 - 89) < 0)
    operator delete(*(void **)(v61 - 112));
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v61 - 121) < 0)
    operator delete(*(void **)(v61 - 144));
  if (*(char *)(v61 - 153) < 0)
    operator delete(*(void **)(v61 - 176));
  if (a27 < 0)
    operator delete(a22);
  if (a59 < 0)
    operator delete(a54);
  if (a33 < 0)
    operator delete(a28);
  if (a52 < 0)
    operator delete(a47);
  if (a45 < 0)
    operator delete(a40);
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0)
LABEL_28:
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

BOOL wrapper_kernel<Espresso::builtin_kernel_cpu,Espresso::builtin_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2;

  v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10)
      return 0;
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

const char *Espresso::generic_builtin_kernel::kernel_type_str(Espresso::generic_builtin_kernel *this)
{
  return "builtin";
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::builtin_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

void wrapper_kernel<Espresso::builtin_kernel_cpu,Espresso::builtin_params_t>::convert_layer_data_to_fp32(_QWORD *a1, char **a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v9;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  const void *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  __int128 v43;
  int64x2_t v44;
  char *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  __int128 v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  int64x2_t v59;
  char *v60;
  _QWORD *v61;
  void *__p;
  void *v63;
  __int128 v64;
  const void *v65;
  std::__shared_weak_count *v66;

  if (a3 != a4)
  {
    v9 = a3;
    v12 = a2 + 2;
    while (1)
    {
      v14 = *(const void **)v9;
      v13 = *(std::__shared_weak_count **)(v9 + 8);
      v65 = *(const void **)v9;
      v66 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
      }
      v17 = operator new(0x118uLL);
      v17[1] = 0;
      v17[2] = 0;
      *v17 = &off_1E2DC1868;
      Espresso::blob_cpu::blob_cpu((uint64_t)(v17 + 3), a1);
      *(_QWORD *)&v64 = v17 + 3;
      *((_QWORD *)&v64 + 1) = v17;
      Espresso::abstract_blob_container::shape((char *)&v58, (uint64_t)v14);
      v56 = 0;
      v57 = 0;
      (*(void (**)(_QWORD *, uint64_t *, uint64_t *))(v17[3] + 16))(v17 + 3, &v58, &v56);
      v18 = v57;
      if (v57)
      {
        v19 = (unint64_t *)&v57->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if (__p)
      {
        v63 = __p;
        operator delete(__p);
      }
      if (v65)
      {
        if (v21)
          break;
      }
      v21 = 0;
      v55 = 0;
      if (a5)
        goto LABEL_21;
LABEL_28:
      v27 = v64;
      if (*((_QWORD *)&v64 + 1))
      {
        v28 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v31 = a2[1];
      v30 = (unint64_t)a2[2];
      if ((unint64_t)v31 >= v30)
      {
        v54 = v27;
        v33 = (v31 - *a2) >> 4;
        if ((unint64_t)(v33 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v34 = v30 - (_QWORD)*a2;
        v35 = v34 >> 3;
        if (v34 >> 3 <= (unint64_t)(v33 + 1))
          v35 = v33 + 1;
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0)
          v36 = 0xFFFFFFFFFFFFFFFLL;
        else
          v36 = v35;
        v61 = v12;
        v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v36);
        v39 = &v37[16 * v33];
        *(_OWORD *)v39 = v54;
        v41 = *a2;
        v40 = a2[1];
        if (v40 == *a2)
        {
          v44 = vdupq_n_s64((unint64_t)v40);
          v42 = &v37[16 * v33];
        }
        else
        {
          v42 = &v37[16 * v33];
          do
          {
            v43 = *((_OWORD *)v40 - 1);
            v40 -= 16;
            *((_OWORD *)v42 - 1) = v43;
            v42 -= 16;
            *(_QWORD *)v40 = 0;
            *((_QWORD *)v40 + 1) = 0;
          }
          while (v40 != v41);
          v44 = *(int64x2_t *)a2;
        }
        v32 = v39 + 16;
        *a2 = v42;
        a2[1] = v39 + 16;
        v59 = v44;
        v45 = a2[2];
        a2[2] = &v37[16 * v38];
        v60 = v45;
        v58 = v44.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v58);
      }
      else
      {
        *(_OWORD *)v31 = v27;
        v32 = v31 + 16;
      }
      a2[1] = v32;
      if (v55)
      {
        v46 = (unint64_t *)&v55->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      v48 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
      if (*((_QWORD *)&v64 + 1))
      {
        v49 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      v51 = v66;
      if (v66)
      {
        v52 = (unint64_t *)&v66->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v9 += 16;
      if (v9 == a4)
        return;
    }
    v55 = v66;
    if (v66)
    {
      v22 = (unint64_t *)&v66->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    if (!a5)
      goto LABEL_28;
LABEL_21:
    if (a6)
    {
      v58 = 0;
      v59.i64[0] = 0;
      (*(void (**)(void *, uint64_t *, uint64_t))(*(_QWORD *)v21 + 40))(v21, &v58, v64 + 160);
      v24 = (std::__shared_weak_count *)v59.i64[0];
      if (v59.i64[0])
      {
        v25 = (unint64_t *)(v59.i64[0] + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v21, v64 + 160, 1.0);
    }
    goto LABEL_28;
  }
}

void sub_1915F78AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::builtin_kernel_cpu,Espresso::builtin_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB47F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::builtin_kernel_cpu,Espresso::builtin_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB47F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::builtin_kernel_cpu,Espresso::builtin_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_56@<Q0>(uint64_t *a1@<X1>, __int128 *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  __n128 result;

  v6 = operator new(0x190uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DB4CC0;
  Espresso::gumbel_max_kernel_cpu::gumbel_max_kernel_cpu((uint64_t)(v6 + 3), a1, v7, a2);
  v6[3] = &off_1E2D523F0;
  *((_OWORD *)v6 + 23) = 0u;
  *((_OWORD *)v6 + 24) = 0u;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v6 + 46, *a1, a1[1]);
  result.n128_u64[0] = (unint64_t)(v6 + 3);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1915F7A04(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::gumbel_max_kernel_cpu,Espresso::gumbel_max_params_t>::~wrapper_kernel(Espresso::base_kernel *a1)
{
  *(_QWORD *)a1 = &off_1E2D523F0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 360);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 344);
  *(_QWORD *)a1 = &off_1E2D8A430;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 320);
  Espresso::base_kernel::~base_kernel(a1);
}

{
  *(_QWORD *)a1 = &off_1E2D523F0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 360);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 344);
  *(_QWORD *)a1 = &off_1E2D8A430;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 320);
  Espresso::base_kernel::~base_kernel(a1);
  JUMPOUT(0x19401CD90);
}

void wrapper_kernel<Espresso::gumbel_max_kernel_cpu,Espresso::gumbel_max_params_t>::__launch(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v5;
  _BOOL4 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  float *v31;
  vDSP_Length v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  __n128 v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  void **v44;
  void **v45;
  void **v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  int *v52;
  float *v53;
  vDSP_Length v54;
  int *v55;
  int v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  vDSP_Length v60;
  vDSP_Length v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  const void *v74;
  void **v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  void **v80;
  const void *v81;
  void *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  _QWORD *v94;
  uint64_t *v95;
  std::__shared_weak_count *v96;
  float __B;
  _QWORD v98[2];
  _QWORD v99[2];
  void **v100[3];
  char *v101[3];
  void *v102;
  std::__shared_weak_count *v103;
  void ***v104;
  std::__shared_weak_count *v105;

  v5 = a3;
  memset(v101, 0, sizeof(v101));
  memset(v100, 0, sizeof(v100));
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)*a3 + 32))(*(_QWORD *)*a3))
    v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)*v5 + 32))(*(_QWORD *)*v5) == 1;
  else
    v7 = 1;
  v8 = (std::__shared_weak_count *)a1[44];
  v99[0] = a1[43];
  v99[1] = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  wrapper_kernel<Espresso::gumbel_max_kernel_cpu,Espresso::gumbel_max_params_t>::convert_layer_data_to_fp32(v99, v101, *a4, a4[1], 1, v7);
  if (v8)
  {
    v11 = (unint64_t *)&v8->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v13 = (std::__shared_weak_count *)a1[44];
  v98[0] = a1[43];
  v98[1] = v13;
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  wrapper_kernel<Espresso::gumbel_max_kernel_cpu,Espresso::gumbel_max_params_t>::convert_layer_data_to_fp32(v98, (char **)v100, *v5, v5[1], 0, 0);
  if (v13)
  {
    v17 = (unint64_t *)&v13->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v19 = *a4;
  if (a4[1] != *a4)
  {
    v20 = 0;
    do
    {
      if (!v7
        && (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v19 + 16 * v20) + 32))(*(_QWORD *)(v19 + 16 * v20))
         || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(*a4 + 16 * v20) + 32))(*(_QWORD *)(*a4 + 16 * v20)) == 1))
      {
        __B = *(float *)(*(_QWORD *)(*a4 + 16 * v20) + 112);
        v21 = &v101[0][16 * v20];
        v104 = (void ***)v22;
        v23 = (std::__shared_weak_count *)*((_QWORD *)v21 + 1);
        v105 = v23;
        if (v23)
        {
          v24 = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
        }
        v26 = *((_QWORD *)v22 + 20);
        v27 = (std::__shared_weak_count *)*((_QWORD *)v22 + 21);
        v102 = (void *)v26;
        v103 = v27;
        if (v27)
        {
          v28 = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldxr(v28);
          while (__stxr(v29 + 1, v28));
        }
        v30 = 0;
        v31 = *(float **)(v26 + 24);
        v32 = *(int *)(v26 + 8);
        v33 = v26 + 12;
        do
        {
          v32 *= *(int *)(v33 + v30);
          v30 += 4;
        }
        while (v30 != 12);
        vDSP_vsmul(v31, 1, &__B, v31, 1, v32);
        if (v27)
        {
          v34 = (unint64_t *)&v27->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        v36 = v105;
        if (v105)
        {
          v37 = (unint64_t *)&v105->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
      }
      ++v20;
      v19 = *a4;
    }
    while (v20 < (a4[1] - *a4) >> 4);
  }
  Espresso::gumbel_max_kernel_cpu::__launch((uint64_t)a1, v16, v100, (uint64_t)v101);
  v40 = a1[45];
  if (v40)
  {
    v41 = (std::__shared_weak_count *)a1[46];
    v96 = v41;
    if (v41)
    {
      v42 = (unint64_t *)&v41->__shared_owners_;
      do
        v43 = __ldxr(v42);
      while (__stxr(v43 + 1, v42));
    }
    v44 = v100[0];
    if (*v100[0]
    {
      v46 = v45;
      v47 = (std::__shared_weak_count *)v44[1];
      v104 = (void ***)v45;
      v105 = v47;
      if (v47)
      {
        v48 = (unint64_t *)&v47->__shared_owners_;
        do
          v49 = __ldxr(v48);
        while (__stxr(v49 + 1, v48));
      }
    }
    else
    {
      v47 = 0;
      v46 = 0;
      v104 = 0;
      v105 = 0;
    }
    LODWORD(v50) = *(_DWORD *)(v40 + 8);
    v94 = a1;
    v95 = v5;
    v93 = v47;
    if ((_DWORD)v50 == 1)
    {
      v51 = 0;
      v52 = (int *)v46[20];
      v53 = (float *)*((_QWORD *)v52 + 3);
      v54 = v52[2];
      v55 = v52 + 3;
      do
        v54 *= v55[v51++];
      while (v51 != 3);
      vDSP_vsmul(v53, 1, *(const float **)(v40 + 16), v53, 1, v54);
    }
    else
    {
      v56 = *((_DWORD *)v46 + 4);
      if ((_DWORD)v50 != v56)
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v50, v56);
      v57 = *((_DWORD *)v46 + 5);
      if (v57)
      {
        v58 = 0;
        v59 = 0;
        v60 = *((int *)v46 + 2) * (uint64_t)*((int *)v46 + 3);
        v61 = 4 * (int)v50 * v60;
        do
        {
          if ((_DWORD)v50)
          {
            v62 = 0;
            v63 = 0;
            v64 = v58;
            do
            {
              vDSP_vsmul((const float *)(*((_QWORD *)v46[20] + 3) + v64), 1, (const float *)(*(_QWORD *)(v40 + 16) + v62), (float *)(*((_QWORD *)v46[20] + 3) + v64), 1, v60);
              ++v63;
              v50 = *((int *)v46 + 4);
              v62 += 4;
              v64 += 4 * v60;
            }
            while (v63 < v50);
            v57 = *((_DWORD *)v46 + 5);
          }
          ++v59;
          v58 += v61;
        }
        while (v59 < v57);
      }
    }
    a1 = v94;
    v5 = v95;
    if (v93)
    {
      v65 = (unint64_t *)&v93->__shared_owners_;
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 - 1, v65));
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
        std::__shared_weak_count::__release_weak(v93);
      }
    }
    if (v96)
    {
      v67 = (unint64_t *)&v96->__shared_owners_;
      do
        v68 = __ldaxr(v67);
      while (__stlxr(v68 - 1, v67));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
        std::__shared_weak_count::__release_weak(v96);
      }
    }
  }
  v69 = (std::__shared_weak_count *)a1[44];
  if (v69)
  {
    v70 = (unint64_t *)&v69->__shared_owners_;
    do
      v71 = __ldxr(v70);
    while (__stxr(v71 + 1, v70));
  }
  v72 = *v5;
  if (v5[1] != *v5)
  {
    v73 = 0;
    do
    {
      v74 = *(const void **)(v72 + 16 * v73);
      if (v74
      {
        v76 = (uint64_t)v75;
        v104 = (void ***)v75;
        v77 = *(std::__shared_weak_count **)(v72 + 16 * v73 + 8);
        v105 = v77;
        if (v77)
        {
          v78 = (unint64_t *)&v77->__shared_owners_;
          do
            v79 = __ldxr(v78);
          while (__stxr(v79 + 1, v78));
        }
      }
      else
      {
        v76 = 0;
        v104 = 0;
        v105 = 0;
      }
      v80 = v100[0];
      v81 = v100[0][2 * v73];
      if (v81
      {
        v102 = v82;
        v83 = (std::__shared_weak_count *)v80[2 * v73 + 1];
        v103 = v83;
        if (v83)
        {
          v84 = (unint64_t *)&v83->__shared_owners_;
          do
            v85 = __ldxr(v84);
          while (__stxr(v85 + 1, v84));
        }
      }
      else
      {
        v83 = 0;
        v82 = 0;
        v102 = 0;
        v103 = 0;
      }
      v39.n128_u64[0] = Espresso::QuantSimEngine::blob_container::copy_from_fp32(v76, (uint64_t)v82 + 160, 1.0);
      if (v83)
      {
        v86 = (unint64_t *)&v83->__shared_owners_;
        do
          v87 = __ldaxr(v86);
        while (__stlxr(v87 - 1, v86));
        if (!v87)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v83->__on_zero_shared)(v83, v39);
          std::__shared_weak_count::__release_weak(v83);
        }
      }
      v88 = v105;
      if (v105)
      {
        v89 = (unint64_t *)&v105->__shared_owners_;
        do
          v90 = __ldaxr(v89);
        while (__stlxr(v90 - 1, v89));
        if (!v90)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v88->__on_zero_shared)(v88, v39);
          std::__shared_weak_count::__release_weak(v88);
        }
      }
      ++v73;
      v72 = *v5;
    }
    while (v73 < (v5[1] - *v5) >> 4);
  }
  if (v69)
  {
    v91 = (unint64_t *)&v69->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v69->__on_zero_shared)(v69, v39);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  v104 = v100;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v104);
  v100[0] = (void **)v101;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v100);
}

void sub_1915F819C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  *(_QWORD *)(v25 - 104) = &a22;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 104));
  a22 = (void **)&a25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a22);
  _Unwind_Resume(a1);
}

void *wrapper_kernel<Espresso::gumbel_max_kernel_cpu,Espresso::gumbel_max_params_t>::__set_weight_raw_blob(void *result, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  void *v7;
  int v8;
  uint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::runtime_error *exception;
  unint64_t v15;
  std::runtime_error *v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  std::string v39;
  _QWORD v40[2];
  unsigned __int8 v41;
  _QWORD v42[2];
  unsigned __int8 v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;

  v7 = result;
  v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10)
      return result;
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    v10 = (uint64_t)v7 + 360;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v10, (__int128 *)&v52);
    size = (std::__shared_weak_count *)v52.__r_.__value_.__l.__size_;
    if (v52.__r_.__value_.__l.__size_)
    {
      v12 = (unint64_t *)(v52.__r_.__value_.__l.__size_ + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    if (a5 != 4 * *(int *)(*(_QWORD *)v10 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      v15 = a5;
      v16 = exception;
      std::to_string(&v45, v15);
      v17 = std::string::insert(&v45, 0, "Unexpected size s=");
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      v19 = std::string::append(&v46, "/blob=");
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, 4 * *(int *)(*(_QWORD *)v10 + 8));
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v21 = &v44;
      else
        v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      else
        v22 = v44.__r_.__value_.__l.__size_;
      v23 = std::string::append(&v47, (const std::string::value_type *)v21, v22);
      v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, " @ ");
      if ((v43 & 0x80u) == 0)
        v25 = (const std::string::value_type *)v42;
      else
        v25 = (const std::string::value_type *)v42[0];
      if ((v43 & 0x80u) == 0)
        v26 = v43;
      else
        v26 = v42[1];
      v27 = std::string::append(&v48, v25, v26);
      v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      v29 = std::string::append(&v49, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v40, ":");
      if ((v41 & 0x80u) == 0)
        v31 = (const std::string::value_type *)v40;
      else
        v31 = (const std::string::value_type *)v40[0];
      if ((v41 & 0x80u) == 0)
        v32 = v41;
      else
        v32 = v40[1];
      v33 = std::string::append(&v50, v31, v32);
      v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, 197);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = &v39;
      else
        v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      else
        v36 = v39.__r_.__value_.__l.__size_;
      v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
      v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v16, &v52);
      __cxa_throw(v16, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    return memcpy(*(void **)(*(_QWORD *)v10 + 16), a4, a5);
  }
  return result;
}

void sub_1915F8554(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  void *v59;
  int v60;
  uint64_t v61;

  if (*(char *)(v61 - 57) < 0)
    operator delete(*(void **)(v61 - 80));
  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v61 - 89) < 0)
    operator delete(*(void **)(v61 - 112));
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v61 - 121) < 0)
    operator delete(*(void **)(v61 - 144));
  if (*(char *)(v61 - 153) < 0)
    operator delete(*(void **)(v61 - 176));
  if (a27 < 0)
    operator delete(a22);
  if (a59 < 0)
    operator delete(a54);
  if (a33 < 0)
    operator delete(a28);
  if (a52 < 0)
    operator delete(a47);
  if (a45 < 0)
    operator delete(a40);
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0)
LABEL_28:
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

BOOL wrapper_kernel<Espresso::gumbel_max_kernel_cpu,Espresso::gumbel_max_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2;

  v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10)
      return 0;
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

const char *Espresso::generic_gumbel_max_kernel::kernel_type_str(Espresso::generic_gumbel_max_kernel *this)
{
  return "gumbel_max";
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::gumbel_max_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

void wrapper_kernel<Espresso::gumbel_max_kernel_cpu,Espresso::gumbel_max_params_t>::convert_layer_data_to_fp32(_QWORD *a1, char **a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v9;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  const void *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  __int128 v43;
  int64x2_t v44;
  char *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  __int128 v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  int64x2_t v59;
  char *v60;
  _QWORD *v61;
  void *__p;
  void *v63;
  __int128 v64;
  const void *v65;
  std::__shared_weak_count *v66;

  if (a3 != a4)
  {
    v9 = a3;
    v12 = a2 + 2;
    while (1)
    {
      v14 = *(const void **)v9;
      v13 = *(std::__shared_weak_count **)(v9 + 8);
      v65 = *(const void **)v9;
      v66 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
      }
      v17 = operator new(0x118uLL);
      v17[1] = 0;
      v17[2] = 0;
      *v17 = &off_1E2DC1868;
      Espresso::blob_cpu::blob_cpu((uint64_t)(v17 + 3), a1);
      *(_QWORD *)&v64 = v17 + 3;
      *((_QWORD *)&v64 + 1) = v17;
      Espresso::abstract_blob_container::shape((char *)&v58, (uint64_t)v14);
      v56 = 0;
      v57 = 0;
      (*(void (**)(_QWORD *, uint64_t *, uint64_t *))(v17[3] + 16))(v17 + 3, &v58, &v56);
      v18 = v57;
      if (v57)
      {
        v19 = (unint64_t *)&v57->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if (__p)
      {
        v63 = __p;
        operator delete(__p);
      }
      if (v65)
      {
        if (v21)
          break;
      }
      v21 = 0;
      v55 = 0;
      if (a5)
        goto LABEL_21;
LABEL_28:
      v27 = v64;
      if (*((_QWORD *)&v64 + 1))
      {
        v28 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v31 = a2[1];
      v30 = (unint64_t)a2[2];
      if ((unint64_t)v31 >= v30)
      {
        v54 = v27;
        v33 = (v31 - *a2) >> 4;
        if ((unint64_t)(v33 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v34 = v30 - (_QWORD)*a2;
        v35 = v34 >> 3;
        if (v34 >> 3 <= (unint64_t)(v33 + 1))
          v35 = v33 + 1;
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0)
          v36 = 0xFFFFFFFFFFFFFFFLL;
        else
          v36 = v35;
        v61 = v12;
        v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v36);
        v39 = &v37[16 * v33];
        *(_OWORD *)v39 = v54;
        v41 = *a2;
        v40 = a2[1];
        if (v40 == *a2)
        {
          v44 = vdupq_n_s64((unint64_t)v40);
          v42 = &v37[16 * v33];
        }
        else
        {
          v42 = &v37[16 * v33];
          do
          {
            v43 = *((_OWORD *)v40 - 1);
            v40 -= 16;
            *((_OWORD *)v42 - 1) = v43;
            v42 -= 16;
            *(_QWORD *)v40 = 0;
            *((_QWORD *)v40 + 1) = 0;
          }
          while (v40 != v41);
          v44 = *(int64x2_t *)a2;
        }
        v32 = v39 + 16;
        *a2 = v42;
        a2[1] = v39 + 16;
        v59 = v44;
        v45 = a2[2];
        a2[2] = &v37[16 * v38];
        v60 = v45;
        v58 = v44.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v58);
      }
      else
      {
        *(_OWORD *)v31 = v27;
        v32 = v31 + 16;
      }
      a2[1] = v32;
      if (v55)
      {
        v46 = (unint64_t *)&v55->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      v48 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
      if (*((_QWORD *)&v64 + 1))
      {
        v49 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      v51 = v66;
      if (v66)
      {
        v52 = (unint64_t *)&v66->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v9 += 16;
      if (v9 == a4)
        return;
    }
    v55 = v66;
    if (v66)
    {
      v22 = (unint64_t *)&v66->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    if (!a5)
      goto LABEL_28;
LABEL_21:
    if (a6)
    {
      v58 = 0;
      v59.i64[0] = 0;
      (*(void (**)(void *, uint64_t *, uint64_t))(*(_QWORD *)v21 + 40))(v21, &v58, v64 + 160);
      v24 = (std::__shared_weak_count *)v59.i64[0];
      if (v59.i64[0])
      {
        v25 = (unint64_t *)(v59.i64[0] + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v21, v64 + 160, 1.0);
    }
    goto LABEL_28;
  }
}

void sub_1915F8AC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::gumbel_max_kernel_cpu,Espresso::gumbel_max_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB4CC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::gumbel_max_kernel_cpu,Espresso::gumbel_max_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB4CC0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::gumbel_max_kernel_cpu,Espresso::gumbel_max_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_55@<Q0>(uint64_t *a1@<X1>, __n128 *a2@<X8>)
{
  _QWORD *v4;
  __n128 result;

  v4 = operator new(0x170uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_1E2DB5158;
  Espresso::base_kernel::base_kernel((uint64_t)(v4 + 3), a1);
  v4[39] = 0;
  v4[40] = 0;
  v4[41] = 0;
  v4[3] = &off_1E2D540D8;
  *((_OWORD *)v4 + 21) = 0u;
  *((_OWORD *)v4 + 22) = 0u;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v4 + 42, *a1, a1[1]);
  result.n128_u64[0] = (unint64_t)(v4 + 3);
  result.n128_u64[1] = (unint64_t)v4;
  *a2 = result;
  return result;
}

void sub_1915F8C14(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::generic_phi_virtual_kernel,Espresso::phi_virtual_params_t>::~wrapper_kernel(void **a1)
{
  *a1 = &off_1E2D540D8;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 41));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 39));
  Espresso::generic_phi_virtual_kernel::~generic_phi_virtual_kernel(a1);
}

{
  *a1 = &off_1E2D540D8;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 41));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 39));
  Espresso::generic_phi_virtual_kernel::~generic_phi_virtual_kernel(a1);
  JUMPOUT(0x19401CD90);
}

void wrapper_kernel<Espresso::generic_phi_virtual_kernel,Espresso::phi_virtual_params_t>::__launch(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v5;
  _BOOL4 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  float *v31;
  vDSP_Length v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  __n128 v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  void **v44;
  void **v45;
  void **v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  int *v52;
  float *v53;
  vDSP_Length v54;
  int *v55;
  int v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  vDSP_Length v60;
  vDSP_Length v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  const void *v74;
  void **v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  void **v80;
  const void *v81;
  void *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  _QWORD *v94;
  uint64_t *v95;
  std::__shared_weak_count *v96;
  float __B;
  _QWORD v98[2];
  _QWORD v99[2];
  void **v100[3];
  char *v101[3];
  void *v102;
  std::__shared_weak_count *v103;
  void ***v104;
  std::__shared_weak_count *v105;

  v5 = a3;
  memset(v101, 0, sizeof(v101));
  memset(v100, 0, sizeof(v100));
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)*a3 + 32))(*(_QWORD *)*a3))
    v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)*v5 + 32))(*(_QWORD *)*v5) == 1;
  else
    v7 = 1;
  v8 = (std::__shared_weak_count *)a1[40];
  v99[0] = a1[39];
  v99[1] = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  wrapper_kernel<Espresso::generic_phi_virtual_kernel,Espresso::phi_virtual_params_t>::convert_layer_data_to_fp32(v99, v101, *a4, a4[1], 1, v7);
  if (v8)
  {
    v11 = (unint64_t *)&v8->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v13 = (std::__shared_weak_count *)a1[40];
  v98[0] = a1[39];
  v98[1] = v13;
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  wrapper_kernel<Espresso::generic_phi_virtual_kernel,Espresso::phi_virtual_params_t>::convert_layer_data_to_fp32(v98, (char **)v100, *v5, v5[1], 0, 0);
  if (v13)
  {
    v17 = (unint64_t *)&v13->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v19 = *a4;
  if (a4[1] != *a4)
  {
    v20 = 0;
    do
    {
      if (!v7
        && (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v19 + 16 * v20) + 32))(*(_QWORD *)(v19 + 16 * v20))
         || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(*a4 + 16 * v20) + 32))(*(_QWORD *)(*a4 + 16 * v20)) == 1))
      {
        __B = *(float *)(*(_QWORD *)(*a4 + 16 * v20) + 112);
        v21 = &v101[0][16 * v20];
        v104 = (void ***)v22;
        v23 = (std::__shared_weak_count *)*((_QWORD *)v21 + 1);
        v105 = v23;
        if (v23)
        {
          v24 = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
        }
        v26 = *((_QWORD *)v22 + 20);
        v27 = (std::__shared_weak_count *)*((_QWORD *)v22 + 21);
        v102 = (void *)v26;
        v103 = v27;
        if (v27)
        {
          v28 = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldxr(v28);
          while (__stxr(v29 + 1, v28));
        }
        v30 = 0;
        v31 = *(float **)(v26 + 24);
        v32 = *(int *)(v26 + 8);
        v33 = v26 + 12;
        do
        {
          v32 *= *(int *)(v33 + v30);
          v30 += 4;
        }
        while (v30 != 12);
        vDSP_vsmul(v31, 1, &__B, v31, 1, v32);
        if (v27)
        {
          v34 = (unint64_t *)&v27->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        v36 = v105;
        if (v105)
        {
          v37 = (unint64_t *)&v105->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
      }
      ++v20;
      v19 = *a4;
    }
    while (v20 < (a4[1] - *a4) >> 4);
  }
  Espresso::generic_phi_virtual_kernel::__launch((uint64_t)a1, v16, v100, v101);
  v40 = a1[41];
  if (v40)
  {
    v41 = (std::__shared_weak_count *)a1[42];
    v96 = v41;
    if (v41)
    {
      v42 = (unint64_t *)&v41->__shared_owners_;
      do
        v43 = __ldxr(v42);
      while (__stxr(v43 + 1, v42));
    }
    v44 = v100[0];
    if (*v100[0]
    {
      v46 = v45;
      v47 = (std::__shared_weak_count *)v44[1];
      v104 = (void ***)v45;
      v105 = v47;
      if (v47)
      {
        v48 = (unint64_t *)&v47->__shared_owners_;
        do
          v49 = __ldxr(v48);
        while (__stxr(v49 + 1, v48));
      }
    }
    else
    {
      v47 = 0;
      v46 = 0;
      v104 = 0;
      v105 = 0;
    }
    LODWORD(v50) = *(_DWORD *)(v40 + 8);
    v94 = a1;
    v95 = v5;
    v93 = v47;
    if ((_DWORD)v50 == 1)
    {
      v51 = 0;
      v52 = (int *)v46[20];
      v53 = (float *)*((_QWORD *)v52 + 3);
      v54 = v52[2];
      v55 = v52 + 3;
      do
        v54 *= v55[v51++];
      while (v51 != 3);
      vDSP_vsmul(v53, 1, *(const float **)(v40 + 16), v53, 1, v54);
    }
    else
    {
      v56 = *((_DWORD *)v46 + 4);
      if ((_DWORD)v50 != v56)
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v50, v56);
      v57 = *((_DWORD *)v46 + 5);
      if (v57)
      {
        v58 = 0;
        v59 = 0;
        v60 = *((int *)v46 + 2) * (uint64_t)*((int *)v46 + 3);
        v61 = 4 * (int)v50 * v60;
        do
        {
          if ((_DWORD)v50)
          {
            v62 = 0;
            v63 = 0;
            v64 = v58;
            do
            {
              vDSP_vsmul((const float *)(*((_QWORD *)v46[20] + 3) + v64), 1, (const float *)(*(_QWORD *)(v40 + 16) + v62), (float *)(*((_QWORD *)v46[20] + 3) + v64), 1, v60);
              ++v63;
              v50 = *((int *)v46 + 4);
              v62 += 4;
              v64 += 4 * v60;
            }
            while (v63 < v50);
            v57 = *((_DWORD *)v46 + 5);
          }
          ++v59;
          v58 += v61;
        }
        while (v59 < v57);
      }
    }
    a1 = v94;
    v5 = v95;
    if (v93)
    {
      v65 = (unint64_t *)&v93->__shared_owners_;
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 - 1, v65));
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
        std::__shared_weak_count::__release_weak(v93);
      }
    }
    if (v96)
    {
      v67 = (unint64_t *)&v96->__shared_owners_;
      do
        v68 = __ldaxr(v67);
      while (__stlxr(v68 - 1, v67));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
        std::__shared_weak_count::__release_weak(v96);
      }
    }
  }
  v69 = (std::__shared_weak_count *)a1[40];
  if (v69)
  {
    v70 = (unint64_t *)&v69->__shared_owners_;
    do
      v71 = __ldxr(v70);
    while (__stxr(v71 + 1, v70));
  }
  v72 = *v5;
  if (v5[1] != *v5)
  {
    v73 = 0;
    do
    {
      v74 = *(const void **)(v72 + 16 * v73);
      if (v74
      {
        v76 = (uint64_t)v75;
        v104 = (void ***)v75;
        v77 = *(std::__shared_weak_count **)(v72 + 16 * v73 + 8);
        v105 = v77;
        if (v77)
        {
          v78 = (unint64_t *)&v77->__shared_owners_;
          do
            v79 = __ldxr(v78);
          while (__stxr(v79 + 1, v78));
        }
      }
      else
      {
        v76 = 0;
        v104 = 0;
        v105 = 0;
      }
      v80 = v100[0];
      v81 = v100[0][2 * v73];
      if (v81
      {
        v102 = v82;
        v83 = (std::__shared_weak_count *)v80[2 * v73 + 1];
        v103 = v83;
        if (v83)
        {
          v84 = (unint64_t *)&v83->__shared_owners_;
          do
            v85 = __ldxr(v84);
          while (__stxr(v85 + 1, v84));
        }
      }
      else
      {
        v83 = 0;
        v82 = 0;
        v102 = 0;
        v103 = 0;
      }
      v39.n128_u64[0] = Espresso::QuantSimEngine::blob_container::copy_from_fp32(v76, (uint64_t)v82 + 160, 1.0);
      if (v83)
      {
        v86 = (unint64_t *)&v83->__shared_owners_;
        do
          v87 = __ldaxr(v86);
        while (__stlxr(v87 - 1, v86));
        if (!v87)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v83->__on_zero_shared)(v83, v39);
          std::__shared_weak_count::__release_weak(v83);
        }
      }
      v88 = v105;
      if (v105)
      {
        v89 = (unint64_t *)&v105->__shared_owners_;
        do
          v90 = __ldaxr(v89);
        while (__stlxr(v90 - 1, v89));
        if (!v90)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v88->__on_zero_shared)(v88, v39);
          std::__shared_weak_count::__release_weak(v88);
        }
      }
      ++v73;
      v72 = *v5;
    }
    while (v73 < (v5[1] - *v5) >> 4);
  }
  if (v69)
  {
    v91 = (unint64_t *)&v69->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v69->__on_zero_shared)(v69, v39);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  v104 = v100;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v104);
  v100[0] = (void **)v101;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v100);
}

void sub_1915F9384(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  *(_QWORD *)(v25 - 104) = &a22;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 104));
  a22 = (void **)&a25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a22);
  _Unwind_Resume(a1);
}

void *wrapper_kernel<Espresso::generic_phi_virtual_kernel,Espresso::phi_virtual_params_t>::__set_weight_raw_blob(void *result, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  void *v7;
  int v8;
  uint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::runtime_error *exception;
  unint64_t v15;
  std::runtime_error *v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  std::string v39;
  _QWORD v40[2];
  unsigned __int8 v41;
  _QWORD v42[2];
  unsigned __int8 v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;

  v7 = result;
  v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10)
      return result;
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    v10 = (uint64_t)v7 + 328;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v10, (__int128 *)&v52);
    size = (std::__shared_weak_count *)v52.__r_.__value_.__l.__size_;
    if (v52.__r_.__value_.__l.__size_)
    {
      v12 = (unint64_t *)(v52.__r_.__value_.__l.__size_ + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    if (a5 != 4 * *(int *)(*(_QWORD *)v10 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      v15 = a5;
      v16 = exception;
      std::to_string(&v45, v15);
      v17 = std::string::insert(&v45, 0, "Unexpected size s=");
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      v19 = std::string::append(&v46, "/blob=");
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, 4 * *(int *)(*(_QWORD *)v10 + 8));
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v21 = &v44;
      else
        v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      else
        v22 = v44.__r_.__value_.__l.__size_;
      v23 = std::string::append(&v47, (const std::string::value_type *)v21, v22);
      v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, " @ ");
      if ((v43 & 0x80u) == 0)
        v25 = (const std::string::value_type *)v42;
      else
        v25 = (const std::string::value_type *)v42[0];
      if ((v43 & 0x80u) == 0)
        v26 = v43;
      else
        v26 = v42[1];
      v27 = std::string::append(&v48, v25, v26);
      v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      v29 = std::string::append(&v49, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v40, ":");
      if ((v41 & 0x80u) == 0)
        v31 = (const std::string::value_type *)v40;
      else
        v31 = (const std::string::value_type *)v40[0];
      if ((v41 & 0x80u) == 0)
        v32 = v41;
      else
        v32 = v40[1];
      v33 = std::string::append(&v50, v31, v32);
      v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, 197);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = &v39;
      else
        v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      else
        v36 = v39.__r_.__value_.__l.__size_;
      v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
      v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v16, &v52);
      __cxa_throw(v16, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    return memcpy(*(void **)(*(_QWORD *)v10 + 16), a4, a5);
  }
  return result;
}

void sub_1915F973C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  void *v59;
  int v60;
  uint64_t v61;

  if (*(char *)(v61 - 57) < 0)
    operator delete(*(void **)(v61 - 80));
  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v61 - 89) < 0)
    operator delete(*(void **)(v61 - 112));
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v61 - 121) < 0)
    operator delete(*(void **)(v61 - 144));
  if (*(char *)(v61 - 153) < 0)
    operator delete(*(void **)(v61 - 176));
  if (a27 < 0)
    operator delete(a22);
  if (a59 < 0)
    operator delete(a54);
  if (a33 < 0)
    operator delete(a28);
  if (a52 < 0)
    operator delete(a47);
  if (a45 < 0)
    operator delete(a40);
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0)
LABEL_28:
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

BOOL wrapper_kernel<Espresso::generic_phi_virtual_kernel,Espresso::phi_virtual_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2;

  v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10)
      return 0;
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

const char *Espresso::generic_phi_virtual_kernel::kernel_type_str(Espresso::generic_phi_virtual_kernel *this)
{
  return "phi_virtual";
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::phi_virtual_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

void wrapper_kernel<Espresso::generic_phi_virtual_kernel,Espresso::phi_virtual_params_t>::convert_layer_data_to_fp32(_QWORD *a1, char **a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v9;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  const void *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  __int128 v43;
  int64x2_t v44;
  char *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  __int128 v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  int64x2_t v59;
  char *v60;
  _QWORD *v61;
  void *__p;
  void *v63;
  __int128 v64;
  const void *v65;
  std::__shared_weak_count *v66;

  if (a3 != a4)
  {
    v9 = a3;
    v12 = a2 + 2;
    while (1)
    {
      v14 = *(const void **)v9;
      v13 = *(std::__shared_weak_count **)(v9 + 8);
      v65 = *(const void **)v9;
      v66 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
      }
      v17 = operator new(0x118uLL);
      v17[1] = 0;
      v17[2] = 0;
      *v17 = &off_1E2DC1868;
      Espresso::blob_cpu::blob_cpu((uint64_t)(v17 + 3), a1);
      *(_QWORD *)&v64 = v17 + 3;
      *((_QWORD *)&v64 + 1) = v17;
      Espresso::abstract_blob_container::shape((char *)&v58, (uint64_t)v14);
      v56 = 0;
      v57 = 0;
      (*(void (**)(_QWORD *, uint64_t *, uint64_t *))(v17[3] + 16))(v17 + 3, &v58, &v56);
      v18 = v57;
      if (v57)
      {
        v19 = (unint64_t *)&v57->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if (__p)
      {
        v63 = __p;
        operator delete(__p);
      }
      if (v65)
      {
        if (v21)
          break;
      }
      v21 = 0;
      v55 = 0;
      if (a5)
        goto LABEL_21;
LABEL_28:
      v27 = v64;
      if (*((_QWORD *)&v64 + 1))
      {
        v28 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v31 = a2[1];
      v30 = (unint64_t)a2[2];
      if ((unint64_t)v31 >= v30)
      {
        v54 = v27;
        v33 = (v31 - *a2) >> 4;
        if ((unint64_t)(v33 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v34 = v30 - (_QWORD)*a2;
        v35 = v34 >> 3;
        if (v34 >> 3 <= (unint64_t)(v33 + 1))
          v35 = v33 + 1;
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0)
          v36 = 0xFFFFFFFFFFFFFFFLL;
        else
          v36 = v35;
        v61 = v12;
        v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v36);
        v39 = &v37[16 * v33];
        *(_OWORD *)v39 = v54;
        v41 = *a2;
        v40 = a2[1];
        if (v40 == *a2)
        {
          v44 = vdupq_n_s64((unint64_t)v40);
          v42 = &v37[16 * v33];
        }
        else
        {
          v42 = &v37[16 * v33];
          do
          {
            v43 = *((_OWORD *)v40 - 1);
            v40 -= 16;
            *((_OWORD *)v42 - 1) = v43;
            v42 -= 16;
            *(_QWORD *)v40 = 0;
            *((_QWORD *)v40 + 1) = 0;
          }
          while (v40 != v41);
          v44 = *(int64x2_t *)a2;
        }
        v32 = v39 + 16;
        *a2 = v42;
        a2[1] = v39 + 16;
        v59 = v44;
        v45 = a2[2];
        a2[2] = &v37[16 * v38];
        v60 = v45;
        v58 = v44.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v58);
      }
      else
      {
        *(_OWORD *)v31 = v27;
        v32 = v31 + 16;
      }
      a2[1] = v32;
      if (v55)
      {
        v46 = (unint64_t *)&v55->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      v48 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
      if (*((_QWORD *)&v64 + 1))
      {
        v49 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      v51 = v66;
      if (v66)
      {
        v52 = (unint64_t *)&v66->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v9 += 16;
      if (v9 == a4)
        return;
    }
    v55 = v66;
    if (v66)
    {
      v22 = (unint64_t *)&v66->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    if (!a5)
      goto LABEL_28;
LABEL_21:
    if (a6)
    {
      v58 = 0;
      v59.i64[0] = 0;
      (*(void (**)(void *, uint64_t *, uint64_t))(*(_QWORD *)v21 + 40))(v21, &v58, v64 + 160);
      v24 = (std::__shared_weak_count *)v59.i64[0];
      if (v59.i64[0])
      {
        v25 = (unint64_t *)(v59.i64[0] + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v21, v64 + 160, 1.0);
    }
    goto LABEL_28;
  }
}

void sub_1915F9CAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::generic_phi_virtual_kernel,Espresso::phi_virtual_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB5158;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::generic_phi_virtual_kernel,Espresso::phi_virtual_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB5158;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::generic_phi_virtual_kernel,Espresso::phi_virtual_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_54@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  __n128 result;

  v6 = (char *)operator new(0x188uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DB5190;
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((_QWORD *)v6 + 3) = &off_1E2D54230;
  *(_OWORD *)(v6 + 328) = 0u;
  *(_OWORD *)(v6 + 344) = 0u;
  *((_OWORD *)v6 + 19) = *(_OWORD *)a2;
  *((_DWORD *)v6 + 80) = *(_DWORD *)(a2 + 16);
  *(_OWORD *)(v6 + 360) = 0u;
  *(_OWORD *)(v6 + 376) = 0u;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v6 + 45, *a1, a1[1]);
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1915F9E18(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::instancenorm_1d_kernel_cpu,Espresso::instancenorm_1d_params_t>::~wrapper_kernel(Espresso::generic_instancenorm_1d_kernel *a1)
{
  *(_QWORD *)a1 = &off_1E2D54230;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 352);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 336);
  Espresso::generic_instancenorm_1d_kernel::~generic_instancenorm_1d_kernel(a1);
}

{
  *(_QWORD *)a1 = &off_1E2D54230;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 352);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 336);
  Espresso::generic_instancenorm_1d_kernel::~generic_instancenorm_1d_kernel(a1);
  JUMPOUT(0x19401CD90);
}

void wrapper_kernel<Espresso::instancenorm_1d_kernel_cpu,Espresso::instancenorm_1d_params_t>::__launch(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v5;
  _BOOL4 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  void *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  float *v37;
  vDSP_Length v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  __n128 v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  void **v50;
  void **v51;
  void **v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  int *v58;
  float *v59;
  vDSP_Length v60;
  int *v61;
  int v62;
  int v63;
  uint64_t v64;
  unint64_t v65;
  vDSP_Length v66;
  vDSP_Length v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  const void *v80;
  void **v81;
  uint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  void **v86;
  const void *v87;
  void *v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  unint64_t *v97;
  unint64_t v98;
  std::__shared_weak_count *v99;
  _QWORD *v100;
  uint64_t *v101;
  std::__shared_weak_count *v102;
  float __B;
  _QWORD v104[2];
  _QWORD v105[2];
  void **v106[3];
  char *v107[3];
  void *v108;
  std::__shared_weak_count *v109;
  void ***v110;
  std::__shared_weak_count *v111;

  v5 = a3;
  memset(v107, 0, sizeof(v107));
  memset(v106, 0, sizeof(v106));
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)*a3 + 32))(*(_QWORD *)*a3))
    v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)*v5 + 32))(*(_QWORD *)*v5) == 1;
  else
    v7 = 1;
  v8 = (std::__shared_weak_count *)a1[43];
  v105[0] = a1[42];
  v105[1] = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  wrapper_kernel<Espresso::instancenorm_1d_kernel_cpu,Espresso::instancenorm_1d_params_t>::convert_layer_data_to_fp32(v105, v107, *a4, a4[1], 1, v7);
  if (v8)
  {
    v11 = (unint64_t *)&v8->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v13 = (std::__shared_weak_count *)a1[43];
  v104[0] = a1[42];
  v104[1] = v13;
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  wrapper_kernel<Espresso::instancenorm_1d_kernel_cpu,Espresso::instancenorm_1d_params_t>::convert_layer_data_to_fp32(v104, (char **)v106, *v5, v5[1], 0, 0);
  if (v13)
  {
    v23 = (unint64_t *)&v13->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v25 = *a4;
  if (a4[1] != *a4)
  {
    v26 = 0;
    do
    {
      if (!v7
        && (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v25 + 16 * v26) + 32))(*(_QWORD *)(v25 + 16 * v26))
         || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(*a4 + 16 * v26) + 32))(*(_QWORD *)(*a4 + 16 * v26)) == 1))
      {
        __B = *(float *)(*(_QWORD *)(*a4 + 16 * v26) + 112);
        v27 = &v107[0][16 * v26];
        v110 = (void ***)v28;
        v29 = (std::__shared_weak_count *)*((_QWORD *)v27 + 1);
        v111 = v29;
        if (v29)
        {
          v30 = (unint64_t *)&v29->__shared_owners_;
          do
            v31 = __ldxr(v30);
          while (__stxr(v31 + 1, v30));
        }
        v32 = *((_QWORD *)v28 + 20);
        v33 = (std::__shared_weak_count *)*((_QWORD *)v28 + 21);
        v108 = (void *)v32;
        v109 = v33;
        if (v33)
        {
          v34 = (unint64_t *)&v33->__shared_owners_;
          do
            v35 = __ldxr(v34);
          while (__stxr(v35 + 1, v34));
        }
        v36 = 0;
        v37 = *(float **)(v32 + 24);
        v38 = *(int *)(v32 + 8);
        v39 = v32 + 12;
        do
        {
          v38 *= *(int *)(v39 + v36);
          v36 += 4;
        }
        while (v36 != 12);
        vDSP_vsmul(v37, 1, &__B, v37, 1, v38);
        if (v33)
        {
          v40 = (unint64_t *)&v33->__shared_owners_;
          do
            v41 = __ldaxr(v40);
          while (__stlxr(v41 - 1, v40));
          if (!v41)
          {
            ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
            std::__shared_weak_count::__release_weak(v33);
          }
        }
        v42 = v111;
        if (v111)
        {
          v43 = (unint64_t *)&v111->__shared_owners_;
          do
            v44 = __ldaxr(v43);
          while (__stlxr(v44 - 1, v43));
          if (!v44)
          {
            ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
            std::__shared_weak_count::__release_weak(v42);
          }
        }
      }
      ++v26;
      v25 = *a4;
    }
    while (v26 < (a4[1] - *a4) >> 4);
  }
  Espresso::instancenorm_1d_kernel_cpu::__launch((uint64_t)a1, v17, v18, v19, v20, v21, v22, v16, (uint64_t **)v106, (uint64_t **)v107);
  v46 = a1[44];
  if (v46)
  {
    v47 = (std::__shared_weak_count *)a1[45];
    v102 = v47;
    if (v47)
    {
      v48 = (unint64_t *)&v47->__shared_owners_;
      do
        v49 = __ldxr(v48);
      while (__stxr(v49 + 1, v48));
    }
    v50 = v106[0];
    if (*v106[0]
    {
      v52 = v51;
      v53 = (std::__shared_weak_count *)v50[1];
      v110 = (void ***)v51;
      v111 = v53;
      if (v53)
      {
        v54 = (unint64_t *)&v53->__shared_owners_;
        do
          v55 = __ldxr(v54);
        while (__stxr(v55 + 1, v54));
      }
    }
    else
    {
      v53 = 0;
      v52 = 0;
      v110 = 0;
      v111 = 0;
    }
    LODWORD(v56) = *(_DWORD *)(v46 + 8);
    v100 = a1;
    v101 = v5;
    v99 = v53;
    if ((_DWORD)v56 == 1)
    {
      v57 = 0;
      v58 = (int *)v52[20];
      v59 = (float *)*((_QWORD *)v58 + 3);
      v60 = v58[2];
      v61 = v58 + 3;
      do
        v60 *= v61[v57++];
      while (v57 != 3);
      vDSP_vsmul(v59, 1, *(const float **)(v46 + 16), v59, 1, v60);
    }
    else
    {
      v62 = *((_DWORD *)v52 + 4);
      if ((_DWORD)v56 != v62)
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v56, v62);
      v63 = *((_DWORD *)v52 + 5);
      if (v63)
      {
        v64 = 0;
        v65 = 0;
        v66 = *((int *)v52 + 2) * (uint64_t)*((int *)v52 + 3);
        v67 = 4 * (int)v56 * v66;
        do
        {
          if ((_DWORD)v56)
          {
            v68 = 0;
            v69 = 0;
            v70 = v64;
            do
            {
              vDSP_vsmul((const float *)(*((_QWORD *)v52[20] + 3) + v70), 1, (const float *)(*(_QWORD *)(v46 + 16) + v68), (float *)(*((_QWORD *)v52[20] + 3) + v70), 1, v66);
              ++v69;
              v56 = *((int *)v52 + 4);
              v68 += 4;
              v70 += 4 * v66;
            }
            while (v69 < v56);
            v63 = *((_DWORD *)v52 + 5);
          }
          ++v65;
          v64 += v67;
        }
        while (v65 < v63);
      }
    }
    a1 = v100;
    v5 = v101;
    if (v99)
    {
      v71 = (unint64_t *)&v99->__shared_owners_;
      do
        v72 = __ldaxr(v71);
      while (__stlxr(v72 - 1, v71));
      if (!v72)
      {
        ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
        std::__shared_weak_count::__release_weak(v99);
      }
    }
    if (v102)
    {
      v73 = (unint64_t *)&v102->__shared_owners_;
      do
        v74 = __ldaxr(v73);
      while (__stlxr(v74 - 1, v73));
      if (!v74)
      {
        ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
        std::__shared_weak_count::__release_weak(v102);
      }
    }
  }
  v75 = (std::__shared_weak_count *)a1[43];
  if (v75)
  {
    v76 = (unint64_t *)&v75->__shared_owners_;
    do
      v77 = __ldxr(v76);
    while (__stxr(v77 + 1, v76));
  }
  v78 = *v5;
  if (v5[1] != *v5)
  {
    v79 = 0;
    do
    {
      v80 = *(const void **)(v78 + 16 * v79);
      if (v80
      {
        v82 = (uint64_t)v81;
        v110 = (void ***)v81;
        v83 = *(std::__shared_weak_count **)(v78 + 16 * v79 + 8);
        v111 = v83;
        if (v83)
        {
          v84 = (unint64_t *)&v83->__shared_owners_;
          do
            v85 = __ldxr(v84);
          while (__stxr(v85 + 1, v84));
        }
      }
      else
      {
        v82 = 0;
        v110 = 0;
        v111 = 0;
      }
      v86 = v106[0];
      v87 = v106[0][2 * v79];
      if (v87
      {
        v108 = v88;
        v89 = (std::__shared_weak_count *)v86[2 * v79 + 1];
        v109 = v89;
        if (v89)
        {
          v90 = (unint64_t *)&v89->__shared_owners_;
          do
            v91 = __ldxr(v90);
          while (__stxr(v91 + 1, v90));
        }
      }
      else
      {
        v89 = 0;
        v88 = 0;
        v108 = 0;
        v109 = 0;
      }
      v45.n128_u64[0] = Espresso::QuantSimEngine::blob_container::copy_from_fp32(v82, (uint64_t)v88 + 160, 1.0);
      if (v89)
      {
        v92 = (unint64_t *)&v89->__shared_owners_;
        do
          v93 = __ldaxr(v92);
        while (__stlxr(v93 - 1, v92));
        if (!v93)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v89->__on_zero_shared)(v89, v45);
          std::__shared_weak_count::__release_weak(v89);
        }
      }
      v94 = v111;
      if (v111)
      {
        v95 = (unint64_t *)&v111->__shared_owners_;
        do
          v96 = __ldaxr(v95);
        while (__stlxr(v96 - 1, v95));
        if (!v96)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v94->__on_zero_shared)(v94, v45);
          std::__shared_weak_count::__release_weak(v94);
        }
      }
      ++v79;
      v78 = *v5;
    }
    while (v79 < (v5[1] - *v5) >> 4);
  }
  if (v75)
  {
    v97 = (unint64_t *)&v75->__shared_owners_;
    do
      v98 = __ldaxr(v97);
    while (__stlxr(v98 - 1, v97));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v75->__on_zero_shared)(v75, v45);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  v110 = v106;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v110);
  v106[0] = (void **)v107;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v106);
}

void sub_1915FA588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  *(_QWORD *)(v25 - 104) = &a22;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 104));
  a22 = (void **)&a25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a22);
  _Unwind_Resume(a1);
}

void *wrapper_kernel<Espresso::instancenorm_1d_kernel_cpu,Espresso::instancenorm_1d_params_t>::__set_weight_raw_blob(void *a1, uint64_t a2, uint64_t *a3, const void *a4, unint64_t a5)
{
  uint64_t *v7;
  void *result;
  int v10;
  uint64_t v12;
  std::__shared_weak_count *size;
  unint64_t *v14;
  unint64_t v15;
  std::runtime_error *exception;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  std::string v39;
  _QWORD v40[2];
  unsigned __int8 v41;
  _QWORD v42[2];
  unsigned __int8 v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;

  v7 = a3;
  result = Espresso::generic_instancenorm_1d_kernel::__set_weight_raw_blob(a1, a2, a3, a4, a5);
  v10 = *((char *)v7 + 23);
  if (v10 < 0)
  {
    if (v7[1] != 10)
      return result;
    v7 = (uint64_t *)*v7;
  }
  else if (v10 != 10)
  {
    return result;
  }
  if (*v7 == 0x6163735F74736F70 && *((_WORD *)v7 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    v12 = (uint64_t)a1 + 352;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v12, (__int128 *)&v52);
    size = (std::__shared_weak_count *)v52.__r_.__value_.__l.__size_;
    if (v52.__r_.__value_.__l.__size_)
    {
      v14 = (unint64_t *)(v52.__r_.__value_.__l.__size_ + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    if (a5 != 4 * *(int *)(*(_QWORD *)v12 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v45, a5);
      v17 = std::string::insert(&v45, 0, "Unexpected size s=");
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      v19 = std::string::append(&v46, "/blob=");
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, 4 * *(int *)(*(_QWORD *)v12 + 8));
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v21 = &v44;
      else
        v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      else
        v22 = v44.__r_.__value_.__l.__size_;
      v23 = std::string::append(&v47, (const std::string::value_type *)v21, v22);
      v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, " @ ");
      if ((v43 & 0x80u) == 0)
        v25 = (const std::string::value_type *)v42;
      else
        v25 = (const std::string::value_type *)v42[0];
      if ((v43 & 0x80u) == 0)
        v26 = v43;
      else
        v26 = v42[1];
      v27 = std::string::append(&v48, v25, v26);
      v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      v29 = std::string::append(&v49, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v40, ":");
      if ((v41 & 0x80u) == 0)
        v31 = (const std::string::value_type *)v40;
      else
        v31 = (const std::string::value_type *)v40[0];
      if ((v41 & 0x80u) == 0)
        v32 = v41;
      else
        v32 = v40[1];
      v33 = std::string::append(&v50, v31, v32);
      v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, 197);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = &v39;
      else
        v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      else
        v36 = v39.__r_.__value_.__l.__size_;
      v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
      v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v52);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    return memcpy(*(void **)(*(_QWORD *)v12 + 16), a4, a5);
  }
  return result;
}

void sub_1915FA944(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  void *v59;
  int v60;
  uint64_t v61;

  if (*(char *)(v61 - 57) < 0)
    operator delete(*(void **)(v61 - 80));
  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v61 - 89) < 0)
    operator delete(*(void **)(v61 - 112));
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v61 - 121) < 0)
    operator delete(*(void **)(v61 - 144));
  if (*(char *)(v61 - 153) < 0)
    operator delete(*(void **)(v61 - 176));
  if (a27 < 0)
    operator delete(a22);
  if (a59 < 0)
    operator delete(a54);
  if (a33 < 0)
    operator delete(a28);
  if (a52 < 0)
    operator delete(a47);
  if (a45 < 0)
    operator delete(a40);
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0)
LABEL_28:
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

BOOL wrapper_kernel<Espresso::instancenorm_1d_kernel_cpu,Espresso::instancenorm_1d_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  int v4;

  v2 = a2;
  if (Espresso::generic_instancenorm_1d_kernel::supports_weight_key(a1, a2))
    return 1;
  v4 = *((char *)v2 + 23);
  if (v4 < 0)
  {
    if (v2[1] != 10)
      return 0;
    v2 = (uint64_t *)*v2;
  }
  else if (v4 != 10)
  {
    return 0;
  }
  return *v2 == 0x6163735F74736F70 && *((_WORD *)v2 + 4) == 25964;
}

void wrapper_kernel<Espresso::instancenorm_1d_kernel_cpu,Espresso::instancenorm_1d_params_t>::convert_layer_data_to_fp32(_QWORD *a1, char **a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v9;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  const void *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  __int128 v43;
  int64x2_t v44;
  char *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  __int128 v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  int64x2_t v59;
  char *v60;
  _QWORD *v61;
  void *__p;
  void *v63;
  __int128 v64;
  const void *v65;
  std::__shared_weak_count *v66;

  if (a3 != a4)
  {
    v9 = a3;
    v12 = a2 + 2;
    while (1)
    {
      v14 = *(const void **)v9;
      v13 = *(std::__shared_weak_count **)(v9 + 8);
      v65 = *(const void **)v9;
      v66 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
      }
      v17 = operator new(0x118uLL);
      v17[1] = 0;
      v17[2] = 0;
      *v17 = &off_1E2DC1868;
      Espresso::blob_cpu::blob_cpu((uint64_t)(v17 + 3), a1);
      *(_QWORD *)&v64 = v17 + 3;
      *((_QWORD *)&v64 + 1) = v17;
      Espresso::abstract_blob_container::shape((char *)&v58, (uint64_t)v14);
      v56 = 0;
      v57 = 0;
      (*(void (**)(_QWORD *, uint64_t *, uint64_t *))(v17[3] + 16))(v17 + 3, &v58, &v56);
      v18 = v57;
      if (v57)
      {
        v19 = (unint64_t *)&v57->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if (__p)
      {
        v63 = __p;
        operator delete(__p);
      }
      if (v65)
      {
        if (v21)
          break;
      }
      v21 = 0;
      v55 = 0;
      if (a5)
        goto LABEL_21;
LABEL_28:
      v27 = v64;
      if (*((_QWORD *)&v64 + 1))
      {
        v28 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v31 = a2[1];
      v30 = (unint64_t)a2[2];
      if ((unint64_t)v31 >= v30)
      {
        v54 = v27;
        v33 = (v31 - *a2) >> 4;
        if ((unint64_t)(v33 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v34 = v30 - (_QWORD)*a2;
        v35 = v34 >> 3;
        if (v34 >> 3 <= (unint64_t)(v33 + 1))
          v35 = v33 + 1;
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0)
          v36 = 0xFFFFFFFFFFFFFFFLL;
        else
          v36 = v35;
        v61 = v12;
        v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v36);
        v39 = &v37[16 * v33];
        *(_OWORD *)v39 = v54;
        v41 = *a2;
        v40 = a2[1];
        if (v40 == *a2)
        {
          v44 = vdupq_n_s64((unint64_t)v40);
          v42 = &v37[16 * v33];
        }
        else
        {
          v42 = &v37[16 * v33];
          do
          {
            v43 = *((_OWORD *)v40 - 1);
            v40 -= 16;
            *((_OWORD *)v42 - 1) = v43;
            v42 -= 16;
            *(_QWORD *)v40 = 0;
            *((_QWORD *)v40 + 1) = 0;
          }
          while (v40 != v41);
          v44 = *(int64x2_t *)a2;
        }
        v32 = v39 + 16;
        *a2 = v42;
        a2[1] = v39 + 16;
        v59 = v44;
        v45 = a2[2];
        a2[2] = &v37[16 * v38];
        v60 = v45;
        v58 = v44.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v58);
      }
      else
      {
        *(_OWORD *)v31 = v27;
        v32 = v31 + 16;
      }
      a2[1] = v32;
      if (v55)
      {
        v46 = (unint64_t *)&v55->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      v48 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
      if (*((_QWORD *)&v64 + 1))
      {
        v49 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      v51 = v66;
      if (v66)
      {
        v52 = (unint64_t *)&v66->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v9 += 16;
      if (v9 == a4)
        return;
    }
    v55 = v66;
    if (v66)
    {
      v22 = (unint64_t *)&v66->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    if (!a5)
      goto LABEL_28;
LABEL_21:
    if (a6)
    {
      v58 = 0;
      v59.i64[0] = 0;
      (*(void (**)(void *, uint64_t *, uint64_t))(*(_QWORD *)v21 + 40))(v21, &v58, v64 + 160);
      v24 = (std::__shared_weak_count *)v59.i64[0];
      if (v59.i64[0])
      {
        v25 = (unint64_t *)(v59.i64[0] + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v21, v64 + 160, 1.0);
    }
    goto LABEL_28;
  }
}

void sub_1915FAEC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::instancenorm_1d_kernel_cpu,Espresso::instancenorm_1d_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB5190;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::instancenorm_1d_kernel_cpu,Espresso::instancenorm_1d_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB5190;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::instancenorm_1d_kernel_cpu,Espresso::instancenorm_1d_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_53@<Q0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  uint64_t v7;
  __n128 result;

  v6 = (char *)operator new(0x158uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DB4E80;
  Espresso::multinomial_kernel_cpu::multinomial_kernel_cpu((uint64_t)(v6 + 24), a1, v7, a2);
  *((_QWORD *)v6 + 3) = &off_1E2D52F20;
  *(_OWORD *)(v6 + 312) = 0u;
  *(_OWORD *)(v6 + 328) = 0u;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v6 + 39, *a1, a1[1]);
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1915FB024(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::multinomial_kernel_cpu,Espresso::multinomial_params_t>::~wrapper_kernel(Espresso::base_kernel *a1)
{
  *(_QWORD *)a1 = &off_1E2D52F20;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 304);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 288);
  Espresso::base_kernel::~base_kernel(a1);
}

{
  *(_QWORD *)a1 = &off_1E2D52F20;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 304);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 288);
  Espresso::base_kernel::~base_kernel(a1);
  JUMPOUT(0x19401CD90);
}

void wrapper_kernel<Espresso::multinomial_kernel_cpu,Espresso::multinomial_params_t>::__launch(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v5;
  _BOOL4 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  float *v31;
  vDSP_Length v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  __n128 v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  void **v44;
  void **v45;
  void **v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  int *v52;
  float *v53;
  vDSP_Length v54;
  int *v55;
  int v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  vDSP_Length v60;
  vDSP_Length v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  const void *v74;
  void **v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  void **v80;
  const void *v81;
  void *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  _QWORD *v94;
  uint64_t *v95;
  std::__shared_weak_count *v96;
  float __B;
  _QWORD v98[2];
  _QWORD v99[2];
  void **v100[3];
  char *v101[3];
  void *v102;
  std::__shared_weak_count *v103;
  void ***v104;
  std::__shared_weak_count *v105;

  v5 = a3;
  memset(v101, 0, sizeof(v101));
  memset(v100, 0, sizeof(v100));
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)*a3 + 32))(*(_QWORD *)*a3))
    v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)*v5 + 32))(*(_QWORD *)*v5) == 1;
  else
    v7 = 1;
  v8 = (std::__shared_weak_count *)a1[37];
  v99[0] = a1[36];
  v99[1] = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  wrapper_kernel<Espresso::multinomial_kernel_cpu,Espresso::multinomial_params_t>::convert_layer_data_to_fp32(v99, v101, *a4, a4[1], 1, v7);
  if (v8)
  {
    v11 = (unint64_t *)&v8->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v13 = (std::__shared_weak_count *)a1[37];
  v98[0] = a1[36];
  v98[1] = v13;
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  wrapper_kernel<Espresso::multinomial_kernel_cpu,Espresso::multinomial_params_t>::convert_layer_data_to_fp32(v98, (char **)v100, *v5, v5[1], 0, 0);
  if (v13)
  {
    v17 = (unint64_t *)&v13->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v19 = *a4;
  if (a4[1] != *a4)
  {
    v20 = 0;
    do
    {
      if (!v7
        && (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v19 + 16 * v20) + 32))(*(_QWORD *)(v19 + 16 * v20))
         || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(*a4 + 16 * v20) + 32))(*(_QWORD *)(*a4 + 16 * v20)) == 1))
      {
        __B = *(float *)(*(_QWORD *)(*a4 + 16 * v20) + 112);
        v21 = &v101[0][16 * v20];
        v104 = (void ***)v22;
        v23 = (std::__shared_weak_count *)*((_QWORD *)v21 + 1);
        v105 = v23;
        if (v23)
        {
          v24 = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
        }
        v26 = *((_QWORD *)v22 + 20);
        v27 = (std::__shared_weak_count *)*((_QWORD *)v22 + 21);
        v102 = (void *)v26;
        v103 = v27;
        if (v27)
        {
          v28 = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldxr(v28);
          while (__stxr(v29 + 1, v28));
        }
        v30 = 0;
        v31 = *(float **)(v26 + 24);
        v32 = *(int *)(v26 + 8);
        v33 = v26 + 12;
        do
        {
          v32 *= *(int *)(v33 + v30);
          v30 += 4;
        }
        while (v30 != 12);
        vDSP_vsmul(v31, 1, &__B, v31, 1, v32);
        if (v27)
        {
          v34 = (unint64_t *)&v27->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        v36 = v105;
        if (v105)
        {
          v37 = (unint64_t *)&v105->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
      }
      ++v20;
      v19 = *a4;
    }
    while (v20 < (a4[1] - *a4) >> 4);
  }
  Espresso::multinomial_kernel_cpu::__launch((uint64_t)a1, v16, (uint64_t **)v100, (uint64_t)v101);
  v40 = a1[38];
  if (v40)
  {
    v41 = (std::__shared_weak_count *)a1[39];
    v96 = v41;
    if (v41)
    {
      v42 = (unint64_t *)&v41->__shared_owners_;
      do
        v43 = __ldxr(v42);
      while (__stxr(v43 + 1, v42));
    }
    v44 = v100[0];
    if (*v100[0]
    {
      v46 = v45;
      v47 = (std::__shared_weak_count *)v44[1];
      v104 = (void ***)v45;
      v105 = v47;
      if (v47)
      {
        v48 = (unint64_t *)&v47->__shared_owners_;
        do
          v49 = __ldxr(v48);
        while (__stxr(v49 + 1, v48));
      }
    }
    else
    {
      v47 = 0;
      v46 = 0;
      v104 = 0;
      v105 = 0;
    }
    LODWORD(v50) = *(_DWORD *)(v40 + 8);
    v94 = a1;
    v95 = v5;
    v93 = v47;
    if ((_DWORD)v50 == 1)
    {
      v51 = 0;
      v52 = (int *)v46[20];
      v53 = (float *)*((_QWORD *)v52 + 3);
      v54 = v52[2];
      v55 = v52 + 3;
      do
        v54 *= v55[v51++];
      while (v51 != 3);
      vDSP_vsmul(v53, 1, *(const float **)(v40 + 16), v53, 1, v54);
    }
    else
    {
      v56 = *((_DWORD *)v46 + 4);
      if ((_DWORD)v50 != v56)
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v50, v56);
      v57 = *((_DWORD *)v46 + 5);
      if (v57)
      {
        v58 = 0;
        v59 = 0;
        v60 = *((int *)v46 + 2) * (uint64_t)*((int *)v46 + 3);
        v61 = 4 * (int)v50 * v60;
        do
        {
          if ((_DWORD)v50)
          {
            v62 = 0;
            v63 = 0;
            v64 = v58;
            do
            {
              vDSP_vsmul((const float *)(*((_QWORD *)v46[20] + 3) + v64), 1, (const float *)(*(_QWORD *)(v40 + 16) + v62), (float *)(*((_QWORD *)v46[20] + 3) + v64), 1, v60);
              ++v63;
              v50 = *((int *)v46 + 4);
              v62 += 4;
              v64 += 4 * v60;
            }
            while (v63 < v50);
            v57 = *((_DWORD *)v46 + 5);
          }
          ++v59;
          v58 += v61;
        }
        while (v59 < v57);
      }
    }
    a1 = v94;
    v5 = v95;
    if (v93)
    {
      v65 = (unint64_t *)&v93->__shared_owners_;
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 - 1, v65));
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
        std::__shared_weak_count::__release_weak(v93);
      }
    }
    if (v96)
    {
      v67 = (unint64_t *)&v96->__shared_owners_;
      do
        v68 = __ldaxr(v67);
      while (__stlxr(v68 - 1, v67));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
        std::__shared_weak_count::__release_weak(v96);
      }
    }
  }
  v69 = (std::__shared_weak_count *)a1[37];
  if (v69)
  {
    v70 = (unint64_t *)&v69->__shared_owners_;
    do
      v71 = __ldxr(v70);
    while (__stxr(v71 + 1, v70));
  }
  v72 = *v5;
  if (v5[1] != *v5)
  {
    v73 = 0;
    do
    {
      v74 = *(const void **)(v72 + 16 * v73);
      if (v74
      {
        v76 = (uint64_t)v75;
        v104 = (void ***)v75;
        v77 = *(std::__shared_weak_count **)(v72 + 16 * v73 + 8);
        v105 = v77;
        if (v77)
        {
          v78 = (unint64_t *)&v77->__shared_owners_;
          do
            v79 = __ldxr(v78);
          while (__stxr(v79 + 1, v78));
        }
      }
      else
      {
        v76 = 0;
        v104 = 0;
        v105 = 0;
      }
      v80 = v100[0];
      v81 = v100[0][2 * v73];
      if (v81
      {
        v102 = v82;
        v83 = (std::__shared_weak_count *)v80[2 * v73 + 1];
        v103 = v83;
        if (v83)
        {
          v84 = (unint64_t *)&v83->__shared_owners_;
          do
            v85 = __ldxr(v84);
          while (__stxr(v85 + 1, v84));
        }
      }
      else
      {
        v83 = 0;
        v82 = 0;
        v102 = 0;
        v103 = 0;
      }
      v39.n128_u64[0] = Espresso::QuantSimEngine::blob_container::copy_from_fp32(v76, (uint64_t)v82 + 160, 1.0);
      if (v83)
      {
        v86 = (unint64_t *)&v83->__shared_owners_;
        do
          v87 = __ldaxr(v86);
        while (__stlxr(v87 - 1, v86));
        if (!v87)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v83->__on_zero_shared)(v83, v39);
          std::__shared_weak_count::__release_weak(v83);
        }
      }
      v88 = v105;
      if (v105)
      {
        v89 = (unint64_t *)&v105->__shared_owners_;
        do
          v90 = __ldaxr(v89);
        while (__stlxr(v90 - 1, v89));
        if (!v90)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v88->__on_zero_shared)(v88, v39);
          std::__shared_weak_count::__release_weak(v88);
        }
      }
      ++v73;
      v72 = *v5;
    }
    while (v73 < (v5[1] - *v5) >> 4);
  }
  if (v69)
  {
    v91 = (unint64_t *)&v69->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v69->__on_zero_shared)(v69, v39);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  v104 = v100;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v104);
  v100[0] = (void **)v101;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v100);
}

void sub_1915FB794(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  *(_QWORD *)(v25 - 104) = &a22;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 104));
  a22 = (void **)&a25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a22);
  _Unwind_Resume(a1);
}

void *wrapper_kernel<Espresso::multinomial_kernel_cpu,Espresso::multinomial_params_t>::__set_weight_raw_blob(void *result, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  void *v7;
  int v8;
  uint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::runtime_error *exception;
  unint64_t v15;
  std::runtime_error *v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  std::string v39;
  _QWORD v40[2];
  unsigned __int8 v41;
  _QWORD v42[2];
  unsigned __int8 v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;

  v7 = result;
  v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10)
      return result;
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    v10 = (uint64_t)v7 + 304;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v10, (__int128 *)&v52);
    size = (std::__shared_weak_count *)v52.__r_.__value_.__l.__size_;
    if (v52.__r_.__value_.__l.__size_)
    {
      v12 = (unint64_t *)(v52.__r_.__value_.__l.__size_ + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    if (a5 != 4 * *(int *)(*(_QWORD *)v10 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      v15 = a5;
      v16 = exception;
      std::to_string(&v45, v15);
      v17 = std::string::insert(&v45, 0, "Unexpected size s=");
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      v19 = std::string::append(&v46, "/blob=");
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, 4 * *(int *)(*(_QWORD *)v10 + 8));
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v21 = &v44;
      else
        v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      else
        v22 = v44.__r_.__value_.__l.__size_;
      v23 = std::string::append(&v47, (const std::string::value_type *)v21, v22);
      v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, " @ ");
      if ((v43 & 0x80u) == 0)
        v25 = (const std::string::value_type *)v42;
      else
        v25 = (const std::string::value_type *)v42[0];
      if ((v43 & 0x80u) == 0)
        v26 = v43;
      else
        v26 = v42[1];
      v27 = std::string::append(&v48, v25, v26);
      v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      v29 = std::string::append(&v49, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v40, ":");
      if ((v41 & 0x80u) == 0)
        v31 = (const std::string::value_type *)v40;
      else
        v31 = (const std::string::value_type *)v40[0];
      if ((v41 & 0x80u) == 0)
        v32 = v41;
      else
        v32 = v40[1];
      v33 = std::string::append(&v50, v31, v32);
      v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, 197);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = &v39;
      else
        v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      else
        v36 = v39.__r_.__value_.__l.__size_;
      v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
      v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v16, &v52);
      __cxa_throw(v16, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    return memcpy(*(void **)(*(_QWORD *)v10 + 16), a4, a5);
  }
  return result;
}

void sub_1915FBB4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  void *v59;
  int v60;
  uint64_t v61;

  if (*(char *)(v61 - 57) < 0)
    operator delete(*(void **)(v61 - 80));
  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v61 - 89) < 0)
    operator delete(*(void **)(v61 - 112));
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v61 - 121) < 0)
    operator delete(*(void **)(v61 - 144));
  if (*(char *)(v61 - 153) < 0)
    operator delete(*(void **)(v61 - 176));
  if (a27 < 0)
    operator delete(a22);
  if (a59 < 0)
    operator delete(a54);
  if (a33 < 0)
    operator delete(a28);
  if (a52 < 0)
    operator delete(a47);
  if (a45 < 0)
    operator delete(a40);
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0)
LABEL_28:
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

BOOL wrapper_kernel<Espresso::multinomial_kernel_cpu,Espresso::multinomial_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2;

  v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10)
      return 0;
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

const char *Espresso::generic_multinomial_kernel::kernel_type_str(Espresso::generic_multinomial_kernel *this)
{
  return "multinomial";
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::multinomial_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

void wrapper_kernel<Espresso::multinomial_kernel_cpu,Espresso::multinomial_params_t>::convert_layer_data_to_fp32(_QWORD *a1, char **a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v9;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  const void *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  __int128 v43;
  int64x2_t v44;
  char *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  __int128 v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  int64x2_t v59;
  char *v60;
  _QWORD *v61;
  void *__p;
  void *v63;
  __int128 v64;
  const void *v65;
  std::__shared_weak_count *v66;

  if (a3 != a4)
  {
    v9 = a3;
    v12 = a2 + 2;
    while (1)
    {
      v14 = *(const void **)v9;
      v13 = *(std::__shared_weak_count **)(v9 + 8);
      v65 = *(const void **)v9;
      v66 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
      }
      v17 = operator new(0x118uLL);
      v17[1] = 0;
      v17[2] = 0;
      *v17 = &off_1E2DC1868;
      Espresso::blob_cpu::blob_cpu((uint64_t)(v17 + 3), a1);
      *(_QWORD *)&v64 = v17 + 3;
      *((_QWORD *)&v64 + 1) = v17;
      Espresso::abstract_blob_container::shape((char *)&v58, (uint64_t)v14);
      v56 = 0;
      v57 = 0;
      (*(void (**)(_QWORD *, uint64_t *, uint64_t *))(v17[3] + 16))(v17 + 3, &v58, &v56);
      v18 = v57;
      if (v57)
      {
        v19 = (unint64_t *)&v57->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if (__p)
      {
        v63 = __p;
        operator delete(__p);
      }
      if (v65)
      {
        if (v21)
          break;
      }
      v21 = 0;
      v55 = 0;
      if (a5)
        goto LABEL_21;
LABEL_28:
      v27 = v64;
      if (*((_QWORD *)&v64 + 1))
      {
        v28 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v31 = a2[1];
      v30 = (unint64_t)a2[2];
      if ((unint64_t)v31 >= v30)
      {
        v54 = v27;
        v33 = (v31 - *a2) >> 4;
        if ((unint64_t)(v33 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v34 = v30 - (_QWORD)*a2;
        v35 = v34 >> 3;
        if (v34 >> 3 <= (unint64_t)(v33 + 1))
          v35 = v33 + 1;
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0)
          v36 = 0xFFFFFFFFFFFFFFFLL;
        else
          v36 = v35;
        v61 = v12;
        v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v36);
        v39 = &v37[16 * v33];
        *(_OWORD *)v39 = v54;
        v41 = *a2;
        v40 = a2[1];
        if (v40 == *a2)
        {
          v44 = vdupq_n_s64((unint64_t)v40);
          v42 = &v37[16 * v33];
        }
        else
        {
          v42 = &v37[16 * v33];
          do
          {
            v43 = *((_OWORD *)v40 - 1);
            v40 -= 16;
            *((_OWORD *)v42 - 1) = v43;
            v42 -= 16;
            *(_QWORD *)v40 = 0;
            *((_QWORD *)v40 + 1) = 0;
          }
          while (v40 != v41);
          v44 = *(int64x2_t *)a2;
        }
        v32 = v39 + 16;
        *a2 = v42;
        a2[1] = v39 + 16;
        v59 = v44;
        v45 = a2[2];
        a2[2] = &v37[16 * v38];
        v60 = v45;
        v58 = v44.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v58);
      }
      else
      {
        *(_OWORD *)v31 = v27;
        v32 = v31 + 16;
      }
      a2[1] = v32;
      if (v55)
      {
        v46 = (unint64_t *)&v55->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      v48 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
      if (*((_QWORD *)&v64 + 1))
      {
        v49 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      v51 = v66;
      if (v66)
      {
        v52 = (unint64_t *)&v66->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v9 += 16;
      if (v9 == a4)
        return;
    }
    v55 = v66;
    if (v66)
    {
      v22 = (unint64_t *)&v66->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    if (!a5)
      goto LABEL_28;
LABEL_21:
    if (a6)
    {
      v58 = 0;
      v59.i64[0] = 0;
      (*(void (**)(void *, uint64_t *, uint64_t))(*(_QWORD *)v21 + 40))(v21, &v58, v64 + 160);
      v24 = (std::__shared_weak_count *)v59.i64[0];
      if (v59.i64[0])
      {
        v25 = (unint64_t *)(v59.i64[0] + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v21, v64 + 160, 1.0);
    }
    goto LABEL_28;
  }
}

void sub_1915FC0BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::multinomial_kernel_cpu,Espresso::multinomial_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB4E80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::multinomial_kernel_cpu,Espresso::multinomial_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB4E80;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::multinomial_kernel_cpu,Espresso::multinomial_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_52@<Q0>(uint64_t *a1@<X1>, _OWORD *a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  __n128 result;
  _BYTE v8[28];

  v6 = (char *)operator new(0x170uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DB4EF0;
  *(_OWORD *)v8 = *a2;
  *(_OWORD *)&v8[12] = *(_OWORD *)((char *)a2 + 12);
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((_OWORD *)v6 + 19) = *(_OWORD *)v8;
  *(_OWORD *)(v6 + 313) = *(_OWORD *)&v8[9];
  *((_QWORD *)v6 + 3) = &off_1E2D531D0;
  *((_OWORD *)v6 + 21) = 0u;
  *((_OWORD *)v6 + 22) = 0u;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v6 + 42, *a1, a1[1]);
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1915FC23C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::array_gather_kernel_cpu,Espresso::array_gather_params_t>::~wrapper_kernel(Espresso::base_kernel *a1)
{
  *(_QWORD *)a1 = &off_1E2D531D0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 328);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 312);
  Espresso::base_kernel::~base_kernel(a1);
}

{
  *(_QWORD *)a1 = &off_1E2D531D0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 328);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 312);
  Espresso::base_kernel::~base_kernel(a1);
  JUMPOUT(0x19401CD90);
}

void wrapper_kernel<Espresso::array_gather_kernel_cpu,Espresso::array_gather_params_t>::__launch(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v5;
  _BOOL4 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  float *v31;
  vDSP_Length v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  __n128 v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  void **v44;
  void **v45;
  void **v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  int *v52;
  float *v53;
  vDSP_Length v54;
  int *v55;
  int v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  vDSP_Length v60;
  vDSP_Length v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  const void *v74;
  void **v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  void **v80;
  const void *v81;
  void *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  _QWORD *v94;
  uint64_t *v95;
  std::__shared_weak_count *v96;
  float __B;
  _QWORD v98[2];
  _QWORD v99[2];
  void **v100[3];
  char *v101[3];
  void *v102;
  std::__shared_weak_count *v103;
  void ***v104;
  std::__shared_weak_count *v105;

  v5 = a3;
  memset(v101, 0, sizeof(v101));
  memset(v100, 0, sizeof(v100));
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)*a3 + 32))(*(_QWORD *)*a3))
    v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)*v5 + 32))(*(_QWORD *)*v5) == 1;
  else
    v7 = 1;
  v8 = (std::__shared_weak_count *)a1[40];
  v99[0] = a1[39];
  v99[1] = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  wrapper_kernel<Espresso::array_gather_kernel_cpu,Espresso::array_gather_params_t>::convert_layer_data_to_fp32(v99, v101, *a4, a4[1], 1, v7);
  if (v8)
  {
    v11 = (unint64_t *)&v8->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v13 = (std::__shared_weak_count *)a1[40];
  v98[0] = a1[39];
  v98[1] = v13;
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  wrapper_kernel<Espresso::array_gather_kernel_cpu,Espresso::array_gather_params_t>::convert_layer_data_to_fp32(v98, (char **)v100, *v5, v5[1], 0, 0);
  if (v13)
  {
    v17 = (unint64_t *)&v13->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v19 = *a4;
  if (a4[1] != *a4)
  {
    v20 = 0;
    do
    {
      if (!v7
        && (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v19 + 16 * v20) + 32))(*(_QWORD *)(v19 + 16 * v20))
         || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(*a4 + 16 * v20) + 32))(*(_QWORD *)(*a4 + 16 * v20)) == 1))
      {
        __B = *(float *)(*(_QWORD *)(*a4 + 16 * v20) + 112);
        v21 = &v101[0][16 * v20];
        v104 = (void ***)v22;
        v23 = (std::__shared_weak_count *)*((_QWORD *)v21 + 1);
        v105 = v23;
        if (v23)
        {
          v24 = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
        }
        v26 = *((_QWORD *)v22 + 20);
        v27 = (std::__shared_weak_count *)*((_QWORD *)v22 + 21);
        v102 = (void *)v26;
        v103 = v27;
        if (v27)
        {
          v28 = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldxr(v28);
          while (__stxr(v29 + 1, v28));
        }
        v30 = 0;
        v31 = *(float **)(v26 + 24);
        v32 = *(int *)(v26 + 8);
        v33 = v26 + 12;
        do
        {
          v32 *= *(int *)(v33 + v30);
          v30 += 4;
        }
        while (v30 != 12);
        vDSP_vsmul(v31, 1, &__B, v31, 1, v32);
        if (v27)
        {
          v34 = (unint64_t *)&v27->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        v36 = v105;
        if (v105)
        {
          v37 = (unint64_t *)&v105->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
      }
      ++v20;
      v19 = *a4;
    }
    while (v20 < (a4[1] - *a4) >> 4);
  }
  Espresso::array_gather_kernel_cpu::__launch((uint64_t)a1, v16, (uint64_t **)v100, (uint64_t **)v101);
  v40 = a1[41];
  if (v40)
  {
    v41 = (std::__shared_weak_count *)a1[42];
    v96 = v41;
    if (v41)
    {
      v42 = (unint64_t *)&v41->__shared_owners_;
      do
        v43 = __ldxr(v42);
      while (__stxr(v43 + 1, v42));
    }
    v44 = v100[0];
    if (*v100[0]
    {
      v46 = v45;
      v47 = (std::__shared_weak_count *)v44[1];
      v104 = (void ***)v45;
      v105 = v47;
      if (v47)
      {
        v48 = (unint64_t *)&v47->__shared_owners_;
        do
          v49 = __ldxr(v48);
        while (__stxr(v49 + 1, v48));
      }
    }
    else
    {
      v47 = 0;
      v46 = 0;
      v104 = 0;
      v105 = 0;
    }
    LODWORD(v50) = *(_DWORD *)(v40 + 8);
    v94 = a1;
    v95 = v5;
    v93 = v47;
    if ((_DWORD)v50 == 1)
    {
      v51 = 0;
      v52 = (int *)v46[20];
      v53 = (float *)*((_QWORD *)v52 + 3);
      v54 = v52[2];
      v55 = v52 + 3;
      do
        v54 *= v55[v51++];
      while (v51 != 3);
      vDSP_vsmul(v53, 1, *(const float **)(v40 + 16), v53, 1, v54);
    }
    else
    {
      v56 = *((_DWORD *)v46 + 4);
      if ((_DWORD)v50 != v56)
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v50, v56);
      v57 = *((_DWORD *)v46 + 5);
      if (v57)
      {
        v58 = 0;
        v59 = 0;
        v60 = *((int *)v46 + 2) * (uint64_t)*((int *)v46 + 3);
        v61 = 4 * (int)v50 * v60;
        do
        {
          if ((_DWORD)v50)
          {
            v62 = 0;
            v63 = 0;
            v64 = v58;
            do
            {
              vDSP_vsmul((const float *)(*((_QWORD *)v46[20] + 3) + v64), 1, (const float *)(*(_QWORD *)(v40 + 16) + v62), (float *)(*((_QWORD *)v46[20] + 3) + v64), 1, v60);
              ++v63;
              v50 = *((int *)v46 + 4);
              v62 += 4;
              v64 += 4 * v60;
            }
            while (v63 < v50);
            v57 = *((_DWORD *)v46 + 5);
          }
          ++v59;
          v58 += v61;
        }
        while (v59 < v57);
      }
    }
    a1 = v94;
    v5 = v95;
    if (v93)
    {
      v65 = (unint64_t *)&v93->__shared_owners_;
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 - 1, v65));
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
        std::__shared_weak_count::__release_weak(v93);
      }
    }
    if (v96)
    {
      v67 = (unint64_t *)&v96->__shared_owners_;
      do
        v68 = __ldaxr(v67);
      while (__stlxr(v68 - 1, v67));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
        std::__shared_weak_count::__release_weak(v96);
      }
    }
  }
  v69 = (std::__shared_weak_count *)a1[40];
  if (v69)
  {
    v70 = (unint64_t *)&v69->__shared_owners_;
    do
      v71 = __ldxr(v70);
    while (__stxr(v71 + 1, v70));
  }
  v72 = *v5;
  if (v5[1] != *v5)
  {
    v73 = 0;
    do
    {
      v74 = *(const void **)(v72 + 16 * v73);
      if (v74
      {
        v76 = (uint64_t)v75;
        v104 = (void ***)v75;
        v77 = *(std::__shared_weak_count **)(v72 + 16 * v73 + 8);
        v105 = v77;
        if (v77)
        {
          v78 = (unint64_t *)&v77->__shared_owners_;
          do
            v79 = __ldxr(v78);
          while (__stxr(v79 + 1, v78));
        }
      }
      else
      {
        v76 = 0;
        v104 = 0;
        v105 = 0;
      }
      v80 = v100[0];
      v81 = v100[0][2 * v73];
      if (v81
      {
        v102 = v82;
        v83 = (std::__shared_weak_count *)v80[2 * v73 + 1];
        v103 = v83;
        if (v83)
        {
          v84 = (unint64_t *)&v83->__shared_owners_;
          do
            v85 = __ldxr(v84);
          while (__stxr(v85 + 1, v84));
        }
      }
      else
      {
        v83 = 0;
        v82 = 0;
        v102 = 0;
        v103 = 0;
      }
      v39.n128_u64[0] = Espresso::QuantSimEngine::blob_container::copy_from_fp32(v76, (uint64_t)v82 + 160, 1.0);
      if (v83)
      {
        v86 = (unint64_t *)&v83->__shared_owners_;
        do
          v87 = __ldaxr(v86);
        while (__stlxr(v87 - 1, v86));
        if (!v87)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v83->__on_zero_shared)(v83, v39);
          std::__shared_weak_count::__release_weak(v83);
        }
      }
      v88 = v105;
      if (v105)
      {
        v89 = (unint64_t *)&v105->__shared_owners_;
        do
          v90 = __ldaxr(v89);
        while (__stlxr(v90 - 1, v89));
        if (!v90)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v88->__on_zero_shared)(v88, v39);
          std::__shared_weak_count::__release_weak(v88);
        }
      }
      ++v73;
      v72 = *v5;
    }
    while (v73 < (v5[1] - *v5) >> 4);
  }
  if (v69)
  {
    v91 = (unint64_t *)&v69->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v69->__on_zero_shared)(v69, v39);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  v104 = v100;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v104);
  v100[0] = (void **)v101;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v100);
}

void sub_1915FC9AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  *(_QWORD *)(v25 - 104) = &a22;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 104));
  a22 = (void **)&a25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a22);
  _Unwind_Resume(a1);
}

void *wrapper_kernel<Espresso::array_gather_kernel_cpu,Espresso::array_gather_params_t>::__set_weight_raw_blob(void *result, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  void *v7;
  int v8;
  uint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::runtime_error *exception;
  unint64_t v15;
  std::runtime_error *v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  std::string v39;
  _QWORD v40[2];
  unsigned __int8 v41;
  _QWORD v42[2];
  unsigned __int8 v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;

  v7 = result;
  v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10)
      return result;
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    v10 = (uint64_t)v7 + 328;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v10, (__int128 *)&v52);
    size = (std::__shared_weak_count *)v52.__r_.__value_.__l.__size_;
    if (v52.__r_.__value_.__l.__size_)
    {
      v12 = (unint64_t *)(v52.__r_.__value_.__l.__size_ + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    if (a5 != 4 * *(int *)(*(_QWORD *)v10 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      v15 = a5;
      v16 = exception;
      std::to_string(&v45, v15);
      v17 = std::string::insert(&v45, 0, "Unexpected size s=");
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      v19 = std::string::append(&v46, "/blob=");
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, 4 * *(int *)(*(_QWORD *)v10 + 8));
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v21 = &v44;
      else
        v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      else
        v22 = v44.__r_.__value_.__l.__size_;
      v23 = std::string::append(&v47, (const std::string::value_type *)v21, v22);
      v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, " @ ");
      if ((v43 & 0x80u) == 0)
        v25 = (const std::string::value_type *)v42;
      else
        v25 = (const std::string::value_type *)v42[0];
      if ((v43 & 0x80u) == 0)
        v26 = v43;
      else
        v26 = v42[1];
      v27 = std::string::append(&v48, v25, v26);
      v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      v29 = std::string::append(&v49, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v40, ":");
      if ((v41 & 0x80u) == 0)
        v31 = (const std::string::value_type *)v40;
      else
        v31 = (const std::string::value_type *)v40[0];
      if ((v41 & 0x80u) == 0)
        v32 = v41;
      else
        v32 = v40[1];
      v33 = std::string::append(&v50, v31, v32);
      v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, 197);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = &v39;
      else
        v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      else
        v36 = v39.__r_.__value_.__l.__size_;
      v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
      v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v16, &v52);
      __cxa_throw(v16, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    return memcpy(*(void **)(*(_QWORD *)v10 + 16), a4, a5);
  }
  return result;
}

void sub_1915FCD64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  void *v59;
  int v60;
  uint64_t v61;

  if (*(char *)(v61 - 57) < 0)
    operator delete(*(void **)(v61 - 80));
  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v61 - 89) < 0)
    operator delete(*(void **)(v61 - 112));
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v61 - 121) < 0)
    operator delete(*(void **)(v61 - 144));
  if (*(char *)(v61 - 153) < 0)
    operator delete(*(void **)(v61 - 176));
  if (a27 < 0)
    operator delete(a22);
  if (a59 < 0)
    operator delete(a54);
  if (a33 < 0)
    operator delete(a28);
  if (a52 < 0)
    operator delete(a47);
  if (a45 < 0)
    operator delete(a40);
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0)
LABEL_28:
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

BOOL wrapper_kernel<Espresso::array_gather_kernel_cpu,Espresso::array_gather_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2;

  v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10)
      return 0;
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

void wrapper_kernel<Espresso::array_gather_kernel_cpu,Espresso::array_gather_params_t>::convert_layer_data_to_fp32(_QWORD *a1, char **a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v9;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  const void *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  __int128 v43;
  int64x2_t v44;
  char *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  __int128 v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  int64x2_t v59;
  char *v60;
  _QWORD *v61;
  void *__p;
  void *v63;
  __int128 v64;
  const void *v65;
  std::__shared_weak_count *v66;

  if (a3 != a4)
  {
    v9 = a3;
    v12 = a2 + 2;
    while (1)
    {
      v14 = *(const void **)v9;
      v13 = *(std::__shared_weak_count **)(v9 + 8);
      v65 = *(const void **)v9;
      v66 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
      }
      v17 = operator new(0x118uLL);
      v17[1] = 0;
      v17[2] = 0;
      *v17 = &off_1E2DC1868;
      Espresso::blob_cpu::blob_cpu((uint64_t)(v17 + 3), a1);
      *(_QWORD *)&v64 = v17 + 3;
      *((_QWORD *)&v64 + 1) = v17;
      Espresso::abstract_blob_container::shape((char *)&v58, (uint64_t)v14);
      v56 = 0;
      v57 = 0;
      (*(void (**)(_QWORD *, uint64_t *, uint64_t *))(v17[3] + 16))(v17 + 3, &v58, &v56);
      v18 = v57;
      if (v57)
      {
        v19 = (unint64_t *)&v57->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if (__p)
      {
        v63 = __p;
        operator delete(__p);
      }
      if (v65)
      {
        if (v21)
          break;
      }
      v21 = 0;
      v55 = 0;
      if (a5)
        goto LABEL_21;
LABEL_28:
      v27 = v64;
      if (*((_QWORD *)&v64 + 1))
      {
        v28 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v31 = a2[1];
      v30 = (unint64_t)a2[2];
      if ((unint64_t)v31 >= v30)
      {
        v54 = v27;
        v33 = (v31 - *a2) >> 4;
        if ((unint64_t)(v33 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v34 = v30 - (_QWORD)*a2;
        v35 = v34 >> 3;
        if (v34 >> 3 <= (unint64_t)(v33 + 1))
          v35 = v33 + 1;
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0)
          v36 = 0xFFFFFFFFFFFFFFFLL;
        else
          v36 = v35;
        v61 = v12;
        v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v36);
        v39 = &v37[16 * v33];
        *(_OWORD *)v39 = v54;
        v41 = *a2;
        v40 = a2[1];
        if (v40 == *a2)
        {
          v44 = vdupq_n_s64((unint64_t)v40);
          v42 = &v37[16 * v33];
        }
        else
        {
          v42 = &v37[16 * v33];
          do
          {
            v43 = *((_OWORD *)v40 - 1);
            v40 -= 16;
            *((_OWORD *)v42 - 1) = v43;
            v42 -= 16;
            *(_QWORD *)v40 = 0;
            *((_QWORD *)v40 + 1) = 0;
          }
          while (v40 != v41);
          v44 = *(int64x2_t *)a2;
        }
        v32 = v39 + 16;
        *a2 = v42;
        a2[1] = v39 + 16;
        v59 = v44;
        v45 = a2[2];
        a2[2] = &v37[16 * v38];
        v60 = v45;
        v58 = v44.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v58);
      }
      else
      {
        *(_OWORD *)v31 = v27;
        v32 = v31 + 16;
      }
      a2[1] = v32;
      if (v55)
      {
        v46 = (unint64_t *)&v55->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      v48 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
      if (*((_QWORD *)&v64 + 1))
      {
        v49 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      v51 = v66;
      if (v66)
      {
        v52 = (unint64_t *)&v66->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v9 += 16;
      if (v9 == a4)
        return;
    }
    v55 = v66;
    if (v66)
    {
      v22 = (unint64_t *)&v66->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    if (!a5)
      goto LABEL_28;
LABEL_21:
    if (a6)
    {
      v58 = 0;
      v59.i64[0] = 0;
      (*(void (**)(void *, uint64_t *, uint64_t))(*(_QWORD *)v21 + 40))(v21, &v58, v64 + 160);
      v24 = (std::__shared_weak_count *)v59.i64[0];
      if (v59.i64[0])
      {
        v25 = (unint64_t *)(v59.i64[0] + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v21, v64 + 160, 1.0);
    }
    goto LABEL_28;
  }
}

void sub_1915FD2C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::array_gather_kernel_cpu,Espresso::array_gather_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB4EF0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::array_gather_kernel_cpu,Espresso::array_gather_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB4EF0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::array_gather_kernel_cpu,Espresso::array_gather_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_51@<Q0>(uint64_t *a1@<X1>, __int128 *a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  __n128 result;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  v6 = (char *)operator new(0x1D8uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DB4DD8;
  v14 = a2[6];
  v15 = a2[7];
  v16 = *((_QWORD *)a2 + 16);
  v10 = a2[2];
  v11 = a2[3];
  v12 = a2[4];
  v13 = a2[5];
  v8 = *a2;
  v9 = a2[1];
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((_OWORD *)v6 + 25) = v14;
  *((_OWORD *)v6 + 26) = v15;
  *((_QWORD *)v6 + 54) = v16;
  *((_OWORD *)v6 + 21) = v10;
  *((_OWORD *)v6 + 22) = v11;
  *((_OWORD *)v6 + 23) = v12;
  *((_OWORD *)v6 + 24) = v13;
  *((_OWORD *)v6 + 19) = v8;
  *((_OWORD *)v6 + 20) = v9;
  *((_QWORD *)v6 + 3) = &off_1E2D52B18;
  *(_OWORD *)(v6 + 440) = 0u;
  *(_OWORD *)(v6 + 456) = 0u;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v6 + 55, *a1, a1[1]);
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1915FD470(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::expand_dims_kernel_cpu,Espresso::expand_dims_params_t>::~wrapper_kernel(Espresso::base_kernel *a1)
{
  *(_QWORD *)a1 = &off_1E2D52B18;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 432);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 416);
  Espresso::base_kernel::~base_kernel(a1);
}

{
  *(_QWORD *)a1 = &off_1E2D52B18;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 432);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 416);
  Espresso::base_kernel::~base_kernel(a1);
  JUMPOUT(0x19401CD90);
}

void wrapper_kernel<Espresso::expand_dims_kernel_cpu,Espresso::expand_dims_params_t>::__launch(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v5;
  _BOOL4 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  void *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  float *v30;
  vDSP_Length v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  __n128 v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  void **v43;
  void **v44;
  void **v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  int *v51;
  float *v52;
  vDSP_Length v53;
  int *v54;
  int v55;
  int v56;
  uint64_t v57;
  unint64_t v58;
  vDSP_Length v59;
  vDSP_Length v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  const void *v73;
  void **v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  void **v79;
  const void *v80;
  void *v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  _QWORD *v93;
  uint64_t *v94;
  std::__shared_weak_count *v95;
  float __B;
  _QWORD v97[2];
  _QWORD v98[2];
  void **v99[3];
  char *v100[3];
  void *v101;
  std::__shared_weak_count *v102;
  void ***v103;
  std::__shared_weak_count *v104;

  v5 = a3;
  memset(v100, 0, sizeof(v100));
  memset(v99, 0, sizeof(v99));
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)*a3 + 32))(*(_QWORD *)*a3))
    v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)*v5 + 32))(*(_QWORD *)*v5) == 1;
  else
    v7 = 1;
  v8 = (std::__shared_weak_count *)a1[53];
  v98[0] = a1[52];
  v98[1] = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  wrapper_kernel<Espresso::expand_dims_kernel_cpu,Espresso::expand_dims_params_t>::convert_layer_data_to_fp32(v98, v100, *a4, a4[1], 1, v7);
  if (v8)
  {
    v11 = (unint64_t *)&v8->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v13 = (std::__shared_weak_count *)a1[53];
  v97[0] = a1[52];
  v97[1] = v13;
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  wrapper_kernel<Espresso::expand_dims_kernel_cpu,Espresso::expand_dims_params_t>::convert_layer_data_to_fp32(v97, (char **)v99, *v5, v5[1], 0, 0);
  if (v13)
  {
    v16 = (unint64_t *)&v13->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v18 = *a4;
  if (a4[1] != *a4)
  {
    v19 = 0;
    do
    {
      if (!v7
        && (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v18 + 16 * v19) + 32))(*(_QWORD *)(v18 + 16 * v19))
         || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(*a4 + 16 * v19) + 32))(*(_QWORD *)(*a4 + 16 * v19)) == 1))
      {
        __B = *(float *)(*(_QWORD *)(*a4 + 16 * v19) + 112);
        v20 = &v100[0][16 * v19];
        v103 = (void ***)v21;
        v22 = (std::__shared_weak_count *)*((_QWORD *)v20 + 1);
        v104 = v22;
        if (v22)
        {
          v23 = (unint64_t *)&v22->__shared_owners_;
          do
            v24 = __ldxr(v23);
          while (__stxr(v24 + 1, v23));
        }
        v25 = *((_QWORD *)v21 + 20);
        v26 = (std::__shared_weak_count *)*((_QWORD *)v21 + 21);
        v101 = (void *)v25;
        v102 = v26;
        if (v26)
        {
          v27 = (unint64_t *)&v26->__shared_owners_;
          do
            v28 = __ldxr(v27);
          while (__stxr(v28 + 1, v27));
        }
        v29 = 0;
        v30 = *(float **)(v25 + 24);
        v31 = *(int *)(v25 + 8);
        v32 = v25 + 12;
        do
        {
          v31 *= *(int *)(v32 + v29);
          v29 += 4;
        }
        while (v29 != 12);
        vDSP_vsmul(v30, 1, &__B, v30, 1, v31);
        if (v26)
        {
          v33 = (unint64_t *)&v26->__shared_owners_;
          do
            v34 = __ldaxr(v33);
          while (__stlxr(v34 - 1, v33));
          if (!v34)
          {
            ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
            std::__shared_weak_count::__release_weak(v26);
          }
        }
        v35 = v104;
        if (v104)
        {
          v36 = (unint64_t *)&v104->__shared_owners_;
          do
            v37 = __ldaxr(v36);
          while (__stlxr(v37 - 1, v36));
          if (!v37)
          {
            ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
            std::__shared_weak_count::__release_weak(v35);
          }
        }
      }
      ++v19;
      v18 = *a4;
    }
    while (v19 < (a4[1] - *a4) >> 4);
  }
  Espresso::copy_kernel_cpu::__compute((uint64_t *)v99, v100);
  v39 = a1[54];
  if (v39)
  {
    v40 = (std::__shared_weak_count *)a1[55];
    v95 = v40;
    if (v40)
    {
      v41 = (unint64_t *)&v40->__shared_owners_;
      do
        v42 = __ldxr(v41);
      while (__stxr(v42 + 1, v41));
    }
    v43 = v99[0];
    if (*v99[0]
    {
      v45 = v44;
      v46 = (std::__shared_weak_count *)v43[1];
      v103 = (void ***)v44;
      v104 = v46;
      if (v46)
      {
        v47 = (unint64_t *)&v46->__shared_owners_;
        do
          v48 = __ldxr(v47);
        while (__stxr(v48 + 1, v47));
      }
    }
    else
    {
      v46 = 0;
      v45 = 0;
      v103 = 0;
      v104 = 0;
    }
    LODWORD(v49) = *(_DWORD *)(v39 + 8);
    v93 = a1;
    v94 = v5;
    v92 = v46;
    if ((_DWORD)v49 == 1)
    {
      v50 = 0;
      v51 = (int *)v45[20];
      v52 = (float *)*((_QWORD *)v51 + 3);
      v53 = v51[2];
      v54 = v51 + 3;
      do
        v53 *= v54[v50++];
      while (v50 != 3);
      vDSP_vsmul(v52, 1, *(const float **)(v39 + 16), v52, 1, v53);
    }
    else
    {
      v55 = *((_DWORD *)v45 + 4);
      if ((_DWORD)v49 != v55)
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v49, v55);
      v56 = *((_DWORD *)v45 + 5);
      if (v56)
      {
        v57 = 0;
        v58 = 0;
        v59 = *((int *)v45 + 2) * (uint64_t)*((int *)v45 + 3);
        v60 = 4 * (int)v49 * v59;
        do
        {
          if ((_DWORD)v49)
          {
            v61 = 0;
            v62 = 0;
            v63 = v57;
            do
            {
              vDSP_vsmul((const float *)(*((_QWORD *)v45[20] + 3) + v63), 1, (const float *)(*(_QWORD *)(v39 + 16) + v61), (float *)(*((_QWORD *)v45[20] + 3) + v63), 1, v59);
              ++v62;
              v49 = *((int *)v45 + 4);
              v61 += 4;
              v63 += 4 * v59;
            }
            while (v62 < v49);
            v56 = *((_DWORD *)v45 + 5);
          }
          ++v58;
          v57 += v60;
        }
        while (v58 < v56);
      }
    }
    a1 = v93;
    v5 = v94;
    if (v92)
    {
      v64 = (unint64_t *)&v92->__shared_owners_;
      do
        v65 = __ldaxr(v64);
      while (__stlxr(v65 - 1, v64));
      if (!v65)
      {
        ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
        std::__shared_weak_count::__release_weak(v92);
      }
    }
    if (v95)
    {
      v66 = (unint64_t *)&v95->__shared_owners_;
      do
        v67 = __ldaxr(v66);
      while (__stlxr(v67 - 1, v66));
      if (!v67)
      {
        ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
        std::__shared_weak_count::__release_weak(v95);
      }
    }
  }
  v68 = (std::__shared_weak_count *)a1[53];
  if (v68)
  {
    v69 = (unint64_t *)&v68->__shared_owners_;
    do
      v70 = __ldxr(v69);
    while (__stxr(v70 + 1, v69));
  }
  v71 = *v5;
  if (v5[1] != *v5)
  {
    v72 = 0;
    do
    {
      v73 = *(const void **)(v71 + 16 * v72);
      if (v73
      {
        v75 = (uint64_t)v74;
        v103 = (void ***)v74;
        v76 = *(std::__shared_weak_count **)(v71 + 16 * v72 + 8);
        v104 = v76;
        if (v76)
        {
          v77 = (unint64_t *)&v76->__shared_owners_;
          do
            v78 = __ldxr(v77);
          while (__stxr(v78 + 1, v77));
        }
      }
      else
      {
        v75 = 0;
        v103 = 0;
        v104 = 0;
      }
      v79 = v99[0];
      v80 = v99[0][2 * v72];
      if (v80
      {
        v101 = v81;
        v82 = (std::__shared_weak_count *)v79[2 * v72 + 1];
        v102 = v82;
        if (v82)
        {
          v83 = (unint64_t *)&v82->__shared_owners_;
          do
            v84 = __ldxr(v83);
          while (__stxr(v84 + 1, v83));
        }
      }
      else
      {
        v82 = 0;
        v81 = 0;
        v101 = 0;
        v102 = 0;
      }
      v38.n128_u64[0] = Espresso::QuantSimEngine::blob_container::copy_from_fp32(v75, (uint64_t)v81 + 160, 1.0);
      if (v82)
      {
        v85 = (unint64_t *)&v82->__shared_owners_;
        do
          v86 = __ldaxr(v85);
        while (__stlxr(v86 - 1, v85));
        if (!v86)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v82->__on_zero_shared)(v82, v38);
          std::__shared_weak_count::__release_weak(v82);
        }
      }
      v87 = v104;
      if (v104)
      {
        v88 = (unint64_t *)&v104->__shared_owners_;
        do
          v89 = __ldaxr(v88);
        while (__stlxr(v89 - 1, v88));
        if (!v89)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v87->__on_zero_shared)(v87, v38);
          std::__shared_weak_count::__release_weak(v87);
        }
      }
      ++v72;
      v71 = *v5;
    }
    while (v72 < (v5[1] - *v5) >> 4);
  }
  if (v68)
  {
    v90 = (unint64_t *)&v68->__shared_owners_;
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v68->__on_zero_shared)(v68, v38);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
  v103 = v99;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v103);
  v99[0] = (void **)v100;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v99);
}

void sub_1915FDBDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  *(_QWORD *)(v25 - 104) = &a22;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 104));
  a22 = (void **)&a25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a22);
  _Unwind_Resume(a1);
}

void *wrapper_kernel<Espresso::expand_dims_kernel_cpu,Espresso::expand_dims_params_t>::__set_weight_raw_blob(void *result, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  void *v7;
  int v8;
  uint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::runtime_error *exception;
  unint64_t v15;
  std::runtime_error *v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  std::string v39;
  _QWORD v40[2];
  unsigned __int8 v41;
  _QWORD v42[2];
  unsigned __int8 v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;

  v7 = result;
  v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10)
      return result;
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    v10 = (uint64_t)v7 + 432;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v10, (__int128 *)&v52);
    size = (std::__shared_weak_count *)v52.__r_.__value_.__l.__size_;
    if (v52.__r_.__value_.__l.__size_)
    {
      v12 = (unint64_t *)(v52.__r_.__value_.__l.__size_ + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    if (a5 != 4 * *(int *)(*(_QWORD *)v10 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      v15 = a5;
      v16 = exception;
      std::to_string(&v45, v15);
      v17 = std::string::insert(&v45, 0, "Unexpected size s=");
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      v19 = std::string::append(&v46, "/blob=");
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, 4 * *(int *)(*(_QWORD *)v10 + 8));
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v21 = &v44;
      else
        v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      else
        v22 = v44.__r_.__value_.__l.__size_;
      v23 = std::string::append(&v47, (const std::string::value_type *)v21, v22);
      v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, " @ ");
      if ((v43 & 0x80u) == 0)
        v25 = (const std::string::value_type *)v42;
      else
        v25 = (const std::string::value_type *)v42[0];
      if ((v43 & 0x80u) == 0)
        v26 = v43;
      else
        v26 = v42[1];
      v27 = std::string::append(&v48, v25, v26);
      v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      v29 = std::string::append(&v49, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v40, ":");
      if ((v41 & 0x80u) == 0)
        v31 = (const std::string::value_type *)v40;
      else
        v31 = (const std::string::value_type *)v40[0];
      if ((v41 & 0x80u) == 0)
        v32 = v41;
      else
        v32 = v40[1];
      v33 = std::string::append(&v50, v31, v32);
      v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, 197);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = &v39;
      else
        v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      else
        v36 = v39.__r_.__value_.__l.__size_;
      v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
      v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v16, &v52);
      __cxa_throw(v16, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    return memcpy(*(void **)(*(_QWORD *)v10 + 16), a4, a5);
  }
  return result;
}

void sub_1915FDF94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  void *v59;
  int v60;
  uint64_t v61;

  if (*(char *)(v61 - 57) < 0)
    operator delete(*(void **)(v61 - 80));
  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v61 - 89) < 0)
    operator delete(*(void **)(v61 - 112));
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v61 - 121) < 0)
    operator delete(*(void **)(v61 - 144));
  if (*(char *)(v61 - 153) < 0)
    operator delete(*(void **)(v61 - 176));
  if (a27 < 0)
    operator delete(a22);
  if (a59 < 0)
    operator delete(a54);
  if (a33 < 0)
    operator delete(a28);
  if (a52 < 0)
    operator delete(a47);
  if (a45 < 0)
    operator delete(a40);
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0)
LABEL_28:
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

BOOL wrapper_kernel<Espresso::expand_dims_kernel_cpu,Espresso::expand_dims_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2;

  v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10)
      return 0;
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

void wrapper_kernel<Espresso::expand_dims_kernel_cpu,Espresso::expand_dims_params_t>::convert_layer_data_to_fp32(_QWORD *a1, char **a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v9;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  const void *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  __int128 v43;
  int64x2_t v44;
  char *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  __int128 v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  int64x2_t v59;
  char *v60;
  _QWORD *v61;
  void *__p;
  void *v63;
  __int128 v64;
  const void *v65;
  std::__shared_weak_count *v66;

  if (a3 != a4)
  {
    v9 = a3;
    v12 = a2 + 2;
    while (1)
    {
      v14 = *(const void **)v9;
      v13 = *(std::__shared_weak_count **)(v9 + 8);
      v65 = *(const void **)v9;
      v66 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
      }
      v17 = operator new(0x118uLL);
      v17[1] = 0;
      v17[2] = 0;
      *v17 = &off_1E2DC1868;
      Espresso::blob_cpu::blob_cpu((uint64_t)(v17 + 3), a1);
      *(_QWORD *)&v64 = v17 + 3;
      *((_QWORD *)&v64 + 1) = v17;
      Espresso::abstract_blob_container::shape((char *)&v58, (uint64_t)v14);
      v56 = 0;
      v57 = 0;
      (*(void (**)(_QWORD *, uint64_t *, uint64_t *))(v17[3] + 16))(v17 + 3, &v58, &v56);
      v18 = v57;
      if (v57)
      {
        v19 = (unint64_t *)&v57->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if (__p)
      {
        v63 = __p;
        operator delete(__p);
      }
      if (v65)
      {
        if (v21)
          break;
      }
      v21 = 0;
      v55 = 0;
      if (a5)
        goto LABEL_21;
LABEL_28:
      v27 = v64;
      if (*((_QWORD *)&v64 + 1))
      {
        v28 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v31 = a2[1];
      v30 = (unint64_t)a2[2];
      if ((unint64_t)v31 >= v30)
      {
        v54 = v27;
        v33 = (v31 - *a2) >> 4;
        if ((unint64_t)(v33 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v34 = v30 - (_QWORD)*a2;
        v35 = v34 >> 3;
        if (v34 >> 3 <= (unint64_t)(v33 + 1))
          v35 = v33 + 1;
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0)
          v36 = 0xFFFFFFFFFFFFFFFLL;
        else
          v36 = v35;
        v61 = v12;
        v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v36);
        v39 = &v37[16 * v33];
        *(_OWORD *)v39 = v54;
        v41 = *a2;
        v40 = a2[1];
        if (v40 == *a2)
        {
          v44 = vdupq_n_s64((unint64_t)v40);
          v42 = &v37[16 * v33];
        }
        else
        {
          v42 = &v37[16 * v33];
          do
          {
            v43 = *((_OWORD *)v40 - 1);
            v40 -= 16;
            *((_OWORD *)v42 - 1) = v43;
            v42 -= 16;
            *(_QWORD *)v40 = 0;
            *((_QWORD *)v40 + 1) = 0;
          }
          while (v40 != v41);
          v44 = *(int64x2_t *)a2;
        }
        v32 = v39 + 16;
        *a2 = v42;
        a2[1] = v39 + 16;
        v59 = v44;
        v45 = a2[2];
        a2[2] = &v37[16 * v38];
        v60 = v45;
        v58 = v44.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v58);
      }
      else
      {
        *(_OWORD *)v31 = v27;
        v32 = v31 + 16;
      }
      a2[1] = v32;
      if (v55)
      {
        v46 = (unint64_t *)&v55->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      v48 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
      if (*((_QWORD *)&v64 + 1))
      {
        v49 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      v51 = v66;
      if (v66)
      {
        v52 = (unint64_t *)&v66->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v9 += 16;
      if (v9 == a4)
        return;
    }
    v55 = v66;
    if (v66)
    {
      v22 = (unint64_t *)&v66->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    if (!a5)
      goto LABEL_28;
LABEL_21:
    if (a6)
    {
      v58 = 0;
      v59.i64[0] = 0;
      (*(void (**)(void *, uint64_t *, uint64_t))(*(_QWORD *)v21 + 40))(v21, &v58, v64 + 160);
      v24 = (std::__shared_weak_count *)v59.i64[0];
      if (v59.i64[0])
      {
        v25 = (unint64_t *)(v59.i64[0] + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v21, v64 + 160, 1.0);
    }
    goto LABEL_28;
  }
}

void sub_1915FE4F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::expand_dims_kernel_cpu,Espresso::expand_dims_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB4DD8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::expand_dims_kernel_cpu,Espresso::expand_dims_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB4DD8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::expand_dims_kernel_cpu,Espresso::expand_dims_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_50@<Q0>(uint64_t *a1@<X1>, __int128 *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  __n128 result;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  v6 = operator new(0x1E0uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DB4A58;
  v14 = a2[6];
  v15 = a2[7];
  v16 = a2[8];
  v10 = a2[2];
  v11 = a2[3];
  v12 = a2[4];
  v13 = a2[5];
  v8 = *a2;
  v9 = a2[1];
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  *((_OWORD *)v6 + 25) = v14;
  *((_OWORD *)v6 + 26) = v15;
  *((_OWORD *)v6 + 21) = v10;
  *((_OWORD *)v6 + 22) = v11;
  *((_OWORD *)v6 + 23) = v12;
  *((_OWORD *)v6 + 24) = v13;
  *((_OWORD *)v6 + 19) = v8;
  *((_OWORD *)v6 + 20) = v9;
  v6[3] = &off_1E2D51488;
  *((_OWORD *)v6 + 27) = v16;
  *((_OWORD *)v6 + 28) = 0u;
  *((_OWORD *)v6 + 29) = 0u;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v6 + 56, *a1, a1[1]);
  result.n128_u64[0] = (unint64_t)(v6 + 3);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1915FE69C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::squeeze_kernel_cpu,Espresso::squeeze_params_t>::~wrapper_kernel(Espresso::base_kernel *a1)
{
  *(_QWORD *)a1 = &off_1E2D51488;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 440);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 424);
  Espresso::base_kernel::~base_kernel(a1);
}

{
  *(_QWORD *)a1 = &off_1E2D51488;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 440);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 424);
  Espresso::base_kernel::~base_kernel(a1);
  JUMPOUT(0x19401CD90);
}

void wrapper_kernel<Espresso::squeeze_kernel_cpu,Espresso::squeeze_params_t>::__launch(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v5;
  _BOOL4 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  void *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  float *v30;
  vDSP_Length v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  __n128 v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  void **v43;
  void **v44;
  void **v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  int *v51;
  float *v52;
  vDSP_Length v53;
  int *v54;
  int v55;
  int v56;
  uint64_t v57;
  unint64_t v58;
  vDSP_Length v59;
  vDSP_Length v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  const void *v73;
  void **v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  void **v79;
  const void *v80;
  void *v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  _QWORD *v93;
  uint64_t *v94;
  std::__shared_weak_count *v95;
  float __B;
  _QWORD v97[2];
  _QWORD v98[2];
  void **v99[3];
  char *v100[3];
  void *v101;
  std::__shared_weak_count *v102;
  void ***v103;
  std::__shared_weak_count *v104;

  v5 = a3;
  memset(v100, 0, sizeof(v100));
  memset(v99, 0, sizeof(v99));
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)*a3 + 32))(*(_QWORD *)*a3))
    v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)*v5 + 32))(*(_QWORD *)*v5) == 1;
  else
    v7 = 1;
  v8 = (std::__shared_weak_count *)a1[54];
  v98[0] = a1[53];
  v98[1] = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  wrapper_kernel<Espresso::squeeze_kernel_cpu,Espresso::squeeze_params_t>::convert_layer_data_to_fp32(v98, v100, *a4, a4[1], 1, v7);
  if (v8)
  {
    v11 = (unint64_t *)&v8->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v13 = (std::__shared_weak_count *)a1[54];
  v97[0] = a1[53];
  v97[1] = v13;
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  wrapper_kernel<Espresso::squeeze_kernel_cpu,Espresso::squeeze_params_t>::convert_layer_data_to_fp32(v97, (char **)v99, *v5, v5[1], 0, 0);
  if (v13)
  {
    v16 = (unint64_t *)&v13->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v18 = *a4;
  if (a4[1] != *a4)
  {
    v19 = 0;
    do
    {
      if (!v7
        && (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v18 + 16 * v19) + 32))(*(_QWORD *)(v18 + 16 * v19))
         || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(*a4 + 16 * v19) + 32))(*(_QWORD *)(*a4 + 16 * v19)) == 1))
      {
        __B = *(float *)(*(_QWORD *)(*a4 + 16 * v19) + 112);
        v20 = &v100[0][16 * v19];
        v103 = (void ***)v21;
        v22 = (std::__shared_weak_count *)*((_QWORD *)v20 + 1);
        v104 = v22;
        if (v22)
        {
          v23 = (unint64_t *)&v22->__shared_owners_;
          do
            v24 = __ldxr(v23);
          while (__stxr(v24 + 1, v23));
        }
        v25 = *((_QWORD *)v21 + 20);
        v26 = (std::__shared_weak_count *)*((_QWORD *)v21 + 21);
        v101 = (void *)v25;
        v102 = v26;
        if (v26)
        {
          v27 = (unint64_t *)&v26->__shared_owners_;
          do
            v28 = __ldxr(v27);
          while (__stxr(v28 + 1, v27));
        }
        v29 = 0;
        v30 = *(float **)(v25 + 24);
        v31 = *(int *)(v25 + 8);
        v32 = v25 + 12;
        do
        {
          v31 *= *(int *)(v32 + v29);
          v29 += 4;
        }
        while (v29 != 12);
        vDSP_vsmul(v30, 1, &__B, v30, 1, v31);
        if (v26)
        {
          v33 = (unint64_t *)&v26->__shared_owners_;
          do
            v34 = __ldaxr(v33);
          while (__stlxr(v34 - 1, v33));
          if (!v34)
          {
            ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
            std::__shared_weak_count::__release_weak(v26);
          }
        }
        v35 = v104;
        if (v104)
        {
          v36 = (unint64_t *)&v104->__shared_owners_;
          do
            v37 = __ldaxr(v36);
          while (__stlxr(v37 - 1, v36));
          if (!v37)
          {
            ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
            std::__shared_weak_count::__release_weak(v35);
          }
        }
      }
      ++v19;
      v18 = *a4;
    }
    while (v19 < (a4[1] - *a4) >> 4);
  }
  Espresso::copy_kernel_cpu::__compute((uint64_t *)v99, v100);
  v39 = a1[55];
  if (v39)
  {
    v40 = (std::__shared_weak_count *)a1[56];
    v95 = v40;
    if (v40)
    {
      v41 = (unint64_t *)&v40->__shared_owners_;
      do
        v42 = __ldxr(v41);
      while (__stxr(v42 + 1, v41));
    }
    v43 = v99[0];
    if (*v99[0]
    {
      v45 = v44;
      v46 = (std::__shared_weak_count *)v43[1];
      v103 = (void ***)v44;
      v104 = v46;
      if (v46)
      {
        v47 = (unint64_t *)&v46->__shared_owners_;
        do
          v48 = __ldxr(v47);
        while (__stxr(v48 + 1, v47));
      }
    }
    else
    {
      v46 = 0;
      v45 = 0;
      v103 = 0;
      v104 = 0;
    }
    LODWORD(v49) = *(_DWORD *)(v39 + 8);
    v93 = a1;
    v94 = v5;
    v92 = v46;
    if ((_DWORD)v49 == 1)
    {
      v50 = 0;
      v51 = (int *)v45[20];
      v52 = (float *)*((_QWORD *)v51 + 3);
      v53 = v51[2];
      v54 = v51 + 3;
      do
        v53 *= v54[v50++];
      while (v50 != 3);
      vDSP_vsmul(v52, 1, *(const float **)(v39 + 16), v52, 1, v53);
    }
    else
    {
      v55 = *((_DWORD *)v45 + 4);
      if ((_DWORD)v49 != v55)
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v49, v55);
      v56 = *((_DWORD *)v45 + 5);
      if (v56)
      {
        v57 = 0;
        v58 = 0;
        v59 = *((int *)v45 + 2) * (uint64_t)*((int *)v45 + 3);
        v60 = 4 * (int)v49 * v59;
        do
        {
          if ((_DWORD)v49)
          {
            v61 = 0;
            v62 = 0;
            v63 = v57;
            do
            {
              vDSP_vsmul((const float *)(*((_QWORD *)v45[20] + 3) + v63), 1, (const float *)(*(_QWORD *)(v39 + 16) + v61), (float *)(*((_QWORD *)v45[20] + 3) + v63), 1, v59);
              ++v62;
              v49 = *((int *)v45 + 4);
              v61 += 4;
              v63 += 4 * v59;
            }
            while (v62 < v49);
            v56 = *((_DWORD *)v45 + 5);
          }
          ++v58;
          v57 += v60;
        }
        while (v58 < v56);
      }
    }
    a1 = v93;
    v5 = v94;
    if (v92)
    {
      v64 = (unint64_t *)&v92->__shared_owners_;
      do
        v65 = __ldaxr(v64);
      while (__stlxr(v65 - 1, v64));
      if (!v65)
      {
        ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
        std::__shared_weak_count::__release_weak(v92);
      }
    }
    if (v95)
    {
      v66 = (unint64_t *)&v95->__shared_owners_;
      do
        v67 = __ldaxr(v66);
      while (__stlxr(v67 - 1, v66));
      if (!v67)
      {
        ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
        std::__shared_weak_count::__release_weak(v95);
      }
    }
  }
  v68 = (std::__shared_weak_count *)a1[54];
  if (v68)
  {
    v69 = (unint64_t *)&v68->__shared_owners_;
    do
      v70 = __ldxr(v69);
    while (__stxr(v70 + 1, v69));
  }
  v71 = *v5;
  if (v5[1] != *v5)
  {
    v72 = 0;
    do
    {
      v73 = *(const void **)(v71 + 16 * v72);
      if (v73
      {
        v75 = (uint64_t)v74;
        v103 = (void ***)v74;
        v76 = *(std::__shared_weak_count **)(v71 + 16 * v72 + 8);
        v104 = v76;
        if (v76)
        {
          v77 = (unint64_t *)&v76->__shared_owners_;
          do
            v78 = __ldxr(v77);
          while (__stxr(v78 + 1, v77));
        }
      }
      else
      {
        v75 = 0;
        v103 = 0;
        v104 = 0;
      }
      v79 = v99[0];
      v80 = v99[0][2 * v72];
      if (v80
      {
        v101 = v81;
        v82 = (std::__shared_weak_count *)v79[2 * v72 + 1];
        v102 = v82;
        if (v82)
        {
          v83 = (unint64_t *)&v82->__shared_owners_;
          do
            v84 = __ldxr(v83);
          while (__stxr(v84 + 1, v83));
        }
      }
      else
      {
        v82 = 0;
        v81 = 0;
        v101 = 0;
        v102 = 0;
      }
      v38.n128_u64[0] = Espresso::QuantSimEngine::blob_container::copy_from_fp32(v75, (uint64_t)v81 + 160, 1.0);
      if (v82)
      {
        v85 = (unint64_t *)&v82->__shared_owners_;
        do
          v86 = __ldaxr(v85);
        while (__stlxr(v86 - 1, v85));
        if (!v86)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v82->__on_zero_shared)(v82, v38);
          std::__shared_weak_count::__release_weak(v82);
        }
      }
      v87 = v104;
      if (v104)
      {
        v88 = (unint64_t *)&v104->__shared_owners_;
        do
          v89 = __ldaxr(v88);
        while (__stlxr(v89 - 1, v88));
        if (!v89)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v87->__on_zero_shared)(v87, v38);
          std::__shared_weak_count::__release_weak(v87);
        }
      }
      ++v72;
      v71 = *v5;
    }
    while (v72 < (v5[1] - *v5) >> 4);
  }
  if (v68)
  {
    v90 = (unint64_t *)&v68->__shared_owners_;
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v68->__on_zero_shared)(v68, v38);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
  v103 = v99;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v103);
  v99[0] = (void **)v100;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v99);
}

void sub_1915FEE08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  *(_QWORD *)(v25 - 104) = &a22;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 104));
  a22 = (void **)&a25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a22);
  _Unwind_Resume(a1);
}

void *wrapper_kernel<Espresso::squeeze_kernel_cpu,Espresso::squeeze_params_t>::__set_weight_raw_blob(void *result, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  void *v7;
  int v8;
  uint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::runtime_error *exception;
  unint64_t v15;
  std::runtime_error *v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  std::string v39;
  _QWORD v40[2];
  unsigned __int8 v41;
  _QWORD v42[2];
  unsigned __int8 v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;

  v7 = result;
  v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10)
      return result;
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    v10 = (uint64_t)v7 + 440;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v10, (__int128 *)&v52);
    size = (std::__shared_weak_count *)v52.__r_.__value_.__l.__size_;
    if (v52.__r_.__value_.__l.__size_)
    {
      v12 = (unint64_t *)(v52.__r_.__value_.__l.__size_ + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    if (a5 != 4 * *(int *)(*(_QWORD *)v10 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      v15 = a5;
      v16 = exception;
      std::to_string(&v45, v15);
      v17 = std::string::insert(&v45, 0, "Unexpected size s=");
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      v19 = std::string::append(&v46, "/blob=");
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, 4 * *(int *)(*(_QWORD *)v10 + 8));
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v21 = &v44;
      else
        v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      else
        v22 = v44.__r_.__value_.__l.__size_;
      v23 = std::string::append(&v47, (const std::string::value_type *)v21, v22);
      v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, " @ ");
      if ((v43 & 0x80u) == 0)
        v25 = (const std::string::value_type *)v42;
      else
        v25 = (const std::string::value_type *)v42[0];
      if ((v43 & 0x80u) == 0)
        v26 = v43;
      else
        v26 = v42[1];
      v27 = std::string::append(&v48, v25, v26);
      v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      v29 = std::string::append(&v49, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v40, ":");
      if ((v41 & 0x80u) == 0)
        v31 = (const std::string::value_type *)v40;
      else
        v31 = (const std::string::value_type *)v40[0];
      if ((v41 & 0x80u) == 0)
        v32 = v41;
      else
        v32 = v40[1];
      v33 = std::string::append(&v50, v31, v32);
      v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, 197);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = &v39;
      else
        v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      else
        v36 = v39.__r_.__value_.__l.__size_;
      v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
      v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v16, &v52);
      __cxa_throw(v16, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    return memcpy(*(void **)(*(_QWORD *)v10 + 16), a4, a5);
  }
  return result;
}

void sub_1915FF1C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  void *v59;
  int v60;
  uint64_t v61;

  if (*(char *)(v61 - 57) < 0)
    operator delete(*(void **)(v61 - 80));
  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v61 - 89) < 0)
    operator delete(*(void **)(v61 - 112));
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v61 - 121) < 0)
    operator delete(*(void **)(v61 - 144));
  if (*(char *)(v61 - 153) < 0)
    operator delete(*(void **)(v61 - 176));
  if (a27 < 0)
    operator delete(a22);
  if (a59 < 0)
    operator delete(a54);
  if (a33 < 0)
    operator delete(a28);
  if (a52 < 0)
    operator delete(a47);
  if (a45 < 0)
    operator delete(a40);
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0)
LABEL_28:
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

BOOL wrapper_kernel<Espresso::squeeze_kernel_cpu,Espresso::squeeze_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2;

  v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10)
      return 0;
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

void wrapper_kernel<Espresso::squeeze_kernel_cpu,Espresso::squeeze_params_t>::convert_layer_data_to_fp32(_QWORD *a1, char **a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v9;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  const void *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  __int128 v43;
  int64x2_t v44;
  char *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  __int128 v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  int64x2_t v59;
  char *v60;
  _QWORD *v61;
  void *__p;
  void *v63;
  __int128 v64;
  const void *v65;
  std::__shared_weak_count *v66;

  if (a3 != a4)
  {
    v9 = a3;
    v12 = a2 + 2;
    while (1)
    {
      v14 = *(const void **)v9;
      v13 = *(std::__shared_weak_count **)(v9 + 8);
      v65 = *(const void **)v9;
      v66 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
      }
      v17 = operator new(0x118uLL);
      v17[1] = 0;
      v17[2] = 0;
      *v17 = &off_1E2DC1868;
      Espresso::blob_cpu::blob_cpu((uint64_t)(v17 + 3), a1);
      *(_QWORD *)&v64 = v17 + 3;
      *((_QWORD *)&v64 + 1) = v17;
      Espresso::abstract_blob_container::shape((char *)&v58, (uint64_t)v14);
      v56 = 0;
      v57 = 0;
      (*(void (**)(_QWORD *, uint64_t *, uint64_t *))(v17[3] + 16))(v17 + 3, &v58, &v56);
      v18 = v57;
      if (v57)
      {
        v19 = (unint64_t *)&v57->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if (__p)
      {
        v63 = __p;
        operator delete(__p);
      }
      if (v65)
      {
        if (v21)
          break;
      }
      v21 = 0;
      v55 = 0;
      if (a5)
        goto LABEL_21;
LABEL_28:
      v27 = v64;
      if (*((_QWORD *)&v64 + 1))
      {
        v28 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v31 = a2[1];
      v30 = (unint64_t)a2[2];
      if ((unint64_t)v31 >= v30)
      {
        v54 = v27;
        v33 = (v31 - *a2) >> 4;
        if ((unint64_t)(v33 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v34 = v30 - (_QWORD)*a2;
        v35 = v34 >> 3;
        if (v34 >> 3 <= (unint64_t)(v33 + 1))
          v35 = v33 + 1;
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0)
          v36 = 0xFFFFFFFFFFFFFFFLL;
        else
          v36 = v35;
        v61 = v12;
        v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v36);
        v39 = &v37[16 * v33];
        *(_OWORD *)v39 = v54;
        v41 = *a2;
        v40 = a2[1];
        if (v40 == *a2)
        {
          v44 = vdupq_n_s64((unint64_t)v40);
          v42 = &v37[16 * v33];
        }
        else
        {
          v42 = &v37[16 * v33];
          do
          {
            v43 = *((_OWORD *)v40 - 1);
            v40 -= 16;
            *((_OWORD *)v42 - 1) = v43;
            v42 -= 16;
            *(_QWORD *)v40 = 0;
            *((_QWORD *)v40 + 1) = 0;
          }
          while (v40 != v41);
          v44 = *(int64x2_t *)a2;
        }
        v32 = v39 + 16;
        *a2 = v42;
        a2[1] = v39 + 16;
        v59 = v44;
        v45 = a2[2];
        a2[2] = &v37[16 * v38];
        v60 = v45;
        v58 = v44.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v58);
      }
      else
      {
        *(_OWORD *)v31 = v27;
        v32 = v31 + 16;
      }
      a2[1] = v32;
      if (v55)
      {
        v46 = (unint64_t *)&v55->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      v48 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
      if (*((_QWORD *)&v64 + 1))
      {
        v49 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      v51 = v66;
      if (v66)
      {
        v52 = (unint64_t *)&v66->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v9 += 16;
      if (v9 == a4)
        return;
    }
    v55 = v66;
    if (v66)
    {
      v22 = (unint64_t *)&v66->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    if (!a5)
      goto LABEL_28;
LABEL_21:
    if (a6)
    {
      v58 = 0;
      v59.i64[0] = 0;
      (*(void (**)(void *, uint64_t *, uint64_t))(*(_QWORD *)v21 + 40))(v21, &v58, v64 + 160);
      v24 = (std::__shared_weak_count *)v59.i64[0];
      if (v59.i64[0])
      {
        v25 = (unint64_t *)(v59.i64[0] + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v21, v64 + 160, 1.0);
    }
    goto LABEL_28;
  }
}

void sub_1915FF71C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::squeeze_kernel_cpu,Espresso::squeeze_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB4A58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::squeeze_kernel_cpu,Espresso::squeeze_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB4A58;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::squeeze_kernel_cpu,Espresso::squeeze_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_49@<Q0>(uint64_t *a1@<X1>, const void *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  __n128 result;

  v6 = operator new(0x260uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DB5238;
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  memcpy(v6 + 38, a2, 0x109uLL);
  v6[3] = &off_1E2D54638;
  *((_OWORD *)v6 + 36) = 0u;
  *((_OWORD *)v6 + 37) = 0u;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v6 + 72, *a1, a1[1]);
  result.n128_u64[0] = (unint64_t)(v6 + 3);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1915FF880(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::tensor_zero_pad_kernel_cpu,Espresso::tensor_zero_pad_params_t>::~wrapper_kernel(Espresso::base_kernel *a1)
{
  *(_QWORD *)a1 = &off_1E2D54638;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 568);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 552);
  Espresso::base_kernel::~base_kernel(a1);
}

{
  *(_QWORD *)a1 = &off_1E2D54638;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 568);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 552);
  Espresso::base_kernel::~base_kernel(a1);
  JUMPOUT(0x19401CD90);
}

void wrapper_kernel<Espresso::tensor_zero_pad_kernel_cpu,Espresso::tensor_zero_pad_params_t>::__launch(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v5;
  _BOOL4 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  float *v31;
  vDSP_Length v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  __n128 v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  void **v44;
  void **v45;
  void **v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  int *v52;
  float *v53;
  vDSP_Length v54;
  int *v55;
  int v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  vDSP_Length v60;
  vDSP_Length v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  const void *v74;
  void **v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  void **v80;
  const void *v81;
  void *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  _QWORD *v94;
  uint64_t *v95;
  std::__shared_weak_count *v96;
  float __B;
  _QWORD v98[2];
  _QWORD v99[2];
  void **v100[3];
  char *v101[3];
  void *v102;
  std::__shared_weak_count *v103;
  void ***v104;
  std::__shared_weak_count *v105;

  v5 = a3;
  memset(v101, 0, sizeof(v101));
  memset(v100, 0, sizeof(v100));
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)*a3 + 32))(*(_QWORD *)*a3))
    v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)*v5 + 32))(*(_QWORD *)*v5) == 1;
  else
    v7 = 1;
  v8 = (std::__shared_weak_count *)a1[70];
  v99[0] = a1[69];
  v99[1] = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  wrapper_kernel<Espresso::tensor_zero_pad_kernel_cpu,Espresso::tensor_zero_pad_params_t>::convert_layer_data_to_fp32(v99, v101, *a4, a4[1], 1, v7);
  if (v8)
  {
    v11 = (unint64_t *)&v8->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v13 = (std::__shared_weak_count *)a1[70];
  v98[0] = a1[69];
  v98[1] = v13;
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  wrapper_kernel<Espresso::tensor_zero_pad_kernel_cpu,Espresso::tensor_zero_pad_params_t>::convert_layer_data_to_fp32(v98, (char **)v100, *v5, v5[1], 0, 0);
  if (v13)
  {
    v17 = (unint64_t *)&v13->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v19 = *a4;
  if (a4[1] != *a4)
  {
    v20 = 0;
    do
    {
      if (!v7
        && (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v19 + 16 * v20) + 32))(*(_QWORD *)(v19 + 16 * v20))
         || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(*a4 + 16 * v20) + 32))(*(_QWORD *)(*a4 + 16 * v20)) == 1))
      {
        __B = *(float *)(*(_QWORD *)(*a4 + 16 * v20) + 112);
        v21 = &v101[0][16 * v20];
        v104 = (void ***)v22;
        v23 = (std::__shared_weak_count *)*((_QWORD *)v21 + 1);
        v105 = v23;
        if (v23)
        {
          v24 = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
        }
        v26 = *((_QWORD *)v22 + 20);
        v27 = (std::__shared_weak_count *)*((_QWORD *)v22 + 21);
        v102 = (void *)v26;
        v103 = v27;
        if (v27)
        {
          v28 = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldxr(v28);
          while (__stxr(v29 + 1, v28));
        }
        v30 = 0;
        v31 = *(float **)(v26 + 24);
        v32 = *(int *)(v26 + 8);
        v33 = v26 + 12;
        do
        {
          v32 *= *(int *)(v33 + v30);
          v30 += 4;
        }
        while (v30 != 12);
        vDSP_vsmul(v31, 1, &__B, v31, 1, v32);
        if (v27)
        {
          v34 = (unint64_t *)&v27->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        v36 = v105;
        if (v105)
        {
          v37 = (unint64_t *)&v105->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
      }
      ++v20;
      v19 = *a4;
    }
    while (v20 < (a4[1] - *a4) >> 4);
  }
  Espresso::tensor_zero_pad_kernel_cpu::__launch((uint64_t)a1, v16, (uint64_t **)v100, (uint64_t)v101);
  v40 = a1[71];
  if (v40)
  {
    v41 = (std::__shared_weak_count *)a1[72];
    v96 = v41;
    if (v41)
    {
      v42 = (unint64_t *)&v41->__shared_owners_;
      do
        v43 = __ldxr(v42);
      while (__stxr(v43 + 1, v42));
    }
    v44 = v100[0];
    if (*v100[0]
    {
      v46 = v45;
      v47 = (std::__shared_weak_count *)v44[1];
      v104 = (void ***)v45;
      v105 = v47;
      if (v47)
      {
        v48 = (unint64_t *)&v47->__shared_owners_;
        do
          v49 = __ldxr(v48);
        while (__stxr(v49 + 1, v48));
      }
    }
    else
    {
      v47 = 0;
      v46 = 0;
      v104 = 0;
      v105 = 0;
    }
    LODWORD(v50) = *(_DWORD *)(v40 + 8);
    v94 = a1;
    v95 = v5;
    v93 = v47;
    if ((_DWORD)v50 == 1)
    {
      v51 = 0;
      v52 = (int *)v46[20];
      v53 = (float *)*((_QWORD *)v52 + 3);
      v54 = v52[2];
      v55 = v52 + 3;
      do
        v54 *= v55[v51++];
      while (v51 != 3);
      vDSP_vsmul(v53, 1, *(const float **)(v40 + 16), v53, 1, v54);
    }
    else
    {
      v56 = *((_DWORD *)v46 + 4);
      if ((_DWORD)v50 != v56)
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v50, v56);
      v57 = *((_DWORD *)v46 + 5);
      if (v57)
      {
        v58 = 0;
        v59 = 0;
        v60 = *((int *)v46 + 2) * (uint64_t)*((int *)v46 + 3);
        v61 = 4 * (int)v50 * v60;
        do
        {
          if ((_DWORD)v50)
          {
            v62 = 0;
            v63 = 0;
            v64 = v58;
            do
            {
              vDSP_vsmul((const float *)(*((_QWORD *)v46[20] + 3) + v64), 1, (const float *)(*(_QWORD *)(v40 + 16) + v62), (float *)(*((_QWORD *)v46[20] + 3) + v64), 1, v60);
              ++v63;
              v50 = *((int *)v46 + 4);
              v62 += 4;
              v64 += 4 * v60;
            }
            while (v63 < v50);
            v57 = *((_DWORD *)v46 + 5);
          }
          ++v59;
          v58 += v61;
        }
        while (v59 < v57);
      }
    }
    a1 = v94;
    v5 = v95;
    if (v93)
    {
      v65 = (unint64_t *)&v93->__shared_owners_;
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 - 1, v65));
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
        std::__shared_weak_count::__release_weak(v93);
      }
    }
    if (v96)
    {
      v67 = (unint64_t *)&v96->__shared_owners_;
      do
        v68 = __ldaxr(v67);
      while (__stlxr(v68 - 1, v67));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
        std::__shared_weak_count::__release_weak(v96);
      }
    }
  }
  v69 = (std::__shared_weak_count *)a1[70];
  if (v69)
  {
    v70 = (unint64_t *)&v69->__shared_owners_;
    do
      v71 = __ldxr(v70);
    while (__stxr(v71 + 1, v70));
  }
  v72 = *v5;
  if (v5[1] != *v5)
  {
    v73 = 0;
    do
    {
      v74 = *(const void **)(v72 + 16 * v73);
      if (v74
      {
        v76 = (uint64_t)v75;
        v104 = (void ***)v75;
        v77 = *(std::__shared_weak_count **)(v72 + 16 * v73 + 8);
        v105 = v77;
        if (v77)
        {
          v78 = (unint64_t *)&v77->__shared_owners_;
          do
            v79 = __ldxr(v78);
          while (__stxr(v79 + 1, v78));
        }
      }
      else
      {
        v76 = 0;
        v104 = 0;
        v105 = 0;
      }
      v80 = v100[0];
      v81 = v100[0][2 * v73];
      if (v81
      {
        v102 = v82;
        v83 = (std::__shared_weak_count *)v80[2 * v73 + 1];
        v103 = v83;
        if (v83)
        {
          v84 = (unint64_t *)&v83->__shared_owners_;
          do
            v85 = __ldxr(v84);
          while (__stxr(v85 + 1, v84));
        }
      }
      else
      {
        v83 = 0;
        v82 = 0;
        v102 = 0;
        v103 = 0;
      }
      v39.n128_u64[0] = Espresso::QuantSimEngine::blob_container::copy_from_fp32(v76, (uint64_t)v82 + 160, 1.0);
      if (v83)
      {
        v86 = (unint64_t *)&v83->__shared_owners_;
        do
          v87 = __ldaxr(v86);
        while (__stlxr(v87 - 1, v86));
        if (!v87)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v83->__on_zero_shared)(v83, v39);
          std::__shared_weak_count::__release_weak(v83);
        }
      }
      v88 = v105;
      if (v105)
      {
        v89 = (unint64_t *)&v105->__shared_owners_;
        do
          v90 = __ldaxr(v89);
        while (__stlxr(v90 - 1, v89));
        if (!v90)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v88->__on_zero_shared)(v88, v39);
          std::__shared_weak_count::__release_weak(v88);
        }
      }
      ++v73;
      v72 = *v5;
    }
    while (v73 < (v5[1] - *v5) >> 4);
  }
  if (v69)
  {
    v91 = (unint64_t *)&v69->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v69->__on_zero_shared)(v69, v39);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  v104 = v100;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v104);
  v100[0] = (void **)v101;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v100);
}

void sub_1915FFFFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  *(_QWORD *)(v25 - 104) = &a22;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 104));
  a22 = (void **)&a25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a22);
  _Unwind_Resume(a1);
}

void *wrapper_kernel<Espresso::tensor_zero_pad_kernel_cpu,Espresso::tensor_zero_pad_params_t>::__set_weight_raw_blob(void *result, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  void *v7;
  int v8;
  uint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::runtime_error *exception;
  unint64_t v15;
  std::runtime_error *v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  std::string v39;
  _QWORD v40[2];
  unsigned __int8 v41;
  _QWORD v42[2];
  unsigned __int8 v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;

  v7 = result;
  v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10)
      return result;
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    v10 = (uint64_t)v7 + 568;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v10, (__int128 *)&v52);
    size = (std::__shared_weak_count *)v52.__r_.__value_.__l.__size_;
    if (v52.__r_.__value_.__l.__size_)
    {
      v12 = (unint64_t *)(v52.__r_.__value_.__l.__size_ + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    if (a5 != 4 * *(int *)(*(_QWORD *)v10 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      v15 = a5;
      v16 = exception;
      std::to_string(&v45, v15);
      v17 = std::string::insert(&v45, 0, "Unexpected size s=");
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      v19 = std::string::append(&v46, "/blob=");
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, 4 * *(int *)(*(_QWORD *)v10 + 8));
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v21 = &v44;
      else
        v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      else
        v22 = v44.__r_.__value_.__l.__size_;
      v23 = std::string::append(&v47, (const std::string::value_type *)v21, v22);
      v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, " @ ");
      if ((v43 & 0x80u) == 0)
        v25 = (const std::string::value_type *)v42;
      else
        v25 = (const std::string::value_type *)v42[0];
      if ((v43 & 0x80u) == 0)
        v26 = v43;
      else
        v26 = v42[1];
      v27 = std::string::append(&v48, v25, v26);
      v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      v29 = std::string::append(&v49, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v40, ":");
      if ((v41 & 0x80u) == 0)
        v31 = (const std::string::value_type *)v40;
      else
        v31 = (const std::string::value_type *)v40[0];
      if ((v41 & 0x80u) == 0)
        v32 = v41;
      else
        v32 = v40[1];
      v33 = std::string::append(&v50, v31, v32);
      v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, 197);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = &v39;
      else
        v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      else
        v36 = v39.__r_.__value_.__l.__size_;
      v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
      v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v16, &v52);
      __cxa_throw(v16, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    return memcpy(*(void **)(*(_QWORD *)v10 + 16), a4, a5);
  }
  return result;
}

void sub_1916003B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  void *v59;
  int v60;
  uint64_t v61;

  if (*(char *)(v61 - 57) < 0)
    operator delete(*(void **)(v61 - 80));
  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v61 - 89) < 0)
    operator delete(*(void **)(v61 - 112));
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v61 - 121) < 0)
    operator delete(*(void **)(v61 - 144));
  if (*(char *)(v61 - 153) < 0)
    operator delete(*(void **)(v61 - 176));
  if (a27 < 0)
    operator delete(a22);
  if (a59 < 0)
    operator delete(a54);
  if (a33 < 0)
    operator delete(a28);
  if (a52 < 0)
    operator delete(a47);
  if (a45 < 0)
    operator delete(a40);
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0)
LABEL_28:
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

BOOL wrapper_kernel<Espresso::tensor_zero_pad_kernel_cpu,Espresso::tensor_zero_pad_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2;

  v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10)
      return 0;
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

void wrapper_kernel<Espresso::tensor_zero_pad_kernel_cpu,Espresso::tensor_zero_pad_params_t>::convert_layer_data_to_fp32(_QWORD *a1, char **a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v9;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  const void *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  __int128 v43;
  int64x2_t v44;
  char *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  __int128 v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  int64x2_t v59;
  char *v60;
  _QWORD *v61;
  void *__p;
  void *v63;
  __int128 v64;
  const void *v65;
  std::__shared_weak_count *v66;

  if (a3 != a4)
  {
    v9 = a3;
    v12 = a2 + 2;
    while (1)
    {
      v14 = *(const void **)v9;
      v13 = *(std::__shared_weak_count **)(v9 + 8);
      v65 = *(const void **)v9;
      v66 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
      }
      v17 = operator new(0x118uLL);
      v17[1] = 0;
      v17[2] = 0;
      *v17 = &off_1E2DC1868;
      Espresso::blob_cpu::blob_cpu((uint64_t)(v17 + 3), a1);
      *(_QWORD *)&v64 = v17 + 3;
      *((_QWORD *)&v64 + 1) = v17;
      Espresso::abstract_blob_container::shape((char *)&v58, (uint64_t)v14);
      v56 = 0;
      v57 = 0;
      (*(void (**)(_QWORD *, uint64_t *, uint64_t *))(v17[3] + 16))(v17 + 3, &v58, &v56);
      v18 = v57;
      if (v57)
      {
        v19 = (unint64_t *)&v57->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if (__p)
      {
        v63 = __p;
        operator delete(__p);
      }
      if (v65)
      {
        if (v21)
          break;
      }
      v21 = 0;
      v55 = 0;
      if (a5)
        goto LABEL_21;
LABEL_28:
      v27 = v64;
      if (*((_QWORD *)&v64 + 1))
      {
        v28 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v31 = a2[1];
      v30 = (unint64_t)a2[2];
      if ((unint64_t)v31 >= v30)
      {
        v54 = v27;
        v33 = (v31 - *a2) >> 4;
        if ((unint64_t)(v33 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v34 = v30 - (_QWORD)*a2;
        v35 = v34 >> 3;
        if (v34 >> 3 <= (unint64_t)(v33 + 1))
          v35 = v33 + 1;
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0)
          v36 = 0xFFFFFFFFFFFFFFFLL;
        else
          v36 = v35;
        v61 = v12;
        v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v36);
        v39 = &v37[16 * v33];
        *(_OWORD *)v39 = v54;
        v41 = *a2;
        v40 = a2[1];
        if (v40 == *a2)
        {
          v44 = vdupq_n_s64((unint64_t)v40);
          v42 = &v37[16 * v33];
        }
        else
        {
          v42 = &v37[16 * v33];
          do
          {
            v43 = *((_OWORD *)v40 - 1);
            v40 -= 16;
            *((_OWORD *)v42 - 1) = v43;
            v42 -= 16;
            *(_QWORD *)v40 = 0;
            *((_QWORD *)v40 + 1) = 0;
          }
          while (v40 != v41);
          v44 = *(int64x2_t *)a2;
        }
        v32 = v39 + 16;
        *a2 = v42;
        a2[1] = v39 + 16;
        v59 = v44;
        v45 = a2[2];
        a2[2] = &v37[16 * v38];
        v60 = v45;
        v58 = v44.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v58);
      }
      else
      {
        *(_OWORD *)v31 = v27;
        v32 = v31 + 16;
      }
      a2[1] = v32;
      if (v55)
      {
        v46 = (unint64_t *)&v55->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      v48 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
      if (*((_QWORD *)&v64 + 1))
      {
        v49 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      v51 = v66;
      if (v66)
      {
        v52 = (unint64_t *)&v66->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v9 += 16;
      if (v9 == a4)
        return;
    }
    v55 = v66;
    if (v66)
    {
      v22 = (unint64_t *)&v66->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    if (!a5)
      goto LABEL_28;
LABEL_21:
    if (a6)
    {
      v58 = 0;
      v59.i64[0] = 0;
      (*(void (**)(void *, uint64_t *, uint64_t))(*(_QWORD *)v21 + 40))(v21, &v58, v64 + 160);
      v24 = (std::__shared_weak_count *)v59.i64[0];
      if (v59.i64[0])
      {
        v25 = (unint64_t *)(v59.i64[0] + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v21, v64 + 160, 1.0);
    }
    goto LABEL_28;
  }
}

void sub_191600910(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::tensor_zero_pad_kernel_cpu,Espresso::tensor_zero_pad_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB5238;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::tensor_zero_pad_kernel_cpu,Espresso::tensor_zero_pad_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB5238;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::tensor_zero_pad_kernel_cpu,Espresso::tensor_zero_pad_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_48@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  __int128 v7;
  __n128 result;

  v6 = (char *)operator new(0x178uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DB43C8;
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  v7 = *(_OWORD *)(a2 + 16);
  *((_OWORD *)v6 + 19) = *(_OWORD *)a2;
  *((_OWORD *)v6 + 20) = v7;
  v6[336] = *(_BYTE *)(a2 + 32);
  *((_QWORD *)v6 + 3) = &off_1E2D4EAD0;
  *(_OWORD *)(v6 + 344) = 0u;
  *(_OWORD *)(v6 + 360) = 0u;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v6 + 43, *a1, a1[1]);
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_191600A78(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::fill_kernel_cpu,Espresso::fill_params_t>::~wrapper_kernel(Espresso::base_kernel *a1)
{
  *(_QWORD *)a1 = &off_1E2D4EAD0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 336);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 320);
  Espresso::base_kernel::~base_kernel(a1);
}

{
  *(_QWORD *)a1 = &off_1E2D4EAD0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 336);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 320);
  Espresso::base_kernel::~base_kernel(a1);
  JUMPOUT(0x19401CD90);
}

void wrapper_kernel<Espresso::fill_kernel_cpu,Espresso::fill_params_t>::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  _BOOL4 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  float *v31;
  vDSP_Length v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  __n128 v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  void **v45;
  void **v46;
  void **v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  int *v53;
  float *v54;
  vDSP_Length v55;
  int *v56;
  int v57;
  int v58;
  uint64_t v59;
  unint64_t v60;
  vDSP_Length v61;
  vDSP_Length v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  const void *v75;
  void **v76;
  uint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  void **v81;
  const void *v82;
  void *v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  uint64_t v95;
  std::__shared_weak_count *v96;
  float __B;
  _QWORD v98[2];
  _QWORD v99[2];
  void **v100[3];
  char *v101[3];
  void *v102;
  std::__shared_weak_count *v103;
  void ***v104;
  std::__shared_weak_count *v105;

  memset(v101, 0, sizeof(v101));
  memset(v100, 0, sizeof(v100));
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)*a3 + 32))(*(_QWORD *)*a3))
    v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)*a3 + 32))(*(_QWORD *)*a3) == 1;
  else
    v8 = 1;
  v9 = *(std::__shared_weak_count **)(a1 + 328);
  v99[0] = *(_QWORD *)(a1 + 320);
  v99[1] = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  wrapper_kernel<Espresso::fill_kernel_cpu,Espresso::fill_params_t>::convert_layer_data_to_fp32(v99, v101, *a4, a4[1], 1, v8);
  if (v9)
  {
    v12 = (unint64_t *)&v9->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v14 = *(std::__shared_weak_count **)(a1 + 328);
  v98[0] = *(_QWORD *)(a1 + 320);
  v98[1] = v14;
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  wrapper_kernel<Espresso::fill_kernel_cpu,Espresso::fill_params_t>::convert_layer_data_to_fp32(v98, (char **)v100, *a3, a3[1], 0, 0);
  if (v14)
  {
    v17 = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v95 = a1;
  v19 = *a4;
  if (a4[1] != *a4)
  {
    v20 = 0;
    do
    {
      if (!v8
        && (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v19 + 16 * v20) + 32))(*(_QWORD *)(v19 + 16 * v20))
         || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(*a4 + 16 * v20) + 32))(*(_QWORD *)(*a4 + 16 * v20)) == 1))
      {
        __B = *(float *)(*(_QWORD *)(*a4 + 16 * v20) + 112);
        v21 = &v101[0][16 * v20];
        v104 = (void ***)v22;
        v23 = (std::__shared_weak_count *)*((_QWORD *)v21 + 1);
        v105 = v23;
        if (v23)
        {
          v24 = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
        }
        v26 = *((_QWORD *)v22 + 20);
        v27 = (std::__shared_weak_count *)*((_QWORD *)v22 + 21);
        v102 = (void *)v26;
        v103 = v27;
        if (v27)
        {
          v28 = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldxr(v28);
          while (__stxr(v29 + 1, v28));
        }
        v30 = 0;
        v31 = *(float **)(v26 + 24);
        v32 = *(int *)(v26 + 8);
        v33 = v26 + 12;
        do
        {
          v32 *= *(int *)(v33 + v30);
          v30 += 4;
        }
        while (v30 != 12);
        vDSP_vsmul(v31, 1, &__B, v31, 1, v32);
        if (v27)
        {
          v34 = (unint64_t *)&v27->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        v36 = v105;
        if (v105)
        {
          v37 = (unint64_t *)&v105->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
      }
      ++v20;
      v19 = *a4;
    }
    while (v20 < (a4[1] - *a4) >> 4);
  }
  v39 = v95;
  Espresso::fill_kernel_cpu::__launch(v95, a2, (uint64_t **)v100, (uint64_t)v101);
  v41 = *(_QWORD *)(v95 + 336);
  if (v41)
  {
    v42 = *(std::__shared_weak_count **)(v95 + 344);
    v96 = v42;
    if (v42)
    {
      v43 = (unint64_t *)&v42->__shared_owners_;
      do
        v44 = __ldxr(v43);
      while (__stxr(v44 + 1, v43));
    }
    v45 = v100[0];
    if (*v100[0]
    {
      v47 = v46;
      v48 = (std::__shared_weak_count *)v45[1];
      v104 = (void ***)v46;
      v105 = v48;
      if (v48)
      {
        v49 = (unint64_t *)&v48->__shared_owners_;
        do
          v50 = __ldxr(v49);
        while (__stxr(v50 + 1, v49));
      }
    }
    else
    {
      v48 = 0;
      v47 = 0;
      v104 = 0;
      v105 = 0;
    }
    LODWORD(v51) = *(_DWORD *)(v41 + 8);
    v94 = v48;
    if ((_DWORD)v51 == 1)
    {
      v52 = 0;
      v53 = (int *)v47[20];
      v54 = (float *)*((_QWORD *)v53 + 3);
      v55 = v53[2];
      v56 = v53 + 3;
      do
        v55 *= v56[v52++];
      while (v52 != 3);
      vDSP_vsmul(v54, 1, *(const float **)(v41 + 16), v54, 1, v55);
    }
    else
    {
      v57 = *((_DWORD *)v47 + 4);
      if ((_DWORD)v51 != v57)
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v51, v57);
      v58 = *((_DWORD *)v47 + 5);
      if (v58)
      {
        v59 = 0;
        v60 = 0;
        v61 = *((int *)v47 + 2) * (uint64_t)*((int *)v47 + 3);
        v62 = 4 * (int)v51 * v61;
        do
        {
          if ((_DWORD)v51)
          {
            v63 = 0;
            v64 = 0;
            v65 = v59;
            do
            {
              vDSP_vsmul((const float *)(*((_QWORD *)v47[20] + 3) + v65), 1, (const float *)(*(_QWORD *)(v41 + 16) + v63), (float *)(*((_QWORD *)v47[20] + 3) + v65), 1, v61);
              ++v64;
              v51 = *((int *)v47 + 4);
              v63 += 4;
              v65 += 4 * v61;
            }
            while (v64 < v51);
            v58 = *((_DWORD *)v47 + 5);
          }
          ++v60;
          v59 += v62;
        }
        while (v60 < v58);
      }
    }
    v39 = v95;
    if (v94)
    {
      v66 = (unint64_t *)&v94->__shared_owners_;
      do
        v67 = __ldaxr(v66);
      while (__stlxr(v67 - 1, v66));
      if (!v67)
      {
        ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
        std::__shared_weak_count::__release_weak(v94);
      }
    }
    if (v96)
    {
      v68 = (unint64_t *)&v96->__shared_owners_;
      do
        v69 = __ldaxr(v68);
      while (__stlxr(v69 - 1, v68));
      if (!v69)
      {
        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
        std::__shared_weak_count::__release_weak(v96);
      }
    }
  }
  v70 = *(std::__shared_weak_count **)(v39 + 328);
  if (v70)
  {
    v71 = (unint64_t *)&v70->__shared_owners_;
    do
      v72 = __ldxr(v71);
    while (__stxr(v72 + 1, v71));
  }
  v73 = *a3;
  if (a3[1] != *a3)
  {
    v74 = 0;
    do
    {
      v75 = *(const void **)(v73 + 16 * v74);
      if (v75
      {
        v77 = (uint64_t)v76;
        v104 = (void ***)v76;
        v78 = *(std::__shared_weak_count **)(v73 + 16 * v74 + 8);
        v105 = v78;
        if (v78)
        {
          v79 = (unint64_t *)&v78->__shared_owners_;
          do
            v80 = __ldxr(v79);
          while (__stxr(v80 + 1, v79));
        }
      }
      else
      {
        v77 = 0;
        v104 = 0;
        v105 = 0;
      }
      v81 = v100[0];
      v82 = v100[0][2 * v74];
      if (v82
      {
        v102 = v83;
        v84 = (std::__shared_weak_count *)v81[2 * v74 + 1];
        v103 = v84;
        if (v84)
        {
          v85 = (unint64_t *)&v84->__shared_owners_;
          do
            v86 = __ldxr(v85);
          while (__stxr(v86 + 1, v85));
        }
      }
      else
      {
        v84 = 0;
        v83 = 0;
        v102 = 0;
        v103 = 0;
      }
      v40.n128_u64[0] = Espresso::QuantSimEngine::blob_container::copy_from_fp32(v77, (uint64_t)v83 + 160, 1.0);
      if (v84)
      {
        v87 = (unint64_t *)&v84->__shared_owners_;
        do
          v88 = __ldaxr(v87);
        while (__stlxr(v88 - 1, v87));
        if (!v88)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v84->__on_zero_shared)(v84, v40);
          std::__shared_weak_count::__release_weak(v84);
        }
      }
      v89 = v105;
      if (v105)
      {
        v90 = (unint64_t *)&v105->__shared_owners_;
        do
          v91 = __ldaxr(v90);
        while (__stlxr(v91 - 1, v90));
        if (!v91)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v89->__on_zero_shared)(v89, v40);
          std::__shared_weak_count::__release_weak(v89);
        }
      }
      ++v74;
      v73 = *a3;
    }
    while (v74 < (a3[1] - *a3) >> 4);
  }
  if (v70)
  {
    v92 = (unint64_t *)&v70->__shared_owners_;
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v70->__on_zero_shared)(v70, v40);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  v104 = v100;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v104);
  v100[0] = (void **)v101;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v100);
}

void sub_1916011F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  *(_QWORD *)(v25 - 104) = &a22;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 104));
  a22 = (void **)&a25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a22);
  _Unwind_Resume(a1);
}

void *wrapper_kernel<Espresso::fill_kernel_cpu,Espresso::fill_params_t>::__set_weight_raw_blob(void *result, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  void *v7;
  int v8;
  uint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::runtime_error *exception;
  unint64_t v15;
  std::runtime_error *v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  std::string v39;
  _QWORD v40[2];
  unsigned __int8 v41;
  _QWORD v42[2];
  unsigned __int8 v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;

  v7 = result;
  v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10)
      return result;
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    v10 = (uint64_t)v7 + 336;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v10, (__int128 *)&v52);
    size = (std::__shared_weak_count *)v52.__r_.__value_.__l.__size_;
    if (v52.__r_.__value_.__l.__size_)
    {
      v12 = (unint64_t *)(v52.__r_.__value_.__l.__size_ + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    if (a5 != 4 * *(int *)(*(_QWORD *)v10 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      v15 = a5;
      v16 = exception;
      std::to_string(&v45, v15);
      v17 = std::string::insert(&v45, 0, "Unexpected size s=");
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      v19 = std::string::append(&v46, "/blob=");
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, 4 * *(int *)(*(_QWORD *)v10 + 8));
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v21 = &v44;
      else
        v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      else
        v22 = v44.__r_.__value_.__l.__size_;
      v23 = std::string::append(&v47, (const std::string::value_type *)v21, v22);
      v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, " @ ");
      if ((v43 & 0x80u) == 0)
        v25 = (const std::string::value_type *)v42;
      else
        v25 = (const std::string::value_type *)v42[0];
      if ((v43 & 0x80u) == 0)
        v26 = v43;
      else
        v26 = v42[1];
      v27 = std::string::append(&v48, v25, v26);
      v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      v29 = std::string::append(&v49, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v40, ":");
      if ((v41 & 0x80u) == 0)
        v31 = (const std::string::value_type *)v40;
      else
        v31 = (const std::string::value_type *)v40[0];
      if ((v41 & 0x80u) == 0)
        v32 = v41;
      else
        v32 = v40[1];
      v33 = std::string::append(&v50, v31, v32);
      v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, 197);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = &v39;
      else
        v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      else
        v36 = v39.__r_.__value_.__l.__size_;
      v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
      v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v16, &v52);
      __cxa_throw(v16, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    return memcpy(*(void **)(*(_QWORD *)v10 + 16), a4, a5);
  }
  return result;
}

void sub_1916015AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  void *v59;
  int v60;
  uint64_t v61;

  if (*(char *)(v61 - 57) < 0)
    operator delete(*(void **)(v61 - 80));
  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v61 - 89) < 0)
    operator delete(*(void **)(v61 - 112));
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v61 - 121) < 0)
    operator delete(*(void **)(v61 - 144));
  if (*(char *)(v61 - 153) < 0)
    operator delete(*(void **)(v61 - 176));
  if (a27 < 0)
    operator delete(a22);
  if (a59 < 0)
    operator delete(a54);
  if (a33 < 0)
    operator delete(a28);
  if (a52 < 0)
    operator delete(a47);
  if (a45 < 0)
    operator delete(a40);
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0)
LABEL_28:
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

BOOL wrapper_kernel<Espresso::fill_kernel_cpu,Espresso::fill_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2;

  v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10)
      return 0;
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

void wrapper_kernel<Espresso::fill_kernel_cpu,Espresso::fill_params_t>::convert_layer_data_to_fp32(_QWORD *a1, char **a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v9;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  const void *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  __int128 v43;
  int64x2_t v44;
  char *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  __int128 v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  int64x2_t v59;
  char *v60;
  _QWORD *v61;
  void *__p;
  void *v63;
  __int128 v64;
  const void *v65;
  std::__shared_weak_count *v66;

  if (a3 != a4)
  {
    v9 = a3;
    v12 = a2 + 2;
    while (1)
    {
      v14 = *(const void **)v9;
      v13 = *(std::__shared_weak_count **)(v9 + 8);
      v65 = *(const void **)v9;
      v66 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
      }
      v17 = operator new(0x118uLL);
      v17[1] = 0;
      v17[2] = 0;
      *v17 = &off_1E2DC1868;
      Espresso::blob_cpu::blob_cpu((uint64_t)(v17 + 3), a1);
      *(_QWORD *)&v64 = v17 + 3;
      *((_QWORD *)&v64 + 1) = v17;
      Espresso::abstract_blob_container::shape((char *)&v58, (uint64_t)v14);
      v56 = 0;
      v57 = 0;
      (*(void (**)(_QWORD *, uint64_t *, uint64_t *))(v17[3] + 16))(v17 + 3, &v58, &v56);
      v18 = v57;
      if (v57)
      {
        v19 = (unint64_t *)&v57->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if (__p)
      {
        v63 = __p;
        operator delete(__p);
      }
      if (v65)
      {
        if (v21)
          break;
      }
      v21 = 0;
      v55 = 0;
      if (a5)
        goto LABEL_21;
LABEL_28:
      v27 = v64;
      if (*((_QWORD *)&v64 + 1))
      {
        v28 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v31 = a2[1];
      v30 = (unint64_t)a2[2];
      if ((unint64_t)v31 >= v30)
      {
        v54 = v27;
        v33 = (v31 - *a2) >> 4;
        if ((unint64_t)(v33 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v34 = v30 - (_QWORD)*a2;
        v35 = v34 >> 3;
        if (v34 >> 3 <= (unint64_t)(v33 + 1))
          v35 = v33 + 1;
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0)
          v36 = 0xFFFFFFFFFFFFFFFLL;
        else
          v36 = v35;
        v61 = v12;
        v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v36);
        v39 = &v37[16 * v33];
        *(_OWORD *)v39 = v54;
        v41 = *a2;
        v40 = a2[1];
        if (v40 == *a2)
        {
          v44 = vdupq_n_s64((unint64_t)v40);
          v42 = &v37[16 * v33];
        }
        else
        {
          v42 = &v37[16 * v33];
          do
          {
            v43 = *((_OWORD *)v40 - 1);
            v40 -= 16;
            *((_OWORD *)v42 - 1) = v43;
            v42 -= 16;
            *(_QWORD *)v40 = 0;
            *((_QWORD *)v40 + 1) = 0;
          }
          while (v40 != v41);
          v44 = *(int64x2_t *)a2;
        }
        v32 = v39 + 16;
        *a2 = v42;
        a2[1] = v39 + 16;
        v59 = v44;
        v45 = a2[2];
        a2[2] = &v37[16 * v38];
        v60 = v45;
        v58 = v44.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v58);
      }
      else
      {
        *(_OWORD *)v31 = v27;
        v32 = v31 + 16;
      }
      a2[1] = v32;
      if (v55)
      {
        v46 = (unint64_t *)&v55->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      v48 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
      if (*((_QWORD *)&v64 + 1))
      {
        v49 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      v51 = v66;
      if (v66)
      {
        v52 = (unint64_t *)&v66->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v9 += 16;
      if (v9 == a4)
        return;
    }
    v55 = v66;
    if (v66)
    {
      v22 = (unint64_t *)&v66->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    if (!a5)
      goto LABEL_28;
LABEL_21:
    if (a6)
    {
      v58 = 0;
      v59.i64[0] = 0;
      (*(void (**)(void *, uint64_t *, uint64_t))(*(_QWORD *)v21 + 40))(v21, &v58, v64 + 160);
      v24 = (std::__shared_weak_count *)v59.i64[0];
      if (v59.i64[0])
      {
        v25 = (unint64_t *)(v59.i64[0] + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v21, v64 + 160, 1.0);
    }
    goto LABEL_28;
  }
}

void sub_191601B08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::fill_kernel_cpu,Espresso::fill_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB43C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::fill_kernel_cpu,Espresso::fill_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB43C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::fill_kernel_cpu,Espresso::fill_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_47@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  __n128 result;

  v6 = (char *)operator new(0x168uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DB52A8;
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((_OWORD *)v6 + 19) = *(_OWORD *)a2;
  *((_DWORD *)v6 + 80) = *(_DWORD *)(a2 + 16);
  *((_QWORD *)v6 + 3) = &off_1E2D548F0;
  *(_OWORD *)(v6 + 328) = 0u;
  *(_OWORD *)(v6 + 344) = 0u;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v6 + 41, *a1, a1[1]);
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_191601C70(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::matrix_band_part_kernel_cpu,Espresso::matrix_band_part_params_t>::~wrapper_kernel(Espresso::base_kernel *a1)
{
  *(_QWORD *)a1 = &off_1E2D548F0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 320);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 304);
  Espresso::base_kernel::~base_kernel(a1);
}

{
  *(_QWORD *)a1 = &off_1E2D548F0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 320);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 304);
  Espresso::base_kernel::~base_kernel(a1);
  JUMPOUT(0x19401CD90);
}

void wrapper_kernel<Espresso::matrix_band_part_kernel_cpu,Espresso::matrix_band_part_params_t>::__launch(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v5;
  _BOOL4 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  float *v31;
  vDSP_Length v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  __n128 v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  void **v44;
  void **v45;
  void **v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  int *v52;
  float *v53;
  vDSP_Length v54;
  int *v55;
  int v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  vDSP_Length v60;
  vDSP_Length v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  const void *v74;
  void **v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  void **v80;
  const void *v81;
  void *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  _QWORD *v94;
  uint64_t *v95;
  std::__shared_weak_count *v96;
  float __B;
  _QWORD v98[2];
  _QWORD v99[2];
  void **v100[3];
  char *v101[3];
  void *v102;
  std::__shared_weak_count *v103;
  void ***v104;
  std::__shared_weak_count *v105;

  v5 = a3;
  memset(v101, 0, sizeof(v101));
  memset(v100, 0, sizeof(v100));
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)*a3 + 32))(*(_QWORD *)*a3))
    v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)*v5 + 32))(*(_QWORD *)*v5) == 1;
  else
    v7 = 1;
  v8 = (std::__shared_weak_count *)a1[39];
  v99[0] = a1[38];
  v99[1] = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  wrapper_kernel<Espresso::matrix_band_part_kernel_cpu,Espresso::matrix_band_part_params_t>::convert_layer_data_to_fp32(v99, v101, *a4, a4[1], 1, v7);
  if (v8)
  {
    v11 = (unint64_t *)&v8->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v13 = (std::__shared_weak_count *)a1[39];
  v98[0] = a1[38];
  v98[1] = v13;
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  wrapper_kernel<Espresso::matrix_band_part_kernel_cpu,Espresso::matrix_band_part_params_t>::convert_layer_data_to_fp32(v98, (char **)v100, *v5, v5[1], 0, 0);
  if (v13)
  {
    v17 = (unint64_t *)&v13->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v19 = *a4;
  if (a4[1] != *a4)
  {
    v20 = 0;
    do
    {
      if (!v7
        && (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v19 + 16 * v20) + 32))(*(_QWORD *)(v19 + 16 * v20))
         || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(*a4 + 16 * v20) + 32))(*(_QWORD *)(*a4 + 16 * v20)) == 1))
      {
        __B = *(float *)(*(_QWORD *)(*a4 + 16 * v20) + 112);
        v21 = &v101[0][16 * v20];
        v104 = (void ***)v22;
        v23 = (std::__shared_weak_count *)*((_QWORD *)v21 + 1);
        v105 = v23;
        if (v23)
        {
          v24 = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
        }
        v26 = *((_QWORD *)v22 + 20);
        v27 = (std::__shared_weak_count *)*((_QWORD *)v22 + 21);
        v102 = (void *)v26;
        v103 = v27;
        if (v27)
        {
          v28 = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldxr(v28);
          while (__stxr(v29 + 1, v28));
        }
        v30 = 0;
        v31 = *(float **)(v26 + 24);
        v32 = *(int *)(v26 + 8);
        v33 = v26 + 12;
        do
        {
          v32 *= *(int *)(v33 + v30);
          v30 += 4;
        }
        while (v30 != 12);
        vDSP_vsmul(v31, 1, &__B, v31, 1, v32);
        if (v27)
        {
          v34 = (unint64_t *)&v27->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        v36 = v105;
        if (v105)
        {
          v37 = (unint64_t *)&v105->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
      }
      ++v20;
      v19 = *a4;
    }
    while (v20 < (a4[1] - *a4) >> 4);
  }
  Espresso::matrix_band_part_kernel_cpu::__launch((uint64_t)a1, v16, (uint64_t)v100, (uint64_t)v101);
  v40 = a1[40];
  if (v40)
  {
    v41 = (std::__shared_weak_count *)a1[41];
    v96 = v41;
    if (v41)
    {
      v42 = (unint64_t *)&v41->__shared_owners_;
      do
        v43 = __ldxr(v42);
      while (__stxr(v43 + 1, v42));
    }
    v44 = v100[0];
    if (*v100[0]
    {
      v46 = v45;
      v47 = (std::__shared_weak_count *)v44[1];
      v104 = (void ***)v45;
      v105 = v47;
      if (v47)
      {
        v48 = (unint64_t *)&v47->__shared_owners_;
        do
          v49 = __ldxr(v48);
        while (__stxr(v49 + 1, v48));
      }
    }
    else
    {
      v47 = 0;
      v46 = 0;
      v104 = 0;
      v105 = 0;
    }
    LODWORD(v50) = *(_DWORD *)(v40 + 8);
    v94 = a1;
    v95 = v5;
    v93 = v47;
    if ((_DWORD)v50 == 1)
    {
      v51 = 0;
      v52 = (int *)v46[20];
      v53 = (float *)*((_QWORD *)v52 + 3);
      v54 = v52[2];
      v55 = v52 + 3;
      do
        v54 *= v55[v51++];
      while (v51 != 3);
      vDSP_vsmul(v53, 1, *(const float **)(v40 + 16), v53, 1, v54);
    }
    else
    {
      v56 = *((_DWORD *)v46 + 4);
      if ((_DWORD)v50 != v56)
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v50, v56);
      v57 = *((_DWORD *)v46 + 5);
      if (v57)
      {
        v58 = 0;
        v59 = 0;
        v60 = *((int *)v46 + 2) * (uint64_t)*((int *)v46 + 3);
        v61 = 4 * (int)v50 * v60;
        do
        {
          if ((_DWORD)v50)
          {
            v62 = 0;
            v63 = 0;
            v64 = v58;
            do
            {
              vDSP_vsmul((const float *)(*((_QWORD *)v46[20] + 3) + v64), 1, (const float *)(*(_QWORD *)(v40 + 16) + v62), (float *)(*((_QWORD *)v46[20] + 3) + v64), 1, v60);
              ++v63;
              v50 = *((int *)v46 + 4);
              v62 += 4;
              v64 += 4 * v60;
            }
            while (v63 < v50);
            v57 = *((_DWORD *)v46 + 5);
          }
          ++v59;
          v58 += v61;
        }
        while (v59 < v57);
      }
    }
    a1 = v94;
    v5 = v95;
    if (v93)
    {
      v65 = (unint64_t *)&v93->__shared_owners_;
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 - 1, v65));
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
        std::__shared_weak_count::__release_weak(v93);
      }
    }
    if (v96)
    {
      v67 = (unint64_t *)&v96->__shared_owners_;
      do
        v68 = __ldaxr(v67);
      while (__stlxr(v68 - 1, v67));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
        std::__shared_weak_count::__release_weak(v96);
      }
    }
  }
  v69 = (std::__shared_weak_count *)a1[39];
  if (v69)
  {
    v70 = (unint64_t *)&v69->__shared_owners_;
    do
      v71 = __ldxr(v70);
    while (__stxr(v71 + 1, v70));
  }
  v72 = *v5;
  if (v5[1] != *v5)
  {
    v73 = 0;
    do
    {
      v74 = *(const void **)(v72 + 16 * v73);
      if (v74
      {
        v76 = (uint64_t)v75;
        v104 = (void ***)v75;
        v77 = *(std::__shared_weak_count **)(v72 + 16 * v73 + 8);
        v105 = v77;
        if (v77)
        {
          v78 = (unint64_t *)&v77->__shared_owners_;
          do
            v79 = __ldxr(v78);
          while (__stxr(v79 + 1, v78));
        }
      }
      else
      {
        v76 = 0;
        v104 = 0;
        v105 = 0;
      }
      v80 = v100[0];
      v81 = v100[0][2 * v73];
      if (v81
      {
        v102 = v82;
        v83 = (std::__shared_weak_count *)v80[2 * v73 + 1];
        v103 = v83;
        if (v83)
        {
          v84 = (unint64_t *)&v83->__shared_owners_;
          do
            v85 = __ldxr(v84);
          while (__stxr(v85 + 1, v84));
        }
      }
      else
      {
        v83 = 0;
        v82 = 0;
        v102 = 0;
        v103 = 0;
      }
      v39.n128_u64[0] = Espresso::QuantSimEngine::blob_container::copy_from_fp32(v76, (uint64_t)v82 + 160, 1.0);
      if (v83)
      {
        v86 = (unint64_t *)&v83->__shared_owners_;
        do
          v87 = __ldaxr(v86);
        while (__stlxr(v87 - 1, v86));
        if (!v87)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v83->__on_zero_shared)(v83, v39);
          std::__shared_weak_count::__release_weak(v83);
        }
      }
      v88 = v105;
      if (v105)
      {
        v89 = (unint64_t *)&v105->__shared_owners_;
        do
          v90 = __ldaxr(v89);
        while (__stlxr(v90 - 1, v89));
        if (!v90)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v88->__on_zero_shared)(v88, v39);
          std::__shared_weak_count::__release_weak(v88);
        }
      }
      ++v73;
      v72 = *v5;
    }
    while (v73 < (v5[1] - *v5) >> 4);
  }
  if (v69)
  {
    v91 = (unint64_t *)&v69->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v69->__on_zero_shared)(v69, v39);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  v104 = v100;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v104);
  v100[0] = (void **)v101;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v100);
}

void sub_1916023E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  *(_QWORD *)(v25 - 104) = &a22;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 104));
  a22 = (void **)&a25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a22);
  _Unwind_Resume(a1);
}

void *wrapper_kernel<Espresso::matrix_band_part_kernel_cpu,Espresso::matrix_band_part_params_t>::__set_weight_raw_blob(void *result, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  void *v7;
  int v8;
  uint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::runtime_error *exception;
  unint64_t v15;
  std::runtime_error *v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  std::string v39;
  _QWORD v40[2];
  unsigned __int8 v41;
  _QWORD v42[2];
  unsigned __int8 v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;

  v7 = result;
  v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10)
      return result;
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    v10 = (uint64_t)v7 + 320;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v10, (__int128 *)&v52);
    size = (std::__shared_weak_count *)v52.__r_.__value_.__l.__size_;
    if (v52.__r_.__value_.__l.__size_)
    {
      v12 = (unint64_t *)(v52.__r_.__value_.__l.__size_ + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    if (a5 != 4 * *(int *)(*(_QWORD *)v10 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      v15 = a5;
      v16 = exception;
      std::to_string(&v45, v15);
      v17 = std::string::insert(&v45, 0, "Unexpected size s=");
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      v19 = std::string::append(&v46, "/blob=");
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, 4 * *(int *)(*(_QWORD *)v10 + 8));
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v21 = &v44;
      else
        v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      else
        v22 = v44.__r_.__value_.__l.__size_;
      v23 = std::string::append(&v47, (const std::string::value_type *)v21, v22);
      v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, " @ ");
      if ((v43 & 0x80u) == 0)
        v25 = (const std::string::value_type *)v42;
      else
        v25 = (const std::string::value_type *)v42[0];
      if ((v43 & 0x80u) == 0)
        v26 = v43;
      else
        v26 = v42[1];
      v27 = std::string::append(&v48, v25, v26);
      v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      v29 = std::string::append(&v49, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v40, ":");
      if ((v41 & 0x80u) == 0)
        v31 = (const std::string::value_type *)v40;
      else
        v31 = (const std::string::value_type *)v40[0];
      if ((v41 & 0x80u) == 0)
        v32 = v41;
      else
        v32 = v40[1];
      v33 = std::string::append(&v50, v31, v32);
      v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, 197);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = &v39;
      else
        v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      else
        v36 = v39.__r_.__value_.__l.__size_;
      v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
      v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v16, &v52);
      __cxa_throw(v16, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    return memcpy(*(void **)(*(_QWORD *)v10 + 16), a4, a5);
  }
  return result;
}

void sub_191602798(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  void *v59;
  int v60;
  uint64_t v61;

  if (*(char *)(v61 - 57) < 0)
    operator delete(*(void **)(v61 - 80));
  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v61 - 89) < 0)
    operator delete(*(void **)(v61 - 112));
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v61 - 121) < 0)
    operator delete(*(void **)(v61 - 144));
  if (*(char *)(v61 - 153) < 0)
    operator delete(*(void **)(v61 - 176));
  if (a27 < 0)
    operator delete(a22);
  if (a59 < 0)
    operator delete(a54);
  if (a33 < 0)
    operator delete(a28);
  if (a52 < 0)
    operator delete(a47);
  if (a45 < 0)
    operator delete(a40);
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0)
LABEL_28:
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

BOOL wrapper_kernel<Espresso::matrix_band_part_kernel_cpu,Espresso::matrix_band_part_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2;

  v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10)
      return 0;
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

void wrapper_kernel<Espresso::matrix_band_part_kernel_cpu,Espresso::matrix_band_part_params_t>::convert_layer_data_to_fp32(_QWORD *a1, char **a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v9;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  const void *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  __int128 v43;
  int64x2_t v44;
  char *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  __int128 v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  int64x2_t v59;
  char *v60;
  _QWORD *v61;
  void *__p;
  void *v63;
  __int128 v64;
  const void *v65;
  std::__shared_weak_count *v66;

  if (a3 != a4)
  {
    v9 = a3;
    v12 = a2 + 2;
    while (1)
    {
      v14 = *(const void **)v9;
      v13 = *(std::__shared_weak_count **)(v9 + 8);
      v65 = *(const void **)v9;
      v66 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
      }
      v17 = operator new(0x118uLL);
      v17[1] = 0;
      v17[2] = 0;
      *v17 = &off_1E2DC1868;
      Espresso::blob_cpu::blob_cpu((uint64_t)(v17 + 3), a1);
      *(_QWORD *)&v64 = v17 + 3;
      *((_QWORD *)&v64 + 1) = v17;
      Espresso::abstract_blob_container::shape((char *)&v58, (uint64_t)v14);
      v56 = 0;
      v57 = 0;
      (*(void (**)(_QWORD *, uint64_t *, uint64_t *))(v17[3] + 16))(v17 + 3, &v58, &v56);
      v18 = v57;
      if (v57)
      {
        v19 = (unint64_t *)&v57->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if (__p)
      {
        v63 = __p;
        operator delete(__p);
      }
      if (v65)
      {
        if (v21)
          break;
      }
      v21 = 0;
      v55 = 0;
      if (a5)
        goto LABEL_21;
LABEL_28:
      v27 = v64;
      if (*((_QWORD *)&v64 + 1))
      {
        v28 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v31 = a2[1];
      v30 = (unint64_t)a2[2];
      if ((unint64_t)v31 >= v30)
      {
        v54 = v27;
        v33 = (v31 - *a2) >> 4;
        if ((unint64_t)(v33 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v34 = v30 - (_QWORD)*a2;
        v35 = v34 >> 3;
        if (v34 >> 3 <= (unint64_t)(v33 + 1))
          v35 = v33 + 1;
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0)
          v36 = 0xFFFFFFFFFFFFFFFLL;
        else
          v36 = v35;
        v61 = v12;
        v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v36);
        v39 = &v37[16 * v33];
        *(_OWORD *)v39 = v54;
        v41 = *a2;
        v40 = a2[1];
        if (v40 == *a2)
        {
          v44 = vdupq_n_s64((unint64_t)v40);
          v42 = &v37[16 * v33];
        }
        else
        {
          v42 = &v37[16 * v33];
          do
          {
            v43 = *((_OWORD *)v40 - 1);
            v40 -= 16;
            *((_OWORD *)v42 - 1) = v43;
            v42 -= 16;
            *(_QWORD *)v40 = 0;
            *((_QWORD *)v40 + 1) = 0;
          }
          while (v40 != v41);
          v44 = *(int64x2_t *)a2;
        }
        v32 = v39 + 16;
        *a2 = v42;
        a2[1] = v39 + 16;
        v59 = v44;
        v45 = a2[2];
        a2[2] = &v37[16 * v38];
        v60 = v45;
        v58 = v44.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v58);
      }
      else
      {
        *(_OWORD *)v31 = v27;
        v32 = v31 + 16;
      }
      a2[1] = v32;
      if (v55)
      {
        v46 = (unint64_t *)&v55->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      v48 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
      if (*((_QWORD *)&v64 + 1))
      {
        v49 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      v51 = v66;
      if (v66)
      {
        v52 = (unint64_t *)&v66->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v9 += 16;
      if (v9 == a4)
        return;
    }
    v55 = v66;
    if (v66)
    {
      v22 = (unint64_t *)&v66->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    if (!a5)
      goto LABEL_28;
LABEL_21:
    if (a6)
    {
      v58 = 0;
      v59.i64[0] = 0;
      (*(void (**)(void *, uint64_t *, uint64_t))(*(_QWORD *)v21 + 40))(v21, &v58, v64 + 160);
      v24 = (std::__shared_weak_count *)v59.i64[0];
      if (v59.i64[0])
      {
        v25 = (unint64_t *)(v59.i64[0] + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v21, v64 + 160, 1.0);
    }
    goto LABEL_28;
  }
}

void sub_191602CF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::matrix_band_part_kernel_cpu,Espresso::matrix_band_part_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB52A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::matrix_band_part_kernel_cpu,Espresso::matrix_band_part_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB52A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::matrix_band_part_kernel_cpu,Espresso::matrix_band_part_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_46@<Q0>(uint64_t *a1@<X1>, unsigned __int16 *a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  int v7;
  __n128 result;

  v6 = (char *)operator new(0x158uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DB4F28;
  v7 = *((unsigned __int8 *)a2 + 2);
  LODWORD(a2) = *a2;
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((_WORD *)v6 + 152) = (_WORD)a2;
  v6[306] = (a2 | (v7 << 16)) >> 16;
  *((_QWORD *)v6 + 3) = &off_1E2D53328;
  *(_OWORD *)(v6 + 312) = 0u;
  *(_OWORD *)(v6 + 328) = 0u;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v6 + 39, *a1, a1[1]);
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_191602E64(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::batch_matmul_kernel_cpu,Espresso::batch_matmul_params_t>::~wrapper_kernel(Espresso::base_kernel *a1)
{
  *(_QWORD *)a1 = &off_1E2D53328;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 304);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 288);
  Espresso::base_kernel::~base_kernel(a1);
}

{
  *(_QWORD *)a1 = &off_1E2D53328;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 304);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 288);
  Espresso::base_kernel::~base_kernel(a1);
  JUMPOUT(0x19401CD90);
}

void wrapper_kernel<Espresso::batch_matmul_kernel_cpu,Espresso::batch_matmul_params_t>::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v5;
  _BOOL4 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  float *v31;
  vDSP_Length v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  __n128 v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  void **v44;
  void **v45;
  void **v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  int *v52;
  float *v53;
  vDSP_Length v54;
  int *v55;
  int v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  vDSP_Length v60;
  vDSP_Length v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  const void *v74;
  void **v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  void **v80;
  const void *v81;
  void *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  uint64_t v94;
  uint64_t *v95;
  std::__shared_weak_count *v96;
  float __B;
  _QWORD v98[2];
  _QWORD v99[2];
  void **v100[3];
  char *v101[3];
  void *v102;
  std::__shared_weak_count *v103;
  void ***v104;
  std::__shared_weak_count *v105;

  v5 = a3;
  memset(v101, 0, sizeof(v101));
  memset(v100, 0, sizeof(v100));
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)*a3 + 32))(*(_QWORD *)*a3))
    v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)*v5 + 32))(*(_QWORD *)*v5) == 1;
  else
    v7 = 1;
  v8 = *(std::__shared_weak_count **)(a1 + 296);
  v99[0] = *(_QWORD *)(a1 + 288);
  v99[1] = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  wrapper_kernel<Espresso::batch_matmul_kernel_cpu,Espresso::batch_matmul_params_t>::convert_layer_data_to_fp32(v99, v101, *a4, a4[1], 1, v7);
  if (v8)
  {
    v11 = (unint64_t *)&v8->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v13 = *(std::__shared_weak_count **)(a1 + 296);
  v98[0] = *(_QWORD *)(a1 + 288);
  v98[1] = v13;
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  wrapper_kernel<Espresso::batch_matmul_kernel_cpu,Espresso::batch_matmul_params_t>::convert_layer_data_to_fp32(v98, (char **)v100, *v5, v5[1], 0, 0);
  if (v13)
  {
    v17 = (unint64_t *)&v13->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v19 = *a4;
  if (a4[1] != *a4)
  {
    v20 = 0;
    do
    {
      if (!v7
        && (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v19 + 16 * v20) + 32))(*(_QWORD *)(v19 + 16 * v20))
         || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(*a4 + 16 * v20) + 32))(*(_QWORD *)(*a4 + 16 * v20)) == 1))
      {
        __B = *(float *)(*(_QWORD *)(*a4 + 16 * v20) + 112);
        v21 = &v101[0][16 * v20];
        v104 = (void ***)v22;
        v23 = (std::__shared_weak_count *)*((_QWORD *)v21 + 1);
        v105 = v23;
        if (v23)
        {
          v24 = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
        }
        v26 = *((_QWORD *)v22 + 20);
        v27 = (std::__shared_weak_count *)*((_QWORD *)v22 + 21);
        v102 = (void *)v26;
        v103 = v27;
        if (v27)
        {
          v28 = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldxr(v28);
          while (__stxr(v29 + 1, v28));
        }
        v30 = 0;
        v31 = *(float **)(v26 + 24);
        v32 = *(int *)(v26 + 8);
        v33 = v26 + 12;
        do
        {
          v32 *= *(int *)(v33 + v30);
          v30 += 4;
        }
        while (v30 != 12);
        vDSP_vsmul(v31, 1, &__B, v31, 1, v32);
        if (v27)
        {
          v34 = (unint64_t *)&v27->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        v36 = v105;
        if (v105)
        {
          v37 = (unint64_t *)&v105->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
      }
      ++v20;
      v19 = *a4;
    }
    while (v20 < (a4[1] - *a4) >> 4);
  }
  Espresso::batch_matmul_kernel_cpu::__launch((_BYTE *)a1, v16, (uint64_t)v100, (uint64_t **)v101);
  v40 = *(_QWORD *)(a1 + 304);
  if (v40)
  {
    v41 = *(std::__shared_weak_count **)(a1 + 312);
    v96 = v41;
    if (v41)
    {
      v42 = (unint64_t *)&v41->__shared_owners_;
      do
        v43 = __ldxr(v42);
      while (__stxr(v43 + 1, v42));
    }
    v44 = v100[0];
    if (*v100[0]
    {
      v46 = v45;
      v47 = (std::__shared_weak_count *)v44[1];
      v104 = (void ***)v45;
      v105 = v47;
      if (v47)
      {
        v48 = (unint64_t *)&v47->__shared_owners_;
        do
          v49 = __ldxr(v48);
        while (__stxr(v49 + 1, v48));
      }
    }
    else
    {
      v47 = 0;
      v46 = 0;
      v104 = 0;
      v105 = 0;
    }
    LODWORD(v50) = *(_DWORD *)(v40 + 8);
    v94 = a1;
    v95 = v5;
    v93 = v47;
    if ((_DWORD)v50 == 1)
    {
      v51 = 0;
      v52 = (int *)v46[20];
      v53 = (float *)*((_QWORD *)v52 + 3);
      v54 = v52[2];
      v55 = v52 + 3;
      do
        v54 *= v55[v51++];
      while (v51 != 3);
      vDSP_vsmul(v53, 1, *(const float **)(v40 + 16), v53, 1, v54);
    }
    else
    {
      v56 = *((_DWORD *)v46 + 4);
      if ((_DWORD)v50 != v56)
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v50, v56);
      v57 = *((_DWORD *)v46 + 5);
      if (v57)
      {
        v58 = 0;
        v59 = 0;
        v60 = *((int *)v46 + 2) * (uint64_t)*((int *)v46 + 3);
        v61 = 4 * (int)v50 * v60;
        do
        {
          if ((_DWORD)v50)
          {
            v62 = 0;
            v63 = 0;
            v64 = v58;
            do
            {
              vDSP_vsmul((const float *)(*((_QWORD *)v46[20] + 3) + v64), 1, (const float *)(*(_QWORD *)(v40 + 16) + v62), (float *)(*((_QWORD *)v46[20] + 3) + v64), 1, v60);
              ++v63;
              v50 = *((int *)v46 + 4);
              v62 += 4;
              v64 += 4 * v60;
            }
            while (v63 < v50);
            v57 = *((_DWORD *)v46 + 5);
          }
          ++v59;
          v58 += v61;
        }
        while (v59 < v57);
      }
    }
    a1 = v94;
    v5 = v95;
    if (v93)
    {
      v65 = (unint64_t *)&v93->__shared_owners_;
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 - 1, v65));
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
        std::__shared_weak_count::__release_weak(v93);
      }
    }
    if (v96)
    {
      v67 = (unint64_t *)&v96->__shared_owners_;
      do
        v68 = __ldaxr(v67);
      while (__stlxr(v68 - 1, v67));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
        std::__shared_weak_count::__release_weak(v96);
      }
    }
  }
  v69 = *(std::__shared_weak_count **)(a1 + 296);
  if (v69)
  {
    v70 = (unint64_t *)&v69->__shared_owners_;
    do
      v71 = __ldxr(v70);
    while (__stxr(v71 + 1, v70));
  }
  v72 = *v5;
  if (v5[1] != *v5)
  {
    v73 = 0;
    do
    {
      v74 = *(const void **)(v72 + 16 * v73);
      if (v74
      {
        v76 = (uint64_t)v75;
        v104 = (void ***)v75;
        v77 = *(std::__shared_weak_count **)(v72 + 16 * v73 + 8);
        v105 = v77;
        if (v77)
        {
          v78 = (unint64_t *)&v77->__shared_owners_;
          do
            v79 = __ldxr(v78);
          while (__stxr(v79 + 1, v78));
        }
      }
      else
      {
        v76 = 0;
        v104 = 0;
        v105 = 0;
      }
      v80 = v100[0];
      v81 = v100[0][2 * v73];
      if (v81
      {
        v102 = v82;
        v83 = (std::__shared_weak_count *)v80[2 * v73 + 1];
        v103 = v83;
        if (v83)
        {
          v84 = (unint64_t *)&v83->__shared_owners_;
          do
            v85 = __ldxr(v84);
          while (__stxr(v85 + 1, v84));
        }
      }
      else
      {
        v83 = 0;
        v82 = 0;
        v102 = 0;
        v103 = 0;
      }
      v39.n128_u64[0] = Espresso::QuantSimEngine::blob_container::copy_from_fp32(v76, (uint64_t)v82 + 160, 1.0);
      if (v83)
      {
        v86 = (unint64_t *)&v83->__shared_owners_;
        do
          v87 = __ldaxr(v86);
        while (__stlxr(v87 - 1, v86));
        if (!v87)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v83->__on_zero_shared)(v83, v39);
          std::__shared_weak_count::__release_weak(v83);
        }
      }
      v88 = v105;
      if (v105)
      {
        v89 = (unint64_t *)&v105->__shared_owners_;
        do
          v90 = __ldaxr(v89);
        while (__stlxr(v90 - 1, v89));
        if (!v90)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v88->__on_zero_shared)(v88, v39);
          std::__shared_weak_count::__release_weak(v88);
        }
      }
      ++v73;
      v72 = *v5;
    }
    while (v73 < (v5[1] - *v5) >> 4);
  }
  if (v69)
  {
    v91 = (unint64_t *)&v69->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v69->__on_zero_shared)(v69, v39);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  v104 = v100;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v104);
  v100[0] = (void **)v101;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v100);
}

void sub_1916035D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  *(_QWORD *)(v25 - 104) = &a22;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 104));
  a22 = (void **)&a25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a22);
  _Unwind_Resume(a1);
}

void *wrapper_kernel<Espresso::batch_matmul_kernel_cpu,Espresso::batch_matmul_params_t>::__set_weight_raw_blob(void *result, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  void *v7;
  int v8;
  uint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::runtime_error *exception;
  unint64_t v15;
  std::runtime_error *v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  std::string v39;
  _QWORD v40[2];
  unsigned __int8 v41;
  _QWORD v42[2];
  unsigned __int8 v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;

  v7 = result;
  v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10)
      return result;
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    v10 = (uint64_t)v7 + 304;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v10, (__int128 *)&v52);
    size = (std::__shared_weak_count *)v52.__r_.__value_.__l.__size_;
    if (v52.__r_.__value_.__l.__size_)
    {
      v12 = (unint64_t *)(v52.__r_.__value_.__l.__size_ + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    if (a5 != 4 * *(int *)(*(_QWORD *)v10 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      v15 = a5;
      v16 = exception;
      std::to_string(&v45, v15);
      v17 = std::string::insert(&v45, 0, "Unexpected size s=");
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      v19 = std::string::append(&v46, "/blob=");
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, 4 * *(int *)(*(_QWORD *)v10 + 8));
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v21 = &v44;
      else
        v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      else
        v22 = v44.__r_.__value_.__l.__size_;
      v23 = std::string::append(&v47, (const std::string::value_type *)v21, v22);
      v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, " @ ");
      if ((v43 & 0x80u) == 0)
        v25 = (const std::string::value_type *)v42;
      else
        v25 = (const std::string::value_type *)v42[0];
      if ((v43 & 0x80u) == 0)
        v26 = v43;
      else
        v26 = v42[1];
      v27 = std::string::append(&v48, v25, v26);
      v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      v29 = std::string::append(&v49, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v40, ":");
      if ((v41 & 0x80u) == 0)
        v31 = (const std::string::value_type *)v40;
      else
        v31 = (const std::string::value_type *)v40[0];
      if ((v41 & 0x80u) == 0)
        v32 = v41;
      else
        v32 = v40[1];
      v33 = std::string::append(&v50, v31, v32);
      v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, 197);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = &v39;
      else
        v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      else
        v36 = v39.__r_.__value_.__l.__size_;
      v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
      v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v16, &v52);
      __cxa_throw(v16, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    return memcpy(*(void **)(*(_QWORD *)v10 + 16), a4, a5);
  }
  return result;
}

void sub_19160398C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  void *v59;
  int v60;
  uint64_t v61;

  if (*(char *)(v61 - 57) < 0)
    operator delete(*(void **)(v61 - 80));
  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v61 - 89) < 0)
    operator delete(*(void **)(v61 - 112));
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v61 - 121) < 0)
    operator delete(*(void **)(v61 - 144));
  if (*(char *)(v61 - 153) < 0)
    operator delete(*(void **)(v61 - 176));
  if (a27 < 0)
    operator delete(a22);
  if (a59 < 0)
    operator delete(a54);
  if (a33 < 0)
    operator delete(a28);
  if (a52 < 0)
    operator delete(a47);
  if (a45 < 0)
    operator delete(a40);
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0)
LABEL_28:
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

BOOL wrapper_kernel<Espresso::batch_matmul_kernel_cpu,Espresso::batch_matmul_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2;

  v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10)
      return 0;
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

void wrapper_kernel<Espresso::batch_matmul_kernel_cpu,Espresso::batch_matmul_params_t>::convert_layer_data_to_fp32(_QWORD *a1, char **a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v9;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  const void *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  __int128 v43;
  int64x2_t v44;
  char *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  __int128 v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  int64x2_t v59;
  char *v60;
  _QWORD *v61;
  void *__p;
  void *v63;
  __int128 v64;
  const void *v65;
  std::__shared_weak_count *v66;

  if (a3 != a4)
  {
    v9 = a3;
    v12 = a2 + 2;
    while (1)
    {
      v14 = *(const void **)v9;
      v13 = *(std::__shared_weak_count **)(v9 + 8);
      v65 = *(const void **)v9;
      v66 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
      }
      v17 = operator new(0x118uLL);
      v17[1] = 0;
      v17[2] = 0;
      *v17 = &off_1E2DC1868;
      Espresso::blob_cpu::blob_cpu((uint64_t)(v17 + 3), a1);
      *(_QWORD *)&v64 = v17 + 3;
      *((_QWORD *)&v64 + 1) = v17;
      Espresso::abstract_blob_container::shape((char *)&v58, (uint64_t)v14);
      v56 = 0;
      v57 = 0;
      (*(void (**)(_QWORD *, uint64_t *, uint64_t *))(v17[3] + 16))(v17 + 3, &v58, &v56);
      v18 = v57;
      if (v57)
      {
        v19 = (unint64_t *)&v57->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if (__p)
      {
        v63 = __p;
        operator delete(__p);
      }
      if (v65)
      {
        if (v21)
          break;
      }
      v21 = 0;
      v55 = 0;
      if (a5)
        goto LABEL_21;
LABEL_28:
      v27 = v64;
      if (*((_QWORD *)&v64 + 1))
      {
        v28 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v31 = a2[1];
      v30 = (unint64_t)a2[2];
      if ((unint64_t)v31 >= v30)
      {
        v54 = v27;
        v33 = (v31 - *a2) >> 4;
        if ((unint64_t)(v33 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v34 = v30 - (_QWORD)*a2;
        v35 = v34 >> 3;
        if (v34 >> 3 <= (unint64_t)(v33 + 1))
          v35 = v33 + 1;
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0)
          v36 = 0xFFFFFFFFFFFFFFFLL;
        else
          v36 = v35;
        v61 = v12;
        v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v36);
        v39 = &v37[16 * v33];
        *(_OWORD *)v39 = v54;
        v41 = *a2;
        v40 = a2[1];
        if (v40 == *a2)
        {
          v44 = vdupq_n_s64((unint64_t)v40);
          v42 = &v37[16 * v33];
        }
        else
        {
          v42 = &v37[16 * v33];
          do
          {
            v43 = *((_OWORD *)v40 - 1);
            v40 -= 16;
            *((_OWORD *)v42 - 1) = v43;
            v42 -= 16;
            *(_QWORD *)v40 = 0;
            *((_QWORD *)v40 + 1) = 0;
          }
          while (v40 != v41);
          v44 = *(int64x2_t *)a2;
        }
        v32 = v39 + 16;
        *a2 = v42;
        a2[1] = v39 + 16;
        v59 = v44;
        v45 = a2[2];
        a2[2] = &v37[16 * v38];
        v60 = v45;
        v58 = v44.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v58);
      }
      else
      {
        *(_OWORD *)v31 = v27;
        v32 = v31 + 16;
      }
      a2[1] = v32;
      if (v55)
      {
        v46 = (unint64_t *)&v55->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      v48 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
      if (*((_QWORD *)&v64 + 1))
      {
        v49 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      v51 = v66;
      if (v66)
      {
        v52 = (unint64_t *)&v66->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v9 += 16;
      if (v9 == a4)
        return;
    }
    v55 = v66;
    if (v66)
    {
      v22 = (unint64_t *)&v66->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    if (!a5)
      goto LABEL_28;
LABEL_21:
    if (a6)
    {
      v58 = 0;
      v59.i64[0] = 0;
      (*(void (**)(void *, uint64_t *, uint64_t))(*(_QWORD *)v21 + 40))(v21, &v58, v64 + 160);
      v24 = (std::__shared_weak_count *)v59.i64[0];
      if (v59.i64[0])
      {
        v25 = (unint64_t *)(v59.i64[0] + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v21, v64 + 160, 1.0);
    }
    goto LABEL_28;
  }
}

void sub_191603EE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::batch_matmul_kernel_cpu,Espresso::batch_matmul_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB4F28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::batch_matmul_kernel_cpu,Espresso::batch_matmul_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB4F28;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::batch_matmul_kernel_cpu,Espresso::batch_matmul_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_45@<Q0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  int v8;
  __n128 result;

  v6 = operator new(0x160uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DB4518;
  v7 = *a2;
  v8 = *((_DWORD *)a2 + 2);
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  v6[38] = v7;
  *((_DWORD *)v6 + 78) = v8;
  v6[3] = &off_1E2D4F340;
  *((_OWORD *)v6 + 20) = 0u;
  *((_OWORD *)v6 + 21) = 0u;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v6 + 40, *a1, a1[1]);
  result.n128_u64[0] = (unint64_t)(v6 + 3);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_191604054(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::range_kernel_cpu,Espresso::range_params_t>::~wrapper_kernel(Espresso::base_kernel *a1)
{
  *(_QWORD *)a1 = &off_1E2D4F340;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 312);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 296);
  Espresso::base_kernel::~base_kernel(a1);
}

{
  *(_QWORD *)a1 = &off_1E2D4F340;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 312);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 296);
  Espresso::base_kernel::~base_kernel(a1);
  JUMPOUT(0x19401CD90);
}

void wrapper_kernel<Espresso::range_kernel_cpu,Espresso::range_params_t>::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  _BOOL4 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  float *v31;
  vDSP_Length v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  __n128 v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  void **v45;
  void **v46;
  void **v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  int *v53;
  float *v54;
  vDSP_Length v55;
  int *v56;
  int v57;
  int v58;
  uint64_t v59;
  unint64_t v60;
  vDSP_Length v61;
  vDSP_Length v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  const void *v75;
  void **v76;
  uint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  void **v81;
  const void *v82;
  void *v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  uint64_t v95;
  std::__shared_weak_count *v96;
  float __B;
  _QWORD v98[2];
  _QWORD v99[2];
  void **v100[3];
  char *v101[3];
  void *v102;
  std::__shared_weak_count *v103;
  void ***v104;
  std::__shared_weak_count *v105;

  memset(v101, 0, sizeof(v101));
  memset(v100, 0, sizeof(v100));
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)*a3 + 32))(*(_QWORD *)*a3))
    v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)*a3 + 32))(*(_QWORD *)*a3) == 1;
  else
    v8 = 1;
  v9 = *(std::__shared_weak_count **)(a1 + 304);
  v99[0] = *(_QWORD *)(a1 + 296);
  v99[1] = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  wrapper_kernel<Espresso::range_kernel_cpu,Espresso::range_params_t>::convert_layer_data_to_fp32(v99, v101, *a4, a4[1], 1, v8);
  if (v9)
  {
    v12 = (unint64_t *)&v9->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v14 = *(std::__shared_weak_count **)(a1 + 304);
  v98[0] = *(_QWORD *)(a1 + 296);
  v98[1] = v14;
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  wrapper_kernel<Espresso::range_kernel_cpu,Espresso::range_params_t>::convert_layer_data_to_fp32(v98, (char **)v100, *a3, a3[1], 0, 0);
  if (v14)
  {
    v17 = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v95 = a1;
  v19 = *a4;
  if (a4[1] != *a4)
  {
    v20 = 0;
    do
    {
      if (!v8
        && (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v19 + 16 * v20) + 32))(*(_QWORD *)(v19 + 16 * v20))
         || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(*a4 + 16 * v20) + 32))(*(_QWORD *)(*a4 + 16 * v20)) == 1))
      {
        __B = *(float *)(*(_QWORD *)(*a4 + 16 * v20) + 112);
        v21 = &v101[0][16 * v20];
        v104 = (void ***)v22;
        v23 = (std::__shared_weak_count *)*((_QWORD *)v21 + 1);
        v105 = v23;
        if (v23)
        {
          v24 = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
        }
        v26 = *((_QWORD *)v22 + 20);
        v27 = (std::__shared_weak_count *)*((_QWORD *)v22 + 21);
        v102 = (void *)v26;
        v103 = v27;
        if (v27)
        {
          v28 = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldxr(v28);
          while (__stxr(v29 + 1, v28));
        }
        v30 = 0;
        v31 = *(float **)(v26 + 24);
        v32 = *(int *)(v26 + 8);
        v33 = v26 + 12;
        do
        {
          v32 *= *(int *)(v33 + v30);
          v30 += 4;
        }
        while (v30 != 12);
        vDSP_vsmul(v31, 1, &__B, v31, 1, v32);
        if (v27)
        {
          v34 = (unint64_t *)&v27->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        v36 = v105;
        if (v105)
        {
          v37 = (unint64_t *)&v105->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
      }
      ++v20;
      v19 = *a4;
    }
    while (v20 < (a4[1] - *a4) >> 4);
  }
  v39 = v95;
  Espresso::range_kernel_cpu::__launch(v95, a2, (uint64_t **)v100, (uint64_t)v101);
  v41 = *(_QWORD *)(v95 + 312);
  if (v41)
  {
    v42 = *(std::__shared_weak_count **)(v95 + 320);
    v96 = v42;
    if (v42)
    {
      v43 = (unint64_t *)&v42->__shared_owners_;
      do
        v44 = __ldxr(v43);
      while (__stxr(v44 + 1, v43));
    }
    v45 = v100[0];
    if (*v100[0]
    {
      v47 = v46;
      v48 = (std::__shared_weak_count *)v45[1];
      v104 = (void ***)v46;
      v105 = v48;
      if (v48)
      {
        v49 = (unint64_t *)&v48->__shared_owners_;
        do
          v50 = __ldxr(v49);
        while (__stxr(v50 + 1, v49));
      }
    }
    else
    {
      v48 = 0;
      v47 = 0;
      v104 = 0;
      v105 = 0;
    }
    LODWORD(v51) = *(_DWORD *)(v41 + 8);
    v94 = v48;
    if ((_DWORD)v51 == 1)
    {
      v52 = 0;
      v53 = (int *)v47[20];
      v54 = (float *)*((_QWORD *)v53 + 3);
      v55 = v53[2];
      v56 = v53 + 3;
      do
        v55 *= v56[v52++];
      while (v52 != 3);
      vDSP_vsmul(v54, 1, *(const float **)(v41 + 16), v54, 1, v55);
    }
    else
    {
      v57 = *((_DWORD *)v47 + 4);
      if ((_DWORD)v51 != v57)
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v51, v57);
      v58 = *((_DWORD *)v47 + 5);
      if (v58)
      {
        v59 = 0;
        v60 = 0;
        v61 = *((int *)v47 + 2) * (uint64_t)*((int *)v47 + 3);
        v62 = 4 * (int)v51 * v61;
        do
        {
          if ((_DWORD)v51)
          {
            v63 = 0;
            v64 = 0;
            v65 = v59;
            do
            {
              vDSP_vsmul((const float *)(*((_QWORD *)v47[20] + 3) + v65), 1, (const float *)(*(_QWORD *)(v41 + 16) + v63), (float *)(*((_QWORD *)v47[20] + 3) + v65), 1, v61);
              ++v64;
              v51 = *((int *)v47 + 4);
              v63 += 4;
              v65 += 4 * v61;
            }
            while (v64 < v51);
            v58 = *((_DWORD *)v47 + 5);
          }
          ++v60;
          v59 += v62;
        }
        while (v60 < v58);
      }
    }
    v39 = v95;
    if (v94)
    {
      v66 = (unint64_t *)&v94->__shared_owners_;
      do
        v67 = __ldaxr(v66);
      while (__stlxr(v67 - 1, v66));
      if (!v67)
      {
        ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
        std::__shared_weak_count::__release_weak(v94);
      }
    }
    if (v96)
    {
      v68 = (unint64_t *)&v96->__shared_owners_;
      do
        v69 = __ldaxr(v68);
      while (__stlxr(v69 - 1, v68));
      if (!v69)
      {
        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
        std::__shared_weak_count::__release_weak(v96);
      }
    }
  }
  v70 = *(std::__shared_weak_count **)(v39 + 304);
  if (v70)
  {
    v71 = (unint64_t *)&v70->__shared_owners_;
    do
      v72 = __ldxr(v71);
    while (__stxr(v72 + 1, v71));
  }
  v73 = *a3;
  if (a3[1] != *a3)
  {
    v74 = 0;
    do
    {
      v75 = *(const void **)(v73 + 16 * v74);
      if (v75
      {
        v77 = (uint64_t)v76;
        v104 = (void ***)v76;
        v78 = *(std::__shared_weak_count **)(v73 + 16 * v74 + 8);
        v105 = v78;
        if (v78)
        {
          v79 = (unint64_t *)&v78->__shared_owners_;
          do
            v80 = __ldxr(v79);
          while (__stxr(v80 + 1, v79));
        }
      }
      else
      {
        v77 = 0;
        v104 = 0;
        v105 = 0;
      }
      v81 = v100[0];
      v82 = v100[0][2 * v74];
      if (v82
      {
        v102 = v83;
        v84 = (std::__shared_weak_count *)v81[2 * v74 + 1];
        v103 = v84;
        if (v84)
        {
          v85 = (unint64_t *)&v84->__shared_owners_;
          do
            v86 = __ldxr(v85);
          while (__stxr(v86 + 1, v85));
        }
      }
      else
      {
        v84 = 0;
        v83 = 0;
        v102 = 0;
        v103 = 0;
      }
      v40.n128_u64[0] = Espresso::QuantSimEngine::blob_container::copy_from_fp32(v77, (uint64_t)v83 + 160, 1.0);
      if (v84)
      {
        v87 = (unint64_t *)&v84->__shared_owners_;
        do
          v88 = __ldaxr(v87);
        while (__stlxr(v88 - 1, v87));
        if (!v88)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v84->__on_zero_shared)(v84, v40);
          std::__shared_weak_count::__release_weak(v84);
        }
      }
      v89 = v105;
      if (v105)
      {
        v90 = (unint64_t *)&v105->__shared_owners_;
        do
          v91 = __ldaxr(v90);
        while (__stlxr(v91 - 1, v90));
        if (!v91)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v89->__on_zero_shared)(v89, v40);
          std::__shared_weak_count::__release_weak(v89);
        }
      }
      ++v74;
      v73 = *a3;
    }
    while (v74 < (a3[1] - *a3) >> 4);
  }
  if (v70)
  {
    v92 = (unint64_t *)&v70->__shared_owners_;
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v70->__on_zero_shared)(v70, v40);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  v104 = v100;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v104);
  v100[0] = (void **)v101;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v100);
}

void sub_1916047D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  *(_QWORD *)(v25 - 104) = &a22;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 104));
  a22 = (void **)&a25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a22);
  _Unwind_Resume(a1);
}

void *wrapper_kernel<Espresso::range_kernel_cpu,Espresso::range_params_t>::__set_weight_raw_blob(void *result, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  void *v7;
  int v8;
  uint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::runtime_error *exception;
  unint64_t v15;
  std::runtime_error *v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  std::string v39;
  _QWORD v40[2];
  unsigned __int8 v41;
  _QWORD v42[2];
  unsigned __int8 v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;

  v7 = result;
  v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10)
      return result;
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    v10 = (uint64_t)v7 + 312;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v10, (__int128 *)&v52);
    size = (std::__shared_weak_count *)v52.__r_.__value_.__l.__size_;
    if (v52.__r_.__value_.__l.__size_)
    {
      v12 = (unint64_t *)(v52.__r_.__value_.__l.__size_ + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    if (a5 != 4 * *(int *)(*(_QWORD *)v10 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      v15 = a5;
      v16 = exception;
      std::to_string(&v45, v15);
      v17 = std::string::insert(&v45, 0, "Unexpected size s=");
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      v19 = std::string::append(&v46, "/blob=");
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, 4 * *(int *)(*(_QWORD *)v10 + 8));
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v21 = &v44;
      else
        v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      else
        v22 = v44.__r_.__value_.__l.__size_;
      v23 = std::string::append(&v47, (const std::string::value_type *)v21, v22);
      v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, " @ ");
      if ((v43 & 0x80u) == 0)
        v25 = (const std::string::value_type *)v42;
      else
        v25 = (const std::string::value_type *)v42[0];
      if ((v43 & 0x80u) == 0)
        v26 = v43;
      else
        v26 = v42[1];
      v27 = std::string::append(&v48, v25, v26);
      v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      v29 = std::string::append(&v49, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v40, ":");
      if ((v41 & 0x80u) == 0)
        v31 = (const std::string::value_type *)v40;
      else
        v31 = (const std::string::value_type *)v40[0];
      if ((v41 & 0x80u) == 0)
        v32 = v41;
      else
        v32 = v40[1];
      v33 = std::string::append(&v50, v31, v32);
      v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, 197);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = &v39;
      else
        v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      else
        v36 = v39.__r_.__value_.__l.__size_;
      v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
      v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v16, &v52);
      __cxa_throw(v16, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    return memcpy(*(void **)(*(_QWORD *)v10 + 16), a4, a5);
  }
  return result;
}

void sub_191604B88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  void *v59;
  int v60;
  uint64_t v61;

  if (*(char *)(v61 - 57) < 0)
    operator delete(*(void **)(v61 - 80));
  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v61 - 89) < 0)
    operator delete(*(void **)(v61 - 112));
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v61 - 121) < 0)
    operator delete(*(void **)(v61 - 144));
  if (*(char *)(v61 - 153) < 0)
    operator delete(*(void **)(v61 - 176));
  if (a27 < 0)
    operator delete(a22);
  if (a59 < 0)
    operator delete(a54);
  if (a33 < 0)
    operator delete(a28);
  if (a52 < 0)
    operator delete(a47);
  if (a45 < 0)
    operator delete(a40);
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0)
LABEL_28:
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

BOOL wrapper_kernel<Espresso::range_kernel_cpu,Espresso::range_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2;

  v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10)
      return 0;
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

BOOL Espresso::generic_range_kernel::has_dynamic_top_shape(Espresso::generic_range_kernel *this, uint64_t a2)
{
  return a2 != 0;
}

const char *Espresso::generic_range_kernel::kernel_type_str(Espresso::generic_range_kernel *this)
{
  return "range";
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::range_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

void wrapper_kernel<Espresso::range_kernel_cpu,Espresso::range_params_t>::convert_layer_data_to_fp32(_QWORD *a1, char **a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v9;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  const void *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  __int128 v43;
  int64x2_t v44;
  char *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  __int128 v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  int64x2_t v59;
  char *v60;
  _QWORD *v61;
  void *__p;
  void *v63;
  __int128 v64;
  const void *v65;
  std::__shared_weak_count *v66;

  if (a3 != a4)
  {
    v9 = a3;
    v12 = a2 + 2;
    while (1)
    {
      v14 = *(const void **)v9;
      v13 = *(std::__shared_weak_count **)(v9 + 8);
      v65 = *(const void **)v9;
      v66 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
      }
      v17 = operator new(0x118uLL);
      v17[1] = 0;
      v17[2] = 0;
      *v17 = &off_1E2DC1868;
      Espresso::blob_cpu::blob_cpu((uint64_t)(v17 + 3), a1);
      *(_QWORD *)&v64 = v17 + 3;
      *((_QWORD *)&v64 + 1) = v17;
      Espresso::abstract_blob_container::shape((char *)&v58, (uint64_t)v14);
      v56 = 0;
      v57 = 0;
      (*(void (**)(_QWORD *, uint64_t *, uint64_t *))(v17[3] + 16))(v17 + 3, &v58, &v56);
      v18 = v57;
      if (v57)
      {
        v19 = (unint64_t *)&v57->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if (__p)
      {
        v63 = __p;
        operator delete(__p);
      }
      if (v65)
      {
        if (v21)
          break;
      }
      v21 = 0;
      v55 = 0;
      if (a5)
        goto LABEL_21;
LABEL_28:
      v27 = v64;
      if (*((_QWORD *)&v64 + 1))
      {
        v28 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v31 = a2[1];
      v30 = (unint64_t)a2[2];
      if ((unint64_t)v31 >= v30)
      {
        v54 = v27;
        v33 = (v31 - *a2) >> 4;
        if ((unint64_t)(v33 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v34 = v30 - (_QWORD)*a2;
        v35 = v34 >> 3;
        if (v34 >> 3 <= (unint64_t)(v33 + 1))
          v35 = v33 + 1;
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0)
          v36 = 0xFFFFFFFFFFFFFFFLL;
        else
          v36 = v35;
        v61 = v12;
        v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v36);
        v39 = &v37[16 * v33];
        *(_OWORD *)v39 = v54;
        v41 = *a2;
        v40 = a2[1];
        if (v40 == *a2)
        {
          v44 = vdupq_n_s64((unint64_t)v40);
          v42 = &v37[16 * v33];
        }
        else
        {
          v42 = &v37[16 * v33];
          do
          {
            v43 = *((_OWORD *)v40 - 1);
            v40 -= 16;
            *((_OWORD *)v42 - 1) = v43;
            v42 -= 16;
            *(_QWORD *)v40 = 0;
            *((_QWORD *)v40 + 1) = 0;
          }
          while (v40 != v41);
          v44 = *(int64x2_t *)a2;
        }
        v32 = v39 + 16;
        *a2 = v42;
        a2[1] = v39 + 16;
        v59 = v44;
        v45 = a2[2];
        a2[2] = &v37[16 * v38];
        v60 = v45;
        v58 = v44.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v58);
      }
      else
      {
        *(_OWORD *)v31 = v27;
        v32 = v31 + 16;
      }
      a2[1] = v32;
      if (v55)
      {
        v46 = (unint64_t *)&v55->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      v48 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
      if (*((_QWORD *)&v64 + 1))
      {
        v49 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      v51 = v66;
      if (v66)
      {
        v52 = (unint64_t *)&v66->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v9 += 16;
      if (v9 == a4)
        return;
    }
    v55 = v66;
    if (v66)
    {
      v22 = (unint64_t *)&v66->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    if (!a5)
      goto LABEL_28;
LABEL_21:
    if (a6)
    {
      v58 = 0;
      v59.i64[0] = 0;
      (*(void (**)(void *, uint64_t *, uint64_t))(*(_QWORD *)v21 + 40))(v21, &v58, v64 + 160);
      v24 = (std::__shared_weak_count *)v59.i64[0];
      if (v59.i64[0])
      {
        v25 = (unint64_t *)(v59.i64[0] + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v21, v64 + 160, 1.0);
    }
    goto LABEL_28;
  }
}

void sub_191605104(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::range_kernel_cpu,Espresso::range_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB4518;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::range_kernel_cpu,Espresso::range_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB4518;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::range_kernel_cpu,Espresso::range_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_44@<Q0>(uint64_t *a1@<X1>, __int128 *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  __n128 result;

  v6 = operator new(0x190uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DB4E48;
  Espresso::load_random_kernel_cpu::load_random_kernel_cpu((uint64_t)(v6 + 3), a1, v7, a2);
  v6[3] = &off_1E2D52DC8;
  *((_OWORD *)v6 + 23) = 0u;
  *((_OWORD *)v6 + 24) = 0u;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v6 + 46, *a1, a1[1]);
  result.n128_u64[0] = (unint64_t)(v6 + 3);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19160525C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::load_random_kernel_cpu,Espresso::load_random_params_t>::~wrapper_kernel(Espresso::base_kernel *a1)
{
  *(_QWORD *)a1 = &off_1E2D52DC8;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 360);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 344);
  *(_QWORD *)a1 = &off_1E2D8EC50;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 328);
  Espresso::base_kernel::~base_kernel(a1);
}

{
  *(_QWORD *)a1 = &off_1E2D52DC8;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 360);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 344);
  *(_QWORD *)a1 = &off_1E2D8EC50;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 328);
  Espresso::base_kernel::~base_kernel(a1);
  JUMPOUT(0x19401CD90);
}

void wrapper_kernel<Espresso::load_random_kernel_cpu,Espresso::load_random_params_t>::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  _BOOL4 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  float *v31;
  vDSP_Length v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  __n128 v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  void **v45;
  void **v46;
  void **v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  int *v53;
  float *v54;
  vDSP_Length v55;
  int *v56;
  int v57;
  int v58;
  uint64_t v59;
  unint64_t v60;
  vDSP_Length v61;
  vDSP_Length v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  const void *v75;
  void **v76;
  uint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  void **v81;
  const void *v82;
  void *v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  uint64_t v95;
  std::__shared_weak_count *v96;
  float __B;
  _QWORD v98[2];
  _QWORD v99[2];
  void **v100[3];
  char *v101[3];
  void *v102;
  std::__shared_weak_count *v103;
  void ***v104;
  std::__shared_weak_count *v105;

  memset(v101, 0, sizeof(v101));
  memset(v100, 0, sizeof(v100));
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)*a3 + 32))(*(_QWORD *)*a3))
    v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)*a3 + 32))(*(_QWORD *)*a3) == 1;
  else
    v8 = 1;
  v9 = *(std::__shared_weak_count **)(a1 + 352);
  v99[0] = *(_QWORD *)(a1 + 344);
  v99[1] = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  wrapper_kernel<Espresso::load_random_kernel_cpu,Espresso::load_random_params_t>::convert_layer_data_to_fp32(v99, v101, *a4, a4[1], 1, v8);
  if (v9)
  {
    v12 = (unint64_t *)&v9->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v14 = *(std::__shared_weak_count **)(a1 + 352);
  v98[0] = *(_QWORD *)(a1 + 344);
  v98[1] = v14;
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  wrapper_kernel<Espresso::load_random_kernel_cpu,Espresso::load_random_params_t>::convert_layer_data_to_fp32(v98, (char **)v100, *a3, a3[1], 0, 0);
  if (v14)
  {
    v17 = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v95 = a1;
  v19 = *a4;
  if (a4[1] != *a4)
  {
    v20 = 0;
    do
    {
      if (!v8
        && (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v19 + 16 * v20) + 32))(*(_QWORD *)(v19 + 16 * v20))
         || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(*a4 + 16 * v20) + 32))(*(_QWORD *)(*a4 + 16 * v20)) == 1))
      {
        __B = *(float *)(*(_QWORD *)(*a4 + 16 * v20) + 112);
        v21 = &v101[0][16 * v20];
        v104 = (void ***)v22;
        v23 = (std::__shared_weak_count *)*((_QWORD *)v21 + 1);
        v105 = v23;
        if (v23)
        {
          v24 = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
        }
        v26 = *((_QWORD *)v22 + 20);
        v27 = (std::__shared_weak_count *)*((_QWORD *)v22 + 21);
        v102 = (void *)v26;
        v103 = v27;
        if (v27)
        {
          v28 = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldxr(v28);
          while (__stxr(v29 + 1, v28));
        }
        v30 = 0;
        v31 = *(float **)(v26 + 24);
        v32 = *(int *)(v26 + 8);
        v33 = v26 + 12;
        do
        {
          v32 *= *(int *)(v33 + v30);
          v30 += 4;
        }
        while (v30 != 12);
        vDSP_vsmul(v31, 1, &__B, v31, 1, v32);
        if (v27)
        {
          v34 = (unint64_t *)&v27->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        v36 = v105;
        if (v105)
        {
          v37 = (unint64_t *)&v105->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
      }
      ++v20;
      v19 = *a4;
    }
    while (v20 < (a4[1] - *a4) >> 4);
  }
  v39 = v95;
  Espresso::load_random_kernel_cpu::__launch(v95, a2, (uint64_t **)v100, (uint64_t *)v101);
  v41 = *(_QWORD *)(v95 + 360);
  if (v41)
  {
    v42 = *(std::__shared_weak_count **)(v95 + 368);
    v96 = v42;
    if (v42)
    {
      v43 = (unint64_t *)&v42->__shared_owners_;
      do
        v44 = __ldxr(v43);
      while (__stxr(v44 + 1, v43));
    }
    v45 = v100[0];
    if (*v100[0]
    {
      v47 = v46;
      v48 = (std::__shared_weak_count *)v45[1];
      v104 = (void ***)v46;
      v105 = v48;
      if (v48)
      {
        v49 = (unint64_t *)&v48->__shared_owners_;
        do
          v50 = __ldxr(v49);
        while (__stxr(v50 + 1, v49));
      }
    }
    else
    {
      v48 = 0;
      v47 = 0;
      v104 = 0;
      v105 = 0;
    }
    LODWORD(v51) = *(_DWORD *)(v41 + 8);
    v94 = v48;
    if ((_DWORD)v51 == 1)
    {
      v52 = 0;
      v53 = (int *)v47[20];
      v54 = (float *)*((_QWORD *)v53 + 3);
      v55 = v53[2];
      v56 = v53 + 3;
      do
        v55 *= v56[v52++];
      while (v52 != 3);
      vDSP_vsmul(v54, 1, *(const float **)(v41 + 16), v54, 1, v55);
    }
    else
    {
      v57 = *((_DWORD *)v47 + 4);
      if ((_DWORD)v51 != v57)
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v51, v57);
      v58 = *((_DWORD *)v47 + 5);
      if (v58)
      {
        v59 = 0;
        v60 = 0;
        v61 = *((int *)v47 + 2) * (uint64_t)*((int *)v47 + 3);
        v62 = 4 * (int)v51 * v61;
        do
        {
          if ((_DWORD)v51)
          {
            v63 = 0;
            v64 = 0;
            v65 = v59;
            do
            {
              vDSP_vsmul((const float *)(*((_QWORD *)v47[20] + 3) + v65), 1, (const float *)(*(_QWORD *)(v41 + 16) + v63), (float *)(*((_QWORD *)v47[20] + 3) + v65), 1, v61);
              ++v64;
              v51 = *((int *)v47 + 4);
              v63 += 4;
              v65 += 4 * v61;
            }
            while (v64 < v51);
            v58 = *((_DWORD *)v47 + 5);
          }
          ++v60;
          v59 += v62;
        }
        while (v60 < v58);
      }
    }
    v39 = v95;
    if (v94)
    {
      v66 = (unint64_t *)&v94->__shared_owners_;
      do
        v67 = __ldaxr(v66);
      while (__stlxr(v67 - 1, v66));
      if (!v67)
      {
        ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
        std::__shared_weak_count::__release_weak(v94);
      }
    }
    if (v96)
    {
      v68 = (unint64_t *)&v96->__shared_owners_;
      do
        v69 = __ldaxr(v68);
      while (__stlxr(v69 - 1, v68));
      if (!v69)
      {
        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
        std::__shared_weak_count::__release_weak(v96);
      }
    }
  }
  v70 = *(std::__shared_weak_count **)(v39 + 352);
  if (v70)
  {
    v71 = (unint64_t *)&v70->__shared_owners_;
    do
      v72 = __ldxr(v71);
    while (__stxr(v72 + 1, v71));
  }
  v73 = *a3;
  if (a3[1] != *a3)
  {
    v74 = 0;
    do
    {
      v75 = *(const void **)(v73 + 16 * v74);
      if (v75
      {
        v77 = (uint64_t)v76;
        v104 = (void ***)v76;
        v78 = *(std::__shared_weak_count **)(v73 + 16 * v74 + 8);
        v105 = v78;
        if (v78)
        {
          v79 = (unint64_t *)&v78->__shared_owners_;
          do
            v80 = __ldxr(v79);
          while (__stxr(v80 + 1, v79));
        }
      }
      else
      {
        v77 = 0;
        v104 = 0;
        v105 = 0;
      }
      v81 = v100[0];
      v82 = v100[0][2 * v74];
      if (v82
      {
        v102 = v83;
        v84 = (std::__shared_weak_count *)v81[2 * v74 + 1];
        v103 = v84;
        if (v84)
        {
          v85 = (unint64_t *)&v84->__shared_owners_;
          do
            v86 = __ldxr(v85);
          while (__stxr(v86 + 1, v85));
        }
      }
      else
      {
        v84 = 0;
        v83 = 0;
        v102 = 0;
        v103 = 0;
      }
      v40.n128_u64[0] = Espresso::QuantSimEngine::blob_container::copy_from_fp32(v77, (uint64_t)v83 + 160, 1.0);
      if (v84)
      {
        v87 = (unint64_t *)&v84->__shared_owners_;
        do
          v88 = __ldaxr(v87);
        while (__stlxr(v88 - 1, v87));
        if (!v88)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v84->__on_zero_shared)(v84, v40);
          std::__shared_weak_count::__release_weak(v84);
        }
      }
      v89 = v105;
      if (v105)
      {
        v90 = (unint64_t *)&v105->__shared_owners_;
        do
          v91 = __ldaxr(v90);
        while (__stlxr(v91 - 1, v90));
        if (!v91)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v89->__on_zero_shared)(v89, v40);
          std::__shared_weak_count::__release_weak(v89);
        }
      }
      ++v74;
      v73 = *a3;
    }
    while (v74 < (a3[1] - *a3) >> 4);
  }
  if (v70)
  {
    v92 = (unint64_t *)&v70->__shared_owners_;
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v70->__on_zero_shared)(v70, v40);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  v104 = v100;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v104);
  v100[0] = (void **)v101;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v100);
}

void sub_191605A00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  *(_QWORD *)(v25 - 104) = &a22;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 104));
  a22 = (void **)&a25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a22);
  _Unwind_Resume(a1);
}

void *wrapper_kernel<Espresso::load_random_kernel_cpu,Espresso::load_random_params_t>::__set_weight_raw_blob(void *result, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  void *v7;
  int v8;
  uint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::runtime_error *exception;
  unint64_t v15;
  std::runtime_error *v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  std::string v39;
  _QWORD v40[2];
  unsigned __int8 v41;
  _QWORD v42[2];
  unsigned __int8 v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;

  v7 = result;
  v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10)
      return result;
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    v10 = (uint64_t)v7 + 360;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v10, (__int128 *)&v52);
    size = (std::__shared_weak_count *)v52.__r_.__value_.__l.__size_;
    if (v52.__r_.__value_.__l.__size_)
    {
      v12 = (unint64_t *)(v52.__r_.__value_.__l.__size_ + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    if (a5 != 4 * *(int *)(*(_QWORD *)v10 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      v15 = a5;
      v16 = exception;
      std::to_string(&v45, v15);
      v17 = std::string::insert(&v45, 0, "Unexpected size s=");
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      v19 = std::string::append(&v46, "/blob=");
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, 4 * *(int *)(*(_QWORD *)v10 + 8));
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v21 = &v44;
      else
        v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      else
        v22 = v44.__r_.__value_.__l.__size_;
      v23 = std::string::append(&v47, (const std::string::value_type *)v21, v22);
      v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, " @ ");
      if ((v43 & 0x80u) == 0)
        v25 = (const std::string::value_type *)v42;
      else
        v25 = (const std::string::value_type *)v42[0];
      if ((v43 & 0x80u) == 0)
        v26 = v43;
      else
        v26 = v42[1];
      v27 = std::string::append(&v48, v25, v26);
      v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      v29 = std::string::append(&v49, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v40, ":");
      if ((v41 & 0x80u) == 0)
        v31 = (const std::string::value_type *)v40;
      else
        v31 = (const std::string::value_type *)v40[0];
      if ((v41 & 0x80u) == 0)
        v32 = v41;
      else
        v32 = v40[1];
      v33 = std::string::append(&v50, v31, v32);
      v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, 197);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = &v39;
      else
        v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      else
        v36 = v39.__r_.__value_.__l.__size_;
      v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
      v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v16, &v52);
      __cxa_throw(v16, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    return memcpy(*(void **)(*(_QWORD *)v10 + 16), a4, a5);
  }
  return result;
}

void sub_191605DB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  void *v59;
  int v60;
  uint64_t v61;

  if (*(char *)(v61 - 57) < 0)
    operator delete(*(void **)(v61 - 80));
  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v61 - 89) < 0)
    operator delete(*(void **)(v61 - 112));
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v61 - 121) < 0)
    operator delete(*(void **)(v61 - 144));
  if (*(char *)(v61 - 153) < 0)
    operator delete(*(void **)(v61 - 176));
  if (a27 < 0)
    operator delete(a22);
  if (a59 < 0)
    operator delete(a54);
  if (a33 < 0)
    operator delete(a28);
  if (a52 < 0)
    operator delete(a47);
  if (a45 < 0)
    operator delete(a40);
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0)
LABEL_28:
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

BOOL wrapper_kernel<Espresso::load_random_kernel_cpu,Espresso::load_random_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2;

  v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10)
      return 0;
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

BOOL Espresso::generic_load_random_kernel::has_dynamic_top_shape(Espresso::generic_load_random_kernel *this, uint64_t a2)
{
  return a2 && *((_BYTE *)this + 324) != 0;
}

const char *Espresso::generic_load_random_kernel::kernel_type_str(Espresso::generic_load_random_kernel *this)
{
  return "load_random";
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::load_random_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

void wrapper_kernel<Espresso::load_random_kernel_cpu,Espresso::load_random_params_t>::convert_layer_data_to_fp32(_QWORD *a1, char **a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v9;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  const void *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  __int128 v43;
  int64x2_t v44;
  char *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  __int128 v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  int64x2_t v59;
  char *v60;
  _QWORD *v61;
  void *__p;
  void *v63;
  __int128 v64;
  const void *v65;
  std::__shared_weak_count *v66;

  if (a3 != a4)
  {
    v9 = a3;
    v12 = a2 + 2;
    while (1)
    {
      v14 = *(const void **)v9;
      v13 = *(std::__shared_weak_count **)(v9 + 8);
      v65 = *(const void **)v9;
      v66 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
      }
      v17 = operator new(0x118uLL);
      v17[1] = 0;
      v17[2] = 0;
      *v17 = &off_1E2DC1868;
      Espresso::blob_cpu::blob_cpu((uint64_t)(v17 + 3), a1);
      *(_QWORD *)&v64 = v17 + 3;
      *((_QWORD *)&v64 + 1) = v17;
      Espresso::abstract_blob_container::shape((char *)&v58, (uint64_t)v14);
      v56 = 0;
      v57 = 0;
      (*(void (**)(_QWORD *, uint64_t *, uint64_t *))(v17[3] + 16))(v17 + 3, &v58, &v56);
      v18 = v57;
      if (v57)
      {
        v19 = (unint64_t *)&v57->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if (__p)
      {
        v63 = __p;
        operator delete(__p);
      }
      if (v65)
      {
        if (v21)
          break;
      }
      v21 = 0;
      v55 = 0;
      if (a5)
        goto LABEL_21;
LABEL_28:
      v27 = v64;
      if (*((_QWORD *)&v64 + 1))
      {
        v28 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v31 = a2[1];
      v30 = (unint64_t)a2[2];
      if ((unint64_t)v31 >= v30)
      {
        v54 = v27;
        v33 = (v31 - *a2) >> 4;
        if ((unint64_t)(v33 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v34 = v30 - (_QWORD)*a2;
        v35 = v34 >> 3;
        if (v34 >> 3 <= (unint64_t)(v33 + 1))
          v35 = v33 + 1;
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0)
          v36 = 0xFFFFFFFFFFFFFFFLL;
        else
          v36 = v35;
        v61 = v12;
        v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v36);
        v39 = &v37[16 * v33];
        *(_OWORD *)v39 = v54;
        v41 = *a2;
        v40 = a2[1];
        if (v40 == *a2)
        {
          v44 = vdupq_n_s64((unint64_t)v40);
          v42 = &v37[16 * v33];
        }
        else
        {
          v42 = &v37[16 * v33];
          do
          {
            v43 = *((_OWORD *)v40 - 1);
            v40 -= 16;
            *((_OWORD *)v42 - 1) = v43;
            v42 -= 16;
            *(_QWORD *)v40 = 0;
            *((_QWORD *)v40 + 1) = 0;
          }
          while (v40 != v41);
          v44 = *(int64x2_t *)a2;
        }
        v32 = v39 + 16;
        *a2 = v42;
        a2[1] = v39 + 16;
        v59 = v44;
        v45 = a2[2];
        a2[2] = &v37[16 * v38];
        v60 = v45;
        v58 = v44.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v58);
      }
      else
      {
        *(_OWORD *)v31 = v27;
        v32 = v31 + 16;
      }
      a2[1] = v32;
      if (v55)
      {
        v46 = (unint64_t *)&v55->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      v48 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
      if (*((_QWORD *)&v64 + 1))
      {
        v49 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      v51 = v66;
      if (v66)
      {
        v52 = (unint64_t *)&v66->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v9 += 16;
      if (v9 == a4)
        return;
    }
    v55 = v66;
    if (v66)
    {
      v22 = (unint64_t *)&v66->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    if (!a5)
      goto LABEL_28;
LABEL_21:
    if (a6)
    {
      v58 = 0;
      v59.i64[0] = 0;
      (*(void (**)(void *, uint64_t *, uint64_t))(*(_QWORD *)v21 + 40))(v21, &v58, v64 + 160);
      v24 = (std::__shared_weak_count *)v59.i64[0];
      if (v59.i64[0])
      {
        v25 = (unint64_t *)(v59.i64[0] + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v21, v64 + 160, 1.0);
    }
    goto LABEL_28;
  }
}

void sub_191606344(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::load_random_kernel_cpu,Espresso::load_random_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB4E48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::load_random_kernel_cpu,Espresso::load_random_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB4E48;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::load_random_kernel_cpu,Espresso::load_random_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_43@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  __n128 result;

  v6 = (char *)operator new(0x168uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DB49E8;
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((_OWORD *)v6 + 19) = *(_OWORD *)a2;
  *(_QWORD *)(v6 + 319) = *(_QWORD *)(a2 + 15);
  *((_QWORD *)v6 + 3) = &off_1E2D511D8;
  *(_OWORD *)(v6 + 328) = 0u;
  *(_OWORD *)(v6 + 344) = 0u;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v6 + 41, *a1, a1[1]);
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1916064B0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::scatter_kernel_cpu,Espresso::scatter_params_t>::~wrapper_kernel(Espresso::base_kernel *a1)
{
  *(_QWORD *)a1 = &off_1E2D511D8;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 320);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 304);
  Espresso::base_kernel::~base_kernel(a1);
}

{
  *(_QWORD *)a1 = &off_1E2D511D8;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 320);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 304);
  Espresso::base_kernel::~base_kernel(a1);
  JUMPOUT(0x19401CD90);
}

void wrapper_kernel<Espresso::scatter_kernel_cpu,Espresso::scatter_params_t>::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  _BOOL4 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  float *v31;
  vDSP_Length v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  __n128 v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  void **v45;
  void **v46;
  void **v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  int *v53;
  float *v54;
  vDSP_Length v55;
  int *v56;
  int v57;
  int v58;
  uint64_t v59;
  unint64_t v60;
  vDSP_Length v61;
  vDSP_Length v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  const void *v75;
  void **v76;
  uint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  void **v81;
  const void *v82;
  void *v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  uint64_t v95;
  std::__shared_weak_count *v96;
  float __B;
  _QWORD v98[2];
  _QWORD v99[2];
  void **v100[3];
  char *v101[3];
  void *v102;
  std::__shared_weak_count *v103;
  void ***v104;
  std::__shared_weak_count *v105;

  memset(v101, 0, sizeof(v101));
  memset(v100, 0, sizeof(v100));
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)*a3 + 32))(*(_QWORD *)*a3))
    v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)*a3 + 32))(*(_QWORD *)*a3) == 1;
  else
    v8 = 1;
  v9 = *(std::__shared_weak_count **)(a1 + 312);
  v99[0] = *(_QWORD *)(a1 + 304);
  v99[1] = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  wrapper_kernel<Espresso::scatter_kernel_cpu,Espresso::scatter_params_t>::convert_layer_data_to_fp32(v99, v101, *a4, a4[1], 1, v8);
  if (v9)
  {
    v12 = (unint64_t *)&v9->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v14 = *(std::__shared_weak_count **)(a1 + 312);
  v98[0] = *(_QWORD *)(a1 + 304);
  v98[1] = v14;
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  wrapper_kernel<Espresso::scatter_kernel_cpu,Espresso::scatter_params_t>::convert_layer_data_to_fp32(v98, (char **)v100, *a3, a3[1], 0, 0);
  if (v14)
  {
    v17 = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v95 = a1;
  v19 = *a4;
  if (a4[1] != *a4)
  {
    v20 = 0;
    do
    {
      if (!v8
        && (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v19 + 16 * v20) + 32))(*(_QWORD *)(v19 + 16 * v20))
         || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(*a4 + 16 * v20) + 32))(*(_QWORD *)(*a4 + 16 * v20)) == 1))
      {
        __B = *(float *)(*(_QWORD *)(*a4 + 16 * v20) + 112);
        v21 = &v101[0][16 * v20];
        v104 = (void ***)v22;
        v23 = (std::__shared_weak_count *)*((_QWORD *)v21 + 1);
        v105 = v23;
        if (v23)
        {
          v24 = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
        }
        v26 = *((_QWORD *)v22 + 20);
        v27 = (std::__shared_weak_count *)*((_QWORD *)v22 + 21);
        v102 = (void *)v26;
        v103 = v27;
        if (v27)
        {
          v28 = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldxr(v28);
          while (__stxr(v29 + 1, v28));
        }
        v30 = 0;
        v31 = *(float **)(v26 + 24);
        v32 = *(int *)(v26 + 8);
        v33 = v26 + 12;
        do
        {
          v32 *= *(int *)(v33 + v30);
          v30 += 4;
        }
        while (v30 != 12);
        vDSP_vsmul(v31, 1, &__B, v31, 1, v32);
        if (v27)
        {
          v34 = (unint64_t *)&v27->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        v36 = v105;
        if (v105)
        {
          v37 = (unint64_t *)&v105->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
      }
      ++v20;
      v19 = *a4;
    }
    while (v20 < (a4[1] - *a4) >> 4);
  }
  v39 = v95;
  Espresso::scatter_kernel_cpu::__launch(v95, a2, (uint64_t **)v100, (uint64_t **)v101);
  v41 = *(_QWORD *)(v95 + 320);
  if (v41)
  {
    v42 = *(std::__shared_weak_count **)(v95 + 328);
    v96 = v42;
    if (v42)
    {
      v43 = (unint64_t *)&v42->__shared_owners_;
      do
        v44 = __ldxr(v43);
      while (__stxr(v44 + 1, v43));
    }
    v45 = v100[0];
    if (*v100[0]
    {
      v47 = v46;
      v48 = (std::__shared_weak_count *)v45[1];
      v104 = (void ***)v46;
      v105 = v48;
      if (v48)
      {
        v49 = (unint64_t *)&v48->__shared_owners_;
        do
          v50 = __ldxr(v49);
        while (__stxr(v50 + 1, v49));
      }
    }
    else
    {
      v48 = 0;
      v47 = 0;
      v104 = 0;
      v105 = 0;
    }
    LODWORD(v51) = *(_DWORD *)(v41 + 8);
    v94 = v48;
    if ((_DWORD)v51 == 1)
    {
      v52 = 0;
      v53 = (int *)v47[20];
      v54 = (float *)*((_QWORD *)v53 + 3);
      v55 = v53[2];
      v56 = v53 + 3;
      do
        v55 *= v56[v52++];
      while (v52 != 3);
      vDSP_vsmul(v54, 1, *(const float **)(v41 + 16), v54, 1, v55);
    }
    else
    {
      v57 = *((_DWORD *)v47 + 4);
      if ((_DWORD)v51 != v57)
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v51, v57);
      v58 = *((_DWORD *)v47 + 5);
      if (v58)
      {
        v59 = 0;
        v60 = 0;
        v61 = *((int *)v47 + 2) * (uint64_t)*((int *)v47 + 3);
        v62 = 4 * (int)v51 * v61;
        do
        {
          if ((_DWORD)v51)
          {
            v63 = 0;
            v64 = 0;
            v65 = v59;
            do
            {
              vDSP_vsmul((const float *)(*((_QWORD *)v47[20] + 3) + v65), 1, (const float *)(*(_QWORD *)(v41 + 16) + v63), (float *)(*((_QWORD *)v47[20] + 3) + v65), 1, v61);
              ++v64;
              v51 = *((int *)v47 + 4);
              v63 += 4;
              v65 += 4 * v61;
            }
            while (v64 < v51);
            v58 = *((_DWORD *)v47 + 5);
          }
          ++v60;
          v59 += v62;
        }
        while (v60 < v58);
      }
    }
    v39 = v95;
    if (v94)
    {
      v66 = (unint64_t *)&v94->__shared_owners_;
      do
        v67 = __ldaxr(v66);
      while (__stlxr(v67 - 1, v66));
      if (!v67)
      {
        ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
        std::__shared_weak_count::__release_weak(v94);
      }
    }
    if (v96)
    {
      v68 = (unint64_t *)&v96->__shared_owners_;
      do
        v69 = __ldaxr(v68);
      while (__stlxr(v69 - 1, v68));
      if (!v69)
      {
        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
        std::__shared_weak_count::__release_weak(v96);
      }
    }
  }
  v70 = *(std::__shared_weak_count **)(v39 + 312);
  if (v70)
  {
    v71 = (unint64_t *)&v70->__shared_owners_;
    do
      v72 = __ldxr(v71);
    while (__stxr(v72 + 1, v71));
  }
  v73 = *a3;
  if (a3[1] != *a3)
  {
    v74 = 0;
    do
    {
      v75 = *(const void **)(v73 + 16 * v74);
      if (v75
      {
        v77 = (uint64_t)v76;
        v104 = (void ***)v76;
        v78 = *(std::__shared_weak_count **)(v73 + 16 * v74 + 8);
        v105 = v78;
        if (v78)
        {
          v79 = (unint64_t *)&v78->__shared_owners_;
          do
            v80 = __ldxr(v79);
          while (__stxr(v80 + 1, v79));
        }
      }
      else
      {
        v77 = 0;
        v104 = 0;
        v105 = 0;
      }
      v81 = v100[0];
      v82 = v100[0][2 * v74];
      if (v82
      {
        v102 = v83;
        v84 = (std::__shared_weak_count *)v81[2 * v74 + 1];
        v103 = v84;
        if (v84)
        {
          v85 = (unint64_t *)&v84->__shared_owners_;
          do
            v86 = __ldxr(v85);
          while (__stxr(v86 + 1, v85));
        }
      }
      else
      {
        v84 = 0;
        v83 = 0;
        v102 = 0;
        v103 = 0;
      }
      v40.n128_u64[0] = Espresso::QuantSimEngine::blob_container::copy_from_fp32(v77, (uint64_t)v83 + 160, 1.0);
      if (v84)
      {
        v87 = (unint64_t *)&v84->__shared_owners_;
        do
          v88 = __ldaxr(v87);
        while (__stlxr(v88 - 1, v87));
        if (!v88)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v84->__on_zero_shared)(v84, v40);
          std::__shared_weak_count::__release_weak(v84);
        }
      }
      v89 = v105;
      if (v105)
      {
        v90 = (unint64_t *)&v105->__shared_owners_;
        do
          v91 = __ldaxr(v90);
        while (__stlxr(v91 - 1, v90));
        if (!v91)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v89->__on_zero_shared)(v89, v40);
          std::__shared_weak_count::__release_weak(v89);
        }
      }
      ++v74;
      v73 = *a3;
    }
    while (v74 < (a3[1] - *a3) >> 4);
  }
  if (v70)
  {
    v92 = (unint64_t *)&v70->__shared_owners_;
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v70->__on_zero_shared)(v70, v40);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  v104 = v100;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v104);
  v100[0] = (void **)v101;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v100);
}

void sub_191606C2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  *(_QWORD *)(v25 - 104) = &a22;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 104));
  a22 = (void **)&a25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a22);
  _Unwind_Resume(a1);
}

void *wrapper_kernel<Espresso::scatter_kernel_cpu,Espresso::scatter_params_t>::__set_weight_raw_blob(void *result, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  void *v7;
  int v8;
  uint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::runtime_error *exception;
  unint64_t v15;
  std::runtime_error *v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  std::string v39;
  _QWORD v40[2];
  unsigned __int8 v41;
  _QWORD v42[2];
  unsigned __int8 v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;

  v7 = result;
  v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10)
      return result;
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    v10 = (uint64_t)v7 + 320;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v10, (__int128 *)&v52);
    size = (std::__shared_weak_count *)v52.__r_.__value_.__l.__size_;
    if (v52.__r_.__value_.__l.__size_)
    {
      v12 = (unint64_t *)(v52.__r_.__value_.__l.__size_ + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    if (a5 != 4 * *(int *)(*(_QWORD *)v10 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      v15 = a5;
      v16 = exception;
      std::to_string(&v45, v15);
      v17 = std::string::insert(&v45, 0, "Unexpected size s=");
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      v19 = std::string::append(&v46, "/blob=");
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, 4 * *(int *)(*(_QWORD *)v10 + 8));
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v21 = &v44;
      else
        v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      else
        v22 = v44.__r_.__value_.__l.__size_;
      v23 = std::string::append(&v47, (const std::string::value_type *)v21, v22);
      v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, " @ ");
      if ((v43 & 0x80u) == 0)
        v25 = (const std::string::value_type *)v42;
      else
        v25 = (const std::string::value_type *)v42[0];
      if ((v43 & 0x80u) == 0)
        v26 = v43;
      else
        v26 = v42[1];
      v27 = std::string::append(&v48, v25, v26);
      v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      v29 = std::string::append(&v49, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v40, ":");
      if ((v41 & 0x80u) == 0)
        v31 = (const std::string::value_type *)v40;
      else
        v31 = (const std::string::value_type *)v40[0];
      if ((v41 & 0x80u) == 0)
        v32 = v41;
      else
        v32 = v40[1];
      v33 = std::string::append(&v50, v31, v32);
      v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, 197);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = &v39;
      else
        v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      else
        v36 = v39.__r_.__value_.__l.__size_;
      v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
      v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v16, &v52);
      __cxa_throw(v16, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    return memcpy(*(void **)(*(_QWORD *)v10 + 16), a4, a5);
  }
  return result;
}

void sub_191606FE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  void *v59;
  int v60;
  uint64_t v61;

  if (*(char *)(v61 - 57) < 0)
    operator delete(*(void **)(v61 - 80));
  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v61 - 89) < 0)
    operator delete(*(void **)(v61 - 112));
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v61 - 121) < 0)
    operator delete(*(void **)(v61 - 144));
  if (*(char *)(v61 - 153) < 0)
    operator delete(*(void **)(v61 - 176));
  if (a27 < 0)
    operator delete(a22);
  if (a59 < 0)
    operator delete(a54);
  if (a33 < 0)
    operator delete(a28);
  if (a52 < 0)
    operator delete(a47);
  if (a45 < 0)
    operator delete(a40);
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0)
LABEL_28:
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

BOOL wrapper_kernel<Espresso::scatter_kernel_cpu,Espresso::scatter_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2;

  v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10)
      return 0;
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

const char *Espresso::generic_scatter_kernel::kernel_type_str(Espresso::generic_scatter_kernel *this)
{
  return "scatter";
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::scatter_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

void wrapper_kernel<Espresso::scatter_kernel_cpu,Espresso::scatter_params_t>::convert_layer_data_to_fp32(_QWORD *a1, char **a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v9;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  const void *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  __int128 v43;
  int64x2_t v44;
  char *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  __int128 v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  int64x2_t v59;
  char *v60;
  _QWORD *v61;
  void *__p;
  void *v63;
  __int128 v64;
  const void *v65;
  std::__shared_weak_count *v66;

  if (a3 != a4)
  {
    v9 = a3;
    v12 = a2 + 2;
    while (1)
    {
      v14 = *(const void **)v9;
      v13 = *(std::__shared_weak_count **)(v9 + 8);
      v65 = *(const void **)v9;
      v66 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
      }
      v17 = operator new(0x118uLL);
      v17[1] = 0;
      v17[2] = 0;
      *v17 = &off_1E2DC1868;
      Espresso::blob_cpu::blob_cpu((uint64_t)(v17 + 3), a1);
      *(_QWORD *)&v64 = v17 + 3;
      *((_QWORD *)&v64 + 1) = v17;
      Espresso::abstract_blob_container::shape((char *)&v58, (uint64_t)v14);
      v56 = 0;
      v57 = 0;
      (*(void (**)(_QWORD *, uint64_t *, uint64_t *))(v17[3] + 16))(v17 + 3, &v58, &v56);
      v18 = v57;
      if (v57)
      {
        v19 = (unint64_t *)&v57->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if (__p)
      {
        v63 = __p;
        operator delete(__p);
      }
      if (v65)
      {
        if (v21)
          break;
      }
      v21 = 0;
      v55 = 0;
      if (a5)
        goto LABEL_21;
LABEL_28:
      v27 = v64;
      if (*((_QWORD *)&v64 + 1))
      {
        v28 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v31 = a2[1];
      v30 = (unint64_t)a2[2];
      if ((unint64_t)v31 >= v30)
      {
        v54 = v27;
        v33 = (v31 - *a2) >> 4;
        if ((unint64_t)(v33 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v34 = v30 - (_QWORD)*a2;
        v35 = v34 >> 3;
        if (v34 >> 3 <= (unint64_t)(v33 + 1))
          v35 = v33 + 1;
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0)
          v36 = 0xFFFFFFFFFFFFFFFLL;
        else
          v36 = v35;
        v61 = v12;
        v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v36);
        v39 = &v37[16 * v33];
        *(_OWORD *)v39 = v54;
        v41 = *a2;
        v40 = a2[1];
        if (v40 == *a2)
        {
          v44 = vdupq_n_s64((unint64_t)v40);
          v42 = &v37[16 * v33];
        }
        else
        {
          v42 = &v37[16 * v33];
          do
          {
            v43 = *((_OWORD *)v40 - 1);
            v40 -= 16;
            *((_OWORD *)v42 - 1) = v43;
            v42 -= 16;
            *(_QWORD *)v40 = 0;
            *((_QWORD *)v40 + 1) = 0;
          }
          while (v40 != v41);
          v44 = *(int64x2_t *)a2;
        }
        v32 = v39 + 16;
        *a2 = v42;
        a2[1] = v39 + 16;
        v59 = v44;
        v45 = a2[2];
        a2[2] = &v37[16 * v38];
        v60 = v45;
        v58 = v44.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v58);
      }
      else
      {
        *(_OWORD *)v31 = v27;
        v32 = v31 + 16;
      }
      a2[1] = v32;
      if (v55)
      {
        v46 = (unint64_t *)&v55->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      v48 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
      if (*((_QWORD *)&v64 + 1))
      {
        v49 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      v51 = v66;
      if (v66)
      {
        v52 = (unint64_t *)&v66->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v9 += 16;
      if (v9 == a4)
        return;
    }
    v55 = v66;
    if (v66)
    {
      v22 = (unint64_t *)&v66->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    if (!a5)
      goto LABEL_28;
LABEL_21:
    if (a6)
    {
      v58 = 0;
      v59.i64[0] = 0;
      (*(void (**)(void *, uint64_t *, uint64_t))(*(_QWORD *)v21 + 40))(v21, &v58, v64 + 160);
      v24 = (std::__shared_weak_count *)v59.i64[0];
      if (v59.i64[0])
      {
        v25 = (unint64_t *)(v59.i64[0] + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v21, v64 + 160, 1.0);
    }
    goto LABEL_28;
  }
}

void sub_191607554(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::scatter_kernel_cpu,Espresso::scatter_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB49E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::scatter_kernel_cpu,Espresso::scatter_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB49E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::scatter_kernel_cpu,Espresso::scatter_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

double ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_42@<D0>(uint64_t *a1@<X1>, _DWORD *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<wrapper_kernel<Espresso::copy_kernel_cpu,Espresso::copy_params_t>,std::allocator<wrapper_kernel<Espresso::copy_kernel_cpu,Espresso::copy_params_t>>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::copy_params_t const&,void>(&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

_QWORD *std::allocate_shared[abi:ne180100]<wrapper_kernel<Espresso::copy_kernel_cpu,Espresso::copy_params_t>,std::allocator<wrapper_kernel<Espresso::copy_kernel_cpu,Espresso::copy_params_t>>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::copy_params_t const&,void>(_QWORD *a1, uint64_t *a2, _DWORD *a3)
{
  char *v6;
  _QWORD *result;

  v6 = (char *)operator new(0x158uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DB4358;
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a2);
  *((_DWORD *)v6 + 76) = *a3;
  *((_QWORD *)v6 + 3) = &off_1E2D4E820;
  *(_OWORD *)(v6 + 312) = 0u;
  *(_OWORD *)(v6 + 328) = 0u;
  result = std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v6 + 39, *a2, a2[1]);
  *a1 = v6 + 24;
  a1[1] = v6;
  return result;
}

void sub_1916076E0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::copy_kernel_cpu,Espresso::copy_params_t>::~wrapper_kernel(Espresso::base_kernel *a1)
{
  *(_QWORD *)a1 = &off_1E2D4E820;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 304);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 288);
  Espresso::base_kernel::~base_kernel(a1);
}

{
  *(_QWORD *)a1 = &off_1E2D4E820;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 304);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 288);
  Espresso::base_kernel::~base_kernel(a1);
  JUMPOUT(0x19401CD90);
}

void wrapper_kernel<Espresso::copy_kernel_cpu,Espresso::copy_params_t>::__launch(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v5;
  _BOOL4 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  void *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  float *v30;
  vDSP_Length v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  __n128 v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  void **v43;
  void **v44;
  void **v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  int *v51;
  float *v52;
  vDSP_Length v53;
  int *v54;
  int v55;
  int v56;
  uint64_t v57;
  unint64_t v58;
  vDSP_Length v59;
  vDSP_Length v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  const void *v73;
  void **v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  void **v79;
  const void *v80;
  void *v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  _QWORD *v93;
  uint64_t *v94;
  std::__shared_weak_count *v95;
  float __B;
  _QWORD v97[2];
  _QWORD v98[2];
  void **v99[3];
  char *v100[3];
  void *v101;
  std::__shared_weak_count *v102;
  void ***v103;
  std::__shared_weak_count *v104;

  v5 = a3;
  memset(v100, 0, sizeof(v100));
  memset(v99, 0, sizeof(v99));
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)*a3 + 32))(*(_QWORD *)*a3))
    v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)*v5 + 32))(*(_QWORD *)*v5) == 1;
  else
    v7 = 1;
  v8 = (std::__shared_weak_count *)a1[37];
  v98[0] = a1[36];
  v98[1] = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  wrapper_kernel<Espresso::copy_kernel_cpu,Espresso::copy_params_t>::convert_layer_data_to_fp32(v98, v100, *a4, a4[1], 1, v7);
  if (v8)
  {
    v11 = (unint64_t *)&v8->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v13 = (std::__shared_weak_count *)a1[37];
  v97[0] = a1[36];
  v97[1] = v13;
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  wrapper_kernel<Espresso::copy_kernel_cpu,Espresso::copy_params_t>::convert_layer_data_to_fp32(v97, (char **)v99, *v5, v5[1], 0, 0);
  if (v13)
  {
    v16 = (unint64_t *)&v13->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v18 = *a4;
  if (a4[1] != *a4)
  {
    v19 = 0;
    do
    {
      if (!v7
        && (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v18 + 16 * v19) + 32))(*(_QWORD *)(v18 + 16 * v19))
         || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(*a4 + 16 * v19) + 32))(*(_QWORD *)(*a4 + 16 * v19)) == 1))
      {
        __B = *(float *)(*(_QWORD *)(*a4 + 16 * v19) + 112);
        v20 = &v100[0][16 * v19];
        v103 = (void ***)v21;
        v22 = (std::__shared_weak_count *)*((_QWORD *)v20 + 1);
        v104 = v22;
        if (v22)
        {
          v23 = (unint64_t *)&v22->__shared_owners_;
          do
            v24 = __ldxr(v23);
          while (__stxr(v24 + 1, v23));
        }
        v25 = *((_QWORD *)v21 + 20);
        v26 = (std::__shared_weak_count *)*((_QWORD *)v21 + 21);
        v101 = (void *)v25;
        v102 = v26;
        if (v26)
        {
          v27 = (unint64_t *)&v26->__shared_owners_;
          do
            v28 = __ldxr(v27);
          while (__stxr(v28 + 1, v27));
        }
        v29 = 0;
        v30 = *(float **)(v25 + 24);
        v31 = *(int *)(v25 + 8);
        v32 = v25 + 12;
        do
        {
          v31 *= *(int *)(v32 + v29);
          v29 += 4;
        }
        while (v29 != 12);
        vDSP_vsmul(v30, 1, &__B, v30, 1, v31);
        if (v26)
        {
          v33 = (unint64_t *)&v26->__shared_owners_;
          do
            v34 = __ldaxr(v33);
          while (__stlxr(v34 - 1, v33));
          if (!v34)
          {
            ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
            std::__shared_weak_count::__release_weak(v26);
          }
        }
        v35 = v104;
        if (v104)
        {
          v36 = (unint64_t *)&v104->__shared_owners_;
          do
            v37 = __ldaxr(v36);
          while (__stlxr(v37 - 1, v36));
          if (!v37)
          {
            ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
            std::__shared_weak_count::__release_weak(v35);
          }
        }
      }
      ++v19;
      v18 = *a4;
    }
    while (v19 < (a4[1] - *a4) >> 4);
  }
  Espresso::copy_kernel_cpu::__compute((uint64_t *)v99, v100);
  v39 = a1[38];
  if (v39)
  {
    v40 = (std::__shared_weak_count *)a1[39];
    v95 = v40;
    if (v40)
    {
      v41 = (unint64_t *)&v40->__shared_owners_;
      do
        v42 = __ldxr(v41);
      while (__stxr(v42 + 1, v41));
    }
    v43 = v99[0];
    if (*v99[0]
    {
      v45 = v44;
      v46 = (std::__shared_weak_count *)v43[1];
      v103 = (void ***)v44;
      v104 = v46;
      if (v46)
      {
        v47 = (unint64_t *)&v46->__shared_owners_;
        do
          v48 = __ldxr(v47);
        while (__stxr(v48 + 1, v47));
      }
    }
    else
    {
      v46 = 0;
      v45 = 0;
      v103 = 0;
      v104 = 0;
    }
    LODWORD(v49) = *(_DWORD *)(v39 + 8);
    v93 = a1;
    v94 = v5;
    v92 = v46;
    if ((_DWORD)v49 == 1)
    {
      v50 = 0;
      v51 = (int *)v45[20];
      v52 = (float *)*((_QWORD *)v51 + 3);
      v53 = v51[2];
      v54 = v51 + 3;
      do
        v53 *= v54[v50++];
      while (v50 != 3);
      vDSP_vsmul(v52, 1, *(const float **)(v39 + 16), v52, 1, v53);
    }
    else
    {
      v55 = *((_DWORD *)v45 + 4);
      if ((_DWORD)v49 != v55)
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v49, v55);
      v56 = *((_DWORD *)v45 + 5);
      if (v56)
      {
        v57 = 0;
        v58 = 0;
        v59 = *((int *)v45 + 2) * (uint64_t)*((int *)v45 + 3);
        v60 = 4 * (int)v49 * v59;
        do
        {
          if ((_DWORD)v49)
          {
            v61 = 0;
            v62 = 0;
            v63 = v57;
            do
            {
              vDSP_vsmul((const float *)(*((_QWORD *)v45[20] + 3) + v63), 1, (const float *)(*(_QWORD *)(v39 + 16) + v61), (float *)(*((_QWORD *)v45[20] + 3) + v63), 1, v59);
              ++v62;
              v49 = *((int *)v45 + 4);
              v61 += 4;
              v63 += 4 * v59;
            }
            while (v62 < v49);
            v56 = *((_DWORD *)v45 + 5);
          }
          ++v58;
          v57 += v60;
        }
        while (v58 < v56);
      }
    }
    a1 = v93;
    v5 = v94;
    if (v92)
    {
      v64 = (unint64_t *)&v92->__shared_owners_;
      do
        v65 = __ldaxr(v64);
      while (__stlxr(v65 - 1, v64));
      if (!v65)
      {
        ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
        std::__shared_weak_count::__release_weak(v92);
      }
    }
    if (v95)
    {
      v66 = (unint64_t *)&v95->__shared_owners_;
      do
        v67 = __ldaxr(v66);
      while (__stlxr(v67 - 1, v66));
      if (!v67)
      {
        ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
        std::__shared_weak_count::__release_weak(v95);
      }
    }
  }
  v68 = (std::__shared_weak_count *)a1[37];
  if (v68)
  {
    v69 = (unint64_t *)&v68->__shared_owners_;
    do
      v70 = __ldxr(v69);
    while (__stxr(v70 + 1, v69));
  }
  v71 = *v5;
  if (v5[1] != *v5)
  {
    v72 = 0;
    do
    {
      v73 = *(const void **)(v71 + 16 * v72);
      if (v73
      {
        v75 = (uint64_t)v74;
        v103 = (void ***)v74;
        v76 = *(std::__shared_weak_count **)(v71 + 16 * v72 + 8);
        v104 = v76;
        if (v76)
        {
          v77 = (unint64_t *)&v76->__shared_owners_;
          do
            v78 = __ldxr(v77);
          while (__stxr(v78 + 1, v77));
        }
      }
      else
      {
        v75 = 0;
        v103 = 0;
        v104 = 0;
      }
      v79 = v99[0];
      v80 = v99[0][2 * v72];
      if (v80
      {
        v101 = v81;
        v82 = (std::__shared_weak_count *)v79[2 * v72 + 1];
        v102 = v82;
        if (v82)
        {
          v83 = (unint64_t *)&v82->__shared_owners_;
          do
            v84 = __ldxr(v83);
          while (__stxr(v84 + 1, v83));
        }
      }
      else
      {
        v82 = 0;
        v81 = 0;
        v101 = 0;
        v102 = 0;
      }
      v38.n128_u64[0] = Espresso::QuantSimEngine::blob_container::copy_from_fp32(v75, (uint64_t)v81 + 160, 1.0);
      if (v82)
      {
        v85 = (unint64_t *)&v82->__shared_owners_;
        do
          v86 = __ldaxr(v85);
        while (__stlxr(v86 - 1, v85));
        if (!v86)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v82->__on_zero_shared)(v82, v38);
          std::__shared_weak_count::__release_weak(v82);
        }
      }
      v87 = v104;
      if (v104)
      {
        v88 = (unint64_t *)&v104->__shared_owners_;
        do
          v89 = __ldaxr(v88);
        while (__stlxr(v89 - 1, v88));
        if (!v89)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v87->__on_zero_shared)(v87, v38);
          std::__shared_weak_count::__release_weak(v87);
        }
      }
      ++v72;
      v71 = *v5;
    }
    while (v72 < (v5[1] - *v5) >> 4);
  }
  if (v68)
  {
    v90 = (unint64_t *)&v68->__shared_owners_;
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v68->__on_zero_shared)(v68, v38);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
  v103 = v99;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v103);
  v99[0] = (void **)v100;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v99);
}

void sub_191607E4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  *(_QWORD *)(v25 - 104) = &a22;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 104));
  a22 = (void **)&a25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a22);
  _Unwind_Resume(a1);
}

void *wrapper_kernel<Espresso::copy_kernel_cpu,Espresso::copy_params_t>::__set_weight_raw_blob(void *result, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  void *v7;
  int v8;
  uint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::runtime_error *exception;
  unint64_t v15;
  std::runtime_error *v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  std::string v39;
  _QWORD v40[2];
  unsigned __int8 v41;
  _QWORD v42[2];
  unsigned __int8 v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;

  v7 = result;
  v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10)
      return result;
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    v10 = (uint64_t)v7 + 304;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v10, (__int128 *)&v52);
    size = (std::__shared_weak_count *)v52.__r_.__value_.__l.__size_;
    if (v52.__r_.__value_.__l.__size_)
    {
      v12 = (unint64_t *)(v52.__r_.__value_.__l.__size_ + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    if (a5 != 4 * *(int *)(*(_QWORD *)v10 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      v15 = a5;
      v16 = exception;
      std::to_string(&v45, v15);
      v17 = std::string::insert(&v45, 0, "Unexpected size s=");
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      v19 = std::string::append(&v46, "/blob=");
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, 4 * *(int *)(*(_QWORD *)v10 + 8));
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v21 = &v44;
      else
        v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      else
        v22 = v44.__r_.__value_.__l.__size_;
      v23 = std::string::append(&v47, (const std::string::value_type *)v21, v22);
      v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, " @ ");
      if ((v43 & 0x80u) == 0)
        v25 = (const std::string::value_type *)v42;
      else
        v25 = (const std::string::value_type *)v42[0];
      if ((v43 & 0x80u) == 0)
        v26 = v43;
      else
        v26 = v42[1];
      v27 = std::string::append(&v48, v25, v26);
      v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      v29 = std::string::append(&v49, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v40, ":");
      if ((v41 & 0x80u) == 0)
        v31 = (const std::string::value_type *)v40;
      else
        v31 = (const std::string::value_type *)v40[0];
      if ((v41 & 0x80u) == 0)
        v32 = v41;
      else
        v32 = v40[1];
      v33 = std::string::append(&v50, v31, v32);
      v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, 197);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = &v39;
      else
        v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      else
        v36 = v39.__r_.__value_.__l.__size_;
      v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
      v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v16, &v52);
      __cxa_throw(v16, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    return memcpy(*(void **)(*(_QWORD *)v10 + 16), a4, a5);
  }
  return result;
}

void sub_191608204(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  void *v59;
  int v60;
  uint64_t v61;

  if (*(char *)(v61 - 57) < 0)
    operator delete(*(void **)(v61 - 80));
  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v61 - 89) < 0)
    operator delete(*(void **)(v61 - 112));
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v61 - 121) < 0)
    operator delete(*(void **)(v61 - 144));
  if (*(char *)(v61 - 153) < 0)
    operator delete(*(void **)(v61 - 176));
  if (a27 < 0)
    operator delete(a22);
  if (a59 < 0)
    operator delete(a54);
  if (a33 < 0)
    operator delete(a28);
  if (a52 < 0)
    operator delete(a47);
  if (a45 < 0)
    operator delete(a40);
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0)
LABEL_28:
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

BOOL wrapper_kernel<Espresso::copy_kernel_cpu,Espresso::copy_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2;

  v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10)
      return 0;
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

void wrapper_kernel<Espresso::copy_kernel_cpu,Espresso::copy_params_t>::convert_layer_data_to_fp32(_QWORD *a1, char **a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v9;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  const void *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  __int128 v43;
  int64x2_t v44;
  char *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  __int128 v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  int64x2_t v59;
  char *v60;
  _QWORD *v61;
  void *__p;
  void *v63;
  __int128 v64;
  const void *v65;
  std::__shared_weak_count *v66;

  if (a3 != a4)
  {
    v9 = a3;
    v12 = a2 + 2;
    while (1)
    {
      v14 = *(const void **)v9;
      v13 = *(std::__shared_weak_count **)(v9 + 8);
      v65 = *(const void **)v9;
      v66 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
      }
      v17 = operator new(0x118uLL);
      v17[1] = 0;
      v17[2] = 0;
      *v17 = &off_1E2DC1868;
      Espresso::blob_cpu::blob_cpu((uint64_t)(v17 + 3), a1);
      *(_QWORD *)&v64 = v17 + 3;
      *((_QWORD *)&v64 + 1) = v17;
      Espresso::abstract_blob_container::shape((char *)&v58, (uint64_t)v14);
      v56 = 0;
      v57 = 0;
      (*(void (**)(_QWORD *, uint64_t *, uint64_t *))(v17[3] + 16))(v17 + 3, &v58, &v56);
      v18 = v57;
      if (v57)
      {
        v19 = (unint64_t *)&v57->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if (__p)
      {
        v63 = __p;
        operator delete(__p);
      }
      if (v65)
      {
        if (v21)
          break;
      }
      v21 = 0;
      v55 = 0;
      if (a5)
        goto LABEL_21;
LABEL_28:
      v27 = v64;
      if (*((_QWORD *)&v64 + 1))
      {
        v28 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v31 = a2[1];
      v30 = (unint64_t)a2[2];
      if ((unint64_t)v31 >= v30)
      {
        v54 = v27;
        v33 = (v31 - *a2) >> 4;
        if ((unint64_t)(v33 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v34 = v30 - (_QWORD)*a2;
        v35 = v34 >> 3;
        if (v34 >> 3 <= (unint64_t)(v33 + 1))
          v35 = v33 + 1;
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0)
          v36 = 0xFFFFFFFFFFFFFFFLL;
        else
          v36 = v35;
        v61 = v12;
        v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v36);
        v39 = &v37[16 * v33];
        *(_OWORD *)v39 = v54;
        v41 = *a2;
        v40 = a2[1];
        if (v40 == *a2)
        {
          v44 = vdupq_n_s64((unint64_t)v40);
          v42 = &v37[16 * v33];
        }
        else
        {
          v42 = &v37[16 * v33];
          do
          {
            v43 = *((_OWORD *)v40 - 1);
            v40 -= 16;
            *((_OWORD *)v42 - 1) = v43;
            v42 -= 16;
            *(_QWORD *)v40 = 0;
            *((_QWORD *)v40 + 1) = 0;
          }
          while (v40 != v41);
          v44 = *(int64x2_t *)a2;
        }
        v32 = v39 + 16;
        *a2 = v42;
        a2[1] = v39 + 16;
        v59 = v44;
        v45 = a2[2];
        a2[2] = &v37[16 * v38];
        v60 = v45;
        v58 = v44.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v58);
      }
      else
      {
        *(_OWORD *)v31 = v27;
        v32 = v31 + 16;
      }
      a2[1] = v32;
      if (v55)
      {
        v46 = (unint64_t *)&v55->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      v48 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
      if (*((_QWORD *)&v64 + 1))
      {
        v49 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      v51 = v66;
      if (v66)
      {
        v52 = (unint64_t *)&v66->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v9 += 16;
      if (v9 == a4)
        return;
    }
    v55 = v66;
    if (v66)
    {
      v22 = (unint64_t *)&v66->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    if (!a5)
      goto LABEL_28;
LABEL_21:
    if (a6)
    {
      v58 = 0;
      v59.i64[0] = 0;
      (*(void (**)(void *, uint64_t *, uint64_t))(*(_QWORD *)v21 + 40))(v21, &v58, v64 + 160);
      v24 = (std::__shared_weak_count *)v59.i64[0];
      if (v59.i64[0])
      {
        v25 = (unint64_t *)(v59.i64[0] + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v21, v64 + 160, 1.0);
    }
    goto LABEL_28;
  }
}

void sub_191608760(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::copy_kernel_cpu,Espresso::copy_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB4358;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::copy_kernel_cpu,Espresso::copy_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB4358;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::copy_kernel_cpu,Espresso::copy_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_41@<Q0>(uint64_t *a1@<X1>, __n128 *a2@<X8>)
{
  _QWORD *v4;
  __n128 result;

  v4 = operator new(0x180uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_1E2DB4860;
  Espresso::generic_cf_else_kernel::generic_cf_else_kernel(v4 + 3, a1);
  v4[3] = &off_1E2D50810;
  v4[39] = &unk_1E2D50968;
  *((_OWORD *)v4 + 22) = 0u;
  *((_OWORD *)v4 + 23) = 0u;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v4 + 44, *a1, a1[1]);
  result.n128_u64[0] = (unint64_t)(v4 + 3);
  result.n128_u64[1] = (unint64_t)v4;
  *a2 = result;
  return result;
}

void sub_1916088B0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::cf_else_kernel_cpu,Espresso::cf_else_params_t>::~wrapper_kernel(Espresso::generic_cf_else_kernel *a1)
{
  *(_QWORD *)a1 = &off_1E2D50810;
  *((_QWORD *)a1 + 36) = &unk_1E2D50968;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 344);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 328);
  Espresso::generic_cf_else_kernel::~generic_cf_else_kernel(a1);
}

{
  *(_QWORD *)a1 = &off_1E2D50810;
  *((_QWORD *)a1 + 36) = &unk_1E2D50968;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 344);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 328);
  Espresso::generic_cf_else_kernel::~generic_cf_else_kernel(a1);
  JUMPOUT(0x19401CD90);
}

void wrapper_kernel<Espresso::cf_else_kernel_cpu,Espresso::cf_else_params_t>::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  _BOOL4 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  float *v31;
  vDSP_Length v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  __n128 v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  void **v45;
  void **v46;
  void **v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  int *v53;
  float *v54;
  vDSP_Length v55;
  int *v56;
  int v57;
  int v58;
  uint64_t v59;
  unint64_t v60;
  vDSP_Length v61;
  vDSP_Length v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  const void *v75;
  void **v76;
  uint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  void **v81;
  const void *v82;
  void *v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  uint64_t v95;
  std::__shared_weak_count *v96;
  float __B;
  _QWORD v98[2];
  _QWORD v99[2];
  void **v100[3];
  char *v101[3];
  void *v102;
  std::__shared_weak_count *v103;
  void ***v104;
  std::__shared_weak_count *v105;

  memset(v101, 0, sizeof(v101));
  memset(v100, 0, sizeof(v100));
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)*a3 + 32))(*(_QWORD *)*a3))
    v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)*a3 + 32))(*(_QWORD *)*a3) == 1;
  else
    v8 = 1;
  v9 = *(std::__shared_weak_count **)(a1 + 336);
  v99[0] = *(_QWORD *)(a1 + 328);
  v99[1] = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  wrapper_kernel<Espresso::cf_else_kernel_cpu,Espresso::cf_else_params_t>::convert_layer_data_to_fp32(v99, v101, *a4, a4[1], 1, v8);
  if (v9)
  {
    v12 = (unint64_t *)&v9->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v14 = *(std::__shared_weak_count **)(a1 + 336);
  v98[0] = *(_QWORD *)(a1 + 328);
  v98[1] = v14;
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  wrapper_kernel<Espresso::cf_else_kernel_cpu,Espresso::cf_else_params_t>::convert_layer_data_to_fp32(v98, (char **)v100, *a3, a3[1], 0, 0);
  if (v14)
  {
    v17 = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v95 = a1;
  v19 = *a4;
  if (a4[1] != *a4)
  {
    v20 = 0;
    do
    {
      if (!v8
        && (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v19 + 16 * v20) + 32))(*(_QWORD *)(v19 + 16 * v20))
         || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(*a4 + 16 * v20) + 32))(*(_QWORD *)(*a4 + 16 * v20)) == 1))
      {
        __B = *(float *)(*(_QWORD *)(*a4 + 16 * v20) + 112);
        v21 = &v101[0][16 * v20];
        v104 = (void ***)v22;
        v23 = (std::__shared_weak_count *)*((_QWORD *)v21 + 1);
        v105 = v23;
        if (v23)
        {
          v24 = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
        }
        v26 = *((_QWORD *)v22 + 20);
        v27 = (std::__shared_weak_count *)*((_QWORD *)v22 + 21);
        v102 = (void *)v26;
        v103 = v27;
        if (v27)
        {
          v28 = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldxr(v28);
          while (__stxr(v29 + 1, v28));
        }
        v30 = 0;
        v31 = *(float **)(v26 + 24);
        v32 = *(int *)(v26 + 8);
        v33 = v26 + 12;
        do
        {
          v32 *= *(int *)(v33 + v30);
          v30 += 4;
        }
        while (v30 != 12);
        vDSP_vsmul(v31, 1, &__B, v31, 1, v32);
        if (v27)
        {
          v34 = (unint64_t *)&v27->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        v36 = v105;
        if (v105)
        {
          v37 = (unint64_t *)&v105->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
      }
      ++v20;
      v19 = *a4;
    }
    while (v20 < (a4[1] - *a4) >> 4);
  }
  v39 = v95;
  Espresso::cf_else_kernel_cpu::__launch(v95, a2);
  v41 = *(_QWORD *)(v95 + 344);
  if (v41)
  {
    v42 = *(std::__shared_weak_count **)(v95 + 352);
    v96 = v42;
    if (v42)
    {
      v43 = (unint64_t *)&v42->__shared_owners_;
      do
        v44 = __ldxr(v43);
      while (__stxr(v44 + 1, v43));
    }
    v45 = v100[0];
    if (*v100[0]
    {
      v47 = v46;
      v48 = (std::__shared_weak_count *)v45[1];
      v104 = (void ***)v46;
      v105 = v48;
      if (v48)
      {
        v49 = (unint64_t *)&v48->__shared_owners_;
        do
          v50 = __ldxr(v49);
        while (__stxr(v50 + 1, v49));
      }
    }
    else
    {
      v48 = 0;
      v47 = 0;
      v104 = 0;
      v105 = 0;
    }
    LODWORD(v51) = *(_DWORD *)(v41 + 8);
    v94 = v48;
    if ((_DWORD)v51 == 1)
    {
      v52 = 0;
      v53 = (int *)v47[20];
      v54 = (float *)*((_QWORD *)v53 + 3);
      v55 = v53[2];
      v56 = v53 + 3;
      do
        v55 *= v56[v52++];
      while (v52 != 3);
      vDSP_vsmul(v54, 1, *(const float **)(v41 + 16), v54, 1, v55);
    }
    else
    {
      v57 = *((_DWORD *)v47 + 4);
      if ((_DWORD)v51 != v57)
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v51, v57);
      v58 = *((_DWORD *)v47 + 5);
      if (v58)
      {
        v59 = 0;
        v60 = 0;
        v61 = *((int *)v47 + 2) * (uint64_t)*((int *)v47 + 3);
        v62 = 4 * (int)v51 * v61;
        do
        {
          if ((_DWORD)v51)
          {
            v63 = 0;
            v64 = 0;
            v65 = v59;
            do
            {
              vDSP_vsmul((const float *)(*((_QWORD *)v47[20] + 3) + v65), 1, (const float *)(*(_QWORD *)(v41 + 16) + v63), (float *)(*((_QWORD *)v47[20] + 3) + v65), 1, v61);
              ++v64;
              v51 = *((int *)v47 + 4);
              v63 += 4;
              v65 += 4 * v61;
            }
            while (v64 < v51);
            v58 = *((_DWORD *)v47 + 5);
          }
          ++v60;
          v59 += v62;
        }
        while (v60 < v58);
      }
    }
    v39 = v95;
    if (v94)
    {
      v66 = (unint64_t *)&v94->__shared_owners_;
      do
        v67 = __ldaxr(v66);
      while (__stlxr(v67 - 1, v66));
      if (!v67)
      {
        ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
        std::__shared_weak_count::__release_weak(v94);
      }
    }
    if (v96)
    {
      v68 = (unint64_t *)&v96->__shared_owners_;
      do
        v69 = __ldaxr(v68);
      while (__stlxr(v69 - 1, v68));
      if (!v69)
      {
        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
        std::__shared_weak_count::__release_weak(v96);
      }
    }
  }
  v70 = *(std::__shared_weak_count **)(v39 + 336);
  if (v70)
  {
    v71 = (unint64_t *)&v70->__shared_owners_;
    do
      v72 = __ldxr(v71);
    while (__stxr(v72 + 1, v71));
  }
  v73 = *a3;
  if (a3[1] != *a3)
  {
    v74 = 0;
    do
    {
      v75 = *(const void **)(v73 + 16 * v74);
      if (v75
      {
        v77 = (uint64_t)v76;
        v104 = (void ***)v76;
        v78 = *(std::__shared_weak_count **)(v73 + 16 * v74 + 8);
        v105 = v78;
        if (v78)
        {
          v79 = (unint64_t *)&v78->__shared_owners_;
          do
            v80 = __ldxr(v79);
          while (__stxr(v80 + 1, v79));
        }
      }
      else
      {
        v77 = 0;
        v104 = 0;
        v105 = 0;
      }
      v81 = v100[0];
      v82 = v100[0][2 * v74];
      if (v82
      {
        v102 = v83;
        v84 = (std::__shared_weak_count *)v81[2 * v74 + 1];
        v103 = v84;
        if (v84)
        {
          v85 = (unint64_t *)&v84->__shared_owners_;
          do
            v86 = __ldxr(v85);
          while (__stxr(v86 + 1, v85));
        }
      }
      else
      {
        v84 = 0;
        v83 = 0;
        v102 = 0;
        v103 = 0;
      }
      v40.n128_u64[0] = Espresso::QuantSimEngine::blob_container::copy_from_fp32(v77, (uint64_t)v83 + 160, 1.0);
      if (v84)
      {
        v87 = (unint64_t *)&v84->__shared_owners_;
        do
          v88 = __ldaxr(v87);
        while (__stlxr(v88 - 1, v87));
        if (!v88)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v84->__on_zero_shared)(v84, v40);
          std::__shared_weak_count::__release_weak(v84);
        }
      }
      v89 = v105;
      if (v105)
      {
        v90 = (unint64_t *)&v105->__shared_owners_;
        do
          v91 = __ldaxr(v90);
        while (__stlxr(v91 - 1, v90));
        if (!v91)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v89->__on_zero_shared)(v89, v40);
          std::__shared_weak_count::__release_weak(v89);
        }
      }
      ++v74;
      v73 = *a3;
    }
    while (v74 < (a3[1] - *a3) >> 4);
  }
  if (v70)
  {
    v92 = (unint64_t *)&v70->__shared_owners_;
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v70->__on_zero_shared)(v70, v40);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  v104 = v100;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v104);
  v100[0] = (void **)v101;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v100);
}

void sub_191609034(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  *(_QWORD *)(v25 - 104) = &a22;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 104));
  a22 = (void **)&a25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a22);
  _Unwind_Resume(a1);
}

void Espresso::generic_cf_else_kernel::top_shapes_for_bottom_shapes(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void *wrapper_kernel<Espresso::cf_else_kernel_cpu,Espresso::cf_else_params_t>::__set_weight_raw_blob(void *result, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  void *v7;
  int v8;
  uint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::runtime_error *exception;
  unint64_t v15;
  std::runtime_error *v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  std::string v39;
  _QWORD v40[2];
  unsigned __int8 v41;
  _QWORD v42[2];
  unsigned __int8 v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;

  v7 = result;
  v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10)
      return result;
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    v10 = (uint64_t)v7 + 344;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v10, (__int128 *)&v52);
    size = (std::__shared_weak_count *)v52.__r_.__value_.__l.__size_;
    if (v52.__r_.__value_.__l.__size_)
    {
      v12 = (unint64_t *)(v52.__r_.__value_.__l.__size_ + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    if (a5 != 4 * *(int *)(*(_QWORD *)v10 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      v15 = a5;
      v16 = exception;
      std::to_string(&v45, v15);
      v17 = std::string::insert(&v45, 0, "Unexpected size s=");
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      v19 = std::string::append(&v46, "/blob=");
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, 4 * *(int *)(*(_QWORD *)v10 + 8));
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v21 = &v44;
      else
        v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      else
        v22 = v44.__r_.__value_.__l.__size_;
      v23 = std::string::append(&v47, (const std::string::value_type *)v21, v22);
      v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, " @ ");
      if ((v43 & 0x80u) == 0)
        v25 = (const std::string::value_type *)v42;
      else
        v25 = (const std::string::value_type *)v42[0];
      if ((v43 & 0x80u) == 0)
        v26 = v43;
      else
        v26 = v42[1];
      v27 = std::string::append(&v48, v25, v26);
      v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      v29 = std::string::append(&v49, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v40, ":");
      if ((v41 & 0x80u) == 0)
        v31 = (const std::string::value_type *)v40;
      else
        v31 = (const std::string::value_type *)v40[0];
      if ((v41 & 0x80u) == 0)
        v32 = v41;
      else
        v32 = v40[1];
      v33 = std::string::append(&v50, v31, v32);
      v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, 197);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = &v39;
      else
        v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      else
        v36 = v39.__r_.__value_.__l.__size_;
      v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
      v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v16, &v52);
      __cxa_throw(v16, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    return memcpy(*(void **)(*(_QWORD *)v10 + 16), a4, a5);
  }
  return result;
}

void sub_1916093F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  void *v59;
  int v60;
  uint64_t v61;

  if (*(char *)(v61 - 57) < 0)
    operator delete(*(void **)(v61 - 80));
  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v61 - 89) < 0)
    operator delete(*(void **)(v61 - 112));
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v61 - 121) < 0)
    operator delete(*(void **)(v61 - 144));
  if (*(char *)(v61 - 153) < 0)
    operator delete(*(void **)(v61 - 176));
  if (a27 < 0)
    operator delete(a22);
  if (a59 < 0)
    operator delete(a54);
  if (a33 < 0)
    operator delete(a28);
  if (a52 < 0)
    operator delete(a47);
  if (a45 < 0)
    operator delete(a40);
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0)
LABEL_28:
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

BOOL wrapper_kernel<Espresso::cf_else_kernel_cpu,Espresso::cf_else_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2;

  v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10)
      return 0;
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

const char *Espresso::generic_cf_else_kernel::kernel_type_str(Espresso::generic_cf_else_kernel *this)
{
  return "cf_else";
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::cf_else_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

void `non-virtual thunk to'wrapper_kernel<Espresso::cf_else_kernel_cpu,Espresso::cf_else_params_t>::~wrapper_kernel(_QWORD *a1)
{
  Espresso::generic_cf_else_kernel *v2;

  v2 = (Espresso::generic_cf_else_kernel *)(a1 - 36);
  *(a1 - 36) = &off_1E2D50810;
  *a1 = &unk_1E2D50968;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 7));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 5));
  Espresso::generic_cf_else_kernel::~generic_cf_else_kernel(v2);
}

{
  Espresso::generic_cf_else_kernel *v2;

  v2 = (Espresso::generic_cf_else_kernel *)(a1 - 36);
  *(a1 - 36) = &off_1E2D50810;
  *a1 = &unk_1E2D50968;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 7));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 5));
  Espresso::generic_cf_else_kernel::~generic_cf_else_kernel(v2);
  JUMPOUT(0x19401CD90);
}

void wrapper_kernel<Espresso::cf_else_kernel_cpu,Espresso::cf_else_params_t>::convert_layer_data_to_fp32(_QWORD *a1, char **a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v9;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  const void *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  __int128 v43;
  int64x2_t v44;
  char *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  __int128 v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  int64x2_t v59;
  char *v60;
  _QWORD *v61;
  void *__p;
  void *v63;
  __int128 v64;
  const void *v65;
  std::__shared_weak_count *v66;

  if (a3 != a4)
  {
    v9 = a3;
    v12 = a2 + 2;
    while (1)
    {
      v14 = *(const void **)v9;
      v13 = *(std::__shared_weak_count **)(v9 + 8);
      v65 = *(const void **)v9;
      v66 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
      }
      v17 = operator new(0x118uLL);
      v17[1] = 0;
      v17[2] = 0;
      *v17 = &off_1E2DC1868;
      Espresso::blob_cpu::blob_cpu((uint64_t)(v17 + 3), a1);
      *(_QWORD *)&v64 = v17 + 3;
      *((_QWORD *)&v64 + 1) = v17;
      Espresso::abstract_blob_container::shape((char *)&v58, (uint64_t)v14);
      v56 = 0;
      v57 = 0;
      (*(void (**)(_QWORD *, uint64_t *, uint64_t *))(v17[3] + 16))(v17 + 3, &v58, &v56);
      v18 = v57;
      if (v57)
      {
        v19 = (unint64_t *)&v57->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if (__p)
      {
        v63 = __p;
        operator delete(__p);
      }
      if (v65)
      {
        if (v21)
          break;
      }
      v21 = 0;
      v55 = 0;
      if (a5)
        goto LABEL_21;
LABEL_28:
      v27 = v64;
      if (*((_QWORD *)&v64 + 1))
      {
        v28 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v31 = a2[1];
      v30 = (unint64_t)a2[2];
      if ((unint64_t)v31 >= v30)
      {
        v54 = v27;
        v33 = (v31 - *a2) >> 4;
        if ((unint64_t)(v33 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v34 = v30 - (_QWORD)*a2;
        v35 = v34 >> 3;
        if (v34 >> 3 <= (unint64_t)(v33 + 1))
          v35 = v33 + 1;
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0)
          v36 = 0xFFFFFFFFFFFFFFFLL;
        else
          v36 = v35;
        v61 = v12;
        v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v36);
        v39 = &v37[16 * v33];
        *(_OWORD *)v39 = v54;
        v41 = *a2;
        v40 = a2[1];
        if (v40 == *a2)
        {
          v44 = vdupq_n_s64((unint64_t)v40);
          v42 = &v37[16 * v33];
        }
        else
        {
          v42 = &v37[16 * v33];
          do
          {
            v43 = *((_OWORD *)v40 - 1);
            v40 -= 16;
            *((_OWORD *)v42 - 1) = v43;
            v42 -= 16;
            *(_QWORD *)v40 = 0;
            *((_QWORD *)v40 + 1) = 0;
          }
          while (v40 != v41);
          v44 = *(int64x2_t *)a2;
        }
        v32 = v39 + 16;
        *a2 = v42;
        a2[1] = v39 + 16;
        v59 = v44;
        v45 = a2[2];
        a2[2] = &v37[16 * v38];
        v60 = v45;
        v58 = v44.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v58);
      }
      else
      {
        *(_OWORD *)v31 = v27;
        v32 = v31 + 16;
      }
      a2[1] = v32;
      if (v55)
      {
        v46 = (unint64_t *)&v55->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      v48 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
      if (*((_QWORD *)&v64 + 1))
      {
        v49 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      v51 = v66;
      if (v66)
      {
        v52 = (unint64_t *)&v66->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v9 += 16;
      if (v9 == a4)
        return;
    }
    v55 = v66;
    if (v66)
    {
      v22 = (unint64_t *)&v66->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    if (!a5)
      goto LABEL_28;
LABEL_21:
    if (a6)
    {
      v58 = 0;
      v59.i64[0] = 0;
      (*(void (**)(void *, uint64_t *, uint64_t))(*(_QWORD *)v21 + 40))(v21, &v58, v64 + 160);
      v24 = (std::__shared_weak_count *)v59.i64[0];
      if (v59.i64[0])
      {
        v25 = (unint64_t *)(v59.i64[0] + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v21, v64 + 160, 1.0);
    }
    goto LABEL_28;
  }
}

void sub_191609A0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::cf_else_kernel_cpu,Espresso::cf_else_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB4860;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::cf_else_kernel_cpu,Espresso::cf_else_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB4860;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::cf_else_kernel_cpu,Espresso::cf_else_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_40@<Q0>(uint64_t *a1@<X1>, __n128 *a2@<X8>)
{
  char *v4;
  __n128 result;

  v4 = (char *)operator new(0x180uLL);
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 2) = 0;
  *(_QWORD *)v4 = &off_1E2DB45C0;
  Espresso::base_kernel::base_kernel((uint64_t)(v4 + 24), a1);
  v4[305] = 0;
  *((_QWORD *)v4 + 43) = 0;
  *((_QWORD *)v4 + 3) = &off_1E2D4F748;
  *(_OWORD *)(v4 + 312) = 0u;
  *(_OWORD *)(v4 + 328) = 0u;
  *((_OWORD *)v4 + 22) = 0u;
  *((_OWORD *)v4 + 23) = 0u;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v4 + 44, *a1, a1[1]);
  result.n128_u64[0] = (unint64_t)(v4 + 24);
  result.n128_u64[1] = (unint64_t)v4;
  *a2 = result;
  return result;
}

void sub_191609B64(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::cf_end_kernel_cpu,Espresso::cf_end_params_t>::~wrapper_kernel(void **a1)
{
  *a1 = &off_1E2D4F748;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 43));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 41));
  Espresso::generic_cf_end_kernel::~generic_cf_end_kernel(a1);
}

{
  *a1 = &off_1E2D4F748;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 43));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 41));
  Espresso::generic_cf_end_kernel::~generic_cf_end_kernel(a1);
  JUMPOUT(0x19401CD90);
}

void wrapper_kernel<Espresso::cf_end_kernel_cpu,Espresso::cf_end_params_t>::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  _BOOL4 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  float *v31;
  vDSP_Length v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  __n128 v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  void **v45;
  void **v46;
  void **v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  int *v53;
  float *v54;
  vDSP_Length v55;
  int *v56;
  int v57;
  int v58;
  uint64_t v59;
  unint64_t v60;
  vDSP_Length v61;
  vDSP_Length v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  const void *v75;
  void **v76;
  uint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  void **v81;
  const void *v82;
  void *v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  uint64_t v95;
  std::__shared_weak_count *v96;
  float __B;
  _QWORD v98[2];
  _QWORD v99[2];
  void **v100[3];
  char *v101[3];
  void *v102;
  std::__shared_weak_count *v103;
  void ***v104;
  std::__shared_weak_count *v105;

  memset(v101, 0, sizeof(v101));
  memset(v100, 0, sizeof(v100));
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)*a3 + 32))(*(_QWORD *)*a3))
    v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)*a3 + 32))(*(_QWORD *)*a3) == 1;
  else
    v8 = 1;
  v9 = *(std::__shared_weak_count **)(a1 + 336);
  v99[0] = *(_QWORD *)(a1 + 328);
  v99[1] = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  wrapper_kernel<Espresso::cf_end_kernel_cpu,Espresso::cf_end_params_t>::convert_layer_data_to_fp32(v99, v101, *a4, a4[1], 1, v8);
  if (v9)
  {
    v12 = (unint64_t *)&v9->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v14 = *(std::__shared_weak_count **)(a1 + 336);
  v98[0] = *(_QWORD *)(a1 + 328);
  v98[1] = v14;
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  wrapper_kernel<Espresso::cf_end_kernel_cpu,Espresso::cf_end_params_t>::convert_layer_data_to_fp32(v98, (char **)v100, *a3, a3[1], 0, 0);
  if (v14)
  {
    v17 = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v95 = a1;
  v19 = *a4;
  if (a4[1] != *a4)
  {
    v20 = 0;
    do
    {
      if (!v8
        && (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v19 + 16 * v20) + 32))(*(_QWORD *)(v19 + 16 * v20))
         || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(*a4 + 16 * v20) + 32))(*(_QWORD *)(*a4 + 16 * v20)) == 1))
      {
        __B = *(float *)(*(_QWORD *)(*a4 + 16 * v20) + 112);
        v21 = &v101[0][16 * v20];
        v104 = (void ***)v22;
        v23 = (std::__shared_weak_count *)*((_QWORD *)v21 + 1);
        v105 = v23;
        if (v23)
        {
          v24 = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
        }
        v26 = *((_QWORD *)v22 + 20);
        v27 = (std::__shared_weak_count *)*((_QWORD *)v22 + 21);
        v102 = (void *)v26;
        v103 = v27;
        if (v27)
        {
          v28 = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldxr(v28);
          while (__stxr(v29 + 1, v28));
        }
        v30 = 0;
        v31 = *(float **)(v26 + 24);
        v32 = *(int *)(v26 + 8);
        v33 = v26 + 12;
        do
        {
          v32 *= *(int *)(v33 + v30);
          v30 += 4;
        }
        while (v30 != 12);
        vDSP_vsmul(v31, 1, &__B, v31, 1, v32);
        if (v27)
        {
          v34 = (unint64_t *)&v27->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        v36 = v105;
        if (v105)
        {
          v37 = (unint64_t *)&v105->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
      }
      ++v20;
      v19 = *a4;
    }
    while (v20 < (a4[1] - *a4) >> 4);
  }
  v39 = v95;
  Espresso::cf_end_kernel_cpu::__launch(v95, a2);
  v41 = *(_QWORD *)(v95 + 344);
  if (v41)
  {
    v42 = *(std::__shared_weak_count **)(v95 + 352);
    v96 = v42;
    if (v42)
    {
      v43 = (unint64_t *)&v42->__shared_owners_;
      do
        v44 = __ldxr(v43);
      while (__stxr(v44 + 1, v43));
    }
    v45 = v100[0];
    if (*v100[0]
    {
      v47 = v46;
      v48 = (std::__shared_weak_count *)v45[1];
      v104 = (void ***)v46;
      v105 = v48;
      if (v48)
      {
        v49 = (unint64_t *)&v48->__shared_owners_;
        do
          v50 = __ldxr(v49);
        while (__stxr(v50 + 1, v49));
      }
    }
    else
    {
      v48 = 0;
      v47 = 0;
      v104 = 0;
      v105 = 0;
    }
    LODWORD(v51) = *(_DWORD *)(v41 + 8);
    v94 = v48;
    if ((_DWORD)v51 == 1)
    {
      v52 = 0;
      v53 = (int *)v47[20];
      v54 = (float *)*((_QWORD *)v53 + 3);
      v55 = v53[2];
      v56 = v53 + 3;
      do
        v55 *= v56[v52++];
      while (v52 != 3);
      vDSP_vsmul(v54, 1, *(const float **)(v41 + 16), v54, 1, v55);
    }
    else
    {
      v57 = *((_DWORD *)v47 + 4);
      if ((_DWORD)v51 != v57)
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v51, v57);
      v58 = *((_DWORD *)v47 + 5);
      if (v58)
      {
        v59 = 0;
        v60 = 0;
        v61 = *((int *)v47 + 2) * (uint64_t)*((int *)v47 + 3);
        v62 = 4 * (int)v51 * v61;
        do
        {
          if ((_DWORD)v51)
          {
            v63 = 0;
            v64 = 0;
            v65 = v59;
            do
            {
              vDSP_vsmul((const float *)(*((_QWORD *)v47[20] + 3) + v65), 1, (const float *)(*(_QWORD *)(v41 + 16) + v63), (float *)(*((_QWORD *)v47[20] + 3) + v65), 1, v61);
              ++v64;
              v51 = *((int *)v47 + 4);
              v63 += 4;
              v65 += 4 * v61;
            }
            while (v64 < v51);
            v58 = *((_DWORD *)v47 + 5);
          }
          ++v60;
          v59 += v62;
        }
        while (v60 < v58);
      }
    }
    v39 = v95;
    if (v94)
    {
      v66 = (unint64_t *)&v94->__shared_owners_;
      do
        v67 = __ldaxr(v66);
      while (__stlxr(v67 - 1, v66));
      if (!v67)
      {
        ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
        std::__shared_weak_count::__release_weak(v94);
      }
    }
    if (v96)
    {
      v68 = (unint64_t *)&v96->__shared_owners_;
      do
        v69 = __ldaxr(v68);
      while (__stlxr(v69 - 1, v68));
      if (!v69)
      {
        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
        std::__shared_weak_count::__release_weak(v96);
      }
    }
  }
  v70 = *(std::__shared_weak_count **)(v39 + 336);
  if (v70)
  {
    v71 = (unint64_t *)&v70->__shared_owners_;
    do
      v72 = __ldxr(v71);
    while (__stxr(v72 + 1, v71));
  }
  v73 = *a3;
  if (a3[1] != *a3)
  {
    v74 = 0;
    do
    {
      v75 = *(const void **)(v73 + 16 * v74);
      if (v75
      {
        v77 = (uint64_t)v76;
        v104 = (void ***)v76;
        v78 = *(std::__shared_weak_count **)(v73 + 16 * v74 + 8);
        v105 = v78;
        if (v78)
        {
          v79 = (unint64_t *)&v78->__shared_owners_;
          do
            v80 = __ldxr(v79);
          while (__stxr(v80 + 1, v79));
        }
      }
      else
      {
        v77 = 0;
        v104 = 0;
        v105 = 0;
      }
      v81 = v100[0];
      v82 = v100[0][2 * v74];
      if (v82
      {
        v102 = v83;
        v84 = (std::__shared_weak_count *)v81[2 * v74 + 1];
        v103 = v84;
        if (v84)
        {
          v85 = (unint64_t *)&v84->__shared_owners_;
          do
            v86 = __ldxr(v85);
          while (__stxr(v86 + 1, v85));
        }
      }
      else
      {
        v84 = 0;
        v83 = 0;
        v102 = 0;
        v103 = 0;
      }
      v40.n128_u64[0] = Espresso::QuantSimEngine::blob_container::copy_from_fp32(v77, (uint64_t)v83 + 160, 1.0);
      if (v84)
      {
        v87 = (unint64_t *)&v84->__shared_owners_;
        do
          v88 = __ldaxr(v87);
        while (__stlxr(v88 - 1, v87));
        if (!v88)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v84->__on_zero_shared)(v84, v40);
          std::__shared_weak_count::__release_weak(v84);
        }
      }
      v89 = v105;
      if (v105)
      {
        v90 = (unint64_t *)&v105->__shared_owners_;
        do
          v91 = __ldaxr(v90);
        while (__stlxr(v91 - 1, v90));
        if (!v91)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v89->__on_zero_shared)(v89, v40);
          std::__shared_weak_count::__release_weak(v89);
        }
      }
      ++v74;
      v73 = *a3;
    }
    while (v74 < (a3[1] - *a3) >> 4);
  }
  if (v70)
  {
    v92 = (unint64_t *)&v70->__shared_owners_;
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v70->__on_zero_shared)(v70, v40);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  v104 = v100;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v104);
  v100[0] = (void **)v101;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v100);
}

void sub_19160A2D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  *(_QWORD *)(v25 - 104) = &a22;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 104));
  a22 = (void **)&a25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a22);
  _Unwind_Resume(a1);
}

void Espresso::generic_cf_end_kernel::top_shapes_for_bottom_shapes(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t Espresso::generic_cf_end_kernel::number_of_top_blobs(Espresso::generic_cf_end_kernel *this)
{
  return 0;
}

void *wrapper_kernel<Espresso::cf_end_kernel_cpu,Espresso::cf_end_params_t>::__set_weight_raw_blob(void *result, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  void *v7;
  int v8;
  uint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::runtime_error *exception;
  unint64_t v15;
  std::runtime_error *v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  std::string v39;
  _QWORD v40[2];
  unsigned __int8 v41;
  _QWORD v42[2];
  unsigned __int8 v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;

  v7 = result;
  v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10)
      return result;
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    v10 = (uint64_t)v7 + 344;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v10, (__int128 *)&v52);
    size = (std::__shared_weak_count *)v52.__r_.__value_.__l.__size_;
    if (v52.__r_.__value_.__l.__size_)
    {
      v12 = (unint64_t *)(v52.__r_.__value_.__l.__size_ + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    if (a5 != 4 * *(int *)(*(_QWORD *)v10 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      v15 = a5;
      v16 = exception;
      std::to_string(&v45, v15);
      v17 = std::string::insert(&v45, 0, "Unexpected size s=");
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      v19 = std::string::append(&v46, "/blob=");
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, 4 * *(int *)(*(_QWORD *)v10 + 8));
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v21 = &v44;
      else
        v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      else
        v22 = v44.__r_.__value_.__l.__size_;
      v23 = std::string::append(&v47, (const std::string::value_type *)v21, v22);
      v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, " @ ");
      if ((v43 & 0x80u) == 0)
        v25 = (const std::string::value_type *)v42;
      else
        v25 = (const std::string::value_type *)v42[0];
      if ((v43 & 0x80u) == 0)
        v26 = v43;
      else
        v26 = v42[1];
      v27 = std::string::append(&v48, v25, v26);
      v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      v29 = std::string::append(&v49, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v40, ":");
      if ((v41 & 0x80u) == 0)
        v31 = (const std::string::value_type *)v40;
      else
        v31 = (const std::string::value_type *)v40[0];
      if ((v41 & 0x80u) == 0)
        v32 = v41;
      else
        v32 = v40[1];
      v33 = std::string::append(&v50, v31, v32);
      v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, 197);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = &v39;
      else
        v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      else
        v36 = v39.__r_.__value_.__l.__size_;
      v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
      v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v16, &v52);
      __cxa_throw(v16, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    return memcpy(*(void **)(*(_QWORD *)v10 + 16), a4, a5);
  }
  return result;
}

void sub_19160A6A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  void *v59;
  int v60;
  uint64_t v61;

  if (*(char *)(v61 - 57) < 0)
    operator delete(*(void **)(v61 - 80));
  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v61 - 89) < 0)
    operator delete(*(void **)(v61 - 112));
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v61 - 121) < 0)
    operator delete(*(void **)(v61 - 144));
  if (*(char *)(v61 - 153) < 0)
    operator delete(*(void **)(v61 - 176));
  if (a27 < 0)
    operator delete(a22);
  if (a59 < 0)
    operator delete(a54);
  if (a33 < 0)
    operator delete(a28);
  if (a52 < 0)
    operator delete(a47);
  if (a45 < 0)
    operator delete(a40);
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0)
LABEL_28:
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

BOOL wrapper_kernel<Espresso::cf_end_kernel_cpu,Espresso::cf_end_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2;

  v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10)
      return 0;
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

const char *Espresso::generic_cf_end_kernel::kernel_type_str(Espresso::generic_cf_end_kernel *this)
{
  return "cf_end";
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::cf_end_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

void wrapper_kernel<Espresso::cf_end_kernel_cpu,Espresso::cf_end_params_t>::convert_layer_data_to_fp32(_QWORD *a1, char **a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v9;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  const void *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  __int128 v43;
  int64x2_t v44;
  char *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  __int128 v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  int64x2_t v59;
  char *v60;
  _QWORD *v61;
  void *__p;
  void *v63;
  __int128 v64;
  const void *v65;
  std::__shared_weak_count *v66;

  if (a3 != a4)
  {
    v9 = a3;
    v12 = a2 + 2;
    while (1)
    {
      v14 = *(const void **)v9;
      v13 = *(std::__shared_weak_count **)(v9 + 8);
      v65 = *(const void **)v9;
      v66 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
      }
      v17 = operator new(0x118uLL);
      v17[1] = 0;
      v17[2] = 0;
      *v17 = &off_1E2DC1868;
      Espresso::blob_cpu::blob_cpu((uint64_t)(v17 + 3), a1);
      *(_QWORD *)&v64 = v17 + 3;
      *((_QWORD *)&v64 + 1) = v17;
      Espresso::abstract_blob_container::shape((char *)&v58, (uint64_t)v14);
      v56 = 0;
      v57 = 0;
      (*(void (**)(_QWORD *, uint64_t *, uint64_t *))(v17[3] + 16))(v17 + 3, &v58, &v56);
      v18 = v57;
      if (v57)
      {
        v19 = (unint64_t *)&v57->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if (__p)
      {
        v63 = __p;
        operator delete(__p);
      }
      if (v65)
      {
        if (v21)
          break;
      }
      v21 = 0;
      v55 = 0;
      if (a5)
        goto LABEL_21;
LABEL_28:
      v27 = v64;
      if (*((_QWORD *)&v64 + 1))
      {
        v28 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v31 = a2[1];
      v30 = (unint64_t)a2[2];
      if ((unint64_t)v31 >= v30)
      {
        v54 = v27;
        v33 = (v31 - *a2) >> 4;
        if ((unint64_t)(v33 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v34 = v30 - (_QWORD)*a2;
        v35 = v34 >> 3;
        if (v34 >> 3 <= (unint64_t)(v33 + 1))
          v35 = v33 + 1;
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0)
          v36 = 0xFFFFFFFFFFFFFFFLL;
        else
          v36 = v35;
        v61 = v12;
        v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v36);
        v39 = &v37[16 * v33];
        *(_OWORD *)v39 = v54;
        v41 = *a2;
        v40 = a2[1];
        if (v40 == *a2)
        {
          v44 = vdupq_n_s64((unint64_t)v40);
          v42 = &v37[16 * v33];
        }
        else
        {
          v42 = &v37[16 * v33];
          do
          {
            v43 = *((_OWORD *)v40 - 1);
            v40 -= 16;
            *((_OWORD *)v42 - 1) = v43;
            v42 -= 16;
            *(_QWORD *)v40 = 0;
            *((_QWORD *)v40 + 1) = 0;
          }
          while (v40 != v41);
          v44 = *(int64x2_t *)a2;
        }
        v32 = v39 + 16;
        *a2 = v42;
        a2[1] = v39 + 16;
        v59 = v44;
        v45 = a2[2];
        a2[2] = &v37[16 * v38];
        v60 = v45;
        v58 = v44.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v58);
      }
      else
      {
        *(_OWORD *)v31 = v27;
        v32 = v31 + 16;
      }
      a2[1] = v32;
      if (v55)
      {
        v46 = (unint64_t *)&v55->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      v48 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
      if (*((_QWORD *)&v64 + 1))
      {
        v49 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      v51 = v66;
      if (v66)
      {
        v52 = (unint64_t *)&v66->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v9 += 16;
      if (v9 == a4)
        return;
    }
    v55 = v66;
    if (v66)
    {
      v22 = (unint64_t *)&v66->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    if (!a5)
      goto LABEL_28;
LABEL_21:
    if (a6)
    {
      v58 = 0;
      v59.i64[0] = 0;
      (*(void (**)(void *, uint64_t *, uint64_t))(*(_QWORD *)v21 + 40))(v21, &v58, v64 + 160);
      v24 = (std::__shared_weak_count *)v59.i64[0];
      if (v59.i64[0])
      {
        v25 = (unint64_t *)(v59.i64[0] + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v21, v64 + 160, 1.0);
    }
    goto LABEL_28;
  }
}

void sub_19160AC14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::cf_end_kernel_cpu,Espresso::cf_end_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB45C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::cf_end_kernel_cpu,Espresso::cf_end_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB45C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::cf_end_kernel_cpu,Espresso::cf_end_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_39@<Q0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  _QWORD *v8;
  uint64_t v9;
  __n128 result;

  v8 = operator new(0x1C0uLL);
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1E2DB45F8;
  v9 = *a2;
  Espresso::generic_cf_for_kernel::generic_cf_for_kernel((uint64_t)(v8 + 3), a1);
  v8[48] = 0;
  v8[49] = 0;
  *((_DWORD *)v8 + 100) = a3;
  *(_QWORD *)((char *)v8 + 404) = 0;
  v8[3] = &off_1E2D4F8A0;
  v8[38] = v9;
  v8[39] = &unk_1E2D4F9F8;
  *((_OWORD *)v8 + 26) = 0u;
  *((_OWORD *)v8 + 27) = 0u;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v8 + 52, *a1, a1[1]);
  result.n128_u64[0] = (unint64_t)(v8 + 3);
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_19160AD88(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::cf_for_kernel_cpu,Espresso::cf_for_params_t>::~wrapper_kernel(Espresso::generic_cf_for_kernel *a1)
{
  *(_QWORD *)a1 = &off_1E2D4F8A0;
  *((_QWORD *)a1 + 36) = &unk_1E2D4F9F8;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 408);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 392);
  *(_QWORD *)a1 = &off_1E2D81848;
  *((_QWORD *)a1 + 36) = &unk_1E2D819A0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 360);
  Espresso::generic_cf_for_kernel::~generic_cf_for_kernel(a1);
}

{
  *(_QWORD *)a1 = &off_1E2D4F8A0;
  *((_QWORD *)a1 + 36) = &unk_1E2D4F9F8;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 408);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 392);
  *(_QWORD *)a1 = &off_1E2D81848;
  *((_QWORD *)a1 + 36) = &unk_1E2D819A0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 360);
  Espresso::generic_cf_for_kernel::~generic_cf_for_kernel(a1);
  JUMPOUT(0x19401CD90);
}

void wrapper_kernel<Espresso::cf_for_kernel_cpu,Espresso::cf_for_params_t>::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  _BOOL4 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  float *v31;
  vDSP_Length v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  __n128 v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  void **v45;
  void **v46;
  void **v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  int *v53;
  float *v54;
  vDSP_Length v55;
  int *v56;
  int v57;
  int v58;
  uint64_t v59;
  unint64_t v60;
  vDSP_Length v61;
  vDSP_Length v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  const void *v75;
  void **v76;
  uint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  void **v81;
  const void *v82;
  void *v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  uint64_t v95;
  std::__shared_weak_count *v96;
  float __B;
  _QWORD v98[2];
  _QWORD v99[2];
  void **v100[3];
  char *v101[3];
  void *v102;
  std::__shared_weak_count *v103;
  void ***v104;
  std::__shared_weak_count *v105;

  memset(v101, 0, sizeof(v101));
  memset(v100, 0, sizeof(v100));
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)*a3 + 32))(*(_QWORD *)*a3))
    v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)*a3 + 32))(*(_QWORD *)*a3) == 1;
  else
    v8 = 1;
  v9 = *(std::__shared_weak_count **)(a1 + 400);
  v99[0] = *(_QWORD *)(a1 + 392);
  v99[1] = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  wrapper_kernel<Espresso::cf_for_kernel_cpu,Espresso::cf_for_params_t>::convert_layer_data_to_fp32(v99, v101, *a4, a4[1], 1, v8);
  if (v9)
  {
    v12 = (unint64_t *)&v9->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v14 = *(std::__shared_weak_count **)(a1 + 400);
  v98[0] = *(_QWORD *)(a1 + 392);
  v98[1] = v14;
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  wrapper_kernel<Espresso::cf_for_kernel_cpu,Espresso::cf_for_params_t>::convert_layer_data_to_fp32(v98, (char **)v100, *a3, a3[1], 0, 0);
  if (v14)
  {
    v17 = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v95 = a1;
  v19 = *a4;
  if (a4[1] != *a4)
  {
    v20 = 0;
    do
    {
      if (!v8
        && (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v19 + 16 * v20) + 32))(*(_QWORD *)(v19 + 16 * v20))
         || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(*a4 + 16 * v20) + 32))(*(_QWORD *)(*a4 + 16 * v20)) == 1))
      {
        __B = *(float *)(*(_QWORD *)(*a4 + 16 * v20) + 112);
        v21 = &v101[0][16 * v20];
        v104 = (void ***)v22;
        v23 = (std::__shared_weak_count *)*((_QWORD *)v21 + 1);
        v105 = v23;
        if (v23)
        {
          v24 = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
        }
        v26 = *((_QWORD *)v22 + 20);
        v27 = (std::__shared_weak_count *)*((_QWORD *)v22 + 21);
        v102 = (void *)v26;
        v103 = v27;
        if (v27)
        {
          v28 = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldxr(v28);
          while (__stxr(v29 + 1, v28));
        }
        v30 = 0;
        v31 = *(float **)(v26 + 24);
        v32 = *(int *)(v26 + 8);
        v33 = v26 + 12;
        do
        {
          v32 *= *(int *)(v33 + v30);
          v30 += 4;
        }
        while (v30 != 12);
        vDSP_vsmul(v31, 1, &__B, v31, 1, v32);
        if (v27)
        {
          v34 = (unint64_t *)&v27->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        v36 = v105;
        if (v105)
        {
          v37 = (unint64_t *)&v105->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
      }
      ++v20;
      v19 = *a4;
    }
    while (v20 < (a4[1] - *a4) >> 4);
  }
  v39 = v95;
  Espresso::cf_for_kernel_cpu::__launch(v95, a2, (char **)v100, (uint64_t)v101);
  v41 = *(_QWORD *)(v95 + 408);
  if (v41)
  {
    v42 = *(std::__shared_weak_count **)(v95 + 416);
    v96 = v42;
    if (v42)
    {
      v43 = (unint64_t *)&v42->__shared_owners_;
      do
        v44 = __ldxr(v43);
      while (__stxr(v44 + 1, v43));
    }
    v45 = v100[0];
    if (*v100[0]
    {
      v47 = v46;
      v48 = (std::__shared_weak_count *)v45[1];
      v104 = (void ***)v46;
      v105 = v48;
      if (v48)
      {
        v49 = (unint64_t *)&v48->__shared_owners_;
        do
          v50 = __ldxr(v49);
        while (__stxr(v50 + 1, v49));
      }
    }
    else
    {
      v48 = 0;
      v47 = 0;
      v104 = 0;
      v105 = 0;
    }
    LODWORD(v51) = *(_DWORD *)(v41 + 8);
    v94 = v48;
    if ((_DWORD)v51 == 1)
    {
      v52 = 0;
      v53 = (int *)v47[20];
      v54 = (float *)*((_QWORD *)v53 + 3);
      v55 = v53[2];
      v56 = v53 + 3;
      do
        v55 *= v56[v52++];
      while (v52 != 3);
      vDSP_vsmul(v54, 1, *(const float **)(v41 + 16), v54, 1, v55);
    }
    else
    {
      v57 = *((_DWORD *)v47 + 4);
      if ((_DWORD)v51 != v57)
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v51, v57);
      v58 = *((_DWORD *)v47 + 5);
      if (v58)
      {
        v59 = 0;
        v60 = 0;
        v61 = *((int *)v47 + 2) * (uint64_t)*((int *)v47 + 3);
        v62 = 4 * (int)v51 * v61;
        do
        {
          if ((_DWORD)v51)
          {
            v63 = 0;
            v64 = 0;
            v65 = v59;
            do
            {
              vDSP_vsmul((const float *)(*((_QWORD *)v47[20] + 3) + v65), 1, (const float *)(*(_QWORD *)(v41 + 16) + v63), (float *)(*((_QWORD *)v47[20] + 3) + v65), 1, v61);
              ++v64;
              v51 = *((int *)v47 + 4);
              v63 += 4;
              v65 += 4 * v61;
            }
            while (v64 < v51);
            v58 = *((_DWORD *)v47 + 5);
          }
          ++v60;
          v59 += v62;
        }
        while (v60 < v58);
      }
    }
    v39 = v95;
    if (v94)
    {
      v66 = (unint64_t *)&v94->__shared_owners_;
      do
        v67 = __ldaxr(v66);
      while (__stlxr(v67 - 1, v66));
      if (!v67)
      {
        ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
        std::__shared_weak_count::__release_weak(v94);
      }
    }
    if (v96)
    {
      v68 = (unint64_t *)&v96->__shared_owners_;
      do
        v69 = __ldaxr(v68);
      while (__stlxr(v69 - 1, v68));
      if (!v69)
      {
        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
        std::__shared_weak_count::__release_weak(v96);
      }
    }
  }
  v70 = *(std::__shared_weak_count **)(v39 + 400);
  if (v70)
  {
    v71 = (unint64_t *)&v70->__shared_owners_;
    do
      v72 = __ldxr(v71);
    while (__stxr(v72 + 1, v71));
  }
  v73 = *a3;
  if (a3[1] != *a3)
  {
    v74 = 0;
    do
    {
      v75 = *(const void **)(v73 + 16 * v74);
      if (v75
      {
        v77 = (uint64_t)v76;
        v104 = (void ***)v76;
        v78 = *(std::__shared_weak_count **)(v73 + 16 * v74 + 8);
        v105 = v78;
        if (v78)
        {
          v79 = (unint64_t *)&v78->__shared_owners_;
          do
            v80 = __ldxr(v79);
          while (__stxr(v80 + 1, v79));
        }
      }
      else
      {
        v77 = 0;
        v104 = 0;
        v105 = 0;
      }
      v81 = v100[0];
      v82 = v100[0][2 * v74];
      if (v82
      {
        v102 = v83;
        v84 = (std::__shared_weak_count *)v81[2 * v74 + 1];
        v103 = v84;
        if (v84)
        {
          v85 = (unint64_t *)&v84->__shared_owners_;
          do
            v86 = __ldxr(v85);
          while (__stxr(v86 + 1, v85));
        }
      }
      else
      {
        v84 = 0;
        v83 = 0;
        v102 = 0;
        v103 = 0;
      }
      v40.n128_u64[0] = Espresso::QuantSimEngine::blob_container::copy_from_fp32(v77, (uint64_t)v83 + 160, 1.0);
      if (v84)
      {
        v87 = (unint64_t *)&v84->__shared_owners_;
        do
          v88 = __ldaxr(v87);
        while (__stlxr(v88 - 1, v87));
        if (!v88)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v84->__on_zero_shared)(v84, v40);
          std::__shared_weak_count::__release_weak(v84);
        }
      }
      v89 = v105;
      if (v105)
      {
        v90 = (unint64_t *)&v105->__shared_owners_;
        do
          v91 = __ldaxr(v90);
        while (__stlxr(v91 - 1, v90));
        if (!v91)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v89->__on_zero_shared)(v89, v40);
          std::__shared_weak_count::__release_weak(v89);
        }
      }
      ++v74;
      v73 = *a3;
    }
    while (v74 < (a3[1] - *a3) >> 4);
  }
  if (v70)
  {
    v92 = (unint64_t *)&v70->__shared_owners_;
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v70->__on_zero_shared)(v70, v40);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  v104 = v100;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v104);
  v100[0] = (void **)v101;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v100);
}

void sub_19160B54C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  *(_QWORD *)(v25 - 104) = &a22;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 104));
  a22 = (void **)&a25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a22);
  _Unwind_Resume(a1);
}

void *wrapper_kernel<Espresso::cf_for_kernel_cpu,Espresso::cf_for_params_t>::__set_weight_raw_blob(void *result, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  void *v7;
  int v8;
  uint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::runtime_error *exception;
  unint64_t v15;
  std::runtime_error *v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  std::string v39;
  _QWORD v40[2];
  unsigned __int8 v41;
  _QWORD v42[2];
  unsigned __int8 v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;

  v7 = result;
  v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10)
      return result;
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    v10 = (uint64_t)v7 + 408;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v10, (__int128 *)&v52);
    size = (std::__shared_weak_count *)v52.__r_.__value_.__l.__size_;
    if (v52.__r_.__value_.__l.__size_)
    {
      v12 = (unint64_t *)(v52.__r_.__value_.__l.__size_ + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    if (a5 != 4 * *(int *)(*(_QWORD *)v10 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      v15 = a5;
      v16 = exception;
      std::to_string(&v45, v15);
      v17 = std::string::insert(&v45, 0, "Unexpected size s=");
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      v19 = std::string::append(&v46, "/blob=");
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, 4 * *(int *)(*(_QWORD *)v10 + 8));
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v21 = &v44;
      else
        v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      else
        v22 = v44.__r_.__value_.__l.__size_;
      v23 = std::string::append(&v47, (const std::string::value_type *)v21, v22);
      v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, " @ ");
      if ((v43 & 0x80u) == 0)
        v25 = (const std::string::value_type *)v42;
      else
        v25 = (const std::string::value_type *)v42[0];
      if ((v43 & 0x80u) == 0)
        v26 = v43;
      else
        v26 = v42[1];
      v27 = std::string::append(&v48, v25, v26);
      v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      v29 = std::string::append(&v49, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v40, ":");
      if ((v41 & 0x80u) == 0)
        v31 = (const std::string::value_type *)v40;
      else
        v31 = (const std::string::value_type *)v40[0];
      if ((v41 & 0x80u) == 0)
        v32 = v41;
      else
        v32 = v40[1];
      v33 = std::string::append(&v50, v31, v32);
      v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, 197);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = &v39;
      else
        v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      else
        v36 = v39.__r_.__value_.__l.__size_;
      v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
      v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v16, &v52);
      __cxa_throw(v16, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    return memcpy(*(void **)(*(_QWORD *)v10 + 16), a4, a5);
  }
  return result;
}

void sub_19160B904(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  void *v59;
  int v60;
  uint64_t v61;

  if (*(char *)(v61 - 57) < 0)
    operator delete(*(void **)(v61 - 80));
  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v61 - 89) < 0)
    operator delete(*(void **)(v61 - 112));
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v61 - 121) < 0)
    operator delete(*(void **)(v61 - 144));
  if (*(char *)(v61 - 153) < 0)
    operator delete(*(void **)(v61 - 176));
  if (a27 < 0)
    operator delete(a22);
  if (a59 < 0)
    operator delete(a54);
  if (a33 < 0)
    operator delete(a28);
  if (a52 < 0)
    operator delete(a47);
  if (a45 < 0)
    operator delete(a40);
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0)
LABEL_28:
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

BOOL wrapper_kernel<Espresso::cf_for_kernel_cpu,Espresso::cf_for_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2;

  v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10)
      return 0;
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

const char *Espresso::generic_cf_for_kernel::kernel_type_str(Espresso::generic_cf_for_kernel *this)
{
  return "cf_for";
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::cf_for_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

void `non-virtual thunk to'wrapper_kernel<Espresso::cf_for_kernel_cpu,Espresso::cf_for_params_t>::~wrapper_kernel(_QWORD *a1)
{
  Espresso::generic_cf_for_kernel *v2;
  uint64_t v3;

  v2 = (Espresso::generic_cf_for_kernel *)(a1 - 36);
  *(a1 - 36) = &off_1E2D4F8A0;
  *a1 = &unk_1E2D4F9F8;
  v3 = (uint64_t)(a1 + 13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 15));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v3);
  *(_QWORD *)v2 = &off_1E2D81848;
  *a1 = &unk_1E2D819A0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 9));
  Espresso::generic_cf_for_kernel::~generic_cf_for_kernel(v2);
}

{
  Espresso::generic_cf_for_kernel *v2;
  uint64_t v3;

  v2 = (Espresso::generic_cf_for_kernel *)(a1 - 36);
  *(a1 - 36) = &off_1E2D4F8A0;
  *a1 = &unk_1E2D4F9F8;
  v3 = (uint64_t)(a1 + 13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 15));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v3);
  *(_QWORD *)v2 = &off_1E2D81848;
  *a1 = &unk_1E2D819A0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 9));
  Espresso::generic_cf_for_kernel::~generic_cf_for_kernel(v2);
  JUMPOUT(0x19401CD90);
}

void wrapper_kernel<Espresso::cf_for_kernel_cpu,Espresso::cf_for_params_t>::convert_layer_data_to_fp32(_QWORD *a1, char **a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v9;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  const void *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  __int128 v43;
  int64x2_t v44;
  char *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  __int128 v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  int64x2_t v59;
  char *v60;
  _QWORD *v61;
  void *__p;
  void *v63;
  __int128 v64;
  const void *v65;
  std::__shared_weak_count *v66;

  if (a3 != a4)
  {
    v9 = a3;
    v12 = a2 + 2;
    while (1)
    {
      v14 = *(const void **)v9;
      v13 = *(std::__shared_weak_count **)(v9 + 8);
      v65 = *(const void **)v9;
      v66 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
      }
      v17 = operator new(0x118uLL);
      v17[1] = 0;
      v17[2] = 0;
      *v17 = &off_1E2DC1868;
      Espresso::blob_cpu::blob_cpu((uint64_t)(v17 + 3), a1);
      *(_QWORD *)&v64 = v17 + 3;
      *((_QWORD *)&v64 + 1) = v17;
      Espresso::abstract_blob_container::shape((char *)&v58, (uint64_t)v14);
      v56 = 0;
      v57 = 0;
      (*(void (**)(_QWORD *, uint64_t *, uint64_t *))(v17[3] + 16))(v17 + 3, &v58, &v56);
      v18 = v57;
      if (v57)
      {
        v19 = (unint64_t *)&v57->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if (__p)
      {
        v63 = __p;
        operator delete(__p);
      }
      if (v65)
      {
        if (v21)
          break;
      }
      v21 = 0;
      v55 = 0;
      if (a5)
        goto LABEL_21;
LABEL_28:
      v27 = v64;
      if (*((_QWORD *)&v64 + 1))
      {
        v28 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v31 = a2[1];
      v30 = (unint64_t)a2[2];
      if ((unint64_t)v31 >= v30)
      {
        v54 = v27;
        v33 = (v31 - *a2) >> 4;
        if ((unint64_t)(v33 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v34 = v30 - (_QWORD)*a2;
        v35 = v34 >> 3;
        if (v34 >> 3 <= (unint64_t)(v33 + 1))
          v35 = v33 + 1;
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0)
          v36 = 0xFFFFFFFFFFFFFFFLL;
        else
          v36 = v35;
        v61 = v12;
        v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v36);
        v39 = &v37[16 * v33];
        *(_OWORD *)v39 = v54;
        v41 = *a2;
        v40 = a2[1];
        if (v40 == *a2)
        {
          v44 = vdupq_n_s64((unint64_t)v40);
          v42 = &v37[16 * v33];
        }
        else
        {
          v42 = &v37[16 * v33];
          do
          {
            v43 = *((_OWORD *)v40 - 1);
            v40 -= 16;
            *((_OWORD *)v42 - 1) = v43;
            v42 -= 16;
            *(_QWORD *)v40 = 0;
            *((_QWORD *)v40 + 1) = 0;
          }
          while (v40 != v41);
          v44 = *(int64x2_t *)a2;
        }
        v32 = v39 + 16;
        *a2 = v42;
        a2[1] = v39 + 16;
        v59 = v44;
        v45 = a2[2];
        a2[2] = &v37[16 * v38];
        v60 = v45;
        v58 = v44.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v58);
      }
      else
      {
        *(_OWORD *)v31 = v27;
        v32 = v31 + 16;
      }
      a2[1] = v32;
      if (v55)
      {
        v46 = (unint64_t *)&v55->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      v48 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
      if (*((_QWORD *)&v64 + 1))
      {
        v49 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      v51 = v66;
      if (v66)
      {
        v52 = (unint64_t *)&v66->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v9 += 16;
      if (v9 == a4)
        return;
    }
    v55 = v66;
    if (v66)
    {
      v22 = (unint64_t *)&v66->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    if (!a5)
      goto LABEL_28;
LABEL_21:
    if (a6)
    {
      v58 = 0;
      v59.i64[0] = 0;
      (*(void (**)(void *, uint64_t *, uint64_t))(*(_QWORD *)v21 + 40))(v21, &v58, v64 + 160);
      v24 = (std::__shared_weak_count *)v59.i64[0];
      if (v59.i64[0])
      {
        v25 = (unint64_t *)(v59.i64[0] + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v21, v64 + 160, 1.0);
    }
    goto LABEL_28;
  }
}

void sub_19160BF68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::cf_for_kernel_cpu,Espresso::cf_for_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB45F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::cf_for_kernel_cpu,Espresso::cf_for_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB45F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::cf_for_kernel_cpu,Espresso::cf_for_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_38@<Q0>(uint64_t *a1@<X1>, _DWORD *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  __n128 result;

  v6 = operator new(0x180uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DB48D0;
  LODWORD(a2) = *a2;
  Espresso::generic_cf_loop_kernel::generic_cf_loop_kernel(v6 + 3, a1);
  *((_DWORD *)v6 + 76) = (_DWORD)a2;
  v6[3] = &off_1E2D50B00;
  v6[39] = &unk_1E2D50C58;
  *((_OWORD *)v6 + 22) = 0u;
  *((_OWORD *)v6 + 23) = 0u;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v6 + 44, *a1, a1[1]);
  result.n128_u64[0] = (unint64_t)(v6 + 3);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19160C0CC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::cf_loop_kernel_cpu,Espresso::cf_loop_params_t>::~wrapper_kernel(Espresso::generic_cf_loop_kernel *a1)
{
  *(_QWORD *)a1 = &off_1E2D50B00;
  *((_QWORD *)a1 + 36) = &unk_1E2D50C58;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 344);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 328);
  Espresso::generic_cf_loop_kernel::~generic_cf_loop_kernel(a1);
}

{
  *(_QWORD *)a1 = &off_1E2D50B00;
  *((_QWORD *)a1 + 36) = &unk_1E2D50C58;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 344);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 328);
  Espresso::generic_cf_loop_kernel::~generic_cf_loop_kernel(a1);
  JUMPOUT(0x19401CD90);
}

void wrapper_kernel<Espresso::cf_loop_kernel_cpu,Espresso::cf_loop_params_t>::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  _BOOL4 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  void *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  float *v32;
  vDSP_Length v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  __n128 v40;
  uint64_t v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  void **v46;
  void **v47;
  void **v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  int *v54;
  float *v55;
  vDSP_Length v56;
  int *v57;
  int v58;
  int v59;
  uint64_t v60;
  unint64_t v61;
  vDSP_Length v62;
  vDSP_Length v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  const void *v76;
  void **v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  void **v82;
  const void *v83;
  void *v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  uint64_t v96;
  std::__shared_weak_count *v97;
  float __B;
  _QWORD v99[2];
  _QWORD v100[2];
  void **v101[3];
  char *v102[3];
  void *v103;
  std::__shared_weak_count *v104;
  void ***v105;
  std::__shared_weak_count *v106;

  memset(v102, 0, sizeof(v102));
  memset(v101, 0, sizeof(v101));
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)*a3 + 32))(*(_QWORD *)*a3))
    v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)*a3 + 32))(*(_QWORD *)*a3) == 1;
  else
    v8 = 1;
  v9 = *(std::__shared_weak_count **)(a1 + 336);
  v100[0] = *(_QWORD *)(a1 + 328);
  v100[1] = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  wrapper_kernel<Espresso::cf_loop_kernel_cpu,Espresso::cf_loop_params_t>::convert_layer_data_to_fp32(v100, v102, *a4, a4[1], 1, v8);
  if (v9)
  {
    v12 = (unint64_t *)&v9->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v14 = *(std::__shared_weak_count **)(a1 + 336);
  v99[0] = *(_QWORD *)(a1 + 328);
  v99[1] = v14;
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  wrapper_kernel<Espresso::cf_loop_kernel_cpu,Espresso::cf_loop_params_t>::convert_layer_data_to_fp32(v99, (char **)v101, *a3, a3[1], 0, 0);
  v96 = a1;
  if (v14)
  {
    v18 = (unint64_t *)&v14->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v20 = *a4;
  if (a4[1] != *a4)
  {
    v21 = 0;
    do
    {
      if (!v8)
      {
        if (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v20 + 16 * v21) + 32))(*(_QWORD *)(v20 + 16 * v21))
          || (v17 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a4 + 16 * v21) + 32))(*(_QWORD *)(*a4 + 16 * v21)),
              (_DWORD)v17 == 1))
        {
          __B = *(float *)(*(_QWORD *)(*a4 + 16 * v21) + 112);
          v22 = &v102[0][16 * v21];
          v105 = (void ***)v23;
          v24 = (std::__shared_weak_count *)*((_QWORD *)v22 + 1);
          v106 = v24;
          if (v24)
          {
            v25 = (unint64_t *)&v24->__shared_owners_;
            do
              v26 = __ldxr(v25);
            while (__stxr(v26 + 1, v25));
          }
          v27 = *((_QWORD *)v23 + 20);
          v28 = (std::__shared_weak_count *)*((_QWORD *)v23 + 21);
          v103 = (void *)v27;
          v104 = v28;
          if (v28)
          {
            v29 = (unint64_t *)&v28->__shared_owners_;
            do
              v30 = __ldxr(v29);
            while (__stxr(v30 + 1, v29));
          }
          v31 = 0;
          v32 = *(float **)(v27 + 24);
          v33 = *(int *)(v27 + 8);
          v34 = v27 + 12;
          do
          {
            v33 *= *(int *)(v34 + v31);
            v31 += 4;
          }
          while (v31 != 12);
          vDSP_vsmul(v32, 1, &__B, v32, 1, v33);
          if (v28)
          {
            v35 = (unint64_t *)&v28->__shared_owners_;
            do
              v36 = __ldaxr(v35);
            while (__stlxr(v36 - 1, v35));
            if (!v36)
            {
              ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
              std::__shared_weak_count::__release_weak(v28);
            }
          }
          v37 = v106;
          if (v106)
          {
            v38 = (unint64_t *)&v106->__shared_owners_;
            do
              v39 = __ldaxr(v38);
            while (__stlxr(v39 - 1, v38));
            if (!v39)
            {
              ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
              std::__shared_weak_count::__release_weak(v37);
            }
          }
        }
      }
      ++v21;
      v20 = *a4;
    }
    while (v21 < (a4[1] - *a4) >> 4);
  }
  Espresso::cf_loop_kernel_cpu::__launch(v17, a2);
  v41 = v96;
  v42 = *(_QWORD *)(v96 + 344);
  if (v42)
  {
    v43 = *(std::__shared_weak_count **)(v96 + 352);
    v97 = v43;
    if (v43)
    {
      v44 = (unint64_t *)&v43->__shared_owners_;
      do
        v45 = __ldxr(v44);
      while (__stxr(v45 + 1, v44));
    }
    v46 = v101[0];
    if (*v101[0]
    {
      v48 = v47;
      v49 = (std::__shared_weak_count *)v46[1];
      v105 = (void ***)v47;
      v106 = v49;
      if (v49)
      {
        v50 = (unint64_t *)&v49->__shared_owners_;
        do
          v51 = __ldxr(v50);
        while (__stxr(v51 + 1, v50));
      }
    }
    else
    {
      v49 = 0;
      v48 = 0;
      v105 = 0;
      v106 = 0;
    }
    LODWORD(v52) = *(_DWORD *)(v42 + 8);
    v95 = v49;
    if ((_DWORD)v52 == 1)
    {
      v53 = 0;
      v54 = (int *)v48[20];
      v55 = (float *)*((_QWORD *)v54 + 3);
      v56 = v54[2];
      v57 = v54 + 3;
      do
        v56 *= v57[v53++];
      while (v53 != 3);
      vDSP_vsmul(v55, 1, *(const float **)(v42 + 16), v55, 1, v56);
    }
    else
    {
      v58 = *((_DWORD *)v48 + 4);
      if ((_DWORD)v52 != v58)
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v52, v58);
      v59 = *((_DWORD *)v48 + 5);
      if (v59)
      {
        v60 = 0;
        v61 = 0;
        v62 = *((int *)v48 + 2) * (uint64_t)*((int *)v48 + 3);
        v63 = 4 * (int)v52 * v62;
        do
        {
          if ((_DWORD)v52)
          {
            v64 = 0;
            v65 = 0;
            v66 = v60;
            do
            {
              vDSP_vsmul((const float *)(*((_QWORD *)v48[20] + 3) + v66), 1, (const float *)(*(_QWORD *)(v42 + 16) + v64), (float *)(*((_QWORD *)v48[20] + 3) + v66), 1, v62);
              ++v65;
              v52 = *((int *)v48 + 4);
              v64 += 4;
              v66 += 4 * v62;
            }
            while (v65 < v52);
            v59 = *((_DWORD *)v48 + 5);
          }
          ++v61;
          v60 += v63;
        }
        while (v61 < v59);
      }
    }
    v41 = v96;
    if (v95)
    {
      v67 = (unint64_t *)&v95->__shared_owners_;
      do
        v68 = __ldaxr(v67);
      while (__stlxr(v68 - 1, v67));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
        std::__shared_weak_count::__release_weak(v95);
      }
    }
    if (v97)
    {
      v69 = (unint64_t *)&v97->__shared_owners_;
      do
        v70 = __ldaxr(v69);
      while (__stlxr(v70 - 1, v69));
      if (!v70)
      {
        ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
        std::__shared_weak_count::__release_weak(v97);
      }
    }
  }
  v71 = *(std::__shared_weak_count **)(v41 + 336);
  if (v71)
  {
    v72 = (unint64_t *)&v71->__shared_owners_;
    do
      v73 = __ldxr(v72);
    while (__stxr(v73 + 1, v72));
  }
  v74 = *a3;
  if (a3[1] != *a3)
  {
    v75 = 0;
    do
    {
      v76 = *(const void **)(v74 + 16 * v75);
      if (v76
      {
        v78 = (uint64_t)v77;
        v105 = (void ***)v77;
        v79 = *(std::__shared_weak_count **)(v74 + 16 * v75 + 8);
        v106 = v79;
        if (v79)
        {
          v80 = (unint64_t *)&v79->__shared_owners_;
          do
            v81 = __ldxr(v80);
          while (__stxr(v81 + 1, v80));
        }
      }
      else
      {
        v78 = 0;
        v105 = 0;
        v106 = 0;
      }
      v82 = v101[0];
      v83 = v101[0][2 * v75];
      if (v83
      {
        v103 = v84;
        v85 = (std::__shared_weak_count *)v82[2 * v75 + 1];
        v104 = v85;
        if (v85)
        {
          v86 = (unint64_t *)&v85->__shared_owners_;
          do
            v87 = __ldxr(v86);
          while (__stxr(v87 + 1, v86));
        }
      }
      else
      {
        v85 = 0;
        v84 = 0;
        v103 = 0;
        v104 = 0;
      }
      v40.n128_u64[0] = Espresso::QuantSimEngine::blob_container::copy_from_fp32(v78, (uint64_t)v84 + 160, 1.0);
      if (v85)
      {
        v88 = (unint64_t *)&v85->__shared_owners_;
        do
          v89 = __ldaxr(v88);
        while (__stlxr(v89 - 1, v88));
        if (!v89)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v85->__on_zero_shared)(v85, v40);
          std::__shared_weak_count::__release_weak(v85);
        }
      }
      v90 = v106;
      if (v106)
      {
        v91 = (unint64_t *)&v106->__shared_owners_;
        do
          v92 = __ldaxr(v91);
        while (__stlxr(v92 - 1, v91));
        if (!v92)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v90->__on_zero_shared)(v90, v40);
          std::__shared_weak_count::__release_weak(v90);
        }
      }
      ++v75;
      v74 = *a3;
    }
    while (v75 < (a3[1] - *a3) >> 4);
  }
  if (v71)
  {
    v93 = (unint64_t *)&v71->__shared_owners_;
    do
      v94 = __ldaxr(v93);
    while (__stlxr(v94 - 1, v93));
    if (!v94)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v71->__on_zero_shared)(v71, v40);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  v105 = v101;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v105);
  v101[0] = (void **)v102;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v101);
}

void sub_19160C84C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  *(_QWORD *)(v25 - 104) = &a22;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 104));
  a22 = (void **)&a25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a22);
  _Unwind_Resume(a1);
}

void Espresso::generic_cf_loop_kernel::top_shapes_for_bottom_shapes(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void *wrapper_kernel<Espresso::cf_loop_kernel_cpu,Espresso::cf_loop_params_t>::__set_weight_raw_blob(void *result, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  void *v7;
  int v8;
  uint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::runtime_error *exception;
  unint64_t v15;
  std::runtime_error *v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  std::string v39;
  _QWORD v40[2];
  unsigned __int8 v41;
  _QWORD v42[2];
  unsigned __int8 v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;

  v7 = result;
  v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10)
      return result;
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    v10 = (uint64_t)v7 + 344;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v10, (__int128 *)&v52);
    size = (std::__shared_weak_count *)v52.__r_.__value_.__l.__size_;
    if (v52.__r_.__value_.__l.__size_)
    {
      v12 = (unint64_t *)(v52.__r_.__value_.__l.__size_ + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    if (a5 != 4 * *(int *)(*(_QWORD *)v10 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      v15 = a5;
      v16 = exception;
      std::to_string(&v45, v15);
      v17 = std::string::insert(&v45, 0, "Unexpected size s=");
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      v19 = std::string::append(&v46, "/blob=");
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, 4 * *(int *)(*(_QWORD *)v10 + 8));
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v21 = &v44;
      else
        v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      else
        v22 = v44.__r_.__value_.__l.__size_;
      v23 = std::string::append(&v47, (const std::string::value_type *)v21, v22);
      v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, " @ ");
      if ((v43 & 0x80u) == 0)
        v25 = (const std::string::value_type *)v42;
      else
        v25 = (const std::string::value_type *)v42[0];
      if ((v43 & 0x80u) == 0)
        v26 = v43;
      else
        v26 = v42[1];
      v27 = std::string::append(&v48, v25, v26);
      v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      v29 = std::string::append(&v49, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v40, ":");
      if ((v41 & 0x80u) == 0)
        v31 = (const std::string::value_type *)v40;
      else
        v31 = (const std::string::value_type *)v40[0];
      if ((v41 & 0x80u) == 0)
        v32 = v41;
      else
        v32 = v40[1];
      v33 = std::string::append(&v50, v31, v32);
      v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, 197);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = &v39;
      else
        v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      else
        v36 = v39.__r_.__value_.__l.__size_;
      v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
      v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v16, &v52);
      __cxa_throw(v16, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    return memcpy(*(void **)(*(_QWORD *)v10 + 16), a4, a5);
  }
  return result;
}

void sub_19160CC10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  void *v59;
  int v60;
  uint64_t v61;

  if (*(char *)(v61 - 57) < 0)
    operator delete(*(void **)(v61 - 80));
  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v61 - 89) < 0)
    operator delete(*(void **)(v61 - 112));
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v61 - 121) < 0)
    operator delete(*(void **)(v61 - 144));
  if (*(char *)(v61 - 153) < 0)
    operator delete(*(void **)(v61 - 176));
  if (a27 < 0)
    operator delete(a22);
  if (a59 < 0)
    operator delete(a54);
  if (a33 < 0)
    operator delete(a28);
  if (a52 < 0)
    operator delete(a47);
  if (a45 < 0)
    operator delete(a40);
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0)
LABEL_28:
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

BOOL wrapper_kernel<Espresso::cf_loop_kernel_cpu,Espresso::cf_loop_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2;

  v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10)
      return 0;
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

const char *Espresso::generic_cf_loop_kernel::kernel_type_str(Espresso::generic_cf_loop_kernel *this)
{
  return "cf_loop";
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::cf_loop_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

void `non-virtual thunk to'wrapper_kernel<Espresso::cf_loop_kernel_cpu,Espresso::cf_loop_params_t>::~wrapper_kernel(_QWORD *a1)
{
  Espresso::generic_cf_loop_kernel *v2;

  v2 = (Espresso::generic_cf_loop_kernel *)(a1 - 36);
  *(a1 - 36) = &off_1E2D50B00;
  *a1 = &unk_1E2D50C58;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 7));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 5));
  Espresso::generic_cf_loop_kernel::~generic_cf_loop_kernel(v2);
}

{
  Espresso::generic_cf_loop_kernel *v2;

  v2 = (Espresso::generic_cf_loop_kernel *)(a1 - 36);
  *(a1 - 36) = &off_1E2D50B00;
  *a1 = &unk_1E2D50C58;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 7));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 5));
  Espresso::generic_cf_loop_kernel::~generic_cf_loop_kernel(v2);
  JUMPOUT(0x19401CD90);
}

void wrapper_kernel<Espresso::cf_loop_kernel_cpu,Espresso::cf_loop_params_t>::convert_layer_data_to_fp32(_QWORD *a1, char **a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v9;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  const void *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  __int128 v43;
  int64x2_t v44;
  char *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  __int128 v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  int64x2_t v59;
  char *v60;
  _QWORD *v61;
  void *__p;
  void *v63;
  __int128 v64;
  const void *v65;
  std::__shared_weak_count *v66;

  if (a3 != a4)
  {
    v9 = a3;
    v12 = a2 + 2;
    while (1)
    {
      v14 = *(const void **)v9;
      v13 = *(std::__shared_weak_count **)(v9 + 8);
      v65 = *(const void **)v9;
      v66 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
      }
      v17 = operator new(0x118uLL);
      v17[1] = 0;
      v17[2] = 0;
      *v17 = &off_1E2DC1868;
      Espresso::blob_cpu::blob_cpu((uint64_t)(v17 + 3), a1);
      *(_QWORD *)&v64 = v17 + 3;
      *((_QWORD *)&v64 + 1) = v17;
      Espresso::abstract_blob_container::shape((char *)&v58, (uint64_t)v14);
      v56 = 0;
      v57 = 0;
      (*(void (**)(_QWORD *, uint64_t *, uint64_t *))(v17[3] + 16))(v17 + 3, &v58, &v56);
      v18 = v57;
      if (v57)
      {
        v19 = (unint64_t *)&v57->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if (__p)
      {
        v63 = __p;
        operator delete(__p);
      }
      if (v65)
      {
        if (v21)
          break;
      }
      v21 = 0;
      v55 = 0;
      if (a5)
        goto LABEL_21;
LABEL_28:
      v27 = v64;
      if (*((_QWORD *)&v64 + 1))
      {
        v28 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v31 = a2[1];
      v30 = (unint64_t)a2[2];
      if ((unint64_t)v31 >= v30)
      {
        v54 = v27;
        v33 = (v31 - *a2) >> 4;
        if ((unint64_t)(v33 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v34 = v30 - (_QWORD)*a2;
        v35 = v34 >> 3;
        if (v34 >> 3 <= (unint64_t)(v33 + 1))
          v35 = v33 + 1;
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0)
          v36 = 0xFFFFFFFFFFFFFFFLL;
        else
          v36 = v35;
        v61 = v12;
        v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v36);
        v39 = &v37[16 * v33];
        *(_OWORD *)v39 = v54;
        v41 = *a2;
        v40 = a2[1];
        if (v40 == *a2)
        {
          v44 = vdupq_n_s64((unint64_t)v40);
          v42 = &v37[16 * v33];
        }
        else
        {
          v42 = &v37[16 * v33];
          do
          {
            v43 = *((_OWORD *)v40 - 1);
            v40 -= 16;
            *((_OWORD *)v42 - 1) = v43;
            v42 -= 16;
            *(_QWORD *)v40 = 0;
            *((_QWORD *)v40 + 1) = 0;
          }
          while (v40 != v41);
          v44 = *(int64x2_t *)a2;
        }
        v32 = v39 + 16;
        *a2 = v42;
        a2[1] = v39 + 16;
        v59 = v44;
        v45 = a2[2];
        a2[2] = &v37[16 * v38];
        v60 = v45;
        v58 = v44.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v58);
      }
      else
      {
        *(_OWORD *)v31 = v27;
        v32 = v31 + 16;
      }
      a2[1] = v32;
      if (v55)
      {
        v46 = (unint64_t *)&v55->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      v48 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
      if (*((_QWORD *)&v64 + 1))
      {
        v49 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      v51 = v66;
      if (v66)
      {
        v52 = (unint64_t *)&v66->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v9 += 16;
      if (v9 == a4)
        return;
    }
    v55 = v66;
    if (v66)
    {
      v22 = (unint64_t *)&v66->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    if (!a5)
      goto LABEL_28;
LABEL_21:
    if (a6)
    {
      v58 = 0;
      v59.i64[0] = 0;
      (*(void (**)(void *, uint64_t *, uint64_t))(*(_QWORD *)v21 + 40))(v21, &v58, v64 + 160);
      v24 = (std::__shared_weak_count *)v59.i64[0];
      if (v59.i64[0])
      {
        v25 = (unint64_t *)(v59.i64[0] + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v21, v64 + 160, 1.0);
    }
    goto LABEL_28;
  }
}

void sub_19160D224(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::cf_loop_kernel_cpu,Espresso::cf_loop_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB48D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::cf_loop_kernel_cpu,Espresso::cf_loop_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB48D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::cf_loop_kernel_cpu,Espresso::cf_loop_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_37@<Q0>(uint64_t *a1@<X1>, __n128 *a2@<X8>)
{
  _QWORD *v4;
  __n128 result;

  v4 = operator new(0x180uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_1E2DB44E0;
  Espresso::generic_cf_if_kernel::generic_cf_if_kernel(v4 + 3, a1);
  v4[3] = &off_1E2D4F1C8;
  v4[39] = &unk_1E2D4F320;
  *((_OWORD *)v4 + 22) = 0u;
  *((_OWORD *)v4 + 23) = 0u;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v4 + 44, *a1, a1[1]);
  result.n128_u64[0] = (unint64_t)(v4 + 3);
  result.n128_u64[1] = (unint64_t)v4;
  *a2 = result;
  return result;
}

void sub_19160D374(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::cf_if_kernel_cpu,Espresso::cf_if_params_t>::~wrapper_kernel(Espresso::generic_cf_if_kernel *a1)
{
  *(_QWORD *)a1 = &off_1E2D4F1C8;
  *((_QWORD *)a1 + 36) = &unk_1E2D4F320;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 344);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 328);
  Espresso::generic_cf_if_kernel::~generic_cf_if_kernel(a1);
}

{
  *(_QWORD *)a1 = &off_1E2D4F1C8;
  *((_QWORD *)a1 + 36) = &unk_1E2D4F320;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 344);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 328);
  Espresso::generic_cf_if_kernel::~generic_cf_if_kernel(a1);
  JUMPOUT(0x19401CD90);
}

void wrapper_kernel<Espresso::cf_if_kernel_cpu,Espresso::cf_if_params_t>::__launch(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4)
{
  _BOOL4 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  void *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  float *v32;
  vDSP_Length v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  __n128 v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  void **v46;
  void **v47;
  void **v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  int *v54;
  float *v55;
  vDSP_Length v56;
  int *v57;
  int v58;
  int v59;
  uint64_t v60;
  unint64_t v61;
  vDSP_Length v62;
  vDSP_Length v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  const void *v76;
  void **v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  void **v82;
  const void *v83;
  void *v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  uint64_t v96;
  std::__shared_weak_count *v97;
  float __B;
  _QWORD v99[2];
  _QWORD v100[2];
  void **v101[3];
  char *v102[3];
  void *v103;
  std::__shared_weak_count *v104;
  void ***v105;
  std::__shared_weak_count *v106;

  memset(v102, 0, sizeof(v102));
  memset(v101, 0, sizeof(v101));
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)*a3 + 32))(*(_QWORD *)*a3))
    v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)*a3 + 32))(*(_QWORD *)*a3) == 1;
  else
    v8 = 1;
  v9 = *(std::__shared_weak_count **)(a1 + 336);
  v100[0] = *(_QWORD *)(a1 + 328);
  v100[1] = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  wrapper_kernel<Espresso::cf_if_kernel_cpu,Espresso::cf_if_params_t>::convert_layer_data_to_fp32(v100, v102, *a4, a4[1], 1, v8);
  if (v9)
  {
    v12 = (unint64_t *)&v9->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v14 = *(std::__shared_weak_count **)(a1 + 336);
  v99[0] = *(_QWORD *)(a1 + 328);
  v99[1] = v14;
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  wrapper_kernel<Espresso::cf_if_kernel_cpu,Espresso::cf_if_params_t>::convert_layer_data_to_fp32(v99, (char **)v101, *a3, a3[1], 0, 0);
  if (v14)
  {
    v18 = (unint64_t *)&v14->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v96 = a1;
  v20 = *a4;
  if (a4[1] != *a4)
  {
    v21 = 0;
    do
    {
      if (!v8
        && (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v20 + 16 * v21) + 32))(*(_QWORD *)(v20 + 16 * v21))
         || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(*a4 + 16 * v21) + 32))(*(_QWORD *)(*a4 + 16 * v21)) == 1))
      {
        __B = *(float *)(*(_QWORD *)(*a4 + 16 * v21) + 112);
        v22 = &v102[0][16 * v21];
        v105 = (void ***)v23;
        v24 = (std::__shared_weak_count *)*((_QWORD *)v22 + 1);
        v106 = v24;
        if (v24)
        {
          v25 = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldxr(v25);
          while (__stxr(v26 + 1, v25));
        }
        v27 = *((_QWORD *)v23 + 20);
        v28 = (std::__shared_weak_count *)*((_QWORD *)v23 + 21);
        v103 = (void *)v27;
        v104 = v28;
        if (v28)
        {
          v29 = (unint64_t *)&v28->__shared_owners_;
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
        }
        v31 = 0;
        v32 = *(float **)(v27 + 24);
        v33 = *(int *)(v27 + 8);
        v34 = v27 + 12;
        do
        {
          v33 *= *(int *)(v34 + v31);
          v31 += 4;
        }
        while (v31 != 12);
        vDSP_vsmul(v32, 1, &__B, v32, 1, v33);
        if (v28)
        {
          v35 = (unint64_t *)&v28->__shared_owners_;
          do
            v36 = __ldaxr(v35);
          while (__stlxr(v36 - 1, v35));
          if (!v36)
          {
            ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
            std::__shared_weak_count::__release_weak(v28);
          }
        }
        v37 = v106;
        if (v106)
        {
          v38 = (unint64_t *)&v106->__shared_owners_;
          do
            v39 = __ldaxr(v38);
          while (__stlxr(v39 - 1, v38));
          if (!v39)
          {
            ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
            std::__shared_weak_count::__release_weak(v37);
          }
        }
      }
      ++v21;
      v20 = *a4;
    }
    while (v21 < (a4[1] - *a4) >> 4);
  }
  v40 = v96;
  Espresso::cf_if_kernel_cpu::__launch(v96, a2, v17, (_QWORD **)v102);
  v42 = *(_QWORD *)(v96 + 344);
  if (v42)
  {
    v43 = *(std::__shared_weak_count **)(v96 + 352);
    v97 = v43;
    if (v43)
    {
      v44 = (unint64_t *)&v43->__shared_owners_;
      do
        v45 = __ldxr(v44);
      while (__stxr(v45 + 1, v44));
    }
    v46 = v101[0];
    if (*v101[0]
    {
      v48 = v47;
      v49 = (std::__shared_weak_count *)v46[1];
      v105 = (void ***)v47;
      v106 = v49;
      if (v49)
      {
        v50 = (unint64_t *)&v49->__shared_owners_;
        do
          v51 = __ldxr(v50);
        while (__stxr(v51 + 1, v50));
      }
    }
    else
    {
      v49 = 0;
      v48 = 0;
      v105 = 0;
      v106 = 0;
    }
    LODWORD(v52) = *(_DWORD *)(v42 + 8);
    v95 = v49;
    if ((_DWORD)v52 == 1)
    {
      v53 = 0;
      v54 = (int *)v48[20];
      v55 = (float *)*((_QWORD *)v54 + 3);
      v56 = v54[2];
      v57 = v54 + 3;
      do
        v56 *= v57[v53++];
      while (v53 != 3);
      vDSP_vsmul(v55, 1, *(const float **)(v42 + 16), v55, 1, v56);
    }
    else
    {
      v58 = *((_DWORD *)v48 + 4);
      if ((_DWORD)v52 != v58)
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v52, v58);
      v59 = *((_DWORD *)v48 + 5);
      if (v59)
      {
        v60 = 0;
        v61 = 0;
        v62 = *((int *)v48 + 2) * (uint64_t)*((int *)v48 + 3);
        v63 = 4 * (int)v52 * v62;
        do
        {
          if ((_DWORD)v52)
          {
            v64 = 0;
            v65 = 0;
            v66 = v60;
            do
            {
              vDSP_vsmul((const float *)(*((_QWORD *)v48[20] + 3) + v66), 1, (const float *)(*(_QWORD *)(v42 + 16) + v64), (float *)(*((_QWORD *)v48[20] + 3) + v66), 1, v62);
              ++v65;
              v52 = *((int *)v48 + 4);
              v64 += 4;
              v66 += 4 * v62;
            }
            while (v65 < v52);
            v59 = *((_DWORD *)v48 + 5);
          }
          ++v61;
          v60 += v63;
        }
        while (v61 < v59);
      }
    }
    v40 = v96;
    if (v95)
    {
      v67 = (unint64_t *)&v95->__shared_owners_;
      do
        v68 = __ldaxr(v67);
      while (__stlxr(v68 - 1, v67));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
        std::__shared_weak_count::__release_weak(v95);
      }
    }
    if (v97)
    {
      v69 = (unint64_t *)&v97->__shared_owners_;
      do
        v70 = __ldaxr(v69);
      while (__stlxr(v70 - 1, v69));
      if (!v70)
      {
        ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
        std::__shared_weak_count::__release_weak(v97);
      }
    }
  }
  v71 = *(std::__shared_weak_count **)(v40 + 336);
  if (v71)
  {
    v72 = (unint64_t *)&v71->__shared_owners_;
    do
      v73 = __ldxr(v72);
    while (__stxr(v73 + 1, v72));
  }
  v74 = *a3;
  if (a3[1] != *a3)
  {
    v75 = 0;
    do
    {
      v76 = *(const void **)(v74 + 16 * v75);
      if (v76
      {
        v78 = (uint64_t)v77;
        v105 = (void ***)v77;
        v79 = *(std::__shared_weak_count **)(v74 + 16 * v75 + 8);
        v106 = v79;
        if (v79)
        {
          v80 = (unint64_t *)&v79->__shared_owners_;
          do
            v81 = __ldxr(v80);
          while (__stxr(v81 + 1, v80));
        }
      }
      else
      {
        v78 = 0;
        v105 = 0;
        v106 = 0;
      }
      v82 = v101[0];
      v83 = v101[0][2 * v75];
      if (v83
      {
        v103 = v84;
        v85 = (std::__shared_weak_count *)v82[2 * v75 + 1];
        v104 = v85;
        if (v85)
        {
          v86 = (unint64_t *)&v85->__shared_owners_;
          do
            v87 = __ldxr(v86);
          while (__stxr(v87 + 1, v86));
        }
      }
      else
      {
        v85 = 0;
        v84 = 0;
        v103 = 0;
        v104 = 0;
      }
      v41.n128_u64[0] = Espresso::QuantSimEngine::blob_container::copy_from_fp32(v78, (uint64_t)v84 + 160, 1.0);
      if (v85)
      {
        v88 = (unint64_t *)&v85->__shared_owners_;
        do
          v89 = __ldaxr(v88);
        while (__stlxr(v89 - 1, v88));
        if (!v89)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v85->__on_zero_shared)(v85, v41);
          std::__shared_weak_count::__release_weak(v85);
        }
      }
      v90 = v106;
      if (v106)
      {
        v91 = (unint64_t *)&v106->__shared_owners_;
        do
          v92 = __ldaxr(v91);
        while (__stlxr(v92 - 1, v91));
        if (!v92)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v90->__on_zero_shared)(v90, v41);
          std::__shared_weak_count::__release_weak(v90);
        }
      }
      ++v75;
      v74 = *a3;
    }
    while (v75 < (a3[1] - *a3) >> 4);
  }
  if (v71)
  {
    v93 = (unint64_t *)&v71->__shared_owners_;
    do
      v94 = __ldaxr(v93);
    while (__stlxr(v94 - 1, v93));
    if (!v94)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v71->__on_zero_shared)(v71, v41);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  v105 = v101;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v105);
  v101[0] = (void **)v102;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v101);
}

void sub_19160DAFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  *(_QWORD *)(v25 - 104) = &a22;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 104));
  a22 = (void **)&a25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a22);
  _Unwind_Resume(a1);
}

void Espresso::generic_cf_if_kernel::top_shapes_for_bottom_shapes(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t Espresso::generic_cf_if_kernel::number_of_top_blobs(Espresso::generic_cf_if_kernel *this)
{
  return 0;
}

void *wrapper_kernel<Espresso::cf_if_kernel_cpu,Espresso::cf_if_params_t>::__set_weight_raw_blob(void *result, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  void *v7;
  int v8;
  uint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::runtime_error *exception;
  unint64_t v15;
  std::runtime_error *v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  std::string v39;
  _QWORD v40[2];
  unsigned __int8 v41;
  _QWORD v42[2];
  unsigned __int8 v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;

  v7 = result;
  v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10)
      return result;
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    v10 = (uint64_t)v7 + 344;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v10, (__int128 *)&v52);
    size = (std::__shared_weak_count *)v52.__r_.__value_.__l.__size_;
    if (v52.__r_.__value_.__l.__size_)
    {
      v12 = (unint64_t *)(v52.__r_.__value_.__l.__size_ + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    if (a5 != 4 * *(int *)(*(_QWORD *)v10 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      v15 = a5;
      v16 = exception;
      std::to_string(&v45, v15);
      v17 = std::string::insert(&v45, 0, "Unexpected size s=");
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      v19 = std::string::append(&v46, "/blob=");
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, 4 * *(int *)(*(_QWORD *)v10 + 8));
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v21 = &v44;
      else
        v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      else
        v22 = v44.__r_.__value_.__l.__size_;
      v23 = std::string::append(&v47, (const std::string::value_type *)v21, v22);
      v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, " @ ");
      if ((v43 & 0x80u) == 0)
        v25 = (const std::string::value_type *)v42;
      else
        v25 = (const std::string::value_type *)v42[0];
      if ((v43 & 0x80u) == 0)
        v26 = v43;
      else
        v26 = v42[1];
      v27 = std::string::append(&v48, v25, v26);
      v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      v29 = std::string::append(&v49, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v40, ":");
      if ((v41 & 0x80u) == 0)
        v31 = (const std::string::value_type *)v40;
      else
        v31 = (const std::string::value_type *)v40[0];
      if ((v41 & 0x80u) == 0)
        v32 = v41;
      else
        v32 = v40[1];
      v33 = std::string::append(&v50, v31, v32);
      v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, 197);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = &v39;
      else
        v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      else
        v36 = v39.__r_.__value_.__l.__size_;
      v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
      v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v16, &v52);
      __cxa_throw(v16, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    return memcpy(*(void **)(*(_QWORD *)v10 + 16), a4, a5);
  }
  return result;
}

void sub_19160DEC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  void *v59;
  int v60;
  uint64_t v61;

  if (*(char *)(v61 - 57) < 0)
    operator delete(*(void **)(v61 - 80));
  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v61 - 89) < 0)
    operator delete(*(void **)(v61 - 112));
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v61 - 121) < 0)
    operator delete(*(void **)(v61 - 144));
  if (*(char *)(v61 - 153) < 0)
    operator delete(*(void **)(v61 - 176));
  if (a27 < 0)
    operator delete(a22);
  if (a59 < 0)
    operator delete(a54);
  if (a33 < 0)
    operator delete(a28);
  if (a52 < 0)
    operator delete(a47);
  if (a45 < 0)
    operator delete(a40);
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0)
LABEL_28:
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

BOOL wrapper_kernel<Espresso::cf_if_kernel_cpu,Espresso::cf_if_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2;

  v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10)
      return 0;
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

const char *Espresso::generic_cf_if_kernel::kernel_type_str(Espresso::generic_cf_if_kernel *this)
{
  return "cf_if";
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::cf_if_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

void `non-virtual thunk to'wrapper_kernel<Espresso::cf_if_kernel_cpu,Espresso::cf_if_params_t>::~wrapper_kernel(_QWORD *a1)
{
  Espresso::generic_cf_if_kernel *v2;

  v2 = (Espresso::generic_cf_if_kernel *)(a1 - 36);
  *(a1 - 36) = &off_1E2D4F1C8;
  *a1 = &unk_1E2D4F320;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 7));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 5));
  Espresso::generic_cf_if_kernel::~generic_cf_if_kernel(v2);
}

{
  Espresso::generic_cf_if_kernel *v2;

  v2 = (Espresso::generic_cf_if_kernel *)(a1 - 36);
  *(a1 - 36) = &off_1E2D4F1C8;
  *a1 = &unk_1E2D4F320;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 7));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 5));
  Espresso::generic_cf_if_kernel::~generic_cf_if_kernel(v2);
  JUMPOUT(0x19401CD90);
}

void wrapper_kernel<Espresso::cf_if_kernel_cpu,Espresso::cf_if_params_t>::convert_layer_data_to_fp32(_QWORD *a1, char **a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v9;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  const void *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  __int128 v43;
  int64x2_t v44;
  char *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  __int128 v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  int64x2_t v59;
  char *v60;
  _QWORD *v61;
  void *__p;
  void *v63;
  __int128 v64;
  const void *v65;
  std::__shared_weak_count *v66;

  if (a3 != a4)
  {
    v9 = a3;
    v12 = a2 + 2;
    while (1)
    {
      v14 = *(const void **)v9;
      v13 = *(std::__shared_weak_count **)(v9 + 8);
      v65 = *(const void **)v9;
      v66 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
      }
      v17 = operator new(0x118uLL);
      v17[1] = 0;
      v17[2] = 0;
      *v17 = &off_1E2DC1868;
      Espresso::blob_cpu::blob_cpu((uint64_t)(v17 + 3), a1);
      *(_QWORD *)&v64 = v17 + 3;
      *((_QWORD *)&v64 + 1) = v17;
      Espresso::abstract_blob_container::shape((char *)&v58, (uint64_t)v14);
      v56 = 0;
      v57 = 0;
      (*(void (**)(_QWORD *, uint64_t *, uint64_t *))(v17[3] + 16))(v17 + 3, &v58, &v56);
      v18 = v57;
      if (v57)
      {
        v19 = (unint64_t *)&v57->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if (__p)
      {
        v63 = __p;
        operator delete(__p);
      }
      if (v65)
      {
        if (v21)
          break;
      }
      v21 = 0;
      v55 = 0;
      if (a5)
        goto LABEL_21;
LABEL_28:
      v27 = v64;
      if (*((_QWORD *)&v64 + 1))
      {
        v28 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v31 = a2[1];
      v30 = (unint64_t)a2[2];
      if ((unint64_t)v31 >= v30)
      {
        v54 = v27;
        v33 = (v31 - *a2) >> 4;
        if ((unint64_t)(v33 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v34 = v30 - (_QWORD)*a2;
        v35 = v34 >> 3;
        if (v34 >> 3 <= (unint64_t)(v33 + 1))
          v35 = v33 + 1;
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0)
          v36 = 0xFFFFFFFFFFFFFFFLL;
        else
          v36 = v35;
        v61 = v12;
        v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v36);
        v39 = &v37[16 * v33];
        *(_OWORD *)v39 = v54;
        v41 = *a2;
        v40 = a2[1];
        if (v40 == *a2)
        {
          v44 = vdupq_n_s64((unint64_t)v40);
          v42 = &v37[16 * v33];
        }
        else
        {
          v42 = &v37[16 * v33];
          do
          {
            v43 = *((_OWORD *)v40 - 1);
            v40 -= 16;
            *((_OWORD *)v42 - 1) = v43;
            v42 -= 16;
            *(_QWORD *)v40 = 0;
            *((_QWORD *)v40 + 1) = 0;
          }
          while (v40 != v41);
          v44 = *(int64x2_t *)a2;
        }
        v32 = v39 + 16;
        *a2 = v42;
        a2[1] = v39 + 16;
        v59 = v44;
        v45 = a2[2];
        a2[2] = &v37[16 * v38];
        v60 = v45;
        v58 = v44.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v58);
      }
      else
      {
        *(_OWORD *)v31 = v27;
        v32 = v31 + 16;
      }
      a2[1] = v32;
      if (v55)
      {
        v46 = (unint64_t *)&v55->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      v48 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
      if (*((_QWORD *)&v64 + 1))
      {
        v49 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      v51 = v66;
      if (v66)
      {
        v52 = (unint64_t *)&v66->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v9 += 16;
      if (v9 == a4)
        return;
    }
    v55 = v66;
    if (v66)
    {
      v22 = (unint64_t *)&v66->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    if (!a5)
      goto LABEL_28;
LABEL_21:
    if (a6)
    {
      v58 = 0;
      v59.i64[0] = 0;
      (*(void (**)(void *, uint64_t *, uint64_t))(*(_QWORD *)v21 + 40))(v21, &v58, v64 + 160);
      v24 = (std::__shared_weak_count *)v59.i64[0];
      if (v59.i64[0])
      {
        v25 = (unint64_t *)(v59.i64[0] + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v21, v64 + 160, 1.0);
    }
    goto LABEL_28;
  }
}

void sub_19160E4DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::cf_if_kernel_cpu,Espresso::cf_if_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB44E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::cf_if_kernel_cpu,Espresso::cf_if_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB44E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::cf_if_kernel_cpu,Espresso::cf_if_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_36@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  __n128 result;
  std::string __p;
  __int128 v9;
  __int128 v10;

  v6 = (char *)operator new(0x188uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DB4F98;
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  v9 = *(_OWORD *)(a2 + 24);
  v10 = *(_OWORD *)(a2 + 40);
  Espresso::store_global_kernel_cpu::store_global_kernel_cpu((uint64_t)(v6 + 24), a1, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *((_QWORD *)v6 + 3) = &off_1E2D535D8;
  *(_OWORD *)(v6 + 360) = 0u;
  *(_OWORD *)(v6 + 376) = 0u;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v6 + 45, *a1, a1[1]);
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19160E688(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  std::__shared_weak_count *v14;
  void *v16;

  std::__shared_weak_count::~__shared_weak_count(v14);
  operator delete(v16);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::store_global_kernel_cpu,Espresso::store_global_params_t>::~wrapper_kernel(void **a1)
{
  *a1 = &off_1E2D535D8;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 44));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 42));
  Espresso::generic_store_global_kernel::~generic_store_global_kernel(a1);
}

{
  *a1 = &off_1E2D535D8;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 44));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 42));
  Espresso::generic_store_global_kernel::~generic_store_global_kernel(a1);
  JUMPOUT(0x19401CD90);
}

void wrapper_kernel<Espresso::store_global_kernel_cpu,Espresso::store_global_params_t>::__launch(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4)
{
  _BOOL4 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  void *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  float *v32;
  vDSP_Length v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  __n128 v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  void **v46;
  void **v47;
  void **v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  int *v54;
  float *v55;
  vDSP_Length v56;
  int *v57;
  int v58;
  int v59;
  uint64_t v60;
  unint64_t v61;
  vDSP_Length v62;
  vDSP_Length v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  const void *v76;
  void **v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  void **v82;
  const void *v83;
  void *v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  uint64_t v96;
  std::__shared_weak_count *v97;
  float __B;
  _QWORD v99[2];
  _QWORD v100[2];
  void **v101[3];
  char *v102[3];
  void *v103;
  std::__shared_weak_count *v104;
  void ***v105;
  std::__shared_weak_count *v106;

  memset(v102, 0, sizeof(v102));
  memset(v101, 0, sizeof(v101));
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)*a3 + 32))(*(_QWORD *)*a3))
    v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)*a3 + 32))(*(_QWORD *)*a3) == 1;
  else
    v8 = 1;
  v9 = *(std::__shared_weak_count **)(a1 + 344);
  v100[0] = *(_QWORD *)(a1 + 336);
  v100[1] = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  wrapper_kernel<Espresso::store_global_kernel_cpu,Espresso::store_global_params_t>::convert_layer_data_to_fp32(v100, v102, *a4, a4[1], 1, v8);
  if (v9)
  {
    v12 = (unint64_t *)&v9->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v14 = *(std::__shared_weak_count **)(a1 + 344);
  v99[0] = *(_QWORD *)(a1 + 336);
  v99[1] = v14;
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  wrapper_kernel<Espresso::store_global_kernel_cpu,Espresso::store_global_params_t>::convert_layer_data_to_fp32(v99, (char **)v101, *a3, a3[1], 0, 0);
  if (v14)
  {
    v18 = (unint64_t *)&v14->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v96 = a1;
  v20 = *a4;
  if (a4[1] != *a4)
  {
    v21 = 0;
    do
    {
      if (!v8
        && (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v20 + 16 * v21) + 32))(*(_QWORD *)(v20 + 16 * v21))
         || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(*a4 + 16 * v21) + 32))(*(_QWORD *)(*a4 + 16 * v21)) == 1))
      {
        __B = *(float *)(*(_QWORD *)(*a4 + 16 * v21) + 112);
        v22 = &v102[0][16 * v21];
        v105 = (void ***)v23;
        v24 = (std::__shared_weak_count *)*((_QWORD *)v22 + 1);
        v106 = v24;
        if (v24)
        {
          v25 = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldxr(v25);
          while (__stxr(v26 + 1, v25));
        }
        v27 = *((_QWORD *)v23 + 20);
        v28 = (std::__shared_weak_count *)*((_QWORD *)v23 + 21);
        v103 = (void *)v27;
        v104 = v28;
        if (v28)
        {
          v29 = (unint64_t *)&v28->__shared_owners_;
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
        }
        v31 = 0;
        v32 = *(float **)(v27 + 24);
        v33 = *(int *)(v27 + 8);
        v34 = v27 + 12;
        do
        {
          v33 *= *(int *)(v34 + v31);
          v31 += 4;
        }
        while (v31 != 12);
        vDSP_vsmul(v32, 1, &__B, v32, 1, v33);
        if (v28)
        {
          v35 = (unint64_t *)&v28->__shared_owners_;
          do
            v36 = __ldaxr(v35);
          while (__stlxr(v36 - 1, v35));
          if (!v36)
          {
            ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
            std::__shared_weak_count::__release_weak(v28);
          }
        }
        v37 = v106;
        if (v106)
        {
          v38 = (unint64_t *)&v106->__shared_owners_;
          do
            v39 = __ldaxr(v38);
          while (__stlxr(v39 - 1, v38));
          if (!v39)
          {
            ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
            std::__shared_weak_count::__release_weak(v37);
          }
        }
      }
      ++v21;
      v20 = *a4;
    }
    while (v21 < (a4[1] - *a4) >> 4);
  }
  v40 = v96;
  Espresso::store_global_kernel_cpu::__launch(v96, a2, v17, (uint64_t **)v102);
  v42 = *(_QWORD *)(v96 + 352);
  if (v42)
  {
    v43 = *(std::__shared_weak_count **)(v96 + 360);
    v97 = v43;
    if (v43)
    {
      v44 = (unint64_t *)&v43->__shared_owners_;
      do
        v45 = __ldxr(v44);
      while (__stxr(v45 + 1, v44));
    }
    v46 = v101[0];
    if (*v101[0]
    {
      v48 = v47;
      v49 = (std::__shared_weak_count *)v46[1];
      v105 = (void ***)v47;
      v106 = v49;
      if (v49)
      {
        v50 = (unint64_t *)&v49->__shared_owners_;
        do
          v51 = __ldxr(v50);
        while (__stxr(v51 + 1, v50));
      }
    }
    else
    {
      v49 = 0;
      v48 = 0;
      v105 = 0;
      v106 = 0;
    }
    LODWORD(v52) = *(_DWORD *)(v42 + 8);
    v95 = v49;
    if ((_DWORD)v52 == 1)
    {
      v53 = 0;
      v54 = (int *)v48[20];
      v55 = (float *)*((_QWORD *)v54 + 3);
      v56 = v54[2];
      v57 = v54 + 3;
      do
        v56 *= v57[v53++];
      while (v53 != 3);
      vDSP_vsmul(v55, 1, *(const float **)(v42 + 16), v55, 1, v56);
    }
    else
    {
      v58 = *((_DWORD *)v48 + 4);
      if ((_DWORD)v52 != v58)
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v52, v58);
      v59 = *((_DWORD *)v48 + 5);
      if (v59)
      {
        v60 = 0;
        v61 = 0;
        v62 = *((int *)v48 + 2) * (uint64_t)*((int *)v48 + 3);
        v63 = 4 * (int)v52 * v62;
        do
        {
          if ((_DWORD)v52)
          {
            v64 = 0;
            v65 = 0;
            v66 = v60;
            do
            {
              vDSP_vsmul((const float *)(*((_QWORD *)v48[20] + 3) + v66), 1, (const float *)(*(_QWORD *)(v42 + 16) + v64), (float *)(*((_QWORD *)v48[20] + 3) + v66), 1, v62);
              ++v65;
              v52 = *((int *)v48 + 4);
              v64 += 4;
              v66 += 4 * v62;
            }
            while (v65 < v52);
            v59 = *((_DWORD *)v48 + 5);
          }
          ++v61;
          v60 += v63;
        }
        while (v61 < v59);
      }
    }
    v40 = v96;
    if (v95)
    {
      v67 = (unint64_t *)&v95->__shared_owners_;
      do
        v68 = __ldaxr(v67);
      while (__stlxr(v68 - 1, v67));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
        std::__shared_weak_count::__release_weak(v95);
      }
    }
    if (v97)
    {
      v69 = (unint64_t *)&v97->__shared_owners_;
      do
        v70 = __ldaxr(v69);
      while (__stlxr(v70 - 1, v69));
      if (!v70)
      {
        ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
        std::__shared_weak_count::__release_weak(v97);
      }
    }
  }
  v71 = *(std::__shared_weak_count **)(v40 + 344);
  if (v71)
  {
    v72 = (unint64_t *)&v71->__shared_owners_;
    do
      v73 = __ldxr(v72);
    while (__stxr(v73 + 1, v72));
  }
  v74 = *a3;
  if (a3[1] != *a3)
  {
    v75 = 0;
    do
    {
      v76 = *(const void **)(v74 + 16 * v75);
      if (v76
      {
        v78 = (uint64_t)v77;
        v105 = (void ***)v77;
        v79 = *(std::__shared_weak_count **)(v74 + 16 * v75 + 8);
        v106 = v79;
        if (v79)
        {
          v80 = (unint64_t *)&v79->__shared_owners_;
          do
            v81 = __ldxr(v80);
          while (__stxr(v81 + 1, v80));
        }
      }
      else
      {
        v78 = 0;
        v105 = 0;
        v106 = 0;
      }
      v82 = v101[0];
      v83 = v101[0][2 * v75];
      if (v83
      {
        v103 = v84;
        v85 = (std::__shared_weak_count *)v82[2 * v75 + 1];
        v104 = v85;
        if (v85)
        {
          v86 = (unint64_t *)&v85->__shared_owners_;
          do
            v87 = __ldxr(v86);
          while (__stxr(v87 + 1, v86));
        }
      }
      else
      {
        v85 = 0;
        v84 = 0;
        v103 = 0;
        v104 = 0;
      }
      v41.n128_u64[0] = Espresso::QuantSimEngine::blob_container::copy_from_fp32(v78, (uint64_t)v84 + 160, 1.0);
      if (v85)
      {
        v88 = (unint64_t *)&v85->__shared_owners_;
        do
          v89 = __ldaxr(v88);
        while (__stlxr(v89 - 1, v88));
        if (!v89)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v85->__on_zero_shared)(v85, v41);
          std::__shared_weak_count::__release_weak(v85);
        }
      }
      v90 = v106;
      if (v106)
      {
        v91 = (unint64_t *)&v106->__shared_owners_;
        do
          v92 = __ldaxr(v91);
        while (__stlxr(v92 - 1, v91));
        if (!v92)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v90->__on_zero_shared)(v90, v41);
          std::__shared_weak_count::__release_weak(v90);
        }
      }
      ++v75;
      v74 = *a3;
    }
    while (v75 < (a3[1] - *a3) >> 4);
  }
  if (v71)
  {
    v93 = (unint64_t *)&v71->__shared_owners_;
    do
      v94 = __ldaxr(v93);
    while (__stlxr(v94 - 1, v93));
    if (!v94)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v71->__on_zero_shared)(v71, v41);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  v105 = v101;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v105);
  v101[0] = (void **)v102;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v101);
}

void sub_19160EE18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  *(_QWORD *)(v25 - 104) = &a22;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 104));
  a22 = (void **)&a25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a22);
  _Unwind_Resume(a1);
}

void Espresso::generic_store_global_kernel::top_shapes_for_bottom_shapes(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void *wrapper_kernel<Espresso::store_global_kernel_cpu,Espresso::store_global_params_t>::__set_weight_raw_blob(void *result, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  void *v7;
  int v8;
  uint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::runtime_error *exception;
  unint64_t v15;
  std::runtime_error *v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  std::string v39;
  _QWORD v40[2];
  unsigned __int8 v41;
  _QWORD v42[2];
  unsigned __int8 v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;

  v7 = result;
  v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10)
      return result;
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    v10 = (uint64_t)v7 + 352;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v10, (__int128 *)&v52);
    size = (std::__shared_weak_count *)v52.__r_.__value_.__l.__size_;
    if (v52.__r_.__value_.__l.__size_)
    {
      v12 = (unint64_t *)(v52.__r_.__value_.__l.__size_ + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    if (a5 != 4 * *(int *)(*(_QWORD *)v10 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      v15 = a5;
      v16 = exception;
      std::to_string(&v45, v15);
      v17 = std::string::insert(&v45, 0, "Unexpected size s=");
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      v19 = std::string::append(&v46, "/blob=");
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, 4 * *(int *)(*(_QWORD *)v10 + 8));
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v21 = &v44;
      else
        v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      else
        v22 = v44.__r_.__value_.__l.__size_;
      v23 = std::string::append(&v47, (const std::string::value_type *)v21, v22);
      v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, " @ ");
      if ((v43 & 0x80u) == 0)
        v25 = (const std::string::value_type *)v42;
      else
        v25 = (const std::string::value_type *)v42[0];
      if ((v43 & 0x80u) == 0)
        v26 = v43;
      else
        v26 = v42[1];
      v27 = std::string::append(&v48, v25, v26);
      v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      v29 = std::string::append(&v49, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v40, ":");
      if ((v41 & 0x80u) == 0)
        v31 = (const std::string::value_type *)v40;
      else
        v31 = (const std::string::value_type *)v40[0];
      if ((v41 & 0x80u) == 0)
        v32 = v41;
      else
        v32 = v40[1];
      v33 = std::string::append(&v50, v31, v32);
      v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, 197);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = &v39;
      else
        v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      else
        v36 = v39.__r_.__value_.__l.__size_;
      v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
      v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v16, &v52);
      __cxa_throw(v16, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    return memcpy(*(void **)(*(_QWORD *)v10 + 16), a4, a5);
  }
  return result;
}

void sub_19160F1DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  void *v59;
  int v60;
  uint64_t v61;

  if (*(char *)(v61 - 57) < 0)
    operator delete(*(void **)(v61 - 80));
  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v61 - 89) < 0)
    operator delete(*(void **)(v61 - 112));
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v61 - 121) < 0)
    operator delete(*(void **)(v61 - 144));
  if (*(char *)(v61 - 153) < 0)
    operator delete(*(void **)(v61 - 176));
  if (a27 < 0)
    operator delete(a22);
  if (a59 < 0)
    operator delete(a54);
  if (a33 < 0)
    operator delete(a28);
  if (a52 < 0)
    operator delete(a47);
  if (a45 < 0)
    operator delete(a40);
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0)
LABEL_28:
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

BOOL wrapper_kernel<Espresso::store_global_kernel_cpu,Espresso::store_global_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2;

  v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10)
      return 0;
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

const char *Espresso::generic_store_global_kernel::kernel_type_str(Espresso::generic_store_global_kernel *this)
{
  return "store_global";
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::store_global_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

void wrapper_kernel<Espresso::store_global_kernel_cpu,Espresso::store_global_params_t>::convert_layer_data_to_fp32(_QWORD *a1, char **a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v9;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  const void *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  __int128 v43;
  int64x2_t v44;
  char *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  __int128 v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  int64x2_t v59;
  char *v60;
  _QWORD *v61;
  void *__p;
  void *v63;
  __int128 v64;
  const void *v65;
  std::__shared_weak_count *v66;

  if (a3 != a4)
  {
    v9 = a3;
    v12 = a2 + 2;
    while (1)
    {
      v14 = *(const void **)v9;
      v13 = *(std::__shared_weak_count **)(v9 + 8);
      v65 = *(const void **)v9;
      v66 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
      }
      v17 = operator new(0x118uLL);
      v17[1] = 0;
      v17[2] = 0;
      *v17 = &off_1E2DC1868;
      Espresso::blob_cpu::blob_cpu((uint64_t)(v17 + 3), a1);
      *(_QWORD *)&v64 = v17 + 3;
      *((_QWORD *)&v64 + 1) = v17;
      Espresso::abstract_blob_container::shape((char *)&v58, (uint64_t)v14);
      v56 = 0;
      v57 = 0;
      (*(void (**)(_QWORD *, uint64_t *, uint64_t *))(v17[3] + 16))(v17 + 3, &v58, &v56);
      v18 = v57;
      if (v57)
      {
        v19 = (unint64_t *)&v57->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if (__p)
      {
        v63 = __p;
        operator delete(__p);
      }
      if (v65)
      {
        if (v21)
          break;
      }
      v21 = 0;
      v55 = 0;
      if (a5)
        goto LABEL_21;
LABEL_28:
      v27 = v64;
      if (*((_QWORD *)&v64 + 1))
      {
        v28 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v31 = a2[1];
      v30 = (unint64_t)a2[2];
      if ((unint64_t)v31 >= v30)
      {
        v54 = v27;
        v33 = (v31 - *a2) >> 4;
        if ((unint64_t)(v33 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v34 = v30 - (_QWORD)*a2;
        v35 = v34 >> 3;
        if (v34 >> 3 <= (unint64_t)(v33 + 1))
          v35 = v33 + 1;
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0)
          v36 = 0xFFFFFFFFFFFFFFFLL;
        else
          v36 = v35;
        v61 = v12;
        v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v36);
        v39 = &v37[16 * v33];
        *(_OWORD *)v39 = v54;
        v41 = *a2;
        v40 = a2[1];
        if (v40 == *a2)
        {
          v44 = vdupq_n_s64((unint64_t)v40);
          v42 = &v37[16 * v33];
        }
        else
        {
          v42 = &v37[16 * v33];
          do
          {
            v43 = *((_OWORD *)v40 - 1);
            v40 -= 16;
            *((_OWORD *)v42 - 1) = v43;
            v42 -= 16;
            *(_QWORD *)v40 = 0;
            *((_QWORD *)v40 + 1) = 0;
          }
          while (v40 != v41);
          v44 = *(int64x2_t *)a2;
        }
        v32 = v39 + 16;
        *a2 = v42;
        a2[1] = v39 + 16;
        v59 = v44;
        v45 = a2[2];
        a2[2] = &v37[16 * v38];
        v60 = v45;
        v58 = v44.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v58);
      }
      else
      {
        *(_OWORD *)v31 = v27;
        v32 = v31 + 16;
      }
      a2[1] = v32;
      if (v55)
      {
        v46 = (unint64_t *)&v55->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      v48 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
      if (*((_QWORD *)&v64 + 1))
      {
        v49 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      v51 = v66;
      if (v66)
      {
        v52 = (unint64_t *)&v66->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v9 += 16;
      if (v9 == a4)
        return;
    }
    v55 = v66;
    if (v66)
    {
      v22 = (unint64_t *)&v66->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    if (!a5)
      goto LABEL_28;
LABEL_21:
    if (a6)
    {
      v58 = 0;
      v59.i64[0] = 0;
      (*(void (**)(void *, uint64_t *, uint64_t))(*(_QWORD *)v21 + 40))(v21, &v58, v64 + 160);
      v24 = (std::__shared_weak_count *)v59.i64[0];
      if (v59.i64[0])
      {
        v25 = (unint64_t *)(v59.i64[0] + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v21, v64 + 160, 1.0);
    }
    goto LABEL_28;
  }
}

void sub_19160F74C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::store_global_kernel_cpu,Espresso::store_global_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB4F98;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::store_global_kernel_cpu,Espresso::store_global_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB4F98;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::store_global_kernel_cpu,Espresso::store_global_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_35@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  __n128 result;
  std::string __p;
  __int128 v9;
  __int128 v10;

  v6 = (char *)operator new(0x198uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DB4E10;
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  v9 = *(_OWORD *)(a2 + 24);
  v10 = *(_OWORD *)(a2 + 40);
  Espresso::load_global_kernel_cpu::load_global_kernel_cpu((uint64_t)(v6 + 24), a1, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *((_QWORD *)v6 + 3) = &off_1E2D52C70;
  *(_OWORD *)(v6 + 376) = 0u;
  *(_OWORD *)(v6 + 392) = 0u;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v6 + 47, *a1, a1[1]);
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19160F8F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  std::__shared_weak_count *v14;
  void *v16;

  std::__shared_weak_count::~__shared_weak_count(v14);
  operator delete(v16);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::load_global_kernel_cpu,Espresso::load_global_params_t>::~wrapper_kernel(Espresso::generic_load_global_kernel *a1)
{
  *(_QWORD *)a1 = &off_1E2D52C70;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 368);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 352);
  Espresso::generic_load_global_kernel::~generic_load_global_kernel(a1);
}

{
  *(_QWORD *)a1 = &off_1E2D52C70;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 368);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 352);
  Espresso::generic_load_global_kernel::~generic_load_global_kernel(a1);
  JUMPOUT(0x19401CD90);
}

void wrapper_kernel<Espresso::load_global_kernel_cpu,Espresso::load_global_params_t>::__launch(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4)
{
  _BOOL4 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  float *v31;
  vDSP_Length v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  __n128 v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  void **v45;
  void **v46;
  void **v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  int *v53;
  float *v54;
  vDSP_Length v55;
  int *v56;
  int v57;
  int v58;
  uint64_t v59;
  unint64_t v60;
  vDSP_Length v61;
  vDSP_Length v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  const void *v75;
  void **v76;
  uint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  void **v81;
  const void *v82;
  void *v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  uint64_t v95;
  std::__shared_weak_count *v96;
  float __B;
  _QWORD v98[2];
  _QWORD v99[2];
  void **v100[3];
  char *v101[3];
  void *v102;
  std::__shared_weak_count *v103;
  void ***v104;
  std::__shared_weak_count *v105;

  memset(v101, 0, sizeof(v101));
  memset(v100, 0, sizeof(v100));
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)*a3 + 32))(*(_QWORD *)*a3))
    v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)*a3 + 32))(*(_QWORD *)*a3) == 1;
  else
    v8 = 1;
  v9 = *(std::__shared_weak_count **)(a1 + 360);
  v99[0] = *(_QWORD *)(a1 + 352);
  v99[1] = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  wrapper_kernel<Espresso::load_global_kernel_cpu,Espresso::load_global_params_t>::convert_layer_data_to_fp32(v99, v101, *a4, a4[1], 1, v8);
  if (v9)
  {
    v12 = (unint64_t *)&v9->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v14 = *(std::__shared_weak_count **)(a1 + 360);
  v98[0] = *(_QWORD *)(a1 + 352);
  v98[1] = v14;
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  wrapper_kernel<Espresso::load_global_kernel_cpu,Espresso::load_global_params_t>::convert_layer_data_to_fp32(v98, (char **)v100, *a3, a3[1], 0, 0);
  if (v14)
  {
    v17 = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v95 = a1;
  v19 = *a4;
  if (a4[1] != *a4)
  {
    v20 = 0;
    do
    {
      if (!v8
        && (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v19 + 16 * v20) + 32))(*(_QWORD *)(v19 + 16 * v20))
         || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(*a4 + 16 * v20) + 32))(*(_QWORD *)(*a4 + 16 * v20)) == 1))
      {
        __B = *(float *)(*(_QWORD *)(*a4 + 16 * v20) + 112);
        v21 = &v101[0][16 * v20];
        v104 = (void ***)v22;
        v23 = (std::__shared_weak_count *)*((_QWORD *)v21 + 1);
        v105 = v23;
        if (v23)
        {
          v24 = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
        }
        v26 = *((_QWORD *)v22 + 20);
        v27 = (std::__shared_weak_count *)*((_QWORD *)v22 + 21);
        v102 = (void *)v26;
        v103 = v27;
        if (v27)
        {
          v28 = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldxr(v28);
          while (__stxr(v29 + 1, v28));
        }
        v30 = 0;
        v31 = *(float **)(v26 + 24);
        v32 = *(int *)(v26 + 8);
        v33 = v26 + 12;
        do
        {
          v32 *= *(int *)(v33 + v30);
          v30 += 4;
        }
        while (v30 != 12);
        vDSP_vsmul(v31, 1, &__B, v31, 1, v32);
        if (v27)
        {
          v34 = (unint64_t *)&v27->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        v36 = v105;
        if (v105)
        {
          v37 = (unint64_t *)&v105->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
      }
      ++v20;
      v19 = *a4;
    }
    while (v20 < (a4[1] - *a4) >> 4);
  }
  v39 = v95;
  Espresso::load_global_kernel_cpu::__launch(v95, a2, (uint64_t **)v100, (uint64_t)v101);
  v41 = *(_QWORD *)(v95 + 368);
  if (v41)
  {
    v42 = *(std::__shared_weak_count **)(v95 + 376);
    v96 = v42;
    if (v42)
    {
      v43 = (unint64_t *)&v42->__shared_owners_;
      do
        v44 = __ldxr(v43);
      while (__stxr(v44 + 1, v43));
    }
    v45 = v100[0];
    if (*v100[0]
    {
      v47 = v46;
      v48 = (std::__shared_weak_count *)v45[1];
      v104 = (void ***)v46;
      v105 = v48;
      if (v48)
      {
        v49 = (unint64_t *)&v48->__shared_owners_;
        do
          v50 = __ldxr(v49);
        while (__stxr(v50 + 1, v49));
      }
    }
    else
    {
      v48 = 0;
      v47 = 0;
      v104 = 0;
      v105 = 0;
    }
    LODWORD(v51) = *(_DWORD *)(v41 + 8);
    v94 = v48;
    if ((_DWORD)v51 == 1)
    {
      v52 = 0;
      v53 = (int *)v47[20];
      v54 = (float *)*((_QWORD *)v53 + 3);
      v55 = v53[2];
      v56 = v53 + 3;
      do
        v55 *= v56[v52++];
      while (v52 != 3);
      vDSP_vsmul(v54, 1, *(const float **)(v41 + 16), v54, 1, v55);
    }
    else
    {
      v57 = *((_DWORD *)v47 + 4);
      if ((_DWORD)v51 != v57)
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v51, v57);
      v58 = *((_DWORD *)v47 + 5);
      if (v58)
      {
        v59 = 0;
        v60 = 0;
        v61 = *((int *)v47 + 2) * (uint64_t)*((int *)v47 + 3);
        v62 = 4 * (int)v51 * v61;
        do
        {
          if ((_DWORD)v51)
          {
            v63 = 0;
            v64 = 0;
            v65 = v59;
            do
            {
              vDSP_vsmul((const float *)(*((_QWORD *)v47[20] + 3) + v65), 1, (const float *)(*(_QWORD *)(v41 + 16) + v63), (float *)(*((_QWORD *)v47[20] + 3) + v65), 1, v61);
              ++v64;
              v51 = *((int *)v47 + 4);
              v63 += 4;
              v65 += 4 * v61;
            }
            while (v64 < v51);
            v58 = *((_DWORD *)v47 + 5);
          }
          ++v60;
          v59 += v62;
        }
        while (v60 < v58);
      }
    }
    v39 = v95;
    if (v94)
    {
      v66 = (unint64_t *)&v94->__shared_owners_;
      do
        v67 = __ldaxr(v66);
      while (__stlxr(v67 - 1, v66));
      if (!v67)
      {
        ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
        std::__shared_weak_count::__release_weak(v94);
      }
    }
    if (v96)
    {
      v68 = (unint64_t *)&v96->__shared_owners_;
      do
        v69 = __ldaxr(v68);
      while (__stlxr(v69 - 1, v68));
      if (!v69)
      {
        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
        std::__shared_weak_count::__release_weak(v96);
      }
    }
  }
  v70 = *(std::__shared_weak_count **)(v39 + 360);
  if (v70)
  {
    v71 = (unint64_t *)&v70->__shared_owners_;
    do
      v72 = __ldxr(v71);
    while (__stxr(v72 + 1, v71));
  }
  v73 = *a3;
  if (a3[1] != *a3)
  {
    v74 = 0;
    do
    {
      v75 = *(const void **)(v73 + 16 * v74);
      if (v75
      {
        v77 = (uint64_t)v76;
        v104 = (void ***)v76;
        v78 = *(std::__shared_weak_count **)(v73 + 16 * v74 + 8);
        v105 = v78;
        if (v78)
        {
          v79 = (unint64_t *)&v78->__shared_owners_;
          do
            v80 = __ldxr(v79);
          while (__stxr(v80 + 1, v79));
        }
      }
      else
      {
        v77 = 0;
        v104 = 0;
        v105 = 0;
      }
      v81 = v100[0];
      v82 = v100[0][2 * v74];
      if (v82
      {
        v102 = v83;
        v84 = (std::__shared_weak_count *)v81[2 * v74 + 1];
        v103 = v84;
        if (v84)
        {
          v85 = (unint64_t *)&v84->__shared_owners_;
          do
            v86 = __ldxr(v85);
          while (__stxr(v86 + 1, v85));
        }
      }
      else
      {
        v84 = 0;
        v83 = 0;
        v102 = 0;
        v103 = 0;
      }
      v40.n128_u64[0] = Espresso::QuantSimEngine::blob_container::copy_from_fp32(v77, (uint64_t)v83 + 160, 1.0);
      if (v84)
      {
        v87 = (unint64_t *)&v84->__shared_owners_;
        do
          v88 = __ldaxr(v87);
        while (__stlxr(v88 - 1, v87));
        if (!v88)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v84->__on_zero_shared)(v84, v40);
          std::__shared_weak_count::__release_weak(v84);
        }
      }
      v89 = v105;
      if (v105)
      {
        v90 = (unint64_t *)&v105->__shared_owners_;
        do
          v91 = __ldaxr(v90);
        while (__stlxr(v91 - 1, v90));
        if (!v91)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v89->__on_zero_shared)(v89, v40);
          std::__shared_weak_count::__release_weak(v89);
        }
      }
      ++v74;
      v73 = *a3;
    }
    while (v74 < (a3[1] - *a3) >> 4);
  }
  if (v70)
  {
    v92 = (unint64_t *)&v70->__shared_owners_;
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v70->__on_zero_shared)(v70, v40);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  v104 = v100;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v104);
  v100[0] = (void **)v101;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v100);
}

void sub_19161008C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  *(_QWORD *)(v25 - 104) = &a22;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 104));
  a22 = (void **)&a25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a22);
  _Unwind_Resume(a1);
}

void *wrapper_kernel<Espresso::load_global_kernel_cpu,Espresso::load_global_params_t>::__set_weight_raw_blob(void *result, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  void *v7;
  int v8;
  uint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::runtime_error *exception;
  unint64_t v15;
  std::runtime_error *v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  std::string v39;
  _QWORD v40[2];
  unsigned __int8 v41;
  _QWORD v42[2];
  unsigned __int8 v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;

  v7 = result;
  v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10)
      return result;
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    v10 = (uint64_t)v7 + 368;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v10, (__int128 *)&v52);
    size = (std::__shared_weak_count *)v52.__r_.__value_.__l.__size_;
    if (v52.__r_.__value_.__l.__size_)
    {
      v12 = (unint64_t *)(v52.__r_.__value_.__l.__size_ + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    if (a5 != 4 * *(int *)(*(_QWORD *)v10 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      v15 = a5;
      v16 = exception;
      std::to_string(&v45, v15);
      v17 = std::string::insert(&v45, 0, "Unexpected size s=");
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      v19 = std::string::append(&v46, "/blob=");
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, 4 * *(int *)(*(_QWORD *)v10 + 8));
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v21 = &v44;
      else
        v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      else
        v22 = v44.__r_.__value_.__l.__size_;
      v23 = std::string::append(&v47, (const std::string::value_type *)v21, v22);
      v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, " @ ");
      if ((v43 & 0x80u) == 0)
        v25 = (const std::string::value_type *)v42;
      else
        v25 = (const std::string::value_type *)v42[0];
      if ((v43 & 0x80u) == 0)
        v26 = v43;
      else
        v26 = v42[1];
      v27 = std::string::append(&v48, v25, v26);
      v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      v29 = std::string::append(&v49, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v40, ":");
      if ((v41 & 0x80u) == 0)
        v31 = (const std::string::value_type *)v40;
      else
        v31 = (const std::string::value_type *)v40[0];
      if ((v41 & 0x80u) == 0)
        v32 = v41;
      else
        v32 = v40[1];
      v33 = std::string::append(&v50, v31, v32);
      v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, 197);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = &v39;
      else
        v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      else
        v36 = v39.__r_.__value_.__l.__size_;
      v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
      v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v16, &v52);
      __cxa_throw(v16, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    return memcpy(*(void **)(*(_QWORD *)v10 + 16), a4, a5);
  }
  return result;
}

void sub_191610444(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  void *v59;
  int v60;
  uint64_t v61;

  if (*(char *)(v61 - 57) < 0)
    operator delete(*(void **)(v61 - 80));
  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v61 - 89) < 0)
    operator delete(*(void **)(v61 - 112));
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v61 - 121) < 0)
    operator delete(*(void **)(v61 - 144));
  if (*(char *)(v61 - 153) < 0)
    operator delete(*(void **)(v61 - 176));
  if (a27 < 0)
    operator delete(a22);
  if (a59 < 0)
    operator delete(a54);
  if (a33 < 0)
    operator delete(a28);
  if (a52 < 0)
    operator delete(a47);
  if (a45 < 0)
    operator delete(a40);
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0)
LABEL_28:
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

BOOL wrapper_kernel<Espresso::load_global_kernel_cpu,Espresso::load_global_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2;

  v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10)
      return 0;
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

const char *Espresso::generic_load_global_kernel::kernel_type_str(Espresso::generic_load_global_kernel *this)
{
  return "load_global";
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::load_global_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

void wrapper_kernel<Espresso::load_global_kernel_cpu,Espresso::load_global_params_t>::convert_layer_data_to_fp32(_QWORD *a1, char **a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v9;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  const void *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  __int128 v43;
  int64x2_t v44;
  char *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  __int128 v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  int64x2_t v59;
  char *v60;
  _QWORD *v61;
  void *__p;
  void *v63;
  __int128 v64;
  const void *v65;
  std::__shared_weak_count *v66;

  if (a3 != a4)
  {
    v9 = a3;
    v12 = a2 + 2;
    while (1)
    {
      v14 = *(const void **)v9;
      v13 = *(std::__shared_weak_count **)(v9 + 8);
      v65 = *(const void **)v9;
      v66 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
      }
      v17 = operator new(0x118uLL);
      v17[1] = 0;
      v17[2] = 0;
      *v17 = &off_1E2DC1868;
      Espresso::blob_cpu::blob_cpu((uint64_t)(v17 + 3), a1);
      *(_QWORD *)&v64 = v17 + 3;
      *((_QWORD *)&v64 + 1) = v17;
      Espresso::abstract_blob_container::shape((char *)&v58, (uint64_t)v14);
      v56 = 0;
      v57 = 0;
      (*(void (**)(_QWORD *, uint64_t *, uint64_t *))(v17[3] + 16))(v17 + 3, &v58, &v56);
      v18 = v57;
      if (v57)
      {
        v19 = (unint64_t *)&v57->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if (__p)
      {
        v63 = __p;
        operator delete(__p);
      }
      if (v65)
      {
        if (v21)
          break;
      }
      v21 = 0;
      v55 = 0;
      if (a5)
        goto LABEL_21;
LABEL_28:
      v27 = v64;
      if (*((_QWORD *)&v64 + 1))
      {
        v28 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v31 = a2[1];
      v30 = (unint64_t)a2[2];
      if ((unint64_t)v31 >= v30)
      {
        v54 = v27;
        v33 = (v31 - *a2) >> 4;
        if ((unint64_t)(v33 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v34 = v30 - (_QWORD)*a2;
        v35 = v34 >> 3;
        if (v34 >> 3 <= (unint64_t)(v33 + 1))
          v35 = v33 + 1;
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0)
          v36 = 0xFFFFFFFFFFFFFFFLL;
        else
          v36 = v35;
        v61 = v12;
        v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v36);
        v39 = &v37[16 * v33];
        *(_OWORD *)v39 = v54;
        v41 = *a2;
        v40 = a2[1];
        if (v40 == *a2)
        {
          v44 = vdupq_n_s64((unint64_t)v40);
          v42 = &v37[16 * v33];
        }
        else
        {
          v42 = &v37[16 * v33];
          do
          {
            v43 = *((_OWORD *)v40 - 1);
            v40 -= 16;
            *((_OWORD *)v42 - 1) = v43;
            v42 -= 16;
            *(_QWORD *)v40 = 0;
            *((_QWORD *)v40 + 1) = 0;
          }
          while (v40 != v41);
          v44 = *(int64x2_t *)a2;
        }
        v32 = v39 + 16;
        *a2 = v42;
        a2[1] = v39 + 16;
        v59 = v44;
        v45 = a2[2];
        a2[2] = &v37[16 * v38];
        v60 = v45;
        v58 = v44.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v58);
      }
      else
      {
        *(_OWORD *)v31 = v27;
        v32 = v31 + 16;
      }
      a2[1] = v32;
      if (v55)
      {
        v46 = (unint64_t *)&v55->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      v48 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
      if (*((_QWORD *)&v64 + 1))
      {
        v49 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      v51 = v66;
      if (v66)
      {
        v52 = (unint64_t *)&v66->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v9 += 16;
      if (v9 == a4)
        return;
    }
    v55 = v66;
    if (v66)
    {
      v22 = (unint64_t *)&v66->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    if (!a5)
      goto LABEL_28;
LABEL_21:
    if (a6)
    {
      v58 = 0;
      v59.i64[0] = 0;
      (*(void (**)(void *, uint64_t *, uint64_t))(*(_QWORD *)v21 + 40))(v21, &v58, v64 + 160);
      v24 = (std::__shared_weak_count *)v59.i64[0];
      if (v59.i64[0])
      {
        v25 = (unint64_t *)(v59.i64[0] + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v21, v64 + 160, 1.0);
    }
    goto LABEL_28;
  }
}

void sub_1916109B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::load_global_kernel_cpu,Espresso::load_global_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB4E10;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::load_global_kernel_cpu,Espresso::load_global_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB4E10;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::load_global_kernel_cpu,Espresso::load_global_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_34@<Q0>(uint64_t *a1@<X1>, _OWORD *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  __int128 v7;
  __n128 result;

  v6 = operator new(0x1B0uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DB53C0;
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  *((_OWORD *)v6 + 23) = 0u;
  *((_OWORD *)v6 + 24) = 0u;
  *((_OWORD *)v6 + 21) = 0u;
  *((_OWORD *)v6 + 22) = 0u;
  v7 = a2[1];
  *((_OWORD *)v6 + 19) = *a2;
  *((_OWORD *)v6 + 20) = v7;
  v6[3] = &off_1E2D55080;
  *((_OWORD *)v6 + 25) = 0u;
  *((_OWORD *)v6 + 26) = 0u;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v6 + 50, *a1, a1[1]);
  result.n128_u64[0] = (unint64_t)(v6 + 3);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_191610B18(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::dynamic_dequantize_kernel_cpu,Espresso::dynamic_dequantize_params_t>::~wrapper_kernel(Espresso::generic_dynamic_dequantize_kernel *a1)
{
  *(_QWORD *)a1 = &off_1E2D55080;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 392);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 376);
  Espresso::generic_dynamic_dequantize_kernel::~generic_dynamic_dequantize_kernel(a1);
}

{
  *(_QWORD *)a1 = &off_1E2D55080;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 392);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 376);
  Espresso::generic_dynamic_dequantize_kernel::~generic_dynamic_dequantize_kernel(a1);
  JUMPOUT(0x19401CD90);
}

void wrapper_kernel<Espresso::dynamic_dequantize_kernel_cpu,Espresso::dynamic_dequantize_params_t>::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  _BOOL4 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  float *v31;
  vDSP_Length v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  __n128 v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  void **v45;
  void **v46;
  void **v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  int *v53;
  float *v54;
  vDSP_Length v55;
  int *v56;
  int v57;
  int v58;
  uint64_t v59;
  unint64_t v60;
  vDSP_Length v61;
  vDSP_Length v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  const void *v75;
  void **v76;
  uint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  void **v81;
  const void *v82;
  void *v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  uint64_t v95;
  std::__shared_weak_count *v96;
  float __B;
  _QWORD v98[2];
  _QWORD v99[2];
  void **v100[3];
  char *v101[3];
  void *v102;
  std::__shared_weak_count *v103;
  void ***v104;
  std::__shared_weak_count *v105;

  memset(v101, 0, sizeof(v101));
  memset(v100, 0, sizeof(v100));
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)*a3 + 32))(*(_QWORD *)*a3))
    v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)*a3 + 32))(*(_QWORD *)*a3) == 1;
  else
    v8 = 1;
  v9 = *(std::__shared_weak_count **)(a1 + 384);
  v99[0] = *(_QWORD *)(a1 + 376);
  v99[1] = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  wrapper_kernel<Espresso::dynamic_dequantize_kernel_cpu,Espresso::dynamic_dequantize_params_t>::convert_layer_data_to_fp32(v99, v101, *a4, a4[1], 1, v8);
  if (v9)
  {
    v12 = (unint64_t *)&v9->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v14 = *(std::__shared_weak_count **)(a1 + 384);
  v98[0] = *(_QWORD *)(a1 + 376);
  v98[1] = v14;
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  wrapper_kernel<Espresso::dynamic_dequantize_kernel_cpu,Espresso::dynamic_dequantize_params_t>::convert_layer_data_to_fp32(v98, (char **)v100, *a3, a3[1], 0, 0);
  if (v14)
  {
    v17 = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v95 = a1;
  v19 = *a4;
  if (a4[1] != *a4)
  {
    v20 = 0;
    do
    {
      if (!v8
        && (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v19 + 16 * v20) + 32))(*(_QWORD *)(v19 + 16 * v20))
         || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(*a4 + 16 * v20) + 32))(*(_QWORD *)(*a4 + 16 * v20)) == 1))
      {
        __B = *(float *)(*(_QWORD *)(*a4 + 16 * v20) + 112);
        v21 = &v101[0][16 * v20];
        v104 = (void ***)v22;
        v23 = (std::__shared_weak_count *)*((_QWORD *)v21 + 1);
        v105 = v23;
        if (v23)
        {
          v24 = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
        }
        v26 = *((_QWORD *)v22 + 20);
        v27 = (std::__shared_weak_count *)*((_QWORD *)v22 + 21);
        v102 = (void *)v26;
        v103 = v27;
        if (v27)
        {
          v28 = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldxr(v28);
          while (__stxr(v29 + 1, v28));
        }
        v30 = 0;
        v31 = *(float **)(v26 + 24);
        v32 = *(int *)(v26 + 8);
        v33 = v26 + 12;
        do
        {
          v32 *= *(int *)(v33 + v30);
          v30 += 4;
        }
        while (v30 != 12);
        vDSP_vsmul(v31, 1, &__B, v31, 1, v32);
        if (v27)
        {
          v34 = (unint64_t *)&v27->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        v36 = v105;
        if (v105)
        {
          v37 = (unint64_t *)&v105->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
      }
      ++v20;
      v19 = *a4;
    }
    while (v20 < (a4[1] - *a4) >> 4);
  }
  v39 = v95;
  Espresso::dynamic_dequantize_kernel_cpu::__launch(v95, a2, (uint64_t)v100, (uint64_t)v101);
  v41 = *(_QWORD *)(v95 + 392);
  if (v41)
  {
    v42 = *(std::__shared_weak_count **)(v95 + 400);
    v96 = v42;
    if (v42)
    {
      v43 = (unint64_t *)&v42->__shared_owners_;
      do
        v44 = __ldxr(v43);
      while (__stxr(v44 + 1, v43));
    }
    v45 = v100[0];
    if (*v100[0]
    {
      v47 = v46;
      v48 = (std::__shared_weak_count *)v45[1];
      v104 = (void ***)v46;
      v105 = v48;
      if (v48)
      {
        v49 = (unint64_t *)&v48->__shared_owners_;
        do
          v50 = __ldxr(v49);
        while (__stxr(v50 + 1, v49));
      }
    }
    else
    {
      v48 = 0;
      v47 = 0;
      v104 = 0;
      v105 = 0;
    }
    LODWORD(v51) = *(_DWORD *)(v41 + 8);
    v94 = v48;
    if ((_DWORD)v51 == 1)
    {
      v52 = 0;
      v53 = (int *)v47[20];
      v54 = (float *)*((_QWORD *)v53 + 3);
      v55 = v53[2];
      v56 = v53 + 3;
      do
        v55 *= v56[v52++];
      while (v52 != 3);
      vDSP_vsmul(v54, 1, *(const float **)(v41 + 16), v54, 1, v55);
    }
    else
    {
      v57 = *((_DWORD *)v47 + 4);
      if ((_DWORD)v51 != v57)
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v51, v57);
      v58 = *((_DWORD *)v47 + 5);
      if (v58)
      {
        v59 = 0;
        v60 = 0;
        v61 = *((int *)v47 + 2) * (uint64_t)*((int *)v47 + 3);
        v62 = 4 * (int)v51 * v61;
        do
        {
          if ((_DWORD)v51)
          {
            v63 = 0;
            v64 = 0;
            v65 = v59;
            do
            {
              vDSP_vsmul((const float *)(*((_QWORD *)v47[20] + 3) + v65), 1, (const float *)(*(_QWORD *)(v41 + 16) + v63), (float *)(*((_QWORD *)v47[20] + 3) + v65), 1, v61);
              ++v64;
              v51 = *((int *)v47 + 4);
              v63 += 4;
              v65 += 4 * v61;
            }
            while (v64 < v51);
            v58 = *((_DWORD *)v47 + 5);
          }
          ++v60;
          v59 += v62;
        }
        while (v60 < v58);
      }
    }
    v39 = v95;
    if (v94)
    {
      v66 = (unint64_t *)&v94->__shared_owners_;
      do
        v67 = __ldaxr(v66);
      while (__stlxr(v67 - 1, v66));
      if (!v67)
      {
        ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
        std::__shared_weak_count::__release_weak(v94);
      }
    }
    if (v96)
    {
      v68 = (unint64_t *)&v96->__shared_owners_;
      do
        v69 = __ldaxr(v68);
      while (__stlxr(v69 - 1, v68));
      if (!v69)
      {
        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
        std::__shared_weak_count::__release_weak(v96);
      }
    }
  }
  v70 = *(std::__shared_weak_count **)(v39 + 384);
  if (v70)
  {
    v71 = (unint64_t *)&v70->__shared_owners_;
    do
      v72 = __ldxr(v71);
    while (__stxr(v72 + 1, v71));
  }
  v73 = *a3;
  if (a3[1] != *a3)
  {
    v74 = 0;
    do
    {
      v75 = *(const void **)(v73 + 16 * v74);
      if (v75
      {
        v77 = (uint64_t)v76;
        v104 = (void ***)v76;
        v78 = *(std::__shared_weak_count **)(v73 + 16 * v74 + 8);
        v105 = v78;
        if (v78)
        {
          v79 = (unint64_t *)&v78->__shared_owners_;
          do
            v80 = __ldxr(v79);
          while (__stxr(v80 + 1, v79));
        }
      }
      else
      {
        v77 = 0;
        v104 = 0;
        v105 = 0;
      }
      v81 = v100[0];
      v82 = v100[0][2 * v74];
      if (v82
      {
        v102 = v83;
        v84 = (std::__shared_weak_count *)v81[2 * v74 + 1];
        v103 = v84;
        if (v84)
        {
          v85 = (unint64_t *)&v84->__shared_owners_;
          do
            v86 = __ldxr(v85);
          while (__stxr(v86 + 1, v85));
        }
      }
      else
      {
        v84 = 0;
        v83 = 0;
        v102 = 0;
        v103 = 0;
      }
      v40.n128_u64[0] = Espresso::QuantSimEngine::blob_container::copy_from_fp32(v77, (uint64_t)v83 + 160, 1.0);
      if (v84)
      {
        v87 = (unint64_t *)&v84->__shared_owners_;
        do
          v88 = __ldaxr(v87);
        while (__stlxr(v88 - 1, v87));
        if (!v88)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v84->__on_zero_shared)(v84, v40);
          std::__shared_weak_count::__release_weak(v84);
        }
      }
      v89 = v105;
      if (v105)
      {
        v90 = (unint64_t *)&v105->__shared_owners_;
        do
          v91 = __ldaxr(v90);
        while (__stlxr(v91 - 1, v90));
        if (!v91)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v89->__on_zero_shared)(v89, v40);
          std::__shared_weak_count::__release_weak(v89);
        }
      }
      ++v74;
      v73 = *a3;
    }
    while (v74 < (a3[1] - *a3) >> 4);
  }
  if (v70)
  {
    v92 = (unint64_t *)&v70->__shared_owners_;
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v70->__on_zero_shared)(v70, v40);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  v104 = v100;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v104);
  v100[0] = (void **)v101;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v100);
}

void sub_191611294(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  *(_QWORD *)(v25 - 104) = &a22;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 104));
  a22 = (void **)&a25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a22);
  _Unwind_Resume(a1);
}

void *wrapper_kernel<Espresso::dynamic_dequantize_kernel_cpu,Espresso::dynamic_dequantize_params_t>::__set_weight_raw_blob(void *a1, uint64_t a2, _BYTE *a3, const void *a4, unint64_t a5)
{
  _BYTE *v7;
  void *result;
  int v10;
  uint64_t v12;
  std::__shared_weak_count *size;
  unint64_t *v14;
  unint64_t v15;
  std::runtime_error *exception;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  std::string v39;
  _QWORD v40[2];
  unsigned __int8 v41;
  _QWORD v42[2];
  unsigned __int8 v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;

  v7 = a3;
  result = Espresso::generic_dynamic_dequantize_kernel::__set_weight_raw_blob(a1, a2, a3, a4, a5);
  v10 = (char)v7[23];
  if (v10 < 0)
  {
    if (*((_QWORD *)v7 + 1) != 10)
      return result;
    v7 = *(_BYTE **)v7;
  }
  else if (v10 != 10)
  {
    return result;
  }
  if (*(_QWORD *)v7 == 0x6163735F74736F70 && *((_WORD *)v7 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    v12 = (uint64_t)a1 + 392;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v12, (__int128 *)&v52);
    size = (std::__shared_weak_count *)v52.__r_.__value_.__l.__size_;
    if (v52.__r_.__value_.__l.__size_)
    {
      v14 = (unint64_t *)(v52.__r_.__value_.__l.__size_ + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    if (a5 != 4 * *(int *)(*(_QWORD *)v12 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v45, a5);
      v17 = std::string::insert(&v45, 0, "Unexpected size s=");
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      v19 = std::string::append(&v46, "/blob=");
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, 4 * *(int *)(*(_QWORD *)v12 + 8));
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v21 = &v44;
      else
        v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      else
        v22 = v44.__r_.__value_.__l.__size_;
      v23 = std::string::append(&v47, (const std::string::value_type *)v21, v22);
      v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, " @ ");
      if ((v43 & 0x80u) == 0)
        v25 = (const std::string::value_type *)v42;
      else
        v25 = (const std::string::value_type *)v42[0];
      if ((v43 & 0x80u) == 0)
        v26 = v43;
      else
        v26 = v42[1];
      v27 = std::string::append(&v48, v25, v26);
      v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      v29 = std::string::append(&v49, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v40, ":");
      if ((v41 & 0x80u) == 0)
        v31 = (const std::string::value_type *)v40;
      else
        v31 = (const std::string::value_type *)v40[0];
      if ((v41 & 0x80u) == 0)
        v32 = v41;
      else
        v32 = v40[1];
      v33 = std::string::append(&v50, v31, v32);
      v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, 197);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = &v39;
      else
        v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      else
        v36 = v39.__r_.__value_.__l.__size_;
      v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
      v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v52);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    return memcpy(*(void **)(*(_QWORD *)v12 + 16), a4, a5);
  }
  return result;
}

void sub_191611650(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  void *v59;
  int v60;
  uint64_t v61;

  if (*(char *)(v61 - 57) < 0)
    operator delete(*(void **)(v61 - 80));
  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v61 - 89) < 0)
    operator delete(*(void **)(v61 - 112));
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v61 - 121) < 0)
    operator delete(*(void **)(v61 - 144));
  if (*(char *)(v61 - 153) < 0)
    operator delete(*(void **)(v61 - 176));
  if (a27 < 0)
    operator delete(a22);
  if (a59 < 0)
    operator delete(a54);
  if (a33 < 0)
    operator delete(a28);
  if (a52 < 0)
    operator delete(a47);
  if (a45 < 0)
    operator delete(a40);
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0)
LABEL_28:
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

BOOL wrapper_kernel<Espresso::dynamic_dequantize_kernel_cpu,Espresso::dynamic_dequantize_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  int v4;

  v2 = a2;
  if ((Espresso::generic_dynamic_dequantize_kernel::supports_weight_key(a1, a2) & 1) != 0)
    return 1;
  v4 = *((char *)v2 + 23);
  if (v4 < 0)
  {
    if (v2[1] != 10)
      return 0;
    v2 = (uint64_t *)*v2;
  }
  else if (v4 != 10)
  {
    return 0;
  }
  return *v2 == 0x6163735F74736F70 && *((_WORD *)v2 + 4) == 25964;
}

const char *Espresso::generic_dynamic_dequantize_kernel::kernel_type_str(Espresso::generic_dynamic_dequantize_kernel *this)
{
  return "dynamic_dequantize";
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::dynamic_dequantize_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

void wrapper_kernel<Espresso::dynamic_dequantize_kernel_cpu,Espresso::dynamic_dequantize_params_t>::convert_layer_data_to_fp32(_QWORD *a1, char **a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v9;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  const void *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  __int128 v43;
  int64x2_t v44;
  char *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  __int128 v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  int64x2_t v59;
  char *v60;
  _QWORD *v61;
  void *__p;
  void *v63;
  __int128 v64;
  const void *v65;
  std::__shared_weak_count *v66;

  if (a3 != a4)
  {
    v9 = a3;
    v12 = a2 + 2;
    while (1)
    {
      v14 = *(const void **)v9;
      v13 = *(std::__shared_weak_count **)(v9 + 8);
      v65 = *(const void **)v9;
      v66 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
      }
      v17 = operator new(0x118uLL);
      v17[1] = 0;
      v17[2] = 0;
      *v17 = &off_1E2DC1868;
      Espresso::blob_cpu::blob_cpu((uint64_t)(v17 + 3), a1);
      *(_QWORD *)&v64 = v17 + 3;
      *((_QWORD *)&v64 + 1) = v17;
      Espresso::abstract_blob_container::shape((char *)&v58, (uint64_t)v14);
      v56 = 0;
      v57 = 0;
      (*(void (**)(_QWORD *, uint64_t *, uint64_t *))(v17[3] + 16))(v17 + 3, &v58, &v56);
      v18 = v57;
      if (v57)
      {
        v19 = (unint64_t *)&v57->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if (__p)
      {
        v63 = __p;
        operator delete(__p);
      }
      if (v65)
      {
        if (v21)
          break;
      }
      v21 = 0;
      v55 = 0;
      if (a5)
        goto LABEL_21;
LABEL_28:
      v27 = v64;
      if (*((_QWORD *)&v64 + 1))
      {
        v28 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v31 = a2[1];
      v30 = (unint64_t)a2[2];
      if ((unint64_t)v31 >= v30)
      {
        v54 = v27;
        v33 = (v31 - *a2) >> 4;
        if ((unint64_t)(v33 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v34 = v30 - (_QWORD)*a2;
        v35 = v34 >> 3;
        if (v34 >> 3 <= (unint64_t)(v33 + 1))
          v35 = v33 + 1;
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0)
          v36 = 0xFFFFFFFFFFFFFFFLL;
        else
          v36 = v35;
        v61 = v12;
        v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v36);
        v39 = &v37[16 * v33];
        *(_OWORD *)v39 = v54;
        v41 = *a2;
        v40 = a2[1];
        if (v40 == *a2)
        {
          v44 = vdupq_n_s64((unint64_t)v40);
          v42 = &v37[16 * v33];
        }
        else
        {
          v42 = &v37[16 * v33];
          do
          {
            v43 = *((_OWORD *)v40 - 1);
            v40 -= 16;
            *((_OWORD *)v42 - 1) = v43;
            v42 -= 16;
            *(_QWORD *)v40 = 0;
            *((_QWORD *)v40 + 1) = 0;
          }
          while (v40 != v41);
          v44 = *(int64x2_t *)a2;
        }
        v32 = v39 + 16;
        *a2 = v42;
        a2[1] = v39 + 16;
        v59 = v44;
        v45 = a2[2];
        a2[2] = &v37[16 * v38];
        v60 = v45;
        v58 = v44.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v58);
      }
      else
      {
        *(_OWORD *)v31 = v27;
        v32 = v31 + 16;
      }
      a2[1] = v32;
      if (v55)
      {
        v46 = (unint64_t *)&v55->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      v48 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
      if (*((_QWORD *)&v64 + 1))
      {
        v49 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      v51 = v66;
      if (v66)
      {
        v52 = (unint64_t *)&v66->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v9 += 16;
      if (v9 == a4)
        return;
    }
    v55 = v66;
    if (v66)
    {
      v22 = (unint64_t *)&v66->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    if (!a5)
      goto LABEL_28;
LABEL_21:
    if (a6)
    {
      v58 = 0;
      v59.i64[0] = 0;
      (*(void (**)(void *, uint64_t *, uint64_t))(*(_QWORD *)v21 + 40))(v21, &v58, v64 + 160);
      v24 = (std::__shared_weak_count *)v59.i64[0];
      if (v59.i64[0])
      {
        v25 = (unint64_t *)(v59.i64[0] + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v21, v64 + 160, 1.0);
    }
    goto LABEL_28;
  }
}

void sub_191611BE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::dynamic_dequantize_kernel_cpu,Espresso::dynamic_dequantize_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB53C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::dynamic_dequantize_kernel_cpu,Espresso::dynamic_dequantize_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB53C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::dynamic_dequantize_kernel_cpu,Espresso::dynamic_dequantize_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_33@<Q0>(uint64_t *a1@<X1>, _QWORD *a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  __n128 result;

  v6 = (char *)operator new(0x158uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DB5270;
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((_QWORD *)v6 + 38) = *a2;
  *((_QWORD *)v6 + 3) = &off_1E2D54790;
  *(_OWORD *)(v6 + 312) = 0u;
  *(_OWORD *)(v6 + 328) = 0u;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v6 + 39, *a1, a1[1]);
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_191611D48(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::dynamic_quantize_kernel_cpu,Espresso::dynamic_quantize_params_t>::~wrapper_kernel(Espresso::base_kernel *a1)
{
  *(_QWORD *)a1 = &off_1E2D54790;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 304);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 288);
  Espresso::base_kernel::~base_kernel(a1);
}

{
  *(_QWORD *)a1 = &off_1E2D54790;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 304);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 288);
  Espresso::base_kernel::~base_kernel(a1);
  JUMPOUT(0x19401CD90);
}

void wrapper_kernel<Espresso::dynamic_quantize_kernel_cpu,Espresso::dynamic_quantize_params_t>::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  _BOOL4 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  float *v31;
  vDSP_Length v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  __n128 v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  void **v45;
  void **v46;
  void **v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  int *v53;
  float *v54;
  vDSP_Length v55;
  int *v56;
  int v57;
  int v58;
  uint64_t v59;
  unint64_t v60;
  vDSP_Length v61;
  vDSP_Length v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  const void *v75;
  void **v76;
  uint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  void **v81;
  const void *v82;
  void *v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  uint64_t v95;
  std::__shared_weak_count *v96;
  float __B;
  _QWORD v98[2];
  _QWORD v99[2];
  void **v100[3];
  char *v101[3];
  void *v102;
  std::__shared_weak_count *v103;
  void ***v104;
  std::__shared_weak_count *v105;

  memset(v101, 0, sizeof(v101));
  memset(v100, 0, sizeof(v100));
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)*a3 + 32))(*(_QWORD *)*a3))
    v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)*a3 + 32))(*(_QWORD *)*a3) == 1;
  else
    v8 = 1;
  v9 = *(std::__shared_weak_count **)(a1 + 296);
  v99[0] = *(_QWORD *)(a1 + 288);
  v99[1] = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  wrapper_kernel<Espresso::dynamic_quantize_kernel_cpu,Espresso::dynamic_quantize_params_t>::convert_layer_data_to_fp32(v99, v101, *a4, a4[1], 1, v8);
  if (v9)
  {
    v12 = (unint64_t *)&v9->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v14 = *(std::__shared_weak_count **)(a1 + 296);
  v98[0] = *(_QWORD *)(a1 + 288);
  v98[1] = v14;
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  wrapper_kernel<Espresso::dynamic_quantize_kernel_cpu,Espresso::dynamic_quantize_params_t>::convert_layer_data_to_fp32(v98, (char **)v100, *a3, a3[1], 0, 0);
  if (v14)
  {
    v17 = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v95 = a1;
  v19 = *a4;
  if (a4[1] != *a4)
  {
    v20 = 0;
    do
    {
      if (!v8
        && (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v19 + 16 * v20) + 32))(*(_QWORD *)(v19 + 16 * v20))
         || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(*a4 + 16 * v20) + 32))(*(_QWORD *)(*a4 + 16 * v20)) == 1))
      {
        __B = *(float *)(*(_QWORD *)(*a4 + 16 * v20) + 112);
        v21 = &v101[0][16 * v20];
        v104 = (void ***)v22;
        v23 = (std::__shared_weak_count *)*((_QWORD *)v21 + 1);
        v105 = v23;
        if (v23)
        {
          v24 = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
        }
        v26 = *((_QWORD *)v22 + 20);
        v27 = (std::__shared_weak_count *)*((_QWORD *)v22 + 21);
        v102 = (void *)v26;
        v103 = v27;
        if (v27)
        {
          v28 = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldxr(v28);
          while (__stxr(v29 + 1, v28));
        }
        v30 = 0;
        v31 = *(float **)(v26 + 24);
        v32 = *(int *)(v26 + 8);
        v33 = v26 + 12;
        do
        {
          v32 *= *(int *)(v33 + v30);
          v30 += 4;
        }
        while (v30 != 12);
        vDSP_vsmul(v31, 1, &__B, v31, 1, v32);
        if (v27)
        {
          v34 = (unint64_t *)&v27->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        v36 = v105;
        if (v105)
        {
          v37 = (unint64_t *)&v105->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
      }
      ++v20;
      v19 = *a4;
    }
    while (v20 < (a4[1] - *a4) >> 4);
  }
  v39 = v95;
  Espresso::dynamic_quantize_kernel_cpu::__launch((_DWORD *)v95, a2, (uint64_t **)v100, (uint64_t **)v101);
  v41 = *(_QWORD *)(v95 + 304);
  if (v41)
  {
    v42 = *(std::__shared_weak_count **)(v95 + 312);
    v96 = v42;
    if (v42)
    {
      v43 = (unint64_t *)&v42->__shared_owners_;
      do
        v44 = __ldxr(v43);
      while (__stxr(v44 + 1, v43));
    }
    v45 = v100[0];
    if (*v100[0]
    {
      v47 = v46;
      v48 = (std::__shared_weak_count *)v45[1];
      v104 = (void ***)v46;
      v105 = v48;
      if (v48)
      {
        v49 = (unint64_t *)&v48->__shared_owners_;
        do
          v50 = __ldxr(v49);
        while (__stxr(v50 + 1, v49));
      }
    }
    else
    {
      v48 = 0;
      v47 = 0;
      v104 = 0;
      v105 = 0;
    }
    LODWORD(v51) = *(_DWORD *)(v41 + 8);
    v94 = v48;
    if ((_DWORD)v51 == 1)
    {
      v52 = 0;
      v53 = (int *)v47[20];
      v54 = (float *)*((_QWORD *)v53 + 3);
      v55 = v53[2];
      v56 = v53 + 3;
      do
        v55 *= v56[v52++];
      while (v52 != 3);
      vDSP_vsmul(v54, 1, *(const float **)(v41 + 16), v54, 1, v55);
    }
    else
    {
      v57 = *((_DWORD *)v47 + 4);
      if ((_DWORD)v51 != v57)
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v51, v57);
      v58 = *((_DWORD *)v47 + 5);
      if (v58)
      {
        v59 = 0;
        v60 = 0;
        v61 = *((int *)v47 + 2) * (uint64_t)*((int *)v47 + 3);
        v62 = 4 * (int)v51 * v61;
        do
        {
          if ((_DWORD)v51)
          {
            v63 = 0;
            v64 = 0;
            v65 = v59;
            do
            {
              vDSP_vsmul((const float *)(*((_QWORD *)v47[20] + 3) + v65), 1, (const float *)(*(_QWORD *)(v41 + 16) + v63), (float *)(*((_QWORD *)v47[20] + 3) + v65), 1, v61);
              ++v64;
              v51 = *((int *)v47 + 4);
              v63 += 4;
              v65 += 4 * v61;
            }
            while (v64 < v51);
            v58 = *((_DWORD *)v47 + 5);
          }
          ++v60;
          v59 += v62;
        }
        while (v60 < v58);
      }
    }
    v39 = v95;
    if (v94)
    {
      v66 = (unint64_t *)&v94->__shared_owners_;
      do
        v67 = __ldaxr(v66);
      while (__stlxr(v67 - 1, v66));
      if (!v67)
      {
        ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
        std::__shared_weak_count::__release_weak(v94);
      }
    }
    if (v96)
    {
      v68 = (unint64_t *)&v96->__shared_owners_;
      do
        v69 = __ldaxr(v68);
      while (__stlxr(v69 - 1, v68));
      if (!v69)
      {
        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
        std::__shared_weak_count::__release_weak(v96);
      }
    }
  }
  v70 = *(std::__shared_weak_count **)(v39 + 296);
  if (v70)
  {
    v71 = (unint64_t *)&v70->__shared_owners_;
    do
      v72 = __ldxr(v71);
    while (__stxr(v72 + 1, v71));
  }
  v73 = *a3;
  if (a3[1] != *a3)
  {
    v74 = 0;
    do
    {
      v75 = *(const void **)(v73 + 16 * v74);
      if (v75
      {
        v77 = (uint64_t)v76;
        v104 = (void ***)v76;
        v78 = *(std::__shared_weak_count **)(v73 + 16 * v74 + 8);
        v105 = v78;
        if (v78)
        {
          v79 = (unint64_t *)&v78->__shared_owners_;
          do
            v80 = __ldxr(v79);
          while (__stxr(v80 + 1, v79));
        }
      }
      else
      {
        v77 = 0;
        v104 = 0;
        v105 = 0;
      }
      v81 = v100[0];
      v82 = v100[0][2 * v74];
      if (v82
      {
        v102 = v83;
        v84 = (std::__shared_weak_count *)v81[2 * v74 + 1];
        v103 = v84;
        if (v84)
        {
          v85 = (unint64_t *)&v84->__shared_owners_;
          do
            v86 = __ldxr(v85);
          while (__stxr(v86 + 1, v85));
        }
      }
      else
      {
        v84 = 0;
        v83 = 0;
        v102 = 0;
        v103 = 0;
      }
      v40.n128_u64[0] = Espresso::QuantSimEngine::blob_container::copy_from_fp32(v77, (uint64_t)v83 + 160, 1.0);
      if (v84)
      {
        v87 = (unint64_t *)&v84->__shared_owners_;
        do
          v88 = __ldaxr(v87);
        while (__stlxr(v88 - 1, v87));
        if (!v88)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v84->__on_zero_shared)(v84, v40);
          std::__shared_weak_count::__release_weak(v84);
        }
      }
      v89 = v105;
      if (v105)
      {
        v90 = (unint64_t *)&v105->__shared_owners_;
        do
          v91 = __ldaxr(v90);
        while (__stlxr(v91 - 1, v90));
        if (!v91)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v89->__on_zero_shared)(v89, v40);
          std::__shared_weak_count::__release_weak(v89);
        }
      }
      ++v74;
      v73 = *a3;
    }
    while (v74 < (a3[1] - *a3) >> 4);
  }
  if (v70)
  {
    v92 = (unint64_t *)&v70->__shared_owners_;
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v70->__on_zero_shared)(v70, v40);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  v104 = v100;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v104);
  v100[0] = (void **)v101;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v100);
}

void sub_1916124C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  *(_QWORD *)(v25 - 104) = &a22;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 104));
  a22 = (void **)&a25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a22);
  _Unwind_Resume(a1);
}

void *wrapper_kernel<Espresso::dynamic_quantize_kernel_cpu,Espresso::dynamic_quantize_params_t>::__set_weight_raw_blob(void *result, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  void *v7;
  int v8;
  uint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::runtime_error *exception;
  unint64_t v15;
  std::runtime_error *v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  std::string v39;
  _QWORD v40[2];
  unsigned __int8 v41;
  _QWORD v42[2];
  unsigned __int8 v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;

  v7 = result;
  v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10)
      return result;
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    v10 = (uint64_t)v7 + 304;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v10, (__int128 *)&v52);
    size = (std::__shared_weak_count *)v52.__r_.__value_.__l.__size_;
    if (v52.__r_.__value_.__l.__size_)
    {
      v12 = (unint64_t *)(v52.__r_.__value_.__l.__size_ + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    if (a5 != 4 * *(int *)(*(_QWORD *)v10 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      v15 = a5;
      v16 = exception;
      std::to_string(&v45, v15);
      v17 = std::string::insert(&v45, 0, "Unexpected size s=");
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      v19 = std::string::append(&v46, "/blob=");
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, 4 * *(int *)(*(_QWORD *)v10 + 8));
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v21 = &v44;
      else
        v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      else
        v22 = v44.__r_.__value_.__l.__size_;
      v23 = std::string::append(&v47, (const std::string::value_type *)v21, v22);
      v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, " @ ");
      if ((v43 & 0x80u) == 0)
        v25 = (const std::string::value_type *)v42;
      else
        v25 = (const std::string::value_type *)v42[0];
      if ((v43 & 0x80u) == 0)
        v26 = v43;
      else
        v26 = v42[1];
      v27 = std::string::append(&v48, v25, v26);
      v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      v29 = std::string::append(&v49, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v40, ":");
      if ((v41 & 0x80u) == 0)
        v31 = (const std::string::value_type *)v40;
      else
        v31 = (const std::string::value_type *)v40[0];
      if ((v41 & 0x80u) == 0)
        v32 = v41;
      else
        v32 = v40[1];
      v33 = std::string::append(&v50, v31, v32);
      v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, 197);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = &v39;
      else
        v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      else
        v36 = v39.__r_.__value_.__l.__size_;
      v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
      v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v16, &v52);
      __cxa_throw(v16, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    return memcpy(*(void **)(*(_QWORD *)v10 + 16), a4, a5);
  }
  return result;
}

void sub_19161287C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  void *v59;
  int v60;
  uint64_t v61;

  if (*(char *)(v61 - 57) < 0)
    operator delete(*(void **)(v61 - 80));
  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v61 - 89) < 0)
    operator delete(*(void **)(v61 - 112));
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v61 - 121) < 0)
    operator delete(*(void **)(v61 - 144));
  if (*(char *)(v61 - 153) < 0)
    operator delete(*(void **)(v61 - 176));
  if (a27 < 0)
    operator delete(a22);
  if (a59 < 0)
    operator delete(a54);
  if (a33 < 0)
    operator delete(a28);
  if (a52 < 0)
    operator delete(a47);
  if (a45 < 0)
    operator delete(a40);
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0)
LABEL_28:
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

BOOL wrapper_kernel<Espresso::dynamic_quantize_kernel_cpu,Espresso::dynamic_quantize_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2;

  v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10)
      return 0;
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

const char *Espresso::generic_dynamic_quantize_kernel::kernel_type_str(Espresso::generic_dynamic_quantize_kernel *this)
{
  return "dynamic_quantize";
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::dynamic_quantize_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

void wrapper_kernel<Espresso::dynamic_quantize_kernel_cpu,Espresso::dynamic_quantize_params_t>::convert_layer_data_to_fp32(_QWORD *a1, char **a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v9;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  const void *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  __int128 v43;
  int64x2_t v44;
  char *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  __int128 v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  int64x2_t v59;
  char *v60;
  _QWORD *v61;
  void *__p;
  void *v63;
  __int128 v64;
  const void *v65;
  std::__shared_weak_count *v66;

  if (a3 != a4)
  {
    v9 = a3;
    v12 = a2 + 2;
    while (1)
    {
      v14 = *(const void **)v9;
      v13 = *(std::__shared_weak_count **)(v9 + 8);
      v65 = *(const void **)v9;
      v66 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
      }
      v17 = operator new(0x118uLL);
      v17[1] = 0;
      v17[2] = 0;
      *v17 = &off_1E2DC1868;
      Espresso::blob_cpu::blob_cpu((uint64_t)(v17 + 3), a1);
      *(_QWORD *)&v64 = v17 + 3;
      *((_QWORD *)&v64 + 1) = v17;
      Espresso::abstract_blob_container::shape((char *)&v58, (uint64_t)v14);
      v56 = 0;
      v57 = 0;
      (*(void (**)(_QWORD *, uint64_t *, uint64_t *))(v17[3] + 16))(v17 + 3, &v58, &v56);
      v18 = v57;
      if (v57)
      {
        v19 = (unint64_t *)&v57->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if (__p)
      {
        v63 = __p;
        operator delete(__p);
      }
      if (v65)
      {
        if (v21)
          break;
      }
      v21 = 0;
      v55 = 0;
      if (a5)
        goto LABEL_21;
LABEL_28:
      v27 = v64;
      if (*((_QWORD *)&v64 + 1))
      {
        v28 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v31 = a2[1];
      v30 = (unint64_t)a2[2];
      if ((unint64_t)v31 >= v30)
      {
        v54 = v27;
        v33 = (v31 - *a2) >> 4;
        if ((unint64_t)(v33 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v34 = v30 - (_QWORD)*a2;
        v35 = v34 >> 3;
        if (v34 >> 3 <= (unint64_t)(v33 + 1))
          v35 = v33 + 1;
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0)
          v36 = 0xFFFFFFFFFFFFFFFLL;
        else
          v36 = v35;
        v61 = v12;
        v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v36);
        v39 = &v37[16 * v33];
        *(_OWORD *)v39 = v54;
        v41 = *a2;
        v40 = a2[1];
        if (v40 == *a2)
        {
          v44 = vdupq_n_s64((unint64_t)v40);
          v42 = &v37[16 * v33];
        }
        else
        {
          v42 = &v37[16 * v33];
          do
          {
            v43 = *((_OWORD *)v40 - 1);
            v40 -= 16;
            *((_OWORD *)v42 - 1) = v43;
            v42 -= 16;
            *(_QWORD *)v40 = 0;
            *((_QWORD *)v40 + 1) = 0;
          }
          while (v40 != v41);
          v44 = *(int64x2_t *)a2;
        }
        v32 = v39 + 16;
        *a2 = v42;
        a2[1] = v39 + 16;
        v59 = v44;
        v45 = a2[2];
        a2[2] = &v37[16 * v38];
        v60 = v45;
        v58 = v44.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v58);
      }
      else
      {
        *(_OWORD *)v31 = v27;
        v32 = v31 + 16;
      }
      a2[1] = v32;
      if (v55)
      {
        v46 = (unint64_t *)&v55->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      v48 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
      if (*((_QWORD *)&v64 + 1))
      {
        v49 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      v51 = v66;
      if (v66)
      {
        v52 = (unint64_t *)&v66->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v9 += 16;
      if (v9 == a4)
        return;
    }
    v55 = v66;
    if (v66)
    {
      v22 = (unint64_t *)&v66->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    if (!a5)
      goto LABEL_28;
LABEL_21:
    if (a6)
    {
      v58 = 0;
      v59.i64[0] = 0;
      (*(void (**)(void *, uint64_t *, uint64_t))(*(_QWORD *)v21 + 40))(v21, &v58, v64 + 160);
      v24 = (std::__shared_weak_count *)v59.i64[0];
      if (v59.i64[0])
      {
        v25 = (unint64_t *)(v59.i64[0] + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v21, v64 + 160, 1.0);
    }
    goto LABEL_28;
  }
}

void sub_191612DEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::dynamic_quantize_kernel_cpu,Espresso::dynamic_quantize_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB5270;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::dynamic_quantize_kernel_cpu,Espresso::dynamic_quantize_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB5270;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::dynamic_quantize_kernel_cpu,Espresso::dynamic_quantize_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_32@<Q0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  uint64_t v7;
  __n128 result;

  v6 = (char *)operator new(0x158uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DB44A8;
  v7 = *a2;
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((_DWORD *)v6 + 76) = v7;
  v6[308] = BYTE4(v7);
  *((_QWORD *)v6 + 3) = &off_1E2D4F070;
  *(_OWORD *)(v6 + 312) = 0u;
  *(_OWORD *)(v6 + 328) = 0u;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v6 + 39, *a1, a1[1]);
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_191612F54(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::alloc_kernel_cpu,Espresso::alloc_params_t>::~wrapper_kernel(Espresso::base_kernel *a1)
{
  *(_QWORD *)a1 = &off_1E2D4F070;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 304);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 288);
  Espresso::base_kernel::~base_kernel(a1);
}

{
  *(_QWORD *)a1 = &off_1E2D4F070;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 304);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 288);
  Espresso::base_kernel::~base_kernel(a1);
  JUMPOUT(0x19401CD90);
}

void wrapper_kernel<Espresso::alloc_kernel_cpu,Espresso::alloc_params_t>::__launch(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  _BOOL4 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  float *v31;
  vDSP_Length v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  __n128 v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  void **v45;
  void **v46;
  void **v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  int *v53;
  float *v54;
  vDSP_Length v55;
  int *v56;
  int v57;
  int v58;
  uint64_t v59;
  unint64_t v60;
  vDSP_Length v61;
  vDSP_Length v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  const void *v75;
  void **v76;
  uint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  void **v81;
  const void *v82;
  void *v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  uint64_t v95;
  std::__shared_weak_count *v96;
  float __B;
  _QWORD v98[2];
  _QWORD v99[2];
  void **v100[3];
  char *v101[3];
  void *v102;
  std::__shared_weak_count *v103;
  void ***v104;
  std::__shared_weak_count *v105;

  memset(v101, 0, sizeof(v101));
  memset(v100, 0, sizeof(v100));
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)*a3 + 32))(*(_QWORD *)*a3))
    v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)*a3 + 32))(*(_QWORD *)*a3) == 1;
  else
    v8 = 1;
  v9 = *(std::__shared_weak_count **)(a1 + 296);
  v99[0] = *(_QWORD *)(a1 + 288);
  v99[1] = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  wrapper_kernel<Espresso::alloc_kernel_cpu,Espresso::alloc_params_t>::convert_layer_data_to_fp32(v99, v101, *a4, a4[1], 1, v8);
  if (v9)
  {
    v12 = (unint64_t *)&v9->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v14 = *(std::__shared_weak_count **)(a1 + 296);
  v98[0] = *(_QWORD *)(a1 + 288);
  v98[1] = v14;
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  wrapper_kernel<Espresso::alloc_kernel_cpu,Espresso::alloc_params_t>::convert_layer_data_to_fp32(v98, (char **)v100, *a3, a3[1], 0, 0);
  if (v14)
  {
    v17 = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v95 = a1;
  v19 = *a4;
  if (a4[1] != *a4)
  {
    v20 = 0;
    do
    {
      if (!v8
        && (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v19 + 16 * v20) + 32))(*(_QWORD *)(v19 + 16 * v20))
         || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(*a4 + 16 * v20) + 32))(*(_QWORD *)(*a4 + 16 * v20)) == 1))
      {
        __B = *(float *)(*(_QWORD *)(*a4 + 16 * v20) + 112);
        v21 = &v101[0][16 * v20];
        v104 = (void ***)v22;
        v23 = (std::__shared_weak_count *)*((_QWORD *)v21 + 1);
        v105 = v23;
        if (v23)
        {
          v24 = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
        }
        v26 = *((_QWORD *)v22 + 20);
        v27 = (std::__shared_weak_count *)*((_QWORD *)v22 + 21);
        v102 = (void *)v26;
        v103 = v27;
        if (v27)
        {
          v28 = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldxr(v28);
          while (__stxr(v29 + 1, v28));
        }
        v30 = 0;
        v31 = *(float **)(v26 + 24);
        v32 = *(int *)(v26 + 8);
        v33 = v26 + 12;
        do
        {
          v32 *= *(int *)(v33 + v30);
          v30 += 4;
        }
        while (v30 != 12);
        vDSP_vsmul(v31, 1, &__B, v31, 1, v32);
        if (v27)
        {
          v34 = (unint64_t *)&v27->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        v36 = v105;
        if (v105)
        {
          v37 = (unint64_t *)&v105->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
      }
      ++v20;
      v19 = *a4;
    }
    while (v20 < (a4[1] - *a4) >> 4);
  }
  v39 = v95;
  Espresso::alloc_kernel_cpu::__launch(v95, a2, (uint64_t **)v100, (uint64_t **)v101);
  v41 = *(_QWORD *)(v95 + 304);
  if (v41)
  {
    v42 = *(std::__shared_weak_count **)(v95 + 312);
    v96 = v42;
    if (v42)
    {
      v43 = (unint64_t *)&v42->__shared_owners_;
      do
        v44 = __ldxr(v43);
      while (__stxr(v44 + 1, v43));
    }
    v45 = v100[0];
    if (*v100[0]
    {
      v47 = v46;
      v48 = (std::__shared_weak_count *)v45[1];
      v104 = (void ***)v46;
      v105 = v48;
      if (v48)
      {
        v49 = (unint64_t *)&v48->__shared_owners_;
        do
          v50 = __ldxr(v49);
        while (__stxr(v50 + 1, v49));
      }
    }
    else
    {
      v48 = 0;
      v47 = 0;
      v104 = 0;
      v105 = 0;
    }
    LODWORD(v51) = *(_DWORD *)(v41 + 8);
    v94 = v48;
    if ((_DWORD)v51 == 1)
    {
      v52 = 0;
      v53 = (int *)v47[20];
      v54 = (float *)*((_QWORD *)v53 + 3);
      v55 = v53[2];
      v56 = v53 + 3;
      do
        v55 *= v56[v52++];
      while (v52 != 3);
      vDSP_vsmul(v54, 1, *(const float **)(v41 + 16), v54, 1, v55);
    }
    else
    {
      v57 = *((_DWORD *)v47 + 4);
      if ((_DWORD)v51 != v57)
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v51, v57);
      v58 = *((_DWORD *)v47 + 5);
      if (v58)
      {
        v59 = 0;
        v60 = 0;
        v61 = *((int *)v47 + 2) * (uint64_t)*((int *)v47 + 3);
        v62 = 4 * (int)v51 * v61;
        do
        {
          if ((_DWORD)v51)
          {
            v63 = 0;
            v64 = 0;
            v65 = v59;
            do
            {
              vDSP_vsmul((const float *)(*((_QWORD *)v47[20] + 3) + v65), 1, (const float *)(*(_QWORD *)(v41 + 16) + v63), (float *)(*((_QWORD *)v47[20] + 3) + v65), 1, v61);
              ++v64;
              v51 = *((int *)v47 + 4);
              v63 += 4;
              v65 += 4 * v61;
            }
            while (v64 < v51);
            v58 = *((_DWORD *)v47 + 5);
          }
          ++v60;
          v59 += v62;
        }
        while (v60 < v58);
      }
    }
    v39 = v95;
    if (v94)
    {
      v66 = (unint64_t *)&v94->__shared_owners_;
      do
        v67 = __ldaxr(v66);
      while (__stlxr(v67 - 1, v66));
      if (!v67)
      {
        ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
        std::__shared_weak_count::__release_weak(v94);
      }
    }
    if (v96)
    {
      v68 = (unint64_t *)&v96->__shared_owners_;
      do
        v69 = __ldaxr(v68);
      while (__stlxr(v69 - 1, v68));
      if (!v69)
      {
        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
        std::__shared_weak_count::__release_weak(v96);
      }
    }
  }
  v70 = *(std::__shared_weak_count **)(v39 + 296);
  if (v70)
  {
    v71 = (unint64_t *)&v70->__shared_owners_;
    do
      v72 = __ldxr(v71);
    while (__stxr(v72 + 1, v71));
  }
  v73 = *a3;
  if (a3[1] != *a3)
  {
    v74 = 0;
    do
    {
      v75 = *(const void **)(v73 + 16 * v74);
      if (v75
      {
        v77 = (uint64_t)v76;
        v104 = (void ***)v76;
        v78 = *(std::__shared_weak_count **)(v73 + 16 * v74 + 8);
        v105 = v78;
        if (v78)
        {
          v79 = (unint64_t *)&v78->__shared_owners_;
          do
            v80 = __ldxr(v79);
          while (__stxr(v80 + 1, v79));
        }
      }
      else
      {
        v77 = 0;
        v104 = 0;
        v105 = 0;
      }
      v81 = v100[0];
      v82 = v100[0][2 * v74];
      if (v82
      {
        v102 = v83;
        v84 = (std::__shared_weak_count *)v81[2 * v74 + 1];
        v103 = v84;
        if (v84)
        {
          v85 = (unint64_t *)&v84->__shared_owners_;
          do
            v86 = __ldxr(v85);
          while (__stxr(v86 + 1, v85));
        }
      }
      else
      {
        v84 = 0;
        v83 = 0;
        v102 = 0;
        v103 = 0;
      }
      v40.n128_u64[0] = Espresso::QuantSimEngine::blob_container::copy_from_fp32(v77, (uint64_t)v83 + 160, 1.0);
      if (v84)
      {
        v87 = (unint64_t *)&v84->__shared_owners_;
        do
          v88 = __ldaxr(v87);
        while (__stlxr(v88 - 1, v87));
        if (!v88)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v84->__on_zero_shared)(v84, v40);
          std::__shared_weak_count::__release_weak(v84);
        }
      }
      v89 = v105;
      if (v105)
      {
        v90 = (unint64_t *)&v105->__shared_owners_;
        do
          v91 = __ldaxr(v90);
        while (__stlxr(v91 - 1, v90));
        if (!v91)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v89->__on_zero_shared)(v89, v40);
          std::__shared_weak_count::__release_weak(v89);
        }
      }
      ++v74;
      v73 = *a3;
    }
    while (v74 < (a3[1] - *a3) >> 4);
  }
  if (v70)
  {
    v92 = (unint64_t *)&v70->__shared_owners_;
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v70->__on_zero_shared)(v70, v40);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  v104 = v100;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v104);
  v100[0] = (void **)v101;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v100);
}

void sub_1916136D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  *(_QWORD *)(v25 - 104) = &a22;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 104));
  a22 = (void **)&a25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a22);
  _Unwind_Resume(a1);
}

void Espresso::generic_alloc_kernel::top_shapes_for_bottom_shapes(uint64_t a1@<X0>, __int128 **a2@<X1>, _QWORD *a3@<X8>)
{
  __int128 v4;
  char *v5;
  __int128 v6;
  unint64_t v7;
  __int128 v8;
  void *__p[2];
  uint64_t v10;
  __int128 v11;

  *((_QWORD *)&v11 + 1) = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 284))
  {
    v10 = 0;
    *(_OWORD *)__p = 0u;
    v8 = 0u;
    *(_QWORD *)&v4 = 0x100000001;
    *((_QWORD *)&v4 + 1) = 0x100000001;
    v6 = v4;
    v7 = 0xFFFFFFFF00000001;
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    v5 = (char *)operator new(0x40uLL);
    *a3 = v5;
    a3[1] = v5;
    a3[2] = v5 + 64;
    a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), &v6, &v11, (uint64_t)v5);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    std::vector<Espresso::layer_shape>::__init_with_size[abi:ne180100]<Espresso::layer_shape*,Espresso::layer_shape*>(a3, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 6);
  }
}

void sub_19161388C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  uint64_t v17;
  uint64_t v18;

  *(_QWORD *)(v17 + 8) = v18;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a17 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *wrapper_kernel<Espresso::alloc_kernel_cpu,Espresso::alloc_params_t>::__set_weight_raw_blob(void *result, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  void *v7;
  int v8;
  uint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::runtime_error *exception;
  unint64_t v15;
  std::runtime_error *v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  std::string v39;
  _QWORD v40[2];
  unsigned __int8 v41;
  _QWORD v42[2];
  unsigned __int8 v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;

  v7 = result;
  v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10)
      return result;
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    v10 = (uint64_t)v7 + 304;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v10, (__int128 *)&v52);
    size = (std::__shared_weak_count *)v52.__r_.__value_.__l.__size_;
    if (v52.__r_.__value_.__l.__size_)
    {
      v12 = (unint64_t *)(v52.__r_.__value_.__l.__size_ + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    if (a5 != 4 * *(int *)(*(_QWORD *)v10 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      v15 = a5;
      v16 = exception;
      std::to_string(&v45, v15);
      v17 = std::string::insert(&v45, 0, "Unexpected size s=");
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      v19 = std::string::append(&v46, "/blob=");
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, 4 * *(int *)(*(_QWORD *)v10 + 8));
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v21 = &v44;
      else
        v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      else
        v22 = v44.__r_.__value_.__l.__size_;
      v23 = std::string::append(&v47, (const std::string::value_type *)v21, v22);
      v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, " @ ");
      if ((v43 & 0x80u) == 0)
        v25 = (const std::string::value_type *)v42;
      else
        v25 = (const std::string::value_type *)v42[0];
      if ((v43 & 0x80u) == 0)
        v26 = v43;
      else
        v26 = v42[1];
      v27 = std::string::append(&v48, v25, v26);
      v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      v29 = std::string::append(&v49, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v40, ":");
      if ((v41 & 0x80u) == 0)
        v31 = (const std::string::value_type *)v40;
      else
        v31 = (const std::string::value_type *)v40[0];
      if ((v41 & 0x80u) == 0)
        v32 = v41;
      else
        v32 = v40[1];
      v33 = std::string::append(&v50, v31, v32);
      v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, 197);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = &v39;
      else
        v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      else
        v36 = v39.__r_.__value_.__l.__size_;
      v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
      v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v16, &v52);
      __cxa_throw(v16, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    return memcpy(*(void **)(*(_QWORD *)v10 + 16), a4, a5);
  }
  return result;
}

void sub_191613BD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  void *v59;
  int v60;
  uint64_t v61;

  if (*(char *)(v61 - 57) < 0)
    operator delete(*(void **)(v61 - 80));
  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v61 - 89) < 0)
    operator delete(*(void **)(v61 - 112));
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v61 - 121) < 0)
    operator delete(*(void **)(v61 - 144));
  if (*(char *)(v61 - 153) < 0)
    operator delete(*(void **)(v61 - 176));
  if (a27 < 0)
    operator delete(a22);
  if (a59 < 0)
    operator delete(a54);
  if (a33 < 0)
    operator delete(a28);
  if (a52 < 0)
    operator delete(a47);
  if (a45 < 0)
    operator delete(a40);
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0)
LABEL_28:
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

BOOL wrapper_kernel<Espresso::alloc_kernel_cpu,Espresso::alloc_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2;

  v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10)
      return 0;
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

uint64_t Espresso::generic_alloc_kernel::has_dynamic_top_shape(Espresso::generic_alloc_kernel *this)
{
  return *((unsigned __int8 *)this + 284);
}

const char *Espresso::generic_alloc_kernel::kernel_type_str(Espresso::generic_alloc_kernel *this)
{
  return "alloc";
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::alloc_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

void wrapper_kernel<Espresso::alloc_kernel_cpu,Espresso::alloc_params_t>::convert_layer_data_to_fp32(_QWORD *a1, char **a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v9;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  const void *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  __int128 v43;
  int64x2_t v44;
  char *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  __int128 v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  int64x2_t v59;
  char *v60;
  _QWORD *v61;
  void *__p;
  void *v63;
  __int128 v64;
  const void *v65;
  std::__shared_weak_count *v66;

  if (a3 != a4)
  {
    v9 = a3;
    v12 = a2 + 2;
    while (1)
    {
      v14 = *(const void **)v9;
      v13 = *(std::__shared_weak_count **)(v9 + 8);
      v65 = *(const void **)v9;
      v66 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
      }
      v17 = operator new(0x118uLL);
      v17[1] = 0;
      v17[2] = 0;
      *v17 = &off_1E2DC1868;
      Espresso::blob_cpu::blob_cpu((uint64_t)(v17 + 3), a1);
      *(_QWORD *)&v64 = v17 + 3;
      *((_QWORD *)&v64 + 1) = v17;
      Espresso::abstract_blob_container::shape((char *)&v58, (uint64_t)v14);
      v56 = 0;
      v57 = 0;
      (*(void (**)(_QWORD *, uint64_t *, uint64_t *))(v17[3] + 16))(v17 + 3, &v58, &v56);
      v18 = v57;
      if (v57)
      {
        v19 = (unint64_t *)&v57->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if (__p)
      {
        v63 = __p;
        operator delete(__p);
      }
      if (v65)
      {
        if (v21)
          break;
      }
      v21 = 0;
      v55 = 0;
      if (a5)
        goto LABEL_21;
LABEL_28:
      v27 = v64;
      if (*((_QWORD *)&v64 + 1))
      {
        v28 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v31 = a2[1];
      v30 = (unint64_t)a2[2];
      if ((unint64_t)v31 >= v30)
      {
        v54 = v27;
        v33 = (v31 - *a2) >> 4;
        if ((unint64_t)(v33 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v34 = v30 - (_QWORD)*a2;
        v35 = v34 >> 3;
        if (v34 >> 3 <= (unint64_t)(v33 + 1))
          v35 = v33 + 1;
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0)
          v36 = 0xFFFFFFFFFFFFFFFLL;
        else
          v36 = v35;
        v61 = v12;
        v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v36);
        v39 = &v37[16 * v33];
        *(_OWORD *)v39 = v54;
        v41 = *a2;
        v40 = a2[1];
        if (v40 == *a2)
        {
          v44 = vdupq_n_s64((unint64_t)v40);
          v42 = &v37[16 * v33];
        }
        else
        {
          v42 = &v37[16 * v33];
          do
          {
            v43 = *((_OWORD *)v40 - 1);
            v40 -= 16;
            *((_OWORD *)v42 - 1) = v43;
            v42 -= 16;
            *(_QWORD *)v40 = 0;
            *((_QWORD *)v40 + 1) = 0;
          }
          while (v40 != v41);
          v44 = *(int64x2_t *)a2;
        }
        v32 = v39 + 16;
        *a2 = v42;
        a2[1] = v39 + 16;
        v59 = v44;
        v45 = a2[2];
        a2[2] = &v37[16 * v38];
        v60 = v45;
        v58 = v44.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v58);
      }
      else
      {
        *(_OWORD *)v31 = v27;
        v32 = v31 + 16;
      }
      a2[1] = v32;
      if (v55)
      {
        v46 = (unint64_t *)&v55->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      v48 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
      if (*((_QWORD *)&v64 + 1))
      {
        v49 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      v51 = v66;
      if (v66)
      {
        v52 = (unint64_t *)&v66->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v9 += 16;
      if (v9 == a4)
        return;
    }
    v55 = v66;
    if (v66)
    {
      v22 = (unint64_t *)&v66->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    if (!a5)
      goto LABEL_28;
LABEL_21:
    if (a6)
    {
      v58 = 0;
      v59.i64[0] = 0;
      (*(void (**)(void *, uint64_t *, uint64_t))(*(_QWORD *)v21 + 40))(v21, &v58, v64 + 160);
      v24 = (std::__shared_weak_count *)v59.i64[0];
      if (v59.i64[0])
      {
        v25 = (unint64_t *)(v59.i64[0] + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v21, v64 + 160, 1.0);
    }
    goto LABEL_28;
  }
}

void sub_191614150(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::alloc_kernel_cpu,Espresso::alloc_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB44A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::alloc_kernel_cpu,Espresso::alloc_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB44A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::alloc_kernel_cpu,Espresso::alloc_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

double ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_31@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<wrapper_kernel<Espresso::general_concat_kernel_cpu,Espresso::general_concat_params_t>,std::allocator<wrapper_kernel<Espresso::general_concat_kernel_cpu,Espresso::general_concat_params_t>>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::general_concat_params_t const&,void>(&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

_QWORD *std::allocate_shared[abi:ne180100]<wrapper_kernel<Espresso::general_concat_kernel_cpu,Espresso::general_concat_params_t>,std::allocator<wrapper_kernel<Espresso::general_concat_kernel_cpu,Espresso::general_concat_params_t>>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::general_concat_params_t const&,void>(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  char *v6;
  _QWORD *result;

  v6 = (char *)operator new(0x158uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DB5078;
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a2);
  *((_DWORD *)v6 + 76) = *(_DWORD *)a3;
  *((_WORD *)v6 + 154) = *(_WORD *)(a3 + 4);
  *((_QWORD *)v6 + 3) = &off_1E2D53B38;
  *(_OWORD *)(v6 + 312) = 0u;
  *(_OWORD *)(v6 + 328) = 0u;
  result = std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v6 + 39, *a2, a2[1]);
  *a1 = v6 + 24;
  a1[1] = v6;
  return result;
}

void sub_1916142E4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::general_concat_kernel_cpu,Espresso::general_concat_params_t>::~wrapper_kernel(Espresso::base_kernel *a1)
{
  *(_QWORD *)a1 = &off_1E2D53B38;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 304);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 288);
  Espresso::base_kernel::~base_kernel(a1);
}

{
  *(_QWORD *)a1 = &off_1E2D53B38;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 304);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 288);
  Espresso::base_kernel::~base_kernel(a1);
  JUMPOUT(0x19401CD90);
}

void wrapper_kernel<Espresso::general_concat_kernel_cpu,Espresso::general_concat_params_t>::__launch(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v5;
  _BOOL4 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int **v21;
  void *v22;
  int *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  float *v31;
  vDSP_Length v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  __n128 v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  void **v44;
  void **v45;
  void **v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  int *v52;
  float *v53;
  vDSP_Length v54;
  int *v55;
  int v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  vDSP_Length v60;
  vDSP_Length v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  const void *v74;
  void **v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  void **v80;
  const void *v81;
  void *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  _QWORD *v94;
  uint64_t *v95;
  std::__shared_weak_count *v96;
  float __B;
  _QWORD v98[2];
  _QWORD v99[2];
  void **v100[3];
  int **v101[3];
  void *v102;
  std::__shared_weak_count *v103;
  void ***v104;
  std::__shared_weak_count *v105;

  v5 = a3;
  memset(v101, 0, sizeof(v101));
  memset(v100, 0, sizeof(v100));
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)*a3 + 32))(*(_QWORD *)*a3))
    v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)*v5 + 32))(*(_QWORD *)*v5) == 1;
  else
    v7 = 1;
  v8 = (std::__shared_weak_count *)a1[37];
  v99[0] = a1[36];
  v99[1] = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  wrapper_kernel<Espresso::general_concat_kernel_cpu,Espresso::general_concat_params_t>::convert_layer_data_to_fp32(v99, (char **)v101, *a4, a4[1], 1, v7);
  if (v8)
  {
    v11 = (unint64_t *)&v8->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v13 = (std::__shared_weak_count *)a1[37];
  v98[0] = a1[36];
  v98[1] = v13;
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  wrapper_kernel<Espresso::general_concat_kernel_cpu,Espresso::general_concat_params_t>::convert_layer_data_to_fp32(v98, (char **)v100, *v5, v5[1], 0, 0);
  if (v13)
  {
    v17 = (unint64_t *)&v13->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v19 = *a4;
  if (a4[1] != *a4)
  {
    v20 = 0;
    do
    {
      if (!v7
        && (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v19 + 16 * v20) + 32))(*(_QWORD *)(v19 + 16 * v20))
         || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(*a4 + 16 * v20) + 32))(*(_QWORD *)(*a4 + 16 * v20)) == 1))
      {
        __B = *(float *)(*(_QWORD *)(*a4 + 16 * v20) + 112);
        v21 = &v101[0][2 * v20];
        v104 = (void ***)v22;
        v23 = v21[1];
        v105 = (std::__shared_weak_count *)v23;
        if (v23)
        {
          v24 = (unint64_t *)(v23 + 2);
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
        }
        v26 = *((_QWORD *)v22 + 20);
        v27 = (std::__shared_weak_count *)*((_QWORD *)v22 + 21);
        v102 = (void *)v26;
        v103 = v27;
        if (v27)
        {
          v28 = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldxr(v28);
          while (__stxr(v29 + 1, v28));
        }
        v30 = 0;
        v31 = *(float **)(v26 + 24);
        v32 = *(int *)(v26 + 8);
        v33 = v26 + 12;
        do
        {
          v32 *= *(int *)(v33 + v30);
          v30 += 4;
        }
        while (v30 != 12);
        vDSP_vsmul(v31, 1, &__B, v31, 1, v32);
        if (v27)
        {
          v34 = (unint64_t *)&v27->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        v36 = v105;
        if (v105)
        {
          v37 = (unint64_t *)&v105->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
      }
      ++v20;
      v19 = *a4;
    }
    while (v20 < (a4[1] - *a4) >> 4);
  }
  Espresso::general_concat_kernel_cpu::__launch((uint64_t)a1, v16, (uint64_t)v100, v101);
  v40 = a1[38];
  if (v40)
  {
    v41 = (std::__shared_weak_count *)a1[39];
    v96 = v41;
    if (v41)
    {
      v42 = (unint64_t *)&v41->__shared_owners_;
      do
        v43 = __ldxr(v42);
      while (__stxr(v43 + 1, v42));
    }
    v44 = v100[0];
    if (*v100[0]
    {
      v46 = v45;
      v47 = (std::__shared_weak_count *)v44[1];
      v104 = (void ***)v45;
      v105 = v47;
      if (v47)
      {
        v48 = (unint64_t *)&v47->__shared_owners_;
        do
          v49 = __ldxr(v48);
        while (__stxr(v49 + 1, v48));
      }
    }
    else
    {
      v47 = 0;
      v46 = 0;
      v104 = 0;
      v105 = 0;
    }
    LODWORD(v50) = *(_DWORD *)(v40 + 8);
    v94 = a1;
    v95 = v5;
    v93 = v47;
    if ((_DWORD)v50 == 1)
    {
      v51 = 0;
      v52 = (int *)v46[20];
      v53 = (float *)*((_QWORD *)v52 + 3);
      v54 = v52[2];
      v55 = v52 + 3;
      do
        v54 *= v55[v51++];
      while (v51 != 3);
      vDSP_vsmul(v53, 1, *(const float **)(v40 + 16), v53, 1, v54);
    }
    else
    {
      v56 = *((_DWORD *)v46 + 4);
      if ((_DWORD)v50 != v56)
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v50, v56);
      v57 = *((_DWORD *)v46 + 5);
      if (v57)
      {
        v58 = 0;
        v59 = 0;
        v60 = *((int *)v46 + 2) * (uint64_t)*((int *)v46 + 3);
        v61 = 4 * (int)v50 * v60;
        do
        {
          if ((_DWORD)v50)
          {
            v62 = 0;
            v63 = 0;
            v64 = v58;
            do
            {
              vDSP_vsmul((const float *)(*((_QWORD *)v46[20] + 3) + v64), 1, (const float *)(*(_QWORD *)(v40 + 16) + v62), (float *)(*((_QWORD *)v46[20] + 3) + v64), 1, v60);
              ++v63;
              v50 = *((int *)v46 + 4);
              v62 += 4;
              v64 += 4 * v60;
            }
            while (v63 < v50);
            v57 = *((_DWORD *)v46 + 5);
          }
          ++v59;
          v58 += v61;
        }
        while (v59 < v57);
      }
    }
    a1 = v94;
    v5 = v95;
    if (v93)
    {
      v65 = (unint64_t *)&v93->__shared_owners_;
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 - 1, v65));
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
        std::__shared_weak_count::__release_weak(v93);
      }
    }
    if (v96)
    {
      v67 = (unint64_t *)&v96->__shared_owners_;
      do
        v68 = __ldaxr(v67);
      while (__stlxr(v68 - 1, v67));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
        std::__shared_weak_count::__release_weak(v96);
      }
    }
  }
  v69 = (std::__shared_weak_count *)a1[37];
  if (v69)
  {
    v70 = (unint64_t *)&v69->__shared_owners_;
    do
      v71 = __ldxr(v70);
    while (__stxr(v71 + 1, v70));
  }
  v72 = *v5;
  if (v5[1] != *v5)
  {
    v73 = 0;
    do
    {
      v74 = *(const void **)(v72 + 16 * v73);
      if (v74
      {
        v76 = (uint64_t)v75;
        v104 = (void ***)v75;
        v77 = *(std::__shared_weak_count **)(v72 + 16 * v73 + 8);
        v105 = v77;
        if (v77)
        {
          v78 = (unint64_t *)&v77->__shared_owners_;
          do
            v79 = __ldxr(v78);
          while (__stxr(v79 + 1, v78));
        }
      }
      else
      {
        v76 = 0;
        v104 = 0;
        v105 = 0;
      }
      v80 = v100[0];
      v81 = v100[0][2 * v73];
      if (v81
      {
        v102 = v82;
        v83 = (std::__shared_weak_count *)v80[2 * v73 + 1];
        v103 = v83;
        if (v83)
        {
          v84 = (unint64_t *)&v83->__shared_owners_;
          do
            v85 = __ldxr(v84);
          while (__stxr(v85 + 1, v84));
        }
      }
      else
      {
        v83 = 0;
        v82 = 0;
        v102 = 0;
        v103 = 0;
      }
      v39.n128_u64[0] = Espresso::QuantSimEngine::blob_container::copy_from_fp32(v76, (uint64_t)v82 + 160, 1.0);
      if (v83)
      {
        v86 = (unint64_t *)&v83->__shared_owners_;
        do
          v87 = __ldaxr(v86);
        while (__stlxr(v87 - 1, v86));
        if (!v87)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v83->__on_zero_shared)(v83, v39);
          std::__shared_weak_count::__release_weak(v83);
        }
      }
      v88 = v105;
      if (v105)
      {
        v89 = (unint64_t *)&v105->__shared_owners_;
        do
          v90 = __ldaxr(v89);
        while (__stlxr(v90 - 1, v89));
        if (!v90)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v88->__on_zero_shared)(v88, v39);
          std::__shared_weak_count::__release_weak(v88);
        }
      }
      ++v73;
      v72 = *v5;
    }
    while (v73 < (v5[1] - *v5) >> 4);
  }
  if (v69)
  {
    v91 = (unint64_t *)&v69->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v69->__on_zero_shared)(v69, v39);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  v104 = v100;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v104);
  v100[0] = (void **)v101;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v100);
}

void sub_191614A54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  *(_QWORD *)(v25 - 104) = &a22;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 104));
  a22 = (void **)&a25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a22);
  _Unwind_Resume(a1);
}

void *wrapper_kernel<Espresso::general_concat_kernel_cpu,Espresso::general_concat_params_t>::__set_weight_raw_blob(void *result, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  void *v7;
  int v8;
  uint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::runtime_error *exception;
  unint64_t v15;
  std::runtime_error *v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  std::string v39;
  _QWORD v40[2];
  unsigned __int8 v41;
  _QWORD v42[2];
  unsigned __int8 v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;

  v7 = result;
  v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10)
      return result;
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    v10 = (uint64_t)v7 + 304;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v10, (__int128 *)&v52);
    size = (std::__shared_weak_count *)v52.__r_.__value_.__l.__size_;
    if (v52.__r_.__value_.__l.__size_)
    {
      v12 = (unint64_t *)(v52.__r_.__value_.__l.__size_ + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    if (a5 != 4 * *(int *)(*(_QWORD *)v10 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      v15 = a5;
      v16 = exception;
      std::to_string(&v45, v15);
      v17 = std::string::insert(&v45, 0, "Unexpected size s=");
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      v19 = std::string::append(&v46, "/blob=");
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, 4 * *(int *)(*(_QWORD *)v10 + 8));
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v21 = &v44;
      else
        v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      else
        v22 = v44.__r_.__value_.__l.__size_;
      v23 = std::string::append(&v47, (const std::string::value_type *)v21, v22);
      v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, " @ ");
      if ((v43 & 0x80u) == 0)
        v25 = (const std::string::value_type *)v42;
      else
        v25 = (const std::string::value_type *)v42[0];
      if ((v43 & 0x80u) == 0)
        v26 = v43;
      else
        v26 = v42[1];
      v27 = std::string::append(&v48, v25, v26);
      v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      v29 = std::string::append(&v49, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v40, ":");
      if ((v41 & 0x80u) == 0)
        v31 = (const std::string::value_type *)v40;
      else
        v31 = (const std::string::value_type *)v40[0];
      if ((v41 & 0x80u) == 0)
        v32 = v41;
      else
        v32 = v40[1];
      v33 = std::string::append(&v50, v31, v32);
      v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, 197);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = &v39;
      else
        v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      else
        v36 = v39.__r_.__value_.__l.__size_;
      v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
      v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v16, &v52);
      __cxa_throw(v16, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    return memcpy(*(void **)(*(_QWORD *)v10 + 16), a4, a5);
  }
  return result;
}

void sub_191614E0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  void *v59;
  int v60;
  uint64_t v61;

  if (*(char *)(v61 - 57) < 0)
    operator delete(*(void **)(v61 - 80));
  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v61 - 89) < 0)
    operator delete(*(void **)(v61 - 112));
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v61 - 121) < 0)
    operator delete(*(void **)(v61 - 144));
  if (*(char *)(v61 - 153) < 0)
    operator delete(*(void **)(v61 - 176));
  if (a27 < 0)
    operator delete(a22);
  if (a59 < 0)
    operator delete(a54);
  if (a33 < 0)
    operator delete(a28);
  if (a52 < 0)
    operator delete(a47);
  if (a45 < 0)
    operator delete(a40);
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0)
LABEL_28:
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

BOOL wrapper_kernel<Espresso::general_concat_kernel_cpu,Espresso::general_concat_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2;

  v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10)
      return 0;
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

void wrapper_kernel<Espresso::general_concat_kernel_cpu,Espresso::general_concat_params_t>::convert_layer_data_to_fp32(_QWORD *a1, char **a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v9;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  const void *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  __int128 v43;
  int64x2_t v44;
  char *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  __int128 v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  int64x2_t v59;
  char *v60;
  _QWORD *v61;
  void *__p;
  void *v63;
  __int128 v64;
  const void *v65;
  std::__shared_weak_count *v66;

  if (a3 != a4)
  {
    v9 = a3;
    v12 = a2 + 2;
    while (1)
    {
      v14 = *(const void **)v9;
      v13 = *(std::__shared_weak_count **)(v9 + 8);
      v65 = *(const void **)v9;
      v66 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
      }
      v17 = operator new(0x118uLL);
      v17[1] = 0;
      v17[2] = 0;
      *v17 = &off_1E2DC1868;
      Espresso::blob_cpu::blob_cpu((uint64_t)(v17 + 3), a1);
      *(_QWORD *)&v64 = v17 + 3;
      *((_QWORD *)&v64 + 1) = v17;
      Espresso::abstract_blob_container::shape((char *)&v58, (uint64_t)v14);
      v56 = 0;
      v57 = 0;
      (*(void (**)(_QWORD *, uint64_t *, uint64_t *))(v17[3] + 16))(v17 + 3, &v58, &v56);
      v18 = v57;
      if (v57)
      {
        v19 = (unint64_t *)&v57->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if (__p)
      {
        v63 = __p;
        operator delete(__p);
      }
      if (v65)
      {
        if (v21)
          break;
      }
      v21 = 0;
      v55 = 0;
      if (a5)
        goto LABEL_21;
LABEL_28:
      v27 = v64;
      if (*((_QWORD *)&v64 + 1))
      {
        v28 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v31 = a2[1];
      v30 = (unint64_t)a2[2];
      if ((unint64_t)v31 >= v30)
      {
        v54 = v27;
        v33 = (v31 - *a2) >> 4;
        if ((unint64_t)(v33 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v34 = v30 - (_QWORD)*a2;
        v35 = v34 >> 3;
        if (v34 >> 3 <= (unint64_t)(v33 + 1))
          v35 = v33 + 1;
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0)
          v36 = 0xFFFFFFFFFFFFFFFLL;
        else
          v36 = v35;
        v61 = v12;
        v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v36);
        v39 = &v37[16 * v33];
        *(_OWORD *)v39 = v54;
        v41 = *a2;
        v40 = a2[1];
        if (v40 == *a2)
        {
          v44 = vdupq_n_s64((unint64_t)v40);
          v42 = &v37[16 * v33];
        }
        else
        {
          v42 = &v37[16 * v33];
          do
          {
            v43 = *((_OWORD *)v40 - 1);
            v40 -= 16;
            *((_OWORD *)v42 - 1) = v43;
            v42 -= 16;
            *(_QWORD *)v40 = 0;
            *((_QWORD *)v40 + 1) = 0;
          }
          while (v40 != v41);
          v44 = *(int64x2_t *)a2;
        }
        v32 = v39 + 16;
        *a2 = v42;
        a2[1] = v39 + 16;
        v59 = v44;
        v45 = a2[2];
        a2[2] = &v37[16 * v38];
        v60 = v45;
        v58 = v44.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v58);
      }
      else
      {
        *(_OWORD *)v31 = v27;
        v32 = v31 + 16;
      }
      a2[1] = v32;
      if (v55)
      {
        v46 = (unint64_t *)&v55->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      v48 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
      if (*((_QWORD *)&v64 + 1))
      {
        v49 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      v51 = v66;
      if (v66)
      {
        v52 = (unint64_t *)&v66->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v9 += 16;
      if (v9 == a4)
        return;
    }
    v55 = v66;
    if (v66)
    {
      v22 = (unint64_t *)&v66->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    if (!a5)
      goto LABEL_28;
LABEL_21:
    if (a6)
    {
      v58 = 0;
      v59.i64[0] = 0;
      (*(void (**)(void *, uint64_t *, uint64_t))(*(_QWORD *)v21 + 40))(v21, &v58, v64 + 160);
      v24 = (std::__shared_weak_count *)v59.i64[0];
      if (v59.i64[0])
      {
        v25 = (unint64_t *)(v59.i64[0] + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v21, v64 + 160, 1.0);
    }
    goto LABEL_28;
  }
}

void sub_191615368(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::general_concat_kernel_cpu,Espresso::general_concat_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB5078;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::general_concat_kernel_cpu,Espresso::general_concat_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB5078;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::general_concat_kernel_cpu,Espresso::general_concat_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_30@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  __n128 result;

  v6 = (char *)operator new(0x168uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DB4710;
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((_OWORD *)v6 + 19) = *(_OWORD *)a2;
  *((_DWORD *)v6 + 80) = *(_DWORD *)(a2 + 16);
  *((_QWORD *)v6 + 3) = &off_1E2D50000;
  *(_OWORD *)(v6 + 328) = 0u;
  *(_OWORD *)(v6 + 344) = 0u;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v6 + 41, *a1, a1[1]);
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1916154D0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::gather_kernel_cpu,Espresso::gather_params_t>::~wrapper_kernel(Espresso::base_kernel *a1)
{
  *(_QWORD *)a1 = &off_1E2D50000;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 320);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 304);
  Espresso::base_kernel::~base_kernel(a1);
}

{
  *(_QWORD *)a1 = &off_1E2D50000;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 320);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 304);
  Espresso::base_kernel::~base_kernel(a1);
  JUMPOUT(0x19401CD90);
}

void wrapper_kernel<Espresso::gather_kernel_cpu,Espresso::gather_params_t>::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v5;
  _BOOL4 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  float *v31;
  vDSP_Length v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  __n128 v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  unsigned int **v44;
  void **v45;
  void **v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  int *v52;
  float *v53;
  vDSP_Length v54;
  int *v55;
  int v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  vDSP_Length v60;
  vDSP_Length v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  const void *v74;
  void **v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  unsigned int **v80;
  unsigned int *v81;
  void *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  uint64_t v94;
  uint64_t *v95;
  std::__shared_weak_count *v96;
  float __B;
  _QWORD v98[2];
  _QWORD v99[2];
  unsigned int **v100[3];
  char *v101[3];
  void *v102;
  std::__shared_weak_count *v103;
  unsigned int ***v104;
  std::__shared_weak_count *v105;

  v5 = a3;
  memset(v101, 0, sizeof(v101));
  memset(v100, 0, sizeof(v100));
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)*a3 + 32))(*(_QWORD *)*a3))
    v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)*v5 + 32))(*(_QWORD *)*v5) == 1;
  else
    v7 = 1;
  v8 = *(std::__shared_weak_count **)(a1 + 312);
  v99[0] = *(_QWORD *)(a1 + 304);
  v99[1] = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  wrapper_kernel<Espresso::gather_kernel_cpu,Espresso::gather_params_t>::convert_layer_data_to_fp32(v99, v101, *a4, a4[1], 1, v7);
  if (v8)
  {
    v11 = (unint64_t *)&v8->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v13 = *(std::__shared_weak_count **)(a1 + 312);
  v98[0] = *(_QWORD *)(a1 + 304);
  v98[1] = v13;
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  wrapper_kernel<Espresso::gather_kernel_cpu,Espresso::gather_params_t>::convert_layer_data_to_fp32(v98, (char **)v100, *v5, v5[1], 0, 0);
  if (v13)
  {
    v17 = (unint64_t *)&v13->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v19 = *a4;
  if (a4[1] != *a4)
  {
    v20 = 0;
    do
    {
      if (!v7
        && (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v19 + 16 * v20) + 32))(*(_QWORD *)(v19 + 16 * v20))
         || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(*a4 + 16 * v20) + 32))(*(_QWORD *)(*a4 + 16 * v20)) == 1))
      {
        __B = *(float *)(*(_QWORD *)(*a4 + 16 * v20) + 112);
        v21 = &v101[0][16 * v20];
        v104 = (unsigned int ***)v22;
        v23 = (std::__shared_weak_count *)*((_QWORD *)v21 + 1);
        v105 = v23;
        if (v23)
        {
          v24 = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
        }
        v26 = *((_QWORD *)v22 + 20);
        v27 = (std::__shared_weak_count *)*((_QWORD *)v22 + 21);
        v102 = (void *)v26;
        v103 = v27;
        if (v27)
        {
          v28 = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldxr(v28);
          while (__stxr(v29 + 1, v28));
        }
        v30 = 0;
        v31 = *(float **)(v26 + 24);
        v32 = *(int *)(v26 + 8);
        v33 = v26 + 12;
        do
        {
          v32 *= *(int *)(v33 + v30);
          v30 += 4;
        }
        while (v30 != 12);
        vDSP_vsmul(v31, 1, &__B, v31, 1, v32);
        if (v27)
        {
          v34 = (unint64_t *)&v27->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        v36 = v105;
        if (v105)
        {
          v37 = (unint64_t *)&v105->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
      }
      ++v20;
      v19 = *a4;
    }
    while (v20 < (a4[1] - *a4) >> 4);
  }
  Espresso::gather_kernel_cpu::__launch((_DWORD *)a1, v16, v100, v101);
  v40 = *(_QWORD *)(a1 + 320);
  if (v40)
  {
    v41 = *(std::__shared_weak_count **)(a1 + 328);
    v96 = v41;
    if (v41)
    {
      v42 = (unint64_t *)&v41->__shared_owners_;
      do
        v43 = __ldxr(v42);
      while (__stxr(v43 + 1, v42));
    }
    v44 = v100[0];
    if (*v100[0]
    {
      v46 = v45;
      v47 = (std::__shared_weak_count *)v44[1];
      v104 = (unsigned int ***)v45;
      v105 = v47;
      if (v47)
      {
        v48 = (unint64_t *)&v47->__shared_owners_;
        do
          v49 = __ldxr(v48);
        while (__stxr(v49 + 1, v48));
      }
    }
    else
    {
      v47 = 0;
      v46 = 0;
      v104 = 0;
      v105 = 0;
    }
    LODWORD(v50) = *(_DWORD *)(v40 + 8);
    v94 = a1;
    v95 = v5;
    v93 = v47;
    if ((_DWORD)v50 == 1)
    {
      v51 = 0;
      v52 = (int *)v46[20];
      v53 = (float *)*((_QWORD *)v52 + 3);
      v54 = v52[2];
      v55 = v52 + 3;
      do
        v54 *= v55[v51++];
      while (v51 != 3);
      vDSP_vsmul(v53, 1, *(const float **)(v40 + 16), v53, 1, v54);
    }
    else
    {
      v56 = *((_DWORD *)v46 + 4);
      if ((_DWORD)v50 != v56)
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v50, v56);
      v57 = *((_DWORD *)v46 + 5);
      if (v57)
      {
        v58 = 0;
        v59 = 0;
        v60 = *((int *)v46 + 2) * (uint64_t)*((int *)v46 + 3);
        v61 = 4 * (int)v50 * v60;
        do
        {
          if ((_DWORD)v50)
          {
            v62 = 0;
            v63 = 0;
            v64 = v58;
            do
            {
              vDSP_vsmul((const float *)(*((_QWORD *)v46[20] + 3) + v64), 1, (const float *)(*(_QWORD *)(v40 + 16) + v62), (float *)(*((_QWORD *)v46[20] + 3) + v64), 1, v60);
              ++v63;
              v50 = *((int *)v46 + 4);
              v62 += 4;
              v64 += 4 * v60;
            }
            while (v63 < v50);
            v57 = *((_DWORD *)v46 + 5);
          }
          ++v59;
          v58 += v61;
        }
        while (v59 < v57);
      }
    }
    a1 = v94;
    v5 = v95;
    if (v93)
    {
      v65 = (unint64_t *)&v93->__shared_owners_;
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 - 1, v65));
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
        std::__shared_weak_count::__release_weak(v93);
      }
    }
    if (v96)
    {
      v67 = (unint64_t *)&v96->__shared_owners_;
      do
        v68 = __ldaxr(v67);
      while (__stlxr(v68 - 1, v67));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
        std::__shared_weak_count::__release_weak(v96);
      }
    }
  }
  v69 = *(std::__shared_weak_count **)(a1 + 312);
  if (v69)
  {
    v70 = (unint64_t *)&v69->__shared_owners_;
    do
      v71 = __ldxr(v70);
    while (__stxr(v71 + 1, v70));
  }
  v72 = *v5;
  if (v5[1] != *v5)
  {
    v73 = 0;
    do
    {
      v74 = *(const void **)(v72 + 16 * v73);
      if (v74
      {
        v76 = (uint64_t)v75;
        v104 = (unsigned int ***)v75;
        v77 = *(std::__shared_weak_count **)(v72 + 16 * v73 + 8);
        v105 = v77;
        if (v77)
        {
          v78 = (unint64_t *)&v77->__shared_owners_;
          do
            v79 = __ldxr(v78);
          while (__stxr(v79 + 1, v78));
        }
      }
      else
      {
        v76 = 0;
        v104 = 0;
        v105 = 0;
      }
      v80 = v100[0];
      v81 = v100[0][2 * v73];
      if (v81
      {
        v102 = v82;
        v83 = (std::__shared_weak_count *)v80[2 * v73 + 1];
        v103 = v83;
        if (v83)
        {
          v84 = (unint64_t *)&v83->__shared_owners_;
          do
            v85 = __ldxr(v84);
          while (__stxr(v85 + 1, v84));
        }
      }
      else
      {
        v83 = 0;
        v82 = 0;
        v102 = 0;
        v103 = 0;
      }
      v39.n128_u64[0] = Espresso::QuantSimEngine::blob_container::copy_from_fp32(v76, (uint64_t)v82 + 160, 1.0);
      if (v83)
      {
        v86 = (unint64_t *)&v83->__shared_owners_;
        do
          v87 = __ldaxr(v86);
        while (__stlxr(v87 - 1, v86));
        if (!v87)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v83->__on_zero_shared)(v83, v39);
          std::__shared_weak_count::__release_weak(v83);
        }
      }
      v88 = v105;
      if (v105)
      {
        v89 = (unint64_t *)&v105->__shared_owners_;
        do
          v90 = __ldaxr(v89);
        while (__stlxr(v90 - 1, v89));
        if (!v90)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v88->__on_zero_shared)(v88, v39);
          std::__shared_weak_count::__release_weak(v88);
        }
      }
      ++v73;
      v72 = *v5;
    }
    while (v73 < (v5[1] - *v5) >> 4);
  }
  if (v69)
  {
    v91 = (unint64_t *)&v69->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v69->__on_zero_shared)(v69, v39);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  v104 = v100;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v104);
  v100[0] = (unsigned int **)v101;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)v100);
}

void sub_191615C40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  *(_QWORD *)(v25 - 104) = &a22;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 104));
  a22 = (void **)&a25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a22);
  _Unwind_Resume(a1);
}

void *wrapper_kernel<Espresso::gather_kernel_cpu,Espresso::gather_params_t>::__set_weight_raw_blob(void *result, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  void *v7;
  int v8;
  uint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::runtime_error *exception;
  unint64_t v15;
  std::runtime_error *v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  std::string v39;
  _QWORD v40[2];
  unsigned __int8 v41;
  _QWORD v42[2];
  unsigned __int8 v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;

  v7 = result;
  v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10)
      return result;
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    v10 = (uint64_t)v7 + 320;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v10, (__int128 *)&v52);
    size = (std::__shared_weak_count *)v52.__r_.__value_.__l.__size_;
    if (v52.__r_.__value_.__l.__size_)
    {
      v12 = (unint64_t *)(v52.__r_.__value_.__l.__size_ + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    if (a5 != 4 * *(int *)(*(_QWORD *)v10 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      v15 = a5;
      v16 = exception;
      std::to_string(&v45, v15);
      v17 = std::string::insert(&v45, 0, "Unexpected size s=");
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      v19 = std::string::append(&v46, "/blob=");
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, 4 * *(int *)(*(_QWORD *)v10 + 8));
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v21 = &v44;
      else
        v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      else
        v22 = v44.__r_.__value_.__l.__size_;
      v23 = std::string::append(&v47, (const std::string::value_type *)v21, v22);
      v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, " @ ");
      if ((v43 & 0x80u) == 0)
        v25 = (const std::string::value_type *)v42;
      else
        v25 = (const std::string::value_type *)v42[0];
      if ((v43 & 0x80u) == 0)
        v26 = v43;
      else
        v26 = v42[1];
      v27 = std::string::append(&v48, v25, v26);
      v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      v29 = std::string::append(&v49, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v40, ":");
      if ((v41 & 0x80u) == 0)
        v31 = (const std::string::value_type *)v40;
      else
        v31 = (const std::string::value_type *)v40[0];
      if ((v41 & 0x80u) == 0)
        v32 = v41;
      else
        v32 = v40[1];
      v33 = std::string::append(&v50, v31, v32);
      v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, 197);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = &v39;
      else
        v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      else
        v36 = v39.__r_.__value_.__l.__size_;
      v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
      v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v16, &v52);
      __cxa_throw(v16, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    return memcpy(*(void **)(*(_QWORD *)v10 + 16), a4, a5);
  }
  return result;
}

void sub_191615FF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  void *v59;
  int v60;
  uint64_t v61;

  if (*(char *)(v61 - 57) < 0)
    operator delete(*(void **)(v61 - 80));
  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v61 - 89) < 0)
    operator delete(*(void **)(v61 - 112));
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v61 - 121) < 0)
    operator delete(*(void **)(v61 - 144));
  if (*(char *)(v61 - 153) < 0)
    operator delete(*(void **)(v61 - 176));
  if (a27 < 0)
    operator delete(a22);
  if (a59 < 0)
    operator delete(a54);
  if (a33 < 0)
    operator delete(a28);
  if (a52 < 0)
    operator delete(a47);
  if (a45 < 0)
    operator delete(a40);
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0)
LABEL_28:
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

BOOL wrapper_kernel<Espresso::gather_kernel_cpu,Espresso::gather_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2;

  v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10)
      return 0;
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

void wrapper_kernel<Espresso::gather_kernel_cpu,Espresso::gather_params_t>::convert_layer_data_to_fp32(_QWORD *a1, char **a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v9;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  const void *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  __int128 v43;
  int64x2_t v44;
  char *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  __int128 v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  int64x2_t v59;
  char *v60;
  _QWORD *v61;
  void *__p;
  void *v63;
  __int128 v64;
  const void *v65;
  std::__shared_weak_count *v66;

  if (a3 != a4)
  {
    v9 = a3;
    v12 = a2 + 2;
    while (1)
    {
      v14 = *(const void **)v9;
      v13 = *(std::__shared_weak_count **)(v9 + 8);
      v65 = *(const void **)v9;
      v66 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
      }
      v17 = operator new(0x118uLL);
      v17[1] = 0;
      v17[2] = 0;
      *v17 = &off_1E2DC1868;
      Espresso::blob_cpu::blob_cpu((uint64_t)(v17 + 3), a1);
      *(_QWORD *)&v64 = v17 + 3;
      *((_QWORD *)&v64 + 1) = v17;
      Espresso::abstract_blob_container::shape((char *)&v58, (uint64_t)v14);
      v56 = 0;
      v57 = 0;
      (*(void (**)(_QWORD *, uint64_t *, uint64_t *))(v17[3] + 16))(v17 + 3, &v58, &v56);
      v18 = v57;
      if (v57)
      {
        v19 = (unint64_t *)&v57->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if (__p)
      {
        v63 = __p;
        operator delete(__p);
      }
      if (v65)
      {
        if (v21)
          break;
      }
      v21 = 0;
      v55 = 0;
      if (a5)
        goto LABEL_21;
LABEL_28:
      v27 = v64;
      if (*((_QWORD *)&v64 + 1))
      {
        v28 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v31 = a2[1];
      v30 = (unint64_t)a2[2];
      if ((unint64_t)v31 >= v30)
      {
        v54 = v27;
        v33 = (v31 - *a2) >> 4;
        if ((unint64_t)(v33 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v34 = v30 - (_QWORD)*a2;
        v35 = v34 >> 3;
        if (v34 >> 3 <= (unint64_t)(v33 + 1))
          v35 = v33 + 1;
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0)
          v36 = 0xFFFFFFFFFFFFFFFLL;
        else
          v36 = v35;
        v61 = v12;
        v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v36);
        v39 = &v37[16 * v33];
        *(_OWORD *)v39 = v54;
        v41 = *a2;
        v40 = a2[1];
        if (v40 == *a2)
        {
          v44 = vdupq_n_s64((unint64_t)v40);
          v42 = &v37[16 * v33];
        }
        else
        {
          v42 = &v37[16 * v33];
          do
          {
            v43 = *((_OWORD *)v40 - 1);
            v40 -= 16;
            *((_OWORD *)v42 - 1) = v43;
            v42 -= 16;
            *(_QWORD *)v40 = 0;
            *((_QWORD *)v40 + 1) = 0;
          }
          while (v40 != v41);
          v44 = *(int64x2_t *)a2;
        }
        v32 = v39 + 16;
        *a2 = v42;
        a2[1] = v39 + 16;
        v59 = v44;
        v45 = a2[2];
        a2[2] = &v37[16 * v38];
        v60 = v45;
        v58 = v44.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v58);
      }
      else
      {
        *(_OWORD *)v31 = v27;
        v32 = v31 + 16;
      }
      a2[1] = v32;
      if (v55)
      {
        v46 = (unint64_t *)&v55->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      v48 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
      if (*((_QWORD *)&v64 + 1))
      {
        v49 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      v51 = v66;
      if (v66)
      {
        v52 = (unint64_t *)&v66->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v9 += 16;
      if (v9 == a4)
        return;
    }
    v55 = v66;
    if (v66)
    {
      v22 = (unint64_t *)&v66->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    if (!a5)
      goto LABEL_28;
LABEL_21:
    if (a6)
    {
      v58 = 0;
      v59.i64[0] = 0;
      (*(void (**)(void *, uint64_t *, uint64_t))(*(_QWORD *)v21 + 40))(v21, &v58, v64 + 160);
      v24 = (std::__shared_weak_count *)v59.i64[0];
      if (v59.i64[0])
      {
        v25 = (unint64_t *)(v59.i64[0] + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v21, v64 + 160, 1.0);
    }
    goto LABEL_28;
  }
}

void sub_191616554(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::gather_kernel_cpu,Espresso::gather_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB4710;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::gather_kernel_cpu,Espresso::gather_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB4710;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::gather_kernel_cpu,Espresso::gather_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_29@<Q0>(uint64_t *a1@<X1>, _QWORD *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  __n128 result;

  v6 = operator new(0x160uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DB4470;
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  v6[38] = *a2;
  *(_QWORD *)((char *)v6 + 311) = *(_QWORD *)((char *)a2 + 7);
  v6[3] = &off_1E2D4EF18;
  *((_OWORD *)v6 + 20) = 0u;
  *((_OWORD *)v6 + 21) = 0u;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v6 + 40, *a1, a1[1]);
  result.n128_u64[0] = (unint64_t)(v6 + 3);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1916166BC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::topk_kernel_cpu,Espresso::topk_params_t>::~wrapper_kernel(Espresso::base_kernel *a1)
{
  *(_QWORD *)a1 = &off_1E2D4EF18;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 312);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 296);
  Espresso::base_kernel::~base_kernel(a1);
}

{
  *(_QWORD *)a1 = &off_1E2D4EF18;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 312);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 296);
  Espresso::base_kernel::~base_kernel(a1);
  JUMPOUT(0x19401CD90);
}

void wrapper_kernel<Espresso::topk_kernel_cpu,Espresso::topk_params_t>::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  _BOOL4 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  float *v31;
  vDSP_Length v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  __n128 v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  void **v45;
  void **v46;
  void **v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  int *v53;
  float *v54;
  vDSP_Length v55;
  int *v56;
  int v57;
  int v58;
  uint64_t v59;
  unint64_t v60;
  vDSP_Length v61;
  vDSP_Length v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  const void *v75;
  void **v76;
  uint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  void **v81;
  const void *v82;
  void *v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  uint64_t v95;
  std::__shared_weak_count *v96;
  float __B;
  _QWORD v98[2];
  _QWORD v99[2];
  void **v100[3];
  char *v101[3];
  void *v102;
  std::__shared_weak_count *v103;
  void ***v104;
  std::__shared_weak_count *v105;

  memset(v101, 0, sizeof(v101));
  memset(v100, 0, sizeof(v100));
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)*a3 + 32))(*(_QWORD *)*a3))
    v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)*a3 + 32))(*(_QWORD *)*a3) == 1;
  else
    v8 = 1;
  v9 = *(std::__shared_weak_count **)(a1 + 304);
  v99[0] = *(_QWORD *)(a1 + 296);
  v99[1] = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  wrapper_kernel<Espresso::topk_kernel_cpu,Espresso::topk_params_t>::convert_layer_data_to_fp32(v99, v101, *a4, a4[1], 1, v8);
  if (v9)
  {
    v12 = (unint64_t *)&v9->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v14 = *(std::__shared_weak_count **)(a1 + 304);
  v98[0] = *(_QWORD *)(a1 + 296);
  v98[1] = v14;
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  wrapper_kernel<Espresso::topk_kernel_cpu,Espresso::topk_params_t>::convert_layer_data_to_fp32(v98, (char **)v100, *a3, a3[1], 0, 0);
  if (v14)
  {
    v17 = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v95 = a1;
  v19 = *a4;
  if (a4[1] != *a4)
  {
    v20 = 0;
    do
    {
      if (!v8
        && (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v19 + 16 * v20) + 32))(*(_QWORD *)(v19 + 16 * v20))
         || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(*a4 + 16 * v20) + 32))(*(_QWORD *)(*a4 + 16 * v20)) == 1))
      {
        __B = *(float *)(*(_QWORD *)(*a4 + 16 * v20) + 112);
        v21 = &v101[0][16 * v20];
        v104 = (void ***)v22;
        v23 = (std::__shared_weak_count *)*((_QWORD *)v21 + 1);
        v105 = v23;
        if (v23)
        {
          v24 = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
        }
        v26 = *((_QWORD *)v22 + 20);
        v27 = (std::__shared_weak_count *)*((_QWORD *)v22 + 21);
        v102 = (void *)v26;
        v103 = v27;
        if (v27)
        {
          v28 = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldxr(v28);
          while (__stxr(v29 + 1, v28));
        }
        v30 = 0;
        v31 = *(float **)(v26 + 24);
        v32 = *(int *)(v26 + 8);
        v33 = v26 + 12;
        do
        {
          v32 *= *(int *)(v33 + v30);
          v30 += 4;
        }
        while (v30 != 12);
        vDSP_vsmul(v31, 1, &__B, v31, 1, v32);
        if (v27)
        {
          v34 = (unint64_t *)&v27->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        v36 = v105;
        if (v105)
        {
          v37 = (unint64_t *)&v105->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
      }
      ++v20;
      v19 = *a4;
    }
    while (v20 < (a4[1] - *a4) >> 4);
  }
  v39 = v95;
  Espresso::topk_kernel_cpu::__launch(v95, a2, (uint64_t **)v100, (uint64_t **)v101);
  v41 = *(_QWORD *)(v95 + 312);
  if (v41)
  {
    v42 = *(std::__shared_weak_count **)(v95 + 320);
    v96 = v42;
    if (v42)
    {
      v43 = (unint64_t *)&v42->__shared_owners_;
      do
        v44 = __ldxr(v43);
      while (__stxr(v44 + 1, v43));
    }
    v45 = v100[0];
    if (*v100[0]
    {
      v47 = v46;
      v48 = (std::__shared_weak_count *)v45[1];
      v104 = (void ***)v46;
      v105 = v48;
      if (v48)
      {
        v49 = (unint64_t *)&v48->__shared_owners_;
        do
          v50 = __ldxr(v49);
        while (__stxr(v50 + 1, v49));
      }
    }
    else
    {
      v48 = 0;
      v47 = 0;
      v104 = 0;
      v105 = 0;
    }
    LODWORD(v51) = *(_DWORD *)(v41 + 8);
    v94 = v48;
    if ((_DWORD)v51 == 1)
    {
      v52 = 0;
      v53 = (int *)v47[20];
      v54 = (float *)*((_QWORD *)v53 + 3);
      v55 = v53[2];
      v56 = v53 + 3;
      do
        v55 *= v56[v52++];
      while (v52 != 3);
      vDSP_vsmul(v54, 1, *(const float **)(v41 + 16), v54, 1, v55);
    }
    else
    {
      v57 = *((_DWORD *)v47 + 4);
      if ((_DWORD)v51 != v57)
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v51, v57);
      v58 = *((_DWORD *)v47 + 5);
      if (v58)
      {
        v59 = 0;
        v60 = 0;
        v61 = *((int *)v47 + 2) * (uint64_t)*((int *)v47 + 3);
        v62 = 4 * (int)v51 * v61;
        do
        {
          if ((_DWORD)v51)
          {
            v63 = 0;
            v64 = 0;
            v65 = v59;
            do
            {
              vDSP_vsmul((const float *)(*((_QWORD *)v47[20] + 3) + v65), 1, (const float *)(*(_QWORD *)(v41 + 16) + v63), (float *)(*((_QWORD *)v47[20] + 3) + v65), 1, v61);
              ++v64;
              v51 = *((int *)v47 + 4);
              v63 += 4;
              v65 += 4 * v61;
            }
            while (v64 < v51);
            v58 = *((_DWORD *)v47 + 5);
          }
          ++v60;
          v59 += v62;
        }
        while (v60 < v58);
      }
    }
    v39 = v95;
    if (v94)
    {
      v66 = (unint64_t *)&v94->__shared_owners_;
      do
        v67 = __ldaxr(v66);
      while (__stlxr(v67 - 1, v66));
      if (!v67)
      {
        ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
        std::__shared_weak_count::__release_weak(v94);
      }
    }
    if (v96)
    {
      v68 = (unint64_t *)&v96->__shared_owners_;
      do
        v69 = __ldaxr(v68);
      while (__stlxr(v69 - 1, v68));
      if (!v69)
      {
        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
        std::__shared_weak_count::__release_weak(v96);
      }
    }
  }
  v70 = *(std::__shared_weak_count **)(v39 + 304);
  if (v70)
  {
    v71 = (unint64_t *)&v70->__shared_owners_;
    do
      v72 = __ldxr(v71);
    while (__stxr(v72 + 1, v71));
  }
  v73 = *a3;
  if (a3[1] != *a3)
  {
    v74 = 0;
    do
    {
      v75 = *(const void **)(v73 + 16 * v74);
      if (v75
      {
        v77 = (uint64_t)v76;
        v104 = (void ***)v76;
        v78 = *(std::__shared_weak_count **)(v73 + 16 * v74 + 8);
        v105 = v78;
        if (v78)
        {
          v79 = (unint64_t *)&v78->__shared_owners_;
          do
            v80 = __ldxr(v79);
          while (__stxr(v80 + 1, v79));
        }
      }
      else
      {
        v77 = 0;
        v104 = 0;
        v105 = 0;
      }
      v81 = v100[0];
      v82 = v100[0][2 * v74];
      if (v82
      {
        v102 = v83;
        v84 = (std::__shared_weak_count *)v81[2 * v74 + 1];
        v103 = v84;
        if (v84)
        {
          v85 = (unint64_t *)&v84->__shared_owners_;
          do
            v86 = __ldxr(v85);
          while (__stxr(v86 + 1, v85));
        }
      }
      else
      {
        v84 = 0;
        v83 = 0;
        v102 = 0;
        v103 = 0;
      }
      v40.n128_u64[0] = Espresso::QuantSimEngine::blob_container::copy_from_fp32(v77, (uint64_t)v83 + 160, 1.0);
      if (v84)
      {
        v87 = (unint64_t *)&v84->__shared_owners_;
        do
          v88 = __ldaxr(v87);
        while (__stlxr(v88 - 1, v87));
        if (!v88)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v84->__on_zero_shared)(v84, v40);
          std::__shared_weak_count::__release_weak(v84);
        }
      }
      v89 = v105;
      if (v105)
      {
        v90 = (unint64_t *)&v105->__shared_owners_;
        do
          v91 = __ldaxr(v90);
        while (__stlxr(v91 - 1, v90));
        if (!v91)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v89->__on_zero_shared)(v89, v40);
          std::__shared_weak_count::__release_weak(v89);
        }
      }
      ++v74;
      v73 = *a3;
    }
    while (v74 < (a3[1] - *a3) >> 4);
  }
  if (v70)
  {
    v92 = (unint64_t *)&v70->__shared_owners_;
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v70->__on_zero_shared)(v70, v40);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  v104 = v100;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v104);
  v100[0] = (void **)v101;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v100);
}

void sub_191616E38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  *(_QWORD *)(v25 - 104) = &a22;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 104));
  a22 = (void **)&a25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a22);
  _Unwind_Resume(a1);
}

void *wrapper_kernel<Espresso::topk_kernel_cpu,Espresso::topk_params_t>::__set_weight_raw_blob(void *result, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  void *v7;
  int v8;
  uint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::runtime_error *exception;
  unint64_t v15;
  std::runtime_error *v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  std::string v39;
  _QWORD v40[2];
  unsigned __int8 v41;
  _QWORD v42[2];
  unsigned __int8 v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;

  v7 = result;
  v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10)
      return result;
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    v10 = (uint64_t)v7 + 312;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v10, (__int128 *)&v52);
    size = (std::__shared_weak_count *)v52.__r_.__value_.__l.__size_;
    if (v52.__r_.__value_.__l.__size_)
    {
      v12 = (unint64_t *)(v52.__r_.__value_.__l.__size_ + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    if (a5 != 4 * *(int *)(*(_QWORD *)v10 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      v15 = a5;
      v16 = exception;
      std::to_string(&v45, v15);
      v17 = std::string::insert(&v45, 0, "Unexpected size s=");
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      v19 = std::string::append(&v46, "/blob=");
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, 4 * *(int *)(*(_QWORD *)v10 + 8));
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v21 = &v44;
      else
        v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      else
        v22 = v44.__r_.__value_.__l.__size_;
      v23 = std::string::append(&v47, (const std::string::value_type *)v21, v22);
      v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, " @ ");
      if ((v43 & 0x80u) == 0)
        v25 = (const std::string::value_type *)v42;
      else
        v25 = (const std::string::value_type *)v42[0];
      if ((v43 & 0x80u) == 0)
        v26 = v43;
      else
        v26 = v42[1];
      v27 = std::string::append(&v48, v25, v26);
      v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      v29 = std::string::append(&v49, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v40, ":");
      if ((v41 & 0x80u) == 0)
        v31 = (const std::string::value_type *)v40;
      else
        v31 = (const std::string::value_type *)v40[0];
      if ((v41 & 0x80u) == 0)
        v32 = v41;
      else
        v32 = v40[1];
      v33 = std::string::append(&v50, v31, v32);
      v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, 197);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = &v39;
      else
        v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      else
        v36 = v39.__r_.__value_.__l.__size_;
      v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
      v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v16, &v52);
      __cxa_throw(v16, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    return memcpy(*(void **)(*(_QWORD *)v10 + 16), a4, a5);
  }
  return result;
}

void sub_1916171F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  void *v59;
  int v60;
  uint64_t v61;

  if (*(char *)(v61 - 57) < 0)
    operator delete(*(void **)(v61 - 80));
  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v61 - 89) < 0)
    operator delete(*(void **)(v61 - 112));
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v61 - 121) < 0)
    operator delete(*(void **)(v61 - 144));
  if (*(char *)(v61 - 153) < 0)
    operator delete(*(void **)(v61 - 176));
  if (a27 < 0)
    operator delete(a22);
  if (a59 < 0)
    operator delete(a54);
  if (a33 < 0)
    operator delete(a28);
  if (a52 < 0)
    operator delete(a47);
  if (a45 < 0)
    operator delete(a40);
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0)
LABEL_28:
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

BOOL wrapper_kernel<Espresso::topk_kernel_cpu,Espresso::topk_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2;

  v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10)
      return 0;
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

void wrapper_kernel<Espresso::topk_kernel_cpu,Espresso::topk_params_t>::convert_layer_data_to_fp32(_QWORD *a1, char **a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v9;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  const void *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  __int128 v43;
  int64x2_t v44;
  char *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  __int128 v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  int64x2_t v59;
  char *v60;
  _QWORD *v61;
  void *__p;
  void *v63;
  __int128 v64;
  const void *v65;
  std::__shared_weak_count *v66;

  if (a3 != a4)
  {
    v9 = a3;
    v12 = a2 + 2;
    while (1)
    {
      v14 = *(const void **)v9;
      v13 = *(std::__shared_weak_count **)(v9 + 8);
      v65 = *(const void **)v9;
      v66 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
      }
      v17 = operator new(0x118uLL);
      v17[1] = 0;
      v17[2] = 0;
      *v17 = &off_1E2DC1868;
      Espresso::blob_cpu::blob_cpu((uint64_t)(v17 + 3), a1);
      *(_QWORD *)&v64 = v17 + 3;
      *((_QWORD *)&v64 + 1) = v17;
      Espresso::abstract_blob_container::shape((char *)&v58, (uint64_t)v14);
      v56 = 0;
      v57 = 0;
      (*(void (**)(_QWORD *, uint64_t *, uint64_t *))(v17[3] + 16))(v17 + 3, &v58, &v56);
      v18 = v57;
      if (v57)
      {
        v19 = (unint64_t *)&v57->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if (__p)
      {
        v63 = __p;
        operator delete(__p);
      }
      if (v65)
      {
        if (v21)
          break;
      }
      v21 = 0;
      v55 = 0;
      if (a5)
        goto LABEL_21;
LABEL_28:
      v27 = v64;
      if (*((_QWORD *)&v64 + 1))
      {
        v28 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v31 = a2[1];
      v30 = (unint64_t)a2[2];
      if ((unint64_t)v31 >= v30)
      {
        v54 = v27;
        v33 = (v31 - *a2) >> 4;
        if ((unint64_t)(v33 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v34 = v30 - (_QWORD)*a2;
        v35 = v34 >> 3;
        if (v34 >> 3 <= (unint64_t)(v33 + 1))
          v35 = v33 + 1;
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0)
          v36 = 0xFFFFFFFFFFFFFFFLL;
        else
          v36 = v35;
        v61 = v12;
        v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v36);
        v39 = &v37[16 * v33];
        *(_OWORD *)v39 = v54;
        v41 = *a2;
        v40 = a2[1];
        if (v40 == *a2)
        {
          v44 = vdupq_n_s64((unint64_t)v40);
          v42 = &v37[16 * v33];
        }
        else
        {
          v42 = &v37[16 * v33];
          do
          {
            v43 = *((_OWORD *)v40 - 1);
            v40 -= 16;
            *((_OWORD *)v42 - 1) = v43;
            v42 -= 16;
            *(_QWORD *)v40 = 0;
            *((_QWORD *)v40 + 1) = 0;
          }
          while (v40 != v41);
          v44 = *(int64x2_t *)a2;
        }
        v32 = v39 + 16;
        *a2 = v42;
        a2[1] = v39 + 16;
        v59 = v44;
        v45 = a2[2];
        a2[2] = &v37[16 * v38];
        v60 = v45;
        v58 = v44.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v58);
      }
      else
      {
        *(_OWORD *)v31 = v27;
        v32 = v31 + 16;
      }
      a2[1] = v32;
      if (v55)
      {
        v46 = (unint64_t *)&v55->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      v48 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
      if (*((_QWORD *)&v64 + 1))
      {
        v49 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      v51 = v66;
      if (v66)
      {
        v52 = (unint64_t *)&v66->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v9 += 16;
      if (v9 == a4)
        return;
    }
    v55 = v66;
    if (v66)
    {
      v22 = (unint64_t *)&v66->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    if (!a5)
      goto LABEL_28;
LABEL_21:
    if (a6)
    {
      v58 = 0;
      v59.i64[0] = 0;
      (*(void (**)(void *, uint64_t *, uint64_t))(*(_QWORD *)v21 + 40))(v21, &v58, v64 + 160);
      v24 = (std::__shared_weak_count *)v59.i64[0];
      if (v59.i64[0])
      {
        v25 = (unint64_t *)(v59.i64[0] + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v21, v64 + 160, 1.0);
    }
    goto LABEL_28;
  }
}

void sub_19161774C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::topk_kernel_cpu,Espresso::topk_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB4470;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::topk_kernel_cpu,Espresso::topk_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB4470;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::topk_kernel_cpu,Espresso::topk_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_28@<Q0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  uint64_t v7;
  __n128 result;

  v6 = (char *)operator new(0x158uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DB4C18;
  v7 = *a2;
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((_QWORD *)v6 + 38) = v7;
  *((_QWORD *)v6 + 3) = &off_1E2D51FA0;
  *(_OWORD *)(v6 + 312) = 0u;
  *(_OWORD *)(v6 + 328) = 0u;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v6 + 39, *a1, a1[1]);
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1916178AC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::get_shape_kernel_cpu,Espresso::get_shape_params_t>::~wrapper_kernel(Espresso::base_kernel *a1)
{
  *(_QWORD *)a1 = &off_1E2D51FA0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 304);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 288);
  Espresso::base_kernel::~base_kernel(a1);
}

{
  *(_QWORD *)a1 = &off_1E2D51FA0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 304);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 288);
  Espresso::base_kernel::~base_kernel(a1);
  JUMPOUT(0x19401CD90);
}

void wrapper_kernel<Espresso::get_shape_kernel_cpu,Espresso::get_shape_params_t>::__launch(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v5;
  _BOOL4 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  float *v31;
  vDSP_Length v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  __n128 v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  void **v44;
  void **v45;
  void **v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  int *v52;
  float *v53;
  vDSP_Length v54;
  int *v55;
  int v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  vDSP_Length v60;
  vDSP_Length v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  const void *v74;
  void **v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  void **v80;
  const void *v81;
  void *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  _QWORD *v94;
  uint64_t *v95;
  std::__shared_weak_count *v96;
  float __B;
  _QWORD v98[2];
  _QWORD v99[2];
  void **v100[3];
  char *v101[3];
  void *v102;
  std::__shared_weak_count *v103;
  void ***v104;
  std::__shared_weak_count *v105;

  v5 = a3;
  memset(v101, 0, sizeof(v101));
  memset(v100, 0, sizeof(v100));
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)*a3 + 32))(*(_QWORD *)*a3))
    v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)*v5 + 32))(*(_QWORD *)*v5) == 1;
  else
    v7 = 1;
  v8 = (std::__shared_weak_count *)a1[37];
  v99[0] = a1[36];
  v99[1] = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  wrapper_kernel<Espresso::get_shape_kernel_cpu,Espresso::get_shape_params_t>::convert_layer_data_to_fp32(v99, v101, *a4, a4[1], 1, v7);
  if (v8)
  {
    v11 = (unint64_t *)&v8->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v13 = (std::__shared_weak_count *)a1[37];
  v98[0] = a1[36];
  v98[1] = v13;
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  wrapper_kernel<Espresso::get_shape_kernel_cpu,Espresso::get_shape_params_t>::convert_layer_data_to_fp32(v98, (char **)v100, *v5, v5[1], 0, 0);
  if (v13)
  {
    v17 = (unint64_t *)&v13->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v19 = *a4;
  if (a4[1] != *a4)
  {
    v20 = 0;
    do
    {
      if (!v7
        && (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v19 + 16 * v20) + 32))(*(_QWORD *)(v19 + 16 * v20))
         || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(*a4 + 16 * v20) + 32))(*(_QWORD *)(*a4 + 16 * v20)) == 1))
      {
        __B = *(float *)(*(_QWORD *)(*a4 + 16 * v20) + 112);
        v21 = &v101[0][16 * v20];
        v104 = (void ***)v22;
        v23 = (std::__shared_weak_count *)*((_QWORD *)v21 + 1);
        v105 = v23;
        if (v23)
        {
          v24 = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
        }
        v26 = *((_QWORD *)v22 + 20);
        v27 = (std::__shared_weak_count *)*((_QWORD *)v22 + 21);
        v102 = (void *)v26;
        v103 = v27;
        if (v27)
        {
          v28 = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldxr(v28);
          while (__stxr(v29 + 1, v28));
        }
        v30 = 0;
        v31 = *(float **)(v26 + 24);
        v32 = *(int *)(v26 + 8);
        v33 = v26 + 12;
        do
        {
          v32 *= *(int *)(v33 + v30);
          v30 += 4;
        }
        while (v30 != 12);
        vDSP_vsmul(v31, 1, &__B, v31, 1, v32);
        if (v27)
        {
          v34 = (unint64_t *)&v27->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        v36 = v105;
        if (v105)
        {
          v37 = (unint64_t *)&v105->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
      }
      ++v20;
      v19 = *a4;
    }
    while (v20 < (a4[1] - *a4) >> 4);
  }
  Espresso::get_shape_kernel_cpu::__launch((uint64_t)a1, v16, (uint64_t **)v100, (uint64_t **)v101);
  v40 = a1[38];
  if (v40)
  {
    v41 = (std::__shared_weak_count *)a1[39];
    v96 = v41;
    if (v41)
    {
      v42 = (unint64_t *)&v41->__shared_owners_;
      do
        v43 = __ldxr(v42);
      while (__stxr(v43 + 1, v42));
    }
    v44 = v100[0];
    if (*v100[0]
    {
      v46 = v45;
      v47 = (std::__shared_weak_count *)v44[1];
      v104 = (void ***)v45;
      v105 = v47;
      if (v47)
      {
        v48 = (unint64_t *)&v47->__shared_owners_;
        do
          v49 = __ldxr(v48);
        while (__stxr(v49 + 1, v48));
      }
    }
    else
    {
      v47 = 0;
      v46 = 0;
      v104 = 0;
      v105 = 0;
    }
    LODWORD(v50) = *(_DWORD *)(v40 + 8);
    v94 = a1;
    v95 = v5;
    v93 = v47;
    if ((_DWORD)v50 == 1)
    {
      v51 = 0;
      v52 = (int *)v46[20];
      v53 = (float *)*((_QWORD *)v52 + 3);
      v54 = v52[2];
      v55 = v52 + 3;
      do
        v54 *= v55[v51++];
      while (v51 != 3);
      vDSP_vsmul(v53, 1, *(const float **)(v40 + 16), v53, 1, v54);
    }
    else
    {
      v56 = *((_DWORD *)v46 + 4);
      if ((_DWORD)v50 != v56)
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v50, v56);
      v57 = *((_DWORD *)v46 + 5);
      if (v57)
      {
        v58 = 0;
        v59 = 0;
        v60 = *((int *)v46 + 2) * (uint64_t)*((int *)v46 + 3);
        v61 = 4 * (int)v50 * v60;
        do
        {
          if ((_DWORD)v50)
          {
            v62 = 0;
            v63 = 0;
            v64 = v58;
            do
            {
              vDSP_vsmul((const float *)(*((_QWORD *)v46[20] + 3) + v64), 1, (const float *)(*(_QWORD *)(v40 + 16) + v62), (float *)(*((_QWORD *)v46[20] + 3) + v64), 1, v60);
              ++v63;
              v50 = *((int *)v46 + 4);
              v62 += 4;
              v64 += 4 * v60;
            }
            while (v63 < v50);
            v57 = *((_DWORD *)v46 + 5);
          }
          ++v59;
          v58 += v61;
        }
        while (v59 < v57);
      }
    }
    a1 = v94;
    v5 = v95;
    if (v93)
    {
      v65 = (unint64_t *)&v93->__shared_owners_;
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 - 1, v65));
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
        std::__shared_weak_count::__release_weak(v93);
      }
    }
    if (v96)
    {
      v67 = (unint64_t *)&v96->__shared_owners_;
      do
        v68 = __ldaxr(v67);
      while (__stlxr(v68 - 1, v67));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
        std::__shared_weak_count::__release_weak(v96);
      }
    }
  }
  v69 = (std::__shared_weak_count *)a1[37];
  if (v69)
  {
    v70 = (unint64_t *)&v69->__shared_owners_;
    do
      v71 = __ldxr(v70);
    while (__stxr(v71 + 1, v70));
  }
  v72 = *v5;
  if (v5[1] != *v5)
  {
    v73 = 0;
    do
    {
      v74 = *(const void **)(v72 + 16 * v73);
      if (v74
      {
        v76 = (uint64_t)v75;
        v104 = (void ***)v75;
        v77 = *(std::__shared_weak_count **)(v72 + 16 * v73 + 8);
        v105 = v77;
        if (v77)
        {
          v78 = (unint64_t *)&v77->__shared_owners_;
          do
            v79 = __ldxr(v78);
          while (__stxr(v79 + 1, v78));
        }
      }
      else
      {
        v76 = 0;
        v104 = 0;
        v105 = 0;
      }
      v80 = v100[0];
      v81 = v100[0][2 * v73];
      if (v81
      {
        v102 = v82;
        v83 = (std::__shared_weak_count *)v80[2 * v73 + 1];
        v103 = v83;
        if (v83)
        {
          v84 = (unint64_t *)&v83->__shared_owners_;
          do
            v85 = __ldxr(v84);
          while (__stxr(v85 + 1, v84));
        }
      }
      else
      {
        v83 = 0;
        v82 = 0;
        v102 = 0;
        v103 = 0;
      }
      v39.n128_u64[0] = Espresso::QuantSimEngine::blob_container::copy_from_fp32(v76, (uint64_t)v82 + 160, 1.0);
      if (v83)
      {
        v86 = (unint64_t *)&v83->__shared_owners_;
        do
          v87 = __ldaxr(v86);
        while (__stlxr(v87 - 1, v86));
        if (!v87)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v83->__on_zero_shared)(v83, v39);
          std::__shared_weak_count::__release_weak(v83);
        }
      }
      v88 = v105;
      if (v105)
      {
        v89 = (unint64_t *)&v105->__shared_owners_;
        do
          v90 = __ldaxr(v89);
        while (__stlxr(v90 - 1, v89));
        if (!v90)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v88->__on_zero_shared)(v88, v39);
          std::__shared_weak_count::__release_weak(v88);
        }
      }
      ++v73;
      v72 = *v5;
    }
    while (v73 < (v5[1] - *v5) >> 4);
  }
  if (v69)
  {
    v91 = (unint64_t *)&v69->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v69->__on_zero_shared)(v69, v39);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  v104 = v100;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v104);
  v100[0] = (void **)v101;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v100);
}

void sub_19161801C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  *(_QWORD *)(v25 - 104) = &a22;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 104));
  a22 = (void **)&a25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a22);
  _Unwind_Resume(a1);
}

void *wrapper_kernel<Espresso::get_shape_kernel_cpu,Espresso::get_shape_params_t>::__set_weight_raw_blob(void *result, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  void *v7;
  int v8;
  uint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::runtime_error *exception;
  unint64_t v15;
  std::runtime_error *v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  std::string v39;
  _QWORD v40[2];
  unsigned __int8 v41;
  _QWORD v42[2];
  unsigned __int8 v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;

  v7 = result;
  v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10)
      return result;
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    v10 = (uint64_t)v7 + 304;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v10, (__int128 *)&v52);
    size = (std::__shared_weak_count *)v52.__r_.__value_.__l.__size_;
    if (v52.__r_.__value_.__l.__size_)
    {
      v12 = (unint64_t *)(v52.__r_.__value_.__l.__size_ + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    if (a5 != 4 * *(int *)(*(_QWORD *)v10 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      v15 = a5;
      v16 = exception;
      std::to_string(&v45, v15);
      v17 = std::string::insert(&v45, 0, "Unexpected size s=");
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      v19 = std::string::append(&v46, "/blob=");
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, 4 * *(int *)(*(_QWORD *)v10 + 8));
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v21 = &v44;
      else
        v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      else
        v22 = v44.__r_.__value_.__l.__size_;
      v23 = std::string::append(&v47, (const std::string::value_type *)v21, v22);
      v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, " @ ");
      if ((v43 & 0x80u) == 0)
        v25 = (const std::string::value_type *)v42;
      else
        v25 = (const std::string::value_type *)v42[0];
      if ((v43 & 0x80u) == 0)
        v26 = v43;
      else
        v26 = v42[1];
      v27 = std::string::append(&v48, v25, v26);
      v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      v29 = std::string::append(&v49, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v40, ":");
      if ((v41 & 0x80u) == 0)
        v31 = (const std::string::value_type *)v40;
      else
        v31 = (const std::string::value_type *)v40[0];
      if ((v41 & 0x80u) == 0)
        v32 = v41;
      else
        v32 = v40[1];
      v33 = std::string::append(&v50, v31, v32);
      v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, 197);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = &v39;
      else
        v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      else
        v36 = v39.__r_.__value_.__l.__size_;
      v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
      v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v16, &v52);
      __cxa_throw(v16, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    return memcpy(*(void **)(*(_QWORD *)v10 + 16), a4, a5);
  }
  return result;
}

void sub_1916183D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  void *v59;
  int v60;
  uint64_t v61;

  if (*(char *)(v61 - 57) < 0)
    operator delete(*(void **)(v61 - 80));
  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v61 - 89) < 0)
    operator delete(*(void **)(v61 - 112));
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v61 - 121) < 0)
    operator delete(*(void **)(v61 - 144));
  if (*(char *)(v61 - 153) < 0)
    operator delete(*(void **)(v61 - 176));
  if (a27 < 0)
    operator delete(a22);
  if (a59 < 0)
    operator delete(a54);
  if (a33 < 0)
    operator delete(a28);
  if (a52 < 0)
    operator delete(a47);
  if (a45 < 0)
    operator delete(a40);
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0)
LABEL_28:
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

BOOL wrapper_kernel<Espresso::get_shape_kernel_cpu,Espresso::get_shape_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2;

  v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10)
      return 0;
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

const char *Espresso::generic_get_shape_kernel::kernel_type_str(Espresso::generic_get_shape_kernel *this)
{
  return "get_shape";
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::get_shape_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

void wrapper_kernel<Espresso::get_shape_kernel_cpu,Espresso::get_shape_params_t>::convert_layer_data_to_fp32(_QWORD *a1, char **a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v9;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  const void *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  __int128 v43;
  int64x2_t v44;
  char *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  __int128 v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  int64x2_t v59;
  char *v60;
  _QWORD *v61;
  void *__p;
  void *v63;
  __int128 v64;
  const void *v65;
  std::__shared_weak_count *v66;

  if (a3 != a4)
  {
    v9 = a3;
    v12 = a2 + 2;
    while (1)
    {
      v14 = *(const void **)v9;
      v13 = *(std::__shared_weak_count **)(v9 + 8);
      v65 = *(const void **)v9;
      v66 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
      }
      v17 = operator new(0x118uLL);
      v17[1] = 0;
      v17[2] = 0;
      *v17 = &off_1E2DC1868;
      Espresso::blob_cpu::blob_cpu((uint64_t)(v17 + 3), a1);
      *(_QWORD *)&v64 = v17 + 3;
      *((_QWORD *)&v64 + 1) = v17;
      Espresso::abstract_blob_container::shape((char *)&v58, (uint64_t)v14);
      v56 = 0;
      v57 = 0;
      (*(void (**)(_QWORD *, uint64_t *, uint64_t *))(v17[3] + 16))(v17 + 3, &v58, &v56);
      v18 = v57;
      if (v57)
      {
        v19 = (unint64_t *)&v57->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if (__p)
      {
        v63 = __p;
        operator delete(__p);
      }
      if (v65)
      {
        if (v21)
          break;
      }
      v21 = 0;
      v55 = 0;
      if (a5)
        goto LABEL_21;
LABEL_28:
      v27 = v64;
      if (*((_QWORD *)&v64 + 1))
      {
        v28 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v31 = a2[1];
      v30 = (unint64_t)a2[2];
      if ((unint64_t)v31 >= v30)
      {
        v54 = v27;
        v33 = (v31 - *a2) >> 4;
        if ((unint64_t)(v33 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v34 = v30 - (_QWORD)*a2;
        v35 = v34 >> 3;
        if (v34 >> 3 <= (unint64_t)(v33 + 1))
          v35 = v33 + 1;
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0)
          v36 = 0xFFFFFFFFFFFFFFFLL;
        else
          v36 = v35;
        v61 = v12;
        v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v36);
        v39 = &v37[16 * v33];
        *(_OWORD *)v39 = v54;
        v41 = *a2;
        v40 = a2[1];
        if (v40 == *a2)
        {
          v44 = vdupq_n_s64((unint64_t)v40);
          v42 = &v37[16 * v33];
        }
        else
        {
          v42 = &v37[16 * v33];
          do
          {
            v43 = *((_OWORD *)v40 - 1);
            v40 -= 16;
            *((_OWORD *)v42 - 1) = v43;
            v42 -= 16;
            *(_QWORD *)v40 = 0;
            *((_QWORD *)v40 + 1) = 0;
          }
          while (v40 != v41);
          v44 = *(int64x2_t *)a2;
        }
        v32 = v39 + 16;
        *a2 = v42;
        a2[1] = v39 + 16;
        v59 = v44;
        v45 = a2[2];
        a2[2] = &v37[16 * v38];
        v60 = v45;
        v58 = v44.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v58);
      }
      else
      {
        *(_OWORD *)v31 = v27;
        v32 = v31 + 16;
      }
      a2[1] = v32;
      if (v55)
      {
        v46 = (unint64_t *)&v55->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      v48 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
      if (*((_QWORD *)&v64 + 1))
      {
        v49 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      v51 = v66;
      if (v66)
      {
        v52 = (unint64_t *)&v66->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v9 += 16;
      if (v9 == a4)
        return;
    }
    v55 = v66;
    if (v66)
    {
      v22 = (unint64_t *)&v66->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    if (!a5)
      goto LABEL_28;
LABEL_21:
    if (a6)
    {
      v58 = 0;
      v59.i64[0] = 0;
      (*(void (**)(void *, uint64_t *, uint64_t))(*(_QWORD *)v21 + 40))(v21, &v58, v64 + 160);
      v24 = (std::__shared_weak_count *)v59.i64[0];
      if (v59.i64[0])
      {
        v25 = (unint64_t *)(v59.i64[0] + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v21, v64 + 160, 1.0);
    }
    goto LABEL_28;
  }
}

void sub_191618944(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::get_shape_kernel_cpu,Espresso::get_shape_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB4C18;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::get_shape_kernel_cpu,Espresso::get_shape_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB4C18;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::get_shape_kernel_cpu,Espresso::get_shape_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_27@<Q0>(uint64_t *a1@<X1>, __n128 *a2@<X8>)
{
  char *v4;
  __n128 result;

  v4 = (char *)operator new(0x158uLL);
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 2) = 0;
  *(_QWORD *)v4 = &off_1E2DB4BA8;
  Espresso::base_kernel::base_kernel((uint64_t)(v4 + 24), a1);
  *((_QWORD *)v4 + 3) = &off_1E2D51CF0;
  *(_OWORD *)(v4 + 312) = 0u;
  *(_OWORD *)(v4 + 328) = 0u;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v4 + 39, *a1, a1[1]);
  result.n128_u64[0] = (unint64_t)(v4 + 24);
  result.n128_u64[1] = (unint64_t)v4;
  *a2 = result;
  return result;
}

void sub_191618A90(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::cf_return_kernel_cpu,Espresso::cf_return_params_t>::~wrapper_kernel(Espresso::base_kernel *a1)
{
  *(_QWORD *)a1 = &off_1E2D51CF0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 304);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 288);
  Espresso::base_kernel::~base_kernel(a1);
}

{
  *(_QWORD *)a1 = &off_1E2D51CF0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 304);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 288);
  Espresso::base_kernel::~base_kernel(a1);
  JUMPOUT(0x19401CD90);
}

void wrapper_kernel<Espresso::cf_return_kernel_cpu,Espresso::cf_return_params_t>::__launch(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  _BOOL4 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  void *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  float *v33;
  vDSP_Length v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  __n128 v41;
  uint64_t v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  void **v47;
  void **v48;
  void **v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  int *v55;
  float *v56;
  vDSP_Length v57;
  int *v58;
  int v59;
  int v60;
  uint64_t v61;
  unint64_t v62;
  vDSP_Length v63;
  vDSP_Length v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  const void *v77;
  void **v78;
  uint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  void **v83;
  const void *v84;
  void *v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  float __B;
  _QWORD v100[2];
  _QWORD v101[2];
  void **v102[3];
  char *v103[3];
  void *v104;
  std::__shared_weak_count *v105;
  void ***v106;
  std::__shared_weak_count *v107;

  memset(v103, 0, sizeof(v103));
  memset(v102, 0, sizeof(v102));
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)*a3 + 32))(*(_QWORD *)*a3))
    v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)*a3 + 32))(*(_QWORD *)*a3) == 1;
  else
    v8 = 1;
  v9 = *(std::__shared_weak_count **)(a1 + 296);
  v101[0] = *(_QWORD *)(a1 + 288);
  v101[1] = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  wrapper_kernel<Espresso::cf_return_kernel_cpu,Espresso::cf_return_params_t>::convert_layer_data_to_fp32(v101, v103, *a4, a4[1], 1, v8);
  if (v9)
  {
    v12 = (unint64_t *)&v9->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v14 = *(std::__shared_weak_count **)(a1 + 296);
  v100[0] = *(_QWORD *)(a1 + 288);
  v100[1] = v14;
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  wrapper_kernel<Espresso::cf_return_kernel_cpu,Espresso::cf_return_params_t>::convert_layer_data_to_fp32(v100, (char **)v102, *a3, a3[1], 0, 0);
  v97 = a1;
  if (v14)
  {
    v19 = (unint64_t *)&v14->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v21 = *a4;
  if (a4[1] != *a4)
  {
    v22 = 0;
    do
    {
      if (!v8)
      {
        if (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v21 + 16 * v22) + 32))(*(_QWORD *)(v21 + 16 * v22))
          || (v17 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a4 + 16 * v22) + 32))(*(_QWORD *)(*a4 + 16 * v22)),
              (_DWORD)v17 == 1))
        {
          __B = *(float *)(*(_QWORD *)(*a4 + 16 * v22) + 112);
          v23 = &v103[0][16 * v22];
          v106 = (void ***)v24;
          v25 = (std::__shared_weak_count *)*((_QWORD *)v23 + 1);
          v107 = v25;
          if (v25)
          {
            v26 = (unint64_t *)&v25->__shared_owners_;
            do
              v27 = __ldxr(v26);
            while (__stxr(v27 + 1, v26));
          }
          v28 = *((_QWORD *)v24 + 20);
          v29 = (std::__shared_weak_count *)*((_QWORD *)v24 + 21);
          v104 = (void *)v28;
          v105 = v29;
          if (v29)
          {
            v30 = (unint64_t *)&v29->__shared_owners_;
            do
              v31 = __ldxr(v30);
            while (__stxr(v31 + 1, v30));
          }
          v32 = 0;
          v33 = *(float **)(v28 + 24);
          v34 = *(int *)(v28 + 8);
          v35 = v28 + 12;
          do
          {
            v34 *= *(int *)(v35 + v32);
            v32 += 4;
          }
          while (v32 != 12);
          vDSP_vsmul(v33, 1, &__B, v33, 1, v34);
          if (v29)
          {
            v36 = (unint64_t *)&v29->__shared_owners_;
            do
              v37 = __ldaxr(v36);
            while (__stlxr(v37 - 1, v36));
            if (!v37)
            {
              ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
              std::__shared_weak_count::__release_weak(v29);
            }
          }
          v38 = v107;
          if (v107)
          {
            v39 = (unint64_t *)&v107->__shared_owners_;
            do
              v40 = __ldaxr(v39);
            while (__stlxr(v40 - 1, v39));
            if (!v40)
            {
              ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
              std::__shared_weak_count::__release_weak(v38);
            }
          }
        }
      }
      ++v22;
      v21 = *a4;
    }
    while (v22 < (a4[1] - *a4) >> 4);
  }
  Espresso::cf_return_kernel_cpu::__launch(v17, a2, v18, (uint64_t **)v103);
  v42 = v97;
  v43 = *(_QWORD *)(v97 + 304);
  if (v43)
  {
    v44 = *(std::__shared_weak_count **)(v97 + 312);
    v98 = v44;
    if (v44)
    {
      v45 = (unint64_t *)&v44->__shared_owners_;
      do
        v46 = __ldxr(v45);
      while (__stxr(v46 + 1, v45));
    }
    v47 = v102[0];
    if (*v102[0]
    {
      v49 = v48;
      v50 = (std::__shared_weak_count *)v47[1];
      v106 = (void ***)v48;
      v107 = v50;
      if (v50)
      {
        v51 = (unint64_t *)&v50->__shared_owners_;
        do
          v52 = __ldxr(v51);
        while (__stxr(v52 + 1, v51));
      }
    }
    else
    {
      v50 = 0;
      v49 = 0;
      v106 = 0;
      v107 = 0;
    }
    LODWORD(v53) = *(_DWORD *)(v43 + 8);
    v96 = v50;
    if ((_DWORD)v53 == 1)
    {
      v54 = 0;
      v55 = (int *)v49[20];
      v56 = (float *)*((_QWORD *)v55 + 3);
      v57 = v55[2];
      v58 = v55 + 3;
      do
        v57 *= v58[v54++];
      while (v54 != 3);
      vDSP_vsmul(v56, 1, *(const float **)(v43 + 16), v56, 1, v57);
    }
    else
    {
      v59 = *((_DWORD *)v49 + 4);
      if ((_DWORD)v53 != v59)
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v53, v59);
      v60 = *((_DWORD *)v49 + 5);
      if (v60)
      {
        v61 = 0;
        v62 = 0;
        v63 = *((int *)v49 + 2) * (uint64_t)*((int *)v49 + 3);
        v64 = 4 * (int)v53 * v63;
        do
        {
          if ((_DWORD)v53)
          {
            v65 = 0;
            v66 = 0;
            v67 = v61;
            do
            {
              vDSP_vsmul((const float *)(*((_QWORD *)v49[20] + 3) + v67), 1, (const float *)(*(_QWORD *)(v43 + 16) + v65), (float *)(*((_QWORD *)v49[20] + 3) + v67), 1, v63);
              ++v66;
              v53 = *((int *)v49 + 4);
              v65 += 4;
              v67 += 4 * v63;
            }
            while (v66 < v53);
            v60 = *((_DWORD *)v49 + 5);
          }
          ++v62;
          v61 += v64;
        }
        while (v62 < v60);
      }
    }
    v42 = v97;
    if (v96)
    {
      v68 = (unint64_t *)&v96->__shared_owners_;
      do
        v69 = __ldaxr(v68);
      while (__stlxr(v69 - 1, v68));
      if (!v69)
      {
        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
        std::__shared_weak_count::__release_weak(v96);
      }
    }
    if (v98)
    {
      v70 = (unint64_t *)&v98->__shared_owners_;
      do
        v71 = __ldaxr(v70);
      while (__stlxr(v71 - 1, v70));
      if (!v71)
      {
        ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
        std::__shared_weak_count::__release_weak(v98);
      }
    }
  }
  v72 = *(std::__shared_weak_count **)(v42 + 296);
  if (v72)
  {
    v73 = (unint64_t *)&v72->__shared_owners_;
    do
      v74 = __ldxr(v73);
    while (__stxr(v74 + 1, v73));
  }
  v75 = *a3;
  if (a3[1] != *a3)
  {
    v76 = 0;
    do
    {
      v77 = *(const void **)(v75 + 16 * v76);
      if (v77
      {
        v79 = (uint64_t)v78;
        v106 = (void ***)v78;
        v80 = *(std::__shared_weak_count **)(v75 + 16 * v76 + 8);
        v107 = v80;
        if (v80)
        {
          v81 = (unint64_t *)&v80->__shared_owners_;
          do
            v82 = __ldxr(v81);
          while (__stxr(v82 + 1, v81));
        }
      }
      else
      {
        v79 = 0;
        v106 = 0;
        v107 = 0;
      }
      v83 = v102[0];
      v84 = v102[0][2 * v76];
      if (v84
      {
        v104 = v85;
        v86 = (std::__shared_weak_count *)v83[2 * v76 + 1];
        v105 = v86;
        if (v86)
        {
          v87 = (unint64_t *)&v86->__shared_owners_;
          do
            v88 = __ldxr(v87);
          while (__stxr(v88 + 1, v87));
        }
      }
      else
      {
        v86 = 0;
        v85 = 0;
        v104 = 0;
        v105 = 0;
      }
      v41.n128_u64[0] = Espresso::QuantSimEngine::blob_container::copy_from_fp32(v79, (uint64_t)v85 + 160, 1.0);
      if (v86)
      {
        v89 = (unint64_t *)&v86->__shared_owners_;
        do
          v90 = __ldaxr(v89);
        while (__stlxr(v90 - 1, v89));
        if (!v90)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v86->__on_zero_shared)(v86, v41);
          std::__shared_weak_count::__release_weak(v86);
        }
      }
      v91 = v107;
      if (v107)
      {
        v92 = (unint64_t *)&v107->__shared_owners_;
        do
          v93 = __ldaxr(v92);
        while (__stlxr(v93 - 1, v92));
        if (!v93)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v91->__on_zero_shared)(v91, v41);
          std::__shared_weak_count::__release_weak(v91);
        }
      }
      ++v76;
      v75 = *a3;
    }
    while (v76 < (a3[1] - *a3) >> 4);
  }
  if (v72)
  {
    v94 = (unint64_t *)&v72->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v72->__on_zero_shared)(v72, v41);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  v106 = v102;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v106);
  v102[0] = (void **)v103;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v102);
}

void sub_191619204(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  *(_QWORD *)(v25 - 104) = &a22;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 104));
  a22 = (void **)&a25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a22);
  _Unwind_Resume(a1);
}

void Espresso::generic_cf_return_kernel::top_shapes_for_bottom_shapes(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void *wrapper_kernel<Espresso::cf_return_kernel_cpu,Espresso::cf_return_params_t>::__set_weight_raw_blob(void *result, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  void *v7;
  int v8;
  uint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::runtime_error *exception;
  unint64_t v15;
  std::runtime_error *v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  std::string v39;
  _QWORD v40[2];
  unsigned __int8 v41;
  _QWORD v42[2];
  unsigned __int8 v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;

  v7 = result;
  v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10)
      return result;
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    v10 = (uint64_t)v7 + 304;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v10, (__int128 *)&v52);
    size = (std::__shared_weak_count *)v52.__r_.__value_.__l.__size_;
    if (v52.__r_.__value_.__l.__size_)
    {
      v12 = (unint64_t *)(v52.__r_.__value_.__l.__size_ + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    if (a5 != 4 * *(int *)(*(_QWORD *)v10 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      v15 = a5;
      v16 = exception;
      std::to_string(&v45, v15);
      v17 = std::string::insert(&v45, 0, "Unexpected size s=");
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      v19 = std::string::append(&v46, "/blob=");
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, 4 * *(int *)(*(_QWORD *)v10 + 8));
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v21 = &v44;
      else
        v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      else
        v22 = v44.__r_.__value_.__l.__size_;
      v23 = std::string::append(&v47, (const std::string::value_type *)v21, v22);
      v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, " @ ");
      if ((v43 & 0x80u) == 0)
        v25 = (const std::string::value_type *)v42;
      else
        v25 = (const std::string::value_type *)v42[0];
      if ((v43 & 0x80u) == 0)
        v26 = v43;
      else
        v26 = v42[1];
      v27 = std::string::append(&v48, v25, v26);
      v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      v29 = std::string::append(&v49, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v40, ":");
      if ((v41 & 0x80u) == 0)
        v31 = (const std::string::value_type *)v40;
      else
        v31 = (const std::string::value_type *)v40[0];
      if ((v41 & 0x80u) == 0)
        v32 = v41;
      else
        v32 = v40[1];
      v33 = std::string::append(&v50, v31, v32);
      v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, 197);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = &v39;
      else
        v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      else
        v36 = v39.__r_.__value_.__l.__size_;
      v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
      v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v16, &v52);
      __cxa_throw(v16, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    return memcpy(*(void **)(*(_QWORD *)v10 + 16), a4, a5);
  }
  return result;
}

void sub_1916195C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  void *v59;
  int v60;
  uint64_t v61;

  if (*(char *)(v61 - 57) < 0)
    operator delete(*(void **)(v61 - 80));
  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v61 - 89) < 0)
    operator delete(*(void **)(v61 - 112));
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v61 - 121) < 0)
    operator delete(*(void **)(v61 - 144));
  if (*(char *)(v61 - 153) < 0)
    operator delete(*(void **)(v61 - 176));
  if (a27 < 0)
    operator delete(a22);
  if (a59 < 0)
    operator delete(a54);
  if (a33 < 0)
    operator delete(a28);
  if (a52 < 0)
    operator delete(a47);
  if (a45 < 0)
    operator delete(a40);
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0)
LABEL_28:
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

BOOL wrapper_kernel<Espresso::cf_return_kernel_cpu,Espresso::cf_return_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2;

  v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10)
      return 0;
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

const char *Espresso::generic_cf_return_kernel::kernel_type_str(Espresso::generic_cf_return_kernel *this)
{
  return "cf_return";
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::cf_return_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

void wrapper_kernel<Espresso::cf_return_kernel_cpu,Espresso::cf_return_params_t>::convert_layer_data_to_fp32(_QWORD *a1, char **a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v9;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  const void *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  __int128 v43;
  int64x2_t v44;
  char *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  __int128 v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  int64x2_t v59;
  char *v60;
  _QWORD *v61;
  void *__p;
  void *v63;
  __int128 v64;
  const void *v65;
  std::__shared_weak_count *v66;

  if (a3 != a4)
  {
    v9 = a3;
    v12 = a2 + 2;
    while (1)
    {
      v14 = *(const void **)v9;
      v13 = *(std::__shared_weak_count **)(v9 + 8);
      v65 = *(const void **)v9;
      v66 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
      }
      v17 = operator new(0x118uLL);
      v17[1] = 0;
      v17[2] = 0;
      *v17 = &off_1E2DC1868;
      Espresso::blob_cpu::blob_cpu((uint64_t)(v17 + 3), a1);
      *(_QWORD *)&v64 = v17 + 3;
      *((_QWORD *)&v64 + 1) = v17;
      Espresso::abstract_blob_container::shape((char *)&v58, (uint64_t)v14);
      v56 = 0;
      v57 = 0;
      (*(void (**)(_QWORD *, uint64_t *, uint64_t *))(v17[3] + 16))(v17 + 3, &v58, &v56);
      v18 = v57;
      if (v57)
      {
        v19 = (unint64_t *)&v57->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if (__p)
      {
        v63 = __p;
        operator delete(__p);
      }
      if (v65)
      {
        if (v21)
          break;
      }
      v21 = 0;
      v55 = 0;
      if (a5)
        goto LABEL_21;
LABEL_28:
      v27 = v64;
      if (*((_QWORD *)&v64 + 1))
      {
        v28 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v31 = a2[1];
      v30 = (unint64_t)a2[2];
      if ((unint64_t)v31 >= v30)
      {
        v54 = v27;
        v33 = (v31 - *a2) >> 4;
        if ((unint64_t)(v33 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v34 = v30 - (_QWORD)*a2;
        v35 = v34 >> 3;
        if (v34 >> 3 <= (unint64_t)(v33 + 1))
          v35 = v33 + 1;
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0)
          v36 = 0xFFFFFFFFFFFFFFFLL;
        else
          v36 = v35;
        v61 = v12;
        v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v36);
        v39 = &v37[16 * v33];
        *(_OWORD *)v39 = v54;
        v41 = *a2;
        v40 = a2[1];
        if (v40 == *a2)
        {
          v44 = vdupq_n_s64((unint64_t)v40);
          v42 = &v37[16 * v33];
        }
        else
        {
          v42 = &v37[16 * v33];
          do
          {
            v43 = *((_OWORD *)v40 - 1);
            v40 -= 16;
            *((_OWORD *)v42 - 1) = v43;
            v42 -= 16;
            *(_QWORD *)v40 = 0;
            *((_QWORD *)v40 + 1) = 0;
          }
          while (v40 != v41);
          v44 = *(int64x2_t *)a2;
        }
        v32 = v39 + 16;
        *a2 = v42;
        a2[1] = v39 + 16;
        v59 = v44;
        v45 = a2[2];
        a2[2] = &v37[16 * v38];
        v60 = v45;
        v58 = v44.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v58);
      }
      else
      {
        *(_OWORD *)v31 = v27;
        v32 = v31 + 16;
      }
      a2[1] = v32;
      if (v55)
      {
        v46 = (unint64_t *)&v55->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      v48 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
      if (*((_QWORD *)&v64 + 1))
      {
        v49 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      v51 = v66;
      if (v66)
      {
        v52 = (unint64_t *)&v66->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v9 += 16;
      if (v9 == a4)
        return;
    }
    v55 = v66;
    if (v66)
    {
      v22 = (unint64_t *)&v66->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    if (!a5)
      goto LABEL_28;
LABEL_21:
    if (a6)
    {
      v58 = 0;
      v59.i64[0] = 0;
      (*(void (**)(void *, uint64_t *, uint64_t))(*(_QWORD *)v21 + 40))(v21, &v58, v64 + 160);
      v24 = (std::__shared_weak_count *)v59.i64[0];
      if (v59.i64[0])
      {
        v25 = (unint64_t *)(v59.i64[0] + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v21, v64 + 160, 1.0);
    }
    goto LABEL_28;
  }
}

void sub_191619B38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::cf_return_kernel_cpu,Espresso::cf_return_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB4BA8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::cf_return_kernel_cpu,Espresso::cf_return_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB4BA8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::cf_return_kernel_cpu,Espresso::cf_return_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_26@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  __n128 result;
  std::string __p;

  v6 = (char *)operator new(0x178uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DB4828;
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  Espresso::cf_call_kernel_cpu::cf_call_kernel_cpu((_QWORD *)v6 + 3, a1, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *((_QWORD *)v6 + 3) = &off_1E2D506B8;
  *(_OWORD *)(v6 + 344) = 0u;
  *(_OWORD *)(v6 + 360) = 0u;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v6 + 43, *a1, a1[1]);
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_191619CCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  std::__shared_weak_count *v14;
  void *v16;

  std::__shared_weak_count::~__shared_weak_count(v14);
  operator delete(v16);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::cf_call_kernel_cpu,Espresso::cf_call_params_t>::~wrapper_kernel(Espresso::generic_cf_call_kernel *a1)
{
  *(_QWORD *)a1 = &off_1E2D506B8;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 336);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 320);
  Espresso::generic_cf_call_kernel::~generic_cf_call_kernel(a1);
}

{
  *(_QWORD *)a1 = &off_1E2D506B8;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 336);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 320);
  Espresso::generic_cf_call_kernel::~generic_cf_call_kernel(a1);
  JUMPOUT(0x19401CD90);
}

void wrapper_kernel<Espresso::cf_call_kernel_cpu,Espresso::cf_call_params_t>::__launch(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4)
{
  _BOOL4 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  float *v31;
  vDSP_Length v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  __n128 v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  void **v45;
  void **v46;
  void **v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  int *v53;
  float *v54;
  vDSP_Length v55;
  int *v56;
  int v57;
  int v58;
  uint64_t v59;
  unint64_t v60;
  vDSP_Length v61;
  vDSP_Length v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  const void *v75;
  void **v76;
  uint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  void **v81;
  const void *v82;
  void *v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  uint64_t v95;
  std::__shared_weak_count *v96;
  float __B;
  _QWORD v98[2];
  _QWORD v99[2];
  void **v100[3];
  char *v101[3];
  void *v102;
  std::__shared_weak_count *v103;
  void ***v104;
  std::__shared_weak_count *v105;

  memset(v101, 0, sizeof(v101));
  memset(v100, 0, sizeof(v100));
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)*a3 + 32))(*(_QWORD *)*a3))
    v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)*a3 + 32))(*(_QWORD *)*a3) == 1;
  else
    v8 = 1;
  v9 = *(std::__shared_weak_count **)(a1 + 328);
  v99[0] = *(_QWORD *)(a1 + 320);
  v99[1] = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  wrapper_kernel<Espresso::cf_call_kernel_cpu,Espresso::cf_call_params_t>::convert_layer_data_to_fp32(v99, v101, *a4, a4[1], 1, v8);
  if (v9)
  {
    v12 = (unint64_t *)&v9->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v14 = *(std::__shared_weak_count **)(a1 + 328);
  v98[0] = *(_QWORD *)(a1 + 320);
  v98[1] = v14;
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  wrapper_kernel<Espresso::cf_call_kernel_cpu,Espresso::cf_call_params_t>::convert_layer_data_to_fp32(v98, (char **)v100, *a3, a3[1], 0, 0);
  if (v14)
  {
    v17 = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v95 = a1;
  v19 = *a4;
  if (a4[1] != *a4)
  {
    v20 = 0;
    do
    {
      if (!v8
        && (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v19 + 16 * v20) + 32))(*(_QWORD *)(v19 + 16 * v20))
         || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(*a4 + 16 * v20) + 32))(*(_QWORD *)(*a4 + 16 * v20)) == 1))
      {
        __B = *(float *)(*(_QWORD *)(*a4 + 16 * v20) + 112);
        v21 = &v101[0][16 * v20];
        v104 = (void ***)v22;
        v23 = (std::__shared_weak_count *)*((_QWORD *)v21 + 1);
        v105 = v23;
        if (v23)
        {
          v24 = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
        }
        v26 = *((_QWORD *)v22 + 20);
        v27 = (std::__shared_weak_count *)*((_QWORD *)v22 + 21);
        v102 = (void *)v26;
        v103 = v27;
        if (v27)
        {
          v28 = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldxr(v28);
          while (__stxr(v29 + 1, v28));
        }
        v30 = 0;
        v31 = *(float **)(v26 + 24);
        v32 = *(int *)(v26 + 8);
        v33 = v26 + 12;
        do
        {
          v32 *= *(int *)(v33 + v30);
          v30 += 4;
        }
        while (v30 != 12);
        vDSP_vsmul(v31, 1, &__B, v31, 1, v32);
        if (v27)
        {
          v34 = (unint64_t *)&v27->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        v36 = v105;
        if (v105)
        {
          v37 = (unint64_t *)&v105->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
      }
      ++v20;
      v19 = *a4;
    }
    while (v20 < (a4[1] - *a4) >> 4);
  }
  v39 = v95;
  Espresso::cf_call_kernel_cpu::__launch(v95, a2, (uint64_t *)v100, v101);
  v41 = *(_QWORD *)(v95 + 336);
  if (v41)
  {
    v42 = *(std::__shared_weak_count **)(v95 + 344);
    v96 = v42;
    if (v42)
    {
      v43 = (unint64_t *)&v42->__shared_owners_;
      do
        v44 = __ldxr(v43);
      while (__stxr(v44 + 1, v43));
    }
    v45 = v100[0];
    if (*v100[0]
    {
      v47 = v46;
      v48 = (std::__shared_weak_count *)v45[1];
      v104 = (void ***)v46;
      v105 = v48;
      if (v48)
      {
        v49 = (unint64_t *)&v48->__shared_owners_;
        do
          v50 = __ldxr(v49);
        while (__stxr(v50 + 1, v49));
      }
    }
    else
    {
      v48 = 0;
      v47 = 0;
      v104 = 0;
      v105 = 0;
    }
    LODWORD(v51) = *(_DWORD *)(v41 + 8);
    v94 = v48;
    if ((_DWORD)v51 == 1)
    {
      v52 = 0;
      v53 = (int *)v47[20];
      v54 = (float *)*((_QWORD *)v53 + 3);
      v55 = v53[2];
      v56 = v53 + 3;
      do
        v55 *= v56[v52++];
      while (v52 != 3);
      vDSP_vsmul(v54, 1, *(const float **)(v41 + 16), v54, 1, v55);
    }
    else
    {
      v57 = *((_DWORD *)v47 + 4);
      if ((_DWORD)v51 != v57)
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v51, v57);
      v58 = *((_DWORD *)v47 + 5);
      if (v58)
      {
        v59 = 0;
        v60 = 0;
        v61 = *((int *)v47 + 2) * (uint64_t)*((int *)v47 + 3);
        v62 = 4 * (int)v51 * v61;
        do
        {
          if ((_DWORD)v51)
          {
            v63 = 0;
            v64 = 0;
            v65 = v59;
            do
            {
              vDSP_vsmul((const float *)(*((_QWORD *)v47[20] + 3) + v65), 1, (const float *)(*(_QWORD *)(v41 + 16) + v63), (float *)(*((_QWORD *)v47[20] + 3) + v65), 1, v61);
              ++v64;
              v51 = *((int *)v47 + 4);
              v63 += 4;
              v65 += 4 * v61;
            }
            while (v64 < v51);
            v58 = *((_DWORD *)v47 + 5);
          }
          ++v60;
          v59 += v62;
        }
        while (v60 < v58);
      }
    }
    v39 = v95;
    if (v94)
    {
      v66 = (unint64_t *)&v94->__shared_owners_;
      do
        v67 = __ldaxr(v66);
      while (__stlxr(v67 - 1, v66));
      if (!v67)
      {
        ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
        std::__shared_weak_count::__release_weak(v94);
      }
    }
    if (v96)
    {
      v68 = (unint64_t *)&v96->__shared_owners_;
      do
        v69 = __ldaxr(v68);
      while (__stlxr(v69 - 1, v68));
      if (!v69)
      {
        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
        std::__shared_weak_count::__release_weak(v96);
      }
    }
  }
  v70 = *(std::__shared_weak_count **)(v39 + 328);
  if (v70)
  {
    v71 = (unint64_t *)&v70->__shared_owners_;
    do
      v72 = __ldxr(v71);
    while (__stxr(v72 + 1, v71));
  }
  v73 = *a3;
  if (a3[1] != *a3)
  {
    v74 = 0;
    do
    {
      v75 = *(const void **)(v73 + 16 * v74);
      if (v75
      {
        v77 = (uint64_t)v76;
        v104 = (void ***)v76;
        v78 = *(std::__shared_weak_count **)(v73 + 16 * v74 + 8);
        v105 = v78;
        if (v78)
        {
          v79 = (unint64_t *)&v78->__shared_owners_;
          do
            v80 = __ldxr(v79);
          while (__stxr(v80 + 1, v79));
        }
      }
      else
      {
        v77 = 0;
        v104 = 0;
        v105 = 0;
      }
      v81 = v100[0];
      v82 = v100[0][2 * v74];
      if (v82
      {
        v102 = v83;
        v84 = (std::__shared_weak_count *)v81[2 * v74 + 1];
        v103 = v84;
        if (v84)
        {
          v85 = (unint64_t *)&v84->__shared_owners_;
          do
            v86 = __ldxr(v85);
          while (__stxr(v86 + 1, v85));
        }
      }
      else
      {
        v84 = 0;
        v83 = 0;
        v102 = 0;
        v103 = 0;
      }
      v40.n128_u64[0] = Espresso::QuantSimEngine::blob_container::copy_from_fp32(v77, (uint64_t)v83 + 160, 1.0);
      if (v84)
      {
        v87 = (unint64_t *)&v84->__shared_owners_;
        do
          v88 = __ldaxr(v87);
        while (__stlxr(v88 - 1, v87));
        if (!v88)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v84->__on_zero_shared)(v84, v40);
          std::__shared_weak_count::__release_weak(v84);
        }
      }
      v89 = v105;
      if (v105)
      {
        v90 = (unint64_t *)&v105->__shared_owners_;
        do
          v91 = __ldaxr(v90);
        while (__stlxr(v91 - 1, v90));
        if (!v91)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v89->__on_zero_shared)(v89, v40);
          std::__shared_weak_count::__release_weak(v89);
        }
      }
      ++v74;
      v73 = *a3;
    }
    while (v74 < (a3[1] - *a3) >> 4);
  }
  if (v70)
  {
    v92 = (unint64_t *)&v70->__shared_owners_;
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v70->__on_zero_shared)(v70, v40);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  v104 = v100;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v104);
  v100[0] = (void **)v101;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v100);
}

void sub_19161A460(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  *(_QWORD *)(v25 - 104) = &a22;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 104));
  a22 = (void **)&a25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a22);
  _Unwind_Resume(a1);
}

void *wrapper_kernel<Espresso::cf_call_kernel_cpu,Espresso::cf_call_params_t>::__set_weight_raw_blob(void *result, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  void *v7;
  int v8;
  uint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::runtime_error *exception;
  unint64_t v15;
  std::runtime_error *v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  std::string v39;
  _QWORD v40[2];
  unsigned __int8 v41;
  _QWORD v42[2];
  unsigned __int8 v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;

  v7 = result;
  v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10)
      return result;
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    v10 = (uint64_t)v7 + 336;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v10, (__int128 *)&v52);
    size = (std::__shared_weak_count *)v52.__r_.__value_.__l.__size_;
    if (v52.__r_.__value_.__l.__size_)
    {
      v12 = (unint64_t *)(v52.__r_.__value_.__l.__size_ + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    if (a5 != 4 * *(int *)(*(_QWORD *)v10 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      v15 = a5;
      v16 = exception;
      std::to_string(&v45, v15);
      v17 = std::string::insert(&v45, 0, "Unexpected size s=");
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      v19 = std::string::append(&v46, "/blob=");
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, 4 * *(int *)(*(_QWORD *)v10 + 8));
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v21 = &v44;
      else
        v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      else
        v22 = v44.__r_.__value_.__l.__size_;
      v23 = std::string::append(&v47, (const std::string::value_type *)v21, v22);
      v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, " @ ");
      if ((v43 & 0x80u) == 0)
        v25 = (const std::string::value_type *)v42;
      else
        v25 = (const std::string::value_type *)v42[0];
      if ((v43 & 0x80u) == 0)
        v26 = v43;
      else
        v26 = v42[1];
      v27 = std::string::append(&v48, v25, v26);
      v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      v29 = std::string::append(&v49, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v40, ":");
      if ((v41 & 0x80u) == 0)
        v31 = (const std::string::value_type *)v40;
      else
        v31 = (const std::string::value_type *)v40[0];
      if ((v41 & 0x80u) == 0)
        v32 = v41;
      else
        v32 = v40[1];
      v33 = std::string::append(&v50, v31, v32);
      v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, 197);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = &v39;
      else
        v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      else
        v36 = v39.__r_.__value_.__l.__size_;
      v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
      v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v16, &v52);
      __cxa_throw(v16, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    return memcpy(*(void **)(*(_QWORD *)v10 + 16), a4, a5);
  }
  return result;
}

void sub_19161A818(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  void *v59;
  int v60;
  uint64_t v61;

  if (*(char *)(v61 - 57) < 0)
    operator delete(*(void **)(v61 - 80));
  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v61 - 89) < 0)
    operator delete(*(void **)(v61 - 112));
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v61 - 121) < 0)
    operator delete(*(void **)(v61 - 144));
  if (*(char *)(v61 - 153) < 0)
    operator delete(*(void **)(v61 - 176));
  if (a27 < 0)
    operator delete(a22);
  if (a59 < 0)
    operator delete(a54);
  if (a33 < 0)
    operator delete(a28);
  if (a52 < 0)
    operator delete(a47);
  if (a45 < 0)
    operator delete(a40);
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0)
LABEL_28:
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

BOOL wrapper_kernel<Espresso::cf_call_kernel_cpu,Espresso::cf_call_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2;

  v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10)
      return 0;
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

const char *Espresso::generic_cf_call_kernel::kernel_type_str(Espresso::generic_cf_call_kernel *this)
{
  return "cf_call";
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::cf_call_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

void wrapper_kernel<Espresso::cf_call_kernel_cpu,Espresso::cf_call_params_t>::convert_layer_data_to_fp32(_QWORD *a1, char **a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v9;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  const void *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  __int128 v43;
  int64x2_t v44;
  char *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  __int128 v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  int64x2_t v59;
  char *v60;
  _QWORD *v61;
  void *__p;
  void *v63;
  __int128 v64;
  const void *v65;
  std::__shared_weak_count *v66;

  if (a3 != a4)
  {
    v9 = a3;
    v12 = a2 + 2;
    while (1)
    {
      v14 = *(const void **)v9;
      v13 = *(std::__shared_weak_count **)(v9 + 8);
      v65 = *(const void **)v9;
      v66 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
      }
      v17 = operator new(0x118uLL);
      v17[1] = 0;
      v17[2] = 0;
      *v17 = &off_1E2DC1868;
      Espresso::blob_cpu::blob_cpu((uint64_t)(v17 + 3), a1);
      *(_QWORD *)&v64 = v17 + 3;
      *((_QWORD *)&v64 + 1) = v17;
      Espresso::abstract_blob_container::shape((char *)&v58, (uint64_t)v14);
      v56 = 0;
      v57 = 0;
      (*(void (**)(_QWORD *, uint64_t *, uint64_t *))(v17[3] + 16))(v17 + 3, &v58, &v56);
      v18 = v57;
      if (v57)
      {
        v19 = (unint64_t *)&v57->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if (__p)
      {
        v63 = __p;
        operator delete(__p);
      }
      if (v65)
      {
        if (v21)
          break;
      }
      v21 = 0;
      v55 = 0;
      if (a5)
        goto LABEL_21;
LABEL_28:
      v27 = v64;
      if (*((_QWORD *)&v64 + 1))
      {
        v28 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v31 = a2[1];
      v30 = (unint64_t)a2[2];
      if ((unint64_t)v31 >= v30)
      {
        v54 = v27;
        v33 = (v31 - *a2) >> 4;
        if ((unint64_t)(v33 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v34 = v30 - (_QWORD)*a2;
        v35 = v34 >> 3;
        if (v34 >> 3 <= (unint64_t)(v33 + 1))
          v35 = v33 + 1;
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0)
          v36 = 0xFFFFFFFFFFFFFFFLL;
        else
          v36 = v35;
        v61 = v12;
        v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v36);
        v39 = &v37[16 * v33];
        *(_OWORD *)v39 = v54;
        v41 = *a2;
        v40 = a2[1];
        if (v40 == *a2)
        {
          v44 = vdupq_n_s64((unint64_t)v40);
          v42 = &v37[16 * v33];
        }
        else
        {
          v42 = &v37[16 * v33];
          do
          {
            v43 = *((_OWORD *)v40 - 1);
            v40 -= 16;
            *((_OWORD *)v42 - 1) = v43;
            v42 -= 16;
            *(_QWORD *)v40 = 0;
            *((_QWORD *)v40 + 1) = 0;
          }
          while (v40 != v41);
          v44 = *(int64x2_t *)a2;
        }
        v32 = v39 + 16;
        *a2 = v42;
        a2[1] = v39 + 16;
        v59 = v44;
        v45 = a2[2];
        a2[2] = &v37[16 * v38];
        v60 = v45;
        v58 = v44.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v58);
      }
      else
      {
        *(_OWORD *)v31 = v27;
        v32 = v31 + 16;
      }
      a2[1] = v32;
      if (v55)
      {
        v46 = (unint64_t *)&v55->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      v48 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
      if (*((_QWORD *)&v64 + 1))
      {
        v49 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      v51 = v66;
      if (v66)
      {
        v52 = (unint64_t *)&v66->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v9 += 16;
      if (v9 == a4)
        return;
    }
    v55 = v66;
    if (v66)
    {
      v22 = (unint64_t *)&v66->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    if (!a5)
      goto LABEL_28;
LABEL_21:
    if (a6)
    {
      v58 = 0;
      v59.i64[0] = 0;
      (*(void (**)(void *, uint64_t *, uint64_t))(*(_QWORD *)v21 + 40))(v21, &v58, v64 + 160);
      v24 = (std::__shared_weak_count *)v59.i64[0];
      if (v59.i64[0])
      {
        v25 = (unint64_t *)(v59.i64[0] + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v21, v64 + 160, 1.0);
    }
    goto LABEL_28;
  }
}

void sub_19161AD88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::cf_call_kernel_cpu,Espresso::cf_call_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB4828;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::cf_call_kernel_cpu,Espresso::cf_call_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB4828;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::cf_call_kernel_cpu,Espresso::cf_call_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_25@<Q0>(uint64_t *a1@<X1>, _DWORD *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  __n128 result;

  v6 = operator new(0x180uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DB4898;
  LODWORD(a2) = *a2;
  Espresso::generic_cf_jump_kernel::generic_cf_jump_kernel(v6 + 3, a1);
  *((_DWORD *)v6 + 76) = (_DWORD)a2;
  v6[3] = &off_1E2D50988;
  v6[39] = &unk_1E2D50AE0;
  *((_OWORD *)v6 + 22) = 0u;
  *((_OWORD *)v6 + 23) = 0u;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v6 + 44, *a1, a1[1]);
  result.n128_u64[0] = (unint64_t)(v6 + 3);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19161AEEC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::cf_jump_kernel_cpu,Espresso::cf_jump_params_t>::~wrapper_kernel(Espresso::generic_cf_jump_kernel *a1)
{
  *(_QWORD *)a1 = &off_1E2D50988;
  *((_QWORD *)a1 + 36) = &unk_1E2D50AE0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 344);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 328);
  Espresso::generic_cf_jump_kernel::~generic_cf_jump_kernel(a1);
}

{
  *(_QWORD *)a1 = &off_1E2D50988;
  *((_QWORD *)a1 + 36) = &unk_1E2D50AE0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 344);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 328);
  Espresso::generic_cf_jump_kernel::~generic_cf_jump_kernel(a1);
  JUMPOUT(0x19401CD90);
}

void wrapper_kernel<Espresso::cf_jump_kernel_cpu,Espresso::cf_jump_params_t>::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  _BOOL4 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  float *v31;
  vDSP_Length v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  __n128 v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  void **v45;
  void **v46;
  void **v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  int *v53;
  float *v54;
  vDSP_Length v55;
  int *v56;
  int v57;
  int v58;
  uint64_t v59;
  unint64_t v60;
  vDSP_Length v61;
  vDSP_Length v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  const void *v75;
  void **v76;
  uint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  void **v81;
  const void *v82;
  void *v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  uint64_t v95;
  std::__shared_weak_count *v96;
  float __B;
  _QWORD v98[2];
  _QWORD v99[2];
  void **v100[3];
  char *v101[3];
  void *v102;
  std::__shared_weak_count *v103;
  void ***v104;
  std::__shared_weak_count *v105;

  memset(v101, 0, sizeof(v101));
  memset(v100, 0, sizeof(v100));
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)*a3 + 32))(*(_QWORD *)*a3))
    v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)*a3 + 32))(*(_QWORD *)*a3) == 1;
  else
    v8 = 1;
  v9 = *(std::__shared_weak_count **)(a1 + 336);
  v99[0] = *(_QWORD *)(a1 + 328);
  v99[1] = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  wrapper_kernel<Espresso::cf_jump_kernel_cpu,Espresso::cf_jump_params_t>::convert_layer_data_to_fp32(v99, v101, *a4, a4[1], 1, v8);
  if (v9)
  {
    v12 = (unint64_t *)&v9->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v14 = *(std::__shared_weak_count **)(a1 + 336);
  v98[0] = *(_QWORD *)(a1 + 328);
  v98[1] = v14;
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  wrapper_kernel<Espresso::cf_jump_kernel_cpu,Espresso::cf_jump_params_t>::convert_layer_data_to_fp32(v98, (char **)v100, *a3, a3[1], 0, 0);
  if (v14)
  {
    v17 = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v95 = a1;
  v19 = *a4;
  if (a4[1] != *a4)
  {
    v20 = 0;
    do
    {
      if (!v8
        && (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v19 + 16 * v20) + 32))(*(_QWORD *)(v19 + 16 * v20))
         || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(*a4 + 16 * v20) + 32))(*(_QWORD *)(*a4 + 16 * v20)) == 1))
      {
        __B = *(float *)(*(_QWORD *)(*a4 + 16 * v20) + 112);
        v21 = &v101[0][16 * v20];
        v104 = (void ***)v22;
        v23 = (std::__shared_weak_count *)*((_QWORD *)v21 + 1);
        v105 = v23;
        if (v23)
        {
          v24 = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
        }
        v26 = *((_QWORD *)v22 + 20);
        v27 = (std::__shared_weak_count *)*((_QWORD *)v22 + 21);
        v102 = (void *)v26;
        v103 = v27;
        if (v27)
        {
          v28 = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldxr(v28);
          while (__stxr(v29 + 1, v28));
        }
        v30 = 0;
        v31 = *(float **)(v26 + 24);
        v32 = *(int *)(v26 + 8);
        v33 = v26 + 12;
        do
        {
          v32 *= *(int *)(v33 + v30);
          v30 += 4;
        }
        while (v30 != 12);
        vDSP_vsmul(v31, 1, &__B, v31, 1, v32);
        if (v27)
        {
          v34 = (unint64_t *)&v27->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        v36 = v105;
        if (v105)
        {
          v37 = (unint64_t *)&v105->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
      }
      ++v20;
      v19 = *a4;
    }
    while (v20 < (a4[1] - *a4) >> 4);
  }
  v39 = v95;
  Espresso::cf_jump_kernel_cpu::__launch(v95, a2);
  v41 = *(_QWORD *)(v95 + 344);
  if (v41)
  {
    v42 = *(std::__shared_weak_count **)(v95 + 352);
    v96 = v42;
    if (v42)
    {
      v43 = (unint64_t *)&v42->__shared_owners_;
      do
        v44 = __ldxr(v43);
      while (__stxr(v44 + 1, v43));
    }
    v45 = v100[0];
    if (*v100[0]
    {
      v47 = v46;
      v48 = (std::__shared_weak_count *)v45[1];
      v104 = (void ***)v46;
      v105 = v48;
      if (v48)
      {
        v49 = (unint64_t *)&v48->__shared_owners_;
        do
          v50 = __ldxr(v49);
        while (__stxr(v50 + 1, v49));
      }
    }
    else
    {
      v48 = 0;
      v47 = 0;
      v104 = 0;
      v105 = 0;
    }
    LODWORD(v51) = *(_DWORD *)(v41 + 8);
    v94 = v48;
    if ((_DWORD)v51 == 1)
    {
      v52 = 0;
      v53 = (int *)v47[20];
      v54 = (float *)*((_QWORD *)v53 + 3);
      v55 = v53[2];
      v56 = v53 + 3;
      do
        v55 *= v56[v52++];
      while (v52 != 3);
      vDSP_vsmul(v54, 1, *(const float **)(v41 + 16), v54, 1, v55);
    }
    else
    {
      v57 = *((_DWORD *)v47 + 4);
      if ((_DWORD)v51 != v57)
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v51, v57);
      v58 = *((_DWORD *)v47 + 5);
      if (v58)
      {
        v59 = 0;
        v60 = 0;
        v61 = *((int *)v47 + 2) * (uint64_t)*((int *)v47 + 3);
        v62 = 4 * (int)v51 * v61;
        do
        {
          if ((_DWORD)v51)
          {
            v63 = 0;
            v64 = 0;
            v65 = v59;
            do
            {
              vDSP_vsmul((const float *)(*((_QWORD *)v47[20] + 3) + v65), 1, (const float *)(*(_QWORD *)(v41 + 16) + v63), (float *)(*((_QWORD *)v47[20] + 3) + v65), 1, v61);
              ++v64;
              v51 = *((int *)v47 + 4);
              v63 += 4;
              v65 += 4 * v61;
            }
            while (v64 < v51);
            v58 = *((_DWORD *)v47 + 5);
          }
          ++v60;
          v59 += v62;
        }
        while (v60 < v58);
      }
    }
    v39 = v95;
    if (v94)
    {
      v66 = (unint64_t *)&v94->__shared_owners_;
      do
        v67 = __ldaxr(v66);
      while (__stlxr(v67 - 1, v66));
      if (!v67)
      {
        ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
        std::__shared_weak_count::__release_weak(v94);
      }
    }
    if (v96)
    {
      v68 = (unint64_t *)&v96->__shared_owners_;
      do
        v69 = __ldaxr(v68);
      while (__stlxr(v69 - 1, v68));
      if (!v69)
      {
        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
        std::__shared_weak_count::__release_weak(v96);
      }
    }
  }
  v70 = *(std::__shared_weak_count **)(v39 + 336);
  if (v70)
  {
    v71 = (unint64_t *)&v70->__shared_owners_;
    do
      v72 = __ldxr(v71);
    while (__stxr(v72 + 1, v71));
  }
  v73 = *a3;
  if (a3[1] != *a3)
  {
    v74 = 0;
    do
    {
      v75 = *(const void **)(v73 + 16 * v74);
      if (v75
      {
        v77 = (uint64_t)v76;
        v104 = (void ***)v76;
        v78 = *(std::__shared_weak_count **)(v73 + 16 * v74 + 8);
        v105 = v78;
        if (v78)
        {
          v79 = (unint64_t *)&v78->__shared_owners_;
          do
            v80 = __ldxr(v79);
          while (__stxr(v80 + 1, v79));
        }
      }
      else
      {
        v77 = 0;
        v104 = 0;
        v105 = 0;
      }
      v81 = v100[0];
      v82 = v100[0][2 * v74];
      if (v82
      {
        v102 = v83;
        v84 = (std::__shared_weak_count *)v81[2 * v74 + 1];
        v103 = v84;
        if (v84)
        {
          v85 = (unint64_t *)&v84->__shared_owners_;
          do
            v86 = __ldxr(v85);
          while (__stxr(v86 + 1, v85));
        }
      }
      else
      {
        v84 = 0;
        v83 = 0;
        v102 = 0;
        v103 = 0;
      }
      v40.n128_u64[0] = Espresso::QuantSimEngine::blob_container::copy_from_fp32(v77, (uint64_t)v83 + 160, 1.0);
      if (v84)
      {
        v87 = (unint64_t *)&v84->__shared_owners_;
        do
          v88 = __ldaxr(v87);
        while (__stlxr(v88 - 1, v87));
        if (!v88)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v84->__on_zero_shared)(v84, v40);
          std::__shared_weak_count::__release_weak(v84);
        }
      }
      v89 = v105;
      if (v105)
      {
        v90 = (unint64_t *)&v105->__shared_owners_;
        do
          v91 = __ldaxr(v90);
        while (__stlxr(v91 - 1, v90));
        if (!v91)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v89->__on_zero_shared)(v89, v40);
          std::__shared_weak_count::__release_weak(v89);
        }
      }
      ++v74;
      v73 = *a3;
    }
    while (v74 < (a3[1] - *a3) >> 4);
  }
  if (v70)
  {
    v92 = (unint64_t *)&v70->__shared_owners_;
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v70->__on_zero_shared)(v70, v40);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  v104 = v100;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v104);
  v100[0] = (void **)v101;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v100);
}

void sub_19161B670(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  *(_QWORD *)(v25 - 104) = &a22;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 104));
  a22 = (void **)&a25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a22);
  _Unwind_Resume(a1);
}

void *wrapper_kernel<Espresso::cf_jump_kernel_cpu,Espresso::cf_jump_params_t>::__set_weight_raw_blob(void *result, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  void *v7;
  int v8;
  uint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::runtime_error *exception;
  unint64_t v15;
  std::runtime_error *v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  std::string v39;
  _QWORD v40[2];
  unsigned __int8 v41;
  _QWORD v42[2];
  unsigned __int8 v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;

  v7 = result;
  v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10)
      return result;
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    v10 = (uint64_t)v7 + 344;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v10, (__int128 *)&v52);
    size = (std::__shared_weak_count *)v52.__r_.__value_.__l.__size_;
    if (v52.__r_.__value_.__l.__size_)
    {
      v12 = (unint64_t *)(v52.__r_.__value_.__l.__size_ + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    if (a5 != 4 * *(int *)(*(_QWORD *)v10 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      v15 = a5;
      v16 = exception;
      std::to_string(&v45, v15);
      v17 = std::string::insert(&v45, 0, "Unexpected size s=");
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      v19 = std::string::append(&v46, "/blob=");
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, 4 * *(int *)(*(_QWORD *)v10 + 8));
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v21 = &v44;
      else
        v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      else
        v22 = v44.__r_.__value_.__l.__size_;
      v23 = std::string::append(&v47, (const std::string::value_type *)v21, v22);
      v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, " @ ");
      if ((v43 & 0x80u) == 0)
        v25 = (const std::string::value_type *)v42;
      else
        v25 = (const std::string::value_type *)v42[0];
      if ((v43 & 0x80u) == 0)
        v26 = v43;
      else
        v26 = v42[1];
      v27 = std::string::append(&v48, v25, v26);
      v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      v29 = std::string::append(&v49, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v40, ":");
      if ((v41 & 0x80u) == 0)
        v31 = (const std::string::value_type *)v40;
      else
        v31 = (const std::string::value_type *)v40[0];
      if ((v41 & 0x80u) == 0)
        v32 = v41;
      else
        v32 = v40[1];
      v33 = std::string::append(&v50, v31, v32);
      v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, 197);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = &v39;
      else
        v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      else
        v36 = v39.__r_.__value_.__l.__size_;
      v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
      v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v16, &v52);
      __cxa_throw(v16, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    return memcpy(*(void **)(*(_QWORD *)v10 + 16), a4, a5);
  }
  return result;
}

void sub_19161BA28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  void *v59;
  int v60;
  uint64_t v61;

  if (*(char *)(v61 - 57) < 0)
    operator delete(*(void **)(v61 - 80));
  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v61 - 89) < 0)
    operator delete(*(void **)(v61 - 112));
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v61 - 121) < 0)
    operator delete(*(void **)(v61 - 144));
  if (*(char *)(v61 - 153) < 0)
    operator delete(*(void **)(v61 - 176));
  if (a27 < 0)
    operator delete(a22);
  if (a59 < 0)
    operator delete(a54);
  if (a33 < 0)
    operator delete(a28);
  if (a52 < 0)
    operator delete(a47);
  if (a45 < 0)
    operator delete(a40);
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0)
LABEL_28:
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

BOOL wrapper_kernel<Espresso::cf_jump_kernel_cpu,Espresso::cf_jump_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2;

  v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10)
      return 0;
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

const char *Espresso::generic_cf_jump_kernel::kernel_type_str(Espresso::generic_cf_jump_kernel *this)
{
  return "cf_jump";
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::cf_jump_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

void `non-virtual thunk to'wrapper_kernel<Espresso::cf_jump_kernel_cpu,Espresso::cf_jump_params_t>::~wrapper_kernel(_QWORD *a1)
{
  Espresso::generic_cf_jump_kernel *v2;

  v2 = (Espresso::generic_cf_jump_kernel *)(a1 - 36);
  *(a1 - 36) = &off_1E2D50988;
  *a1 = &unk_1E2D50AE0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 7));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 5));
  Espresso::generic_cf_jump_kernel::~generic_cf_jump_kernel(v2);
}

{
  Espresso::generic_cf_jump_kernel *v2;

  v2 = (Espresso::generic_cf_jump_kernel *)(a1 - 36);
  *(a1 - 36) = &off_1E2D50988;
  *a1 = &unk_1E2D50AE0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 7));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 5));
  Espresso::generic_cf_jump_kernel::~generic_cf_jump_kernel(v2);
  JUMPOUT(0x19401CD90);
}

void wrapper_kernel<Espresso::cf_jump_kernel_cpu,Espresso::cf_jump_params_t>::convert_layer_data_to_fp32(_QWORD *a1, char **a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v9;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  const void *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  __int128 v43;
  int64x2_t v44;
  char *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  __int128 v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  int64x2_t v59;
  char *v60;
  _QWORD *v61;
  void *__p;
  void *v63;
  __int128 v64;
  const void *v65;
  std::__shared_weak_count *v66;

  if (a3 != a4)
  {
    v9 = a3;
    v12 = a2 + 2;
    while (1)
    {
      v14 = *(const void **)v9;
      v13 = *(std::__shared_weak_count **)(v9 + 8);
      v65 = *(const void **)v9;
      v66 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
      }
      v17 = operator new(0x118uLL);
      v17[1] = 0;
      v17[2] = 0;
      *v17 = &off_1E2DC1868;
      Espresso::blob_cpu::blob_cpu((uint64_t)(v17 + 3), a1);
      *(_QWORD *)&v64 = v17 + 3;
      *((_QWORD *)&v64 + 1) = v17;
      Espresso::abstract_blob_container::shape((char *)&v58, (uint64_t)v14);
      v56 = 0;
      v57 = 0;
      (*(void (**)(_QWORD *, uint64_t *, uint64_t *))(v17[3] + 16))(v17 + 3, &v58, &v56);
      v18 = v57;
      if (v57)
      {
        v19 = (unint64_t *)&v57->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if (__p)
      {
        v63 = __p;
        operator delete(__p);
      }
      if (v65)
      {
        if (v21)
          break;
      }
      v21 = 0;
      v55 = 0;
      if (a5)
        goto LABEL_21;
LABEL_28:
      v27 = v64;
      if (*((_QWORD *)&v64 + 1))
      {
        v28 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v31 = a2[1];
      v30 = (unint64_t)a2[2];
      if ((unint64_t)v31 >= v30)
      {
        v54 = v27;
        v33 = (v31 - *a2) >> 4;
        if ((unint64_t)(v33 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v34 = v30 - (_QWORD)*a2;
        v35 = v34 >> 3;
        if (v34 >> 3 <= (unint64_t)(v33 + 1))
          v35 = v33 + 1;
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0)
          v36 = 0xFFFFFFFFFFFFFFFLL;
        else
          v36 = v35;
        v61 = v12;
        v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v36);
        v39 = &v37[16 * v33];
        *(_OWORD *)v39 = v54;
        v41 = *a2;
        v40 = a2[1];
        if (v40 == *a2)
        {
          v44 = vdupq_n_s64((unint64_t)v40);
          v42 = &v37[16 * v33];
        }
        else
        {
          v42 = &v37[16 * v33];
          do
          {
            v43 = *((_OWORD *)v40 - 1);
            v40 -= 16;
            *((_OWORD *)v42 - 1) = v43;
            v42 -= 16;
            *(_QWORD *)v40 = 0;
            *((_QWORD *)v40 + 1) = 0;
          }
          while (v40 != v41);
          v44 = *(int64x2_t *)a2;
        }
        v32 = v39 + 16;
        *a2 = v42;
        a2[1] = v39 + 16;
        v59 = v44;
        v45 = a2[2];
        a2[2] = &v37[16 * v38];
        v60 = v45;
        v58 = v44.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v58);
      }
      else
      {
        *(_OWORD *)v31 = v27;
        v32 = v31 + 16;
      }
      a2[1] = v32;
      if (v55)
      {
        v46 = (unint64_t *)&v55->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      v48 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
      if (*((_QWORD *)&v64 + 1))
      {
        v49 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      v51 = v66;
      if (v66)
      {
        v52 = (unint64_t *)&v66->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v9 += 16;
      if (v9 == a4)
        return;
    }
    v55 = v66;
    if (v66)
    {
      v22 = (unint64_t *)&v66->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    if (!a5)
      goto LABEL_28;
LABEL_21:
    if (a6)
    {
      v58 = 0;
      v59.i64[0] = 0;
      (*(void (**)(void *, uint64_t *, uint64_t))(*(_QWORD *)v21 + 40))(v21, &v58, v64 + 160);
      v24 = (std::__shared_weak_count *)v59.i64[0];
      if (v59.i64[0])
      {
        v25 = (unint64_t *)(v59.i64[0] + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v21, v64 + 160, 1.0);
    }
    goto LABEL_28;
  }
}

void sub_19161C03C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::cf_jump_kernel_cpu,Espresso::cf_jump_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB4898;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::cf_jump_kernel_cpu,Espresso::cf_jump_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB4898;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::cf_jump_kernel_cpu,Espresso::cf_jump_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_24@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  __n128 result;
  std::string v8;
  std::string __p;
  int v10;

  v6 = (char *)operator new(0x188uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DB4B70;
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v8, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v8 = *(std::string *)a2;
  if (*(char *)(a2 + 47) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a2 + 24), *(_QWORD *)(a2 + 32));
  else
    __p = *(std::string *)(a2 + 24);
  v10 = *(_DWORD *)(a2 + 48);
  Espresso::cf_branch_kernel_cpu::cf_branch_kernel_cpu((uint64_t)(v6 + 24), a1, (uint64_t)&v8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
  *((_QWORD *)v6 + 3) = &off_1E2D51B98;
  *(_OWORD *)(v6 + 360) = 0u;
  *(_OWORD *)(v6 + 376) = 0u;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v6 + 45, *a1, a1[1]);
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19161C220(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::__shared_weak_count *v20;
  void *v22;

  if (a14 < 0)
    operator delete(__p);
  std::__shared_weak_count::~__shared_weak_count(v20);
  operator delete(v22);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::cf_branch_kernel_cpu,Espresso::cf_branch_params_t>::~wrapper_kernel(void **a1)
{
  *a1 = &off_1E2D51B98;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 44));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 42));
  Espresso::generic_cf_branch_kernel::~generic_cf_branch_kernel(a1);
}

{
  *a1 = &off_1E2D51B98;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 44));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 42));
  Espresso::generic_cf_branch_kernel::~generic_cf_branch_kernel(a1);
  JUMPOUT(0x19401CD90);
}

void wrapper_kernel<Espresso::cf_branch_kernel_cpu,Espresso::cf_branch_params_t>::__launch(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4)
{
  _BOOL4 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  void *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  float *v32;
  vDSP_Length v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  __n128 v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  void **v46;
  void **v47;
  void **v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  int *v54;
  float *v55;
  vDSP_Length v56;
  int *v57;
  int v58;
  int v59;
  uint64_t v60;
  unint64_t v61;
  vDSP_Length v62;
  vDSP_Length v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  const void *v76;
  void **v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  void **v82;
  const void *v83;
  void *v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  uint64_t v96;
  std::__shared_weak_count *v97;
  float __B;
  _QWORD v99[2];
  _QWORD v100[2];
  void **v101[3];
  char *v102[3];
  void *v103;
  std::__shared_weak_count *v104;
  void ***v105;
  std::__shared_weak_count *v106;

  memset(v102, 0, sizeof(v102));
  memset(v101, 0, sizeof(v101));
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)*a3 + 32))(*(_QWORD *)*a3))
    v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)*a3 + 32))(*(_QWORD *)*a3) == 1;
  else
    v8 = 1;
  v9 = *(std::__shared_weak_count **)(a1 + 344);
  v100[0] = *(_QWORD *)(a1 + 336);
  v100[1] = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  wrapper_kernel<Espresso::cf_branch_kernel_cpu,Espresso::cf_branch_params_t>::convert_layer_data_to_fp32(v100, v102, *a4, a4[1], 1, v8);
  if (v9)
  {
    v12 = (unint64_t *)&v9->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v14 = *(std::__shared_weak_count **)(a1 + 344);
  v99[0] = *(_QWORD *)(a1 + 336);
  v99[1] = v14;
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  wrapper_kernel<Espresso::cf_branch_kernel_cpu,Espresso::cf_branch_params_t>::convert_layer_data_to_fp32(v99, (char **)v101, *a3, a3[1], 0, 0);
  if (v14)
  {
    v18 = (unint64_t *)&v14->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v96 = a1;
  v20 = *a4;
  if (a4[1] != *a4)
  {
    v21 = 0;
    do
    {
      if (!v8
        && (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v20 + 16 * v21) + 32))(*(_QWORD *)(v20 + 16 * v21))
         || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(*a4 + 16 * v21) + 32))(*(_QWORD *)(*a4 + 16 * v21)) == 1))
      {
        __B = *(float *)(*(_QWORD *)(*a4 + 16 * v21) + 112);
        v22 = &v102[0][16 * v21];
        v105 = (void ***)v23;
        v24 = (std::__shared_weak_count *)*((_QWORD *)v22 + 1);
        v106 = v24;
        if (v24)
        {
          v25 = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldxr(v25);
          while (__stxr(v26 + 1, v25));
        }
        v27 = *((_QWORD *)v23 + 20);
        v28 = (std::__shared_weak_count *)*((_QWORD *)v23 + 21);
        v103 = (void *)v27;
        v104 = v28;
        if (v28)
        {
          v29 = (unint64_t *)&v28->__shared_owners_;
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
        }
        v31 = 0;
        v32 = *(float **)(v27 + 24);
        v33 = *(int *)(v27 + 8);
        v34 = v27 + 12;
        do
        {
          v33 *= *(int *)(v34 + v31);
          v31 += 4;
        }
        while (v31 != 12);
        vDSP_vsmul(v32, 1, &__B, v32, 1, v33);
        if (v28)
        {
          v35 = (unint64_t *)&v28->__shared_owners_;
          do
            v36 = __ldaxr(v35);
          while (__stlxr(v36 - 1, v35));
          if (!v36)
          {
            ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
            std::__shared_weak_count::__release_weak(v28);
          }
        }
        v37 = v106;
        if (v106)
        {
          v38 = (unint64_t *)&v106->__shared_owners_;
          do
            v39 = __ldaxr(v38);
          while (__stlxr(v39 - 1, v38));
          if (!v39)
          {
            ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
            std::__shared_weak_count::__release_weak(v37);
          }
        }
      }
      ++v21;
      v20 = *a4;
    }
    while (v21 < (a4[1] - *a4) >> 4);
  }
  v40 = v96;
  Espresso::cf_branch_kernel_cpu::__launch(v96, a2, v17, (uint64_t)v102);
  v42 = *(_QWORD *)(v96 + 352);
  if (v42)
  {
    v43 = *(std::__shared_weak_count **)(v96 + 360);
    v97 = v43;
    if (v43)
    {
      v44 = (unint64_t *)&v43->__shared_owners_;
      do
        v45 = __ldxr(v44);
      while (__stxr(v45 + 1, v44));
    }
    v46 = v101[0];
    if (*v101[0]
    {
      v48 = v47;
      v49 = (std::__shared_weak_count *)v46[1];
      v105 = (void ***)v47;
      v106 = v49;
      if (v49)
      {
        v50 = (unint64_t *)&v49->__shared_owners_;
        do
          v51 = __ldxr(v50);
        while (__stxr(v51 + 1, v50));
      }
    }
    else
    {
      v49 = 0;
      v48 = 0;
      v105 = 0;
      v106 = 0;
    }
    LODWORD(v52) = *(_DWORD *)(v42 + 8);
    v95 = v49;
    if ((_DWORD)v52 == 1)
    {
      v53 = 0;
      v54 = (int *)v48[20];
      v55 = (float *)*((_QWORD *)v54 + 3);
      v56 = v54[2];
      v57 = v54 + 3;
      do
        v56 *= v57[v53++];
      while (v53 != 3);
      vDSP_vsmul(v55, 1, *(const float **)(v42 + 16), v55, 1, v56);
    }
    else
    {
      v58 = *((_DWORD *)v48 + 4);
      if ((_DWORD)v52 != v58)
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v52, v58);
      v59 = *((_DWORD *)v48 + 5);
      if (v59)
      {
        v60 = 0;
        v61 = 0;
        v62 = *((int *)v48 + 2) * (uint64_t)*((int *)v48 + 3);
        v63 = 4 * (int)v52 * v62;
        do
        {
          if ((_DWORD)v52)
          {
            v64 = 0;
            v65 = 0;
            v66 = v60;
            do
            {
              vDSP_vsmul((const float *)(*((_QWORD *)v48[20] + 3) + v66), 1, (const float *)(*(_QWORD *)(v42 + 16) + v64), (float *)(*((_QWORD *)v48[20] + 3) + v66), 1, v62);
              ++v65;
              v52 = *((int *)v48 + 4);
              v64 += 4;
              v66 += 4 * v62;
            }
            while (v65 < v52);
            v59 = *((_DWORD *)v48 + 5);
          }
          ++v61;
          v60 += v63;
        }
        while (v61 < v59);
      }
    }
    v40 = v96;
    if (v95)
    {
      v67 = (unint64_t *)&v95->__shared_owners_;
      do
        v68 = __ldaxr(v67);
      while (__stlxr(v68 - 1, v67));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
        std::__shared_weak_count::__release_weak(v95);
      }
    }
    if (v97)
    {
      v69 = (unint64_t *)&v97->__shared_owners_;
      do
        v70 = __ldaxr(v69);
      while (__stlxr(v70 - 1, v69));
      if (!v70)
      {
        ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
        std::__shared_weak_count::__release_weak(v97);
      }
    }
  }
  v71 = *(std::__shared_weak_count **)(v40 + 344);
  if (v71)
  {
    v72 = (unint64_t *)&v71->__shared_owners_;
    do
      v73 = __ldxr(v72);
    while (__stxr(v73 + 1, v72));
  }
  v74 = *a3;
  if (a3[1] != *a3)
  {
    v75 = 0;
    do
    {
      v76 = *(const void **)(v74 + 16 * v75);
      if (v76
      {
        v78 = (uint64_t)v77;
        v105 = (void ***)v77;
        v79 = *(std::__shared_weak_count **)(v74 + 16 * v75 + 8);
        v106 = v79;
        if (v79)
        {
          v80 = (unint64_t *)&v79->__shared_owners_;
          do
            v81 = __ldxr(v80);
          while (__stxr(v81 + 1, v80));
        }
      }
      else
      {
        v78 = 0;
        v105 = 0;
        v106 = 0;
      }
      v82 = v101[0];
      v83 = v101[0][2 * v75];
      if (v83
      {
        v103 = v84;
        v85 = (std::__shared_weak_count *)v82[2 * v75 + 1];
        v104 = v85;
        if (v85)
        {
          v86 = (unint64_t *)&v85->__shared_owners_;
          do
            v87 = __ldxr(v86);
          while (__stxr(v87 + 1, v86));
        }
      }
      else
      {
        v85 = 0;
        v84 = 0;
        v103 = 0;
        v104 = 0;
      }
      v41.n128_u64[0] = Espresso::QuantSimEngine::blob_container::copy_from_fp32(v78, (uint64_t)v84 + 160, 1.0);
      if (v85)
      {
        v88 = (unint64_t *)&v85->__shared_owners_;
        do
          v89 = __ldaxr(v88);
        while (__stlxr(v89 - 1, v88));
        if (!v89)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v85->__on_zero_shared)(v85, v41);
          std::__shared_weak_count::__release_weak(v85);
        }
      }
      v90 = v106;
      if (v106)
      {
        v91 = (unint64_t *)&v106->__shared_owners_;
        do
          v92 = __ldaxr(v91);
        while (__stlxr(v92 - 1, v91));
        if (!v92)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v90->__on_zero_shared)(v90, v41);
          std::__shared_weak_count::__release_weak(v90);
        }
      }
      ++v75;
      v74 = *a3;
    }
    while (v75 < (a3[1] - *a3) >> 4);
  }
  if (v71)
  {
    v93 = (unint64_t *)&v71->__shared_owners_;
    do
      v94 = __ldaxr(v93);
    while (__stlxr(v94 - 1, v93));
    if (!v94)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v71->__on_zero_shared)(v71, v41);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  v105 = v101;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v105);
  v101[0] = (void **)v102;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v101);
}

void sub_19161C9C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  *(_QWORD *)(v25 - 104) = &a22;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 104));
  a22 = (void **)&a25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a22);
  _Unwind_Resume(a1);
}

void *wrapper_kernel<Espresso::cf_branch_kernel_cpu,Espresso::cf_branch_params_t>::__set_weight_raw_blob(void *result, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  void *v7;
  int v8;
  uint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::runtime_error *exception;
  unint64_t v15;
  std::runtime_error *v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  std::string v39;
  _QWORD v40[2];
  unsigned __int8 v41;
  _QWORD v42[2];
  unsigned __int8 v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;

  v7 = result;
  v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10)
      return result;
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    v10 = (uint64_t)v7 + 352;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v10, (__int128 *)&v52);
    size = (std::__shared_weak_count *)v52.__r_.__value_.__l.__size_;
    if (v52.__r_.__value_.__l.__size_)
    {
      v12 = (unint64_t *)(v52.__r_.__value_.__l.__size_ + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    if (a5 != 4 * *(int *)(*(_QWORD *)v10 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      v15 = a5;
      v16 = exception;
      std::to_string(&v45, v15);
      v17 = std::string::insert(&v45, 0, "Unexpected size s=");
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      v19 = std::string::append(&v46, "/blob=");
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, 4 * *(int *)(*(_QWORD *)v10 + 8));
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v21 = &v44;
      else
        v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      else
        v22 = v44.__r_.__value_.__l.__size_;
      v23 = std::string::append(&v47, (const std::string::value_type *)v21, v22);
      v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, " @ ");
      if ((v43 & 0x80u) == 0)
        v25 = (const std::string::value_type *)v42;
      else
        v25 = (const std::string::value_type *)v42[0];
      if ((v43 & 0x80u) == 0)
        v26 = v43;
      else
        v26 = v42[1];
      v27 = std::string::append(&v48, v25, v26);
      v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      v29 = std::string::append(&v49, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v40, ":");
      if ((v41 & 0x80u) == 0)
        v31 = (const std::string::value_type *)v40;
      else
        v31 = (const std::string::value_type *)v40[0];
      if ((v41 & 0x80u) == 0)
        v32 = v41;
      else
        v32 = v40[1];
      v33 = std::string::append(&v50, v31, v32);
      v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, 197);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = &v39;
      else
        v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      else
        v36 = v39.__r_.__value_.__l.__size_;
      v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
      v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v16, &v52);
      __cxa_throw(v16, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    return memcpy(*(void **)(*(_QWORD *)v10 + 16), a4, a5);
  }
  return result;
}

void sub_19161CD80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  void *v59;
  int v60;
  uint64_t v61;

  if (*(char *)(v61 - 57) < 0)
    operator delete(*(void **)(v61 - 80));
  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v61 - 89) < 0)
    operator delete(*(void **)(v61 - 112));
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v61 - 121) < 0)
    operator delete(*(void **)(v61 - 144));
  if (*(char *)(v61 - 153) < 0)
    operator delete(*(void **)(v61 - 176));
  if (a27 < 0)
    operator delete(a22);
  if (a59 < 0)
    operator delete(a54);
  if (a33 < 0)
    operator delete(a28);
  if (a52 < 0)
    operator delete(a47);
  if (a45 < 0)
    operator delete(a40);
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0)
LABEL_28:
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

BOOL wrapper_kernel<Espresso::cf_branch_kernel_cpu,Espresso::cf_branch_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2;

  v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10)
      return 0;
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

const char *Espresso::generic_cf_branch_kernel::kernel_type_str(Espresso::generic_cf_branch_kernel *this)
{
  return "cf_branch";
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::cf_branch_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

void wrapper_kernel<Espresso::cf_branch_kernel_cpu,Espresso::cf_branch_params_t>::convert_layer_data_to_fp32(_QWORD *a1, char **a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v9;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  const void *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  __int128 v43;
  int64x2_t v44;
  char *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  __int128 v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  int64x2_t v59;
  char *v60;
  _QWORD *v61;
  void *__p;
  void *v63;
  __int128 v64;
  const void *v65;
  std::__shared_weak_count *v66;

  if (a3 != a4)
  {
    v9 = a3;
    v12 = a2 + 2;
    while (1)
    {
      v14 = *(const void **)v9;
      v13 = *(std::__shared_weak_count **)(v9 + 8);
      v65 = *(const void **)v9;
      v66 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
      }
      v17 = operator new(0x118uLL);
      v17[1] = 0;
      v17[2] = 0;
      *v17 = &off_1E2DC1868;
      Espresso::blob_cpu::blob_cpu((uint64_t)(v17 + 3), a1);
      *(_QWORD *)&v64 = v17 + 3;
      *((_QWORD *)&v64 + 1) = v17;
      Espresso::abstract_blob_container::shape((char *)&v58, (uint64_t)v14);
      v56 = 0;
      v57 = 0;
      (*(void (**)(_QWORD *, uint64_t *, uint64_t *))(v17[3] + 16))(v17 + 3, &v58, &v56);
      v18 = v57;
      if (v57)
      {
        v19 = (unint64_t *)&v57->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if (__p)
      {
        v63 = __p;
        operator delete(__p);
      }
      if (v65)
      {
        if (v21)
          break;
      }
      v21 = 0;
      v55 = 0;
      if (a5)
        goto LABEL_21;
LABEL_28:
      v27 = v64;
      if (*((_QWORD *)&v64 + 1))
      {
        v28 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v31 = a2[1];
      v30 = (unint64_t)a2[2];
      if ((unint64_t)v31 >= v30)
      {
        v54 = v27;
        v33 = (v31 - *a2) >> 4;
        if ((unint64_t)(v33 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v34 = v30 - (_QWORD)*a2;
        v35 = v34 >> 3;
        if (v34 >> 3 <= (unint64_t)(v33 + 1))
          v35 = v33 + 1;
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0)
          v36 = 0xFFFFFFFFFFFFFFFLL;
        else
          v36 = v35;
        v61 = v12;
        v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v36);
        v39 = &v37[16 * v33];
        *(_OWORD *)v39 = v54;
        v41 = *a2;
        v40 = a2[1];
        if (v40 == *a2)
        {
          v44 = vdupq_n_s64((unint64_t)v40);
          v42 = &v37[16 * v33];
        }
        else
        {
          v42 = &v37[16 * v33];
          do
          {
            v43 = *((_OWORD *)v40 - 1);
            v40 -= 16;
            *((_OWORD *)v42 - 1) = v43;
            v42 -= 16;
            *(_QWORD *)v40 = 0;
            *((_QWORD *)v40 + 1) = 0;
          }
          while (v40 != v41);
          v44 = *(int64x2_t *)a2;
        }
        v32 = v39 + 16;
        *a2 = v42;
        a2[1] = v39 + 16;
        v59 = v44;
        v45 = a2[2];
        a2[2] = &v37[16 * v38];
        v60 = v45;
        v58 = v44.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v58);
      }
      else
      {
        *(_OWORD *)v31 = v27;
        v32 = v31 + 16;
      }
      a2[1] = v32;
      if (v55)
      {
        v46 = (unint64_t *)&v55->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      v48 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
      if (*((_QWORD *)&v64 + 1))
      {
        v49 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      v51 = v66;
      if (v66)
      {
        v52 = (unint64_t *)&v66->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v9 += 16;
      if (v9 == a4)
        return;
    }
    v55 = v66;
    if (v66)
    {
      v22 = (unint64_t *)&v66->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    if (!a5)
      goto LABEL_28;
LABEL_21:
    if (a6)
    {
      v58 = 0;
      v59.i64[0] = 0;
      (*(void (**)(void *, uint64_t *, uint64_t))(*(_QWORD *)v21 + 40))(v21, &v58, v64 + 160);
      v24 = (std::__shared_weak_count *)v59.i64[0];
      if (v59.i64[0])
      {
        v25 = (unint64_t *)(v59.i64[0] + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v21, v64 + 160, 1.0);
    }
    goto LABEL_28;
  }
}

void sub_19161D2F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::cf_branch_kernel_cpu,Espresso::cf_branch_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB4B70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::cf_branch_kernel_cpu,Espresso::cf_branch_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB4B70;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::cf_branch_kernel_cpu,Espresso::cf_branch_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_23@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  __n128 result;

  v6 = (char *)operator new(0x168uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DB5430;
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((_OWORD *)v6 + 19) = *(_OWORD *)a2;
  *((_QWORD *)v6 + 40) = *(_QWORD *)(a2 + 16);
  *((_QWORD *)v6 + 3) = &off_1E2D55340;
  *(_OWORD *)(v6 + 328) = 0u;
  *(_OWORD *)(v6 + 344) = 0u;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v6 + 41, *a1, a1[1]);
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19161D458(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::spatial_transformer_kernel_cpu,Espresso::spatial_transformer_params_t>::~wrapper_kernel(Espresso::base_kernel *a1)
{
  *(_QWORD *)a1 = &off_1E2D55340;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 320);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 304);
  Espresso::base_kernel::~base_kernel(a1);
}

{
  *(_QWORD *)a1 = &off_1E2D55340;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 320);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 304);
  Espresso::base_kernel::~base_kernel(a1);
  JUMPOUT(0x19401CD90);
}

void wrapper_kernel<Espresso::spatial_transformer_kernel_cpu,Espresso::spatial_transformer_params_t>::__launch(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v5;
  _BOOL4 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  void **v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  float *v31;
  vDSP_Length v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  __n128 v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  void **v44;
  void **v45;
  void **v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  int *v52;
  float *v53;
  vDSP_Length v54;
  int *v55;
  int v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  vDSP_Length v60;
  vDSP_Length v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  const void *v74;
  void **v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  void **v80;
  const void *v81;
  void *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  _QWORD *v94;
  uint64_t *v95;
  std::__shared_weak_count *v96;
  float __B;
  _QWORD v98[2];
  _QWORD v99[2];
  void **v100[3];
  void **v101[3];
  void *v102;
  std::__shared_weak_count *v103;
  void ***v104;
  std::__shared_weak_count *v105;

  v5 = a3;
  memset(v101, 0, sizeof(v101));
  memset(v100, 0, sizeof(v100));
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)*a3 + 32))(*(_QWORD *)*a3))
    v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)*v5 + 32))(*(_QWORD *)*v5) == 1;
  else
    v7 = 1;
  v8 = (std::__shared_weak_count *)a1[39];
  v99[0] = a1[38];
  v99[1] = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  wrapper_kernel<Espresso::spatial_transformer_kernel_cpu,Espresso::spatial_transformer_params_t>::convert_layer_data_to_fp32(v99, (char **)v101, *a4, a4[1], 1, v7);
  if (v8)
  {
    v11 = (unint64_t *)&v8->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v13 = (std::__shared_weak_count *)a1[39];
  v98[0] = a1[38];
  v98[1] = v13;
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  wrapper_kernel<Espresso::spatial_transformer_kernel_cpu,Espresso::spatial_transformer_params_t>::convert_layer_data_to_fp32(v98, (char **)v100, *v5, v5[1], 0, 0);
  if (v13)
  {
    v17 = (unint64_t *)&v13->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v19 = *a4;
  if (a4[1] != *a4)
  {
    v20 = 0;
    do
    {
      if (!v7
        && (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v19 + 16 * v20) + 32))(*(_QWORD *)(v19 + 16 * v20))
         || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(*a4 + 16 * v20) + 32))(*(_QWORD *)(*a4 + 16 * v20)) == 1))
      {
        __B = *(float *)(*(_QWORD *)(*a4 + 16 * v20) + 112);
        v21 = &v101[0][2 * v20];
        v104 = (void ***)v22;
        v23 = (std::__shared_weak_count *)v21[1];
        v105 = v23;
        if (v23)
        {
          v24 = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
        }
        v26 = *((_QWORD *)v22 + 20);
        v27 = (std::__shared_weak_count *)*((_QWORD *)v22 + 21);
        v102 = (void *)v26;
        v103 = v27;
        if (v27)
        {
          v28 = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldxr(v28);
          while (__stxr(v29 + 1, v28));
        }
        v30 = 0;
        v31 = *(float **)(v26 + 24);
        v32 = *(int *)(v26 + 8);
        v33 = v26 + 12;
        do
        {
          v32 *= *(int *)(v33 + v30);
          v30 += 4;
        }
        while (v30 != 12);
        vDSP_vsmul(v31, 1, &__B, v31, 1, v32);
        if (v27)
        {
          v34 = (unint64_t *)&v27->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        v36 = v105;
        if (v105)
        {
          v37 = (unint64_t *)&v105->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
      }
      ++v20;
      v19 = *a4;
    }
    while (v20 < (a4[1] - *a4) >> 4);
  }
  Espresso::spatial_transformer_kernel_cpu::__launch((uint64_t)a1, v16, v100, v101);
  v40 = a1[40];
  if (v40)
  {
    v41 = (std::__shared_weak_count *)a1[41];
    v96 = v41;
    if (v41)
    {
      v42 = (unint64_t *)&v41->__shared_owners_;
      do
        v43 = __ldxr(v42);
      while (__stxr(v43 + 1, v42));
    }
    v44 = v100[0];
    if (*v100[0]
    {
      v46 = v45;
      v47 = (std::__shared_weak_count *)v44[1];
      v104 = (void ***)v45;
      v105 = v47;
      if (v47)
      {
        v48 = (unint64_t *)&v47->__shared_owners_;
        do
          v49 = __ldxr(v48);
        while (__stxr(v49 + 1, v48));
      }
    }
    else
    {
      v47 = 0;
      v46 = 0;
      v104 = 0;
      v105 = 0;
    }
    LODWORD(v50) = *(_DWORD *)(v40 + 8);
    v94 = a1;
    v95 = v5;
    v93 = v47;
    if ((_DWORD)v50 == 1)
    {
      v51 = 0;
      v52 = (int *)v46[20];
      v53 = (float *)*((_QWORD *)v52 + 3);
      v54 = v52[2];
      v55 = v52 + 3;
      do
        v54 *= v55[v51++];
      while (v51 != 3);
      vDSP_vsmul(v53, 1, *(const float **)(v40 + 16), v53, 1, v54);
    }
    else
    {
      v56 = *((_DWORD *)v46 + 4);
      if ((_DWORD)v50 != v56)
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v50, v56);
      v57 = *((_DWORD *)v46 + 5);
      if (v57)
      {
        v58 = 0;
        v59 = 0;
        v60 = *((int *)v46 + 2) * (uint64_t)*((int *)v46 + 3);
        v61 = 4 * (int)v50 * v60;
        do
        {
          if ((_DWORD)v50)
          {
            v62 = 0;
            v63 = 0;
            v64 = v58;
            do
            {
              vDSP_vsmul((const float *)(*((_QWORD *)v46[20] + 3) + v64), 1, (const float *)(*(_QWORD *)(v40 + 16) + v62), (float *)(*((_QWORD *)v46[20] + 3) + v64), 1, v60);
              ++v63;
              v50 = *((int *)v46 + 4);
              v62 += 4;
              v64 += 4 * v60;
            }
            while (v63 < v50);
            v57 = *((_DWORD *)v46 + 5);
          }
          ++v59;
          v58 += v61;
        }
        while (v59 < v57);
      }
    }
    a1 = v94;
    v5 = v95;
    if (v93)
    {
      v65 = (unint64_t *)&v93->__shared_owners_;
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 - 1, v65));
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
        std::__shared_weak_count::__release_weak(v93);
      }
    }
    if (v96)
    {
      v67 = (unint64_t *)&v96->__shared_owners_;
      do
        v68 = __ldaxr(v67);
      while (__stlxr(v68 - 1, v67));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
        std::__shared_weak_count::__release_weak(v96);
      }
    }
  }
  v69 = (std::__shared_weak_count *)a1[39];
  if (v69)
  {
    v70 = (unint64_t *)&v69->__shared_owners_;
    do
      v71 = __ldxr(v70);
    while (__stxr(v71 + 1, v70));
  }
  v72 = *v5;
  if (v5[1] != *v5)
  {
    v73 = 0;
    do
    {
      v74 = *(const void **)(v72 + 16 * v73);
      if (v74
      {
        v76 = (uint64_t)v75;
        v104 = (void ***)v75;
        v77 = *(std::__shared_weak_count **)(v72 + 16 * v73 + 8);
        v105 = v77;
        if (v77)
        {
          v78 = (unint64_t *)&v77->__shared_owners_;
          do
            v79 = __ldxr(v78);
          while (__stxr(v79 + 1, v78));
        }
      }
      else
      {
        v76 = 0;
        v104 = 0;
        v105 = 0;
      }
      v80 = v100[0];
      v81 = v100[0][2 * v73];
      if (v81
      {
        v102 = v82;
        v83 = (std::__shared_weak_count *)v80[2 * v73 + 1];
        v103 = v83;
        if (v83)
        {
          v84 = (unint64_t *)&v83->__shared_owners_;
          do
            v85 = __ldxr(v84);
          while (__stxr(v85 + 1, v84));
        }
      }
      else
      {
        v83 = 0;
        v82 = 0;
        v102 = 0;
        v103 = 0;
      }
      v39.n128_u64[0] = Espresso::QuantSimEngine::blob_container::copy_from_fp32(v76, (uint64_t)v82 + 160, 1.0);
      if (v83)
      {
        v86 = (unint64_t *)&v83->__shared_owners_;
        do
          v87 = __ldaxr(v86);
        while (__stlxr(v87 - 1, v86));
        if (!v87)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v83->__on_zero_shared)(v83, v39);
          std::__shared_weak_count::__release_weak(v83);
        }
      }
      v88 = v105;
      if (v105)
      {
        v89 = (unint64_t *)&v105->__shared_owners_;
        do
          v90 = __ldaxr(v89);
        while (__stlxr(v90 - 1, v89));
        if (!v90)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v88->__on_zero_shared)(v88, v39);
          std::__shared_weak_count::__release_weak(v88);
        }
      }
      ++v73;
      v72 = *v5;
    }
    while (v73 < (v5[1] - *v5) >> 4);
  }
  if (v69)
  {
    v91 = (unint64_t *)&v69->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v69->__on_zero_shared)(v69, v39);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  v104 = v100;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v104);
  v100[0] = (void **)v101;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v100);
}

void sub_19161DBC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  *(_QWORD *)(v25 - 104) = &a22;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 104));
  a22 = (void **)&a25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a22);
  _Unwind_Resume(a1);
}

void *wrapper_kernel<Espresso::spatial_transformer_kernel_cpu,Espresso::spatial_transformer_params_t>::__set_weight_raw_blob(void *result, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  void *v7;
  int v8;
  uint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::runtime_error *exception;
  unint64_t v15;
  std::runtime_error *v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  std::string v39;
  _QWORD v40[2];
  unsigned __int8 v41;
  _QWORD v42[2];
  unsigned __int8 v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;

  v7 = result;
  v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10)
      return result;
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    v10 = (uint64_t)v7 + 320;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v10, (__int128 *)&v52);
    size = (std::__shared_weak_count *)v52.__r_.__value_.__l.__size_;
    if (v52.__r_.__value_.__l.__size_)
    {
      v12 = (unint64_t *)(v52.__r_.__value_.__l.__size_ + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    if (a5 != 4 * *(int *)(*(_QWORD *)v10 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      v15 = a5;
      v16 = exception;
      std::to_string(&v45, v15);
      v17 = std::string::insert(&v45, 0, "Unexpected size s=");
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      v19 = std::string::append(&v46, "/blob=");
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, 4 * *(int *)(*(_QWORD *)v10 + 8));
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v21 = &v44;
      else
        v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      else
        v22 = v44.__r_.__value_.__l.__size_;
      v23 = std::string::append(&v47, (const std::string::value_type *)v21, v22);
      v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, " @ ");
      if ((v43 & 0x80u) == 0)
        v25 = (const std::string::value_type *)v42;
      else
        v25 = (const std::string::value_type *)v42[0];
      if ((v43 & 0x80u) == 0)
        v26 = v43;
      else
        v26 = v42[1];
      v27 = std::string::append(&v48, v25, v26);
      v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      v29 = std::string::append(&v49, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v40, ":");
      if ((v41 & 0x80u) == 0)
        v31 = (const std::string::value_type *)v40;
      else
        v31 = (const std::string::value_type *)v40[0];
      if ((v41 & 0x80u) == 0)
        v32 = v41;
      else
        v32 = v40[1];
      v33 = std::string::append(&v50, v31, v32);
      v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, 197);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = &v39;
      else
        v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      else
        v36 = v39.__r_.__value_.__l.__size_;
      v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
      v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v16, &v52);
      __cxa_throw(v16, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    return memcpy(*(void **)(*(_QWORD *)v10 + 16), a4, a5);
  }
  return result;
}

void sub_19161DF80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  void *v59;
  int v60;
  uint64_t v61;

  if (*(char *)(v61 - 57) < 0)
    operator delete(*(void **)(v61 - 80));
  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v61 - 89) < 0)
    operator delete(*(void **)(v61 - 112));
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v61 - 121) < 0)
    operator delete(*(void **)(v61 - 144));
  if (*(char *)(v61 - 153) < 0)
    operator delete(*(void **)(v61 - 176));
  if (a27 < 0)
    operator delete(a22);
  if (a59 < 0)
    operator delete(a54);
  if (a33 < 0)
    operator delete(a28);
  if (a52 < 0)
    operator delete(a47);
  if (a45 < 0)
    operator delete(a40);
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0)
LABEL_28:
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

BOOL wrapper_kernel<Espresso::spatial_transformer_kernel_cpu,Espresso::spatial_transformer_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2;

  v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10)
      return 0;
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

void wrapper_kernel<Espresso::spatial_transformer_kernel_cpu,Espresso::spatial_transformer_params_t>::convert_layer_data_to_fp32(_QWORD *a1, char **a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v9;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  const void *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  __int128 v43;
  int64x2_t v44;
  char *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  __int128 v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  int64x2_t v59;
  char *v60;
  _QWORD *v61;
  void *__p;
  void *v63;
  __int128 v64;
  const void *v65;
  std::__shared_weak_count *v66;

  if (a3 != a4)
  {
    v9 = a3;
    v12 = a2 + 2;
    while (1)
    {
      v14 = *(const void **)v9;
      v13 = *(std::__shared_weak_count **)(v9 + 8);
      v65 = *(const void **)v9;
      v66 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
      }
      v17 = operator new(0x118uLL);
      v17[1] = 0;
      v17[2] = 0;
      *v17 = &off_1E2DC1868;
      Espresso::blob_cpu::blob_cpu((uint64_t)(v17 + 3), a1);
      *(_QWORD *)&v64 = v17 + 3;
      *((_QWORD *)&v64 + 1) = v17;
      Espresso::abstract_blob_container::shape((char *)&v58, (uint64_t)v14);
      v56 = 0;
      v57 = 0;
      (*(void (**)(_QWORD *, uint64_t *, uint64_t *))(v17[3] + 16))(v17 + 3, &v58, &v56);
      v18 = v57;
      if (v57)
      {
        v19 = (unint64_t *)&v57->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if (__p)
      {
        v63 = __p;
        operator delete(__p);
      }
      if (v65)
      {
        if (v21)
          break;
      }
      v21 = 0;
      v55 = 0;
      if (a5)
        goto LABEL_21;
LABEL_28:
      v27 = v64;
      if (*((_QWORD *)&v64 + 1))
      {
        v28 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v31 = a2[1];
      v30 = (unint64_t)a2[2];
      if ((unint64_t)v31 >= v30)
      {
        v54 = v27;
        v33 = (v31 - *a2) >> 4;
        if ((unint64_t)(v33 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v34 = v30 - (_QWORD)*a2;
        v35 = v34 >> 3;
        if (v34 >> 3 <= (unint64_t)(v33 + 1))
          v35 = v33 + 1;
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0)
          v36 = 0xFFFFFFFFFFFFFFFLL;
        else
          v36 = v35;
        v61 = v12;
        v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v36);
        v39 = &v37[16 * v33];
        *(_OWORD *)v39 = v54;
        v41 = *a2;
        v40 = a2[1];
        if (v40 == *a2)
        {
          v44 = vdupq_n_s64((unint64_t)v40);
          v42 = &v37[16 * v33];
        }
        else
        {
          v42 = &v37[16 * v33];
          do
          {
            v43 = *((_OWORD *)v40 - 1);
            v40 -= 16;
            *((_OWORD *)v42 - 1) = v43;
            v42 -= 16;
            *(_QWORD *)v40 = 0;
            *((_QWORD *)v40 + 1) = 0;
          }
          while (v40 != v41);
          v44 = *(int64x2_t *)a2;
        }
        v32 = v39 + 16;
        *a2 = v42;
        a2[1] = v39 + 16;
        v59 = v44;
        v45 = a2[2];
        a2[2] = &v37[16 * v38];
        v60 = v45;
        v58 = v44.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v58);
      }
      else
      {
        *(_OWORD *)v31 = v27;
        v32 = v31 + 16;
      }
      a2[1] = v32;
      if (v55)
      {
        v46 = (unint64_t *)&v55->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      v48 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
      if (*((_QWORD *)&v64 + 1))
      {
        v49 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      v51 = v66;
      if (v66)
      {
        v52 = (unint64_t *)&v66->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v9 += 16;
      if (v9 == a4)
        return;
    }
    v55 = v66;
    if (v66)
    {
      v22 = (unint64_t *)&v66->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    if (!a5)
      goto LABEL_28;
LABEL_21:
    if (a6)
    {
      v58 = 0;
      v59.i64[0] = 0;
      (*(void (**)(void *, uint64_t *, uint64_t))(*(_QWORD *)v21 + 40))(v21, &v58, v64 + 160);
      v24 = (std::__shared_weak_count *)v59.i64[0];
      if (v59.i64[0])
      {
        v25 = (unint64_t *)(v59.i64[0] + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v21, v64 + 160, 1.0);
    }
    goto LABEL_28;
  }
}

void sub_19161E4DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::spatial_transformer_kernel_cpu,Espresso::spatial_transformer_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB5430;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::spatial_transformer_kernel_cpu,Espresso::spatial_transformer_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB5430;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::spatial_transformer_kernel_cpu,Espresso::spatial_transformer_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_22@<Q0>(uint64_t *a1@<X1>, _OWORD *a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  __n128 result;

  v6 = (char *)operator new(0x1A8uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DB52E0;
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((_QWORD *)v6 + 39) = 0;
  *((_QWORD *)v6 + 40) = 0;
  *((_QWORD *)v6 + 38) = v6 + 312;
  *((_QWORD *)v6 + 43) = 0;
  *((_QWORD *)v6 + 44) = 0;
  *((_QWORD *)v6 + 3) = &off_1E2D54A48;
  *(_OWORD *)(v6 + 360) = 0u;
  *(_OWORD *)(v6 + 376) = 0u;
  *(_OWORD *)(v6 + 328) = *a2;
  *(_OWORD *)(v6 + 392) = 0u;
  *(_OWORD *)(v6 + 408) = 0u;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v6 + 49, *a1, a1[1]);
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19161E650(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::quantized_gather_kernel_cpu,Espresso::quantized_gather_params_t>::~wrapper_kernel(Espresso::generic_quantized_gather_kernel *a1)
{
  *(_QWORD *)a1 = &off_1E2D54A48;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 384);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 368);
  *(_QWORD *)a1 = &off_1E2D96698;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 352);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 336);
  Espresso::generic_quantized_gather_kernel::~generic_quantized_gather_kernel(a1);
}

{
  *(_QWORD *)a1 = &off_1E2D54A48;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 384);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 368);
  *(_QWORD *)a1 = &off_1E2D96698;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 352);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 336);
  Espresso::generic_quantized_gather_kernel::~generic_quantized_gather_kernel(a1);
  JUMPOUT(0x19401CD90);
}

void wrapper_kernel<Espresso::quantized_gather_kernel_cpu,Espresso::quantized_gather_params_t>::__launch(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v5;
  _BOOL4 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  float *v31;
  vDSP_Length v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  __n128 v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  void **v44;
  void **v45;
  void **v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  int *v52;
  float *v53;
  vDSP_Length v54;
  int *v55;
  int v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  vDSP_Length v60;
  vDSP_Length v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  const void *v74;
  void **v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  void **v80;
  const void *v81;
  void *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  _QWORD *v94;
  uint64_t *v95;
  std::__shared_weak_count *v96;
  float __B;
  _QWORD v98[2];
  _QWORD v99[2];
  void **v100[3];
  char *v101[3];
  void *v102;
  std::__shared_weak_count *v103;
  void ***v104;
  std::__shared_weak_count *v105;

  v5 = a3;
  memset(v101, 0, sizeof(v101));
  memset(v100, 0, sizeof(v100));
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)*a3 + 32))(*(_QWORD *)*a3))
    v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)*v5 + 32))(*(_QWORD *)*v5) == 1;
  else
    v7 = 1;
  v8 = (std::__shared_weak_count *)a1[47];
  v99[0] = a1[46];
  v99[1] = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  wrapper_kernel<Espresso::quantized_gather_kernel_cpu,Espresso::quantized_gather_params_t>::convert_layer_data_to_fp32(v99, v101, *a4, a4[1], 1, v7);
  if (v8)
  {
    v11 = (unint64_t *)&v8->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v13 = (std::__shared_weak_count *)a1[47];
  v98[0] = a1[46];
  v98[1] = v13;
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  wrapper_kernel<Espresso::quantized_gather_kernel_cpu,Espresso::quantized_gather_params_t>::convert_layer_data_to_fp32(v98, (char **)v100, *v5, v5[1], 0, 0);
  if (v13)
  {
    v17 = (unint64_t *)&v13->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v19 = *a4;
  if (a4[1] != *a4)
  {
    v20 = 0;
    do
    {
      if (!v7
        && (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v19 + 16 * v20) + 32))(*(_QWORD *)(v19 + 16 * v20))
         || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(*a4 + 16 * v20) + 32))(*(_QWORD *)(*a4 + 16 * v20)) == 1))
      {
        __B = *(float *)(*(_QWORD *)(*a4 + 16 * v20) + 112);
        v21 = &v101[0][16 * v20];
        v104 = (void ***)v22;
        v23 = (std::__shared_weak_count *)*((_QWORD *)v21 + 1);
        v105 = v23;
        if (v23)
        {
          v24 = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
        }
        v26 = *((_QWORD *)v22 + 20);
        v27 = (std::__shared_weak_count *)*((_QWORD *)v22 + 21);
        v102 = (void *)v26;
        v103 = v27;
        if (v27)
        {
          v28 = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldxr(v28);
          while (__stxr(v29 + 1, v28));
        }
        v30 = 0;
        v31 = *(float **)(v26 + 24);
        v32 = *(int *)(v26 + 8);
        v33 = v26 + 12;
        do
        {
          v32 *= *(int *)(v33 + v30);
          v30 += 4;
        }
        while (v30 != 12);
        vDSP_vsmul(v31, 1, &__B, v31, 1, v32);
        if (v27)
        {
          v34 = (unint64_t *)&v27->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        v36 = v105;
        if (v105)
        {
          v37 = (unint64_t *)&v105->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
      }
      ++v20;
      v19 = *a4;
    }
    while (v20 < (a4[1] - *a4) >> 4);
  }
  Espresso::quantized_gather_kernel_cpu::__launch((uint64_t)a1, v16, (uint64_t **)v100, (uint64_t **)v101);
  v40 = a1[48];
  if (v40)
  {
    v41 = (std::__shared_weak_count *)a1[49];
    v96 = v41;
    if (v41)
    {
      v42 = (unint64_t *)&v41->__shared_owners_;
      do
        v43 = __ldxr(v42);
      while (__stxr(v43 + 1, v42));
    }
    v44 = v100[0];
    if (*v100[0]
    {
      v46 = v45;
      v47 = (std::__shared_weak_count *)v44[1];
      v104 = (void ***)v45;
      v105 = v47;
      if (v47)
      {
        v48 = (unint64_t *)&v47->__shared_owners_;
        do
          v49 = __ldxr(v48);
        while (__stxr(v49 + 1, v48));
      }
    }
    else
    {
      v47 = 0;
      v46 = 0;
      v104 = 0;
      v105 = 0;
    }
    LODWORD(v50) = *(_DWORD *)(v40 + 8);
    v94 = a1;
    v95 = v5;
    v93 = v47;
    if ((_DWORD)v50 == 1)
    {
      v51 = 0;
      v52 = (int *)v46[20];
      v53 = (float *)*((_QWORD *)v52 + 3);
      v54 = v52[2];
      v55 = v52 + 3;
      do
        v54 *= v55[v51++];
      while (v51 != 3);
      vDSP_vsmul(v53, 1, *(const float **)(v40 + 16), v53, 1, v54);
    }
    else
    {
      v56 = *((_DWORD *)v46 + 4);
      if ((_DWORD)v50 != v56)
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v50, v56);
      v57 = *((_DWORD *)v46 + 5);
      if (v57)
      {
        v58 = 0;
        v59 = 0;
        v60 = *((int *)v46 + 2) * (uint64_t)*((int *)v46 + 3);
        v61 = 4 * (int)v50 * v60;
        do
        {
          if ((_DWORD)v50)
          {
            v62 = 0;
            v63 = 0;
            v64 = v58;
            do
            {
              vDSP_vsmul((const float *)(*((_QWORD *)v46[20] + 3) + v64), 1, (const float *)(*(_QWORD *)(v40 + 16) + v62), (float *)(*((_QWORD *)v46[20] + 3) + v64), 1, v60);
              ++v63;
              v50 = *((int *)v46 + 4);
              v62 += 4;
              v64 += 4 * v60;
            }
            while (v63 < v50);
            v57 = *((_DWORD *)v46 + 5);
          }
          ++v59;
          v58 += v61;
        }
        while (v59 < v57);
      }
    }
    a1 = v94;
    v5 = v95;
    if (v93)
    {
      v65 = (unint64_t *)&v93->__shared_owners_;
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 - 1, v65));
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
        std::__shared_weak_count::__release_weak(v93);
      }
    }
    if (v96)
    {
      v67 = (unint64_t *)&v96->__shared_owners_;
      do
        v68 = __ldaxr(v67);
      while (__stlxr(v68 - 1, v67));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
        std::__shared_weak_count::__release_weak(v96);
      }
    }
  }
  v69 = (std::__shared_weak_count *)a1[47];
  if (v69)
  {
    v70 = (unint64_t *)&v69->__shared_owners_;
    do
      v71 = __ldxr(v70);
    while (__stxr(v71 + 1, v70));
  }
  v72 = *v5;
  if (v5[1] != *v5)
  {
    v73 = 0;
    do
    {
      v74 = *(const void **)(v72 + 16 * v73);
      if (v74
      {
        v76 = (uint64_t)v75;
        v104 = (void ***)v75;
        v77 = *(std::__shared_weak_count **)(v72 + 16 * v73 + 8);
        v105 = v77;
        if (v77)
        {
          v78 = (unint64_t *)&v77->__shared_owners_;
          do
            v79 = __ldxr(v78);
          while (__stxr(v79 + 1, v78));
        }
      }
      else
      {
        v76 = 0;
        v104 = 0;
        v105 = 0;
      }
      v80 = v100[0];
      v81 = v100[0][2 * v73];
      if (v81
      {
        v102 = v82;
        v83 = (std::__shared_weak_count *)v80[2 * v73 + 1];
        v103 = v83;
        if (v83)
        {
          v84 = (unint64_t *)&v83->__shared_owners_;
          do
            v85 = __ldxr(v84);
          while (__stxr(v85 + 1, v84));
        }
      }
      else
      {
        v83 = 0;
        v82 = 0;
        v102 = 0;
        v103 = 0;
      }
      v39.n128_u64[0] = Espresso::QuantSimEngine::blob_container::copy_from_fp32(v76, (uint64_t)v82 + 160, 1.0);
      if (v83)
      {
        v86 = (unint64_t *)&v83->__shared_owners_;
        do
          v87 = __ldaxr(v86);
        while (__stlxr(v87 - 1, v86));
        if (!v87)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v83->__on_zero_shared)(v83, v39);
          std::__shared_weak_count::__release_weak(v83);
        }
      }
      v88 = v105;
      if (v105)
      {
        v89 = (unint64_t *)&v105->__shared_owners_;
        do
          v90 = __ldaxr(v89);
        while (__stlxr(v90 - 1, v89));
        if (!v90)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v88->__on_zero_shared)(v88, v39);
          std::__shared_weak_count::__release_weak(v88);
        }
      }
      ++v73;
      v72 = *v5;
    }
    while (v73 < (v5[1] - *v5) >> 4);
  }
  if (v69)
  {
    v91 = (unint64_t *)&v69->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v69->__on_zero_shared)(v69, v39);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  v104 = v100;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v104);
  v100[0] = (void **)v101;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v100);
}

void sub_19161EDF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  *(_QWORD *)(v25 - 104) = &a22;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 104));
  a22 = (void **)&a25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a22);
  _Unwind_Resume(a1);
}

void Espresso::abstract_kernel_with_weights<Espresso::quantized_gather_params_t>::clear_weights(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 288;
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*(_QWORD **)(a1 + 288));
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 280) = v2;
}

void wrapper_kernel<Espresso::quantized_gather_kernel_cpu,Espresso::quantized_gather_params_t>::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, unint64_t a5, uint64_t *a6)
{
  uint64_t *v8;
  int v10;
  uint64_t v12;
  std::__shared_weak_count *size;
  unint64_t *v14;
  unint64_t v15;
  std::runtime_error *exception;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  std::string v39;
  _QWORD v40[2];
  unsigned __int8 v41;
  _QWORD v42[2];
  unsigned __int8 v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;

  v8 = a3;
  Espresso::quantized_gather_kernel_cpu::__set_weight_raw_blob(a1, a2, a3, a4, a5, a6);
  v10 = *((char *)v8 + 23);
  if (v10 < 0)
  {
    if (v8[1] != 10)
      return;
    v8 = (uint64_t *)*v8;
  }
  else if (v10 != 10)
  {
    return;
  }
  if (*v8 == 0x6163735F74736F70 && *((_WORD *)v8 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    v12 = a1 + 384;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v12, (__int128 *)&v52);
    size = (std::__shared_weak_count *)v52.__r_.__value_.__l.__size_;
    if (v52.__r_.__value_.__l.__size_)
    {
      v14 = (unint64_t *)(v52.__r_.__value_.__l.__size_ + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    if (a5 != 4 * *(int *)(*(_QWORD *)v12 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v45, a5);
      v17 = std::string::insert(&v45, 0, "Unexpected size s=");
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      v19 = std::string::append(&v46, "/blob=");
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, 4 * *(int *)(*(_QWORD *)v12 + 8));
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v21 = &v44;
      else
        v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      else
        v22 = v44.__r_.__value_.__l.__size_;
      v23 = std::string::append(&v47, (const std::string::value_type *)v21, v22);
      v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, " @ ");
      if ((v43 & 0x80u) == 0)
        v25 = (const std::string::value_type *)v42;
      else
        v25 = (const std::string::value_type *)v42[0];
      if ((v43 & 0x80u) == 0)
        v26 = v43;
      else
        v26 = v42[1];
      v27 = std::string::append(&v48, v25, v26);
      v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      v29 = std::string::append(&v49, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v40, ":");
      if ((v41 & 0x80u) == 0)
        v31 = (const std::string::value_type *)v40;
      else
        v31 = (const std::string::value_type *)v40[0];
      if ((v41 & 0x80u) == 0)
        v32 = v41;
      else
        v32 = v40[1];
      v33 = std::string::append(&v50, v31, v32);
      v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, 197);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = &v39;
      else
        v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      else
        v36 = v39.__r_.__value_.__l.__size_;
      v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
      v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v52);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    memcpy(*(void **)(*(_QWORD *)v12 + 16), a4, a5);
  }
}

void sub_19161F1E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  void *v59;
  int v60;
  uint64_t v61;

  if (*(char *)(v61 - 57) < 0)
    operator delete(*(void **)(v61 - 80));
  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v61 - 89) < 0)
    operator delete(*(void **)(v61 - 112));
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v61 - 121) < 0)
    operator delete(*(void **)(v61 - 144));
  if (*(char *)(v61 - 153) < 0)
    operator delete(*(void **)(v61 - 176));
  if (a27 < 0)
    operator delete(a22);
  if (a59 < 0)
    operator delete(a54);
  if (a33 < 0)
    operator delete(a28);
  if (a52 < 0)
    operator delete(a47);
  if (a45 < 0)
    operator delete(a40);
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0)
LABEL_28:
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

uint64_t wrapper_kernel<Espresso::quantized_gather_kernel_cpu,Espresso::quantized_gather_params_t>::supports_weight_key()
{
  return 1;
}

const char *Espresso::generic_quantized_gather_kernel::kernel_type_str(Espresso::generic_quantized_gather_kernel *this)
{
  return "quantized_gather";
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::quantized_gather_params_t,Espresso::abstract_kernel_with_weights_>::get_params(uint64_t a1)
{
  return a1 + 304;
}

void Espresso::generic_quantized_gather_kernel::get_biases(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void Espresso::generic_quantized_gather_kernel::get_weights(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void Espresso::generic_quantized_gather_kernel::get_f16_weights(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void wrapper_kernel<Espresso::quantized_gather_kernel_cpu,Espresso::quantized_gather_params_t>::convert_layer_data_to_fp32(_QWORD *a1, char **a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v9;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  const void *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  __int128 v43;
  int64x2_t v44;
  char *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  __int128 v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  int64x2_t v59;
  char *v60;
  _QWORD *v61;
  void *__p;
  void *v63;
  __int128 v64;
  const void *v65;
  std::__shared_weak_count *v66;

  if (a3 != a4)
  {
    v9 = a3;
    v12 = a2 + 2;
    while (1)
    {
      v14 = *(const void **)v9;
      v13 = *(std::__shared_weak_count **)(v9 + 8);
      v65 = *(const void **)v9;
      v66 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
      }
      v17 = operator new(0x118uLL);
      v17[1] = 0;
      v17[2] = 0;
      *v17 = &off_1E2DC1868;
      Espresso::blob_cpu::blob_cpu((uint64_t)(v17 + 3), a1);
      *(_QWORD *)&v64 = v17 + 3;
      *((_QWORD *)&v64 + 1) = v17;
      Espresso::abstract_blob_container::shape((char *)&v58, (uint64_t)v14);
      v56 = 0;
      v57 = 0;
      (*(void (**)(_QWORD *, uint64_t *, uint64_t *))(v17[3] + 16))(v17 + 3, &v58, &v56);
      v18 = v57;
      if (v57)
      {
        v19 = (unint64_t *)&v57->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if (__p)
      {
        v63 = __p;
        operator delete(__p);
      }
      if (v65)
      {
        if (v21)
          break;
      }
      v21 = 0;
      v55 = 0;
      if (a5)
        goto LABEL_21;
LABEL_28:
      v27 = v64;
      if (*((_QWORD *)&v64 + 1))
      {
        v28 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v31 = a2[1];
      v30 = (unint64_t)a2[2];
      if ((unint64_t)v31 >= v30)
      {
        v54 = v27;
        v33 = (v31 - *a2) >> 4;
        if ((unint64_t)(v33 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v34 = v30 - (_QWORD)*a2;
        v35 = v34 >> 3;
        if (v34 >> 3 <= (unint64_t)(v33 + 1))
          v35 = v33 + 1;
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0)
          v36 = 0xFFFFFFFFFFFFFFFLL;
        else
          v36 = v35;
        v61 = v12;
        v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v36);
        v39 = &v37[16 * v33];
        *(_OWORD *)v39 = v54;
        v41 = *a2;
        v40 = a2[1];
        if (v40 == *a2)
        {
          v44 = vdupq_n_s64((unint64_t)v40);
          v42 = &v37[16 * v33];
        }
        else
        {
          v42 = &v37[16 * v33];
          do
          {
            v43 = *((_OWORD *)v40 - 1);
            v40 -= 16;
            *((_OWORD *)v42 - 1) = v43;
            v42 -= 16;
            *(_QWORD *)v40 = 0;
            *((_QWORD *)v40 + 1) = 0;
          }
          while (v40 != v41);
          v44 = *(int64x2_t *)a2;
        }
        v32 = v39 + 16;
        *a2 = v42;
        a2[1] = v39 + 16;
        v59 = v44;
        v45 = a2[2];
        a2[2] = &v37[16 * v38];
        v60 = v45;
        v58 = v44.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v58);
      }
      else
      {
        *(_OWORD *)v31 = v27;
        v32 = v31 + 16;
      }
      a2[1] = v32;
      if (v55)
      {
        v46 = (unint64_t *)&v55->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      v48 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
      if (*((_QWORD *)&v64 + 1))
      {
        v49 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      v51 = v66;
      if (v66)
      {
        v52 = (unint64_t *)&v66->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v9 += 16;
      if (v9 == a4)
        return;
    }
    v55 = v66;
    if (v66)
    {
      v22 = (unint64_t *)&v66->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    if (!a5)
      goto LABEL_28;
LABEL_21:
    if (a6)
    {
      v58 = 0;
      v59.i64[0] = 0;
      (*(void (**)(void *, uint64_t *, uint64_t))(*(_QWORD *)v21 + 40))(v21, &v58, v64 + 160);
      v24 = (std::__shared_weak_count *)v59.i64[0];
      if (v59.i64[0])
      {
        v25 = (unint64_t *)(v59.i64[0] + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v21, v64 + 160, 1.0);
    }
    goto LABEL_28;
  }
}

void sub_19161F71C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::quantized_gather_kernel_cpu,Espresso::quantized_gather_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB52E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::quantized_gather_kernel_cpu,Espresso::quantized_gather_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB52E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::quantized_gather_kernel_cpu,Espresso::quantized_gather_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_21@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  __n128 result;

  v6 = (char *)operator new(0x168uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DB4438;
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((_OWORD *)v6 + 19) = *(_OWORD *)a2;
  *((_DWORD *)v6 + 80) = *(_DWORD *)(a2 + 16);
  *((_QWORD *)v6 + 3) = &off_1E2D4EDC0;
  *(_OWORD *)(v6 + 328) = 0u;
  *(_OWORD *)(v6 + 344) = 0u;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v6 + 41, *a1, a1[1]);
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19161F884(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::tile_kernel_cpu,Espresso::tile_params_t>::~wrapper_kernel(Espresso::base_kernel *a1)
{
  *(_QWORD *)a1 = &off_1E2D4EDC0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 320);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 304);
  Espresso::base_kernel::~base_kernel(a1);
}

{
  *(_QWORD *)a1 = &off_1E2D4EDC0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 320);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 304);
  Espresso::base_kernel::~base_kernel(a1);
  JUMPOUT(0x19401CD90);
}

void wrapper_kernel<Espresso::tile_kernel_cpu,Espresso::tile_params_t>::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  _BOOL4 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  float *v31;
  vDSP_Length v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  __n128 v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  void **v45;
  void **v46;
  void **v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  int *v53;
  float *v54;
  vDSP_Length v55;
  int *v56;
  int v57;
  int v58;
  uint64_t v59;
  unint64_t v60;
  vDSP_Length v61;
  vDSP_Length v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  const void *v75;
  void **v76;
  uint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  void **v81;
  const void *v82;
  void *v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  uint64_t v95;
  std::__shared_weak_count *v96;
  float __B;
  _QWORD v98[2];
  _QWORD v99[2];
  void **v100[3];
  char *v101[3];
  void *v102;
  std::__shared_weak_count *v103;
  void ***v104;
  std::__shared_weak_count *v105;

  memset(v101, 0, sizeof(v101));
  memset(v100, 0, sizeof(v100));
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)*a3 + 32))(*(_QWORD *)*a3))
    v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)*a3 + 32))(*(_QWORD *)*a3) == 1;
  else
    v8 = 1;
  v9 = *(std::__shared_weak_count **)(a1 + 312);
  v99[0] = *(_QWORD *)(a1 + 304);
  v99[1] = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  wrapper_kernel<Espresso::tile_kernel_cpu,Espresso::tile_params_t>::convert_layer_data_to_fp32(v99, v101, *a4, a4[1], 1, v8);
  if (v9)
  {
    v12 = (unint64_t *)&v9->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v14 = *(std::__shared_weak_count **)(a1 + 312);
  v98[0] = *(_QWORD *)(a1 + 304);
  v98[1] = v14;
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  wrapper_kernel<Espresso::tile_kernel_cpu,Espresso::tile_params_t>::convert_layer_data_to_fp32(v98, (char **)v100, *a3, a3[1], 0, 0);
  if (v14)
  {
    v17 = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v95 = a1;
  v19 = *a4;
  if (a4[1] != *a4)
  {
    v20 = 0;
    do
    {
      if (!v8
        && (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v19 + 16 * v20) + 32))(*(_QWORD *)(v19 + 16 * v20))
         || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(*a4 + 16 * v20) + 32))(*(_QWORD *)(*a4 + 16 * v20)) == 1))
      {
        __B = *(float *)(*(_QWORD *)(*a4 + 16 * v20) + 112);
        v21 = &v101[0][16 * v20];
        v104 = (void ***)v22;
        v23 = (std::__shared_weak_count *)*((_QWORD *)v21 + 1);
        v105 = v23;
        if (v23)
        {
          v24 = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
        }
        v26 = *((_QWORD *)v22 + 20);
        v27 = (std::__shared_weak_count *)*((_QWORD *)v22 + 21);
        v102 = (void *)v26;
        v103 = v27;
        if (v27)
        {
          v28 = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldxr(v28);
          while (__stxr(v29 + 1, v28));
        }
        v30 = 0;
        v31 = *(float **)(v26 + 24);
        v32 = *(int *)(v26 + 8);
        v33 = v26 + 12;
        do
        {
          v32 *= *(int *)(v33 + v30);
          v30 += 4;
        }
        while (v30 != 12);
        vDSP_vsmul(v31, 1, &__B, v31, 1, v32);
        if (v27)
        {
          v34 = (unint64_t *)&v27->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        v36 = v105;
        if (v105)
        {
          v37 = (unint64_t *)&v105->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
      }
      ++v20;
      v19 = *a4;
    }
    while (v20 < (a4[1] - *a4) >> 4);
  }
  v39 = v95;
  Espresso::tile_kernel_cpu::__launch(v95, a2, (uint64_t **)v100, (uint64_t **)v101);
  v41 = *(_QWORD *)(v95 + 320);
  if (v41)
  {
    v42 = *(std::__shared_weak_count **)(v95 + 328);
    v96 = v42;
    if (v42)
    {
      v43 = (unint64_t *)&v42->__shared_owners_;
      do
        v44 = __ldxr(v43);
      while (__stxr(v44 + 1, v43));
    }
    v45 = v100[0];
    if (*v100[0]
    {
      v47 = v46;
      v48 = (std::__shared_weak_count *)v45[1];
      v104 = (void ***)v46;
      v105 = v48;
      if (v48)
      {
        v49 = (unint64_t *)&v48->__shared_owners_;
        do
          v50 = __ldxr(v49);
        while (__stxr(v50 + 1, v49));
      }
    }
    else
    {
      v48 = 0;
      v47 = 0;
      v104 = 0;
      v105 = 0;
    }
    LODWORD(v51) = *(_DWORD *)(v41 + 8);
    v94 = v48;
    if ((_DWORD)v51 == 1)
    {
      v52 = 0;
      v53 = (int *)v47[20];
      v54 = (float *)*((_QWORD *)v53 + 3);
      v55 = v53[2];
      v56 = v53 + 3;
      do
        v55 *= v56[v52++];
      while (v52 != 3);
      vDSP_vsmul(v54, 1, *(const float **)(v41 + 16), v54, 1, v55);
    }
    else
    {
      v57 = *((_DWORD *)v47 + 4);
      if ((_DWORD)v51 != v57)
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v51, v57);
      v58 = *((_DWORD *)v47 + 5);
      if (v58)
      {
        v59 = 0;
        v60 = 0;
        v61 = *((int *)v47 + 2) * (uint64_t)*((int *)v47 + 3);
        v62 = 4 * (int)v51 * v61;
        do
        {
          if ((_DWORD)v51)
          {
            v63 = 0;
            v64 = 0;
            v65 = v59;
            do
            {
              vDSP_vsmul((const float *)(*((_QWORD *)v47[20] + 3) + v65), 1, (const float *)(*(_QWORD *)(v41 + 16) + v63), (float *)(*((_QWORD *)v47[20] + 3) + v65), 1, v61);
              ++v64;
              v51 = *((int *)v47 + 4);
              v63 += 4;
              v65 += 4 * v61;
            }
            while (v64 < v51);
            v58 = *((_DWORD *)v47 + 5);
          }
          ++v60;
          v59 += v62;
        }
        while (v60 < v58);
      }
    }
    v39 = v95;
    if (v94)
    {
      v66 = (unint64_t *)&v94->__shared_owners_;
      do
        v67 = __ldaxr(v66);
      while (__stlxr(v67 - 1, v66));
      if (!v67)
      {
        ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
        std::__shared_weak_count::__release_weak(v94);
      }
    }
    if (v96)
    {
      v68 = (unint64_t *)&v96->__shared_owners_;
      do
        v69 = __ldaxr(v68);
      while (__stlxr(v69 - 1, v68));
      if (!v69)
      {
        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
        std::__shared_weak_count::__release_weak(v96);
      }
    }
  }
  v70 = *(std::__shared_weak_count **)(v39 + 312);
  if (v70)
  {
    v71 = (unint64_t *)&v70->__shared_owners_;
    do
      v72 = __ldxr(v71);
    while (__stxr(v72 + 1, v71));
  }
  v73 = *a3;
  if (a3[1] != *a3)
  {
    v74 = 0;
    do
    {
      v75 = *(const void **)(v73 + 16 * v74);
      if (v75
      {
        v77 = (uint64_t)v76;
        v104 = (void ***)v76;
        v78 = *(std::__shared_weak_count **)(v73 + 16 * v74 + 8);
        v105 = v78;
        if (v78)
        {
          v79 = (unint64_t *)&v78->__shared_owners_;
          do
            v80 = __ldxr(v79);
          while (__stxr(v80 + 1, v79));
        }
      }
      else
      {
        v77 = 0;
        v104 = 0;
        v105 = 0;
      }
      v81 = v100[0];
      v82 = v100[0][2 * v74];
      if (v82
      {
        v102 = v83;
        v84 = (std::__shared_weak_count *)v81[2 * v74 + 1];
        v103 = v84;
        if (v84)
        {
          v85 = (unint64_t *)&v84->__shared_owners_;
          do
            v86 = __ldxr(v85);
          while (__stxr(v86 + 1, v85));
        }
      }
      else
      {
        v84 = 0;
        v83 = 0;
        v102 = 0;
        v103 = 0;
      }
      v40.n128_u64[0] = Espresso::QuantSimEngine::blob_container::copy_from_fp32(v77, (uint64_t)v83 + 160, 1.0);
      if (v84)
      {
        v87 = (unint64_t *)&v84->__shared_owners_;
        do
          v88 = __ldaxr(v87);
        while (__stlxr(v88 - 1, v87));
        if (!v88)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v84->__on_zero_shared)(v84, v40);
          std::__shared_weak_count::__release_weak(v84);
        }
      }
      v89 = v105;
      if (v105)
      {
        v90 = (unint64_t *)&v105->__shared_owners_;
        do
          v91 = __ldaxr(v90);
        while (__stlxr(v91 - 1, v90));
        if (!v91)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v89->__on_zero_shared)(v89, v40);
          std::__shared_weak_count::__release_weak(v89);
        }
      }
      ++v74;
      v73 = *a3;
    }
    while (v74 < (a3[1] - *a3) >> 4);
  }
  if (v70)
  {
    v92 = (unint64_t *)&v70->__shared_owners_;
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v70->__on_zero_shared)(v70, v40);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  v104 = v100;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v104);
  v100[0] = (void **)v101;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v100);
}

void sub_191620000(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  *(_QWORD *)(v25 - 104) = &a22;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 104));
  a22 = (void **)&a25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a22);
  _Unwind_Resume(a1);
}

void *wrapper_kernel<Espresso::tile_kernel_cpu,Espresso::tile_params_t>::__set_weight_raw_blob(void *result, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  void *v7;
  int v8;
  uint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::runtime_error *exception;
  unint64_t v15;
  std::runtime_error *v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  std::string v39;
  _QWORD v40[2];
  unsigned __int8 v41;
  _QWORD v42[2];
  unsigned __int8 v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;

  v7 = result;
  v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10)
      return result;
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    v10 = (uint64_t)v7 + 320;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v10, (__int128 *)&v52);
    size = (std::__shared_weak_count *)v52.__r_.__value_.__l.__size_;
    if (v52.__r_.__value_.__l.__size_)
    {
      v12 = (unint64_t *)(v52.__r_.__value_.__l.__size_ + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    if (a5 != 4 * *(int *)(*(_QWORD *)v10 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      v15 = a5;
      v16 = exception;
      std::to_string(&v45, v15);
      v17 = std::string::insert(&v45, 0, "Unexpected size s=");
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      v19 = std::string::append(&v46, "/blob=");
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, 4 * *(int *)(*(_QWORD *)v10 + 8));
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v21 = &v44;
      else
        v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      else
        v22 = v44.__r_.__value_.__l.__size_;
      v23 = std::string::append(&v47, (const std::string::value_type *)v21, v22);
      v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, " @ ");
      if ((v43 & 0x80u) == 0)
        v25 = (const std::string::value_type *)v42;
      else
        v25 = (const std::string::value_type *)v42[0];
      if ((v43 & 0x80u) == 0)
        v26 = v43;
      else
        v26 = v42[1];
      v27 = std::string::append(&v48, v25, v26);
      v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      v29 = std::string::append(&v49, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v40, ":");
      if ((v41 & 0x80u) == 0)
        v31 = (const std::string::value_type *)v40;
      else
        v31 = (const std::string::value_type *)v40[0];
      if ((v41 & 0x80u) == 0)
        v32 = v41;
      else
        v32 = v40[1];
      v33 = std::string::append(&v50, v31, v32);
      v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, 197);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = &v39;
      else
        v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      else
        v36 = v39.__r_.__value_.__l.__size_;
      v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
      v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v16, &v52);
      __cxa_throw(v16, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    return memcpy(*(void **)(*(_QWORD *)v10 + 16), a4, a5);
  }
  return result;
}

void sub_1916203B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  void *v59;
  int v60;
  uint64_t v61;

  if (*(char *)(v61 - 57) < 0)
    operator delete(*(void **)(v61 - 80));
  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v61 - 89) < 0)
    operator delete(*(void **)(v61 - 112));
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v61 - 121) < 0)
    operator delete(*(void **)(v61 - 144));
  if (*(char *)(v61 - 153) < 0)
    operator delete(*(void **)(v61 - 176));
  if (a27 < 0)
    operator delete(a22);
  if (a59 < 0)
    operator delete(a54);
  if (a33 < 0)
    operator delete(a28);
  if (a52 < 0)
    operator delete(a47);
  if (a45 < 0)
    operator delete(a40);
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0)
LABEL_28:
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

BOOL wrapper_kernel<Espresso::tile_kernel_cpu,Espresso::tile_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2;

  v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10)
      return 0;
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

void wrapper_kernel<Espresso::tile_kernel_cpu,Espresso::tile_params_t>::convert_layer_data_to_fp32(_QWORD *a1, char **a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v9;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  const void *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  __int128 v43;
  int64x2_t v44;
  char *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  __int128 v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  int64x2_t v59;
  char *v60;
  _QWORD *v61;
  void *__p;
  void *v63;
  __int128 v64;
  const void *v65;
  std::__shared_weak_count *v66;

  if (a3 != a4)
  {
    v9 = a3;
    v12 = a2 + 2;
    while (1)
    {
      v14 = *(const void **)v9;
      v13 = *(std::__shared_weak_count **)(v9 + 8);
      v65 = *(const void **)v9;
      v66 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
      }
      v17 = operator new(0x118uLL);
      v17[1] = 0;
      v17[2] = 0;
      *v17 = &off_1E2DC1868;
      Espresso::blob_cpu::blob_cpu((uint64_t)(v17 + 3), a1);
      *(_QWORD *)&v64 = v17 + 3;
      *((_QWORD *)&v64 + 1) = v17;
      Espresso::abstract_blob_container::shape((char *)&v58, (uint64_t)v14);
      v56 = 0;
      v57 = 0;
      (*(void (**)(_QWORD *, uint64_t *, uint64_t *))(v17[3] + 16))(v17 + 3, &v58, &v56);
      v18 = v57;
      if (v57)
      {
        v19 = (unint64_t *)&v57->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if (__p)
      {
        v63 = __p;
        operator delete(__p);
      }
      if (v65)
      {
        if (v21)
          break;
      }
      v21 = 0;
      v55 = 0;
      if (a5)
        goto LABEL_21;
LABEL_28:
      v27 = v64;
      if (*((_QWORD *)&v64 + 1))
      {
        v28 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v31 = a2[1];
      v30 = (unint64_t)a2[2];
      if ((unint64_t)v31 >= v30)
      {
        v54 = v27;
        v33 = (v31 - *a2) >> 4;
        if ((unint64_t)(v33 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v34 = v30 - (_QWORD)*a2;
        v35 = v34 >> 3;
        if (v34 >> 3 <= (unint64_t)(v33 + 1))
          v35 = v33 + 1;
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0)
          v36 = 0xFFFFFFFFFFFFFFFLL;
        else
          v36 = v35;
        v61 = v12;
        v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v36);
        v39 = &v37[16 * v33];
        *(_OWORD *)v39 = v54;
        v41 = *a2;
        v40 = a2[1];
        if (v40 == *a2)
        {
          v44 = vdupq_n_s64((unint64_t)v40);
          v42 = &v37[16 * v33];
        }
        else
        {
          v42 = &v37[16 * v33];
          do
          {
            v43 = *((_OWORD *)v40 - 1);
            v40 -= 16;
            *((_OWORD *)v42 - 1) = v43;
            v42 -= 16;
            *(_QWORD *)v40 = 0;
            *((_QWORD *)v40 + 1) = 0;
          }
          while (v40 != v41);
          v44 = *(int64x2_t *)a2;
        }
        v32 = v39 + 16;
        *a2 = v42;
        a2[1] = v39 + 16;
        v59 = v44;
        v45 = a2[2];
        a2[2] = &v37[16 * v38];
        v60 = v45;
        v58 = v44.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v58);
      }
      else
      {
        *(_OWORD *)v31 = v27;
        v32 = v31 + 16;
      }
      a2[1] = v32;
      if (v55)
      {
        v46 = (unint64_t *)&v55->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      v48 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
      if (*((_QWORD *)&v64 + 1))
      {
        v49 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      v51 = v66;
      if (v66)
      {
        v52 = (unint64_t *)&v66->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v9 += 16;
      if (v9 == a4)
        return;
    }
    v55 = v66;
    if (v66)
    {
      v22 = (unint64_t *)&v66->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    if (!a5)
      goto LABEL_28;
LABEL_21:
    if (a6)
    {
      v58 = 0;
      v59.i64[0] = 0;
      (*(void (**)(void *, uint64_t *, uint64_t))(*(_QWORD *)v21 + 40))(v21, &v58, v64 + 160);
      v24 = (std::__shared_weak_count *)v59.i64[0];
      if (v59.i64[0])
      {
        v25 = (unint64_t *)(v59.i64[0] + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v21, v64 + 160, 1.0);
    }
    goto LABEL_28;
  }
}

void sub_191620914(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::tile_kernel_cpu,Espresso::tile_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB4438;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::tile_kernel_cpu,Espresso::tile_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB4438;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::tile_kernel_cpu,Espresso::tile_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_20@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  __n128 result;

  v6 = (char *)operator new(0x168uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DB4C50;
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((_OWORD *)v6 + 19) = *(_OWORD *)a2;
  *((_DWORD *)v6 + 80) = *(_DWORD *)(a2 + 16);
  *((_QWORD *)v6 + 3) = &off_1E2D520F8;
  *(_OWORD *)(v6 + 328) = 0u;
  *(_OWORD *)(v6 + 344) = 0u;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v6 + 41, *a1, a1[1]);
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_191620A7C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::transpose_kernel_cpu,Espresso::transpose_params_t>::~wrapper_kernel(Espresso::base_kernel *a1)
{
  *(_QWORD *)a1 = &off_1E2D520F8;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 320);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 304);
  Espresso::base_kernel::~base_kernel(a1);
}

{
  *(_QWORD *)a1 = &off_1E2D520F8;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 320);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 304);
  Espresso::base_kernel::~base_kernel(a1);
  JUMPOUT(0x19401CD90);
}

void wrapper_kernel<Espresso::transpose_kernel_cpu,Espresso::transpose_params_t>::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v5;
  _BOOL4 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  float *v31;
  vDSP_Length v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  __n128 v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  void **v44;
  void **v45;
  void **v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  int *v52;
  float *v53;
  vDSP_Length v54;
  int *v55;
  int v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  vDSP_Length v60;
  vDSP_Length v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  const void *v74;
  void **v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  void **v80;
  const void *v81;
  void *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  uint64_t v94;
  uint64_t *v95;
  std::__shared_weak_count *v96;
  float __B;
  _QWORD v98[2];
  _QWORD v99[2];
  void **v100[3];
  char *v101[3];
  void *v102;
  std::__shared_weak_count *v103;
  void ***v104;
  std::__shared_weak_count *v105;

  v5 = a3;
  memset(v101, 0, sizeof(v101));
  memset(v100, 0, sizeof(v100));
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)*a3 + 32))(*(_QWORD *)*a3))
    v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)*v5 + 32))(*(_QWORD *)*v5) == 1;
  else
    v7 = 1;
  v8 = *(std::__shared_weak_count **)(a1 + 312);
  v99[0] = *(_QWORD *)(a1 + 304);
  v99[1] = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  wrapper_kernel<Espresso::transpose_kernel_cpu,Espresso::transpose_params_t>::convert_layer_data_to_fp32(v99, v101, *a4, a4[1], 1, v7);
  if (v8)
  {
    v11 = (unint64_t *)&v8->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v13 = *(std::__shared_weak_count **)(a1 + 312);
  v98[0] = *(_QWORD *)(a1 + 304);
  v98[1] = v13;
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  wrapper_kernel<Espresso::transpose_kernel_cpu,Espresso::transpose_params_t>::convert_layer_data_to_fp32(v98, (char **)v100, *v5, v5[1], 0, 0);
  if (v13)
  {
    v17 = (unint64_t *)&v13->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v19 = *a4;
  if (a4[1] != *a4)
  {
    v20 = 0;
    do
    {
      if (!v7
        && (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v19 + 16 * v20) + 32))(*(_QWORD *)(v19 + 16 * v20))
         || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(*a4 + 16 * v20) + 32))(*(_QWORD *)(*a4 + 16 * v20)) == 1))
      {
        __B = *(float *)(*(_QWORD *)(*a4 + 16 * v20) + 112);
        v21 = &v101[0][16 * v20];
        v104 = (void ***)v22;
        v23 = (std::__shared_weak_count *)*((_QWORD *)v21 + 1);
        v105 = v23;
        if (v23)
        {
          v24 = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
        }
        v26 = *((_QWORD *)v22 + 20);
        v27 = (std::__shared_weak_count *)*((_QWORD *)v22 + 21);
        v102 = (void *)v26;
        v103 = v27;
        if (v27)
        {
          v28 = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldxr(v28);
          while (__stxr(v29 + 1, v28));
        }
        v30 = 0;
        v31 = *(float **)(v26 + 24);
        v32 = *(int *)(v26 + 8);
        v33 = v26 + 12;
        do
        {
          v32 *= *(int *)(v33 + v30);
          v30 += 4;
        }
        while (v30 != 12);
        vDSP_vsmul(v31, 1, &__B, v31, 1, v32);
        if (v27)
        {
          v34 = (unint64_t *)&v27->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        v36 = v105;
        if (v105)
        {
          v37 = (unint64_t *)&v105->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
      }
      ++v20;
      v19 = *a4;
    }
    while (v20 < (a4[1] - *a4) >> 4);
  }
  Espresso::transpose_kernel_cpu::__launch((int *)a1, v16, (uint64_t)v100, (uint64_t **)v101);
  v40 = *(_QWORD *)(a1 + 320);
  if (v40)
  {
    v41 = *(std::__shared_weak_count **)(a1 + 328);
    v96 = v41;
    if (v41)
    {
      v42 = (unint64_t *)&v41->__shared_owners_;
      do
        v43 = __ldxr(v42);
      while (__stxr(v43 + 1, v42));
    }
    v44 = v100[0];
    if (*v100[0]
    {
      v46 = v45;
      v47 = (std::__shared_weak_count *)v44[1];
      v104 = (void ***)v45;
      v105 = v47;
      if (v47)
      {
        v48 = (unint64_t *)&v47->__shared_owners_;
        do
          v49 = __ldxr(v48);
        while (__stxr(v49 + 1, v48));
      }
    }
    else
    {
      v47 = 0;
      v46 = 0;
      v104 = 0;
      v105 = 0;
    }
    LODWORD(v50) = *(_DWORD *)(v40 + 8);
    v94 = a1;
    v95 = v5;
    v93 = v47;
    if ((_DWORD)v50 == 1)
    {
      v51 = 0;
      v52 = (int *)v46[20];
      v53 = (float *)*((_QWORD *)v52 + 3);
      v54 = v52[2];
      v55 = v52 + 3;
      do
        v54 *= v55[v51++];
      while (v51 != 3);
      vDSP_vsmul(v53, 1, *(const float **)(v40 + 16), v53, 1, v54);
    }
    else
    {
      v56 = *((_DWORD *)v46 + 4);
      if ((_DWORD)v50 != v56)
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v50, v56);
      v57 = *((_DWORD *)v46 + 5);
      if (v57)
      {
        v58 = 0;
        v59 = 0;
        v60 = *((int *)v46 + 2) * (uint64_t)*((int *)v46 + 3);
        v61 = 4 * (int)v50 * v60;
        do
        {
          if ((_DWORD)v50)
          {
            v62 = 0;
            v63 = 0;
            v64 = v58;
            do
            {
              vDSP_vsmul((const float *)(*((_QWORD *)v46[20] + 3) + v64), 1, (const float *)(*(_QWORD *)(v40 + 16) + v62), (float *)(*((_QWORD *)v46[20] + 3) + v64), 1, v60);
              ++v63;
              v50 = *((int *)v46 + 4);
              v62 += 4;
              v64 += 4 * v60;
            }
            while (v63 < v50);
            v57 = *((_DWORD *)v46 + 5);
          }
          ++v59;
          v58 += v61;
        }
        while (v59 < v57);
      }
    }
    a1 = v94;
    v5 = v95;
    if (v93)
    {
      v65 = (unint64_t *)&v93->__shared_owners_;
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 - 1, v65));
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
        std::__shared_weak_count::__release_weak(v93);
      }
    }
    if (v96)
    {
      v67 = (unint64_t *)&v96->__shared_owners_;
      do
        v68 = __ldaxr(v67);
      while (__stlxr(v68 - 1, v67));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
        std::__shared_weak_count::__release_weak(v96);
      }
    }
  }
  v69 = *(std::__shared_weak_count **)(a1 + 312);
  if (v69)
  {
    v70 = (unint64_t *)&v69->__shared_owners_;
    do
      v71 = __ldxr(v70);
    while (__stxr(v71 + 1, v70));
  }
  v72 = *v5;
  if (v5[1] != *v5)
  {
    v73 = 0;
    do
    {
      v74 = *(const void **)(v72 + 16 * v73);
      if (v74
      {
        v76 = (uint64_t)v75;
        v104 = (void ***)v75;
        v77 = *(std::__shared_weak_count **)(v72 + 16 * v73 + 8);
        v105 = v77;
        if (v77)
        {
          v78 = (unint64_t *)&v77->__shared_owners_;
          do
            v79 = __ldxr(v78);
          while (__stxr(v79 + 1, v78));
        }
      }
      else
      {
        v76 = 0;
        v104 = 0;
        v105 = 0;
      }
      v80 = v100[0];
      v81 = v100[0][2 * v73];
      if (v81
      {
        v102 = v82;
        v83 = (std::__shared_weak_count *)v80[2 * v73 + 1];
        v103 = v83;
        if (v83)
        {
          v84 = (unint64_t *)&v83->__shared_owners_;
          do
            v85 = __ldxr(v84);
          while (__stxr(v85 + 1, v84));
        }
      }
      else
      {
        v83 = 0;
        v82 = 0;
        v102 = 0;
        v103 = 0;
      }
      v39.n128_u64[0] = Espresso::QuantSimEngine::blob_container::copy_from_fp32(v76, (uint64_t)v82 + 160, 1.0);
      if (v83)
      {
        v86 = (unint64_t *)&v83->__shared_owners_;
        do
          v87 = __ldaxr(v86);
        while (__stlxr(v87 - 1, v86));
        if (!v87)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v83->__on_zero_shared)(v83, v39);
          std::__shared_weak_count::__release_weak(v83);
        }
      }
      v88 = v105;
      if (v105)
      {
        v89 = (unint64_t *)&v105->__shared_owners_;
        do
          v90 = __ldaxr(v89);
        while (__stlxr(v90 - 1, v89));
        if (!v90)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v88->__on_zero_shared)(v88, v39);
          std::__shared_weak_count::__release_weak(v88);
        }
      }
      ++v73;
      v72 = *v5;
    }
    while (v73 < (v5[1] - *v5) >> 4);
  }
  if (v69)
  {
    v91 = (unint64_t *)&v69->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v69->__on_zero_shared)(v69, v39);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  v104 = v100;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v104);
  v100[0] = (void **)v101;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v100);
}

void sub_1916211EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  *(_QWORD *)(v25 - 104) = &a22;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 104));
  a22 = (void **)&a25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a22);
  _Unwind_Resume(a1);
}

void *wrapper_kernel<Espresso::transpose_kernel_cpu,Espresso::transpose_params_t>::__set_weight_raw_blob(void *result, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  void *v7;
  int v8;
  uint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::runtime_error *exception;
  unint64_t v15;
  std::runtime_error *v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  std::string v39;
  _QWORD v40[2];
  unsigned __int8 v41;
  _QWORD v42[2];
  unsigned __int8 v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;

  v7 = result;
  v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10)
      return result;
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    v10 = (uint64_t)v7 + 320;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v10, (__int128 *)&v52);
    size = (std::__shared_weak_count *)v52.__r_.__value_.__l.__size_;
    if (v52.__r_.__value_.__l.__size_)
    {
      v12 = (unint64_t *)(v52.__r_.__value_.__l.__size_ + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    if (a5 != 4 * *(int *)(*(_QWORD *)v10 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      v15 = a5;
      v16 = exception;
      std::to_string(&v45, v15);
      v17 = std::string::insert(&v45, 0, "Unexpected size s=");
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      v19 = std::string::append(&v46, "/blob=");
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, 4 * *(int *)(*(_QWORD *)v10 + 8));
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v21 = &v44;
      else
        v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      else
        v22 = v44.__r_.__value_.__l.__size_;
      v23 = std::string::append(&v47, (const std::string::value_type *)v21, v22);
      v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, " @ ");
      if ((v43 & 0x80u) == 0)
        v25 = (const std::string::value_type *)v42;
      else
        v25 = (const std::string::value_type *)v42[0];
      if ((v43 & 0x80u) == 0)
        v26 = v43;
      else
        v26 = v42[1];
      v27 = std::string::append(&v48, v25, v26);
      v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      v29 = std::string::append(&v49, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v40, ":");
      if ((v41 & 0x80u) == 0)
        v31 = (const std::string::value_type *)v40;
      else
        v31 = (const std::string::value_type *)v40[0];
      if ((v41 & 0x80u) == 0)
        v32 = v41;
      else
        v32 = v40[1];
      v33 = std::string::append(&v50, v31, v32);
      v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, 197);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = &v39;
      else
        v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      else
        v36 = v39.__r_.__value_.__l.__size_;
      v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
      v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v16, &v52);
      __cxa_throw(v16, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    return memcpy(*(void **)(*(_QWORD *)v10 + 16), a4, a5);
  }
  return result;
}

void sub_1916215A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  void *v59;
  int v60;
  uint64_t v61;

  if (*(char *)(v61 - 57) < 0)
    operator delete(*(void **)(v61 - 80));
  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v61 - 89) < 0)
    operator delete(*(void **)(v61 - 112));
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v61 - 121) < 0)
    operator delete(*(void **)(v61 - 144));
  if (*(char *)(v61 - 153) < 0)
    operator delete(*(void **)(v61 - 176));
  if (a27 < 0)
    operator delete(a22);
  if (a59 < 0)
    operator delete(a54);
  if (a33 < 0)
    operator delete(a28);
  if (a52 < 0)
    operator delete(a47);
  if (a45 < 0)
    operator delete(a40);
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0)
LABEL_28:
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

BOOL wrapper_kernel<Espresso::transpose_kernel_cpu,Espresso::transpose_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2;

  v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10)
      return 0;
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

void wrapper_kernel<Espresso::transpose_kernel_cpu,Espresso::transpose_params_t>::convert_layer_data_to_fp32(_QWORD *a1, char **a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v9;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  const void *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  __int128 v43;
  int64x2_t v44;
  char *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  __int128 v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  int64x2_t v59;
  char *v60;
  _QWORD *v61;
  void *__p;
  void *v63;
  __int128 v64;
  const void *v65;
  std::__shared_weak_count *v66;

  if (a3 != a4)
  {
    v9 = a3;
    v12 = a2 + 2;
    while (1)
    {
      v14 = *(const void **)v9;
      v13 = *(std::__shared_weak_count **)(v9 + 8);
      v65 = *(const void **)v9;
      v66 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
      }
      v17 = operator new(0x118uLL);
      v17[1] = 0;
      v17[2] = 0;
      *v17 = &off_1E2DC1868;
      Espresso::blob_cpu::blob_cpu((uint64_t)(v17 + 3), a1);
      *(_QWORD *)&v64 = v17 + 3;
      *((_QWORD *)&v64 + 1) = v17;
      Espresso::abstract_blob_container::shape((char *)&v58, (uint64_t)v14);
      v56 = 0;
      v57 = 0;
      (*(void (**)(_QWORD *, uint64_t *, uint64_t *))(v17[3] + 16))(v17 + 3, &v58, &v56);
      v18 = v57;
      if (v57)
      {
        v19 = (unint64_t *)&v57->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if (__p)
      {
        v63 = __p;
        operator delete(__p);
      }
      if (v65)
      {
        if (v21)
          break;
      }
      v21 = 0;
      v55 = 0;
      if (a5)
        goto LABEL_21;
LABEL_28:
      v27 = v64;
      if (*((_QWORD *)&v64 + 1))
      {
        v28 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v31 = a2[1];
      v30 = (unint64_t)a2[2];
      if ((unint64_t)v31 >= v30)
      {
        v54 = v27;
        v33 = (v31 - *a2) >> 4;
        if ((unint64_t)(v33 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v34 = v30 - (_QWORD)*a2;
        v35 = v34 >> 3;
        if (v34 >> 3 <= (unint64_t)(v33 + 1))
          v35 = v33 + 1;
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0)
          v36 = 0xFFFFFFFFFFFFFFFLL;
        else
          v36 = v35;
        v61 = v12;
        v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v36);
        v39 = &v37[16 * v33];
        *(_OWORD *)v39 = v54;
        v41 = *a2;
        v40 = a2[1];
        if (v40 == *a2)
        {
          v44 = vdupq_n_s64((unint64_t)v40);
          v42 = &v37[16 * v33];
        }
        else
        {
          v42 = &v37[16 * v33];
          do
          {
            v43 = *((_OWORD *)v40 - 1);
            v40 -= 16;
            *((_OWORD *)v42 - 1) = v43;
            v42 -= 16;
            *(_QWORD *)v40 = 0;
            *((_QWORD *)v40 + 1) = 0;
          }
          while (v40 != v41);
          v44 = *(int64x2_t *)a2;
        }
        v32 = v39 + 16;
        *a2 = v42;
        a2[1] = v39 + 16;
        v59 = v44;
        v45 = a2[2];
        a2[2] = &v37[16 * v38];
        v60 = v45;
        v58 = v44.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v58);
      }
      else
      {
        *(_OWORD *)v31 = v27;
        v32 = v31 + 16;
      }
      a2[1] = v32;
      if (v55)
      {
        v46 = (unint64_t *)&v55->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      v48 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
      if (*((_QWORD *)&v64 + 1))
      {
        v49 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      v51 = v66;
      if (v66)
      {
        v52 = (unint64_t *)&v66->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v9 += 16;
      if (v9 == a4)
        return;
    }
    v55 = v66;
    if (v66)
    {
      v22 = (unint64_t *)&v66->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    if (!a5)
      goto LABEL_28;
LABEL_21:
    if (a6)
    {
      v58 = 0;
      v59.i64[0] = 0;
      (*(void (**)(void *, uint64_t *, uint64_t))(*(_QWORD *)v21 + 40))(v21, &v58, v64 + 160);
      v24 = (std::__shared_weak_count *)v59.i64[0];
      if (v59.i64[0])
      {
        v25 = (unint64_t *)(v59.i64[0] + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v21, v64 + 160, 1.0);
    }
    goto LABEL_28;
  }
}

void sub_191621B00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::transpose_kernel_cpu,Espresso::transpose_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB4C50;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::transpose_kernel_cpu,Espresso::transpose_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB4C50;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::transpose_kernel_cpu,Espresso::transpose_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

double ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_19@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<wrapper_kernel<Espresso::general_concat_kernel_cpu,Espresso::general_concat_params_t>,std::allocator<wrapper_kernel<Espresso::general_concat_kernel_cpu,Espresso::general_concat_params_t>>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::general_concat_params_t const&,void>(&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_18@<D0>(uint64_t *a1@<X1>, _DWORD *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<wrapper_kernel<Espresso::copy_kernel_cpu,Espresso::copy_params_t>,std::allocator<wrapper_kernel<Espresso::copy_kernel_cpu,Espresso::copy_params_t>>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::copy_params_t const&,void>(&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_17@<Q0>(uint64_t *a1@<X1>, __int128 *a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  __n128 result;
  __int128 v8;
  _BYTE v9[28];

  v6 = (char *)operator new(0x180uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DB4780;
  v8 = *a2;
  *(_OWORD *)v9 = a2[1];
  *(_OWORD *)&v9[12] = *(__int128 *)((char *)a2 + 28);
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((_OWORD *)v6 + 19) = v8;
  *((_OWORD *)v6 + 20) = *(_OWORD *)v9;
  *(_OWORD *)(v6 + 329) = *(_OWORD *)&v9[9];
  *((_QWORD *)v6 + 3) = &off_1E2D502B0;
  *((_OWORD *)v6 + 22) = 0u;
  *((_OWORD *)v6 + 23) = 0u;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v6 + 44, *a1, a1[1]);
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_191621CE8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::reduce_kernel_cpu,Espresso::reduce_params_t>::~wrapper_kernel(Espresso::base_kernel *a1)
{
  *(_QWORD *)a1 = &off_1E2D502B0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 344);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 328);
  Espresso::base_kernel::~base_kernel(a1);
}

{
  *(_QWORD *)a1 = &off_1E2D502B0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 344);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 328);
  Espresso::base_kernel::~base_kernel(a1);
  JUMPOUT(0x19401CD90);
}

void wrapper_kernel<Espresso::reduce_kernel_cpu,Espresso::reduce_params_t>::__launch(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v5;
  _BOOL4 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  float *v31;
  vDSP_Length v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  __n128 v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  void **v44;
  void **v45;
  void **v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  int *v52;
  float *v53;
  vDSP_Length v54;
  int *v55;
  int v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  vDSP_Length v60;
  vDSP_Length v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  const void *v74;
  void **v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  void **v80;
  const void *v81;
  void *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  _QWORD *v94;
  uint64_t *v95;
  std::__shared_weak_count *v96;
  float __B;
  _QWORD v98[2];
  _QWORD v99[2];
  void **v100[3];
  char *v101[3];
  void *v102;
  std::__shared_weak_count *v103;
  void ***v104;
  std::__shared_weak_count *v105;

  v5 = a3;
  memset(v101, 0, sizeof(v101));
  memset(v100, 0, sizeof(v100));
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)*a3 + 32))(*(_QWORD *)*a3))
    v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)*v5 + 32))(*(_QWORD *)*v5) == 1;
  else
    v7 = 1;
  v8 = (std::__shared_weak_count *)a1[42];
  v99[0] = a1[41];
  v99[1] = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  wrapper_kernel<Espresso::reduce_kernel_cpu,Espresso::reduce_params_t>::convert_layer_data_to_fp32(v99, v101, *a4, a4[1], 1, v7);
  if (v8)
  {
    v11 = (unint64_t *)&v8->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v13 = (std::__shared_weak_count *)a1[42];
  v98[0] = a1[41];
  v98[1] = v13;
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  wrapper_kernel<Espresso::reduce_kernel_cpu,Espresso::reduce_params_t>::convert_layer_data_to_fp32(v98, (char **)v100, *v5, v5[1], 0, 0);
  if (v13)
  {
    v17 = (unint64_t *)&v13->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v19 = *a4;
  if (a4[1] != *a4)
  {
    v20 = 0;
    do
    {
      if (!v7
        && (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v19 + 16 * v20) + 32))(*(_QWORD *)(v19 + 16 * v20))
         || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(*a4 + 16 * v20) + 32))(*(_QWORD *)(*a4 + 16 * v20)) == 1))
      {
        __B = *(float *)(*(_QWORD *)(*a4 + 16 * v20) + 112);
        v21 = &v101[0][16 * v20];
        v104 = (void ***)v22;
        v23 = (std::__shared_weak_count *)*((_QWORD *)v21 + 1);
        v105 = v23;
        if (v23)
        {
          v24 = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
        }
        v26 = *((_QWORD *)v22 + 20);
        v27 = (std::__shared_weak_count *)*((_QWORD *)v22 + 21);
        v102 = (void *)v26;
        v103 = v27;
        if (v27)
        {
          v28 = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldxr(v28);
          while (__stxr(v29 + 1, v28));
        }
        v30 = 0;
        v31 = *(float **)(v26 + 24);
        v32 = *(int *)(v26 + 8);
        v33 = v26 + 12;
        do
        {
          v32 *= *(int *)(v33 + v30);
          v30 += 4;
        }
        while (v30 != 12);
        vDSP_vsmul(v31, 1, &__B, v31, 1, v32);
        if (v27)
        {
          v34 = (unint64_t *)&v27->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        v36 = v105;
        if (v105)
        {
          v37 = (unint64_t *)&v105->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
      }
      ++v20;
      v19 = *a4;
    }
    while (v20 < (a4[1] - *a4) >> 4);
  }
  Espresso::reduce_kernel_cpu::__launch((uint64_t)a1, v16, (uint64_t **)v100, (uint64_t **)v101);
  v40 = a1[43];
  if (v40)
  {
    v41 = (std::__shared_weak_count *)a1[44];
    v96 = v41;
    if (v41)
    {
      v42 = (unint64_t *)&v41->__shared_owners_;
      do
        v43 = __ldxr(v42);
      while (__stxr(v43 + 1, v42));
    }
    v44 = v100[0];
    if (*v100[0]
    {
      v46 = v45;
      v47 = (std::__shared_weak_count *)v44[1];
      v104 = (void ***)v45;
      v105 = v47;
      if (v47)
      {
        v48 = (unint64_t *)&v47->__shared_owners_;
        do
          v49 = __ldxr(v48);
        while (__stxr(v49 + 1, v48));
      }
    }
    else
    {
      v47 = 0;
      v46 = 0;
      v104 = 0;
      v105 = 0;
    }
    LODWORD(v50) = *(_DWORD *)(v40 + 8);
    v94 = a1;
    v95 = v5;
    v93 = v47;
    if ((_DWORD)v50 == 1)
    {
      v51 = 0;
      v52 = (int *)v46[20];
      v53 = (float *)*((_QWORD *)v52 + 3);
      v54 = v52[2];
      v55 = v52 + 3;
      do
        v54 *= v55[v51++];
      while (v51 != 3);
      vDSP_vsmul(v53, 1, *(const float **)(v40 + 16), v53, 1, v54);
    }
    else
    {
      v56 = *((_DWORD *)v46 + 4);
      if ((_DWORD)v50 != v56)
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v50, v56);
      v57 = *((_DWORD *)v46 + 5);
      if (v57)
      {
        v58 = 0;
        v59 = 0;
        v60 = *((int *)v46 + 2) * (uint64_t)*((int *)v46 + 3);
        v61 = 4 * (int)v50 * v60;
        do
        {
          if ((_DWORD)v50)
          {
            v62 = 0;
            v63 = 0;
            v64 = v58;
            do
            {
              vDSP_vsmul((const float *)(*((_QWORD *)v46[20] + 3) + v64), 1, (const float *)(*(_QWORD *)(v40 + 16) + v62), (float *)(*((_QWORD *)v46[20] + 3) + v64), 1, v60);
              ++v63;
              v50 = *((int *)v46 + 4);
              v62 += 4;
              v64 += 4 * v60;
            }
            while (v63 < v50);
            v57 = *((_DWORD *)v46 + 5);
          }
          ++v59;
          v58 += v61;
        }
        while (v59 < v57);
      }
    }
    a1 = v94;
    v5 = v95;
    if (v93)
    {
      v65 = (unint64_t *)&v93->__shared_owners_;
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 - 1, v65));
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
        std::__shared_weak_count::__release_weak(v93);
      }
    }
    if (v96)
    {
      v67 = (unint64_t *)&v96->__shared_owners_;
      do
        v68 = __ldaxr(v67);
      while (__stlxr(v68 - 1, v67));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
        std::__shared_weak_count::__release_weak(v96);
      }
    }
  }
  v69 = (std::__shared_weak_count *)a1[42];
  if (v69)
  {
    v70 = (unint64_t *)&v69->__shared_owners_;
    do
      v71 = __ldxr(v70);
    while (__stxr(v71 + 1, v70));
  }
  v72 = *v5;
  if (v5[1] != *v5)
  {
    v73 = 0;
    do
    {
      v74 = *(const void **)(v72 + 16 * v73);
      if (v74
      {
        v76 = (uint64_t)v75;
        v104 = (void ***)v75;
        v77 = *(std::__shared_weak_count **)(v72 + 16 * v73 + 8);
        v105 = v77;
        if (v77)
        {
          v78 = (unint64_t *)&v77->__shared_owners_;
          do
            v79 = __ldxr(v78);
          while (__stxr(v79 + 1, v78));
        }
      }
      else
      {
        v76 = 0;
        v104 = 0;
        v105 = 0;
      }
      v80 = v100[0];
      v81 = v100[0][2 * v73];
      if (v81
      {
        v102 = v82;
        v83 = (std::__shared_weak_count *)v80[2 * v73 + 1];
        v103 = v83;
        if (v83)
        {
          v84 = (unint64_t *)&v83->__shared_owners_;
          do
            v85 = __ldxr(v84);
          while (__stxr(v85 + 1, v84));
        }
      }
      else
      {
        v83 = 0;
        v82 = 0;
        v102 = 0;
        v103 = 0;
      }
      v39.n128_u64[0] = Espresso::QuantSimEngine::blob_container::copy_from_fp32(v76, (uint64_t)v82 + 160, 1.0);
      if (v83)
      {
        v86 = (unint64_t *)&v83->__shared_owners_;
        do
          v87 = __ldaxr(v86);
        while (__stlxr(v87 - 1, v86));
        if (!v87)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v83->__on_zero_shared)(v83, v39);
          std::__shared_weak_count::__release_weak(v83);
        }
      }
      v88 = v105;
      if (v105)
      {
        v89 = (unint64_t *)&v105->__shared_owners_;
        do
          v90 = __ldaxr(v89);
        while (__stlxr(v90 - 1, v89));
        if (!v90)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v88->__on_zero_shared)(v88, v39);
          std::__shared_weak_count::__release_weak(v88);
        }
      }
      ++v73;
      v72 = *v5;
    }
    while (v73 < (v5[1] - *v5) >> 4);
  }
  if (v69)
  {
    v91 = (unint64_t *)&v69->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v69->__on_zero_shared)(v69, v39);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  v104 = v100;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v104);
  v100[0] = (void **)v101;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v100);
}

void sub_191622458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  *(_QWORD *)(v25 - 104) = &a22;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 104));
  a22 = (void **)&a25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a22);
  _Unwind_Resume(a1);
}

void *wrapper_kernel<Espresso::reduce_kernel_cpu,Espresso::reduce_params_t>::__set_weight_raw_blob(void *result, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  void *v7;
  int v8;
  uint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::runtime_error *exception;
  unint64_t v15;
  std::runtime_error *v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  std::string v39;
  _QWORD v40[2];
  unsigned __int8 v41;
  _QWORD v42[2];
  unsigned __int8 v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;

  v7 = result;
  v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10)
      return result;
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    v10 = (uint64_t)v7 + 344;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v10, (__int128 *)&v52);
    size = (std::__shared_weak_count *)v52.__r_.__value_.__l.__size_;
    if (v52.__r_.__value_.__l.__size_)
    {
      v12 = (unint64_t *)(v52.__r_.__value_.__l.__size_ + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    if (a5 != 4 * *(int *)(*(_QWORD *)v10 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      v15 = a5;
      v16 = exception;
      std::to_string(&v45, v15);
      v17 = std::string::insert(&v45, 0, "Unexpected size s=");
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      v19 = std::string::append(&v46, "/blob=");
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, 4 * *(int *)(*(_QWORD *)v10 + 8));
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v21 = &v44;
      else
        v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      else
        v22 = v44.__r_.__value_.__l.__size_;
      v23 = std::string::append(&v47, (const std::string::value_type *)v21, v22);
      v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, " @ ");
      if ((v43 & 0x80u) == 0)
        v25 = (const std::string::value_type *)v42;
      else
        v25 = (const std::string::value_type *)v42[0];
      if ((v43 & 0x80u) == 0)
        v26 = v43;
      else
        v26 = v42[1];
      v27 = std::string::append(&v48, v25, v26);
      v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      v29 = std::string::append(&v49, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v40, ":");
      if ((v41 & 0x80u) == 0)
        v31 = (const std::string::value_type *)v40;
      else
        v31 = (const std::string::value_type *)v40[0];
      if ((v41 & 0x80u) == 0)
        v32 = v41;
      else
        v32 = v40[1];
      v33 = std::string::append(&v50, v31, v32);
      v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, 197);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = &v39;
      else
        v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      else
        v36 = v39.__r_.__value_.__l.__size_;
      v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
      v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v16, &v52);
      __cxa_throw(v16, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    return memcpy(*(void **)(*(_QWORD *)v10 + 16), a4, a5);
  }
  return result;
}

void sub_191622810(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  void *v59;
  int v60;
  uint64_t v61;

  if (*(char *)(v61 - 57) < 0)
    operator delete(*(void **)(v61 - 80));
  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v61 - 89) < 0)
    operator delete(*(void **)(v61 - 112));
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v61 - 121) < 0)
    operator delete(*(void **)(v61 - 144));
  if (*(char *)(v61 - 153) < 0)
    operator delete(*(void **)(v61 - 176));
  if (a27 < 0)
    operator delete(a22);
  if (a59 < 0)
    operator delete(a54);
  if (a33 < 0)
    operator delete(a28);
  if (a52 < 0)
    operator delete(a47);
  if (a45 < 0)
    operator delete(a40);
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0)
LABEL_28:
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

BOOL wrapper_kernel<Espresso::reduce_kernel_cpu,Espresso::reduce_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2;

  v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10)
      return 0;
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

void wrapper_kernel<Espresso::reduce_kernel_cpu,Espresso::reduce_params_t>::convert_layer_data_to_fp32(_QWORD *a1, char **a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v9;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  const void *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  __int128 v43;
  int64x2_t v44;
  char *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  __int128 v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  int64x2_t v59;
  char *v60;
  _QWORD *v61;
  void *__p;
  void *v63;
  __int128 v64;
  const void *v65;
  std::__shared_weak_count *v66;

  if (a3 != a4)
  {
    v9 = a3;
    v12 = a2 + 2;
    while (1)
    {
      v14 = *(const void **)v9;
      v13 = *(std::__shared_weak_count **)(v9 + 8);
      v65 = *(const void **)v9;
      v66 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
      }
      v17 = operator new(0x118uLL);
      v17[1] = 0;
      v17[2] = 0;
      *v17 = &off_1E2DC1868;
      Espresso::blob_cpu::blob_cpu((uint64_t)(v17 + 3), a1);
      *(_QWORD *)&v64 = v17 + 3;
      *((_QWORD *)&v64 + 1) = v17;
      Espresso::abstract_blob_container::shape((char *)&v58, (uint64_t)v14);
      v56 = 0;
      v57 = 0;
      (*(void (**)(_QWORD *, uint64_t *, uint64_t *))(v17[3] + 16))(v17 + 3, &v58, &v56);
      v18 = v57;
      if (v57)
      {
        v19 = (unint64_t *)&v57->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if (__p)
      {
        v63 = __p;
        operator delete(__p);
      }
      if (v65)
      {
        if (v21)
          break;
      }
      v21 = 0;
      v55 = 0;
      if (a5)
        goto LABEL_21;
LABEL_28:
      v27 = v64;
      if (*((_QWORD *)&v64 + 1))
      {
        v28 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v31 = a2[1];
      v30 = (unint64_t)a2[2];
      if ((unint64_t)v31 >= v30)
      {
        v54 = v27;
        v33 = (v31 - *a2) >> 4;
        if ((unint64_t)(v33 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v34 = v30 - (_QWORD)*a2;
        v35 = v34 >> 3;
        if (v34 >> 3 <= (unint64_t)(v33 + 1))
          v35 = v33 + 1;
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0)
          v36 = 0xFFFFFFFFFFFFFFFLL;
        else
          v36 = v35;
        v61 = v12;
        v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v36);
        v39 = &v37[16 * v33];
        *(_OWORD *)v39 = v54;
        v41 = *a2;
        v40 = a2[1];
        if (v40 == *a2)
        {
          v44 = vdupq_n_s64((unint64_t)v40);
          v42 = &v37[16 * v33];
        }
        else
        {
          v42 = &v37[16 * v33];
          do
          {
            v43 = *((_OWORD *)v40 - 1);
            v40 -= 16;
            *((_OWORD *)v42 - 1) = v43;
            v42 -= 16;
            *(_QWORD *)v40 = 0;
            *((_QWORD *)v40 + 1) = 0;
          }
          while (v40 != v41);
          v44 = *(int64x2_t *)a2;
        }
        v32 = v39 + 16;
        *a2 = v42;
        a2[1] = v39 + 16;
        v59 = v44;
        v45 = a2[2];
        a2[2] = &v37[16 * v38];
        v60 = v45;
        v58 = v44.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v58);
      }
      else
      {
        *(_OWORD *)v31 = v27;
        v32 = v31 + 16;
      }
      a2[1] = v32;
      if (v55)
      {
        v46 = (unint64_t *)&v55->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      v48 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
      if (*((_QWORD *)&v64 + 1))
      {
        v49 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      v51 = v66;
      if (v66)
      {
        v52 = (unint64_t *)&v66->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v9 += 16;
      if (v9 == a4)
        return;
    }
    v55 = v66;
    if (v66)
    {
      v22 = (unint64_t *)&v66->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    if (!a5)
      goto LABEL_28;
LABEL_21:
    if (a6)
    {
      v58 = 0;
      v59.i64[0] = 0;
      (*(void (**)(void *, uint64_t *, uint64_t))(*(_QWORD *)v21 + 40))(v21, &v58, v64 + 160);
      v24 = (std::__shared_weak_count *)v59.i64[0];
      if (v59.i64[0])
      {
        v25 = (unint64_t *)(v59.i64[0] + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v21, v64 + 160, 1.0);
    }
    goto LABEL_28;
  }
}

void sub_191622D6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::reduce_kernel_cpu,Espresso::reduce_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB4780;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::reduce_kernel_cpu,Espresso::reduce_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB4780;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::reduce_kernel_cpu,Espresso::reduce_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_16@<Q0>(uint64_t *a1@<X1>, __int128 *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  __int128 v7;
  __n128 result;

  v6 = operator new(0x160uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DB4390;
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  v7 = *a2;
  v6[3] = &off_1E2D4E978;
  *((_OWORD *)v6 + 19) = v7;
  *((_OWORD *)v6 + 20) = 0u;
  *((_OWORD *)v6 + 21) = 0u;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v6 + 40, *a1, a1[1]);
  result.n128_u64[0] = (unint64_t)(v6 + 3);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_191622EC8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::crop_kernel_cpu,Espresso::crop_params>::~wrapper_kernel(Espresso::base_kernel *a1)
{
  *(_QWORD *)a1 = &off_1E2D4E978;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 312);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 296);
  Espresso::base_kernel::~base_kernel(a1);
}

{
  *(_QWORD *)a1 = &off_1E2D4E978;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 312);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 296);
  Espresso::base_kernel::~base_kernel(a1);
  JUMPOUT(0x19401CD90);
}

void wrapper_kernel<Espresso::crop_kernel_cpu,Espresso::crop_params>::__launch(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v5;
  _BOOL4 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  float *v31;
  vDSP_Length v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  __n128 v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  void **v44;
  void **v45;
  void **v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  int *v52;
  float *v53;
  vDSP_Length v54;
  int *v55;
  int v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  vDSP_Length v60;
  vDSP_Length v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  const void *v74;
  void **v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  void **v80;
  const void *v81;
  void *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  _QWORD *v94;
  uint64_t *v95;
  std::__shared_weak_count *v96;
  float __B;
  _QWORD v98[2];
  _QWORD v99[2];
  void **v100[3];
  char *v101[3];
  void *v102;
  std::__shared_weak_count *v103;
  void ***v104;
  std::__shared_weak_count *v105;

  v5 = a3;
  memset(v101, 0, sizeof(v101));
  memset(v100, 0, sizeof(v100));
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)*a3 + 32))(*(_QWORD *)*a3))
    v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)*v5 + 32))(*(_QWORD *)*v5) == 1;
  else
    v7 = 1;
  v8 = (std::__shared_weak_count *)a1[38];
  v99[0] = a1[37];
  v99[1] = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  wrapper_kernel<Espresso::crop_kernel_cpu,Espresso::crop_params>::convert_layer_data_to_fp32(v99, v101, *a4, a4[1], 1, v7);
  if (v8)
  {
    v11 = (unint64_t *)&v8->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v13 = (std::__shared_weak_count *)a1[38];
  v98[0] = a1[37];
  v98[1] = v13;
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  wrapper_kernel<Espresso::crop_kernel_cpu,Espresso::crop_params>::convert_layer_data_to_fp32(v98, (char **)v100, *v5, v5[1], 0, 0);
  if (v13)
  {
    v17 = (unint64_t *)&v13->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v19 = *a4;
  if (a4[1] != *a4)
  {
    v20 = 0;
    do
    {
      if (!v7
        && (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v19 + 16 * v20) + 32))(*(_QWORD *)(v19 + 16 * v20))
         || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(*a4 + 16 * v20) + 32))(*(_QWORD *)(*a4 + 16 * v20)) == 1))
      {
        __B = *(float *)(*(_QWORD *)(*a4 + 16 * v20) + 112);
        v21 = &v101[0][16 * v20];
        v104 = (void ***)v22;
        v23 = (std::__shared_weak_count *)*((_QWORD *)v21 + 1);
        v105 = v23;
        if (v23)
        {
          v24 = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
        }
        v26 = *((_QWORD *)v22 + 20);
        v27 = (std::__shared_weak_count *)*((_QWORD *)v22 + 21);
        v102 = (void *)v26;
        v103 = v27;
        if (v27)
        {
          v28 = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldxr(v28);
          while (__stxr(v29 + 1, v28));
        }
        v30 = 0;
        v31 = *(float **)(v26 + 24);
        v32 = *(int *)(v26 + 8);
        v33 = v26 + 12;
        do
        {
          v32 *= *(int *)(v33 + v30);
          v30 += 4;
        }
        while (v30 != 12);
        vDSP_vsmul(v31, 1, &__B, v31, 1, v32);
        if (v27)
        {
          v34 = (unint64_t *)&v27->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        v36 = v105;
        if (v105)
        {
          v37 = (unint64_t *)&v105->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
      }
      ++v20;
      v19 = *a4;
    }
    while (v20 < (a4[1] - *a4) >> 4);
  }
  Espresso::crop_kernel_cpu::__launch((uint64_t)a1, v16, (uint64_t *)v100, (uint64_t *)v101);
  v40 = a1[39];
  if (v40)
  {
    v41 = (std::__shared_weak_count *)a1[40];
    v96 = v41;
    if (v41)
    {
      v42 = (unint64_t *)&v41->__shared_owners_;
      do
        v43 = __ldxr(v42);
      while (__stxr(v43 + 1, v42));
    }
    v44 = v100[0];
    if (*v100[0]
    {
      v46 = v45;
      v47 = (std::__shared_weak_count *)v44[1];
      v104 = (void ***)v45;
      v105 = v47;
      if (v47)
      {
        v48 = (unint64_t *)&v47->__shared_owners_;
        do
          v49 = __ldxr(v48);
        while (__stxr(v49 + 1, v48));
      }
    }
    else
    {
      v47 = 0;
      v46 = 0;
      v104 = 0;
      v105 = 0;
    }
    LODWORD(v50) = *(_DWORD *)(v40 + 8);
    v94 = a1;
    v95 = v5;
    v93 = v47;
    if ((_DWORD)v50 == 1)
    {
      v51 = 0;
      v52 = (int *)v46[20];
      v53 = (float *)*((_QWORD *)v52 + 3);
      v54 = v52[2];
      v55 = v52 + 3;
      do
        v54 *= v55[v51++];
      while (v51 != 3);
      vDSP_vsmul(v53, 1, *(const float **)(v40 + 16), v53, 1, v54);
    }
    else
    {
      v56 = *((_DWORD *)v46 + 4);
      if ((_DWORD)v50 != v56)
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v50, v56);
      v57 = *((_DWORD *)v46 + 5);
      if (v57)
      {
        v58 = 0;
        v59 = 0;
        v60 = *((int *)v46 + 2) * (uint64_t)*((int *)v46 + 3);
        v61 = 4 * (int)v50 * v60;
        do
        {
          if ((_DWORD)v50)
          {
            v62 = 0;
            v63 = 0;
            v64 = v58;
            do
            {
              vDSP_vsmul((const float *)(*((_QWORD *)v46[20] + 3) + v64), 1, (const float *)(*(_QWORD *)(v40 + 16) + v62), (float *)(*((_QWORD *)v46[20] + 3) + v64), 1, v60);
              ++v63;
              v50 = *((int *)v46 + 4);
              v62 += 4;
              v64 += 4 * v60;
            }
            while (v63 < v50);
            v57 = *((_DWORD *)v46 + 5);
          }
          ++v59;
          v58 += v61;
        }
        while (v59 < v57);
      }
    }
    a1 = v94;
    v5 = v95;
    if (v93)
    {
      v65 = (unint64_t *)&v93->__shared_owners_;
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 - 1, v65));
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
        std::__shared_weak_count::__release_weak(v93);
      }
    }
    if (v96)
    {
      v67 = (unint64_t *)&v96->__shared_owners_;
      do
        v68 = __ldaxr(v67);
      while (__stlxr(v68 - 1, v67));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
        std::__shared_weak_count::__release_weak(v96);
      }
    }
  }
  v69 = (std::__shared_weak_count *)a1[38];
  if (v69)
  {
    v70 = (unint64_t *)&v69->__shared_owners_;
    do
      v71 = __ldxr(v70);
    while (__stxr(v71 + 1, v70));
  }
  v72 = *v5;
  if (v5[1] != *v5)
  {
    v73 = 0;
    do
    {
      v74 = *(const void **)(v72 + 16 * v73);
      if (v74
      {
        v76 = (uint64_t)v75;
        v104 = (void ***)v75;
        v77 = *(std::__shared_weak_count **)(v72 + 16 * v73 + 8);
        v105 = v77;
        if (v77)
        {
          v78 = (unint64_t *)&v77->__shared_owners_;
          do
            v79 = __ldxr(v78);
          while (__stxr(v79 + 1, v78));
        }
      }
      else
      {
        v76 = 0;
        v104 = 0;
        v105 = 0;
      }
      v80 = v100[0];
      v81 = v100[0][2 * v73];
      if (v81
      {
        v102 = v82;
        v83 = (std::__shared_weak_count *)v80[2 * v73 + 1];
        v103 = v83;
        if (v83)
        {
          v84 = (unint64_t *)&v83->__shared_owners_;
          do
            v85 = __ldxr(v84);
          while (__stxr(v85 + 1, v84));
        }
      }
      else
      {
        v83 = 0;
        v82 = 0;
        v102 = 0;
        v103 = 0;
      }
      v39.n128_u64[0] = Espresso::QuantSimEngine::blob_container::copy_from_fp32(v76, (uint64_t)v82 + 160, 1.0);
      if (v83)
      {
        v86 = (unint64_t *)&v83->__shared_owners_;
        do
          v87 = __ldaxr(v86);
        while (__stlxr(v87 - 1, v86));
        if (!v87)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v83->__on_zero_shared)(v83, v39);
          std::__shared_weak_count::__release_weak(v83);
        }
      }
      v88 = v105;
      if (v105)
      {
        v89 = (unint64_t *)&v105->__shared_owners_;
        do
          v90 = __ldaxr(v89);
        while (__stlxr(v90 - 1, v89));
        if (!v90)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v88->__on_zero_shared)(v88, v39);
          std::__shared_weak_count::__release_weak(v88);
        }
      }
      ++v73;
      v72 = *v5;
    }
    while (v73 < (v5[1] - *v5) >> 4);
  }
  if (v69)
  {
    v91 = (unint64_t *)&v69->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v69->__on_zero_shared)(v69, v39);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  v104 = v100;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v104);
  v100[0] = (void **)v101;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v100);
}

void sub_191623638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  *(_QWORD *)(v25 - 104) = &a22;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 104));
  a22 = (void **)&a25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a22);
  _Unwind_Resume(a1);
}

void *wrapper_kernel<Espresso::crop_kernel_cpu,Espresso::crop_params>::__set_weight_raw_blob(void *result, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  void *v7;
  int v8;
  uint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::runtime_error *exception;
  unint64_t v15;
  std::runtime_error *v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  std::string v39;
  _QWORD v40[2];
  unsigned __int8 v41;
  _QWORD v42[2];
  unsigned __int8 v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;

  v7 = result;
  v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10)
      return result;
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    v10 = (uint64_t)v7 + 312;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v10, (__int128 *)&v52);
    size = (std::__shared_weak_count *)v52.__r_.__value_.__l.__size_;
    if (v52.__r_.__value_.__l.__size_)
    {
      v12 = (unint64_t *)(v52.__r_.__value_.__l.__size_ + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    if (a5 != 4 * *(int *)(*(_QWORD *)v10 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      v15 = a5;
      v16 = exception;
      std::to_string(&v45, v15);
      v17 = std::string::insert(&v45, 0, "Unexpected size s=");
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      v19 = std::string::append(&v46, "/blob=");
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, 4 * *(int *)(*(_QWORD *)v10 + 8));
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v21 = &v44;
      else
        v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      else
        v22 = v44.__r_.__value_.__l.__size_;
      v23 = std::string::append(&v47, (const std::string::value_type *)v21, v22);
      v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, " @ ");
      if ((v43 & 0x80u) == 0)
        v25 = (const std::string::value_type *)v42;
      else
        v25 = (const std::string::value_type *)v42[0];
      if ((v43 & 0x80u) == 0)
        v26 = v43;
      else
        v26 = v42[1];
      v27 = std::string::append(&v48, v25, v26);
      v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      v29 = std::string::append(&v49, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v40, ":");
      if ((v41 & 0x80u) == 0)
        v31 = (const std::string::value_type *)v40;
      else
        v31 = (const std::string::value_type *)v40[0];
      if ((v41 & 0x80u) == 0)
        v32 = v41;
      else
        v32 = v40[1];
      v33 = std::string::append(&v50, v31, v32);
      v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, 197);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = &v39;
      else
        v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      else
        v36 = v39.__r_.__value_.__l.__size_;
      v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
      v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v16, &v52);
      __cxa_throw(v16, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    return memcpy(*(void **)(*(_QWORD *)v10 + 16), a4, a5);
  }
  return result;
}

void sub_1916239F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  void *v59;
  int v60;
  uint64_t v61;

  if (*(char *)(v61 - 57) < 0)
    operator delete(*(void **)(v61 - 80));
  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v61 - 89) < 0)
    operator delete(*(void **)(v61 - 112));
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v61 - 121) < 0)
    operator delete(*(void **)(v61 - 144));
  if (*(char *)(v61 - 153) < 0)
    operator delete(*(void **)(v61 - 176));
  if (a27 < 0)
    operator delete(a22);
  if (a59 < 0)
    operator delete(a54);
  if (a33 < 0)
    operator delete(a28);
  if (a52 < 0)
    operator delete(a47);
  if (a45 < 0)
    operator delete(a40);
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0)
LABEL_28:
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

BOOL wrapper_kernel<Espresso::crop_kernel_cpu,Espresso::crop_params>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2;

  v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10)
      return 0;
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

void wrapper_kernel<Espresso::crop_kernel_cpu,Espresso::crop_params>::convert_layer_data_to_fp32(_QWORD *a1, char **a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v9;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  const void *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  __int128 v43;
  int64x2_t v44;
  char *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  __int128 v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  int64x2_t v59;
  char *v60;
  _QWORD *v61;
  void *__p;
  void *v63;
  __int128 v64;
  const void *v65;
  std::__shared_weak_count *v66;

  if (a3 != a4)
  {
    v9 = a3;
    v12 = a2 + 2;
    while (1)
    {
      v14 = *(const void **)v9;
      v13 = *(std::__shared_weak_count **)(v9 + 8);
      v65 = *(const void **)v9;
      v66 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
      }
      v17 = operator new(0x118uLL);
      v17[1] = 0;
      v17[2] = 0;
      *v17 = &off_1E2DC1868;
      Espresso::blob_cpu::blob_cpu((uint64_t)(v17 + 3), a1);
      *(_QWORD *)&v64 = v17 + 3;
      *((_QWORD *)&v64 + 1) = v17;
      Espresso::abstract_blob_container::shape((char *)&v58, (uint64_t)v14);
      v56 = 0;
      v57 = 0;
      (*(void (**)(_QWORD *, uint64_t *, uint64_t *))(v17[3] + 16))(v17 + 3, &v58, &v56);
      v18 = v57;
      if (v57)
      {
        v19 = (unint64_t *)&v57->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if (__p)
      {
        v63 = __p;
        operator delete(__p);
      }
      if (v65)
      {
        if (v21)
          break;
      }
      v21 = 0;
      v55 = 0;
      if (a5)
        goto LABEL_21;
LABEL_28:
      v27 = v64;
      if (*((_QWORD *)&v64 + 1))
      {
        v28 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v31 = a2[1];
      v30 = (unint64_t)a2[2];
      if ((unint64_t)v31 >= v30)
      {
        v54 = v27;
        v33 = (v31 - *a2) >> 4;
        if ((unint64_t)(v33 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v34 = v30 - (_QWORD)*a2;
        v35 = v34 >> 3;
        if (v34 >> 3 <= (unint64_t)(v33 + 1))
          v35 = v33 + 1;
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0)
          v36 = 0xFFFFFFFFFFFFFFFLL;
        else
          v36 = v35;
        v61 = v12;
        v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v36);
        v39 = &v37[16 * v33];
        *(_OWORD *)v39 = v54;
        v41 = *a2;
        v40 = a2[1];
        if (v40 == *a2)
        {
          v44 = vdupq_n_s64((unint64_t)v40);
          v42 = &v37[16 * v33];
        }
        else
        {
          v42 = &v37[16 * v33];
          do
          {
            v43 = *((_OWORD *)v40 - 1);
            v40 -= 16;
            *((_OWORD *)v42 - 1) = v43;
            v42 -= 16;
            *(_QWORD *)v40 = 0;
            *((_QWORD *)v40 + 1) = 0;
          }
          while (v40 != v41);
          v44 = *(int64x2_t *)a2;
        }
        v32 = v39 + 16;
        *a2 = v42;
        a2[1] = v39 + 16;
        v59 = v44;
        v45 = a2[2];
        a2[2] = &v37[16 * v38];
        v60 = v45;
        v58 = v44.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v58);
      }
      else
      {
        *(_OWORD *)v31 = v27;
        v32 = v31 + 16;
      }
      a2[1] = v32;
      if (v55)
      {
        v46 = (unint64_t *)&v55->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      v48 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
      if (*((_QWORD *)&v64 + 1))
      {
        v49 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      v51 = v66;
      if (v66)
      {
        v52 = (unint64_t *)&v66->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v9 += 16;
      if (v9 == a4)
        return;
    }
    v55 = v66;
    if (v66)
    {
      v22 = (unint64_t *)&v66->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    if (!a5)
      goto LABEL_28;
LABEL_21:
    if (a6)
    {
      v58 = 0;
      v59.i64[0] = 0;
      (*(void (**)(void *, uint64_t *, uint64_t))(*(_QWORD *)v21 + 40))(v21, &v58, v64 + 160);
      v24 = (std::__shared_weak_count *)v59.i64[0];
      if (v59.i64[0])
      {
        v25 = (unint64_t *)(v59.i64[0] + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v21, v64 + 160, 1.0);
    }
    goto LABEL_28;
  }
}

void sub_191623F4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::crop_kernel_cpu,Espresso::crop_params>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB4390;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::crop_kernel_cpu,Espresso::crop_params>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB4390;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::crop_kernel_cpu,Espresso::crop_params>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_15@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  __n128 result;

  v6 = (char *)operator new(0x168uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DB4550;
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((_OWORD *)v6 + 19) = *(_OWORD *)a2;
  *((_QWORD *)v6 + 40) = *(_QWORD *)(a2 + 16);
  *((_QWORD *)v6 + 3) = &off_1E2D4F498;
  *(_OWORD *)(v6 + 328) = 0u;
  *(_OWORD *)(v6 + 344) = 0u;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v6 + 41, *a1, a1[1]);
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1916240B4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::slice_kernel_cpu,Espresso::slice_params_t>::~wrapper_kernel(Espresso::base_kernel *a1)
{
  *(_QWORD *)a1 = &off_1E2D4F498;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 320);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 304);
  Espresso::base_kernel::~base_kernel(a1);
}

{
  *(_QWORD *)a1 = &off_1E2D4F498;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 320);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 304);
  Espresso::base_kernel::~base_kernel(a1);
  JUMPOUT(0x19401CD90);
}

void wrapper_kernel<Espresso::slice_kernel_cpu,Espresso::slice_params_t>::__launch(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v5;
  _BOOL4 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  float *v31;
  vDSP_Length v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  __n128 v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  void **v44;
  void **v45;
  void **v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  int *v52;
  float *v53;
  vDSP_Length v54;
  int *v55;
  int v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  vDSP_Length v60;
  vDSP_Length v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  const void *v74;
  void **v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  void **v80;
  const void *v81;
  void *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  _QWORD *v94;
  uint64_t *v95;
  std::__shared_weak_count *v96;
  float __B;
  _QWORD v98[2];
  _QWORD v99[2];
  void **v100[3];
  char *v101[3];
  void *v102;
  std::__shared_weak_count *v103;
  void ***v104;
  std::__shared_weak_count *v105;

  v5 = a3;
  memset(v101, 0, sizeof(v101));
  memset(v100, 0, sizeof(v100));
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)*a3 + 32))(*(_QWORD *)*a3))
    v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)*v5 + 32))(*(_QWORD *)*v5) == 1;
  else
    v7 = 1;
  v8 = (std::__shared_weak_count *)a1[39];
  v99[0] = a1[38];
  v99[1] = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  wrapper_kernel<Espresso::slice_kernel_cpu,Espresso::slice_params_t>::convert_layer_data_to_fp32(v99, v101, *a4, a4[1], 1, v7);
  if (v8)
  {
    v11 = (unint64_t *)&v8->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v13 = (std::__shared_weak_count *)a1[39];
  v98[0] = a1[38];
  v98[1] = v13;
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  wrapper_kernel<Espresso::slice_kernel_cpu,Espresso::slice_params_t>::convert_layer_data_to_fp32(v98, (char **)v100, *v5, v5[1], 0, 0);
  if (v13)
  {
    v17 = (unint64_t *)&v13->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v19 = *a4;
  if (a4[1] != *a4)
  {
    v20 = 0;
    do
    {
      if (!v7
        && (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v19 + 16 * v20) + 32))(*(_QWORD *)(v19 + 16 * v20))
         || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(*a4 + 16 * v20) + 32))(*(_QWORD *)(*a4 + 16 * v20)) == 1))
      {
        __B = *(float *)(*(_QWORD *)(*a4 + 16 * v20) + 112);
        v21 = &v101[0][16 * v20];
        v104 = (void ***)v22;
        v23 = (std::__shared_weak_count *)*((_QWORD *)v21 + 1);
        v105 = v23;
        if (v23)
        {
          v24 = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
        }
        v26 = *((_QWORD *)v22 + 20);
        v27 = (std::__shared_weak_count *)*((_QWORD *)v22 + 21);
        v102 = (void *)v26;
        v103 = v27;
        if (v27)
        {
          v28 = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldxr(v28);
          while (__stxr(v29 + 1, v28));
        }
        v30 = 0;
        v31 = *(float **)(v26 + 24);
        v32 = *(int *)(v26 + 8);
        v33 = v26 + 12;
        do
        {
          v32 *= *(int *)(v33 + v30);
          v30 += 4;
        }
        while (v30 != 12);
        vDSP_vsmul(v31, 1, &__B, v31, 1, v32);
        if (v27)
        {
          v34 = (unint64_t *)&v27->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        v36 = v105;
        if (v105)
        {
          v37 = (unint64_t *)&v105->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
      }
      ++v20;
      v19 = *a4;
    }
    while (v20 < (a4[1] - *a4) >> 4);
  }
  Espresso::slice_kernel_cpu::__launch((uint64_t)a1, v16, (uint64_t **)v100, (uint64_t **)v101);
  v40 = a1[40];
  if (v40)
  {
    v41 = (std::__shared_weak_count *)a1[41];
    v96 = v41;
    if (v41)
    {
      v42 = (unint64_t *)&v41->__shared_owners_;
      do
        v43 = __ldxr(v42);
      while (__stxr(v43 + 1, v42));
    }
    v44 = v100[0];
    if (*v100[0]
    {
      v46 = v45;
      v47 = (std::__shared_weak_count *)v44[1];
      v104 = (void ***)v45;
      v105 = v47;
      if (v47)
      {
        v48 = (unint64_t *)&v47->__shared_owners_;
        do
          v49 = __ldxr(v48);
        while (__stxr(v49 + 1, v48));
      }
    }
    else
    {
      v47 = 0;
      v46 = 0;
      v104 = 0;
      v105 = 0;
    }
    LODWORD(v50) = *(_DWORD *)(v40 + 8);
    v94 = a1;
    v95 = v5;
    v93 = v47;
    if ((_DWORD)v50 == 1)
    {
      v51 = 0;
      v52 = (int *)v46[20];
      v53 = (float *)*((_QWORD *)v52 + 3);
      v54 = v52[2];
      v55 = v52 + 3;
      do
        v54 *= v55[v51++];
      while (v51 != 3);
      vDSP_vsmul(v53, 1, *(const float **)(v40 + 16), v53, 1, v54);
    }
    else
    {
      v56 = *((_DWORD *)v46 + 4);
      if ((_DWORD)v50 != v56)
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v50, v56);
      v57 = *((_DWORD *)v46 + 5);
      if (v57)
      {
        v58 = 0;
        v59 = 0;
        v60 = *((int *)v46 + 2) * (uint64_t)*((int *)v46 + 3);
        v61 = 4 * (int)v50 * v60;
        do
        {
          if ((_DWORD)v50)
          {
            v62 = 0;
            v63 = 0;
            v64 = v58;
            do
            {
              vDSP_vsmul((const float *)(*((_QWORD *)v46[20] + 3) + v64), 1, (const float *)(*(_QWORD *)(v40 + 16) + v62), (float *)(*((_QWORD *)v46[20] + 3) + v64), 1, v60);
              ++v63;
              v50 = *((int *)v46 + 4);
              v62 += 4;
              v64 += 4 * v60;
            }
            while (v63 < v50);
            v57 = *((_DWORD *)v46 + 5);
          }
          ++v59;
          v58 += v61;
        }
        while (v59 < v57);
      }
    }
    a1 = v94;
    v5 = v95;
    if (v93)
    {
      v65 = (unint64_t *)&v93->__shared_owners_;
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 - 1, v65));
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
        std::__shared_weak_count::__release_weak(v93);
      }
    }
    if (v96)
    {
      v67 = (unint64_t *)&v96->__shared_owners_;
      do
        v68 = __ldaxr(v67);
      while (__stlxr(v68 - 1, v67));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
        std::__shared_weak_count::__release_weak(v96);
      }
    }
  }
  v69 = (std::__shared_weak_count *)a1[39];
  if (v69)
  {
    v70 = (unint64_t *)&v69->__shared_owners_;
    do
      v71 = __ldxr(v70);
    while (__stxr(v71 + 1, v70));
  }
  v72 = *v5;
  if (v5[1] != *v5)
  {
    v73 = 0;
    do
    {
      v74 = *(const void **)(v72 + 16 * v73);
      if (v74
      {
        v76 = (uint64_t)v75;
        v104 = (void ***)v75;
        v77 = *(std::__shared_weak_count **)(v72 + 16 * v73 + 8);
        v105 = v77;
        if (v77)
        {
          v78 = (unint64_t *)&v77->__shared_owners_;
          do
            v79 = __ldxr(v78);
          while (__stxr(v79 + 1, v78));
        }
      }
      else
      {
        v76 = 0;
        v104 = 0;
        v105 = 0;
      }
      v80 = v100[0];
      v81 = v100[0][2 * v73];
      if (v81
      {
        v102 = v82;
        v83 = (std::__shared_weak_count *)v80[2 * v73 + 1];
        v103 = v83;
        if (v83)
        {
          v84 = (unint64_t *)&v83->__shared_owners_;
          do
            v85 = __ldxr(v84);
          while (__stxr(v85 + 1, v84));
        }
      }
      else
      {
        v83 = 0;
        v82 = 0;
        v102 = 0;
        v103 = 0;
      }
      v39.n128_u64[0] = Espresso::QuantSimEngine::blob_container::copy_from_fp32(v76, (uint64_t)v82 + 160, 1.0);
      if (v83)
      {
        v86 = (unint64_t *)&v83->__shared_owners_;
        do
          v87 = __ldaxr(v86);
        while (__stlxr(v87 - 1, v86));
        if (!v87)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v83->__on_zero_shared)(v83, v39);
          std::__shared_weak_count::__release_weak(v83);
        }
      }
      v88 = v105;
      if (v105)
      {
        v89 = (unint64_t *)&v105->__shared_owners_;
        do
          v90 = __ldaxr(v89);
        while (__stlxr(v90 - 1, v89));
        if (!v90)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v88->__on_zero_shared)(v88, v39);
          std::__shared_weak_count::__release_weak(v88);
        }
      }
      ++v73;
      v72 = *v5;
    }
    while (v73 < (v5[1] - *v5) >> 4);
  }
  if (v69)
  {
    v91 = (unint64_t *)&v69->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v69->__on_zero_shared)(v69, v39);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  v104 = v100;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v104);
  v100[0] = (void **)v101;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v100);
}

void sub_191624824(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  *(_QWORD *)(v25 - 104) = &a22;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 104));
  a22 = (void **)&a25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a22);
  _Unwind_Resume(a1);
}

void *wrapper_kernel<Espresso::slice_kernel_cpu,Espresso::slice_params_t>::__set_weight_raw_blob(void *result, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  void *v7;
  int v8;
  uint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::runtime_error *exception;
  unint64_t v15;
  std::runtime_error *v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  std::string v39;
  _QWORD v40[2];
  unsigned __int8 v41;
  _QWORD v42[2];
  unsigned __int8 v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;

  v7 = result;
  v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10)
      return result;
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    v10 = (uint64_t)v7 + 320;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v10, (__int128 *)&v52);
    size = (std::__shared_weak_count *)v52.__r_.__value_.__l.__size_;
    if (v52.__r_.__value_.__l.__size_)
    {
      v12 = (unint64_t *)(v52.__r_.__value_.__l.__size_ + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    if (a5 != 4 * *(int *)(*(_QWORD *)v10 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      v15 = a5;
      v16 = exception;
      std::to_string(&v45, v15);
      v17 = std::string::insert(&v45, 0, "Unexpected size s=");
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      v19 = std::string::append(&v46, "/blob=");
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, 4 * *(int *)(*(_QWORD *)v10 + 8));
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v21 = &v44;
      else
        v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      else
        v22 = v44.__r_.__value_.__l.__size_;
      v23 = std::string::append(&v47, (const std::string::value_type *)v21, v22);
      v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, " @ ");
      if ((v43 & 0x80u) == 0)
        v25 = (const std::string::value_type *)v42;
      else
        v25 = (const std::string::value_type *)v42[0];
      if ((v43 & 0x80u) == 0)
        v26 = v43;
      else
        v26 = v42[1];
      v27 = std::string::append(&v48, v25, v26);
      v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      v29 = std::string::append(&v49, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v40, ":");
      if ((v41 & 0x80u) == 0)
        v31 = (const std::string::value_type *)v40;
      else
        v31 = (const std::string::value_type *)v40[0];
      if ((v41 & 0x80u) == 0)
        v32 = v41;
      else
        v32 = v40[1];
      v33 = std::string::append(&v50, v31, v32);
      v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, 197);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = &v39;
      else
        v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      else
        v36 = v39.__r_.__value_.__l.__size_;
      v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
      v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v16, &v52);
      __cxa_throw(v16, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    return memcpy(*(void **)(*(_QWORD *)v10 + 16), a4, a5);
  }
  return result;
}

void sub_191624BDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  void *v59;
  int v60;
  uint64_t v61;

  if (*(char *)(v61 - 57) < 0)
    operator delete(*(void **)(v61 - 80));
  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v61 - 89) < 0)
    operator delete(*(void **)(v61 - 112));
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v61 - 121) < 0)
    operator delete(*(void **)(v61 - 144));
  if (*(char *)(v61 - 153) < 0)
    operator delete(*(void **)(v61 - 176));
  if (a27 < 0)
    operator delete(a22);
  if (a59 < 0)
    operator delete(a54);
  if (a33 < 0)
    operator delete(a28);
  if (a52 < 0)
    operator delete(a47);
  if (a45 < 0)
    operator delete(a40);
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0)
LABEL_28:
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

BOOL wrapper_kernel<Espresso::slice_kernel_cpu,Espresso::slice_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2;

  v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10)
      return 0;
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

void wrapper_kernel<Espresso::slice_kernel_cpu,Espresso::slice_params_t>::convert_layer_data_to_fp32(_QWORD *a1, char **a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v9;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  const void *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  __int128 v43;
  int64x2_t v44;
  char *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  __int128 v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  int64x2_t v59;
  char *v60;
  _QWORD *v61;
  void *__p;
  void *v63;
  __int128 v64;
  const void *v65;
  std::__shared_weak_count *v66;

  if (a3 != a4)
  {
    v9 = a3;
    v12 = a2 + 2;
    while (1)
    {
      v14 = *(const void **)v9;
      v13 = *(std::__shared_weak_count **)(v9 + 8);
      v65 = *(const void **)v9;
      v66 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
      }
      v17 = operator new(0x118uLL);
      v17[1] = 0;
      v17[2] = 0;
      *v17 = &off_1E2DC1868;
      Espresso::blob_cpu::blob_cpu((uint64_t)(v17 + 3), a1);
      *(_QWORD *)&v64 = v17 + 3;
      *((_QWORD *)&v64 + 1) = v17;
      Espresso::abstract_blob_container::shape((char *)&v58, (uint64_t)v14);
      v56 = 0;
      v57 = 0;
      (*(void (**)(_QWORD *, uint64_t *, uint64_t *))(v17[3] + 16))(v17 + 3, &v58, &v56);
      v18 = v57;
      if (v57)
      {
        v19 = (unint64_t *)&v57->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if (__p)
      {
        v63 = __p;
        operator delete(__p);
      }
      if (v65)
      {
        if (v21)
          break;
      }
      v21 = 0;
      v55 = 0;
      if (a5)
        goto LABEL_21;
LABEL_28:
      v27 = v64;
      if (*((_QWORD *)&v64 + 1))
      {
        v28 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v31 = a2[1];
      v30 = (unint64_t)a2[2];
      if ((unint64_t)v31 >= v30)
      {
        v54 = v27;
        v33 = (v31 - *a2) >> 4;
        if ((unint64_t)(v33 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v34 = v30 - (_QWORD)*a2;
        v35 = v34 >> 3;
        if (v34 >> 3 <= (unint64_t)(v33 + 1))
          v35 = v33 + 1;
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0)
          v36 = 0xFFFFFFFFFFFFFFFLL;
        else
          v36 = v35;
        v61 = v12;
        v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v36);
        v39 = &v37[16 * v33];
        *(_OWORD *)v39 = v54;
        v41 = *a2;
        v40 = a2[1];
        if (v40 == *a2)
        {
          v44 = vdupq_n_s64((unint64_t)v40);
          v42 = &v37[16 * v33];
        }
        else
        {
          v42 = &v37[16 * v33];
          do
          {
            v43 = *((_OWORD *)v40 - 1);
            v40 -= 16;
            *((_OWORD *)v42 - 1) = v43;
            v42 -= 16;
            *(_QWORD *)v40 = 0;
            *((_QWORD *)v40 + 1) = 0;
          }
          while (v40 != v41);
          v44 = *(int64x2_t *)a2;
        }
        v32 = v39 + 16;
        *a2 = v42;
        a2[1] = v39 + 16;
        v59 = v44;
        v45 = a2[2];
        a2[2] = &v37[16 * v38];
        v60 = v45;
        v58 = v44.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v58);
      }
      else
      {
        *(_OWORD *)v31 = v27;
        v32 = v31 + 16;
      }
      a2[1] = v32;
      if (v55)
      {
        v46 = (unint64_t *)&v55->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      v48 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
      if (*((_QWORD *)&v64 + 1))
      {
        v49 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      v51 = v66;
      if (v66)
      {
        v52 = (unint64_t *)&v66->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v9 += 16;
      if (v9 == a4)
        return;
    }
    v55 = v66;
    if (v66)
    {
      v22 = (unint64_t *)&v66->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    if (!a5)
      goto LABEL_28;
LABEL_21:
    if (a6)
    {
      v58 = 0;
      v59.i64[0] = 0;
      (*(void (**)(void *, uint64_t *, uint64_t))(*(_QWORD *)v21 + 40))(v21, &v58, v64 + 160);
      v24 = (std::__shared_weak_count *)v59.i64[0];
      if (v59.i64[0])
      {
        v25 = (unint64_t *)(v59.i64[0] + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v21, v64 + 160, 1.0);
    }
    goto LABEL_28;
  }
}

void sub_191625138(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::slice_kernel_cpu,Espresso::slice_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB4550;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::slice_kernel_cpu,Espresso::slice_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB4550;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::slice_kernel_cpu,Espresso::slice_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_14@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  __n128 result;

  v6 = operator new(0x160uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DB50E8;
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  v6[38] = *(_QWORD *)a2;
  *((_DWORD *)v6 + 78) = *(_DWORD *)(a2 + 8);
  v6[3] = &off_1E2D53E28;
  *((_OWORD *)v6 + 20) = 0u;
  *((_OWORD *)v6 + 21) = 0u;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v6 + 40, *a1, a1[1]);
  result.n128_u64[0] = (unint64_t)(v6 + 3);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19162529C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::space_to_depth_kernel_cpu,Espresso::space_to_depth_params_t>::~wrapper_kernel(Espresso::base_kernel *a1)
{
  *(_QWORD *)a1 = &off_1E2D53E28;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 312);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 296);
  Espresso::base_kernel::~base_kernel(a1);
}

{
  *(_QWORD *)a1 = &off_1E2D53E28;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 312);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 296);
  Espresso::base_kernel::~base_kernel(a1);
  JUMPOUT(0x19401CD90);
}

void wrapper_kernel<Espresso::space_to_depth_kernel_cpu,Espresso::space_to_depth_params_t>::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v5;
  _BOOL4 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  float *v31;
  vDSP_Length v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  __n128 v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  void **v44;
  void **v45;
  void **v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  int *v52;
  float *v53;
  vDSP_Length v54;
  int *v55;
  int v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  vDSP_Length v60;
  vDSP_Length v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  const void *v74;
  void **v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  void **v80;
  const void *v81;
  void *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  uint64_t v94;
  uint64_t *v95;
  std::__shared_weak_count *v96;
  float __B;
  _QWORD v98[2];
  _QWORD v99[2];
  void **v100[3];
  char *v101[3];
  void *v102;
  std::__shared_weak_count *v103;
  void ***v104;
  std::__shared_weak_count *v105;

  v5 = a3;
  memset(v101, 0, sizeof(v101));
  memset(v100, 0, sizeof(v100));
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)*a3 + 32))(*(_QWORD *)*a3))
    v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)*v5 + 32))(*(_QWORD *)*v5) == 1;
  else
    v7 = 1;
  v8 = *(std::__shared_weak_count **)(a1 + 304);
  v99[0] = *(_QWORD *)(a1 + 296);
  v99[1] = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  wrapper_kernel<Espresso::space_to_depth_kernel_cpu,Espresso::space_to_depth_params_t>::convert_layer_data_to_fp32(v99, v101, *a4, a4[1], 1, v7);
  if (v8)
  {
    v11 = (unint64_t *)&v8->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v13 = *(std::__shared_weak_count **)(a1 + 304);
  v98[0] = *(_QWORD *)(a1 + 296);
  v98[1] = v13;
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  wrapper_kernel<Espresso::space_to_depth_kernel_cpu,Espresso::space_to_depth_params_t>::convert_layer_data_to_fp32(v98, (char **)v100, *v5, v5[1], 0, 0);
  if (v13)
  {
    v17 = (unint64_t *)&v13->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v19 = *a4;
  if (a4[1] != *a4)
  {
    v20 = 0;
    do
    {
      if (!v7
        && (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v19 + 16 * v20) + 32))(*(_QWORD *)(v19 + 16 * v20))
         || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(*a4 + 16 * v20) + 32))(*(_QWORD *)(*a4 + 16 * v20)) == 1))
      {
        __B = *(float *)(*(_QWORD *)(*a4 + 16 * v20) + 112);
        v21 = &v101[0][16 * v20];
        v104 = (void ***)v22;
        v23 = (std::__shared_weak_count *)*((_QWORD *)v21 + 1);
        v105 = v23;
        if (v23)
        {
          v24 = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
        }
        v26 = *((_QWORD *)v22 + 20);
        v27 = (std::__shared_weak_count *)*((_QWORD *)v22 + 21);
        v102 = (void *)v26;
        v103 = v27;
        if (v27)
        {
          v28 = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldxr(v28);
          while (__stxr(v29 + 1, v28));
        }
        v30 = 0;
        v31 = *(float **)(v26 + 24);
        v32 = *(int *)(v26 + 8);
        v33 = v26 + 12;
        do
        {
          v32 *= *(int *)(v33 + v30);
          v30 += 4;
        }
        while (v30 != 12);
        vDSP_vsmul(v31, 1, &__B, v31, 1, v32);
        if (v27)
        {
          v34 = (unint64_t *)&v27->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        v36 = v105;
        if (v105)
        {
          v37 = (unint64_t *)&v105->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
      }
      ++v20;
      v19 = *a4;
    }
    while (v20 < (a4[1] - *a4) >> 4);
  }
  Espresso::space_to_depth_kernel_cpu::__launch((_DWORD *)a1, v16, (uint64_t **)v100, (_QWORD **)v101);
  v40 = *(_QWORD *)(a1 + 312);
  if (v40)
  {
    v41 = *(std::__shared_weak_count **)(a1 + 320);
    v96 = v41;
    if (v41)
    {
      v42 = (unint64_t *)&v41->__shared_owners_;
      do
        v43 = __ldxr(v42);
      while (__stxr(v43 + 1, v42));
    }
    v44 = v100[0];
    if (*v100[0]
    {
      v46 = v45;
      v47 = (std::__shared_weak_count *)v44[1];
      v104 = (void ***)v45;
      v105 = v47;
      if (v47)
      {
        v48 = (unint64_t *)&v47->__shared_owners_;
        do
          v49 = __ldxr(v48);
        while (__stxr(v49 + 1, v48));
      }
    }
    else
    {
      v47 = 0;
      v46 = 0;
      v104 = 0;
      v105 = 0;
    }
    LODWORD(v50) = *(_DWORD *)(v40 + 8);
    v94 = a1;
    v95 = v5;
    v93 = v47;
    if ((_DWORD)v50 == 1)
    {
      v51 = 0;
      v52 = (int *)v46[20];
      v53 = (float *)*((_QWORD *)v52 + 3);
      v54 = v52[2];
      v55 = v52 + 3;
      do
        v54 *= v55[v51++];
      while (v51 != 3);
      vDSP_vsmul(v53, 1, *(const float **)(v40 + 16), v53, 1, v54);
    }
    else
    {
      v56 = *((_DWORD *)v46 + 4);
      if ((_DWORD)v50 != v56)
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v50, v56);
      v57 = *((_DWORD *)v46 + 5);
      if (v57)
      {
        v58 = 0;
        v59 = 0;
        v60 = *((int *)v46 + 2) * (uint64_t)*((int *)v46 + 3);
        v61 = 4 * (int)v50 * v60;
        do
        {
          if ((_DWORD)v50)
          {
            v62 = 0;
            v63 = 0;
            v64 = v58;
            do
            {
              vDSP_vsmul((const float *)(*((_QWORD *)v46[20] + 3) + v64), 1, (const float *)(*(_QWORD *)(v40 + 16) + v62), (float *)(*((_QWORD *)v46[20] + 3) + v64), 1, v60);
              ++v63;
              v50 = *((int *)v46 + 4);
              v62 += 4;
              v64 += 4 * v60;
            }
            while (v63 < v50);
            v57 = *((_DWORD *)v46 + 5);
          }
          ++v59;
          v58 += v61;
        }
        while (v59 < v57);
      }
    }
    a1 = v94;
    v5 = v95;
    if (v93)
    {
      v65 = (unint64_t *)&v93->__shared_owners_;
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 - 1, v65));
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
        std::__shared_weak_count::__release_weak(v93);
      }
    }
    if (v96)
    {
      v67 = (unint64_t *)&v96->__shared_owners_;
      do
        v68 = __ldaxr(v67);
      while (__stlxr(v68 - 1, v67));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
        std::__shared_weak_count::__release_weak(v96);
      }
    }
  }
  v69 = *(std::__shared_weak_count **)(a1 + 304);
  if (v69)
  {
    v70 = (unint64_t *)&v69->__shared_owners_;
    do
      v71 = __ldxr(v70);
    while (__stxr(v71 + 1, v70));
  }
  v72 = *v5;
  if (v5[1] != *v5)
  {
    v73 = 0;
    do
    {
      v74 = *(const void **)(v72 + 16 * v73);
      if (v74
      {
        v76 = (uint64_t)v75;
        v104 = (void ***)v75;
        v77 = *(std::__shared_weak_count **)(v72 + 16 * v73 + 8);
        v105 = v77;
        if (v77)
        {
          v78 = (unint64_t *)&v77->__shared_owners_;
          do
            v79 = __ldxr(v78);
          while (__stxr(v79 + 1, v78));
        }
      }
      else
      {
        v76 = 0;
        v104 = 0;
        v105 = 0;
      }
      v80 = v100[0];
      v81 = v100[0][2 * v73];
      if (v81
      {
        v102 = v82;
        v83 = (std::__shared_weak_count *)v80[2 * v73 + 1];
        v103 = v83;
        if (v83)
        {
          v84 = (unint64_t *)&v83->__shared_owners_;
          do
            v85 = __ldxr(v84);
          while (__stxr(v85 + 1, v84));
        }
      }
      else
      {
        v83 = 0;
        v82 = 0;
        v102 = 0;
        v103 = 0;
      }
      v39.n128_u64[0] = Espresso::QuantSimEngine::blob_container::copy_from_fp32(v76, (uint64_t)v82 + 160, 1.0);
      if (v83)
      {
        v86 = (unint64_t *)&v83->__shared_owners_;
        do
          v87 = __ldaxr(v86);
        while (__stlxr(v87 - 1, v86));
        if (!v87)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v83->__on_zero_shared)(v83, v39);
          std::__shared_weak_count::__release_weak(v83);
        }
      }
      v88 = v105;
      if (v105)
      {
        v89 = (unint64_t *)&v105->__shared_owners_;
        do
          v90 = __ldaxr(v89);
        while (__stlxr(v90 - 1, v89));
        if (!v90)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v88->__on_zero_shared)(v88, v39);
          std::__shared_weak_count::__release_weak(v88);
        }
      }
      ++v73;
      v72 = *v5;
    }
    while (v73 < (v5[1] - *v5) >> 4);
  }
  if (v69)
  {
    v91 = (unint64_t *)&v69->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v69->__on_zero_shared)(v69, v39);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  v104 = v100;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v104);
  v100[0] = (void **)v101;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v100);
}

void sub_191625A0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  *(_QWORD *)(v25 - 104) = &a22;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 104));
  a22 = (void **)&a25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a22);
  _Unwind_Resume(a1);
}

void *wrapper_kernel<Espresso::space_to_depth_kernel_cpu,Espresso::space_to_depth_params_t>::__set_weight_raw_blob(void *result, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  void *v7;
  int v8;
  uint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::runtime_error *exception;
  unint64_t v15;
  std::runtime_error *v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  std::string v39;
  _QWORD v40[2];
  unsigned __int8 v41;
  _QWORD v42[2];
  unsigned __int8 v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;

  v7 = result;
  v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10)
      return result;
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    v10 = (uint64_t)v7 + 312;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v10, (__int128 *)&v52);
    size = (std::__shared_weak_count *)v52.__r_.__value_.__l.__size_;
    if (v52.__r_.__value_.__l.__size_)
    {
      v12 = (unint64_t *)(v52.__r_.__value_.__l.__size_ + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    if (a5 != 4 * *(int *)(*(_QWORD *)v10 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      v15 = a5;
      v16 = exception;
      std::to_string(&v45, v15);
      v17 = std::string::insert(&v45, 0, "Unexpected size s=");
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      v19 = std::string::append(&v46, "/blob=");
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, 4 * *(int *)(*(_QWORD *)v10 + 8));
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v21 = &v44;
      else
        v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      else
        v22 = v44.__r_.__value_.__l.__size_;
      v23 = std::string::append(&v47, (const std::string::value_type *)v21, v22);
      v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, " @ ");
      if ((v43 & 0x80u) == 0)
        v25 = (const std::string::value_type *)v42;
      else
        v25 = (const std::string::value_type *)v42[0];
      if ((v43 & 0x80u) == 0)
        v26 = v43;
      else
        v26 = v42[1];
      v27 = std::string::append(&v48, v25, v26);
      v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      v29 = std::string::append(&v49, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v40, ":");
      if ((v41 & 0x80u) == 0)
        v31 = (const std::string::value_type *)v40;
      else
        v31 = (const std::string::value_type *)v40[0];
      if ((v41 & 0x80u) == 0)
        v32 = v41;
      else
        v32 = v40[1];
      v33 = std::string::append(&v50, v31, v32);
      v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, 197);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = &v39;
      else
        v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      else
        v36 = v39.__r_.__value_.__l.__size_;
      v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
      v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v16, &v52);
      __cxa_throw(v16, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    return memcpy(*(void **)(*(_QWORD *)v10 + 16), a4, a5);
  }
  return result;
}

void sub_191625DC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  void *v59;
  int v60;
  uint64_t v61;

  if (*(char *)(v61 - 57) < 0)
    operator delete(*(void **)(v61 - 80));
  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v61 - 89) < 0)
    operator delete(*(void **)(v61 - 112));
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v61 - 121) < 0)
    operator delete(*(void **)(v61 - 144));
  if (*(char *)(v61 - 153) < 0)
    operator delete(*(void **)(v61 - 176));
  if (a27 < 0)
    operator delete(a22);
  if (a59 < 0)
    operator delete(a54);
  if (a33 < 0)
    operator delete(a28);
  if (a52 < 0)
    operator delete(a47);
  if (a45 < 0)
    operator delete(a40);
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0)
LABEL_28:
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

BOOL wrapper_kernel<Espresso::space_to_depth_kernel_cpu,Espresso::space_to_depth_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2;

  v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10)
      return 0;
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

void wrapper_kernel<Espresso::space_to_depth_kernel_cpu,Espresso::space_to_depth_params_t>::convert_layer_data_to_fp32(_QWORD *a1, char **a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v9;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  const void *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  __int128 v43;
  int64x2_t v44;
  char *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  __int128 v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  int64x2_t v59;
  char *v60;
  _QWORD *v61;
  void *__p;
  void *v63;
  __int128 v64;
  const void *v65;
  std::__shared_weak_count *v66;

  if (a3 != a4)
  {
    v9 = a3;
    v12 = a2 + 2;
    while (1)
    {
      v14 = *(const void **)v9;
      v13 = *(std::__shared_weak_count **)(v9 + 8);
      v65 = *(const void **)v9;
      v66 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
      }
      v17 = operator new(0x118uLL);
      v17[1] = 0;
      v17[2] = 0;
      *v17 = &off_1E2DC1868;
      Espresso::blob_cpu::blob_cpu((uint64_t)(v17 + 3), a1);
      *(_QWORD *)&v64 = v17 + 3;
      *((_QWORD *)&v64 + 1) = v17;
      Espresso::abstract_blob_container::shape((char *)&v58, (uint64_t)v14);
      v56 = 0;
      v57 = 0;
      (*(void (**)(_QWORD *, uint64_t *, uint64_t *))(v17[3] + 16))(v17 + 3, &v58, &v56);
      v18 = v57;
      if (v57)
      {
        v19 = (unint64_t *)&v57->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if (__p)
      {
        v63 = __p;
        operator delete(__p);
      }
      if (v65)
      {
        if (v21)
          break;
      }
      v21 = 0;
      v55 = 0;
      if (a5)
        goto LABEL_21;
LABEL_28:
      v27 = v64;
      if (*((_QWORD *)&v64 + 1))
      {
        v28 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v31 = a2[1];
      v30 = (unint64_t)a2[2];
      if ((unint64_t)v31 >= v30)
      {
        v54 = v27;
        v33 = (v31 - *a2) >> 4;
        if ((unint64_t)(v33 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v34 = v30 - (_QWORD)*a2;
        v35 = v34 >> 3;
        if (v34 >> 3 <= (unint64_t)(v33 + 1))
          v35 = v33 + 1;
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0)
          v36 = 0xFFFFFFFFFFFFFFFLL;
        else
          v36 = v35;
        v61 = v12;
        v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v36);
        v39 = &v37[16 * v33];
        *(_OWORD *)v39 = v54;
        v41 = *a2;
        v40 = a2[1];
        if (v40 == *a2)
        {
          v44 = vdupq_n_s64((unint64_t)v40);
          v42 = &v37[16 * v33];
        }
        else
        {
          v42 = &v37[16 * v33];
          do
          {
            v43 = *((_OWORD *)v40 - 1);
            v40 -= 16;
            *((_OWORD *)v42 - 1) = v43;
            v42 -= 16;
            *(_QWORD *)v40 = 0;
            *((_QWORD *)v40 + 1) = 0;
          }
          while (v40 != v41);
          v44 = *(int64x2_t *)a2;
        }
        v32 = v39 + 16;
        *a2 = v42;
        a2[1] = v39 + 16;
        v59 = v44;
        v45 = a2[2];
        a2[2] = &v37[16 * v38];
        v60 = v45;
        v58 = v44.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v58);
      }
      else
      {
        *(_OWORD *)v31 = v27;
        v32 = v31 + 16;
      }
      a2[1] = v32;
      if (v55)
      {
        v46 = (unint64_t *)&v55->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      v48 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
      if (*((_QWORD *)&v64 + 1))
      {
        v49 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      v51 = v66;
      if (v66)
      {
        v52 = (unint64_t *)&v66->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v9 += 16;
      if (v9 == a4)
        return;
    }
    v55 = v66;
    if (v66)
    {
      v22 = (unint64_t *)&v66->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    if (!a5)
      goto LABEL_28;
LABEL_21:
    if (a6)
    {
      v58 = 0;
      v59.i64[0] = 0;
      (*(void (**)(void *, uint64_t *, uint64_t))(*(_QWORD *)v21 + 40))(v21, &v58, v64 + 160);
      v24 = (std::__shared_weak_count *)v59.i64[0];
      if (v59.i64[0])
      {
        v25 = (unint64_t *)(v59.i64[0] + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v21, v64 + 160, 1.0);
    }
    goto LABEL_28;
  }
}

void sub_191626320(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::space_to_depth_kernel_cpu,Espresso::space_to_depth_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB50E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::space_to_depth_kernel_cpu,Espresso::space_to_depth_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB50E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::space_to_depth_kernel_cpu,Espresso::space_to_depth_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_13@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  __int128 v7;
  __int128 v8;
  __n128 result;

  v6 = (char *)operator new(0x198uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DB4B00;
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  v7 = *(_OWORD *)(a2 + 48);
  *((_OWORD *)v6 + 21) = *(_OWORD *)(a2 + 32);
  *((_OWORD *)v6 + 22) = v7;
  *((_QWORD *)v6 + 46) = *(_QWORD *)(a2 + 64);
  v8 = *(_OWORD *)(a2 + 16);
  *((_OWORD *)v6 + 19) = *(_OWORD *)a2;
  *((_OWORD *)v6 + 20) = v8;
  *((_QWORD *)v6 + 3) = &off_1E2D51890;
  *(_OWORD *)(v6 + 376) = 0u;
  *(_OWORD *)(v6 + 392) = 0u;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v6 + 47, *a1, a1[1]);
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_191626490(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::upsample_kernel_cpu,Espresso::upsample_kernel_params>::~wrapper_kernel(Espresso::base_kernel *a1)
{
  *(_QWORD *)a1 = &off_1E2D51890;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 368);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 352);
  Espresso::base_kernel::~base_kernel(a1);
}

{
  *(_QWORD *)a1 = &off_1E2D51890;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 368);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 352);
  Espresso::base_kernel::~base_kernel(a1);
  JUMPOUT(0x19401CD90);
}

void wrapper_kernel<Espresso::upsample_kernel_cpu,Espresso::upsample_kernel_params>::__launch(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v5;
  _BOOL4 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  double v17;
  __n128 v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  void *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  float *v33;
  vDSP_Length v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  __n128 v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  void **v46;
  void **v47;
  void **v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  int *v54;
  float *v55;
  vDSP_Length v56;
  int *v57;
  int v58;
  int v59;
  uint64_t v60;
  unint64_t v61;
  vDSP_Length v62;
  vDSP_Length v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  const void *v76;
  void **v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  void **v82;
  const void *v83;
  void *v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  _QWORD *v96;
  uint64_t *v97;
  std::__shared_weak_count *v98;
  float __B;
  _QWORD v100[2];
  _QWORD v101[2];
  void **v102[3];
  char *v103[3];
  void *v104;
  std::__shared_weak_count *v105;
  void ***v106;
  std::__shared_weak_count *v107;

  v5 = a3;
  memset(v103, 0, sizeof(v103));
  memset(v102, 0, sizeof(v102));
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)*a3 + 32))(*(_QWORD *)*a3))
    v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)*v5 + 32))(*(_QWORD *)*v5) == 1;
  else
    v7 = 1;
  v8 = (std::__shared_weak_count *)a1[45];
  v101[0] = a1[44];
  v101[1] = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  wrapper_kernel<Espresso::upsample_kernel_cpu,Espresso::upsample_kernel_params>::convert_layer_data_to_fp32(v101, v103, *a4, a4[1], 1, v7);
  if (v8)
  {
    v11 = (unint64_t *)&v8->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v13 = (std::__shared_weak_count *)a1[45];
  v100[0] = a1[44];
  v100[1] = v13;
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  wrapper_kernel<Espresso::upsample_kernel_cpu,Espresso::upsample_kernel_params>::convert_layer_data_to_fp32(v100, (char **)v102, *v5, v5[1], 0, 0);
  if (v13)
  {
    v19 = (unint64_t *)&v13->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v21 = *a4;
  if (a4[1] != *a4)
  {
    v22 = 0;
    do
    {
      if (!v7
        && (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v21 + 16 * v22) + 32))(*(_QWORD *)(v21 + 16 * v22))
         || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(*a4 + 16 * v22) + 32))(*(_QWORD *)(*a4 + 16 * v22)) == 1))
      {
        __B = *(float *)(*(_QWORD *)(*a4 + 16 * v22) + 112);
        v23 = &v103[0][16 * v22];
        v106 = (void ***)v24;
        v25 = (std::__shared_weak_count *)*((_QWORD *)v23 + 1);
        v107 = v25;
        if (v25)
        {
          v26 = (unint64_t *)&v25->__shared_owners_;
          do
            v27 = __ldxr(v26);
          while (__stxr(v27 + 1, v26));
        }
        v28 = *((_QWORD *)v24 + 20);
        v29 = (std::__shared_weak_count *)*((_QWORD *)v24 + 21);
        v104 = (void *)v28;
        v105 = v29;
        if (v29)
        {
          v30 = (unint64_t *)&v29->__shared_owners_;
          do
            v31 = __ldxr(v30);
          while (__stxr(v31 + 1, v30));
        }
        v32 = 0;
        v33 = *(float **)(v28 + 24);
        v34 = *(int *)(v28 + 8);
        v35 = v28 + 12;
        do
        {
          v34 *= *(int *)(v35 + v32);
          v32 += 4;
        }
        while (v32 != 12);
        vDSP_vsmul(v33, 1, &__B, v33, 1, v34);
        if (v29)
        {
          v36 = (unint64_t *)&v29->__shared_owners_;
          do
            v37 = __ldaxr(v36);
          while (__stlxr(v37 - 1, v36));
          if (!v37)
          {
            ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
            std::__shared_weak_count::__release_weak(v29);
          }
        }
        v38 = v107;
        if (v107)
        {
          v39 = (unint64_t *)&v107->__shared_owners_;
          do
            v40 = __ldaxr(v39);
          while (__stlxr(v40 - 1, v39));
          if (!v40)
          {
            ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
            std::__shared_weak_count::__release_weak(v38);
          }
        }
      }
      ++v22;
      v21 = *a4;
    }
    while (v22 < (a4[1] - *a4) >> 4);
  }
  Espresso::upsample_kernel_cpu::__launch((uint64_t)a1, v16, (uint64_t)v102, (uint64_t)v103, v17, v18);
  v42 = a1[46];
  if (v42)
  {
    v43 = (std::__shared_weak_count *)a1[47];
    v98 = v43;
    if (v43)
    {
      v44 = (unint64_t *)&v43->__shared_owners_;
      do
        v45 = __ldxr(v44);
      while (__stxr(v45 + 1, v44));
    }
    v46 = v102[0];
    if (*v102[0]
    {
      v48 = v47;
      v49 = (std::__shared_weak_count *)v46[1];
      v106 = (void ***)v47;
      v107 = v49;
      if (v49)
      {
        v50 = (unint64_t *)&v49->__shared_owners_;
        do
          v51 = __ldxr(v50);
        while (__stxr(v51 + 1, v50));
      }
    }
    else
    {
      v49 = 0;
      v48 = 0;
      v106 = 0;
      v107 = 0;
    }
    LODWORD(v52) = *(_DWORD *)(v42 + 8);
    v96 = a1;
    v97 = v5;
    v95 = v49;
    if ((_DWORD)v52 == 1)
    {
      v53 = 0;
      v54 = (int *)v48[20];
      v55 = (float *)*((_QWORD *)v54 + 3);
      v56 = v54[2];
      v57 = v54 + 3;
      do
        v56 *= v57[v53++];
      while (v53 != 3);
      vDSP_vsmul(v55, 1, *(const float **)(v42 + 16), v55, 1, v56);
    }
    else
    {
      v58 = *((_DWORD *)v48 + 4);
      if ((_DWORD)v52 != v58)
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v52, v58);
      v59 = *((_DWORD *)v48 + 5);
      if (v59)
      {
        v60 = 0;
        v61 = 0;
        v62 = *((int *)v48 + 2) * (uint64_t)*((int *)v48 + 3);
        v63 = 4 * (int)v52 * v62;
        do
        {
          if ((_DWORD)v52)
          {
            v64 = 0;
            v65 = 0;
            v66 = v60;
            do
            {
              vDSP_vsmul((const float *)(*((_QWORD *)v48[20] + 3) + v66), 1, (const float *)(*(_QWORD *)(v42 + 16) + v64), (float *)(*((_QWORD *)v48[20] + 3) + v66), 1, v62);
              ++v65;
              v52 = *((int *)v48 + 4);
              v64 += 4;
              v66 += 4 * v62;
            }
            while (v65 < v52);
            v59 = *((_DWORD *)v48 + 5);
          }
          ++v61;
          v60 += v63;
        }
        while (v61 < v59);
      }
    }
    a1 = v96;
    v5 = v97;
    if (v95)
    {
      v67 = (unint64_t *)&v95->__shared_owners_;
      do
        v68 = __ldaxr(v67);
      while (__stlxr(v68 - 1, v67));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
        std::__shared_weak_count::__release_weak(v95);
      }
    }
    if (v98)
    {
      v69 = (unint64_t *)&v98->__shared_owners_;
      do
        v70 = __ldaxr(v69);
      while (__stlxr(v70 - 1, v69));
      if (!v70)
      {
        ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
        std::__shared_weak_count::__release_weak(v98);
      }
    }
  }
  v71 = (std::__shared_weak_count *)a1[45];
  if (v71)
  {
    v72 = (unint64_t *)&v71->__shared_owners_;
    do
      v73 = __ldxr(v72);
    while (__stxr(v73 + 1, v72));
  }
  v74 = *v5;
  if (v5[1] != *v5)
  {
    v75 = 0;
    do
    {
      v76 = *(const void **)(v74 + 16 * v75);
      if (v76
      {
        v78 = (uint64_t)v77;
        v106 = (void ***)v77;
        v79 = *(std::__shared_weak_count **)(v74 + 16 * v75 + 8);
        v107 = v79;
        if (v79)
        {
          v80 = (unint64_t *)&v79->__shared_owners_;
          do
            v81 = __ldxr(v80);
          while (__stxr(v81 + 1, v80));
        }
      }
      else
      {
        v78 = 0;
        v106 = 0;
        v107 = 0;
      }
      v82 = v102[0];
      v83 = v102[0][2 * v75];
      if (v83
      {
        v104 = v84;
        v85 = (std::__shared_weak_count *)v82[2 * v75 + 1];
        v105 = v85;
        if (v85)
        {
          v86 = (unint64_t *)&v85->__shared_owners_;
          do
            v87 = __ldxr(v86);
          while (__stxr(v87 + 1, v86));
        }
      }
      else
      {
        v85 = 0;
        v84 = 0;
        v104 = 0;
        v105 = 0;
      }
      v41.n128_u64[0] = Espresso::QuantSimEngine::blob_container::copy_from_fp32(v78, (uint64_t)v84 + 160, 1.0);
      if (v85)
      {
        v88 = (unint64_t *)&v85->__shared_owners_;
        do
          v89 = __ldaxr(v88);
        while (__stlxr(v89 - 1, v88));
        if (!v89)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v85->__on_zero_shared)(v85, v41);
          std::__shared_weak_count::__release_weak(v85);
        }
      }
      v90 = v107;
      if (v107)
      {
        v91 = (unint64_t *)&v107->__shared_owners_;
        do
          v92 = __ldaxr(v91);
        while (__stlxr(v92 - 1, v91));
        if (!v92)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v90->__on_zero_shared)(v90, v41);
          std::__shared_weak_count::__release_weak(v90);
        }
      }
      ++v75;
      v74 = *v5;
    }
    while (v75 < (v5[1] - *v5) >> 4);
  }
  if (v71)
  {
    v93 = (unint64_t *)&v71->__shared_owners_;
    do
      v94 = __ldaxr(v93);
    while (__stlxr(v94 - 1, v93));
    if (!v94)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v71->__on_zero_shared)(v71, v41);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  v106 = v102;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v106);
  v102[0] = (void **)v103;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v102);
}

void sub_191626C00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  *(_QWORD *)(v25 - 104) = &a22;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 104));
  a22 = (void **)&a25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a22);
  _Unwind_Resume(a1);
}

void *wrapper_kernel<Espresso::upsample_kernel_cpu,Espresso::upsample_kernel_params>::__set_weight_raw_blob(void *result, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  void *v7;
  int v8;
  uint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::runtime_error *exception;
  unint64_t v15;
  std::runtime_error *v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  std::string v39;
  _QWORD v40[2];
  unsigned __int8 v41;
  _QWORD v42[2];
  unsigned __int8 v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;

  v7 = result;
  v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10)
      return result;
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    v10 = (uint64_t)v7 + 368;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v10, (__int128 *)&v52);
    size = (std::__shared_weak_count *)v52.__r_.__value_.__l.__size_;
    if (v52.__r_.__value_.__l.__size_)
    {
      v12 = (unint64_t *)(v52.__r_.__value_.__l.__size_ + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    if (a5 != 4 * *(int *)(*(_QWORD *)v10 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      v15 = a5;
      v16 = exception;
      std::to_string(&v45, v15);
      v17 = std::string::insert(&v45, 0, "Unexpected size s=");
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      v19 = std::string::append(&v46, "/blob=");
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, 4 * *(int *)(*(_QWORD *)v10 + 8));
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v21 = &v44;
      else
        v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      else
        v22 = v44.__r_.__value_.__l.__size_;
      v23 = std::string::append(&v47, (const std::string::value_type *)v21, v22);
      v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, " @ ");
      if ((v43 & 0x80u) == 0)
        v25 = (const std::string::value_type *)v42;
      else
        v25 = (const std::string::value_type *)v42[0];
      if ((v43 & 0x80u) == 0)
        v26 = v43;
      else
        v26 = v42[1];
      v27 = std::string::append(&v48, v25, v26);
      v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      v29 = std::string::append(&v49, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v40, ":");
      if ((v41 & 0x80u) == 0)
        v31 = (const std::string::value_type *)v40;
      else
        v31 = (const std::string::value_type *)v40[0];
      if ((v41 & 0x80u) == 0)
        v32 = v41;
      else
        v32 = v40[1];
      v33 = std::string::append(&v50, v31, v32);
      v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, 197);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = &v39;
      else
        v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      else
        v36 = v39.__r_.__value_.__l.__size_;
      v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
      v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v16, &v52);
      __cxa_throw(v16, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    return memcpy(*(void **)(*(_QWORD *)v10 + 16), a4, a5);
  }
  return result;
}

void sub_191626FB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  void *v59;
  int v60;
  uint64_t v61;

  if (*(char *)(v61 - 57) < 0)
    operator delete(*(void **)(v61 - 80));
  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v61 - 89) < 0)
    operator delete(*(void **)(v61 - 112));
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v61 - 121) < 0)
    operator delete(*(void **)(v61 - 144));
  if (*(char *)(v61 - 153) < 0)
    operator delete(*(void **)(v61 - 176));
  if (a27 < 0)
    operator delete(a22);
  if (a59 < 0)
    operator delete(a54);
  if (a33 < 0)
    operator delete(a28);
  if (a52 < 0)
    operator delete(a47);
  if (a45 < 0)
    operator delete(a40);
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0)
LABEL_28:
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

BOOL wrapper_kernel<Espresso::upsample_kernel_cpu,Espresso::upsample_kernel_params>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2;

  v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10)
      return 0;
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

void wrapper_kernel<Espresso::upsample_kernel_cpu,Espresso::upsample_kernel_params>::convert_layer_data_to_fp32(_QWORD *a1, char **a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v9;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  const void *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  __int128 v43;
  int64x2_t v44;
  char *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  __int128 v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  int64x2_t v59;
  char *v60;
  _QWORD *v61;
  void *__p;
  void *v63;
  __int128 v64;
  const void *v65;
  std::__shared_weak_count *v66;

  if (a3 != a4)
  {
    v9 = a3;
    v12 = a2 + 2;
    while (1)
    {
      v14 = *(const void **)v9;
      v13 = *(std::__shared_weak_count **)(v9 + 8);
      v65 = *(const void **)v9;
      v66 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
      }
      v17 = operator new(0x118uLL);
      v17[1] = 0;
      v17[2] = 0;
      *v17 = &off_1E2DC1868;
      Espresso::blob_cpu::blob_cpu((uint64_t)(v17 + 3), a1);
      *(_QWORD *)&v64 = v17 + 3;
      *((_QWORD *)&v64 + 1) = v17;
      Espresso::abstract_blob_container::shape((char *)&v58, (uint64_t)v14);
      v56 = 0;
      v57 = 0;
      (*(void (**)(_QWORD *, uint64_t *, uint64_t *))(v17[3] + 16))(v17 + 3, &v58, &v56);
      v18 = v57;
      if (v57)
      {
        v19 = (unint64_t *)&v57->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if (__p)
      {
        v63 = __p;
        operator delete(__p);
      }
      if (v65)
      {
        if (v21)
          break;
      }
      v21 = 0;
      v55 = 0;
      if (a5)
        goto LABEL_21;
LABEL_28:
      v27 = v64;
      if (*((_QWORD *)&v64 + 1))
      {
        v28 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v31 = a2[1];
      v30 = (unint64_t)a2[2];
      if ((unint64_t)v31 >= v30)
      {
        v54 = v27;
        v33 = (v31 - *a2) >> 4;
        if ((unint64_t)(v33 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v34 = v30 - (_QWORD)*a2;
        v35 = v34 >> 3;
        if (v34 >> 3 <= (unint64_t)(v33 + 1))
          v35 = v33 + 1;
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0)
          v36 = 0xFFFFFFFFFFFFFFFLL;
        else
          v36 = v35;
        v61 = v12;
        v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v36);
        v39 = &v37[16 * v33];
        *(_OWORD *)v39 = v54;
        v41 = *a2;
        v40 = a2[1];
        if (v40 == *a2)
        {
          v44 = vdupq_n_s64((unint64_t)v40);
          v42 = &v37[16 * v33];
        }
        else
        {
          v42 = &v37[16 * v33];
          do
          {
            v43 = *((_OWORD *)v40 - 1);
            v40 -= 16;
            *((_OWORD *)v42 - 1) = v43;
            v42 -= 16;
            *(_QWORD *)v40 = 0;
            *((_QWORD *)v40 + 1) = 0;
          }
          while (v40 != v41);
          v44 = *(int64x2_t *)a2;
        }
        v32 = v39 + 16;
        *a2 = v42;
        a2[1] = v39 + 16;
        v59 = v44;
        v45 = a2[2];
        a2[2] = &v37[16 * v38];
        v60 = v45;
        v58 = v44.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v58);
      }
      else
      {
        *(_OWORD *)v31 = v27;
        v32 = v31 + 16;
      }
      a2[1] = v32;
      if (v55)
      {
        v46 = (unint64_t *)&v55->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      v48 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
      if (*((_QWORD *)&v64 + 1))
      {
        v49 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      v51 = v66;
      if (v66)
      {
        v52 = (unint64_t *)&v66->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v9 += 16;
      if (v9 == a4)
        return;
    }
    v55 = v66;
    if (v66)
    {
      v22 = (unint64_t *)&v66->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    if (!a5)
      goto LABEL_28;
LABEL_21:
    if (a6)
    {
      v58 = 0;
      v59.i64[0] = 0;
      (*(void (**)(void *, uint64_t *, uint64_t))(*(_QWORD *)v21 + 40))(v21, &v58, v64 + 160);
      v24 = (std::__shared_weak_count *)v59.i64[0];
      if (v59.i64[0])
      {
        v25 = (unint64_t *)(v59.i64[0] + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v21, v64 + 160, 1.0);
    }
    goto LABEL_28;
  }
}

void sub_191627514(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::upsample_kernel_cpu,Espresso::upsample_kernel_params>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB4B00;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::upsample_kernel_cpu,Espresso::upsample_kernel_params>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB4B00;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::upsample_kernel_cpu,Espresso::upsample_kernel_params>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_12@<Q0>(uint64_t *a1@<X1>, _OWORD *a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  __int128 v7;
  __int128 v8;
  __n128 result;

  v6 = (char *)operator new(0x1A0uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DB5120;
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  v7 = a2[3];
  *((_OWORD *)v6 + 21) = a2[2];
  *((_OWORD *)v6 + 22) = v7;
  *(_OWORD *)(v6 + 364) = *(_OWORD *)((char *)a2 + 60);
  v8 = a2[1];
  *((_OWORD *)v6 + 19) = *a2;
  *((_OWORD *)v6 + 20) = v8;
  *((_QWORD *)v6 + 3) = &off_1E2D53F80;
  *((_OWORD *)v6 + 24) = 0u;
  *((_OWORD *)v6 + 25) = 0u;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v6 + 48, *a1, a1[1]);
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_191627684(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::general_padding_kernel_cpu,Espresso::general_padding_params>::~wrapper_kernel(Espresso::base_kernel *a1)
{
  *(_QWORD *)a1 = &off_1E2D53F80;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 376);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 360);
  Espresso::base_kernel::~base_kernel(a1);
}

{
  *(_QWORD *)a1 = &off_1E2D53F80;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 376);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 360);
  Espresso::base_kernel::~base_kernel(a1);
  JUMPOUT(0x19401CD90);
}

void wrapper_kernel<Espresso::general_padding_kernel_cpu,Espresso::general_padding_params>::__launch(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v5;
  _BOOL4 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  float *v31;
  vDSP_Length v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  __n128 v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  void **v44;
  void **v45;
  void **v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  int *v52;
  float *v53;
  vDSP_Length v54;
  int *v55;
  int v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  vDSP_Length v60;
  vDSP_Length v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  const void *v74;
  void **v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  void **v80;
  const void *v81;
  void *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  _QWORD *v94;
  uint64_t *v95;
  std::__shared_weak_count *v96;
  float __B;
  _QWORD v98[2];
  _QWORD v99[2];
  void **v100[3];
  char *v101[3];
  void *v102;
  std::__shared_weak_count *v103;
  void ***v104;
  std::__shared_weak_count *v105;

  v5 = a3;
  memset(v101, 0, sizeof(v101));
  memset(v100, 0, sizeof(v100));
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)*a3 + 32))(*(_QWORD *)*a3))
    v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)*v5 + 32))(*(_QWORD *)*v5) == 1;
  else
    v7 = 1;
  v8 = (std::__shared_weak_count *)a1[46];
  v99[0] = a1[45];
  v99[1] = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  wrapper_kernel<Espresso::general_padding_kernel_cpu,Espresso::general_padding_params>::convert_layer_data_to_fp32(v99, v101, *a4, a4[1], 1, v7);
  if (v8)
  {
    v11 = (unint64_t *)&v8->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v13 = (std::__shared_weak_count *)a1[46];
  v98[0] = a1[45];
  v98[1] = v13;
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  wrapper_kernel<Espresso::general_padding_kernel_cpu,Espresso::general_padding_params>::convert_layer_data_to_fp32(v98, (char **)v100, *v5, v5[1], 0, 0);
  if (v13)
  {
    v17 = (unint64_t *)&v13->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v19 = *a4;
  if (a4[1] != *a4)
  {
    v20 = 0;
    do
    {
      if (!v7
        && (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v19 + 16 * v20) + 32))(*(_QWORD *)(v19 + 16 * v20))
         || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(*a4 + 16 * v20) + 32))(*(_QWORD *)(*a4 + 16 * v20)) == 1))
      {
        __B = *(float *)(*(_QWORD *)(*a4 + 16 * v20) + 112);
        v21 = &v101[0][16 * v20];
        v104 = (void ***)v22;
        v23 = (std::__shared_weak_count *)*((_QWORD *)v21 + 1);
        v105 = v23;
        if (v23)
        {
          v24 = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
        }
        v26 = *((_QWORD *)v22 + 20);
        v27 = (std::__shared_weak_count *)*((_QWORD *)v22 + 21);
        v102 = (void *)v26;
        v103 = v27;
        if (v27)
        {
          v28 = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldxr(v28);
          while (__stxr(v29 + 1, v28));
        }
        v30 = 0;
        v31 = *(float **)(v26 + 24);
        v32 = *(int *)(v26 + 8);
        v33 = v26 + 12;
        do
        {
          v32 *= *(int *)(v33 + v30);
          v30 += 4;
        }
        while (v30 != 12);
        vDSP_vsmul(v31, 1, &__B, v31, 1, v32);
        if (v27)
        {
          v34 = (unint64_t *)&v27->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        v36 = v105;
        if (v105)
        {
          v37 = (unint64_t *)&v105->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
      }
      ++v20;
      v19 = *a4;
    }
    while (v20 < (a4[1] - *a4) >> 4);
  }
  Espresso::general_padding_kernel_cpu::__launch((uint64_t)a1, v16, (uint64_t *)v100, (uint64_t *)v101);
  v40 = a1[47];
  if (v40)
  {
    v41 = (std::__shared_weak_count *)a1[48];
    v96 = v41;
    if (v41)
    {
      v42 = (unint64_t *)&v41->__shared_owners_;
      do
        v43 = __ldxr(v42);
      while (__stxr(v43 + 1, v42));
    }
    v44 = v100[0];
    if (*v100[0]
    {
      v46 = v45;
      v47 = (std::__shared_weak_count *)v44[1];
      v104 = (void ***)v45;
      v105 = v47;
      if (v47)
      {
        v48 = (unint64_t *)&v47->__shared_owners_;
        do
          v49 = __ldxr(v48);
        while (__stxr(v49 + 1, v48));
      }
    }
    else
    {
      v47 = 0;
      v46 = 0;
      v104 = 0;
      v105 = 0;
    }
    LODWORD(v50) = *(_DWORD *)(v40 + 8);
    v94 = a1;
    v95 = v5;
    v93 = v47;
    if ((_DWORD)v50 == 1)
    {
      v51 = 0;
      v52 = (int *)v46[20];
      v53 = (float *)*((_QWORD *)v52 + 3);
      v54 = v52[2];
      v55 = v52 + 3;
      do
        v54 *= v55[v51++];
      while (v51 != 3);
      vDSP_vsmul(v53, 1, *(const float **)(v40 + 16), v53, 1, v54);
    }
    else
    {
      v56 = *((_DWORD *)v46 + 4);
      if ((_DWORD)v50 != v56)
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v50, v56);
      v57 = *((_DWORD *)v46 + 5);
      if (v57)
      {
        v58 = 0;
        v59 = 0;
        v60 = *((int *)v46 + 2) * (uint64_t)*((int *)v46 + 3);
        v61 = 4 * (int)v50 * v60;
        do
        {
          if ((_DWORD)v50)
          {
            v62 = 0;
            v63 = 0;
            v64 = v58;
            do
            {
              vDSP_vsmul((const float *)(*((_QWORD *)v46[20] + 3) + v64), 1, (const float *)(*(_QWORD *)(v40 + 16) + v62), (float *)(*((_QWORD *)v46[20] + 3) + v64), 1, v60);
              ++v63;
              v50 = *((int *)v46 + 4);
              v62 += 4;
              v64 += 4 * v60;
            }
            while (v63 < v50);
            v57 = *((_DWORD *)v46 + 5);
          }
          ++v59;
          v58 += v61;
        }
        while (v59 < v57);
      }
    }
    a1 = v94;
    v5 = v95;
    if (v93)
    {
      v65 = (unint64_t *)&v93->__shared_owners_;
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 - 1, v65));
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
        std::__shared_weak_count::__release_weak(v93);
      }
    }
    if (v96)
    {
      v67 = (unint64_t *)&v96->__shared_owners_;
      do
        v68 = __ldaxr(v67);
      while (__stlxr(v68 - 1, v67));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
        std::__shared_weak_count::__release_weak(v96);
      }
    }
  }
  v69 = (std::__shared_weak_count *)a1[46];
  if (v69)
  {
    v70 = (unint64_t *)&v69->__shared_owners_;
    do
      v71 = __ldxr(v70);
    while (__stxr(v71 + 1, v70));
  }
  v72 = *v5;
  if (v5[1] != *v5)
  {
    v73 = 0;
    do
    {
      v74 = *(const void **)(v72 + 16 * v73);
      if (v74
      {
        v76 = (uint64_t)v75;
        v104 = (void ***)v75;
        v77 = *(std::__shared_weak_count **)(v72 + 16 * v73 + 8);
        v105 = v77;
        if (v77)
        {
          v78 = (unint64_t *)&v77->__shared_owners_;
          do
            v79 = __ldxr(v78);
          while (__stxr(v79 + 1, v78));
        }
      }
      else
      {
        v76 = 0;
        v104 = 0;
        v105 = 0;
      }
      v80 = v100[0];
      v81 = v100[0][2 * v73];
      if (v81
      {
        v102 = v82;
        v83 = (std::__shared_weak_count *)v80[2 * v73 + 1];
        v103 = v83;
        if (v83)
        {
          v84 = (unint64_t *)&v83->__shared_owners_;
          do
            v85 = __ldxr(v84);
          while (__stxr(v85 + 1, v84));
        }
      }
      else
      {
        v83 = 0;
        v82 = 0;
        v102 = 0;
        v103 = 0;
      }
      v39.n128_u64[0] = Espresso::QuantSimEngine::blob_container::copy_from_fp32(v76, (uint64_t)v82 + 160, 1.0);
      if (v83)
      {
        v86 = (unint64_t *)&v83->__shared_owners_;
        do
          v87 = __ldaxr(v86);
        while (__stlxr(v87 - 1, v86));
        if (!v87)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v83->__on_zero_shared)(v83, v39);
          std::__shared_weak_count::__release_weak(v83);
        }
      }
      v88 = v105;
      if (v105)
      {
        v89 = (unint64_t *)&v105->__shared_owners_;
        do
          v90 = __ldaxr(v89);
        while (__stlxr(v90 - 1, v89));
        if (!v90)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v88->__on_zero_shared)(v88, v39);
          std::__shared_weak_count::__release_weak(v88);
        }
      }
      ++v73;
      v72 = *v5;
    }
    while (v73 < (v5[1] - *v5) >> 4);
  }
  if (v69)
  {
    v91 = (unint64_t *)&v69->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v69->__on_zero_shared)(v69, v39);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  v104 = v100;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v104);
  v100[0] = (void **)v101;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v100);
}

void sub_191627DF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  *(_QWORD *)(v25 - 104) = &a22;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 104));
  a22 = (void **)&a25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a22);
  _Unwind_Resume(a1);
}

void *wrapper_kernel<Espresso::general_padding_kernel_cpu,Espresso::general_padding_params>::__set_weight_raw_blob(void *result, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  void *v7;
  int v8;
  uint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::runtime_error *exception;
  unint64_t v15;
  std::runtime_error *v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  std::string v39;
  _QWORD v40[2];
  unsigned __int8 v41;
  _QWORD v42[2];
  unsigned __int8 v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;

  v7 = result;
  v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10)
      return result;
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    v10 = (uint64_t)v7 + 376;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v10, (__int128 *)&v52);
    size = (std::__shared_weak_count *)v52.__r_.__value_.__l.__size_;
    if (v52.__r_.__value_.__l.__size_)
    {
      v12 = (unint64_t *)(v52.__r_.__value_.__l.__size_ + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    if (a5 != 4 * *(int *)(*(_QWORD *)v10 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      v15 = a5;
      v16 = exception;
      std::to_string(&v45, v15);
      v17 = std::string::insert(&v45, 0, "Unexpected size s=");
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      v19 = std::string::append(&v46, "/blob=");
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, 4 * *(int *)(*(_QWORD *)v10 + 8));
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v21 = &v44;
      else
        v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      else
        v22 = v44.__r_.__value_.__l.__size_;
      v23 = std::string::append(&v47, (const std::string::value_type *)v21, v22);
      v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, " @ ");
      if ((v43 & 0x80u) == 0)
        v25 = (const std::string::value_type *)v42;
      else
        v25 = (const std::string::value_type *)v42[0];
      if ((v43 & 0x80u) == 0)
        v26 = v43;
      else
        v26 = v42[1];
      v27 = std::string::append(&v48, v25, v26);
      v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      v29 = std::string::append(&v49, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v40, ":");
      if ((v41 & 0x80u) == 0)
        v31 = (const std::string::value_type *)v40;
      else
        v31 = (const std::string::value_type *)v40[0];
      if ((v41 & 0x80u) == 0)
        v32 = v41;
      else
        v32 = v40[1];
      v33 = std::string::append(&v50, v31, v32);
      v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, 197);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = &v39;
      else
        v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      else
        v36 = v39.__r_.__value_.__l.__size_;
      v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
      v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v16, &v52);
      __cxa_throw(v16, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    return memcpy(*(void **)(*(_QWORD *)v10 + 16), a4, a5);
  }
  return result;
}

void sub_1916281AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  void *v59;
  int v60;
  uint64_t v61;

  if (*(char *)(v61 - 57) < 0)
    operator delete(*(void **)(v61 - 80));
  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v61 - 89) < 0)
    operator delete(*(void **)(v61 - 112));
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v61 - 121) < 0)
    operator delete(*(void **)(v61 - 144));
  if (*(char *)(v61 - 153) < 0)
    operator delete(*(void **)(v61 - 176));
  if (a27 < 0)
    operator delete(a22);
  if (a59 < 0)
    operator delete(a54);
  if (a33 < 0)
    operator delete(a28);
  if (a52 < 0)
    operator delete(a47);
  if (a45 < 0)
    operator delete(a40);
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0)
LABEL_28:
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

BOOL wrapper_kernel<Espresso::general_padding_kernel_cpu,Espresso::general_padding_params>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2;

  v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10)
      return 0;
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

void wrapper_kernel<Espresso::general_padding_kernel_cpu,Espresso::general_padding_params>::convert_layer_data_to_fp32(_QWORD *a1, char **a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v9;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  const void *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  __int128 v43;
  int64x2_t v44;
  char *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  __int128 v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  int64x2_t v59;
  char *v60;
  _QWORD *v61;
  void *__p;
  void *v63;
  __int128 v64;
  const void *v65;
  std::__shared_weak_count *v66;

  if (a3 != a4)
  {
    v9 = a3;
    v12 = a2 + 2;
    while (1)
    {
      v14 = *(const void **)v9;
      v13 = *(std::__shared_weak_count **)(v9 + 8);
      v65 = *(const void **)v9;
      v66 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
      }
      v17 = operator new(0x118uLL);
      v17[1] = 0;
      v17[2] = 0;
      *v17 = &off_1E2DC1868;
      Espresso::blob_cpu::blob_cpu((uint64_t)(v17 + 3), a1);
      *(_QWORD *)&v64 = v17 + 3;
      *((_QWORD *)&v64 + 1) = v17;
      Espresso::abstract_blob_container::shape((char *)&v58, (uint64_t)v14);
      v56 = 0;
      v57 = 0;
      (*(void (**)(_QWORD *, uint64_t *, uint64_t *))(v17[3] + 16))(v17 + 3, &v58, &v56);
      v18 = v57;
      if (v57)
      {
        v19 = (unint64_t *)&v57->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if (__p)
      {
        v63 = __p;
        operator delete(__p);
      }
      if (v65)
      {
        if (v21)
          break;
      }
      v21 = 0;
      v55 = 0;
      if (a5)
        goto LABEL_21;
LABEL_28:
      v27 = v64;
      if (*((_QWORD *)&v64 + 1))
      {
        v28 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v31 = a2[1];
      v30 = (unint64_t)a2[2];
      if ((unint64_t)v31 >= v30)
      {
        v54 = v27;
        v33 = (v31 - *a2) >> 4;
        if ((unint64_t)(v33 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v34 = v30 - (_QWORD)*a2;
        v35 = v34 >> 3;
        if (v34 >> 3 <= (unint64_t)(v33 + 1))
          v35 = v33 + 1;
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0)
          v36 = 0xFFFFFFFFFFFFFFFLL;
        else
          v36 = v35;
        v61 = v12;
        v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v36);
        v39 = &v37[16 * v33];
        *(_OWORD *)v39 = v54;
        v41 = *a2;
        v40 = a2[1];
        if (v40 == *a2)
        {
          v44 = vdupq_n_s64((unint64_t)v40);
          v42 = &v37[16 * v33];
        }
        else
        {
          v42 = &v37[16 * v33];
          do
          {
            v43 = *((_OWORD *)v40 - 1);
            v40 -= 16;
            *((_OWORD *)v42 - 1) = v43;
            v42 -= 16;
            *(_QWORD *)v40 = 0;
            *((_QWORD *)v40 + 1) = 0;
          }
          while (v40 != v41);
          v44 = *(int64x2_t *)a2;
        }
        v32 = v39 + 16;
        *a2 = v42;
        a2[1] = v39 + 16;
        v59 = v44;
        v45 = a2[2];
        a2[2] = &v37[16 * v38];
        v60 = v45;
        v58 = v44.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v58);
      }
      else
      {
        *(_OWORD *)v31 = v27;
        v32 = v31 + 16;
      }
      a2[1] = v32;
      if (v55)
      {
        v46 = (unint64_t *)&v55->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      v48 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
      if (*((_QWORD *)&v64 + 1))
      {
        v49 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      v51 = v66;
      if (v66)
      {
        v52 = (unint64_t *)&v66->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v9 += 16;
      if (v9 == a4)
        return;
    }
    v55 = v66;
    if (v66)
    {
      v22 = (unint64_t *)&v66->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    if (!a5)
      goto LABEL_28;
LABEL_21:
    if (a6)
    {
      v58 = 0;
      v59.i64[0] = 0;
      (*(void (**)(void *, uint64_t *, uint64_t))(*(_QWORD *)v21 + 40))(v21, &v58, v64 + 160);
      v24 = (std::__shared_weak_count *)v59.i64[0];
      if (v59.i64[0])
      {
        v25 = (unint64_t *)(v59.i64[0] + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v21, v64 + 160, 1.0);
    }
    goto LABEL_28;
  }
}

void sub_191628708(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::general_padding_kernel_cpu,Espresso::general_padding_params>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB5120;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::general_padding_kernel_cpu,Espresso::general_padding_params>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB5120;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::general_padding_kernel_cpu,Espresso::general_padding_params>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_11@<Q0>(uint64_t *a1@<X1>, _OWORD *a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  __int128 v7;
  __int128 v8;
  __n128 result;

  v6 = (char *)operator new(0x1D8uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DB4B38;
  Espresso::kernel_with_uniforms_<Espresso::batchnorm_params,Espresso::abstract_kernel_with_weights_>::kernel_with_uniforms_((uint64_t)(v6 + 24), a1);
  *((_QWORD *)v6 + 51) = 0;
  *((_QWORD *)v6 + 52) = 0;
  *((_QWORD *)v6 + 3) = &off_1E2D519E8;
  *((_QWORD *)v6 + 53) = 0;
  *((_QWORD *)v6 + 54) = 0;
  v7 = a2[3];
  *(_OWORD *)(v6 + 360) = a2[2];
  *(_OWORD *)(v6 + 376) = v7;
  v8 = a2[1];
  *(_OWORD *)(v6 + 328) = *a2;
  *(_OWORD *)(v6 + 344) = v8;
  *(_OWORD *)(v6 + 388) = *(_OWORD *)((char *)a2 + 60);
  *(_OWORD *)(v6 + 440) = 0u;
  *(_OWORD *)(v6 + 456) = 0u;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v6 + 55, *a1, a1[1]);
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_191628884(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::batchnorm_kernel_cpu,Espresso::batchnorm_params>::~wrapper_kernel(Espresso::generic_batchnorm_kernel *a1)
{
  *(_QWORD *)a1 = &off_1E2D519E8;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 432);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 416);
  *(_QWORD *)a1 = &off_1E2D85C18;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 400);
  Espresso::generic_batchnorm_kernel::~generic_batchnorm_kernel(a1);
}

{
  *(_QWORD *)a1 = &off_1E2D519E8;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 432);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 416);
  *(_QWORD *)a1 = &off_1E2D85C18;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 400);
  Espresso::generic_batchnorm_kernel::~generic_batchnorm_kernel(a1);
  JUMPOUT(0x19401CD90);
}

void wrapper_kernel<Espresso::batchnorm_kernel_cpu,Espresso::batchnorm_params>::__launch(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v5;
  _BOOL4 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  float *v31;
  vDSP_Length v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  __n128 v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  void **v44;
  void **v45;
  void **v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  int *v52;
  float *v53;
  vDSP_Length v54;
  int *v55;
  int v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  vDSP_Length v60;
  vDSP_Length v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  const void *v74;
  void **v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  void **v80;
  const void *v81;
  void *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  _QWORD *v94;
  uint64_t *v95;
  std::__shared_weak_count *v96;
  float __B;
  _QWORD v98[2];
  _QWORD v99[2];
  void **v100[3];
  char *v101[3];
  void *v102;
  std::__shared_weak_count *v103;
  void ***v104;
  std::__shared_weak_count *v105;

  v5 = a3;
  memset(v101, 0, sizeof(v101));
  memset(v100, 0, sizeof(v100));
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)*a3 + 32))(*(_QWORD *)*a3))
    v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)*v5 + 32))(*(_QWORD *)*v5) == 1;
  else
    v7 = 1;
  v8 = (std::__shared_weak_count *)a1[53];
  v99[0] = a1[52];
  v99[1] = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  wrapper_kernel<Espresso::batchnorm_kernel_cpu,Espresso::batchnorm_params>::convert_layer_data_to_fp32(v99, v101, *a4, a4[1], 1, v7);
  if (v8)
  {
    v11 = (unint64_t *)&v8->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v13 = (std::__shared_weak_count *)a1[53];
  v98[0] = a1[52];
  v98[1] = v13;
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  wrapper_kernel<Espresso::batchnorm_kernel_cpu,Espresso::batchnorm_params>::convert_layer_data_to_fp32(v98, (char **)v100, *v5, v5[1], 0, 0);
  if (v13)
  {
    v17 = (unint64_t *)&v13->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v19 = *a4;
  if (a4[1] != *a4)
  {
    v20 = 0;
    do
    {
      if (!v7
        && (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v19 + 16 * v20) + 32))(*(_QWORD *)(v19 + 16 * v20))
         || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(*a4 + 16 * v20) + 32))(*(_QWORD *)(*a4 + 16 * v20)) == 1))
      {
        __B = *(float *)(*(_QWORD *)(*a4 + 16 * v20) + 112);
        v21 = &v101[0][16 * v20];
        v104 = (void ***)v22;
        v23 = (std::__shared_weak_count *)*((_QWORD *)v21 + 1);
        v105 = v23;
        if (v23)
        {
          v24 = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
        }
        v26 = *((_QWORD *)v22 + 20);
        v27 = (std::__shared_weak_count *)*((_QWORD *)v22 + 21);
        v102 = (void *)v26;
        v103 = v27;
        if (v27)
        {
          v28 = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldxr(v28);
          while (__stxr(v29 + 1, v28));
        }
        v30 = 0;
        v31 = *(float **)(v26 + 24);
        v32 = *(int *)(v26 + 8);
        v33 = v26 + 12;
        do
        {
          v32 *= *(int *)(v33 + v30);
          v30 += 4;
        }
        while (v30 != 12);
        vDSP_vsmul(v31, 1, &__B, v31, 1, v32);
        if (v27)
        {
          v34 = (unint64_t *)&v27->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        v36 = v105;
        if (v105)
        {
          v37 = (unint64_t *)&v105->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
      }
      ++v20;
      v19 = *a4;
    }
    while (v20 < (a4[1] - *a4) >> 4);
  }
  Espresso::batchnorm_kernel_cpu::__launch((uint64_t)a1, v16, (uint64_t *)v100, (uint64_t *)v101);
  v40 = a1[54];
  if (v40)
  {
    v41 = (std::__shared_weak_count *)a1[55];
    v96 = v41;
    if (v41)
    {
      v42 = (unint64_t *)&v41->__shared_owners_;
      do
        v43 = __ldxr(v42);
      while (__stxr(v43 + 1, v42));
    }
    v44 = v100[0];
    if (*v100[0]
    {
      v46 = v45;
      v47 = (std::__shared_weak_count *)v44[1];
      v104 = (void ***)v45;
      v105 = v47;
      if (v47)
      {
        v48 = (unint64_t *)&v47->__shared_owners_;
        do
          v49 = __ldxr(v48);
        while (__stxr(v49 + 1, v48));
      }
    }
    else
    {
      v47 = 0;
      v46 = 0;
      v104 = 0;
      v105 = 0;
    }
    LODWORD(v50) = *(_DWORD *)(v40 + 8);
    v94 = a1;
    v95 = v5;
    v93 = v47;
    if ((_DWORD)v50 == 1)
    {
      v51 = 0;
      v52 = (int *)v46[20];
      v53 = (float *)*((_QWORD *)v52 + 3);
      v54 = v52[2];
      v55 = v52 + 3;
      do
        v54 *= v55[v51++];
      while (v51 != 3);
      vDSP_vsmul(v53, 1, *(const float **)(v40 + 16), v53, 1, v54);
    }
    else
    {
      v56 = *((_DWORD *)v46 + 4);
      if ((_DWORD)v50 != v56)
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v50, v56);
      v57 = *((_DWORD *)v46 + 5);
      if (v57)
      {
        v58 = 0;
        v59 = 0;
        v60 = *((int *)v46 + 2) * (uint64_t)*((int *)v46 + 3);
        v61 = 4 * (int)v50 * v60;
        do
        {
          if ((_DWORD)v50)
          {
            v62 = 0;
            v63 = 0;
            v64 = v58;
            do
            {
              vDSP_vsmul((const float *)(*((_QWORD *)v46[20] + 3) + v64), 1, (const float *)(*(_QWORD *)(v40 + 16) + v62), (float *)(*((_QWORD *)v46[20] + 3) + v64), 1, v60);
              ++v63;
              v50 = *((int *)v46 + 4);
              v62 += 4;
              v64 += 4 * v60;
            }
            while (v63 < v50);
            v57 = *((_DWORD *)v46 + 5);
          }
          ++v59;
          v58 += v61;
        }
        while (v59 < v57);
      }
    }
    a1 = v94;
    v5 = v95;
    if (v93)
    {
      v65 = (unint64_t *)&v93->__shared_owners_;
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 - 1, v65));
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
        std::__shared_weak_count::__release_weak(v93);
      }
    }
    if (v96)
    {
      v67 = (unint64_t *)&v96->__shared_owners_;
      do
        v68 = __ldaxr(v67);
      while (__stlxr(v68 - 1, v67));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
        std::__shared_weak_count::__release_weak(v96);
      }
    }
  }
  v69 = (std::__shared_weak_count *)a1[53];
  if (v69)
  {
    v70 = (unint64_t *)&v69->__shared_owners_;
    do
      v71 = __ldxr(v70);
    while (__stxr(v71 + 1, v70));
  }
  v72 = *v5;
  if (v5[1] != *v5)
  {
    v73 = 0;
    do
    {
      v74 = *(const void **)(v72 + 16 * v73);
      if (v74
      {
        v76 = (uint64_t)v75;
        v104 = (void ***)v75;
        v77 = *(std::__shared_weak_count **)(v72 + 16 * v73 + 8);
        v105 = v77;
        if (v77)
        {
          v78 = (unint64_t *)&v77->__shared_owners_;
          do
            v79 = __ldxr(v78);
          while (__stxr(v79 + 1, v78));
        }
      }
      else
      {
        v76 = 0;
        v104 = 0;
        v105 = 0;
      }
      v80 = v100[0];
      v81 = v100[0][2 * v73];
      if (v81
      {
        v102 = v82;
        v83 = (std::__shared_weak_count *)v80[2 * v73 + 1];
        v103 = v83;
        if (v83)
        {
          v84 = (unint64_t *)&v83->__shared_owners_;
          do
            v85 = __ldxr(v84);
          while (__stxr(v85 + 1, v84));
        }
      }
      else
      {
        v83 = 0;
        v82 = 0;
        v102 = 0;
        v103 = 0;
      }
      v39.n128_u64[0] = Espresso::QuantSimEngine::blob_container::copy_from_fp32(v76, (uint64_t)v82 + 160, 1.0);
      if (v83)
      {
        v86 = (unint64_t *)&v83->__shared_owners_;
        do
          v87 = __ldaxr(v86);
        while (__stlxr(v87 - 1, v86));
        if (!v87)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v83->__on_zero_shared)(v83, v39);
          std::__shared_weak_count::__release_weak(v83);
        }
      }
      v88 = v105;
      if (v105)
      {
        v89 = (unint64_t *)&v105->__shared_owners_;
        do
          v90 = __ldaxr(v89);
        while (__stlxr(v90 - 1, v89));
        if (!v90)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v88->__on_zero_shared)(v88, v39);
          std::__shared_weak_count::__release_weak(v88);
        }
      }
      ++v73;
      v72 = *v5;
    }
    while (v73 < (v5[1] - *v5) >> 4);
  }
  if (v69)
  {
    v91 = (unint64_t *)&v69->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v69->__on_zero_shared)(v69, v39);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  v104 = v100;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v104);
  v100[0] = (void **)v101;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v100);
}

void sub_19162901C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  *(_QWORD *)(v25 - 104) = &a22;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 104));
  a22 = (void **)&a25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a22);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::batchnorm_kernel_cpu,Espresso::batchnorm_params>::__set_weight_raw_blob(uint64_t a1, uint64_t a2, _QWORD *a3, const void *a4, unint64_t a5, uint64_t *a6)
{
  _QWORD *v8;
  int v10;
  uint64_t v12;
  std::__shared_weak_count *size;
  unint64_t *v14;
  unint64_t v15;
  std::runtime_error *exception;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  std::string v39;
  _QWORD v40[2];
  unsigned __int8 v41;
  _QWORD v42[2];
  unsigned __int8 v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;

  v8 = a3;
  Espresso::generic_batchnorm_kernel::__set_weight_raw_blob(a1, a2, a3, a4, a5, a6);
  v10 = *((char *)v8 + 23);
  if (v10 < 0)
  {
    if (v8[1] != 10)
      return;
    v8 = (_QWORD *)*v8;
  }
  else if (v10 != 10)
  {
    return;
  }
  if (*v8 == 0x6163735F74736F70 && *((_WORD *)v8 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    v12 = a1 + 432;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v12, (__int128 *)&v52);
    size = (std::__shared_weak_count *)v52.__r_.__value_.__l.__size_;
    if (v52.__r_.__value_.__l.__size_)
    {
      v14 = (unint64_t *)(v52.__r_.__value_.__l.__size_ + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    if (a5 != 4 * *(int *)(*(_QWORD *)v12 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v45, a5);
      v17 = std::string::insert(&v45, 0, "Unexpected size s=");
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      v19 = std::string::append(&v46, "/blob=");
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, 4 * *(int *)(*(_QWORD *)v12 + 8));
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v21 = &v44;
      else
        v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      else
        v22 = v44.__r_.__value_.__l.__size_;
      v23 = std::string::append(&v47, (const std::string::value_type *)v21, v22);
      v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, " @ ");
      if ((v43 & 0x80u) == 0)
        v25 = (const std::string::value_type *)v42;
      else
        v25 = (const std::string::value_type *)v42[0];
      if ((v43 & 0x80u) == 0)
        v26 = v43;
      else
        v26 = v42[1];
      v27 = std::string::append(&v48, v25, v26);
      v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      v29 = std::string::append(&v49, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v40, ":");
      if ((v41 & 0x80u) == 0)
        v31 = (const std::string::value_type *)v40;
      else
        v31 = (const std::string::value_type *)v40[0];
      if ((v41 & 0x80u) == 0)
        v32 = v41;
      else
        v32 = v40[1];
      v33 = std::string::append(&v50, v31, v32);
      v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, 197);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = &v39;
      else
        v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      else
        v36 = v39.__r_.__value_.__l.__size_;
      v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
      v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v52);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    memcpy(*(void **)(*(_QWORD *)v12 + 16), a4, a5);
  }
}

void sub_1916293D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  void *v59;
  int v60;
  uint64_t v61;

  if (*(char *)(v61 - 57) < 0)
    operator delete(*(void **)(v61 - 80));
  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v61 - 89) < 0)
    operator delete(*(void **)(v61 - 112));
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v61 - 121) < 0)
    operator delete(*(void **)(v61 - 144));
  if (*(char *)(v61 - 153) < 0)
    operator delete(*(void **)(v61 - 176));
  if (a27 < 0)
    operator delete(a22);
  if (a59 < 0)
    operator delete(a54);
  if (a33 < 0)
    operator delete(a28);
  if (a52 < 0)
    operator delete(a47);
  if (a45 < 0)
    operator delete(a40);
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0)
LABEL_28:
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

BOOL wrapper_kernel<Espresso::batchnorm_kernel_cpu,Espresso::batchnorm_params>::supports_weight_key(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  int v4;

  v2 = a2;
  if (Espresso::generic_batchnorm_kernel::supports_weight_key(a1, a2))
    return 1;
  v4 = *((char *)v2 + 23);
  if (v4 < 0)
  {
    if (v2[1] != 10)
      return 0;
    v2 = (_QWORD *)*v2;
  }
  else if (v4 != 10)
  {
    return 0;
  }
  return *v2 == 0x6163735F74736F70 && *((_WORD *)v2 + 4) == 25964;
}

void wrapper_kernel<Espresso::batchnorm_kernel_cpu,Espresso::batchnorm_params>::convert_layer_data_to_fp32(_QWORD *a1, char **a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v9;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  const void *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  __int128 v43;
  int64x2_t v44;
  char *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  __int128 v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  int64x2_t v59;
  char *v60;
  _QWORD *v61;
  void *__p;
  void *v63;
  __int128 v64;
  const void *v65;
  std::__shared_weak_count *v66;

  if (a3 != a4)
  {
    v9 = a3;
    v12 = a2 + 2;
    while (1)
    {
      v14 = *(const void **)v9;
      v13 = *(std::__shared_weak_count **)(v9 + 8);
      v65 = *(const void **)v9;
      v66 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
      }
      v17 = operator new(0x118uLL);
      v17[1] = 0;
      v17[2] = 0;
      *v17 = &off_1E2DC1868;
      Espresso::blob_cpu::blob_cpu((uint64_t)(v17 + 3), a1);
      *(_QWORD *)&v64 = v17 + 3;
      *((_QWORD *)&v64 + 1) = v17;
      Espresso::abstract_blob_container::shape((char *)&v58, (uint64_t)v14);
      v56 = 0;
      v57 = 0;
      (*(void (**)(_QWORD *, uint64_t *, uint64_t *))(v17[3] + 16))(v17 + 3, &v58, &v56);
      v18 = v57;
      if (v57)
      {
        v19 = (unint64_t *)&v57->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if (__p)
      {
        v63 = __p;
        operator delete(__p);
      }
      if (v65)
      {
        if (v21)
          break;
      }
      v21 = 0;
      v55 = 0;
      if (a5)
        goto LABEL_21;
LABEL_28:
      v27 = v64;
      if (*((_QWORD *)&v64 + 1))
      {
        v28 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v31 = a2[1];
      v30 = (unint64_t)a2[2];
      if ((unint64_t)v31 >= v30)
      {
        v54 = v27;
        v33 = (v31 - *a2) >> 4;
        if ((unint64_t)(v33 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v34 = v30 - (_QWORD)*a2;
        v35 = v34 >> 3;
        if (v34 >> 3 <= (unint64_t)(v33 + 1))
          v35 = v33 + 1;
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0)
          v36 = 0xFFFFFFFFFFFFFFFLL;
        else
          v36 = v35;
        v61 = v12;
        v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v36);
        v39 = &v37[16 * v33];
        *(_OWORD *)v39 = v54;
        v41 = *a2;
        v40 = a2[1];
        if (v40 == *a2)
        {
          v44 = vdupq_n_s64((unint64_t)v40);
          v42 = &v37[16 * v33];
        }
        else
        {
          v42 = &v37[16 * v33];
          do
          {
            v43 = *((_OWORD *)v40 - 1);
            v40 -= 16;
            *((_OWORD *)v42 - 1) = v43;
            v42 -= 16;
            *(_QWORD *)v40 = 0;
            *((_QWORD *)v40 + 1) = 0;
          }
          while (v40 != v41);
          v44 = *(int64x2_t *)a2;
        }
        v32 = v39 + 16;
        *a2 = v42;
        a2[1] = v39 + 16;
        v59 = v44;
        v45 = a2[2];
        a2[2] = &v37[16 * v38];
        v60 = v45;
        v58 = v44.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v58);
      }
      else
      {
        *(_OWORD *)v31 = v27;
        v32 = v31 + 16;
      }
      a2[1] = v32;
      if (v55)
      {
        v46 = (unint64_t *)&v55->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      v48 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
      if (*((_QWORD *)&v64 + 1))
      {
        v49 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      v51 = v66;
      if (v66)
      {
        v52 = (unint64_t *)&v66->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v9 += 16;
      if (v9 == a4)
        return;
    }
    v55 = v66;
    if (v66)
    {
      v22 = (unint64_t *)&v66->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    if (!a5)
      goto LABEL_28;
LABEL_21:
    if (a6)
    {
      v58 = 0;
      v59.i64[0] = 0;
      (*(void (**)(void *, uint64_t *, uint64_t))(*(_QWORD *)v21 + 40))(v21, &v58, v64 + 160);
      v24 = (std::__shared_weak_count *)v59.i64[0];
      if (v59.i64[0])
      {
        v25 = (unint64_t *)(v59.i64[0] + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v21, v64 + 160, 1.0);
    }
    goto LABEL_28;
  }
}

void sub_19162995C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::batchnorm_kernel_cpu,Espresso::batchnorm_params>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB4B38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::batchnorm_kernel_cpu,Espresso::batchnorm_params>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB4B38;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::batchnorm_kernel_cpu,Espresso::batchnorm_params>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_10@<Q0>(uint64_t *a1@<X1>, __int128 *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  __n128 result;

  v6 = operator new(0x1E0uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DB4C88;
  Espresso::activation_kernel_cpu::activation_kernel_cpu((uint64_t)(v6 + 3), a1, v7, a2);
  v6[3] = &off_1E2D52250;
  *((_OWORD *)v6 + 28) = 0u;
  *((_OWORD *)v6 + 29) = 0u;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v6 + 56, *a1, a1[1]);
  result.n128_u64[0] = (unint64_t)(v6 + 3);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_191629AB4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::activation_kernel_cpu,Espresso::activation_params>::~wrapper_kernel(Espresso::generic_activation_kernel *a1)
{
  *(_QWORD *)a1 = &off_1E2D52250;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 440);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 424);
  *(_QWORD *)a1 = &off_1E2D89298;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 408);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 392);
  Espresso::generic_activation_kernel::~generic_activation_kernel(a1);
}

{
  *(_QWORD *)a1 = &off_1E2D52250;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 440);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 424);
  *(_QWORD *)a1 = &off_1E2D89298;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 408);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 392);
  Espresso::generic_activation_kernel::~generic_activation_kernel(a1);
  JUMPOUT(0x19401CD90);
}

void wrapper_kernel<Espresso::activation_kernel_cpu,Espresso::activation_params>::__launch(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v5;
  _BOOL4 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  float *v31;
  vDSP_Length v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  __n128 v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  void **v44;
  void **v45;
  void **v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  int *v52;
  float *v53;
  vDSP_Length v54;
  int *v55;
  int v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  vDSP_Length v60;
  vDSP_Length v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  const void *v74;
  void **v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  void **v80;
  const void *v81;
  void *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  _QWORD *v94;
  uint64_t *v95;
  std::__shared_weak_count *v96;
  float __B;
  _QWORD v98[2];
  _QWORD v99[2];
  void **v100[3];
  char *v101[3];
  void *v102;
  std::__shared_weak_count *v103;
  void ***v104;
  std::__shared_weak_count *v105;

  v5 = a3;
  memset(v101, 0, sizeof(v101));
  memset(v100, 0, sizeof(v100));
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)*a3 + 32))(*(_QWORD *)*a3))
    v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)*v5 + 32))(*(_QWORD *)*v5) == 1;
  else
    v7 = 1;
  v8 = (std::__shared_weak_count *)a1[54];
  v99[0] = a1[53];
  v99[1] = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  wrapper_kernel<Espresso::activation_kernel_cpu,Espresso::activation_params>::convert_layer_data_to_fp32(v99, v101, *a4, a4[1], 1, v7);
  if (v8)
  {
    v11 = (unint64_t *)&v8->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v13 = (std::__shared_weak_count *)a1[54];
  v98[0] = a1[53];
  v98[1] = v13;
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  wrapper_kernel<Espresso::activation_kernel_cpu,Espresso::activation_params>::convert_layer_data_to_fp32(v98, (char **)v100, *v5, v5[1], 0, 0);
  if (v13)
  {
    v17 = (unint64_t *)&v13->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v19 = *a4;
  if (a4[1] != *a4)
  {
    v20 = 0;
    do
    {
      if (!v7
        && (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v19 + 16 * v20) + 32))(*(_QWORD *)(v19 + 16 * v20))
         || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(*a4 + 16 * v20) + 32))(*(_QWORD *)(*a4 + 16 * v20)) == 1))
      {
        __B = *(float *)(*(_QWORD *)(*a4 + 16 * v20) + 112);
        v21 = &v101[0][16 * v20];
        v104 = (void ***)v22;
        v23 = (std::__shared_weak_count *)*((_QWORD *)v21 + 1);
        v105 = v23;
        if (v23)
        {
          v24 = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
        }
        v26 = *((_QWORD *)v22 + 20);
        v27 = (std::__shared_weak_count *)*((_QWORD *)v22 + 21);
        v102 = (void *)v26;
        v103 = v27;
        if (v27)
        {
          v28 = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldxr(v28);
          while (__stxr(v29 + 1, v28));
        }
        v30 = 0;
        v31 = *(float **)(v26 + 24);
        v32 = *(int *)(v26 + 8);
        v33 = v26 + 12;
        do
        {
          v32 *= *(int *)(v33 + v30);
          v30 += 4;
        }
        while (v30 != 12);
        vDSP_vsmul(v31, 1, &__B, v31, 1, v32);
        if (v27)
        {
          v34 = (unint64_t *)&v27->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        v36 = v105;
        if (v105)
        {
          v37 = (unint64_t *)&v105->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
      }
      ++v20;
      v19 = *a4;
    }
    while (v20 < (a4[1] - *a4) >> 4);
  }
  Espresso::activation_kernel_cpu::__launch((uint64_t)a1, v16, (uint64_t *)v100, (uint64_t *)v101);
  v40 = a1[55];
  if (v40)
  {
    v41 = (std::__shared_weak_count *)a1[56];
    v96 = v41;
    if (v41)
    {
      v42 = (unint64_t *)&v41->__shared_owners_;
      do
        v43 = __ldxr(v42);
      while (__stxr(v43 + 1, v42));
    }
    v44 = v100[0];
    if (*v100[0]
    {
      v46 = v45;
      v47 = (std::__shared_weak_count *)v44[1];
      v104 = (void ***)v45;
      v105 = v47;
      if (v47)
      {
        v48 = (unint64_t *)&v47->__shared_owners_;
        do
          v49 = __ldxr(v48);
        while (__stxr(v49 + 1, v48));
      }
    }
    else
    {
      v47 = 0;
      v46 = 0;
      v104 = 0;
      v105 = 0;
    }
    LODWORD(v50) = *(_DWORD *)(v40 + 8);
    v94 = a1;
    v95 = v5;
    v93 = v47;
    if ((_DWORD)v50 == 1)
    {
      v51 = 0;
      v52 = (int *)v46[20];
      v53 = (float *)*((_QWORD *)v52 + 3);
      v54 = v52[2];
      v55 = v52 + 3;
      do
        v54 *= v55[v51++];
      while (v51 != 3);
      vDSP_vsmul(v53, 1, *(const float **)(v40 + 16), v53, 1, v54);
    }
    else
    {
      v56 = *((_DWORD *)v46 + 4);
      if ((_DWORD)v50 != v56)
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v50, v56);
      v57 = *((_DWORD *)v46 + 5);
      if (v57)
      {
        v58 = 0;
        v59 = 0;
        v60 = *((int *)v46 + 2) * (uint64_t)*((int *)v46 + 3);
        v61 = 4 * (int)v50 * v60;
        do
        {
          if ((_DWORD)v50)
          {
            v62 = 0;
            v63 = 0;
            v64 = v58;
            do
            {
              vDSP_vsmul((const float *)(*((_QWORD *)v46[20] + 3) + v64), 1, (const float *)(*(_QWORD *)(v40 + 16) + v62), (float *)(*((_QWORD *)v46[20] + 3) + v64), 1, v60);
              ++v63;
              v50 = *((int *)v46 + 4);
              v62 += 4;
              v64 += 4 * v60;
            }
            while (v63 < v50);
            v57 = *((_DWORD *)v46 + 5);
          }
          ++v59;
          v58 += v61;
        }
        while (v59 < v57);
      }
    }
    a1 = v94;
    v5 = v95;
    if (v93)
    {
      v65 = (unint64_t *)&v93->__shared_owners_;
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 - 1, v65));
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
        std::__shared_weak_count::__release_weak(v93);
      }
    }
    if (v96)
    {
      v67 = (unint64_t *)&v96->__shared_owners_;
      do
        v68 = __ldaxr(v67);
      while (__stlxr(v68 - 1, v67));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
        std::__shared_weak_count::__release_weak(v96);
      }
    }
  }
  v69 = (std::__shared_weak_count *)a1[54];
  if (v69)
  {
    v70 = (unint64_t *)&v69->__shared_owners_;
    do
      v71 = __ldxr(v70);
    while (__stxr(v71 + 1, v70));
  }
  v72 = *v5;
  if (v5[1] != *v5)
  {
    v73 = 0;
    do
    {
      v74 = *(const void **)(v72 + 16 * v73);
      if (v74
      {
        v76 = (uint64_t)v75;
        v104 = (void ***)v75;
        v77 = *(std::__shared_weak_count **)(v72 + 16 * v73 + 8);
        v105 = v77;
        if (v77)
        {
          v78 = (unint64_t *)&v77->__shared_owners_;
          do
            v79 = __ldxr(v78);
          while (__stxr(v79 + 1, v78));
        }
      }
      else
      {
        v76 = 0;
        v104 = 0;
        v105 = 0;
      }
      v80 = v100[0];
      v81 = v100[0][2 * v73];
      if (v81
      {
        v102 = v82;
        v83 = (std::__shared_weak_count *)v80[2 * v73 + 1];
        v103 = v83;
        if (v83)
        {
          v84 = (unint64_t *)&v83->__shared_owners_;
          do
            v85 = __ldxr(v84);
          while (__stxr(v85 + 1, v84));
        }
      }
      else
      {
        v83 = 0;
        v82 = 0;
        v102 = 0;
        v103 = 0;
      }
      v39.n128_u64[0] = Espresso::QuantSimEngine::blob_container::copy_from_fp32(v76, (uint64_t)v82 + 160, 1.0);
      if (v83)
      {
        v86 = (unint64_t *)&v83->__shared_owners_;
        do
          v87 = __ldaxr(v86);
        while (__stlxr(v87 - 1, v86));
        if (!v87)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v83->__on_zero_shared)(v83, v39);
          std::__shared_weak_count::__release_weak(v83);
        }
      }
      v88 = v105;
      if (v105)
      {
        v89 = (unint64_t *)&v105->__shared_owners_;
        do
          v90 = __ldaxr(v89);
        while (__stlxr(v90 - 1, v89));
        if (!v90)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v88->__on_zero_shared)(v88, v39);
          std::__shared_weak_count::__release_weak(v88);
        }
      }
      ++v73;
      v72 = *v5;
    }
    while (v73 < (v5[1] - *v5) >> 4);
  }
  if (v69)
  {
    v91 = (unint64_t *)&v69->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v69->__on_zero_shared)(v69, v39);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  v104 = v100;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v104);
  v100[0] = (void **)v101;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v100);
}

void sub_19162A25C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  *(_QWORD *)(v25 - 104) = &a22;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 104));
  a22 = (void **)&a25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a22);
  _Unwind_Resume(a1);
}

void *wrapper_kernel<Espresso::activation_kernel_cpu,Espresso::activation_params>::__set_weight_raw_blob(void *a1, uint64_t a2, uint64_t *a3, const void *a4, unint64_t a5)
{
  uint64_t *v7;
  void *result;
  int v10;
  uint64_t v12;
  std::__shared_weak_count *size;
  unint64_t *v14;
  unint64_t v15;
  std::runtime_error *exception;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  std::string v39;
  _QWORD v40[2];
  unsigned __int8 v41;
  _QWORD v42[2];
  unsigned __int8 v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;

  v7 = a3;
  result = Espresso::generic_activation_kernel::__set_weight_raw_blob(a1, a2, a3, a4, a5);
  v10 = *((char *)v7 + 23);
  if (v10 < 0)
  {
    if (v7[1] != 10)
      return result;
    v7 = (uint64_t *)*v7;
  }
  else if (v10 != 10)
  {
    return result;
  }
  if (*v7 == 0x6163735F74736F70 && *((_WORD *)v7 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    v12 = (uint64_t)a1 + 440;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v12, (__int128 *)&v52);
    size = (std::__shared_weak_count *)v52.__r_.__value_.__l.__size_;
    if (v52.__r_.__value_.__l.__size_)
    {
      v14 = (unint64_t *)(v52.__r_.__value_.__l.__size_ + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    if (a5 != 4 * *(int *)(*(_QWORD *)v12 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v45, a5);
      v17 = std::string::insert(&v45, 0, "Unexpected size s=");
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      v19 = std::string::append(&v46, "/blob=");
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, 4 * *(int *)(*(_QWORD *)v12 + 8));
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v21 = &v44;
      else
        v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      else
        v22 = v44.__r_.__value_.__l.__size_;
      v23 = std::string::append(&v47, (const std::string::value_type *)v21, v22);
      v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, " @ ");
      if ((v43 & 0x80u) == 0)
        v25 = (const std::string::value_type *)v42;
      else
        v25 = (const std::string::value_type *)v42[0];
      if ((v43 & 0x80u) == 0)
        v26 = v43;
      else
        v26 = v42[1];
      v27 = std::string::append(&v48, v25, v26);
      v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      v29 = std::string::append(&v49, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v40, ":");
      if ((v41 & 0x80u) == 0)
        v31 = (const std::string::value_type *)v40;
      else
        v31 = (const std::string::value_type *)v40[0];
      if ((v41 & 0x80u) == 0)
        v32 = v41;
      else
        v32 = v40[1];
      v33 = std::string::append(&v50, v31, v32);
      v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, 197);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = &v39;
      else
        v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      else
        v36 = v39.__r_.__value_.__l.__size_;
      v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
      v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v52);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    return memcpy(*(void **)(*(_QWORD *)v12 + 16), a4, a5);
  }
  return result;
}

void sub_19162A618(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  void *v59;
  int v60;
  uint64_t v61;

  if (*(char *)(v61 - 57) < 0)
    operator delete(*(void **)(v61 - 80));
  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v61 - 89) < 0)
    operator delete(*(void **)(v61 - 112));
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v61 - 121) < 0)
    operator delete(*(void **)(v61 - 144));
  if (*(char *)(v61 - 153) < 0)
    operator delete(*(void **)(v61 - 176));
  if (a27 < 0)
    operator delete(a22);
  if (a59 < 0)
    operator delete(a54);
  if (a33 < 0)
    operator delete(a28);
  if (a52 < 0)
    operator delete(a47);
  if (a45 < 0)
    operator delete(a40);
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0)
LABEL_28:
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

BOOL wrapper_kernel<Espresso::activation_kernel_cpu,Espresso::activation_params>::supports_weight_key(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  int v4;

  v2 = a2;
  if (Espresso::generic_activation_kernel::supports_weight_key(a1, a2))
    return 1;
  v4 = *((char *)v2 + 23);
  if (v4 < 0)
  {
    if (v2[1] != 10)
      return 0;
    v2 = (_QWORD *)*v2;
  }
  else if (v4 != 10)
  {
    return 0;
  }
  return *v2 == 0x6163735F74736F70 && *((_WORD *)v2 + 4) == 25964;
}

void wrapper_kernel<Espresso::activation_kernel_cpu,Espresso::activation_params>::convert_layer_data_to_fp32(_QWORD *a1, char **a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v9;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  const void *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  __int128 v43;
  int64x2_t v44;
  char *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  __int128 v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  int64x2_t v59;
  char *v60;
  _QWORD *v61;
  void *__p;
  void *v63;
  __int128 v64;
  const void *v65;
  std::__shared_weak_count *v66;

  if (a3 != a4)
  {
    v9 = a3;
    v12 = a2 + 2;
    while (1)
    {
      v14 = *(const void **)v9;
      v13 = *(std::__shared_weak_count **)(v9 + 8);
      v65 = *(const void **)v9;
      v66 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
      }
      v17 = operator new(0x118uLL);
      v17[1] = 0;
      v17[2] = 0;
      *v17 = &off_1E2DC1868;
      Espresso::blob_cpu::blob_cpu((uint64_t)(v17 + 3), a1);
      *(_QWORD *)&v64 = v17 + 3;
      *((_QWORD *)&v64 + 1) = v17;
      Espresso::abstract_blob_container::shape((char *)&v58, (uint64_t)v14);
      v56 = 0;
      v57 = 0;
      (*(void (**)(_QWORD *, uint64_t *, uint64_t *))(v17[3] + 16))(v17 + 3, &v58, &v56);
      v18 = v57;
      if (v57)
      {
        v19 = (unint64_t *)&v57->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if (__p)
      {
        v63 = __p;
        operator delete(__p);
      }
      if (v65)
      {
        if (v21)
          break;
      }
      v21 = 0;
      v55 = 0;
      if (a5)
        goto LABEL_21;
LABEL_28:
      v27 = v64;
      if (*((_QWORD *)&v64 + 1))
      {
        v28 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v31 = a2[1];
      v30 = (unint64_t)a2[2];
      if ((unint64_t)v31 >= v30)
      {
        v54 = v27;
        v33 = (v31 - *a2) >> 4;
        if ((unint64_t)(v33 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v34 = v30 - (_QWORD)*a2;
        v35 = v34 >> 3;
        if (v34 >> 3 <= (unint64_t)(v33 + 1))
          v35 = v33 + 1;
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0)
          v36 = 0xFFFFFFFFFFFFFFFLL;
        else
          v36 = v35;
        v61 = v12;
        v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v36);
        v39 = &v37[16 * v33];
        *(_OWORD *)v39 = v54;
        v41 = *a2;
        v40 = a2[1];
        if (v40 == *a2)
        {
          v44 = vdupq_n_s64((unint64_t)v40);
          v42 = &v37[16 * v33];
        }
        else
        {
          v42 = &v37[16 * v33];
          do
          {
            v43 = *((_OWORD *)v40 - 1);
            v40 -= 16;
            *((_OWORD *)v42 - 1) = v43;
            v42 -= 16;
            *(_QWORD *)v40 = 0;
            *((_QWORD *)v40 + 1) = 0;
          }
          while (v40 != v41);
          v44 = *(int64x2_t *)a2;
        }
        v32 = v39 + 16;
        *a2 = v42;
        a2[1] = v39 + 16;
        v59 = v44;
        v45 = a2[2];
        a2[2] = &v37[16 * v38];
        v60 = v45;
        v58 = v44.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v58);
      }
      else
      {
        *(_OWORD *)v31 = v27;
        v32 = v31 + 16;
      }
      a2[1] = v32;
      if (v55)
      {
        v46 = (unint64_t *)&v55->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      v48 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
      if (*((_QWORD *)&v64 + 1))
      {
        v49 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      v51 = v66;
      if (v66)
      {
        v52 = (unint64_t *)&v66->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v9 += 16;
      if (v9 == a4)
        return;
    }
    v55 = v66;
    if (v66)
    {
      v22 = (unint64_t *)&v66->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    if (!a5)
      goto LABEL_28;
LABEL_21:
    if (a6)
    {
      v58 = 0;
      v59.i64[0] = 0;
      (*(void (**)(void *, uint64_t *, uint64_t))(*(_QWORD *)v21 + 40))(v21, &v58, v64 + 160);
      v24 = (std::__shared_weak_count *)v59.i64[0];
      if (v59.i64[0])
      {
        v25 = (unint64_t *)(v59.i64[0] + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v21, v64 + 160, 1.0);
    }
    goto LABEL_28;
  }
}

void sub_19162AB9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::activation_kernel_cpu,Espresso::activation_params>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB4C88;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::activation_kernel_cpu,Espresso::activation_params>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB4C88;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::activation_kernel_cpu,Espresso::activation_params>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_9@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  __int128 v7;
  __n128 result;

  v6 = (char *)operator new(0x178uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DB49B0;
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  v7 = *(_OWORD *)(a2 + 16);
  *((_OWORD *)v6 + 19) = *(_OWORD *)a2;
  *((_OWORD *)v6 + 20) = v7;
  *((_QWORD *)v6 + 42) = *(_QWORD *)(a2 + 32);
  *((_QWORD *)v6 + 3) = &off_1E2D51080;
  *(_OWORD *)(v6 + 344) = 0u;
  *(_OWORD *)(v6 + 360) = 0u;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v6 + 43, *a1, a1[1]);
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19162AD04(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::reshape_kernel_cpu,Espresso::reshape_params>::~wrapper_kernel(Espresso::base_kernel *a1)
{
  *(_QWORD *)a1 = &off_1E2D51080;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 336);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 320);
  Espresso::base_kernel::~base_kernel(a1);
}

{
  *(_QWORD *)a1 = &off_1E2D51080;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 336);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 320);
  Espresso::base_kernel::~base_kernel(a1);
  JUMPOUT(0x19401CD90);
}

void wrapper_kernel<Espresso::reshape_kernel_cpu,Espresso::reshape_params>::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  _BOOL4 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  float *v31;
  vDSP_Length v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  __n128 v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  void **v45;
  void **v46;
  void **v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  int *v53;
  float *v54;
  vDSP_Length v55;
  int *v56;
  int v57;
  int v58;
  uint64_t v59;
  unint64_t v60;
  vDSP_Length v61;
  vDSP_Length v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  const void *v75;
  void **v76;
  uint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  void **v81;
  const void *v82;
  void *v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  uint64_t v95;
  std::__shared_weak_count *v96;
  float __B;
  _QWORD v98[2];
  _QWORD v99[2];
  void **v100[3];
  char *v101[3];
  void *v102;
  std::__shared_weak_count *v103;
  void ***v104;
  std::__shared_weak_count *v105;

  memset(v101, 0, sizeof(v101));
  memset(v100, 0, sizeof(v100));
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)*a3 + 32))(*(_QWORD *)*a3))
    v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)*a3 + 32))(*(_QWORD *)*a3) == 1;
  else
    v8 = 1;
  v9 = *(std::__shared_weak_count **)(a1 + 328);
  v99[0] = *(_QWORD *)(a1 + 320);
  v99[1] = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  wrapper_kernel<Espresso::reshape_kernel_cpu,Espresso::reshape_params>::convert_layer_data_to_fp32(v99, v101, *a4, a4[1], 1, v8);
  if (v9)
  {
    v12 = (unint64_t *)&v9->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v14 = *(std::__shared_weak_count **)(a1 + 328);
  v98[0] = *(_QWORD *)(a1 + 320);
  v98[1] = v14;
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  wrapper_kernel<Espresso::reshape_kernel_cpu,Espresso::reshape_params>::convert_layer_data_to_fp32(v98, (char **)v100, *a3, a3[1], 0, 0);
  if (v14)
  {
    v17 = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v95 = a1;
  v19 = *a4;
  if (a4[1] != *a4)
  {
    v20 = 0;
    do
    {
      if (!v8
        && (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v19 + 16 * v20) + 32))(*(_QWORD *)(v19 + 16 * v20))
         || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(*a4 + 16 * v20) + 32))(*(_QWORD *)(*a4 + 16 * v20)) == 1))
      {
        __B = *(float *)(*(_QWORD *)(*a4 + 16 * v20) + 112);
        v21 = &v101[0][16 * v20];
        v104 = (void ***)v22;
        v23 = (std::__shared_weak_count *)*((_QWORD *)v21 + 1);
        v105 = v23;
        if (v23)
        {
          v24 = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
        }
        v26 = *((_QWORD *)v22 + 20);
        v27 = (std::__shared_weak_count *)*((_QWORD *)v22 + 21);
        v102 = (void *)v26;
        v103 = v27;
        if (v27)
        {
          v28 = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldxr(v28);
          while (__stxr(v29 + 1, v28));
        }
        v30 = 0;
        v31 = *(float **)(v26 + 24);
        v32 = *(int *)(v26 + 8);
        v33 = v26 + 12;
        do
        {
          v32 *= *(int *)(v33 + v30);
          v30 += 4;
        }
        while (v30 != 12);
        vDSP_vsmul(v31, 1, &__B, v31, 1, v32);
        if (v27)
        {
          v34 = (unint64_t *)&v27->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        v36 = v105;
        if (v105)
        {
          v37 = (unint64_t *)&v105->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
      }
      ++v20;
      v19 = *a4;
    }
    while (v20 < (a4[1] - *a4) >> 4);
  }
  v39 = v95;
  Espresso::reshape_kernel_cpu::__launch(v95, a2, (uint64_t **)v100, (uint64_t **)v101);
  v41 = *(_QWORD *)(v95 + 336);
  if (v41)
  {
    v42 = *(std::__shared_weak_count **)(v95 + 344);
    v96 = v42;
    if (v42)
    {
      v43 = (unint64_t *)&v42->__shared_owners_;
      do
        v44 = __ldxr(v43);
      while (__stxr(v44 + 1, v43));
    }
    v45 = v100[0];
    if (*v100[0]
    {
      v47 = v46;
      v48 = (std::__shared_weak_count *)v45[1];
      v104 = (void ***)v46;
      v105 = v48;
      if (v48)
      {
        v49 = (unint64_t *)&v48->__shared_owners_;
        do
          v50 = __ldxr(v49);
        while (__stxr(v50 + 1, v49));
      }
    }
    else
    {
      v48 = 0;
      v47 = 0;
      v104 = 0;
      v105 = 0;
    }
    LODWORD(v51) = *(_DWORD *)(v41 + 8);
    v94 = v48;
    if ((_DWORD)v51 == 1)
    {
      v52 = 0;
      v53 = (int *)v47[20];
      v54 = (float *)*((_QWORD *)v53 + 3);
      v55 = v53[2];
      v56 = v53 + 3;
      do
        v55 *= v56[v52++];
      while (v52 != 3);
      vDSP_vsmul(v54, 1, *(const float **)(v41 + 16), v54, 1, v55);
    }
    else
    {
      v57 = *((_DWORD *)v47 + 4);
      if ((_DWORD)v51 != v57)
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v51, v57);
      v58 = *((_DWORD *)v47 + 5);
      if (v58)
      {
        v59 = 0;
        v60 = 0;
        v61 = *((int *)v47 + 2) * (uint64_t)*((int *)v47 + 3);
        v62 = 4 * (int)v51 * v61;
        do
        {
          if ((_DWORD)v51)
          {
            v63 = 0;
            v64 = 0;
            v65 = v59;
            do
            {
              vDSP_vsmul((const float *)(*((_QWORD *)v47[20] + 3) + v65), 1, (const float *)(*(_QWORD *)(v41 + 16) + v63), (float *)(*((_QWORD *)v47[20] + 3) + v65), 1, v61);
              ++v64;
              v51 = *((int *)v47 + 4);
              v63 += 4;
              v65 += 4 * v61;
            }
            while (v64 < v51);
            v58 = *((_DWORD *)v47 + 5);
          }
          ++v60;
          v59 += v62;
        }
        while (v60 < v58);
      }
    }
    v39 = v95;
    if (v94)
    {
      v66 = (unint64_t *)&v94->__shared_owners_;
      do
        v67 = __ldaxr(v66);
      while (__stlxr(v67 - 1, v66));
      if (!v67)
      {
        ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
        std::__shared_weak_count::__release_weak(v94);
      }
    }
    if (v96)
    {
      v68 = (unint64_t *)&v96->__shared_owners_;
      do
        v69 = __ldaxr(v68);
      while (__stlxr(v69 - 1, v68));
      if (!v69)
      {
        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
        std::__shared_weak_count::__release_weak(v96);
      }
    }
  }
  v70 = *(std::__shared_weak_count **)(v39 + 328);
  if (v70)
  {
    v71 = (unint64_t *)&v70->__shared_owners_;
    do
      v72 = __ldxr(v71);
    while (__stxr(v72 + 1, v71));
  }
  v73 = *a3;
  if (a3[1] != *a3)
  {
    v74 = 0;
    do
    {
      v75 = *(const void **)(v73 + 16 * v74);
      if (v75
      {
        v77 = (uint64_t)v76;
        v104 = (void ***)v76;
        v78 = *(std::__shared_weak_count **)(v73 + 16 * v74 + 8);
        v105 = v78;
        if (v78)
        {
          v79 = (unint64_t *)&v78->__shared_owners_;
          do
            v80 = __ldxr(v79);
          while (__stxr(v80 + 1, v79));
        }
      }
      else
      {
        v77 = 0;
        v104 = 0;
        v105 = 0;
      }
      v81 = v100[0];
      v82 = v100[0][2 * v74];
      if (v82
      {
        v102 = v83;
        v84 = (std::__shared_weak_count *)v81[2 * v74 + 1];
        v103 = v84;
        if (v84)
        {
          v85 = (unint64_t *)&v84->__shared_owners_;
          do
            v86 = __ldxr(v85);
          while (__stxr(v86 + 1, v85));
        }
      }
      else
      {
        v84 = 0;
        v83 = 0;
        v102 = 0;
        v103 = 0;
      }
      v40.n128_u64[0] = Espresso::QuantSimEngine::blob_container::copy_from_fp32(v77, (uint64_t)v83 + 160, 1.0);
      if (v84)
      {
        v87 = (unint64_t *)&v84->__shared_owners_;
        do
          v88 = __ldaxr(v87);
        while (__stlxr(v88 - 1, v87));
        if (!v88)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v84->__on_zero_shared)(v84, v40);
          std::__shared_weak_count::__release_weak(v84);
        }
      }
      v89 = v105;
      if (v105)
      {
        v90 = (unint64_t *)&v105->__shared_owners_;
        do
          v91 = __ldaxr(v90);
        while (__stlxr(v91 - 1, v90));
        if (!v91)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v89->__on_zero_shared)(v89, v40);
          std::__shared_weak_count::__release_weak(v89);
        }
      }
      ++v74;
      v73 = *a3;
    }
    while (v74 < (a3[1] - *a3) >> 4);
  }
  if (v70)
  {
    v92 = (unint64_t *)&v70->__shared_owners_;
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v70->__on_zero_shared)(v70, v40);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  v104 = v100;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v104);
  v100[0] = (void **)v101;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v100);
}

void sub_19162B480(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  *(_QWORD *)(v25 - 104) = &a22;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 104));
  a22 = (void **)&a25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a22);
  _Unwind_Resume(a1);
}

void *wrapper_kernel<Espresso::reshape_kernel_cpu,Espresso::reshape_params>::__set_weight_raw_blob(void *result, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  void *v7;
  int v8;
  uint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::runtime_error *exception;
  unint64_t v15;
  std::runtime_error *v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  std::string v39;
  _QWORD v40[2];
  unsigned __int8 v41;
  _QWORD v42[2];
  unsigned __int8 v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;

  v7 = result;
  v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10)
      return result;
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    v10 = (uint64_t)v7 + 336;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v10, (__int128 *)&v52);
    size = (std::__shared_weak_count *)v52.__r_.__value_.__l.__size_;
    if (v52.__r_.__value_.__l.__size_)
    {
      v12 = (unint64_t *)(v52.__r_.__value_.__l.__size_ + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    if (a5 != 4 * *(int *)(*(_QWORD *)v10 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      v15 = a5;
      v16 = exception;
      std::to_string(&v45, v15);
      v17 = std::string::insert(&v45, 0, "Unexpected size s=");
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      v19 = std::string::append(&v46, "/blob=");
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, 4 * *(int *)(*(_QWORD *)v10 + 8));
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v21 = &v44;
      else
        v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      else
        v22 = v44.__r_.__value_.__l.__size_;
      v23 = std::string::append(&v47, (const std::string::value_type *)v21, v22);
      v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, " @ ");
      if ((v43 & 0x80u) == 0)
        v25 = (const std::string::value_type *)v42;
      else
        v25 = (const std::string::value_type *)v42[0];
      if ((v43 & 0x80u) == 0)
        v26 = v43;
      else
        v26 = v42[1];
      v27 = std::string::append(&v48, v25, v26);
      v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      v29 = std::string::append(&v49, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v40, ":");
      if ((v41 & 0x80u) == 0)
        v31 = (const std::string::value_type *)v40;
      else
        v31 = (const std::string::value_type *)v40[0];
      if ((v41 & 0x80u) == 0)
        v32 = v41;
      else
        v32 = v40[1];
      v33 = std::string::append(&v50, v31, v32);
      v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, 197);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = &v39;
      else
        v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      else
        v36 = v39.__r_.__value_.__l.__size_;
      v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
      v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v16, &v52);
      __cxa_throw(v16, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    return memcpy(*(void **)(*(_QWORD *)v10 + 16), a4, a5);
  }
  return result;
}

void sub_19162B838(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  void *v59;
  int v60;
  uint64_t v61;

  if (*(char *)(v61 - 57) < 0)
    operator delete(*(void **)(v61 - 80));
  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v61 - 89) < 0)
    operator delete(*(void **)(v61 - 112));
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v61 - 121) < 0)
    operator delete(*(void **)(v61 - 144));
  if (*(char *)(v61 - 153) < 0)
    operator delete(*(void **)(v61 - 176));
  if (a27 < 0)
    operator delete(a22);
  if (a59 < 0)
    operator delete(a54);
  if (a33 < 0)
    operator delete(a28);
  if (a52 < 0)
    operator delete(a47);
  if (a45 < 0)
    operator delete(a40);
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0)
LABEL_28:
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

BOOL wrapper_kernel<Espresso::reshape_kernel_cpu,Espresso::reshape_params>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2;

  v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10)
      return 0;
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

void wrapper_kernel<Espresso::reshape_kernel_cpu,Espresso::reshape_params>::convert_layer_data_to_fp32(_QWORD *a1, char **a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v9;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  const void *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  __int128 v43;
  int64x2_t v44;
  char *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  __int128 v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  int64x2_t v59;
  char *v60;
  _QWORD *v61;
  void *__p;
  void *v63;
  __int128 v64;
  const void *v65;
  std::__shared_weak_count *v66;

  if (a3 != a4)
  {
    v9 = a3;
    v12 = a2 + 2;
    while (1)
    {
      v14 = *(const void **)v9;
      v13 = *(std::__shared_weak_count **)(v9 + 8);
      v65 = *(const void **)v9;
      v66 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
      }
      v17 = operator new(0x118uLL);
      v17[1] = 0;
      v17[2] = 0;
      *v17 = &off_1E2DC1868;
      Espresso::blob_cpu::blob_cpu((uint64_t)(v17 + 3), a1);
      *(_QWORD *)&v64 = v17 + 3;
      *((_QWORD *)&v64 + 1) = v17;
      Espresso::abstract_blob_container::shape((char *)&v58, (uint64_t)v14);
      v56 = 0;
      v57 = 0;
      (*(void (**)(_QWORD *, uint64_t *, uint64_t *))(v17[3] + 16))(v17 + 3, &v58, &v56);
      v18 = v57;
      if (v57)
      {
        v19 = (unint64_t *)&v57->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if (__p)
      {
        v63 = __p;
        operator delete(__p);
      }
      if (v65)
      {
        if (v21)
          break;
      }
      v21 = 0;
      v55 = 0;
      if (a5)
        goto LABEL_21;
LABEL_28:
      v27 = v64;
      if (*((_QWORD *)&v64 + 1))
      {
        v28 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v31 = a2[1];
      v30 = (unint64_t)a2[2];
      if ((unint64_t)v31 >= v30)
      {
        v54 = v27;
        v33 = (v31 - *a2) >> 4;
        if ((unint64_t)(v33 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v34 = v30 - (_QWORD)*a2;
        v35 = v34 >> 3;
        if (v34 >> 3 <= (unint64_t)(v33 + 1))
          v35 = v33 + 1;
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0)
          v36 = 0xFFFFFFFFFFFFFFFLL;
        else
          v36 = v35;
        v61 = v12;
        v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v36);
        v39 = &v37[16 * v33];
        *(_OWORD *)v39 = v54;
        v41 = *a2;
        v40 = a2[1];
        if (v40 == *a2)
        {
          v44 = vdupq_n_s64((unint64_t)v40);
          v42 = &v37[16 * v33];
        }
        else
        {
          v42 = &v37[16 * v33];
          do
          {
            v43 = *((_OWORD *)v40 - 1);
            v40 -= 16;
            *((_OWORD *)v42 - 1) = v43;
            v42 -= 16;
            *(_QWORD *)v40 = 0;
            *((_QWORD *)v40 + 1) = 0;
          }
          while (v40 != v41);
          v44 = *(int64x2_t *)a2;
        }
        v32 = v39 + 16;
        *a2 = v42;
        a2[1] = v39 + 16;
        v59 = v44;
        v45 = a2[2];
        a2[2] = &v37[16 * v38];
        v60 = v45;
        v58 = v44.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v58);
      }
      else
      {
        *(_OWORD *)v31 = v27;
        v32 = v31 + 16;
      }
      a2[1] = v32;
      if (v55)
      {
        v46 = (unint64_t *)&v55->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      v48 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
      if (*((_QWORD *)&v64 + 1))
      {
        v49 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      v51 = v66;
      if (v66)
      {
        v52 = (unint64_t *)&v66->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v9 += 16;
      if (v9 == a4)
        return;
    }
    v55 = v66;
    if (v66)
    {
      v22 = (unint64_t *)&v66->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    if (!a5)
      goto LABEL_28;
LABEL_21:
    if (a6)
    {
      v58 = 0;
      v59.i64[0] = 0;
      (*(void (**)(void *, uint64_t *, uint64_t))(*(_QWORD *)v21 + 40))(v21, &v58, v64 + 160);
      v24 = (std::__shared_weak_count *)v59.i64[0];
      if (v59.i64[0])
      {
        v25 = (unint64_t *)(v59.i64[0] + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v21, v64 + 160, 1.0);
    }
    goto LABEL_28;
  }
}

void sub_19162BD94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::reshape_kernel_cpu,Espresso::reshape_params>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB49B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::reshape_kernel_cpu,Espresso::reshape_params>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB49B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::reshape_kernel_cpu,Espresso::reshape_params>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_8@<Q0>(uint64_t *a1@<X1>, _OWORD *a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  __int128 v7;
  __n128 result;

  v6 = (char *)operator new(0x190uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DB4630;
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  v7 = a2[1];
  *((_OWORD *)v6 + 19) = *a2;
  *((_OWORD *)v6 + 20) = v7;
  *((_OWORD *)v6 + 21) = a2[2];
  *(_OWORD *)(v6 + 349) = *(_OWORD *)((char *)a2 + 45);
  *((_QWORD *)v6 + 3) = &off_1E2D4FA18;
  *((_OWORD *)v6 + 23) = 0u;
  *((_OWORD *)v6 + 24) = 0u;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v6 + 46, *a1, a1[1]);
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19162BF04(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::concat_kernel_cpu,Espresso::concat_params>::~wrapper_kernel(Espresso::base_kernel *a1)
{
  *(_QWORD *)a1 = &off_1E2D4FA18;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 360);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 344);
  Espresso::base_kernel::~base_kernel(a1);
}

{
  *(_QWORD *)a1 = &off_1E2D4FA18;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 360);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 344);
  Espresso::base_kernel::~base_kernel(a1);
  JUMPOUT(0x19401CD90);
}

void wrapper_kernel<Espresso::concat_kernel_cpu,Espresso::concat_params>::__launch(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v5;
  _BOOL4 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  float *v31;
  vDSP_Length v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  __n128 v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  void **v44;
  void **v45;
  void **v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  int *v52;
  float *v53;
  vDSP_Length v54;
  int *v55;
  int v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  vDSP_Length v60;
  vDSP_Length v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  const void *v74;
  void **v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  void **v80;
  const void *v81;
  void *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  _QWORD *v94;
  uint64_t *v95;
  std::__shared_weak_count *v96;
  float __B;
  _QWORD v98[2];
  _QWORD v99[2];
  void **v100[3];
  char *v101[3];
  void *v102;
  std::__shared_weak_count *v103;
  void ***v104;
  std::__shared_weak_count *v105;

  v5 = a3;
  memset(v101, 0, sizeof(v101));
  memset(v100, 0, sizeof(v100));
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)*a3 + 32))(*(_QWORD *)*a3))
    v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)*v5 + 32))(*(_QWORD *)*v5) == 1;
  else
    v7 = 1;
  v8 = (std::__shared_weak_count *)a1[44];
  v99[0] = a1[43];
  v99[1] = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  wrapper_kernel<Espresso::concat_kernel_cpu,Espresso::concat_params>::convert_layer_data_to_fp32(v99, v101, *a4, a4[1], 1, v7);
  if (v8)
  {
    v11 = (unint64_t *)&v8->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v13 = (std::__shared_weak_count *)a1[44];
  v98[0] = a1[43];
  v98[1] = v13;
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  wrapper_kernel<Espresso::concat_kernel_cpu,Espresso::concat_params>::convert_layer_data_to_fp32(v98, (char **)v100, *v5, v5[1], 0, 0);
  if (v13)
  {
    v17 = (unint64_t *)&v13->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v19 = *a4;
  if (a4[1] != *a4)
  {
    v20 = 0;
    do
    {
      if (!v7
        && (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v19 + 16 * v20) + 32))(*(_QWORD *)(v19 + 16 * v20))
         || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(*a4 + 16 * v20) + 32))(*(_QWORD *)(*a4 + 16 * v20)) == 1))
      {
        __B = *(float *)(*(_QWORD *)(*a4 + 16 * v20) + 112);
        v21 = &v101[0][16 * v20];
        v104 = (void ***)v22;
        v23 = (std::__shared_weak_count *)*((_QWORD *)v21 + 1);
        v105 = v23;
        if (v23)
        {
          v24 = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
        }
        v26 = *((_QWORD *)v22 + 20);
        v27 = (std::__shared_weak_count *)*((_QWORD *)v22 + 21);
        v102 = (void *)v26;
        v103 = v27;
        if (v27)
        {
          v28 = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldxr(v28);
          while (__stxr(v29 + 1, v28));
        }
        v30 = 0;
        v31 = *(float **)(v26 + 24);
        v32 = *(int *)(v26 + 8);
        v33 = v26 + 12;
        do
        {
          v32 *= *(int *)(v33 + v30);
          v30 += 4;
        }
        while (v30 != 12);
        vDSP_vsmul(v31, 1, &__B, v31, 1, v32);
        if (v27)
        {
          v34 = (unint64_t *)&v27->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        v36 = v105;
        if (v105)
        {
          v37 = (unint64_t *)&v105->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
      }
      ++v20;
      v19 = *a4;
    }
    while (v20 < (a4[1] - *a4) >> 4);
  }
  Espresso::concat_kernel_cpu::__launch((uint64_t)a1, v16, (uint64_t)v100, (uint64_t *)v101);
  v40 = a1[45];
  if (v40)
  {
    v41 = (std::__shared_weak_count *)a1[46];
    v96 = v41;
    if (v41)
    {
      v42 = (unint64_t *)&v41->__shared_owners_;
      do
        v43 = __ldxr(v42);
      while (__stxr(v43 + 1, v42));
    }
    v44 = v100[0];
    if (*v100[0]
    {
      v46 = v45;
      v47 = (std::__shared_weak_count *)v44[1];
      v104 = (void ***)v45;
      v105 = v47;
      if (v47)
      {
        v48 = (unint64_t *)&v47->__shared_owners_;
        do
          v49 = __ldxr(v48);
        while (__stxr(v49 + 1, v48));
      }
    }
    else
    {
      v47 = 0;
      v46 = 0;
      v104 = 0;
      v105 = 0;
    }
    LODWORD(v50) = *(_DWORD *)(v40 + 8);
    v94 = a1;
    v95 = v5;
    v93 = v47;
    if ((_DWORD)v50 == 1)
    {
      v51 = 0;
      v52 = (int *)v46[20];
      v53 = (float *)*((_QWORD *)v52 + 3);
      v54 = v52[2];
      v55 = v52 + 3;
      do
        v54 *= v55[v51++];
      while (v51 != 3);
      vDSP_vsmul(v53, 1, *(const float **)(v40 + 16), v53, 1, v54);
    }
    else
    {
      v56 = *((_DWORD *)v46 + 4);
      if ((_DWORD)v50 != v56)
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v50, v56);
      v57 = *((_DWORD *)v46 + 5);
      if (v57)
      {
        v58 = 0;
        v59 = 0;
        v60 = *((int *)v46 + 2) * (uint64_t)*((int *)v46 + 3);
        v61 = 4 * (int)v50 * v60;
        do
        {
          if ((_DWORD)v50)
          {
            v62 = 0;
            v63 = 0;
            v64 = v58;
            do
            {
              vDSP_vsmul((const float *)(*((_QWORD *)v46[20] + 3) + v64), 1, (const float *)(*(_QWORD *)(v40 + 16) + v62), (float *)(*((_QWORD *)v46[20] + 3) + v64), 1, v60);
              ++v63;
              v50 = *((int *)v46 + 4);
              v62 += 4;
              v64 += 4 * v60;
            }
            while (v63 < v50);
            v57 = *((_DWORD *)v46 + 5);
          }
          ++v59;
          v58 += v61;
        }
        while (v59 < v57);
      }
    }
    a1 = v94;
    v5 = v95;
    if (v93)
    {
      v65 = (unint64_t *)&v93->__shared_owners_;
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 - 1, v65));
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
        std::__shared_weak_count::__release_weak(v93);
      }
    }
    if (v96)
    {
      v67 = (unint64_t *)&v96->__shared_owners_;
      do
        v68 = __ldaxr(v67);
      while (__stlxr(v68 - 1, v67));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
        std::__shared_weak_count::__release_weak(v96);
      }
    }
  }
  v69 = (std::__shared_weak_count *)a1[44];
  if (v69)
  {
    v70 = (unint64_t *)&v69->__shared_owners_;
    do
      v71 = __ldxr(v70);
    while (__stxr(v71 + 1, v70));
  }
  v72 = *v5;
  if (v5[1] != *v5)
  {
    v73 = 0;
    do
    {
      v74 = *(const void **)(v72 + 16 * v73);
      if (v74
      {
        v76 = (uint64_t)v75;
        v104 = (void ***)v75;
        v77 = *(std::__shared_weak_count **)(v72 + 16 * v73 + 8);
        v105 = v77;
        if (v77)
        {
          v78 = (unint64_t *)&v77->__shared_owners_;
          do
            v79 = __ldxr(v78);
          while (__stxr(v79 + 1, v78));
        }
      }
      else
      {
        v76 = 0;
        v104 = 0;
        v105 = 0;
      }
      v80 = v100[0];
      v81 = v100[0][2 * v73];
      if (v81
      {
        v102 = v82;
        v83 = (std::__shared_weak_count *)v80[2 * v73 + 1];
        v103 = v83;
        if (v83)
        {
          v84 = (unint64_t *)&v83->__shared_owners_;
          do
            v85 = __ldxr(v84);
          while (__stxr(v85 + 1, v84));
        }
      }
      else
      {
        v83 = 0;
        v82 = 0;
        v102 = 0;
        v103 = 0;
      }
      v39.n128_u64[0] = Espresso::QuantSimEngine::blob_container::copy_from_fp32(v76, (uint64_t)v82 + 160, 1.0);
      if (v83)
      {
        v86 = (unint64_t *)&v83->__shared_owners_;
        do
          v87 = __ldaxr(v86);
        while (__stlxr(v87 - 1, v86));
        if (!v87)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v83->__on_zero_shared)(v83, v39);
          std::__shared_weak_count::__release_weak(v83);
        }
      }
      v88 = v105;
      if (v105)
      {
        v89 = (unint64_t *)&v105->__shared_owners_;
        do
          v90 = __ldaxr(v89);
        while (__stlxr(v90 - 1, v89));
        if (!v90)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v88->__on_zero_shared)(v88, v39);
          std::__shared_weak_count::__release_weak(v88);
        }
      }
      ++v73;
      v72 = *v5;
    }
    while (v73 < (v5[1] - *v5) >> 4);
  }
  if (v69)
  {
    v91 = (unint64_t *)&v69->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v69->__on_zero_shared)(v69, v39);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  v104 = v100;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v104);
  v100[0] = (void **)v101;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v100);
}

void sub_19162C674(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  *(_QWORD *)(v25 - 104) = &a22;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 104));
  a22 = (void **)&a25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a22);
  _Unwind_Resume(a1);
}

void *wrapper_kernel<Espresso::concat_kernel_cpu,Espresso::concat_params>::__set_weight_raw_blob(void *result, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  void *v7;
  int v8;
  uint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::runtime_error *exception;
  unint64_t v15;
  std::runtime_error *v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  std::string v39;
  _QWORD v40[2];
  unsigned __int8 v41;
  _QWORD v42[2];
  unsigned __int8 v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;

  v7 = result;
  v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10)
      return result;
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    v10 = (uint64_t)v7 + 360;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v10, (__int128 *)&v52);
    size = (std::__shared_weak_count *)v52.__r_.__value_.__l.__size_;
    if (v52.__r_.__value_.__l.__size_)
    {
      v12 = (unint64_t *)(v52.__r_.__value_.__l.__size_ + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    if (a5 != 4 * *(int *)(*(_QWORD *)v10 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      v15 = a5;
      v16 = exception;
      std::to_string(&v45, v15);
      v17 = std::string::insert(&v45, 0, "Unexpected size s=");
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      v19 = std::string::append(&v46, "/blob=");
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, 4 * *(int *)(*(_QWORD *)v10 + 8));
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v21 = &v44;
      else
        v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      else
        v22 = v44.__r_.__value_.__l.__size_;
      v23 = std::string::append(&v47, (const std::string::value_type *)v21, v22);
      v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, " @ ");
      if ((v43 & 0x80u) == 0)
        v25 = (const std::string::value_type *)v42;
      else
        v25 = (const std::string::value_type *)v42[0];
      if ((v43 & 0x80u) == 0)
        v26 = v43;
      else
        v26 = v42[1];
      v27 = std::string::append(&v48, v25, v26);
      v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      v29 = std::string::append(&v49, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v40, ":");
      if ((v41 & 0x80u) == 0)
        v31 = (const std::string::value_type *)v40;
      else
        v31 = (const std::string::value_type *)v40[0];
      if ((v41 & 0x80u) == 0)
        v32 = v41;
      else
        v32 = v40[1];
      v33 = std::string::append(&v50, v31, v32);
      v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, 197);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = &v39;
      else
        v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      else
        v36 = v39.__r_.__value_.__l.__size_;
      v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
      v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v16, &v52);
      __cxa_throw(v16, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    return memcpy(*(void **)(*(_QWORD *)v10 + 16), a4, a5);
  }
  return result;
}

void sub_19162CA2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  void *v59;
  int v60;
  uint64_t v61;

  if (*(char *)(v61 - 57) < 0)
    operator delete(*(void **)(v61 - 80));
  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v61 - 89) < 0)
    operator delete(*(void **)(v61 - 112));
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v61 - 121) < 0)
    operator delete(*(void **)(v61 - 144));
  if (*(char *)(v61 - 153) < 0)
    operator delete(*(void **)(v61 - 176));
  if (a27 < 0)
    operator delete(a22);
  if (a59 < 0)
    operator delete(a54);
  if (a33 < 0)
    operator delete(a28);
  if (a52 < 0)
    operator delete(a47);
  if (a45 < 0)
    operator delete(a40);
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0)
LABEL_28:
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

BOOL wrapper_kernel<Espresso::concat_kernel_cpu,Espresso::concat_params>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2;

  v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10)
      return 0;
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

void wrapper_kernel<Espresso::concat_kernel_cpu,Espresso::concat_params>::convert_layer_data_to_fp32(_QWORD *a1, char **a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v9;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  const void *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  __int128 v43;
  int64x2_t v44;
  char *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  __int128 v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  int64x2_t v59;
  char *v60;
  _QWORD *v61;
  void *__p;
  void *v63;
  __int128 v64;
  const void *v65;
  std::__shared_weak_count *v66;

  if (a3 != a4)
  {
    v9 = a3;
    v12 = a2 + 2;
    while (1)
    {
      v14 = *(const void **)v9;
      v13 = *(std::__shared_weak_count **)(v9 + 8);
      v65 = *(const void **)v9;
      v66 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
      }
      v17 = operator new(0x118uLL);
      v17[1] = 0;
      v17[2] = 0;
      *v17 = &off_1E2DC1868;
      Espresso::blob_cpu::blob_cpu((uint64_t)(v17 + 3), a1);
      *(_QWORD *)&v64 = v17 + 3;
      *((_QWORD *)&v64 + 1) = v17;
      Espresso::abstract_blob_container::shape((char *)&v58, (uint64_t)v14);
      v56 = 0;
      v57 = 0;
      (*(void (**)(_QWORD *, uint64_t *, uint64_t *))(v17[3] + 16))(v17 + 3, &v58, &v56);
      v18 = v57;
      if (v57)
      {
        v19 = (unint64_t *)&v57->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if (__p)
      {
        v63 = __p;
        operator delete(__p);
      }
      if (v65)
      {
        if (v21)
          break;
      }
      v21 = 0;
      v55 = 0;
      if (a5)
        goto LABEL_21;
LABEL_28:
      v27 = v64;
      if (*((_QWORD *)&v64 + 1))
      {
        v28 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v31 = a2[1];
      v30 = (unint64_t)a2[2];
      if ((unint64_t)v31 >= v30)
      {
        v54 = v27;
        v33 = (v31 - *a2) >> 4;
        if ((unint64_t)(v33 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v34 = v30 - (_QWORD)*a2;
        v35 = v34 >> 3;
        if (v34 >> 3 <= (unint64_t)(v33 + 1))
          v35 = v33 + 1;
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0)
          v36 = 0xFFFFFFFFFFFFFFFLL;
        else
          v36 = v35;
        v61 = v12;
        v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v36);
        v39 = &v37[16 * v33];
        *(_OWORD *)v39 = v54;
        v41 = *a2;
        v40 = a2[1];
        if (v40 == *a2)
        {
          v44 = vdupq_n_s64((unint64_t)v40);
          v42 = &v37[16 * v33];
        }
        else
        {
          v42 = &v37[16 * v33];
          do
          {
            v43 = *((_OWORD *)v40 - 1);
            v40 -= 16;
            *((_OWORD *)v42 - 1) = v43;
            v42 -= 16;
            *(_QWORD *)v40 = 0;
            *((_QWORD *)v40 + 1) = 0;
          }
          while (v40 != v41);
          v44 = *(int64x2_t *)a2;
        }
        v32 = v39 + 16;
        *a2 = v42;
        a2[1] = v39 + 16;
        v59 = v44;
        v45 = a2[2];
        a2[2] = &v37[16 * v38];
        v60 = v45;
        v58 = v44.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v58);
      }
      else
      {
        *(_OWORD *)v31 = v27;
        v32 = v31 + 16;
      }
      a2[1] = v32;
      if (v55)
      {
        v46 = (unint64_t *)&v55->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      v48 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
      if (*((_QWORD *)&v64 + 1))
      {
        v49 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      v51 = v66;
      if (v66)
      {
        v52 = (unint64_t *)&v66->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v9 += 16;
      if (v9 == a4)
        return;
    }
    v55 = v66;
    if (v66)
    {
      v22 = (unint64_t *)&v66->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    if (!a5)
      goto LABEL_28;
LABEL_21:
    if (a6)
    {
      v58 = 0;
      v59.i64[0] = 0;
      (*(void (**)(void *, uint64_t *, uint64_t))(*(_QWORD *)v21 + 40))(v21, &v58, v64 + 160);
      v24 = (std::__shared_weak_count *)v59.i64[0];
      if (v59.i64[0])
      {
        v25 = (unint64_t *)(v59.i64[0] + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v21, v64 + 160, 1.0);
    }
    goto LABEL_28;
  }
}

void sub_19162CF88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::concat_kernel_cpu,Espresso::concat_params>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB4630;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::concat_kernel_cpu,Espresso::concat_params>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB4630;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::concat_kernel_cpu,Espresso::concat_params>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_7@<Q0>(uint64_t *a1@<X1>, _OWORD *a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  __n128 result;

  v6 = (char *)operator new(0x188uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DB4A20;
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((_DWORD *)v6 + 83) = 0;
  *((_QWORD *)v6 + 43) = 0;
  *((_QWORD *)v6 + 44) = 0;
  *((_QWORD *)v6 + 42) = 0;
  *((_OWORD *)v6 + 19) = *a2;
  *(_OWORD *)(v6 + 316) = *(_OWORD *)((char *)a2 + 12);
  *((_QWORD *)v6 + 3) = &off_1E2D51330;
  *(_OWORD *)(v6 + 360) = 0u;
  *(_OWORD *)(v6 + 376) = 0u;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v6 + 45, *a1, a1[1]);
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19162D100(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::softmax_kernel_cpu,Espresso::softmax_params>::~wrapper_kernel(Espresso::base_kernel *a1)
{
  *(_QWORD *)a1 = &off_1E2D51330;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 352);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 336);
  *(_QWORD *)a1 = &off_1E2D84120;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 312);
  Espresso::base_kernel::~base_kernel(a1);
}

{
  *(_QWORD *)a1 = &off_1E2D51330;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 352);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 336);
  *(_QWORD *)a1 = &off_1E2D84120;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 312);
  Espresso::base_kernel::~base_kernel(a1);
  JUMPOUT(0x19401CD90);
}

void wrapper_kernel<Espresso::softmax_kernel_cpu,Espresso::softmax_params>::__launch(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v5;
  _BOOL4 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  float *v31;
  vDSP_Length v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  __n128 v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  void **v44;
  void **v45;
  void **v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  int *v52;
  float *v53;
  vDSP_Length v54;
  int *v55;
  int v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  vDSP_Length v60;
  vDSP_Length v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  const void *v74;
  void **v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  void **v80;
  const void *v81;
  void *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  _QWORD *v94;
  uint64_t *v95;
  std::__shared_weak_count *v96;
  float __B;
  _QWORD v98[2];
  _QWORD v99[2];
  void **v100[3];
  char *v101[3];
  void *v102;
  std::__shared_weak_count *v103;
  void ***v104;
  std::__shared_weak_count *v105;

  v5 = a3;
  memset(v101, 0, sizeof(v101));
  memset(v100, 0, sizeof(v100));
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)*a3 + 32))(*(_QWORD *)*a3))
    v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)*v5 + 32))(*(_QWORD *)*v5) == 1;
  else
    v7 = 1;
  v8 = (std::__shared_weak_count *)a1[43];
  v99[0] = a1[42];
  v99[1] = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  wrapper_kernel<Espresso::softmax_kernel_cpu,Espresso::softmax_params>::convert_layer_data_to_fp32(v99, v101, *a4, a4[1], 1, v7);
  if (v8)
  {
    v11 = (unint64_t *)&v8->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v13 = (std::__shared_weak_count *)a1[43];
  v98[0] = a1[42];
  v98[1] = v13;
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  wrapper_kernel<Espresso::softmax_kernel_cpu,Espresso::softmax_params>::convert_layer_data_to_fp32(v98, (char **)v100, *v5, v5[1], 0, 0);
  if (v13)
  {
    v17 = (unint64_t *)&v13->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v19 = *a4;
  if (a4[1] != *a4)
  {
    v20 = 0;
    do
    {
      if (!v7
        && (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v19 + 16 * v20) + 32))(*(_QWORD *)(v19 + 16 * v20))
         || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(*a4 + 16 * v20) + 32))(*(_QWORD *)(*a4 + 16 * v20)) == 1))
      {
        __B = *(float *)(*(_QWORD *)(*a4 + 16 * v20) + 112);
        v21 = &v101[0][16 * v20];
        v104 = (void ***)v22;
        v23 = (std::__shared_weak_count *)*((_QWORD *)v21 + 1);
        v105 = v23;
        if (v23)
        {
          v24 = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
        }
        v26 = *((_QWORD *)v22 + 20);
        v27 = (std::__shared_weak_count *)*((_QWORD *)v22 + 21);
        v102 = (void *)v26;
        v103 = v27;
        if (v27)
        {
          v28 = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldxr(v28);
          while (__stxr(v29 + 1, v28));
        }
        v30 = 0;
        v31 = *(float **)(v26 + 24);
        v32 = *(int *)(v26 + 8);
        v33 = v26 + 12;
        do
        {
          v32 *= *(int *)(v33 + v30);
          v30 += 4;
        }
        while (v30 != 12);
        vDSP_vsmul(v31, 1, &__B, v31, 1, v32);
        if (v27)
        {
          v34 = (unint64_t *)&v27->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        v36 = v105;
        if (v105)
        {
          v37 = (unint64_t *)&v105->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
      }
      ++v20;
      v19 = *a4;
    }
    while (v20 < (a4[1] - *a4) >> 4);
  }
  Espresso::softmax_kernel_cpu::__launch((uint64_t)a1, v16, (uint64_t)v100, (uint64_t)v101);
  v40 = a1[44];
  if (v40)
  {
    v41 = (std::__shared_weak_count *)a1[45];
    v96 = v41;
    if (v41)
    {
      v42 = (unint64_t *)&v41->__shared_owners_;
      do
        v43 = __ldxr(v42);
      while (__stxr(v43 + 1, v42));
    }
    v44 = v100[0];
    if (*v100[0]
    {
      v46 = v45;
      v47 = (std::__shared_weak_count *)v44[1];
      v104 = (void ***)v45;
      v105 = v47;
      if (v47)
      {
        v48 = (unint64_t *)&v47->__shared_owners_;
        do
          v49 = __ldxr(v48);
        while (__stxr(v49 + 1, v48));
      }
    }
    else
    {
      v47 = 0;
      v46 = 0;
      v104 = 0;
      v105 = 0;
    }
    LODWORD(v50) = *(_DWORD *)(v40 + 8);
    v94 = a1;
    v95 = v5;
    v93 = v47;
    if ((_DWORD)v50 == 1)
    {
      v51 = 0;
      v52 = (int *)v46[20];
      v53 = (float *)*((_QWORD *)v52 + 3);
      v54 = v52[2];
      v55 = v52 + 3;
      do
        v54 *= v55[v51++];
      while (v51 != 3);
      vDSP_vsmul(v53, 1, *(const float **)(v40 + 16), v53, 1, v54);
    }
    else
    {
      v56 = *((_DWORD *)v46 + 4);
      if ((_DWORD)v50 != v56)
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v50, v56);
      v57 = *((_DWORD *)v46 + 5);
      if (v57)
      {
        v58 = 0;
        v59 = 0;
        v60 = *((int *)v46 + 2) * (uint64_t)*((int *)v46 + 3);
        v61 = 4 * (int)v50 * v60;
        do
        {
          if ((_DWORD)v50)
          {
            v62 = 0;
            v63 = 0;
            v64 = v58;
            do
            {
              vDSP_vsmul((const float *)(*((_QWORD *)v46[20] + 3) + v64), 1, (const float *)(*(_QWORD *)(v40 + 16) + v62), (float *)(*((_QWORD *)v46[20] + 3) + v64), 1, v60);
              ++v63;
              v50 = *((int *)v46 + 4);
              v62 += 4;
              v64 += 4 * v60;
            }
            while (v63 < v50);
            v57 = *((_DWORD *)v46 + 5);
          }
          ++v59;
          v58 += v61;
        }
        while (v59 < v57);
      }
    }
    a1 = v94;
    v5 = v95;
    if (v93)
    {
      v65 = (unint64_t *)&v93->__shared_owners_;
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 - 1, v65));
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
        std::__shared_weak_count::__release_weak(v93);
      }
    }
    if (v96)
    {
      v67 = (unint64_t *)&v96->__shared_owners_;
      do
        v68 = __ldaxr(v67);
      while (__stlxr(v68 - 1, v67));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
        std::__shared_weak_count::__release_weak(v96);
      }
    }
  }
  v69 = (std::__shared_weak_count *)a1[43];
  if (v69)
  {
    v70 = (unint64_t *)&v69->__shared_owners_;
    do
      v71 = __ldxr(v70);
    while (__stxr(v71 + 1, v70));
  }
  v72 = *v5;
  if (v5[1] != *v5)
  {
    v73 = 0;
    do
    {
      v74 = *(const void **)(v72 + 16 * v73);
      if (v74
      {
        v76 = (uint64_t)v75;
        v104 = (void ***)v75;
        v77 = *(std::__shared_weak_count **)(v72 + 16 * v73 + 8);
        v105 = v77;
        if (v77)
        {
          v78 = (unint64_t *)&v77->__shared_owners_;
          do
            v79 = __ldxr(v78);
          while (__stxr(v79 + 1, v78));
        }
      }
      else
      {
        v76 = 0;
        v104 = 0;
        v105 = 0;
      }
      v80 = v100[0];
      v81 = v100[0][2 * v73];
      if (v81
      {
        v102 = v82;
        v83 = (std::__shared_weak_count *)v80[2 * v73 + 1];
        v103 = v83;
        if (v83)
        {
          v84 = (unint64_t *)&v83->__shared_owners_;
          do
            v85 = __ldxr(v84);
          while (__stxr(v85 + 1, v84));
        }
      }
      else
      {
        v83 = 0;
        v82 = 0;
        v102 = 0;
        v103 = 0;
      }
      v39.n128_u64[0] = Espresso::QuantSimEngine::blob_container::copy_from_fp32(v76, (uint64_t)v82 + 160, 1.0);
      if (v83)
      {
        v86 = (unint64_t *)&v83->__shared_owners_;
        do
          v87 = __ldaxr(v86);
        while (__stlxr(v87 - 1, v86));
        if (!v87)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v83->__on_zero_shared)(v83, v39);
          std::__shared_weak_count::__release_weak(v83);
        }
      }
      v88 = v105;
      if (v105)
      {
        v89 = (unint64_t *)&v105->__shared_owners_;
        do
          v90 = __ldaxr(v89);
        while (__stlxr(v90 - 1, v89));
        if (!v90)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v88->__on_zero_shared)(v88, v39);
          std::__shared_weak_count::__release_weak(v88);
        }
      }
      ++v73;
      v72 = *v5;
    }
    while (v73 < (v5[1] - *v5) >> 4);
  }
  if (v69)
  {
    v91 = (unint64_t *)&v69->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v69->__on_zero_shared)(v69, v39);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  v104 = v100;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v104);
  v100[0] = (void **)v101;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v100);
}

void sub_19162D898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  *(_QWORD *)(v25 - 104) = &a22;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 104));
  a22 = (void **)&a25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a22);
  _Unwind_Resume(a1);
}

void *wrapper_kernel<Espresso::softmax_kernel_cpu,Espresso::softmax_params>::__set_weight_raw_blob(void *result, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  void *v7;
  int v8;
  uint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::runtime_error *exception;
  unint64_t v15;
  std::runtime_error *v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  std::string v39;
  _QWORD v40[2];
  unsigned __int8 v41;
  _QWORD v42[2];
  unsigned __int8 v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;

  v7 = result;
  v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10)
      return result;
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    v10 = (uint64_t)v7 + 352;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v10, (__int128 *)&v52);
    size = (std::__shared_weak_count *)v52.__r_.__value_.__l.__size_;
    if (v52.__r_.__value_.__l.__size_)
    {
      v12 = (unint64_t *)(v52.__r_.__value_.__l.__size_ + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    if (a5 != 4 * *(int *)(*(_QWORD *)v10 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      v15 = a5;
      v16 = exception;
      std::to_string(&v45, v15);
      v17 = std::string::insert(&v45, 0, "Unexpected size s=");
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      v19 = std::string::append(&v46, "/blob=");
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, 4 * *(int *)(*(_QWORD *)v10 + 8));
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v21 = &v44;
      else
        v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      else
        v22 = v44.__r_.__value_.__l.__size_;
      v23 = std::string::append(&v47, (const std::string::value_type *)v21, v22);
      v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, " @ ");
      if ((v43 & 0x80u) == 0)
        v25 = (const std::string::value_type *)v42;
      else
        v25 = (const std::string::value_type *)v42[0];
      if ((v43 & 0x80u) == 0)
        v26 = v43;
      else
        v26 = v42[1];
      v27 = std::string::append(&v48, v25, v26);
      v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      v29 = std::string::append(&v49, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v40, ":");
      if ((v41 & 0x80u) == 0)
        v31 = (const std::string::value_type *)v40;
      else
        v31 = (const std::string::value_type *)v40[0];
      if ((v41 & 0x80u) == 0)
        v32 = v41;
      else
        v32 = v40[1];
      v33 = std::string::append(&v50, v31, v32);
      v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, 197);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = &v39;
      else
        v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      else
        v36 = v39.__r_.__value_.__l.__size_;
      v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
      v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v16, &v52);
      __cxa_throw(v16, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    return memcpy(*(void **)(*(_QWORD *)v10 + 16), a4, a5);
  }
  return result;
}

void sub_19162DC50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  void *v59;
  int v60;
  uint64_t v61;

  if (*(char *)(v61 - 57) < 0)
    operator delete(*(void **)(v61 - 80));
  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v61 - 89) < 0)
    operator delete(*(void **)(v61 - 112));
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v61 - 121) < 0)
    operator delete(*(void **)(v61 - 144));
  if (*(char *)(v61 - 153) < 0)
    operator delete(*(void **)(v61 - 176));
  if (a27 < 0)
    operator delete(a22);
  if (a59 < 0)
    operator delete(a54);
  if (a33 < 0)
    operator delete(a28);
  if (a52 < 0)
    operator delete(a47);
  if (a45 < 0)
    operator delete(a40);
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0)
LABEL_28:
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

void Espresso::softmax_kernel_cpu::__reset_temporal_state(uint64_t a1)
{
  Espresso::prediction_smoothing_cpu_impl::reset((Espresso::prediction_smoothing_cpu_impl *)(a1 + 312));
}

BOOL wrapper_kernel<Espresso::softmax_kernel_cpu,Espresso::softmax_params>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2;

  v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10)
      return 0;
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

void wrapper_kernel<Espresso::softmax_kernel_cpu,Espresso::softmax_params>::convert_layer_data_to_fp32(_QWORD *a1, char **a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v9;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  const void *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  __int128 v43;
  int64x2_t v44;
  char *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  __int128 v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  int64x2_t v59;
  char *v60;
  _QWORD *v61;
  void *__p;
  void *v63;
  __int128 v64;
  const void *v65;
  std::__shared_weak_count *v66;

  if (a3 != a4)
  {
    v9 = a3;
    v12 = a2 + 2;
    while (1)
    {
      v14 = *(const void **)v9;
      v13 = *(std::__shared_weak_count **)(v9 + 8);
      v65 = *(const void **)v9;
      v66 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
      }
      v17 = operator new(0x118uLL);
      v17[1] = 0;
      v17[2] = 0;
      *v17 = &off_1E2DC1868;
      Espresso::blob_cpu::blob_cpu((uint64_t)(v17 + 3), a1);
      *(_QWORD *)&v64 = v17 + 3;
      *((_QWORD *)&v64 + 1) = v17;
      Espresso::abstract_blob_container::shape((char *)&v58, (uint64_t)v14);
      v56 = 0;
      v57 = 0;
      (*(void (**)(_QWORD *, uint64_t *, uint64_t *))(v17[3] + 16))(v17 + 3, &v58, &v56);
      v18 = v57;
      if (v57)
      {
        v19 = (unint64_t *)&v57->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if (__p)
      {
        v63 = __p;
        operator delete(__p);
      }
      if (v65)
      {
        if (v21)
          break;
      }
      v21 = 0;
      v55 = 0;
      if (a5)
        goto LABEL_21;
LABEL_28:
      v27 = v64;
      if (*((_QWORD *)&v64 + 1))
      {
        v28 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v31 = a2[1];
      v30 = (unint64_t)a2[2];
      if ((unint64_t)v31 >= v30)
      {
        v54 = v27;
        v33 = (v31 - *a2) >> 4;
        if ((unint64_t)(v33 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v34 = v30 - (_QWORD)*a2;
        v35 = v34 >> 3;
        if (v34 >> 3 <= (unint64_t)(v33 + 1))
          v35 = v33 + 1;
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0)
          v36 = 0xFFFFFFFFFFFFFFFLL;
        else
          v36 = v35;
        v61 = v12;
        v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v36);
        v39 = &v37[16 * v33];
        *(_OWORD *)v39 = v54;
        v41 = *a2;
        v40 = a2[1];
        if (v40 == *a2)
        {
          v44 = vdupq_n_s64((unint64_t)v40);
          v42 = &v37[16 * v33];
        }
        else
        {
          v42 = &v37[16 * v33];
          do
          {
            v43 = *((_OWORD *)v40 - 1);
            v40 -= 16;
            *((_OWORD *)v42 - 1) = v43;
            v42 -= 16;
            *(_QWORD *)v40 = 0;
            *((_QWORD *)v40 + 1) = 0;
          }
          while (v40 != v41);
          v44 = *(int64x2_t *)a2;
        }
        v32 = v39 + 16;
        *a2 = v42;
        a2[1] = v39 + 16;
        v59 = v44;
        v45 = a2[2];
        a2[2] = &v37[16 * v38];
        v60 = v45;
        v58 = v44.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v58);
      }
      else
      {
        *(_OWORD *)v31 = v27;
        v32 = v31 + 16;
      }
      a2[1] = v32;
      if (v55)
      {
        v46 = (unint64_t *)&v55->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      v48 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
      if (*((_QWORD *)&v64 + 1))
      {
        v49 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      v51 = v66;
      if (v66)
      {
        v52 = (unint64_t *)&v66->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v9 += 16;
      if (v9 == a4)
        return;
    }
    v55 = v66;
    if (v66)
    {
      v22 = (unint64_t *)&v66->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    if (!a5)
      goto LABEL_28;
LABEL_21:
    if (a6)
    {
      v58 = 0;
      v59.i64[0] = 0;
      (*(void (**)(void *, uint64_t *, uint64_t))(*(_QWORD *)v21 + 40))(v21, &v58, v64 + 160);
      v24 = (std::__shared_weak_count *)v59.i64[0];
      if (v59.i64[0])
      {
        v25 = (unint64_t *)(v59.i64[0] + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v21, v64 + 160, 1.0);
    }
    goto LABEL_28;
  }
}

void sub_19162E1B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::softmax_kernel_cpu,Espresso::softmax_params>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB4A20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::softmax_kernel_cpu,Espresso::softmax_params>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB4A20;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::softmax_kernel_cpu,Espresso::softmax_params>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_6@<Q0>(uint64_t *a1@<X1>, _QWORD *a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  __n128 result;

  v6 = (char *)operator new(0x158uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DB4908;
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((_QWORD *)v6 + 38) = *a2;
  *((_QWORD *)v6 + 3) = &off_1E2D50C78;
  *(_OWORD *)(v6 + 312) = 0u;
  *(_OWORD *)(v6 + 328) = 0u;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v6 + 39, *a1, a1[1]);
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19162E314(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::flatten_kernel_cpu,Espresso::flatten_params>::~wrapper_kernel(Espresso::base_kernel *a1)
{
  *(_QWORD *)a1 = &off_1E2D50C78;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 304);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 288);
  Espresso::base_kernel::~base_kernel(a1);
}

{
  *(_QWORD *)a1 = &off_1E2D50C78;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 304);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 288);
  Espresso::base_kernel::~base_kernel(a1);
  JUMPOUT(0x19401CD90);
}

void wrapper_kernel<Espresso::flatten_kernel_cpu,Espresso::flatten_params>::__launch(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v5;
  _BOOL4 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  float *v31;
  vDSP_Length v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  __n128 v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  void **v44;
  void **v45;
  void **v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  int *v52;
  float *v53;
  vDSP_Length v54;
  int *v55;
  int v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  vDSP_Length v60;
  vDSP_Length v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  const void *v74;
  void **v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  void **v80;
  const void *v81;
  void *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  _QWORD *v94;
  uint64_t *v95;
  std::__shared_weak_count *v96;
  float __B;
  _QWORD v98[2];
  _QWORD v99[2];
  void **v100[3];
  char *v101[3];
  void *v102;
  std::__shared_weak_count *v103;
  void ***v104;
  std::__shared_weak_count *v105;

  v5 = a3;
  memset(v101, 0, sizeof(v101));
  memset(v100, 0, sizeof(v100));
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)*a3 + 32))(*(_QWORD *)*a3))
    v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)*v5 + 32))(*(_QWORD *)*v5) == 1;
  else
    v7 = 1;
  v8 = (std::__shared_weak_count *)a1[37];
  v99[0] = a1[36];
  v99[1] = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  wrapper_kernel<Espresso::flatten_kernel_cpu,Espresso::flatten_params>::convert_layer_data_to_fp32(v99, v101, *a4, a4[1], 1, v7);
  if (v8)
  {
    v11 = (unint64_t *)&v8->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v13 = (std::__shared_weak_count *)a1[37];
  v98[0] = a1[36];
  v98[1] = v13;
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  wrapper_kernel<Espresso::flatten_kernel_cpu,Espresso::flatten_params>::convert_layer_data_to_fp32(v98, (char **)v100, *v5, v5[1], 0, 0);
  if (v13)
  {
    v17 = (unint64_t *)&v13->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v19 = *a4;
  if (a4[1] != *a4)
  {
    v20 = 0;
    do
    {
      if (!v7
        && (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v19 + 16 * v20) + 32))(*(_QWORD *)(v19 + 16 * v20))
         || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(*a4 + 16 * v20) + 32))(*(_QWORD *)(*a4 + 16 * v20)) == 1))
      {
        __B = *(float *)(*(_QWORD *)(*a4 + 16 * v20) + 112);
        v21 = &v101[0][16 * v20];
        v104 = (void ***)v22;
        v23 = (std::__shared_weak_count *)*((_QWORD *)v21 + 1);
        v105 = v23;
        if (v23)
        {
          v24 = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
        }
        v26 = *((_QWORD *)v22 + 20);
        v27 = (std::__shared_weak_count *)*((_QWORD *)v22 + 21);
        v102 = (void *)v26;
        v103 = v27;
        if (v27)
        {
          v28 = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldxr(v28);
          while (__stxr(v29 + 1, v28));
        }
        v30 = 0;
        v31 = *(float **)(v26 + 24);
        v32 = *(int *)(v26 + 8);
        v33 = v26 + 12;
        do
        {
          v32 *= *(int *)(v33 + v30);
          v30 += 4;
        }
        while (v30 != 12);
        vDSP_vsmul(v31, 1, &__B, v31, 1, v32);
        if (v27)
        {
          v34 = (unint64_t *)&v27->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        v36 = v105;
        if (v105)
        {
          v37 = (unint64_t *)&v105->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
      }
      ++v20;
      v19 = *a4;
    }
    while (v20 < (a4[1] - *a4) >> 4);
  }
  Espresso::flatten_kernel_cpu::__launch((uint64_t)a1, v16, (uint64_t *)v100, (uint64_t *)v101);
  v40 = a1[38];
  if (v40)
  {
    v41 = (std::__shared_weak_count *)a1[39];
    v96 = v41;
    if (v41)
    {
      v42 = (unint64_t *)&v41->__shared_owners_;
      do
        v43 = __ldxr(v42);
      while (__stxr(v43 + 1, v42));
    }
    v44 = v100[0];
    if (*v100[0]
    {
      v46 = v45;
      v47 = (std::__shared_weak_count *)v44[1];
      v104 = (void ***)v45;
      v105 = v47;
      if (v47)
      {
        v48 = (unint64_t *)&v47->__shared_owners_;
        do
          v49 = __ldxr(v48);
        while (__stxr(v49 + 1, v48));
      }
    }
    else
    {
      v47 = 0;
      v46 = 0;
      v104 = 0;
      v105 = 0;
    }
    LODWORD(v50) = *(_DWORD *)(v40 + 8);
    v94 = a1;
    v95 = v5;
    v93 = v47;
    if ((_DWORD)v50 == 1)
    {
      v51 = 0;
      v52 = (int *)v46[20];
      v53 = (float *)*((_QWORD *)v52 + 3);
      v54 = v52[2];
      v55 = v52 + 3;
      do
        v54 *= v55[v51++];
      while (v51 != 3);
      vDSP_vsmul(v53, 1, *(const float **)(v40 + 16), v53, 1, v54);
    }
    else
    {
      v56 = *((_DWORD *)v46 + 4);
      if ((_DWORD)v50 != v56)
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v50, v56);
      v57 = *((_DWORD *)v46 + 5);
      if (v57)
      {
        v58 = 0;
        v59 = 0;
        v60 = *((int *)v46 + 2) * (uint64_t)*((int *)v46 + 3);
        v61 = 4 * (int)v50 * v60;
        do
        {
          if ((_DWORD)v50)
          {
            v62 = 0;
            v63 = 0;
            v64 = v58;
            do
            {
              vDSP_vsmul((const float *)(*((_QWORD *)v46[20] + 3) + v64), 1, (const float *)(*(_QWORD *)(v40 + 16) + v62), (float *)(*((_QWORD *)v46[20] + 3) + v64), 1, v60);
              ++v63;
              v50 = *((int *)v46 + 4);
              v62 += 4;
              v64 += 4 * v60;
            }
            while (v63 < v50);
            v57 = *((_DWORD *)v46 + 5);
          }
          ++v59;
          v58 += v61;
        }
        while (v59 < v57);
      }
    }
    a1 = v94;
    v5 = v95;
    if (v93)
    {
      v65 = (unint64_t *)&v93->__shared_owners_;
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 - 1, v65));
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
        std::__shared_weak_count::__release_weak(v93);
      }
    }
    if (v96)
    {
      v67 = (unint64_t *)&v96->__shared_owners_;
      do
        v68 = __ldaxr(v67);
      while (__stlxr(v68 - 1, v67));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
        std::__shared_weak_count::__release_weak(v96);
      }
    }
  }
  v69 = (std::__shared_weak_count *)a1[37];
  if (v69)
  {
    v70 = (unint64_t *)&v69->__shared_owners_;
    do
      v71 = __ldxr(v70);
    while (__stxr(v71 + 1, v70));
  }
  v72 = *v5;
  if (v5[1] != *v5)
  {
    v73 = 0;
    do
    {
      v74 = *(const void **)(v72 + 16 * v73);
      if (v74
      {
        v76 = (uint64_t)v75;
        v104 = (void ***)v75;
        v77 = *(std::__shared_weak_count **)(v72 + 16 * v73 + 8);
        v105 = v77;
        if (v77)
        {
          v78 = (unint64_t *)&v77->__shared_owners_;
          do
            v79 = __ldxr(v78);
          while (__stxr(v79 + 1, v78));
        }
      }
      else
      {
        v76 = 0;
        v104 = 0;
        v105 = 0;
      }
      v80 = v100[0];
      v81 = v100[0][2 * v73];
      if (v81
      {
        v102 = v82;
        v83 = (std::__shared_weak_count *)v80[2 * v73 + 1];
        v103 = v83;
        if (v83)
        {
          v84 = (unint64_t *)&v83->__shared_owners_;
          do
            v85 = __ldxr(v84);
          while (__stxr(v85 + 1, v84));
        }
      }
      else
      {
        v83 = 0;
        v82 = 0;
        v102 = 0;
        v103 = 0;
      }
      v39.n128_u64[0] = Espresso::QuantSimEngine::blob_container::copy_from_fp32(v76, (uint64_t)v82 + 160, 1.0);
      if (v83)
      {
        v86 = (unint64_t *)&v83->__shared_owners_;
        do
          v87 = __ldaxr(v86);
        while (__stlxr(v87 - 1, v86));
        if (!v87)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v83->__on_zero_shared)(v83, v39);
          std::__shared_weak_count::__release_weak(v83);
        }
      }
      v88 = v105;
      if (v105)
      {
        v89 = (unint64_t *)&v105->__shared_owners_;
        do
          v90 = __ldaxr(v89);
        while (__stlxr(v90 - 1, v89));
        if (!v90)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v88->__on_zero_shared)(v88, v39);
          std::__shared_weak_count::__release_weak(v88);
        }
      }
      ++v73;
      v72 = *v5;
    }
    while (v73 < (v5[1] - *v5) >> 4);
  }
  if (v69)
  {
    v91 = (unint64_t *)&v69->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v69->__on_zero_shared)(v69, v39);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  v104 = v100;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v104);
  v100[0] = (void **)v101;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v100);
}

void sub_19162EA84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  *(_QWORD *)(v25 - 104) = &a22;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 104));
  a22 = (void **)&a25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a22);
  _Unwind_Resume(a1);
}

void *wrapper_kernel<Espresso::flatten_kernel_cpu,Espresso::flatten_params>::__set_weight_raw_blob(void *result, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  void *v7;
  int v8;
  uint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::runtime_error *exception;
  unint64_t v15;
  std::runtime_error *v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  std::string v39;
  _QWORD v40[2];
  unsigned __int8 v41;
  _QWORD v42[2];
  unsigned __int8 v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;

  v7 = result;
  v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10)
      return result;
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    v10 = (uint64_t)v7 + 304;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v10, (__int128 *)&v52);
    size = (std::__shared_weak_count *)v52.__r_.__value_.__l.__size_;
    if (v52.__r_.__value_.__l.__size_)
    {
      v12 = (unint64_t *)(v52.__r_.__value_.__l.__size_ + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    if (a5 != 4 * *(int *)(*(_QWORD *)v10 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      v15 = a5;
      v16 = exception;
      std::to_string(&v45, v15);
      v17 = std::string::insert(&v45, 0, "Unexpected size s=");
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      v19 = std::string::append(&v46, "/blob=");
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, 4 * *(int *)(*(_QWORD *)v10 + 8));
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v21 = &v44;
      else
        v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      else
        v22 = v44.__r_.__value_.__l.__size_;
      v23 = std::string::append(&v47, (const std::string::value_type *)v21, v22);
      v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, " @ ");
      if ((v43 & 0x80u) == 0)
        v25 = (const std::string::value_type *)v42;
      else
        v25 = (const std::string::value_type *)v42[0];
      if ((v43 & 0x80u) == 0)
        v26 = v43;
      else
        v26 = v42[1];
      v27 = std::string::append(&v48, v25, v26);
      v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      v29 = std::string::append(&v49, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v40, ":");
      if ((v41 & 0x80u) == 0)
        v31 = (const std::string::value_type *)v40;
      else
        v31 = (const std::string::value_type *)v40[0];
      if ((v41 & 0x80u) == 0)
        v32 = v41;
      else
        v32 = v40[1];
      v33 = std::string::append(&v50, v31, v32);
      v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, 197);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = &v39;
      else
        v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      else
        v36 = v39.__r_.__value_.__l.__size_;
      v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
      v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v16, &v52);
      __cxa_throw(v16, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    return memcpy(*(void **)(*(_QWORD *)v10 + 16), a4, a5);
  }
  return result;
}

void sub_19162EE3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  void *v59;
  int v60;
  uint64_t v61;

  if (*(char *)(v61 - 57) < 0)
    operator delete(*(void **)(v61 - 80));
  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v61 - 89) < 0)
    operator delete(*(void **)(v61 - 112));
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v61 - 121) < 0)
    operator delete(*(void **)(v61 - 144));
  if (*(char *)(v61 - 153) < 0)
    operator delete(*(void **)(v61 - 176));
  if (a27 < 0)
    operator delete(a22);
  if (a59 < 0)
    operator delete(a54);
  if (a33 < 0)
    operator delete(a28);
  if (a52 < 0)
    operator delete(a47);
  if (a45 < 0)
    operator delete(a40);
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0)
LABEL_28:
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

BOOL wrapper_kernel<Espresso::flatten_kernel_cpu,Espresso::flatten_params>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2;

  v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10)
      return 0;
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

void wrapper_kernel<Espresso::flatten_kernel_cpu,Espresso::flatten_params>::convert_layer_data_to_fp32(_QWORD *a1, char **a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v9;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  const void *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  __int128 v43;
  int64x2_t v44;
  char *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  __int128 v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  int64x2_t v59;
  char *v60;
  _QWORD *v61;
  void *__p;
  void *v63;
  __int128 v64;
  const void *v65;
  std::__shared_weak_count *v66;

  if (a3 != a4)
  {
    v9 = a3;
    v12 = a2 + 2;
    while (1)
    {
      v14 = *(const void **)v9;
      v13 = *(std::__shared_weak_count **)(v9 + 8);
      v65 = *(const void **)v9;
      v66 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
      }
      v17 = operator new(0x118uLL);
      v17[1] = 0;
      v17[2] = 0;
      *v17 = &off_1E2DC1868;
      Espresso::blob_cpu::blob_cpu((uint64_t)(v17 + 3), a1);
      *(_QWORD *)&v64 = v17 + 3;
      *((_QWORD *)&v64 + 1) = v17;
      Espresso::abstract_blob_container::shape((char *)&v58, (uint64_t)v14);
      v56 = 0;
      v57 = 0;
      (*(void (**)(_QWORD *, uint64_t *, uint64_t *))(v17[3] + 16))(v17 + 3, &v58, &v56);
      v18 = v57;
      if (v57)
      {
        v19 = (unint64_t *)&v57->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if (__p)
      {
        v63 = __p;
        operator delete(__p);
      }
      if (v65)
      {
        if (v21)
          break;
      }
      v21 = 0;
      v55 = 0;
      if (a5)
        goto LABEL_21;
LABEL_28:
      v27 = v64;
      if (*((_QWORD *)&v64 + 1))
      {
        v28 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v31 = a2[1];
      v30 = (unint64_t)a2[2];
      if ((unint64_t)v31 >= v30)
      {
        v54 = v27;
        v33 = (v31 - *a2) >> 4;
        if ((unint64_t)(v33 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v34 = v30 - (_QWORD)*a2;
        v35 = v34 >> 3;
        if (v34 >> 3 <= (unint64_t)(v33 + 1))
          v35 = v33 + 1;
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0)
          v36 = 0xFFFFFFFFFFFFFFFLL;
        else
          v36 = v35;
        v61 = v12;
        v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v36);
        v39 = &v37[16 * v33];
        *(_OWORD *)v39 = v54;
        v41 = *a2;
        v40 = a2[1];
        if (v40 == *a2)
        {
          v44 = vdupq_n_s64((unint64_t)v40);
          v42 = &v37[16 * v33];
        }
        else
        {
          v42 = &v37[16 * v33];
          do
          {
            v43 = *((_OWORD *)v40 - 1);
            v40 -= 16;
            *((_OWORD *)v42 - 1) = v43;
            v42 -= 16;
            *(_QWORD *)v40 = 0;
            *((_QWORD *)v40 + 1) = 0;
          }
          while (v40 != v41);
          v44 = *(int64x2_t *)a2;
        }
        v32 = v39 + 16;
        *a2 = v42;
        a2[1] = v39 + 16;
        v59 = v44;
        v45 = a2[2];
        a2[2] = &v37[16 * v38];
        v60 = v45;
        v58 = v44.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v58);
      }
      else
      {
        *(_OWORD *)v31 = v27;
        v32 = v31 + 16;
      }
      a2[1] = v32;
      if (v55)
      {
        v46 = (unint64_t *)&v55->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      v48 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
      if (*((_QWORD *)&v64 + 1))
      {
        v49 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      v51 = v66;
      if (v66)
      {
        v52 = (unint64_t *)&v66->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v9 += 16;
      if (v9 == a4)
        return;
    }
    v55 = v66;
    if (v66)
    {
      v22 = (unint64_t *)&v66->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    if (!a5)
      goto LABEL_28;
LABEL_21:
    if (a6)
    {
      v58 = 0;
      v59.i64[0] = 0;
      (*(void (**)(void *, uint64_t *, uint64_t))(*(_QWORD *)v21 + 40))(v21, &v58, v64 + 160);
      v24 = (std::__shared_weak_count *)v59.i64[0];
      if (v59.i64[0])
      {
        v25 = (unint64_t *)(v59.i64[0] + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v21, v64 + 160, 1.0);
    }
    goto LABEL_28;
  }
}

void sub_19162F398(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::flatten_kernel_cpu,Espresso::flatten_params>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB4908;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::flatten_kernel_cpu,Espresso::flatten_params>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB4908;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::flatten_kernel_cpu,Espresso::flatten_params>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_5@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  __int128 v7;
  __n128 result;

  v6 = (char *)operator new(0x188uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DB4DA0;
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  v7 = *(_OWORD *)(a2 + 16);
  *((_OWORD *)v6 + 19) = *(_OWORD *)a2;
  *((_OWORD *)v6 + 20) = v7;
  *((_OWORD *)v6 + 21) = *(_OWORD *)(a2 + 32);
  *((_DWORD *)v6 + 88) = *(_DWORD *)(a2 + 48);
  *((_QWORD *)v6 + 3) = &off_1E2D529C0;
  *(_OWORD *)(v6 + 360) = 0u;
  *(_OWORD *)(v6 + 376) = 0u;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v6 + 45, *a1, a1[1]);
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19162F508(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::elementwise_kernel_cpu,Espresso::elementwise_params>::~wrapper_kernel(Espresso::base_kernel *a1)
{
  *(_QWORD *)a1 = &off_1E2D529C0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 352);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 336);
  Espresso::base_kernel::~base_kernel(a1);
}

{
  *(_QWORD *)a1 = &off_1E2D529C0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 352);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 336);
  Espresso::base_kernel::~base_kernel(a1);
  JUMPOUT(0x19401CD90);
}

void wrapper_kernel<Espresso::elementwise_kernel_cpu,Espresso::elementwise_params>::__launch(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v5;
  _BOOL4 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  float *v31;
  vDSP_Length v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  __n128 v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  void **v44;
  void **v45;
  void **v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  int *v52;
  float *v53;
  vDSP_Length v54;
  int *v55;
  int v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  vDSP_Length v60;
  vDSP_Length v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  const void *v74;
  void **v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  void **v80;
  const void *v81;
  void *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  _QWORD *v94;
  uint64_t *v95;
  std::__shared_weak_count *v96;
  float __B;
  _QWORD v98[2];
  _QWORD v99[2];
  void **v100[3];
  char *v101[3];
  void *v102;
  std::__shared_weak_count *v103;
  void ***v104;
  std::__shared_weak_count *v105;

  v5 = a3;
  memset(v101, 0, sizeof(v101));
  memset(v100, 0, sizeof(v100));
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)*a3 + 32))(*(_QWORD *)*a3))
    v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)*v5 + 32))(*(_QWORD *)*v5) == 1;
  else
    v7 = 1;
  v8 = (std::__shared_weak_count *)a1[43];
  v99[0] = a1[42];
  v99[1] = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  wrapper_kernel<Espresso::elementwise_kernel_cpu,Espresso::elementwise_params>::convert_layer_data_to_fp32(v99, v101, *a4, a4[1], 1, v7);
  if (v8)
  {
    v11 = (unint64_t *)&v8->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v13 = (std::__shared_weak_count *)a1[43];
  v98[0] = a1[42];
  v98[1] = v13;
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  wrapper_kernel<Espresso::elementwise_kernel_cpu,Espresso::elementwise_params>::convert_layer_data_to_fp32(v98, (char **)v100, *v5, v5[1], 0, 0);
  if (v13)
  {
    v17 = (unint64_t *)&v13->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v19 = *a4;
  if (a4[1] != *a4)
  {
    v20 = 0;
    do
    {
      if (!v7
        && (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v19 + 16 * v20) + 32))(*(_QWORD *)(v19 + 16 * v20))
         || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(*a4 + 16 * v20) + 32))(*(_QWORD *)(*a4 + 16 * v20)) == 1))
      {
        __B = *(float *)(*(_QWORD *)(*a4 + 16 * v20) + 112);
        v21 = &v101[0][16 * v20];
        v104 = (void ***)v22;
        v23 = (std::__shared_weak_count *)*((_QWORD *)v21 + 1);
        v105 = v23;
        if (v23)
        {
          v24 = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
        }
        v26 = *((_QWORD *)v22 + 20);
        v27 = (std::__shared_weak_count *)*((_QWORD *)v22 + 21);
        v102 = (void *)v26;
        v103 = v27;
        if (v27)
        {
          v28 = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldxr(v28);
          while (__stxr(v29 + 1, v28));
        }
        v30 = 0;
        v31 = *(float **)(v26 + 24);
        v32 = *(int *)(v26 + 8);
        v33 = v26 + 12;
        do
        {
          v32 *= *(int *)(v33 + v30);
          v30 += 4;
        }
        while (v30 != 12);
        vDSP_vsmul(v31, 1, &__B, v31, 1, v32);
        if (v27)
        {
          v34 = (unint64_t *)&v27->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        v36 = v105;
        if (v105)
        {
          v37 = (unint64_t *)&v105->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
      }
      ++v20;
      v19 = *a4;
    }
    while (v20 < (a4[1] - *a4) >> 4);
  }
  Espresso::elementwise_kernel_cpu::__launch((uint64_t)a1, v16, (uint64_t)v100, (uint64_t)v101);
  v40 = a1[44];
  if (v40)
  {
    v41 = (std::__shared_weak_count *)a1[45];
    v96 = v41;
    if (v41)
    {
      v42 = (unint64_t *)&v41->__shared_owners_;
      do
        v43 = __ldxr(v42);
      while (__stxr(v43 + 1, v42));
    }
    v44 = v100[0];
    if (*v100[0]
    {
      v46 = v45;
      v47 = (std::__shared_weak_count *)v44[1];
      v104 = (void ***)v45;
      v105 = v47;
      if (v47)
      {
        v48 = (unint64_t *)&v47->__shared_owners_;
        do
          v49 = __ldxr(v48);
        while (__stxr(v49 + 1, v48));
      }
    }
    else
    {
      v47 = 0;
      v46 = 0;
      v104 = 0;
      v105 = 0;
    }
    LODWORD(v50) = *(_DWORD *)(v40 + 8);
    v94 = a1;
    v95 = v5;
    v93 = v47;
    if ((_DWORD)v50 == 1)
    {
      v51 = 0;
      v52 = (int *)v46[20];
      v53 = (float *)*((_QWORD *)v52 + 3);
      v54 = v52[2];
      v55 = v52 + 3;
      do
        v54 *= v55[v51++];
      while (v51 != 3);
      vDSP_vsmul(v53, 1, *(const float **)(v40 + 16), v53, 1, v54);
    }
    else
    {
      v56 = *((_DWORD *)v46 + 4);
      if ((_DWORD)v50 != v56)
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v50, v56);
      v57 = *((_DWORD *)v46 + 5);
      if (v57)
      {
        v58 = 0;
        v59 = 0;
        v60 = *((int *)v46 + 2) * (uint64_t)*((int *)v46 + 3);
        v61 = 4 * (int)v50 * v60;
        do
        {
          if ((_DWORD)v50)
          {
            v62 = 0;
            v63 = 0;
            v64 = v58;
            do
            {
              vDSP_vsmul((const float *)(*((_QWORD *)v46[20] + 3) + v64), 1, (const float *)(*(_QWORD *)(v40 + 16) + v62), (float *)(*((_QWORD *)v46[20] + 3) + v64), 1, v60);
              ++v63;
              v50 = *((int *)v46 + 4);
              v62 += 4;
              v64 += 4 * v60;
            }
            while (v63 < v50);
            v57 = *((_DWORD *)v46 + 5);
          }
          ++v59;
          v58 += v61;
        }
        while (v59 < v57);
      }
    }
    a1 = v94;
    v5 = v95;
    if (v93)
    {
      v65 = (unint64_t *)&v93->__shared_owners_;
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 - 1, v65));
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
        std::__shared_weak_count::__release_weak(v93);
      }
    }
    if (v96)
    {
      v67 = (unint64_t *)&v96->__shared_owners_;
      do
        v68 = __ldaxr(v67);
      while (__stlxr(v68 - 1, v67));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
        std::__shared_weak_count::__release_weak(v96);
      }
    }
  }
  v69 = (std::__shared_weak_count *)a1[43];
  if (v69)
  {
    v70 = (unint64_t *)&v69->__shared_owners_;
    do
      v71 = __ldxr(v70);
    while (__stxr(v71 + 1, v70));
  }
  v72 = *v5;
  if (v5[1] != *v5)
  {
    v73 = 0;
    do
    {
      v74 = *(const void **)(v72 + 16 * v73);
      if (v74
      {
        v76 = (uint64_t)v75;
        v104 = (void ***)v75;
        v77 = *(std::__shared_weak_count **)(v72 + 16 * v73 + 8);
        v105 = v77;
        if (v77)
        {
          v78 = (unint64_t *)&v77->__shared_owners_;
          do
            v79 = __ldxr(v78);
          while (__stxr(v79 + 1, v78));
        }
      }
      else
      {
        v76 = 0;
        v104 = 0;
        v105 = 0;
      }
      v80 = v100[0];
      v81 = v100[0][2 * v73];
      if (v81
      {
        v102 = v82;
        v83 = (std::__shared_weak_count *)v80[2 * v73 + 1];
        v103 = v83;
        if (v83)
        {
          v84 = (unint64_t *)&v83->__shared_owners_;
          do
            v85 = __ldxr(v84);
          while (__stxr(v85 + 1, v84));
        }
      }
      else
      {
        v83 = 0;
        v82 = 0;
        v102 = 0;
        v103 = 0;
      }
      v39.n128_u64[0] = Espresso::QuantSimEngine::blob_container::copy_from_fp32(v76, (uint64_t)v82 + 160, 1.0);
      if (v83)
      {
        v86 = (unint64_t *)&v83->__shared_owners_;
        do
          v87 = __ldaxr(v86);
        while (__stlxr(v87 - 1, v86));
        if (!v87)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v83->__on_zero_shared)(v83, v39);
          std::__shared_weak_count::__release_weak(v83);
        }
      }
      v88 = v105;
      if (v105)
      {
        v89 = (unint64_t *)&v105->__shared_owners_;
        do
          v90 = __ldaxr(v89);
        while (__stlxr(v90 - 1, v89));
        if (!v90)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v88->__on_zero_shared)(v88, v39);
          std::__shared_weak_count::__release_weak(v88);
        }
      }
      ++v73;
      v72 = *v5;
    }
    while (v73 < (v5[1] - *v5) >> 4);
  }
  if (v69)
  {
    v91 = (unint64_t *)&v69->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v69->__on_zero_shared)(v69, v39);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  v104 = v100;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v104);
  v100[0] = (void **)v101;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v100);
}

void sub_19162FC78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  *(_QWORD *)(v25 - 104) = &a22;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 104));
  a22 = (void **)&a25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a22);
  _Unwind_Resume(a1);
}

void *wrapper_kernel<Espresso::elementwise_kernel_cpu,Espresso::elementwise_params>::__set_weight_raw_blob(void *result, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  void *v7;
  int v8;
  uint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::runtime_error *exception;
  unint64_t v15;
  std::runtime_error *v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  std::string v39;
  _QWORD v40[2];
  unsigned __int8 v41;
  _QWORD v42[2];
  unsigned __int8 v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;

  v7 = result;
  v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10)
      return result;
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    v10 = (uint64_t)v7 + 352;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v10, (__int128 *)&v52);
    size = (std::__shared_weak_count *)v52.__r_.__value_.__l.__size_;
    if (v52.__r_.__value_.__l.__size_)
    {
      v12 = (unint64_t *)(v52.__r_.__value_.__l.__size_ + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    if (a5 != 4 * *(int *)(*(_QWORD *)v10 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      v15 = a5;
      v16 = exception;
      std::to_string(&v45, v15);
      v17 = std::string::insert(&v45, 0, "Unexpected size s=");
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      v19 = std::string::append(&v46, "/blob=");
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, 4 * *(int *)(*(_QWORD *)v10 + 8));
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v21 = &v44;
      else
        v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      else
        v22 = v44.__r_.__value_.__l.__size_;
      v23 = std::string::append(&v47, (const std::string::value_type *)v21, v22);
      v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, " @ ");
      if ((v43 & 0x80u) == 0)
        v25 = (const std::string::value_type *)v42;
      else
        v25 = (const std::string::value_type *)v42[0];
      if ((v43 & 0x80u) == 0)
        v26 = v43;
      else
        v26 = v42[1];
      v27 = std::string::append(&v48, v25, v26);
      v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      v29 = std::string::append(&v49, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v40, ":");
      if ((v41 & 0x80u) == 0)
        v31 = (const std::string::value_type *)v40;
      else
        v31 = (const std::string::value_type *)v40[0];
      if ((v41 & 0x80u) == 0)
        v32 = v41;
      else
        v32 = v40[1];
      v33 = std::string::append(&v50, v31, v32);
      v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, 197);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = &v39;
      else
        v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      else
        v36 = v39.__r_.__value_.__l.__size_;
      v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
      v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v16, &v52);
      __cxa_throw(v16, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    return memcpy(*(void **)(*(_QWORD *)v10 + 16), a4, a5);
  }
  return result;
}

void sub_191630030(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  void *v59;
  int v60;
  uint64_t v61;

  if (*(char *)(v61 - 57) < 0)
    operator delete(*(void **)(v61 - 80));
  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v61 - 89) < 0)
    operator delete(*(void **)(v61 - 112));
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v61 - 121) < 0)
    operator delete(*(void **)(v61 - 144));
  if (*(char *)(v61 - 153) < 0)
    operator delete(*(void **)(v61 - 176));
  if (a27 < 0)
    operator delete(a22);
  if (a59 < 0)
    operator delete(a54);
  if (a33 < 0)
    operator delete(a28);
  if (a52 < 0)
    operator delete(a47);
  if (a45 < 0)
    operator delete(a40);
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0)
LABEL_28:
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

BOOL wrapper_kernel<Espresso::elementwise_kernel_cpu,Espresso::elementwise_params>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2;

  v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10)
      return 0;
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

void wrapper_kernel<Espresso::elementwise_kernel_cpu,Espresso::elementwise_params>::convert_layer_data_to_fp32(_QWORD *a1, char **a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v9;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  const void *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  __int128 v43;
  int64x2_t v44;
  char *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  __int128 v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  int64x2_t v59;
  char *v60;
  _QWORD *v61;
  void *__p;
  void *v63;
  __int128 v64;
  const void *v65;
  std::__shared_weak_count *v66;

  if (a3 != a4)
  {
    v9 = a3;
    v12 = a2 + 2;
    while (1)
    {
      v14 = *(const void **)v9;
      v13 = *(std::__shared_weak_count **)(v9 + 8);
      v65 = *(const void **)v9;
      v66 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
      }
      v17 = operator new(0x118uLL);
      v17[1] = 0;
      v17[2] = 0;
      *v17 = &off_1E2DC1868;
      Espresso::blob_cpu::blob_cpu((uint64_t)(v17 + 3), a1);
      *(_QWORD *)&v64 = v17 + 3;
      *((_QWORD *)&v64 + 1) = v17;
      Espresso::abstract_blob_container::shape((char *)&v58, (uint64_t)v14);
      v56 = 0;
      v57 = 0;
      (*(void (**)(_QWORD *, uint64_t *, uint64_t *))(v17[3] + 16))(v17 + 3, &v58, &v56);
      v18 = v57;
      if (v57)
      {
        v19 = (unint64_t *)&v57->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if (__p)
      {
        v63 = __p;
        operator delete(__p);
      }
      if (v65)
      {
        if (v21)
          break;
      }
      v21 = 0;
      v55 = 0;
      if (a5)
        goto LABEL_21;
LABEL_28:
      v27 = v64;
      if (*((_QWORD *)&v64 + 1))
      {
        v28 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v31 = a2[1];
      v30 = (unint64_t)a2[2];
      if ((unint64_t)v31 >= v30)
      {
        v54 = v27;
        v33 = (v31 - *a2) >> 4;
        if ((unint64_t)(v33 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v34 = v30 - (_QWORD)*a2;
        v35 = v34 >> 3;
        if (v34 >> 3 <= (unint64_t)(v33 + 1))
          v35 = v33 + 1;
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0)
          v36 = 0xFFFFFFFFFFFFFFFLL;
        else
          v36 = v35;
        v61 = v12;
        v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v36);
        v39 = &v37[16 * v33];
        *(_OWORD *)v39 = v54;
        v41 = *a2;
        v40 = a2[1];
        if (v40 == *a2)
        {
          v44 = vdupq_n_s64((unint64_t)v40);
          v42 = &v37[16 * v33];
        }
        else
        {
          v42 = &v37[16 * v33];
          do
          {
            v43 = *((_OWORD *)v40 - 1);
            v40 -= 16;
            *((_OWORD *)v42 - 1) = v43;
            v42 -= 16;
            *(_QWORD *)v40 = 0;
            *((_QWORD *)v40 + 1) = 0;
          }
          while (v40 != v41);
          v44 = *(int64x2_t *)a2;
        }
        v32 = v39 + 16;
        *a2 = v42;
        a2[1] = v39 + 16;
        v59 = v44;
        v45 = a2[2];
        a2[2] = &v37[16 * v38];
        v60 = v45;
        v58 = v44.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v58);
      }
      else
      {
        *(_OWORD *)v31 = v27;
        v32 = v31 + 16;
      }
      a2[1] = v32;
      if (v55)
      {
        v46 = (unint64_t *)&v55->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      v48 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
      if (*((_QWORD *)&v64 + 1))
      {
        v49 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      v51 = v66;
      if (v66)
      {
        v52 = (unint64_t *)&v66->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v9 += 16;
      if (v9 == a4)
        return;
    }
    v55 = v66;
    if (v66)
    {
      v22 = (unint64_t *)&v66->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    if (!a5)
      goto LABEL_28;
LABEL_21:
    if (a6)
    {
      v58 = 0;
      v59.i64[0] = 0;
      (*(void (**)(void *, uint64_t *, uint64_t))(*(_QWORD *)v21 + 40))(v21, &v58, v64 + 160);
      v24 = (std::__shared_weak_count *)v59.i64[0];
      if (v59.i64[0])
      {
        v25 = (unint64_t *)(v59.i64[0] + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v21, v64 + 160, 1.0);
    }
    goto LABEL_28;
  }
}

void sub_19163058C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::elementwise_kernel_cpu,Espresso::elementwise_params>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB4DA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::elementwise_kernel_cpu,Espresso::elementwise_params>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB4DA0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::elementwise_kernel_cpu,Espresso::elementwise_params>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_4@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  __n128 result;

  v6 = operator new(0x450uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DB42B0;
  Espresso::inner_product_kernel_cpu::inner_product_kernel_cpu((uint64_t)(v6 + 3), a1, v7, a2);
  *((_OWORD *)v6 + 66) = 0u;
  *((_OWORD *)v6 + 65) = 0u;
  *((_OWORD *)v6 + 63) = 0u;
  *((_OWORD *)v6 + 64) = 0u;
  *((_OWORD *)v6 + 61) = 0u;
  *((_OWORD *)v6 + 62) = 0u;
  v6[3] = &off_1E2D4E2F8;
  *((_OWORD *)v6 + 67) = 0u;
  *((_OWORD *)v6 + 68) = 0u;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v6 + 134, *a1, a1[1]);
  result.n128_u64[0] = (unint64_t)(v6 + 3);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1916306F8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void wrapper_kernel<wrapper_kernel_with_weights<Espresso::inner_product_kernel_cpu,Espresso::inner_product_uniforms>,Espresso::inner_product_uniforms>::~wrapper_kernel(Espresso::inner_product_kernel_cpu *a1)
{
  *(_QWORD *)a1 = &off_1E2D4E2F8;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 1064);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 1048);
  *(_QWORD *)a1 = &off_1E2D57658;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 1032);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 1016);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 1000);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 984);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 968);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 952);
  Espresso::inner_product_kernel_cpu::~inner_product_kernel_cpu(a1);
}

{
  *(_QWORD *)a1 = &off_1E2D4E2F8;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 1064);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 1048);
  *(_QWORD *)a1 = &off_1E2D57658;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 1032);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 1016);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 1000);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 984);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 968);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 952);
  Espresso::inner_product_kernel_cpu::~inner_product_kernel_cpu(a1);
  JUMPOUT(0x19401CD90);
}

void wrapper_kernel<wrapper_kernel_with_weights<Espresso::inner_product_kernel_cpu,Espresso::inner_product_uniforms>,Espresso::inner_product_uniforms>::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  _BOOL4 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  float *v31;
  vDSP_Length v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  __n128 v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  void **v45;
  void **v46;
  void **v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  int *v53;
  float *v54;
  vDSP_Length v55;
  int *v56;
  int v57;
  int v58;
  uint64_t v59;
  unint64_t v60;
  vDSP_Length v61;
  vDSP_Length v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  const void *v75;
  void **v76;
  uint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  void **v81;
  const void *v82;
  void *v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  uint64_t v95;
  std::__shared_weak_count *v96;
  float __B;
  _QWORD v98[2];
  _QWORD v99[2];
  void **v100[3];
  char *v101[3];
  void *v102;
  std::__shared_weak_count *v103;
  void ***v104;
  std::__shared_weak_count *v105;

  memset(v101, 0, sizeof(v101));
  memset(v100, 0, sizeof(v100));
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)*a3 + 32))(*(_QWORD *)*a3))
    v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)*a3 + 32))(*(_QWORD *)*a3) == 1;
  else
    v8 = 1;
  v9 = *(std::__shared_weak_count **)(a1 + 1056);
  v99[0] = *(_QWORD *)(a1 + 1048);
  v99[1] = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  wrapper_kernel<wrapper_kernel_with_weights<Espresso::inner_product_kernel_cpu,Espresso::inner_product_uniforms>,Espresso::inner_product_uniforms>::convert_layer_data_to_fp32(v99, v101, *a4, a4[1], 1, v8);
  if (v9)
  {
    v12 = (unint64_t *)&v9->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v14 = *(std::__shared_weak_count **)(a1 + 1056);
  v98[0] = *(_QWORD *)(a1 + 1048);
  v98[1] = v14;
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  wrapper_kernel<wrapper_kernel_with_weights<Espresso::inner_product_kernel_cpu,Espresso::inner_product_uniforms>,Espresso::inner_product_uniforms>::convert_layer_data_to_fp32(v98, (char **)v100, *a3, a3[1], 0, 0);
  if (v14)
  {
    v17 = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v95 = a1;
  v19 = *a4;
  if (a4[1] != *a4)
  {
    v20 = 0;
    do
    {
      if (!v8
        && (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v19 + 16 * v20) + 32))(*(_QWORD *)(v19 + 16 * v20))
         || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(*a4 + 16 * v20) + 32))(*(_QWORD *)(*a4 + 16 * v20)) == 1))
      {
        __B = *(float *)(*(_QWORD *)(*a4 + 16 * v20) + 112);
        v21 = &v101[0][16 * v20];
        v104 = (void ***)v22;
        v23 = (std::__shared_weak_count *)*((_QWORD *)v21 + 1);
        v105 = v23;
        if (v23)
        {
          v24 = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
        }
        v26 = *((_QWORD *)v22 + 20);
        v27 = (std::__shared_weak_count *)*((_QWORD *)v22 + 21);
        v102 = (void *)v26;
        v103 = v27;
        if (v27)
        {
          v28 = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldxr(v28);
          while (__stxr(v29 + 1, v28));
        }
        v30 = 0;
        v31 = *(float **)(v26 + 24);
        v32 = *(int *)(v26 + 8);
        v33 = v26 + 12;
        do
        {
          v32 *= *(int *)(v33 + v30);
          v30 += 4;
        }
        while (v30 != 12);
        vDSP_vsmul(v31, 1, &__B, v31, 1, v32);
        if (v27)
        {
          v34 = (unint64_t *)&v27->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        v36 = v105;
        if (v105)
        {
          v37 = (unint64_t *)&v105->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
      }
      ++v20;
      v19 = *a4;
    }
    while (v20 < (a4[1] - *a4) >> 4);
  }
  v39 = v95;
  wrapper_kernel_with_weights<Espresso::inner_product_kernel_cpu,Espresso::inner_product_uniforms>::__launch(v95, a2, (uint64_t)v100, (uint64_t)v101);
  v41 = *(_QWORD *)(v95 + 1064);
  if (v41)
  {
    v42 = *(std::__shared_weak_count **)(v95 + 1072);
    v96 = v42;
    if (v42)
    {
      v43 = (unint64_t *)&v42->__shared_owners_;
      do
        v44 = __ldxr(v43);
      while (__stxr(v44 + 1, v43));
    }
    v45 = v100[0];
    if (*v100[0]
    {
      v47 = v46;
      v48 = (std::__shared_weak_count *)v45[1];
      v104 = (void ***)v46;
      v105 = v48;
      if (v48)
      {
        v49 = (unint64_t *)&v48->__shared_owners_;
        do
          v50 = __ldxr(v49);
        while (__stxr(v50 + 1, v49));
      }
    }
    else
    {
      v48 = 0;
      v47 = 0;
      v104 = 0;
      v105 = 0;
    }
    LODWORD(v51) = *(_DWORD *)(v41 + 8);
    v94 = v48;
    if ((_DWORD)v51 == 1)
    {
      v52 = 0;
      v53 = (int *)v47[20];
      v54 = (float *)*((_QWORD *)v53 + 3);
      v55 = v53[2];
      v56 = v53 + 3;
      do
        v55 *= v56[v52++];
      while (v52 != 3);
      vDSP_vsmul(v54, 1, *(const float **)(v41 + 16), v54, 1, v55);
    }
    else
    {
      v57 = *((_DWORD *)v47 + 4);
      if ((_DWORD)v51 != v57)
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v51, v57);
      v58 = *((_DWORD *)v47 + 5);
      if (v58)
      {
        v59 = 0;
        v60 = 0;
        v61 = *((int *)v47 + 2) * (uint64_t)*((int *)v47 + 3);
        v62 = 4 * (int)v51 * v61;
        do
        {
          if ((_DWORD)v51)
          {
            v63 = 0;
            v64 = 0;
            v65 = v59;
            do
            {
              vDSP_vsmul((const float *)(*((_QWORD *)v47[20] + 3) + v65), 1, (const float *)(*(_QWORD *)(v41 + 16) + v63), (float *)(*((_QWORD *)v47[20] + 3) + v65), 1, v61);
              ++v64;
              v51 = *((int *)v47 + 4);
              v63 += 4;
              v65 += 4 * v61;
            }
            while (v64 < v51);
            v58 = *((_DWORD *)v47 + 5);
          }
          ++v60;
          v59 += v62;
        }
        while (v60 < v58);
      }
    }
    v39 = v95;
    if (v94)
    {
      v66 = (unint64_t *)&v94->__shared_owners_;
      do
        v67 = __ldaxr(v66);
      while (__stlxr(v67 - 1, v66));
      if (!v67)
      {
        ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
        std::__shared_weak_count::__release_weak(v94);
      }
    }
    if (v96)
    {
      v68 = (unint64_t *)&v96->__shared_owners_;
      do
        v69 = __ldaxr(v68);
      while (__stlxr(v69 - 1, v68));
      if (!v69)
      {
        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
        std::__shared_weak_count::__release_weak(v96);
      }
    }
  }
  v70 = *(std::__shared_weak_count **)(v39 + 1056);
  if (v70)
  {
    v71 = (unint64_t *)&v70->__shared_owners_;
    do
      v72 = __ldxr(v71);
    while (__stxr(v72 + 1, v71));
  }
  v73 = *a3;
  if (a3[1] != *a3)
  {
    v74 = 0;
    do
    {
      v75 = *(const void **)(v73 + 16 * v74);
      if (v75
      {
        v77 = (uint64_t)v76;
        v104 = (void ***)v76;
        v78 = *(std::__shared_weak_count **)(v73 + 16 * v74 + 8);
        v105 = v78;
        if (v78)
        {
          v79 = (unint64_t *)&v78->__shared_owners_;
          do
            v80 = __ldxr(v79);
          while (__stxr(v80 + 1, v79));
        }
      }
      else
      {
        v77 = 0;
        v104 = 0;
        v105 = 0;
      }
      v81 = v100[0];
      v82 = v100[0][2 * v74];
      if (v82
      {
        v102 = v83;
        v84 = (std::__shared_weak_count *)v81[2 * v74 + 1];
        v103 = v84;
        if (v84)
        {
          v85 = (unint64_t *)&v84->__shared_owners_;
          do
            v86 = __ldxr(v85);
          while (__stxr(v86 + 1, v85));
        }
      }
      else
      {
        v84 = 0;
        v83 = 0;
        v102 = 0;
        v103 = 0;
      }
      v40.n128_u64[0] = Espresso::QuantSimEngine::blob_container::copy_from_fp32(v77, (uint64_t)v83 + 160, 1.0);
      if (v84)
      {
        v87 = (unint64_t *)&v84->__shared_owners_;
        do
          v88 = __ldaxr(v87);
        while (__stlxr(v88 - 1, v87));
        if (!v88)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v84->__on_zero_shared)(v84, v40);
          std::__shared_weak_count::__release_weak(v84);
        }
      }
      v89 = v105;
      if (v105)
      {
        v90 = (unint64_t *)&v105->__shared_owners_;
        do
          v91 = __ldaxr(v90);
        while (__stlxr(v91 - 1, v90));
        if (!v91)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v89->__on_zero_shared)(v89, v40);
          std::__shared_weak_count::__release_weak(v89);
        }
      }
      ++v74;
      v73 = *a3;
    }
    while (v74 < (a3[1] - *a3) >> 4);
  }
  if (v70)
  {
    v92 = (unint64_t *)&v70->__shared_owners_;
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v70->__on_zero_shared)(v70, v40);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  v104 = v100;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v104);
  v100[0] = (void **)v101;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v100);
}

void sub_191630EF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  *(_QWORD *)(v25 - 104) = &a22;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 104));
  a22 = (void **)&a25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a22);
  _Unwind_Resume(a1);
}

void wrapper_kernel<wrapper_kernel_with_weights<Espresso::inner_product_kernel_cpu,Espresso::inner_product_uniforms>,Espresso::inner_product_uniforms>::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, unint64_t a5, uint64_t *a6)
{
  uint64_t v8;
  int v10;
  uint64_t v12;
  std::__shared_weak_count *size;
  unint64_t *v14;
  unint64_t v15;
  std::runtime_error *exception;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  std::string v39;
  _QWORD v40[2];
  unsigned __int8 v41;
  _QWORD v42[2];
  unsigned __int8 v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;

  v8 = a3;
  wrapper_kernel_with_weights<Espresso::inner_product_kernel_cpu,Espresso::inner_product_uniforms>::__set_weight_raw_blob(a1, a2, a3, a4, a5, a6);
  v10 = *(char *)(v8 + 23);
  if (v10 < 0)
  {
    if (*(_QWORD *)(v8 + 8) != 10)
      return;
    v8 = *(_QWORD *)v8;
  }
  else if (v10 != 10)
  {
    return;
  }
  if (*(_QWORD *)v8 == 0x6163735F74736F70 && *(_WORD *)(v8 + 8) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    v12 = a1 + 1064;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v12, (__int128 *)&v52);
    size = (std::__shared_weak_count *)v52.__r_.__value_.__l.__size_;
    if (v52.__r_.__value_.__l.__size_)
    {
      v14 = (unint64_t *)(v52.__r_.__value_.__l.__size_ + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    if (a5 != 4 * *(int *)(*(_QWORD *)v12 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v45, a5);
      v17 = std::string::insert(&v45, 0, "Unexpected size s=");
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      v19 = std::string::append(&v46, "/blob=");
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, 4 * *(int *)(*(_QWORD *)v12 + 8));
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v21 = &v44;
      else
        v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      else
        v22 = v44.__r_.__value_.__l.__size_;
      v23 = std::string::append(&v47, (const std::string::value_type *)v21, v22);
      v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, " @ ");
      if ((v43 & 0x80u) == 0)
        v25 = (const std::string::value_type *)v42;
      else
        v25 = (const std::string::value_type *)v42[0];
      if ((v43 & 0x80u) == 0)
        v26 = v43;
      else
        v26 = v42[1];
      v27 = std::string::append(&v48, v25, v26);
      v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      v29 = std::string::append(&v49, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v40, ":");
      if ((v41 & 0x80u) == 0)
        v31 = (const std::string::value_type *)v40;
      else
        v31 = (const std::string::value_type *)v40[0];
      if ((v41 & 0x80u) == 0)
        v32 = v41;
      else
        v32 = v40[1];
      v33 = std::string::append(&v50, v31, v32);
      v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, 197);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = &v39;
      else
        v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      else
        v36 = v39.__r_.__value_.__l.__size_;
      v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
      v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v52);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    memcpy(*(void **)(*(_QWORD *)v12 + 16), a4, a5);
  }
}

void sub_1916312B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  void *v59;
  int v60;
  uint64_t v61;

  if (*(char *)(v61 - 57) < 0)
    operator delete(*(void **)(v61 - 80));
  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v61 - 89) < 0)
    operator delete(*(void **)(v61 - 112));
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v61 - 121) < 0)
    operator delete(*(void **)(v61 - 144));
  if (*(char *)(v61 - 153) < 0)
    operator delete(*(void **)(v61 - 176));
  if (a27 < 0)
    operator delete(a22);
  if (a59 < 0)
    operator delete(a54);
  if (a33 < 0)
    operator delete(a28);
  if (a52 < 0)
    operator delete(a47);
  if (a45 < 0)
    operator delete(a40);
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0)
LABEL_28:
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

void wrapper_kernel_with_weights<Espresso::inner_product_kernel_cpu,Espresso::inner_product_uniforms>::__set_weights_finalize(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  double v9;
  float v10;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  float v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  __int128 v39;
  uint64_t v40[2];
  uint64_t v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  int v47;
  uint64_t v48;
  std::__shared_weak_count *v49;

  v2 = a1[68];
  v3 = (std::__shared_weak_count *)a1[69];
  v48 = v2;
  v49 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  if (v2)
  {
    if (a1[121])
      goto LABEL_61;
    if (!a1[123])
    {
      if (a1[119])
      {
        v18 = a1[125];
        if (v18)
        {
          v19 = **(float **)(v18 + 16);
          v20 = (std::__shared_weak_count *)a1[120];
          v41 = a1[119];
          v42 = v20;
          if (v20)
          {
            v21 = (unint64_t *)&v20->__shared_owners_;
            do
              v22 = __ldxr(v21);
            while (__stxr(v22 + 1, v21));
          }
          v40[0] = v2;
          v40[1] = (uint64_t)v3;
          if (v3)
          {
            v23 = (unint64_t *)&v3->__shared_owners_;
            do
              v24 = __ldxr(v23);
            while (__stxr(v24 + 1, v23));
          }
          Espresso::ane_style_post_scale_bias((uint64_t)&v41, v40, (uint64_t)&v43, v19);
          if (v3)
          {
            v25 = (unint64_t *)&v3->__shared_owners_;
            do
              v26 = __ldaxr(v25);
            while (__stlxr(v26 - 1, v25));
            if (!v26)
            {
              ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
              std::__shared_weak_count::__release_weak(v3);
            }
          }
          v27 = v42;
          if (v42)
          {
            v28 = (unint64_t *)&v42->__shared_owners_;
            do
              v29 = __ldaxr(v28);
            while (__stlxr(v29 - 1, v28));
            if (!v29)
            {
              ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
              std::__shared_weak_count::__release_weak(v27);
            }
          }
          std::allocate_shared[abi:ne180100]<Espresso::blob<int,1>,std::allocator<Espresso::blob<int,1>>,int &,int &,int &,int &,void>(&v39, 1, 1, 1, 1);
          std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)(a1 + 123), &v39);
          v30 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
          if (*((_QWORD *)&v39 + 1))
          {
            v31 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
            do
              v32 = __ldaxr(v31);
            while (__stlxr(v32 - 1, v31));
            if (!v32)
            {
              ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
              std::__shared_weak_count::__release_weak(v30);
            }
          }
          **(_DWORD **)(a1[123] + 16) = v47;
          std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](a1 + 121, v45, (uint64_t)v46);
          v33 = v46;
          if (v46)
          {
            v34 = (unint64_t *)&v46->__shared_owners_;
            do
              v35 = __ldaxr(v34);
            while (__stlxr(v35 - 1, v34));
            if (!v35)
            {
              ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
              std::__shared_weak_count::__release_weak(v33);
            }
          }
          v36 = v44;
          if (v44)
          {
            v37 = (unint64_t *)&v44->__shared_owners_;
            do
              v38 = __ldaxr(v37);
            while (__stlxr(v38 - 1, v37));
            if (!v38)
            {
              ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
              std::__shared_weak_count::__release_weak(v36);
            }
          }
          if (v48 && a1[121])
          {
LABEL_61:
            if (a1[123])
            {
              v6 = a1[119];
              if (v6)
              {
                std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v43, *(_DWORD *)(v6 + 8), 1, 1, 1);
                v7 = v43;
                if (*(_DWORD *)(v43 + 8))
                {
                  v8 = 0;
                  do
                  {
                    v9 = *(float *)(*(_QWORD *)(a1[121] + 16) + 4 * v8);
                    v10 = ldexp(1.0, **(_DWORD **)(a1[123] + 16)) * v9;
                    *(float *)(*(_QWORD *)(v7 + 16) + 4 * v8++) = v10;
                  }
                  while (v8 < *(unsigned int *)(v7 + 8));
                }
                v11 = a1 + 129;
                v12 = v44;
                std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v11, v7, (uint64_t)v44);
                if (v12)
                {
                  v13 = (unint64_t *)&v12->__shared_owners_;
                  do
                    v14 = __ldaxr(v13);
                  while (__stlxr(v14 - 1, v13));
                  if (!v14)
                  {
                    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
                    std::__shared_weak_count::__release_weak(v12);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  v15 = v49;
  if (v49)
  {
    v16 = (unint64_t *)&v49->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_19163176C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  uint64_t v10;
  va_list va;
  uint64_t v12;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v8 - 64);
  _Unwind_Resume(a1);
}

BOOL wrapper_kernel<wrapper_kernel_with_weights<Espresso::inner_product_kernel_cpu,Espresso::inner_product_uniforms>,Espresso::inner_product_uniforms>::supports_weight_key(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v4;

  v2 = a2;
  if ((wrapper_kernel_with_weights<Espresso::inner_product_kernel_cpu,Espresso::inner_product_uniforms>::supports_weight_key(a1, a2) & 1) != 0)return 1;
  v4 = *(char *)(v2 + 23);
  if (v4 < 0)
  {
    if (*(_QWORD *)(v2 + 8) != 10)
      return 0;
    v2 = *(_QWORD *)v2;
  }
  else if (v4 != 10)
  {
    return 0;
  }
  return *(_QWORD *)v2 == 0x6163735F74736F70 && *(_WORD *)(v2 + 8) == 25964;
}

uint64_t Espresso::inner_product_kernel_cpu::get_biases@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 552);
  *a2 = *(_QWORD *)(this + 544);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

_QWORD *Espresso::inner_product_kernel_cpu::get_weights@<X0>(_QWORD *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v2 = this[70];
  if (v2)
  {
    v3 = this[71];
  }
  else
  {
    v2 = this[64];
    v3 = this[65];
  }
  *a2 = v2;
  a2[1] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return this;
}

uint64_t wrapper_kernel_with_weights<Espresso::inner_product_kernel_cpu,Espresso::inner_product_uniforms>::supports_weight_key(uint64_t a1, uint64_t a2)
{
  int v2;
  unint64_t v3;
  uint64_t v5;
  uint64_t v8;
  __int128 v9;
  uint64_t v13;
  int v14;

  if ((*(char *)(a2 + 23) & 0x80000000) == 0)
  {
    v2 = *(unsigned __int8 *)(a2 + 23);
    HIDWORD(v3) = v2;
    LODWORD(v3) = (v2 << 24) - 0x4000000;
    switch((v3 >> 25))
    {
      case 0u:
        if (*(_DWORD *)a2 == 944987991)
          return 1;
        if (v2 == 8)
          goto LABEL_14;
        if (v2 == 18)
          goto LABEL_17;
        if (v2 != 10)
          return Espresso::inner_product_kernel_cpu::supports_weight_key(a1, a2);
LABEL_7:
        if (*(_QWORD *)a2 == 0x6163735F74736F70 && *(_WORD *)(a2 + 8) == 25964)
          return 1;
        if (v2 == 18)
          goto LABEL_17;
        v5 = a2;
        if (v2 == 10)
          goto LABEL_46;
        if (v2 != 8)
          return Espresso::inner_product_kernel_cpu::supports_weight_key(a1, a2);
LABEL_14:
        if (*(_QWORD *)a2 == 0x736169625F656E61)
          return 1;
        v5 = a2;
        if (v2 == 10)
          goto LABEL_46;
        if (v2 != 18)
          return Espresso::inner_product_kernel_cpu::supports_weight_key(a1, a2);
LABEL_17:
        if (*(_QWORD *)a2 == 0x5F6363615F656E61
          && *(_QWORD *)(a2 + 8) == 0x6968735F73616962
          && *(_WORD *)(a2 + 16) == 29798)
        {
          return 1;
        }
        v5 = a2;
        if (v2 != 10)
          return Espresso::inner_product_kernel_cpu::supports_weight_key(a1, a2);
        goto LABEL_46;
      case 2u:
        goto LABEL_14;
      case 3u:
        goto LABEL_7;
      case 7u:
        goto LABEL_17;
      default:
        return Espresso::inner_product_kernel_cpu::supports_weight_key(a1, a2);
    }
  }
  v8 = *(_QWORD *)(a2 + 8);
  *((_QWORD *)&v9 + 1) = v8;
  *(_QWORD *)&v9 = v8 - 4;
  switch((unint64_t)(v9 >> 1))
  {
    case 0uLL:
      if (**(_DWORD **)a2 != 944987991)
        return Espresso::inner_product_kernel_cpu::supports_weight_key(a1, a2);
      return 1;
    case 2uLL:
      goto LABEL_34;
    case 3uLL:
      if (**(_QWORD **)a2 == 0x6163735F74736F70 && *(_WORD *)(*(_QWORD *)a2 + 8) == 25964)
        return 1;
      if (v8 != 8)
        goto LABEL_35;
LABEL_34:
      if (**(_QWORD **)a2 == 0x736169625F656E61)
        return 1;
LABEL_35:
      if (v8 == 10)
        goto LABEL_45;
      if (v8 != 18)
        return Espresso::inner_product_kernel_cpu::supports_weight_key(a1, a2);
LABEL_37:
      if (**(_QWORD **)a2 == 0x5F6363615F656E61
        && *(_QWORD *)(*(_QWORD *)a2 + 8) == 0x6968735F73616962
        && *(_WORD *)(*(_QWORD *)a2 + 16) == 29798)
      {
        return 1;
      }
      if (v8 != 10)
        return Espresso::inner_product_kernel_cpu::supports_weight_key(a1, a2);
LABEL_45:
      v5 = *(_QWORD *)a2;
LABEL_46:
      v13 = *(_QWORD *)v5;
      v14 = *(unsigned __int16 *)(v5 + 8);
      if (v13 == 0x61727478655F7868 && v14 == 26207)
        return 1;
      else
        return Espresso::inner_product_kernel_cpu::supports_weight_key(a1, a2);
    case 7uLL:
      goto LABEL_37;
    default:
      return Espresso::inner_product_kernel_cpu::supports_weight_key(a1, a2);
  }
}

void wrapper_kernel_with_weights<Espresso::inner_product_kernel_cpu,Espresso::inner_product_uniforms>::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, unint64_t a5, uint64_t *a6)
{
  unint64_t v6;
  char *v7;
  int v9;
  unint64_t v10;
  uint64_t v12;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  std::__shared_weak_count *size;
  unint64_t *v19;
  unint64_t v20;
  float *v21;
  int v22;
  uint64_t v26;
  int v27;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  std::runtime_error *v34;
  std::string *v35;
  __int128 v36;
  std::string *v37;
  __int128 v38;
  std::string *v39;
  std::string::size_type v40;
  std::string *v41;
  __int128 v42;
  const std::string::value_type *v43;
  std::string::size_type v44;
  std::string *v45;
  __int128 v46;
  std::string *v47;
  __int128 v48;
  const std::string::value_type *v49;
  std::string::size_type v50;
  std::string *v51;
  __int128 v52;
  std::string *v53;
  std::string::size_type v54;
  std::string *v55;
  __int128 v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::runtime_error *v61;
  std::string *v62;
  __int128 v63;
  std::string *v64;
  __int128 v65;
  std::string *v66;
  std::string::size_type v67;
  std::string *v68;
  __int128 v69;
  const std::string::value_type *v70;
  std::string::size_type v71;
  std::string *v72;
  __int128 v73;
  std::string *v74;
  __int128 v75;
  const std::string::value_type *v76;
  std::string::size_type v77;
  std::string *v78;
  __int128 v79;
  std::string *v80;
  std::string::size_type v81;
  std::string *v82;
  __int128 v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::runtime_error *exception;
  std::string *v89;
  __int128 v90;
  std::string *v91;
  __int128 v92;
  std::string *v93;
  std::string::size_type v94;
  std::string *v95;
  __int128 v96;
  const std::string::value_type *v97;
  std::string::size_type v98;
  std::string *v99;
  __int128 v100;
  std::string *v101;
  __int128 v102;
  const std::string::value_type *v103;
  std::string::size_type v104;
  std::string *v105;
  __int128 v106;
  std::string *v107;
  std::string::size_type v108;
  std::string *v109;
  __int128 v110;
  uint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  std::runtime_error *v115;
  std::string *v116;
  __int128 v117;
  std::string *v118;
  __int128 v119;
  std::string *v120;
  std::string::size_type v121;
  std::string *v122;
  __int128 v123;
  const std::string::value_type *v124;
  std::string::size_type v125;
  std::string *v126;
  __int128 v127;
  std::string *v128;
  __int128 v129;
  const std::string::value_type *v130;
  std::string::size_type v131;
  std::string *v132;
  __int128 v133;
  std::string *v134;
  std::string::size_type v135;
  std::string *v136;
  __int128 v137;
  std::string v138;
  const std::string::value_type *v139;
  std::string::size_type v140;
  unsigned __int8 v141;
  const std::string::value_type *v142;
  std::string::size_type v143;
  unsigned __int8 v144;
  std::string v145;
  std::string v146;
  std::string v147;
  std::string v148;
  std::string v149;
  std::string v150;
  std::string v151;
  std::string v152;
  std::string v153;

  v6 = a5;
  v7 = a4;
  if ((*(char *)(a3 + 23) & 0x80000000) == 0)
  {
    v9 = *(unsigned __int8 *)(a3 + 23);
    HIDWORD(v10) = v9;
    LODWORD(v10) = (v9 << 24) - 0x4000000;
    switch((v10 >> 25))
    {
      case 0u:
        if (*(_DWORD *)a3 == 944987991)
          goto LABEL_28;
        if (v9 == 8)
          goto LABEL_14;
        if (v9 == 18)
          goto LABEL_17;
        if (v9 != 10)
          goto LABEL_58;
LABEL_7:
        if (*(_QWORD *)a3 == 0x6163735F74736F70 && *(_WORD *)(a3 + 8) == 25964)
          goto LABEL_121;
        if (v9 == 18)
          goto LABEL_17;
        v12 = a3;
        if (v9 == 10)
          goto LABEL_54;
        if (v9 != 8)
          goto LABEL_58;
LABEL_14:
        if (*(_QWORD *)a3 == 0x736169625F656E61)
          goto LABEL_59;
        v12 = a3;
        if (v9 == 10)
          goto LABEL_54;
        if (v9 != 18)
          goto LABEL_58;
LABEL_17:
        if (*(_QWORD *)a3 == 0x5F6363615F656E61
          && *(_QWORD *)(a3 + 8) == 0x6968735F73616962
          && *(_WORD *)(a3 + 16) == 29798)
        {
          goto LABEL_90;
        }
        v12 = a3;
        if (v9 != 10)
          goto LABEL_58;
        goto LABEL_54;
      case 2u:
        goto LABEL_14;
      case 3u:
        goto LABEL_7;
      case 7u:
        goto LABEL_17;
      default:
        goto LABEL_58;
    }
  }
  v15 = *(_QWORD *)(a3 + 8);
  *((_QWORD *)&v16 + 1) = v15;
  *(_QWORD *)&v16 = v15 - 4;
  switch((unint64_t)(v16 >> 1))
  {
    case 0uLL:
      if (**(_DWORD **)a3 != 944987991)
        goto LABEL_58;
LABEL_28:
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,2>,std::allocator<Espresso::blob<float,2>>,int &,int &,int &,int &,void>(&v153, *(_DWORD *)(a1 + 308), *(_DWORD *)(a1 + 304), 1, 1);
      v17 = a1 + 1016;
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v17, (__int128 *)&v153);
      size = (std::__shared_weak_count *)v153.__r_.__value_.__l.__size_;
      if (v153.__r_.__value_.__l.__size_)
      {
        v19 = (unint64_t *)(v153.__r_.__value_.__l.__size_ + 8);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
      if (v6)
      {
        v21 = *(float **)(*(_QWORD *)v17 + 16);
        do
        {
          v22 = *v7++;
          *v21++ = (float)v22;
          --v6;
        }
        while (v6);
      }
      return;
    case 2uLL:
      goto LABEL_42;
    case 3uLL:
      if (**(_QWORD **)a3 == 0x6163735F74736F70 && *(_WORD *)(*(_QWORD *)a3 + 8) == 25964)
      {
LABEL_121:
        std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v153, (unint64_t)(int)a5 >> 2, 1, 1, 1);
        v84 = a1 + 952;
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v84, (__int128 *)&v153);
        v85 = (std::__shared_weak_count *)v153.__r_.__value_.__l.__size_;
        if (v153.__r_.__value_.__l.__size_)
        {
          v86 = (unint64_t *)(v153.__r_.__value_.__l.__size_ + 8);
          do
            v87 = __ldaxr(v86);
          while (__stlxr(v87 - 1, v86));
          if (!v87)
          {
            ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
            std::__shared_weak_count::__release_weak(v85);
          }
        }
        v33 = *(_QWORD *)v84;
        if (v6 != 4 * *(int *)(*(_QWORD *)v84 + 8))
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::to_string(&v146, v6);
          v89 = std::string::insert(&v146, 0, "Unexpected size s=");
          v90 = *(_OWORD *)&v89->__r_.__value_.__l.__data_;
          v147.__r_.__value_.__r.__words[2] = v89->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v147.__r_.__value_.__l.__data_ = v90;
          v89->__r_.__value_.__l.__size_ = 0;
          v89->__r_.__value_.__r.__words[2] = 0;
          v89->__r_.__value_.__r.__words[0] = 0;
          v91 = std::string::append(&v147, "/blob=");
          v92 = *(_OWORD *)&v91->__r_.__value_.__l.__data_;
          v148.__r_.__value_.__r.__words[2] = v91->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v148.__r_.__value_.__l.__data_ = v92;
          v91->__r_.__value_.__l.__size_ = 0;
          v91->__r_.__value_.__r.__words[2] = 0;
          v91->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v145, 4 * *(int *)(*(_QWORD *)v84 + 8));
          if ((v145.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v93 = &v145;
          else
            v93 = (std::string *)v145.__r_.__value_.__r.__words[0];
          if ((v145.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v94 = HIBYTE(v145.__r_.__value_.__r.__words[2]);
          else
            v94 = v145.__r_.__value_.__l.__size_;
          v95 = std::string::append(&v148, (const std::string::value_type *)v93, v94);
          v96 = *(_OWORD *)&v95->__r_.__value_.__l.__data_;
          v149.__r_.__value_.__r.__words[2] = v95->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v96;
          v95->__r_.__value_.__l.__size_ = 0;
          v95->__r_.__value_.__r.__words[2] = 0;
          v95->__r_.__value_.__r.__words[0] = 0;
          std::string::basic_string[abi:ne180100]<0>(&v142, " @ ");
          if ((v144 & 0x80u) == 0)
            v97 = (const std::string::value_type *)&v142;
          else
            v97 = v142;
          if ((v144 & 0x80u) == 0)
            v98 = v144;
          else
            v98 = v143;
          v99 = std::string::append(&v149, v97, v98);
          v100 = *(_OWORD *)&v99->__r_.__value_.__l.__data_;
          v150.__r_.__value_.__r.__words[2] = v99->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v150.__r_.__value_.__l.__data_ = v100;
          v99->__r_.__value_.__l.__size_ = 0;
          v99->__r_.__value_.__r.__words[2] = 0;
          v99->__r_.__value_.__r.__words[0] = 0;
          v101 = std::string::append(&v150, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
          v102 = *(_OWORD *)&v101->__r_.__value_.__l.__data_;
          v151.__r_.__value_.__r.__words[2] = v101->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v151.__r_.__value_.__l.__data_ = v102;
          v101->__r_.__value_.__l.__size_ = 0;
          v101->__r_.__value_.__r.__words[2] = 0;
          v101->__r_.__value_.__r.__words[0] = 0;
          std::string::basic_string[abi:ne180100]<0>(&v139, ":");
          if ((v141 & 0x80u) == 0)
            v103 = (const std::string::value_type *)&v139;
          else
            v103 = v139;
          if ((v141 & 0x80u) == 0)
            v104 = v141;
          else
            v104 = v140;
          v105 = std::string::append(&v151, v103, v104);
          v106 = *(_OWORD *)&v105->__r_.__value_.__l.__data_;
          v152.__r_.__value_.__r.__words[2] = v105->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v152.__r_.__value_.__l.__data_ = v106;
          v105->__r_.__value_.__l.__size_ = 0;
          v105->__r_.__value_.__r.__words[2] = 0;
          v105->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v138, 123);
          if ((v138.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v107 = &v138;
          else
            v107 = (std::string *)v138.__r_.__value_.__r.__words[0];
          if ((v138.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v108 = HIBYTE(v138.__r_.__value_.__r.__words[2]);
          else
            v108 = v138.__r_.__value_.__l.__size_;
          v109 = std::string::append(&v152, (const std::string::value_type *)v107, v108);
          v110 = *(_OWORD *)&v109->__r_.__value_.__l.__data_;
          v153.__r_.__value_.__r.__words[2] = v109->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v153.__r_.__value_.__l.__data_ = v110;
          v109->__r_.__value_.__l.__size_ = 0;
          v109->__r_.__value_.__r.__words[2] = 0;
          v109->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(exception, &v153);
          __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        goto LABEL_158;
      }
      if (v15 != 8)
        goto LABEL_43;
LABEL_42:
      if (**(_QWORD **)a3 == 0x736169625F656E61)
      {
LABEL_59:
        std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v153, (unint64_t)(int)a5 >> 2, 1, 1, 1);
        v29 = a1 + 968;
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v29, (__int128 *)&v153);
        v30 = (std::__shared_weak_count *)v153.__r_.__value_.__l.__size_;
        if (v153.__r_.__value_.__l.__size_)
        {
          v31 = (unint64_t *)(v153.__r_.__value_.__l.__size_ + 8);
          do
            v32 = __ldaxr(v31);
          while (__stlxr(v32 - 1, v31));
          if (!v32)
          {
            ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
            std::__shared_weak_count::__release_weak(v30);
          }
        }
        v33 = *(_QWORD *)v29;
        if (v6 != 4 * *(int *)(*(_QWORD *)v29 + 8))
        {
          v34 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::to_string(&v146, v6);
          v35 = std::string::insert(&v146, 0, "Unexpected size s=");
          v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
          v147.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v147.__r_.__value_.__l.__data_ = v36;
          v35->__r_.__value_.__l.__size_ = 0;
          v35->__r_.__value_.__r.__words[2] = 0;
          v35->__r_.__value_.__r.__words[0] = 0;
          v37 = std::string::append(&v147, "/blob=");
          v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
          v148.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v148.__r_.__value_.__l.__data_ = v38;
          v37->__r_.__value_.__l.__size_ = 0;
          v37->__r_.__value_.__r.__words[2] = 0;
          v37->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v145, 4 * *(int *)(*(_QWORD *)v29 + 8));
          if ((v145.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v39 = &v145;
          else
            v39 = (std::string *)v145.__r_.__value_.__r.__words[0];
          if ((v145.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v40 = HIBYTE(v145.__r_.__value_.__r.__words[2]);
          else
            v40 = v145.__r_.__value_.__l.__size_;
          v41 = std::string::append(&v148, (const std::string::value_type *)v39, v40);
          v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
          v149.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v42;
          v41->__r_.__value_.__l.__size_ = 0;
          v41->__r_.__value_.__r.__words[2] = 0;
          v41->__r_.__value_.__r.__words[0] = 0;
          std::string::basic_string[abi:ne180100]<0>(&v142, " @ ");
          if ((v144 & 0x80u) == 0)
            v43 = (const std::string::value_type *)&v142;
          else
            v43 = v142;
          if ((v144 & 0x80u) == 0)
            v44 = v144;
          else
            v44 = v143;
          v45 = std::string::append(&v149, v43, v44);
          v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
          v150.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v150.__r_.__value_.__l.__data_ = v46;
          v45->__r_.__value_.__l.__size_ = 0;
          v45->__r_.__value_.__r.__words[2] = 0;
          v45->__r_.__value_.__r.__words[0] = 0;
          v47 = std::string::append(&v150, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
          v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
          v151.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v151.__r_.__value_.__l.__data_ = v48;
          v47->__r_.__value_.__l.__size_ = 0;
          v47->__r_.__value_.__r.__words[2] = 0;
          v47->__r_.__value_.__r.__words[0] = 0;
          std::string::basic_string[abi:ne180100]<0>(&v139, ":");
          if ((v141 & 0x80u) == 0)
            v49 = (const std::string::value_type *)&v139;
          else
            v49 = v139;
          if ((v141 & 0x80u) == 0)
            v50 = v141;
          else
            v50 = v140;
          v51 = std::string::append(&v151, v49, v50);
          v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
          v152.__r_.__value_.__r.__words[2] = v51->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v152.__r_.__value_.__l.__data_ = v52;
          v51->__r_.__value_.__l.__size_ = 0;
          v51->__r_.__value_.__r.__words[2] = 0;
          v51->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v138, 127);
          if ((v138.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v53 = &v138;
          else
            v53 = (std::string *)v138.__r_.__value_.__r.__words[0];
          if ((v138.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v54 = HIBYTE(v138.__r_.__value_.__r.__words[2]);
          else
            v54 = v138.__r_.__value_.__l.__size_;
          v55 = std::string::append(&v152, (const std::string::value_type *)v53, v54);
          v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
          v153.__r_.__value_.__r.__words[2] = v55->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v153.__r_.__value_.__l.__data_ = v56;
          v55->__r_.__value_.__l.__size_ = 0;
          v55->__r_.__value_.__r.__words[2] = 0;
          v55->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(v34, &v153);
          __cxa_throw(v34, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        goto LABEL_158;
      }
LABEL_43:
      if (v15 == 10)
        goto LABEL_53;
      if (v15 != 18)
        goto LABEL_58;
LABEL_45:
      if (**(_QWORD **)a3 == 0x5F6363615F656E61
        && *(_QWORD *)(*(_QWORD *)a3 + 8) == 0x6968735F73616962
        && *(_WORD *)(*(_QWORD *)a3 + 16) == 29798)
      {
LABEL_90:
        std::allocate_shared[abi:ne180100]<Espresso::blob<int,1>,std::allocator<Espresso::blob<int,1>>,int &,int &,int &,int &,void>(&v153, (unint64_t)(int)a5 >> 2, 1, 1, 1);
        v57 = a1 + 984;
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v57, (__int128 *)&v153);
        v58 = (std::__shared_weak_count *)v153.__r_.__value_.__l.__size_;
        if (v153.__r_.__value_.__l.__size_)
        {
          v59 = (unint64_t *)(v153.__r_.__value_.__l.__size_ + 8);
          do
            v60 = __ldaxr(v59);
          while (__stlxr(v60 - 1, v59));
          if (!v60)
          {
            ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
            std::__shared_weak_count::__release_weak(v58);
          }
        }
        v33 = *(_QWORD *)v57;
        if (v6 != 4 * *(int *)(*(_QWORD *)v57 + 8))
        {
          v61 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::to_string(&v146, v6);
          v62 = std::string::insert(&v146, 0, "Unexpected size s=");
          v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
          v147.__r_.__value_.__r.__words[2] = v62->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v147.__r_.__value_.__l.__data_ = v63;
          v62->__r_.__value_.__l.__size_ = 0;
          v62->__r_.__value_.__r.__words[2] = 0;
          v62->__r_.__value_.__r.__words[0] = 0;
          v64 = std::string::append(&v147, "/blob=");
          v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
          v148.__r_.__value_.__r.__words[2] = v64->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v148.__r_.__value_.__l.__data_ = v65;
          v64->__r_.__value_.__l.__size_ = 0;
          v64->__r_.__value_.__r.__words[2] = 0;
          v64->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v145, 4 * *(int *)(*(_QWORD *)v57 + 8));
          if ((v145.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v66 = &v145;
          else
            v66 = (std::string *)v145.__r_.__value_.__r.__words[0];
          if ((v145.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v67 = HIBYTE(v145.__r_.__value_.__r.__words[2]);
          else
            v67 = v145.__r_.__value_.__l.__size_;
          v68 = std::string::append(&v148, (const std::string::value_type *)v66, v67);
          v69 = *(_OWORD *)&v68->__r_.__value_.__l.__data_;
          v149.__r_.__value_.__r.__words[2] = v68->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v69;
          v68->__r_.__value_.__l.__size_ = 0;
          v68->__r_.__value_.__r.__words[2] = 0;
          v68->__r_.__value_.__r.__words[0] = 0;
          std::string::basic_string[abi:ne180100]<0>(&v142, " @ ");
          if ((v144 & 0x80u) == 0)
            v70 = (const std::string::value_type *)&v142;
          else
            v70 = v142;
          if ((v144 & 0x80u) == 0)
            v71 = v144;
          else
            v71 = v143;
          v72 = std::string::append(&v149, v70, v71);
          v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
          v150.__r_.__value_.__r.__words[2] = v72->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v150.__r_.__value_.__l.__data_ = v73;
          v72->__r_.__value_.__l.__size_ = 0;
          v72->__r_.__value_.__r.__words[2] = 0;
          v72->__r_.__value_.__r.__words[0] = 0;
          v74 = std::string::append(&v150, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
          v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
          v151.__r_.__value_.__r.__words[2] = v74->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v151.__r_.__value_.__l.__data_ = v75;
          v74->__r_.__value_.__l.__size_ = 0;
          v74->__r_.__value_.__r.__words[2] = 0;
          v74->__r_.__value_.__r.__words[0] = 0;
          std::string::basic_string[abi:ne180100]<0>(&v139, ":");
          if ((v141 & 0x80u) == 0)
            v76 = (const std::string::value_type *)&v139;
          else
            v76 = v139;
          if ((v141 & 0x80u) == 0)
            v77 = v141;
          else
            v77 = v140;
          v78 = std::string::append(&v151, v76, v77);
          v79 = *(_OWORD *)&v78->__r_.__value_.__l.__data_;
          v152.__r_.__value_.__r.__words[2] = v78->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v152.__r_.__value_.__l.__data_ = v79;
          v78->__r_.__value_.__l.__size_ = 0;
          v78->__r_.__value_.__r.__words[2] = 0;
          v78->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v138, 131);
          if ((v138.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v80 = &v138;
          else
            v80 = (std::string *)v138.__r_.__value_.__r.__words[0];
          if ((v138.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v81 = HIBYTE(v138.__r_.__value_.__r.__words[2]);
          else
            v81 = v138.__r_.__value_.__l.__size_;
          v82 = std::string::append(&v152, (const std::string::value_type *)v80, v81);
          v83 = *(_OWORD *)&v82->__r_.__value_.__l.__data_;
          v153.__r_.__value_.__r.__words[2] = v82->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v153.__r_.__value_.__l.__data_ = v83;
          v82->__r_.__value_.__l.__size_ = 0;
          v82->__r_.__value_.__r.__words[2] = 0;
          v82->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(v61, &v153);
          __cxa_throw(v61, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
      }
      else
      {
        if (v15 != 10)
        {
LABEL_58:
          Espresso::inner_product_kernel_cpu::__set_weight_raw_blob(a1, a2, a3, a4, a5, a6);
          return;
        }
LABEL_53:
        v12 = *(_QWORD *)a3;
LABEL_54:
        v26 = *(_QWORD *)v12;
        v27 = *(unsigned __int16 *)(v12 + 8);
        if (v26 != 0x61727478655F7868 || v27 != 26207)
          goto LABEL_58;
        std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v153, (unint64_t)(int)a5 >> 2, 1, 1, 1);
        v111 = a1 + 1000;
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v111, (__int128 *)&v153);
        v112 = (std::__shared_weak_count *)v153.__r_.__value_.__l.__size_;
        if (v153.__r_.__value_.__l.__size_)
        {
          v113 = (unint64_t *)(v153.__r_.__value_.__l.__size_ + 8);
          do
            v114 = __ldaxr(v113);
          while (__stlxr(v114 - 1, v113));
          if (!v114)
          {
            ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
            std::__shared_weak_count::__release_weak(v112);
          }
        }
        v33 = *(_QWORD *)v111;
        if (v6 != 4 * *(int *)(*(_QWORD *)v111 + 8))
        {
          v115 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::to_string(&v146, v6);
          v116 = std::string::insert(&v146, 0, "Unexpected size s=");
          v117 = *(_OWORD *)&v116->__r_.__value_.__l.__data_;
          v147.__r_.__value_.__r.__words[2] = v116->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v147.__r_.__value_.__l.__data_ = v117;
          v116->__r_.__value_.__l.__size_ = 0;
          v116->__r_.__value_.__r.__words[2] = 0;
          v116->__r_.__value_.__r.__words[0] = 0;
          v118 = std::string::append(&v147, "/blob=");
          v119 = *(_OWORD *)&v118->__r_.__value_.__l.__data_;
          v148.__r_.__value_.__r.__words[2] = v118->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v148.__r_.__value_.__l.__data_ = v119;
          v118->__r_.__value_.__l.__size_ = 0;
          v118->__r_.__value_.__r.__words[2] = 0;
          v118->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v145, 4 * *(int *)(*(_QWORD *)v111 + 8));
          if ((v145.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v120 = &v145;
          else
            v120 = (std::string *)v145.__r_.__value_.__r.__words[0];
          if ((v145.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v121 = HIBYTE(v145.__r_.__value_.__r.__words[2]);
          else
            v121 = v145.__r_.__value_.__l.__size_;
          v122 = std::string::append(&v148, (const std::string::value_type *)v120, v121);
          v123 = *(_OWORD *)&v122->__r_.__value_.__l.__data_;
          v149.__r_.__value_.__r.__words[2] = v122->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v123;
          v122->__r_.__value_.__l.__size_ = 0;
          v122->__r_.__value_.__r.__words[2] = 0;
          v122->__r_.__value_.__r.__words[0] = 0;
          std::string::basic_string[abi:ne180100]<0>(&v142, " @ ");
          if ((v144 & 0x80u) == 0)
            v124 = (const std::string::value_type *)&v142;
          else
            v124 = v142;
          if ((v144 & 0x80u) == 0)
            v125 = v144;
          else
            v125 = v143;
          v126 = std::string::append(&v149, v124, v125);
          v127 = *(_OWORD *)&v126->__r_.__value_.__l.__data_;
          v150.__r_.__value_.__r.__words[2] = v126->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v150.__r_.__value_.__l.__data_ = v127;
          v126->__r_.__value_.__l.__size_ = 0;
          v126->__r_.__value_.__r.__words[2] = 0;
          v126->__r_.__value_.__r.__words[0] = 0;
          v128 = std::string::append(&v150, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
          v129 = *(_OWORD *)&v128->__r_.__value_.__l.__data_;
          v151.__r_.__value_.__r.__words[2] = v128->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v151.__r_.__value_.__l.__data_ = v129;
          v128->__r_.__value_.__l.__size_ = 0;
          v128->__r_.__value_.__r.__words[2] = 0;
          v128->__r_.__value_.__r.__words[0] = 0;
          std::string::basic_string[abi:ne180100]<0>(&v139, ":");
          if ((v141 & 0x80u) == 0)
            v130 = (const std::string::value_type *)&v139;
          else
            v130 = v139;
          if ((v141 & 0x80u) == 0)
            v131 = v141;
          else
            v131 = v140;
          v132 = std::string::append(&v151, v130, v131);
          v133 = *(_OWORD *)&v132->__r_.__value_.__l.__data_;
          v152.__r_.__value_.__r.__words[2] = v132->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v152.__r_.__value_.__l.__data_ = v133;
          v132->__r_.__value_.__l.__size_ = 0;
          v132->__r_.__value_.__r.__words[2] = 0;
          v132->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v138, 135);
          if ((v138.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v134 = &v138;
          else
            v134 = (std::string *)v138.__r_.__value_.__r.__words[0];
          if ((v138.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v135 = HIBYTE(v138.__r_.__value_.__r.__words[2]);
          else
            v135 = v138.__r_.__value_.__l.__size_;
          v136 = std::string::append(&v152, (const std::string::value_type *)v134, v135);
          v137 = *(_OWORD *)&v136->__r_.__value_.__l.__data_;
          v153.__r_.__value_.__r.__words[2] = v136->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v153.__r_.__value_.__l.__data_ = v137;
          v136->__r_.__value_.__l.__size_ = 0;
          v136->__r_.__value_.__r.__words[2] = 0;
          v136->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(v115, &v153);
          __cxa_throw(v115, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
      }
LABEL_158:
      memcpy(*(void **)(v33 + 16), v7, v6);
      return;
    case 7uLL:
      goto LABEL_45;
    default:
      goto LABEL_58;
  }
}

void sub_1916327D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  void *v59;
  char v60;
  uint64_t v61;

  if (*(char *)(v61 - 57) < 0)
    operator delete(*(void **)(v61 - 80));
  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v61 - 89) < 0)
    operator delete(*(void **)(v61 - 112));
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v61 - 121) < 0)
    operator delete(*(void **)(v61 - 144));
  if (*(char *)(v61 - 153) < 0)
    operator delete(*(void **)(v61 - 176));
  if (a27 < 0)
    operator delete(a22);
  if (a59 < 0)
    operator delete(a54);
  if (a33 < 0)
    operator delete(a28);
  if (a52 < 0)
    operator delete(a47);
  if (a45 < 0)
    operator delete(a40);
  if (a39 < 0)
    operator delete(a34);
  if ((v60 & 1) != 0)
    __cxa_free_exception(v59);
  _Unwind_Resume(exception_object);
}

void wrapper_kernel<wrapper_kernel_with_weights<Espresso::inner_product_kernel_cpu,Espresso::inner_product_uniforms>,Espresso::inner_product_uniforms>::convert_layer_data_to_fp32(_QWORD *a1, char **a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v9;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  const void *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  __int128 v43;
  int64x2_t v44;
  char *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  __int128 v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  int64x2_t v59;
  char *v60;
  _QWORD *v61;
  void *__p;
  void *v63;
  __int128 v64;
  const void *v65;
  std::__shared_weak_count *v66;

  if (a3 != a4)
  {
    v9 = a3;
    v12 = a2 + 2;
    while (1)
    {
      v14 = *(const void **)v9;
      v13 = *(std::__shared_weak_count **)(v9 + 8);
      v65 = *(const void **)v9;
      v66 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
      }
      v17 = operator new(0x118uLL);
      v17[1] = 0;
      v17[2] = 0;
      *v17 = &off_1E2DC1868;
      Espresso::blob_cpu::blob_cpu((uint64_t)(v17 + 3), a1);
      *(_QWORD *)&v64 = v17 + 3;
      *((_QWORD *)&v64 + 1) = v17;
      Espresso::abstract_blob_container::shape((char *)&v58, (uint64_t)v14);
      v56 = 0;
      v57 = 0;
      (*(void (**)(_QWORD *, uint64_t *, uint64_t *))(v17[3] + 16))(v17 + 3, &v58, &v56);
      v18 = v57;
      if (v57)
      {
        v19 = (unint64_t *)&v57->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if (__p)
      {
        v63 = __p;
        operator delete(__p);
      }
      if (v65)
      {
        if (v21)
          break;
      }
      v21 = 0;
      v55 = 0;
      if (a5)
        goto LABEL_21;
LABEL_28:
      v27 = v64;
      if (*((_QWORD *)&v64 + 1))
      {
        v28 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v31 = a2[1];
      v30 = (unint64_t)a2[2];
      if ((unint64_t)v31 >= v30)
      {
        v54 = v27;
        v33 = (v31 - *a2) >> 4;
        if ((unint64_t)(v33 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v34 = v30 - (_QWORD)*a2;
        v35 = v34 >> 3;
        if (v34 >> 3 <= (unint64_t)(v33 + 1))
          v35 = v33 + 1;
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0)
          v36 = 0xFFFFFFFFFFFFFFFLL;
        else
          v36 = v35;
        v61 = v12;
        v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v36);
        v39 = &v37[16 * v33];
        *(_OWORD *)v39 = v54;
        v41 = *a2;
        v40 = a2[1];
        if (v40 == *a2)
        {
          v44 = vdupq_n_s64((unint64_t)v40);
          v42 = &v37[16 * v33];
        }
        else
        {
          v42 = &v37[16 * v33];
          do
          {
            v43 = *((_OWORD *)v40 - 1);
            v40 -= 16;
            *((_OWORD *)v42 - 1) = v43;
            v42 -= 16;
            *(_QWORD *)v40 = 0;
            *((_QWORD *)v40 + 1) = 0;
          }
          while (v40 != v41);
          v44 = *(int64x2_t *)a2;
        }
        v32 = v39 + 16;
        *a2 = v42;
        a2[1] = v39 + 16;
        v59 = v44;
        v45 = a2[2];
        a2[2] = &v37[16 * v38];
        v60 = v45;
        v58 = v44.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v58);
      }
      else
      {
        *(_OWORD *)v31 = v27;
        v32 = v31 + 16;
      }
      a2[1] = v32;
      if (v55)
      {
        v46 = (unint64_t *)&v55->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      v48 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
      if (*((_QWORD *)&v64 + 1))
      {
        v49 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      v51 = v66;
      if (v66)
      {
        v52 = (unint64_t *)&v66->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v9 += 16;
      if (v9 == a4)
        return;
    }
    v55 = v66;
    if (v66)
    {
      v22 = (unint64_t *)&v66->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    if (!a5)
      goto LABEL_28;
LABEL_21:
    if (a6)
    {
      v58 = 0;
      v59.i64[0] = 0;
      (*(void (**)(void *, uint64_t *, uint64_t))(*(_QWORD *)v21 + 40))(v21, &v58, v64 + 160);
      v24 = (std::__shared_weak_count *)v59.i64[0];
      if (v59.i64[0])
      {
        v25 = (unint64_t *)(v59.i64[0] + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v21, v64 + 160, 1.0);
    }
    goto LABEL_28;
  }
}

void sub_191632D6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  _Unwind_Resume(a1);
}

void wrapper_kernel_with_weights<Espresso::inner_product_kernel_cpu,Espresso::inner_product_uniforms>::__launch(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  __int128 v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;

  v8 = *(_QWORD *)(a1 + 568);
  v44 = *(_QWORD *)(a1 + 560);
  v45 = (std::__shared_weak_count *)v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11 = *(_QWORD *)(a1 + 696);
  v42 = *(_QWORD *)(a1 + 688);
  v43 = (std::__shared_weak_count *)v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v14 = *(std::__shared_weak_count **)(a1 + 552);
  v40 = *(_QWORD *)(a1 + 544);
  v41 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }
  if (*(_QWORD *)(a1 + 1016))
  {
    v39 = 0uLL;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 688, &v39);
    v17 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
    if (*((_QWORD *)&v39 + 1))
    {
      v18 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 560), *(_QWORD *)(a1 + 1016), *(_QWORD *)(a1 + 1024));
  }
  v20 = *(_QWORD *)(a1 + 1032);
  if (v20)
  {
    v21 = *(std::__shared_weak_count **)(a1 + 1040);
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 544), v20, (uint64_t)v21);
      *(_DWORD *)(a1 + 312) = 1;
      do
        v24 = __ldaxr(v22);
      while (__stlxr(v24 - 1, v22));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    else
    {
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 544), v20, 0);
      *(_DWORD *)(a1 + 312) = 1;
    }
  }
  Espresso::inner_product_kernel_cpu::__launch(a1, a2, a3, a4);
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 560), v44, (uint64_t)v45);
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 688), v42, (uint64_t)v43);
  v26 = v40;
  v25 = v41;
  if (v41)
  {
    v27 = (unint64_t *)&v41->__shared_owners_;
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 544), v26, (uint64_t)v25);
    *(_DWORD *)(a1 + 312) = v26 != 0;
    do
      v29 = __ldaxr(v27);
    while (__stlxr(v29 - 1, v27));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  else
  {
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 544), v40, 0);
    *(_DWORD *)(a1 + 312) = v26 != 0;
  }
  v30 = v41;
  if (v41)
  {
    v31 = (unint64_t *)&v41->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v33 = v43;
  if (v43)
  {
    v34 = (unint64_t *)&v43->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  v36 = v45;
  if (v45)
  {
    v37 = (unint64_t *)&v45->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
}

void sub_1916330FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;
  uint64_t v9;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v7 = va_arg(va2, _QWORD);
  v9 = va_arg(va2, _QWORD);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  _Unwind_Resume(a1);
}

void wrapper_kernel_with_weights<Espresso::inner_product_kernel_cpu,Espresso::inner_product_uniforms>::~wrapper_kernel_with_weights(Espresso::inner_product_kernel_cpu *a1)
{
  *(_QWORD *)a1 = &off_1E2D57658;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 1032);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 1016);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 1000);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 984);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 968);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 952);
  Espresso::inner_product_kernel_cpu::~inner_product_kernel_cpu(a1);
}

{
  *(_QWORD *)a1 = &off_1E2D57658;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 1032);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 1016);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 1000);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 984);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 968);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 952);
  Espresso::inner_product_kernel_cpu::~inner_product_kernel_cpu(a1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<wrapper_kernel<wrapper_kernel_with_weights<Espresso::inner_product_kernel_cpu,Espresso::inner_product_uniforms>,Espresso::inner_product_uniforms>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB42B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<wrapper_kernel<wrapper_kernel_with_weights<Espresso::inner_product_kernel_cpu,Espresso::inner_product_uniforms>,Espresso::inner_product_uniforms>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB42B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<wrapper_kernel_with_weights<Espresso::inner_product_kernel_cpu,Espresso::inner_product_uniforms>,Espresso::inner_product_uniforms>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_3@<Q0>(uint64_t *a1@<X1>, __int128 *a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  uint64_t v7;
  __n128 result;

  v6 = (char *)operator new(0x308uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DB4278;
  Espresso::deconvolution_kernel_cpu::deconvolution_kernel_cpu((uint64_t)(v6 + 24), a1, v7, a2);
  *((_QWORD *)v6 + 3) = &off_1E2D4E078;
  *(_OWORD *)(v6 + 712) = 0u;
  *(_OWORD *)(v6 + 728) = 0u;
  *(_OWORD *)(v6 + 680) = 0u;
  *(_OWORD *)(v6 + 696) = 0u;
  *(_OWORD *)(v6 + 648) = 0u;
  *(_OWORD *)(v6 + 664) = 0u;
  *(_OWORD *)(v6 + 744) = 0u;
  *(_OWORD *)(v6 + 760) = 0u;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v6 + 93, *a1, a1[1]);
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1916332DC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void wrapper_kernel<wrapper_kernel_with_weights<Espresso::deconvolution_kernel_cpu,Espresso::convolution_uniforms>,Espresso::convolution_uniforms>::~wrapper_kernel(void **a1)
{
  *a1 = &off_1E2D4E078;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 92));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 90));
  *a1 = &off_1E2D573D8;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 88));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 86));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 84));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 82));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 80));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 78));
  *a1 = &off_1E2D90B50;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 76));
  *a1 = off_1E2D95618;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 74));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 72));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 70));
  Espresso::generic_convolution_kernel::~generic_convolution_kernel(a1);
}

{
  *a1 = &off_1E2D4E078;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 92));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 90));
  *a1 = &off_1E2D573D8;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 88));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 86));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 84));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 82));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 80));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 78));
  *a1 = &off_1E2D90B50;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 76));
  *a1 = off_1E2D95618;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 74));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 72));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 70));
  Espresso::generic_convolution_kernel::~generic_convolution_kernel(a1);
  JUMPOUT(0x19401CD90);
}

void wrapper_kernel<wrapper_kernel_with_weights<Espresso::deconvolution_kernel_cpu,Espresso::convolution_uniforms>,Espresso::convolution_uniforms>::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  _BOOL4 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  float *v31;
  vDSP_Length v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  __n128 v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  void **v45;
  void **v46;
  void **v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  int *v53;
  float *v54;
  vDSP_Length v55;
  int *v56;
  int v57;
  int v58;
  uint64_t v59;
  unint64_t v60;
  vDSP_Length v61;
  vDSP_Length v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  const void *v75;
  void **v76;
  uint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  void **v81;
  const void *v82;
  void *v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  uint64_t v95;
  std::__shared_weak_count *v96;
  float __B;
  _QWORD v98[2];
  _QWORD v99[2];
  void **v100[3];
  char *v101[3];
  void *v102;
  std::__shared_weak_count *v103;
  void ***v104;
  std::__shared_weak_count *v105;

  memset(v101, 0, sizeof(v101));
  memset(v100, 0, sizeof(v100));
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)*a3 + 32))(*(_QWORD *)*a3))
    v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)*a3 + 32))(*(_QWORD *)*a3) == 1;
  else
    v8 = 1;
  v9 = *(std::__shared_weak_count **)(a1 + 728);
  v99[0] = *(_QWORD *)(a1 + 720);
  v99[1] = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  wrapper_kernel<wrapper_kernel_with_weights<Espresso::deconvolution_kernel_cpu,Espresso::convolution_uniforms>,Espresso::convolution_uniforms>::convert_layer_data_to_fp32(v99, v101, *a4, a4[1], 1, v8);
  if (v9)
  {
    v12 = (unint64_t *)&v9->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v14 = *(std::__shared_weak_count **)(a1 + 728);
  v98[0] = *(_QWORD *)(a1 + 720);
  v98[1] = v14;
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  wrapper_kernel<wrapper_kernel_with_weights<Espresso::deconvolution_kernel_cpu,Espresso::convolution_uniforms>,Espresso::convolution_uniforms>::convert_layer_data_to_fp32(v98, (char **)v100, *a3, a3[1], 0, 0);
  if (v14)
  {
    v17 = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v95 = a1;
  v19 = *a4;
  if (a4[1] != *a4)
  {
    v20 = 0;
    do
    {
      if (!v8
        && (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v19 + 16 * v20) + 32))(*(_QWORD *)(v19 + 16 * v20))
         || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(*a4 + 16 * v20) + 32))(*(_QWORD *)(*a4 + 16 * v20)) == 1))
      {
        __B = *(float *)(*(_QWORD *)(*a4 + 16 * v20) + 112);
        v21 = &v101[0][16 * v20];
        v104 = (void ***)v22;
        v23 = (std::__shared_weak_count *)*((_QWORD *)v21 + 1);
        v105 = v23;
        if (v23)
        {
          v24 = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
        }
        v26 = *((_QWORD *)v22 + 20);
        v27 = (std::__shared_weak_count *)*((_QWORD *)v22 + 21);
        v102 = (void *)v26;
        v103 = v27;
        if (v27)
        {
          v28 = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldxr(v28);
          while (__stxr(v29 + 1, v28));
        }
        v30 = 0;
        v31 = *(float **)(v26 + 24);
        v32 = *(int *)(v26 + 8);
        v33 = v26 + 12;
        do
        {
          v32 *= *(int *)(v33 + v30);
          v30 += 4;
        }
        while (v30 != 12);
        vDSP_vsmul(v31, 1, &__B, v31, 1, v32);
        if (v27)
        {
          v34 = (unint64_t *)&v27->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        v36 = v105;
        if (v105)
        {
          v37 = (unint64_t *)&v105->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
      }
      ++v20;
      v19 = *a4;
    }
    while (v20 < (a4[1] - *a4) >> 4);
  }
  v39 = v95;
  wrapper_kernel_with_weights<Espresso::deconvolution_kernel_cpu,Espresso::convolution_uniforms>::__launch(v95, a2, (uint64_t)v100, (uint64_t *)v101);
  v41 = *(_QWORD *)(v95 + 736);
  if (v41)
  {
    v42 = *(std::__shared_weak_count **)(v95 + 744);
    v96 = v42;
    if (v42)
    {
      v43 = (unint64_t *)&v42->__shared_owners_;
      do
        v44 = __ldxr(v43);
      while (__stxr(v44 + 1, v43));
    }
    v45 = v100[0];
    if (*v100[0]
    {
      v47 = v46;
      v48 = (std::__shared_weak_count *)v45[1];
      v104 = (void ***)v46;
      v105 = v48;
      if (v48)
      {
        v49 = (unint64_t *)&v48->__shared_owners_;
        do
          v50 = __ldxr(v49);
        while (__stxr(v50 + 1, v49));
      }
    }
    else
    {
      v48 = 0;
      v47 = 0;
      v104 = 0;
      v105 = 0;
    }
    LODWORD(v51) = *(_DWORD *)(v41 + 8);
    v94 = v48;
    if ((_DWORD)v51 == 1)
    {
      v52 = 0;
      v53 = (int *)v47[20];
      v54 = (float *)*((_QWORD *)v53 + 3);
      v55 = v53[2];
      v56 = v53 + 3;
      do
        v55 *= v56[v52++];
      while (v52 != 3);
      vDSP_vsmul(v54, 1, *(const float **)(v41 + 16), v54, 1, v55);
    }
    else
    {
      v57 = *((_DWORD *)v47 + 4);
      if ((_DWORD)v51 != v57)
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v51, v57);
      v58 = *((_DWORD *)v47 + 5);
      if (v58)
      {
        v59 = 0;
        v60 = 0;
        v61 = *((int *)v47 + 2) * (uint64_t)*((int *)v47 + 3);
        v62 = 4 * (int)v51 * v61;
        do
        {
          if ((_DWORD)v51)
          {
            v63 = 0;
            v64 = 0;
            v65 = v59;
            do
            {
              vDSP_vsmul((const float *)(*((_QWORD *)v47[20] + 3) + v65), 1, (const float *)(*(_QWORD *)(v41 + 16) + v63), (float *)(*((_QWORD *)v47[20] + 3) + v65), 1, v61);
              ++v64;
              v51 = *((int *)v47 + 4);
              v63 += 4;
              v65 += 4 * v61;
            }
            while (v64 < v51);
            v58 = *((_DWORD *)v47 + 5);
          }
          ++v60;
          v59 += v62;
        }
        while (v60 < v58);
      }
    }
    v39 = v95;
    if (v94)
    {
      v66 = (unint64_t *)&v94->__shared_owners_;
      do
        v67 = __ldaxr(v66);
      while (__stlxr(v67 - 1, v66));
      if (!v67)
      {
        ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
        std::__shared_weak_count::__release_weak(v94);
      }
    }
    if (v96)
    {
      v68 = (unint64_t *)&v96->__shared_owners_;
      do
        v69 = __ldaxr(v68);
      while (__stlxr(v69 - 1, v68));
      if (!v69)
      {
        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
        std::__shared_weak_count::__release_weak(v96);
      }
    }
  }
  v70 = *(std::__shared_weak_count **)(v39 + 728);
  if (v70)
  {
    v71 = (unint64_t *)&v70->__shared_owners_;
    do
      v72 = __ldxr(v71);
    while (__stxr(v72 + 1, v71));
  }
  v73 = *a3;
  if (a3[1] != *a3)
  {
    v74 = 0;
    do
    {
      v75 = *(const void **)(v73 + 16 * v74);
      if (v75
      {
        v77 = (uint64_t)v76;
        v104 = (void ***)v76;
        v78 = *(std::__shared_weak_count **)(v73 + 16 * v74 + 8);
        v105 = v78;
        if (v78)
        {
          v79 = (unint64_t *)&v78->__shared_owners_;
          do
            v80 = __ldxr(v79);
          while (__stxr(v80 + 1, v79));
        }
      }
      else
      {
        v77 = 0;
        v104 = 0;
        v105 = 0;
      }
      v81 = v100[0];
      v82 = v100[0][2 * v74];
      if (v82
      {
        v102 = v83;
        v84 = (std::__shared_weak_count *)v81[2 * v74 + 1];
        v103 = v84;
        if (v84)
        {
          v85 = (unint64_t *)&v84->__shared_owners_;
          do
            v86 = __ldxr(v85);
          while (__stxr(v86 + 1, v85));
        }
      }
      else
      {
        v84 = 0;
        v83 = 0;
        v102 = 0;
        v103 = 0;
      }
      v40.n128_u64[0] = Espresso::QuantSimEngine::blob_container::copy_from_fp32(v77, (uint64_t)v83 + 160, 1.0);
      if (v84)
      {
        v87 = (unint64_t *)&v84->__shared_owners_;
        do
          v88 = __ldaxr(v87);
        while (__stlxr(v88 - 1, v87));
        if (!v88)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v84->__on_zero_shared)(v84, v40);
          std::__shared_weak_count::__release_weak(v84);
        }
      }
      v89 = v105;
      if (v105)
      {
        v90 = (unint64_t *)&v105->__shared_owners_;
        do
          v91 = __ldaxr(v90);
        while (__stlxr(v91 - 1, v90));
        if (!v91)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v89->__on_zero_shared)(v89, v40);
          std::__shared_weak_count::__release_weak(v89);
        }
      }
      ++v74;
      v73 = *a3;
    }
    while (v74 < (a3[1] - *a3) >> 4);
  }
  if (v70)
  {
    v92 = (unint64_t *)&v70->__shared_owners_;
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v70->__on_zero_shared)(v70, v40);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  v104 = v100;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v104);
  v100[0] = (void **)v101;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v100);
}

void sub_191633B4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  *(_QWORD *)(v25 - 104) = &a22;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 104));
  a22 = (void **)&a25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a22);
  _Unwind_Resume(a1);
}

_QWORD *Espresso::convolution_kernel_cpu_base<Espresso::generic_deconvolution_kernel>::share_weights(_QWORD *a1, const void **a2)
{
  _QWORD *result;
  uint64_t *v5;

  Espresso::generic_convolution_kernel::share_weights(a1, a2);
  result = *a2;
  if (*a2)
  {
    if (result)
    {
      v5 = result;
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](a1 + 72, v5[72], v5[73]);
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](a1 + 70, v5[70], v5[71]);
      return std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](a1 + 74, v5[74], v5[75]);
    }
  }
  return result;
}

void wrapper_kernel<wrapper_kernel_with_weights<Espresso::deconvolution_kernel_cpu,Espresso::convolution_uniforms>,Espresso::convolution_uniforms>::__set_weight_raw_blob(Espresso::generic_deconvolution_kernel *a1, uint64_t *a2, unsigned __int8 *a3, char *a4, unint64_t a5, uint64_t *a6)
{
  unsigned __int8 *v8;
  int v10;
  uint64_t v12;
  std::__shared_weak_count *size;
  unint64_t *v14;
  unint64_t v15;
  std::runtime_error *exception;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  std::string v39;
  _QWORD v40[2];
  unsigned __int8 v41;
  _QWORD v42[2];
  unsigned __int8 v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;

  v8 = a3;
  wrapper_kernel_with_weights<Espresso::deconvolution_kernel_cpu,Espresso::convolution_uniforms>::__set_weight_raw_blob(a1, a2, a3, a4, a5, a6);
  v10 = (char)v8[23];
  if (v10 < 0)
  {
    if (*((_QWORD *)v8 + 1) != 10)
      return;
    v8 = *(unsigned __int8 **)v8;
  }
  else if (v10 != 10)
  {
    return;
  }
  if (*(_QWORD *)v8 == 0x6163735F74736F70 && *((_WORD *)v8 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    v12 = (uint64_t)a1 + 736;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v12, (__int128 *)&v52);
    size = (std::__shared_weak_count *)v52.__r_.__value_.__l.__size_;
    if (v52.__r_.__value_.__l.__size_)
    {
      v14 = (unint64_t *)(v52.__r_.__value_.__l.__size_ + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    if (a5 != 4 * *(int *)(*(_QWORD *)v12 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v45, a5);
      v17 = std::string::insert(&v45, 0, "Unexpected size s=");
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      v19 = std::string::append(&v46, "/blob=");
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, 4 * *(int *)(*(_QWORD *)v12 + 8));
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v21 = &v44;
      else
        v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      else
        v22 = v44.__r_.__value_.__l.__size_;
      v23 = std::string::append(&v47, (const std::string::value_type *)v21, v22);
      v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, " @ ");
      if ((v43 & 0x80u) == 0)
        v25 = (const std::string::value_type *)v42;
      else
        v25 = (const std::string::value_type *)v42[0];
      if ((v43 & 0x80u) == 0)
        v26 = v43;
      else
        v26 = v42[1];
      v27 = std::string::append(&v48, v25, v26);
      v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      v29 = std::string::append(&v49, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v40, ":");
      if ((v41 & 0x80u) == 0)
        v31 = (const std::string::value_type *)v40;
      else
        v31 = (const std::string::value_type *)v40[0];
      if ((v41 & 0x80u) == 0)
        v32 = v41;
      else
        v32 = v40[1];
      v33 = std::string::append(&v50, v31, v32);
      v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, 197);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = &v39;
      else
        v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      else
        v36 = v39.__r_.__value_.__l.__size_;
      v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
      v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v52);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    memcpy(*(void **)(*(_QWORD *)v12 + 16), a4, a5);
  }
}

void sub_191633F8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  void *v59;
  int v60;
  uint64_t v61;

  if (*(char *)(v61 - 57) < 0)
    operator delete(*(void **)(v61 - 80));
  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v61 - 89) < 0)
    operator delete(*(void **)(v61 - 112));
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v61 - 121) < 0)
    operator delete(*(void **)(v61 - 144));
  if (*(char *)(v61 - 153) < 0)
    operator delete(*(void **)(v61 - 176));
  if (a27 < 0)
    operator delete(a22);
  if (a59 < 0)
    operator delete(a54);
  if (a33 < 0)
    operator delete(a28);
  if (a52 < 0)
    operator delete(a47);
  if (a45 < 0)
    operator delete(a40);
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0)
LABEL_28:
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

void wrapper_kernel_with_weights<Espresso::deconvolution_kernel_cpu,Espresso::convolution_uniforms>::__set_weights_finalize(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  double v9;
  float v10;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  float v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  __int128 v39;
  uint64_t v40[2];
  uint64_t v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  int v47;
  uint64_t v48;
  std::__shared_weak_count *v49;

  v2 = a1[70];
  v3 = (std::__shared_weak_count *)a1[71];
  v48 = v2;
  v49 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  if (v2)
  {
    if (a1[80])
      goto LABEL_61;
    if (!a1[82])
    {
      if (a1[78])
      {
        v18 = a1[84];
        if (v18)
        {
          v19 = **(float **)(v18 + 16);
          v20 = (std::__shared_weak_count *)a1[79];
          v41 = a1[78];
          v42 = v20;
          if (v20)
          {
            v21 = (unint64_t *)&v20->__shared_owners_;
            do
              v22 = __ldxr(v21);
            while (__stxr(v22 + 1, v21));
          }
          v40[0] = v2;
          v40[1] = (uint64_t)v3;
          if (v3)
          {
            v23 = (unint64_t *)&v3->__shared_owners_;
            do
              v24 = __ldxr(v23);
            while (__stxr(v24 + 1, v23));
          }
          Espresso::ane_style_post_scale_bias((uint64_t)&v41, v40, (uint64_t)&v43, v19);
          if (v3)
          {
            v25 = (unint64_t *)&v3->__shared_owners_;
            do
              v26 = __ldaxr(v25);
            while (__stlxr(v26 - 1, v25));
            if (!v26)
            {
              ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
              std::__shared_weak_count::__release_weak(v3);
            }
          }
          v27 = v42;
          if (v42)
          {
            v28 = (unint64_t *)&v42->__shared_owners_;
            do
              v29 = __ldaxr(v28);
            while (__stlxr(v29 - 1, v28));
            if (!v29)
            {
              ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
              std::__shared_weak_count::__release_weak(v27);
            }
          }
          std::allocate_shared[abi:ne180100]<Espresso::blob<int,1>,std::allocator<Espresso::blob<int,1>>,int &,int &,int &,int &,void>(&v39, 1, 1, 1, 1);
          std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)(a1 + 82), &v39);
          v30 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
          if (*((_QWORD *)&v39 + 1))
          {
            v31 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
            do
              v32 = __ldaxr(v31);
            while (__stlxr(v32 - 1, v31));
            if (!v32)
            {
              ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
              std::__shared_weak_count::__release_weak(v30);
            }
          }
          **(_DWORD **)(a1[82] + 16) = v47;
          std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](a1 + 80, v45, (uint64_t)v46);
          v33 = v46;
          if (v46)
          {
            v34 = (unint64_t *)&v46->__shared_owners_;
            do
              v35 = __ldaxr(v34);
            while (__stlxr(v35 - 1, v34));
            if (!v35)
            {
              ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
              std::__shared_weak_count::__release_weak(v33);
            }
          }
          v36 = v44;
          if (v44)
          {
            v37 = (unint64_t *)&v44->__shared_owners_;
            do
              v38 = __ldaxr(v37);
            while (__stlxr(v38 - 1, v37));
            if (!v38)
            {
              ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
              std::__shared_weak_count::__release_weak(v36);
            }
          }
          if (v48 && a1[80])
          {
LABEL_61:
            if (a1[82])
            {
              v6 = a1[78];
              if (v6)
              {
                std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v43, *(_DWORD *)(v6 + 8), 1, 1, 1);
                v7 = v43;
                if (*(_DWORD *)(v43 + 8))
                {
                  v8 = 0;
                  do
                  {
                    v9 = *(float *)(*(_QWORD *)(a1[80] + 16) + 4 * v8);
                    v10 = ldexp(1.0, **(_DWORD **)(a1[82] + 16)) * v9;
                    *(float *)(*(_QWORD *)(v7 + 16) + 4 * v8++) = v10;
                  }
                  while (v8 < *(unsigned int *)(v7 + 8));
                }
                v11 = a1 + 88;
                v12 = v44;
                std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v11, v7, (uint64_t)v44);
                if (v12)
                {
                  v13 = (unint64_t *)&v12->__shared_owners_;
                  do
                    v14 = __ldaxr(v13);
                  while (__stlxr(v14 - 1, v13));
                  if (!v14)
                  {
                    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
                    std::__shared_weak_count::__release_weak(v12);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  v15 = v49;
  if (v49)
  {
    v16 = (unint64_t *)&v49->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_191634444(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  uint64_t v10;
  va_list va;
  uint64_t v12;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v8 - 64);
  _Unwind_Resume(a1);
}

BOOL wrapper_kernel<wrapper_kernel_with_weights<Espresso::deconvolution_kernel_cpu,Espresso::convolution_uniforms>,Espresso::convolution_uniforms>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  int v4;

  v2 = a2;
  if ((wrapper_kernel_with_weights<Espresso::deconvolution_kernel_cpu,Espresso::convolution_uniforms>::supports_weight_key(a1, a2) & 1) != 0)return 1;
  v4 = *((char *)v2 + 23);
  if (v4 < 0)
  {
    if (v2[1] != 10)
      return 0;
    v2 = (uint64_t *)*v2;
  }
  else if (v4 != 10)
  {
    return 0;
  }
  return *v2 == 0x6163735F74736F70 && *((_WORD *)v2 + 4) == 25964;
}

void Espresso::convolution_kernel_cpu_base<Espresso::generic_deconvolution_kernel>::get_weights_blob(_QWORD *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  __int128 v4;

  if (a2 == 1)
  {
    Espresso::blob_cpu::make_custom<std::shared_ptr<Espresso::blob<float,1>>>((uint64_t *)&v4, a1 + 1, a1 + 70);
    goto LABEL_5;
  }
  if (!a2)
  {
    Espresso::blob_cpu::make_custom<std::shared_ptr<Espresso::blob<float,4>>>((uint64_t *)&v4, a1 + 1, a1 + 72);
LABEL_5:
    *(_OWORD *)a3 = v4;
    return;
  }
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
}

uint64_t Espresso::convolution_kernel_cpu_base<Espresso::generic_deconvolution_kernel>::num_weights_blob(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 336))
    return 2;
  else
    return 1;
}

void Espresso::convolution_kernel_cpu_base<Espresso::generic_deconvolution_kernel>::set_weights(int *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  int v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  __int128 v15;

  v3 = a2[1];
  v13 = *a2;
  v14 = (std::__shared_weak_count *)v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = a1[105];
  if (v6 <= 1)
    v6 = 1;
  Espresso::unshuffle_from_gpu_conv_weights(&v13, a1[86], (a1[87] - 1) / v6 + 1, (uint64_t *)&v15);
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)(a1 + 144), &v15);
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
  if (*((_QWORD *)&v15 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_191634674(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t Espresso::convolution_kernel_cpu_base<Espresso::generic_deconvolution_kernel>::get_biases@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(result + 568);
  *a2 = *(_QWORD *)(result + 560);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t Espresso::convolution_kernel_cpu_base<Espresso::generic_deconvolution_kernel>::get_weights@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(result + 584);
  *a2 = *(_QWORD *)(result + 576);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t Espresso::convolution_kernel_cpu_base<Espresso::generic_deconvolution_kernel>::get_f16_weights@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(result + 600);
  *a2 = *(_QWORD *)(result + 592);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void Espresso::blob_cpu::make_custom<std::shared_ptr<Espresso::blob<float,4>>>(uint64_t *a1, _QWORD *a2, uint64_t *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;

  v6 = operator new(0x118uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DC1868;
  *a1 = Espresso::blob_cpu::blob_cpu((uint64_t)(v6 + 3), a2);
  a1[1] = (uint64_t)v6;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v6 + 31, *a3, a3[1]);
  v7 = operator new(0x60uLL);
  v7[1] = 0;
  v7[2] = 0;
  *v7 = &off_1E2DBECA8;
  v7[3] = &off_1E2DA11F0;
  v7[5] = 0;
  v7[6] = 0;
  v7[4] = 0;
  *((_BYTE *)v7 + 56) = 0;
  *((_OWORD *)v7 + 4) = 0u;
  *((_OWORD *)v7 + 5) = 0u;
  *(_QWORD *)&v17 = v7 + 3;
  *((_QWORD *)&v17 + 1) = v7;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)(v6 + 23), &v17);
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
  if (*((_QWORD *)&v17 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = 0;
  v12 = (_DWORD *)*a1;
  v13 = *(_QWORD *)(*a1 + 160);
  *(_QWORD *)&v14 = 0x100000001;
  *((_QWORD *)&v14 + 1) = 0x100000001;
  *(_OWORD *)(v13 + 8) = v14;
  v15 = *a3;
  v16 = *a3 + 8;
  do
  {
    *(_DWORD *)(v13 + 8 + v11) = *(_DWORD *)(v16 + v11);
    v11 += 4;
  }
  while (v11 != 16);
  v12[2] = *(_DWORD *)(v13 + 8);
  v12[3] = *(_DWORD *)(v13 + 12);
  v12[4] = *(_DWORD *)(v13 + 16);
  v12[5] = *(_DWORD *)(v13 + 20);
  v12[6] = 1;
  *(_QWORD *)(v13 + 24) = *(_QWORD *)(v15 + 24);
  *(_BYTE *)(v13 + 32) = 0;
}

void sub_191634854(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t wrapper_kernel_with_weights<Espresso::deconvolution_kernel_cpu,Espresso::convolution_uniforms>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v3;
  unint64_t v4;
  uint64_t *v6;
  uint64_t v9;
  __int128 v10;
  uint64_t v14;
  int v15;

  if ((*((char *)a2 + 23) & 0x80000000) == 0)
  {
    v3 = *((unsigned __int8 *)a2 + 23);
    HIDWORD(v4) = v3;
    LODWORD(v4) = (v3 << 24) - 0x4000000;
    switch((v4 >> 25))
    {
      case 0u:
        if (*(_DWORD *)a2 == 944987991)
          return 1;
        if (v3 == 8)
          goto LABEL_14;
        if (v3 == 18)
          goto LABEL_17;
        if (v3 != 10)
          return Espresso::generic_convolution_kernel::supports_weight_key(a1, a2)
              || Espresso::weight_key_supported_by_conv_quantized_weights_helper(a2, 1);
LABEL_7:
        if (*a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964)
          return 1;
        if (v3 == 18)
          goto LABEL_17;
        v6 = a2;
        if (v3 == 10)
          goto LABEL_46;
        if (v3 != 8)
          return Espresso::generic_convolution_kernel::supports_weight_key(a1, a2)
              || Espresso::weight_key_supported_by_conv_quantized_weights_helper(a2, 1);
LABEL_14:
        if (*a2 == 0x736169625F656E61)
          return 1;
        v6 = a2;
        if (v3 == 10)
          goto LABEL_46;
        if (v3 != 18)
          return Espresso::generic_convolution_kernel::supports_weight_key(a1, a2)
              || Espresso::weight_key_supported_by_conv_quantized_weights_helper(a2, 1);
LABEL_17:
        if (*a2 == 0x5F6363615F656E61 && a2[1] == 0x6968735F73616962 && *((_WORD *)a2 + 8) == 29798)
          return 1;
        v6 = a2;
        if (v3 != 10)
          return Espresso::generic_convolution_kernel::supports_weight_key(a1, a2)
              || Espresso::weight_key_supported_by_conv_quantized_weights_helper(a2, 1);
        goto LABEL_46;
      case 2u:
        goto LABEL_14;
      case 3u:
        goto LABEL_7;
      case 7u:
        goto LABEL_17;
      default:
        return Espresso::generic_convolution_kernel::supports_weight_key(a1, a2)
            || Espresso::weight_key_supported_by_conv_quantized_weights_helper(a2, 1);
    }
  }
  v9 = a2[1];
  *((_QWORD *)&v10 + 1) = v9;
  *(_QWORD *)&v10 = v9 - 4;
  switch((unint64_t)(v10 >> 1))
  {
    case 0uLL:
      if (*(_DWORD *)*a2 != 944987991)
        return Espresso::generic_convolution_kernel::supports_weight_key(a1, a2)
            || Espresso::weight_key_supported_by_conv_quantized_weights_helper(a2, 1);
      return 1;
    case 2uLL:
      goto LABEL_34;
    case 3uLL:
      if (*(_QWORD *)*a2 == 0x6163735F74736F70 && *(_WORD *)(*a2 + 8) == 25964)
        return 1;
      if (v9 != 8)
        goto LABEL_35;
LABEL_34:
      if (*(_QWORD *)*a2 == 0x736169625F656E61)
        return 1;
LABEL_35:
      if (v9 == 10)
        goto LABEL_45;
      if (v9 != 18)
        return Espresso::generic_convolution_kernel::supports_weight_key(a1, a2)
            || Espresso::weight_key_supported_by_conv_quantized_weights_helper(a2, 1);
LABEL_37:
      if (*(_QWORD *)*a2 == 0x5F6363615F656E61
        && *(_QWORD *)(*a2 + 8) == 0x6968735F73616962
        && *(_WORD *)(*a2 + 16) == 29798)
      {
        return 1;
      }
      if (v9 != 10)
        return Espresso::generic_convolution_kernel::supports_weight_key(a1, a2)
            || Espresso::weight_key_supported_by_conv_quantized_weights_helper(a2, 1);
LABEL_45:
      v6 = (uint64_t *)*a2;
LABEL_46:
      v14 = *v6;
      v15 = *((unsigned __int16 *)v6 + 4);
      if (v14 == 0x61727478655F7868 && v15 == 26207)
        return 1;
      return Espresso::generic_convolution_kernel::supports_weight_key(a1, a2)
          || Espresso::weight_key_supported_by_conv_quantized_weights_helper(a2, 1);
    case 7uLL:
      goto LABEL_37;
    default:
      return Espresso::generic_convolution_kernel::supports_weight_key(a1, a2)
          || Espresso::weight_key_supported_by_conv_quantized_weights_helper(a2, 1);
  }
}

void wrapper_kernel_with_weights<Espresso::deconvolution_kernel_cpu,Espresso::convolution_uniforms>::__set_weight_raw_blob(Espresso::generic_deconvolution_kernel *this, uint64_t *a2, unsigned __int8 *a3, char *a4, unint64_t a5, uint64_t *a6)
{
  unint64_t v6;
  char *v7;
  int v9;
  unint64_t v10;
  unsigned __int8 *v12;
  uint64_t v15;
  __int128 v16;
  char *v17;
  std::__shared_weak_count *size;
  unint64_t *v19;
  unint64_t v20;
  float *v21;
  int v22;
  uint64_t v26;
  int v27;
  char *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  std::runtime_error *v34;
  std::string *v35;
  __int128 v36;
  std::string *v37;
  __int128 v38;
  std::string *v39;
  std::string::size_type v40;
  std::string *v41;
  __int128 v42;
  const std::string::value_type *v43;
  std::string::size_type v44;
  std::string *v45;
  __int128 v46;
  std::string *v47;
  __int128 v48;
  const std::string::value_type *v49;
  std::string::size_type v50;
  std::string *v51;
  __int128 v52;
  std::string *v53;
  std::string::size_type v54;
  std::string *v55;
  __int128 v56;
  char *v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::runtime_error *v61;
  std::string *v62;
  __int128 v63;
  std::string *v64;
  __int128 v65;
  std::string *v66;
  std::string::size_type v67;
  std::string *v68;
  __int128 v69;
  const std::string::value_type *v70;
  std::string::size_type v71;
  std::string *v72;
  __int128 v73;
  std::string *v74;
  __int128 v75;
  const std::string::value_type *v76;
  std::string::size_type v77;
  std::string *v78;
  __int128 v79;
  std::string *v80;
  std::string::size_type v81;
  std::string *v82;
  __int128 v83;
  char *v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::runtime_error *exception;
  std::string *v89;
  __int128 v90;
  std::string *v91;
  __int128 v92;
  std::string *v93;
  std::string::size_type v94;
  std::string *v95;
  __int128 v96;
  const std::string::value_type *v97;
  std::string::size_type v98;
  std::string *v99;
  __int128 v100;
  std::string *v101;
  __int128 v102;
  const std::string::value_type *v103;
  std::string::size_type v104;
  std::string *v105;
  __int128 v106;
  std::string *v107;
  std::string::size_type v108;
  std::string *v109;
  __int128 v110;
  char *v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  std::runtime_error *v115;
  std::string *v116;
  __int128 v117;
  std::string *v118;
  __int128 v119;
  std::string *v120;
  std::string::size_type v121;
  std::string *v122;
  __int128 v123;
  const std::string::value_type *v124;
  std::string::size_type v125;
  std::string *v126;
  __int128 v127;
  std::string *v128;
  __int128 v129;
  const std::string::value_type *v130;
  std::string::size_type v131;
  std::string *v132;
  __int128 v133;
  std::string *v134;
  std::string::size_type v135;
  std::string *v136;
  __int128 v137;
  std::string v138;
  const std::string::value_type *v139;
  std::string::size_type v140;
  unsigned __int8 v141;
  const std::string::value_type *v142;
  std::string::size_type v143;
  unsigned __int8 v144;
  std::string v145;
  std::string v146;
  std::string v147;
  std::string v148;
  std::string v149;
  std::string v150;
  std::string v151;
  std::string v152;
  std::string v153;

  v6 = a5;
  v7 = a4;
  if (((char)a3[23] & 0x80000000) == 0)
  {
    v9 = a3[23];
    HIDWORD(v10) = v9;
    LODWORD(v10) = (v9 << 24) - 0x4000000;
    switch((v10 >> 25))
    {
      case 0u:
        if (*(_DWORD *)a3 == 944987991)
          goto LABEL_28;
        if (v9 == 8)
          goto LABEL_14;
        if (v9 == 18)
          goto LABEL_17;
        if (v9 != 10)
          goto LABEL_58;
LABEL_7:
        if (*(_QWORD *)a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
          goto LABEL_121;
        if (v9 == 18)
          goto LABEL_17;
        v12 = a3;
        if (v9 == 10)
          goto LABEL_54;
        if (v9 != 8)
          goto LABEL_58;
LABEL_14:
        if (*(_QWORD *)a3 == 0x736169625F656E61)
          goto LABEL_59;
        v12 = a3;
        if (v9 == 10)
          goto LABEL_54;
        if (v9 != 18)
          goto LABEL_58;
LABEL_17:
        if (*(_QWORD *)a3 == 0x5F6363615F656E61
          && *((_QWORD *)a3 + 1) == 0x6968735F73616962
          && *((_WORD *)a3 + 8) == 29798)
        {
          goto LABEL_90;
        }
        v12 = a3;
        if (v9 != 10)
          goto LABEL_58;
        goto LABEL_54;
      case 2u:
        goto LABEL_14;
      case 3u:
        goto LABEL_7;
      case 7u:
        goto LABEL_17;
      default:
        goto LABEL_58;
    }
  }
  v15 = *((_QWORD *)a3 + 1);
  *((_QWORD *)&v16 + 1) = v15;
  *(_QWORD *)&v16 = v15 - 4;
  switch((unint64_t)(v16 >> 1))
  {
    case 0uLL:
      if (**(_DWORD **)a3 != 944987991)
        goto LABEL_58;
LABEL_28:
      Espresso::generic_deconvolution_kernel::create_weights_blob(this, &v153);
      v17 = (char *)this + 688;
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)v17, (__int128 *)&v153);
      size = (std::__shared_weak_count *)v153.__r_.__value_.__l.__size_;
      if (v153.__r_.__value_.__l.__size_)
      {
        v19 = (unint64_t *)(v153.__r_.__value_.__l.__size_ + 8);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
      if (v6)
      {
        v21 = *(float **)(*(_QWORD *)v17 + 24);
        do
        {
          v22 = *v7++;
          *v21++ = (float)v22;
          --v6;
        }
        while (v6);
      }
      return;
    case 2uLL:
      goto LABEL_42;
    case 3uLL:
      if (**(_QWORD **)a3 == 0x6163735F74736F70 && *(_WORD *)(*(_QWORD *)a3 + 8) == 25964)
      {
LABEL_121:
        std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v153, (unint64_t)(int)a5 >> 2, 1, 1, 1);
        v84 = (char *)this + 624;
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)v84, (__int128 *)&v153);
        v85 = (std::__shared_weak_count *)v153.__r_.__value_.__l.__size_;
        if (v153.__r_.__value_.__l.__size_)
        {
          v86 = (unint64_t *)(v153.__r_.__value_.__l.__size_ + 8);
          do
            v87 = __ldaxr(v86);
          while (__stlxr(v87 - 1, v86));
          if (!v87)
          {
            ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
            std::__shared_weak_count::__release_weak(v85);
          }
        }
        v33 = *(_QWORD *)v84;
        if (v6 != 4 * *(int *)(*(_QWORD *)v84 + 8))
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::to_string(&v146, v6);
          v89 = std::string::insert(&v146, 0, "Unexpected size s=");
          v90 = *(_OWORD *)&v89->__r_.__value_.__l.__data_;
          v147.__r_.__value_.__r.__words[2] = v89->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v147.__r_.__value_.__l.__data_ = v90;
          v89->__r_.__value_.__l.__size_ = 0;
          v89->__r_.__value_.__r.__words[2] = 0;
          v89->__r_.__value_.__r.__words[0] = 0;
          v91 = std::string::append(&v147, "/blob=");
          v92 = *(_OWORD *)&v91->__r_.__value_.__l.__data_;
          v148.__r_.__value_.__r.__words[2] = v91->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v148.__r_.__value_.__l.__data_ = v92;
          v91->__r_.__value_.__l.__size_ = 0;
          v91->__r_.__value_.__r.__words[2] = 0;
          v91->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v145, 4 * *(int *)(*(_QWORD *)v84 + 8));
          if ((v145.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v93 = &v145;
          else
            v93 = (std::string *)v145.__r_.__value_.__r.__words[0];
          if ((v145.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v94 = HIBYTE(v145.__r_.__value_.__r.__words[2]);
          else
            v94 = v145.__r_.__value_.__l.__size_;
          v95 = std::string::append(&v148, (const std::string::value_type *)v93, v94);
          v96 = *(_OWORD *)&v95->__r_.__value_.__l.__data_;
          v149.__r_.__value_.__r.__words[2] = v95->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v96;
          v95->__r_.__value_.__l.__size_ = 0;
          v95->__r_.__value_.__r.__words[2] = 0;
          v95->__r_.__value_.__r.__words[0] = 0;
          std::string::basic_string[abi:ne180100]<0>(&v142, " @ ");
          if ((v144 & 0x80u) == 0)
            v97 = (const std::string::value_type *)&v142;
          else
            v97 = v142;
          if ((v144 & 0x80u) == 0)
            v98 = v144;
          else
            v98 = v143;
          v99 = std::string::append(&v149, v97, v98);
          v100 = *(_OWORD *)&v99->__r_.__value_.__l.__data_;
          v150.__r_.__value_.__r.__words[2] = v99->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v150.__r_.__value_.__l.__data_ = v100;
          v99->__r_.__value_.__l.__size_ = 0;
          v99->__r_.__value_.__r.__words[2] = 0;
          v99->__r_.__value_.__r.__words[0] = 0;
          v101 = std::string::append(&v150, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
          v102 = *(_OWORD *)&v101->__r_.__value_.__l.__data_;
          v151.__r_.__value_.__r.__words[2] = v101->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v151.__r_.__value_.__l.__data_ = v102;
          v101->__r_.__value_.__l.__size_ = 0;
          v101->__r_.__value_.__r.__words[2] = 0;
          v101->__r_.__value_.__r.__words[0] = 0;
          std::string::basic_string[abi:ne180100]<0>(&v139, ":");
          if ((v141 & 0x80u) == 0)
            v103 = (const std::string::value_type *)&v139;
          else
            v103 = v139;
          if ((v141 & 0x80u) == 0)
            v104 = v141;
          else
            v104 = v140;
          v105 = std::string::append(&v151, v103, v104);
          v106 = *(_OWORD *)&v105->__r_.__value_.__l.__data_;
          v152.__r_.__value_.__r.__words[2] = v105->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v152.__r_.__value_.__l.__data_ = v106;
          v105->__r_.__value_.__l.__size_ = 0;
          v105->__r_.__value_.__r.__words[2] = 0;
          v105->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v138, 123);
          if ((v138.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v107 = &v138;
          else
            v107 = (std::string *)v138.__r_.__value_.__r.__words[0];
          if ((v138.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v108 = HIBYTE(v138.__r_.__value_.__r.__words[2]);
          else
            v108 = v138.__r_.__value_.__l.__size_;
          v109 = std::string::append(&v152, (const std::string::value_type *)v107, v108);
          v110 = *(_OWORD *)&v109->__r_.__value_.__l.__data_;
          v153.__r_.__value_.__r.__words[2] = v109->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v153.__r_.__value_.__l.__data_ = v110;
          v109->__r_.__value_.__l.__size_ = 0;
          v109->__r_.__value_.__r.__words[2] = 0;
          v109->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(exception, &v153);
          __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        goto LABEL_158;
      }
      if (v15 != 8)
        goto LABEL_43;
LABEL_42:
      if (**(_QWORD **)a3 == 0x736169625F656E61)
      {
LABEL_59:
        std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v153, (unint64_t)(int)a5 >> 2, 1, 1, 1);
        v29 = (char *)this + 640;
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)v29, (__int128 *)&v153);
        v30 = (std::__shared_weak_count *)v153.__r_.__value_.__l.__size_;
        if (v153.__r_.__value_.__l.__size_)
        {
          v31 = (unint64_t *)(v153.__r_.__value_.__l.__size_ + 8);
          do
            v32 = __ldaxr(v31);
          while (__stlxr(v32 - 1, v31));
          if (!v32)
          {
            ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
            std::__shared_weak_count::__release_weak(v30);
          }
        }
        v33 = *(_QWORD *)v29;
        if (v6 != 4 * *(int *)(*(_QWORD *)v29 + 8))
        {
          v34 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::to_string(&v146, v6);
          v35 = std::string::insert(&v146, 0, "Unexpected size s=");
          v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
          v147.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v147.__r_.__value_.__l.__data_ = v36;
          v35->__r_.__value_.__l.__size_ = 0;
          v35->__r_.__value_.__r.__words[2] = 0;
          v35->__r_.__value_.__r.__words[0] = 0;
          v37 = std::string::append(&v147, "/blob=");
          v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
          v148.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v148.__r_.__value_.__l.__data_ = v38;
          v37->__r_.__value_.__l.__size_ = 0;
          v37->__r_.__value_.__r.__words[2] = 0;
          v37->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v145, 4 * *(int *)(*(_QWORD *)v29 + 8));
          if ((v145.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v39 = &v145;
          else
            v39 = (std::string *)v145.__r_.__value_.__r.__words[0];
          if ((v145.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v40 = HIBYTE(v145.__r_.__value_.__r.__words[2]);
          else
            v40 = v145.__r_.__value_.__l.__size_;
          v41 = std::string::append(&v148, (const std::string::value_type *)v39, v40);
          v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
          v149.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v42;
          v41->__r_.__value_.__l.__size_ = 0;
          v41->__r_.__value_.__r.__words[2] = 0;
          v41->__r_.__value_.__r.__words[0] = 0;
          std::string::basic_string[abi:ne180100]<0>(&v142, " @ ");
          if ((v144 & 0x80u) == 0)
            v43 = (const std::string::value_type *)&v142;
          else
            v43 = v142;
          if ((v144 & 0x80u) == 0)
            v44 = v144;
          else
            v44 = v143;
          v45 = std::string::append(&v149, v43, v44);
          v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
          v150.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v150.__r_.__value_.__l.__data_ = v46;
          v45->__r_.__value_.__l.__size_ = 0;
          v45->__r_.__value_.__r.__words[2] = 0;
          v45->__r_.__value_.__r.__words[0] = 0;
          v47 = std::string::append(&v150, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
          v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
          v151.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v151.__r_.__value_.__l.__data_ = v48;
          v47->__r_.__value_.__l.__size_ = 0;
          v47->__r_.__value_.__r.__words[2] = 0;
          v47->__r_.__value_.__r.__words[0] = 0;
          std::string::basic_string[abi:ne180100]<0>(&v139, ":");
          if ((v141 & 0x80u) == 0)
            v49 = (const std::string::value_type *)&v139;
          else
            v49 = v139;
          if ((v141 & 0x80u) == 0)
            v50 = v141;
          else
            v50 = v140;
          v51 = std::string::append(&v151, v49, v50);
          v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
          v152.__r_.__value_.__r.__words[2] = v51->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v152.__r_.__value_.__l.__data_ = v52;
          v51->__r_.__value_.__l.__size_ = 0;
          v51->__r_.__value_.__r.__words[2] = 0;
          v51->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v138, 127);
          if ((v138.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v53 = &v138;
          else
            v53 = (std::string *)v138.__r_.__value_.__r.__words[0];
          if ((v138.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v54 = HIBYTE(v138.__r_.__value_.__r.__words[2]);
          else
            v54 = v138.__r_.__value_.__l.__size_;
          v55 = std::string::append(&v152, (const std::string::value_type *)v53, v54);
          v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
          v153.__r_.__value_.__r.__words[2] = v55->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v153.__r_.__value_.__l.__data_ = v56;
          v55->__r_.__value_.__l.__size_ = 0;
          v55->__r_.__value_.__r.__words[2] = 0;
          v55->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(v34, &v153);
          __cxa_throw(v34, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        goto LABEL_158;
      }
LABEL_43:
      if (v15 == 10)
        goto LABEL_53;
      if (v15 != 18)
        goto LABEL_58;
LABEL_45:
      if (**(_QWORD **)a3 == 0x5F6363615F656E61
        && *(_QWORD *)(*(_QWORD *)a3 + 8) == 0x6968735F73616962
        && *(_WORD *)(*(_QWORD *)a3 + 16) == 29798)
      {
LABEL_90:
        std::allocate_shared[abi:ne180100]<Espresso::blob<int,1>,std::allocator<Espresso::blob<int,1>>,int &,int &,int &,int &,void>(&v153, (unint64_t)(int)a5 >> 2, 1, 1, 1);
        v57 = (char *)this + 656;
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)v57, (__int128 *)&v153);
        v58 = (std::__shared_weak_count *)v153.__r_.__value_.__l.__size_;
        if (v153.__r_.__value_.__l.__size_)
        {
          v59 = (unint64_t *)(v153.__r_.__value_.__l.__size_ + 8);
          do
            v60 = __ldaxr(v59);
          while (__stlxr(v60 - 1, v59));
          if (!v60)
          {
            ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
            std::__shared_weak_count::__release_weak(v58);
          }
        }
        v33 = *(_QWORD *)v57;
        if (v6 != 4 * *(int *)(*(_QWORD *)v57 + 8))
        {
          v61 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::to_string(&v146, v6);
          v62 = std::string::insert(&v146, 0, "Unexpected size s=");
          v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
          v147.__r_.__value_.__r.__words[2] = v62->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v147.__r_.__value_.__l.__data_ = v63;
          v62->__r_.__value_.__l.__size_ = 0;
          v62->__r_.__value_.__r.__words[2] = 0;
          v62->__r_.__value_.__r.__words[0] = 0;
          v64 = std::string::append(&v147, "/blob=");
          v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
          v148.__r_.__value_.__r.__words[2] = v64->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v148.__r_.__value_.__l.__data_ = v65;
          v64->__r_.__value_.__l.__size_ = 0;
          v64->__r_.__value_.__r.__words[2] = 0;
          v64->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v145, 4 * *(int *)(*(_QWORD *)v57 + 8));
          if ((v145.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v66 = &v145;
          else
            v66 = (std::string *)v145.__r_.__value_.__r.__words[0];
          if ((v145.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v67 = HIBYTE(v145.__r_.__value_.__r.__words[2]);
          else
            v67 = v145.__r_.__value_.__l.__size_;
          v68 = std::string::append(&v148, (const std::string::value_type *)v66, v67);
          v69 = *(_OWORD *)&v68->__r_.__value_.__l.__data_;
          v149.__r_.__value_.__r.__words[2] = v68->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v69;
          v68->__r_.__value_.__l.__size_ = 0;
          v68->__r_.__value_.__r.__words[2] = 0;
          v68->__r_.__value_.__r.__words[0] = 0;
          std::string::basic_string[abi:ne180100]<0>(&v142, " @ ");
          if ((v144 & 0x80u) == 0)
            v70 = (const std::string::value_type *)&v142;
          else
            v70 = v142;
          if ((v144 & 0x80u) == 0)
            v71 = v144;
          else
            v71 = v143;
          v72 = std::string::append(&v149, v70, v71);
          v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
          v150.__r_.__value_.__r.__words[2] = v72->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v150.__r_.__value_.__l.__data_ = v73;
          v72->__r_.__value_.__l.__size_ = 0;
          v72->__r_.__value_.__r.__words[2] = 0;
          v72->__r_.__value_.__r.__words[0] = 0;
          v74 = std::string::append(&v150, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
          v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
          v151.__r_.__value_.__r.__words[2] = v74->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v151.__r_.__value_.__l.__data_ = v75;
          v74->__r_.__value_.__l.__size_ = 0;
          v74->__r_.__value_.__r.__words[2] = 0;
          v74->__r_.__value_.__r.__words[0] = 0;
          std::string::basic_string[abi:ne180100]<0>(&v139, ":");
          if ((v141 & 0x80u) == 0)
            v76 = (const std::string::value_type *)&v139;
          else
            v76 = v139;
          if ((v141 & 0x80u) == 0)
            v77 = v141;
          else
            v77 = v140;
          v78 = std::string::append(&v151, v76, v77);
          v79 = *(_OWORD *)&v78->__r_.__value_.__l.__data_;
          v152.__r_.__value_.__r.__words[2] = v78->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v152.__r_.__value_.__l.__data_ = v79;
          v78->__r_.__value_.__l.__size_ = 0;
          v78->__r_.__value_.__r.__words[2] = 0;
          v78->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v138, 131);
          if ((v138.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v80 = &v138;
          else
            v80 = (std::string *)v138.__r_.__value_.__r.__words[0];
          if ((v138.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v81 = HIBYTE(v138.__r_.__value_.__r.__words[2]);
          else
            v81 = v138.__r_.__value_.__l.__size_;
          v82 = std::string::append(&v152, (const std::string::value_type *)v80, v81);
          v83 = *(_OWORD *)&v82->__r_.__value_.__l.__data_;
          v153.__r_.__value_.__r.__words[2] = v82->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v153.__r_.__value_.__l.__data_ = v83;
          v82->__r_.__value_.__l.__size_ = 0;
          v82->__r_.__value_.__r.__words[2] = 0;
          v82->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(v61, &v153);
          __cxa_throw(v61, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
      }
      else
      {
        if (v15 != 10)
        {
LABEL_58:
          Espresso::deconvolution_kernel_cpu::__set_weight_raw_blob(this, a2, a3, a4, a5, a6);
          return;
        }
LABEL_53:
        v12 = *(unsigned __int8 **)a3;
LABEL_54:
        v26 = *(_QWORD *)v12;
        v27 = *((unsigned __int16 *)v12 + 4);
        if (v26 != 0x61727478655F7868 || v27 != 26207)
          goto LABEL_58;
        std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v153, (unint64_t)(int)a5 >> 2, 1, 1, 1);
        v111 = (char *)this + 672;
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)v111, (__int128 *)&v153);
        v112 = (std::__shared_weak_count *)v153.__r_.__value_.__l.__size_;
        if (v153.__r_.__value_.__l.__size_)
        {
          v113 = (unint64_t *)(v153.__r_.__value_.__l.__size_ + 8);
          do
            v114 = __ldaxr(v113);
          while (__stlxr(v114 - 1, v113));
          if (!v114)
          {
            ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
            std::__shared_weak_count::__release_weak(v112);
          }
        }
        v33 = *(_QWORD *)v111;
        if (v6 != 4 * *(int *)(*(_QWORD *)v111 + 8))
        {
          v115 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::to_string(&v146, v6);
          v116 = std::string::insert(&v146, 0, "Unexpected size s=");
          v117 = *(_OWORD *)&v116->__r_.__value_.__l.__data_;
          v147.__r_.__value_.__r.__words[2] = v116->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v147.__r_.__value_.__l.__data_ = v117;
          v116->__r_.__value_.__l.__size_ = 0;
          v116->__r_.__value_.__r.__words[2] = 0;
          v116->__r_.__value_.__r.__words[0] = 0;
          v118 = std::string::append(&v147, "/blob=");
          v119 = *(_OWORD *)&v118->__r_.__value_.__l.__data_;
          v148.__r_.__value_.__r.__words[2] = v118->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v148.__r_.__value_.__l.__data_ = v119;
          v118->__r_.__value_.__l.__size_ = 0;
          v118->__r_.__value_.__r.__words[2] = 0;
          v118->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v145, 4 * *(int *)(*(_QWORD *)v111 + 8));
          if ((v145.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v120 = &v145;
          else
            v120 = (std::string *)v145.__r_.__value_.__r.__words[0];
          if ((v145.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v121 = HIBYTE(v145.__r_.__value_.__r.__words[2]);
          else
            v121 = v145.__r_.__value_.__l.__size_;
          v122 = std::string::append(&v148, (const std::string::value_type *)v120, v121);
          v123 = *(_OWORD *)&v122->__r_.__value_.__l.__data_;
          v149.__r_.__value_.__r.__words[2] = v122->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v123;
          v122->__r_.__value_.__l.__size_ = 0;
          v122->__r_.__value_.__r.__words[2] = 0;
          v122->__r_.__value_.__r.__words[0] = 0;
          std::string::basic_string[abi:ne180100]<0>(&v142, " @ ");
          if ((v144 & 0x80u) == 0)
            v124 = (const std::string::value_type *)&v142;
          else
            v124 = v142;
          if ((v144 & 0x80u) == 0)
            v125 = v144;
          else
            v125 = v143;
          v126 = std::string::append(&v149, v124, v125);
          v127 = *(_OWORD *)&v126->__r_.__value_.__l.__data_;
          v150.__r_.__value_.__r.__words[2] = v126->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v150.__r_.__value_.__l.__data_ = v127;
          v126->__r_.__value_.__l.__size_ = 0;
          v126->__r_.__value_.__r.__words[2] = 0;
          v126->__r_.__value_.__r.__words[0] = 0;
          v128 = std::string::append(&v150, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
          v129 = *(_OWORD *)&v128->__r_.__value_.__l.__data_;
          v151.__r_.__value_.__r.__words[2] = v128->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v151.__r_.__value_.__l.__data_ = v129;
          v128->__r_.__value_.__l.__size_ = 0;
          v128->__r_.__value_.__r.__words[2] = 0;
          v128->__r_.__value_.__r.__words[0] = 0;
          std::string::basic_string[abi:ne180100]<0>(&v139, ":");
          if ((v141 & 0x80u) == 0)
            v130 = (const std::string::value_type *)&v139;
          else
            v130 = v139;
          if ((v141 & 0x80u) == 0)
            v131 = v141;
          else
            v131 = v140;
          v132 = std::string::append(&v151, v130, v131);
          v133 = *(_OWORD *)&v132->__r_.__value_.__l.__data_;
          v152.__r_.__value_.__r.__words[2] = v132->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v152.__r_.__value_.__l.__data_ = v133;
          v132->__r_.__value_.__l.__size_ = 0;
          v132->__r_.__value_.__r.__words[2] = 0;
          v132->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v138, 135);
          if ((v138.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v134 = &v138;
          else
            v134 = (std::string *)v138.__r_.__value_.__r.__words[0];
          if ((v138.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v135 = HIBYTE(v138.__r_.__value_.__r.__words[2]);
          else
            v135 = v138.__r_.__value_.__l.__size_;
          v136 = std::string::append(&v152, (const std::string::value_type *)v134, v135);
          v137 = *(_OWORD *)&v136->__r_.__value_.__l.__data_;
          v153.__r_.__value_.__r.__words[2] = v136->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v153.__r_.__value_.__l.__data_ = v137;
          v136->__r_.__value_.__l.__size_ = 0;
          v136->__r_.__value_.__r.__words[2] = 0;
          v136->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(v115, &v153);
          __cxa_throw(v115, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
      }
LABEL_158:
      memcpy(*(void **)(v33 + 16), v7, v6);
      return;
    case 7uLL:
      goto LABEL_45;
    default:
      goto LABEL_58;
  }
}

void sub_1916357D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  void *v59;
  char v60;
  uint64_t v61;

  if (*(char *)(v61 - 57) < 0)
    operator delete(*(void **)(v61 - 80));
  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v61 - 89) < 0)
    operator delete(*(void **)(v61 - 112));
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v61 - 121) < 0)
    operator delete(*(void **)(v61 - 144));
  if (*(char *)(v61 - 153) < 0)
    operator delete(*(void **)(v61 - 176));
  if (a27 < 0)
    operator delete(a22);
  if (a59 < 0)
    operator delete(a54);
  if (a33 < 0)
    operator delete(a28);
  if (a52 < 0)
    operator delete(a47);
  if (a45 < 0)
    operator delete(a40);
  if (a39 < 0)
    operator delete(a34);
  if ((v60 & 1) != 0)
    __cxa_free_exception(v59);
  _Unwind_Resume(exception_object);
}

void wrapper_kernel<wrapper_kernel_with_weights<Espresso::deconvolution_kernel_cpu,Espresso::convolution_uniforms>,Espresso::convolution_uniforms>::convert_layer_data_to_fp32(_QWORD *a1, char **a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v9;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  const void *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  __int128 v43;
  int64x2_t v44;
  char *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  __int128 v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  int64x2_t v59;
  char *v60;
  _QWORD *v61;
  void *__p;
  void *v63;
  __int128 v64;
  const void *v65;
  std::__shared_weak_count *v66;

  if (a3 != a4)
  {
    v9 = a3;
    v12 = a2 + 2;
    while (1)
    {
      v14 = *(const void **)v9;
      v13 = *(std::__shared_weak_count **)(v9 + 8);
      v65 = *(const void **)v9;
      v66 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
      }
      v17 = operator new(0x118uLL);
      v17[1] = 0;
      v17[2] = 0;
      *v17 = &off_1E2DC1868;
      Espresso::blob_cpu::blob_cpu((uint64_t)(v17 + 3), a1);
      *(_QWORD *)&v64 = v17 + 3;
      *((_QWORD *)&v64 + 1) = v17;
      Espresso::abstract_blob_container::shape((char *)&v58, (uint64_t)v14);
      v56 = 0;
      v57 = 0;
      (*(void (**)(_QWORD *, uint64_t *, uint64_t *))(v17[3] + 16))(v17 + 3, &v58, &v56);
      v18 = v57;
      if (v57)
      {
        v19 = (unint64_t *)&v57->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if (__p)
      {
        v63 = __p;
        operator delete(__p);
      }
      if (v65)
      {
        if (v21)
          break;
      }
      v21 = 0;
      v55 = 0;
      if (a5)
        goto LABEL_21;
LABEL_28:
      v27 = v64;
      if (*((_QWORD *)&v64 + 1))
      {
        v28 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v31 = a2[1];
      v30 = (unint64_t)a2[2];
      if ((unint64_t)v31 >= v30)
      {
        v54 = v27;
        v33 = (v31 - *a2) >> 4;
        if ((unint64_t)(v33 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v34 = v30 - (_QWORD)*a2;
        v35 = v34 >> 3;
        if (v34 >> 3 <= (unint64_t)(v33 + 1))
          v35 = v33 + 1;
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0)
          v36 = 0xFFFFFFFFFFFFFFFLL;
        else
          v36 = v35;
        v61 = v12;
        v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v36);
        v39 = &v37[16 * v33];
        *(_OWORD *)v39 = v54;
        v41 = *a2;
        v40 = a2[1];
        if (v40 == *a2)
        {
          v44 = vdupq_n_s64((unint64_t)v40);
          v42 = &v37[16 * v33];
        }
        else
        {
          v42 = &v37[16 * v33];
          do
          {
            v43 = *((_OWORD *)v40 - 1);
            v40 -= 16;
            *((_OWORD *)v42 - 1) = v43;
            v42 -= 16;
            *(_QWORD *)v40 = 0;
            *((_QWORD *)v40 + 1) = 0;
          }
          while (v40 != v41);
          v44 = *(int64x2_t *)a2;
        }
        v32 = v39 + 16;
        *a2 = v42;
        a2[1] = v39 + 16;
        v59 = v44;
        v45 = a2[2];
        a2[2] = &v37[16 * v38];
        v60 = v45;
        v58 = v44.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v58);
      }
      else
      {
        *(_OWORD *)v31 = v27;
        v32 = v31 + 16;
      }
      a2[1] = v32;
      if (v55)
      {
        v46 = (unint64_t *)&v55->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      v48 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
      if (*((_QWORD *)&v64 + 1))
      {
        v49 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      v51 = v66;
      if (v66)
      {
        v52 = (unint64_t *)&v66->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v9 += 16;
      if (v9 == a4)
        return;
    }
    v55 = v66;
    if (v66)
    {
      v22 = (unint64_t *)&v66->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    if (!a5)
      goto LABEL_28;
LABEL_21:
    if (a6)
    {
      v58 = 0;
      v59.i64[0] = 0;
      (*(void (**)(void *, uint64_t *, uint64_t))(*(_QWORD *)v21 + 40))(v21, &v58, v64 + 160);
      v24 = (std::__shared_weak_count *)v59.i64[0];
      if (v59.i64[0])
      {
        v25 = (unint64_t *)(v59.i64[0] + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v21, v64 + 160, 1.0);
    }
    goto LABEL_28;
  }
}

void sub_191635D70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  _Unwind_Resume(a1);
}

void wrapper_kernel_with_weights<Espresso::deconvolution_kernel_cpu,Espresso::convolution_uniforms>::__launch(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  __int128 v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  std::__shared_weak_count *v44;

  v7 = *(_QWORD *)(a1 + 584);
  v43 = *(_QWORD *)(a1 + 576);
  v44 = (std::__shared_weak_count *)v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = *(_QWORD *)(a1 + 600);
  v41 = *(_QWORD *)(a1 + 592);
  v42 = (std::__shared_weak_count *)v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v13 = *(std::__shared_weak_count **)(a1 + 568);
  v39 = *(_QWORD *)(a1 + 560);
  v40 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  if (*(_QWORD *)(a1 + 688))
  {
    v38 = 0uLL;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 592, &v38);
    v16 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
    if (*((_QWORD *)&v38 + 1))
    {
      v17 = (unint64_t *)(*((_QWORD *)&v38 + 1) + 8);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 576), *(_QWORD *)(a1 + 688), *(_QWORD *)(a1 + 696));
  }
  v19 = *(_QWORD *)(a1 + 704);
  if (v19)
  {
    v20 = *(std::__shared_weak_count **)(a1 + 712);
    if (v20)
    {
      v21 = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 560), v19, (uint64_t)v20);
      *(_DWORD *)(a1 + 336) = 1;
      do
        v23 = __ldaxr(v21);
      while (__stlxr(v23 - 1, v21));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    else
    {
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 560), v19, 0);
      *(_DWORD *)(a1 + 336) = 1;
    }
  }
  Espresso::deconvolution_kernel_cpu::__launch(a1, v19, a3, a4);
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 576), v43, (uint64_t)v44);
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 592), v41, (uint64_t)v42);
  v25 = v39;
  v24 = v40;
  if (v40)
  {
    v26 = (unint64_t *)&v40->__shared_owners_;
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 560), v25, (uint64_t)v24);
    *(_DWORD *)(a1 + 336) = v25 != 0;
    do
      v28 = __ldaxr(v26);
    while (__stlxr(v28 - 1, v26));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  else
  {
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 560), v39, 0);
    *(_DWORD *)(a1 + 336) = v25 != 0;
  }
  v29 = v40;
  if (v40)
  {
    v30 = (unint64_t *)&v40->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v32 = v42;
  if (v42)
  {
    v33 = (unint64_t *)&v42->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v35 = v44;
  if (v44)
  {
    v36 = (unint64_t *)&v44->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
}

void sub_1916360EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;
  uint64_t v9;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v7 = va_arg(va2, _QWORD);
  v9 = va_arg(va2, _QWORD);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  _Unwind_Resume(a1);
}

void Espresso::convolution_kernel_cpu_base<Espresso::generic_deconvolution_kernel>::clear_weights(uint64_t a1)
{
  _QWORD *v1;

  v1 = (_QWORD *)(a1 + 160);
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*(_QWORD **)(a1 + 160));
  *(v1 - 1) = v1;
  *v1 = 0;
  v1[1] = 0;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::reset[abi:ne180100](v1 + 45);
  std::shared_ptr<Espresso::blob<unsigned short,4>>::reset[abi:ne180100](v1 + 52);
  std::shared_ptr<Espresso::blob<unsigned short,4>>::reset[abi:ne180100](v1 + 54);
}

void wrapper_kernel_with_weights<Espresso::deconvolution_kernel_cpu,Espresso::convolution_uniforms>::~wrapper_kernel_with_weights(void **a1)
{
  *a1 = &off_1E2D573D8;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 88));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 86));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 84));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 82));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 80));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 78));
  *a1 = &off_1E2D90B50;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 76));
  *a1 = off_1E2D95618;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 74));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 72));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 70));
  Espresso::generic_convolution_kernel::~generic_convolution_kernel(a1);
}

{
  *a1 = &off_1E2D573D8;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 88));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 86));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 84));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 82));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 80));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 78));
  *a1 = &off_1E2D90B50;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 76));
  *a1 = off_1E2D95618;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 74));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 72));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 70));
  Espresso::generic_convolution_kernel::~generic_convolution_kernel(a1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<wrapper_kernel<wrapper_kernel_with_weights<Espresso::deconvolution_kernel_cpu,Espresso::convolution_uniforms>,Espresso::convolution_uniforms>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB4278;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<wrapper_kernel<wrapper_kernel_with_weights<Espresso::deconvolution_kernel_cpu,Espresso::convolution_uniforms>,Espresso::convolution_uniforms>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB4278;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<wrapper_kernel_with_weights<Espresso::deconvolution_kernel_cpu,Espresso::convolution_uniforms>,Espresso::convolution_uniforms>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_2@<Q0>(uint64_t *a1@<X1>, __int128 *a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  uint64_t v7;
  __n128 result;

  v6 = (char *)operator new(0x318uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DB4240;
  Espresso::convolution_kernel_cpu::convolution_kernel_cpu((uint64_t)(v6 + 24), a1, v7, a2);
  *((_QWORD *)v6 + 3) = &off_1E2D4DDF8;
  *(_OWORD *)(v6 + 728) = 0u;
  *(_OWORD *)(v6 + 744) = 0u;
  *(_OWORD *)(v6 + 696) = 0u;
  *(_OWORD *)(v6 + 712) = 0u;
  *(_OWORD *)(v6 + 664) = 0u;
  *(_OWORD *)(v6 + 680) = 0u;
  *(_OWORD *)(v6 + 760) = 0u;
  *(_OWORD *)(v6 + 776) = 0u;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v6 + 95, *a1, a1[1]);
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_191636384(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void wrapper_kernel<wrapper_kernel_with_weights<Espresso::convolution_kernel_cpu,Espresso::convolution_uniforms>,Espresso::convolution_uniforms>::~wrapper_kernel(void **a1)
{
  *a1 = &off_1E2D4DDF8;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 94));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 92));
  *a1 = &off_1E2D57158;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 90));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 88));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 86));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 84));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 82));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 80));
  *a1 = &off_1E2D8CF58;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 78));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 76));
  *a1 = off_1E2D95398;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 74));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 72));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 70));
  Espresso::generic_convolution_kernel::~generic_convolution_kernel(a1);
}

{
  *a1 = &off_1E2D4DDF8;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 94));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 92));
  *a1 = &off_1E2D57158;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 90));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 88));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 86));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 84));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 82));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 80));
  *a1 = &off_1E2D8CF58;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 78));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 76));
  *a1 = off_1E2D95398;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 74));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 72));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 70));
  Espresso::generic_convolution_kernel::~generic_convolution_kernel(a1);
  JUMPOUT(0x19401CD90);
}

void wrapper_kernel<wrapper_kernel_with_weights<Espresso::convolution_kernel_cpu,Espresso::convolution_uniforms>,Espresso::convolution_uniforms>::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  _BOOL4 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  double v17;
  double v18;
  float v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  void *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  float *v34;
  vDSP_Length v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  __n128 v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  void **v48;
  void **v49;
  void **v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  int *v56;
  float *v57;
  vDSP_Length v58;
  int *v59;
  int v60;
  int v61;
  uint64_t v62;
  unint64_t v63;
  vDSP_Length v64;
  vDSP_Length v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  const void *v78;
  void **v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  void **v84;
  const void *v85;
  void *v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  uint64_t v98;
  std::__shared_weak_count *v99;
  float __B;
  _QWORD v101[2];
  _QWORD v102[2];
  void **v103[3];
  char *v104[3];
  void *v105;
  std::__shared_weak_count *v106;
  void ***v107;
  std::__shared_weak_count *v108;

  memset(v104, 0, sizeof(v104));
  memset(v103, 0, sizeof(v103));
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)*a3 + 32))(*(_QWORD *)*a3))
    v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)*a3 + 32))(*(_QWORD *)*a3) == 1;
  else
    v8 = 1;
  v9 = *(std::__shared_weak_count **)(a1 + 744);
  v102[0] = *(_QWORD *)(a1 + 736);
  v102[1] = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  wrapper_kernel<wrapper_kernel_with_weights<Espresso::convolution_kernel_cpu,Espresso::convolution_uniforms>,Espresso::convolution_uniforms>::convert_layer_data_to_fp32(v102, v104, *a4, a4[1], 1, v8);
  if (v9)
  {
    v12 = (unint64_t *)&v9->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v14 = *(std::__shared_weak_count **)(a1 + 744);
  v101[0] = *(_QWORD *)(a1 + 736);
  v101[1] = v14;
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  wrapper_kernel<wrapper_kernel_with_weights<Espresso::convolution_kernel_cpu,Espresso::convolution_uniforms>,Espresso::convolution_uniforms>::convert_layer_data_to_fp32(v101, (char **)v103, *a3, a3[1], 0, 0);
  if (v14)
  {
    v20 = (unint64_t *)&v14->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v98 = a1;
  v22 = *a4;
  if (a4[1] != *a4)
  {
    v23 = 0;
    do
    {
      if (!v8
        && (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v22 + 16 * v23) + 32))(*(_QWORD *)(v22 + 16 * v23))
         || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(*a4 + 16 * v23) + 32))(*(_QWORD *)(*a4 + 16 * v23)) == 1))
      {
        __B = *(float *)(*(_QWORD *)(*a4 + 16 * v23) + 112);
        v24 = &v104[0][16 * v23];
        v107 = (void ***)v25;
        v26 = (std::__shared_weak_count *)*((_QWORD *)v24 + 1);
        v108 = v26;
        if (v26)
        {
          v27 = (unint64_t *)&v26->__shared_owners_;
          do
            v28 = __ldxr(v27);
          while (__stxr(v28 + 1, v27));
        }
        v29 = *((_QWORD *)v25 + 20);
        v30 = (std::__shared_weak_count *)*((_QWORD *)v25 + 21);
        v105 = (void *)v29;
        v106 = v30;
        if (v30)
        {
          v31 = (unint64_t *)&v30->__shared_owners_;
          do
            v32 = __ldxr(v31);
          while (__stxr(v32 + 1, v31));
        }
        v33 = 0;
        v34 = *(float **)(v29 + 24);
        v35 = *(int *)(v29 + 8);
        v36 = v29 + 12;
        do
        {
          v35 *= *(int *)(v36 + v33);
          v33 += 4;
        }
        while (v33 != 12);
        vDSP_vsmul(v34, 1, &__B, v34, 1, v35);
        if (v30)
        {
          v37 = (unint64_t *)&v30->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
            std::__shared_weak_count::__release_weak(v30);
          }
        }
        v39 = v108;
        if (v108)
        {
          v40 = (unint64_t *)&v108->__shared_owners_;
          do
            v41 = __ldaxr(v40);
          while (__stlxr(v41 - 1, v40));
          if (!v41)
          {
            ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
            std::__shared_weak_count::__release_weak(v39);
          }
        }
      }
      ++v23;
      v22 = *a4;
    }
    while (v23 < (a4[1] - *a4) >> 4);
  }
  v42 = v98;
  wrapper_kernel_with_weights<Espresso::convolution_kernel_cpu,Espresso::convolution_uniforms>::__launch(v98, v17, v18, v19, a2, (uint64_t)v103, (uint64_t *)v104);
  v44 = *(_QWORD *)(v98 + 752);
  if (v44)
  {
    v45 = *(std::__shared_weak_count **)(v98 + 760);
    v99 = v45;
    if (v45)
    {
      v46 = (unint64_t *)&v45->__shared_owners_;
      do
        v47 = __ldxr(v46);
      while (__stxr(v47 + 1, v46));
    }
    v48 = v103[0];
    if (*v103[0]
    {
      v50 = v49;
      v51 = (std::__shared_weak_count *)v48[1];
      v107 = (void ***)v49;
      v108 = v51;
      if (v51)
      {
        v52 = (unint64_t *)&v51->__shared_owners_;
        do
          v53 = __ldxr(v52);
        while (__stxr(v53 + 1, v52));
      }
    }
    else
    {
      v51 = 0;
      v50 = 0;
      v107 = 0;
      v108 = 0;
    }
    LODWORD(v54) = *(_DWORD *)(v44 + 8);
    v97 = v51;
    if ((_DWORD)v54 == 1)
    {
      v55 = 0;
      v56 = (int *)v50[20];
      v57 = (float *)*((_QWORD *)v56 + 3);
      v58 = v56[2];
      v59 = v56 + 3;
      do
        v58 *= v59[v55++];
      while (v55 != 3);
      vDSP_vsmul(v57, 1, *(const float **)(v44 + 16), v57, 1, v58);
    }
    else
    {
      v60 = *((_DWORD *)v50 + 4);
      if ((_DWORD)v54 != v60)
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v54, v60);
      v61 = *((_DWORD *)v50 + 5);
      if (v61)
      {
        v62 = 0;
        v63 = 0;
        v64 = *((int *)v50 + 2) * (uint64_t)*((int *)v50 + 3);
        v65 = 4 * (int)v54 * v64;
        do
        {
          if ((_DWORD)v54)
          {
            v66 = 0;
            v67 = 0;
            v68 = v62;
            do
            {
              vDSP_vsmul((const float *)(*((_QWORD *)v50[20] + 3) + v68), 1, (const float *)(*(_QWORD *)(v44 + 16) + v66), (float *)(*((_QWORD *)v50[20] + 3) + v68), 1, v64);
              ++v67;
              v54 = *((int *)v50 + 4);
              v66 += 4;
              v68 += 4 * v64;
            }
            while (v67 < v54);
            v61 = *((_DWORD *)v50 + 5);
          }
          ++v63;
          v62 += v65;
        }
        while (v63 < v61);
      }
    }
    v42 = v98;
    if (v97)
    {
      v69 = (unint64_t *)&v97->__shared_owners_;
      do
        v70 = __ldaxr(v69);
      while (__stlxr(v70 - 1, v69));
      if (!v70)
      {
        ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
        std::__shared_weak_count::__release_weak(v97);
      }
    }
    if (v99)
    {
      v71 = (unint64_t *)&v99->__shared_owners_;
      do
        v72 = __ldaxr(v71);
      while (__stlxr(v72 - 1, v71));
      if (!v72)
      {
        ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
        std::__shared_weak_count::__release_weak(v99);
      }
    }
  }
  v73 = *(std::__shared_weak_count **)(v42 + 744);
  if (v73)
  {
    v74 = (unint64_t *)&v73->__shared_owners_;
    do
      v75 = __ldxr(v74);
    while (__stxr(v75 + 1, v74));
  }
  v76 = *a3;
  if (a3[1] != *a3)
  {
    v77 = 0;
    do
    {
      v78 = *(const void **)(v76 + 16 * v77);
      if (v78
      {
        v80 = (uint64_t)v79;
        v107 = (void ***)v79;
        v81 = *(std::__shared_weak_count **)(v76 + 16 * v77 + 8);
        v108 = v81;
        if (v81)
        {
          v82 = (unint64_t *)&v81->__shared_owners_;
          do
            v83 = __ldxr(v82);
          while (__stxr(v83 + 1, v82));
        }
      }
      else
      {
        v80 = 0;
        v107 = 0;
        v108 = 0;
      }
      v84 = v103[0];
      v85 = v103[0][2 * v77];
      if (v85
      {
        v105 = v86;
        v87 = (std::__shared_weak_count *)v84[2 * v77 + 1];
        v106 = v87;
        if (v87)
        {
          v88 = (unint64_t *)&v87->__shared_owners_;
          do
            v89 = __ldxr(v88);
          while (__stxr(v89 + 1, v88));
        }
      }
      else
      {
        v87 = 0;
        v86 = 0;
        v105 = 0;
        v106 = 0;
      }
      v43.n128_u64[0] = Espresso::QuantSimEngine::blob_container::copy_from_fp32(v80, (uint64_t)v86 + 160, 1.0);
      if (v87)
      {
        v90 = (unint64_t *)&v87->__shared_owners_;
        do
          v91 = __ldaxr(v90);
        while (__stlxr(v91 - 1, v90));
        if (!v91)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v87->__on_zero_shared)(v87, v43);
          std::__shared_weak_count::__release_weak(v87);
        }
      }
      v92 = v108;
      if (v108)
      {
        v93 = (unint64_t *)&v108->__shared_owners_;
        do
          v94 = __ldaxr(v93);
        while (__stlxr(v94 - 1, v93));
        if (!v94)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v92->__on_zero_shared)(v92, v43);
          std::__shared_weak_count::__release_weak(v92);
        }
      }
      ++v77;
      v76 = *a3;
    }
    while (v77 < (a3[1] - *a3) >> 4);
  }
  if (v73)
  {
    v95 = (unint64_t *)&v73->__shared_owners_;
    do
      v96 = __ldaxr(v95);
    while (__stlxr(v96 - 1, v95));
    if (!v96)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v73->__on_zero_shared)(v73, v43);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  v107 = v103;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v107);
  v103[0] = (void **)v104;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v103);
}

void sub_191636C04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  *(_QWORD *)(v25 - 104) = &a22;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 104));
  a22 = (void **)&a25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a22);
  _Unwind_Resume(a1);
}

_QWORD *Espresso::convolution_kernel_cpu_base<Espresso::generic_convolution_kernel>::share_weights(_QWORD *a1, const void **a2)
{
  _QWORD *result;
  uint64_t *v5;

  Espresso::generic_convolution_kernel::share_weights(a1, a2);
  result = *a2;
  if (*a2)
  {
    if (result)
    {
      v5 = result;
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](a1 + 72, v5[72], v5[73]);
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](a1 + 70, v5[70], v5[71]);
      return std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](a1 + 74, v5[74], v5[75]);
    }
  }
  return result;
}

void wrapper_kernel<wrapper_kernel_with_weights<Espresso::convolution_kernel_cpu,Espresso::convolution_uniforms>,Espresso::convolution_uniforms>::__set_weight_raw_blob(Espresso::generic_convolution_kernel *a1, uint64_t *a2, unsigned __int8 *a3, char *a4, unint64_t a5, uint64_t *a6)
{
  unsigned __int8 *v8;
  int v10;
  uint64_t v12;
  std::__shared_weak_count *size;
  unint64_t *v14;
  unint64_t v15;
  std::runtime_error *exception;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  std::string v39;
  _QWORD v40[2];
  unsigned __int8 v41;
  _QWORD v42[2];
  unsigned __int8 v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;

  v8 = a3;
  wrapper_kernel_with_weights<Espresso::convolution_kernel_cpu,Espresso::convolution_uniforms>::__set_weight_raw_blob(a1, a2, a3, a4, a5, a6);
  v10 = (char)v8[23];
  if (v10 < 0)
  {
    if (*((_QWORD *)v8 + 1) != 10)
      return;
    v8 = *(unsigned __int8 **)v8;
  }
  else if (v10 != 10)
  {
    return;
  }
  if (*(_QWORD *)v8 == 0x6163735F74736F70 && *((_WORD *)v8 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    v12 = (uint64_t)a1 + 752;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v12, (__int128 *)&v52);
    size = (std::__shared_weak_count *)v52.__r_.__value_.__l.__size_;
    if (v52.__r_.__value_.__l.__size_)
    {
      v14 = (unint64_t *)(v52.__r_.__value_.__l.__size_ + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    if (a5 != 4 * *(int *)(*(_QWORD *)v12 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v45, a5);
      v17 = std::string::insert(&v45, 0, "Unexpected size s=");
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      v19 = std::string::append(&v46, "/blob=");
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, 4 * *(int *)(*(_QWORD *)v12 + 8));
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v21 = &v44;
      else
        v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      else
        v22 = v44.__r_.__value_.__l.__size_;
      v23 = std::string::append(&v47, (const std::string::value_type *)v21, v22);
      v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, " @ ");
      if ((v43 & 0x80u) == 0)
        v25 = (const std::string::value_type *)v42;
      else
        v25 = (const std::string::value_type *)v42[0];
      if ((v43 & 0x80u) == 0)
        v26 = v43;
      else
        v26 = v42[1];
      v27 = std::string::append(&v48, v25, v26);
      v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      v29 = std::string::append(&v49, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v40, ":");
      if ((v41 & 0x80u) == 0)
        v31 = (const std::string::value_type *)v40;
      else
        v31 = (const std::string::value_type *)v40[0];
      if ((v41 & 0x80u) == 0)
        v32 = v41;
      else
        v32 = v40[1];
      v33 = std::string::append(&v50, v31, v32);
      v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, 197);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = &v39;
      else
        v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      else
        v36 = v39.__r_.__value_.__l.__size_;
      v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
      v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v52);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    memcpy(*(void **)(*(_QWORD *)v12 + 16), a4, a5);
  }
}

void sub_191637044(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  void *v59;
  int v60;
  uint64_t v61;

  if (*(char *)(v61 - 57) < 0)
    operator delete(*(void **)(v61 - 80));
  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v61 - 89) < 0)
    operator delete(*(void **)(v61 - 112));
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v61 - 121) < 0)
    operator delete(*(void **)(v61 - 144));
  if (*(char *)(v61 - 153) < 0)
    operator delete(*(void **)(v61 - 176));
  if (a27 < 0)
    operator delete(a22);
  if (a59 < 0)
    operator delete(a54);
  if (a33 < 0)
    operator delete(a28);
  if (a52 < 0)
    operator delete(a47);
  if (a45 < 0)
    operator delete(a40);
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0)
LABEL_28:
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

void wrapper_kernel_with_weights<Espresso::convolution_kernel_cpu,Espresso::convolution_uniforms>::__set_weights_finalize(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  double v9;
  float v10;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  float v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  __int128 v39;
  uint64_t v40[2];
  uint64_t v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  int v47;
  uint64_t v48;
  std::__shared_weak_count *v49;

  v2 = a1[70];
  v3 = (std::__shared_weak_count *)a1[71];
  v48 = v2;
  v49 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  if (v2)
  {
    if (a1[82])
      goto LABEL_61;
    if (!a1[84])
    {
      if (a1[80])
      {
        v18 = a1[86];
        if (v18)
        {
          v19 = **(float **)(v18 + 16);
          v20 = (std::__shared_weak_count *)a1[81];
          v41 = a1[80];
          v42 = v20;
          if (v20)
          {
            v21 = (unint64_t *)&v20->__shared_owners_;
            do
              v22 = __ldxr(v21);
            while (__stxr(v22 + 1, v21));
          }
          v40[0] = v2;
          v40[1] = (uint64_t)v3;
          if (v3)
          {
            v23 = (unint64_t *)&v3->__shared_owners_;
            do
              v24 = __ldxr(v23);
            while (__stxr(v24 + 1, v23));
          }
          Espresso::ane_style_post_scale_bias((uint64_t)&v41, v40, (uint64_t)&v43, v19);
          if (v3)
          {
            v25 = (unint64_t *)&v3->__shared_owners_;
            do
              v26 = __ldaxr(v25);
            while (__stlxr(v26 - 1, v25));
            if (!v26)
            {
              ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
              std::__shared_weak_count::__release_weak(v3);
            }
          }
          v27 = v42;
          if (v42)
          {
            v28 = (unint64_t *)&v42->__shared_owners_;
            do
              v29 = __ldaxr(v28);
            while (__stlxr(v29 - 1, v28));
            if (!v29)
            {
              ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
              std::__shared_weak_count::__release_weak(v27);
            }
          }
          std::allocate_shared[abi:ne180100]<Espresso::blob<int,1>,std::allocator<Espresso::blob<int,1>>,int &,int &,int &,int &,void>(&v39, 1, 1, 1, 1);
          std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)(a1 + 84), &v39);
          v30 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
          if (*((_QWORD *)&v39 + 1))
          {
            v31 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
            do
              v32 = __ldaxr(v31);
            while (__stlxr(v32 - 1, v31));
            if (!v32)
            {
              ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
              std::__shared_weak_count::__release_weak(v30);
            }
          }
          **(_DWORD **)(a1[84] + 16) = v47;
          std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](a1 + 82, v45, (uint64_t)v46);
          v33 = v46;
          if (v46)
          {
            v34 = (unint64_t *)&v46->__shared_owners_;
            do
              v35 = __ldaxr(v34);
            while (__stlxr(v35 - 1, v34));
            if (!v35)
            {
              ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
              std::__shared_weak_count::__release_weak(v33);
            }
          }
          v36 = v44;
          if (v44)
          {
            v37 = (unint64_t *)&v44->__shared_owners_;
            do
              v38 = __ldaxr(v37);
            while (__stlxr(v38 - 1, v37));
            if (!v38)
            {
              ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
              std::__shared_weak_count::__release_weak(v36);
            }
          }
          if (v48 && a1[82])
          {
LABEL_61:
            if (a1[84])
            {
              v6 = a1[80];
              if (v6)
              {
                std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v43, *(_DWORD *)(v6 + 8), 1, 1, 1);
                v7 = v43;
                if (*(_DWORD *)(v43 + 8))
                {
                  v8 = 0;
                  do
                  {
                    v9 = *(float *)(*(_QWORD *)(a1[82] + 16) + 4 * v8);
                    v10 = ldexp(1.0, **(_DWORD **)(a1[84] + 16)) * v9;
                    *(float *)(*(_QWORD *)(v7 + 16) + 4 * v8++) = v10;
                  }
                  while (v8 < *(unsigned int *)(v7 + 8));
                }
                v11 = a1 + 90;
                v12 = v44;
                std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v11, v7, (uint64_t)v44);
                if (v12)
                {
                  v13 = (unint64_t *)&v12->__shared_owners_;
                  do
                    v14 = __ldaxr(v13);
                  while (__stlxr(v14 - 1, v13));
                  if (!v14)
                  {
                    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
                    std::__shared_weak_count::__release_weak(v12);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  v15 = v49;
  if (v49)
  {
    v16 = (unint64_t *)&v49->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_1916374FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  uint64_t v10;
  va_list va;
  uint64_t v12;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v8 - 64);
  _Unwind_Resume(a1);
}

BOOL wrapper_kernel<wrapper_kernel_with_weights<Espresso::convolution_kernel_cpu,Espresso::convolution_uniforms>,Espresso::convolution_uniforms>::supports_weight_key(uint64_t a1, _DWORD *a2)
{
  _DWORD *v2;
  int v4;

  v2 = a2;
  if ((wrapper_kernel_with_weights<Espresso::convolution_kernel_cpu,Espresso::convolution_uniforms>::supports_weight_key(a1, a2) & 1) != 0)return 1;
  v4 = *((char *)v2 + 23);
  if (v4 < 0)
  {
    if (*((_QWORD *)v2 + 1) != 10)
      return 0;
    v2 = *(_DWORD **)v2;
  }
  else if (v4 != 10)
  {
    return 0;
  }
  return *(_QWORD *)v2 == 0x6163735F74736F70 && *((_WORD *)v2 + 4) == 25964;
}

void Espresso::convolution_kernel_cpu_base<Espresso::generic_convolution_kernel>::get_weights_blob(_QWORD *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  __int128 v4;

  if (a2 == 1)
  {
    Espresso::blob_cpu::make_custom<std::shared_ptr<Espresso::blob<float,1>>>((uint64_t *)&v4, a1 + 1, a1 + 70);
    goto LABEL_5;
  }
  if (!a2)
  {
    Espresso::blob_cpu::make_custom<std::shared_ptr<Espresso::blob<float,4>>>((uint64_t *)&v4, a1 + 1, a1 + 72);
LABEL_5:
    *(_OWORD *)a3 = v4;
    return;
  }
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
}

uint64_t Espresso::convolution_kernel_cpu_base<Espresso::generic_convolution_kernel>::num_weights_blob(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 336))
    return 2;
  else
    return 1;
}

_QWORD *Espresso::convolution_kernel_cpu_base<Espresso::generic_convolution_kernel>::set_biases(uint64_t a1, uint64_t *a2)
{
  _QWORD *result;

  result = std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 560), *a2, a2[1]);
  *(_DWORD *)(a1 + 336) = *a2 != 0;
  return result;
}

_QWORD *Espresso::convolution_kernel_cpu_base<Espresso::generic_convolution_kernel>::set_weights(uint64_t a1, uint64_t *a2)
{
  return std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 576), *a2, a2[1]);
}

void Espresso::convolution_kernel_cpu_base<Espresso::generic_convolution_kernel>::set_weights(int *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  int v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  __int128 v15;

  v3 = a2[1];
  v13 = *a2;
  v14 = (std::__shared_weak_count *)v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = a1[105];
  if (v6 <= 1)
    v6 = 1;
  Espresso::unshuffle_from_gpu_conv_weights(&v13, a1[86], (a1[87] - 1) / v6 + 1, (uint64_t *)&v15);
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)(a1 + 144), &v15);
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
  if (*((_QWORD *)&v15 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_19163777C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t Espresso::convolution_kernel_cpu_base<Espresso::generic_convolution_kernel>::get_biases@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(result + 568);
  *a2 = *(_QWORD *)(result + 560);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t Espresso::convolution_kernel_cpu_base<Espresso::generic_convolution_kernel>::get_weights@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(result + 584);
  *a2 = *(_QWORD *)(result + 576);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

_QWORD *Espresso::convolution_kernel_cpu_base<Espresso::generic_convolution_kernel>::set_f16_weights(uint64_t a1, uint64_t *a2)
{
  return std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 592), *a2, a2[1]);
}

uint64_t Espresso::convolution_kernel_cpu_base<Espresso::generic_convolution_kernel>::get_f16_weights@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(result + 600);
  *a2 = *(_QWORD *)(result + 592);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t wrapper_kernel_with_weights<Espresso::convolution_kernel_cpu,Espresso::convolution_uniforms>::supports_weight_key(uint64_t a1, _DWORD *a2)
{
  int v3;
  unint64_t v4;
  _DWORD *v6;
  uint64_t v9;
  __int128 v10;
  uint64_t v14;
  int v15;
  _BOOL4 v17;

  if ((*((char *)a2 + 23) & 0x80000000) == 0)
  {
    v3 = *((unsigned __int8 *)a2 + 23);
    HIDWORD(v4) = v3;
    LODWORD(v4) = (v3 << 24) - 0x4000000;
    switch((v4 >> 25))
    {
      case 0u:
        if (*a2 == 944987991)
          return 1;
        if (v3 == 8)
          goto LABEL_14;
        if (v3 == 18)
          goto LABEL_17;
        if (v3 != 10)
          goto LABEL_50;
LABEL_7:
        if (*(_QWORD *)a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964)
          return 1;
        if (v3 == 18)
          goto LABEL_17;
        v6 = a2;
        if (v3 == 10)
          goto LABEL_46;
        if (v3 != 8)
          goto LABEL_50;
LABEL_14:
        if (*(_QWORD *)a2 == 0x736169625F656E61)
          return 1;
        v6 = a2;
        if (v3 == 10)
          goto LABEL_46;
        if (v3 != 18)
          goto LABEL_50;
LABEL_17:
        if (*(_QWORD *)a2 == 0x5F6363615F656E61
          && *((_QWORD *)a2 + 1) == 0x6968735F73616962
          && *((_WORD *)a2 + 8) == 29798)
        {
          return 1;
        }
        v6 = a2;
        if (v3 != 10)
          goto LABEL_50;
        goto LABEL_46;
      case 2u:
        goto LABEL_14;
      case 3u:
        goto LABEL_7;
      case 7u:
        goto LABEL_17;
      default:
        goto LABEL_50;
    }
  }
  v9 = *((_QWORD *)a2 + 1);
  *((_QWORD *)&v10 + 1) = v9;
  *(_QWORD *)&v10 = v9 - 4;
  switch((unint64_t)(v10 >> 1))
  {
    case 0uLL:
      if (**(_DWORD **)a2 != 944987991)
        goto LABEL_50;
      return 1;
    case 2uLL:
      goto LABEL_34;
    case 3uLL:
      if (**(_QWORD **)a2 == 0x6163735F74736F70 && *(_WORD *)(*(_QWORD *)a2 + 8) == 25964)
        return 1;
      if (v9 != 8)
        goto LABEL_35;
LABEL_34:
      if (**(_QWORD **)a2 == 0x736169625F656E61)
        return 1;
LABEL_35:
      if (v9 == 10)
        goto LABEL_45;
      if (v9 != 18)
        goto LABEL_50;
LABEL_37:
      if (**(_QWORD **)a2 == 0x5F6363615F656E61
        && *(_QWORD *)(*(_QWORD *)a2 + 8) == 0x6968735F73616962
        && *(_WORD *)(*(_QWORD *)a2 + 16) == 29798)
      {
        return 1;
      }
      if (v9 != 10)
        goto LABEL_50;
LABEL_45:
      v6 = *(_DWORD **)a2;
LABEL_46:
      v14 = *(_QWORD *)v6;
      v15 = *((unsigned __int16 *)v6 + 4);
      if (v14 == 0x61727478655F7868 && v15 == 26207)
        return 1;
LABEL_50:
      v17 = Espresso::generic_convolution_kernel::supports_weight_key(a1, a2);
      return v17 | Espresso::weight_key_supported_by_conv_quantized_weights_helper(a2, 0);
    case 7uLL:
      goto LABEL_37;
    default:
      goto LABEL_50;
  }
}

void wrapper_kernel_with_weights<Espresso::convolution_kernel_cpu,Espresso::convolution_uniforms>::__set_weight_raw_blob(Espresso::generic_convolution_kernel *this, uint64_t *a2, unsigned __int8 *a3, char *a4, unint64_t a5, uint64_t *a6)
{
  unint64_t v6;
  char *v7;
  int v9;
  unint64_t v10;
  unsigned __int8 *v12;
  uint64_t v15;
  __int128 v16;
  char *v17;
  std::__shared_weak_count *size;
  unint64_t *v19;
  unint64_t v20;
  float *v21;
  int v22;
  uint64_t v26;
  int v27;
  char *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  std::runtime_error *v34;
  std::string *v35;
  __int128 v36;
  std::string *v37;
  __int128 v38;
  std::string *v39;
  std::string::size_type v40;
  std::string *v41;
  __int128 v42;
  const std::string::value_type *v43;
  std::string::size_type v44;
  std::string *v45;
  __int128 v46;
  std::string *v47;
  __int128 v48;
  const std::string::value_type *v49;
  std::string::size_type v50;
  std::string *v51;
  __int128 v52;
  std::string *v53;
  std::string::size_type v54;
  std::string *v55;
  __int128 v56;
  char *v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::runtime_error *v61;
  std::string *v62;
  __int128 v63;
  std::string *v64;
  __int128 v65;
  std::string *v66;
  std::string::size_type v67;
  std::string *v68;
  __int128 v69;
  const std::string::value_type *v70;
  std::string::size_type v71;
  std::string *v72;
  __int128 v73;
  std::string *v74;
  __int128 v75;
  const std::string::value_type *v76;
  std::string::size_type v77;
  std::string *v78;
  __int128 v79;
  std::string *v80;
  std::string::size_type v81;
  std::string *v82;
  __int128 v83;
  char *v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::runtime_error *exception;
  std::string *v89;
  __int128 v90;
  std::string *v91;
  __int128 v92;
  std::string *v93;
  std::string::size_type v94;
  std::string *v95;
  __int128 v96;
  const std::string::value_type *v97;
  std::string::size_type v98;
  std::string *v99;
  __int128 v100;
  std::string *v101;
  __int128 v102;
  const std::string::value_type *v103;
  std::string::size_type v104;
  std::string *v105;
  __int128 v106;
  std::string *v107;
  std::string::size_type v108;
  std::string *v109;
  __int128 v110;
  char *v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  std::runtime_error *v115;
  std::string *v116;
  __int128 v117;
  std::string *v118;
  __int128 v119;
  std::string *v120;
  std::string::size_type v121;
  std::string *v122;
  __int128 v123;
  const std::string::value_type *v124;
  std::string::size_type v125;
  std::string *v126;
  __int128 v127;
  std::string *v128;
  __int128 v129;
  const std::string::value_type *v130;
  std::string::size_type v131;
  std::string *v132;
  __int128 v133;
  std::string *v134;
  std::string::size_type v135;
  std::string *v136;
  __int128 v137;
  std::string v138;
  const std::string::value_type *v139;
  std::string::size_type v140;
  unsigned __int8 v141;
  const std::string::value_type *v142;
  std::string::size_type v143;
  unsigned __int8 v144;
  std::string v145;
  std::string v146;
  std::string v147;
  std::string v148;
  std::string v149;
  std::string v150;
  std::string v151;
  std::string v152;
  std::string v153;

  v6 = a5;
  v7 = a4;
  if (((char)a3[23] & 0x80000000) == 0)
  {
    v9 = a3[23];
    HIDWORD(v10) = v9;
    LODWORD(v10) = (v9 << 24) - 0x4000000;
    switch((v10 >> 25))
    {
      case 0u:
        if (*(_DWORD *)a3 == 944987991)
          goto LABEL_28;
        if (v9 == 8)
          goto LABEL_14;
        if (v9 == 18)
          goto LABEL_17;
        if (v9 != 10)
          goto LABEL_58;
LABEL_7:
        if (*(_QWORD *)a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
          goto LABEL_121;
        if (v9 == 18)
          goto LABEL_17;
        v12 = a3;
        if (v9 == 10)
          goto LABEL_54;
        if (v9 != 8)
          goto LABEL_58;
LABEL_14:
        if (*(_QWORD *)a3 == 0x736169625F656E61)
          goto LABEL_59;
        v12 = a3;
        if (v9 == 10)
          goto LABEL_54;
        if (v9 != 18)
          goto LABEL_58;
LABEL_17:
        if (*(_QWORD *)a3 == 0x5F6363615F656E61
          && *((_QWORD *)a3 + 1) == 0x6968735F73616962
          && *((_WORD *)a3 + 8) == 29798)
        {
          goto LABEL_90;
        }
        v12 = a3;
        if (v9 != 10)
          goto LABEL_58;
        goto LABEL_54;
      case 2u:
        goto LABEL_14;
      case 3u:
        goto LABEL_7;
      case 7u:
        goto LABEL_17;
      default:
        goto LABEL_58;
    }
  }
  v15 = *((_QWORD *)a3 + 1);
  *((_QWORD *)&v16 + 1) = v15;
  *(_QWORD *)&v16 = v15 - 4;
  switch((unint64_t)(v16 >> 1))
  {
    case 0uLL:
      if (**(_DWORD **)a3 != 944987991)
        goto LABEL_58;
LABEL_28:
      Espresso::generic_convolution_kernel::create_weights_blob(this, &v153);
      v17 = (char *)this + 704;
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)v17, (__int128 *)&v153);
      size = (std::__shared_weak_count *)v153.__r_.__value_.__l.__size_;
      if (v153.__r_.__value_.__l.__size_)
      {
        v19 = (unint64_t *)(v153.__r_.__value_.__l.__size_ + 8);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
      if (v6)
      {
        v21 = *(float **)(*(_QWORD *)v17 + 24);
        do
        {
          v22 = *v7++;
          *v21++ = (float)v22;
          --v6;
        }
        while (v6);
      }
      return;
    case 2uLL:
      goto LABEL_42;
    case 3uLL:
      if (**(_QWORD **)a3 == 0x6163735F74736F70 && *(_WORD *)(*(_QWORD *)a3 + 8) == 25964)
      {
LABEL_121:
        std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v153, (unint64_t)(int)a5 >> 2, 1, 1, 1);
        v84 = (char *)this + 640;
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)v84, (__int128 *)&v153);
        v85 = (std::__shared_weak_count *)v153.__r_.__value_.__l.__size_;
        if (v153.__r_.__value_.__l.__size_)
        {
          v86 = (unint64_t *)(v153.__r_.__value_.__l.__size_ + 8);
          do
            v87 = __ldaxr(v86);
          while (__stlxr(v87 - 1, v86));
          if (!v87)
          {
            ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
            std::__shared_weak_count::__release_weak(v85);
          }
        }
        v33 = *(_QWORD *)v84;
        if (v6 != 4 * *(int *)(*(_QWORD *)v84 + 8))
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::to_string(&v146, v6);
          v89 = std::string::insert(&v146, 0, "Unexpected size s=");
          v90 = *(_OWORD *)&v89->__r_.__value_.__l.__data_;
          v147.__r_.__value_.__r.__words[2] = v89->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v147.__r_.__value_.__l.__data_ = v90;
          v89->__r_.__value_.__l.__size_ = 0;
          v89->__r_.__value_.__r.__words[2] = 0;
          v89->__r_.__value_.__r.__words[0] = 0;
          v91 = std::string::append(&v147, "/blob=");
          v92 = *(_OWORD *)&v91->__r_.__value_.__l.__data_;
          v148.__r_.__value_.__r.__words[2] = v91->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v148.__r_.__value_.__l.__data_ = v92;
          v91->__r_.__value_.__l.__size_ = 0;
          v91->__r_.__value_.__r.__words[2] = 0;
          v91->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v145, 4 * *(int *)(*(_QWORD *)v84 + 8));
          if ((v145.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v93 = &v145;
          else
            v93 = (std::string *)v145.__r_.__value_.__r.__words[0];
          if ((v145.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v94 = HIBYTE(v145.__r_.__value_.__r.__words[2]);
          else
            v94 = v145.__r_.__value_.__l.__size_;
          v95 = std::string::append(&v148, (const std::string::value_type *)v93, v94);
          v96 = *(_OWORD *)&v95->__r_.__value_.__l.__data_;
          v149.__r_.__value_.__r.__words[2] = v95->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v96;
          v95->__r_.__value_.__l.__size_ = 0;
          v95->__r_.__value_.__r.__words[2] = 0;
          v95->__r_.__value_.__r.__words[0] = 0;
          std::string::basic_string[abi:ne180100]<0>(&v142, " @ ");
          if ((v144 & 0x80u) == 0)
            v97 = (const std::string::value_type *)&v142;
          else
            v97 = v142;
          if ((v144 & 0x80u) == 0)
            v98 = v144;
          else
            v98 = v143;
          v99 = std::string::append(&v149, v97, v98);
          v100 = *(_OWORD *)&v99->__r_.__value_.__l.__data_;
          v150.__r_.__value_.__r.__words[2] = v99->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v150.__r_.__value_.__l.__data_ = v100;
          v99->__r_.__value_.__l.__size_ = 0;
          v99->__r_.__value_.__r.__words[2] = 0;
          v99->__r_.__value_.__r.__words[0] = 0;
          v101 = std::string::append(&v150, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
          v102 = *(_OWORD *)&v101->__r_.__value_.__l.__data_;
          v151.__r_.__value_.__r.__words[2] = v101->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v151.__r_.__value_.__l.__data_ = v102;
          v101->__r_.__value_.__l.__size_ = 0;
          v101->__r_.__value_.__r.__words[2] = 0;
          v101->__r_.__value_.__r.__words[0] = 0;
          std::string::basic_string[abi:ne180100]<0>(&v139, ":");
          if ((v141 & 0x80u) == 0)
            v103 = (const std::string::value_type *)&v139;
          else
            v103 = v139;
          if ((v141 & 0x80u) == 0)
            v104 = v141;
          else
            v104 = v140;
          v105 = std::string::append(&v151, v103, v104);
          v106 = *(_OWORD *)&v105->__r_.__value_.__l.__data_;
          v152.__r_.__value_.__r.__words[2] = v105->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v152.__r_.__value_.__l.__data_ = v106;
          v105->__r_.__value_.__l.__size_ = 0;
          v105->__r_.__value_.__r.__words[2] = 0;
          v105->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v138, 123);
          if ((v138.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v107 = &v138;
          else
            v107 = (std::string *)v138.__r_.__value_.__r.__words[0];
          if ((v138.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v108 = HIBYTE(v138.__r_.__value_.__r.__words[2]);
          else
            v108 = v138.__r_.__value_.__l.__size_;
          v109 = std::string::append(&v152, (const std::string::value_type *)v107, v108);
          v110 = *(_OWORD *)&v109->__r_.__value_.__l.__data_;
          v153.__r_.__value_.__r.__words[2] = v109->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v153.__r_.__value_.__l.__data_ = v110;
          v109->__r_.__value_.__l.__size_ = 0;
          v109->__r_.__value_.__r.__words[2] = 0;
          v109->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(exception, &v153);
          __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        goto LABEL_158;
      }
      if (v15 != 8)
        goto LABEL_43;
LABEL_42:
      if (**(_QWORD **)a3 == 0x736169625F656E61)
      {
LABEL_59:
        std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v153, (unint64_t)(int)a5 >> 2, 1, 1, 1);
        v29 = (char *)this + 656;
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)v29, (__int128 *)&v153);
        v30 = (std::__shared_weak_count *)v153.__r_.__value_.__l.__size_;
        if (v153.__r_.__value_.__l.__size_)
        {
          v31 = (unint64_t *)(v153.__r_.__value_.__l.__size_ + 8);
          do
            v32 = __ldaxr(v31);
          while (__stlxr(v32 - 1, v31));
          if (!v32)
          {
            ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
            std::__shared_weak_count::__release_weak(v30);
          }
        }
        v33 = *(_QWORD *)v29;
        if (v6 != 4 * *(int *)(*(_QWORD *)v29 + 8))
        {
          v34 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::to_string(&v146, v6);
          v35 = std::string::insert(&v146, 0, "Unexpected size s=");
          v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
          v147.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v147.__r_.__value_.__l.__data_ = v36;
          v35->__r_.__value_.__l.__size_ = 0;
          v35->__r_.__value_.__r.__words[2] = 0;
          v35->__r_.__value_.__r.__words[0] = 0;
          v37 = std::string::append(&v147, "/blob=");
          v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
          v148.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v148.__r_.__value_.__l.__data_ = v38;
          v37->__r_.__value_.__l.__size_ = 0;
          v37->__r_.__value_.__r.__words[2] = 0;
          v37->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v145, 4 * *(int *)(*(_QWORD *)v29 + 8));
          if ((v145.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v39 = &v145;
          else
            v39 = (std::string *)v145.__r_.__value_.__r.__words[0];
          if ((v145.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v40 = HIBYTE(v145.__r_.__value_.__r.__words[2]);
          else
            v40 = v145.__r_.__value_.__l.__size_;
          v41 = std::string::append(&v148, (const std::string::value_type *)v39, v40);
          v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
          v149.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v42;
          v41->__r_.__value_.__l.__size_ = 0;
          v41->__r_.__value_.__r.__words[2] = 0;
          v41->__r_.__value_.__r.__words[0] = 0;
          std::string::basic_string[abi:ne180100]<0>(&v142, " @ ");
          if ((v144 & 0x80u) == 0)
            v43 = (const std::string::value_type *)&v142;
          else
            v43 = v142;
          if ((v144 & 0x80u) == 0)
            v44 = v144;
          else
            v44 = v143;
          v45 = std::string::append(&v149, v43, v44);
          v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
          v150.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v150.__r_.__value_.__l.__data_ = v46;
          v45->__r_.__value_.__l.__size_ = 0;
          v45->__r_.__value_.__r.__words[2] = 0;
          v45->__r_.__value_.__r.__words[0] = 0;
          v47 = std::string::append(&v150, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
          v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
          v151.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v151.__r_.__value_.__l.__data_ = v48;
          v47->__r_.__value_.__l.__size_ = 0;
          v47->__r_.__value_.__r.__words[2] = 0;
          v47->__r_.__value_.__r.__words[0] = 0;
          std::string::basic_string[abi:ne180100]<0>(&v139, ":");
          if ((v141 & 0x80u) == 0)
            v49 = (const std::string::value_type *)&v139;
          else
            v49 = v139;
          if ((v141 & 0x80u) == 0)
            v50 = v141;
          else
            v50 = v140;
          v51 = std::string::append(&v151, v49, v50);
          v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
          v152.__r_.__value_.__r.__words[2] = v51->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v152.__r_.__value_.__l.__data_ = v52;
          v51->__r_.__value_.__l.__size_ = 0;
          v51->__r_.__value_.__r.__words[2] = 0;
          v51->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v138, 127);
          if ((v138.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v53 = &v138;
          else
            v53 = (std::string *)v138.__r_.__value_.__r.__words[0];
          if ((v138.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v54 = HIBYTE(v138.__r_.__value_.__r.__words[2]);
          else
            v54 = v138.__r_.__value_.__l.__size_;
          v55 = std::string::append(&v152, (const std::string::value_type *)v53, v54);
          v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
          v153.__r_.__value_.__r.__words[2] = v55->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v153.__r_.__value_.__l.__data_ = v56;
          v55->__r_.__value_.__l.__size_ = 0;
          v55->__r_.__value_.__r.__words[2] = 0;
          v55->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(v34, &v153);
          __cxa_throw(v34, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        goto LABEL_158;
      }
LABEL_43:
      if (v15 == 10)
        goto LABEL_53;
      if (v15 != 18)
        goto LABEL_58;
LABEL_45:
      if (**(_QWORD **)a3 == 0x5F6363615F656E61
        && *(_QWORD *)(*(_QWORD *)a3 + 8) == 0x6968735F73616962
        && *(_WORD *)(*(_QWORD *)a3 + 16) == 29798)
      {
LABEL_90:
        std::allocate_shared[abi:ne180100]<Espresso::blob<int,1>,std::allocator<Espresso::blob<int,1>>,int &,int &,int &,int &,void>(&v153, (unint64_t)(int)a5 >> 2, 1, 1, 1);
        v57 = (char *)this + 672;
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)v57, (__int128 *)&v153);
        v58 = (std::__shared_weak_count *)v153.__r_.__value_.__l.__size_;
        if (v153.__r_.__value_.__l.__size_)
        {
          v59 = (unint64_t *)(v153.__r_.__value_.__l.__size_ + 8);
          do
            v60 = __ldaxr(v59);
          while (__stlxr(v60 - 1, v59));
          if (!v60)
          {
            ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
            std::__shared_weak_count::__release_weak(v58);
          }
        }
        v33 = *(_QWORD *)v57;
        if (v6 != 4 * *(int *)(*(_QWORD *)v57 + 8))
        {
          v61 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::to_string(&v146, v6);
          v62 = std::string::insert(&v146, 0, "Unexpected size s=");
          v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
          v147.__r_.__value_.__r.__words[2] = v62->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v147.__r_.__value_.__l.__data_ = v63;
          v62->__r_.__value_.__l.__size_ = 0;
          v62->__r_.__value_.__r.__words[2] = 0;
          v62->__r_.__value_.__r.__words[0] = 0;
          v64 = std::string::append(&v147, "/blob=");
          v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
          v148.__r_.__value_.__r.__words[2] = v64->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v148.__r_.__value_.__l.__data_ = v65;
          v64->__r_.__value_.__l.__size_ = 0;
          v64->__r_.__value_.__r.__words[2] = 0;
          v64->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v145, 4 * *(int *)(*(_QWORD *)v57 + 8));
          if ((v145.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v66 = &v145;
          else
            v66 = (std::string *)v145.__r_.__value_.__r.__words[0];
          if ((v145.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v67 = HIBYTE(v145.__r_.__value_.__r.__words[2]);
          else
            v67 = v145.__r_.__value_.__l.__size_;
          v68 = std::string::append(&v148, (const std::string::value_type *)v66, v67);
          v69 = *(_OWORD *)&v68->__r_.__value_.__l.__data_;
          v149.__r_.__value_.__r.__words[2] = v68->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v69;
          v68->__r_.__value_.__l.__size_ = 0;
          v68->__r_.__value_.__r.__words[2] = 0;
          v68->__r_.__value_.__r.__words[0] = 0;
          std::string::basic_string[abi:ne180100]<0>(&v142, " @ ");
          if ((v144 & 0x80u) == 0)
            v70 = (const std::string::value_type *)&v142;
          else
            v70 = v142;
          if ((v144 & 0x80u) == 0)
            v71 = v144;
          else
            v71 = v143;
          v72 = std::string::append(&v149, v70, v71);
          v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
          v150.__r_.__value_.__r.__words[2] = v72->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v150.__r_.__value_.__l.__data_ = v73;
          v72->__r_.__value_.__l.__size_ = 0;
          v72->__r_.__value_.__r.__words[2] = 0;
          v72->__r_.__value_.__r.__words[0] = 0;
          v74 = std::string::append(&v150, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
          v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
          v151.__r_.__value_.__r.__words[2] = v74->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v151.__r_.__value_.__l.__data_ = v75;
          v74->__r_.__value_.__l.__size_ = 0;
          v74->__r_.__value_.__r.__words[2] = 0;
          v74->__r_.__value_.__r.__words[0] = 0;
          std::string::basic_string[abi:ne180100]<0>(&v139, ":");
          if ((v141 & 0x80u) == 0)
            v76 = (const std::string::value_type *)&v139;
          else
            v76 = v139;
          if ((v141 & 0x80u) == 0)
            v77 = v141;
          else
            v77 = v140;
          v78 = std::string::append(&v151, v76, v77);
          v79 = *(_OWORD *)&v78->__r_.__value_.__l.__data_;
          v152.__r_.__value_.__r.__words[2] = v78->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v152.__r_.__value_.__l.__data_ = v79;
          v78->__r_.__value_.__l.__size_ = 0;
          v78->__r_.__value_.__r.__words[2] = 0;
          v78->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v138, 131);
          if ((v138.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v80 = &v138;
          else
            v80 = (std::string *)v138.__r_.__value_.__r.__words[0];
          if ((v138.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v81 = HIBYTE(v138.__r_.__value_.__r.__words[2]);
          else
            v81 = v138.__r_.__value_.__l.__size_;
          v82 = std::string::append(&v152, (const std::string::value_type *)v80, v81);
          v83 = *(_OWORD *)&v82->__r_.__value_.__l.__data_;
          v153.__r_.__value_.__r.__words[2] = v82->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v153.__r_.__value_.__l.__data_ = v83;
          v82->__r_.__value_.__l.__size_ = 0;
          v82->__r_.__value_.__r.__words[2] = 0;
          v82->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(v61, &v153);
          __cxa_throw(v61, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
      }
      else
      {
        if (v15 != 10)
        {
LABEL_58:
          Espresso::convolution_kernel_cpu::__set_weight_raw_blob(this, a2, a3, a4, a5, a6);
          return;
        }
LABEL_53:
        v12 = *(unsigned __int8 **)a3;
LABEL_54:
        v26 = *(_QWORD *)v12;
        v27 = *((unsigned __int16 *)v12 + 4);
        if (v26 != 0x61727478655F7868 || v27 != 26207)
          goto LABEL_58;
        std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v153, (unint64_t)(int)a5 >> 2, 1, 1, 1);
        v111 = (char *)this + 688;
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)v111, (__int128 *)&v153);
        v112 = (std::__shared_weak_count *)v153.__r_.__value_.__l.__size_;
        if (v153.__r_.__value_.__l.__size_)
        {
          v113 = (unint64_t *)(v153.__r_.__value_.__l.__size_ + 8);
          do
            v114 = __ldaxr(v113);
          while (__stlxr(v114 - 1, v113));
          if (!v114)
          {
            ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
            std::__shared_weak_count::__release_weak(v112);
          }
        }
        v33 = *(_QWORD *)v111;
        if (v6 != 4 * *(int *)(*(_QWORD *)v111 + 8))
        {
          v115 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::to_string(&v146, v6);
          v116 = std::string::insert(&v146, 0, "Unexpected size s=");
          v117 = *(_OWORD *)&v116->__r_.__value_.__l.__data_;
          v147.__r_.__value_.__r.__words[2] = v116->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v147.__r_.__value_.__l.__data_ = v117;
          v116->__r_.__value_.__l.__size_ = 0;
          v116->__r_.__value_.__r.__words[2] = 0;
          v116->__r_.__value_.__r.__words[0] = 0;
          v118 = std::string::append(&v147, "/blob=");
          v119 = *(_OWORD *)&v118->__r_.__value_.__l.__data_;
          v148.__r_.__value_.__r.__words[2] = v118->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v148.__r_.__value_.__l.__data_ = v119;
          v118->__r_.__value_.__l.__size_ = 0;
          v118->__r_.__value_.__r.__words[2] = 0;
          v118->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v145, 4 * *(int *)(*(_QWORD *)v111 + 8));
          if ((v145.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v120 = &v145;
          else
            v120 = (std::string *)v145.__r_.__value_.__r.__words[0];
          if ((v145.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v121 = HIBYTE(v145.__r_.__value_.__r.__words[2]);
          else
            v121 = v145.__r_.__value_.__l.__size_;
          v122 = std::string::append(&v148, (const std::string::value_type *)v120, v121);
          v123 = *(_OWORD *)&v122->__r_.__value_.__l.__data_;
          v149.__r_.__value_.__r.__words[2] = v122->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v123;
          v122->__r_.__value_.__l.__size_ = 0;
          v122->__r_.__value_.__r.__words[2] = 0;
          v122->__r_.__value_.__r.__words[0] = 0;
          std::string::basic_string[abi:ne180100]<0>(&v142, " @ ");
          if ((v144 & 0x80u) == 0)
            v124 = (const std::string::value_type *)&v142;
          else
            v124 = v142;
          if ((v144 & 0x80u) == 0)
            v125 = v144;
          else
            v125 = v143;
          v126 = std::string::append(&v149, v124, v125);
          v127 = *(_OWORD *)&v126->__r_.__value_.__l.__data_;
          v150.__r_.__value_.__r.__words[2] = v126->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v150.__r_.__value_.__l.__data_ = v127;
          v126->__r_.__value_.__l.__size_ = 0;
          v126->__r_.__value_.__r.__words[2] = 0;
          v126->__r_.__value_.__r.__words[0] = 0;
          v128 = std::string::append(&v150, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
          v129 = *(_OWORD *)&v128->__r_.__value_.__l.__data_;
          v151.__r_.__value_.__r.__words[2] = v128->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v151.__r_.__value_.__l.__data_ = v129;
          v128->__r_.__value_.__l.__size_ = 0;
          v128->__r_.__value_.__r.__words[2] = 0;
          v128->__r_.__value_.__r.__words[0] = 0;
          std::string::basic_string[abi:ne180100]<0>(&v139, ":");
          if ((v141 & 0x80u) == 0)
            v130 = (const std::string::value_type *)&v139;
          else
            v130 = v139;
          if ((v141 & 0x80u) == 0)
            v131 = v141;
          else
            v131 = v140;
          v132 = std::string::append(&v151, v130, v131);
          v133 = *(_OWORD *)&v132->__r_.__value_.__l.__data_;
          v152.__r_.__value_.__r.__words[2] = v132->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v152.__r_.__value_.__l.__data_ = v133;
          v132->__r_.__value_.__l.__size_ = 0;
          v132->__r_.__value_.__r.__words[2] = 0;
          v132->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v138, 135);
          if ((v138.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v134 = &v138;
          else
            v134 = (std::string *)v138.__r_.__value_.__r.__words[0];
          if ((v138.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v135 = HIBYTE(v138.__r_.__value_.__r.__words[2]);
          else
            v135 = v138.__r_.__value_.__l.__size_;
          v136 = std::string::append(&v152, (const std::string::value_type *)v134, v135);
          v137 = *(_OWORD *)&v136->__r_.__value_.__l.__data_;
          v153.__r_.__value_.__r.__words[2] = v136->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v153.__r_.__value_.__l.__data_ = v137;
          v136->__r_.__value_.__l.__size_ = 0;
          v136->__r_.__value_.__r.__words[2] = 0;
          v136->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(v115, &v153);
          __cxa_throw(v115, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
      }
LABEL_158:
      memcpy(*(void **)(v33 + 16), v7, v6);
      return;
    case 7uLL:
      goto LABEL_45;
    default:
      goto LABEL_58;
  }
}

void sub_191638788(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  void *v59;
  char v60;
  uint64_t v61;

  if (*(char *)(v61 - 57) < 0)
    operator delete(*(void **)(v61 - 80));
  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v61 - 89) < 0)
    operator delete(*(void **)(v61 - 112));
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v61 - 121) < 0)
    operator delete(*(void **)(v61 - 144));
  if (*(char *)(v61 - 153) < 0)
    operator delete(*(void **)(v61 - 176));
  if (a27 < 0)
    operator delete(a22);
  if (a59 < 0)
    operator delete(a54);
  if (a33 < 0)
    operator delete(a28);
  if (a52 < 0)
    operator delete(a47);
  if (a45 < 0)
    operator delete(a40);
  if (a39 < 0)
    operator delete(a34);
  if ((v60 & 1) != 0)
    __cxa_free_exception(v59);
  _Unwind_Resume(exception_object);
}

void wrapper_kernel<wrapper_kernel_with_weights<Espresso::convolution_kernel_cpu,Espresso::convolution_uniforms>,Espresso::convolution_uniforms>::convert_layer_data_to_fp32(_QWORD *a1, char **a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v9;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  const void *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  __int128 v43;
  int64x2_t v44;
  char *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  __int128 v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  int64x2_t v59;
  char *v60;
  _QWORD *v61;
  void *__p;
  void *v63;
  __int128 v64;
  const void *v65;
  std::__shared_weak_count *v66;

  if (a3 != a4)
  {
    v9 = a3;
    v12 = a2 + 2;
    while (1)
    {
      v14 = *(const void **)v9;
      v13 = *(std::__shared_weak_count **)(v9 + 8);
      v65 = *(const void **)v9;
      v66 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
      }
      v17 = operator new(0x118uLL);
      v17[1] = 0;
      v17[2] = 0;
      *v17 = &off_1E2DC1868;
      Espresso::blob_cpu::blob_cpu((uint64_t)(v17 + 3), a1);
      *(_QWORD *)&v64 = v17 + 3;
      *((_QWORD *)&v64 + 1) = v17;
      Espresso::abstract_blob_container::shape((char *)&v58, (uint64_t)v14);
      v56 = 0;
      v57 = 0;
      (*(void (**)(_QWORD *, uint64_t *, uint64_t *))(v17[3] + 16))(v17 + 3, &v58, &v56);
      v18 = v57;
      if (v57)
      {
        v19 = (unint64_t *)&v57->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if (__p)
      {
        v63 = __p;
        operator delete(__p);
      }
      if (v65)
      {
        if (v21)
          break;
      }
      v21 = 0;
      v55 = 0;
      if (a5)
        goto LABEL_21;
LABEL_28:
      v27 = v64;
      if (*((_QWORD *)&v64 + 1))
      {
        v28 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v31 = a2[1];
      v30 = (unint64_t)a2[2];
      if ((unint64_t)v31 >= v30)
      {
        v54 = v27;
        v33 = (v31 - *a2) >> 4;
        if ((unint64_t)(v33 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v34 = v30 - (_QWORD)*a2;
        v35 = v34 >> 3;
        if (v34 >> 3 <= (unint64_t)(v33 + 1))
          v35 = v33 + 1;
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0)
          v36 = 0xFFFFFFFFFFFFFFFLL;
        else
          v36 = v35;
        v61 = v12;
        v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v36);
        v39 = &v37[16 * v33];
        *(_OWORD *)v39 = v54;
        v41 = *a2;
        v40 = a2[1];
        if (v40 == *a2)
        {
          v44 = vdupq_n_s64((unint64_t)v40);
          v42 = &v37[16 * v33];
        }
        else
        {
          v42 = &v37[16 * v33];
          do
          {
            v43 = *((_OWORD *)v40 - 1);
            v40 -= 16;
            *((_OWORD *)v42 - 1) = v43;
            v42 -= 16;
            *(_QWORD *)v40 = 0;
            *((_QWORD *)v40 + 1) = 0;
          }
          while (v40 != v41);
          v44 = *(int64x2_t *)a2;
        }
        v32 = v39 + 16;
        *a2 = v42;
        a2[1] = v39 + 16;
        v59 = v44;
        v45 = a2[2];
        a2[2] = &v37[16 * v38];
        v60 = v45;
        v58 = v44.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v58);
      }
      else
      {
        *(_OWORD *)v31 = v27;
        v32 = v31 + 16;
      }
      a2[1] = v32;
      if (v55)
      {
        v46 = (unint64_t *)&v55->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      v48 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
      if (*((_QWORD *)&v64 + 1))
      {
        v49 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      v51 = v66;
      if (v66)
      {
        v52 = (unint64_t *)&v66->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v9 += 16;
      if (v9 == a4)
        return;
    }
    v55 = v66;
    if (v66)
    {
      v22 = (unint64_t *)&v66->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    if (!a5)
      goto LABEL_28;
LABEL_21:
    if (a6)
    {
      v58 = 0;
      v59.i64[0] = 0;
      (*(void (**)(void *, uint64_t *, uint64_t))(*(_QWORD *)v21 + 40))(v21, &v58, v64 + 160);
      v24 = (std::__shared_weak_count *)v59.i64[0];
      if (v59.i64[0])
      {
        v25 = (unint64_t *)(v59.i64[0] + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v21, v64 + 160, 1.0);
    }
    goto LABEL_28;
  }
}

void sub_191638D20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  _Unwind_Resume(a1);
}

void wrapper_kernel_with_weights<Espresso::convolution_kernel_cpu,Espresso::convolution_uniforms>::__launch(uint64_t a1, double a2, double a3, float a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  __int128 v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  uint64_t v46;
  std::__shared_weak_count *v47;

  v10 = *(_QWORD *)(a1 + 584);
  v46 = *(_QWORD *)(a1 + 576);
  v47 = (std::__shared_weak_count *)v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v13 = *(_QWORD *)(a1 + 600);
  v44 = *(_QWORD *)(a1 + 592);
  v45 = (std::__shared_weak_count *)v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v16 = *(std::__shared_weak_count **)(a1 + 568);
  v42 = *(_QWORD *)(a1 + 560);
  v43 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
  }
  if (*(_QWORD *)(a1 + 704))
  {
    v41 = 0uLL;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 592, &v41);
    v19 = (std::__shared_weak_count *)*((_QWORD *)&v41 + 1);
    if (*((_QWORD *)&v41 + 1))
    {
      v20 = (unint64_t *)(*((_QWORD *)&v41 + 1) + 8);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 576), *(_QWORD *)(a1 + 704), *(_QWORD *)(a1 + 712));
  }
  v22 = *(_QWORD *)(a1 + 720);
  if (v22)
  {
    v23 = *(std::__shared_weak_count **)(a1 + 728);
    if (v23)
    {
      v24 = (unint64_t *)&v23->__shared_owners_;
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 1, v24));
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 560), v22, (uint64_t)v23);
      *(_DWORD *)(a1 + 336) = 1;
      do
        v26 = __ldaxr(v24);
      while (__stlxr(v26 - 1, v24));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    else
    {
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 560), v22, 0);
      *(_DWORD *)(a1 + 336) = 1;
    }
  }
  Espresso::convolution_kernel_cpu::__launch((_QWORD *)a1, a2, a3, a4, v22, a6, a7);
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 576), v46, (uint64_t)v47);
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 592), v44, (uint64_t)v45);
  v28 = v42;
  v27 = v43;
  if (v43)
  {
    v29 = (unint64_t *)&v43->__shared_owners_;
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 560), v28, (uint64_t)v27);
    *(_DWORD *)(a1 + 336) = v28 != 0;
    do
      v31 = __ldaxr(v29);
    while (__stlxr(v31 - 1, v29));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  else
  {
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 560), v42, 0);
    *(_DWORD *)(a1 + 336) = v28 != 0;
  }
  v32 = v43;
  if (v43)
  {
    v33 = (unint64_t *)&v43->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v35 = v45;
  if (v45)
  {
    v36 = (unint64_t *)&v45->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  v38 = v47;
  if (v47)
  {
    v39 = (unint64_t *)&v47->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
}

void sub_19163909C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;
  uint64_t v9;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v7 = va_arg(va2, _QWORD);
  v9 = va_arg(va2, _QWORD);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  _Unwind_Resume(a1);
}

void Espresso::convolution_kernel_cpu_base<Espresso::generic_convolution_kernel>::clear_weights(uint64_t a1)
{
  _QWORD *v1;

  v1 = (_QWORD *)(a1 + 160);
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*(_QWORD **)(a1 + 160));
  *(v1 - 1) = v1;
  *v1 = 0;
  v1[1] = 0;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::reset[abi:ne180100](v1 + 45);
  std::shared_ptr<Espresso::blob<unsigned short,4>>::reset[abi:ne180100](v1 + 52);
  std::shared_ptr<Espresso::blob<unsigned short,4>>::reset[abi:ne180100](v1 + 54);
}

void wrapper_kernel_with_weights<Espresso::convolution_kernel_cpu,Espresso::convolution_uniforms>::~wrapper_kernel_with_weights(void **a1)
{
  *a1 = &off_1E2D57158;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 90));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 88));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 86));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 84));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 82));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 80));
  *a1 = &off_1E2D8CF58;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 78));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 76));
  *a1 = off_1E2D95398;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 74));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 72));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 70));
  Espresso::generic_convolution_kernel::~generic_convolution_kernel(a1);
}

{
  *a1 = &off_1E2D57158;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 90));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 88));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 86));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 84));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 82));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 80));
  *a1 = &off_1E2D8CF58;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 78));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 76));
  *a1 = off_1E2D95398;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 74));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 72));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 70));
  Espresso::generic_convolution_kernel::~generic_convolution_kernel(a1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<wrapper_kernel<wrapper_kernel_with_weights<Espresso::convolution_kernel_cpu,Espresso::convolution_uniforms>,Espresso::convolution_uniforms>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB4240;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<wrapper_kernel<wrapper_kernel_with_weights<Espresso::convolution_kernel_cpu,Espresso::convolution_uniforms>,Espresso::convolution_uniforms>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB4240;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<wrapper_kernel_with_weights<Espresso::convolution_kernel_cpu,Espresso::convolution_uniforms>,Espresso::convolution_uniforms>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke@<Q0>(uint64_t *a1@<X1>, _OWORD *a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __n128 result;

  v6 = (char *)operator new(0x1E8uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DB4400;
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((_QWORD *)v6 + 39) = 0;
  *((_QWORD *)v6 + 40) = 0;
  *((_QWORD *)v6 + 38) = v6 + 312;
  *((_QWORD *)v6 + 55) = 0;
  *((_QWORD *)v6 + 56) = 0;
  v7 = a2[5];
  *(_OWORD *)(v6 + 392) = a2[4];
  *(_OWORD *)(v6 + 408) = v7;
  *(_OWORD *)(v6 + 424) = a2[6];
  v8 = a2[1];
  *(_OWORD *)(v6 + 328) = *a2;
  *(_OWORD *)(v6 + 344) = v8;
  v9 = a2[3];
  *(_OWORD *)(v6 + 360) = a2[2];
  *(_OWORD *)(v6 + 376) = v9;
  *((_QWORD *)v6 + 3) = &off_1E2D4EC28;
  *(_OWORD *)(v6 + 456) = 0u;
  *(_OWORD *)(v6 + 472) = 0u;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v6 + 57, *a1, a1[1]);
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_191639360(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::pool_kernel_cpu,Espresso::pool_params>::~wrapper_kernel(Espresso::generic_pool_kernel *a1)
{
  *(_QWORD *)a1 = &off_1E2D4EC28;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 448);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 432);
  Espresso::generic_pool_kernel::~generic_pool_kernel(a1);
}

{
  *(_QWORD *)a1 = &off_1E2D4EC28;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 448);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 432);
  Espresso::generic_pool_kernel::~generic_pool_kernel(a1);
  JUMPOUT(0x19401CD90);
}

void wrapper_kernel<Espresso::pool_kernel_cpu,Espresso::pool_params>::__launch(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v5;
  _BOOL4 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  float *v31;
  vDSP_Length v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  __n128 v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  void **v44;
  void **v45;
  void **v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  int *v52;
  float *v53;
  vDSP_Length v54;
  int *v55;
  int v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  vDSP_Length v60;
  vDSP_Length v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  const void *v74;
  void **v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  void **v80;
  const void *v81;
  void *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  _QWORD *v94;
  uint64_t *v95;
  std::__shared_weak_count *v96;
  float __B;
  _QWORD v98[2];
  _QWORD v99[2];
  void **v100[3];
  char *v101[3];
  void *v102;
  std::__shared_weak_count *v103;
  void ***v104;
  std::__shared_weak_count *v105;

  v5 = a3;
  memset(v101, 0, sizeof(v101));
  memset(v100, 0, sizeof(v100));
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)*a3 + 32))(*(_QWORD *)*a3))
    v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)*v5 + 32))(*(_QWORD *)*v5) == 1;
  else
    v7 = 1;
  v8 = (std::__shared_weak_count *)a1[55];
  v99[0] = a1[54];
  v99[1] = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  wrapper_kernel<Espresso::pool_kernel_cpu,Espresso::pool_params>::convert_layer_data_to_fp32(v99, v101, *a4, a4[1], 1, v7);
  if (v8)
  {
    v11 = (unint64_t *)&v8->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v13 = (std::__shared_weak_count *)a1[55];
  v98[0] = a1[54];
  v98[1] = v13;
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  wrapper_kernel<Espresso::pool_kernel_cpu,Espresso::pool_params>::convert_layer_data_to_fp32(v98, (char **)v100, *v5, v5[1], 0, 0);
  if (v13)
  {
    v17 = (unint64_t *)&v13->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v19 = *a4;
  if (a4[1] != *a4)
  {
    v20 = 0;
    do
    {
      if (!v7
        && (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v19 + 16 * v20) + 32))(*(_QWORD *)(v19 + 16 * v20))
         || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(*a4 + 16 * v20) + 32))(*(_QWORD *)(*a4 + 16 * v20)) == 1))
      {
        __B = *(float *)(*(_QWORD *)(*a4 + 16 * v20) + 112);
        v21 = &v101[0][16 * v20];
        v104 = (void ***)v22;
        v23 = (std::__shared_weak_count *)*((_QWORD *)v21 + 1);
        v105 = v23;
        if (v23)
        {
          v24 = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
        }
        v26 = *((_QWORD *)v22 + 20);
        v27 = (std::__shared_weak_count *)*((_QWORD *)v22 + 21);
        v102 = (void *)v26;
        v103 = v27;
        if (v27)
        {
          v28 = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldxr(v28);
          while (__stxr(v29 + 1, v28));
        }
        v30 = 0;
        v31 = *(float **)(v26 + 24);
        v32 = *(int *)(v26 + 8);
        v33 = v26 + 12;
        do
        {
          v32 *= *(int *)(v33 + v30);
          v30 += 4;
        }
        while (v30 != 12);
        vDSP_vsmul(v31, 1, &__B, v31, 1, v32);
        if (v27)
        {
          v34 = (unint64_t *)&v27->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        v36 = v105;
        if (v105)
        {
          v37 = (unint64_t *)&v105->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
      }
      ++v20;
      v19 = *a4;
    }
    while (v20 < (a4[1] - *a4) >> 4);
  }
  Espresso::pool_kernel_cpu::__launch((uint64_t)a1, v16, (uint64_t)v100, (_QWORD **)v101);
  v40 = a1[56];
  if (v40)
  {
    v41 = (std::__shared_weak_count *)a1[57];
    v96 = v41;
    if (v41)
    {
      v42 = (unint64_t *)&v41->__shared_owners_;
      do
        v43 = __ldxr(v42);
      while (__stxr(v43 + 1, v42));
    }
    v44 = v100[0];
    if (*v100[0]
    {
      v46 = v45;
      v47 = (std::__shared_weak_count *)v44[1];
      v104 = (void ***)v45;
      v105 = v47;
      if (v47)
      {
        v48 = (unint64_t *)&v47->__shared_owners_;
        do
          v49 = __ldxr(v48);
        while (__stxr(v49 + 1, v48));
      }
    }
    else
    {
      v47 = 0;
      v46 = 0;
      v104 = 0;
      v105 = 0;
    }
    LODWORD(v50) = *(_DWORD *)(v40 + 8);
    v94 = a1;
    v95 = v5;
    v93 = v47;
    if ((_DWORD)v50 == 1)
    {
      v51 = 0;
      v52 = (int *)v46[20];
      v53 = (float *)*((_QWORD *)v52 + 3);
      v54 = v52[2];
      v55 = v52 + 3;
      do
        v54 *= v55[v51++];
      while (v51 != 3);
      vDSP_vsmul(v53, 1, *(const float **)(v40 + 16), v53, 1, v54);
    }
    else
    {
      v56 = *((_DWORD *)v46 + 4);
      if ((_DWORD)v50 != v56)
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v50, v56);
      v57 = *((_DWORD *)v46 + 5);
      if (v57)
      {
        v58 = 0;
        v59 = 0;
        v60 = *((int *)v46 + 2) * (uint64_t)*((int *)v46 + 3);
        v61 = 4 * (int)v50 * v60;
        do
        {
          if ((_DWORD)v50)
          {
            v62 = 0;
            v63 = 0;
            v64 = v58;
            do
            {
              vDSP_vsmul((const float *)(*((_QWORD *)v46[20] + 3) + v64), 1, (const float *)(*(_QWORD *)(v40 + 16) + v62), (float *)(*((_QWORD *)v46[20] + 3) + v64), 1, v60);
              ++v63;
              v50 = *((int *)v46 + 4);
              v62 += 4;
              v64 += 4 * v60;
            }
            while (v63 < v50);
            v57 = *((_DWORD *)v46 + 5);
          }
          ++v59;
          v58 += v61;
        }
        while (v59 < v57);
      }
    }
    a1 = v94;
    v5 = v95;
    if (v93)
    {
      v65 = (unint64_t *)&v93->__shared_owners_;
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 - 1, v65));
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
        std::__shared_weak_count::__release_weak(v93);
      }
    }
    if (v96)
    {
      v67 = (unint64_t *)&v96->__shared_owners_;
      do
        v68 = __ldaxr(v67);
      while (__stlxr(v68 - 1, v67));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
        std::__shared_weak_count::__release_weak(v96);
      }
    }
  }
  v69 = (std::__shared_weak_count *)a1[55];
  if (v69)
  {
    v70 = (unint64_t *)&v69->__shared_owners_;
    do
      v71 = __ldxr(v70);
    while (__stxr(v71 + 1, v70));
  }
  v72 = *v5;
  if (v5[1] != *v5)
  {
    v73 = 0;
    do
    {
      v74 = *(const void **)(v72 + 16 * v73);
      if (v74
      {
        v76 = (uint64_t)v75;
        v104 = (void ***)v75;
        v77 = *(std::__shared_weak_count **)(v72 + 16 * v73 + 8);
        v105 = v77;
        if (v77)
        {
          v78 = (unint64_t *)&v77->__shared_owners_;
          do
            v79 = __ldxr(v78);
          while (__stxr(v79 + 1, v78));
        }
      }
      else
      {
        v76 = 0;
        v104 = 0;
        v105 = 0;
      }
      v80 = v100[0];
      v81 = v100[0][2 * v73];
      if (v81
      {
        v102 = v82;
        v83 = (std::__shared_weak_count *)v80[2 * v73 + 1];
        v103 = v83;
        if (v83)
        {
          v84 = (unint64_t *)&v83->__shared_owners_;
          do
            v85 = __ldxr(v84);
          while (__stxr(v85 + 1, v84));
        }
      }
      else
      {
        v83 = 0;
        v82 = 0;
        v102 = 0;
        v103 = 0;
      }
      v39.n128_u64[0] = Espresso::QuantSimEngine::blob_container::copy_from_fp32(v76, (uint64_t)v82 + 160, 1.0);
      if (v83)
      {
        v86 = (unint64_t *)&v83->__shared_owners_;
        do
          v87 = __ldaxr(v86);
        while (__stlxr(v87 - 1, v86));
        if (!v87)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v83->__on_zero_shared)(v83, v39);
          std::__shared_weak_count::__release_weak(v83);
        }
      }
      v88 = v105;
      if (v105)
      {
        v89 = (unint64_t *)&v105->__shared_owners_;
        do
          v90 = __ldaxr(v89);
        while (__stlxr(v90 - 1, v89));
        if (!v90)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v88->__on_zero_shared)(v88, v39);
          std::__shared_weak_count::__release_weak(v88);
        }
      }
      ++v73;
      v72 = *v5;
    }
    while (v73 < (v5[1] - *v5) >> 4);
  }
  if (v69)
  {
    v91 = (unint64_t *)&v69->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v69->__on_zero_shared)(v69, v39);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  v104 = v100;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v104);
  v100[0] = (void **)v101;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v100);
}

void sub_191639AD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  *(_QWORD *)(v25 - 104) = &a22;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 104));
  a22 = (void **)&a25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a22);
  _Unwind_Resume(a1);
}

void *wrapper_kernel<Espresso::pool_kernel_cpu,Espresso::pool_params>::__set_weight_raw_blob(void *result, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  void *v7;
  int v8;
  uint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::runtime_error *exception;
  unint64_t v15;
  std::runtime_error *v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  std::string v39;
  _QWORD v40[2];
  unsigned __int8 v41;
  _QWORD v42[2];
  unsigned __int8 v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;

  v7 = result;
  v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10)
      return result;
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    v10 = (uint64_t)v7 + 448;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v10, (__int128 *)&v52);
    size = (std::__shared_weak_count *)v52.__r_.__value_.__l.__size_;
    if (v52.__r_.__value_.__l.__size_)
    {
      v12 = (unint64_t *)(v52.__r_.__value_.__l.__size_ + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    if (a5 != 4 * *(int *)(*(_QWORD *)v10 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      v15 = a5;
      v16 = exception;
      std::to_string(&v45, v15);
      v17 = std::string::insert(&v45, 0, "Unexpected size s=");
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      v19 = std::string::append(&v46, "/blob=");
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, 4 * *(int *)(*(_QWORD *)v10 + 8));
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v21 = &v44;
      else
        v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      else
        v22 = v44.__r_.__value_.__l.__size_;
      v23 = std::string::append(&v47, (const std::string::value_type *)v21, v22);
      v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, " @ ");
      if ((v43 & 0x80u) == 0)
        v25 = (const std::string::value_type *)v42;
      else
        v25 = (const std::string::value_type *)v42[0];
      if ((v43 & 0x80u) == 0)
        v26 = v43;
      else
        v26 = v42[1];
      v27 = std::string::append(&v48, v25, v26);
      v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      v29 = std::string::append(&v49, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v40, ":");
      if ((v41 & 0x80u) == 0)
        v31 = (const std::string::value_type *)v40;
      else
        v31 = (const std::string::value_type *)v40[0];
      if ((v41 & 0x80u) == 0)
        v32 = v41;
      else
        v32 = v40[1];
      v33 = std::string::append(&v50, v31, v32);
      v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, 197);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = &v39;
      else
        v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      else
        v36 = v39.__r_.__value_.__l.__size_;
      v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
      v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v16, &v52);
      __cxa_throw(v16, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    return memcpy(*(void **)(*(_QWORD *)v10 + 16), a4, a5);
  }
  return result;
}

void sub_191639E88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  void *v59;
  int v60;
  uint64_t v61;

  if (*(char *)(v61 - 57) < 0)
    operator delete(*(void **)(v61 - 80));
  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v61 - 89) < 0)
    operator delete(*(void **)(v61 - 112));
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v61 - 121) < 0)
    operator delete(*(void **)(v61 - 144));
  if (*(char *)(v61 - 153) < 0)
    operator delete(*(void **)(v61 - 176));
  if (a27 < 0)
    operator delete(a22);
  if (a59 < 0)
    operator delete(a54);
  if (a33 < 0)
    operator delete(a28);
  if (a52 < 0)
    operator delete(a47);
  if (a45 < 0)
    operator delete(a40);
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0)
LABEL_28:
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

BOOL wrapper_kernel<Espresso::pool_kernel_cpu,Espresso::pool_params>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2;

  v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10)
      return 0;
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

void wrapper_kernel<Espresso::pool_kernel_cpu,Espresso::pool_params>::convert_layer_data_to_fp32(_QWORD *a1, char **a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v9;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  const void *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  __int128 v43;
  int64x2_t v44;
  char *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  __int128 v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  int64x2_t v59;
  char *v60;
  _QWORD *v61;
  void *__p;
  void *v63;
  __int128 v64;
  const void *v65;
  std::__shared_weak_count *v66;

  if (a3 != a4)
  {
    v9 = a3;
    v12 = a2 + 2;
    while (1)
    {
      v14 = *(const void **)v9;
      v13 = *(std::__shared_weak_count **)(v9 + 8);
      v65 = *(const void **)v9;
      v66 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
      }
      v17 = operator new(0x118uLL);
      v17[1] = 0;
      v17[2] = 0;
      *v17 = &off_1E2DC1868;
      Espresso::blob_cpu::blob_cpu((uint64_t)(v17 + 3), a1);
      *(_QWORD *)&v64 = v17 + 3;
      *((_QWORD *)&v64 + 1) = v17;
      Espresso::abstract_blob_container::shape((char *)&v58, (uint64_t)v14);
      v56 = 0;
      v57 = 0;
      (*(void (**)(_QWORD *, uint64_t *, uint64_t *))(v17[3] + 16))(v17 + 3, &v58, &v56);
      v18 = v57;
      if (v57)
      {
        v19 = (unint64_t *)&v57->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if (__p)
      {
        v63 = __p;
        operator delete(__p);
      }
      if (v65)
      {
        if (v21)
          break;
      }
      v21 = 0;
      v55 = 0;
      if (a5)
        goto LABEL_21;
LABEL_28:
      v27 = v64;
      if (*((_QWORD *)&v64 + 1))
      {
        v28 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v31 = a2[1];
      v30 = (unint64_t)a2[2];
      if ((unint64_t)v31 >= v30)
      {
        v54 = v27;
        v33 = (v31 - *a2) >> 4;
        if ((unint64_t)(v33 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v34 = v30 - (_QWORD)*a2;
        v35 = v34 >> 3;
        if (v34 >> 3 <= (unint64_t)(v33 + 1))
          v35 = v33 + 1;
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0)
          v36 = 0xFFFFFFFFFFFFFFFLL;
        else
          v36 = v35;
        v61 = v12;
        v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v36);
        v39 = &v37[16 * v33];
        *(_OWORD *)v39 = v54;
        v41 = *a2;
        v40 = a2[1];
        if (v40 == *a2)
        {
          v44 = vdupq_n_s64((unint64_t)v40);
          v42 = &v37[16 * v33];
        }
        else
        {
          v42 = &v37[16 * v33];
          do
          {
            v43 = *((_OWORD *)v40 - 1);
            v40 -= 16;
            *((_OWORD *)v42 - 1) = v43;
            v42 -= 16;
            *(_QWORD *)v40 = 0;
            *((_QWORD *)v40 + 1) = 0;
          }
          while (v40 != v41);
          v44 = *(int64x2_t *)a2;
        }
        v32 = v39 + 16;
        *a2 = v42;
        a2[1] = v39 + 16;
        v59 = v44;
        v45 = a2[2];
        a2[2] = &v37[16 * v38];
        v60 = v45;
        v58 = v44.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v58);
      }
      else
      {
        *(_OWORD *)v31 = v27;
        v32 = v31 + 16;
      }
      a2[1] = v32;
      if (v55)
      {
        v46 = (unint64_t *)&v55->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      v48 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
      if (*((_QWORD *)&v64 + 1))
      {
        v49 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      v51 = v66;
      if (v66)
      {
        v52 = (unint64_t *)&v66->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v9 += 16;
      if (v9 == a4)
        return;
    }
    v55 = v66;
    if (v66)
    {
      v22 = (unint64_t *)&v66->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    if (!a5)
      goto LABEL_28;
LABEL_21:
    if (a6)
    {
      v58 = 0;
      v59.i64[0] = 0;
      (*(void (**)(void *, uint64_t *, uint64_t))(*(_QWORD *)v21 + 40))(v21, &v58, v64 + 160);
      v24 = (std::__shared_weak_count *)v59.i64[0];
      if (v59.i64[0])
      {
        v25 = (unint64_t *)(v59.i64[0] + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v21, v64 + 160, 1.0);
    }
    goto LABEL_28;
  }
}

void sub_19163A3E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 104);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::pool_kernel_cpu,Espresso::pool_params>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB4400;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::pool_kernel_cpu,Espresso::pool_params>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB4400;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::pool_kernel_cpu,Espresso::pool_params>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<Espresso::QuantSimEngine::context>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB80D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::QuantSimEngine::context>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB80D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::QuantSimEngine::context>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 48))(a1 + 24);
}

void std::__shared_ptr_emplace<Espresso::QuantSimEngine::blob_container>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB8060;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::QuantSimEngine::blob_container>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB8060;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::QuantSimEngine::blob_container>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::HXEngine::convolution_kernel::~convolution_kernel(void **this)
{
  char *v2;

  v2 = (char *)(this + 96);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 102));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 100));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 98));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v2);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 92));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 76));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 74));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 72));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 70));
  Espresso::generic_convolution_kernel::~generic_convolution_kernel(this);
}

{
  char *v2;

  v2 = (char *)(this + 96);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 102));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 100));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 98));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v2);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 92));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 76));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 74));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 72));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 70));
  Espresso::generic_convolution_kernel::~generic_convolution_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::HXEngine::convolution_kernel::__launch(uint64_t a1, uint64_t a2, const void ***a3, const void ***a4)
{
  const void *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  const void *v19;
  void *v20;
  std::string::size_type v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  std::string::size_type v25;
  unint64_t *v26;
  unint64_t v27;
  const void **v28;
  const void *v29;
  unsigned int *v30;
  unsigned int *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  const void **v35;
  const void *v36;
  void *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  unsigned int v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  unint64_t v46;
  unsigned int v47;
  float v48;
  float v49;
  unsigned int v50;
  unint64_t v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int v54;
  __int128 v55;
  unint64_t v56;
  unint64_t v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  unint64_t v61;
  uint64_t v62;
  int v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  unint64_t *v93;
  unint64_t v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  unint64_t *v118;
  unint64_t v119;
  std::runtime_error *exception;
  std::runtime_error *v121;
  std::runtime_error *v122;
  std::string *v123;
  __int128 v124;
  std::string *v125;
  __int128 v126;
  std::string *v127;
  std::string::size_type size;
  std::string *v129;
  __int128 v130;
  uint64_t v131;
  std::string::size_type v132;
  std::string::size_type v133;
  std::__shared_weak_count *v134;
  unsigned int v135;
  std::string::size_type v136;
  std::string::size_type v137;
  unint64_t v138;
  unsigned int v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  int v145;
  uint64_t v146;
  std::__shared_weak_count *v147;
  uint64_t v148;
  std::__shared_weak_count *v149;
  unsigned int *v150;
  std::__shared_weak_count *v151;
  _BYTE v152[32];
  uint64_t v153;
  int v154;
  int v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  uint64_t v163;
  _BYTE v164[32];
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  uint64_t v170;
  _BYTE v171[32];
  uint64_t v172;
  std::string v173;
  std::string v174;
  uint64_t v175;
  std::__shared_weak_count *v176;
  unsigned int *v177;
  std::__shared_weak_count *v178;
  __int128 v179;
  __int128 v180;

  v8 = *(const void **)(a1 + 8);
  if (v8
  {
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    v147 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
  }
  else
  {
    v147 = 0;
  }
  v13 = *(std::__shared_weak_count **)(a2 + 8);
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
    v16 = v12[16];
    do
      v17 = __ldaxr(v14);
    while (__stlxr(v17 - 1, v14));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  else
  {
    v16 = v12[16];
  }
  v18 = *(_DWORD *)(v16 + 56);
  verbose_level = v18;
  v19 = *(const void **)(a1 + 8);
  if (v19
  {
    v21 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)&v180 = v20;
    *((_QWORD *)&v180 + 1) = v21;
    v133 = (std::string::size_type)v20;
    if (v21)
    {
      v22 = (unint64_t *)(v21 + 8);
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
  }
  else
  {
    v21 = 0;
    v133 = 0;
    v180 = 0uLL;
  }
  v137 = v21;
  v145 = v18;
  if (*(_QWORD *)a2
  {
    v25 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)&v179 = v24;
    *((_QWORD *)&v179 + 1) = v25;
    v132 = (std::string::size_type)v24;
    if (v25)
    {
      v26 = (unint64_t *)(v25 + 8);
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
    }
  }
  else
  {
    v25 = 0;
    v132 = 0;
    v179 = 0uLL;
  }
  v28 = *a4;
  v29 = **a4;
  if (v29
  {
    v31 = v30;
    v32 = (std::__shared_weak_count *)v28[1];
    v177 = v30;
    v178 = v32;
    if (v32)
    {
      v33 = (unint64_t *)&v32->__shared_owners_;
      do
        v34 = __ldxr(v33);
      while (__stxr(v34 + 1, v33));
    }
  }
  else
  {
    v32 = 0;
    v31 = 0;
    v177 = 0;
    v178 = 0;
  }
  v134 = v32;
  v35 = *a3;
  v36 = **a3;
  if (v36
  {
    v38 = (std::__shared_weak_count *)v35[1];
    v175 = (uint64_t)v37;
    v176 = v38;
    if (v38)
    {
      v39 = (unint64_t *)&v38->__shared_owners_;
      do
        v40 = __ldxr(v39);
      while (__stxr(v40 + 1, v39));
    }
  }
  else
  {
    v38 = 0;
    v37 = 0;
    v175 = 0;
    v176 = 0;
  }
  v131 = (uint64_t)v37;
  v136 = v25;
  v41 = *(_QWORD *)(a1 + 560);
  if (!v41)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "bias not set");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v42 = *(_DWORD *)(a1 + 352);
  v43 = *(_DWORD *)(a1 + 356);
  v44 = *(_DWORD *)(a1 + 344);
  v45 = *(_DWORD *)(a1 + 348);
  v46 = v31[2];
  v47 = v31[3];
  v142 = *(_QWORD *)(*(_QWORD *)(a1 + 576) + 16);
  v143 = *(_QWORD *)(v41 + 16);
  v146 = a1;
  v140 = *(_QWORD *)(*(_QWORD *)(a1 + 608) + 16);
  v141 = *(_QWORD *)(*(_QWORD *)(a1 + 592) + 16);
  v48 = (float)v42 + 1.0;
  if (v42 < 3)
    v48 = 4.0;
  v49 = ceilf(log2f(v48));
  v50 = vcvtmd_u64_f64(32.0 / (v49 * v49));
  if ((int)(v50 << 10) >= 4096)
    v51 = 4096;
  else
    v51 = v50 << 10;
  if (0x9000 / (v43 * v42 * v45) >= 0x80)
    v52 = 128;
  else
    v52 = 0x9000 / (v43 * v42 * v45);
  v53 = vcvtps_u32_f32((float)v44 / (float)v52);
  v144 = v53;
  if (v145 >= 1)
    printf("[H10::convolution_kernel] (kern %d %d %d %d) stripes=%d ci=%d max_c=%d frameWBase=%d pW=%d\n", v42, v43, v45, v44, 1, v53, v52, v51 / v45, v50);
  v139 = v44;
  if (v45 > v51)
  {
    v121 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v121, "Invalid kernel width!");
    __cxa_throw(v121, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v54 = v46 * v45;
  if (v46 * v45 < 0x10 || !v47)
  {
    v122 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v174, v54);
    v123 = std::string::insert(&v174, 0, "ISP min size error wk=");
    v124 = *(_OWORD *)&v123->__r_.__value_.__l.__data_;
    *(_QWORD *)&v171[16] = *((_QWORD *)&v123->__r_.__value_.__l + 2);
    *(_OWORD *)v171 = v124;
    v123->__r_.__value_.__l.__size_ = 0;
    v123->__r_.__value_.__r.__words[2] = 0;
    v123->__r_.__value_.__r.__words[0] = 0;
    v125 = std::string::append((std::string *)v171, "h=");
    v126 = *(_OWORD *)&v125->__r_.__value_.__l.__data_;
    *(_QWORD *)&v164[16] = *((_QWORD *)&v125->__r_.__value_.__l + 2);
    *(_OWORD *)v164 = v126;
    v125->__r_.__value_.__l.__size_ = 0;
    v125->__r_.__value_.__r.__words[2] = 0;
    v125->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v173, v47);
    if ((v173.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v127 = &v173;
    else
      v127 = (std::string *)v173.__r_.__value_.__r.__words[0];
    if ((v173.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v173.__r_.__value_.__r.__words[2]);
    else
      size = v173.__r_.__value_.__l.__size_;
    v129 = std::string::append((std::string *)v164, (const std::string::value_type *)v127, size);
    v130 = *(_OWORD *)&v129->__r_.__value_.__l.__data_;
    *(_QWORD *)&v152[16] = *((_QWORD *)&v129->__r_.__value_.__l + 2);
    *(_OWORD *)v152 = v130;
    v129->__r_.__value_.__l.__size_ = 0;
    v129->__r_.__value_.__r.__words[2] = 0;
    v129->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v122, (const std::string *)v152);
    __cxa_throw(v122, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v55 = *(_OWORD *)(v146 + 320);
  *(_OWORD *)v171 = *(_OWORD *)(v146 + 304);
  *(_OWORD *)&v171[16] = v55;
  v172 = *(_QWORD *)(v146 + 336);
  v56 = *(unsigned int *)(v146 + 344);
  v57 = *(unsigned int *)(v146 + 348);
  v58 = *(_OWORD *)(v146 + 432);
  v167 = *(_OWORD *)(v146 + 416);
  v168 = v58;
  v169 = *(_OWORD *)(v146 + 448);
  v170 = *(_QWORD *)(v146 + 464);
  v59 = *(_OWORD *)(v146 + 368);
  *(_OWORD *)v164 = *(_OWORD *)(v146 + 352);
  *(_OWORD *)&v164[16] = v59;
  v60 = *(_OWORD *)(v146 + 400);
  v165 = *(_OWORD *)(v146 + 384);
  v166 = v60;
  v61 = v56;
  v135 = v56;
  if (*(_WORD *)(v146 + 434))
  {
    v61 = v56 | ((unint64_t)*(unsigned __int16 *)(v146 + 430) << 32);
    v135 = *(unsigned __int16 *)(v146 + 434);
  }
  if (v144 < 2)
  {
    v174.__r_.__value_.__r.__words[0] = v132;
    v174.__r_.__value_.__l.__size_ = v136;
    if (v136)
    {
      v87 = (unint64_t *)(v136 + 8);
      do
        v88 = __ldxr(v87);
      while (__stxr(v88 + 1, v87));
    }
    v173.__r_.__value_.__r.__words[0] = v133;
    v173.__r_.__value_.__l.__size_ = v137;
    if (v137)
    {
      v89 = (unint64_t *)(v137 + 8);
      do
        v90 = __ldxr(v89);
      while (__stxr(v90 + 1, v89));
    }
    *(_OWORD *)v152 = *(_OWORD *)v171;
    *(_OWORD *)&v152[16] = *(_OWORD *)&v171[16];
    v153 = v172;
    v154 = v56;
    v155 = v57;
    v160 = v167;
    v161 = v168;
    v162 = v169;
    v163 = v170;
    v156 = *(_OWORD *)v164;
    v157 = *(_OWORD *)&v164[16];
    v158 = v165;
    v159 = v166;
    v150 = v31;
    v151 = v134;
    if (v134)
    {
      v91 = (unint64_t *)&v134->__shared_owners_;
      do
        v92 = __ldxr(v91);
      while (__stxr(v92 + 1, v91));
    }
    v148 = v131;
    v149 = v38;
    if (v38)
    {
      v93 = (unint64_t *)&v38->__shared_owners_;
      do
        v94 = __ldxr(v93);
      while (__stxr(v94 + 1, v93));
    }
    Espresso::HXEngine::convolution_kernel::launch_conv_h10(v146, (uint64_t)&v174, (uint64_t)v152, &v150, &v148, v143, v142, v141, v140, v57, v57, v61 & 0xFFFF00000000 | v56, v135);
    if (v38)
    {
      v95 = (unint64_t *)&v38->__shared_owners_;
      do
        v96 = __ldaxr(v95);
      while (__stlxr(v96 - 1, v95));
      if (!v96)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
    v97 = v151;
    if (v151)
    {
      v98 = (unint64_t *)&v151->__shared_owners_;
      do
        v99 = __ldaxr(v98);
      while (__stlxr(v99 - 1, v98));
      if (!v99)
      {
        ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
        std::__shared_weak_count::__release_weak(v97);
      }
    }
    v100 = (std::__shared_weak_count *)v173.__r_.__value_.__l.__size_;
    if (v173.__r_.__value_.__l.__size_)
    {
      v101 = (unint64_t *)(v173.__r_.__value_.__l.__size_ + 8);
      do
        v102 = __ldaxr(v101);
      while (__stlxr(v102 - 1, v101));
      if (!v102)
      {
        ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
        std::__shared_weak_count::__release_weak(v100);
      }
    }
    v103 = (std::__shared_weak_count *)v174.__r_.__value_.__l.__size_;
    if (v174.__r_.__value_.__l.__size_)
    {
      v104 = (unint64_t *)(v174.__r_.__value_.__l.__size_ + 8);
      do
        v105 = __ldaxr(v104);
      while (__stlxr(v105 - 1, v104));
      if (!v105)
      {
        ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
        std::__shared_weak_count::__release_weak(v103);
      }
    }
  }
  else
  {
    v62 = 0;
    v63 = 0;
    v138 = HIDWORD(v61);
    v64 = v52;
    do
    {
      if (v139 >= v64)
        v65 = v64;
      else
        v65 = v139;
      v66 = v65 - v63;
      if (verbose_level >= 2)
        printf("CONV: DMA: %d %d %d -> %d %d %d (%d)\n", v57, 0, v57, v66, v63 + v138, v135, v66);
      *(_OWORD *)&v174.__r_.__value_.__l.__data_ = v179;
      if (*((_QWORD *)&v179 + 1))
      {
        v67 = (unint64_t *)(*((_QWORD *)&v179 + 1) + 8);
        do
          v68 = __ldxr(v67);
        while (__stxr(v68 + 1, v67));
      }
      *(_OWORD *)&v173.__r_.__value_.__l.__data_ = v180;
      if (*((_QWORD *)&v180 + 1))
      {
        v69 = (unint64_t *)(*((_QWORD *)&v180 + 1) + 8);
        do
          v70 = __ldxr(v69);
        while (__stxr(v70 + 1, v69));
      }
      *(_OWORD *)v152 = *(_OWORD *)v171;
      *(_OWORD *)&v152[16] = *(_OWORD *)&v171[16];
      v153 = v172;
      v154 = v66;
      v155 = v57;
      v160 = v167;
      v161 = v168;
      v162 = v169;
      v163 = v170;
      v156 = *(_OWORD *)v164;
      v157 = *(_OWORD *)&v164[16];
      v158 = v165;
      v159 = v166;
      v150 = v177;
      v151 = v178;
      if (v178)
      {
        v71 = (unint64_t *)&v178->__shared_owners_;
        do
          v72 = __ldxr(v71);
        while (__stxr(v72 + 1, v71));
      }
      v73 = v176;
      v148 = v175;
      v149 = v176;
      if (v176)
      {
        v74 = (unint64_t *)&v176->__shared_owners_;
        do
          v75 = __ldxr(v74);
        while (__stxr(v75 + 1, v74));
      }
      v46 = v46 & 0xFFFFFFFF00000000 | v57;
      v51 = v51 & 0xFFFFFFFF00000000 | v135;
      Espresso::HXEngine::convolution_kernel::launch_conv_h10(v146, (uint64_t)&v174, (uint64_t)v152, &v150, &v148, v143 + 4 * v52 * v62, v142 + 4 * v52 * v62, v141 + 4 * v52 * v62, v140 + v52 * v62 * *(_DWORD *)(v146 + 352) * *(_DWORD *)(v146 + 356) * *(_DWORD *)(v146 + 348), v57, v46, v66 | ((unint64_t)(v63 + v138) << 32), v51);
      if (v73)
      {
        v76 = (unint64_t *)&v73->__shared_owners_;
        do
          v77 = __ldaxr(v76);
        while (__stlxr(v77 - 1, v76));
        if (!v77)
        {
          ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
          std::__shared_weak_count::__release_weak(v73);
        }
      }
      v78 = v151;
      if (v151)
      {
        v79 = (unint64_t *)&v151->__shared_owners_;
        do
          v80 = __ldaxr(v79);
        while (__stlxr(v80 - 1, v79));
        if (!v80)
        {
          ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
          std::__shared_weak_count::__release_weak(v78);
        }
      }
      v81 = (std::__shared_weak_count *)v173.__r_.__value_.__l.__size_;
      if (v173.__r_.__value_.__l.__size_)
      {
        v82 = (unint64_t *)(v173.__r_.__value_.__l.__size_ + 8);
        do
          v83 = __ldaxr(v82);
        while (__stlxr(v83 - 1, v82));
        if (!v83)
        {
          ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
          std::__shared_weak_count::__release_weak(v81);
        }
      }
      v84 = (std::__shared_weak_count *)v174.__r_.__value_.__l.__size_;
      if (v174.__r_.__value_.__l.__size_)
      {
        v85 = (unint64_t *)(v174.__r_.__value_.__l.__size_ + 8);
        do
          v86 = __ldaxr(v85);
        while (__stlxr(v86 - 1, v85));
        if (!v86)
        {
          ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
          std::__shared_weak_count::__release_weak(v84);
        }
      }
      v63 += v52;
      v64 += v52;
      ++v62;
    }
    while (v62 != v144);
  }
  v106 = v176;
  if (v176)
  {
    v107 = (unint64_t *)&v176->__shared_owners_;
    do
      v108 = __ldaxr(v107);
    while (__stlxr(v108 - 1, v107));
    if (!v108)
    {
      ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
      std::__shared_weak_count::__release_weak(v106);
    }
  }
  v109 = v178;
  if (v178)
  {
    v110 = (unint64_t *)&v178->__shared_owners_;
    do
      v111 = __ldaxr(v110);
    while (__stlxr(v111 - 1, v110));
    if (!v111)
    {
      ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
      std::__shared_weak_count::__release_weak(v109);
    }
  }
  v112 = (std::__shared_weak_count *)*((_QWORD *)&v179 + 1);
  if (*((_QWORD *)&v179 + 1))
  {
    v113 = (unint64_t *)(*((_QWORD *)&v179 + 1) + 8);
    do
      v114 = __ldaxr(v113);
    while (__stlxr(v114 - 1, v113));
    if (!v114)
    {
      ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
      std::__shared_weak_count::__release_weak(v112);
    }
  }
  v115 = (std::__shared_weak_count *)*((_QWORD *)&v180 + 1);
  if (*((_QWORD *)&v180 + 1))
  {
    v116 = (unint64_t *)(*((_QWORD *)&v180 + 1) + 8);
    do
      v117 = __ldaxr(v116);
    while (__stlxr(v117 - 1, v116));
    if (!v117)
    {
      ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
      std::__shared_weak_count::__release_weak(v115);
    }
  }
  if (v147)
  {
    v118 = (unint64_t *)&v147->__shared_owners_;
    do
      v119 = __ldaxr(v118);
    while (__stlxr(v119 - 1, v118));
    if (!v119)
    {
      ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
      std::__shared_weak_count::__release_weak(v147);
    }
  }
}

void sub_19163B14C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a64;
  char a69;
  void *v69;
  int v70;
  uint64_t v71;

  if (a44 < 0)
    operator delete(__p);
  if (*(char *)(v71 - 177) < 0)
    operator delete(*(void **)(v71 - 200));
  if (a69 < 0)
    operator delete(a64);
  if (*(char *)(v71 - 217) < 0)
    operator delete(*(void **)(v71 - 240));
  if (*(char *)(v71 - 153) < 0)
  {
    operator delete(*(void **)(v71 - 176));
    if ((v70 & 1) == 0)
    {
LABEL_14:
      std::shared_ptr<void>::~shared_ptr[abi:ne180100](v71 - 152);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100](v71 - 136);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100](v71 - 120);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100](v71 - 104);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
      _Unwind_Resume(a1);
    }
  }
  else if (!v70)
  {
    goto LABEL_14;
  }
  __cxa_free_exception(v69);
  goto LABEL_14;
}

void Espresso::HXEngine::convolution_kernel::share_weights(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::runtime_error *exception;

  v2 = *a2;
  if (!*a2 || *(void (***)(Espresso::HXEngine::convolution_kernel *__hidden))v2 != &off_1E2DA4608)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Invalid state");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](a1 + 70, *(_QWORD *)(v2 + 560), *(_QWORD *)(v2 + 568));
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](a1 + 72, *(_QWORD *)(v2 + 576), *(_QWORD *)(v2 + 584));
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](a1 + 74, *(_QWORD *)(v2 + 592), *(_QWORD *)(v2 + 600));
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](a1 + 76, *(_QWORD *)(v2 + 608), *(_QWORD *)(v2 + 616));
  if (v4)
  {
    v7 = (unint64_t *)&v4->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_19163B398(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void Espresso::HXEngine::convolution_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, unint64_t a5, uint64_t *a6)
{
  unint64_t v6;
  uint64_t *v9;
  uint64_t v12;
  std::__shared_weak_count *size;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  std::runtime_error *exception;
  std::string *v18;
  __int128 v19;
  std::string *v20;
  __int128 v21;
  std::string *v22;
  std::string::size_type v23;
  std::string *v24;
  __int128 v25;
  uint64_t v29;
  int v30;
  unint64_t *v33;
  unint64_t v34;
  uint64_t *v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  _DWORD *v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::runtime_error *v60;
  std::string *v61;
  __int128 v62;
  std::string *v63;
  __int128 v64;
  std::string *v65;
  std::string::size_type v66;
  std::string *v67;
  __int128 v68;
  std::runtime_error *v69;
  std::string *v70;
  __int128 v71;
  std::string *v72;
  __int128 v73;
  std::string *v74;
  std::string::size_type v75;
  std::string *v76;
  __int128 v77;
  std::runtime_error *v78;
  std::string *v79;
  __int128 v80;
  std::string *v81;
  __int128 v82;
  std::string *v83;
  std::string::size_type v84;
  std::string *v85;
  __int128 v86;
  __int128 v87;
  std::string v88;
  std::string v89;
  std::string v90;
  std::string v91;
  std::string v92;

  v6 = a5;
  if ((*((char *)a3 + 23) & 0x80000000) == 0)
  {
    v9 = a3;
    switch(*((_BYTE *)a3 + 23))
    {
      case 7:
        if (*(_DWORD *)a3 != 1650423912 || *(_DWORD *)((char *)a3 + 3) != 1935763810)
          goto LABEL_71;
        goto LABEL_15;
      case 9:
        if (*a3 != 0x656E72656B5F7868 || *((_BYTE *)a3 + 8) != 108)
          goto LABEL_71;
        goto LABEL_57;
      case 0xA:
        goto LABEL_45;
      case 0xB:
        if (*a3 == 0x656C6163735F7868 && *(uint64_t *)((char *)a3 + 3) == 0x74756F656C616373)
          goto LABEL_72;
        if (*a3 != 0x74666968735F7868 || *(uint64_t *)((char *)a3 + 3) != 0x74756F7466696873)
          goto LABEL_71;
        goto LABEL_79;
      default:
        goto LABEL_71;
    }
  }
  switch(a3[1])
  {
    case 7:
      if (*(_DWORD *)*a3 != 1650423912 || *(_DWORD *)(*a3 + 3) != 1935763810)
        goto LABEL_71;
LABEL_15:
      std::allocate_shared[abi:ne180100]<Espresso::blob<int,1>,std::allocator<Espresso::blob<int,1>>,int &,int &,int &,int &,Espresso::blob<int,1>::UnitializedBlobType,void>(&v92, *(_DWORD *)(a1 + 344), 1, 1, 1);
      v12 = a1 + 560;
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v12, (__int128 *)&v92);
      size = (std::__shared_weak_count *)v92.__r_.__value_.__l.__size_;
      if (v92.__r_.__value_.__l.__size_)
      {
        v14 = (unint64_t *)(v92.__r_.__value_.__l.__size_ + 8);
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
      v16 = *(_QWORD *)v12;
      if (v6 != 4 * *(int *)(*(_QWORD *)v12 + 8))
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::to_string(&v89, v6);
        v18 = std::string::insert(&v89, 0, "Unexpected size ");
        v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
        v90.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v90.__r_.__value_.__l.__data_ = v19;
        v18->__r_.__value_.__l.__size_ = 0;
        v18->__r_.__value_.__r.__words[2] = 0;
        v18->__r_.__value_.__r.__words[0] = 0;
        v20 = std::string::append(&v90, "/");
        v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
        v91.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v91.__r_.__value_.__l.__data_ = v21;
        v20->__r_.__value_.__l.__size_ = 0;
        v20->__r_.__value_.__r.__words[2] = 0;
        v20->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v88, 4 * *(int *)(*(_QWORD *)v12 + 8));
        if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v22 = &v88;
        else
          v22 = (std::string *)v88.__r_.__value_.__r.__words[0];
        if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v23 = HIBYTE(v88.__r_.__value_.__r.__words[2]);
        else
          v23 = v88.__r_.__value_.__l.__size_;
        v24 = std::string::append(&v91, (const std::string::value_type *)v22, v23);
        v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
        v92.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v92.__r_.__value_.__l.__data_ = v25;
        v24->__r_.__value_.__l.__size_ = 0;
        v24->__r_.__value_.__r.__words[2] = 0;
        v24->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, &v92);
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      goto LABEL_78;
    case 9:
      if (*(_QWORD *)*a3 != 0x656E72656B5F7868 || *(_BYTE *)(*a3 + 8) != 108)
        goto LABEL_71;
LABEL_57:
      *(_OWORD *)&v92.__r_.__value_.__l.__data_ = 0uLL;
      if (a6 && *a6)
      {
        std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v92, *a6, a6[1]);
        v87 = *(_OWORD *)&v92.__r_.__value_.__l.__data_;
        if (v92.__r_.__value_.__l.__size_)
        {
          v33 = (unint64_t *)(v92.__r_.__value_.__l.__size_ + 8);
          do
            v34 = __ldxr(v33);
          while (__stxr(v34 + 1, v33));
        }
      }
      else
      {
        v87 = 0uLL;
      }
      Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<signed char,1>(&v91, *(_QWORD *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, v6, (uint64_t *)&v87, *(_DWORD *)(a1 + 348) * *(_DWORD *)(a1 + 344) * *(_DWORD *)(a1 + 352) * *(_DWORD *)(a1 + 356), (a4 & 0x3F) == 0);
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 608, (__int128 *)&v91);
      v51 = (std::__shared_weak_count *)v91.__r_.__value_.__l.__size_;
      if (v91.__r_.__value_.__l.__size_)
      {
        v52 = (unint64_t *)(v91.__r_.__value_.__l.__size_ + 8);
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v54 = (std::__shared_weak_count *)*((_QWORD *)&v87 + 1);
      if (*((_QWORD *)&v87 + 1))
      {
        v55 = (unint64_t *)(*((_QWORD *)&v87 + 1) + 8);
        do
          v56 = __ldaxr(v55);
        while (__stlxr(v56 - 1, v55));
        if (!v56)
        {
          ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
          std::__shared_weak_count::__release_weak(v54);
        }
      }
      v57 = (std::__shared_weak_count *)v92.__r_.__value_.__l.__size_;
      if (v92.__r_.__value_.__l.__size_)
      {
        v58 = (unint64_t *)(v92.__r_.__value_.__l.__size_ + 8);
        do
          v59 = __ldaxr(v58);
        while (__stlxr(v59 - 1, v58));
        if (!v59)
        {
          ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
          std::__shared_weak_count::__release_weak(v57);
        }
      }
      break;
    case 10:
      v9 = (uint64_t *)*a3;
LABEL_45:
      v29 = *v9;
      v30 = *((unsigned __int16 *)v9 + 4);
      if (v29 != 0x61727478655F7868 || v30 != 26207)
        goto LABEL_71;
      if (a5 != 4)
      {
        v60 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::to_string(&v89, v6);
        v61 = std::string::insert(&v89, 0, "Unexpected size ");
        v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
        v90.__r_.__value_.__r.__words[2] = v61->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v90.__r_.__value_.__l.__data_ = v62;
        v61->__r_.__value_.__l.__size_ = 0;
        v61->__r_.__value_.__r.__words[2] = 0;
        v61->__r_.__value_.__r.__words[0] = 0;
        v63 = std::string::append(&v90, "/");
        v64 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
        v91.__r_.__value_.__r.__words[2] = v63->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v91.__r_.__value_.__l.__data_ = v64;
        v63->__r_.__value_.__l.__size_ = 0;
        v63->__r_.__value_.__r.__words[2] = 0;
        v63->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v88, 4uLL);
        if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v65 = &v88;
        else
          v65 = (std::string *)v88.__r_.__value_.__r.__words[0];
        if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v66 = HIBYTE(v88.__r_.__value_.__r.__words[2]);
        else
          v66 = v88.__r_.__value_.__l.__size_;
        v67 = std::string::append(&v91, (const std::string::value_type *)v65, v66);
        v68 = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
        v92.__r_.__value_.__r.__words[2] = v67->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v92.__r_.__value_.__l.__data_ = v68;
        v67->__r_.__value_.__l.__size_ = 0;
        v67->__r_.__value_.__r.__words[2] = 0;
        v67->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v60, &v92);
        __cxa_throw(v60, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      Espresso::HXEngine::hx_quantization_converter_helper::__set_weight_raw_blob((void *)(a1 + 768), a3, a4, 4uLL);
      break;
    case 11:
      v35 = (uint64_t *)*a3;
      if (*(_QWORD *)*a3 == 0x656C6163735F7868 && *(_QWORD *)(*a3 + 3) == 0x74756F656C616373)
      {
LABEL_72:
        std::allocate_shared[abi:ne180100]<Espresso::blob<int,1>,std::allocator<Espresso::blob<int,1>>,int &,int &,int &,int &,Espresso::blob<int,1>::UnitializedBlobType,void>(&v92, *(_DWORD *)(a1 + 344), 1, 1, 1);
        v40 = a1 + 576;
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v40, (__int128 *)&v92);
        v41 = (std::__shared_weak_count *)v92.__r_.__value_.__l.__size_;
        if (v92.__r_.__value_.__l.__size_)
        {
          v42 = (unint64_t *)(v92.__r_.__value_.__l.__size_ + 8);
          do
            v43 = __ldaxr(v42);
          while (__stlxr(v43 - 1, v42));
          if (!v43)
          {
            ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
            std::__shared_weak_count::__release_weak(v41);
          }
        }
        v16 = *(_QWORD *)v40;
        if (v6 != 4 * *(int *)(*(_QWORD *)v40 + 8))
        {
          v69 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::to_string(&v89, v6);
          v70 = std::string::insert(&v89, 0, "Unexpected size ");
          v71 = *(_OWORD *)&v70->__r_.__value_.__l.__data_;
          v90.__r_.__value_.__r.__words[2] = v70->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v90.__r_.__value_.__l.__data_ = v71;
          v70->__r_.__value_.__l.__size_ = 0;
          v70->__r_.__value_.__r.__words[2] = 0;
          v70->__r_.__value_.__r.__words[0] = 0;
          v72 = std::string::append(&v90, "/");
          v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
          v91.__r_.__value_.__r.__words[2] = v72->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v91.__r_.__value_.__l.__data_ = v73;
          v72->__r_.__value_.__l.__size_ = 0;
          v72->__r_.__value_.__r.__words[2] = 0;
          v72->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v88, 4 * *(int *)(*(_QWORD *)v40 + 8));
          if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v74 = &v88;
          else
            v74 = (std::string *)v88.__r_.__value_.__r.__words[0];
          if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v75 = HIBYTE(v88.__r_.__value_.__r.__words[2]);
          else
            v75 = v88.__r_.__value_.__l.__size_;
          v76 = std::string::append(&v91, (const std::string::value_type *)v74, v75);
          v77 = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
          v92.__r_.__value_.__r.__words[2] = v76->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v92.__r_.__value_.__l.__data_ = v77;
          v76->__r_.__value_.__l.__size_ = 0;
          v76->__r_.__value_.__r.__words[2] = 0;
          v76->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(v69, &v92);
          __cxa_throw(v69, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
LABEL_78:
        memcpy(*(void **)(v16 + 16), a4, v6);
      }
      else
      {
        v37 = *v35;
        v38 = *(uint64_t *)((char *)v35 + 3);
        if (v37 == 0x74666968735F7868 && v38 == 0x74756F7466696873)
        {
LABEL_79:
          v44 = *(int *)(a1 + 344);
          v45 = (char *)operator new(0x58uLL);
          *((_QWORD *)v45 + 1) = 0;
          *((_QWORD *)v45 + 2) = 0;
          *(_QWORD *)v45 = &off_1E2DBEF10;
          *((_QWORD *)v45 + 3) = &off_1E2DA1350;
          *(_OWORD *)(v45 + 56) = 0u;
          *(_OWORD *)(v45 + 72) = 0u;
          *((_DWORD *)v45 + 8) = v44;
          *((_QWORD *)v45 + 5) = Espresso::kern_alloc_uninitialized((Espresso *)(4 * v44));
          v45[48] = 1;
          v92.__r_.__value_.__r.__words[0] = (std::string::size_type)(v45 + 24);
          v92.__r_.__value_.__l.__size_ = (std::string::size_type)v45;
          v46 = a1 + 592;
          std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v46, (__int128 *)&v92);
          v47 = (std::__shared_weak_count *)v92.__r_.__value_.__l.__size_;
          if (v92.__r_.__value_.__l.__size_)
          {
            v48 = (unint64_t *)(v92.__r_.__value_.__l.__size_ + 8);
            do
              v49 = __ldaxr(v48);
            while (__stlxr(v49 - 1, v48));
            if (!v49)
            {
              ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
              std::__shared_weak_count::__release_weak(v47);
            }
          }
          if (v6 != 4 * *(int *)(*(_QWORD *)v46 + 8))
          {
            v78 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::to_string(&v89, v6);
            v79 = std::string::insert(&v89, 0, "Unexpected size ");
            v80 = *(_OWORD *)&v79->__r_.__value_.__l.__data_;
            v90.__r_.__value_.__r.__words[2] = v79->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v90.__r_.__value_.__l.__data_ = v80;
            v79->__r_.__value_.__l.__size_ = 0;
            v79->__r_.__value_.__r.__words[2] = 0;
            v79->__r_.__value_.__r.__words[0] = 0;
            v81 = std::string::append(&v90, "/");
            v82 = *(_OWORD *)&v81->__r_.__value_.__l.__data_;
            v91.__r_.__value_.__r.__words[2] = v81->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v91.__r_.__value_.__l.__data_ = v82;
            v81->__r_.__value_.__l.__size_ = 0;
            v81->__r_.__value_.__r.__words[2] = 0;
            v81->__r_.__value_.__r.__words[0] = 0;
            std::to_string(&v88, 4 * *(int *)(*(_QWORD *)v46 + 8));
            if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v83 = &v88;
            else
              v83 = (std::string *)v88.__r_.__value_.__r.__words[0];
            if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v84 = HIBYTE(v88.__r_.__value_.__r.__words[2]);
            else
              v84 = v88.__r_.__value_.__l.__size_;
            v85 = std::string::append(&v91, (const std::string::value_type *)v83, v84);
            v86 = *(_OWORD *)&v85->__r_.__value_.__l.__data_;
            v92.__r_.__value_.__r.__words[2] = v85->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v92.__r_.__value_.__l.__data_ = v86;
            v85->__r_.__value_.__l.__size_ = 0;
            v85->__r_.__value_.__r.__words[2] = 0;
            v85->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error(v78, &v92);
            __cxa_throw(v78, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
          memcpy(*(void **)(*(_QWORD *)v46 + 16), a4, v6);
          if (v6)
          {
            v50 = *(_DWORD **)(*(_QWORD *)v46 + 16);
            do
            {
              *v50++ += 8;
              --v6;
            }
            while (v6);
          }
        }
        else
        {
LABEL_71:
          Espresso::HXEngine::hx_quantization_converter_helper::__set_weight_raw_blob((void *)(a1 + 768), a3, a4, a5);
        }
      }
      break;
    default:
      goto LABEL_71;
  }
}

void sub_19163BD1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  void *v35;
  int v36;
  uint64_t v37;

  if (*(char *)(v37 - 73) < 0)
    operator delete(*(void **)(v37 - 96));
  if (a16 < 0)
    operator delete(__p);
  if (a35 < 0)
    operator delete(a30);
  if (a28 < 0)
    operator delete(a23);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v36 & 1) == 0)
LABEL_14:
      _Unwind_Resume(a1);
  }
  else if (!v36)
  {
    goto LABEL_14;
  }
  __cxa_free_exception(v35);
  goto LABEL_14;
}

void Espresso::HXEngine::convolution_kernel::__set_weights_finalize(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  std::__shared_weak_count *v29;

  if (!a1[76])
  {
    v2 = a1 + 76;
    Espresso::HXEngine::hx_quantization_converter_helper::get_conv_weights((Espresso::HXEngine::hx_quantization_converter_helper *)&v21, (Espresso::generic_convolution_kernel *)(a1 + 96), (uint64_t)a1);
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](a1 + 70, v21, (uint64_t)v22);
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](a1 + 72, v23, (uint64_t)v24);
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](a1 + 74, v25, (uint64_t)v26);
    v3 = a1[74];
    if (v3 && *(_DWORD *)(v3 + 8))
    {
      v4 = 0;
      v5 = *(_QWORD *)(v3 + 16);
      do
        *(_DWORD *)(v5 + 4 * v4++) += 8;
      while (v4 < *(unsigned int *)(v3 + 8));
    }
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v2, v27, (uint64_t)v28);
    v6 = v29;
    if (v29)
    {
      p_shared_owners = (unint64_t *)&v29->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v9 = v28;
    if (v28)
    {
      v10 = (unint64_t *)&v28->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v12 = v26;
    if (v26)
    {
      v13 = (unint64_t *)&v26->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v15 = v24;
    if (v24)
    {
      v16 = (unint64_t *)&v24->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    v18 = v22;
    if (v22)
    {
      v19 = (unint64_t *)&v22->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
  }
}

uint64_t Espresso::HXEngine::convolution_kernel::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v9;
  uint64_t v10;
  int v12;
  BOOL v13;
  int v14;
  uint64_t v17;

  if (*((char *)a2 + 23) < 0)
  {
    v6 = a2[1];
    if (v6 == 7)
    {
      if (*(_DWORD *)*a2 != 1650423912 || *(_DWORD *)(*a2 + 3) != 1935763810)
        return Espresso::HXEngine::hx_quantization_converter_helper::supports_weight_key(a2);
      return 1;
    }
    if (v6 != 9)
    {
      if (v6 != 11)
        return Espresso::HXEngine::hx_quantization_converter_helper::supports_weight_key(a2);
      v7 = (uint64_t *)*a2;
      if (*(_QWORD *)*a2 != 0x656C6163735F7868 || *(_QWORD *)(*a2 + 3) != 0x74756F656C616373)
      {
        v9 = *v7;
        v10 = *(uint64_t *)((char *)v7 + 3);
        if (v9 != 0x74666968735F7868 || v10 != 0x74756F7466696873)
          return Espresso::HXEngine::hx_quantization_converter_helper::supports_weight_key(a2);
      }
      return 1;
    }
    v3 = (uint64_t *)*a2;
    goto LABEL_36;
  }
  v2 = *((unsigned __int8 *)a2 + 23);
  if (v2 == 7)
  {
    v12 = *(_DWORD *)((char *)a2 + 3);
    v13 = *(_DWORD *)a2 == 1650423912;
    v14 = 1935763810;
    goto LABEL_37;
  }
  v3 = a2;
  if (v2 == 9)
  {
LABEL_36:
    v17 = *v3;
    v12 = *((unsigned __int8 *)v3 + 8);
    v13 = v17 == 0x656E72656B5F7868;
    v14 = 108;
LABEL_37:
    if (!v13 || v12 != v14)
      return Espresso::HXEngine::hx_quantization_converter_helper::supports_weight_key(a2);
    return 1;
  }
  if (v2 == 11)
  {
    if (*a2 == 0x656C6163735F7868 && *(uint64_t *)((char *)a2 + 3) == 0x74756F656C616373)
      return 1;
    if (*a2 == 0x74666968735F7868 && *(uint64_t *)((char *)a2 + 3) == 0x74756F7466696873)
      return 1;
  }
  return Espresso::HXEngine::hx_quantization_converter_helper::supports_weight_key(a2);
}

_QWORD *Espresso::HXEngine::convolution_kernel::set_biases(uint64_t a1, uint64_t *a2)
{
  return std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 816), *a2, a2[1]);
}

void Espresso::HXEngine::convolution_kernel::set_weights()
{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "use set_weights(blob<float,4>::ptr blob");
  __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
}

void sub_19163C208(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<Espresso::blob<int,1>,std::allocator<Espresso::blob<int,1>>,int &,int &,int &,int &,Espresso::blob<int,1>::UnitializedBlobType,void>(_QWORD *a1, int a2, int a3, int a4, int a5)
{
  char *v10;
  void *result;

  v10 = (char *)operator new(0x58uLL);
  *((_QWORD *)v10 + 1) = 0;
  *((_QWORD *)v10 + 2) = 0;
  *(_QWORD *)v10 = &off_1E2DBEE68;
  *((_QWORD *)v10 + 3) = &off_1E2DA12F0;
  *(_OWORD *)(v10 + 56) = 0u;
  *(_OWORD *)(v10 + 72) = 0u;
  *((_DWORD *)v10 + 8) = a2;
  result = Espresso::kern_alloc_uninitialized((Espresso *)(4 * a2 * (uint64_t)a3 * a4 * a5));
  *((_QWORD *)v10 + 5) = result;
  v10[48] = 1;
  *a1 = v10 + 24;
  a1[1] = v10;
  return result;
}

void sub_19163C2CC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;
  void *v4;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v1[3]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v2);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

void Espresso::HXEngine::convolution_kernel::launch_conv_h10(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10, unsigned int a11, unint64_t a12, unsigned int a13)
{
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int *v25;
  int *v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  char v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  int v42;
  int v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  int v52;
  int v53;
  BOOL v54;
  int v55;
  int v56;
  uint64_t v57;
  int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _DWORD *v65;
  uint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  int v71;
  unsigned int v72;
  unsigned int v73;
  int v74;
  int v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  _BOOL4 v82;
  int v83;
  unsigned int v84;
  unsigned int v85;
  int v86;
  unsigned int v87;
  unsigned int v88;
  int *v89;
  int v90;
  int v91;
  float v92;
  float v93;
  double v94;
  int v95;
  int v96;
  unint64_t *v97;
  unint64_t v98;
  int v99;
  signed int v100;
  size_t v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  uint64_t **v109;
  uint64_t **v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  unint64_t *v117;
  unint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  int v128;
  int v129;
  uint64_t v130;
  int v131;
  int v132;
  int v133;
  uint64_t v137;
  int v138;
  uint64_t *v139;
  int v140;
  int v141;
  uint64_t v142;
  int v143;
  uint64_t v144;
  uint64_t *v145;
  _QWORD *v146;
  char v147;
  uint64_t v148;
  uint64_t v149[2];
  uint64_t v150;
  std::__shared_weak_count *v151;
  uint64_t v152;
  std::__shared_weak_count *v153;
  _QWORD v154[2];
  _DWORD v155[13];
  _DWORD v156[7];
  uint64_t *v157;
  _QWORD *v158[2];
  __int128 v159;
  __int128 v160;
  _DWORD v161[3];

  v18 = a10;
  v19 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a4 + 32))(*a4);
  v20 = *(_QWORD *)(*(_QWORD *)a2 + 128);
  v145 = a5;
  v146 = a4;
  v21 = *(_DWORD *)(*a4 + 8);
  v22 = *(_DWORD *)(*a4 + 12);
  v140 = *(_DWORD *)(*a5 + 8);
  v141 = *(_DWORD *)(*a5 + 12);
  v158[0] = 0;
  v158[1] = 0;
  memset(&v155[1], 0, 48);
  memset(v156, 0, sizeof(v156));
  v157 = (uint64_t *)v158;
  v159 = 0u;
  v160 = 0u;
  v155[0] = 4;
  v23 = *(_DWORD *)(a3 + 48);
  v24 = *(_DWORD *)(a3 + 52);
  v144 = a3;
  if (verbose_level >= 2)
    printf("[launch_conv_h10] %d %d %d -> %d %d %d (interm %d %d)\n", v21, v22, a10, v140, v141, a12, *(_DWORD *)(a1 + 752), *(_DWORD *)(a1 + 756));
  v25 = (int *)Espresso::HXEngine::HXCompiler::op_t::create_conf<sCIspGeneralProcessGCPrimConf_HOG_RES_MATCH_MATCH>((uint64_t)v155);
  v26 = v25;
  v27 = (std::__shared_weak_count *)v146[1];
  v154[0] = *v146;
  v154[1] = v27;
  if (v27)
  {
    p_shared_owners = (unint64_t *)&v27->__shared_owners_;
    do
      v29 = __ldxr(p_shared_owners);
    while (__stxr(v29 + 1, p_shared_owners));
  }
  setup_match_match(v25, (uint64_t)v154, a10, a11, 0, v19);
  v131 = v24;
  v132 = v23;
  if (v27)
  {
    v30 = (unint64_t *)&v27->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v130 = v20;
  v32 = 0;
  if ((a12 & 0x80000000) == 0)
    v33 = a12;
  else
    v33 = a12 + 1;
  v34 = a9;
  v35 = (uint64_t)(v26 + 74);
  v142 = (uint64_t)(v26 + 589);
  v139 = (uint64_t *)(a1 + 668);
  v148 = (v33 >> 1);
  v138 = (((unsigned __int16)(v33 >> 1) << 9) + 32256) & 0x7E00;
  v143 = (4 * (_WORD)a10 + 16380) & 0x3FFC | ((v33 >> 1 << 14) + 2080768) & 0x1FC000 | 1;
  v36 = 1;
  v137 = a1;
  do
  {
    v37 = v36;
    setup_match_base(v35);
    v39 = *(_DWORD *)(v144 + 48);
    v38 = *(_DWORD *)(v144 + 52);
    v40 = *(unsigned __int16 *)(v144 + 72);
    v41 = *(_QWORD *)(v144 + 80);
    v42 = *(__int16 *)(v144 + 92);
    v43 = *(__int16 *)(v144 + 94);
    v44 = *v146;
    v45 = (std::__shared_weak_count *)v146[1];
    if (v45)
    {
      v46 = (unint64_t *)&v45->__shared_owners_;
      do
        v47 = __ldxr(v46);
      while (__stxr(v47 + 1, v46));
    }
    v48 = *v145;
    v49 = (std::__shared_weak_count *)v145[1];
    if (v49)
    {
      v50 = (unint64_t *)&v49->__shared_owners_;
      do
        v51 = __ldxr(v50);
      while (__stxr(v51 + 1, v50));
    }
    v52 = *(_DWORD *)(a1 + 752);
    v53 = *(_DWORD *)(a1 + 756);
    v54 = v41 == 0;
    if (v40)
      v54 = (v40 & 0xFFFE) == 2;
    v56 = *(_DWORD *)(v44 + 8);
    v55 = *(_DWORD *)(v44 + 12);
    v57 = *(_QWORD *)(v48 + 8);
    v58 = v39 * v18;
    v59 = (v39 * v18) << 10;
    *(_DWORD *)(v35 + 44) = v143;
    *(_DWORD *)(v35 + 48) = v59 & 0x7FFC00 | ((v38 & 0x3F) << 23);
    *(_DWORD *)(v35 + 52) = v42 * v18 - 1;
    *(_QWORD *)(v35 + 56) = (v43 - 1);
    *(_DWORD *)(v35 + 64) = 0;
    if (v54)
    {
      v60 = (v59 >> 11) & 0xFFF;
      v61 = (v38 & 0x3Fu) << 23 >> 24;
    }
    else
    {
      v61 = 0;
      v60 = (v39 << 31 >> 31) & (a10 >> 1);
    }
    *(_DWORD *)(v35 + 68) = v60;
    *(_DWORD *)(v35 + 72) = v61;
    *(_QWORD *)(v35 + 76) = v57;
    if (v52 >= 1)
      *(_DWORD *)(v35 + 76) = v52;
    if (v53 >= 1)
      *(_DWORD *)(v35 + 80) = v53;
    *(_QWORD *)(v35 + 84) = 0x1E00000020;
    *(_DWORD *)(v35 + 92) = 0x2000;
    if ((int)a12 > 1)
    {
      v62 = 0;
      v63 = 0;
      v64 = v148;
      do
      {
        v65 = (_DWORD *)(v35 + v63);
        v65[24] = 2;
        v65[90] = 0;
        v65[364] = 0;
        v66 = v35 + v62;
        *(_WORD *)(v66 + 1720) = 1;
        *(_WORD *)(v66 + 1852) = 0;
        v65[158] = *(_DWORD *)(a6 + 4 * v32 + 4 * v62);
        v65[224] = *(_DWORD *)(a8 + 4 * v32 + 4 * v62);
        v65[290] = *(_DWORD *)(a7 + 4 * v32 + 4 * v62);
        v63 += 4;
        v62 += 2;
        --v64;
      }
      while (v64);
    }
    *(_DWORD *)(v35 + 624) = v38 * v148 * v58;
    *(_DWORD *)(v35 + 628) = 0;
    *(_OWORD *)(v35 + 1424) = 0u;
    *(_OWORD *)(v35 + 1440) = 0u;
    *(_QWORD *)(v35 + 1984) = 0;
    *(_DWORD *)(v35 + 1992) = 0;
    *(_DWORD *)(v35 + 1996) = v56 * v18;
    *(_DWORD *)(v35 + 2000) = v55;
    if (!v49)
      goto LABEL_37;
    v67 = (unint64_t *)&v49->__shared_owners_;
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
      if (!v45)
        goto LABEL_43;
    }
    else
    {
LABEL_37:
      if (!v45)
        goto LABEL_43;
    }
    v69 = (unint64_t *)&v45->__shared_owners_;
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
LABEL_43:
    if (*(_DWORD *)(a1 + 760))
    {
      v147 = v37;
      v71 = *(_DWORD *)(a1 + 624);
      v72 = *(_DWORD *)(a1 + 628);
      v73 = *(_DWORD *)(a1 + 632);
      v74 = *(_DWORD *)(a1 + 640);
      v75 = *(_DWORD *)(a1 + 644);
      v76 = *(unsigned __int16 *)(a1 + 660);
      v77 = *v139;
      v78 = *(_QWORD *)(a1 + 736);
      v79 = *(std::__shared_weak_count **)(a1 + 744);
      v152 = v78;
      v153 = v79;
      if (v79)
      {
        v80 = (unint64_t *)&v79->__shared_owners_;
        do
          v81 = __ldxr(v80);
        while (__stxr(v81 + 1, v80));
      }
      if (v76)
        v82 = (v76 & 0xFFFE) == 2;
      else
        v82 = v77 == 0;
      if (verbose_level >= 2)
      {
        v129 = v73;
        v128 = v72;
        v83 = v71;
        v84 = v72;
        v85 = v73;
        v86 = v74;
        printf("[fused pool %d %d %d] type %d size %d %d strde %d %d valid %d (scale %d shift %d)\n", v140, v141, v148, v71, v128, v129, v74, v75, v82, **(_DWORD **)(v78 + 16), *(_DWORD *)(*(_QWORD *)(v78 + 16) + 4));
        v74 = v86;
        v73 = v85;
        v72 = v84;
        v71 = v83;
        a1 = v137;
      }
      v87 = v72 >> 1;
      v88 = v73 >> 1;
      if (!v82)
      {
        LOWORD(v87) = 0;
        LOWORD(v88) = 0;
      }
      *(_WORD *)(v35 + 2012) = v87;
      *(_WORD *)(v35 + 2014) = v88;
      *(_DWORD *)(v35 + 2008) = 1;
      *(_DWORD *)(v35 + 2032) = 0;
      v89 = *(int **)(v78 + 16);
      v90 = *v89;
      v91 = v89[1];
      if (!v71)
      {
        v133 = v74;
        v92 = ldexp(1.0, -v91) * (double)v90;
        v93 = 1.0 / (double)(int)(v73 * v72) * v92;
        v94 = v93;
        v95 = vcvtmd_s64_f64(log2(4096.0 / v93));
        if (v95 >= 20)
          v95 = 20;
        if (v95 <= 8)
          v91 = 8;
        else
          v91 = v95;
        v90 = vcvtpd_s64_f64(ldexp(1.0, v91) * v94);
        v71 = 0;
        a1 = v137;
        v74 = v133;
      }
      *(_DWORD *)(v35 + 2040) = v90;
      *(_DWORD *)(v35 + 2036) = 0;
      *(_DWORD *)(v35 + 2044) = v91 - 8;
      *(_DWORD *)(v35 + 2052) = 1;
      if (v71 == 1)
        v96 = 0x200000;
      else
        v96 = 0x400000;
      *(_DWORD *)(v35 + 2004) = v138 | (2 * (v72 & 0xF)) | v96 | (32 * (v73 & 0xF)) | ((v74 << 15) + 98304) & 0x18000 | ((v75 << 17) + 393216) & 0x60000 | *(_DWORD *)(v35 + 2004) & 0xFF180000 | 1;
      v18 = a10;
      *(_DWORD *)(v35 + 2016) = v140;
      *(_DWORD *)(v35 + 2020) = v141;
      v34 = a9;
      v37 = v147;
      if (v79)
      {
        v97 = (unint64_t *)&v79->__shared_owners_;
        do
          v98 = __ldaxr(v97);
        while (__stlxr(v98 - 1, v97));
        if (!v98)
        {
          ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
          std::__shared_weak_count::__release_weak(v79);
        }
      }
    }
    v36 = 0;
    v35 = v142;
    v32 = 1;
  }
  while ((v37 & 1) != 0);
  v99 = v132 * v18 * v131;
  v100 = (v99 + 63) & 0xFFFFFFC0;
  v101 = v100 * (int)v148;
  if (v101 <= *(_QWORD *)&v155[10] - *(_QWORD *)&v155[8])
  {
    if (v101 < *(_QWORD *)&v155[10] - *(_QWORD *)&v155[8])
      *(_QWORD *)&v155[10] = *(_QWORD *)&v155[8] + v101;
  }
  else
  {
    std::vector<signed char>::__append((unint64_t *)&v155[8], v101 - (*(_QWORD *)&v155[10] - *(_QWORD *)&v155[8]));
  }
  if (v101 <= *(_QWORD *)&v156[3] - *(_QWORD *)&v156[1])
  {
    if (v101 < *(_QWORD *)&v156[3] - *(_QWORD *)&v156[1])
      *(_QWORD *)&v156[3] = *(_QWORD *)&v156[1] + v101;
  }
  else
  {
    std::vector<signed char>::__append((unint64_t *)&v156[1], v101 - (*(_QWORD *)&v156[3] - *(_QWORD *)&v156[1]));
  }
  bzero(*(void **)&v155[8], v101);
  bzero(*(void **)&v156[1], v101);
  if ((int)a12 >= 2)
  {
    v102 = v34;
    v103 = 0;
    v104 = 0;
    v105 = v148;
    do
    {
      memcpy((void *)(*(_QWORD *)&v155[8] + v103), (const void *)(v102 + v104), v99);
      v104 += 2 * v99;
      v103 += v100;
      --v105;
    }
    while (v105);
    v106 = 0;
    v107 = v132 * v18 * v131;
    v108 = v148;
    do
    {
      memcpy((void *)(*(_QWORD *)&v156[1] + v106), (const void *)(v102 + v107), v99);
      v107 += 2 * v132 * v131 * a10;
      v106 += v100;
      --v108;
    }
    while (v108);
  }
  v161[0] = 4;
  v109 = std::__tree<std::__value_type<int,Espresso::HXEngine::HXCompiler::buffer_info_t>,std::__map_value_compare<int,std::__value_type<int,Espresso::HXEngine::HXCompiler::buffer_info_t>,std::less<int>,true>,std::allocator<std::__value_type<int,Espresso::HXEngine::HXCompiler::buffer_info_t>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(&v157, 4, v161);
  *((_DWORD *)v109 + 8) = 3;
  *((_DWORD *)v109 + 9) = v99;
  *((_DWORD *)v109 + 10) = v148;
  *((_DWORD *)v109 + 12) = 0;
  *((_DWORD *)v109 + 13) = v100;
  *((_DWORD *)v109 + 14) = 8;
  v161[0] = 5;
  v110 = std::__tree<std::__value_type<int,Espresso::HXEngine::HXCompiler::buffer_info_t>,std::__map_value_compare<int,std::__value_type<int,Espresso::HXEngine::HXCompiler::buffer_info_t>,std::less<int>,true>,std::allocator<std::__value_type<int,Espresso::HXEngine::HXCompiler::buffer_info_t>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(&v157, 5, v161);
  *((_DWORD *)v110 + 8) = 3;
  *((_DWORD *)v110 + 9) = v99;
  *((_DWORD *)v110 + 10) = v148;
  *((_DWORD *)v110 + 12) = 0;
  *((_DWORD *)v110 + 13) = v100;
  *((_DWORD *)v110 + 14) = 8;
  v111 = (std::__shared_weak_count *)v146[1];
  v150 = *v146;
  v151 = v111;
  if (v111)
  {
    v112 = (unint64_t *)&v111->__shared_owners_;
    do
      v113 = __ldxr(v112);
    while (__stxr(v113 + 1, v112));
  }
  v114 = (std::__shared_weak_count *)v145[1];
  v149[0] = *v145;
  v149[1] = (uint64_t)v114;
  if (v114)
  {
    v115 = (unint64_t *)&v114->__shared_owners_;
    do
      v116 = __ldxr(v115);
    while (__stxr(v116 + 1, v115));
  }
  setup_buffers((uint64_t)v155, &v150, a10, a11, v149, a12, a13, 1);
  if (v114)
  {
    v117 = (unint64_t *)&v114->__shared_owners_;
    do
      v118 = __ldaxr(v117);
    while (__stlxr(v118 - 1, v117));
    if (!v118)
    {
      ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
      std::__shared_weak_count::__release_weak(v114);
    }
  }
  v119 = v151;
  if (v151)
  {
    v120 = (unint64_t *)&v151->__shared_owners_;
    do
      v121 = __ldaxr(v120);
    while (__stlxr(v121 - 1, v120));
    if (!v121)
    {
      ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
      std::__shared_weak_count::__release_weak(v119);
    }
  }
  Espresso::HXEngine::HXCompiler::add_operation(v130, (uint64_t)v155);
  v122 = (std::__shared_weak_count *)*((_QWORD *)&v160 + 1);
  if (*((_QWORD *)&v160 + 1))
  {
    v123 = (unint64_t *)(*((_QWORD *)&v160 + 1) + 8);
    do
      v124 = __ldaxr(v123);
    while (__stlxr(v124 - 1, v123));
    if (!v124)
    {
      ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
      std::__shared_weak_count::__release_weak(v122);
    }
  }
  v125 = (std::__shared_weak_count *)*((_QWORD *)&v159 + 1);
  if (*((_QWORD *)&v159 + 1))
  {
    v126 = (unint64_t *)(*((_QWORD *)&v159 + 1) + 8);
    do
      v127 = __ldaxr(v126);
    while (__stlxr(v127 - 1, v126));
    if (!v127)
    {
      ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
      std::__shared_weak_count::__release_weak(v125);
    }
  }
  std::__tree<int>::destroy(v158[0]);
  if (*(_QWORD *)&v156[1])
  {
    *(_QWORD *)&v156[3] = *(_QWORD *)&v156[1];
    operator delete(*(void **)&v156[1]);
  }
  if (*(_QWORD *)&v155[8])
  {
    *(_QWORD *)&v155[10] = *(_QWORD *)&v155[8];
    operator delete(*(void **)&v155[8]);
  }
  if (*(_QWORD *)&v155[2])
  {
    *(_QWORD *)&v155[4] = *(_QWORD *)&v155[2];
    operator delete(*(void **)&v155[2]);
  }
}

void sub_19163CD08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a46);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a48);
  Espresso::HXEngine::HXCompiler::op_t::~op_t((Espresso::HXEngine::HXCompiler::op_t *)&a54);
  _Unwind_Resume(a1);
}

unint64_t Espresso::HXEngine::HXCompiler::op_t::create_conf<sCIspGeneralProcessGCPrimConf_HOG_RES_MATCH_MATCH>(uint64_t a1)
{
  char *v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  v3 = *(char **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = (unint64_t *)(a1 + 8);
  v6 = v4 - (_QWORD)v3;
  if (v6 >> 6 > 0x44)
  {
    if (v6 != 4416)
      *(_QWORD *)(a1 + 16) = v3 + 4416;
  }
  else
  {
    std::vector<signed char>::__append(v5, 4416 - v6);
    v3 = (char *)*v5;
  }
  bzero(v3, 0x1140uLL);
  return *v5;
}

int *setup_match_match(int *result, uint64_t a2, int a3, uint64_t a4, int a5, int a6)
{
  int v6;
  int v7;
  char v8;
  unsigned int v9;
  int v10;
  int v11;
  std::runtime_error *exception;

  v6 = *result;
  v7 = *result | 2;
  *result = v7;
  switch(a5)
  {
    case 0:
      v8 = 27;
      goto LABEL_4;
    case 1:
      v8 = 11;
LABEL_4:
      v9 = v6 & 0xFFFFFFC1 | (2 * (v8 & 0x1F));
      goto LABEL_7;
    case 2:
      v9 = v6 & 0xFFFFFFC1 | 0xE;
      goto LABEL_7;
    case 3:
      v9 = v7 & 0xFFFFFFC3 | 0x10;
LABEL_7:
      *result = v9;
      break;
    default:
      break;
  }
  v10 = *(_DWORD *)(*(_QWORD *)a2 + 12);
  result[1] = *(_DWORD *)(*(_QWORD *)a2 + 8) * a3;
  result[2] = v10;
  if (a6 == 4)
  {
    v11 = 8;
  }
  else
  {
    if (a6 != 5)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "unsupported compute_path");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v11 = 4;
  }
  result[3] = v11;
  result[4] = 0;
  return result;
}

void sub_19163CE98(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

double setup_match_base(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  double result;

  *(_DWORD *)a1 = *(_DWORD *)a1 & 0x1FE0 | 1;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a1 + 48) & 0xE00003FF | 0x800400;
  *(_QWORD *)(a1 + 84) = 0x1E00000020;
  *(_DWORD *)(a1 + 624) = 1;
  *(_DWORD *)(a1 + 1432) = 1;
  *(_DWORD *)(a1 + 1444) = 1;
  *(_WORD *)(a1 + 1988) = 1;
  *(_DWORD *)(a1 + 92) |= 0x2000u;
  memset_pattern16((void *)(a1 + 1160), &xmmword_191A93A60, 0x100uLL);
  v2 = 0;
  *(_QWORD *)&v3 = 0x1000100010001;
  *((_QWORD *)&v3 + 1) = 0x1000100010001;
  do
  {
    *(_OWORD *)(a1 + 1720 + v2) = v3;
    v2 += 16;
  }
  while (v2 != 128);
  *(_DWORD *)(a1 + 2004) = *(_DWORD *)(a1 + 2004) & 0xFFFFFE01 | 0x22;
  *(_QWORD *)&result = 0x100000001;
  *(_QWORD *)(a1 + 2024) = 0x100000001;
  *(_DWORD *)(a1 + 2040) = 1;
  *(_DWORD *)(a1 + 2052) = 1;
  return result;
}

_QWORD *setup_buffers(uint64_t a1, uint64_t *a2, unint64_t a3, uint64_t a4, uint64_t *a5, unint64_t a6, uint64_t a7, int a8)
{
  int v9;
  int v11;
  unint64_t v14;
  unint64_t v15;
  int v16;
  _DWORD *v17;
  _DWORD *v18;
  int v19;
  _BOOL4 v20;
  int v21;
  _BOOL4 v22;
  int v23;
  int v24;
  char v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  unsigned int v31;
  int v32;
  int v33;
  unsigned int v34;
  uint64_t **v35;
  uint64_t **v36;
  uint64_t **v37;
  uint64_t **v38;
  uint64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  int v43;
  int v44;

  v9 = a6;
  v11 = a3;
  v14 = HIDWORD(a3);
  v15 = HIDWORD(a6);
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 32))(*a2);
  v42 = a5;
  v17 = (_DWORD *)*a5;
  v41 = a2;
  v18 = (_DWORD *)*a2;
  if (v16 == 4)
    v19 = 8;
  else
    v19 = 4;
  v43 = v19;
  if ((_DWORD)v14)
    v20 = 1;
  else
    v20 = v18[4] != v11;
  v21 = a8;
  if ((_DWORD)v15)
    v22 = 1;
  else
    v22 = v17[4] != v9;
  v23 = v18[2];
  v24 = v18[3];
  if (v20)
  {
    v25 = v16 != 4;
    v24 *= v23;
    v26 = v18[4];
    v27 = (_DWORD)v14 << (v16 != 4);
  }
  else
  {
    v27 = 0;
    v25 = v16 != 4;
    v26 = v23 * v11;
    v11 *= v23;
  }
  v28 = v17[2];
  v29 = v17[3];
  v30 = (v26 << v25) + 63;
  v31 = v30 & 0xFFFFFFC0;
  if (v22)
  {
    v29 *= v28;
    v32 = v17[4];
    v33 = (_DWORD)v15 << v25;
  }
  else
  {
    v33 = 0;
    v32 = v28 * v9;
    v9 *= v28;
  }
  v34 = ((v32 << v25) + 63) & 0xFFFFFFC0;
  if (verbose_level >= 2)
    printf("[h10 setup_buffer] (dma trick: %d %d match2: %d) buffs: %d %d %d %d -> %d %d %d %d\n", v20, v22, v21, v11, v24, v30 & 0xFFFFFFC0, v27, v9, v29, v34, v33);
  v40 = a1;
  v35 = (uint64_t **)(a1 + 80);
  v44 = 0;
  v36 = std::__tree<std::__value_type<int,Espresso::HXEngine::HXCompiler::buffer_info_t>,std::__map_value_compare<int,std::__value_type<int,Espresso::HXEngine::HXCompiler::buffer_info_t>,std::less<int>,true>,std::allocator<std::__value_type<int,Espresso::HXEngine::HXCompiler::buffer_info_t>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(v35, 0, &v44);
  *((_DWORD *)v36 + 8) = 0;
  *((_DWORD *)v36 + 9) = v11;
  *((_DWORD *)v36 + 10) = v24;
  *((_DWORD *)v36 + 12) = v27;
  *((_DWORD *)v36 + 13) = v31;
  *((_DWORD *)v36 + 14) = v43;
  if (v21)
  {
    v44 = 2;
    v37 = std::__tree<std::__value_type<int,Espresso::HXEngine::HXCompiler::buffer_info_t>,std::__map_value_compare<int,std::__value_type<int,Espresso::HXEngine::HXCompiler::buffer_info_t>,std::less<int>,true>,std::allocator<std::__value_type<int,Espresso::HXEngine::HXCompiler::buffer_info_t>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(v35, 2, &v44);
    *((_DWORD *)v37 + 8) = 0;
    *((_DWORD *)v37 + 9) = v11;
    *((_DWORD *)v37 + 10) = v24;
    *((_DWORD *)v37 + 12) = v27;
    *((_DWORD *)v37 + 13) = v31;
    *((_DWORD *)v37 + 14) = v43;
    v44 = 14;
    v38 = std::__tree<std::__value_type<int,Espresso::HXEngine::HXCompiler::buffer_info_t>,std::__map_value_compare<int,std::__value_type<int,Espresso::HXEngine::HXCompiler::buffer_info_t>,std::less<int>,true>,std::allocator<std::__value_type<int,Espresso::HXEngine::HXCompiler::buffer_info_t>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(v35, 14, &v44);
  }
  else
  {
    v44 = 12;
    v38 = std::__tree<std::__value_type<int,Espresso::HXEngine::HXCompiler::buffer_info_t>,std::__map_value_compare<int,std::__value_type<int,Espresso::HXEngine::HXCompiler::buffer_info_t>,std::less<int>,true>,std::allocator<std::__value_type<int,Espresso::HXEngine::HXCompiler::buffer_info_t>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(v35, 12, &v44);
  }
  *((_DWORD *)v38 + 8) = 2;
  *((_DWORD *)v38 + 9) = v9;
  *((_DWORD *)v38 + 10) = v29;
  *((_DWORD *)v38 + 12) = v33;
  *((_DWORD *)v38 + 13) = v34;
  *((_DWORD *)v38 + 14) = v43;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(v40 + 104), *v41, v41[1]);
  return std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(v40 + 120), *v42, v42[1]);
}

void Espresso::HXEngine::HXCompiler::op_t::~op_t(Espresso::HXEngine::HXCompiler::op_t *this)
{
  void *v2;
  void *v3;
  void *v4;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 120);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 104);
  std::__tree<int>::destroy(*((_QWORD **)this + 11));
  v2 = (void *)*((_QWORD *)this + 7);
  if (v2)
  {
    *((_QWORD *)this + 8) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 4);
  if (v3)
  {
    *((_QWORD *)this + 5) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 1);
  if (v4)
  {
    *((_QWORD *)this + 2) = v4;
    operator delete(v4);
  }
}

void Espresso::HXEngine::pool_kernel::~pool_kernel(Espresso::HXEngine::pool_kernel *this)
{
  char *v2;

  *(_QWORD *)this = &off_1E2DA4238;
  v2 = (char *)this + 448;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 496);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 480);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 464);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v2);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 432);
  Espresso::generic_pool_kernel::~generic_pool_kernel(this);
}

{
  char *v2;

  *(_QWORD *)this = &off_1E2DA4238;
  v2 = (char *)this + 448;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 496);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 480);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 464);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v2);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 432);
  Espresso::generic_pool_kernel::~generic_pool_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::HXEngine::pool_kernel::__launch(uint64_t a1, uint64_t a2, const void ***a3, const void ***a4)
{
  const void *v7;
  void *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  const void **v19;
  const void *v20;
  void *v21;
  std::string::size_type v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  const void **v26;
  const void *v27;
  void *v28;
  std::string::size_type v29;
  std::string::size_type v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unsigned int v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unsigned int v39;
  uint64_t v40;
  int v41;
  unsigned int v42;
  int v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  unsigned int v78;
  std::runtime_error *exception;
  std::string *v80;
  __int128 v81;
  std::string *v82;
  __int128 v83;
  std::string *v84;
  std::string::size_type size;
  std::string *v86;
  __int128 v87;
  _QWORD v89[2];
  std::string::size_type v90;
  std::__shared_weak_count *v91;
  __int128 v92;
  __int128 v93;
  std::string v94;
  std::string v95;
  std::string v96;
  std::string v97;
  std::string v98;
  void *v99;
  std::__shared_weak_count *v100;
  void *v101;
  std::__shared_weak_count *v102;
  void *v103;
  std::__shared_weak_count *v104;

  v7 = *(const void **)(a1 + 8);
  if (v7
  {
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    v103 = v8;
    v104 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
  }
  else
  {
    v103 = 0;
    v104 = 0;
  }
  v13 = *(std::__shared_weak_count **)(a2 + 8);
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
    v16 = v12[16];
    do
      v17 = __ldaxr(v14);
    while (__stlxr(v17 - 1, v14));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  else
  {
    v16 = v12[16];
  }
  v18 = *(_DWORD *)(v16 + 56);
  verbose_level = v18;
  v19 = *a4;
  v20 = **a4;
  if (v20
  {
    v22 = (std::string::size_type)v21;
    v23 = (std::__shared_weak_count *)v19[1];
    v101 = v21;
    v102 = v23;
    if (v23)
    {
      v24 = (unint64_t *)&v23->__shared_owners_;
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 1, v24));
    }
  }
  else
  {
    v23 = 0;
    v22 = 0;
    v101 = 0;
    v102 = 0;
  }
  v26 = *a3;
  v27 = **a3;
  if (v27
  {
    v29 = (std::string::size_type)v28;
    v30 = (std::string::size_type)v26[1];
    v99 = v28;
    v100 = (std::__shared_weak_count *)v30;
    if (v30)
    {
      v31 = (unint64_t *)(v30 + 8);
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
    }
  }
  else
  {
    v30 = 0;
    v29 = 0;
    v99 = 0;
    v100 = 0;
  }
  v33 = *(unsigned int *)(a1 + 408);
  v34 = *(unsigned __int16 *)(a1 + 370);
  if (*(_WORD *)(a1 + 370))
  {
    v33 |= (unint64_t)*(unsigned __int16 *)(a1 + 366) << 32;
  }
  else
  {
    v34 = *(_DWORD *)(a1 + 408);
    if (!(_DWORD)v33)
    {
      v33 = *(unsigned int *)(v29 + 16);
      v34 = *(_DWORD *)(v29 + 16);
    }
  }
  if (*(_DWORD *)(v22 + 16) != (_DWORD)v33)
  {
    v78 = *(_DWORD *)(v22 + 16);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v95, v78);
    v80 = std::string::insert(&v95, 0, "Pool input/output channels mismatch ");
    v81 = *(_OWORD *)&v80->__r_.__value_.__l.__data_;
    v96.__r_.__value_.__r.__words[2] = v80->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v96.__r_.__value_.__l.__data_ = v81;
    v80->__r_.__value_.__l.__size_ = 0;
    v80->__r_.__value_.__r.__words[2] = 0;
    v80->__r_.__value_.__r.__words[0] = 0;
    v82 = std::string::append(&v96, "/");
    v83 = *(_OWORD *)&v82->__r_.__value_.__l.__data_;
    v97.__r_.__value_.__r.__words[2] = v82->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v97.__r_.__value_.__l.__data_ = v83;
    v82->__r_.__value_.__l.__size_ = 0;
    v82->__r_.__value_.__r.__words[2] = 0;
    v82->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v94, v33);
    if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v84 = &v94;
    else
      v84 = (std::string *)v94.__r_.__value_.__r.__words[0];
    if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v94.__r_.__value_.__r.__words[2]);
    else
      size = v94.__r_.__value_.__l.__size_;
    v86 = std::string::append(&v97, (const std::string::value_type *)v84, size);
    v87 = *(_OWORD *)&v86->__r_.__value_.__l.__data_;
    v98.__r_.__value_.__r.__words[2] = v86->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v98.__r_.__value_.__l.__data_ = v87;
    v86->__r_.__value_.__l.__size_ = 0;
    v86->__r_.__value_.__r.__words[2] = 0;
    v86->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v98);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v98.__r_.__value_.__r.__words[0] = v29;
  v98.__r_.__value_.__l.__size_ = v30;
  if (v30)
  {
    v35 = (unint64_t *)(v30 + 8);
    do
      v36 = __ldxr(v35);
    while (__stxr(v36 + 1, v35));
  }
  v97.__r_.__value_.__r.__words[0] = v22;
  v97.__r_.__value_.__l.__size_ = (std::string::size_type)v23;
  if (v23)
  {
    v37 = (unint64_t *)&v23->__shared_owners_;
    do
      v38 = __ldxr(v37);
    while (__stxr(v38 + 1, v37));
  }
  v39 = vcvtps_u32_f32((float)v33 * 0.015625);
  if (v18 >= 2)
    printf("h10 [pool_kernel::__launch] %d -> %d citer=%d\n", v33, v33, v39);
  if (v39 < 2)
  {
    v90 = v29;
    v91 = (std::__shared_weak_count *)v30;
    if (v30)
    {
      v54 = (unint64_t *)(v30 + 8);
      do
        v55 = __ldxr(v54);
      while (__stxr(v55 + 1, v54));
    }
    v89[0] = v22;
    v89[1] = v23;
    if (v23)
    {
      v56 = (unint64_t *)&v23->__shared_owners_;
      do
        v57 = __ldxr(v56);
      while (__stxr(v57 + 1, v56));
    }
    Espresso::HXEngine::pool_kernel::__launch_h10(a1, a2, &v90, v89, v33, v33, v33, v34);
    if (v23)
    {
      v58 = (unint64_t *)&v23->__shared_owners_;
      do
        v59 = __ldaxr(v58);
      while (__stlxr(v59 - 1, v58));
      if (!v59)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    v60 = v91;
    if (v91)
    {
      v61 = (unint64_t *)&v91->__shared_owners_;
      do
        v62 = __ldaxr(v61);
      while (__stlxr(v62 - 1, v61));
      if (!v62)
      {
        ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
        std::__shared_weak_count::__release_weak(v60);
      }
    }
  }
  else
  {
    v40 = 0;
    v41 = 0;
    v42 = 64;
    do
    {
      if (v42 >= v33)
        v43 = v33;
      else
        v43 = v42;
      v93 = *(_OWORD *)&v98.__r_.__value_.__l.__data_;
      if (v98.__r_.__value_.__l.__size_)
      {
        v44 = (unint64_t *)(v98.__r_.__value_.__l.__size_ + 8);
        do
          v45 = __ldxr(v44);
        while (__stxr(v45 + 1, v44));
      }
      v46 = (std::__shared_weak_count *)v97.__r_.__value_.__l.__size_;
      v92 = *(_OWORD *)&v97.__r_.__value_.__l.__data_;
      if (v97.__r_.__value_.__l.__size_)
      {
        v47 = (unint64_t *)(v97.__r_.__value_.__l.__size_ + 8);
        do
          v48 = __ldxr(v47);
        while (__stxr(v48 + 1, v47));
      }
      Espresso::HXEngine::pool_kernel::__launch_h10(a1, a2, &v93, &v92, (v43 - v40) | (unint64_t)(v40 << 32), v33, (v43 - v40) | ((unint64_t)(v40 + HIDWORD(v33)) << 32), v34);
      if (v46)
      {
        v49 = (unint64_t *)&v46->__shared_owners_;
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
          std::__shared_weak_count::__release_weak(v46);
        }
      }
      v51 = (std::__shared_weak_count *)*((_QWORD *)&v93 + 1);
      if (*((_QWORD *)&v93 + 1))
      {
        v52 = (unint64_t *)(*((_QWORD *)&v93 + 1) + 8);
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v40 = (v40 + 64);
      v42 += 64;
      ++v41;
    }
    while (v41 != v39);
  }
  v63 = (std::__shared_weak_count *)v97.__r_.__value_.__l.__size_;
  if (v97.__r_.__value_.__l.__size_)
  {
    v64 = (unint64_t *)(v97.__r_.__value_.__l.__size_ + 8);
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  v66 = (std::__shared_weak_count *)v98.__r_.__value_.__l.__size_;
  if (v98.__r_.__value_.__l.__size_)
  {
    v67 = (unint64_t *)(v98.__r_.__value_.__l.__size_ + 8);
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  v69 = v100;
  if (v100)
  {
    v70 = (unint64_t *)&v100->__shared_owners_;
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  v72 = v102;
  if (v102)
  {
    v73 = (unint64_t *)&v102->__shared_owners_;
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  v75 = v104;
  if (v104)
  {
    v76 = (unint64_t *)&v104->__shared_owners_;
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
}

void sub_19163D95C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  void *v45;
  int v46;
  uint64_t v47;

  if (*(char *)(v47 - 137) < 0)
    operator delete(*(void **)(v47 - 160));
  if (a26 < 0)
    operator delete(__p);
  if (a45 < 0)
    operator delete(a40);
  if (a38 < 0)
    operator delete(a33);
  if (a32 < 0)
  {
    operator delete(a27);
    if ((v46 & 1) == 0)
    {
LABEL_14:
      std::shared_ptr<void>::~shared_ptr[abi:ne180100](v47 - 136);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100](v47 - 120);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100](v47 - 104);
      _Unwind_Resume(a1);
    }
  }
  else if (!v46)
  {
    goto LABEL_14;
  }
  __cxa_free_exception(v45);
  goto LABEL_14;
}

void *Espresso::HXEngine::pool_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4, unint64_t a5)
{
  const char *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  void *result;
  std::runtime_error *v22;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  __int128 v26;
  std::string *v27;
  std::string::size_type v28;
  std::string *v29;
  __int128 v30;
  std::runtime_error *exception;
  std::string *v32;
  __int128 v33;
  std::string *v34;
  __int128 v35;
  std::string *v36;
  std::string::size_type size;
  std::string *v38;
  __int128 v39;
  std::string v40;
  std::string v41;
  std::string v42;
  std::string v43;
  std::string v44;

  if (verbose_level >= 2)
  {
    if (*(char *)(a3 + 23) >= 0)
      v9 = (const char *)a3;
    else
      v9 = *(const char **)a3;
    printf("[pool_kernel::__set_weight_raw_blob %s\n", v9);
  }
  if (*(char *)(a3 + 23) < 0)
  {
    v11 = *(_QWORD *)(a3 + 8);
    if (v11 != 10)
    {
      if (v11 != 14)
        return Espresso::HXEngine::hx_quantization_converter_helper::__set_weight_raw_blob((void *)(a1 + 448), (_DWORD *)a3, a4, a5);
      v10 = *(uint64_t **)a3;
      goto LABEL_13;
    }
    if (**(_QWORD **)a3 != 0x61727478655F7868 || *(_WORD *)(*(_QWORD *)a3 + 8) != 26207)
      return Espresso::HXEngine::hx_quantization_converter_helper::__set_weight_raw_blob((void *)(a1 + 448), (_DWORD *)a3, a4, a5);
LABEL_38:
    if (a5 != 4)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v41, a5);
      v32 = std::string::insert(&v41, 0, "Unexpected size ");
      v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
      v42.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v33;
      v32->__r_.__value_.__l.__size_ = 0;
      v32->__r_.__value_.__r.__words[2] = 0;
      v32->__r_.__value_.__r.__words[0] = 0;
      v34 = std::string::append(&v42, "/");
      v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
      v43.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v35;
      v34->__r_.__value_.__l.__size_ = 0;
      v34->__r_.__value_.__r.__words[2] = 0;
      v34->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v40, 4uLL);
      if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v36 = &v40;
      else
        v36 = (std::string *)v40.__r_.__value_.__r.__words[0];
      if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v40.__r_.__value_.__r.__words[2]);
      else
        size = v40.__r_.__value_.__l.__size_;
      v38 = std::string::append(&v43, (const std::string::value_type *)v36, size);
      v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
      v44.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v39;
      v38->__r_.__value_.__l.__size_ = 0;
      v38->__r_.__value_.__r.__words[2] = 0;
      v38->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v44);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    return Espresso::HXEngine::hx_quantization_converter_helper::__set_weight_raw_blob((void *)(a1 + 448), (_DWORD *)a3, a4, 4uLL);
  }
  if (*(_BYTE *)(a3 + 23) == 10)
  {
    if (*(_QWORD *)a3 != 0x61727478655F7868 || *(_WORD *)(a3 + 8) != 26207)
      return Espresso::HXEngine::hx_quantization_converter_helper::__set_weight_raw_blob((void *)(a1 + 448), (_DWORD *)a3, a4, a5);
    goto LABEL_38;
  }
  v10 = (uint64_t *)a3;
  if (*(_BYTE *)(a3 + 23) != 14)
    return Espresso::HXEngine::hx_quantization_converter_helper::__set_weight_raw_blob((void *)(a1 + 448), (_DWORD *)a3, a4, a5);
LABEL_13:
  v12 = *v10;
  v13 = *(uint64_t *)((char *)v10 + 6);
  if (v12 != 0x656C6163735F7868 || v13 != 0x74666968735F656CLL)
    return Espresso::HXEngine::hx_quantization_converter_helper::__set_weight_raw_blob((void *)(a1 + 448), (_DWORD *)a3, a4, a5);
  std::allocate_shared[abi:ne180100]<Espresso::blob<int,1>,std::allocator<Espresso::blob<int,1>>,int &,int &,int &,int &,Espresso::blob<int,1>::UnitializedBlobType,void>(&v44, 2, 1, 1, 1);
  v15 = a1 + 432;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v15, (__int128 *)&v44);
  v16 = (std::__shared_weak_count *)v44.__r_.__value_.__l.__size_;
  if (v44.__r_.__value_.__l.__size_)
  {
    v17 = (unint64_t *)(v44.__r_.__value_.__l.__size_ + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (a5 != 4 * *(int *)(*(_QWORD *)v15 + 8))
  {
    v22 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v41, a5);
    v23 = std::string::insert(&v41, 0, "Unexpected size ");
    v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v42.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    v25 = std::string::append(&v42, "/");
    v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    v43.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v40, 4 * *(int *)(*(_QWORD *)v15 + 8));
    if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v27 = &v40;
    else
      v27 = (std::string *)v40.__r_.__value_.__r.__words[0];
    if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v28 = HIBYTE(v40.__r_.__value_.__r.__words[2]);
    else
      v28 = v40.__r_.__value_.__l.__size_;
    v29 = std::string::append(&v43, (const std::string::value_type *)v27, v28);
    v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
    v44.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v30;
    v29->__r_.__value_.__l.__size_ = 0;
    v29->__r_.__value_.__r.__words[2] = 0;
    v29->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v22, &v44);
    __cxa_throw(v22, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  result = memcpy(*(void **)(*(_QWORD *)v15 + 16), a4, a5);
  if (verbose_level >= 2)
    return (void *)printf("[pool_kernel::__set_weight_raw_blob] %d %d\n", **(_DWORD **)(*(_QWORD *)v15 + 16), *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v15 + 16) + 4));
  return result;
}

void sub_19163DE54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  void *v35;
  char v36;
  uint64_t v37;

  if (*(char *)(v37 - 57) < 0)
    operator delete(*(void **)(v37 - 80));
  if (a16 < 0)
    operator delete(__p);
  if (a35 < 0)
    operator delete(a30);
  if (a28 < 0)
    operator delete(a23);
  if (a22 < 0)
    operator delete(a17);
  if ((v36 & 1) != 0)
    __cxa_free_exception(v35);
  _Unwind_Resume(exception_object);
}

void Espresso::HXEngine::pool_kernel::__set_weights_finalize(uint64_t a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;

  if (!*(_QWORD *)(a1 + 432))
  {
    v1 = (_QWORD *)(a1 + 432);
    Espresso::HXEngine::hx_quantization_converter_helper::get_pool_weights((Espresso::HXEngine::hx_quantization_converter_helper *)&v8, (uint64_t *)(a1 + 448));
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v1, v8, (uint64_t)v9);
    v2 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    v5 = v9;
    if (v9)
    {
      v6 = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

uint64_t Espresso::HXEngine::pool_kernel::supports_weight_key(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(char *)(a2 + 23);
  if (v2 < 0)
  {
    if (*(_QWORD *)(a2 + 8) != 14)
      return Espresso::HXEngine::hx_quantization_converter_helper::supports_weight_key((_DWORD *)a2);
    v3 = *(uint64_t **)a2;
  }
  else
  {
    v3 = (uint64_t *)a2;
    if (v2 != 14)
      return Espresso::HXEngine::hx_quantization_converter_helper::supports_weight_key((_DWORD *)a2);
  }
  v4 = *v3;
  v5 = *(uint64_t *)((char *)v3 + 6);
  if (v4 != 0x656C6163735F7868 || v5 != 0x74666968735F656CLL)
    return Espresso::HXEngine::hx_quantization_converter_helper::supports_weight_key((_DWORD *)a2);
  return 1;
}

void Espresso::HXEngine::pool_kernel::__launch_h10(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, unint64_t a5, unsigned int a6, unint64_t a7, unsigned int a8)
{
  _QWORD *v11;
  int v14;
  const void *v15;
  void *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  int *v20;
  int *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  _BOOL4 v46;
  int v47;
  int v48;
  int v49;
  int v50;
  char v51;
  unsigned int v52;
  unsigned int v53;
  int *v54;
  int v55;
  int v56;
  unsigned int v57;
  _QWORD *v58;
  int v59;
  int v60;
  char v61;
  unsigned int v62;
  float v63;
  float v64;
  double v65;
  int v66;
  int v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t *v70;
  unint64_t v71;
  uint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  _QWORD *v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  int v100;
  char v101;
  int v102;
  int v103;
  std::__shared_weak_count *v104;
  int v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  unsigned int v109;
  unint64_t v110;
  uint64_t v113[2];
  uint64_t v114;
  std::__shared_weak_count *v115;
  uint64_t v116;
  std::__shared_weak_count *v117;
  uint64_t v118;
  std::__shared_weak_count *v119;
  uint64_t v120;
  std::__shared_weak_count *v121;
  _QWORD v122[2];
  void *v123;
  std::__shared_weak_count *v124;
  _DWORD v125[13];
  _DWORD v126[7];
  _QWORD **v127;
  _QWORD *v128[2];
  __int128 v129;
  __int128 v130;

  v11 = a4;
  v14 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a4 + 32))(*a4);
  v128[0] = 0;
  v128[1] = 0;
  memset(&v125[1], 0, 48);
  memset(v126, 0, sizeof(v126));
  v127 = v128;
  v129 = 0u;
  v130 = 0u;
  v125[0] = 4;
  v15 = *(const void **)(a1 + 8);
  if (v15
  {
    v17 = *(std::__shared_weak_count **)(a1 + 16);
    v123 = v16;
    v124 = v17;
    if (v17)
    {
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldxr(p_shared_owners);
      while (__stxr(v19 + 1, p_shared_owners));
    }
  }
  else
  {
    v123 = 0;
    v124 = 0;
  }
  if (verbose_level >= 2)
    printf("[launch_pool_h10] %d %d %d -> %d %d %d\n", *(_DWORD *)(*v11 + 8), *(_DWORD *)(*v11 + 12), a5, *(_DWORD *)(*a3 + 8), *(_DWORD *)(*a3 + 12), a7);
  v20 = (int *)Espresso::HXEngine::HXCompiler::op_t::create_conf<sCIspGeneralProcessGCPrimConf_HOG_RES_MATCH_MATCH>((uint64_t)v125);
  v21 = v20;
  v22 = (std::__shared_weak_count *)v11[1];
  v122[0] = *v11;
  v122[1] = v22;
  if (v22)
  {
    v23 = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  setup_match_match(v20, (uint64_t)v122, a5, a6, 3, v14);
  if (v22)
  {
    v25 = (unint64_t *)&v22->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  setup_match_base((uint64_t)(v21 + 74));
  v27 = *(_DWORD *)(a1 + 304);
  v28 = *(_DWORD *)(a1 + 308);
  v29 = *(_DWORD *)(a1 + 312);
  v30 = *(_DWORD *)(a1 + 320);
  v31 = *(_DWORD *)(a1 + 324);
  v32 = *(unsigned __int16 *)(a1 + 340);
  v33 = *(_QWORD *)(a1 + 348);
  v35 = *a3;
  v34 = (std::__shared_weak_count *)a3[1];
  v120 = *a3;
  v121 = v34;
  if (v34)
  {
    v36 = (unint64_t *)&v34->__shared_owners_;
    do
      v37 = __ldxr(v36);
    while (__stxr(v37 + 1, v36));
  }
  v108 = a6;
  v39 = *v11;
  v38 = (std::__shared_weak_count *)v11[1];
  v118 = *v11;
  v119 = v38;
  if (v38)
  {
    v40 = (unint64_t *)&v38->__shared_owners_;
    do
      v41 = __ldxr(v40);
    while (__stxr(v41 + 1, v40));
  }
  v109 = a8;
  v110 = a5;
  v107 = a2;
  v42 = *(_QWORD *)(a1 + 432);
  v43 = *(std::__shared_weak_count **)(a1 + 440);
  v116 = v42;
  v117 = v43;
  if (v43)
  {
    v44 = (unint64_t *)&v43->__shared_owners_;
    do
      v45 = __ldxr(v44);
    while (__stxr(v45 + 1, v44));
  }
  if (v32)
    v46 = (v32 & 0xFFFE) == 2;
  else
    v46 = v33 == 0;
  v48 = *(_DWORD *)(v39 + 8);
  v47 = *(_DWORD *)(v39 + 12);
  v50 = *(_DWORD *)(v35 + 8);
  v49 = *(_DWORD *)(v35 + 12);
  v21[85] = (((_DWORD)a7 << 14) + 2080768) & 0x1FC000 | (4 * v110 + 16380) & 0x3FFC | v21[85] & 3;
  v21[86] &= 0x1FFFFC00u;
  v21[87] = v30 * v110 - 1;
  v51 = v31 - 1;
  v21[88] = v31 - 1;
  *(_QWORD *)(v21 + 89) = 0;
  v21[93] = v50;
  v21[94] = v49;
  v21[95] = 32;
  *((_QWORD *)v21 + 48) = 0x20000000001ELL;
  v52 = v28 >> 1;
  v53 = v29 >> 1;
  if (!v46)
  {
    LOWORD(v52) = 0;
    LOWORD(v53) = 0;
  }
  *((_WORD *)v21 + 1154) = v52;
  *((_WORD *)v21 + 1155) = v53;
  v21[576] = 1;
  v21[582] = 0;
  v54 = *(int **)(v42 + 16);
  v55 = *v54;
  v56 = v54[1];
  if (verbose_level >= 2)
  {
    v106 = v27;
    v57 = v28;
    v104 = v43;
    v100 = v47;
    v102 = v48;
    v58 = v11;
    v59 = v30;
    v60 = v49;
    v61 = v51;
    printf("pool: scale %d shift %d\n", v55, v56);
    v51 = v61;
    v49 = v60;
    v30 = v59;
    v11 = v58;
    v47 = v100;
    v48 = v102;
    v43 = v104;
    v27 = v106;
    v28 = v57;
  }
  if (!v27)
  {
    v101 = v51;
    v103 = v49;
    v105 = v30;
    v62 = v28;
    v63 = ldexp(1.0, -v56) * (double)v55;
    v64 = 1.0 / (double)(int)(v29 * v62) * v63;
    v65 = v64;
    v66 = vcvtmd_s64_f64(log2(4096.0 / v64));
    if (v66 >= 20)
      v66 = 20;
    if (v66 <= 8)
      v56 = 8;
    else
      v56 = v66;
    v55 = vcvtpd_s64_f64(ldexp(1.0, v56) * v65);
    LOBYTE(v28) = v62;
    v27 = 0;
    v49 = v103;
    v30 = v105;
    v51 = v101;
  }
  v21[584] = v55;
  v21[583] = 0;
  v21[585] = v56 - 8;
  v21[587] = 1;
  if (v27 == 1)
    v67 = 0x200000;
  else
    v67 = 0x400000;
  v21[575] = (((_WORD)a7 << 9) + 32256) & 0x7E00 | v67 & 0xFFF9FE01 | (2 * (v28 & 0xF)) & 0x1F | (unsigned __int16)(32 * (v29 & 0xF)) | ((v30 << 15) + 98304) & 0x18000 | ((v51 & 3) << 17) | v21[575] & 0xFF180000 | 1;
  v21[578] = v50;
  v21[579] = v49;
  v21[573] = v48 * v110;
  v21[574] = v47;
  if (v43)
  {
    v68 = (unint64_t *)&v43->__shared_owners_;
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  if (v119)
  {
    v70 = &v119->__shared_owners_;
    do
      v71 = __ldaxr((unint64_t *)v70);
    while (__stlxr(v71 - 1, (unint64_t *)v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
      std::__shared_weak_count::__release_weak(v119);
    }
  }
  if (v121)
  {
    v72 = &v121->__shared_owners_;
    do
      v73 = __ldaxr((unint64_t *)v72);
    while (__stlxr(v73 - 1, (unint64_t *)v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
      std::__shared_weak_count::__release_weak(v121);
    }
  }
  v74 = (std::__shared_weak_count *)v11[1];
  v114 = *v11;
  v115 = v74;
  if (v74)
  {
    v75 = (unint64_t *)&v74->__shared_owners_;
    do
      v76 = __ldxr(v75);
    while (__stxr(v76 + 1, v75));
  }
  v77 = (std::__shared_weak_count *)a3[1];
  v113[0] = *a3;
  v113[1] = (uint64_t)v77;
  if (v77)
  {
    v78 = (unint64_t *)&v77->__shared_owners_;
    do
      v79 = __ldxr(v78);
    while (__stxr(v79 + 1, v78));
  }
  setup_buffers((uint64_t)v125, &v114, v110, v108, v113, a7, v109, 0);
  if (v77)
  {
    v80 = (unint64_t *)&v77->__shared_owners_;
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }
  v82 = v115;
  if (v115)
  {
    v83 = (unint64_t *)&v115->__shared_owners_;
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  v86 = *(std::__shared_weak_count **)(v107 + 8);
  if (v86)
  {
    v87 = (unint64_t *)&v86->__shared_owners_;
    do
      v88 = __ldxr(v87);
    while (__stxr(v88 + 1, v87));
    v89 = v85[16];
    do
      v90 = __ldaxr(v87);
    while (__stlxr(v90 - 1, v87));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  else
  {
    v89 = v85[16];
  }
  Espresso::HXEngine::HXCompiler::add_operation(v89, (uint64_t)v125);
  v91 = v124;
  if (v124)
  {
    v92 = (unint64_t *)&v124->__shared_owners_;
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }
  v94 = (std::__shared_weak_count *)*((_QWORD *)&v130 + 1);
  if (*((_QWORD *)&v130 + 1))
  {
    v95 = (unint64_t *)(*((_QWORD *)&v130 + 1) + 8);
    do
      v96 = __ldaxr(v95);
    while (__stlxr(v96 - 1, v95));
    if (!v96)
    {
      ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
      std::__shared_weak_count::__release_weak(v94);
    }
  }
  v97 = (std::__shared_weak_count *)*((_QWORD *)&v129 + 1);
  if (*((_QWORD *)&v129 + 1))
  {
    v98 = (unint64_t *)(*((_QWORD *)&v129 + 1) + 8);
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  std::__tree<int>::destroy(v128[0]);
  if (*(_QWORD *)&v126[1])
  {
    *(_QWORD *)&v126[3] = *(_QWORD *)&v126[1];
    operator delete(*(void **)&v126[1]);
  }
  if (*(_QWORD *)&v125[8])
  {
    *(_QWORD *)&v125[10] = *(_QWORD *)&v125[8];
    operator delete(*(void **)&v125[8]);
  }
  if (*(_QWORD *)&v125[2])
  {
    *(_QWORD *)&v125[4] = *(_QWORD *)&v125[2];
    operator delete(*(void **)&v125[2]);
  }
}

void sub_19163E7B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,char a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,char a39)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a31);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a37);
  Espresso::HXEngine::HXCompiler::op_t::~op_t((Espresso::HXEngine::HXCompiler::op_t *)&a39);
  _Unwind_Resume(a1);
}

void Espresso::HXEngine::concat_kernel::~concat_kernel(Espresso::HXEngine::concat_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::HXEngine::context_transfer_kernel::~context_transfer_kernel(Espresso::HXEngine::context_transfer_kernel *this)
{
  Espresso::generic_context_transfer_kernel::~generic_context_transfer_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::HXEngine::context_transfer_kernel::__launch(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t *v14;
  unint64_t *v15;
  unint64_t v16;
  std::runtime_error *exception;

  v5 = *(std::__shared_weak_count **)(a2 + 8);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v8 = v4[16];
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    v8 = v4[16];
  }
  v10 = *(_QWORD *)(a1 + 312);
  v11 = *(std::__shared_weak_count **)(a1 + 320);
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  if (*(_QWORD *)(v8 + 216))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "HX: only one context transfer is supported");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(v8 + 216), v10, (uint64_t)v11);
  v14 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v8 + 48) + 32) + 16 * *(int *)(v8 + 88));
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(v8 + 200), *v14, v14[1]);
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_19163E9CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void Espresso::HXEngine::context_transfer_kernel::blob_options(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void std::__shared_ptr_emplace<Espresso::HXEngine::pool_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC1168;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::HXEngine::pool_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC1168;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::HXEngine::pool_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<Espresso::HXEngine::convolution_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC1210;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::HXEngine::convolution_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC1210;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::HXEngine::convolution_kernel>::__on_zero_shared(uint64_t a1)
{
  void **v2;
  uint64_t v3;

  v2 = (void **)(a1 + 24);
  v3 = a1 + 792;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 840);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 824);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 808);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v3);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 760);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 632);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 616);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 600);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 584);
  Espresso::generic_convolution_kernel::~generic_convolution_kernel(v2);
}

void Espresso::MPSGraphEngine::Kernels::softmax_nd_kernel::~softmax_nd_kernel(Espresso::MPSGraphEngine::Kernels::softmax_nd_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

uint64_t Espresso::MPSGraphEngine::Kernels::softmax_nd_kernel::is_valid_for_engine()
{
  return 1;
}

void Espresso::gradient_not_implemented_error::~gradient_not_implemented_error(std::runtime_error *this)
{
  Espresso::gradient_not_implemented_error::~gradient_not_implemented_error(this);
  JUMPOUT(0x19401CD90);
}

{
  this->__vftable = (std::runtime_error_vtbl *)&off_1E2D9B140;
  if (SHIBYTE(this[3].__imp_.__imp_) < 0)
    operator delete((void *)this[2].__imp_.__imp_);
  if (SHIBYTE(this[2].__vftable) < 0)
    operator delete(this[1].__vftable);
  std::runtime_error::~runtime_error(this);
}

void Espresso::build_variable_loader(_QWORD *a1, uint64_t *a2, unsigned __int8 **a3)
{
  uint64_t v5;
  unsigned __int8 *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  std::__shared_weak_count *size;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  __int128 v20;
  void **v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  void **v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  _QWORD *v62;
  uint64_t v63[3];
  std::string *v64;
  std::string *v65;
  std::string *v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  std::string v69;
  char v70;
  __int128 v71;
  uint64_t v72;
  int v73;
  _QWORD v74[2];
  _QWORD v75[2];
  std::string *v76;
  std::string *v77;
  std::string *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *__p;
  std::__shared_weak_count *v83;
  char v84;
  void *lpsrc;
  std::__shared_weak_count *v86;
  std::string v87;
  uint64_t v88;
  std::__shared_weak_count *v89;
  std::string __str;
  uint64_t v91[2];
  uint64_t v92;
  std::__shared_weak_count *v93;
  uint64_t v94;
  std::__shared_weak_count *v95;
  _QWORD *v96[7];
  char v97;
  std::__shared_weak_count *v98;
  std::__shared_weak_count *v99;
  std::__shared_weak_count *v100;
  uint64_t v101;
  void **v102;
  std::__shared_weak_count *v103;
  std::string v104;
  uint64_t v105;
  std::string v106;
  __int128 v107;

  *(_QWORD *)&v107 = *MEMORY[0x1E0C80C00];
  v5 = *a2;
  if (!v5 || (v7 = *a3, v7 == a3[1]))
  {
    *a1 = 0;
    a1[1] = 0;
  }
  else
  {
    v8 = *(std::__shared_weak_count **)(v5 + 24);
    v92 = *(_QWORD *)(v5 + 16);
    v93 = v8;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      v5 = *a2;
      v7 = *a3;
    }
    Espresso::net::get_global(&v69, v5, v7);
    v11 = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v69.__r_.__value_.__l.__data_ + 32))(v69.__r_.__value_.__r.__words[0]);
    v91[0] = 0;
    v91[1] = 0;
    Espresso::sequential_builder::sequential_builder((uint64_t)&v94, &v92, v11, v91);
    v62 = a1;
    size = (std::__shared_weak_count *)v69.__r_.__value_.__l.__size_;
    if (v69.__r_.__value_.__l.__size_)
    {
      v13 = (unint64_t *)(v69.__r_.__value_.__l.__size_ + 8);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    v15 = v93;
    if (v93)
    {
      v16 = (unint64_t *)&v93->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    v18 = *a3;
    v19 = a3[1];
    if (*a3 != v19)
    {
      while (1)
      {
        if ((char)v18[23] < 0)
        {
          std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)v18, *((_QWORD *)v18 + 1));
        }
        else
        {
          v20 = *(_OWORD *)v18;
          __str.__r_.__value_.__r.__words[2] = *((_QWORD *)v18 + 2);
          *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v20;
        }
        Espresso::net::get_global(&v88, *a2, (unsigned __int8 *)&__str);
        std::operator+<char>();
        v69 = *(std::string *)(v88 + 8);
        std::string::basic_string[abi:ne180100]<0>(&__p, "load_constant");
        v79 = 0;
        v80 = 0;
        v81 = 0;
        if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v106, v87.__r_.__value_.__l.__data_, v87.__r_.__value_.__l.__size_);
        else
          v106 = v87;
        v76 = 0;
        v77 = 0;
        v78 = 0;
        v104.__r_.__value_.__r.__words[0] = (std::string::size_type)&v76;
        v104.__r_.__value_.__s.__data_[8] = 0;
        v76 = (std::string *)operator new(0x18uLL);
        v77 = v76;
        v78 = v76 + 1;
        v77 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v78, (__int128 *)&v106, &v107, v76);
        Espresso::sequential_builder::add<Espresso::load_constant_params>((uint64_t *)&lpsrc, &v94, (uint64_t)&__p, (uint64_t)&v87, (uint64_t)&v69, v79, v80, (uint64_t *)&v76);
        if (!lpsrc)
          break;
        if (!v21)
          break;
        v102 = v21;
        v103 = v86;
        if (v86)
        {
          v22 = (unint64_t *)&v86->__shared_owners_;
          do
            v23 = __ldxr(v22);
          while (__stxr(v23 + 1, v22));
LABEL_31:
          v24 = v86;
          if (v86)
          {
            v25 = (unint64_t *)&v86->__shared_owners_;
            do
              v26 = __ldaxr(v25);
            while (__stlxr(v26 - 1, v25));
            if (!v26)
            {
              ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
              std::__shared_weak_count::__release_weak(v24);
            }
          }
        }
        v104.__r_.__value_.__r.__words[0] = (std::string::size_type)&v76;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v104);
        if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v106.__r_.__value_.__l.__data_);
        v106.__r_.__value_.__r.__words[0] = (std::string::size_type)&v79;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v106);
        if (v84 < 0)
          operator delete(__p);
        v27 = v89;
        v75[0] = v88;
        v75[1] = v89;
        if (v89)
        {
          v28 = (unint64_t *)&v89->__shared_owners_;
          do
            v29 = __ldxr(v28);
          while (__stxr(v29 + 1, v28));
        }
        Espresso::sync_copy_to_host(&__p, v75);
        if (v27)
        {
          v30 = (unint64_t *)&v27->__shared_owners_;
          do
            v31 = __ldaxr(v30);
          while (__stlxr(v31 - 1, v30));
          if (!v31)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        v32 = v102;
        v33 = v83;
        v74[0] = __p;
        v74[1] = v83;
        if (v83)
        {
          v34 = (unint64_t *)&v83->__shared_owners_;
          do
            v35 = __ldxr(v34);
          while (__stxr(v35 + 1, v34));
        }
        Espresso::generic_load_constant_kernel::set_constant_blob(v32, (uint64_t)v74);
        if (v33)
        {
          v36 = (unint64_t *)&v33->__shared_owners_;
          do
            v37 = __ldaxr(v36);
          while (__stlxr(v37 - 1, v36));
          if (!v37)
          {
            ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
            std::__shared_weak_count::__release_weak(v33);
          }
        }
        v38 = v83;
        if (v83)
        {
          v39 = (unint64_t *)&v83->__shared_owners_;
          do
            v40 = __ldaxr(v39);
          while (__stlxr(v40 - 1, v39));
          if (!v40)
          {
            ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
            std::__shared_weak_count::__release_weak(v38);
          }
        }
        v41 = v103;
        if (v103)
        {
          v42 = (unint64_t *)&v103->__shared_owners_;
          do
            v43 = __ldaxr(v42);
          while (__stlxr(v43 - 1, v42));
          if (!v43)
          {
            ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
            std::__shared_weak_count::__release_weak(v41);
          }
        }
        memset(&v69, 0, sizeof(v69));
        v70 = 0;
        v71 = xmmword_191A8AA80;
        v72 = 0x100000001;
        v73 = 0;
        std::string::operator=(&v69, &__str);
        std::string::basic_string[abi:ne180100]<0>(&__p, "store_global");
        std::operator+<char>();
        if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v104, v87.__r_.__value_.__l.__data_, v87.__r_.__value_.__l.__size_);
        else
          v104 = v87;
        v64 = 0;
        v65 = 0;
        v66 = 0;
        v102 = (void **)&v64;
        LOBYTE(v103) = 0;
        v64 = (std::string *)operator new(0x18uLL);
        v65 = v64;
        v66 = v64 + 1;
        v65 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v66, (__int128 *)&v104, (__int128 *)&v105, v64);
        memset(v63, 0, sizeof(v63));
        Espresso::sequential_builder::add<Espresso::store_global_params_t>(&v67, &v94, (uint64_t)&__p, (uint64_t)&v106, (uint64_t)&v69, (uint64_t)v64, (uint64_t)v65, v63);
        v44 = v68;
        if (v68)
        {
          v45 = (unint64_t *)&v68->__shared_owners_;
          do
            v46 = __ldaxr(v45);
          while (__stlxr(v46 - 1, v45));
          if (!v46)
          {
            ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
            std::__shared_weak_count::__release_weak(v44);
          }
        }
        v102 = (void **)v63;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v102);
        v102 = (void **)&v64;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v102);
        if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v104.__r_.__value_.__l.__data_);
        if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v106.__r_.__value_.__l.__data_);
        if (v84 < 0)
          operator delete(__p);
        if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v69.__r_.__value_.__l.__data_);
        if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v87.__r_.__value_.__l.__data_);
        v47 = v89;
        if (v89)
        {
          v48 = (unint64_t *)&v89->__shared_owners_;
          do
            v49 = __ldaxr(v48);
          while (__stlxr(v49 - 1, v48));
          if (!v49)
          {
            ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
            std::__shared_weak_count::__release_weak(v47);
          }
        }
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        v18 += 24;
        if (v18 == v19)
          goto LABEL_92;
      }
      v102 = 0;
      v103 = 0;
      goto LABEL_31;
    }
LABEL_92:
    *(_OWORD *)&v69.__r_.__value_.__r.__words[1] = 0uLL;
    v69.__r_.__value_.__r.__words[0] = (std::string::size_type)&v69.__r_.__value_.__l.__size_;
    Espresso::sequential_builder::build_from_shapes((uint64_t)&v94, (uint64_t)&v69, v62);
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v69, (char *)v69.__r_.__value_.__l.__size_);
    std::deque<std::pair<std::shared_ptr<Espresso::abstract_context>,Espresso::compute_path>>::~deque[abi:ne180100]((uint64_t)&v101);
    v50 = v100;
    if (v100)
    {
      v51 = (unint64_t *)&v100->__shared_owners_;
      do
        v52 = __ldaxr(v51);
      while (__stlxr(v52 - 1, v51));
      if (!v52)
      {
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v50);
      }
    }
    v53 = v99;
    if (v99)
    {
      v54 = (unint64_t *)&v99->__shared_owners_;
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v55 - 1, v54));
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
      }
    }
    v56 = v98;
    if (v98)
    {
      v57 = (unint64_t *)&v98->__shared_owners_;
      do
        v58 = __ldaxr(v57);
      while (__stlxr(v58 - 1, v57));
      if (!v58)
      {
        ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
        std::__shared_weak_count::__release_weak(v56);
      }
    }
    if (v97 < 0)
      operator delete(v96[5]);
    std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)v96, v96[1]);
    v59 = v95;
    if (v95)
    {
      v60 = (unint64_t *)&v95->__shared_owners_;
      do
        v61 = __ldaxr(v60);
      while (__stlxr(v61 - 1, v60));
      if (!v61)
      {
        ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
        std::__shared_weak_count::__release_weak(v59);
      }
    }
  }
}

void sub_19163F35C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56)
{
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&a21, (char *)a22);
  Espresso::sequential_builder::~sequential_builder(&a56);
  _Unwind_Resume(a1);
}

void sub_19163F504()
{
  JUMPOUT(0x19163F4CCLL);
}

void sub_19163F50C()
{
  JUMPOUT(0x19163F4DCLL);
}

void sub_19163F514()
{
  JUMPOUT(0x19163F4E4);
}

void Espresso::sequential_builder::add<Espresso::load_constant_params>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 *v23;
  uint64_t v24;
  uint64_t v25;
  std::string *v26[3];
  std::string *v27[3];
  uint64_t v28[2];
  std::string **v29;

  v23 = 0;
  v24 = 0;
  v25 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v23, a6, a7, 0xAAAAAAAAAAAAAAABLL * ((a7 - a6) >> 3));
  v20 = 0;
  v21 = 0;
  v22 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v20, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * ((a8[1] - *a8) >> 3));
  v14 = a2[12];
  LODWORD(v27[0]) = (***(uint64_t (****)(_QWORD))(a2[14] + 8))(*(_QWORD *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v14, (uint64_t)(a2 + 14), a3, a5, (int *)v27);
  v15 = (std::__shared_weak_count *)a1[1];
  v28[0] = *a1;
  v28[1] = (uint64_t)v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  memset(v27, 0, sizeof(v27));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v27, (uint64_t)v23, v24, 0xAAAAAAAAAAAAAAABLL * ((v24 - (uint64_t)v23) >> 3));
  memset(v26, 0, sizeof(v26));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v26, v20, v21, 0xAAAAAAAAAAAAAAABLL * ((v21 - v20) >> 3));
  Espresso::sequential_builder::add_kernel_dbg((uint64_t)a2, v28, a3, a4, (uint64_t)(a2 + 7), v27, v26);
  v29 = v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  v29 = v27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  if (v15)
  {
    v18 = (unint64_t *)&v15->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (*a2)
    Espresso::sequential_builder::add_shape_from_kernel(a2, *a1, &v23, &v20);
  v27[0] = (std::string *)&v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v27);
  v27[0] = (std::string *)&v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v27);
}

void sub_19163F710(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  uint64_t v14;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v13);
  *(_QWORD *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(_QWORD *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void Espresso::sequential_builder::add<Espresso::store_global_params_t>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 *v23;
  uint64_t v24;
  uint64_t v25;
  std::string *v26[3];
  std::string *v27[3];
  uint64_t v28[2];
  std::string **v29;

  v23 = 0;
  v24 = 0;
  v25 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v23, a6, a7, 0xAAAAAAAAAAAAAAABLL * ((a7 - a6) >> 3));
  v20 = 0;
  v21 = 0;
  v22 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v20, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * ((a8[1] - *a8) >> 3));
  v14 = a2[12];
  LODWORD(v27[0]) = (***(uint64_t (****)(_QWORD))(a2[14] + 8))(*(_QWORD *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v14, (uint64_t)(a2 + 14), a3, a5, (int *)v27);
  v15 = (std::__shared_weak_count *)a1[1];
  v28[0] = *a1;
  v28[1] = (uint64_t)v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  memset(v27, 0, sizeof(v27));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v27, (uint64_t)v23, v24, 0xAAAAAAAAAAAAAAABLL * ((v24 - (uint64_t)v23) >> 3));
  memset(v26, 0, sizeof(v26));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v26, v20, v21, 0xAAAAAAAAAAAAAAABLL * ((v21 - v20) >> 3));
  Espresso::sequential_builder::add_kernel_dbg((uint64_t)a2, v28, a3, a4, (uint64_t)(a2 + 7), v27, v26);
  v29 = v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  v29 = v27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  if (v15)
  {
    v18 = (unint64_t *)&v15->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (*a2)
    Espresso::sequential_builder::add_shape_from_kernel(a2, *a1, &v23, &v20);
  v27[0] = (std::string *)&v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v27);
  v27[0] = (std::string *)&v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v27);
}

void sub_19163F984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  uint64_t v14;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v13);
  *(_QWORD *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(_QWORD *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void Espresso::make_filled_bc(uint64_t *a1, uint64_t a2, float a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17[2];
  uint64_t v18;
  std::__shared_weak_count *v19;

  (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)a2 + 8) + 24))(*(_QWORD *)(*(_QWORD *)a2 + 8));
  v8 = *a1;
  v18 = 0;
  v19 = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v8 + 16))(v8, a5, &v18);
  v9 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = (std::__shared_weak_count *)a1[1];
  v17[0] = *a1;
  v17[1] = (uint64_t)v12;
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  Espresso::fill_bc(v17, a3);
  if (v12)
  {
    v15 = (unint64_t *)&v12->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_19163FB04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v9);
  _Unwind_Resume(a1);
}

void Espresso::fill_bc(uint64_t *a1, float a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  float *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23[3];
  std::__shared_weak_count *v24;
  uint64_t v25;
  uint64_t v26;

  std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v25, *(_DWORD *)(*a1 + 8), *(_DWORD *)(*a1 + 12), *(_DWORD *)(*a1 + 16), *(_DWORD *)(*a1 + 20));
  v4 = v25;
  v5 = *(int *)(v25 + 8);
  for (i = 12; i != 24; i += 4)
    v5 *= *(int *)(v25 + i);
  if (v5)
  {
    v7 = *(float **)(v25 + 24);
    do
    {
      *v7++ = a2;
      --v5;
    }
    while (v5);
  }
  v8 = *a1;
  v9 = (std::__shared_weak_count *)a1[1];
  v23[2] = *a1;
  v24 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v12 = (std::__shared_weak_count *)v26;
  v23[0] = v4;
  v23[1] = v26;
  if (v26)
  {
    v13 = (unint64_t *)(v26 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  Espresso::sync_copy_from_host(v8, v9, v23);
  if (v12)
  {
    v15 = (unint64_t *)&v12->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v17 = v24;
  if (v24)
  {
    v18 = (unint64_t *)&v24->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = (std::__shared_weak_count *)v26;
  if (v26)
  {
    v21 = (unint64_t *)(v26 + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_19163FCA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t Espresso::gradient_not_implemented_error::gradient_not_implemented_error(uint64_t a1, __int128 *a2, __int128 *a3, unint64_t a4)
{
  std::string *v8;
  __int128 v9;
  int v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  std::string *v13;
  __int128 v14;
  std::string *v15;
  __int128 v16;
  std::string *p_p;
  std::string::size_type size;
  std::string *v19;
  __int128 v20;
  const char *v21;
  __int128 v22;
  std::string *v23;
  __int128 v24;
  std::string __p;
  std::string v27;
  std::string v28;
  std::string v29;
  std::string v30;
  __int128 v31;
  int64_t v32;

  std::operator+<char>();
  v8 = std::string::append(&v27, " of type ");
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v28.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  v10 = *((char *)a2 + 23);
  if (v10 >= 0)
    v11 = (const std::string::value_type *)a2;
  else
    v11 = *(const std::string::value_type **)a2;
  if (v10 >= 0)
    v12 = *((unsigned __int8 *)a2 + 23);
  else
    v12 = *((_QWORD *)a2 + 1);
  v13 = std::string::append(&v28, v11, v12);
  v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v29.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  v15 = std::string::append(&v29, " at index ");
  v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v30.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&__p, a4);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v19 = std::string::append(&v30, (const std::string::value_type *)p_p, size);
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  v32 = v19->__r_.__value_.__r.__words[2];
  v31 = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  if (v32 >= 0)
    v21 = (const char *)&v31;
  else
    v21 = (const char *)v31;
  std::runtime_error::runtime_error((std::runtime_error *)a1, v21);
  if (SHIBYTE(v32) < 0)
    operator delete((void *)v31);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
  *(_QWORD *)a1 = &off_1E2D9B140;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 16), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v22 = *a2;
    *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(a1 + 16) = v22;
  }
  v23 = (std::string *)(a1 + 40);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v23, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v24 = *a3;
    *(_QWORD *)(a1 + 56) = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v23->__r_.__value_.__l.__data_ = v24;
  }
  *(_QWORD *)(a1 + 64) = a4;
  return a1;
}

void sub_19163FED0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  uint64_t v40;
  void **v41;

  if (*(char *)(v40 + 39) < 0)
    operator delete(*v41);
  std::runtime_error::~runtime_error((std::runtime_error *)v40);
  _Unwind_Resume(a1);
}

void Espresso::mark_block_start(uint64_t *a1, uint64_t a2, int a3)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  int v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  std::string v44;
  uint64_t v45[2];
  void *v46;
  char v47;
  _QWORD v48[3];
  _BYTE v49[40];
  void *__p;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54[2];
  uint64_t v55[2];
  uint64_t v56;
  std::__shared_weak_count *v57;
  void *v58;
  std::__shared_weak_count *v59;
  _BYTE v60[8];
  _QWORD *v61;
  void *v62;
  char v63;
  std::__shared_weak_count *v64;
  std::__shared_weak_count *v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  unsigned int v68;
  uint64_t v69;

  if (a3)
  {
    v5 = *a1;
    v6 = (std::__shared_weak_count *)a1[1];
    v56 = *a1;
    v57 = v6;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      v5 = *a1;
    }
    v9 = *(std::__shared_weak_count **)(v5 + 24);
    v55[0] = *(_QWORD *)(v5 + 16);
    v55[1] = (uint64_t)v9;
    if (v9)
    {
      v10 = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
      v5 = *a1;
    }
    v12 = *(_DWORD *)(**(_QWORD **)(v5 + 32) + 12);
    v54[0] = 0;
    v54[1] = 0;
    Espresso::sequential_builder::sequential_builder((uint64_t)&v58, &v56, v55, v12, v54);
    if (v9)
    {
      v13 = (unint64_t *)&v9->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v15 = v57;
    if (v57)
    {
      v16 = (unint64_t *)&v57->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    v18 = v68;
    memset(v48, 0, sizeof(v48));
    Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)v48, 0, (uint64_t)v49);
    Espresso::make_filled_bc(&v52, (uint64_t)&v66, 1.0, v18, (uint64_t)v49);
    if (__p)
    {
      v51 = __p;
      operator delete(__p);
    }
    v19 = (std::__shared_weak_count *)v53;
    v45[0] = v52;
    v45[1] = v53;
    if (v53)
    {
      v20 = (unint64_t *)(v53 + 8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    if (*(char *)(a2 + 23) < 0)
      std::string::__init_copy_ctor_external(&v44, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    else
      v44 = *(std::string *)a2;
    Espresso::sequential_builder::load_global_op((std::string *)a2, &v44, (uint64_t *)&v58, v45, (uint64_t)&v46);
    if (v47 < 0)
      operator delete(v46);
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v44.__r_.__value_.__l.__data_);
    if (v19)
    {
      v22 = (unint64_t *)&v19->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    Espresso::sequential_builder::build_from_shapes((uint64_t)&v58, (uint64_t)v58, 1, &v42);
    v24 = v43;
    if (v43)
    {
      v25 = (unint64_t *)&v43->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    v27 = (std::__shared_weak_count *)v53;
    if (v53)
    {
      v28 = (unint64_t *)(v53 + 8);
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
    std::deque<std::pair<std::shared_ptr<Espresso::abstract_context>,Espresso::compute_path>>::~deque[abi:ne180100]((uint64_t)&v69);
    v30 = v67;
    if (v67)
    {
      v31 = (unint64_t *)&v67->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    v33 = v65;
    if (v65)
    {
      v34 = (unint64_t *)&v65->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    v36 = v64;
    if (v64)
    {
      v37 = (unint64_t *)&v64->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
    if (v63 < 0)
      operator delete(v62);
    std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)v60, v61);
    v39 = v59;
    if (v59)
    {
      v40 = (unint64_t *)&v59->__shared_owners_;
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }
  }
  std::operator+<char>();
  mark_scope(a1, a2, (uint64_t)&v58);
  if ((v60[7] & 0x80000000) != 0)
    operator delete(v58);
}

void sub_191640358(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
  Espresso::sequential_builder::~sequential_builder(&a41);
  _Unwind_Resume(a1);
}

void sub_1916403BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,char a34,uint64_t a35,char a36)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a32);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a34);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a36);
  JUMPOUT(0x1916403B4);
}

void sub_1916403DC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  if (a43 < 0)
    operator delete(__p);
  JUMPOUT(0x1916403B4);
}

void mark_scope(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  int v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  std::string *v40;
  std::string *v41;
  std::string *v42;
  std::string *v43;
  std::string *v44;
  std::string *v45;
  int v46;
  void *__p[2];
  char v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  uint64_t v51[2];
  uint64_t v52[2];
  uint64_t v53;
  std::__shared_weak_count *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  _QWORD *v57[7];
  char v58;
  std::__shared_weak_count *v59;
  std::__shared_weak_count *v60;
  std::__shared_weak_count *v61;
  uint64_t v62;
  std::string **v63;
  char v64;
  std::string v65;
  uint64_t v66;
  std::string v67;
  __int128 v68;

  *(_QWORD *)&v68 = *MEMORY[0x1E0C80C00];
  if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>((_QWORD *)(*a1 + 136), (unsigned __int8 *)a2))
  {
    if (*(char *)(a2 + 23) >= 0)
      v37 = a2;
    else
      v37 = *(_QWORD *)a2;
    v55 = v37;
    Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*>("blob of name %s does not exist", &v55);
  }
  v6 = *a1;
  v7 = (std::__shared_weak_count *)a1[1];
  v53 = *a1;
  v54 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    v6 = *a1;
  }
  v10 = *(std::__shared_weak_count **)(v6 + 24);
  v52[0] = *(_QWORD *)(v6 + 16);
  v52[1] = (uint64_t)v10;
  if (v10)
  {
    v11 = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
    v6 = *a1;
  }
  v13 = *(_DWORD *)(**(_QWORD **)(v6 + 32) + 12);
  v51[0] = 0;
  v51[1] = 0;
  Espresso::sequential_builder::sequential_builder((uint64_t)&v55, &v53, v52, v13, v51);
  if (v10)
  {
    v14 = (unint64_t *)&v10->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v16 = v54;
  if (v54)
  {
    v17 = (unint64_t *)&v54->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "copy");
  v46 = 0;
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v67, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v67 = *(std::string *)a2;
  v43 = 0;
  v44 = 0;
  v45 = 0;
  v65.__r_.__value_.__r.__words[0] = (std::string::size_type)&v43;
  v65.__r_.__value_.__s.__data_[8] = 0;
  v43 = (std::string *)operator new(0x18uLL);
  v44 = v43;
  v45 = v43 + 1;
  v44 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v45, (__int128 *)&v67, &v68, v43);
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v65, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v65 = *(std::string *)a3;
  v40 = 0;
  v41 = 0;
  v42 = 0;
  v63 = &v40;
  v64 = 0;
  v40 = (std::string *)operator new(0x18uLL);
  v41 = v40;
  v42 = v40 + 1;
  v41 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v42, (__int128 *)&v65, (__int128 *)&v66, v40);
  Espresso::sequential_builder::add<Espresso::copy_params_t>(&v49, &v55, (uint64_t)__p, a3, (uint64_t)&v46, (uint64_t)v43, (uint64_t)v44, (uint64_t *)&v40);
  v19 = v50;
  if (v50)
  {
    v20 = (unint64_t *)&v50->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v63 = &v40;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v63);
  if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v65.__r_.__value_.__l.__data_);
  v65.__r_.__value_.__r.__words[0] = (std::string::size_type)&v43;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v65);
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v67.__r_.__value_.__l.__data_);
  if (v48 < 0)
    operator delete(__p[0]);
  Espresso::sequential_builder::build_from_shapes((uint64_t)&v55, v55, 1, &v38);
  v22 = v39;
  if (v39)
  {
    v23 = (unint64_t *)&v39->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  std::deque<std::pair<std::shared_ptr<Espresso::abstract_context>,Espresso::compute_path>>::~deque[abi:ne180100]((uint64_t)&v62);
  v25 = v61;
  if (v61)
  {
    v26 = (unint64_t *)&v61->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = v60;
  if (v60)
  {
    v29 = (unint64_t *)&v60->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v31 = v59;
  if (v59)
  {
    v32 = (unint64_t *)&v59->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  if (v58 < 0)
    operator delete(v57[5]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)v57, v57[1]);
  v34 = v56;
  if (v56)
  {
    v35 = (unint64_t *)&v56->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
}

void sub_191640868(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33)
{
  uint64_t v33;

  *(_QWORD *)(v33 - 112) = &a15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v33 - 112));
  if (*(char *)(v33 - 57) < 0)
    operator delete(*(void **)(v33 - 80));
  if (a24 < 0)
    operator delete(__p);
  Espresso::sequential_builder::~sequential_builder(&a33);
  _Unwind_Resume(a1);
}

void sub_19164090C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,char a26,uint64_t a27,char a28)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a26);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  JUMPOUT(0x191640904);
}

void sub_19164092C()
{
  JUMPOUT(0x191640904);
}

void Espresso::mark_block_end(_QWORD *a1, uint64_t a2)
{
  void *__p;
  char v5;

  std::operator+<char>();
  mark_scope(a1, a2, (uint64_t)&__p);
  if (v5 < 0)
    operator delete(__p);
}

void sub_19164098C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *Espresso::guard_block_with_if (uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v3;
  _QWORD v4[3];
  _QWORD *v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v4[0] = &off_1E2DB18C8;
  v4[1] = a2;
  v5 = v4;
  Espresso::transform_network_inplace(a1, (uint64_t)v4);
  result = v5;
  if (v5 == v4)
  {
    v3 = 4;
    result = v4;
  }
  else
  {
    if (!v5)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_191640A3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void std::__function::__func<Espresso::guard_block_with_if (std::shared_ptr<Espresso::net> &,std::string const&)::$_0,std::allocator<Espresso::guard_block_with_if (std::shared_ptr<Espresso::net> &,std::string const&)::$_0>,void ()(Espresso::net&,Espresso::sequential_builder &)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<Espresso::guard_block_with_if (std::shared_ptr<Espresso::net> &,std::string const&)::$_0,std::allocator<Espresso::guard_block_with_if (std::shared_ptr<Espresso::net> &,std::string const&)::$_0>,void ()(Espresso::net&,Espresso::sequential_builder &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DB18C8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<Espresso::guard_block_with_if (std::shared_ptr<Espresso::net> &,std::string const&)::$_0,std::allocator<Espresso::guard_block_with_if (std::shared_ptr<Espresso::net> &,std::string const&)::$_0>,void ()(Espresso::net&,Espresso::sequential_builder &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DB18C8;
  a2[1] = v2;
  return result;
}

void std::__function::__func<Espresso::guard_block_with_if (std::shared_ptr<Espresso::net> &,std::string const&)::$_0,std::allocator<Espresso::guard_block_with_if (std::shared_ptr<Espresso::net> &,std::string const&)::$_0>,void ()(Espresso::net&,Espresso::sequential_builder &)>::operator()(uint64_t a1, Espresso::net *a2, uint64_t *a3)
{
  uint64_t v6;
  unint64_t i;
  uint64_t v8;
  const void **v9;
  uint64_t v10;
  size_t v11;
  void *v12;
  unint64_t v13;
  void **v14;
  unsigned __int8 *v15;
  uint64_t v16;
  unint64_t v17;
  void **v18;
  __int128 *v19;
  __int128 v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t v27[3];
  _QWORD v28[3];
  uint64_t v29;
  std::__shared_weak_count *v30;
  uint64_t v31[3];
  std::string *v32;
  std::string *v33;
  std::string *v34;
  char v35;
  void *__p[2];
  char v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  void *v40[2];
  unsigned __int8 v41;
  void *v42[2];
  unsigned __int8 v43;
  void **v44;
  char v45;
  std::string v46;
  __int128 v47;

  *((_QWORD *)&v47 + 1) = *MEMORY[0x1E0C80C00];
  std::operator+<char>();
  std::operator+<char>();
  v6 = *((_QWORD *)a2 + 4);
  if (*((_QWORD *)a2 + 5) != v6)
  {
    for (i = 0; i < (*((_QWORD *)a2 + 5) - v6) >> 4; ++i)
    {
      v8 = *(_QWORD *)(v6 + 16 * i);
      v9 = (const void **)(v8 + 16);
      v10 = *(unsigned __int8 *)(v8 + 39);
      v11 = *(_QWORD *)(v8 + 24);
      if ((v10 & 0x80u) == 0)
        v12 = (void *)*(unsigned __int8 *)(v8 + 39);
      else
        v12 = *(void **)(v8 + 24);
      v13 = v43;
      if ((v43 & 0x80u) != 0)
        v13 = (unint64_t)v42[1];
      if (v12 == (void *)v13)
      {
        if ((v43 & 0x80u) == 0)
          v14 = v42;
        else
          v14 = (void **)v42[0];
        if ((v10 & 0x80) != 0)
        {
          if (!memcmp(*v9, v14, v11))
          {
LABEL_30:
            std::string::basic_string[abi:ne180100]<0>(__p, "cf_if");
            v19 = *(__int128 **)(a1 + 8);
            if (*((char *)v19 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&v46, *(const std::string::value_type **)v19, *((_QWORD *)v19 + 1));
            }
            else
            {
              v20 = *v19;
              v46.__r_.__value_.__r.__words[2] = *((_QWORD *)v19 + 2);
              *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v20;
            }
            v32 = 0;
            v33 = 0;
            v34 = 0;
            v44 = (void **)&v32;
            v45 = 0;
            v32 = (std::string *)operator new(0x18uLL);
            v33 = v32;
            v34 = v32 + 1;
            v33 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v34, (__int128 *)&v46, &v47, v32);
            memset(v31, 0, sizeof(v31));
            Espresso::sequential_builder::add<Espresso::cf_if_params_t>(&v38, a3, (uint64_t)__p, (uint64_t)v42, (uint64_t)&v35, (uint64_t)v32, (uint64_t)v33, v31);
            v24 = v39;
            if (v39)
            {
              p_shared_owners = (unint64_t *)&v39->__shared_owners_;
              do
                v26 = __ldaxr(p_shared_owners);
              while (__stlxr(v26 - 1, p_shared_owners));
              if (!v26)
              {
                ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
                std::__shared_weak_count::__release_weak(v24);
              }
            }
            v44 = (void **)v31;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v44);
            v44 = (void **)&v32;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v44);
            if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v46.__r_.__value_.__l.__data_);
LABEL_48:
            if (v37 < 0)
              operator delete(__p[0]);
            goto LABEL_50;
          }
        }
        else
        {
          if (!*(_BYTE *)(v8 + 39))
            goto LABEL_30;
          v15 = (unsigned __int8 *)(v8 + 16);
          v16 = v10;
          while (*v15 == *(unsigned __int8 *)v14)
          {
            ++v15;
            v14 = (void **)((char *)v14 + 1);
            if (!--v16)
              goto LABEL_30;
          }
        }
      }
      v17 = v41;
      if ((v41 & 0x80u) != 0)
        v17 = (unint64_t)v40[1];
      if (v12 == (void *)v17)
      {
        if ((v41 & 0x80u) == 0)
          v18 = v40;
        else
          v18 = (void **)v40[0];
        if ((v10 & 0x80) != 0)
        {
          if (!memcmp(*v9, v18, v11))
          {
LABEL_34:
            std::string::basic_string[abi:ne180100]<0>(__p, "cf_end");
            memset(v28, 0, sizeof(v28));
            memset(v27, 0, sizeof(v27));
            Espresso::sequential_builder::add<Espresso::cf_end_params_t>(&v29, a3, (uint64_t)__p, (uint64_t)v40, (uint64_t)&v44, 0, 0, v27);
            v21 = v30;
            if (v30)
            {
              v22 = (unint64_t *)&v30->__shared_owners_;
              do
                v23 = __ldaxr(v22);
              while (__stlxr(v23 - 1, v22));
              if (!v23)
              {
                ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
                std::__shared_weak_count::__release_weak(v21);
              }
            }
            v46.__r_.__value_.__r.__words[0] = (std::string::size_type)v27;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v46);
            v46.__r_.__value_.__r.__words[0] = (std::string::size_type)v28;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v46);
            goto LABEL_48;
          }
        }
        else
        {
          if (!(_DWORD)v10)
            goto LABEL_34;
          while (*(unsigned __int8 *)v9 == *(unsigned __int8 *)v18)
          {
            v9 = (const void **)((char *)v9 + 1);
            v18 = (void **)((char *)v18 + 1);
            if (!--v10)
              goto LABEL_34;
          }
        }
      }
      Espresso::sequential_builder::add_layer_from_network((Espresso::sequential_builder *)a3, a2, i);
LABEL_50:
      v6 = *((_QWORD *)a2 + 4);
    }
  }
  if ((char)v41 < 0)
    operator delete(v40[0]);
  if ((char)v43 < 0)
    operator delete(v42[0]);
}

void sub_191640EA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  uint64_t v37;

  if (*(char *)(v37 - 145) < 0)
    operator delete(*(void **)(v37 - 168));
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<Espresso::guard_block_with_if (std::shared_ptr<Espresso::net> &,std::string const&)::$_0,std::allocator<Espresso::guard_block_with_if (std::shared_ptr<Espresso::net> &,std::string const&)::$_0>,void ()(Espresso::net&,Espresso::sequential_builder &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN8Espresso19guard_block_with_ifERNSt3__110shared_ptrINS_3netEEERKNS0_12basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<Espresso::guard_block_with_if (std::shared_ptr<Espresso::net> &,std::string const&)::$_0,std::allocator<Espresso::guard_block_with_if (std::shared_ptr<Espresso::net> &,std::string const&)::$_0>,void ()(Espresso::net&,Espresso::sequential_builder &)>::target_type()
{
}

void std::__function::__func<Espresso::transform_consts_to_globals(Espresso::net &,std::vector<std::string> const&)::$_0,std::allocator<Espresso::transform_consts_to_globals(Espresso::net &,std::vector<std::string> const&)::$_0>,void ()(Espresso::net &,Espresso::sequential_builder &)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

__n128 std::__function::__func<Espresso::transform_consts_to_globals(Espresso::net &,std::vector<std::string> const&)::$_0,std::allocator<Espresso::transform_consts_to_globals(Espresso::net &,std::vector<std::string> const&)::$_0>,void ()(Espresso::net &,Espresso::sequential_builder &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E2DB1D98;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<Espresso::transform_consts_to_globals(Espresso::net &,std::vector<std::string> const&)::$_0,std::allocator<Espresso::transform_consts_to_globals(Espresso::net &,std::vector<std::string> const&)::$_0>,void ()(Espresso::net &,Espresso::sequential_builder &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DB1D98;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<Espresso::transform_consts_to_globals(Espresso::net &,std::vector<std::string> const&)::$_0,std::allocator<Espresso::transform_consts_to_globals(Espresso::net &,std::vector<std::string> const&)::$_0>,void ()(Espresso::net &,Espresso::sequential_builder &)>::operator()(_QWORD *a1, Espresso::net *a2, uint64_t *a3)
{
  std::string **v5;
  std::string *v6;
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  const void *v14;
  _QWORD *v15;
  _QWORD *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  __int128 v25;
  int v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  __int128 v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  std::string *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t *v71;
  std::string v73;
  uint64_t v74[2];
  __int128 v75;
  std::string::size_type v76;
  uint64_t v77[2];
  uint64_t v78;
  std::__shared_weak_count *v79;
  __int128 v80;
  int v81;
  int v82;
  __int128 v83;
  __int128 __p;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  std::__split_buffer<std::string> __v;

  v5 = (std::string **)a1[1];
  v6 = *v5;
  v71 = (uint64_t *)v5[1];
  if (*v5 != (std::string *)v71)
  {
    do
    {
      if (!std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>((_QWORD *)(a1[2] + 16), (unsigned __int8 *)v6))
      {
        if (SHIBYTE(v6->__r_.__value_.__r.__words[2]) < 0)
          v6 = (std::string *)v6->__r_.__value_.__r.__words[0];
        *(_QWORD *)&v80 = v6;
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long long &>("Blob %s does not exist", &v80);
      }
      v7 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>((_QWORD *)(a1[2] + 16), (unsigned __int8 *)v6);
      if (!v7)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      v8 = *((int *)v7 + 10);
      v88 = 0;
      v88 = *(_QWORD *)(*(_QWORD *)(a1[2] + 152) + 8 * v8);
      v9 = (uint64_t *)(*((_QWORD *)a2 + 4) + 16 * v88);
      v11 = *v9;
      v10 = (std::__shared_weak_count *)v9[1];
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v13 = __ldxr(p_shared_owners);
        while (__stxr(v13 + 1, p_shared_owners));
      }
      v14 = *(const void **)(v11 + 64);
      if (!v14
      {
        if (SHIBYTE(v6->__r_.__value_.__r.__words[2]) < 0)
          v6 = (std::string *)v6->__r_.__value_.__r.__words[0];
        *(_QWORD *)&v80 = v6;
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long long &>("Blob %s is not a constant", &v80);
      }
      v16 = v15;
      v17 = *(std::__shared_weak_count **)(v11 + 72);
      if (v17)
      {
        v18 = (unint64_t *)&v17->__shared_owners_;
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 1, v18));
      }
      v20 = v15[43];
      if (v20 && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v20 + 32))(v20))
      {
        v40 = v16[43];
        v22 = *(_QWORD *)(v40 + 160);
        v21 = *(std::__shared_weak_count **)(v40 + 168);
        if (v21)
        {
          v41 = (unint64_t *)&v21->__shared_owners_;
          do
            v42 = __ldxr(v41);
          while (__stxr(v42 + 1, v41));
        }
      }
      else
      {
        v21 = 0;
        v22 = 0;
      }
      Espresso::abstract_blob_container::make((uint64_t)(v16 + 1), (int *)(v11 + 8), (unsigned int *)(v11 + 12), &v86);
      v23 = (*(uint64_t (**)(_QWORD *))(*v16 + 384))(v16);
      v24 = *(_DWORD *)(v23 + 16);
      v25 = *(_OWORD *)v23;
      v85 = 0;
      v83 = 0u;
      __p = 0u;
      v80 = v25;
      v26 = *(_DWORD *)(v23 + 20);
      v81 = v24;
      v82 = v26;
      v78 = 0;
      v79 = 0;
      (*(void (**)(uint64_t, __int128 *, uint64_t *))(*(_QWORD *)v86 + 16))(v86, &v80, &v78);
      v27 = v79;
      if (v79)
      {
        v28 = (unint64_t *)&v79->__shared_owners_;
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
      v30 = v86;
      v31 = (std::__shared_weak_count *)v87;
      if (v87)
      {
        v32 = (unint64_t *)(v87 + 8);
        do
          v33 = __ldxr(v32);
        while (__stxr(v33 + 1, v32));
      }
      v77[0] = v22;
      v77[1] = (uint64_t)v21;
      if (v21)
      {
        v34 = (unint64_t *)&v21->__shared_owners_;
        do
          v35 = __ldxr(v34);
        while (__stxr(v35 + 1, v34));
      }
      Espresso::sync_copy_from_host(v30, v31, v77);
      if (!v21)
        goto LABEL_30;
      v36 = (unint64_t *)&v21->__shared_owners_;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
        if (!v31)
          goto LABEL_40;
      }
      else
      {
LABEL_30:
        if (!v31)
          goto LABEL_40;
      }
      v38 = (unint64_t *)&v31->__shared_owners_;
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
LABEL_40:
      v43 = a1[3];
      v44 = (std::__shared_weak_count *)v87;
      v74[0] = v86;
      v74[1] = v87;
      if (v87)
      {
        v45 = (unint64_t *)(v87 + 8);
        do
          v46 = __ldxr(v45);
        while (__stxr(v46 + 1, v45));
      }
      if (SHIBYTE(v6->__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(&v73, v6->__r_.__value_.__l.__data_, v6->__r_.__value_.__l.__size_);
      }
      else
      {
        v47 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
        v73.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v73.__r_.__value_.__l.__data_ = v47;
      }
      Espresso::sequential_builder::load_global_op(v6, &v73, a3, v74, (uint64_t)&v75);
      v48 = *(_QWORD *)(v43 + 16);
      v49 = *(_QWORD *)(v43 + 8);
      if (v49 >= v48)
      {
        v51 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v49 - *(_QWORD *)v43) >> 3);
        v52 = v51 + 1;
        if (v51 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v53 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v48 - *(_QWORD *)v43) >> 3);
        if (2 * v53 > v52)
          v52 = 2 * v53;
        if (v53 >= 0x555555555555555)
          v54 = 0xAAAAAAAAAAAAAAALL;
        else
          v54 = v52;
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)(v43 + 16);
        if (v54)
          v54 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v54);
        else
          v55 = 0;
        v56 = (std::string *)(v54 + 24 * v51);
        __v.__first_ = (std::__split_buffer<std::string>::pointer)v54;
        __v.__begin_ = v56;
        __v.__end_cap_.__value_ = (std::string *)(v54 + 24 * v55);
        *(_OWORD *)&v56->__r_.__value_.__l.__data_ = v75;
        v56->__r_.__value_.__r.__words[2] = v76;
        v75 = 0uLL;
        v76 = 0;
        __v.__end_ = v56 + 1;
        std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)v43, &__v);
        v50 = *(_QWORD *)(v43 + 8);
        std::__split_buffer<std::string>::~__split_buffer(&__v);
      }
      else
      {
        *(_OWORD *)v49 = v75;
        *(_QWORD *)(v49 + 16) = v76;
        v76 = 0;
        v75 = 0uLL;
        v50 = v49 + 24;
        *(_QWORD *)(v43 + 8) = v49 + 24;
      }
      *(_QWORD *)(v43 + 8) = v50;
      if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v73.__r_.__value_.__l.__data_);
        if (!v44)
          goto LABEL_66;
      }
      else if (!v44)
      {
        goto LABEL_66;
      }
      v57 = (unint64_t *)&v44->__shared_owners_;
      do
        v58 = __ldaxr(v57);
      while (__stlxr(v58 - 1, v57));
      if (!v58)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
LABEL_66:
      std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>(a1[4], &v88, &v88);
      if ((_QWORD)__p)
      {
        *((_QWORD *)&__p + 1) = __p;
        operator delete((void *)__p);
      }
      v59 = (std::__shared_weak_count *)v87;
      if (!v87)
        goto LABEL_72;
      v60 = (unint64_t *)(v87 + 8);
      do
        v61 = __ldaxr(v60);
      while (__stlxr(v61 - 1, v60));
      if (!v61)
      {
        ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
        std::__shared_weak_count::__release_weak(v59);
        if (!v21)
          goto LABEL_78;
      }
      else
      {
LABEL_72:
        if (!v21)
          goto LABEL_78;
      }
      v62 = (unint64_t *)&v21->__shared_owners_;
      do
        v63 = __ldaxr(v62);
      while (__stlxr(v63 - 1, v62));
      if (!v63)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
      if (!v17)
        goto LABEL_82;
LABEL_78:
      v64 = (unint64_t *)&v17->__shared_owners_;
      do
        v65 = __ldaxr(v64);
      while (__stlxr(v65 - 1, v64));
      if (!v65)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
        if (v10)
        {
LABEL_83:
          v66 = (unint64_t *)&v10->__shared_owners_;
          do
            v67 = __ldaxr(v66);
          while (__stlxr(v67 - 1, v66));
          if (!v67)
          {
            ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
            std::__shared_weak_count::__release_weak(v10);
          }
        }
      }
      else
      {
LABEL_82:
        if (v10)
          goto LABEL_83;
      }
      ++v6;
    }
    while (v6 != (std::string *)v71);
  }
  v69 = *((_QWORD *)a2 + 4);
  v68 = *((_QWORD *)a2 + 5);
  if (v68 != v69)
  {
    v70 = 0;
    do
    {
      if (!std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::find<unsigned long>((_QWORD *)a1[4], v70))
      {
        Espresso::sequential_builder::add_layer_from_network((Espresso::sequential_builder *)a3, a2, v70);
        v69 = *((_QWORD *)a2 + 4);
        v68 = *((_QWORD *)a2 + 5);
      }
      ++v70;
    }
    while (v70 < (v68 - v69) >> 4);
  }
}

void sub_191641628(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35)
{
  std::__shared_weak_count *v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  std::__shared_weak_count *v38;
  uint64_t v39;
  unint64_t *p_shared_owners;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;

  if (a24 < 0)
    operator delete(__p);
  if (a16 < 0)
    operator delete(a11);
  if (v38)
  {
    p_shared_owners = (unint64_t *)&v38->__shared_owners_;
    do
      v42 = __ldaxr(p_shared_owners);
    while (__stlxr(v42 - 1, p_shared_owners));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  if (a34)
    operator delete(a34);
  v43 = *(std::__shared_weak_count **)(v39 - 144);
  if (v43)
  {
    v44 = (unint64_t *)&v43->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  if (v37)
  {
    v46 = (unint64_t *)&v37->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  if (v36)
  {
    v48 = (unint64_t *)&v36->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  if (v35)
  {
    v50 = (unint64_t *)&v35->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<Espresso::transform_consts_to_globals(Espresso::net &,std::vector<std::string> const&)::$_0,std::allocator<Espresso::transform_consts_to_globals(Espresso::net &,std::vector<std::string> const&)::$_0>,void ()(Espresso::net &,Espresso::sequential_builder &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN8Espresso27transform_consts_to_globalsERNS_3netERKNSt3__16vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<Espresso::transform_consts_to_globals(Espresso::net &,std::vector<std::string> const&)::$_0,std::allocator<Espresso::transform_consts_to_globals(Espresso::net &,std::vector<std::string> const&)::$_0>,void ()(Espresso::net &,Espresso::sequential_builder &)>::target_type()
{
}

void Espresso::convolution_grad_kernel_cpu::~convolution_grad_kernel_cpu(Espresso::convolution_grad_kernel_cpu *this)
{
  void **v2;

  *(_QWORD *)this = off_1E2D9DD68;
  v2 = (void **)((char *)this + 280);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v2);
  Espresso::base_kernel::~base_kernel(this);
}

{
  void **v2;

  *(_QWORD *)this = off_1E2D9DD68;
  v2 = (void **)((char *)this + 280);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v2);
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::convolution_grad_kernel_cpu::__launch(int32x2_t *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  void *v5;
  std::__shared_weak_count *v6;
  int32x2_t *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  std::__shared_weak_count *v13;
  int32x2_t *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD *v21;
  int32x2_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  int32x2_t v28;
  int32x2_t v29;
  int8x8_t v30;
  int8x8_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  int32x2_t v40;
  void *v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t *v48;
  __int32 v49;
  int v50;
  int32x2_t *v51;
  int v52;
  int v53;
  __int32 v54;
  int v55;
  int __ldc;
  int v57;
  int32x2_t *v58;
  uint64_t v59;
  const float *__B;
  const float *v61;
  uint64_t v62;
  int v63;
  int v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::runtime_error *exception;
  int v81;
  uint64_t v82;
  int v83;
  const float *v84;
  uint64_t v85;
  Espresso *v87;
  int8x8_t v88;
  uint64_t v89;
  std::__shared_weak_count *v90;
  void *v91;
  std::__shared_weak_count *v92;
  uint64_t v93;
  std::__shared_weak_count *v94;
  uint64_t v95;
  std::__shared_weak_count *v96;
  int32x2_t *v97;
  std::__shared_weak_count *v98;
  int32x2_t *v99;
  std::__shared_weak_count *v100;

  v5 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a3, a3[1], 0);
  if (v5)
  {
    v7 = (int32x2_t *)*((_QWORD *)v5 + 20);
    v6 = (std::__shared_weak_count *)*((_QWORD *)v5 + 21);
    v99 = v7;
    v100 = v6;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
  }
  else
  {
    v7 = 0;
    v99 = 0;
    v100 = 0;
  }
  v10 = *a4;
  v11 = a4[1];
  v12 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, v11, 0);
  if (v12)
  {
    v14 = (int32x2_t *)*((_QWORD *)v12 + 20);
    v13 = (std::__shared_weak_count *)*((_QWORD *)v12 + 21);
    v97 = v14;
    v98 = v13;
    if (v13)
    {
      v15 = (unint64_t *)&v13->__shared_owners_;
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
      v10 = *a4;
      v11 = a4[1];
    }
  }
  else
  {
    v14 = 0;
    v97 = 0;
    v98 = 0;
  }
  v17 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(v10, v11, 2);
  if (v17)
  {
    v18 = (std::__shared_weak_count *)v17[21];
    v95 = v17[20];
    v96 = v18;
    if (v18)
    {
      v19 = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
      v10 = *a4;
      v11 = a4[1];
    }
  }
  else
  {
    v95 = 0;
    v96 = 0;
  }
  v21 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(v10, v11, 3);
  if (v21)
  {
    v23 = (std::__shared_weak_count *)v21[21];
    v93 = v21[20];
    v94 = v23;
    if (v23)
    {
      v24 = (unint64_t *)&v23->__shared_owners_;
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 1, v24));
    }
  }
  else
  {
    v93 = 0;
    v94 = 0;
  }
  LODWORD(v26) = a1[52].i32[1];
  if ((int)v26 <= 1)
    v26 = 1;
  else
    v26 = v26;
  v85 = v26;
  v27 = a1[47].i16[0];
  switch(v27)
  {
    case 4:
      goto LABEL_31;
    case 2:
      v31 = 0;
      break;
    case 1:
LABEL_31:
      v28.i32[0] = a1[49].i16[2];
      v28.i32[1] = a1[49].i16[3];
      v29 = vmax_s32(vsub_s32(vmla_s32(a1[44], vadd_s32(v14[1], (int32x2_t)-1), v28), v7[1]), 0);
      v30 = (int8x8_t)vshr_n_u32((uint32x2_t)v29, 1uLL);
      v31 = vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(a1[47].u16[0] == 1), 0x1FuLL)), v30, (int8x8_t)vsub_s32(v29, (int32x2_t)v30));
      break;
    default:
      v22.i16[0] = a1[48].i16[0];
      v22.i16[2] = a1[48].i16[2];
      v31 = (int8x8_t)vshr_n_s32(vshl_n_s32(v22, 0x10uLL), 0x10uLL);
      break;
  }
  v88 = v31;
  v32 = a4[1];
  if ((unint64_t)(v32 - *a4) >= 0x11)
  {
    v33 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, v32, 1);
    v34 = *((_QWORD *)v33 + 20);
    v35 = (std::__shared_weak_count *)*((_QWORD *)v33 + 21);
    if (!v35)
    {
      v84 = *(const float **)(v34 + 24);
      goto LABEL_56;
    }
    v36 = (unint64_t *)&v35->__shared_owners_;
    do
      v37 = __ldxr(v36);
    while (__stxr(v37 + 1, v36));
    v84 = *(const float **)(v34 + 24);
    v38 = (unint64_t *)&v35->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    goto LABEL_53;
  }
  v40 = a1[35];
  if (*(_QWORD *)&v40 == *(_QWORD *)&a1[36])
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "associated_forward_kernel not configured");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v41 = **(void ***)&v40;
  v42 = *(std::__shared_weak_count **)(*(_QWORD *)&v40 + 8);
  v91 = **(void ***)&v40;
  v92 = v42;
  if (v42)
  {
    v43 = (unint64_t *)&v42->__shared_owners_;
    do
      v44 = __ldxr(v43);
    while (__stxr(v44 + 1, v43));
  }
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v89, v41, v42);
  v45 = v90;
  v84 = *(const float **)(v89 + 24);
  if (v90)
  {
    v46 = (unint64_t *)&v90->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  v35 = v92;
  if (v92)
  {
    v48 = (unint64_t *)&v92->__shared_owners_;
    do
      v39 = __ldaxr(v48);
    while (__stlxr(v39 - 1, v48));
LABEL_53:
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
LABEL_56:
  v49 = a1[43].i32[0];
  v50 = a1[44].i32[0] * a1[43].i32[1] * a1[44].i32[1];
  v51 = v97;
  v52 = v97[1].i32[0];
  v53 = v97[1].i32[1];
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,3>,std::allocator<Espresso::blob<float,3>>,int &,int &,int &,int &,void>(&v91, v52, v53, v50, 1);
  if (v51[2].i32[1] >= 1)
  {
    v54 = 0;
    v55 = v49 / (int)v85;
    __ldc = v53 * v52;
    v57 = v50 / (int)v85;
    v83 = v88.i32[0];
    v58 = v99;
    do
    {
      v59 = 0;
      v87 = (Espresso *)(*(_QWORD *)&v58[3] + 4 * v58[1].i32[0] * v54 * v58[1].i32[1] * v58[2].i32[0]);
      v88.i32[0] = v54;
      __B = (const float *)(*(_QWORD *)&v51[3] + 4 * v51[1].i32[1] * v51[2].i32[0] * v51[1].i32[0] * v54);
      v61 = v84;
      v62 = v85;
      do
      {
        cblas_sgemm(CblasRowMajor, CblasTrans, CblasNoTrans, v57, __ldc, v55, 1.0, v61, v57, __B, __ldc, 0.0, (float *)(*((_QWORD *)v91 + 3) + v59), __ldc);
        v59 += 4 * __ldc * v57;
        __B += __ldc * v55;
        v61 += v57 * v55;
        --v62;
      }
      while (v62);
      v58 = v99;
      v51 = v97;
      v63 = a1[50].i16[0];
      if (v63 <= 1)
        v63 = 1;
      v64 = a1[50].i16[1];
      if (v64 <= 1)
        v64 = 1;
      Espresso::colbuffer2image(v87, *((float **)v91 + 3), (const float *)a1[43].u32[1], v99[1].i32[1], v99[1].i32[0], v97[1].i32[1], v97[1].i32[0], a1[44].i32[1], a1[44].i32[0], v88.i32[1], v83, a1[49].i16[2], a1[49].i16[3], v63, v64, v81, v82, SHIDWORD(v82));
      v54 = v88.i32[0] + 1;
    }
    while (v88.i32[0] + 1 < v51[2].i32[1]);
  }
  v65 = v92;
  if (v92)
  {
    v66 = (unint64_t *)&v92->__shared_owners_;
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  v68 = v94;
  if (v94)
  {
    v69 = (unint64_t *)&v94->__shared_owners_;
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
  v71 = v96;
  if (v96)
  {
    v72 = (unint64_t *)&v96->__shared_owners_;
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  v74 = v98;
  if (v98)
  {
    v75 = (unint64_t *)&v98->__shared_owners_;
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
  v77 = v100;
  if (v100)
  {
    v78 = (unint64_t *)&v100->__shared_owners_;
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 - 1, v78));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }
}

void sub_191641F54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  uint64_t v26;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a26);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v26 - 136);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v26 - 120);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v26 - 104);
  _Unwind_Resume(a1);
}

uint64_t Espresso::convolution_grad_kernel_cpu::clear_weights(Espresso::convolution_grad_kernel_cpu *this)
{
  uint64_t result;
  uint64_t v3;

  result = *((_QWORD *)this + 36);
  v3 = *((_QWORD *)this + 35);
  while (result != v3)
    result = std::shared_ptr<void>::~shared_ptr[abi:ne180100](result - 16);
  *((_QWORD *)this + 36) = v3;
  return result;
}

void Espresso::convolution_weights_grad_kernel_cpu::~convolution_weights_grad_kernel_cpu(Espresso::convolution_weights_grad_kernel_cpu *this)
{
  void **v2;

  *(_QWORD *)this = off_1E2D9DD68;
  v2 = (void **)((char *)this + 280);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v2);
  Espresso::base_kernel::~base_kernel(this);
}

{
  void **v2;

  *(_QWORD *)this = off_1E2D9DD68;
  v2 = (void **)((char *)this + 280);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v2);
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::convolution_weights_grad_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  _QWORD *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  signed int v36;
  BOOL v37;
  signed int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  signed int v43;
  signed int v44;
  uint64_t v45;
  int __ldb;
  int __ldc;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _DWORD *v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  int v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _DWORD *v66;
  uint64_t v67;
  _BOOL4 v69;
  uint64_t v70;
  _DWORD *v71;
  uint64_t v72;
  _BOOL4 v73;
  int v74;
  uint64_t v76;
  int v77;
  const float *v78;
  float *__C;
  uint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  int v93;
  uint64_t v94;
  int __M;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  int v101;
  int v102;
  uint64_t v103;
  int v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  std::__shared_weak_count *v113;
  uint64_t v114;
  std::__shared_weak_count *v115;
  uint64_t v116;
  std::__shared_weak_count *v117;
  uint64_t v118;
  std::__shared_weak_count *v119;

  v6 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a3, a3[1], 0);
  if (v6)
  {
    v8 = v6[20];
    v7 = (std::__shared_weak_count *)v6[21];
    v118 = v8;
    v119 = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
    }
  }
  else
  {
    v8 = 0;
    v118 = 0;
    v119 = 0;
  }
  v11 = *a4;
  v12 = a4[1];
  v13 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, v12, 0);
  if (v13)
  {
    v15 = v13[20];
    v14 = (std::__shared_weak_count *)v13[21];
    v116 = v15;
    v117 = v14;
    if (v14)
    {
      v16 = (unint64_t *)&v14->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
      v11 = *a4;
      v12 = a4[1];
    }
  }
  else
  {
    v15 = 0;
    v116 = 0;
    v117 = 0;
  }
  v18 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(v11, v12, 1);
  if (v18)
  {
    v19 = (std::__shared_weak_count *)v18[21];
    v94 = v18[20];
    v114 = v94;
    v115 = v19;
    if (v19)
    {
      v20 = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
  }
  else
  {
    v94 = 0;
    v114 = 0;
    v115 = 0;
  }
  LODWORD(v22) = *(_DWORD *)(a1 + 420);
  if ((int)v22 <= 1)
    v22 = 1;
  else
    v22 = v22;
  v97 = v22;
  v98 = v15;
  v23 = *(_DWORD *)(v15 + 8);
  v24 = *(_DWORD *)(v15 + 12);
  v25 = *(_DWORD *)(a1 + 352);
  v26 = *(_DWORD *)(a1 + 356);
  v27 = *(__int16 *)(a1 + 376);
  switch(v27)
  {
    case 4:
      goto LABEL_25;
    case 2:
      v38 = 0;
      v36 = 0;
      break;
    case 1:
LABEL_25:
      v28 = v26 + (v24 - 1) * *(__int16 *)(a1 + 398) - *(_DWORD *)(v94 + 12);
      v29 = v25 + (v23 - 1) * *(__int16 *)(a1 + 396) - *(_DWORD *)(v94 + 8);
      v30 = v28 & ~(v28 >> 31);
      v31 = v29 & ~(v29 >> 31);
      v32 = *(unsigned __int16 *)(a1 + 376);
      v33 = v31 >> 1;
      v34 = v31 - (v31 >> 1);
      v35 = v30 >> 1;
      v36 = v30 - (v30 >> 1);
      v37 = v32 == 1;
      if (v32 == 1)
        v38 = v33;
      else
        v38 = v34;
      if (v37)
        v36 = v35;
      break;
    default:
      v38 = *(__int16 *)(a1 + 384);
      v36 = *(__int16 *)(a1 + 388);
      break;
  }
  v39 = *(_DWORD *)(a1 + 344);
  v40 = *(_DWORD *)(a1 + 348);
  v41 = v26 * v25;
  v42 = v26 * v25 * v40;
  if (v38 <= v36)
    v38 = v36;
  if (v25 == 1)
    v43 = 0;
  else
    v43 = v38;
  v105 = v43;
  if (v26 == 1)
    v44 = 0;
  else
    v44 = v38;
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,3>,std::allocator<Espresso::blob<float,3>>,int &,int &,int &,int &,void>(&v112, v23, v24, v41 * v40, 1);
  v45 = 0;
  __ldb = v24 * v23;
  __ldc = v42 / (int)v97;
  __M = v39 / (int)v97;
  v96 = *(void **)(v8 + 24);
  v48 = *(int *)(v8 + 8);
  do
  {
    v48 *= *(int *)(v8 + 12 + v45);
    v45 += 4;
  }
  while (v45 != 12);
  v49 = v98;
  if (v48)
    bzero(v96, 4 * v48);
  if (*(int *)(v98 + 20) >= 1)
  {
    v104 = 0;
    v93 = 2 * v44;
    v110 = 4 * v42 / (int)v97 * (v39 / (int)v97);
    v111 = v112;
    v108 = 4 * v39 / (int)v97 * __ldb;
    v109 = 4 * v42 / (int)v97 * __ldb;
    v50 = -(uint64_t)v44;
    v99 = a1;
    do
    {
      v103 = *(_QWORD *)(v49 + 24);
      v101 = *(_DWORD *)(v49 + 12);
      v102 = *(_DWORD *)(v49 + 8);
      v100 = *(_DWORD *)(v49 + 16);
      v51 = *(_DWORD *)(a1 + 356);
      v52 = *(_DWORD *)(a1 + 352);
      v107 = (v52 * v51 * *(_DWORD *)(a1 + 348));
      if ((int)v107 > 0)
      {
        v53 = 0;
        v55 = *(int *)(v94 + 8);
        v54 = *(int *)(v94 + 12);
        v56 = *(_DWORD **)(v111 + 24);
        v57 = *(__int16 *)(v99 + 396);
        v58 = *(__int16 *)(v99 + 398);
        v59 = ((int)v54 + v93 - v51) / (int)v58;
        v60 = (v59 + 1);
        v61 = ((int)v55 + 2 * v105 - v52) / (int)v57;
        v62 = v61 + 1;
        v106 = *(_QWORD *)(v94 + 24) + 4 * (int)v54 * *(_DWORD *)(v94 + 16) * (int)v55 * v104;
        do
        {
          if ((v59 & 0x80000000) == 0)
          {
            v63 = 0;
            v64 = (int)v53 - (v105 + (int)v53 / v52 * v52);
            v65 = v106 + 4 * v55 * (v50 + (int)v53 / v52 % v51 + (int)v53 / (v52 * v51) * (int)v54) + 4 * v64;
            v66 = v56;
            do
            {
              v67 = v50 + v63 * v58 + (int)v53 / v52 % v51;
              v69 = v67 >= 0 && v67 < v54;
              if ((v61 & 0x80000000) == 0)
              {
                v70 = 0;
                v71 = v66;
                v72 = (v61 + 1);
                do
                {
                  v73 = v64 + v70 >= 0 && v69;
                  v74 = 0;
                  if (v73 && v64 + v70 < v55)
                    v74 = *(_DWORD *)(v65 + 4 * v70);
                  *v71++ = v74;
                  v70 += v57;
                  --v72;
                }
                while (v72);
              }
              ++v63;
              v65 += 4 * (int)v58 * (uint64_t)(int)v55;
              v66 += v62;
            }
            while (v63 != v60);
          }
          ++v53;
          v56 += (int)v60 * (uint64_t)v62;
        }
        while (v53 != v107);
      }
      v76 = 0;
      v77 = v104;
      v78 = (const float *)(v103 + 4 * v101 * v100 * v102 * v104);
      __C = (float *)v96;
      v80 = v97;
      v49 = v98;
      do
      {
        cblas_sgemm(CblasRowMajor, CblasNoTrans, CblasTrans, __M, __ldc, __ldb, 1.0, v78, __ldb, (const float *)(*(_QWORD *)(v111 + 24) + v76), __ldb, 1.0, __C, __ldc);
        __C = (float *)((char *)__C + v110);
        v76 += v109;
        v78 = (const float *)((char *)v78 + v108);
        --v80;
      }
      while (v80);
      ++v104;
      a1 = v99;
    }
    while (v77 + 1 < *(_DWORD *)(v98 + 20));
  }
  v81 = v113;
  if (v113)
  {
    v82 = (unint64_t *)&v113->__shared_owners_;
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
  v84 = v115;
  if (v115)
  {
    v85 = (unint64_t *)&v115->__shared_owners_;
    do
      v86 = __ldaxr(v85);
    while (__stlxr(v86 - 1, v85));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
    }
  }
  v87 = v117;
  if (v117)
  {
    v88 = (unint64_t *)&v117->__shared_owners_;
    do
      v89 = __ldaxr(v88);
    while (__stlxr(v89 - 1, v88));
    if (!v89)
    {
      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
      std::__shared_weak_count::__release_weak(v87);
    }
  }
  v90 = v119;
  if (v119)
  {
    v91 = (unint64_t *)&v119->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
}

void sub_19164266C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1 - 136);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1 - 120);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1 - 104);
  _Unwind_Resume(a1);
}

void Espresso::pool_grad_kernel_cpu::~pool_grad_kernel_cpu(Espresso::pool_grad_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::pool_grad_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  void *v4;
  std::__shared_weak_count *v5;
  int32x2_t *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  void *v15;
  __n128 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  int32x2_t v22;
  int8x8_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unsigned __int32 v27;
  int32x2_t v28;
  __int32 v29;
  __int32 v30;
  __int32 v31;
  int32x2_t v32;
  __int32 v33;
  __int32 v34;
  __int32 v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  int v46;
  __int32 v47;
  __int32 v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  uint64_t v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  int v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  uint64_t v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  float v94;
  int v95;
  uint64_t v96;
  int v97;
  int v98;
  uint64_t v99;
  int v101;
  unint64_t *v102;
  unint64_t v103;
  unint64_t *v104;
  unint64_t v105;
  unint64_t *v106;
  unint64_t v107;
  unint64_t *v108;
  unint64_t v109;
  std::__shared_weak_count *v110;
  std::__shared_weak_count *v111;
  std::__shared_weak_count *v112;
  int32x2_t *v114;
  int32x2_t *v115;
  __int32 v116;
  int v117;
  int v118;
  int v119;
  std::__shared_weak_count *v120;
  uint64_t v121;
  __int32 v122;
  int v123;
  uint64_t v124;
  int v125;
  int v126;
  uint64_t v128;
  int v129;
  unsigned __int32 v130;
  int v131;
  uint64_t v132;

  v4 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a3, a3[1], 0);
  if (v4)
  {
    v6 = (int32x2_t *)*((_QWORD *)v4 + 20);
    v5 = (std::__shared_weak_count *)*((_QWORD *)v4 + 21);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v9 = *a4;
  v10 = a4[1];
  v11 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, v10, 1);
  if (v11)
  {
    v12 = (std::__shared_weak_count *)v11[21];
    if (v12)
    {
      v13 = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
      v9 = *a4;
      v10 = a4[1];
    }
  }
  else
  {
    v12 = 0;
  }
  v15 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(v9, v10, 0);
  if (v15)
  {
    v17 = (std::__shared_weak_count *)*((_QWORD *)v15 + 21);
    v115 = (int32x2_t *)*((_QWORD *)v15 + 20);
    if (v17)
    {
      v18 = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
  }
  else
  {
    v115 = 0;
    v17 = 0;
  }
  v20 = v6[1].i32[0];
  v21 = *(__int16 *)(a1 + 316);
  v111 = v12;
  v112 = v5;
  v110 = v17;
  if (v21 != 4)
  {
    if (v21 == 2)
    {
      v16 = 0uLL;
      goto LABEL_25;
    }
    if (v21 != 1)
    {
      v16.n128_u16[0] = *(_WORD *)(a1 + 324);
      v16.n128_u16[2] = *(_WORD *)(a1 + 328);
      v16.n128_u64[0] = (unint64_t)vshr_n_s32(vshl_n_s32((int32x2_t)v16.n128_u64[0], 0x10uLL), 0x10uLL);
      goto LABEL_25;
    }
  }
  v22 = vmax_s32(vmla_s32(vsub_s32(*(int32x2_t *)(a1 + 284), v6[1]), vadd_s32(v115[1], (int32x2_t)-1), *(int32x2_t *)(a1 + 296)), 0);
  v23 = (int8x8_t)vshr_n_u32((uint32x2_t)v22, 1uLL);
  v16.n128_u64[0] = (unint64_t)vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(*(unsigned __int16 *)(a1 + 316) == 1), 0x1FuLL)), v23, (int8x8_t)vsub_s32(v22, (int32x2_t)v23));
LABEL_25:
  v24 = 0;
  v118 = v6[2].i32[0];
  while (1)
  {
    v25 = 0;
    v26 = v20;
    do
      v26 *= v6[1].i32[++v25];
    while (v25 != 3);
    if (v26 <= v24)
      break;
    *(_DWORD *)(*(_QWORD *)&v6[3] + 4 * v24++) = 0;
  }
  if (v6[2].i32[1] >= 1)
  {
    v116 = 0;
    v27 = v16.n128_u32[0];
    v126 = -v16.n128_u32[0];
    v130 = v16.n128_u32[1];
    v117 = -v16.n128_u32[1];
    v114 = v6;
    do
    {
      v28 = v115[3];
      v29 = v115[1].i32[0];
      v30 = v115[1].i32[1];
      v31 = v115[2].i32[0];
      v32 = v6[3];
      v33 = v6[1].i32[0];
      v34 = v6[1].i32[1];
      v35 = v6[2].i32[0];
      v36 = *(_DWORD *)(a1 + 280);
      if (v36 == 2)
      {
        printf("Grad of L2 pooling not implemented, %s:%d\n", "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/KernelsCPU_Backward.mm", 328);
        v36 = *(_DWORD *)(a1 + 280);
      }
      v37 = *(_QWORD *)&v28 + 4 * v29 * v116 * v30 * v31;
      switch(v36)
      {
        case 2:
          goto LABEL_37;
        case 1:
          v65 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, a4[1], 1);
          v66 = v65[20];
          v67 = (std::__shared_weak_count *)v65[21];
          if (v67)
          {
            v68 = (unint64_t *)&v67->__shared_owners_;
            do
              v69 = __ldxr(v68);
            while (__stxr(v69 + 1, v68));
            v120 = v67;
          }
          else
          {
            v120 = 0;
          }
          if (v118 >= 1)
          {
            v70 = 0;
            v71 = *(_QWORD *)&v32 + 4 * v33 * v116 * v34 * v35;
            v72 = *(int *)(v66 + 8);
            v73 = *(_DWORD *)(v66 + 12) * v72;
            v75 = v115[1].u32[0];
            v74 = v115[1].u32[1];
            v76 = v114[1].i32[0];
            v77 = v114[1].i32[1];
            v132 = *(_QWORD *)(v66 + 24) + 4 * v73 * *(_DWORD *)(v66 + 16) * v116;
            v78 = v115[1].i32[0];
            v121 = 4 * v73;
            v129 = *(_DWORD *)(v66 + 8);
            v79 = 4 * v72;
            do
            {
              v125 = v70;
              if ((int)v74 >= 1)
              {
                v80 = 0;
                v81 = *(_DWORD *)(a1 + 300);
                v82 = *(_DWORD *)(a1 + 288);
                v83 = v117;
                do
                {
                  v84 = v81 * v80 - v130;
                  if (v84 + v82 >= v77)
                    v85 = v77;
                  else
                    v85 = v84 + v82;
                  if (v78 >= 1)
                  {
                    v86 = 0;
                    v87 = v84 & ~(v84 >> 31);
                    v88 = *(_DWORD *)(a1 + 296);
                    v89 = *(_DWORD *)(a1 + 284);
                    v90 = v126;
                    do
                    {
                      if (v87 >= v85)
                      {
                        v98 = -1;
                        v95 = -1;
                      }
                      else
                      {
                        v91 = v88 * v86 - v27;
                        v92 = v91 + v89;
                        if (v91 + v89 >= v76)
                          v92 = v76;
                        v93 = v91 & ~(v91 >> 31);
                        v94 = 0.0;
                        v95 = -1;
                        v96 = v132 + 4 * v129 * (v83 & ~(v83 >> 31));
                        v97 = v87;
                        v98 = -1;
                        do
                        {
                          v99 = v90 & ~(v90 >> 31);
                          if (v93 < v92)
                          {
                            do
                            {
                              if (*(float *)(v96 + 4 * v99) > v94 || v98 == -1)
                              {
                                v94 = *(float *)(v96 + 4 * v99);
                                v98 = v99;
                                v95 = v97;
                              }
                              ++v99;
                            }
                            while (v99 < v92);
                          }
                          ++v97;
                          v96 += v79;
                        }
                        while (v97 < v85);
                      }
                      v101 = v98 + v95 * v76;
                      v16.n128_f32[0] = *(float *)(v37 + 4 * (v86 + v80 * (int)v75)) + *(float *)(v71 + 4 * v101);
                      *(_DWORD *)(v71 + 4 * v101) = v16.n128_u32[0];
                      ++v86;
                      v90 += v88;
                    }
                    while (v86 != v75);
                  }
                  ++v80;
                  v83 += v81;
                }
                while (v80 != v74);
              }
              v37 += 4 * (int)v75 * (int)v74;
              v71 += 4 * v77 * v76;
              v70 = v125 + 1;
              v132 += v121;
            }
            while (v125 + 1 != v118);
          }
          if (v120)
          {
            v102 = (unint64_t *)&v120->__shared_owners_;
            do
              v103 = __ldaxr(v102);
            while (__stlxr(v103 - 1, v102));
            if (!v103)
            {
              ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
              std::__shared_weak_count::__release_weak(v120);
            }
          }
          break;
        case 0:
LABEL_37:
          if (v118 >= 1)
          {
            v38 = 0;
            v39 = v115[1].u32[0];
            v128 = v115[1].u32[1];
            v40 = v114[1].i32[0];
            v131 = v115[1].i32[0];
            v124 = *(_QWORD *)&v32 + 4 * v34 * v35 * v33 * v116;
            v122 = v114[1].i32[1];
            v41 = 4 * v40;
            do
            {
              v119 = v38;
              if ((int)v128 >= 1)
              {
                v42 = 0;
                v43 = *(_DWORD *)(a1 + 300);
                v123 = *(_DWORD *)(a1 + 288);
                v44 = v117;
                do
                {
                  if (v131 >= 1)
                  {
                    v45 = 0;
                    v46 = v43 * v42 - v130;
                    v47 = v123 + v46;
                    if (v123 + v46 >= (int)(v122 + v130))
                      v47 = v122 + v130;
                    if (v47 >= v122)
                      v48 = v122;
                    else
                      v48 = v47;
                    v49 = v46 & ~(v46 >> 31);
                    v50 = *(_DWORD *)(a1 + 296);
                    v51 = *(_DWORD *)(a1 + 284);
                    v52 = v47 - v46;
                    v53 = *(_DWORD *)(a1 + 308);
                    v54 = v48 - v49;
                    v55 = v48;
                    v56 = v126;
                    do
                    {
                      v57 = v50 * v45 - v27;
                      v58 = v51 + v57;
                      if (v51 + v57 >= (int)(v40 + v27))
                        v58 = v40 + v27;
                      v59 = v57 & ~(v57 >> 31);
                      if (v58 >= (int)v40)
                        v60 = v40;
                      else
                        v60 = v58;
                      v61 = (v58 - v57) * v52;
                      if (v53)
                        v61 = (v60 - v59) * v54;
                      if (v49 < (int)v55)
                      {
                        v16.n128_f32[0] = 1.0 / (float)v61;
                        v62 = v124 + v41 * (v44 & ~(v44 >> 31));
                        v63 = v44 & ~(v44 >> 31);
                        do
                        {
                          v64 = v56 & ~(v56 >> 31);
                          if (v60 > v59)
                          {
                            do
                            {
                              *(float *)(v62 + 4 * v64) = *(float *)(v62 + 4 * v64)
                                                        + (float)(*(float *)(v37 + 4 * (v42 * (int)v39 + v45))
                                                                * v16.n128_f32[0]);
                              ++v64;
                            }
                            while (v64 < v60);
                          }
                          ++v63;
                          v62 += v41;
                        }
                        while (v63 < v55);
                      }
                      ++v45;
                      v56 += v50;
                    }
                    while (v45 != v39);
                  }
                  ++v42;
                  v44 += v43;
                }
                while (v42 != v128);
              }
              v37 += 4 * (int)v39 * (int)v128;
              v38 = v119 + 1;
              v124 += 4 * v122 * (int)v40;
            }
            while (v119 + 1 != v118);
          }
          break;
      }
      v6 = v114;
      ++v116;
    }
    while (v116 < v114[2].i32[1]);
  }
  if (!v110)
    goto LABEL_105;
  v104 = (unint64_t *)&v110->__shared_owners_;
  do
    v105 = __ldaxr(v104);
  while (__stlxr(v105 - 1, v104));
  if (!v105)
  {
    ((void (*)(std::__shared_weak_count *, __n128))v110->__on_zero_shared)(v110, v16);
    std::__shared_weak_count::__release_weak(v110);
    if (!v111)
      goto LABEL_111;
  }
  else
  {
LABEL_105:
    if (!v111)
      goto LABEL_111;
  }
  v106 = (unint64_t *)&v111->__shared_owners_;
  do
    v107 = __ldaxr(v106);
  while (__stlxr(v107 - 1, v106));
  if (!v107)
  {
    ((void (*)(std::__shared_weak_count *, __n128))v111->__on_zero_shared)(v111, v16);
    std::__shared_weak_count::__release_weak(v111);
  }
LABEL_111:
  if (v112)
  {
    v108 = (unint64_t *)&v112->__shared_owners_;
    do
      v109 = __ldaxr(v108);
    while (__stlxr(v109 - 1, v108));
    if (!v109)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v112->__on_zero_shared)(v112, v16);
      std::__shared_weak_count::__release_weak(v112);
    }
  }
}

void Espresso::nonlinearity_grad_cpu::~nonlinearity_grad_cpu(Espresso::nonlinearity_grad_cpu *this)
{
  *(_QWORD *)this = &off_1E2D8C088;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 320);
  Espresso::base_kernel::~base_kernel(this);
}

{
  *(_QWORD *)this = &off_1E2D8C088;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 320);
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::nonlinearity_grad_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  _QWORD *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  float *v32;
  float *v33;
  float *v34;
  float v35;
  float v36;
  float v37;
  float v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  float *v56;
  float *v57;
  float *v58;
  float v59;
  float v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  double v65;
  double v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  float v75;
  float v76;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  float v82;
  float *v83;
  float *v84;
  float *v85;
  float v86;
  float v87;
  float v88;
  float *v89;
  float *v90;
  float *v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float *v99;
  float *v100;
  float v101;
  float *v102;
  float *v103;
  float *v104;
  float v105;
  float v106;
  float v107;
  float *v108;
  float *v109;
  float *v110;
  float v111;
  float v112;
  float v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  float v117;
  float v118;
  vDSP_Length v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  uint64_t v127;
  std::__shared_weak_count *v128;
  uint64_t v129;
  unint64_t *v130;
  unint64_t v131;
  uint64_t v132;
  std::__shared_weak_count *v133;
  uint64_t v134;
  unint64_t *v135;
  unint64_t v136;
  uint64_t v137;
  std::__shared_weak_count *v138;
  uint64_t v139;
  unint64_t *v140;
  unint64_t v141;
  uint64_t v142;
  std::__shared_weak_count *v143;
  uint64_t v144;
  unint64_t *v145;
  unint64_t v146;
  uint64_t v147;
  std::__shared_weak_count *v148;
  uint64_t v149;
  unint64_t *v150;
  unint64_t v151;
  uint64_t v152;
  std::__shared_weak_count *v153;
  uint64_t v154;
  unint64_t *v155;
  unint64_t v156;
  uint64_t v157;
  std::__shared_weak_count *v158;
  uint64_t v159;
  unint64_t *v160;
  unint64_t v161;
  vDSP_Length v162;
  uint64_t v163;
  vDSP_Length v164;
  uint64_t v165;
  vDSP_Length v166;
  float *v167;
  float *v168;
  float *v169;
  uint64_t v170;
  uint64_t v171;
  const float *v172;
  float *v173;
  uint64_t v174;
  uint64_t v175;
  float *v176;
  float *v177;
  float *__E;
  const float *v179;
  float *v180;
  float *v181;
  float *v182;
  BOOL v183;
  std::__shared_weak_count *v184;
  unint64_t *v185;
  unint64_t v186;
  std::__shared_weak_count *v187;
  unint64_t *v188;
  unint64_t v189;
  std::__shared_weak_count *v190;
  unint64_t *v191;
  unint64_t v192;
  std::__shared_weak_count *v193;
  unint64_t *v194;
  unint64_t v195;
  std::__shared_weak_count *v196;
  unint64_t *v197;
  unint64_t v198;
  std::__shared_weak_count *v199;
  unint64_t *v200;
  unint64_t v201;
  std::__shared_weak_count *v202;
  unint64_t *v203;
  unint64_t v204;
  std::__shared_weak_count *v205;
  unint64_t *v206;
  unint64_t v207;
  std::__shared_weak_count *v208;
  unint64_t *v209;
  unint64_t v210;
  unint64_t *v211;
  unint64_t v212;
  unint64_t *v213;
  unint64_t v214;
  unint64_t *v215;
  unint64_t v216;
  unint64_t *v217;
  unint64_t v218;
  std::__shared_weak_count *v219;
  unint64_t *v220;
  unint64_t v221;
  float *__B;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  Espresso *v230;
  vDSP_Length v231;
  uint64_t v232;
  uint64_t __n;
  std::__shared_weak_count *v234;
  std::__shared_weak_count *v235;
  std::__shared_weak_count *v236;
  std::__shared_weak_count *v237;
  vDSP_Length __N[5];
  void *__p;
  void *v240;
  float v241;
  int v242;
  int v243;
  int v244;
  int v245;
  unsigned int v246;
  uint64_t v247;
  std::__shared_weak_count *v248;
  uint64_t v249;
  std::__shared_weak_count *v250;
  uint64_t v251;
  std::__shared_weak_count *v252;
  uint64_t v253;
  std::__shared_weak_count *v254;
  uint64_t v255;
  std::__shared_weak_count *v256;
  uint64_t v257;
  std::__shared_weak_count *v258;
  uint64_t v259;
  std::__shared_weak_count *v260;
  uint64_t v261;
  std::__shared_weak_count *v262;
  uint64_t v263;
  std::__shared_weak_count *v264;
  float __C;
  float v266;
  float v267[3];

  v7 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a3, a3[1], 0);
  if (v7)
  {
    v9 = v7[20];
    v8 = (std::__shared_weak_count *)v7[21];
    v237 = v8;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
  }
  else
  {
    v9 = 0;
    v237 = 0;
  }
  v12 = *a4;
  v13 = a4[1];
  v14 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, v13, 0);
  if (v14)
  {
    v16 = v14[20];
    v15 = (std::__shared_weak_count *)v14[21];
    v236 = v15;
    if (v15)
    {
      v17 = (unint64_t *)&v15->__shared_owners_;
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
      v12 = *a4;
      v13 = a4[1];
    }
  }
  else
  {
    v16 = 0;
    v236 = 0;
  }
  v19 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(v12, v13, 1);
  if (v19)
  {
    v21 = v19[20];
    v20 = (std::__shared_weak_count *)v19[21];
    v235 = v20;
    if (v20)
    {
      v22 = (unint64_t *)&v20->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
      v12 = *a4;
      v13 = a4[1];
    }
  }
  else
  {
    v21 = 0;
    v235 = 0;
  }
  v24 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(v12, v13, 2);
  if (v24)
  {
    v25 = *((_QWORD *)v24 + 20);
    v26 = (std::__shared_weak_count *)*((_QWORD *)v24 + 21);
    v234 = v26;
    if (v26)
    {
      v27 = (unint64_t *)&v26->__shared_owners_;
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
    }
  }
  else
  {
    v26 = 0;
    v25 = 0;
    v234 = 0;
  }
  v29 = 0;
  v30 = *(int *)(v16 + 8);
  do
  {
    v30 *= *(int *)(v16 + 12 + v29);
    v29 += 4;
  }
  while (v29 != 12);
  v31 = *(unsigned int *)(a1 + 280);
  switch((int)v31)
  {
    case 0:
      if (v30)
      {
        v32 = *(float **)(v16 + 24);
        v33 = *(float **)(v21 + 24);
        v34 = *(float **)(v9 + 24);
        do
        {
          v35 = *v32++;
          v36 = v35;
          v37 = *v33++;
          if (v37 <= 0.0)
            v38 = 0.0;
          else
            v38 = 1.0;
          *v34++ = v36 * v38;
          --v30;
        }
        while (v30);
      }
      break;
    case 1:
      if (v30)
      {
        v102 = *(float **)(v25 + 24);
        v103 = *(float **)(v16 + 24);
        v104 = *(float **)(v9 + 24);
        do
        {
          v105 = *v102++;
          v106 = v105;
          v107 = *v103++;
          *v104++ = (float)(1.0 - (float)(v106 * v106)) * v107;
          --v30;
        }
        while (v30);
      }
      break;
    case 3:
      if (v30)
      {
        v83 = *(float **)(v25 + 24);
        v84 = *(float **)(v16 + 24);
        v85 = *(float **)(v9 + 24);
        do
        {
          v86 = *v83++;
          v87 = v86;
          v88 = *v84++;
          *v85++ = (float)(v87 - (float)(v87 * v87)) * v88;
          --v30;
        }
        while (v30);
      }
      break;
    case 6:
      if (v30)
      {
        v99 = *(float **)(v16 + 24);
        v100 = *(float **)(v9 + 24);
        do
        {
          v101 = *v99++;
          *v100++ = v101 * *(float *)(a1 + 284);
          --v30;
        }
        while (v30);
      }
      break;
    case 7:
      v68 = *(float *)(a1 + 288);
      v69 = *(float *)(a1 + 284);
      v70 = (float)-v68 / v69;
      v71 = (float)(1.0 - v68) / v69;
      if (v69 <= 0.0)
      {
        if (v30)
        {
          v114 = 0;
          v115 = *(_QWORD *)(v21 + 24);
          v116 = *(_QWORD *)(v9 + 24);
          do
          {
            v117 = *(float *)(v115 + 4 * v114);
            v118 = 0.0;
            if (v117 > v71 && v117 < v70)
              v118 = *(float *)(*(_QWORD *)(v16 + 24) + 4 * v114) * *(float *)(a1 + 284);
            *(float *)(v116 + 4 * v114++) = v118;
          }
          while (v30 != v114);
        }
      }
      else if (v30)
      {
        v72 = 0;
        v73 = *(_QWORD *)(v21 + 24);
        v74 = *(_QWORD *)(v9 + 24);
        do
        {
          v75 = *(float *)(v73 + 4 * v72);
          v76 = 0.0;
          if (v75 > v70 && v75 < v71)
            v76 = *(float *)(*(_QWORD *)(v16 + 24) + 4 * v72) * *(float *)(a1 + 284);
          *(float *)(v74 + 4 * v72++) = v76;
        }
        while (v30 != v72);
      }
      break;
    case 8:
      if (v30)
      {
        v78 = 0;
        v79 = *(_QWORD *)(v16 + 24);
        v80 = *(_QWORD *)(v21 + 24);
        v81 = *(_QWORD *)(v9 + 24);
        do
        {
          v82 = *(float *)(v79 + 4 * v78);
          if (*(float *)(v80 + 4 * v78) <= 0.0)
            v82 = v82 * (float)(*(float *)(a1 + 284) + *(float *)(*(_QWORD *)(v25 + 24) + 4 * v78));
          *(float *)(v81 + 4 * v78++) = v82;
        }
        while (v30 != v78);
      }
      break;
    case 12:
      if (v30)
      {
        v108 = *(float **)(v21 + 24);
        v109 = *(float **)(v16 + 24);
        v110 = *(float **)(v9 + 24);
        do
        {
          v111 = *v108++;
          v112 = fabsf(v111);
          v113 = *v109++;
          *v110++ = v113 / (float)((float)(v112 + 1.0) * (float)(v112 + 1.0));
          --v30;
        }
        while (v30);
      }
      break;
    case 14:
      if (v30)
      {
        v89 = *(float **)(v16 + 24);
        v90 = *(float **)(v21 + 24);
        v91 = *(float **)(v9 + 24);
        do
        {
          v92 = *v89++;
          v93 = v92;
          v94 = *v90++;
          v95 = v94;
          if (v94 <= *(float *)(a1 + 284))
            v96 = 0.0;
          else
            v96 = 1.0;
          v97 = v93 * v96;
          if (v95 >= *(float *)(a1 + 288))
            v98 = 0.0;
          else
            v98 = 1.0;
          *v91++ = v97 * v98;
          --v30;
        }
        while (v30);
      }
      break;
    case 16:
      if (v30)
      {
        v61 = 0;
        v62 = *(_QWORD *)(v16 + 24);
        v63 = *(_QWORD *)(v21 + 24);
        v64 = *(_QWORD *)(v9 + 24);
        do
        {
          v65 = *(float *)(v62 + 4 * v61);
          if (*(float *)(v63 + 4 * v61) <= 0.0)
            v66 = (*(float *)(*(_QWORD *)(v25 + 24) + 4 * v61) + 1.75809934) * v65;
          else
            v66 = v65 * 1.05070099;
          v67 = v66;
          *(float *)(v64 + 4 * v61++) = v67;
        }
        while (v30 != v61);
      }
      break;
    case 17:
      v39 = (_QWORD *)*a3;
      if (a3[1] == *a3 || !*v39 || (*(unsigned int (**)(_QWORD))(*(_QWORD *)*v39 + 32))(*v39))
      {
        v263 = 0;
        v264 = 0;
      }
      else
      {
        v121 = *(std::__shared_weak_count **)(*v39 + 168);
        v263 = *(_QWORD *)(*v39 + 160);
        v264 = v121;
        if (v121)
        {
          v122 = (unint64_t *)&v121->__shared_owners_;
          do
            v123 = __ldxr(v122);
          while (__stxr(v123 + 1, v122));
        }
      }
      v40 = *a3;
      if ((unint64_t)(a3[1] - *a3) >= 0x11
        && (v41 = *(_QWORD *)(v40 + 16)) != 0
        && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v41 + 32))(v41))
      {
        v127 = *(_QWORD *)(v40 + 16);
        v129 = *(_QWORD *)(v127 + 160);
        v128 = *(std::__shared_weak_count **)(v127 + 168);
        v261 = v129;
        v262 = v128;
        if (v128)
        {
          v130 = (unint64_t *)&v128->__shared_owners_;
          do
            v131 = __ldxr(v130);
          while (__stxr(v131 + 1, v130));
        }
      }
      else
      {
        v261 = 0;
        v262 = 0;
      }
      v42 = *a3;
      if ((unint64_t)(a3[1] - *a3) >= 0x21
        && (v43 = *(_QWORD *)(v42 + 32)) != 0
        && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v43 + 32))(v43))
      {
        v132 = *(_QWORD *)(v42 + 32);
        v134 = *(_QWORD *)(v132 + 160);
        v133 = *(std::__shared_weak_count **)(v132 + 168);
        v259 = v134;
        v260 = v133;
        if (v133)
        {
          v135 = (unint64_t *)&v133->__shared_owners_;
          do
            v136 = __ldxr(v135);
          while (__stxr(v136 + 1, v135));
        }
      }
      else
      {
        v259 = 0;
        v260 = 0;
      }
      v44 = (_QWORD *)*a4;
      if (a4[1] == *a4 || !*v44 || (*(unsigned int (**)(_QWORD))(*(_QWORD *)*v44 + 32))(*v44))
      {
        v257 = 0;
        v258 = 0;
      }
      else
      {
        v124 = *(std::__shared_weak_count **)(*v44 + 168);
        v257 = *(_QWORD *)(*v44 + 160);
        v258 = v124;
        if (v124)
        {
          v125 = (unint64_t *)&v124->__shared_owners_;
          do
            v126 = __ldxr(v125);
          while (__stxr(v126 + 1, v125));
        }
      }
      v45 = *a4;
      if ((unint64_t)(a4[1] - *a4) >= 0x11
        && (v46 = *(_QWORD *)(v45 + 16)) != 0
        && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v46 + 32))(v46))
      {
        v137 = *(_QWORD *)(v45 + 16);
        v139 = *(_QWORD *)(v137 + 160);
        v138 = *(std::__shared_weak_count **)(v137 + 168);
        v255 = v139;
        v256 = v138;
        if (v138)
        {
          v140 = (unint64_t *)&v138->__shared_owners_;
          do
            v141 = __ldxr(v140);
          while (__stxr(v141 + 1, v140));
        }
      }
      else
      {
        v255 = 0;
        v256 = 0;
      }
      v47 = *a4;
      if ((unint64_t)(a4[1] - *a4) >= 0x21
        && (v48 = *(_QWORD *)(v47 + 32)) != 0
        && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v48 + 32))(v48))
      {
        v142 = *(_QWORD *)(v47 + 32);
        v144 = *(_QWORD *)(v142 + 160);
        v143 = *(std::__shared_weak_count **)(v142 + 168);
        v253 = v144;
        v254 = v143;
        if (v143)
        {
          v145 = (unint64_t *)&v143->__shared_owners_;
          do
            v146 = __ldxr(v145);
          while (__stxr(v146 + 1, v145));
        }
      }
      else
      {
        v253 = 0;
        v254 = 0;
      }
      v49 = *a4;
      if ((unint64_t)(a4[1] - *a4) >= 0x41
        && (v50 = *(_QWORD *)(v49 + 64)) != 0
        && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v50 + 32))(v50))
      {
        v147 = *(_QWORD *)(v49 + 64);
        v149 = *(_QWORD *)(v147 + 160);
        v148 = *(std::__shared_weak_count **)(v147 + 168);
        v251 = v149;
        v252 = v148;
        if (v148)
        {
          v150 = (unint64_t *)&v148->__shared_owners_;
          do
            v151 = __ldxr(v150);
          while (__stxr(v151 + 1, v150));
        }
      }
      else
      {
        v251 = 0;
        v252 = 0;
      }
      v51 = *a4;
      if ((unint64_t)(a4[1] - *a4) >= 0x51
        && (v52 = *(_QWORD *)(v51 + 80)) != 0
        && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v52 + 32))(v52))
      {
        v152 = *(_QWORD *)(v51 + 80);
        v154 = *(_QWORD *)(v152 + 160);
        v153 = *(std::__shared_weak_count **)(v152 + 168);
        v249 = v154;
        v250 = v153;
        if (v153)
        {
          v155 = (unint64_t *)&v153->__shared_owners_;
          do
            v156 = __ldxr(v155);
          while (__stxr(v156 + 1, v155));
        }
      }
      else
      {
        v249 = 0;
        v250 = 0;
      }
      v53 = *a4;
      if ((unint64_t)(a4[1] - *a4) >= 0x61
        && (v54 = *(_QWORD *)(v53 + 96)) != 0
        && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v54 + 32))(v54))
      {
        v157 = *(_QWORD *)(v53 + 96);
        v159 = *(_QWORD *)(v157 + 160);
        v158 = *(std::__shared_weak_count **)(v157 + 168);
        v247 = v159;
        v248 = v158;
        if (v158)
        {
          v160 = (unint64_t *)&v158->__shared_owners_;
          do
            v161 = __ldxr(v160);
          while (__stxr(v161 + 1, v160));
        }
      }
      else
      {
        v247 = 0;
        v248 = 0;
      }
      Espresso::abstract_blob_container::shape((char *)__N, *(_QWORD *)*a4);
      Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v241, (const Espresso::layer_shape *)__N, 0);
      if (v246 > 3)
      {
        if (v246 == 5)
        {
          v227 = v242 * (uint64_t)SLODWORD(v241);
          v120 = v244 * (uint64_t)v245 * v243;
        }
        else if (v246 == 4)
        {
          v227 = SLODWORD(v241);
          v120 = v243 * (uint64_t)v244 * v242;
        }
        else
        {
          v227 = 0;
LABEL_189:
          v120 = 0;
        }
      }
      else
      {
        switch(v246)
        {
          case 1u:
            v55 = 1;
            goto LABEL_186;
          case 2u:
            v55 = SLODWORD(v241);
            goto LABEL_186;
          case 3u:
            v55 = v242 * (uint64_t)SLODWORD(v241);
            goto LABEL_186;
          case 4u:
            v55 = v242 * (uint64_t)SLODWORD(v241) * v243;
            goto LABEL_186;
          case 5u:
            v55 = v242 * (uint64_t)SLODWORD(v241) * v243 * v244;
LABEL_186:
            v227 = v55;
            if (v246)
              goto LABEL_187;
            goto LABEL_189;
          default:
            v227 = 0;
            if (!v246)
              goto LABEL_189;
LABEL_187:
            v120 = *((int *)&v241 + (int)v246 - 1);
            break;
        }
      }
      if (__p)
      {
        v240 = __p;
        operator delete(__p);
      }
      __n = v120;
      v225 = a1 + 320;
      if (!*(_QWORD *)(a1 + 320))
      {
        std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,Espresso::blob<float,1>::UnitializedBlobType,void>(__N, __n * 4, 1, 1, 1);
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v225, (__int128 *)__N);
        v219 = (std::__shared_weak_count *)__N[1];
        if (__N[1])
        {
          v220 = (unint64_t *)(__N[1] + 8);
          do
            v221 = __ldaxr(v220);
          while (__stlxr(v221 - 1, v220));
          if (!v221)
          {
            ((void (*)(std::__shared_weak_count *))v219->__on_zero_shared)(v219);
            std::__shared_weak_count::__release_weak(v219);
          }
        }
      }
      if (v227)
      {
        v162 = 0;
        v232 = 0;
        __B = (float *)(a1 + 284);
        v224 = v251;
        v228 = 3 * v120;
        v229 = 8 * v120;
        v223 = v249;
        do
        {
          v163 = *(_QWORD *)(v224 + 24);
          v164 = v163 + v162;
          v165 = *(_QWORD *)(v223 + 24);
          v231 = v162;
          v166 = v165 + v162;
          v167 = *(float **)(*(_QWORD *)v225 + 16);
          vDSP_vadd((const float *)(v163 + v162), 1, (const float *)(v165 + v162), 1, v167, 1, v120);
          vDSP_vadd((const float *)(v163 + __n * 4 + v231), 1, (const float *)(v165 + __n * 4 + v231), 1, &v167[v120], 1, v120);
          v168 = &v167[2 * v120];
          vDSP_vadd((const float *)(v164 + v229), 1, (const float *)(v166 + v229), 1, v168, 1, v120);
          v169 = &v167[3 * v120];
          vDSP_vadd((const float *)(v164 + v228 * 4), 1, (const float *)(v166 + v228 * 4), 1, v169, 1, v120);
          vDSP_vsadd(&v167[v120], 1, __B, &v167[v120], 1, v120);
          LODWORD(__N[0]) = v120;
          v241 = -2.0;
          v267[0] = 1.0;
          vDSP_vsmul(v169, 1, &v241, v169, 1, v120);
          vvexpf(v169, v169, (const int *)__N);
          vDSP_vsadd(v169, 1, v267, v169, 1, SLODWORD(__N[0]));
          vvrecf(v169, v169, (const int *)__N);
          __C = -1.0;
          v266 = 2.0;
          vDSP_vsmsa(v169, 1, &v266, &__C, v169, 1, SLODWORD(__N[0]));
          LODWORD(__N[0]) = v120;
          v241 = 1.0;
          vDSP_vneg(v167, 1, v167, 1, v120);
          vvexpf(v167, v167, (const int *)__N);
          vDSP_vsadd(v167, 1, &v241, v167, 1, SLODWORD(__N[0]));
          vvrecf(v167, v167, (const int *)__N);
          LODWORD(__N[0]) = v120;
          v241 = 1.0;
          vDSP_vneg(&v167[v120], 1, &v167[v120], 1, v120);
          vvexpf(&v167[v120], &v167[v120], (const int *)__N);
          vDSP_vsadd(&v167[v120], 1, &v241, &v167[v120], 1, SLODWORD(__N[0]));
          vvrecf(&v167[v120], &v167[v120], (const int *)__N);
          LODWORD(__N[0]) = v120;
          v241 = 1.0;
          vDSP_vneg(v168, 1, v168, 1, v120);
          vvexpf(v168, v168, (const int *)__N);
          vDSP_vsadd(v168, 1, &v241, v168, 1, SLODWORD(__N[0]));
          vvrecf(v168, v168, (const int *)__N);
          v230 = (Espresso *)&v167[v120];
          v170 = *(_QWORD *)(v263 + 24);
          v171 = *(_QWORD *)(v261 + 24);
          v226 = *(_QWORD *)(v247 + 24);
          v172 = (const float *)(*(_QWORD *)(v253 + 24) + v232);
          v173 = (float *)(*(_QWORD *)(v259 + 24) + v232);
          v174 = *(_QWORD *)(v257 + 24);
          v175 = *(_QWORD *)(v255 + 24);
          LODWORD(__N[0]) = v120;
          v241 = -2.0;
          v267[0] = 1.0;
          vDSP_vsmul(v172, 1, &v241, v173, 1, v120);
          vvexpf(v173, v173, (const int *)__N);
          vDSP_vsadd(v173, 1, v267, v173, 1, SLODWORD(__N[0]));
          vvrecf(v173, v173, (const int *)__N);
          __C = -1.0;
          v266 = 2.0;
          vDSP_vsmsa(v173, 1, &v266, &__C, v173, 1, SLODWORD(__N[0]));
          v176 = (float *)(v170 + v231);
          v177 = (float *)(v170 + v231 + v229);
          Espresso::dsigmoid((Espresso *)v168, v177, v120);
          vDSP_vmul((const float *)(v175 + v232), 1, v177, 1, v177, 1, v120);
          vDSP_vmul(v173, 1, v177, 1, v177, 1, v120);
          __E = (float *)(v171 + v231);
          memcpy(&__E[(unint64_t)v229 / 4], v177, __n * 4);
          Espresso::dtanh((Espresso *)v173, v173, v120);
          Espresso::dsigmoid((Espresso *)v167, __E, v120);
          vDSP_vmul(__E, 1, v169, 1, __E, 1, v120);
          vDSP_vmul(v168, 1, v173, 1, v176, 1, v120);
          vDSP_vmul(v176, 1, __E, 1, v176, 1, v120);
          v179 = (const float *)(v174 + v232);
          vDSP_vmma(__E, 1, (const float *)(v174 + v232), 1, v176, 1, (const float *)(v175 + v232), 1, __E, 1, v120);
          v180 = &__E[__n];
          memcpy(v176, __E, __n * 4);
          Espresso::dsigmoid(v230, &__E[__n], v120);
          vDSP_vmul(v180, 1, (const float *)(v226 + v232), 1, v180, 1, v120);
          vDSP_vmul(v168, 1, v173, 1, &v176[__n], 1, v120);
          vDSP_vmul(&v176[__n], 1, &__E[__n], 1, &v176[__n], 1, v120);
          vDSP_vmma(v180, 1, v179, 1, &v176[__n], 1, (const float *)(v175 + v232), 1, v180, 1, v120);
          v181 = &__E[v228];
          memcpy(&v176[__n], v180, __n * 4);
          Espresso::dtanh((Espresso *)v169, v181, v120);
          vDSP_vmul(v181, 1, v167, 1, v181, 1, v120);
          v182 = &v176[v228];
          vDSP_vmul(v168, 1, v173, 1, v182, 1, v120);
          vDSP_vmul(v182, 1, v181, 1, v182, 1, v120);
          vDSP_vmma(v181, 1, v179, 1, v182, 1, (const float *)(v175 + v232), 1, v181, 1, v120);
          memcpy(v182, v181, __n * 4);
          vDSP_vmul(v179, 1, (const float *)v230, 1, v167, 1, v120);
          vDSP_vmul((const float *)(v175 + v232), 1, v168, 1, v169, 1, v120);
          vDSP_vmul(v169, 1, (const float *)v230, 1, v169, 1, v120);
          vDSP_vmul(v169, 1, v173, 1, v169, 1, v120);
          vDSP_vadd(v167, 1, v169, 1, v173, 1, v120);
          v232 += __n * 4;
          v183 = v227-- == 1;
          v162 = v231 + 16 * v120;
        }
        while (!v183);
      }
      v184 = v248;
      if (v248)
      {
        v185 = (unint64_t *)&v248->__shared_owners_;
        do
          v186 = __ldaxr(v185);
        while (__stlxr(v186 - 1, v185));
        if (!v186)
        {
          ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
          std::__shared_weak_count::__release_weak(v184);
        }
      }
      v187 = v250;
      if (v250)
      {
        v188 = (unint64_t *)&v250->__shared_owners_;
        do
          v189 = __ldaxr(v188);
        while (__stlxr(v189 - 1, v188));
        if (!v189)
        {
          ((void (*)(std::__shared_weak_count *))v187->__on_zero_shared)(v187);
          std::__shared_weak_count::__release_weak(v187);
        }
      }
      v190 = v252;
      if (v252)
      {
        v191 = (unint64_t *)&v252->__shared_owners_;
        do
          v192 = __ldaxr(v191);
        while (__stlxr(v192 - 1, v191));
        if (!v192)
        {
          ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
          std::__shared_weak_count::__release_weak(v190);
        }
      }
      v193 = v254;
      if (v254)
      {
        v194 = (unint64_t *)&v254->__shared_owners_;
        do
          v195 = __ldaxr(v194);
        while (__stlxr(v195 - 1, v194));
        if (!v195)
        {
          ((void (*)(std::__shared_weak_count *))v193->__on_zero_shared)(v193);
          std::__shared_weak_count::__release_weak(v193);
        }
      }
      v196 = v256;
      if (v256)
      {
        v197 = (unint64_t *)&v256->__shared_owners_;
        do
          v198 = __ldaxr(v197);
        while (__stlxr(v198 - 1, v197));
        if (!v198)
        {
          ((void (*)(std::__shared_weak_count *))v196->__on_zero_shared)(v196);
          std::__shared_weak_count::__release_weak(v196);
        }
      }
      v199 = v258;
      if (v258)
      {
        v200 = (unint64_t *)&v258->__shared_owners_;
        do
          v201 = __ldaxr(v200);
        while (__stlxr(v201 - 1, v200));
        if (!v201)
        {
          ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
          std::__shared_weak_count::__release_weak(v199);
        }
      }
      v202 = v260;
      if (v260)
      {
        v203 = (unint64_t *)&v260->__shared_owners_;
        do
          v204 = __ldaxr(v203);
        while (__stlxr(v204 - 1, v203));
        if (!v204)
        {
          ((void (*)(std::__shared_weak_count *))v202->__on_zero_shared)(v202);
          std::__shared_weak_count::__release_weak(v202);
        }
      }
      v205 = v262;
      if (v262)
      {
        v206 = (unint64_t *)&v262->__shared_owners_;
        do
          v207 = __ldaxr(v206);
        while (__stlxr(v207 - 1, v206));
        if (!v207)
        {
          ((void (*)(std::__shared_weak_count *))v205->__on_zero_shared)(v205);
          std::__shared_weak_count::__release_weak(v205);
        }
      }
      v208 = v264;
      if (v264)
      {
        v209 = (unint64_t *)&v264->__shared_owners_;
        do
          v210 = __ldaxr(v209);
        while (__stlxr(v210 - 1, v209));
        if (!v210)
        {
          ((void (*)(std::__shared_weak_count *))v208->__on_zero_shared)(v208);
          std::__shared_weak_count::__release_weak(v208);
        }
      }
      v26 = v234;
      break;
    case 24:
      if (v30)
      {
        v56 = *(float **)(v21 + 24);
        v57 = *(float **)(v16 + 24);
        v58 = *(float **)(v9 + 24);
        do
        {
          v59 = 0.0;
          if (*v56 <= *(float *)(a1 + 288))
          {
            v59 = 1.0;
            if (*v56 <= 0.0)
              v59 = *(float *)(a1 + 284);
          }
          v60 = *v57++;
          *v58++ = v60 * v59;
          ++v56;
          --v30;
        }
        while (v30);
      }
      break;
    default:
      Espresso::throw_exception_selector<Espresso::generic_error,int &>("activation_grad_cpu for activation mode %d is not implemented", v31);
  }
  if (v26)
  {
    v211 = (unint64_t *)&v26->__shared_owners_;
    do
      v212 = __ldaxr(v211);
    while (__stlxr(v212 - 1, v211));
    if (!v212)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  if (v235)
  {
    v213 = (unint64_t *)&v235->__shared_owners_;
    do
      v214 = __ldaxr(v213);
    while (__stlxr(v214 - 1, v213));
    if (!v214)
    {
      ((void (*)(std::__shared_weak_count *))v235->__on_zero_shared)(v235);
      std::__shared_weak_count::__release_weak(v235);
    }
  }
  if (v236)
  {
    v215 = (unint64_t *)&v236->__shared_owners_;
    do
      v216 = __ldaxr(v215);
    while (__stlxr(v216 - 1, v215));
    if (!v216)
    {
      ((void (*)(std::__shared_weak_count *))v236->__on_zero_shared)(v236);
      std::__shared_weak_count::__release_weak(v236);
    }
  }
  if (v237)
  {
    v217 = (unint64_t *)&v237->__shared_owners_;
    do
      v218 = __ldaxr(v217);
    while (__stlxr(v218 - 1, v217));
    if (!v218)
    {
      ((void (*)(std::__shared_weak_count *))v237->__on_zero_shared)(v237);
      std::__shared_weak_count::__release_weak(v237);
    }
  }
}

void sub_1916442C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,char a31,uint64_t a32,char a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43)
{
  uint64_t v43;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v43 - 232);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v43 - 216);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v43 - 200);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v43 - 184);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v43 - 168);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v43 - 152);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v43 - 136);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v43 - 120);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a31);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a35);
  _Unwind_Resume(a1);
}

void Espresso::dsigmoid(Espresso *this, float *__D, vDSP_Length __N)
{
  float __C;
  float __B;

  __C = 1.0;
  __B = -1.0;
  vDSP_vsmsa((const float *)this, 1, &__B, &__C, __D, 1, __N);
  vDSP_vmul((const float *)this, 1, __D, 1, __D, 1, __N);
}

void Espresso::dtanh(Espresso *this, float *__C, vDSP_Length __N)
{
  float __Ca;
  float __B;

  __Ca = 1.0;
  __B = -1.0;
  vDSP_vmul((const float *)this, 1, (const float *)this, 1, __C, 1, __N);
  vDSP_vsmsa(__C, 1, &__B, &__Ca, __C, 1, __N);
}

void Espresso::concat_grad_kernel_cpu::~concat_grad_kernel_cpu(Espresso::concat_grad_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::concat_grad_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  void *v5;
  int *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  int *v28;
  std::__shared_weak_count *v29;

  v5 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, a4[1], 0);
  v6 = (int *)*((_QWORD *)v5 + 20);
  v7 = (std::__shared_weak_count *)*((_QWORD *)v5 + 21);
  v28 = v6;
  v29 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v10 = *a3;
  if (a3[1] != *a3)
  {
    v11 = 0;
    v12 = 0;
    v13 = v6[3] * (uint64_t)v6[2];
    v14 = 4 * (int)v13 * v6[4];
    do
    {
      Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v26, *(void **)(v10 + 16 * v11), *(std::__shared_weak_count **)(v10 + 16 * v11 + 8));
      v15 = v28;
      v16 = v26;
      if (v28[5] >= 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 4 * v13 * v12;
        do
        {
          memcpy((void *)(*(_QWORD *)(v16 + 24) + 4 * v17 * *(int *)(v16 + 16)), (const void *)(*((_QWORD *)v15 + 3) + v19), 4 * *(_DWORD *)(v16 + 16) * (int)v13);
          ++v18;
          v17 += v13;
          v19 += v14;
        }
        while (v18 < v15[5]);
      }
      v20 = *(int *)(v16 + 16);
      v21 = v27;
      if (v27)
      {
        v22 = (unint64_t *)&v27->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      v12 += v20;
      ++v11;
      v10 = *a3;
    }
    while (v11 < (a3[1] - *a3) >> 4);
    v7 = v29;
  }
  if (v7)
  {
    v24 = (unint64_t *)&v7->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_191644674(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void Espresso::softmax_loss_grad_kernel_cpu::~softmax_loss_grad_kernel_cpu(Espresso::softmax_loss_grad_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::softmax_loss_grad_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _QWORD *v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD *v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t i;
  uint64_t j;
  uint64_t v39;
  uint64_t v40;
  vDSP_Length v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  float __B[10];
  void *__p;
  void *v63;
  _DWORD v64[5];
  int v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  uint64_t v72;
  std::__shared_weak_count *v73;

  v4 = *(uint64_t **)a4;
  v5 = *(_QWORD *)(a4 + 8);
  if (v5 - *(_QWORD *)a4 != 48)
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("softmax_loss_grad_kernel needs 3 inputs: y, label, dy");
  v8 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a3, a3[1], 0);
  if (v8)
  {
    v10 = v8[20];
    v9 = (std::__shared_weak_count *)v8[21];
    v72 = v10;
    v73 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
      v4 = *(uint64_t **)a4;
      v5 = *(_QWORD *)(a4 + 8);
    }
  }
  else
  {
    v10 = 0;
    v72 = 0;
    v73 = 0;
  }
  v13 = Espresso::layer_data::get_blob<Espresso::blob_cpu>((uint64_t)v4, v5, 0);
  if (v13)
  {
    v15 = v13[20];
    v14 = (std::__shared_weak_count *)v13[21];
    v70 = v15;
    v71 = v14;
    if (v14)
    {
      v16 = (unint64_t *)&v14->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
      v4 = *(uint64_t **)a4;
      v5 = *(_QWORD *)(a4 + 8);
    }
  }
  else
  {
    v15 = 0;
    v70 = 0;
    v71 = 0;
  }
  v18 = Espresso::layer_data::get_blob<Espresso::blob_cpu>((uint64_t)v4, v5, 1);
  if (v18)
  {
    v20 = v18[20];
    v19 = (std::__shared_weak_count *)v18[21];
    v68 = v20;
    v69 = v19;
    if (v19)
    {
      v21 = (unint64_t *)&v19->__shared_owners_;
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
      v4 = *(uint64_t **)a4;
      v5 = *(_QWORD *)(a4 + 8);
    }
  }
  else
  {
    v20 = 0;
    v68 = 0;
    v69 = 0;
  }
  v23 = Espresso::layer_data::get_blob<Espresso::blob_cpu>((uint64_t)v4, v5, 2);
  if (v23)
  {
    v24 = (std::__shared_weak_count *)v23[21];
    v60 = v23[20];
    v66 = v60;
    v67 = v24;
    if (v24)
    {
      v25 = (unint64_t *)&v24->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
  }
  else
  {
    v24 = 0;
    v60 = 0;
    v66 = 0;
    v67 = 0;
  }
  v57 = v24;
  if (*(_BYTE *)(a1 + 307))
  {
    Espresso::abstract_blob_container::shape((char *)__B, **(_QWORD **)a4);
    Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v64, (const Espresso::layer_shape *)__B, 0);
    if (__p)
    {
      v63 = __p;
      operator delete(__p);
    }
    v27 = v65 - 1;
    v28 = v64[v27];
    if (v65 < 1)
    {
      v30 = 1;
    }
    else
    {
      v29 = 0;
      v30 = 1;
      do
      {
        if (v29 < v27)
          v30 *= v64[v29];
        ++v29;
      }
      while (v65 != v29);
    }
    LODWORD(v31) = *(_DWORD *)(v15 + 8);
    v32 = 1;
    v33 = v28;
  }
  else
  {
    LODWORD(v31) = *(_DWORD *)(v15 + 8);
    v32 = *(_DWORD *)(v15 + 12) * v31;
    v28 = *(_DWORD *)(v15 + 16);
    v30 = *(_DWORD *)(v15 + 20);
    v33 = *(_DWORD *)(v10 + 12) * *(_DWORD *)(v10 + 8) * *(_DWORD *)(v10 + 16);
  }
  v34 = 0;
  v35 = *(_QWORD *)(v10 + 24);
  v36 = *(_QWORD *)(v20 + 24);
  v31 = (int)v31;
  do
  {
    v31 *= *(int *)(v15 + 12 + v34);
    v34 += 4;
  }
  while (v34 != 12);
  memcpy(*(void **)(v10 + 24), *(const void **)(v15 + 24), 4 * v31);
  if (*(_BYTE *)(a1 + 305))
  {
    if (v30 >= 1)
    {
      for (i = 0; i != v30; ++i)
      {
        if (v32 >= 1)
        {
          for (j = 0; j != v32; ++j)
          {
            v39 = j + v32 * (int)*(float *)(v36 + 4 * j);
            *(float *)(v35 + 4 * v39) = *(float *)(v35 + 4 * v39) + -1.0;
          }
        }
        v35 += 4 * v33;
        v36 += 4 * v32;
      }
    }
    v40 = 0;
    __B[0] = **(float **)(v60 + 24) / (float)(v30 * v32);
    v41 = *(int *)(v10 + 8);
    do
    {
      v41 *= *(int *)(v10 + 12 + v40);
      v40 += 4;
    }
    while (v40 != 12);
    vDSP_vsmul(*(const float **)(v10 + 24), 1, __B, *(float **)(v10 + 24), 1, v41);
  }
  else if (v30 >= 1)
  {
    v42 = v10;
    v59 = 0;
    v58 = v30;
    do
    {
      if (v32 >= 1)
      {
        v43 = 0;
        v44 = v59 * v32;
        do
        {
          v45 = v43 + v32 * (int)*(float *)(v36 + 4 * (v43 + v44));
          *(float *)(v35 + 4 * v45) = *(float *)(v35 + 4 * v45) + -1.0;
          vDSP_vsmul((const float *)(*(_QWORD *)(v42 + 24) + 4 * v59 * v32 * v28 + 4 * v43), v32, (const float *)(*(_QWORD *)(v60 + 24) + 4 * v44 + 4 * v43), (float *)(*(_QWORD *)(v42 + 24) + 4 * v59 * v32 * v28 + 4 * v43), v32, v28);
          ++v43;
        }
        while (v43 != v32);
      }
      v35 += 4 * v33;
      ++v59;
    }
    while (v59 != v58);
  }
  if (v57)
  {
    v46 = (unint64_t *)&v57->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  v48 = v69;
  if (v69)
  {
    v49 = (unint64_t *)&v69->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  v51 = v71;
  if (v71)
  {
    v52 = (unint64_t *)&v71->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  v54 = v73;
  if (v73)
  {
    v55 = (unint64_t *)&v73->__shared_owners_;
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
}

void sub_191644B7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,char a28)
{
  uint64_t v28;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a26);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v28 - 136);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v28 - 120);
  _Unwind_Resume(a1);
}

void Espresso::generic_softmax_loss_grad_kernel::top_shapes_for_bottom_shapes(__int128 **a1@<X1>, _QWORD *a2@<X8>)
{
  __int128 *v3;
  uint64_t v4;
  __int128 v5;
  char *v6;
  __int128 v7[2];
  uint64_t v8;
  void *__p;
  void *v10;
  uint64_t v11;
  __int128 v12;

  *((_QWORD *)&v12 + 1) = *MEMORY[0x1E0C80C00];
  v3 = *a1;
  v4 = *((_QWORD *)*a1 + 4);
  v5 = (*a1)[1];
  v7[0] = **a1;
  v7[1] = v5;
  v8 = v4;
  __p = 0;
  v10 = 0;
  v11 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *((const void **)v3 + 5), *((_QWORD *)v3 + 6), (uint64_t)(*((_QWORD *)v3 + 6) - *((_QWORD *)v3 + 5)) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v6 = (char *)operator new(0x40uLL);
  *a2 = v6;
  a2[1] = v6;
  a2[2] = v6 + 64;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a2 + 2), v7, &v12, (uint64_t)v6);
  if (__p)
  {
    v10 = __p;
    operator delete(__p);
  }
}

void sub_191644C9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v19 = v18;
  *(_QWORD *)(v17 + 8) = v19;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a17 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

const char *Espresso::generic_softmax_loss_grad_kernel::kernel_type_str(Espresso::generic_softmax_loss_grad_kernel *this)
{
  return "softmax_loss_grad";
}

void Espresso::bias_kernel_cpu::~bias_kernel_cpu(Espresso::bias_kernel_cpu *this)
{
  *(_QWORD *)this = &off_1E2D678B0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 328);
  Espresso::generic_bias_kernel::~generic_bias_kernel(this);
}

{
  *(_QWORD *)this = &off_1E2D678B0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 328);
  Espresso::generic_bias_kernel::~generic_bias_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::bias_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  _QWORD *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  int v15;
  int v16;
  vDSP_Length v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  char *v38;
  std::__shared_weak_count *v39;
  void *__p;
  void *v41;
  _DWORD v42[6];
  uint64_t v43;
  std::__shared_weak_count *v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  std::__shared_weak_count *v47;
  std::__shared_weak_count *v48;
  uint64_t __B;
  int v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v7 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a3, a3[1], 0);
  if (v7)
  {
    v8 = (std::__shared_weak_count *)v7[21];
    v45 = v7[20];
    v46 = v8;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
    }
  }
  else
  {
    v45 = 0;
    v46 = 0;
  }
  v11 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, a4[1], 0);
  if (v11)
  {
    v12 = (std::__shared_weak_count *)*((_QWORD *)v11 + 21);
    v43 = *((_QWORD *)v11 + 20);
    v44 = v12;
    if (v12)
    {
      v13 = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
  }
  else
  {
    v12 = 0;
    v43 = 0;
    v44 = 0;
  }
  Espresso::abstract_blob_container::shape((char *)&v38, *(_QWORD *)*a3);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v42, (const Espresso::layer_shape *)&v38, 0);
  if (__p)
  {
    v41 = __p;
    operator delete(__p);
  }
  v15 = v42[0];
  if (v42[0] >= 1)
  {
    v16 = 0;
    if (*(_BYTE *)(a1 + 308))
      v17 = 1;
    else
      v17 = v42[3] * (uint64_t)v42[2];
    do
    {
      v18 = 0;
      v47 = *(std::__shared_weak_count **)(v45 + 8);
      LODWORD(v48) = *(_DWORD *)(v45 + 16);
      v19 = 1;
      do
      {
        v19 *= *(_DWORD *)(v45 + 8 + v18);
        v18 += 4;
      }
      while (v18 != 12);
      v20 = *(_QWORD *)(v45 + 24);
      v21 = operator new(0x60uLL);
      v22 = 0;
      v21[1] = 0;
      v21[2] = 0;
      *v21 = &off_1E2DBEC70;
      v21[3] = &off_1E2DA11D0;
      *((_OWORD *)v21 + 4) = 0u;
      *((_OWORD *)v21 + 5) = 0u;
      v21[4] = v47;
      *((_DWORD *)v21 + 10) = (_DWORD)v48;
      v21[6] = v20 + 4 * v19 * v16;
      *((_BYTE *)v21 + 56) = 0;
      v38 = (char *)(v21 + 3);
      v39 = (std::__shared_weak_count *)v21;
      __B = *(_QWORD *)(v43 + 8);
      v50 = *(_DWORD *)(v43 + 16);
      v23 = 1;
      do
      {
        v23 *= *(_DWORD *)(v43 + 8 + v22);
        v22 += 4;
      }
      while (v22 != 12);
      v24 = *(_QWORD *)(v43 + 24);
      v25 = (std::__shared_weak_count *)operator new(0x60uLL);
      v25->__shared_owners_ = 0;
      v26 = (unint64_t *)&v25->__shared_owners_;
      v25->__shared_weak_owners_ = 0;
      v25->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBEC70;
      v25[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA11D0;
      *(_OWORD *)&v25[2].__shared_weak_owners_ = 0u;
      *(_OWORD *)&v25[3].__shared_owners_ = 0u;
      v25[1].__shared_owners_ = __B;
      LODWORD(v25[1].__shared_weak_owners_) = v50;
      v25[2].__vftable = (std::__shared_weak_count_vtbl *)(v24 + 4 * v23 * v16);
      LOBYTE(v25[2].__shared_owners_) = 0;
      v47 = v25 + 1;
      v48 = v25;
      if (*(int *)(a1 + 304) >= 1)
      {
        v27 = 0;
        v28 = 0;
        do
        {
          LODWORD(__B) = 0;
          LODWORD(__B) = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 328) + 16) + 4 * v28);
          vDSP_vsadd((const float *)(v21[6] + v27), 1, (const float *)&__B, (float *)(v21[6] + v27), 1, v17);
          ++v28;
          v27 += 4 * v17;
        }
        while (v28 < *(int *)(a1 + 304));
      }
      do
        v29 = __ldaxr(v26);
      while (__stlxr(v29 - 1, v26));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
      v30 = v39;
      if (v39)
      {
        v31 = (unint64_t *)&v39->__shared_owners_;
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      ++v16;
    }
    while (v16 != v15);
    v12 = v44;
  }
  if (v12)
  {
    v33 = (unint64_t *)&v12->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v35 = v46;
  if (v46)
  {
    v36 = (unint64_t *)&v46->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
}

void sub_191645108(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,char a25)
{
  if (__p)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  _Unwind_Resume(a1);
}

void Espresso::bias_kernel_cpu::clear_weights(Espresso::bias_kernel_cpu *this)
{
  std::shared_ptr<Espresso::blob<unsigned short,4>>::reset[abi:ne180100]((_QWORD *)this + 41);
}

const char *Espresso::generic_bias_kernel::kernel_type_str(Espresso::generic_bias_kernel *this)
{
  return "bias";
}

double Espresso::bias_kernel_cpu::get_weights_blob@<D0>(Espresso::bias_kernel_cpu *this@<X0>, _OWORD *a2@<X8>)
{
  double result;
  __int128 v4;

  Espresso::blob_cpu::make_custom<std::shared_ptr<Espresso::blob<float,1>>>((uint64_t *)&v4, (_QWORD *)this + 1, (_QWORD *)this + 41);
  result = *(double *)&v4;
  *a2 = v4;
  return result;
}

uint64_t Espresso::bias_kernel_cpu::num_weights_blob(Espresso::bias_kernel_cpu *this)
{
  return 1;
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::bias_params,Espresso::abstract_kernel_with_weights_>::get_params(uint64_t a1)
{
  return a1 + 304;
}

void Espresso::bias_grad_kernel_cpu::~bias_grad_kernel_cpu(Espresso::bias_grad_kernel_cpu *this)
{
  void **v2;

  *(_QWORD *)this = off_1E2D9DD68;
  v2 = (void **)((char *)this + 280);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v2);
  Espresso::base_kernel::~base_kernel(this);
}

{
  void **v2;

  *(_QWORD *)this = off_1E2D9DD68;
  v2 = (void **)((char *)this + 280);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v2);
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::bias_grad_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  void *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  float *v33;
  float v34;
  float *v35;
  uint64_t v36;
  float v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  unsigned int v46[6];
  _DWORD v47[10];
  void *__p;
  void *v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  uint64_t v54;
  std::__shared_weak_count *v55;

  v6 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a3, a3[1], 0);
  if (v6)
  {
    v8 = *((_QWORD *)v6 + 20);
    v7 = (std::__shared_weak_count *)*((_QWORD *)v6 + 21);
    v54 = v8;
    v55 = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
    }
  }
  else
  {
    v7 = 0;
    v8 = 0;
    v54 = 0;
    v55 = 0;
  }
  v11 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, a4[1], 0);
  if (v11)
  {
    v13 = v11[20];
    v12 = (std::__shared_weak_count *)v11[21];
    v52 = v13;
    v53 = v12;
    if (v12)
    {
      v14 = (unint64_t *)&v12->__shared_owners_;
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
  }
  else
  {
    v13 = 0;
    v52 = 0;
    v53 = 0;
  }
  v50 = v8;
  v51 = v7;
  if (v7)
  {
    v16 = (unint64_t *)&v7->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  Espresso::abstract_blob_container::shape((char *)v47, *(_QWORD *)*a4);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v46, (const Espresso::layer_shape *)v47, 0);
  v18 = 0;
  v19 = v46[0];
  v20 = *(unsigned __int8 *)(a1 + 308);
  v22 = v47[0];
  v21 = v47[1];
  v23 = *(int *)(v8 + 8);
  while (1)
  {
    v24 = 0;
    v25 = v23;
    do
    {
      v25 *= *(int *)(v8 + 12 + v24);
      v24 += 4;
    }
    while (v24 != 12);
    if (v25 <= v18)
      break;
    *(_DWORD *)(*(_QWORD *)(v8 + 24) + 4 * v18++) = 0;
  }
  if ((int)v19 >= 1)
  {
    v26 = 0;
    v27 = 0;
    v28 = v22 * v21;
    if (v20)
      v29 = 1;
    else
      v29 = v28;
    v30 = *(unsigned int *)(a1 + 304);
    do
    {
      if ((int)v30 >= 1)
      {
        v31 = 0;
        v32 = *(_QWORD *)(v8 + 24);
        v33 = (float *)(*(_QWORD *)(v13 + 24) + v26);
        do
        {
          v34 = 0.0;
          if ((int)v29 >= 1)
          {
            v35 = v33;
            v36 = v29;
            do
            {
              v37 = *v35++;
              v34 = v34 + v37;
              --v36;
            }
            while (v36);
          }
          *(float *)(v32 + 4 * v31) = v34 + *(float *)(v32 + 4 * v31);
          ++v31;
          v33 += (int)v29;
        }
        while (v31 != v30);
      }
      ++v27;
      v26 += 4 * (int)v30 * (uint64_t)(int)v29;
    }
    while (v27 != v19);
  }
  if (__p)
  {
    v49 = __p;
    operator delete(__p);
  }
  if (v7)
  {
    v38 = (unint64_t *)&v7->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v40 = v53;
  if (v53)
  {
    v41 = (unint64_t *)&v53->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  v43 = v55;
  if (v55)
  {
    v44 = (unint64_t *)&v55->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
}

void sub_1916454E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,char a21)
{
  uint64_t v21;

  if (__p)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v21 - 80);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v21 - 64);
  _Unwind_Resume(a1);
}

void Espresso::batchnorm_grad_kernel_cpu::~batchnorm_grad_kernel_cpu(Espresso::batchnorm_grad_kernel_cpu *this)
{
  void **v2;

  *(_QWORD *)this = off_1E2D9DD68;
  v2 = (void **)((char *)this + 280);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v2);
  Espresso::base_kernel::~base_kernel(this);
}

{
  void **v2;

  *(_QWORD *)this = off_1E2D9DD68;
  v2 = (void **)((char *)this + 280);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v2);
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::batchnorm_grad_kernel_cpu::__launch(unsigned int *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  _QWORD *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  void *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  void *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  void *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  void *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  void *v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  vDSP_Length v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  float *v70;
  const float *v71;
  uint64_t v72;
  float *v73;
  uint64_t v74;
  float v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  float v80;
  uint64_t v81;
  float v82;
  uint64_t v83;
  float *v84;
  float *v85;
  uint64_t v86;
  float v87;
  float v88;
  float v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  float *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  int v98;
  int v99;
  uint64_t v100;
  std::__shared_weak_count *v101;
  uint64_t v102;
  int v103;
  int v104;
  int v105;
  uint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  int v112;
  uint64_t v113;
  float *v114;
  float *v115;
  float *v116;
  float v117;
  float v118;
  int v119;
  float v120;
  float v121;
  unint64_t v122;
  uint64_t *v123;
  unint64_t v124;
  unint64_t *v125;
  unint64_t v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  const float *v137;
  float *v138;
  float *v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  float *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  int v149;
  std::__shared_weak_count *v150;
  std::__shared_weak_count *v151;
  uint64_t __B;
  std::__shared_weak_count *v153;
  uint64_t v154;
  std::__shared_weak_count *v155;
  uint64_t v156;
  std::__shared_weak_count *v157;
  uint64_t v158;
  int v159;
  uint64_t v160;

  v160 = *MEMORY[0x1E0C80C00];
  v7 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a3, a3[1], 0);
  if (v7)
  {
    v9 = v7[20];
    v8 = (std::__shared_weak_count *)v7[21];
    v156 = v9;
    v157 = v8;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
  }
  else
  {
    v9 = 0;
    v156 = 0;
    v157 = 0;
  }
  v12 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, a4[1], 0);
  if (v12)
  {
    v13 = (std::__shared_weak_count *)v12[21];
    v154 = v12[20];
    v155 = v13;
    if (v13)
    {
      v14 = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
  }
  else
  {
    v154 = 0;
    v155 = 0;
  }
  if (a1[77])
  {
    if (a1[78])
      Espresso::throw_exception_selector<Espresso::not_implemented_error>("batchnorm_grad for training && training_instancenorm != MVA_NONE is not supported now");
    v16 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, a4[1], 1);
    v17 = *((_QWORD *)v16 + 20);
    v18 = (std::__shared_weak_count *)*((_QWORD *)v16 + 21);
    if (v18)
    {
      v19 = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
      v144 = *(float **)(v17 + 24);
      v21 = (unint64_t *)&v18->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    else
    {
      v144 = *(float **)(v17 + 24);
    }
    v28 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, a4[1], 2);
    v29 = *((_QWORD *)v28 + 20);
    v30 = (std::__shared_weak_count *)*((_QWORD *)v28 + 21);
    if (v30)
    {
      v31 = (unint64_t *)&v30->__shared_owners_;
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
      v137 = *(const float **)(v29 + 24);
      v33 = (unint64_t *)&v30->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    else
    {
      v137 = *(const float **)(v29 + 24);
    }
    v35 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, a4[1], 3);
    v36 = *((_QWORD *)v35 + 20);
    v37 = (std::__shared_weak_count *)*((_QWORD *)v35 + 21);
    if (v37)
    {
      v38 = (unint64_t *)&v37->__shared_owners_;
      do
        v39 = __ldxr(v38);
      while (__stxr(v39 + 1, v38));
      v40 = *(_QWORD *)(v36 + 24);
      v41 = (unint64_t *)&v37->__shared_owners_;
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    else
    {
      v40 = *(_QWORD *)(v36 + 24);
    }
    v43 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, a4[1], 4);
    v44 = *((_QWORD *)v43 + 20);
    v45 = (std::__shared_weak_count *)*((_QWORD *)v43 + 21);
    if (v45)
    {
      v46 = (unint64_t *)&v45->__shared_owners_;
      do
        v47 = __ldxr(v46);
      while (__stxr(v47 + 1, v46));
      v136 = *(_QWORD *)(v44 + 24);
      v48 = (unint64_t *)&v45->__shared_owners_;
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
    else
    {
      v136 = *(_QWORD *)(v44 + 24);
    }
    v50 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a3, a3[1], 1);
    v51 = *((_QWORD *)v50 + 20);
    v52 = (std::__shared_weak_count *)*((_QWORD *)v50 + 21);
    if (v52)
    {
      v53 = (unint64_t *)&v52->__shared_owners_;
      do
        v54 = __ldxr(v53);
      while (__stxr(v54 + 1, v53));
      v135 = *(_QWORD *)(v51 + 24);
      v55 = (unint64_t *)&v52->__shared_owners_;
      do
        v56 = __ldaxr(v55);
      while (__stlxr(v56 - 1, v55));
      if (!v56)
      {
        ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
        std::__shared_weak_count::__release_weak(v52);
      }
    }
    else
    {
      v135 = *(_QWORD *)(v51 + 24);
    }
    v57 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a3, a3[1], 2);
    v58 = *((_QWORD *)v57 + 20);
    v59 = (std::__shared_weak_count *)*((_QWORD *)v57 + 21);
    if (v59)
    {
      v60 = (unint64_t *)&v59->__shared_owners_;
      do
        v61 = __ldxr(v60);
      while (__stxr(v61 + 1, v60));
      v134 = *(_QWORD *)(v58 + 24);
      v62 = (unint64_t *)&v59->__shared_owners_;
      do
        v63 = __ldaxr(v62);
      while (__stlxr(v63 - 1, v62));
      if (!v63)
      {
        ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
        std::__shared_weak_count::__release_weak(v59);
      }
    }
    else
    {
      v134 = *(_QWORD *)(v58 + 24);
    }
    v64 = *(int *)(v156 + 12) * (uint64_t)*(int *)(v156 + 8);
    v140 = *(int *)(v156 + 16);
    v148 = v140 * v64;
    v133 = v156;
    v138 = *(float **)(v156 + 24);
    v65 = 4 * v64;
    v143 = *(int *)(v156 + 20);
    if ((_DWORD)v143)
    {
      v66 = 0;
      v68 = *(_QWORD *)(v156 + 24);
      v67 = *(int *)(v156 + 16);
      if (v140 <= 1)
        v67 = 1;
      v141 = v67;
      v146 = 4 * v148;
      do
      {
        if ((_DWORD)v140)
        {
          v69 = 0;
          v70 = v144;
          v71 = v137;
          v72 = v141;
          do
          {
            *(float *)&__B = -*v70;
            vDSP_vsadd((const float *)(v40 + v69), 1, (const float *)&__B, (float *)(v68 + v69), 1, v64);
            vDSP_vsdiv((const float *)(v68 + v69), 1, v71++, (float *)(v68 + v69), 1, v64);
            v69 += v65;
            ++v70;
            --v72;
          }
          while (v72);
        }
        ++v66;
        v68 += v146;
        v40 += v146;
      }
      while (v66 != v143);
    }
    v73 = v138;
    if ((_DWORD)v140)
    {
      v74 = 0;
      v75 = (float)(v143 * v64);
      if (v64 <= 1)
        v76 = 1;
      else
        v76 = v64;
      v145 = 0;
      v147 = v76;
      if (v143 <= 1)
        v77 = 1;
      else
        v77 = v143;
      v78 = 4 * v148;
      do
      {
        v139 = v73;
        v142 = v74;
        if ((_DWORD)v143)
        {
          v79 = 0;
          v80 = 0.0;
          v81 = v154;
          v82 = 0.0;
          do
          {
            v83 = *(_QWORD *)(v81 + 24);
            LODWORD(__B) = 0;
            vDSP_sve((const float *)(v83 + 4 * (v145 * v64 + v79 * v148)), 1, (float *)&__B, v64);
            if ((_DWORD)v64)
            {
              v84 = (float *)(v83 + v74);
              v85 = v73;
              v86 = v147;
              do
              {
                v87 = *v85++;
                v88 = v87;
                v89 = *v84++;
                v82 = v82 + (float)(v88 * v89);
                --v86;
              }
              while (v86);
            }
            v80 = v80 + *(float *)&__B;
            ++v79;
            v74 += v78;
            v73 = (float *)((char *)v73 + v78);
          }
          while (v79 != v77);
        }
        else
        {
          v82 = 0.0;
          v80 = 0.0;
        }
        *(float *)(v134 + 4 * v145) = v80;
        *(float *)(v135 + 4 * v145) = v82;
        *(float *)&__B = (float)-v82 / v75;
        *(float *)&v150 = (float)-v80 / v75;
        *(float *)&v158 = *(float *)(v136 + 4 * v145) / v137[v145];
        if ((_DWORD)v143)
        {
          v90 = v154;
          v91 = v142;
          v92 = v77;
          do
          {
            v93 = (float *)(*(_QWORD *)(v133 + 24) + v91);
            v94 = *(_QWORD *)(v90 + 24);
            vDSP_vsmul(v93, 1, (const float *)&__B, v93, 1, v64);
            vDSP_vsadd(v93, 1, (const float *)&v150, v93, 1, v64);
            vDSP_vadd(v93, 1, (const float *)(v94 + v91), 1, v93, 1, v64);
            vDSP_vsmul(v93, 1, (const float *)&v158, v93, 1, v64);
            v91 += v78;
            --v92;
          }
          while (v92);
        }
        v74 = v142 + v65;
        v73 = &v139[(unint64_t)v65 / 4];
        ++v145;
      }
      while (v145 != v140);
    }
  }
  else
  {
    v23 = a4[1];
    if ((unint64_t)(v23 - *a4) <= 0x1F)
      Espresso::throw_exception_selector<Espresso::generic_error>("batchnorm_grad for inference mode batchnorm needs batchnorm_coefs as the second input");
    v24 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, v23, 1);
    if (v24)
    {
      v25 = (std::__shared_weak_count *)*((_QWORD *)v24 + 21);
      __B = *((_QWORD *)v24 + 20);
      v153 = v25;
      if (v25)
      {
        v26 = (unint64_t *)&v25->__shared_owners_;
        do
          v27 = __ldxr(v26);
        while (__stxr(v27 + 1, v26));
      }
    }
    else
    {
      v25 = 0;
      __B = 0;
      v153 = 0;
    }
    if (*(int *)(v9 + 20) >= 1)
    {
      v149 = 0;
      do
      {
        v95 = 0;
        v96 = *(_QWORD *)(v9 + 8);
        v159 = *(_DWORD *)(v9 + 16);
        v158 = v96;
        v97 = 1;
        do
        {
          v98 = v97;
          v99 = *(_DWORD *)(v9 + 8 + v95);
          v97 *= v99;
          v95 += 4;
        }
        while (v95 != 12);
        v100 = *(_QWORD *)(v9 + 24);
        v101 = (std::__shared_weak_count *)operator new(0x60uLL);
        v102 = 0;
        v101->__shared_owners_ = 0;
        v101->__shared_weak_owners_ = 0;
        v101->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBEC70;
        v101[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA11D0;
        *(_OWORD *)&v101[2].__shared_weak_owners_ = 0u;
        *(_OWORD *)&v101[3].__shared_owners_ = 0u;
        v101[1].__shared_owners_ = v158;
        LODWORD(v101[1].__shared_weak_owners_) = v159;
        v101[2].__vftable = (std::__shared_weak_count_vtbl *)(v100 + 4 * v97 * v149);
        LOBYTE(v101[2].__shared_owners_) = 0;
        v150 = v101 + 1;
        v151 = v101;
        v158 = *(_QWORD *)(v154 + 8);
        v159 = *(_DWORD *)(v154 + 16);
        v103 = 1;
        do
        {
          v104 = v103;
          v105 = *(_DWORD *)(v154 + 8 + v102);
          v103 *= v105;
          v102 += 4;
        }
        while (v102 != 12);
        v106 = *(_QWORD *)(v154 + 24);
        v107 = (std::__shared_weak_count *)operator new(0x60uLL);
        v107->__shared_owners_ = 0;
        v108 = (unint64_t *)&v107->__shared_owners_;
        v107->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBEC70;
        v107->__shared_weak_owners_ = 0;
        v107[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA11D0;
        *(_OWORD *)&v107[2].__shared_weak_owners_ = 0u;
        *(_OWORD *)&v107[3].__shared_owners_ = 0u;
        v107[1].__shared_owners_ = v158;
        LODWORD(v107[1].__shared_weak_owners_) = v159;
        v107[2].__vftable = (std::__shared_weak_count_vtbl *)(v106 + 4 * v103 * v149);
        LOBYTE(v107[2].__shared_owners_) = 0;
        v109 = a1[76];
        if ((int)v109 > 0)
        {
          v110 = 0;
          v111 = 0;
          v112 = HIDWORD(v101[1].__shared_owners_) * LODWORD(v101[1].__shared_owners_);
          v113 = *(_QWORD *)(__B + 24);
          do
          {
            if (v112 >= 1)
            {
              v114 = (float *)(v100 + 4 * v149 * v98 * v99 + 4 * v111);
              v115 = (float *)(v106 + 4 * v149 * v104 * v105 + 4 * v111);
              v116 = (float *)(v113 + 16 * v110);
              v117 = *v116;
              v118 = v116[3];
              v119 = v112;
              v120 = 1.0 / v118;
              do
              {
                v121 = *v115++;
                *v114++ = v117 * (float)(v120 * v121);
                --v119;
              }
              while (v119);
            }
            ++v110;
            v111 += v112;
          }
          while (v110 != v109);
        }
        do
          v122 = __ldaxr(v108);
        while (__stlxr(v122 - 1, v108));
        if (!v122)
        {
          ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
          std::__shared_weak_count::__release_weak(v107);
        }
        if (v151)
        {
          v123 = &v151->__shared_owners_;
          do
            v124 = __ldaxr((unint64_t *)v123);
          while (__stlxr(v124 - 1, (unint64_t *)v123));
          if (!v124)
          {
            ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
            std::__shared_weak_count::__release_weak(v151);
          }
        }
        v9 = v156;
        ++v149;
      }
      while (v149 < *(_DWORD *)(v156 + 20));
      v25 = v153;
    }
    if (v25)
    {
      v125 = (unint64_t *)&v25->__shared_owners_;
      do
        v126 = __ldaxr(v125);
      while (__stlxr(v126 - 1, v125));
      if (!v126)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
  }
  v127 = v155;
  if (v155)
  {
    v128 = (unint64_t *)&v155->__shared_owners_;
    do
      v129 = __ldaxr(v128);
    while (__stlxr(v129 - 1, v128));
    if (!v129)
    {
      ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
      std::__shared_weak_count::__release_weak(v127);
    }
  }
  v130 = v157;
  if (v157)
  {
    v131 = (unint64_t *)&v157->__shared_owners_;
    do
      v132 = __ldaxr(v131);
    while (__stlxr(v132 - 1, v131));
    if (!v132)
    {
      ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
      std::__shared_weak_count::__release_weak(v130);
    }
  }
}

void sub_191645F58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,char a27)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void Espresso::l2_normalize_grad_kernel_cpu::~l2_normalize_grad_kernel_cpu(Espresso::l2_normalize_grad_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::l2_normalize_grad_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  _QWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD *v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD *v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  BOOL v30;
  int v31;
  int v32;
  uint64_t v33;
  vDSP_Length v34;
  uint64_t v35;
  uint64_t v36;
  const float *v37;
  const float *v38;
  uint64_t v39;
  uint64_t v40;
  float *v41;
  float v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  uint64_t v55;
  uint64_t v56;
  float __B;
  float v58;
  float __C[10];
  void *__p;
  void *v61;
  _DWORD v62[5];
  int v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  uint64_t v70;
  std::__shared_weak_count *v71;

  v6 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a3, a3[1], 0);
  if (v6)
  {
    v7 = (std::__shared_weak_count *)v6[21];
    v56 = v6[20];
    v70 = v56;
    v71 = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
  }
  else
  {
    v56 = 0;
    v70 = 0;
    v71 = 0;
  }
  v11 = (uint64_t *)*a4;
  v10 = a4[1];
  v12 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, v10, 0);
  if (v12)
  {
    v13 = (std::__shared_weak_count *)v12[21];
    v55 = v12[20];
    v68 = v55;
    v69 = v13;
    if (v13)
    {
      v14 = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
      v11 = (uint64_t *)*a4;
      v10 = a4[1];
    }
  }
  else
  {
    v55 = 0;
    v68 = 0;
    v69 = 0;
  }
  v16 = Espresso::layer_data::get_blob<Espresso::blob_cpu>((uint64_t)v11, v10, 1);
  if (v16)
  {
    v18 = v16[20];
    v17 = (std::__shared_weak_count *)v16[21];
    v66 = v18;
    v67 = v17;
    if (v17)
    {
      v19 = (unint64_t *)&v17->__shared_owners_;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
      v11 = (uint64_t *)*a4;
      v10 = a4[1];
    }
  }
  else
  {
    v18 = 0;
    v66 = 0;
    v67 = 0;
  }
  v21 = Espresso::layer_data::get_blob<Espresso::blob_cpu>((uint64_t)v11, v10, 2);
  if (v21)
  {
    v23 = v21[20];
    v22 = (std::__shared_weak_count *)v21[21];
    v64 = v23;
    v65 = v22;
    if (v22)
    {
      v24 = (unint64_t *)&v22->__shared_owners_;
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 1, v24));
      v11 = (uint64_t *)*a4;
    }
  }
  else
  {
    v22 = 0;
    v23 = 0;
    v64 = 0;
    v65 = 0;
  }
  Espresso::abstract_blob_container::shape((char *)__C, *v11);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v62, (const Espresso::layer_shape *)__C, 0);
  v54 = v22;
  if (__p)
  {
    v61 = __p;
    operator delete(__p);
  }
  v26 = v63;
  if (v63 < 1)
  {
    v28 = 1;
    v29 = 1;
LABEL_39:
    v33 = 0;
    v34 = v29;
    v35 = v28;
    v36 = 4 * v29;
    do
    {
      v37 = (const float *)(*(_QWORD *)(v23 + 24) + v33);
      v38 = (const float *)(*(_QWORD *)(v55 + 24) + v33);
      v39 = *(_QWORD *)(v56 + 24);
      v40 = *(_QWORD *)(v18 + 24);
      __C[0] = 0.0;
      vDSP_dotpr(v37, 1, v38, 1, __C, v34);
      v41 = (float *)(v39 + v33);
      vDSP_vsmul(v37, 1, __C, v41, 1, v34);
      vDSP_vsub(v41, 1, v38, 1, v41, 1, v34);
      v58 = 0.0;
      vDSP_svesq((const float *)(v40 + v33), 1, &v58, v34);
      v42 = pow(v58 + 0.000001, -0.5);
      __B = v42;
      vDSP_vsmul(v41, 1, &__B, v41, 1, v34);
      v33 += v36;
      --v35;
    }
    while (v35);
    goto LABEL_41;
  }
  v27 = 0;
  v28 = 1;
  v29 = 1;
  do
  {
    v30 = v27++ <= *(int *)(a1 + 288);
    v31 = v62[(int)--v26];
    if (v30)
      v32 = v62[(int)v26];
    else
      v32 = 1;
    v29 *= v32;
    if (v30)
      v31 = 1;
    v28 *= v31;
  }
  while (v26);
  if (v28 >= 1)
    goto LABEL_39;
LABEL_41:
  if (v54)
  {
    v43 = (unint64_t *)&v54->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  v45 = v67;
  if (v67)
  {
    v46 = (unint64_t *)&v67->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  v48 = v69;
  if (v69)
  {
    v49 = (unint64_t *)&v69->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  v51 = v71;
  if (v71)
  {
    v52 = (unint64_t *)&v71->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
}

void sub_19164638C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,char a26)
{
  uint64_t v26;

  if (__p)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a26);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v26 - 136);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v26 - 120);
  _Unwind_Resume(a1);
}

const char *Espresso::generic_l2_normalize_grad_kernel::kernel_type_str(Espresso::generic_l2_normalize_grad_kernel *this)
{
  return "l2_normalize_grad";
}

void Espresso::inner_product_grad_kernel_cpu::~inner_product_grad_kernel_cpu(Espresso::inner_product_grad_kernel_cpu *this)
{
  void **v2;

  *(_QWORD *)this = off_1E2D9DD68;
  v2 = (void **)((char *)this + 280);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v2);
  Espresso::base_kernel::~base_kernel(this);
}

{
  void **v2;

  *(_QWORD *)this = off_1E2D9DD68;
  v2 = (void **)((char *)this + 280);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v2);
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::inner_product_grad_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  _QWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  const float *__B;
  unint64_t *v22;
  unint64_t v23;
  int v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  char v31[40];
  void *__p;
  void *v33;
  int v34;
  int v35;
  int v36;
  int v37;
  unsigned int v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  uint64_t v41;
  std::__shared_weak_count *v42;

  v6 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a3, a3[1], 0);
  if (v6)
  {
    v7 = (std::__shared_weak_count *)v6[21];
    v41 = v6[20];
    v42 = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
  }
  else
  {
    v41 = 0;
    v42 = 0;
  }
  v10 = *a4;
  v11 = a4[1];
  v12 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, v11, 0);
  if (v12)
  {
    v13 = (std::__shared_weak_count *)v12[21];
    v39 = v12[20];
    v40 = v13;
    if (v13)
    {
      v14 = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
      v10 = *a4;
      v11 = a4[1];
    }
  }
  else
  {
    v39 = 0;
    v40 = 0;
  }
  v16 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(v10, v11, 1);
  v17 = *((_QWORD *)v16 + 20);
  v18 = (std::__shared_weak_count *)*((_QWORD *)v16 + 21);
  if (v18)
  {
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    __B = *(const float **)(v17 + 24);
    v22 = (unint64_t *)&v18->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  else
  {
    __B = *(const float **)(v17 + 24);
  }
  Espresso::abstract_blob_container::shape(v31, *(_QWORD *)*a4);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v34, (const Espresso::layer_shape *)v31, 0);
  if (__p)
  {
    v33 = __p;
    operator delete(__p);
  }
  if (*(_BYTE *)(a1 + 344) || v38 <= 3)
  {
    switch(v38)
    {
      case 1u:
        v24 = 1;
        break;
      case 2u:
        goto LABEL_30;
      case 3u:
        goto LABEL_31;
      case 4u:
        v24 = v35 * v34 * v36;
        break;
      case 5u:
        v24 = v35 * v34 * v36 * v37;
        break;
      default:
        goto LABEL_32;
    }
  }
  else if (v38 == 5)
  {
LABEL_31:
    v24 = v35 * v34;
  }
  else if (v38 == 4)
  {
LABEL_30:
    v24 = v34;
  }
  else
  {
LABEL_32:
    v24 = 0;
  }
  cblas_sgemm(CblasRowMajor, CblasNoTrans, CblasNoTrans, v24, *(_DWORD *)(a1 + 308), *(_DWORD *)(a1 + 304), 1.0, *(const float **)(v39 + 24), *(_DWORD *)(a1 + 304), __B, *(_DWORD *)(a1 + 308), 0.0, *(float **)(v41 + 24), *(_DWORD *)(a1 + 308));
  v25 = v40;
  if (v40)
  {
    v26 = (unint64_t *)&v40->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = v42;
  if (v42)
  {
    v29 = (unint64_t *)&v42->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
}

void sub_191646718(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  uint64_t v20;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v20 - 64);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v20 - 48);
  _Unwind_Resume(a1);
}

void Espresso::inner_product_weights_grad_kernel_cpu::~inner_product_weights_grad_kernel_cpu(Espresso::inner_product_weights_grad_kernel_cpu *this)
{
  void **v2;

  *(_QWORD *)this = off_1E2D9DD68;
  v2 = (void **)((char *)this + 280);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v2);
  Espresso::base_kernel::~base_kernel(this);
}

{
  void **v2;

  *(_QWORD *)this = off_1E2D9DD68;
  v2 = (void **)((char *)this + 280);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v2);
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::inner_product_weights_grad_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  _QWORD *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  void *v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  int v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  char v32[40];
  void *__p;
  void *v34;
  int v35;
  int v36;
  int v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;

  v6 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a3, a3[1], 0);
  if (v6)
  {
    v8 = v6[20];
    v7 = (std::__shared_weak_count *)v6[21];
    v44 = v8;
    v45 = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
    }
  }
  else
  {
    v8 = 0;
    v44 = 0;
    v45 = 0;
  }
  v12 = (uint64_t *)*a4;
  v11 = a4[1];
  v13 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, v11, 0);
  if (v13)
  {
    v15 = v13[20];
    v14 = (std::__shared_weak_count *)v13[21];
    v42 = v15;
    v43 = v14;
    if (v14)
    {
      v16 = (unint64_t *)&v14->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
      v12 = (uint64_t *)*a4;
      v11 = a4[1];
    }
  }
  else
  {
    v15 = 0;
    v42 = 0;
    v43 = 0;
  }
  v18 = Espresso::layer_data::get_blob<Espresso::blob_cpu>((uint64_t)v12, v11, 1);
  if (v18)
  {
    v20 = *((_QWORD *)v18 + 20);
    v19 = (std::__shared_weak_count *)*((_QWORD *)v18 + 21);
    v40 = v20;
    v41 = v19;
    if (v19)
    {
      v21 = (unint64_t *)&v19->__shared_owners_;
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
      v12 = (uint64_t *)*a4;
    }
  }
  else
  {
    v19 = 0;
    v20 = 0;
    v40 = 0;
    v41 = 0;
  }
  Espresso::abstract_blob_container::shape(v32, *v12);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v35, (const Espresso::layer_shape *)v32, 0);
  if (__p)
  {
    v34 = __p;
    operator delete(__p);
  }
  if (*(_BYTE *)(a1 + 344) || v39 <= 3)
  {
    switch(v39)
    {
      case 1u:
        v23 = 1;
        break;
      case 2u:
        goto LABEL_28;
      case 3u:
        goto LABEL_29;
      case 4u:
        v23 = v36 * v35 * v37;
        break;
      case 5u:
        v23 = v36 * v35 * v37 * v38;
        break;
      default:
        goto LABEL_30;
    }
  }
  else if (v39 == 5)
  {
LABEL_29:
    v23 = v36 * v35;
  }
  else if (v39 == 4)
  {
LABEL_28:
    v23 = v35;
  }
  else
  {
LABEL_30:
    v23 = 0;
  }
  cblas_sgemm(CblasRowMajor, CblasTrans, CblasNoTrans, *(_DWORD *)(a1 + 304), *(_DWORD *)(a1 + 308), v23, 1.0, *(const float **)(v15 + 24), *(_DWORD *)(a1 + 304), *(const float **)(v20 + 24), *(_DWORD *)(a1 + 308), 0.0, *(float **)(v8 + 24), *(_DWORD *)(a1 + 308));
  if (v19)
  {
    v24 = (unint64_t *)&v19->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v26 = v43;
  if (v43)
  {
    v27 = (unint64_t *)&v43->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = v45;
  if (v45)
  {
    v30 = (unint64_t *)&v45->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
}

void sub_191646AA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  uint64_t v20;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v20 - 112);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v20 - 96);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v20 - 80);
  _Unwind_Resume(a1);
}

void Espresso::elementwise_grad_kernel_cpu::~elementwise_grad_kernel_cpu(Espresso::elementwise_grad_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::elementwise_grad_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  void *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  void *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::runtime_error *exception;
  uint64_t v25;
  std::__shared_weak_count *v26;

  v6 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, a4[1], 0);
  if (v6)
  {
    v7 = (std::__shared_weak_count *)*((_QWORD *)v6 + 21);
    v25 = *((_QWORD *)v6 + 20);
    v26 = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
  }
  else
  {
    v7 = 0;
    v25 = 0;
    v26 = 0;
  }
  if (*(_DWORD *)(a1 + 280))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "not supported");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v10 = *a3;
  v11 = a3[1];
  if (v11 != *a3)
  {
    v12 = 0;
    do
    {
      v13 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(v10, v11, v12);
      if (v13)
      {
        v14 = *((_QWORD *)v13 + 20);
        v15 = (std::__shared_weak_count *)*((_QWORD *)v13 + 21);
        if (v15)
        {
          v16 = (unint64_t *)&v15->__shared_owners_;
          do
            v17 = __ldxr(v16);
          while (__stxr(v17 + 1, v16));
          v18 = *(void **)(v14 + 24);
          do
            v19 = __ldaxr(v16);
          while (__stlxr(v19 - 1, v16));
          if (!v19)
          {
            ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
            std::__shared_weak_count::__release_weak(v15);
          }
        }
        else
        {
          v18 = *(void **)(v14 + 24);
        }
      }
      else
      {
        v18 = (void *)MEMORY[0x18];
      }
      v20 = 0;
      v21 = *(int *)(v25 + 8);
      do
      {
        v21 *= *(int *)(v25 + 12 + v20);
        v20 += 4;
      }
      while (v20 != 12);
      memcpy(v18, *(const void **)(v25 + 24), 4 * v21);
      ++v12;
      v10 = *a3;
      v11 = a3[1];
    }
    while (v12 < (v11 - *a3) >> 4);
    v7 = v26;
  }
  if (v7)
  {
    v22 = (unint64_t *)&v7->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_191646CCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void Espresso::dropout_grad_kernel_cpu::~dropout_grad_kernel_cpu(Espresso::dropout_grad_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::dropout_grad_kernel_cpu::__launch(uint64_t a1, uint64_t a2, void ***a3, void ***a4)
{
  float v5;
  unint64_t v6;
  __n128 v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;

  v5 = *(float *)(a1 + 280);
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v28, **a3, (std::__shared_weak_count *)(*a3)[1]);
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v26, (*a4)[2], (std::__shared_weak_count *)(*a4)[3]);
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v24, **a4, (std::__shared_weak_count *)(*a4)[1]);
  v6 = 0;
  v7.n128_f64[0] = 1.0 / (1.0 - v5);
  v7.n128_f32[0] = v7.n128_f64[0];
  v8 = v28;
  v9 = *(int *)(v28 + 8);
  v10 = v24;
  v11 = v26;
  v12 = v28 + 12;
  while (1)
  {
    v13 = 0;
    v14 = v9;
    do
    {
      v14 *= *(int *)(v12 + v13);
      v13 += 4;
    }
    while (v13 != 12);
    if (v6 >= v14)
      break;
    *(float *)(*(_QWORD *)(v8 + 24) + 4 * v6) = (float)(*(float *)(*(_QWORD *)(v10 + 24) + 4 * v6)
                                                      * *(float *)(*(_QWORD *)(v11 + 24) + 4 * v6))
                                              * v7.n128_f32[0];
    ++v6;
  }
  v15 = v25;
  if (v25)
  {
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v15->__on_zero_shared)(v15, v7);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = v27;
  if (v27)
  {
    v19 = (unint64_t *)&v27->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v18->__on_zero_shared)(v18, v7);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = v29;
  if (v29)
  {
    v22 = (unint64_t *)&v29->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v21->__on_zero_shared)(v21, v7);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
}

void sub_191646EA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

const char *Espresso::generic_dropout_grad_kernel::kernel_type_str(Espresso::generic_dropout_grad_kernel *this)
{
  return "dropout_grad";
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::dropout_params,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

void Espresso::MPSGraphEngine::Kernels::stack_nd_kernel::~stack_nd_kernel(Espresso::MPSGraphEngine::Kernels::stack_nd_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

uint64_t Espresso::MPSGraphEngine::Kernels::stack_nd_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::string *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  int64x2_t *v36;
  std::__shared_weak_count *v37;
  int64x2_t *v38;
  std::__shared_weak_count *v39;
  std::string v40;
  std::string v41;
  std::string __p;
  _BYTE v43[24];
  _BYTE v44[32];
  std::__shared_weak_count *v45;
  int64x2_t *v46;
  std::__shared_weak_count *v47;
  void **v48;

  v5 = a3[4] - a3[3];
  if (v5 != 64)
  {
    v12 = *(std::__shared_weak_count **)(a2 + 8);
    v46 = *(int64x2_t **)a2;
    v47 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
      v5 = a3[4] - a3[3];
    }
    std::to_string(&v40, v5 >> 6);
    v15 = std::string::insert(&v40, 0, "[Dispatch::MPSGraph::stack_nd_kernel] unsupported: number of outputs must be 1, received ");
    v41 = *v15;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)&v41, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v46, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    v16 = v45;
    if (v45)
    {
      v17 = (unint64_t *)&v45->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v48 = (void **)v44;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v48);
    v48 = (void **)v43;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v48);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v41.__r_.__value_.__l.__data_);
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v40.__r_.__value_.__l.__data_);
    v19 = v47;
    if (!v47)
      return 0;
    v20 = (unint64_t *)&v47->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    goto LABEL_60;
  }
  v6 = *a3;
  v7 = a3[1] - *a3;
  if (!v7)
  {
    v22 = *(std::__shared_weak_count **)(a2 + 8);
    v38 = *(int64x2_t **)a2;
    v39 = v22;
    if (v22)
    {
      v23 = (unint64_t *)&v22->__shared_owners_;
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
    }
    std::string::basic_string[abi:ne180100]<0>(&v41, "[Dispatch::MPSGraph::stack_nd_kernel] unsupported: number of inputs must be at least 1");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)&v41, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v38, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    v25 = v45;
    if (v45)
    {
      v26 = (unint64_t *)&v45->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    v40.__r_.__value_.__r.__words[0] = (std::string::size_type)v44;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v40);
    v40.__r_.__value_.__r.__words[0] = (std::string::size_type)v43;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v40);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v41.__r_.__value_.__l.__data_);
    v19 = v39;
    if (!v39)
      return 0;
    v28 = (unint64_t *)&v39->__shared_owners_;
    do
      v21 = __ldaxr(v28);
    while (__stlxr(v21 - 1, v28));
    goto LABEL_60;
  }
  if ((unint64_t)v7 < 0x41)
    return 1;
  v8 = v7 >> 6;
  if (v8 <= 2)
    v8 = 2;
  v9 = v6 + 64;
  v10 = v8 - 1;
  while (Espresso::layer_shape::operator==(v6, v9))
  {
    v9 += 64;
    if (!--v10)
      return 1;
  }
  v29 = *(std::__shared_weak_count **)(a2 + 8);
  v36 = *(int64x2_t **)a2;
  v37 = v29;
  if (v29)
  {
    v30 = (unint64_t *)&v29->__shared_owners_;
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  std::string::basic_string[abi:ne180100]<0>(&v41, "[Dispatch::MPSGraph::stack_nd_kernel] unsupported: all inputs must be same shape and rank");
  Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)&v41, (uint64_t)a3, 0);
  Espresso::emit_kernel_validation_warning(&v36, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
  v32 = v45;
  if (v45)
  {
    v33 = (unint64_t *)&v45->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v40.__r_.__value_.__r.__words[0] = (std::string::size_type)v44;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v40);
  v40.__r_.__value_.__r.__words[0] = (std::string::size_type)v43;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v40);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v41.__r_.__value_.__l.__data_);
  v19 = v37;
  if (v37)
  {
    v35 = (unint64_t *)&v37->__shared_owners_;
    do
      v21 = __ldaxr(v35);
    while (__stlxr(v21 - 1, v35));
LABEL_60:
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  return 0;
}

void sub_1916472D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26)
{
  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t(&a26);
  if (a25 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void H12GPUHeuristics::~H12GPUHeuristics(H12GPUHeuristics *this)
{
  H12GPUHeuristics::~H12GPUHeuristics(this);
  JUMPOUT(0x19401CD90);
}

{
  char *v2;

  *(_QWORD *)this = &off_1E2D55D20;
  v2 = (char *)this + 8;
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)this + 88);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)this + 48);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)v2);
}

float H12GPUHeuristics::get_af_read_bw(uint64_t a1, int a2)
{
  uint64_t *v2;

  v2 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((_QWORD *)(a1 + 8), a2);
  if (!v2)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  return *((float *)v2 + 5);
}

float H12GPUHeuristics::get_af_write_bw(uint64_t a1, int a2)
{
  uint64_t *v2;

  v2 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((_QWORD *)(a1 + 8), a2);
  if (!v2)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  return *((float *)v2 + 5);
}

float H12GPUHeuristics::get_af_aggregate_bw(uint64_t a1, int a2)
{
  uint64_t *v2;

  v2 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((_QWORD *)(a1 + 8), a2);
  if (!v2)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  return *((float *)v2 + 5) + *((float *)v2 + 5);
}

float H12GPUHeuristics::get_aggregate_local_cache_read_bw(uint64_t a1, int a2)
{
  uint64_t *v2;

  v2 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((_QWORD *)(a1 + 88), a2);
  if (!v2)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  return (float)((float)(*((float *)v2 + 5) * 64.0) * 4.0) * 9.3132e-10;
}

float H12GPUHeuristics::get_aggregate_local_cache_write_bw(uint64_t a1, int a2)
{
  uint64_t *v2;

  v2 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((_QWORD *)(a1 + 88), a2);
  if (!v2)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  return (float)((float)(*((float *)v2 + 5) * 64.0) * 4.0) * 9.3132e-10;
}

float H12GPUHeuristics::get_aggregate_read_bw(uint64_t a1, uint64_t a2)
{
  float v4;

  v4 = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, 2);
  return (float)((*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(a1, a2) * 0.1) + (float)(v4 * 0.8);
}

float H12GPUHeuristics::get_aggregate_write_bw(uint64_t a1, uint64_t a2)
{
  float v4;

  v4 = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, 2);
  return (float)((*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 48))(a1, a2) * 0.1) + (float)(v4 * 0.8);
}

float H12GPUHeuristics::get_flops_per_sec(uint64_t a1, int a2)
{
  uint64_t *v2;

  v2 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((_QWORD *)(a1 + 88), a2);
  if (!v2)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  return *((float *)v2 + 5) * 384.0;
}

uint64_t H12GPUHeuristics::get_highest_device_pstate(H12GPUHeuristics *this)
{
  return 4;
}

float H12GPUHeuristics::get_dram_bw(uint64_t a1, int a2)
{
  uint64_t *v2;

  v2 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((_QWORD *)(a1 + 48), a2);
  if (!v2)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  return *((float *)v2 + 5);
}

void newpGPUHeuristics::~newpGPUHeuristics(newpGPUHeuristics *this)
{
  newpGPUHeuristics::~newpGPUHeuristics(this);
  JUMPOUT(0x19401CD90);
}

{
  char *v2;

  *(_QWORD *)this = &off_1E2D56580;
  v2 = (char *)this + 8;
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)this + 88);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)this + 48);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)v2);
}

float newpGPUHeuristics::get_af_read_bw(uint64_t a1, int a2)
{
  uint64_t *v2;

  v2 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((_QWORD *)(a1 + 8), a2);
  if (!v2)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  return *((float *)v2 + 5);
}

float newpGPUHeuristics::get_af_write_bw(uint64_t a1, int a2)
{
  uint64_t *v2;

  v2 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((_QWORD *)(a1 + 8), a2);
  if (!v2)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  return *((float *)v2 + 5);
}

float newpGPUHeuristics::get_aggregate_local_cache_read_bw(uint64_t a1, int a2)
{
  uint64_t *v2;

  v2 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((_QWORD *)(a1 + 88), a2);
  if (!v2)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  return (float)((float)(*((float *)v2 + 5) * 64.0) * 4.0) * 9.3132e-10;
}

float newpGPUHeuristics::get_aggregate_local_cache_write_bw(uint64_t a1, int a2)
{
  uint64_t *v2;

  v2 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((_QWORD *)(a1 + 88), a2);
  if (!v2)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  return (float)((float)(*((float *)v2 + 5) * 64.0) * 4.0) * 9.3132e-10;
}

float newpGPUHeuristics::get_aggregate_read_bw(uint64_t a1, uint64_t a2)
{
  float v4;

  v4 = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, 2);
  return (float)((*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(a1, a2) * 0.1) + (float)(v4 * 0.8);
}

float newpGPUHeuristics::get_aggregate_write_bw(uint64_t a1, uint64_t a2)
{
  float v4;

  v4 = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, 2);
  return (float)((*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 48))(a1, a2) * 0.1) + (float)(v4 * 0.8);
}

float newpGPUHeuristics::get_dram_bw(uint64_t a1, int a2)
{
  uint64_t *v2;

  v2 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((_QWORD *)(a1 + 48), a2);
  if (!v2)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  return *((float *)v2 + 5);
}

void JadeGPUHeuristics::~JadeGPUHeuristics(JadeGPUHeuristics *this)
{
  JadeGPUHeuristics::~JadeGPUHeuristics(this);
  JUMPOUT(0x19401CD90);
}

{
  char *v2;

  *(_QWORD *)this = &off_1E2D56460;
  v2 = (char *)this + 8;
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)this + 88);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)this + 48);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)v2);
}

float JadeGPUHeuristics::get_af_read_bw(uint64_t a1, int a2)
{
  uint64_t *v2;

  v2 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((_QWORD *)(a1 + 8), a2);
  if (!v2)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  return *((float *)v2 + 5);
}

float JadeGPUHeuristics::get_af_write_bw(uint64_t a1, int a2)
{
  uint64_t *v2;

  v2 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((_QWORD *)(a1 + 8), a2);
  if (!v2)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  return *((float *)v2 + 5);
}

float JadeGPUHeuristics::get_af_aggregate_bw(uint64_t a1, int a2)
{
  uint64_t *v2;

  v2 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((_QWORD *)(a1 + 8), a2);
  if (!v2)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  return *((float *)v2 + 5) + *((float *)v2 + 5);
}

float JadeGPUHeuristics::get_aggregate_local_cache_read_bw(uint64_t a1, int a2)
{
  uint64_t *v2;

  v2 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((_QWORD *)(a1 + 88), a2);
  if (!v2)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  return (float)((float)(*((float *)v2 + 5) * 64.0) * 32.0) * 9.3132e-10;
}

float JadeGPUHeuristics::get_aggregate_local_cache_write_bw(uint64_t a1, int a2)
{
  uint64_t *v2;

  v2 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((_QWORD *)(a1 + 88), a2);
  if (!v2)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  return (float)((float)(*((float *)v2 + 5) * 64.0) * 32.0) * 9.3132e-10;
}

float JadeGPUHeuristics::get_aggregate_read_bw(uint64_t a1, uint64_t a2)
{
  float v4;

  v4 = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, 2);
  return (float)((*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(a1, a2) * 0.1) + (float)(v4 * 0.8);
}

float JadeGPUHeuristics::get_aggregate_write_bw(uint64_t a1, uint64_t a2)
{
  float v4;

  v4 = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, 2);
  return (float)((*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 48))(a1, a2) * 0.1) + (float)(v4 * 0.8);
}

float JadeGPUHeuristics::get_flops_per_sec(uint64_t a1, int a2)
{
  uint64_t *v2;
  float v3;
  _QWORD block[4];
  float v6;

  v2 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((_QWORD *)(a1 + 88), a2);
  if (!v2)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v3 = *((float *)v2 + 5) * 4096.0;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZNK17JadeGPUHeuristics17get_flops_per_secE13Device_PState12Compute_Path_block_invoke;
  block[3] = &__block_descriptor_36_e5_v8__0l;
  v6 = v3;
  if (JadeGPUHeuristics::get_flops_per_sec(Device_PState,Compute_Path)const::onceToken != -1)
    dispatch_once(&JadeGPUHeuristics::get_flops_per_sec(Device_PState,Compute_Path)const::onceToken, block);
  return v3;
}

uint64_t JadeGPUHeuristics::get_highest_device_pstate(JadeGPUHeuristics *this)
{
  return 5;
}

float JadeGPUHeuristics::get_dram_bw(uint64_t a1, int a2)
{
  uint64_t *v2;

  v2 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((_QWORD *)(a1 + 48), a2);
  if (!v2)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  return *((float *)v2 + 5);
}

void ___ZNK17JadeGPUHeuristics17get_flops_per_secE13Device_PState12Compute_Path_block_invoke(float *a1, const char *a2)
{
  NSObject *v3;
  double v4;
  int v5;
  double v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  Espresso::espresso_os_log_subsystem((Espresso *)a1, a2);
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    v4 = (float)(a1[8] / 1.0e12);
    v5 = 134217984;
    v6 = v4;
    _os_log_debug_impl(&dword_190DAF000, v3, OS_LOG_TYPE_DEBUG, "JadeGPUHeuristics tflops/s %f", (uint8_t *)&v5, 0xCu);
  }

}

void Espresso::MPSGraphEngine::Kernels::expand_dims_kernel::~expand_dims_kernel(Espresso::MPSGraphEngine::Kernels::expand_dims_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

BOOL Espresso::MPSGraphEngine::Kernels::expand_dims_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  int v8;
  std::string *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::string v17;
  std::string v18;
  std::string __p;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  int64x2_t *v23;
  std::__shared_weak_count *v24;
  void **v25;

  v3 = *(_DWORD *)(a1 + 280);
  if (v3)
  {
    v5 = *(std::__shared_weak_count **)(a2 + 8);
    v23 = *(int64x2_t **)a2;
    v24 = v5;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      v8 = *(_DWORD *)(a1 + 280);
    }
    else
    {
      v8 = v3;
    }
    std::to_string(&v17, v8);
    v9 = std::string::insert(&v17, 0, "[Dispatch::MPSGraph::expand_dims_kernel] unsupported: nd_axis ");
    v18 = *v9;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)&v18, a3, 0);
    Espresso::emit_kernel_validation_warning(&v23, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    v10 = v22;
    if (v22)
    {
      v11 = (unint64_t *)&v22->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    v25 = (void **)&v21;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v25);
    v25 = (void **)&v20;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v25);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v18.__r_.__value_.__l.__data_);
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v17.__r_.__value_.__l.__data_);
    v13 = v24;
    if (v24)
    {
      v14 = (unint64_t *)&v24->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
  return v3 == 0;
}

void sub_191647E50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22)
{
  uint64_t v22;

  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t(&a22);
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v22 - 56);
  _Unwind_Resume(a1);
}

uint64_t Espresso::Util::BlobOperation::elementwise<unsigned char,float,float,int>(uint64_t result, int *a2, uint64_t a3, int *a4, uint64_t a5, int *a6, uint64_t a7, int *a8, void (***a9)(_QWORD, unint64_t, unint64_t, unint64_t, uint64_t))
{
  int v9;
  unint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  int v54;
  int v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  int v88;
  int v89;
  unint64_t v93;

  v50 = result;
  v9 = a2[4];
  if (v9)
  {
    v59 = 0;
    result = 0;
    LODWORD(v11) = *a2;
    v12 = a2[1];
    v13 = v12 * *a2;
    v14 = a2[2];
    v15 = a2[3];
    v69 = v14 * v13;
    v16 = *a4;
    v89 = a4[1];
    v80 = v89 * *a4;
    v79 = a4[2];
    v67 = v79 * v80;
    v68 = a4[3];
    v57 = a4[4];
    v17 = *a6;
    v88 = a6[1];
    v78 = v88 * *a6;
    v77 = a6[2];
    v65 = v77 * v78;
    v66 = a6[3];
    v18 = *a8;
    v87 = a8[1];
    v76 = v87 * *a8;
    v75 = a8[2];
    v81 = v12 * (int)v11;
    v56 = v14 * (uint64_t)v15 * v13;
    v55 = a6[4];
    v63 = v75 * v76;
    v64 = a8[3];
    v54 = a8[4];
    v19 = v11;
    v20 = v12;
    v21 = v14;
    v22 = v15;
    do
    {
      v23 = result;
      v24 = v67 * v68 * result;
      if (v57 == 1)
        v24 = 0;
      v25 = v65 * v66 * result;
      if (v55 == 1)
        v25 = 0;
      v58 = v23;
      v26 = v63 * v64 * v23;
      if (v54 == 1)
        v26 = 0;
      if (v22)
      {
        v62 = *(_QWORD *)(*(_QWORD *)a3 + 24) + 4 * v24;
        v60 = *(_QWORD *)(*(_QWORD *)a7 + 24) + 4 * v26;
        v61 = *(_QWORD *)(*(_QWORD *)a5 + 24) + 4 * v25;
        v71 = *(_QWORD *)(*(_QWORD *)v50 + 24) + v59;
        v27 = 0;
        do
        {
          v28 = v27 * v67;
          if ((_DWORD)v68 == 1)
            v28 = 0;
          if ((_DWORD)v66 == 1)
            v29 = 0;
          else
            v29 = v27 * v65;
          v70 = v27;
          v30 = v27 * v63;
          if ((_DWORD)v64 == 1)
            v30 = 0;
          if (v21)
          {
            v74 = v62 + 4 * v28;
            v31 = 0;
            v73 = v61 + 4 * v29;
            v86 = v71;
            v72 = v60 + 4 * v30;
            do
            {
              v32 = v31 * v80;
              v33 = v31;
              if (v79 == 1)
                v32 = 0;
              v34 = v31 * v78;
              if (v77 == 1)
                v34 = 0;
              v82 = v33;
              v35 = v33 * v76;
              if (v75 == 1)
                v35 = 0;
              if (v20)
              {
                v36 = 0;
                v85 = v74 + 4 * v32;
                v84 = v73 + 4 * v34;
                v83 = v72 + 4 * v35;
                do
                {
                  v37 = v36 * *a4;
                  if (v89 == 1)
                    v37 = 0;
                  v38 = v36 * *a6;
                  if (v88 == 1)
                    v38 = 0;
                  v39 = v36 * *a8;
                  if (v87 == 1)
                    v39 = 0;
                  if ((_DWORD)v11)
                  {
                    v40 = 0;
                    v41 = v85 + 4 * v37;
                    v42 = v84 + 4 * v38;
                    v93 = v36;
                    v43 = v86 + v36 * v19;
                    v44 = v83 + 4 * v39;
                    do
                    {
                      if (v16 == 1)
                        v45 = 0;
                      else
                        v45 = v40;
                      v46 = v41 + 4 * v45;
                      if (v17 == 1)
                        v47 = 0;
                      else
                        v47 = v40;
                      v48 = v42 + 4 * v47;
                      if (v18 == 1)
                        v49 = 0;
                      else
                        v49 = v40;
                      (**a9)(a9, v43 + v40++, v46, v48, v44 + 4 * v49);
                      v11 = *a2;
                    }
                    while (v40 < v11);
                    v12 = a2[1];
                    v36 = v93;
                  }
                  ++v36;
                  v19 = v11;
                }
                while (v36 < v12);
                v14 = a2[2];
                v19 = v11;
                v20 = v12;
              }
              v31 = v82 + 1;
              v86 += v81;
            }
            while (v82 + 1 < (unint64_t)v14);
            v15 = a2[3];
            v21 = v14;
          }
          v27 = v70 + 1;
          v71 += v69;
        }
        while (v70 + 1 < (unint64_t)v15);
        v9 = a2[4];
        v22 = v15;
      }
      result = v58 + 1;
      v59 += v56;
    }
    while (v58 + 1 < (unint64_t)v9);
  }
  return result;
}

uint64_t Espresso::Util::BlobOperation::elementwise<unsigned char,unsigned short,float,int>(uint64_t result, int *a2, uint64_t a3, int *a4, uint64_t a5, int *a6, uint64_t a7, int *a8, void (***a9)(_QWORD, unint64_t, unint64_t, unint64_t, uint64_t))
{
  int v9;
  unint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  int v54;
  int v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  int v88;
  int v89;
  unint64_t v93;

  v50 = result;
  v9 = a2[4];
  if (v9)
  {
    v59 = 0;
    result = 0;
    LODWORD(v11) = *a2;
    v12 = a2[1];
    v13 = v12 * *a2;
    v14 = a2[2];
    v15 = a2[3];
    v69 = v14 * v13;
    v16 = *a4;
    v89 = a4[1];
    v80 = v89 * *a4;
    v79 = a4[2];
    v67 = v79 * v80;
    v68 = a4[3];
    v57 = a4[4];
    v17 = *a6;
    v88 = a6[1];
    v78 = v88 * *a6;
    v77 = a6[2];
    v65 = v77 * v78;
    v66 = a6[3];
    v18 = *a8;
    v87 = a8[1];
    v76 = v87 * *a8;
    v75 = a8[2];
    v81 = v12 * (int)v11;
    v56 = v14 * (uint64_t)v15 * v13;
    v55 = a6[4];
    v63 = v75 * v76;
    v64 = a8[3];
    v54 = a8[4];
    v19 = v11;
    v20 = v12;
    v21 = v14;
    v22 = v15;
    do
    {
      v23 = result;
      v24 = v67 * v68 * result;
      if (v57 == 1)
        v24 = 0;
      v25 = v65 * v66 * result;
      if (v55 == 1)
        v25 = 0;
      v58 = v23;
      v26 = v63 * v64 * v23;
      if (v54 == 1)
        v26 = 0;
      if (v22)
      {
        v62 = *(_QWORD *)(*(_QWORD *)a3 + 24) + 2 * v24;
        v60 = *(_QWORD *)(*(_QWORD *)a7 + 24) + 4 * v26;
        v61 = *(_QWORD *)(*(_QWORD *)a5 + 24) + 4 * v25;
        v71 = *(_QWORD *)(*(_QWORD *)v50 + 24) + v59;
        v27 = 0;
        do
        {
          v28 = v27 * v67;
          if ((_DWORD)v68 == 1)
            v28 = 0;
          if ((_DWORD)v66 == 1)
            v29 = 0;
          else
            v29 = v27 * v65;
          v70 = v27;
          v30 = v27 * v63;
          if ((_DWORD)v64 == 1)
            v30 = 0;
          if (v21)
          {
            v74 = v62 + 2 * v28;
            v31 = 0;
            v73 = v61 + 4 * v29;
            v86 = v71;
            v72 = v60 + 4 * v30;
            do
            {
              v32 = v31 * v80;
              v33 = v31;
              if (v79 == 1)
                v32 = 0;
              v34 = v31 * v78;
              if (v77 == 1)
                v34 = 0;
              v82 = v33;
              v35 = v33 * v76;
              if (v75 == 1)
                v35 = 0;
              if (v20)
              {
                v36 = 0;
                v85 = v74 + 2 * v32;
                v84 = v73 + 4 * v34;
                v83 = v72 + 4 * v35;
                do
                {
                  v37 = v36 * *a4;
                  if (v89 == 1)
                    v37 = 0;
                  v38 = v36 * *a6;
                  if (v88 == 1)
                    v38 = 0;
                  v39 = v36 * *a8;
                  if (v87 == 1)
                    v39 = 0;
                  if ((_DWORD)v11)
                  {
                    v40 = 0;
                    v41 = v85 + 2 * v37;
                    v42 = v84 + 4 * v38;
                    v93 = v36;
                    v43 = v86 + v36 * v19;
                    v44 = v83 + 4 * v39;
                    do
                    {
                      if (v16 == 1)
                        v45 = 0;
                      else
                        v45 = v40;
                      v46 = v41 + 2 * v45;
                      if (v17 == 1)
                        v47 = 0;
                      else
                        v47 = v40;
                      v48 = v42 + 4 * v47;
                      if (v18 == 1)
                        v49 = 0;
                      else
                        v49 = v40;
                      (**a9)(a9, v43 + v40++, v46, v48, v44 + 4 * v49);
                      v11 = *a2;
                    }
                    while (v40 < v11);
                    v12 = a2[1];
                    v36 = v93;
                  }
                  ++v36;
                  v19 = v11;
                }
                while (v36 < v12);
                v14 = a2[2];
                v19 = v11;
                v20 = v12;
              }
              v31 = v82 + 1;
              v86 += v81;
            }
            while (v82 + 1 < (unint64_t)v14);
            v15 = a2[3];
            v21 = v14;
          }
          v27 = v70 + 1;
          v71 += v69;
        }
        while (v70 + 1 < (unint64_t)v15);
        v9 = a2[4];
        v22 = v15;
      }
      result = v58 + 1;
      v59 += v56;
    }
    while (v58 + 1 < (unint64_t)v9);
  }
  return result;
}

uint64_t Espresso::Util::BlobOperation::elementwise<float,unsigned char,float,int>(uint64_t result, int *a2, uint64_t a3, int *a4, uint64_t a5, int *a6, uint64_t a7, int *a8, void (***a9)(_QWORD, uint64_t, uint64_t, unint64_t, uint64_t))
{
  int v9;
  uint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  int v57;
  int v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  int v91;
  int v92;
  unint64_t v96;
  uint64_t v97;

  v53 = result;
  v9 = a2[4];
  if (v9)
  {
    v62 = 0;
    v11 = 0;
    LODWORD(v12) = *a2;
    v13 = a2[1];
    v14 = v13 * *a2;
    v15 = a2[2];
    v16 = a2[3];
    v17 = *a4;
    v92 = a4[1];
    v83 = a4[2];
    v84 = v92 * *a4;
    v71 = v83 * v84;
    v72 = a4[3];
    v60 = a4[4];
    v18 = *a6;
    v91 = a6[1];
    v82 = v91 * *a6;
    v81 = a6[2];
    v69 = v81 * v82;
    v70 = a6[3];
    v19 = *a8;
    v90 = a8[1];
    v80 = v90 * *a8;
    v20 = v15 * (uint64_t)(int)v14;
    v59 = 4 * v20 * v16;
    v66 = 4 * v20;
    v67 = a8[2] * v80;
    v78 = 4 * v14;
    v79 = a8[2];
    v58 = a6[4];
    v68 = a8[3];
    v57 = a8[4];
    v21 = *a2;
    v22 = v13;
    v23 = v15;
    v24 = v16;
    do
    {
      v25 = v71 * v72 * v11;
      if (v60 == 1)
        v25 = 0;
      v26 = v69 * v70 * v11;
      if (v58 == 1)
        v26 = 0;
      v61 = v11;
      v27 = v67 * v68 * v11;
      if (v57 == 1)
        v27 = 0;
      if (v24)
      {
        v65 = *(_QWORD *)(*(_QWORD *)a3 + 24) + v25;
        v63 = *(_QWORD *)(*(_QWORD *)a7 + 24) + 4 * v27;
        v64 = *(_QWORD *)(*(_QWORD *)a5 + 24) + 4 * v26;
        v74 = *(_QWORD *)(*(_QWORD *)v53 + 24) + v62;
        v28 = 0;
        do
        {
          v29 = v28;
          if ((_DWORD)v72 == 1)
            v30 = 0;
          else
            v30 = v28 * v71;
          v31 = v29 * v69;
          if ((_DWORD)v70 == 1)
            v31 = 0;
          v73 = v29;
          v32 = v29 * v67;
          if ((_DWORD)v68 == 1)
            v32 = 0;
          if (v23)
          {
            v77 = v65 + v30;
            v89 = v74;
            v76 = v64 + 4 * v31;
            v33 = 0;
            v75 = v63 + 4 * v32;
            do
            {
              v34 = v33 * v84;
              v35 = v33;
              if (v83 == 1)
                v34 = 0;
              v36 = v33 * v82;
              if (v81 == 1)
                v36 = 0;
              v85 = v35;
              v37 = v35 * v80;
              if (v79 == 1)
                v37 = 0;
              if (v22)
              {
                v38 = 0;
                v39 = 0;
                v88 = v77 + v34;
                v87 = v76 + 4 * v36;
                v86 = v75 + 4 * v37;
                do
                {
                  v40 = v39 * *a4;
                  if (v92 == 1)
                    v40 = 0;
                  v41 = v39 * *a6;
                  if (v91 == 1)
                    v41 = 0;
                  v42 = v39 * *a8;
                  if (v90 == 1)
                    v42 = 0;
                  if ((_DWORD)v12)
                  {
                    v96 = v39;
                    v97 = v38;
                    v43 = 0;
                    v44 = v88 + v40;
                    v45 = v87 + 4 * v41;
                    v46 = v89 + v38 * v21;
                    v47 = v86 + 4 * v42;
                    do
                    {
                      if (v17 == 1)
                        v48 = 0;
                      else
                        v48 = v43;
                      v49 = v44 + v48;
                      if (v18 == 1)
                        v50 = 0;
                      else
                        v50 = v43;
                      v51 = v45 + 4 * v50;
                      if (v19 == 1)
                        v52 = 0;
                      else
                        v52 = v43;
                      (**a9)(a9, v46, v49, v51, v47 + 4 * v52);
                      ++v43;
                      v12 = *a2;
                      v46 += 4;
                    }
                    while (v43 < v12);
                    v13 = a2[1];
                    v39 = v96;
                    v38 = v97;
                  }
                  ++v39;
                  v38 += 4;
                  v21 = v12;
                }
                while (v39 < v13);
                v15 = a2[2];
                v21 = v12;
                v22 = v13;
              }
              v33 = v85 + 1;
              v89 += v78;
            }
            while (v85 + 1 < (unint64_t)v15);
            v16 = a2[3];
            v23 = v15;
          }
          v28 = v73 + 1;
          v74 += v66;
        }
        while (v73 + 1 < (unint64_t)v16);
        v9 = a2[4];
        v24 = v16;
      }
      v11 = v61 + 1;
      result = v59;
      v62 += v59;
    }
    while (v61 + 1 < (unint64_t)v9);
  }
  return result;
}

uint64_t Espresso::Util::BlobOperation::elementwise<unsigned short,unsigned char,float,int>(uint64_t result, int *a2, uint64_t a3, int *a4, uint64_t a5, int *a6, uint64_t a7, int *a8, void (***a9)(_QWORD, uint64_t, uint64_t, unint64_t, uint64_t))
{
  int v9;
  uint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  int v57;
  int v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  int v91;
  int v92;
  unint64_t v96;
  uint64_t v97;

  v53 = result;
  v9 = a2[4];
  if (v9)
  {
    v62 = 0;
    v11 = 0;
    LODWORD(v12) = *a2;
    v13 = a2[1];
    v14 = v13 * *a2;
    v15 = a2[2];
    v16 = a2[3];
    v17 = *a4;
    v92 = a4[1];
    v83 = a4[2];
    v84 = v92 * *a4;
    v71 = v83 * v84;
    v72 = a4[3];
    v60 = a4[4];
    v18 = *a6;
    v91 = a6[1];
    v82 = v91 * *a6;
    v81 = a6[2];
    v69 = v81 * v82;
    v70 = a6[3];
    v19 = *a8;
    v90 = a8[1];
    v80 = v90 * *a8;
    v20 = v15 * (uint64_t)(int)v14;
    v59 = 2 * v20 * v16;
    v66 = 2 * v20;
    v67 = a8[2] * v80;
    v78 = 2 * v14;
    v79 = a8[2];
    v58 = a6[4];
    v68 = a8[3];
    v57 = a8[4];
    v21 = *a2;
    v22 = v13;
    v23 = v15;
    v24 = v16;
    do
    {
      v25 = v71 * v72 * v11;
      if (v60 == 1)
        v25 = 0;
      v26 = v69 * v70 * v11;
      if (v58 == 1)
        v26 = 0;
      v61 = v11;
      v27 = v67 * v68 * v11;
      if (v57 == 1)
        v27 = 0;
      if (v24)
      {
        v65 = *(_QWORD *)(*(_QWORD *)a3 + 24) + v25;
        v63 = *(_QWORD *)(*(_QWORD *)a7 + 24) + 4 * v27;
        v64 = *(_QWORD *)(*(_QWORD *)a5 + 24) + 4 * v26;
        v74 = *(_QWORD *)(*(_QWORD *)v53 + 24) + v62;
        v28 = 0;
        do
        {
          v29 = v28;
          if ((_DWORD)v72 == 1)
            v30 = 0;
          else
            v30 = v28 * v71;
          v31 = v29 * v69;
          if ((_DWORD)v70 == 1)
            v31 = 0;
          v73 = v29;
          v32 = v29 * v67;
          if ((_DWORD)v68 == 1)
            v32 = 0;
          if (v23)
          {
            v77 = v65 + v30;
            v89 = v74;
            v76 = v64 + 4 * v31;
            v33 = 0;
            v75 = v63 + 4 * v32;
            do
            {
              v34 = v33 * v84;
              v35 = v33;
              if (v83 == 1)
                v34 = 0;
              v36 = v33 * v82;
              if (v81 == 1)
                v36 = 0;
              v85 = v35;
              v37 = v35 * v80;
              if (v79 == 1)
                v37 = 0;
              if (v22)
              {
                v38 = 0;
                v39 = 0;
                v88 = v77 + v34;
                v87 = v76 + 4 * v36;
                v86 = v75 + 4 * v37;
                do
                {
                  v40 = v39 * *a4;
                  if (v92 == 1)
                    v40 = 0;
                  v41 = v39 * *a6;
                  if (v91 == 1)
                    v41 = 0;
                  v42 = v39 * *a8;
                  if (v90 == 1)
                    v42 = 0;
                  if ((_DWORD)v12)
                  {
                    v96 = v39;
                    v97 = v38;
                    v43 = 0;
                    v44 = v88 + v40;
                    v45 = v87 + 4 * v41;
                    v46 = v89 + v38 * v21;
                    v47 = v86 + 4 * v42;
                    do
                    {
                      if (v17 == 1)
                        v48 = 0;
                      else
                        v48 = v43;
                      v49 = v44 + v48;
                      if (v18 == 1)
                        v50 = 0;
                      else
                        v50 = v43;
                      v51 = v45 + 4 * v50;
                      if (v19 == 1)
                        v52 = 0;
                      else
                        v52 = v43;
                      (**a9)(a9, v46, v49, v51, v47 + 4 * v52);
                      ++v43;
                      v12 = *a2;
                      v46 += 2;
                    }
                    while (v43 < v12);
                    v13 = a2[1];
                    v39 = v96;
                    v38 = v97;
                  }
                  ++v39;
                  v38 += 2;
                  v21 = v12;
                }
                while (v39 < v13);
                v15 = a2[2];
                v21 = v12;
                v22 = v13;
              }
              v33 = v85 + 1;
              v89 += v78;
            }
            while (v85 + 1 < (unint64_t)v15);
            v16 = a2[3];
            v23 = v15;
          }
          v28 = v73 + 1;
          v74 += v66;
        }
        while (v73 + 1 < (unint64_t)v16);
        v9 = a2[4];
        v24 = v16;
      }
      v11 = v61 + 1;
      result = v59;
      v62 += v59;
    }
    while (v61 + 1 < (unint64_t)v9);
  }
  return result;
}

void sub_19164900C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1916490AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;

  if (a14 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_19164915C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_191649208(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;

  if (a14 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_19164929C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_19164947C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)ETDataPoint;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<std::string,ETDataPoint_buffer>,std::__map_value_compare<std::string,std::__value_type<std::string,ETDataPoint_buffer>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ETDataPoint_buffer>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, _QWORD *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  _QWORD *v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v6 = (uint64_t **)v5;
        v8 = v5 + 4;
        if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, v5 + 4))
          break;
        v5 = *v6;
        v9 = v6;
        if (!*v6)
          goto LABEL_9;
      }
      if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v8, a2))
        break;
      v9 = v6 + 1;
      v5 = v6[1];
      if (!v5)
        goto LABEL_9;
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_9:
    v10 = (uint64_t *)v6;
    v6 = (uint64_t **)operator new(0x50uLL);
    *((_OWORD *)v6 + 2) = *(_OWORD *)a3;
    v11 = *(uint64_t **)(a3 + 16);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    v6[6] = v11;
    v6[7] = 0;
    v6[8] = 0;
    v6[9] = 0;
    *v6 = 0;
    v6[1] = 0;
    v6[2] = v10;
    *v9 = (uint64_t *)v6;
    v12 = (uint64_t *)**a1;
    v13 = (uint64_t *)v6;
    if (v12)
    {
      *a1 = v12;
      v13 = *v9;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v13);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v6;
}

_OWORD *std::__tree<std::__value_type<std::string,vImage_Buffer>,std::__map_value_compare<std::string,std::__value_type<std::string,vImage_Buffer>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,vImage_Buffer>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, _QWORD *a2, _OWORD **a3)
{
  void **v5;
  _OWORD *v6;
  uint64_t **v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v11;

  v5 = (void **)std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = operator new(0x58uLL);
    v8 = *a3;
    v9 = *((_QWORD *)*a3 + 2);
    v6[2] = **a3;
    *((_QWORD *)v6 + 6) = v9;
    *v8 = 0;
    v8[1] = 0;
    v8[2] = 0;
    *(_OWORD *)((char *)v6 + 56) = 0u;
    *(_OWORD *)((char *)v6 + 72) = 0u;
    std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at(a1, v11, v7, (uint64_t *)v6);
  }
  return v6;
}

void sub_1916496E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_191649798(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1916498A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_191649B30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void sub_191649DAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  _Unwind_Resume(a1);
}

void sub_191649F48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18)
{
  void *v18;

  _Unwind_Resume(a1);
}

void sub_19164A128(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18)
{
  void *v18;
  void *v19;
  uint64_t v20;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v20 - 48);
  _Unwind_Resume(a1);
}

void sub_19164A7FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19164AE1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,char *a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,char a27,uint64_t a28,void *a29)
{
  void *v29;
  void *v30;
  uint64_t v31;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&a20, a21);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  Espresso::sequential_builder::~sequential_builder(&a29);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v31 - 192);

  _Unwind_Resume(a1);
}

void sub_19164B0F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_19164B234(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19164B5E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;
  void *v28;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  if (a27 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_19164BA24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;
  void *v28;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  if (a27 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_19164BB34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19164BBBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19164C13C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void *v5;
  uint64_t v6;
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  uint64_t v13;
  uint64_t v14;
  va_list va2;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va3;

  va_start(va3, a5);
  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v14 = va_arg(va3, _QWORD);
  v16 = va_arg(va3, _QWORD);
  v17 = va_arg(va3, _QWORD);
  v18 = va_arg(va3, _QWORD);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va3);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v6 - 96);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v6 - 80);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va2);

  _Unwind_Resume(a1);
}

void sub_19164C214(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19164C374(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19164C510(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19164C64C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void __assign_helper_atomic_property__81(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v3 = *a2;
  v2 = a2[1];
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = (std::__shared_weak_count *)a1[1];
  *a1 = v3;
  a1[1] = v2;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

_QWORD *__copy_helper_atomic_property__80(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = a2[1];
  *result = *a2;
  result[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

_QWORD *__assign_helper_atomic_property__8465(_QWORD *a1, uint64_t *a2)
{
  return std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](a1, *a2, a2[1]);
}

_QWORD *__copy_helper_atomic_property__8466(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = a2[1];
  *result = *a2;
  result[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void std::__shared_ptr_emplace<Espresso::weights_initializer>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBBEF0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::weights_initializer>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBBEF0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<std::string>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC26D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::string>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC26D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::pair<std::string const,Espresso::layer_training_transform_info>::~pair(uint64_t a1)
{
  void **v2;
  void **v4;

  v2 = (void **)(a1 + 24);
  v4 = (void **)(a1 + 48);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = v2;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void Espresso::throw_exception_selector<Espresso::not_implemented_error,unsigned long &>(int a1)
{
  Espresso::throw_exception_with_format<Espresso::not_implemented_error>("variable index == %d is not implemented", a1);
}

void std::__shared_ptr_emplace<Espresso::gradient_builder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB9B10;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::gradient_builder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB9B10;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::gradient_builder>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 24;
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(a1 + 88);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1 + 64, *(_QWORD *)(a1 + 72));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 48);
  return std::shared_ptr<void>::~shared_ptr[abi:ne180100](v2);
}

void sub_19164D550(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,char a49)
{
  uint64_t v49;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a49);
  Espresso::sequential_builder::~sequential_builder((void **)&STACK[0x200]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v49 - 152);
  _Unwind_Resume(a1);
}

void sub_19164DDA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
  void *v18;
  void *v19;

  if (a16 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a18);

  _Unwind_Resume(a1);
}

void sub_19164DE84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;

  _Unwind_Resume(a1);
}

void sub_19164E114(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19164E1F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_19164E724(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,void *a22)
{
  void *v22;

  _Unwind_Resume(a1);
}

void sub_19164E928(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19164EB14(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19164EBA8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19164EE38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  void *v21;
  void *v22;

  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  if (a20 < 0)
    operator delete(a15);

  _Unwind_Resume(a1);
}

void sub_19164F030(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void *v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::pair<std::string,std::shared_ptr<Espresso::abstract_blob_container>>::~pair((uint64_t)va1);

  _Unwind_Resume(a1);
}

size_t Espresso::debug::read_blob_f4(Espresso::debug *this, __sFILE *__stream)
{
  uint64_t v4;
  uint64_t v5;
  std::runtime_error *exception;
  __int128 v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = xmmword_191A93A60;
  if (!__stream)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Null file pointer");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  fread(&v8, 4uLL, 4uLL, __stream);
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(this, v8, SDWORD1(v8), SDWORD2(v8), SHIDWORD(v8));
  v4 = 0;
  v5 = *(int *)(*(_QWORD *)this + 8);
  do
  {
    v5 *= *(int *)(*(_QWORD *)this + 12 + v4);
    v4 += 4;
  }
  while (v4 != 12);
  return fread(*(void **)(*(_QWORD *)this + 24), 4 * v5, 1uLL, __stream);
}

void sub_19164F17C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19164F394(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19164F600(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19164F75C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,2>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,2>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,2>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, _QWORD *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t **v8;
  _QWORD *v10;
  _QWORD *v11;
  std::string *v12;
  uint64_t *v13;
  uint64_t *v14;
  _QWORD v16[2];
  char v17;

  v6 = a1 + 1;
  v5 = a1[1];
  v7 = a1 + 1;
  v8 = a1 + 1;
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v10 = v5 + 4;
        if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, v5 + 4))
          break;
        v5 = *v7;
        v8 = v7;
        if (!*v7)
          goto LABEL_7;
      }
      if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v10, a2))
        return v7;
      v8 = v7 + 1;
      v5 = v7[1];
      if (!v5)
        goto LABEL_7;
    }
  }
  else
  {
LABEL_7:
    v11 = operator new(0x48uLL);
    v16[0] = v11;
    v16[1] = v6;
    v17 = 0;
    v12 = (std::string *)(v11 + 4);
    if (*(char *)(a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
    }
    else
    {
      *(_OWORD *)&v12->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
      v11[6] = *(_QWORD *)(a3 + 16);
    }
    v11[7] = 0;
    v11[8] = 0;
    v17 = 1;
    *v11 = 0;
    v11[1] = 0;
    v11[2] = v7;
    *v8 = v11;
    v13 = (uint64_t *)**a1;
    v14 = v11;
    if (v13)
    {
      *a1 = v13;
      v14 = *v8;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v14);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    v16[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>>>>::reset[abi:ne180100]((uint64_t)v16);
  }
  return (uint64_t **)v11;
}

void sub_19164F8BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void Espresso::throw_exception_selector<Espresso::generic_error,char const*,unsigned long &>(const char *a1, int a2)
{
  Espresso::throw_exception_with_format<Espresso::generic_error>("Index of %s out of range %d", a1, a2);
}

void sub_19164F980(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19164F9D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19164FAD8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19164FB7C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19164FD2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<int,ETDataPoint * {__strong}>,std::__map_value_compare<int,std::__value_type<int,ETDataPoint * {__strong}>,std::less<int>,true>,std::allocator<std::__value_type<int,ETDataPoint * {__strong}>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<int,ETDataPoint * {__strong}>,std::__map_value_compare<int,std::__value_type<int,ETDataPoint * {__strong}>,std::less<int>,true>,std::allocator<std::__value_type<int,ETDataPoint * {__strong}>>>::destroy(*a1);
    std::__tree<std::__value_type<int,ETDataPoint * {__strong}>,std::__map_value_compare<int,std::__value_type<int,ETDataPoint * {__strong}>,std::less<int>,true>,std::allocator<std::__value_type<int,ETDataPoint * {__strong}>>>::destroy(a1[1]);

    operator delete(a1);
  }
}

void et_data_source::get_data_for_sample(id *this@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v5;
  et_data_source *v6;
  void *v7;
  char *v8;
  void *v9;
  const void *v10;
  _QWORD *v11;
  int v12;
  int v13;
  uint64_t v14;
  Espresso *v15;
  void *v16;
  char *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  et_data_source *v27;
  et_data_source *v28;
  BOOL v29;
  std::runtime_error *exception;
  unsigned int v31;
  __int128 v33;
  __int128 *v34;

  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  v5 = objc_msgSend(this[2], "numberOfDataPoints");
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Size of et_data_source is null");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v6 = (et_data_source *)this[3];
  if (v6 != (et_data_source *)(this + 4))
  {
    v31 = a2 % v5;
    do
    {
      objc_msgSend(this[2], "dataPointAtIndex:", v31);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = (char *)v6 + 32;
      if (*((char *)v6 + 55) < 0)
        v8 = (char *)*((_QWORD *)v6 + 4);
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v8);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = (const void *)objc_msgSend(v7, "bufferWithKey:", v9);

      v11 = operator new(0x60uLL);
      v11[1] = 0;
      v11[2] = 0;
      *v11 = &off_1E2DBECA8;
      v11[3] = &off_1E2DA11F0;
      v12 = *((_DWORD *)v6 + 14);
      v13 = *((_DWORD *)v6 + 15);
      v14 = *((int *)v6 + 16);
      *((_OWORD *)v11 + 4) = 0u;
      *((_OWORD *)v11 + 5) = 0u;
      *((_DWORD *)v11 + 8) = v12;
      *((_DWORD *)v11 + 9) = v13;
      *((_DWORD *)v11 + 10) = v14;
      *((_DWORD *)v11 + 11) = 1;
      v15 = (Espresso *)(4 * v12 * (uint64_t)v13 * v14);
      v16 = Espresso::kern_alloc_uninitialized(v15);
      bzero(v16, (size_t)v15);
      v11[6] = v16;
      *((_BYTE *)v11 + 56) = 1;
      *(_QWORD *)&v33 = v11 + 3;
      *((_QWORD *)&v33 + 1) = v11;
      v34 = (__int128 *)((char *)v6 + 32);
      v17 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a3, (unsigned __int8 *)v6 + 32, &v34);
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)(v17 + 40), &v33);
      v18 = (std::__shared_weak_count *)*((_QWORD *)&v33 + 1);
      if (*((_QWORD *)&v33 + 1))
      {
        v19 = (unint64_t *)(*((_QWORD *)&v33 + 1) + 8);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      *(_QWORD *)&v33 = (char *)v6 + 32;
      v21 = *(void **)(*((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a3, (unsigned __int8 *)v6 + 32, (__int128 **)&v33)+ 5)+ 24);
      *(_QWORD *)&v33 = (char *)v6 + 32;
      v22 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a3, (unsigned __int8 *)v6 + 32, (__int128 **)&v33);
      v23 = 0;
      v24 = *((_QWORD *)v22 + 5);
      v25 = *(int *)(v24 + 8);
      v26 = v24 + 12;
      do
      {
        v25 *= *(int *)(v26 + v23);
        v23 += 4;
      }
      while (v23 != 12);
      memcpy(v21, v10, 4 * v25);

      v27 = (et_data_source *)*((_QWORD *)v6 + 1);
      if (v27)
      {
        do
        {
          v28 = v27;
          v27 = *(et_data_source **)v27;
        }
        while (v27);
      }
      else
      {
        do
        {
          v28 = (et_data_source *)*((_QWORD *)v6 + 2);
          v29 = *(_QWORD *)v28 == (_QWORD)v6;
          v6 = v28;
        }
        while (!v29);
      }
      v6 = v28;
    }
    while (v28 != (et_data_source *)(this + 4));
  }
}

void sub_19165008C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  void *v14;

  __cxa_free_exception(v14);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::~__hash_table(a12);
  _Unwind_Resume(a1);
}

void et_data_source::~et_data_source(et_data_source *this)
{
  *(_QWORD *)this = &off_1E2D4DDC0;
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)this + 24, *((char **)this + 4));

}

{
  *(_QWORD *)this = &off_1E2D4DDC0;
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)this + 24, *((char **)this + 4));

  JUMPOUT(0x19401CD90);
}

uint64_t et_data_source::get_num_samples(id *this)
{
  return (int)objc_msgSend(this[2], "numberOfDataPoints");
}

void sub_19165020C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1916504A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_191650D68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,char a37,uint64_t a38,char a39)
{
  void *v39;

  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
  _Unwind_Resume(a1);
}

void sub_191652178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *__p)
{
  void *v57;

  if (__p)
    operator delete(__p);

  if (SLOBYTE(STACK[0x2AF]) < 0)
    operator delete((void *)STACK[0x298]);
  Espresso::sequential_builder::~sequential_builder((void **)&STACK[0x2E0]);
  Espresso::network_shape::~network_shape((char **)&STACK[0x3C8]);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&STACK[0x3F8], (char *)STACK[0x400]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x410]);

  _Unwind_Resume(a1);
}

void sub_1916526F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_191652DCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,char a24,uint64_t a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34,uint64_t a35,char a36)
{
  if (a33 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a36);

  _Unwind_Resume(a1);
}

void sub_19165349C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,char a43)
{
  void *v43;
  uint64_t v44;

  et_data_source::~et_data_source((et_data_source *)&a43);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v44 - 128);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v44 - 96);

  _Unwind_Resume(a1);
}

void sub_191653AD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,char a28,uint64_t a29,char *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,char a55,char *a56)
{
  void *v56;
  void *v57;

  a30 = &a52;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  std::__tree<std::string>::destroy((uint64_t)&a55, a56);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  _Unwind_Resume(a1);
}

void sub_191653D20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_191653E94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_19165400C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_191654184(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;

  _Unwind_Resume(a1);
}

void sub_191654624(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v3);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v2);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v4 - 96);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v4 - 80);

  _Unwind_Resume(a1);
}

void sub_191654914(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::pair<std::string,std::shared_ptr<Espresso::abstract_blob_container>>::~pair((uint64_t)&a13);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::~__hash_table((uint64_t)&a18);
  _Unwind_Resume(a1);
}

_QWORD *__copy_helper_block_ea8_40c55_ZTSNSt3__110shared_ptrIN8Espresso9MPSEngine7contextEEE56c41_ZTSNSt3__110shared_ptrIN8Espresso3netEEE(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = a2[6];
  result[5] = a2[5];
  result[6] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  v5 = a2[8];
  result[7] = a2[7];
  result[8] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return result;
}

uint64_t __destroy_helper_block_ea8_40c55_ZTSNSt3__110shared_ptrIN8Espresso9MPSEngine7contextEEE56c41_ZTSNSt3__110shared_ptrIN8Espresso3netEEE(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 + 40;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 56);
  return std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1);
}

void Espresso::net::all_globals(Espresso::net *this, uint64_t a2)
{
  unint64_t v2;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unsigned __int8 *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  char *v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  std::__shared_weak_count *v29;
  _QWORD v30[2];
  char v31;

  v5 = *(std::__shared_weak_count **)(a2 + 1096);
  if (!v5)
  {
    v6 = 0;
LABEL_6:
    v29 = v6;
    *(_OWORD *)this = 0u;
    *((_OWORD *)this + 1) = 0u;
    *((_DWORD *)this + 8) = *(_DWORD *)(a2 + 1472);
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__rehash<true>((uint64_t)this, *(_QWORD *)(a2 + 1448));
    v7 = *(unsigned __int8 **)(a2 + 1456);
    if (!v7)
    {
LABEL_47:
      v6 = v29;
      if (!v29)
        return;
      goto LABEL_48;
    }
    v8 = (_QWORD *)((char *)this + 16);
    while (1)
    {
      v9 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(v7 + 16));
      v10 = v9;
      v11 = *((_QWORD *)this + 1);
      if (v11)
      {
        v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
        v12.i16[0] = vaddlv_u8(v12);
        v13 = v12.u32[0];
        if (v12.u32[0] > 1uLL)
        {
          v2 = v9;
          if (v9 >= v11)
            v2 = v9 % v11;
        }
        else
        {
          v2 = (v11 - 1) & v9;
        }
        v14 = *(unsigned __int8 ***)(*(_QWORD *)this + 8 * v2);
        if (v14)
        {
          for (i = *v14; i; i = *(unsigned __int8 **)i)
          {
            v16 = *((_QWORD *)i + 1);
            if (v16 == v10)
            {
              if (std::equal_to<std::string>::operator()[abi:ne180100](i + 16, v7 + 16))
                goto LABEL_46;
            }
            else
            {
              if (v13 > 1)
              {
                if (v16 >= v11)
                  v16 %= v11;
              }
              else
              {
                v16 &= v11 - 1;
              }
              if (v16 != v2)
                break;
            }
          }
        }
      }
      v17 = (char *)operator new(0x38uLL);
      v30[0] = v17;
      v30[1] = (char *)this + 16;
      v31 = 0;
      *(_QWORD *)v17 = 0;
      *((_QWORD *)v17 + 1) = v10;
      std::pair<std::string const,std::shared_ptr<Espresso::blob<float,4>>>::pair[abi:ne180100]((std::string *)(v17 + 16), (__int128 *)v7 + 1);
      v31 = 1;
      v18 = (float)(unint64_t)(*((_QWORD *)this + 3) + 1);
      v19 = *((float *)this + 8);
      if (!v11 || (float)(v19 * (float)v11) < v18)
      {
        v20 = (v11 & (v11 - 1)) != 0;
        if (v11 < 3)
          v20 = 1;
        v21 = v20 | (2 * v11);
        v22 = vcvtps_u32_f32(v18 / v19);
        if (v21 <= v22)
          v23 = v22;
        else
          v23 = v21;
        std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__rehash<true>((uint64_t)this, v23);
        v11 = *((_QWORD *)this + 1);
        if ((v11 & (v11 - 1)) != 0)
        {
          if (v10 >= v11)
            v2 = v10 % v11;
          else
            v2 = v10;
        }
        else
        {
          v2 = (v11 - 1) & v10;
        }
      }
      v24 = *(_QWORD *)this;
      v25 = *(_QWORD **)(*(_QWORD *)this + 8 * v2);
      if (v25)
      {
        *(_QWORD *)v17 = *v25;
      }
      else
      {
        *(_QWORD *)v17 = *v8;
        *v8 = v17;
        *(_QWORD *)(v24 + 8 * v2) = v8;
        if (!*(_QWORD *)v17)
          goto LABEL_45;
        v26 = *(_QWORD *)(*(_QWORD *)v17 + 8);
        if ((v11 & (v11 - 1)) != 0)
        {
          if (v26 >= v11)
            v26 %= v11;
        }
        else
        {
          v26 &= v11 - 1;
        }
        v25 = (_QWORD *)(*(_QWORD *)this + 8 * v26);
      }
      *v25 = v17;
LABEL_45:
      v30[0] = 0;
      ++*((_QWORD *)this + 3);
      std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>>>>::reset[abi:ne180100]((uint64_t)v30);
LABEL_46:
      v7 = *(unsigned __int8 **)v7;
      if (!v7)
        goto LABEL_47;
    }
  }
  v6 = std::__shared_weak_count::lock(v5);
  if (!v6 || !*(_QWORD *)(a2 + 1088))
    goto LABEL_6;
  Espresso::net::all_globals(this);
LABEL_48:
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v28 = __ldaxr(p_shared_owners);
  while (__stlxr(v28 - 1, p_shared_owners));
  if (!v28)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
}

void sub_191654CB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t et_data_source::et_data_source(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  id v6;
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  void *v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  BOOL v16;
  _OWORD v18[2];
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  __int128 *v22;

  v5 = a2;
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)a1 = &off_1E2D4DDC0;
  v6 = v5;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 24) = a1 + 32;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 40) = 0;
  v7 = *(unsigned __int8 **)(*(_QWORD *)a3 + 232);
  v8 = *(_QWORD *)a3 + 240;
  if (v7 != (unsigned __int8 *)v8)
  {
    v9 = *(_QWORD *)a3 + 136;
    do
    {
      *(_QWORD *)&v18[0] = v7 + 32;
      v10 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v9, v7 + 32, (__int128 **)v18);
      Espresso::abstract_blob_container::shape((char *)v18, *((_QWORD *)v10 + 5));
      v22 = (__int128 *)(v7 + 32);
      v11 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 24), (_QWORD *)v7 + 4, &v22);
      v12 = v18[1];
      *(_OWORD *)(v11 + 56) = v18[0];
      *(_OWORD *)(v11 + 72) = v12;
      *((_QWORD *)v11 + 11) = v19;
      v13 = (void *)*((_QWORD *)v11 + 12);
      if (v13)
      {
        *((_QWORD *)v11 + 13) = v13;
        operator delete(v13);
        *((_QWORD *)v11 + 12) = 0;
        *((_QWORD *)v11 + 13) = 0;
        *((_QWORD *)v11 + 14) = 0;
      }
      *((_OWORD *)v11 + 6) = v20;
      *((_QWORD *)v11 + 14) = v21;
      v14 = (unsigned __int8 *)*((_QWORD *)v7 + 1);
      if (v14)
      {
        do
        {
          v15 = v14;
          v14 = *(unsigned __int8 **)v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          v15 = (unsigned __int8 *)*((_QWORD *)v7 + 2);
          v16 = *(_QWORD *)v15 == (_QWORD)v7;
          v7 = v15;
        }
        while (!v16);
      }
      v7 = v15;
    }
    while (v15 != (unsigned __int8 *)v8);
  }

  return a1;
}

void sub_191654E38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;
  void *v17;
  uint64_t v18;

  if (__p)
    operator delete(__p);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy(v18, *(char **)(v16 + 32));

  _Unwind_Resume(a1);
}

uint64_t std::allocate_shared[abi:ne180100]<et_data_source,std::allocator<et_data_source>,et_data_source,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t result;

  v4 = operator new(0x48uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_1E2DB4208;
  v4[3] = &off_1E2D4DDC0;
  *((_BYTE *)v4 + 32) = *(_BYTE *)(a2 + 8);
  v4[5] = *(id *)(a2 + 16);
  result = std::map<std::string,Espresso::layer_shape>::map[abi:ne180100]((uint64_t)(v4 + 6), (__int128 **)(a2 + 24));
  *a1 = v4 + 3;
  a1[1] = v4;
  return result;
}

void sub_191654EF0(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_191655204(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{

  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_56c185_ZTSNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_10shared_ptrIN8Espresso4blobIfLi4EEEEENS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_SB_EEEEEE(uint64_t a1, uint64_t a2)
{
  return std::unordered_map<std::string,std::shared_ptr<Espresso::blob<float,4>>>::unordered_map(a1 + 56, a2 + 56);
}

uint64_t __destroy_helper_block_ea8_56c185_ZTSNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_10shared_ptrIN8Espresso4blobIfLi4EEEEENS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_SB_EEEEEE(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::~__hash_table(a1 + 56);
}

void std::__shared_ptr_emplace<et_data_source>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB4208;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<et_data_source>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB4208;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<et_data_source>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 16))(a1 + 24);
}

void et_data_source::dump_blobs(__int128 *a1, const void **a2)
{
  __int128 *v3;
  __int128 *v4;
  _QWORD *v5;
  int v6;
  int v7;
  uint64_t v8;
  Espresso *v9;
  void *v10;
  uint64_t *v11;
  std::__shared_weak_count *size;
  unint64_t *v13;
  unint64_t v14;
  __int128 *v15;
  __int128 *v16;
  BOOL v17;
  uint64_t i;
  __int128 *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t j;
  uint64_t *v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  _QWORD *v28;
  void *v29;
  __int128 *v30;
  std::string *v31;
  __int128 v32;
  const char *v33;
  uint64_t *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  __int128 *v40;
  __int128 *v41;
  uint64_t v43;
  _QWORD v44[2];
  std::string v45;
  _BYTE v46[32];
  std::__shared_weak_count *v47;
  void *__p;
  void *v49;
  uint64_t v50;
  std::string v51;
  __int128 v52;
  __int128 v53;
  std::__shared_weak_count *v54;
  void *v55;
  _BYTE *v56;
  uint64_t *v57;
  _QWORD *v58[2];
  __int128 *v59[2];

  v43 = (*(uint64_t (**)(__int128 *))(*(_QWORD *)a1 + 32))(a1);
  v58[0] = 0;
  v58[1] = 0;
  v57 = (uint64_t *)v58;
  v3 = (__int128 *)*((_QWORD *)a1 + 3);
  v4 = a1 + 2;
  if (v3 != a1 + 2)
  {
    do
    {
      std::pair<std::string const,Espresso::layer_shape>::pair[abi:ne180100](&v51, v3 + 2);
      *(_OWORD *)v46 = v52;
      *(_OWORD *)&v46[16] = v53;
      v47 = v54;
      v49 = 0;
      v50 = 0;
      __p = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v55, (uint64_t)v56, (v56 - (_BYTE *)v55) >> 2);
      v5 = operator new(0x60uLL);
      v5[1] = 0;
      v5[2] = 0;
      *v5 = &off_1E2DBECA8;
      v5[3] = &off_1E2DA11F0;
      v6 = *(_DWORD *)v46;
      v7 = *(_DWORD *)&v46[4];
      v8 = *(int *)&v46[8];
      *((_OWORD *)v5 + 4) = 0u;
      *((_OWORD *)v5 + 5) = 0u;
      *((_DWORD *)v5 + 8) = v6;
      *((_DWORD *)v5 + 9) = v7;
      *((_DWORD *)v5 + 10) = v8;
      *((_DWORD *)v5 + 11) = v43;
      v9 = (Espresso *)(4 * v6 * (uint64_t)v7 * v8 * (int)v43);
      v10 = Espresso::kern_alloc_uninitialized(v9);
      bzero(v10, (size_t)v9);
      v5[6] = v10;
      *((_BYTE *)v5 + 56) = 1;
      v45.__r_.__value_.__r.__words[0] = (std::string::size_type)(v5 + 3);
      v45.__r_.__value_.__l.__size_ = (std::string::size_type)v5;
      v59[0] = (__int128 *)&v51;
      v11 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v57, &v51, v59);
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)(v11 + 7), (__int128 *)&v45);
      size = (std::__shared_weak_count *)v45.__r_.__value_.__l.__size_;
      if (v45.__r_.__value_.__l.__size_)
      {
        v13 = (unint64_t *)(v45.__r_.__value_.__l.__size_ + 8);
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
      if (__p)
      {
        v49 = __p;
        operator delete(__p);
      }
      if (v55)
      {
        v56 = v55;
        operator delete(v55);
      }
      if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v51.__r_.__value_.__l.__data_);
      v15 = (__int128 *)*((_QWORD *)v3 + 1);
      if (v15)
      {
        do
        {
          v16 = v15;
          v15 = *(__int128 **)v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          v16 = (__int128 *)*((_QWORD *)v3 + 2);
          v17 = *(_QWORD *)v16 == (_QWORD)v3;
          v3 = v16;
        }
        while (!v17);
      }
      v3 = v16;
    }
    while (v16 != v4);
  }
  if (v43)
  {
    for (i = 0; i != v43; ++i)
    {
      (**(void (***)(std::string *__return_ptr, __int128 *, uint64_t))a1)(&v51, a1, i);
      v19 = (__int128 *)v51.__r_.__value_.__r.__words[2];
      if (v51.__r_.__value_.__r.__words[2])
      {
        do
        {
          std::pair<std::string const,std::shared_ptr<Espresso::blob<float,4>>>::pair[abi:ne180100]((std::string *)v46, v19 + 1);
          if ((v46[23] & 0x80000000) != 0)
            std::string::__init_copy_ctor_external(&v45, *(const std::string::value_type **)v46, *(std::string::size_type *)&v46[8]);
          else
            v45 = *(std::string *)v46;
          v20 = 0;
          v21 = *(int *)(*(_QWORD *)&v46[24] + 8);
          v22 = v21;
          do
          {
            v22 *= *(int *)(*(_QWORD *)&v46[24] + 12 + v20);
            v20 += 4;
          }
          while (v20 != 12);
          for (j = 0; j != 12; j += 4)
            v21 *= *(int *)(*(_QWORD *)&v46[24] + 12 + j);
          v59[0] = (__int128 *)&v45;
          v24 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v57, &v45, v59);
          memcpy((void *)(*(_QWORD *)(v24[7] + 24) + 4 * v21 * i), *(const void **)(*(_QWORD *)&v46[24] + 24), 4 * v22);
          if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v45.__r_.__value_.__l.__data_);
          v25 = v47;
          if (v47)
          {
            p_shared_owners = (unint64_t *)&v47->__shared_owners_;
            do
              v27 = __ldaxr(p_shared_owners);
            while (__stlxr(v27 - 1, p_shared_owners));
            if (!v27)
            {
              ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
              std::__shared_weak_count::__release_weak(v25);
            }
          }
          if ((v46[23] & 0x80000000) != 0)
            operator delete(*(void **)v46);
          v19 = *(__int128 **)v19;
        }
        while (v19);
        v28 = (_QWORD *)v51.__r_.__value_.__r.__words[2];
      }
      else
      {
        v28 = 0;
      }
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__deallocate_node(v28);
      v29 = (void *)v51.__r_.__value_.__r.__words[0];
      v51.__r_.__value_.__r.__words[0] = 0;
      if (v29)
        operator delete(v29);
    }
  }
  v30 = (__int128 *)*((_QWORD *)a1 + 3);
  if (v30 != v4)
  {
    do
    {
      std::pair<std::string const,Espresso::layer_shape>::pair[abi:ne180100](&v51, v30 + 2);
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (const void **)&v51.__r_.__value_.__l.__data_, (uint64_t)&v45);
      v31 = std::string::append(&v45, ".f4");
      v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
      *(_QWORD *)&v46[16] = *((_QWORD *)&v31->__r_.__value_.__l + 2);
      *(_OWORD *)v46 = v32;
      v31->__r_.__value_.__l.__size_ = 0;
      v31->__r_.__value_.__r.__words[2] = 0;
      v31->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v45.__r_.__value_.__l.__data_);
      if (v46[23] >= 0)
        v33 = v46;
      else
        v33 = *(const char **)v46;
      v45.__r_.__value_.__r.__words[0] = (std::string::size_type)&v51;
      v34 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v57, &v51, (__int128 **)&v45);
      v35 = (std::__shared_weak_count *)v34[8];
      v44[0] = v34[7];
      v44[1] = v35;
      if (v35)
      {
        v36 = (unint64_t *)&v35->__shared_owners_;
        do
          v37 = __ldxr(v36);
        while (__stxr(v37 + 1, v36));
      }
      Espresso::debug::write_blob<std::shared_ptr<Espresso::blob<float,4>>>(v33, (uint64_t)v44);
      if (v35)
      {
        v38 = (unint64_t *)&v35->__shared_owners_;
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
      }
      if ((v46[23] & 0x80000000) != 0)
        operator delete(*(void **)v46);
      if (v55)
      {
        v56 = v55;
        operator delete(v55);
      }
      if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v51.__r_.__value_.__l.__data_);
      v40 = (__int128 *)*((_QWORD *)v30 + 1);
      if (v40)
      {
        do
        {
          v41 = v40;
          v40 = *(__int128 **)v40;
        }
        while (v40);
      }
      else
      {
        do
        {
          v41 = (__int128 *)*((_QWORD *)v30 + 2);
          v17 = *(_QWORD *)v41 == (_QWORD)v30;
          v30 = v41;
        }
        while (!v17);
      }
      v30 = v41;
    }
    while (v41 != v4);
  }
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(v58[0]);
}

void sub_1916557D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33;

  if (a20 < 0)
    operator delete(__p);
  std::pair<std::string const,Espresso::layer_shape>::~pair((uint64_t)&a33);
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*(_QWORD **)(v33 - 112));
  _Unwind_Resume(a1);
}

void Espresso::throw_exception_selector<Espresso::not_implemented_error,ETLossMode>(uint64_t a1)
{
  Espresso::throw_exception_with_format<Espresso::not_implemented_error>("ET loss %@ not imeplemented", a1);
}

void Espresso::throw_exception_selector<Espresso::generic_error,char const*,char const*>(char *a1, uint64_t a2, uint64_t a3)
{
  Espresso::throw_exception_with_format<Espresso::generic_error>(a1, a2, a3);
}

void Espresso::throw_exception_selector<Espresso::not_implemented_error,ETVariableInitializationMode>(uint64_t a1)
{
  Espresso::throw_exception_with_format<Espresso::not_implemented_error>("ET initialization method %@ not imeplemented", a1);
}

void sub_191655A0C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_191655A50(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_191655CA0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void Espresso::V9Engine::v9_conv_kernel::~v9_conv_kernel(id *this)
{
  Espresso::V9Engine::v9_conv_kernel::~v9_conv_kernel(this);
  JUMPOUT(0x19401CD90);
}

{
  id v2;

  *this = &off_1E2DA4EB8;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 99));

  v2 = this[93];
  if (v2)
  {
    this[94] = v2;
    operator delete(v2);
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 89));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 87));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 85));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 83));

  Espresso::generic_convolution_kernel::~generic_convolution_kernel(this);
}

void Espresso::V9Engine::v9_conv_kernel::__launch(uint64_t a1, uint64_t a2, const void ***a3, const void ***a4)
{
  void *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  const void *v13;
  _QWORD *v14;
  _QWORD *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  const void **v19;
  const void *v20;
  _DWORD *v21;
  _DWORD *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  const void **v26;
  const void *v27;
  _DWORD *v28;
  _DWORD *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  unsigned int v43;
  unsigned int v44;
  int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  BOOL v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  BOOL v55;
  void *v58;
  id v59;
  void *v60;
  void *v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  id v66;
  id v67;
  id v68;
  int v69;
  BOOL v70;
  int v71;
  int v72;
  int v73;
  int v74;
  uint64_t v75;
  __int128 v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  uint64_t v81;
  BOOL v82;
  char *v83;
  int v85;
  int v86;
  _DWORD *v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  id v98;
  void *v99;
  int v100;
  __int16 v101;
  void *v102;
  void *v103;
  void *v104;
  unsigned int v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  __int16 v110;
  id v111;
  BOOL v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  std::string *v118;
  __int128 v119;
  void **v120;
  std::string::size_type v121;
  std::string *v122;
  __int128 v123;
  void **v124;
  std::string::size_type v125;
  std::string *v126;
  __int128 v127;
  void **v128;
  std::string::size_type v129;
  std::string *v130;
  __int128 v131;
  void **v132;
  std::string::size_type v133;
  std::string *v134;
  __int128 v135;
  void **v136;
  std::string::size_type v137;
  std::string *v138;
  __int128 v139;
  void **v140;
  std::string::size_type v141;
  std::string *v142;
  __int128 v143;
  void **v144;
  std::string::size_type v145;
  std::string *v146;
  __int128 v147;
  void **v148;
  std::string::size_type v149;
  std::string *v150;
  __int128 v151;
  void **v152;
  std::string::size_type v153;
  std::string *v154;
  __int128 v155;
  void **v156;
  std::string::size_type v157;
  std::string *v158;
  __int128 v159;
  void **v160;
  std::string::size_type v161;
  int v162;
  std::string::size_type v163;
  id v164;
  uint64_t v165;
  std::string *v166;
  uint64_t v167;
  void *v168;
  id v169;
  uint64_t v170;
  void *v171;
  void *v172;
  int v173;
  int v174;
  int v175;
  int v176;
  int v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  uint64_t v181;
  uint64_t v182;
  unint64_t v183;
  unsigned int v184;
  id v185;
  uint64_t v186;
  void *v187;
  void *v188;
  uint64_t v189;
  int v190;
  int v191;
  int v192;
  int v193;
  int v194;
  unsigned int v195;
  int v196;
  _QWORD *v197;
  void *v198;
  int v199;
  int v200;
  uint64_t v201;
  unint64_t v202;
  uint64_t v203;
  int v204;
  uint64_t v205;
  uint64_t v206;
  int v207;
  std::string::size_type v208;
  uint64_t v209;
  __int128 v210;
  int v211;
  int v212;
  std::string::size_type v213;
  uint64_t v214;
  __int128 v215;
  unint64_t *v216;
  unint64_t v217;
  unint64_t *v218;
  unint64_t v219;
  std::__shared_weak_count *v220;
  unint64_t *v221;
  unint64_t v222;
  std::__shared_weak_count *v223;
  unint64_t *v224;
  unint64_t v225;
  std::__shared_weak_count *v226;
  unint64_t *v227;
  unint64_t v228;
  std::__shared_weak_count *v229;
  unint64_t *v230;
  unint64_t v231;
  std::runtime_error *exception;
  std::runtime_error *v233;
  std::string *v234;
  __int128 v235;
  std::string *v236;
  __int128 v237;
  std::string *v238;
  std::string::size_type size;
  std::string *v240;
  __int128 v241;
  std::runtime_error *v242;
  std::runtime_error *v243;
  std::runtime_error *v244;
  int v245;
  id v246;
  id v247;
  void *v248;
  int v249;
  int v250;
  int v251;
  int v252;
  int v253;
  int v254;
  int v255;
  _QWORD *v256;
  uint64_t v257;
  void *v258;
  std::__shared_weak_count *v259;
  int v260;
  int v261;
  id *v262;
  _DWORD *v263;
  std::__shared_weak_count *v264;
  id v265[2];
  void *v266;
  std::__shared_weak_count *v267;
  void *v268;
  std::__shared_weak_count *v269;
  _QWORD *v270;
  std::__shared_weak_count *v271;
  void *v272;
  std::__shared_weak_count *v273;
  void *__p[2];
  __int128 v275;
  __int128 v276;
  std::string v277;
  std::string v278;
  __int128 v279;
  __int128 v280;
  __int128 v281;
  uint64_t v282;
  std::__shared_weak_count *v283;
  __int128 v284;
  uint64_t v285;
  std::string v286;
  std::string v287;

  if (*(_QWORD *)a2
  {
    v9 = (uint64_t)v8;
    v10 = *(std::__shared_weak_count **)(a2 + 8);
    v272 = v8;
    v273 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
  }
  else
  {
    v10 = 0;
    v9 = 0;
    v272 = 0;
    v273 = 0;
  }
  v13 = *(const void **)(a1 + 8);
  if (v13
  {
    v15 = v14;
    v16 = *(std::__shared_weak_count **)(a1 + 16);
    v270 = v14;
    v271 = v16;
    if (v16)
    {
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
  }
  else
  {
    v15 = 0;
    v270 = 0;
    v271 = 0;
  }
  v19 = *a4;
  v20 = **a4;
  if (v20
  {
    v22 = v21;
    v23 = (std::__shared_weak_count *)v19[1];
    v268 = v21;
    v269 = v23;
    if (v23)
    {
      v24 = (unint64_t *)&v23->__shared_owners_;
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 1, v24));
      v259 = v23;
    }
    else
    {
      v259 = 0;
    }
  }
  else
  {
    v259 = 0;
    v22 = 0;
    v268 = 0;
    v269 = 0;
  }
  v257 = (uint64_t)a3;
  v26 = *a3;
  v27 = **a3;
  if (v27
  {
    v29 = v28;
    v30 = (std::__shared_weak_count *)v26[1];
    v266 = v28;
    v267 = v30;
    if (v30)
    {
      v31 = (unint64_t *)&v30->__shared_owners_;
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
    }
  }
  else
  {
    v30 = 0;
    v29 = 0;
    v266 = 0;
    v267 = 0;
  }
  v33 = v22[5];
  v34 = v29[2];
  if (v33 != *(__int16 *)(a1 + 438) || v34 != *(_DWORD *)(a1 + 304) || v29[3] != *(_DWORD *)(a1 + 308))
  {
    *(_DWORD *)(a1 + 304) = v34;
    v35 = v29[3];
    *(_DWORD *)(a1 + 308) = v35;
    v36 = v22[2];
    *(_DWORD *)(a1 + 312) = v36;
    v37 = v22[3];
    *(_DWORD *)(a1 + 316) = v37;
    *(_WORD *)(a1 + 438) = v33;
    *(_DWORD *)(a1 + 324) = v29[51];
    v38 = *(__int16 *)(a1 + 376);
    if (v38 != 4)
    {
      if (v38 == 2)
      {
        v51 = 0;
        v52 = 0;
        v53 = 0;
        v54 = 0;
      }
      else
      {
        if (v38 == 1)
          goto LABEL_35;
        v51 = *(__int16 *)(a1 + 384);
        v52 = *(__int16 *)(a1 + 386);
        v53 = *(__int16 *)(a1 + 388);
        v54 = *(__int16 *)(a1 + 390);
      }
LABEL_53:
      *(_WORD *)(a1 + 404) = v51;
      *(_WORD *)(a1 + 406) = v53;
      if (v51)
        v55 = 0;
      else
        v55 = v52 == 0;
      if (v55 && v53 == 0 && v54 == 0)
        *(_WORD *)(a1 + 376) = 2;
      v58 = *(void **)(a1 + 616);
      *(_QWORD *)(a1 + 616) = 0;

      goto LABEL_66;
    }
LABEL_35:
    v39 = *(__int16 *)(a1 + 402);
    if (v39 <= 1)
      v39 = 1;
    v40 = *(__int16 *)(a1 + 400);
    if (v40 <= 1)
      v40 = 1;
    v41 = (v35 - 1) * *(__int16 *)(a1 + 398) - v37 + (*(_DWORD *)(a1 + 356) - 1) * v39 + 1;
    v42 = (v34 - 1) * *(__int16 *)(a1 + 396) - v36 + (*(_DWORD *)(a1 + 352) - 1) * v40 + 1;
    v43 = v41 & ~(v41 >> 31);
    v44 = v42 & ~(v42 >> 31);
    v45 = *(unsigned __int16 *)(a1 + 376);
    v46 = v44 >> 1;
    v47 = v44 - (v44 >> 1);
    v48 = v43 >> 1;
    v49 = v43 - (v43 >> 1);
    v50 = v45 == 1;
    if (v45 == 1)
      v51 = v44 >> 1;
    else
      v51 = v44 - (v44 >> 1);
    if (v45 == 1)
      v52 = v47;
    else
      v52 = v46;
    if (v45 == 1)
      v53 = v48;
    else
      v53 = v49;
    if (v50)
      v54 = v49;
    else
      v54 = v48;
    goto LABEL_53;
  }
LABEL_66:
  Espresso::temporary_mtl_encoder::temporary_mtl_encoder((uint64_t)v265, v9);
  v59 = v265[0];
  v60 = (void *)*((_QWORD *)v29 + 20);
  v61 = (void *)*((_QWORD *)v22 + 20);
  v263 = v29;
  v264 = v30;
  if (v30)
  {
    v62 = (unint64_t *)&v30->__shared_owners_;
    do
      v63 = __ldxr(v62);
    while (__stxr(v63 + 1, v62));
  }
  v262 = (id *)v22;
  if (v259)
  {
    v64 = (unint64_t *)&v259->__shared_owners_;
    do
      v65 = __ldxr(v64);
    while (__stxr(v65 + 1, v64));
  }
  v66 = v59;
  v67 = v60;
  v68 = v61;
  v69 = *(_DWORD *)(a1 + 344);
  v71 = v69 - 1;
  v70 = v69 < 1;
  v72 = v69 + 2;
  if (v70)
    v73 = v72;
  else
    v73 = v71;
  if (!*(_QWORD *)(a1 + 624))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "weights not set!");
    goto LABEL_330;
  }
  if (!*(_QWORD *)(a1 + 648))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "biases not set!");
LABEL_330:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v260 = *(_DWORD *)(a1 + 304);
  v261 = *(_DWORD *)(a1 + 308);
  v74 = *(__int16 *)(a1 + 438);
  v284 = 0uLL;
  v285 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v284, *(const void **)(a1 + 744), *(_QWORD *)(a1 + 752), (uint64_t)(*(_QWORD *)(a1 + 752) - *(_QWORD *)(a1 + 744)) >> 2);
  v75 = v15[3];
  if (v75 && *(_BYTE *)(v75 + 12))
  {
    Espresso::wisdom_trainer2::get_tune(v75, a1, v257, (uint64_t)a4, &v279);
    if ((_QWORD)v284)
    {
      *((_QWORD *)&v284 + 1) = v284;
      operator delete((void *)v284);
    }
    v284 = v279;
    v285 = v280;
  }
  v255 = v74;
  v76 = v284;
  if (Espresso::V9Engine::v9_conv_kernel::setup_for_tune(a1, (uint64_t)&v284, v260, v261))
  {
    v282 = v9;
    v283 = v10;
    if (v10)
    {
      v77 = (unint64_t *)&v10->__shared_owners_;
      do
        v78 = __ldxr(v77);
      while (__stxr(v78 + 1, v77));
    }
    Espresso::V9Engine::v9_conv_kernel::setup_weights_bias_if_ready(a1);
    if (v10)
    {
      v79 = (unint64_t *)&v10->__shared_owners_;
      do
        v80 = __ldaxr(v79);
      while (__stlxr(v80 - 1, v79));
      if (!v80)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
  v256 = v270;
  v81 = v270[3];
  if (v81)
  {
    v82 = *(_BYTE *)(v81 + 12) && *((_QWORD *)&v76 + 1) == (_QWORD)v76;
    v83 = (char *)(v81 + 112);
    if (v82 && v83 != (char *)&v284)
      std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v83, (char *)v284, *((uint64_t *)&v284 + 1), (uint64_t)(*((_QWORD *)&v284 + 1) - v284) >> 2);
  }
  v253 = *(_DWORD *)(a1 + 568);
  v254 = *(_DWORD *)(a1 + 564);
  v85 = *(_DWORD *)(a1 + 560);
  if (v85 >= 0)
    v86 = *(_DWORD *)(a1 + 560);
  else
    v86 = v85 + 3;
  v249 = *(_DWORD *)(a1 + 728);
  v250 = v86;
  v251 = *(_DWORD *)(a1 + 732);
  v252 = *(_DWORD *)(a1 + 736);
  WORD3(v281) = 0;
  v87 = **a4;
  v89 = v87[2];
  v88 = v87[3];
  LOWORD(v279) = v89;
  WORD1(v279) = v88;
  v90 = *(_DWORD *)(a1 + 808);
  if (v90 >= 2)
    LOWORD(v279) = v90 * v89;
  v91 = *(_DWORD *)(a1 + 812);
  if (v91 >= 2)
    WORD1(v279) = v91 * v88;
  WORD2(v279) = *(_DWORD *)(a1 + 304);
  WORD3(v279) = *(_DWORD *)(a1 + 308);
  v92 = *(__int16 *)(a1 + 396);
  if (v92 <= 1)
    LOWORD(v92) = 1;
  WORD6(v279) = v92;
  v93 = *(__int16 *)(a1 + 398);
  if (v93 <= 1)
    LOWORD(v93) = 1;
  HIWORD(v279) = v93;
  LODWORD(v280) = *(_DWORD *)(a1 + 404);
  v94 = *(_DWORD *)(a1 + 592);
  v95 = *((_DWORD *)v262 + 63);
  WORD2(v280) = *((_DWORD *)v262 + 62) / v94;
  WORD3(v280) = v95 / v94;
  v96 = v263[63] / v85;
  DWORD2(v280) = v263[62] / v85;
  HIDWORD(v280) = v96;
  LODWORD(v281) = v263[65] / v85;
  DWORD2(v281) = *(_DWORD *)(a1 + 368);
  HIDWORD(v281) = DWORD2(v281);
  v97 = *(_DWORD *)(a1 + 420);
  if (v97 <= 1)
    v97 = 1;
  WORD5(v279) = *(_DWORD *)(a1 + 348) / v97;
  WORD4(v279) = *(_DWORD *)(a1 + 344);
  WORD2(v281) = 0;
  v98 = v262[21];
  v99 = v98;
  if ((*(_BYTE *)(a1 + 592) & 7) != 0)
  {
    if (v98)
      goto LABEL_115;
  }
  else
  {
    v111 = v262[33];

    v99 = v111;
    if (v111)
      goto LABEL_115;
  }
  *(_DWORD *)(a1 + 588) = 2;
LABEL_115:
  v258 = v99;
  if ((*(_BYTE *)(a1 + 596) & 2) != 0)
    *(_DWORD *)(a1 + 588) = 2;
  if (!*(_QWORD *)(a1 + 608))
  {
    v100 = v73;
    v101 = *(_WORD *)(a1 + 376);
    v102 = (void *)objc_opt_new();
    v103 = (void *)objc_opt_new();
    v104 = v103;
    if (*(_DWORD *)(a1 + 328))
      v105 = 0;
    else
      v105 = -1;
    if (*(_DWORD *)(a1 + 332))
      v105 = 1;
    v106 = *(_DWORD *)(a1 + 364);
    if (!v106)
      v105 = 0;
    if (v106 == 1)
      v105 = 1;
    if (v106 == 2)
      v107 = 2;
    else
      v107 = v105;
    v108 = *(unsigned int *)(a1 + 352);
    LOWORD(__p[0]) = *(_DWORD *)(a1 + 352);
    objc_msgSend(v103, "appendFormat:", CFSTR("%d:%d_"), 2, v108);
    objc_msgSend(v102, "setConstantValue:type:atIndex:", __p, 41, 2);
    v109 = *(unsigned int *)(a1 + 356);
    LOWORD(__p[0]) = *(_DWORD *)(a1 + 356);
    objc_msgSend(v104, "appendFormat:", CFSTR("%d:%d_"), 3, v109);
    objc_msgSend(v102, "setConstantValue:type:atIndex:", __p, 41, 3);
    LOWORD(__p[0]) = v107;
    objc_msgSend(v104, "appendFormat:", CFSTR("%d:%d_"), 4, v107);
    objc_msgSend(v102, "setConstantValue:type:atIndex:", __p, 37, 4);
    if (*(_WORD *)(a1 + 378) == 2)
    {
      v110 = 102;
    }
    else if (*(_DWORD *)(a1 + 568) != 1
           || (*(_WORD *)(a1 + 390)
             ? (v112 = (*(unsigned __int16 *)(a1 + 376) | *(unsigned __int16 *)(a1 + 384) | *(unsigned __int16 *)(a1 + 386) | *(unsigned __int16 *)(a1 + 388)) == 0)
             : (v112 = 0),
               v112 ? (v110 = 2) : (v110 = v101),
               *(_DWORD *)(a1 + 564) != 1))
    {
      v110 = 0;
    }
    LOWORD(__p[0]) = v110;
    objc_msgSend(v104, "appendFormat:", CFSTR("%d:%d_"), 5, v110);
    objc_msgSend(v102, "setConstantValue:type:atIndex:", __p, 41, 5);
    v113 = *(unsigned int *)(a1 + 420);
    LOWORD(__p[0]) = *(_DWORD *)(a1 + 420);
    objc_msgSend(v104, "appendFormat:", CFSTR("%d:%d_"), 6, v113);
    objc_msgSend(v102, "setConstantValue:type:atIndex:", __p, 41, 6);
    v114 = *(unsigned int *)(a1 + 424);
    LOWORD(__p[0]) = *(_DWORD *)(a1 + 424);
    objc_msgSend(v104, "appendFormat:", CFSTR("%d:%d_"), 8, v114);
    objc_msgSend(v102, "setConstantValue:type:atIndex:", __p, 41, 8);
    LOWORD(__p[0]) = *(_WORD *)(a1 + 396);
    objc_msgSend(v104, "appendFormat:", CFSTR("%d:%d_"), 13, SLOWORD(__p[0]));
    objc_msgSend(v102, "setConstantValue:type:atIndex:", __p, 41, 13);
    LOWORD(__p[0]) = *(_WORD *)(a1 + 398);
    objc_msgSend(v104, "appendFormat:", CFSTR("%d:%d_"), 14, SLOWORD(__p[0]));
    objc_msgSend(v102, "setConstantValue:type:atIndex:", __p, 41, 14);
    LOWORD(__p[0]) = *(_WORD *)(a1 + 400);
    objc_msgSend(v104, "appendFormat:", CFSTR("%d:%d_"), 15, SLOWORD(__p[0]));
    objc_msgSend(v102, "setConstantValue:type:atIndex:", __p, 41, 15);
    LOWORD(__p[0]) = *(_WORD *)(a1 + 402);
    objc_msgSend(v104, "appendFormat:", CFSTR("%d:%d_"), 16, SLOWORD(__p[0]));
    objc_msgSend(v102, "setConstantValue:type:atIndex:", __p, 41, 16);
    v115 = *(unsigned int *)(a1 + 656);
    LOWORD(__p[0]) = *(_DWORD *)(a1 + 656);
    objc_msgSend(v104, "appendFormat:", CFSTR("%d:%d_"), 17, v115);
    objc_msgSend(v102, "setConstantValue:type:atIndex:", __p, 41, 17);
    v116 = *(unsigned int *)(a1 + 808);
    LOWORD(__p[0]) = *(_DWORD *)(a1 + 808);
    objc_msgSend(v104, "appendFormat:", CFSTR("%d:%d_"), 18, v116);
    objc_msgSend(v102, "setConstantValue:type:atIndex:", __p, 41, 18);
    v117 = *(unsigned int *)(a1 + 812);
    LOWORD(__p[0]) = *(_DWORD *)(a1 + 812);
    objc_msgSend(v104, "appendFormat:", CFSTR("%d:%d_"), 19, v117);
    objc_msgSend(v102, "setConstantValue:type:atIndex:", __p, 41, 19);
    LOWORD(__p[0]) = *(_WORD *)(a1 + 430);
    objc_msgSend(v104, "appendFormat:", CFSTR("%d:%d_"), 20, LOWORD(__p[0]));
    objc_msgSend(v102, "setConstantValue:type:atIndex:", __p, 41, 20);
    std::string::basic_string[abi:ne180100]<0>(&v286, "conv_v9");
    std::to_string(&v287, *(_DWORD *)(a1 + 560));
    v118 = std::string::insert(&v287, 0, "_oc");
    v119 = *(_OWORD *)&v118->__r_.__value_.__l.__data_;
    *(_QWORD *)&v275 = *((_QWORD *)&v118->__r_.__value_.__l + 2);
    *(_OWORD *)__p = v119;
    v118->__r_.__value_.__l.__size_ = 0;
    v118->__r_.__value_.__r.__words[2] = 0;
    v118->__r_.__value_.__r.__words[0] = 0;
    if ((SBYTE7(v275) & 0x80u) == 0)
      v120 = __p;
    else
      v120 = (void **)__p[0];
    if ((SBYTE7(v275) & 0x80u) == 0)
      v121 = BYTE7(v275);
    else
      v121 = (std::string::size_type)__p[1];
    std::string::append(&v286, (const std::string::value_type *)v120, v121);
    if (SBYTE7(v275) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v287.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v287.__r_.__value_.__l.__data_);
    std::to_string(&v287, *(_DWORD *)(a1 + 564));
    v122 = std::string::insert(&v287, 0, "_oy");
    v123 = *(_OWORD *)&v122->__r_.__value_.__l.__data_;
    *(_QWORD *)&v275 = *((_QWORD *)&v122->__r_.__value_.__l + 2);
    *(_OWORD *)__p = v123;
    v122->__r_.__value_.__l.__size_ = 0;
    v122->__r_.__value_.__r.__words[2] = 0;
    v122->__r_.__value_.__r.__words[0] = 0;
    if ((SBYTE7(v275) & 0x80u) == 0)
      v124 = __p;
    else
      v124 = (void **)__p[0];
    if ((SBYTE7(v275) & 0x80u) == 0)
      v125 = BYTE7(v275);
    else
      v125 = (std::string::size_type)__p[1];
    std::string::append(&v286, (const std::string::value_type *)v124, v125);
    if (SBYTE7(v275) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v287.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v287.__r_.__value_.__l.__data_);
    std::to_string(&v287, *(_DWORD *)(a1 + 568));
    v126 = std::string::insert(&v287, 0, "_ox");
    v127 = *(_OWORD *)&v126->__r_.__value_.__l.__data_;
    *(_QWORD *)&v275 = *((_QWORD *)&v126->__r_.__value_.__l + 2);
    *(_OWORD *)__p = v127;
    v126->__r_.__value_.__l.__size_ = 0;
    v126->__r_.__value_.__r.__words[2] = 0;
    v126->__r_.__value_.__r.__words[0] = 0;
    if ((SBYTE7(v275) & 0x80u) == 0)
      v128 = __p;
    else
      v128 = (void **)__p[0];
    if ((SBYTE7(v275) & 0x80u) == 0)
      v129 = BYTE7(v275);
    else
      v129 = (std::string::size_type)__p[1];
    std::string::append(&v286, (const std::string::value_type *)v128, v129);
    if (SBYTE7(v275) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v287.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v287.__r_.__value_.__l.__data_);
    std::to_string(&v287, *(_DWORD *)(a1 + 572));
    v130 = std::string::insert(&v287, 0, "_kx");
    v131 = *(_OWORD *)&v130->__r_.__value_.__l.__data_;
    *(_QWORD *)&v275 = *((_QWORD *)&v130->__r_.__value_.__l + 2);
    *(_OWORD *)__p = v131;
    v130->__r_.__value_.__l.__size_ = 0;
    v130->__r_.__value_.__r.__words[2] = 0;
    v130->__r_.__value_.__r.__words[0] = 0;
    if ((SBYTE7(v275) & 0x80u) == 0)
      v132 = __p;
    else
      v132 = (void **)__p[0];
    if ((SBYTE7(v275) & 0x80u) == 0)
      v133 = BYTE7(v275);
    else
      v133 = (std::string::size_type)__p[1];
    std::string::append(&v286, (const std::string::value_type *)v132, v133);
    if (SBYTE7(v275) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v287.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v287.__r_.__value_.__l.__data_);
    std::to_string(&v287, *(_DWORD *)(a1 + 576));
    v134 = std::string::insert(&v287, 0, "_ky");
    v135 = *(_OWORD *)&v134->__r_.__value_.__l.__data_;
    *(_QWORD *)&v275 = *((_QWORD *)&v134->__r_.__value_.__l + 2);
    *(_OWORD *)__p = v135;
    v134->__r_.__value_.__l.__size_ = 0;
    v134->__r_.__value_.__r.__words[2] = 0;
    v134->__r_.__value_.__r.__words[0] = 0;
    if ((SBYTE7(v275) & 0x80u) == 0)
      v136 = __p;
    else
      v136 = (void **)__p[0];
    if ((SBYTE7(v275) & 0x80u) == 0)
      v137 = BYTE7(v275);
    else
      v137 = (std::string::size_type)__p[1];
    std::string::append(&v286, (const std::string::value_type *)v136, v137);
    if (SBYTE7(v275) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v287.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v287.__r_.__value_.__l.__data_);
    std::to_string(&v287, *(_DWORD *)(a1 + 580));
    v138 = std::string::insert(&v287, 0, "_weights_type");
    v139 = *(_OWORD *)&v138->__r_.__value_.__l.__data_;
    *(_QWORD *)&v275 = *((_QWORD *)&v138->__r_.__value_.__l + 2);
    *(_OWORD *)__p = v139;
    v138->__r_.__value_.__l.__size_ = 0;
    v138->__r_.__value_.__r.__words[2] = 0;
    v138->__r_.__value_.__r.__words[0] = 0;
    if ((SBYTE7(v275) & 0x80u) == 0)
      v140 = __p;
    else
      v140 = (void **)__p[0];
    if ((SBYTE7(v275) & 0x80u) == 0)
      v141 = BYTE7(v275);
    else
      v141 = (std::string::size_type)__p[1];
    std::string::append(&v286, (const std::string::value_type *)v140, v141);
    if (SBYTE7(v275) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v287.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v287.__r_.__value_.__l.__data_);
    std::to_string(&v287, *(_DWORD *)(a1 + 584));
    v142 = std::string::insert(&v287, 0, "_image_type");
    v143 = *(_OWORD *)&v142->__r_.__value_.__l.__data_;
    *(_QWORD *)&v275 = *((_QWORD *)&v142->__r_.__value_.__l + 2);
    *(_OWORD *)__p = v143;
    v142->__r_.__value_.__l.__size_ = 0;
    v142->__r_.__value_.__r.__words[2] = 0;
    v142->__r_.__value_.__r.__words[0] = 0;
    if ((SBYTE7(v275) & 0x80u) == 0)
      v144 = __p;
    else
      v144 = (void **)__p[0];
    if ((SBYTE7(v275) & 0x80u) == 0)
      v145 = BYTE7(v275);
    else
      v145 = (std::string::size_type)__p[1];
    std::string::append(&v286, (const std::string::value_type *)v144, v145);
    if (SBYTE7(v275) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v287.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v287.__r_.__value_.__l.__data_);
    std::to_string(&v287, *(_DWORD *)(a1 + 588));
    v146 = std::string::insert(&v287, 0, "_tex_mode");
    v147 = *(_OWORD *)&v146->__r_.__value_.__l.__data_;
    *(_QWORD *)&v275 = *((_QWORD *)&v146->__r_.__value_.__l + 2);
    *(_OWORD *)__p = v147;
    v146->__r_.__value_.__l.__size_ = 0;
    v146->__r_.__value_.__r.__words[2] = 0;
    v146->__r_.__value_.__r.__words[0] = 0;
    if ((SBYTE7(v275) & 0x80u) == 0)
      v148 = __p;
    else
      v148 = (void **)__p[0];
    if ((SBYTE7(v275) & 0x80u) == 0)
      v149 = BYTE7(v275);
    else
      v149 = (std::string::size_type)__p[1];
    std::string::append(&v286, (const std::string::value_type *)v148, v149);
    if (SBYTE7(v275) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v287.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v287.__r_.__value_.__l.__data_);
    std::to_string(&v287, *(_DWORD *)(a1 + 592));
    v150 = std::string::insert(&v287, 0, "_nk");
    v151 = *(_OWORD *)&v150->__r_.__value_.__l.__data_;
    *(_QWORD *)&v275 = *((_QWORD *)&v150->__r_.__value_.__l + 2);
    *(_OWORD *)__p = v151;
    v150->__r_.__value_.__l.__size_ = 0;
    v150->__r_.__value_.__r.__words[2] = 0;
    v150->__r_.__value_.__r.__words[0] = 0;
    if ((SBYTE7(v275) & 0x80u) == 0)
      v152 = __p;
    else
      v152 = (void **)__p[0];
    if ((SBYTE7(v275) & 0x80u) == 0)
      v153 = BYTE7(v275);
    else
      v153 = (std::string::size_type)__p[1];
    std::string::append(&v286, (const std::string::value_type *)v152, v153);
    if (SBYTE7(v275) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v287.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v287.__r_.__value_.__l.__data_);
    std::to_string(&v287, *(_DWORD *)(a1 + 596));
    v154 = std::string::insert(&v287, 0, "_accum_mode");
    v155 = *(_OWORD *)&v154->__r_.__value_.__l.__data_;
    *(_QWORD *)&v275 = *((_QWORD *)&v154->__r_.__value_.__l + 2);
    *(_OWORD *)__p = v155;
    v154->__r_.__value_.__l.__size_ = 0;
    v154->__r_.__value_.__r.__words[2] = 0;
    v154->__r_.__value_.__r.__words[0] = 0;
    if ((SBYTE7(v275) & 0x80u) == 0)
      v156 = __p;
    else
      v156 = (void **)__p[0];
    if ((SBYTE7(v275) & 0x80u) == 0)
      v157 = BYTE7(v275);
    else
      v157 = (std::string::size_type)__p[1];
    std::string::append(&v286, (const std::string::value_type *)v156, v157);
    if (SBYTE7(v275) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v287.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v287.__r_.__value_.__l.__data_);
    std::to_string(&v287, *(_DWORD *)(a1 + 600));
    v158 = std::string::insert(&v287, 0, "_accum_bits");
    v159 = *(_OWORD *)&v158->__r_.__value_.__l.__data_;
    *(_QWORD *)&v275 = *((_QWORD *)&v158->__r_.__value_.__l + 2);
    *(_OWORD *)__p = v159;
    v158->__r_.__value_.__l.__size_ = 0;
    v158->__r_.__value_.__r.__words[2] = 0;
    v158->__r_.__value_.__r.__words[0] = 0;
    if ((SBYTE7(v275) & 0x80u) == 0)
      v160 = __p;
    else
      v160 = (void **)__p[0];
    if ((SBYTE7(v275) & 0x80u) == 0)
      v161 = BYTE7(v275);
    else
      v161 = (std::string::size_type)__p[1];
    std::string::append(&v286, (const std::string::value_type *)v160, v161);
    if (SBYTE7(v275) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v287.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v287.__r_.__value_.__l.__data_);
    v162 = SHIBYTE(v286.__r_.__value_.__r.__words[2]);
    v163 = v286.__r_.__value_.__r.__words[0];
    v164 = objc_retainAutorelease(v104);
    v165 = objc_msgSend(v164, "UTF8String");
    if (v162 >= 0)
      v166 = &v286;
    else
      v166 = (std::string *)v163;
    objc_msgSend((id)v256[20], "kernelForFunction:cacheString:withConstants:", v166, v165, v102);
    v167 = objc_claimAutoreleasedReturnValue();
    v168 = *(void **)(a1 + 608);
    *(_QWORD *)(a1 + 608) = v167;

    if (SHIBYTE(v286.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v286.__r_.__value_.__l.__data_);

    v73 = v100;
  }
  v169 = v66;
  if (*(_QWORD *)(a1 + 640))
  {
    v245 = v73;
    v170 = *(_QWORD *)(a1 + 8);
    v246 = v67;
    v247 = v68;
    v171 = (void *)objc_opt_new();
    v172 = (void *)objc_opt_new();
    v173 = *(_DWORD *)(a1 + 352);
    v174 = *(_DWORD *)(a1 + 356);
    v175 = *(_DWORD *)(a1 + 348);
    if (*(int *)(a1 + 420) <= 1)
      v176 = 1;
    else
      v176 = *(_DWORD *)(a1 + 420);
    v177 = *(_DWORD *)(a1 + 592);
    v178 = *(unsigned int *)(a1 + 560);
    LOWORD(__p[0]) = *(_DWORD *)(a1 + 560);
    v248 = v172;
    objc_msgSend(v172, "appendFormat:", CFSTR("%d:%d_"), 0, v178);
    objc_msgSend(v171, "setConstantValue:type:atIndex:", __p, 41, 0);
    v179 = *(unsigned int *)(a1 + 592);
    LOWORD(__p[0]) = *(_DWORD *)(a1 + 592);
    objc_msgSend(v248, "appendFormat:", CFSTR("%d:%d_"), 1, v179);
    objc_msgSend(v171, "setConstantValue:type:atIndex:", __p, 41, 1);
    v180 = ((v174 * v173 * v177 + v174 * v173 * v177 * ((v175 - 1) / (v176 * v177))) * v178);
    v181 = (v180 - 1);
    if ((_DWORD)v180 == 1)
    {
      v182 = 0xFFFFFFFFLL;
      v183 = 0xFFFFFFFFLL;
    }
    else
    {
      v184 = __clz(v181);
      v181 = 31 - v184;
      v182 = (((1 << (v184 ^ 0x3F)) + (unint64_t)v180 - 1) / v180) - 1;
      v183 = __PAIR64__(v181, v182);
    }
    v68 = v247;
    __p[0] = (void *)v183;
    objc_msgSend(v248, "appendFormat:", CFSTR("%d:%d_%d_"), 2, v182, v181);
    objc_msgSend(v171, "setConstantValue:type:atIndex:", __p, 34, 2);
    v185 = objc_retainAutorelease(v248);
    objc_msgSend(*(id *)(v170 + 160), "kernelForFunction:cacheString:withConstants:", "v9_dequantize_range", objc_msgSend(v185, "UTF8String"), v171);
    v186 = objc_claimAutoreleasedReturnValue();
    v187 = (void *)v186;
    if ((*(_BYTE *)(a1 + 596) & 1) != 0)
    {
      objc_msgSend(*(id *)(v170 + 160), "kernelForFunction:cacheString:withConstants:", "v9_dequantize_range_nkfirst", objc_msgSend(objc_retainAutorelease(v185), "UTF8String"), v171);
      v189 = objc_claimAutoreleasedReturnValue();

      v188 = (void *)v189;
    }
    else
    {
      v188 = (void *)v186;
    }
    objc_msgSend(v169, "setComputePipelineState:", v188);
    if (!*(_QWORD *)(a1 + 776))
    {
      v242 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v242, "Inconsistent state");
      __cxa_throw(v242, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v190 = *(_DWORD *)(a1 + 344);
    objc_msgSend(v169, "setBuffer:offset:atIndex:", *(_QWORD *)(a1 + 624), 0, 0);
    objc_msgSend(v169, "setBuffer:offset:atIndex:", *(_QWORD *)(a1 + 640), 0, 1);
    objc_msgSend(v169, "setBuffer:offset:atIndex:", *(_QWORD *)(a1 + 776), 0, 2);
    v191 = v180 + v180 * ((v190 - 1) / *(_DWORD *)(a1 + 560));
    LODWORD(__p[0]) = *(_DWORD *)(a1 + 560);
    HIDWORD(__p[0]) = v191;
    __p[1] = (void *)__PAIR64__(*(_DWORD *)(a1 + 344), v180);
    v192 = *(_DWORD *)(a1 + 348);
    v193 = *(_DWORD *)(a1 + 420);
    v194 = v192 - 1;
    if (v193 < 1)
      v193 = 1;
    else
      v192 = v194 / v193 + 1;
    v195 = *(_DWORD *)(a1 + 592);
    DWORD2(v275) = v195 + v195 * (v194 / (int)(v195 * v193));
    *(_QWORD *)&v275 = __PAIR64__(v195, v192);
    if ((v191 & 3) != 0)
    {
      v243 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v243, "tot parameters % 4 == 0 for quantized conv");
      __cxa_throw(v243, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    objc_msgSend(v169, "setBytes:length:atIndex:", __p, 28, 3);
    v196 = HIDWORD(__p[0]) + 510;
    if (SHIDWORD(__p[0]) >= 1)
      v196 = HIDWORD(__p[0]) - 1;
    v287.__r_.__value_.__r.__words[0] = (v196 >> 9) + 1;
    *(int64x2_t *)&v287.__r_.__value_.__r.__words[1] = vdupq_n_s64(1uLL);
    *(_OWORD *)&v286.__r_.__value_.__l.__data_ = xmmword_191A93510;
    v286.__r_.__value_.__r.__words[2] = 1;
    objc_msgSend(v169, "dispatchThreadgroups:threadsPerThreadgroup:", &v287, &v286);

    v67 = v246;
    v73 = v245;
  }

  if (*((_BYTE *)v256 + 64))
  {
    v197 = (_QWORD *)(a1 + 176);
    if (*(char *)(a1 + 199) < 0)
      v197 = (_QWORD *)*v197;
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v197);
    v198 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v169, "setLabel:", v198);

  }
  objc_msgSend(v169, "setComputePipelineState:", *(_QWORD *)(a1 + 608));
  v199 = *(_DWORD *)(a1 + 728);
  v200 = *(_DWORD *)(a1 + 732);
  v201 = *(int *)(a1 + 736);
  v202 = objc_msgSend(*(id *)(a1 + 608), "maxTotalThreadsPerThreadgroup");
  v203 = v200 * (uint64_t)v199;
  v204 = v203 * v201;
  if (v202 < v203 * v201)
  {
    v233 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v278, v204);
    v234 = std::string::insert(&v278, 0, "max number of threadgroups ");
    v235 = *(_OWORD *)&v234->__r_.__value_.__l.__data_;
    v286.__r_.__value_.__r.__words[2] = v234->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v286.__r_.__value_.__l.__data_ = v235;
    v234->__r_.__value_.__l.__size_ = 0;
    v234->__r_.__value_.__r.__words[2] = 0;
    v234->__r_.__value_.__r.__words[0] = 0;
    v236 = std::string::append(&v286, "/");
    v237 = *(_OWORD *)&v236->__r_.__value_.__l.__data_;
    v287.__r_.__value_.__r.__words[2] = v236->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v287.__r_.__value_.__l.__data_ = v237;
    v236->__r_.__value_.__l.__size_ = 0;
    v236->__r_.__value_.__r.__words[2] = 0;
    v236->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v277, objc_msgSend(*(id *)(a1 + 608), "maxTotalThreadsPerThreadgroup"));
    if ((v277.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v238 = &v277;
    else
      v238 = (std::string *)v277.__r_.__value_.__r.__words[0];
    if ((v277.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v277.__r_.__value_.__r.__words[2]);
    else
      size = v277.__r_.__value_.__l.__size_;
    v240 = std::string::append(&v287, (const std::string::value_type *)v238, size);
    v241 = *(_OWORD *)&v240->__r_.__value_.__l.__data_;
    *(_QWORD *)&v275 = *((_QWORD *)&v240->__r_.__value_.__l + 2);
    *(_OWORD *)__p = v241;
    v240->__r_.__value_.__l.__size_ = 0;
    v240->__r_.__value_.__r.__words[2] = 0;
    v240->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v233, (const std::string *)__p);
    __cxa_throw(v233, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  objc_msgSend(v169, "setBuffer:offset:atIndex:", v68, 0, 0);
  objc_msgSend(v169, "setBuffer:offset:atIndex:", v67, 0, 1);
  objc_msgSend(v169, "setBytes:length:atIndex:", &v279, 48, 2);
  if (!*(_DWORD *)(a1 + 588))
    objc_msgSend(v169, "setTexture:atIndex:", v258, 0);
  if ((*(_BYTE *)(a1 + 596) & 2) != 0)
  {
    v205 = *(_QWORD *)(a1 + 632);
    if (!v205)
    {
      v244 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v244, "w texture not created");
      __cxa_throw(v244, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    objc_msgSend(v169, "setTexture:atIndex:", v205, 1);
  }
  v206 = *(_QWORD *)(a1 + 776);
  if (v206)
    objc_msgSend(v169, "setBuffer:offset:atIndex:", v206, 0, 3);
  else
    objc_msgSend(v169, "setBuffer:offset:atIndex:", *(_QWORD *)(a1 + 624), 0, 3);
  objc_msgSend(v169, "setBuffer:offset:atIndex:", *(_QWORD *)(a1 + 648), 0, 4);
  v207 = *(_DWORD *)(a1 + 656);
  if (v207 >= 2)
  {
    v211 = 0;
    do
    {
      v275 = v280;
      v276 = v281;
      *(_OWORD *)__p = v279;
      v212 = (unsigned __int16)((WORD5(v279) - 1) / *(_DWORD *)(a1 + 592) + 1) / v207;
      WORD2(v276) = v212 * v211++;
      WORD3(v276) = v212 * v211;
      objc_msgSend(v169, "setBytes:length:atIndex:", __p, 48, 2);
      v287.__r_.__value_.__r.__words[0] = (v260 - 1) / (v249 * v253) + 1;
      v287.__r_.__value_.__l.__size_ = (v261 - 1) / (v251 * v254) + 1;
      v287.__r_.__value_.__r.__words[2] = (v255 + v255 * (v73 >> 2) - 1) / (v252 * (v250 >> 2)) + 1;
      v213 = *(int *)(a1 + 736);
      v214 = *(_QWORD *)(a1 + 728);
      *(_QWORD *)&v215 = (int)v214;
      *((_QWORD *)&v215 + 1) = SHIDWORD(v214);
      *(_OWORD *)&v286.__r_.__value_.__l.__data_ = v215;
      v286.__r_.__value_.__r.__words[2] = v213;
      objc_msgSend(v169, "dispatchThreadgroups:threadsPerThreadgroup:", &v287, &v286);
      v207 = *(_DWORD *)(a1 + 656);
    }
    while (v211 < v207);
  }
  else
  {
    __p[0] = (void *)((v260 - 1) / (v249 * v253) + 1);
    __p[1] = (void *)((v261 - 1) / (v251 * v254) + 1);
    *(_QWORD *)&v275 = (v255 + v255 * (v73 >> 2) - 1) / (v252 * (v250 >> 2)) + 1;
    v208 = *(int *)(a1 + 736);
    v209 = *(_QWORD *)(a1 + 728);
    *(_QWORD *)&v210 = (int)v209;
    *((_QWORD *)&v210 + 1) = SHIDWORD(v209);
    *(_OWORD *)&v287.__r_.__value_.__l.__data_ = v210;
    v287.__r_.__value_.__r.__words[2] = v208;
    objc_msgSend(v169, "dispatchThreadgroups:threadsPerThreadgroup:", __p, &v287);
  }

  if ((_QWORD)v284)
  {
    *((_QWORD *)&v284 + 1) = v284;
    operator delete((void *)v284);
  }

  if (v259)
  {
    v216 = (unint64_t *)&v259->__shared_owners_;
    do
      v217 = __ldaxr(v216);
    while (__stlxr(v217 - 1, v216));
    if (!v217)
    {
      ((void (*)(std::__shared_weak_count *))v259->__on_zero_shared)(v259);
      std::__shared_weak_count::__release_weak(v259);
    }
  }
  if (v264)
  {
    v218 = (unint64_t *)&v264->__shared_owners_;
    do
      v219 = __ldaxr(v218);
    while (__stlxr(v219 - 1, v218));
    if (!v219)
    {
      ((void (*)(std::__shared_weak_count *))v264->__on_zero_shared)(v264);
      std::__shared_weak_count::__release_weak(v264);
    }
  }

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(v265);
  v220 = v267;
  if (v267)
  {
    v221 = (unint64_t *)&v267->__shared_owners_;
    do
      v222 = __ldaxr(v221);
    while (__stlxr(v222 - 1, v221));
    if (!v222)
    {
      ((void (*)(std::__shared_weak_count *))v220->__on_zero_shared)(v220);
      std::__shared_weak_count::__release_weak(v220);
    }
  }
  v223 = v269;
  if (v269)
  {
    v224 = (unint64_t *)&v269->__shared_owners_;
    do
      v225 = __ldaxr(v224);
    while (__stlxr(v225 - 1, v224));
    if (!v225)
    {
      ((void (*)(std::__shared_weak_count *))v223->__on_zero_shared)(v223);
      std::__shared_weak_count::__release_weak(v223);
    }
  }
  v226 = v271;
  if (v271)
  {
    v227 = (unint64_t *)&v271->__shared_owners_;
    do
      v228 = __ldaxr(v227);
    while (__stlxr(v228 - 1, v227));
    if (!v228)
    {
      ((void (*)(std::__shared_weak_count *))v226->__on_zero_shared)(v226);
      std::__shared_weak_count::__release_weak(v226);
    }
  }
  v229 = v273;
  if (v273)
  {
    v230 = (unint64_t *)&v273->__shared_owners_;
    do
      v231 = __ldaxr(v230);
    while (__stlxr(v231 - 1, v230));
    if (!v231)
    {
      ((void (*)(std::__shared_weak_count *))v229->__on_zero_shared)(v229);
      std::__shared_weak_count::__release_weak(v229);
    }
  }
}

void sub_1916575A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,char a27,uint64_t a28,id a29,uint64_t a30,char a31,uint64_t a32,char a33,uint64_t a34,char a35,uint64_t a36,char a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  void *v59;
  int v60;
  uint64_t v61;
  void *v63;

  if (a44 < 0)
    operator delete(__p);
  if (a53 < 0)
    operator delete(a48);
  if (*(char *)(v61 - 89) < 0)
    operator delete(*(void **)(v61 - 112));
  if (*(char *)(v61 - 121) < 0)
    operator delete(*(void **)(v61 - 144));
  if (a59 < 0)
  {
    operator delete(a54);
    if ((v60 & 1) == 0)
    {
LABEL_14:

      v63 = *(void **)(v61 - 176);
      if (v63)
      {
        *(_QWORD *)(v61 - 168) = v63;
        operator delete(v63);
      }

      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a27);

      Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(&a29);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a31);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a35);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a37);
      _Unwind_Resume(a1);
    }
  }
  else if (!v60)
  {
    goto LABEL_14;
  }
  __cxa_free_exception(v59);
  goto LABEL_14;
}

void Espresso::V9Engine::v9_conv_kernel::share_weights(uint64_t a1, const void **a2)
{
  id *v3;
  id *v4;
  void *v5;

  if (*a2)
  {
    if (v3)
    {
      v4 = v3;
      objc_storeStrong((id *)(a1 + 648), v3[81]);
      objc_storeStrong((id *)(a1 + 624), v4[78]);
      objc_storeStrong((id *)(a1 + 632), v4[79]);
      objc_storeStrong((id *)(a1 + 640), v4[80]);
      v5 = *(void **)(a1 + 616);
      *(_QWORD *)(a1 + 616) = 0;

    }
  }
}

void Espresso::V9Engine::v9_conv_kernel::clear_weights(Espresso::V9Engine::v9_conv_kernel *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  std::shared_ptr<Espresso::blob<unsigned short,4>>::reset[abi:ne180100]((_QWORD *)this + 83);
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 88);
  *(_OWORD *)((char *)this + 696) = 0u;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  std::shared_ptr<Espresso::blob<unsigned short,4>>::reset[abi:ne180100]((_QWORD *)this + 89);
  v5 = (void *)*((_QWORD *)this + 81);
  *((_QWORD *)this + 81) = 0;

  v6 = (void *)*((_QWORD *)this + 78);
  *((_QWORD *)this + 78) = 0;

  v7 = (void *)*((_QWORD *)this + 79);
  *((_QWORD *)this + 79) = 0;

  v8 = (void *)*((_QWORD *)this + 80);
  *((_QWORD *)this + 80) = 0;

}

void Espresso::V9Engine::v9_conv_kernel::top_shapes_for_bottom_shapes(int32x2_t *a1@<X0>, __int128 **a2@<X1>, _QWORD *a3@<X8>)
{
  __int128 *v5[3];
  __int128 **v6;

  if (a1[101].i32[0] < 1 || a1[101].i32[1] < 1)
  {
    Espresso::generic_convolution_kernel::top_shapes_for_bottom_shapes((uint64_t)a1, a2, a3);
  }
  else
  {
    memset(v5, 0, sizeof(v5));
    std::vector<Espresso::layer_shape>::__init_with_size[abi:ne180100]<Espresso::layer_shape*,Espresso::layer_shape*>(v5, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 6);
    *(int32x2_t *)v5[0] = vmul_s32(*(int32x2_t *)v5[0], a1[101]);
    Espresso::generic_convolution_kernel::top_shapes_for_bottom_shapes((uint64_t)a1, v5, a3);
    v6 = v5;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v6);
  }
}

void sub_191657ABC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t Espresso::V9Engine::v9_conv_kernel::tmp_aux_buffer_size(Espresso::V9Engine::v9_conv_kernel *this)
{
  unsigned int v1;
  uint64_t v2;

  if (!*((_QWORD *)this + 80))
    return 0;
  v1 = *((_DWORD *)this + 165) - 1;
  v2 = objc_msgSend(*((id *)this + 78), "length");
  if (v1 <= 1)
    return 2 * v2;
  else
    return 4 * v2;
}

void Espresso::V9Engine::v9_conv_kernel::tmp_aux_buffer_create(const void **this, uint64_t a2)
{
  id *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  void *v11;

  if (this[80])
  {
    v5 = (std::__shared_weak_count *)this[2];
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
    }
    v8 = objc_msgSend(v4[18], "newBufferWithLength:options:", a2, 0, v4, v5);
    if (v5)
    {
      v9 = (unint64_t *)&v5->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v11 = (void *)this[97];
    this[97] = (const void *)v8;

  }
}

void sub_191657BF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void Espresso::V9Engine::v9_conv_kernel::tmp_aux_buffer_share(uint64_t a1, uint64_t a2)
{
  id *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::runtime_error *exception;

  if (*(_QWORD *)(a1 + 640))
  {
    if (!*(_QWORD *)a2
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Inconsistent state");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v5 = *(std::__shared_weak_count **)(a2 + 8);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      objc_storeStrong((id *)(a1 + 776), v4[97]);
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    else
    {
      objc_storeStrong((id *)(a1 + 776), v4[97]);
    }
  }
}

void sub_191657D04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t Espresso::V9Engine::v9_conv_kernel::wisdom_key(Espresso::V9Engine::v9_conv_kernel *this, Espresso::layer_data *a2, Espresso::layer_data *a3)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD v14[2];
  _QWORD v15[11];
  char v16;
  uint64_t v17;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v14);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"C,", 2);
  v3 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)",", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"K,", 2);
  v4 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)",", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"X,", 2);
  v5 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)",", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Y,", 2);
  v6 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)",", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"G,", 2);
  v7 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)",", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"W,", 2);
  v8 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)",", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"H,", 2);
  v9 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)",", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"S,", 2);
  v10 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)",", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"V,", 2);
  v11 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)",", 1);
  std::stringbuf::str();
  v14[0] = *MEMORY[0x1E0DE4F50];
  v12 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v14 + *(_QWORD *)(v14[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v15[0] = v12;
  v15[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v16 < 0)
    operator delete((void *)v15[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x19401CCD0](&v17);
}

void sub_191657F80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void Espresso::V9Engine::v9_conv_kernel::wisdom_tunables(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void Espresso::V9Engine::v9_conv_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t *a2, unsigned __int8 *a3, const void *a4, unint64_t a5, uint64_t *a6)
{
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  Espresso::generic_convolution_kernel::__set_weight_raw_blob(a1, a2, a3, a4, a5, a6);
  v8 = (std::__shared_weak_count *)a2[1];
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  Espresso::V9Engine::v9_conv_kernel::setup_weights_bias_if_ready(a1);
  if (v8)
  {
    v11 = (unint64_t *)&v8->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_191658034(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

const char *Espresso::V9Engine::v9_conv_kernel::kernel_type_str(Espresso::V9Engine::v9_conv_kernel *this)
{
  return "v9_conv";
}

void Espresso::V9Engine::v9_conv_kernel::set_biases(uint64_t a1, uint64_t *a2)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;

  v2 = (std::__shared_weak_count *)a2[1];
  v13 = *a2;
  v14 = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v11 = 0;
  v12 = 0;
  (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)a1 + 416))(a1, &v13, &v11);
  v5 = v12;
  if (v12)
  {
    v6 = (unint64_t *)&v12->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = v14;
  if (v14)
  {
    v9 = (unint64_t *)&v14->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_19165811C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void Espresso::V9Engine::v9_conv_kernel::set_weights(uint64_t a1, uint64_t *a2)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;

  v2 = (std::__shared_weak_count *)a2[1];
  v13 = *a2;
  v14 = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v11 = 0;
  v12 = 0;
  (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)a1 + 424))(a1, &v13, &v11);
  v5 = v12;
  if (v12)
  {
    v6 = (unint64_t *)&v12->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = v14;
  if (v14)
  {
    v9 = (unint64_t *)&v14->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_191658200(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void Espresso::V9Engine::v9_conv_kernel::set_weights()
{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Invalid call");
  __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
}

void sub_191658258(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Espresso::V9Engine::v9_conv_kernel::set_biases(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 680), *a2, a2[1]);
  v5 = *(std::__shared_weak_count **)(a3 + 8);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  Espresso::V9Engine::v9_conv_kernel::setup_weights_bias_if_ready(a1);
  if (v5)
  {
    v8 = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_19165830C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void Espresso::V9Engine::v9_conv_kernel::set_weights(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 664), *a2, a2[1]);
  v5 = *(std::__shared_weak_count **)(a3 + 8);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  Espresso::V9Engine::v9_conv_kernel::setup_weights_bias_if_ready(a1);
  if (v5)
  {
    v8 = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_1916583C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t Espresso::V9Engine::v9_conv_kernel::get_biases@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 688);
  *a2 = *(_QWORD *)(this + 680);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

uint64_t Espresso::V9Engine::v9_conv_kernel::get_weights@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 672);
  *a2 = *(_QWORD *)(this + 664);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

void Espresso::V9Engine::v9_conv_kernel::set_quantized_weights_blob(int *a1, uint64_t *a2, uint64_t a3)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t jj;
  uint64_t kk;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t mm;
  uint64_t nn;
  uint64_t i1;
  uint64_t i2;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t i;
  uint64_t j;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t k;
  uint64_t m;
  uint64_t n;
  uint64_t ii;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  std::__shared_weak_count *v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  uint64_t v85;
  std::__shared_weak_count *v86;
  uint64_t v87;
  __int128 v88;
  __int128 v89;
  uint64_t v90;
  uint64_t v91;
  std::__shared_weak_count *v92;
  uint64_t v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;

  v4 = *a2;
  v3 = (std::__shared_weak_count *)a2[1];
  v79 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v74 = (uint64_t)v3;
  v75 = v4;
  v7 = a1[140];
  v8 = a1[148];
  v9 = *(unsigned int *)(v4 + 8);
  v10 = *(unsigned int *)(v4 + 12);
  v11 = v4 + 8;
  v72 = *(_DWORD *)(v11 + 12);
  v73 = *(_DWORD *)(v11 + 8);
  v12 = (v73 - 1) / (int)v8;
  v13 = (v12 + 1);
  v14 = (v72 - 1) / (int)v7;
  v76 = v14;
  v15 = (v14 + 1);
  if ((a1[149] & 1) != 0)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,6>,std::allocator<Espresso::blob<unsigned char,6>>,int &,int &,int &,int &,int &,int &,void>(&v81, v8, v7, v12 + 1, v9, v10, v14 + 1);
    v40 = 0;
    v80 = v81;
    v71 = *((_QWORD *)&v81 + 1);
    v41 = v81;
    v91 = 0;
    v92 = 0;
    v42 = 1;
    do
    {
      *((_QWORD *)&v81 + v40) = (int)v42;
      v42 *= *(int *)(v11 + 4 * v40++);
    }
    while (v40 != 4);
    v88 = v81;
    v89 = v82;
    v90 = v42;
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v91, v75, v74);
    v43 = 0;
    v93 = *(_QWORD *)(v75 + 24);
    v85 = 0;
    v86 = 0;
    v44 = 1;
    do
    {
      *((_QWORD *)&v94 + v43) = (int)v44;
      v44 *= *(int *)(v41 + 8 + 4 * v43++);
    }
    while (v43 != 6);
    v81 = v94;
    v82 = v95;
    v83 = v96;
    v84 = v44;
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v85, v41, v71);
    v87 = *(_QWORD *)(v41 + 32);
    v45 = *(int *)(v41 + 8);
    for (i = 12; i != 32; i += 4)
      v45 *= *(int *)(v41 + i);
    if (v45)
    {
      for (j = 0; j != v45; ++j)
        *(_BYTE *)(*(_QWORD *)(v41 + 32) + j) = 0;
    }
    v24 = (uint64_t)a1;
    if ((v76 & 0x80000000) == 0)
    {
      v48 = 0;
      if (v72 >= (int)v7)
        v49 = v7;
      else
        v49 = v72;
      if (v73 >= (int)v8)
        v50 = v8;
      else
        v50 = v73;
      do
      {
        if ((v12 & 0x80000000) == 0)
        {
          v51 = 0;
          v52 = 0;
          do
          {
            if ((int)v10 >= 1)
            {
              for (k = 0; k != v10; ++k)
              {
                if ((int)v9 >= 1)
                {
                  for (m = 0; m != v9; ++m)
                  {
                    if ((int)v49 >= 1)
                    {
                      for (n = 0; n != v49; ++n)
                      {
                        if ((int)v50 >= 1)
                        {
                          for (ii = 0; ii != v50; ++ii)
                            *(_BYTE *)(v87
                                     + v52 * v82
                                     + v48 * *((_QWORD *)&v83 + 1)
                                     + k * v83
                                     + m * *((_QWORD *)&v82 + 1)
                                     + n * *((_QWORD *)&v81 + 1)
                                     + ii) = *(_BYTE *)(v93
                                                      + m
                                                      + *((_QWORD *)&v88 + 1) * k
                                                      + v89 * (v51 + ii)
                                                      + *((_QWORD *)&v89 + 1) * (n + v48 * v7));
                        }
                      }
                    }
                  }
                }
              }
            }
            ++v52;
            v51 += v8;
          }
          while (v52 != v13);
        }
        ++v48;
      }
      while (v48 != v15);
    }
    v57 = v86;
    if (v86)
    {
      v58 = (unint64_t *)&v86->__shared_owners_;
      do
        v59 = __ldaxr(v58);
      while (__stlxr(v59 - 1, v58));
      if (!v59)
      {
        ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
        std::__shared_weak_count::__release_weak(v57);
      }
    }
    v37 = v92;
    if (v92)
    {
      v60 = (unint64_t *)&v92->__shared_owners_;
      do
        v39 = __ldaxr(v60);
      while (__stlxr(v39 - 1, v60));
LABEL_86:
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
  }
  else
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,6>,std::allocator<Espresso::blob<unsigned char,6>>,int &,int &,int &,int &,int &,int &,void>(&v81, v7, v8, v12 + 1, v9, v10, v14 + 1);
    v16 = 0;
    v80 = v81;
    v70 = *((_QWORD *)&v81 + 1);
    v17 = v81;
    v91 = 0;
    v92 = 0;
    v18 = 1;
    do
    {
      *((_QWORD *)&v81 + v16) = (int)v18;
      v18 *= *(int *)(v11 + 4 * v16++);
    }
    while (v16 != 4);
    v88 = v81;
    v89 = v82;
    v90 = v18;
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v91, v75, v74);
    v19 = 0;
    v93 = *(_QWORD *)(v75 + 24);
    v85 = 0;
    v86 = 0;
    v20 = 1;
    do
    {
      *((_QWORD *)&v94 + v19) = (int)v20;
      v20 *= *(int *)(v17 + 8 + 4 * v19++);
    }
    while (v19 != 6);
    v81 = v94;
    v82 = v95;
    v83 = v96;
    v84 = v20;
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v85, v17, v70);
    v87 = *(_QWORD *)(v17 + 32);
    v21 = *(int *)(v17 + 8);
    for (jj = 12; jj != 32; jj += 4)
      v21 *= *(int *)(v17 + jj);
    if (v21)
    {
      for (kk = 0; kk != v21; ++kk)
        *(_BYTE *)(*(_QWORD *)(v17 + 32) + kk) = 0;
    }
    v24 = (uint64_t)a1;
    if ((v76 & 0x80000000) == 0)
    {
      v25 = 0;
      if (v72 >= (int)v7)
        v26 = v7;
      else
        v26 = v72;
      if (v73 >= (int)v8)
        v27 = v8;
      else
        v27 = v73;
      do
      {
        if ((v12 & 0x80000000) == 0)
        {
          v28 = 0;
          v29 = 0;
          do
          {
            if ((int)v10 >= 1)
            {
              for (mm = 0; mm != v10; ++mm)
              {
                if ((int)v9 >= 1)
                {
                  for (nn = 0; nn != v9; ++nn)
                  {
                    if ((int)v26 >= 1)
                    {
                      for (i1 = 0; i1 != v26; ++i1)
                      {
                        if ((int)v27 >= 1)
                        {
                          for (i2 = 0; i2 != v27; ++i2)
                            *(_BYTE *)(v87
                                     + i1
                                     + *((_QWORD *)&v81 + 1) * i2
                                     + v82 * v29
                                     + *((_QWORD *)&v82 + 1) * nn
                                     + v83 * mm
                                     + *((_QWORD *)&v83 + 1) * v25) = *(_BYTE *)(v93
                                                                               + nn
                                                                               + *((_QWORD *)&v88 + 1) * mm
                                                                               + v89 * (v28 + i2)
                                                                               + *((_QWORD *)&v89 + 1) * (i1 + v25 * v7));
                        }
                      }
                    }
                  }
                }
              }
            }
            ++v29;
            v28 += v8;
          }
          while (v29 != v13);
        }
        ++v25;
      }
      while (v25 != v15);
    }
    v34 = v86;
    if (v86)
    {
      v35 = (unint64_t *)&v86->__shared_owners_;
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    v37 = v92;
    if (v92)
    {
      v38 = (unint64_t *)&v92->__shared_owners_;
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      goto LABEL_86;
    }
  }
  if (v79)
  {
    v61 = (unint64_t *)&v79->__shared_owners_;
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(v24 + 696), v80, *((uint64_t *)&v80 + 1));
  v63 = *(std::__shared_weak_count **)(a3 + 8);
  if (v63)
  {
    v64 = (unint64_t *)&v63->__shared_owners_;
    do
      v65 = __ldxr(v64);
    while (__stxr(v65 + 1, v64));
  }
  Espresso::V9Engine::v9_conv_kernel::setup_weights_bias_if_ready(v24);
  if (v63)
  {
    v66 = (unint64_t *)&v63->__shared_owners_;
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  if (*((_QWORD *)&v80 + 1))
  {
    v68 = (unint64_t *)(*((_QWORD *)&v80 + 1) + 8);
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v80 + 1) + 16))(*((_QWORD *)&v80 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v80 + 1));
    }
  }
}

void sub_191658B34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  va_list va1;
  uint64_t v17;
  va_list va2;

  va_start(va2, a11);
  va_start(va1, a11);
  va_start(va, a11);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v15 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  _Unwind_Resume(a1);
}

void Espresso::V9Engine::v9_conv_kernel::set_quantization_lut_blob()
{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Not implemented/deprecated");
  __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
}

void sub_191658BA8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Espresso::V9Engine::v9_conv_kernel::set_quantization_ranges_blob(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 712), *a2, a2[1]);
  v5 = *(std::__shared_weak_count **)(a3 + 8);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  Espresso::V9Engine::v9_conv_kernel::setup_weights_bias_if_ready(a1);
  if (v5)
  {
    v8 = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_191658C5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void Espresso::V9Engine::v9_conv_kernel::setup_weights_bias_if_ready(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  __int128 v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  float *v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  unint64_t *v41;
  unint64_t v42;
  const void *v43;
  _QWORD *v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t i;
  uint64_t v52;
  void *v53;
  unint64_t *v54;
  unint64_t v55;
  const void *v56;
  id *v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  void *v62;
  unint64_t *v63;
  unint64_t v64;
  const void *v65;
  uint64_t v66;
  _QWORD *v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  unint64_t *v75;
  unint64_t v76;
  int *v77;
  _WORD *v78;
  int v79;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  unsigned int *v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  __int128 v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  float *v103;
  __int128 v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  unint64_t *v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  int v118;
  int v119;
  uint64_t v120;
  int v121;
  uint64_t v122;
  __int128 v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t n;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t ii;
  uint64_t jj;
  uint64_t v139;
  char *v140;
  _DWORD *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  _DWORD *v145;
  _DWORD *v146;
  uint64_t v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  __int128 v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  uint64_t v160;
  uint64_t j;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t k;
  uint64_t m;
  uint64_t v170;
  char *v171;
  _DWORD *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  _DWORD *v176;
  char *v177;
  uint64_t v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  unint64_t v181;
  unint64_t *v182;
  unint64_t *v183;
  unint64_t v184;
  uint64_t v185;
  uint64_t kk;
  const void *v187;
  _QWORD *v188;
  std::__shared_weak_count *v189;
  unint64_t *v190;
  unint64_t v191;
  void *v192;
  uint64_t v193;
  void *v194;
  unint64_t *v195;
  unint64_t v196;
  int *v197;
  id v198;
  _WORD *mm;
  int v200;
  int *v202;
  const void *v203;
  uint64_t v204;
  _QWORD *v205;
  std::__shared_weak_count *v206;
  unint64_t *v207;
  unint64_t v208;
  void *v209;
  uint64_t v210;
  void *v211;
  unint64_t *v212;
  unint64_t v213;
  int *v214;
  _WORD *v215;
  int v216;
  id v218;
  unint64_t *v219;
  unint64_t v220;
  unint64_t *v221;
  unint64_t v222;
  unint64_t *v223;
  std::runtime_error *v224;
  std::runtime_error *v225;
  std::runtime_error *exception;
  std::runtime_error *v227;
  std::runtime_error *v228;
  int v229;
  int v230;
  uint64_t v231;
  std::__shared_weak_count *v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  uint64_t v239;
  uint64_t v240;
  std::__shared_weak_count *v241;
  char *v242;
  __int128 v243;
  __int128 v244;
  uint64_t v245;
  uint64_t v246;
  std::__shared_weak_count *v247;
  uint64_t v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;

  v2 = *(_QWORD *)(a1 + 712);
  if (v2 && *(_QWORD *)(a1 + 696) && *(_QWORD *)(a1 + 680))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 688);
    *(_QWORD *)&v236 = *(_QWORD *)(a1 + 680);
    *((_QWORD *)&v236 + 1) = v3;
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldxr(p_shared_owners);
      while (__stxr(v5 + 1, p_shared_owners));
      v2 = *(_QWORD *)(a1 + 712);
    }
    v6 = *(_QWORD *)(a1 + 720);
    *(_QWORD *)&v243 = v2;
    *((_QWORD *)&v243 + 1) = v6;
    if (v6)
    {
      v7 = (unint64_t *)(v6 + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    if (*(_DWORD *)(a1 + 416))
    {
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v249, *(_DWORD *)(a1 + 344), 1, 1, 1);
      v9 = v249;
      v249 = 0uLL;
      v236 = v9;
      if (v3)
      {
        v10 = (unint64_t *)&v3->__shared_owners_;
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
      }
      v12 = (std::__shared_weak_count *)*((_QWORD *)&v249 + 1);
      if (*((_QWORD *)&v249 + 1))
      {
        v13 = (unint64_t *)(*((_QWORD *)&v249 + 1) + 8);
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v249, 2 * *(_DWORD *)(a1 + 344), 1, 1, 1);
      v15 = v249;
      v249 = 0uLL;
      v16 = (std::__shared_weak_count *)*((_QWORD *)&v243 + 1);
      v243 = v15;
      if (v16)
      {
        v17 = (unint64_t *)&v16->__shared_owners_;
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      v19 = (std::__shared_weak_count *)*((_QWORD *)&v249 + 1);
      if (*((_QWORD *)&v249 + 1))
      {
        v20 = (unint64_t *)(*((_QWORD *)&v249 + 1) + 8);
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      v22 = *(_QWORD *)(a1 + 680);
      v23 = *(std::__shared_weak_count **)(a1 + 688);
      if (v23)
      {
        v24 = (unint64_t *)&v23->__shared_owners_;
        do
          v25 = __ldxr(v24);
        while (__stxr(v25 + 1, v24));
      }
      v26 = *(unsigned int *)(a1 + 344);
      if ((int)v26 >= 1)
      {
        v27 = 0;
        v28 = *(_QWORD *)(v22 + 16);
        v29 = *(_QWORD *)(*(_QWORD *)(a1 + 712) + 16);
        v30 = *(_QWORD *)(v243 + 16);
        v31 = 4 * v26;
        v32 = *(_QWORD *)(v236 + 16);
        v33 = v30 + 4 * v26;
        v34 = v29 + 4 * v26;
        v35 = (float *)(v28 + 8);
        do
        {
          v36 = *(v35 - 2);
          v37 = *(v35 - 1);
          v38 = *v35;
          v39 = v35[1];
          v35 += 4;
          v40 = 1.0 / v39;
          *(float *)(v30 + v27) = (float)(v36 * v40) * *(float *)(v29 + v27);
          *(float *)(v33 + v27) = (float)(v36 * v40) * *(float *)(v34 + v27);
          *(float *)(v32 + v27) = v37 + (float)((float)-(float)(v38 * v40) * v36);
          v27 += 4;
        }
        while (v31 != v27);
      }
      if (v23)
      {
        v41 = (unint64_t *)&v23->__shared_owners_;
        do
          v42 = __ldaxr(v41);
        while (__stlxr(v42 - 1, v41));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
    }
    v43 = *(const void **)(a1 + 8);
    if (!v43
    {
      v249 = 0uLL;
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
      exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
    }
    v45 = *(std::__shared_weak_count **)(a1 + 16);
    *(_QWORD *)&v249 = v44;
    *((_QWORD *)&v249 + 1) = v45;
    if (v45)
    {
      v46 = (unint64_t *)&v45->__shared_owners_;
      do
        v47 = __ldxr(v46);
      while (__stxr(v47 + 1, v46));
    }
    v48 = (void *)v44[18];
    v49 = *(_QWORD *)(a1 + 696);
    v50 = *(int *)(v49 + 8);
    for (i = 12; i != 32; i += 4)
      v50 *= *(int *)(v49 + i);
    v52 = objc_msgSend(v48, "newBufferWithBytes:length:options:", *(_QWORD *)(v49 + 32), v50, 0);
    v53 = *(void **)(a1 + 624);
    *(_QWORD *)(a1 + 624) = v52;

    if (v45)
    {
      v54 = (unint64_t *)&v45->__shared_owners_;
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v55 - 1, v54));
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
    v56 = *(const void **)(a1 + 8);
    if (!v56
    {
      v249 = 0uLL;
      v227 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v227, "Espresso: wrong_context_type");
      v227->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
    }
    v58 = *(std::__shared_weak_count **)(a1 + 16);
    *(_QWORD *)&v249 = v57;
    *((_QWORD *)&v249 + 1) = v58;
    if (v58)
    {
      v59 = (unint64_t *)&v58->__shared_owners_;
      do
        v60 = __ldxr(v59);
      while (__stxr(v60 + 1, v59));
    }
    v61 = objc_msgSend(v57[18], "newBufferWithBytes:length:options:", *(_QWORD *)(v243 + 16), 4 * *(int *)(v243 + 8), 0);
    v62 = *(void **)(a1 + 640);
    *(_QWORD *)(a1 + 640) = v61;

    if (v58)
    {
      v63 = (unint64_t *)&v58->__shared_owners_;
      do
        v64 = __ldaxr(v63);
      while (__stlxr(v64 - 1, v63));
      if (!v64)
      {
        ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
        std::__shared_weak_count::__release_weak(v58);
      }
    }
    v65 = *(const void **)(a1 + 8);
    if (!v65
      || (v66 = *(int *)(v236 + 8),
    {
      v249 = 0uLL;
      v228 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v228, "Espresso: wrong_context_type");
      v228->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
    }
    v68 = *(std::__shared_weak_count **)(a1 + 16);
    *(_QWORD *)&v249 = v67;
    *((_QWORD *)&v249 + 1) = v68;
    if (v68)
    {
      v69 = (unint64_t *)&v68->__shared_owners_;
      do
        v70 = __ldxr(v69);
      while (__stxr(v70 + 1, v69));
    }
    v71 = (void *)v67[18];
    if ((unint64_t)(2 * v66) <= 0x10)
      v72 = 16;
    else
      v72 = 2 * v66;
    v73 = objc_msgSend(v71, "newBufferWithLength:options:", v72, 0);
    v74 = *(void **)(a1 + 648);
    *(_QWORD *)(a1 + 648) = v73;

    if (v68)
    {
      v75 = (unint64_t *)&v68->__shared_owners_;
      do
        v76 = __ldaxr(v75);
      while (__stlxr(v76 - 1, v75));
      if (!v76)
      {
        ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
        std::__shared_weak_count::__release_weak(v68);
      }
    }
    v77 = *(int **)(v236 + 16);
    v78 = (_WORD *)objc_msgSend(*(id *)(a1 + 648), "contents");
    if ((_DWORD)v66)
    {
      do
      {
        v79 = *v77++;
        _S0 = v79;
        __asm { FCVT            H0, S0 }
        *v78++ = _S0;
        --v66;
      }
      while (v66);
    }
    if (*((_QWORD *)&v243 + 1))
    {
      v85 = (unint64_t *)(*((_QWORD *)&v243 + 1) + 8);
      do
        v86 = __ldaxr(v85);
      while (__stlxr(v86 - 1, v85));
      if (!v86)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v243 + 1) + 16))(*((_QWORD *)&v243 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v243 + 1));
      }
    }
    v87 = (std::__shared_weak_count *)*((_QWORD *)&v236 + 1);
    if (*((_QWORD *)&v236 + 1))
    {
      v88 = (unint64_t *)(*((_QWORD *)&v236 + 1) + 8);
      do
        v89 = __ldaxr(v88);
      while (__stlxr(v89 - 1, v88));
LABEL_261:
      if (!v89)
      {
        ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
        std::__shared_weak_count::__release_weak(v87);
      }
      return;
    }
    return;
  }
  if (!*(_QWORD *)(a1 + 680) && (*(_DWORD *)(a1 + 336) || *(_DWORD *)(a1 + 416)))
    return;
  v90 = *(unsigned int **)(a1 + 664);
  if (!v90)
    return;
  v91 = *(std::__shared_weak_count **)(a1 + 688);
  *(_QWORD *)&v235 = *(_QWORD *)(a1 + 680);
  *((_QWORD *)&v235 + 1) = v91;
  if (v91)
  {
    v92 = (unint64_t *)&v91->__shared_owners_;
    do
      v93 = __ldxr(v92);
    while (__stxr(v93 + 1, v92));
    v90 = *(unsigned int **)(a1 + 664);
  }
  v94 = *(std::__shared_weak_count **)(a1 + 672);
  *((_QWORD *)&v234 + 1) = v94;
  if (v94)
  {
    v95 = (unint64_t *)&v94->__shared_owners_;
    do
      v96 = __ldxr(v95);
    while (__stxr(v96 + 1, v95));
  }
  if (*(_DWORD *)(a1 + 416))
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v236, *(_DWORD *)(a1 + 344), 1, 1, 1);
    v97 = v236;
    v236 = 0uLL;
    v235 = v97;
    if (v91)
    {
      v98 = (unint64_t *)&v91->__shared_owners_;
      do
        v99 = __ldaxr(v98);
      while (__stlxr(v99 - 1, v98));
      if (!v99)
      {
        ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
        std::__shared_weak_count::__release_weak(v91);
      }
    }
    v100 = (std::__shared_weak_count *)*((_QWORD *)&v236 + 1);
    if (*((_QWORD *)&v236 + 1))
    {
      v101 = (unint64_t *)(*((_QWORD *)&v236 + 1) + 8);
      do
        v102 = __ldaxr(v101);
      while (__stlxr(v102 - 1, v101));
      if (!v102)
      {
        ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
        std::__shared_weak_count::__release_weak(v100);
      }
    }
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int const*&,void>(&v236, *(_QWORD *)(a1 + 664) + 8);
    v104 = v236;
    v236 = 0uLL;
    v105 = (std::__shared_weak_count *)*((_QWORD *)&v234 + 1);
    v234 = v104;
    if (v105)
    {
      v106 = (unint64_t *)&v105->__shared_owners_;
      do
        v107 = __ldaxr(v106);
      while (__stlxr(v107 - 1, v106));
      if (!v107)
      {
        ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
        std::__shared_weak_count::__release_weak(v105);
      }
    }
    v108 = (std::__shared_weak_count *)*((_QWORD *)&v236 + 1);
    if (*((_QWORD *)&v236 + 1))
    {
      v109 = (unint64_t *)(*((_QWORD *)&v236 + 1) + 8);
      do
        v110 = __ldaxr(v109);
      while (__stlxr(v110 - 1, v109));
      if (!v110)
      {
        ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
        std::__shared_weak_count::__release_weak(v108);
      }
    }
    v90 = (unsigned int *)v234;
    Espresso::util_bake_batchnorm_generic(*(unsigned int *)(a1 + 344), *(_DWORD *)(*(_QWORD *)(a1 + 664) + 12)* *(_DWORD *)(*(_QWORD *)(a1 + 664) + 8)* *(_DWORD *)(*(_QWORD *)(a1 + 664) + 16), 1, *(_QWORD *)(*(_QWORD *)(a1 + 664) + 24), *(const float **)(v234 + 24), *(float **)(*(_QWORD *)(a1 + 680) + 16), *(const float **)(v235 + 16), v103);
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 680), v235, *((uint64_t *)&v235 + 1));
    *(_DWORD *)(a1 + 416) = 0;
    v94 = (std::__shared_weak_count *)*((_QWORD *)&v234 + 1);
  }
  v231 = (uint64_t)v90;
  v232 = v94;
  if (v94)
  {
    v111 = (unint64_t *)&v94->__shared_owners_;
    do
      v112 = __ldxr(v111);
    while (__stxr(v112 + 1, v111));
  }
  v113 = *(int *)(a1 + 560);
  v114 = *(int *)(a1 + 592);
  v115 = v90[2];
  v116 = v90[3];
  v117 = v90[4];
  v118 = v90[5];
  v119 = (v117 - 1) / (int)v114;
  v120 = (v119 + 1);
  v121 = (v118 - 1) / (int)v113;
  v122 = (v121 + 1);
  v229 = v117;
  v230 = v121;
  if ((*(_DWORD *)(a1 + 596) & 1) != 0)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,6>,std::allocator<Espresso::blob<float,6>>,int &,int &,int &,int &,int &,int &,void>(&v236, v114, v113, v119 + 1, v115, v116, v121 + 1);
    v154 = v236;
    v236 = 0uLL;
    v233 = v154;
    v155 = 0;
    v246 = 0;
    v247 = 0;
    v156 = 1;
    do
    {
      *((_QWORD *)&v236 + v155) = (int)v156;
      v156 *= *(int *)(v231 + 8 + 4 * v155++);
    }
    while (v155 != 4);
    v243 = v236;
    v244 = v237;
    v245 = v156;
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v246, v231, (uint64_t)v232);
    v157 = 0;
    v248 = *(_QWORD *)(v231 + 24);
    v240 = 0;
    v241 = 0;
    v158 = 1;
    do
    {
      *((_QWORD *)&v249 + v157) = (int)v158;
      v158 *= *(int *)(v233 + 8 + 4 * v157++);
    }
    while (v157 != 6);
    v236 = v249;
    v237 = v250;
    v238 = v251;
    v239 = v158;
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v240, v233, *((uint64_t *)&v233 + 1));
    v159 = *(char **)(v233 + 32);
    v242 = v159;
    v160 = *(int *)(v233 + 8);
    for (j = 12; j != 32; j += 4)
      v160 *= *(int *)(v233 + j);
    if (v160)
      bzero(v159, 4 * v160);
    if ((v230 & 0x80000000) == 0)
    {
      v162 = 0;
      v163 = 0;
      if (v118 >= (int)v113)
        v164 = v113;
      else
        v164 = v118;
      if (v229 >= (int)v114)
        v165 = v114;
      else
        v165 = v229;
      do
      {
        if ((v119 & 0x80000000) == 0)
        {
          v166 = 0;
          v167 = 0;
          do
          {
            if ((int)v116 >= 1)
            {
              for (k = 0; k != v116; ++k)
              {
                if ((int)v115 >= 1)
                {
                  for (m = 0; m != v115; ++m)
                  {
                    if ((int)v164 >= 1)
                    {
                      v170 = 0;
                      v171 = &v159[4 * v167 * v237
                                 + 4 * v163 * *((_QWORD *)&v238 + 1)
                                 + 4 * k * v238
                                 + 4 * *((_QWORD *)&v237 + 1) * m];
                      v172 = (_DWORD *)(v248
                                      + 4
                                      * (m + v162 * *((_QWORD *)&v244 + 1) + v166 * v244 + k * *((_QWORD *)&v243 + 1)));
                      v173 = 4 * *((_QWORD *)&v236 + 1);
                      v174 = 4 * *((_QWORD *)&v244 + 1);
                      v175 = 4 * v244;
                      do
                      {
                        v176 = v172;
                        v177 = v171;
                        v178 = v165;
                        if ((int)v165 >= 1)
                        {
                          do
                          {
                            *(_DWORD *)v177 = *v176;
                            v177 += 4;
                            v176 = (_DWORD *)((char *)v176 + v175);
                            --v178;
                          }
                          while (v178);
                        }
                        ++v170;
                        v171 += v173;
                        v172 = (_DWORD *)((char *)v172 + v174);
                      }
                      while (v170 != v164);
                    }
                  }
                }
              }
            }
            ++v167;
            v166 += v114;
          }
          while (v167 != v120);
        }
        ++v163;
        v162 += v113;
      }
      while (v163 != v122);
    }
    v179 = v241;
    if (v241)
    {
      v180 = (unint64_t *)&v241->__shared_owners_;
      do
        v181 = __ldaxr(v180);
      while (__stlxr(v181 - 1, v180));
      if (!v181)
      {
        ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
        std::__shared_weak_count::__release_weak(v179);
      }
    }
    v151 = v247;
    if (v247)
    {
      v182 = (unint64_t *)&v247->__shared_owners_;
      do
        v153 = __ldaxr(v182);
      while (__stlxr(v153 - 1, v182));
LABEL_204:
      if (!v153)
      {
        ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
        std::__shared_weak_count::__release_weak(v151);
      }
    }
  }
  else
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,6>,std::allocator<Espresso::blob<float,6>>,int &,int &,int &,int &,int &,int &,void>(&v236, v113, v114, v119 + 1, v115, v116, v121 + 1);
    v123 = v236;
    v236 = 0uLL;
    v233 = v123;
    v124 = 0;
    v246 = 0;
    v247 = 0;
    v125 = 1;
    do
    {
      *((_QWORD *)&v236 + v124) = (int)v125;
      v125 *= *(int *)(v231 + 8 + 4 * v124++);
    }
    while (v124 != 4);
    v243 = v236;
    v244 = v237;
    v245 = v125;
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v246, v231, (uint64_t)v232);
    v126 = 0;
    v248 = *(_QWORD *)(v231 + 24);
    v240 = 0;
    v241 = 0;
    v127 = 1;
    do
    {
      *((_QWORD *)&v249 + v126) = (int)v127;
      v127 *= *(int *)(v233 + 8 + 4 * v126++);
    }
    while (v126 != 6);
    v236 = v249;
    v237 = v250;
    v238 = v251;
    v239 = v127;
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v240, v233, *((uint64_t *)&v233 + 1));
    v128 = *(char **)(v233 + 32);
    v242 = v128;
    v129 = *(int *)(v233 + 8);
    for (n = 12; n != 32; n += 4)
      v129 *= *(int *)(v233 + n);
    if (v129)
      bzero(v128, 4 * v129);
    if ((v230 & 0x80000000) == 0)
    {
      v131 = 0;
      v132 = 0;
      if (v118 >= (int)v113)
        v133 = v113;
      else
        v133 = v118;
      if (v229 >= (int)v114)
        v134 = v114;
      else
        v134 = v229;
      do
      {
        if ((v119 & 0x80000000) == 0)
        {
          v135 = 0;
          v136 = 0;
          do
          {
            if ((int)v116 >= 1)
            {
              for (ii = 0; ii != v116; ++ii)
              {
                if ((int)v115 >= 1)
                {
                  for (jj = 0; jj != v115; ++jj)
                  {
                    if ((int)v133 >= 1)
                    {
                      v139 = 0;
                      v140 = &v128[4 * v136 * v237
                                 + 4 * v132 * *((_QWORD *)&v238 + 1)
                                 + 4 * ii * v238
                                 + 4 * *((_QWORD *)&v237 + 1) * jj];
                      v141 = (_DWORD *)(v248
                                      + 4
                                      * (jj + v131 * *((_QWORD *)&v244 + 1) + v135 * v244 + ii * *((_QWORD *)&v243 + 1)));
                      v142 = 4 * *((_QWORD *)&v236 + 1);
                      v143 = 4 * *((_QWORD *)&v244 + 1);
                      v144 = 4 * v244;
                      do
                      {
                        v145 = v141;
                        v146 = v140;
                        v147 = v134;
                        if ((int)v134 >= 1)
                        {
                          do
                          {
                            *v146 = *v145;
                            v146 = (_DWORD *)((char *)v146 + v142);
                            v145 = (_DWORD *)((char *)v145 + v144);
                            --v147;
                          }
                          while (v147);
                        }
                        ++v139;
                        v140 += 4;
                        v141 = (_DWORD *)((char *)v141 + v143);
                      }
                      while (v139 != v133);
                    }
                  }
                }
              }
            }
            ++v136;
            v135 += v114;
          }
          while (v136 != v120);
        }
        ++v132;
        v131 += v113;
      }
      while (v132 != v122);
    }
    v148 = v241;
    if (v241)
    {
      v149 = (unint64_t *)&v241->__shared_owners_;
      do
        v150 = __ldaxr(v149);
      while (__stlxr(v150 - 1, v149));
      if (!v150)
      {
        ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
        std::__shared_weak_count::__release_weak(v148);
      }
    }
    v151 = v247;
    if (v247)
    {
      v152 = (unint64_t *)&v247->__shared_owners_;
      do
        v153 = __ldaxr(v152);
      while (__stlxr(v153 - 1, v152));
      goto LABEL_204;
    }
  }
  if (v232)
  {
    v183 = (unint64_t *)&v232->__shared_owners_;
    do
      v184 = __ldaxr(v183);
    while (__stlxr(v184 - 1, v183));
    if (!v184)
    {
      ((void (*)(std::__shared_weak_count *))v232->__on_zero_shared)(v232);
      std::__shared_weak_count::__release_weak(v232);
    }
  }
  v185 = *(int *)(v233 + 8);
  for (kk = 12; kk != 32; kk += 4)
    v185 *= *(int *)(v233 + kk);
  v187 = *(const void **)(a1 + 8);
  if (!v187
  {
    v236 = 0uLL;
    v224 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v224, "Espresso: wrong_context_type");
    v224->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
  }
  v189 = *(std::__shared_weak_count **)(a1 + 16);
  *(_QWORD *)&v236 = v188;
  *((_QWORD *)&v236 + 1) = v189;
  if (v189)
  {
    v190 = (unint64_t *)&v189->__shared_owners_;
    do
      v191 = __ldxr(v190);
    while (__stxr(v191 + 1, v190));
  }
  v192 = (void *)v188[18];
  if ((unint64_t)(2 * v185) <= 0x10)
    v193 = 16;
  else
    v193 = 2 * v185;
  v194 = (void *)objc_msgSend(v192, "newBufferWithLength:options:", v193, 0);
  if (v189)
  {
    v195 = (unint64_t *)&v189->__shared_owners_;
    do
      v196 = __ldaxr(v195);
    while (__stlxr(v196 - 1, v195));
    if (!v196)
    {
      ((void (*)(std::__shared_weak_count *))v189->__on_zero_shared)(v189);
      std::__shared_weak_count::__release_weak(v189);
    }
  }
  v197 = *(int **)(v233 + 32);
  v198 = objc_retainAutorelease(v194);
  for (mm = (_WORD *)objc_msgSend(v198, "contents"); v185; --v185)
  {
    v200 = *v197++;
    _S0 = v200;
    __asm { FCVT            H0, S0 }
    *mm++ = _S0;
  }
  v202 = (int *)(a1 + 344);
  if ((_QWORD)v235)
    v202 = (int *)(v235 + 8);
  v203 = *(const void **)(a1 + 8);
  if (!v203
    || (v204 = *v202,
  {
    v236 = 0uLL;
    v225 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v225, "Espresso: wrong_context_type");
    v225->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
  }
  v206 = *(std::__shared_weak_count **)(a1 + 16);
  *(_QWORD *)&v236 = v205;
  *((_QWORD *)&v236 + 1) = v206;
  if (v206)
  {
    v207 = (unint64_t *)&v206->__shared_owners_;
    do
      v208 = __ldxr(v207);
    while (__stxr(v208 + 1, v207));
  }
  v209 = (void *)v205[18];
  if ((unint64_t)(2 * v204) <= 0x10)
    v210 = 16;
  else
    v210 = 2 * v204;
  v211 = (void *)objc_msgSend(v209, "newBufferWithLength:options:", v210, 0);
  if (v206)
  {
    v212 = (unint64_t *)&v206->__shared_owners_;
    do
      v213 = __ldaxr(v212);
    while (__stlxr(v213 - 1, v212));
    if (!v213)
    {
      ((void (*)(std::__shared_weak_count *))v206->__on_zero_shared)(v206);
      std::__shared_weak_count::__release_weak(v206);
    }
  }
  if ((_QWORD)v235)
  {
    v214 = *(int **)(v235 + 16);
    v215 = (_WORD *)objc_msgSend(objc_retainAutorelease(v211), "contents");
    if ((_DWORD)v204)
    {
      do
      {
        v216 = *v214++;
        _S0 = v216;
        __asm { FCVT            H0, S0 }
        *v215++ = _S0;
        --v204;
      }
      while (v204);
    }
  }
  else
  {
    v218 = objc_retainAutorelease(v211);
    bzero((void *)objc_msgSend(v218, "contents"), objc_msgSend(v218, "length"));
  }
  objc_storeStrong((id *)(a1 + 624), v198);
  objc_storeStrong((id *)(a1 + 648), v211);

  if (*((_QWORD *)&v233 + 1))
  {
    v219 = (unint64_t *)(*((_QWORD *)&v233 + 1) + 8);
    do
      v220 = __ldaxr(v219);
    while (__stlxr(v220 - 1, v219));
    if (!v220)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v233 + 1) + 16))(*((_QWORD *)&v233 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v233 + 1));
    }
  }
  if (*((_QWORD *)&v234 + 1))
  {
    v221 = (unint64_t *)(*((_QWORD *)&v234 + 1) + 8);
    do
      v222 = __ldaxr(v221);
    while (__stlxr(v222 - 1, v221));
    if (!v222)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v234 + 1) + 16))(*((_QWORD *)&v234 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v234 + 1));
    }
  }
  v87 = (std::__shared_weak_count *)*((_QWORD *)&v235 + 1);
  if (*((_QWORD *)&v235 + 1))
  {
    v223 = (unint64_t *)(*((_QWORD *)&v235 + 1) + 8);
    do
      v89 = __ldaxr(v223);
    while (__stlxr(v89 - 1, v223));
    goto LABEL_261;
  }
}

void sub_191659E0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_191659EA0(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  void *v6;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va1);

  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x191659BF0);
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  JUMPOUT(0x191659E38);
}

void std::allocate_shared[abi:ne180100]<Espresso::blob<float,6>,std::allocator<Espresso::blob<float,6>>,int &,int &,int &,int &,int &,int &,void>(_QWORD *a1, int a2, int a3, int a4, int a5, int a6, int a7)
{
  char *v14;
  Espresso *v15;
  void *v16;

  v14 = (char *)operator new(0x68uLL);
  *(_QWORD *)v14 = &off_1E2DBED18;
  *((_QWORD *)v14 + 1) = 0;
  *((_QWORD *)v14 + 3) = &off_1E2DA1230;
  *(_OWORD *)(v14 + 72) = 0u;
  *((_QWORD *)v14 + 2) = 0;
  *(_OWORD *)(v14 + 88) = 0u;
  *((_DWORD *)v14 + 8) = a2;
  *((_DWORD *)v14 + 9) = a3;
  *((_DWORD *)v14 + 10) = a4;
  *((_DWORD *)v14 + 11) = a5;
  *((_DWORD *)v14 + 12) = a6;
  *((_DWORD *)v14 + 13) = a7;
  v15 = (Espresso *)(4 * a2 * (uint64_t)a3 * a4 * a5 * a6 * a7);
  v16 = Espresso::kern_alloc_uninitialized(v15);
  bzero(v16, (size_t)v15);
  *((_QWORD *)v14 + 7) = v16;
  v14[64] = 1;
  *a1 = v14 + 24;
  a1[1] = v14;
}

void sub_19165A024(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;
  void *v4;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v1[3].__shared_weak_owners_);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v2);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,6>,std::allocator<Espresso::blob<unsigned char,6>>,int &,int &,int &,int &,int &,int &,void>(_QWORD *a1, int a2, int a3, int a4, int a5, int a6, int a7)
{
  char *v14;
  size_t v15;
  void *v16;

  v14 = (char *)operator new(0x68uLL);
  *((_QWORD *)v14 + 1) = 0;
  *((_QWORD *)v14 + 2) = 0;
  *(_QWORD *)v14 = &off_1E2DBEE30;
  *((_QWORD *)v14 + 3) = &off_1E2DA12D0;
  *(_OWORD *)(v14 + 72) = 0u;
  *(_OWORD *)(v14 + 88) = 0u;
  *((_DWORD *)v14 + 8) = a2;
  *((_DWORD *)v14 + 9) = a3;
  *((_DWORD *)v14 + 10) = a4;
  *((_DWORD *)v14 + 11) = a5;
  *((_DWORD *)v14 + 12) = a6;
  *((_DWORD *)v14 + 13) = a7;
  v15 = a3 * (uint64_t)a2 * a4 * a5 * a6 * a7;
  v16 = Espresso::kern_alloc_uninitialized((Espresso *)v15);
  bzero(v16, v15);
  *((_QWORD *)v14 + 7) = v16;
  v14[64] = 1;
  *a1 = v14 + 24;
  a1[1] = v14;
}

void sub_19165A130(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;
  void *v4;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v1[3].__shared_weak_owners_);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v2);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

uint64_t Espresso::blob<unsigned char,6>::~blob(uint64_t a1, void *a2)
{
  void *v3;

  *(_QWORD *)a1 = &off_1E2DA12D0;
  if (*(_BYTE *)(a1 + 40))
  {
    v3 = *(void **)(a1 + 32);
    if (v3)
    {
      Espresso::on_dealloc(*(Espresso **)(a1 + 32), a2);
      free(v3);
    }
  }
  *(_QWORD *)(a1 + 32) = 0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 64);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 48);
  return a1;
}

void Espresso::blob<unsigned char,6>::~blob(uint64_t a1, void *a2)
{
  void *v3;

  *(_QWORD *)a1 = &off_1E2DA12D0;
  if (*(_BYTE *)(a1 + 40))
  {
    v3 = *(void **)(a1 + 32);
    if (v3)
    {
      Espresso::on_dealloc(*(Espresso **)(a1 + 32), a2);
      free(v3);
    }
  }
  *(_QWORD *)(a1 + 32) = 0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 64);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 48);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::blob<unsigned char,6>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBEE30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::blob<unsigned char,6>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBEE30;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::blob<unsigned char,6>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t Espresso::V9Engine::v9_conv_kernel::setup_for_tune(uint64_t a1, uint64_t a2, int a3, int a4)
{
  const void *v8;
  id *v9;
  id *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  _DWORD *v23;
  unsigned int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  char v34;
  int v35;
  int v36;
  int v37;
  double v38;
  int v39;
  unsigned int v40;
  _BOOL4 v42;
  BOOL v43;
  int v44;
  int v45;
  size_t v46;
  const void *v47;
  void *v48;
  uint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  id *v53;
  std::__shared_weak_count *v54;

  v8 = *(const void **)(a1 + 8);
  if (v8
  {
    v10 = v9;
    v11 = *(std::__shared_weak_count **)(a1 + 16);
    v53 = v9;
    v54 = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }
  }
  else
  {
    v11 = 0;
    v10 = 0;
    v53 = 0;
    v54 = 0;
  }
  v14 = *(_DWORD *)(a1 + 344);
  v15 = *(_DWORD *)(a1 + 420);
  if (v15 < 2)
    v15 = 1;
  else
    v14 /= v15;
  v16 = *(_DWORD *)(a1 + 348);
  v17 = objc_msgSend(v10[18], "supportsFeatureSet:", 11, v53, v54);
  if (v17)
  {
    *(_QWORD *)(a1 + 564) = 0x100000003;
    v18 = *(_DWORD *)(a1 + 348);
    v19 = *(_DWORD *)(a1 + 420);
    if (v19 < 2)
    {
      if (v18 >= 16)
      {
        v19 = 1;
LABEL_23:
        if (v18 / v19 > 128)
        {
LABEL_26:
          v20 = 4;
LABEL_27:
          *(_DWORD *)(a1 + 560) = v20;
          goto LABEL_28;
        }
        v21 = 3;
LABEL_25:
        *(_DWORD *)(a1 + 568) = 2;
        *(_DWORD *)(a1 + 564) = v21;
        goto LABEL_26;
      }
    }
    else if (v18 / v19 >= 16)
    {
      goto LABEL_23;
    }
    v21 = 2;
    goto LABEL_25;
  }
  if ((objc_msgSend(v10[18], "supportsFeatureSet:", 4) & 1) != 0
    || objc_msgSend(v10[18], "supportsFeatureSet:", 1))
  {
    *(_QWORD *)(a1 + 564) = 0x100000002;
    if ((v14 & 7) != 0)
      v20 = 4;
    else
      v20 = 8;
    goto LABEL_27;
  }
  if ((objc_msgSend(v10[18], "supportsFeatureSet:", 1) & 1) != 0)
  {
    if (*(int *)(a1 + 560) < 9 || *(_DWORD *)(a1 + 564) * *(_DWORD *)(a1 + 568) < 3)
      goto LABEL_28;
    v20 = 8;
    goto LABEL_27;
  }
  *(_DWORD *)(a1 + 568) = 2;
  *(_QWORD *)(a1 + 560) = 0x200000004;
LABEL_28:
  if (((v16 / v15) & 7) != 0)
    v22 = 4;
  else
    v22 = 8;
  *(_DWORD *)(a1 + 592) = v22;
  *(_QWORD *)(a1 + 728) = 0;
  *(_DWORD *)(a1 + 736) = 0;
  v23 = *(_DWORD **)a2;
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 < 0x1DuLL)
  {
    std::vector<int>::resize((std::vector<int> *)a2, 8uLL);
    v23 = *(_DWORD **)a2;
    *v23 = *(_DWORD *)(a1 + 568);
    v23[1] = *(_DWORD *)(a1 + 564);
    v23[2] = *(_DWORD *)(a1 + 560);
    v23[3] = *(_DWORD *)(a1 + 592);
    v23[4] = *(_DWORD *)(a1 + 728);
    v23[5] = *(_DWORD *)(a1 + 732);
    v23[6] = *(_DWORD *)(a1 + 736);
    v23[7] = *(_DWORD *)(a1 + 596);
    v24 = *(_DWORD *)(a1 + 592);
  }
  else
  {
    *(_DWORD *)(a1 + 568) = *v23;
    *(_DWORD *)(a1 + 564) = v23[1];
    *(_DWORD *)(a1 + 560) = v23[2];
    v24 = v23[3];
    *(_DWORD *)(a1 + 592) = v24;
    *(_DWORD *)(a1 + 728) = v23[4];
    *(_DWORD *)(a1 + 732) = v23[5];
    *(_DWORD *)(a1 + 736) = v23[6];
    *(_DWORD *)(a1 + 596) = v23[7];
  }
  if (v24 <= 0x10 && ((1 << v24) & 0x10110) != 0)
    v25 = 0;
  else
    v25 = 2;
  *(_DWORD *)(a1 + 588) = v25;
  if (!*(_DWORD *)(a1 + 736))
  {
    if (v17)
    {
      *(_QWORD *)(a1 + 728) = 0x200000002;
      *(_DWORD *)(a1 + 736) = 1;
      v26 = (*(_DWORD *)(a1 + 344) - 1) / *(_DWORD *)(a1 + 560) + 1;
      if ((v26 & 1) == 0)
      {
        if ((v26 & 3) != 0)
          v27 = 2;
        else
          v27 = 4;
        if ((v26 & 7) != 0)
          v28 = v27;
        else
          v28 = 8;
        *(_DWORD *)(a1 + 736) = v28;
      }
      v29 = a4 % (4 * *(_DWORD *)(a1 + 564));
      if ((float)((float)(a3 % (4 * *(_DWORD *)(a1 + 568))) / (float)a3) >= 0.05)
        v30 = 2;
      else
        v30 = 4;
      *(_DWORD *)(a1 + 728) = v30;
      if ((float)((float)v29 / (float)a4) >= 0.05)
        v31 = 2;
      else
        v31 = 4;
      *(_DWORD *)(a1 + 732) = v31;
    }
    else
    {
      *(_DWORD *)(a1 + 736) = 1;
      v32 = (*(_DWORD *)(a1 + 344) - 1) / *(_DWORD *)(a1 + 560) + 1;
      v33 = *(_DWORD *)(a1 + 568);
      v34 = (float)((float)(a3 % (2 * v33)) / (float)a3) < 0.01;
      v35 = *(_DWORD *)(a1 + 564);
      if ((float)((float)(a3 % (2 * v33)) / (float)a3) >= 0.01)
        v36 = 1;
      else
        v36 = 2;
      if ((float)((float)(a4 % (2 * v35)) / (float)a4) >= 0.01)
        v37 = 1;
      else
        v37 = 2;
      v38 = (float)((float)(a3 % (4 * v33)) / (float)a3);
      if ((float)((float)(a4 % (4 * v35)) / (float)a4) >= 0.01)
        v39 = v37;
      else
        v39 = 4;
      if (v38 < 0.01)
        v36 = 4;
      *(_DWORD *)(a1 + 728) = v36;
      *(_DWORD *)(a1 + 732) = v39;
      if (v38 < 0.01)
        v34 = 2;
      v40 = v39 << v34;
      v42 = (v32 & 3) == 0 && v40 < 9;
      v43 = (v32 & 7) != 0 || v40 >= 5;
      v44 = !v43;
      if (!v43 || (v32 & 1) == 0 || v42)
      {
        if (v42)
          v45 = 4;
        else
          v45 = 2;
        if (v44)
          v45 = 8;
        *(_DWORD *)(a1 + 736) = v45;
      }
    }
  }
  v46 = *(_QWORD *)(a2 + 8) - (_QWORD)v23;
  v47 = *(const void **)(a1 + 200);
  if (v46 == *(_QWORD *)(a1 + 208) - (_QWORD)v47 && !memcmp(v23, v47, v46))
  {
    v49 = 0;
    if (!v11)
      return v49;
    goto LABEL_95;
  }
  v48 = *(void **)(a1 + 608);
  *(_QWORD *)(a1 + 608) = 0;

  if (a1 + 200 != a2)
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)(a1 + 200), *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  v49 = 1;
  if (v11)
  {
LABEL_95:
    v50 = (unint64_t *)&v11->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  return v49;
}

void sub_19165A7AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t Espresso::V9Engine::v9_conv_kernel::v9_conv_kernel(uint64_t a1, _QWORD *a2, _DWORD *a3, __int128 *a4)
{
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  _DWORD *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  unint64_t *v32;
  unint64_t v33;
  void *__p;
  void *v36;
  uint64_t v37;

  v8 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_OWORD *)(v8 + 288) = 0u;
  *(_QWORD *)(v8 + 280) = v8 + 288;
  Espresso::convolution_uniforms::convolution_uniforms((Espresso::convolution_uniforms *)(v8 + 304));
  *(_QWORD *)(a1 + 552) = 0;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_QWORD *)a1 = &off_1E2DA4EB8;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 588) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_DWORD *)(a1 + 656) = 0;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_OWORD *)(a1 + 680) = 0u;
  *(_OWORD *)(a1 + 696) = 0u;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_QWORD *)(a1 + 728) = 0x400000004;
  *(_DWORD *)(a1 + 736) = 4;
  *(_QWORD *)(a1 + 776) = 0;
  *(_QWORD *)(a1 + 760) = 0;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_BYTE *)(a1 + 768) = 0;
  *(_BYTE *)(a1 + 784) = 1;
  *(_QWORD *)(a1 + 808) = 0;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_DWORD *)(a1 + 660) = *a3;
  v9 = *a4;
  v10 = a4[2];
  *(_OWORD *)(a1 + 320) = a4[1];
  *(_OWORD *)(a1 + 336) = v10;
  *(_OWORD *)(a1 + 304) = v9;
  v11 = a4[3];
  v12 = a4[4];
  v13 = a4[6];
  *(_OWORD *)(a1 + 384) = a4[5];
  *(_OWORD *)(a1 + 400) = v13;
  *(_OWORD *)(a1 + 352) = v11;
  *(_OWORD *)(a1 + 368) = v12;
  v14 = a4[7];
  v15 = a4[8];
  v16 = a4[9];
  *(_QWORD *)(v17 + 157) = *(_QWORD *)((char *)a4 + 157);
  *(_OWORD *)(a1 + 432) = v15;
  *(_OWORD *)(a1 + 448) = v16;
  *(_OWORD *)(a1 + 416) = v14;
  v18 = (_DWORD *)*a2;
  if (*a2
  {
    v19 = (std::__shared_weak_count *)a2[1];
    if (v19)
    {
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldxr(p_shared_owners);
      while (__stxr(v21 + 1, p_shared_owners));
    }
  }
  else
  {
    v19 = 0;
  }
  *(_QWORD *)(a1 + 572) = 0;
  *(_QWORD *)(a1 + 596) = 0x2000000001;
  if (*((_DWORD *)a4 + 36) || v18[17])
    *(_DWORD *)(a1 + 600) = 16;
  __p = 0;
  v36 = 0;
  v37 = 0;
  Espresso::V9Engine::v9_conv_kernel::setup_for_tune(a1, (uint64_t)&__p, 1024, 1024);
  v22 = *(_DWORD *)(a1 + 348);
  v23 = *(_DWORD *)(a1 + 420);
  v24 = *(_DWORD *)(a1 + 592);
  if (v24 <= *(_DWORD *)(a1 + 560))
    v24 = *(_DWORD *)(a1 + 560);
  if (v23 <= 1)
    v23 = 1;
  v25 = (v22 - 1) / v23 / v24 + 1;
  v26 = *(_DWORD *)(a1 + 356) * *(_DWORD *)(a1 + 352);
  v27 = v25 * v26;
  if (v26 >= 3)
    v28 = 200;
  else
    v28 = 100;
  if (v27 <= v28)
  {
    v29 = 0;
  }
  else
  {
    v29 = 0;
    v30 = v27 >> 1;
    if (v27 >> 1 >= 0x40)
      v30 = 64;
    v31 = 1;
    while (1)
    {
      if (!(v25 % v31))
      {
        v29 = v31;
        if (v27 / v31 < v28)
          break;
      }
      if (v30 == ++v31)
        goto LABEL_28;
    }
    v29 = v31;
LABEL_28:
    if (v29 >= 2 && v22 / v23 % (v29 * v24))
      v29 = 1;
  }
  *(_DWORD *)(a1 + 656) = v29;
  if (__p)
  {
    v36 = __p;
    operator delete(__p);
  }
  if (v19)
  {
    v32 = (unint64_t *)&v19->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  return a1;
}

void sub_19165AB28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v17;
  void *v18;

  if (__p)
    operator delete(__p);
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v14);

  v18 = *(void **)(v11 + 744);
  if (v18)
  {
    *(_QWORD *)(v11 + 752) = v18;
    operator delete(v18);
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v11 + 712);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v11 + 696);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v11 + 680);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v13);

  Espresso::generic_convolution_kernel::~generic_convolution_kernel((void **)v11);
  _Unwind_Resume(a1);
}

_QWORD *Espresso::dataset_estimator::dataset_estimator(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = a2[1];
  *result = *a2;
  result[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  result[3] = 0;
  result[2] = result + 3;
  result[6] = 0;
  result[4] = 0;
  result[5] = result + 6;
  result[10] = 0;
  result[9] = 0;
  result[7] = 0;
  result[8] = result + 9;
  return result;
}

{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = a2[1];
  *result = *a2;
  result[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  result[3] = 0;
  result[2] = result + 3;
  result[6] = 0;
  result[4] = 0;
  result[5] = result + 6;
  result[10] = 0;
  result[9] = 0;
  result[7] = 0;
  result[8] = result + 9;
  return result;
}

void Espresso::dataset_estimator::statistics_entry_t::compute_single(Espresso::dataset_estimator::statistics_entry_t *this@<X0>, float *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v5;
  vDSP_Length v8;
  float v9;
  double v10;
  double v11;
  _BOOL4 v12;
  vDSP_Length v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  unsigned __int8 *v27;
  unsigned __int8 *v28;
  float v29;
  float v30;
  float v31;
  uint64_t __StandardDeviation;
  uint64_t __C;
  uint64_t v34;
  float __Mean;
  float v36;
  unsigned __int8 *v37;
  unsigned __int8 *v38;
  uint64_t v39;
  float v40;
  float v41;
  float *v42[3];
  float __B[3];

  v5 = (int)a2;
  __StandardDeviation = 0;
  __C = 0;
  v8 = (int)a2;
  v31 = 0.0;
  vDSP_minv((const float *)this, 1, (float *)&__C + 1, (int)a2);
  vDSP_maxv((const float *)this, 1, (float *)&__C, v8);
  vDSP_normalize((const float *)this, 1, 0, 1, (float *)&__StandardDeviation + 1, (float *)&__StandardDeviation, v8);
  vDSP_svesq((const float *)this, 1, &v31, v8);
  v31 = v31 / (float)v5;
  v9 = v31;
  *(_DWORD *)(a4 + 48) = -1082130432;
  *(_QWORD *)(a4 + 64) = 0;
  *(_QWORD *)(a4 + 72) = 0;
  *(_QWORD *)(a4 + 56) = 0;
  *(_BYTE *)(a4 + 80) = 0;
  v10 = *(float *)&__C;
  *(double *)a4 = *((float *)&__C + 1);
  *(double *)(a4 + 8) = v10;
  v11 = *(float *)&__StandardDeviation;
  *(double *)(a4 + 16) = *((float *)&__StandardDeviation + 1);
  *(double *)(a4 + 24) = v11;
  *(double *)(a4 + 32) = v9;
  *(_QWORD *)(a4 + 40) = 1;
  if (a3)
  {
    if (v5)
    {
      if (*(float *)this >= 0.0)
      {
        v13 = 0;
        while (v8 - 1 != v13)
        {
          v14 = *((float *)this + ++v13);
          if (v14 < 0.0)
            goto LABEL_11;
        }
        v13 = v8;
LABEL_11:
        v12 = v13 < v8;
      }
      else
      {
        v12 = 1;
      }
    }
    else
    {
      v12 = 0;
    }
    v34 = 0;
    vDSP_minv((const float *)this, 1, (float *)&v34 + 1, v8);
    vDSP_maxv((const float *)this, 1, (float *)&v34, v8);
    v15 = 1.0;
    if (vabds_f32(*(float *)&v34, *((float *)&v34 + 1)) >= 0.0000001)
    {
      if (*((float *)&v34 + 1) >= *(float *)&v34)
        v16 = *((float *)&v34 + 1);
      else
        v16 = *(float *)&v34;
      v17 = 255.0 / v16;
      v18 = fabsf(-128.0 / *((float *)&v34 + 1));
      v19 = fabsf(127.0 / *(float *)&v34);
      if (v19 >= v18)
        v19 = v18;
      v20 = v12 ? v19 : v17;
      v21 = v20 * 0.25;
      v15 = -1.0;
      if ((float)(v20 * 0.25) <= (float)(v20 * 1.75))
      {
        v22 = 3.4028e38;
        while (1)
        {
          __B[0] = v21;
          LODWORD(v37) = 0;
          std::vector<float>::vector(v42, v8, &v37);
          v23 = v42[0];
          v40 = 255.0;
          v41 = 0.0;
          if (v12)
          {
            v40 = 127.0;
            v41 = -128.0;
          }
          vDSP_vsmul((const float *)this, 1, __B, v42[0], 1, v8);
          vDSP_vclip(v23, 1, &v41, &v40, v23, 1, v8);
          if (v12)
            break;
          LOBYTE(v36) = 0;
          std::vector<unsigned char>::vector(&v37, v8, &v36);
          v27 = v37;
          vDSP_vfixru8(v23, 1, v37, 1, v8);
          vDSP_vfltu8(v27, 1, v23, 1, v8);
          v28 = v37;
          if (v37)
          {
            v38 = v37;
LABEL_36:
            operator delete(v28);
          }
LABEL_37:
          vDSP_vsdiv(v23, 1, __B, v23, 1, v8);
          vDSP_vsub(v23, 1, (const float *)this, 1, v23, 1, v8);
          vDSP_vabs(v23, 1, v23, 1, v8);
          v36 = 0.0;
          LODWORD(v37) = 0;
          vDSP_normalize(v23, 1, 0, 1, (float *)&v37, &v36, v8);
          vDSP_vabs((const float *)this, 1, v23, 1, v8);
          __Mean = 0.0;
          vDSP_normalize(v23, 1, 0, 1, &__Mean, &v36, v8);
          v29 = *(float *)&v37;
          v30 = __Mean;
          if (v42[0])
          {
            v42[1] = v42[0];
            operator delete(v42[0]);
          }
          if ((float)(v29 / v30) < v22)
          {
            v15 = v21;
            v22 = v29 / v30;
          }
          v21 = v21 + (float)(v20 * 0.001);
          if (v21 > (float)(v20 * 1.75))
            goto LABEL_42;
        }
        v37 = 0;
        v38 = 0;
        v39 = 0;
        if (v5)
        {
          if (v5 < 0)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v24 = (char *)operator new(v8);
          v25 = v24;
          v26 = 0;
          do
            v24[v26++] = 0;
          while (v8 != v26);
        }
        else
        {
          v25 = 0;
        }
        vDSP_vfixr8(v23, 1, v25, 1, v8);
        vDSP_vflt8(v25, 1, v23, 1, v8);
        if (!v25)
          goto LABEL_37;
        v28 = (unsigned __int8 *)v25;
        goto LABEL_36;
      }
    }
LABEL_42:
    *(float *)(a4 + 48) = v15;
  }
}

void sub_19165B0FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  if (a18)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<float>::vector(_QWORD *a1, unint64_t a2, _DWORD *a3)
{
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned int>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_DWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 4 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 4;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_19165B1C8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::dataset_estimator::statistics_entry_t::iterative_grow_with_scalar(int8x16_t *this, float a2, __int8 a3)
{
  int8x16_t v4[3];
  void *__p;
  void *v6;
  float v7;

  v7 = a2;
  this[5].i8[0] = a3;
  Espresso::dataset_estimator::statistics_entry_t::compute_single((Espresso::dataset_estimator::statistics_entry_t *)&v7, (float *)1, 0, (uint64_t)v4);
  Espresso::dataset_estimator::statistics_entry_t::iterative_grow(this, v4, 0.0);
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
}

void sub_19165B244(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Espresso::dataset_estimator::statistics_entry_t::iterative_grow(int8x16_t *this, int8x16_t *a2, float a3)
{
  int *v6;
  int *v7;
  void **v8;
  char *v9;
  int v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  int v20;
  int *v21;
  BOOL v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  float v26;
  float *v27;
  unint64_t v28;
  float *v29;
  float *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  BOOL v34;
  unint64_t v35;
  uint64_t v36;
  float *v37;
  unint64_t v38;
  int v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  unint64_t v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  BOOL v50;
  double v51;
  float v52;
  float v53;
  std::runtime_error *exception;

  if (a2[2].i64[1] != 1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "iterative_grow can only be used with b.n_samples==1");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (this[2].i64[1])
  {
    if (this[5].i8[0])
    {
      v6 = (int *)a2[3].i64[1];
      v7 = (int *)a2[4].i64[0];
      if (v6 == v7)
      {
        v22 = 1;
        v21 = (int *)a2[3].i64[1];
      }
      else
      {
        v8 = (void **)&this[3].i64[1];
        v9 = (char *)this[4].i64[0];
        do
        {
          v10 = *v6;
          v11 = this[4].u64[1];
          if ((unint64_t)v9 >= v11)
          {
            v13 = (char *)*v8;
            v14 = (v9 - (_BYTE *)*v8) >> 2;
            v15 = v14 + 1;
            if ((unint64_t)(v14 + 1) >> 62)
              std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
            v16 = v11 - (_QWORD)v13;
            if (v16 >> 1 > v15)
              v15 = v16 >> 1;
            if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
              v17 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v17 = v15;
            if (v17)
            {
              v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v17);
              v13 = (char *)this[3].i64[1];
              v9 = (char *)this[4].i64[0];
            }
            else
            {
              v18 = 0;
            }
            v19 = (_DWORD *)(v17 + 4 * v14);
            *v19 = v10;
            v12 = (char *)(v19 + 1);
            while (v9 != v13)
            {
              v20 = *((_DWORD *)v9 - 1);
              v9 -= 4;
              *--v19 = v20;
            }
            this[3].i64[1] = (uint64_t)v19;
            this[4].i64[0] = (uint64_t)v12;
            this[4].i64[1] = v17 + 4 * v18;
            if (v13)
              operator delete(v13);
          }
          else
          {
            *(_DWORD *)v9 = v10;
            v12 = v9 + 4;
          }
          this[4].i64[0] = (uint64_t)v12;
          ++v6;
          v9 = v12;
        }
        while (v6 != v7);
        v6 = (int *)a2[3].i64[1];
        v21 = (int *)a2[4].i64[0];
        v22 = a2[2].i64[1] == 1;
      }
      if (v21 == v6 && v22)
      {
        v26 = *(double *)a2[1].i64;
        v27 = (float *)this[4].i64[0];
        v28 = this[4].u64[1];
        if ((unint64_t)v27 >= v28)
        {
          v30 = (float *)this[3].i64[1];
          v31 = v27 - v30;
          if ((unint64_t)(v31 + 1) >> 62)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v32 = v28 - (_QWORD)v30;
          v33 = (uint64_t)(v28 - (_QWORD)v30) >> 1;
          if (v33 <= v31 + 1)
            v33 = v31 + 1;
          v34 = v32 >= 0x7FFFFFFFFFFFFFFCLL;
          v35 = 0x3FFFFFFFFFFFFFFFLL;
          if (!v34)
            v35 = v33;
          if (v35)
          {
            v35 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v35);
            v30 = (float *)this[3].i64[1];
            v27 = (float *)this[4].i64[0];
          }
          else
          {
            v36 = 0;
          }
          v37 = (float *)(v35 + 4 * v31);
          v38 = v35 + 4 * v36;
          *v37 = v26;
          v29 = v37 + 1;
          while (v27 != v30)
          {
            v39 = *((_DWORD *)v27-- - 1);
            *((_DWORD *)v37-- - 1) = v39;
          }
          this[3].i64[1] = (uint64_t)v37;
          this[4].i64[0] = (uint64_t)v29;
          this[4].i64[1] = v38;
          if (v30)
            operator delete(v30);
        }
        else
        {
          *v27 = v26;
          v29 = v27 + 1;
        }
        this[4].i64[0] = (uint64_t)v29;
      }
    }
    v40 = *(float64x2_t *)this;
    *(_QWORD *)&v41.f64[0] = a2->i64[0];
    *(_QWORD *)&v41.f64[1] = this->i64[1];
    *(_QWORD *)&v42.f64[0] = this->i64[0];
    *(_QWORD *)&v42.f64[1] = a2->i64[1];
    v43 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v42, v41), *a2, *this);
    v44 = this[2].u64[1];
    if (!v44)
    {
      *this = (int8x16_t)v43;
      v40 = v43;
    }
    *(float64x2_t *)this = vmlaq_n_f64(vmulq_n_f64(v43, 1.0 - a3), v40, a3);
    v45 = 1.0 / ((double)v44 + 1.0);
    v46 = *(double *)this[1].i64 + v45 * (*(double *)a2[1].i64 - *(double *)this[1].i64);
    v47 = *(double *)this[2].i64 + v45 * (*(double *)a2[2].i64 - *(double *)this[2].i64);
    *(double *)this[2].i64 = v47;
    v48 = v47 - v46 * v46;
    v49 = sqrt(v48);
    v50 = v48 < 0.0;
    v51 = 0.0;
    if (!v50)
      v51 = v49;
    *(double *)this[1].i64 = v46;
    *(double *)&this[1].i64[1] = v51;
    v52 = *(float *)a2[3].i32;
    if (v52 >= 0.0)
    {
      v53 = *(float *)this[3].i32;
      if (v53 != -1.0)
        v52 = v53 + v45 * (float)(v52 - v53);
      *(float *)this[3].i32 = v52;
    }
    this[2].i64[1] = v44 + 1;
  }
  else
  {
    v23 = *a2;
    v24 = a2[1];
    v25 = a2[2];
    this[3].i32[0] = a2[3].i32[0];
    this[1] = v24;
    this[2] = v25;
    *this = v23;
    if (this != a2)
      std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&this[3].i8[8], (char *)a2[3].i64[1], a2[4].i64[0], (a2[4].i64[0] - a2[3].i64[1]) >> 2);
    this[5].i8[0] = a2[5].i8[0];
  }
}

void sub_19165B5B0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

float Espresso::dataset_estimator::statistics_entry_t::compute_percentile(Espresso::dataset_estimator::statistics_entry_t *this, float a2)
{
  const void *v2;
  uint64_t v3;
  float v5;
  unint64_t v6;
  double v7;
  unint64_t v8;
  float v9;
  _DWORD *v11;
  _DWORD *v12;
  uint64_t v13;

  v2 = (const void *)*((_QWORD *)this + 7);
  v3 = *((_QWORD *)this + 8);
  if ((const void *)v3 == v2)
    return NAN;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v11, v2, v3, (v3 - (uint64_t)v2) >> 2);
  std::__sort<std::__less<float,float> &,float *>();
  v5 = 0.0;
  if (a2 >= 0.0)
    v5 = a2;
  v6 = v12 - v11;
  v7 = v5 / 100.0 * (double)v6 + 0.5;
  if (v6 <= (unint64_t)v7)
    v8 = v6 - 1;
  else
    v8 = (unint64_t)v7;
  v9 = *(float *)&v11[v8];
  v12 = v11;
  operator delete(v11);
  return v9;
}

void sub_19165B67C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Espresso::dataset_estimator::sample_stats_with_current_network_state(uint64_t **a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  void (***v10)(uint64_t *__return_ptr, _QWORD);
  _QWORD v11[6];
  std::string __p;
  __n128 (*v13)(_QWORD *, uint64_t);
  void (*v14)(uint64_t);
  const char *v15;
  _QWORD **v16;
  _QWORD *v17[2];
  _QWORD v18[3];
  std::string *p_p;

  v4 = *a1;
  v5 = (*a1)[19];
  if (v5)
  {
    do
    {
      std::pair<std::string const,std::shared_ptr<Espresso::blob<float,4>>>::pair[abi:ne180100](&__p, (__int128 *)(v5 + 16));
      p_p = &__p;
      v6 = std::__tree<std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 5, &__p, (__int128 **)&p_p);
      std::vector<Espresso::dataset_estimator::statistics_entry_t>::resize(v6 + 7, *((int *)v13 + 4));
      v7 = (std::__shared_weak_count *)v14;
      if (v14)
      {
        v8 = (unint64_t *)((char *)v14 + 8);
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 - 1, v8));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v5 = *(_QWORD *)v5;
    }
    while (v5);
    v4 = *a1;
  }
  __p.__r_.__value_.__r.__words[0] = 0;
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)&__p;
  __p.__r_.__value_.__r.__words[2] = 0x6012000000;
  v13 = __Block_byref_object_copy__8671;
  v14 = __Block_byref_object_dispose__8672;
  v17[0] = 0;
  v17[1] = 0;
  v15 = "";
  v16 = v17;
  memset(v18, 0, sizeof(v18));
  v10 = (void (***)(uint64_t *__return_ptr, _QWORD))v4[2];
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = ___ZN8Espresso17dataset_estimator39sample_stats_with_current_network_stateERKNS0_9options_tE_block_invoke;
  v11[3] = &unk_1E2DD5188;
  v11[4] = &__p;
  v11[5] = a1;
  Espresso::abstract_context::compute_batch_sync(v10, v11);
  Espresso::dataset_estimator::sample_stats_with_blobs((uint64_t)a1, __p.__r_.__value_.__l.__size_ + 48, a2);
  _Block_object_dispose(&__p, 8);
  p_p = (std::string *)v18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(v17[0]);
}

void sub_19165B824(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  Espresso::map_with_ordered_keys<std::string,std::shared_ptr<Espresso::blob<float,4>>>::~map_with_ordered_keys(v8);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__8671(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  __n128 result;

  a1[6] = *(_QWORD *)(a2 + 48);
  v2 = (_QWORD *)(a2 + 56);
  v3 = *(_QWORD *)(a2 + 56);
  a1[7] = v3;
  v4 = a1 + 7;
  v5 = *(_QWORD *)(a2 + 64);
  a1[8] = v5;
  if (v5)
  {
    *(_QWORD *)(v3 + 16) = v4;
    *(_QWORD *)(a2 + 48) = v2;
    *v2 = 0;
    *(_QWORD *)(a2 + 64) = 0;
  }
  else
  {
    a1[6] = v4;
  }
  a1[9] = 0;
  a1[10] = 0;
  a1[11] = 0;
  result = *(__n128 *)(a2 + 72);
  *(__n128 *)(a1 + 9) = result;
  a1[11] = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  return result;
}

void __Block_byref_object_dispose__8672(uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 72);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*(_QWORD **)(a1 + 56));
}

uint64_t ___ZN8Espresso17dataset_estimator39sample_stats_with_current_network_stateERKNS0_9options_tE_block_invoke(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  __int128 *v3;
  __int128 *v4;
  uint64_t v6;
  uint64_t v7;
  char **v8;
  std::string *v9;
  std::string *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t **v13;
  uint64_t *v14;
  __int128 *v15;

  v2 = *(_QWORD *)(result + 40);
  v3 = *(__int128 **)(*(_QWORD *)v2 + 688);
  v4 = *(__int128 **)(*(_QWORD *)v2 + 696);
  if (v3 != v4)
  {
    v6 = result;
    do
    {
      v7 = *(_QWORD *)(*(_QWORD *)(v6 + 32) + 8);
      v8 = (char **)(v7 + 72);
      v9 = *(std::string **)(v7 + 80);
      if ((unint64_t)v9 >= *(_QWORD *)(v7 + 88))
      {
        v10 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v8, (uint64_t)v3);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v8, v3);
        v10 = v9 + 1;
      }
      *(_QWORD *)(v7 + 80) = v10;
      v11 = *(_QWORD *)v2 + 136;
      v15 = v3;
      v12 = *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v11, (unsigned __int8 *)v3, &v15)+ 5);
      v13 = (uint64_t **)(*(_QWORD *)(*(_QWORD *)(v6 + 32) + 8) + 48);
      v15 = v3;
      v14 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v13, v3, &v15);
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v12 + 40))(v12, a2, v14 + 7);
      v3 = (__int128 *)((char *)v3 + 24);
    }
    while (v3 != v4);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, _QWORD *a2, __int128 **a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t **v7;
  std::string *v8;
  __int128 *v9;
  __int128 v10;
  _QWORD v12[2];
  char v13;
  uint64_t v14;

  v5 = (uint64_t **)std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__find_equal<std::string>((uint64_t)a1, &v14, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = v5;
    v6 = (uint64_t *)operator new(0x50uLL);
    v12[0] = v6;
    v12[1] = a1 + 1;
    v13 = 0;
    v8 = (std::string *)(v6 + 4);
    v9 = *a3;
    if (*((char *)*a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)v9, *((_QWORD *)v9 + 1));
    }
    else
    {
      v10 = *v9;
      v6[6] = *((_QWORD *)v9 + 2);
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v10;
    }
    v6[7] = 0;
    v6[8] = 0;
    v6[9] = 0;
    v13 = 1;
    std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at(a1, v14, v7, v6);
    v12[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,void *>>>>::reset[abi:ne180100]((uint64_t)v12);
  }
  return v6;
}

void sub_19165BA94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,void *>>>>::reset[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::vector<Espresso::dataset_estimator::statistics_entry_t>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  _QWORD v18[5];

  v4 = *a1;
  v5 = a1[1];
  v6 = 0x2E8BA2E8BA2E8BA3 * ((v5 - *a1) >> 3);
  v7 = a2 - v6;
  if (a2 <= v6)
  {
    if (a2 < v6)
    {
      v15 = v4 + 88 * a2;
      while (v5 != v15)
      {
        v16 = *(void **)(v5 - 32);
        if (v16)
        {
          *(_QWORD *)(v5 - 24) = v16;
          operator delete(v16);
        }
        v5 -= 88;
      }
      a1[1] = v15;
    }
  }
  else
  {
    v8 = a1[2];
    if (0x2E8BA2E8BA2E8BA3 * ((v8 - v5) >> 3) >= v7)
    {
      v17 = v5 + 88 * v7;
      do
      {
        *(_OWORD *)(v5 + 48) = 0uLL;
        *(_OWORD *)(v5 + 64) = 0uLL;
        *(_QWORD *)(v5 + 72) = 0;
        *(_QWORD *)(v5 + 80) = 0;
        *(_OWORD *)(v5 + 16) = 0uLL;
        *(_OWORD *)(v5 + 32) = 0uLL;
        *(_OWORD *)v5 = 0uLL;
        *(_DWORD *)(v5 + 48) = -1082130432;
        *(_QWORD *)(v5 + 56) = 0;
        *(_QWORD *)(v5 + 64) = 0;
        *(_BYTE *)(v5 + 80) = 0;
        v5 += 88;
      }
      while (v5 != v17);
      a1[1] = v17;
    }
    else
    {
      if (a2 > 0x2E8BA2E8BA2E8BALL)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v18[4] = a1 + 2;
      v9 = 0x2E8BA2E8BA2E8BA3 * ((v8 - v4) >> 3);
      v10 = 2 * v9;
      if (2 * v9 <= a2)
        v10 = a2;
      if (v9 >= 0x1745D1745D1745DLL)
        v11 = 0x2E8BA2E8BA2E8BALL;
      else
        v11 = v10;
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::dataset_estimator::statistics_entry_t>>(v11);
      v13 = &v12[88 * v6];
      v18[0] = v12;
      v18[1] = v13;
      v18[3] = &v12[88 * v14];
      do
      {
        *((_OWORD *)v13 + 3) = 0uLL;
        *((_OWORD *)v13 + 4) = 0uLL;
        *((_QWORD *)v13 + 9) = 0;
        *((_QWORD *)v13 + 10) = 0;
        *((_OWORD *)v13 + 1) = 0uLL;
        *((_OWORD *)v13 + 2) = 0uLL;
        *(_OWORD *)v13 = 0uLL;
        *((_DWORD *)v13 + 12) = -1082130432;
        *((_QWORD *)v13 + 7) = 0;
        *((_QWORD *)v13 + 8) = 0;
        v13[80] = 0;
        v13 += 88;
      }
      while (v13 != &v12[88 * a2]);
      v18[2] = &v12[88 * a2];
      std::vector<Espresso::dataset_estimator::statistics_entry_t>::__swap_out_circular_buffer(a1, v18);
      std::__split_buffer<Espresso::dataset_estimator::statistics_entry_t>::~__split_buffer((uint64_t)v18);
    }
  }
}

void Espresso::dataset_estimator::sample_stats_with_blobs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  float *v13;
  unsigned int v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  __int128 *v18;
  uint64_t v19;
  __int128 *v20;
  uint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  char *v24;
  void *v25;
  _QWORD *v26;
  uint64_t *v27;
  char *v28;
  uint64_t **v29;
  uint64_t *v30;
  uint64_t **v31;
  _QWORD *v32;
  _QWORD *v33;
  std::string *v34;
  uint64_t v35;
  uint64_t *v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  __int128 v50;
  int64x2_t v51;
  uint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  char v60;
  unsigned int v62;
  float *v63;
  _QWORD *v64;
  int v65;
  uint64_t v66;
  uint64_t **v67;
  unint64_t v68;
  int v70;
  uint64_t **v71;
  _BYTE v72[32];
  __int128 v73;
  int v74;
  __int128 v75;
  uint64_t v76;
  char v77;
  int8x16_t v78;
  __int128 v79;
  __int128 v80;
  int v81;
  __int128 __p;
  uint64_t v83;
  char v84;
  __int128 *v85;
  __int128 *v86;
  char *v87;
  std::string v88;
  uint64_t v89;
  std::__shared_weak_count *v90;

  v3 = *(_QWORD *)(a2 + 24);
  v58 = *(_QWORD *)(a2 + 32);
  if (v3 != v58)
  {
    v64 = (_QWORD *)(a3 + 16);
    v71 = (uint64_t **)(a1 + 40);
    v63 = (float *)(a1 + 16);
    v67 = (uint64_t **)(a1 + 72);
    do
    {
      v78.i64[0] = v3;
      v4 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a2, (_QWORD *)v3, (__int128 **)&v78);
      if (*(char *)(v3 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v88, *(const std::string::value_type **)v3, *(_QWORD *)(v3 + 8));
      }
      else
      {
        v5 = *(_OWORD *)v3;
        v88.__r_.__value_.__r.__words[2] = *(_QWORD *)(v3 + 16);
        *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v5;
      }
      v7 = v4[7];
      v6 = v4[8];
      v89 = v7;
      v90 = (std::__shared_weak_count *)v6;
      v66 = v3;
      if (v6)
      {
        v8 = (unint64_t *)(v6 + 8);
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
        v7 = v89;
        v10 = v90;
        if (v90)
        {
          p_shared_owners = (unint64_t *)&v90->__shared_owners_;
          do
            v12 = __ldxr(p_shared_owners);
          while (__stxr(v12 + 1, p_shared_owners));
          v60 = 0;
          goto LABEL_15;
        }
      }
      else
      {
        v10 = 0;
      }
      v60 = 1;
LABEL_15:
      v65 = *(_DWORD *)(v7 + 20);
      if (v65 >= 1)
      {
        v70 = 0;
        v13 = (float *)(*(_DWORD *)(v7 + 12) * *(_DWORD *)(v7 + 8));
        v14 = *(_DWORD *)(v7 + 16);
        v15 = (int)v14;
        v62 = v14 * (_DWORD)v13;
        v16 = 88 * v14;
        v68 = (int)v14;
        do
        {
          v85 = 0;
          v86 = 0;
          v87 = 0;
          v78.i64[0] = (uint64_t)&v85;
          v78.i8[8] = 0;
          if ((_DWORD)v15)
          {
            if ((v15 & 0x80000000) != 0)
              std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
            v17 = v15;
            v18 = (__int128 *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::dataset_estimator::statistics_entry_t>>(v15);
            v85 = v18;
            v87 = (char *)v18 + 88 * v19;
            v20 = (__int128 *)((char *)v18 + 88 * v17);
            do
            {
              v18[3] = 0uLL;
              v18[4] = 0uLL;
              *((_QWORD *)v18 + 9) = 0;
              *((_QWORD *)v18 + 10) = 0;
              v18[1] = 0uLL;
              v18[2] = 0uLL;
              *v18 = 0uLL;
              *((_DWORD *)v18 + 12) = -1082130432;
              *((_QWORD *)v18 + 7) = 0;
              *((_QWORD *)v18 + 8) = 0;
              *((_BYTE *)v18 + 80) = 0;
              v18 = (__int128 *)((char *)v18 + 88);
            }
            while (v18 != v20);
            v86 = v20;
          }
          v79 = 0u;
          v80 = 0u;
          v78 = 0u;
          v81 = -1082130432;
          v83 = 0;
          __p = 0uLL;
          v84 = 0;
          if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v64, v66))
          {
            Espresso::dataset_estimator::statistics_entry_t::compute_single(*(Espresso::dataset_estimator::statistics_entry_t **)(v7 + 24), (float *)v62, 1, (uint64_t)v72);
            v78 = *(int8x16_t *)v72;
            v79 = *(_OWORD *)&v72[16];
            v80 = v73;
            v81 = v74;
            if ((_QWORD)__p)
            {
              *((_QWORD *)&__p + 1) = __p;
              operator delete((void *)__p);
            }
            __p = v75;
            v83 = v76;
            v84 = v77;
          }
          else if ((int)v68 >= 1)
          {
            v21 = 0;
            v22 = 0;
            do
            {
              Espresso::dataset_estimator::statistics_entry_t::compute_single((Espresso::dataset_estimator::statistics_entry_t *)(*(_QWORD *)(v7 + 24) + v21), v13, 0, (uint64_t)v72);
              v23 = v10;
              v24 = (char *)v85 + v22;
              *(_OWORD *)v24 = *(_OWORD *)v72;
              *((_OWORD *)v24 + 1) = *(_OWORD *)&v72[16];
              *((_OWORD *)v24 + 2) = v73;
              *((_DWORD *)v24 + 12) = v74;
              v26 = v24 + 56;
              v25 = (void *)*((_QWORD *)v24 + 7);
              if (v25)
              {
                *((_QWORD *)v24 + 8) = v25;
                operator delete(v25);
                *v26 = 0;
                *((_QWORD *)v24 + 8) = 0;
                *((_QWORD *)v24 + 9) = 0;
              }
              *(_OWORD *)v26 = v75;
              *((_QWORD *)v24 + 9) = v76;
              v24[80] = v77;
              *(_QWORD *)v72 = &v88;
              v27 = std::__tree<std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v71, &v88, (__int128 **)v72);
              Espresso::dataset_estimator::statistics_entry_t::iterative_grow((int8x16_t *)(v27[7] + v22), (int8x16_t *)((char *)v85 + v22), 0.0);
              Espresso::dataset_estimator::statistics_entry_t::iterative_grow(&v78, (int8x16_t *)((char *)v85 + v22), 0.0);
              v22 += 88;
              v21 += 4 * (int)v13;
              v10 = v23;
            }
            while (v16 != v22);
          }
          *((_QWORD *)&v80 + 1) = 1;
          *(_QWORD *)v72 = &v88;
          v28 = std::__tree<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v63, &v88, (__int128 **)v72);
          Espresso::dataset_estimator::statistics_entry_t::iterative_grow((int8x16_t *)(v28 + 56), &v78, *(float *)(a3 + 12));
          if (*(_BYTE *)(a3 + 8))
          {
            v29 = v67;
            v30 = *v67;
            v31 = v67;
            if (*v67)
            {
              while (1)
              {
                while (1)
                {
                  v31 = (uint64_t **)v30;
                  v32 = v30 + 4;
                  if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v88, v30 + 4))
                    break;
                  v30 = *v31;
                  v29 = v31;
                  if (!*v31)
                    goto LABEL_38;
                }
                if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v32, &v88))
                  break;
                v29 = v31 + 1;
                v30 = v31[1];
                if (!v30)
                  goto LABEL_38;
              }
              v33 = v31;
            }
            else
            {
LABEL_38:
              v33 = operator new(0x50uLL);
              *(_QWORD *)v72 = v33;
              *(_QWORD *)&v72[8] = v67;
              v72[16] = 0;
              v34 = (std::string *)(v33 + 4);
              if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
              {
                std::string::__init_copy_ctor_external(v34, v88.__r_.__value_.__l.__data_, v88.__r_.__value_.__l.__size_);
              }
              else
              {
                *(_OWORD *)&v34->__r_.__value_.__l.__data_ = *(_OWORD *)&v88.__r_.__value_.__l.__data_;
                v33[6] = *((_QWORD *)&v88.__r_.__value_.__l + 2);
              }
              v33[8] = 0;
              v33[9] = 0;
              v33[7] = 0;
              v72[16] = 1;
              *v33 = 0;
              v33[1] = 0;
              v33[2] = v31;
              *v29 = v33;
              v35 = **(_QWORD **)(a1 + 64);
              v36 = v33;
              if (v35)
              {
                *(_QWORD *)(a1 + 64) = v35;
                v36 = *v29;
              }
              std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 72), v36);
              ++*(_QWORD *)(a1 + 80);
              *(_QWORD *)v72 = 0;
              std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::vector<Espresso::dataset_estimator::statistics_entry_t>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::vector<Espresso::dataset_estimator::statistics_entry_t>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v72);
            }
            v37 = v33[9];
            v38 = (_QWORD *)v33[8];
            if ((unint64_t)v38 >= v37)
            {
              v40 = v33[7];
              v41 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v38 - v40) >> 3);
              v42 = v41 + 1;
              if (v41 + 1 > 0xAAAAAAAAAAAAAAALL)
                std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
              v43 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v37 - v40) >> 3);
              if (2 * v43 > v42)
                v42 = 2 * v43;
              if (v43 >= 0x555555555555555)
                v44 = 0xAAAAAAAAAAAAAAALL;
              else
                v44 = v42;
              *(_QWORD *)&v73 = v33 + 9;
              if (v44)
              {
                if (v44 > 0xAAAAAAAAAAAAAAALL)
                  std::__throw_bad_array_new_length[abi:ne180100]();
                v45 = (char *)operator new(24 * v44);
              }
              else
              {
                v45 = 0;
              }
              v46 = &v45[24 * v41];
              *(_QWORD *)v72 = v45;
              *(_QWORD *)&v72[8] = v46;
              *(_QWORD *)&v72[16] = v46;
              *(_QWORD *)&v72[24] = &v45[24 * v44];
              *((_QWORD *)v46 + 1) = 0;
              *((_QWORD *)v46 + 2) = 0;
              *(_QWORD *)v46 = 0;
              std::vector<Espresso::dataset_estimator::statistics_entry_t>::__init_with_size[abi:ne180100]<Espresso::dataset_estimator::statistics_entry_t*,Espresso::dataset_estimator::statistics_entry_t*>(v46, v85, v86, 0x2E8BA2E8BA2E8BA3 * (((char *)v86 - (char *)v85) >> 3));
              v47 = *(_QWORD *)&v72[8];
              v39 = *(_QWORD *)&v72[16] + 24;
              *(_QWORD *)&v72[16] += 24;
              v49 = (_QWORD *)v33[7];
              v48 = (_QWORD *)v33[8];
              if (v48 == v49)
              {
                v51 = vdupq_n_s64((unint64_t)v48);
              }
              else
              {
                do
                {
                  *(_QWORD *)(v47 - 24) = 0;
                  *(_QWORD *)(v47 - 16) = 0;
                  v47 -= 24;
                  *(_QWORD *)(v47 + 16) = 0;
                  v50 = *(_OWORD *)(v48 - 3);
                  v48 -= 3;
                  *(_OWORD *)v47 = v50;
                  *(_QWORD *)(v47 + 16) = v48[2];
                  *v48 = 0;
                  v48[1] = 0;
                  v48[2] = 0;
                }
                while (v48 != v49);
                v51 = *(int64x2_t *)(v33 + 7);
                v39 = *(_QWORD *)&v72[16];
              }
              v33[7] = v47;
              v33[8] = v39;
              *(int64x2_t *)&v72[8] = v51;
              v52 = v33[9];
              v33[9] = *(_QWORD *)&v72[24];
              *(_QWORD *)&v72[24] = v52;
              *(_QWORD *)v72 = v51.i64[0];
              std::__split_buffer<std::vector<Espresso::dataset_estimator::statistics_entry_t>>::~__split_buffer((uint64_t)v72);
            }
            else
            {
              *v38 = 0;
              v38[1] = 0;
              v38[2] = 0;
              std::vector<Espresso::dataset_estimator::statistics_entry_t>::__init_with_size[abi:ne180100]<Espresso::dataset_estimator::statistics_entry_t*,Espresso::dataset_estimator::statistics_entry_t*>(v38, v85, v86, 0x2E8BA2E8BA2E8BA3 * (((char *)v86 - (char *)v85) >> 3));
              v39 = (uint64_t)(v38 + 3);
              v33[8] = v39;
            }
            v33[8] = v39;
          }
          if ((_QWORD)__p)
          {
            *((_QWORD *)&__p + 1) = __p;
            operator delete((void *)__p);
          }
          v78.i64[0] = (uint64_t)&v85;
          std::vector<Espresso::dataset_estimator::statistics_entry_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&v78);
          ++v70;
          v15 = v68;
        }
        while (v70 != v65);
      }
      if ((v60 & 1) == 0)
      {
        v53 = (unint64_t *)&v10->__shared_owners_;
        do
          v54 = __ldaxr(v53);
        while (__stlxr(v54 - 1, v53));
        if (!v54)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      v55 = v90;
      if (v90)
      {
        v56 = (unint64_t *)&v90->__shared_owners_;
        do
          v57 = __ldaxr(v56);
        while (__stlxr(v57 - 1, v56));
        if (!v57)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v88.__r_.__value_.__l.__data_);
      v3 = v66 + 24;
    }
    while (v66 + 24 != v58);
  }
}

void sub_19165C338(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44)
{
  std::__shared_weak_count *v44;
  uint64_t v45;
  unint64_t *p_shared_owners;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::vector<Espresso::dataset_estimator::statistics_entry_t>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::vector<Espresso::dataset_estimator::statistics_entry_t>>>,void *>>>>::reset[abi:ne180100]((uint64_t)&a25);
  if (__p)
  {
    a44 = (uint64_t)__p;
    operator delete(__p);
  }
  a36 = v45 - 168;
  std::vector<Espresso::dataset_estimator::statistics_entry_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&a36);
  if ((a12 & 1) == 0)
  {
    p_shared_owners = (unint64_t *)&v44->__shared_owners_;
    do
      v48 = __ldaxr(p_shared_owners);
    while (__stlxr(v48 - 1, p_shared_owners));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  v49 = *(std::__shared_weak_count **)(v45 - 112);
  if (v49)
  {
    v50 = (unint64_t *)&v49->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  if (*(char *)(v45 - 121) < 0)
    operator delete(*(void **)(v45 - 144));
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<std::vector<Espresso::dataset_estimator::statistics_entry_t>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  void **v4;
  void **v6;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 24);
    *(_QWORD *)(a1 + 16) = v4;
    v6 = v4;
    std::vector<Espresso::dataset_estimator::statistics_entry_t>::__destroy_vector::operator()[abi:ne180100](&v6);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::vector<Espresso::dataset_estimator::statistics_entry_t>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::vector<Espresso::dataset_estimator::statistics_entry_t>>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::vector<Espresso::dataset_estimator::statistics_entry_t>>>,0>((uint64_t)v1 + 32);
    operator delete(v1);
  }
}

uint64_t *std::vector<Espresso::dataset_estimator::statistics_entry_t>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  if (v2 != *result)
  {
    v5 = 0;
    do
    {
      v6 = v4 + v5;
      v7 = v2 + v5;
      v8 = *(_OWORD *)(v2 + v5 - 88);
      v9 = *(_OWORD *)(v2 + v5 - 72);
      v10 = *(_OWORD *)(v2 + v5 - 56);
      *(_DWORD *)(v6 - 40) = *(_DWORD *)(v2 + v5 - 40);
      *(_OWORD *)(v6 - 56) = v10;
      *(_OWORD *)(v6 - 72) = v9;
      *(_OWORD *)(v6 - 88) = v8;
      *(_QWORD *)(v6 - 24) = 0;
      *(_QWORD *)(v6 - 16) = 0;
      *(_QWORD *)(v6 - 32) = 0;
      *(_OWORD *)(v6 - 32) = *(_OWORD *)(v2 + v5 - 32);
      *(_QWORD *)(v6 - 16) = *(_QWORD *)(v2 + v5 - 16);
      *(_QWORD *)(v7 - 32) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_BYTE *)(v6 - 8) = *(_BYTE *)(v2 + v5 - 8);
      v5 -= 88;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  v11 = *result;
  *result = v4;
  a2[1] = v11;
  v12 = result[1];
  result[1] = a2[2];
  a2[2] = v12;
  v13 = result[2];
  result[2] = a2[3];
  a2[3] = v13;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<Espresso::dataset_estimator::statistics_entry_t>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != v3)
  {
    *(_QWORD *)(a1 + 16) = v2 - 88;
    v4 = *(void **)(v2 - 32);
    if (v4)
    {
      *(_QWORD *)(v2 - 24) = v4;
      operator delete(v4);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 88;
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void Espresso::dataset_estimator::estimate(uint64_t **a1, uint64_t *a2, unsigned int *a3, void *a4)
{
  id v7;
  __int128 *i;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  id v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  _QWORD v30[4];
  id v31;
  uint64_t **v32;
  unsigned int *v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t *v36;
  _QWORD v37[2];
  std::string __p;
  uint64_t v39;
  std::__shared_weak_count *v40;
  __int128 *v41[3];

  v41[2] = *(__int128 **)MEMORY[0x1E0C80C00];
  v7 = a4;
  for (i = (__int128 *)(*a1)[19]; i; i = *(__int128 **)i)
  {
    std::pair<std::string const,std::shared_ptr<Espresso::blob<float,4>>>::pair[abi:ne180100](&__p, i + 1);
    v41[0] = (__int128 *)&__p;
    v9 = std::__tree<std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 5, &__p, v41);
    std::vector<Espresso::dataset_estimator::statistics_entry_t>::resize(v9 + 7, *(int *)(v39 + 16));
    v10 = v40;
    if (v40)
    {
      p_shared_owners = (unint64_t *)&v40->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  v13 = *a2;
  v14 = (std::__shared_weak_count *)a2[1];
  v37[0] = v13;
  v37[1] = v14;
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v18 = (uint64_t)*a1;
  v17 = (__int128 *)a1[1];
  v41[0] = (__int128 *)*a1;
  v41[1] = v17;
  if (v17)
  {
    v19 = (unint64_t *)v17 + 1;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v34 = 0;
  v35 = 0;
  v36 = 0;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v34;
  __p.__r_.__value_.__s.__data_[8] = 0;
  v21 = (uint64_t *)operator new(0x10uLL);
  v34 = v21;
  v36 = v21 + 2;
  *v21 = v18;
  v21[1] = (uint64_t)v17;
  if (v17)
  {
    v22 = (unint64_t *)v17 + 1;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  v35 = v21 + 2;
  v24 = *a3;
  v30[0] = MEMORY[0x1E0C809B0];
  v30[1] = 3221225472;
  v30[2] = ___ZN8Espresso17dataset_estimator8estimateENSt3__110shared_ptrINS_20abstract_data_sourceEEERKNS0_9options_tEU13block_pointerFvvE_block_invoke;
  v30[3] = &unk_1E2DD51B0;
  v32 = a1;
  v33 = a3;
  v25 = v7;
  v31 = v25;
  Espresso::feed_data_source_to_networks(v37, &v34, v24 | 0x100000000, v30);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v34;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (v17)
  {
    v26 = (unint64_t *)v17 + 1;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      (*(void (**)(__int128 *))(*(_QWORD *)v17 + 16))(v17);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v17);
    }
  }
  if (v14)
  {
    v28 = (unint64_t *)&v14->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }

}

