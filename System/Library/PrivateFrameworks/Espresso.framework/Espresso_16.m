void sub_19143C42C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  void *v30;

  _Unwind_Resume(a1);
}

void Espresso::tracer::set_attachment<espresso_buffer_t>(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  int32x4_t v15;
  int32x4_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  int32x4_t v21;
  void *v22;
  uint64_t v23;
  std::vector<int>::size_type v24;
  uint8_t *v25;
  std::vector<int>::pointer begin;
  uint64_t v27;
  size_t v28;
  std::string *v29;
  void *v30;
  std::string *v31;
  void *v32;
  _QWORD *v33;
  _QWORD *v34;
  BOOL v35;
  std::runtime_error *exception;
  id v37;
  std::vector<int> v38;
  std::vector<int>::size_type __n;
  std::string v40;
  int32x4_t v41[5];
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  uint8_t buf[8];
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(a1 + 80), "lastObject");
  v37 = (id)objc_claimAutoreleasedReturnValue();
  if (!v37)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Invalid state: No frames exists in the trace");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v6 = a2;
  if (*((char *)a2 + 23) < 0)
    v6 = (uint64_t *)*a2;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v37, "objectForKeyedSubscript:", v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v8)
  {
    v9 = objc_opt_new();
    if (*((char *)a2 + 23) < 0)
      a2 = (uint64_t *)*a2;
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", a2);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v37, "setObject:forKeyedSubscript:", v9, v10);

    v8 = (void *)v9;
  }
  v11 = (void *)objc_opt_new();
  v14 = (_QWORD *)*a3;
  v12 = a3 + 1;
  v13 = v14;
  if (v14 != v12)
  {
    do
    {
      if (*((char *)v13 + 55) < 0)
        std::string::__init_copy_ctor_external(&v40, (const std::string::value_type *)v13[4], v13[5]);
      else
        v40 = *(std::string *)(v13 + 4);
      v15 = *(int32x4_t *)(v13 + 13);
      v16 = *(int32x4_t *)(v13 + 15);
      v17 = *(_OWORD *)(v13 + 19);
      v42 = *(_OWORD *)(v13 + 17);
      v43 = v17;
      v41[3] = v15;
      v41[4] = v16;
      v18 = *(_OWORD *)(v13 + 21);
      v19 = *(_OWORD *)(v13 + 23);
      v47 = v13[27];
      v20 = *(_OWORD *)(v13 + 25);
      v45 = v19;
      v46 = v20;
      v44 = v18;
      v21 = *(int32x4_t *)(v13 + 9);
      v41[0] = *(int32x4_t *)(v13 + 7);
      v41[1] = v21;
      v41[2] = *(int32x4_t *)(v13 + 11);
      v22 = (void *)v41[0].i64[0];
      v23 = *((_QWORD *)&v20 + 1);
      __n = 0;
      v53 = 0;
      v51 = 0u;
      v52 = 0u;
      v49 = 0u;
      v50 = 0u;
      *(_QWORD *)buf = 1;
      espresso_buffer_unpack_tensor_shape(v41, &__n, buf);
      std::vector<int>::vector(&v38, __n);
      v24 = __n;
      if (__n)
      {
        v25 = buf;
        begin = v38.__begin_;
        do
        {
          v27 = *(_QWORD *)v25;
          v25 += 8;
          *begin++ = v27;
          --v24;
        }
        while (v24);
      }
      if ((_QWORD)v42)
        v28 = 4 * v23;
      else
        v28 = 4;
      if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v29 = &v40;
      else
        v29 = (std::string *)v40.__r_.__value_.__r.__words[0];
      Espresso::tracer::trace_blob_data(a1, (uint64_t)v29, v22, v28, (uint64_t *)&v38, 0);
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v31 = &v40;
      else
        v31 = (std::string *)v40.__r_.__value_.__r.__words[0];
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v31);
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "setObject:forKeyedSubscript:", v30, v32);

      if (v38.__begin_)
      {
        v38.__end_ = v38.__begin_;
        operator delete(v38.__begin_);
      }
      if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v40.__r_.__value_.__l.__data_);
      v33 = (_QWORD *)v13[1];
      if (v33)
      {
        do
        {
          v34 = v33;
          v33 = (_QWORD *)*v33;
        }
        while (v33);
      }
      else
      {
        do
        {
          v34 = (_QWORD *)v13[2];
          v35 = *v34 == (_QWORD)v13;
          v13 = v34;
        }
        while (!v35);
      }
      v13 = v34;
    }
    while (v34 != v12);
  }
  objc_msgSend(v8, "addEntriesFromDictionary:", v11);

}

void sub_19143C8B4()
{
  void *v0;

  JUMPOUT(0x19143C900);
}

void sub_19143C8D8()
{
  JUMPOUT(0x19143C900);
}

void sub_19143C8E8()
{
  JUMPOUT(0x19143C900);
}

void Espresso::tracer::set_attachment<std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  __int128 v18;
  const void *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  BOOL v25;
  std::runtime_error *exception;
  id v27;
  std::string v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  void *__p;
  void *v35;
  uint64_t v36;

  objc_msgSend(*(id *)(a1 + 80), "lastObject");
  v27 = (id)objc_claimAutoreleasedReturnValue();
  if (!v27)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Invalid state: No frames exists in the trace");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v6 = a2;
  if (*((char *)a2 + 23) < 0)
    v6 = (uint64_t *)*a2;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v27, "objectForKeyedSubscript:", v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v8)
  {
    v9 = objc_opt_new();
    if (*((char *)a2 + 23) < 0)
      a2 = (uint64_t *)*a2;
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", a2);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v27, "setObject:forKeyedSubscript:", v9, v10);

    v8 = (void *)v9;
  }
  v11 = (void *)objc_opt_new();
  v14 = (_QWORD *)*a3;
  v12 = a3 + 1;
  v13 = v14;
  if (v14 != v12)
  {
    do
    {
      if (*((char *)v13 + 55) < 0)
        std::string::__init_copy_ctor_external(&v28, (const std::string::value_type *)v13[4], v13[5]);
      else
        v28 = *(std::string *)(v13 + 4);
      v15 = (std::__shared_weak_count *)v13[8];
      v29 = v13[7];
      v30 = v15;
      if (v15)
      {
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldxr(p_shared_owners);
        while (__stxr(v17 + 1, p_shared_owners));
      }
      v18 = *(_OWORD *)(v13 + 11);
      v31 = *(_OWORD *)(v13 + 9);
      v32 = v18;
      v19 = (const void *)v13[14];
      v33 = v13[13];
      v35 = 0;
      v36 = 0;
      __p = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v19, v13[15], (uint64_t)(v13[15] - (_QWORD)v19) >> 2);
      Espresso::tracer::trace_blob(a1, v11, (uint64_t)&v28, (uint64_t)&v29);
      if (__p)
      {
        v35 = __p;
        operator delete(__p);
      }
      v20 = v30;
      if (v30)
      {
        v21 = (unint64_t *)&v30->__shared_owners_;
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v28.__r_.__value_.__l.__data_);
      v23 = (_QWORD *)v13[1];
      if (v23)
      {
        do
        {
          v24 = v23;
          v23 = (_QWORD *)*v23;
        }
        while (v23);
      }
      else
      {
        do
        {
          v24 = (_QWORD *)v13[2];
          v25 = *v24 == (_QWORD)v13;
          v13 = v24;
        }
        while (!v25);
      }
      v13 = v24;
    }
    while (v24 != v12);
  }
  objc_msgSend(v8, "addEntriesFromDictionary:", v11);

}

void sub_19143CB9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void Espresso::fill_network_with_image_batch_safe_v2(uint64_t a1, uint64_t *a2, _OWORD *a3, uint64_t a4, uint64_t a5, __int128 *a6)
{
  _OWORD *v12;
  __int128 v13;
  void *__p;
  void *v15;
  _OWORD *v16;

  v12 = operator new(0x20uLL);
  v15 = v12 + 2;
  v16 = v12 + 2;
  v13 = a3[1];
  *v12 = *a3;
  v12[1] = v13;
  __p = v12;
  Espresso::fill_network_with_images_batch_safe_v2(a1, a2, (const char ***)&__p, a4, a5, a6);
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
}

void sub_19143CCBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Espresso::fill_network_with_images_batch_safe_v2(uint64_t a1, uint64_t *a2, const char ***a3, uint64_t a4, uint64_t a5, __int128 *a6)
{
  uint64_t v11;
  void *__p[2];
  char v13;

  std::string::basic_string[abi:ne180100]<0>(__p, "");
  Espresso::fill_network_with_images_batch_safe_v2(a1, a2, a3, a4, v11, a6, (std::string::size_type)__p);
  if (v13 < 0)
    operator delete(__p[0]);
}

void sub_19143CD58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Espresso::prepare_blob_for_network(uint64_t a1, uint64_t *a2, std::string::size_type a3, uint64_t a4, int a5)
{
  uint64_t v5;
  float *v10;
  float v11;
  int v12;
  int v13;
  float v14;
  int v15;
  float v16;
  uint64_t v17;
  vDSP_Length v18;
  int v19;
  int v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  float v30;
  uint64_t v31;
  uint64_t v32;
  vDSP_Length v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  std::runtime_error *exception;
  std::logic_error *v39;
  std::logic_error *v40;
  std::logic_error *v41;
  std::string *v42;
  __int128 v43;
  std::string *v44;
  __int128 v45;
  uint64_t v46;
  char *v47;
  std::string *v48;
  std::string::size_type size;
  std::string *v50;
  __int128 v51;
  std::logic_error *v52;
  std::string *v53;
  __int128 v54;
  std::string *v55;
  __int128 v56;
  uint64_t v57;
  char *v58;
  std::string *v59;
  std::string::size_type v60;
  std::string *v61;
  __int128 v62;
  std::logic_error *v63;
  std::string *v64;
  __int128 v65;
  std::string *v66;
  __int128 v67;
  uint64_t v68;
  char *v69;
  std::string *v70;
  std::string::size_type v71;
  std::string *v72;
  __int128 v73;
  std::logic_error *v74;
  std::string *v75;
  __int128 v76;
  std::string *v77;
  __int128 v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  char *v82;
  std::string *v83;
  std::string::size_type v84;
  std::string *v85;
  __int128 v86;
  uint64_t v87;
  int v88;
  int v89;
  std::string v90;
  std::string v91;
  std::string v92;
  std::string v93;
  std::string v94;
  float __B;
  std::string v96;

  v5 = *a2;
  if (!*(_QWORD *)(*a2 + 80))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Inconsistent state");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v96, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
    v5 = *a2;
  }
  else
  {
    v96 = *(std::string *)a3;
  }
  v10 = (float *)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(v5 + 328, &v96);
  if ((float *)(v5 + 336) == v10)
  {
    v12 = 0;
    v11 = 1.0;
    v16 = 0.0;
    v15 = 0;
    v13 = 0;
    v14 = 0.0;
  }
  else
  {
    v11 = v10[14];
    v12 = *((_DWORD *)v10 + 17);
    v14 = v10[18];
    v13 = *((_DWORD *)v10 + 19);
    v16 = v10[20];
    v15 = *((_DWORD *)v10 + 21);
  }
  __B = v11;
  if (fabsf(v11 + -1.0) > 0.00001)
  {
    v17 = 0;
    v18 = *(int *)(*(_QWORD *)a4 + 8);
    do
    {
      v18 *= *(int *)(*(_QWORD *)a4 + 12 + v17);
      v17 += 4;
    }
    while (v17 != 12);
    vDSP_vsmul(*(const float **)(*(_QWORD *)a4 + 24), 1, &__B, *(float **)(*(_QWORD *)a4 + 24), 1, v18);
    v5 = *a2;
  }
  if (!v5)
  {
    v39 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v39, "[Espresso] unexpected null");
    v39->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(v39, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
  }
  v19 = *(_DWORD *)(*(_QWORD *)a4 + 8);
  v20 = *(_DWORD *)(*(_QWORD *)a4 + 12);
  v21 = *(unsigned int *)(*(_QWORD *)a4 + 20);
  v22 = (_QWORD *)(v5 + 136);
  v23 = *(unsigned int *)(*(_QWORD *)a4 + 16);
  if (!std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>(v22, (unsigned __int8 *)a3))
  {
    v40 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::logic_error::logic_error(v40, &v94);
    v40->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(v40, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
  }
  v24 = *a2 + 136;
  v94.__r_.__value_.__r.__words[0] = a3;
  if (v19 != *(_DWORD *)(*((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v24, (unsigned __int8 *)a3, (__int128 **)&v94)+ 5)+ 8))
  {
    v41 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v91, v19);
    v42 = std::string::insert(&v91, 0, "[Espresso] wrong image size");
    v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
    v92.__r_.__value_.__r.__words[2] = v42->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v92.__r_.__value_.__l.__data_ = v43;
    v42->__r_.__value_.__l.__size_ = 0;
    v42->__r_.__value_.__r.__words[2] = 0;
    v42->__r_.__value_.__r.__words[0] = 0;
    v44 = std::string::append(&v92, "/");
    v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
    v93.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v93.__r_.__value_.__l.__data_ = v45;
    v44->__r_.__value_.__l.__size_ = 0;
    v44->__r_.__value_.__r.__words[2] = 0;
    v44->__r_.__value_.__r.__words[0] = 0;
    v46 = *a2 + 136;
    v90.__r_.__value_.__r.__words[0] = a3;
    v47 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v46, (unsigned __int8 *)a3, (__int128 **)&v90);
    std::to_string(&v90, *(_DWORD *)(*((_QWORD *)v47 + 5) + 8));
    if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v48 = &v90;
    else
      v48 = (std::string *)v90.__r_.__value_.__r.__words[0];
    if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v90.__r_.__value_.__r.__words[2]);
    else
      size = v90.__r_.__value_.__l.__size_;
    v50 = std::string::append(&v93, (const std::string::value_type *)v48, size);
    v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
    v94.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v94.__r_.__value_.__l.__data_ = v51;
    v50->__r_.__value_.__l.__size_ = 0;
    v50->__r_.__value_.__r.__words[2] = 0;
    v50->__r_.__value_.__r.__words[0] = 0;
    std::logic_error::logic_error(v41, &v94);
    v41->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(v41, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
  }
  v25 = *a2 + 136;
  v94.__r_.__value_.__r.__words[0] = a3;
  if (v20 != *(_DWORD *)(*((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v25, (unsigned __int8 *)a3, (__int128 **)&v94)+ 5)+ 12))
  {
    v52 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v91, v20);
    v53 = std::string::insert(&v91, 0, "[Espresso] wrong image size");
    v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
    v92.__r_.__value_.__r.__words[2] = v53->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v92.__r_.__value_.__l.__data_ = v54;
    v53->__r_.__value_.__l.__size_ = 0;
    v53->__r_.__value_.__r.__words[2] = 0;
    v53->__r_.__value_.__r.__words[0] = 0;
    v55 = std::string::append(&v92, "/");
    v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
    v93.__r_.__value_.__r.__words[2] = v55->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v93.__r_.__value_.__l.__data_ = v56;
    v55->__r_.__value_.__l.__size_ = 0;
    v55->__r_.__value_.__r.__words[2] = 0;
    v55->__r_.__value_.__r.__words[0] = 0;
    v57 = *a2 + 136;
    v90.__r_.__value_.__r.__words[0] = a3;
    v58 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v57, (unsigned __int8 *)a3, (__int128 **)&v90);
    std::to_string(&v90, *(_DWORD *)(*((_QWORD *)v58 + 5) + 12));
    if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v59 = &v90;
    else
      v59 = (std::string *)v90.__r_.__value_.__r.__words[0];
    if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v60 = HIBYTE(v90.__r_.__value_.__r.__words[2]);
    else
      v60 = v90.__r_.__value_.__l.__size_;
    v61 = std::string::append(&v93, (const std::string::value_type *)v59, v60);
    v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
    v94.__r_.__value_.__r.__words[2] = v61->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v94.__r_.__value_.__l.__data_ = v62;
    v61->__r_.__value_.__l.__size_ = 0;
    v61->__r_.__value_.__r.__words[2] = 0;
    v61->__r_.__value_.__r.__words[0] = 0;
    std::logic_error::logic_error(v52, &v94);
    v52->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(v52, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
  }
  v26 = *a2 + 136;
  v94.__r_.__value_.__r.__words[0] = a3;
  if ((_DWORD)v23 != *(_DWORD *)(*((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v26, (unsigned __int8 *)a3, (__int128 **)&v94)+ 5)+ 16))
  {
    v63 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v91, v23);
    v64 = std::string::insert(&v91, 0, "[Espresso] wrong image size");
    v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
    v92.__r_.__value_.__r.__words[2] = v64->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v92.__r_.__value_.__l.__data_ = v65;
    v64->__r_.__value_.__l.__size_ = 0;
    v64->__r_.__value_.__r.__words[2] = 0;
    v64->__r_.__value_.__r.__words[0] = 0;
    v66 = std::string::append(&v92, "/");
    v67 = *(_OWORD *)&v66->__r_.__value_.__l.__data_;
    v93.__r_.__value_.__r.__words[2] = v66->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v93.__r_.__value_.__l.__data_ = v67;
    v66->__r_.__value_.__l.__size_ = 0;
    v66->__r_.__value_.__r.__words[2] = 0;
    v66->__r_.__value_.__r.__words[0] = 0;
    v68 = *a2 + 136;
    v90.__r_.__value_.__r.__words[0] = a3;
    v69 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v68, (unsigned __int8 *)a3, (__int128 **)&v90);
    std::to_string(&v90, *(_DWORD *)(*((_QWORD *)v69 + 5) + 16));
    if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v70 = &v90;
    else
      v70 = (std::string *)v90.__r_.__value_.__r.__words[0];
    if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v71 = HIBYTE(v90.__r_.__value_.__r.__words[2]);
    else
      v71 = v90.__r_.__value_.__l.__size_;
    v72 = std::string::append(&v93, (const std::string::value_type *)v70, v71);
    v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
    v94.__r_.__value_.__r.__words[2] = v72->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v94.__r_.__value_.__l.__data_ = v73;
    v72->__r_.__value_.__l.__size_ = 0;
    v72->__r_.__value_.__r.__words[2] = 0;
    v72->__r_.__value_.__r.__words[0] = 0;
    std::logic_error::logic_error(v63, &v94);
    v63->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(v63, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
  }
  v27 = *a2 + 136;
  v94.__r_.__value_.__r.__words[0] = a3;
  v28 = *(_DWORD *)(*((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v27, (unsigned __int8 *)a3, (__int128 **)&v94)+ 5)+ 20);
  v29 = *a2 + 136;
  v94.__r_.__value_.__r.__words[0] = a3;
  if ((_DWORD)v21 != *(_DWORD *)(*((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v29, (unsigned __int8 *)a3, (__int128 **)&v94)+ 5)+ 24)* v28)
  {
    v74 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v91, v21);
    v75 = std::string::insert(&v91, 0, "[Espresso] wrong image size ");
    v76 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
    v92.__r_.__value_.__r.__words[2] = v75->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v92.__r_.__value_.__l.__data_ = v76;
    v75->__r_.__value_.__l.__size_ = 0;
    v75->__r_.__value_.__r.__words[2] = 0;
    v75->__r_.__value_.__r.__words[0] = 0;
    v77 = std::string::append(&v92, "/");
    v78 = *(_OWORD *)&v77->__r_.__value_.__l.__data_;
    v93.__r_.__value_.__r.__words[2] = v77->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v93.__r_.__value_.__l.__data_ = v78;
    v77->__r_.__value_.__l.__size_ = 0;
    v77->__r_.__value_.__r.__words[2] = 0;
    v77->__r_.__value_.__r.__words[0] = 0;
    v79 = *a2 + 136;
    v90.__r_.__value_.__r.__words[0] = a3;
    v80 = *(_DWORD *)(*((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v79, (unsigned __int8 *)a3, (__int128 **)&v90)+ 5)+ 20);
    v81 = *a2 + 136;
    v90.__r_.__value_.__r.__words[0] = a3;
    v82 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v81, (unsigned __int8 *)a3, (__int128 **)&v90);
    std::to_string(&v90, *(_DWORD *)(*((_QWORD *)v82 + 5) + 24) * v80);
    if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v83 = &v90;
    else
      v83 = (std::string *)v90.__r_.__value_.__r.__words[0];
    if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v84 = HIBYTE(v90.__r_.__value_.__r.__words[2]);
    else
      v84 = v90.__r_.__value_.__l.__size_;
    v85 = std::string::append(&v93, (const std::string::value_type *)v83, v84);
    v86 = *(_OWORD *)&v85->__r_.__value_.__l.__data_;
    v94.__r_.__value_.__r.__words[2] = v85->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v94.__r_.__value_.__l.__data_ = v86;
    v85->__r_.__value_.__l.__size_ = 0;
    v85->__r_.__value_.__r.__words[2] = 0;
    v85->__r_.__value_.__r.__words[0] = 0;
    std::logic_error::logic_error(v74, &v94);
    v74->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(v74, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
  }
  if (v12)
    v30 = v16;
  else
    v30 = v14;
  if (v12)
    v16 = v14;
  if ((int)v23 >= 1)
  {
    v89 = a5;
    v31 = 0;
    v32 = 0;
    v33 = v20 * v19;
    v87 = v20 * v19 * (int)v23;
    v88 = v20 * v19;
    while (2)
    {
      v34 = v23;
      switch((int)v32)
      {
        case 0:
          *(float *)&v94.__r_.__value_.__l.__data_ = v30;
          goto LABEL_30;
        case 1:
          LODWORD(v94.__r_.__value_.__l.__data_) = v13;
          goto LABEL_30;
        case 2:
          *(float *)&v94.__r_.__value_.__l.__data_ = v16;
          goto LABEL_30;
        case 3:
          LODWORD(v94.__r_.__value_.__l.__data_) = v15;
LABEL_30:
          if ((int)v21 >= 1)
          {
            v35 = v31;
            v36 = v21;
            do
            {
              vDSP_vsadd((const float *)(*(_QWORD *)(*(_QWORD *)a4 + 24) + v35), 1, (const float *)&v94, (float *)(*(_QWORD *)(*(_QWORD *)a4 + 24) + v35), 1, v33);
              v35 += 4 * v87;
              --v36;
            }
            while (v36);
          }
          ++v32;
          v31 += 4 * v33;
          v23 = v34;
          if (v32 == v34)
            goto LABEL_34;
          continue;
        default:
LABEL_34:
          if (v12 != v89 && (int)v23 >= 3 && (int)v21 >= 1)
          {
            v37 = 0;
            do
            {
              vDSP_vswap((float *)(*(_QWORD *)(*(_QWORD *)a4 + 24) + v37), 1, (float *)(*(_QWORD *)(*(_QWORD *)a4 + 24) + v37 + 8 * v88), 1, v33);
              v37 += 4 * v87;
              --v21;
            }
            while (v21);
          }
          break;
      }
      break;
    }
  }
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v96.__r_.__value_.__l.__data_);
}

void sub_19143D61C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  int v44;
  void *v45;
  uint64_t v46;

  if (a44 < 0)
    operator delete(__p);
  if (a18 < 0)
    operator delete(a13);
  if (a37 < 0)
    operator delete(a32);
  if (a30 < 0)
    operator delete(a25);
  if (a24 < 0)
  {
    operator delete(a19);
    if ((v44 & 1) == 0)
    {
LABEL_14:
      if (*(char *)(v46 - 137) < 0)
        operator delete(*(void **)(v46 - 160));
      _Unwind_Resume(a1);
    }
  }
  else if (!v44)
  {
    goto LABEL_14;
  }
  __cxa_free_exception(v45);
  goto LABEL_14;
}

vImage_Error Espresso::crop_image_to_square_8888(Espresso *this, vImage_Buffer *dest, vImage_Buffer *a3)
{
  unint64_t v5;
  unint64_t v6;
  int v7;
  int v8;
  size_t v9;
  vImage_Buffer v11;

  v6 = *((_QWORD *)this + 1);
  v5 = *((_QWORD *)this + 2);
  if (!dest->data)
    vImageBuffer_Init(dest, (int)a3, (int)a3, 0x20u, 0);
  if (v5 >= v6)
    v7 = v6;
  else
    v7 = v5;
  v9 = *((_QWORD *)this + 3);
  v8 = v6 - v5;
  v11.data = (void *)(*(_QWORD *)this
                    + v9 * ((v8 / 2) & ~((v8 + (v8 < 0)) >> 31))
                    + 4 * ((v8 / -2) & ~((v8 / -2) >> 31)));
  v11.height = v7;
  v11.width = v7;
  v11.rowBytes = v9;
  return vImageScale_ARGB8888(&v11, dest, 0, 0);
}

vImage_Error Espresso::crop_image_to_square_Planar8(Espresso *this, vImage_Buffer *dest, vImage_Buffer *a3)
{
  unint64_t v5;
  unint64_t v6;
  int v7;
  size_t v8;
  vImage_Buffer v10;

  v6 = *((_QWORD *)this + 1);
  v5 = *((_QWORD *)this + 2);
  if (!dest->data)
    vImageBuffer_Init(dest, (int)a3, (int)a3, 8u, 0);
  if (v5 >= v6)
    v7 = v6;
  else
    v7 = v5;
  v8 = *((_QWORD *)this + 3);
  v10.data = (void *)(*(_QWORD *)this
                    + v8 * ((((int)v6 - (int)v5) / 2) & ~((int)(v6 - v5 + ((int)v6 - (int)v5 < 0)) >> 31))
                    + ((((int)v6 - (int)v5) / -2) & ~((((int)v6 - (int)v5) / -2) >> 31)));
  v10.height = v7;
  v10.width = v7;
  v10.rowBytes = v8;
  return vImageScale_Planar8(&v10, dest, 0, 0);
}

void Espresso::MetalLowmemEngine::convolution_grad_kernel_metal::~convolution_grad_kernel_metal(id *this)
{

  Espresso::MetalLowmemEngine::convolution_kernel_metal_base<Espresso::generic_convolution_grad_kernel>::~convolution_kernel_metal_base((uint64_t)this);
}

{

  Espresso::MetalLowmemEngine::convolution_kernel_metal_base<Espresso::generic_convolution_grad_kernel>::~convolution_kernel_metal_base((uint64_t)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::MetalLowmemEngine::convolution_grad_kernel_metal::__launch(uint64_t a1, id **a2, const void ***a3, const void ***a4)
{
  uint64_t v5;
  id *v9;
  id *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  id v15;
  id v16;
  int v17;
  BOOL v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  signed int v24;
  int v25;
  uint64_t v26;
  int v27;
  void *v28;
  int v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  const void *v39;
  id *v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  void *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  const void *v54;
  _QWORD *v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  unint64_t *v63;
  unint64_t v64;
  std::runtime_error *exception;
  std::runtime_error *v66;
  std::runtime_error *v67;
  std::runtime_error *v68;
  std::runtime_error *v69;
  std::string *v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;
  int64x2_t v75;
  std::string v76;
  std::string v77;
  id *v78;
  std::__shared_weak_count *v79;

  v5 = *(_QWORD *)(a1 + 280);
  if (!*(_QWORD *)v5
  {
    v78 = 0;
    v79 = 0;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "convolution_grad_kernel not configured");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v10 = v9;
  v11 = *(std::__shared_weak_count **)(v5 + 8);
  v78 = v9;
  v79 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  v14 = *(_QWORD *)(a1 + 8);
  v15 = (*a2)[19];
  v16 = v10[20];
  v17 = *(_DWORD *)(a1 + 344);
  v19 = v17 - 1;
  v18 = v17 < 1;
  v20 = v17 + 2;
  if (!v18)
    v20 = v19;
  v21 = *(_DWORD *)(a1 + 348);
  v22 = v21 - 1;
  v18 = v21 < 1;
  v23 = v21 + 2;
  if (!v18)
    v23 = v22;
  v24 = ((4 * v20) & 0xFFFFFFF0) + 16 + (((4 * v20) & 0xFFFFFFF0) + 16) * (v23 >> 2);
  if (*(int *)(a1 + 420) <= 1)
    v25 = 1;
  else
    v25 = *(_DWORD *)(a1 + 420);
  v26 = *(int *)(a1 + 352) * (uint64_t)(v24 / v25) * *(int *)(a1 + 356);
  if (!*(_QWORD *)(a1 + 768))
  {
    v29 = *(_DWORD *)(a1 + 472);
    if (v29)
    {
      if (v29 != 1)
      {
        v69 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::to_string(&v76, *(_DWORD *)(a1 + 472));
        v70 = std::string::insert(&v76, 0, "Compute path no supported ");
        v71 = *(_OWORD *)&v70->__r_.__value_.__l.__data_;
        v77.__r_.__value_.__r.__words[2] = v70->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v71;
        v70->__r_.__value_.__l.__size_ = 0;
        v70->__r_.__value_.__r.__words[2] = 0;
        v70->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v69, &v77);
        __cxa_throw(v69, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v30 = 2;
    }
    else
    {
      v30 = 4;
    }
    v54 = *(const void **)(a1 + 8);
    if (!v54
    {
      *(_OWORD *)&v77.__r_.__value_.__l.__data_ = 0uLL;
      v67 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v67, "Espresso: wrong_context_type");
      v67->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
    }
    v56 = *(std::__shared_weak_count **)(a1 + 16);
    v77.__r_.__value_.__r.__words[0] = (std::string::size_type)v55;
    v77.__r_.__value_.__l.__size_ = (std::string::size_type)v56;
    if (v56)
    {
      v57 = (unint64_t *)&v56->__shared_owners_;
      do
        v58 = __ldxr(v57);
      while (__stxr(v58 + 1, v57));
    }
    v59 = (void *)v55[18];
    if ((unint64_t)(v30 * v26) <= 0x10)
      v60 = 16;
    else
      v60 = v30 * v26;
    v61 = objc_msgSend(v59, "newBufferWithLength:options:", v60, 0);
    v62 = *(void **)(a1 + 768);
    *(_QWORD *)(a1 + 768) = v61;

    if (v56)
    {
      v63 = (unint64_t *)&v56->__shared_owners_;
      do
        v64 = __ldaxr(v63);
      while (__stlxr(v64 - 1, v63));
      if (!v64)
      {
        ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
        std::__shared_weak_count::__release_weak(v56);
      }
    }
  }
  if (!*(_QWORD *)(a1 + 776))
  {
    v31 = *(_DWORD *)(a1 + 344);
    v32 = v31 - 1;
    v18 = v31 < 1;
    v33 = v31 + 2;
    if (!v18)
      v33 = v32;
    v34 = *(_DWORD *)(a1 + 348);
    v35 = v34 - 1;
    v18 = v34 < 1;
    v36 = v34 + 2;
    if (!v18)
      v36 = v35;
    v37 = (v36 >> 2) + 1;
    v38 = *(_DWORD *)(a1 + 420);
    if (v38 <= 1)
      v38 = 1;
    LODWORD(v77.__r_.__value_.__l.__data_) = (v33 >> 2) + 1;
    HIDWORD(v77.__r_.__value_.__r.__words[0]) = v37 / v38;
    v77.__r_.__value_.__l.__size_ = *(_QWORD *)(a1 + 352);
    LODWORD(v77.__r_.__value_.__r.__words[2]) = v26;
    v39 = *(const void **)(a1 + 8);
    if (!v39
    {
      *(_OWORD *)&v76.__r_.__value_.__l.__data_ = 0uLL;
      v68 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v68, "Espresso: wrong_context_type");
      v68->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
    }
    v41 = *(std::__shared_weak_count **)(a1 + 16);
    v76.__r_.__value_.__r.__words[0] = (std::string::size_type)v40;
    v76.__r_.__value_.__l.__size_ = (std::string::size_type)v41;
    if (v41)
    {
      v42 = (unint64_t *)&v41->__shared_owners_;
      do
        v43 = __ldxr(v42);
      while (__stxr(v43 + 1, v42));
    }
    v44 = objc_msgSend(v40[18], "newBufferWithBytes:length:options:", &v77, 20, 0);
    v45 = *(void **)(a1 + 776);
    *(_QWORD *)(a1 + 776) = v44;

    if (v41)
    {
      v46 = (unint64_t *)&v41->__shared_owners_;
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }
  }
  v27 = *(_DWORD *)(a1 + 472);
  if (v27)
  {
    v28 = 0;
  }
  else
  {
    objc_msgSend(*(id *)(v14 + 160), "kernelForFunction:cacheString:withConstants:", "transpose_conv_weights_f32", 0, 0);
    v48 = objc_claimAutoreleasedReturnValue();
    v27 = *(_DWORD *)(a1 + 472);
    v28 = (void *)v48;
  }
  if (v27 == 1)
  {
    objc_msgSend(*(id *)(v14 + 160), "kernelForFunction:cacheString:withConstants:", "transpose_conv_weights_f16", 0, 0);
    v49 = objc_claimAutoreleasedReturnValue();

    v28 = (void *)v49;
  }
  if (!v28)
  {
    v66 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v66, "Kernel not found");
    __cxa_throw(v66, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  objc_msgSend(v15, "setComputePipelineState:", v28);
  objc_msgSend(v15, "setBuffer:offset:atIndex:", *(_QWORD *)(a1 + 768), 0, 0);
  objc_msgSend(v15, "setBuffer:offset:atIndex:", v16, 0, 1);
  objc_msgSend(v15, "setBuffer:offset:atIndex:", *(_QWORD *)(a1 + 776), 0, 2);
  v50 = v26 - 1;
  if ((int)v26 < 1)
    v50 = v26 + 62;
  v74 = (v50 >> 6) + 1;
  v75 = vdupq_n_s64(1uLL);
  v72 = xmmword_191A93520;
  v73 = 1;
  objc_msgSend(v15, "dispatchThreadgroups:threadsPerThreadgroup:", &v74, &v72);
  objc_storeStrong((id *)(a1 + 504), *(id *)(a1 + 768));
  objc_storeStrong((id *)(a1 + 488), *(id *)(a1 + 768));
  objc_storeStrong((id *)(a1 + 496), *(id *)(a1 + 768));
  objc_storeStrong((id *)(a1 + 520), *(id *)(a1 + 768));
  Espresso::MetalLowmemEngine::convolution_kernel_metal_base<Espresso::generic_convolution_grad_kernel>::__launch(a1, a2, a3, a4);

  v51 = v79;
  if (v79)
  {
    v52 = (unint64_t *)&v79->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
}

void sub_19143DF04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;
  void *v28;
  void *v29;
  int v30;
  uint64_t v31;

  if (a27 < 0)
    operator delete(__p);
  if (a21 < 0)
  {
    operator delete(a16);
    if ((v30 & 1) == 0)
    {
LABEL_8:

      std::shared_ptr<void>::~shared_ptr[abi:ne180100](v31 - 96);
      _Unwind_Resume(a1);
    }
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void Espresso::MetalLowmemEngine::convolution_grad_kernel_metal::clear_weights(Espresso::MetalLowmemEngine::convolution_grad_kernel_metal *this)
{
  void *v2;

  Espresso::generic_convolution_grad_kernel::clear_weights((uint64_t)this);
  v2 = (void *)*((_QWORD *)this + 96);
  *((_QWORD *)this + 96) = 0;

}

const char *Espresso::generic_convolution_grad_kernel::kernel_type_str(Espresso::generic_convolution_grad_kernel *this)
{
  return "convolution_grad";
}

uint64_t Espresso::abstract_kernel_with_weights_grad_::outputs_gradient(Espresso::abstract_kernel_with_weights_grad_ *this)
{
  return 0;
}

uint64_t Espresso::MetalLowmemEngine::convolution_grad_kernel_metal::get_params(Espresso::MetalLowmemEngine::convolution_grad_kernel_metal *this)
{
  return (uint64_t)this + 784;
}

id Espresso::MetalLowmemEngine::convolution_grad_kernel_metal::transformkname(Espresso::MetalLowmemEngine::convolution_grad_kernel_metal *this, NSString *a2)
{
  NSString *v3;
  void *v4;
  void *v5;
  uint64_t v6;

  v3 = a2;
  -[NSString stringByReplacingOccurrencesOfString:withString:](v3, "stringByReplacingOccurrencesOfString:withString:", CFSTR("morechan_"), &stru_1E2DD80E0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "stringByReplacingOccurrencesOfString:withString:", CFSTR("convolution_"), CFSTR("grad_convolution_"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (*((int *)this + 90) >= 2)
  {
    objc_msgSend(v5, "stringByAppendingString:", CFSTR("_backwardstride"));
    v6 = objc_claimAutoreleasedReturnValue();

    v5 = (void *)v6;
  }
  return v5;
}

void sub_19143E0C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::convolution_uniforms,Espresso::abstract_kernel_with_weights_grad_>::get_params(uint64_t a1)
{
  return a1 + 304;
}

void Espresso::MetalLowmemEngine::convolution_weights_grad_kernel_metal::~convolution_weights_grad_kernel_metal(id *this)
{
  void **v2;

  *this = off_1E2D9DD68;
  v2 = this + 35;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v2);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{
  void **v2;

  *this = off_1E2D9DD68;
  v2 = this + 35;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v2);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::MetalLowmemEngine::convolution_weights_grad_kernel_metal::__launch(int32x2_t *a1, uint64_t a2, uint64_t *a3, const void ***a4)
{
  int32x2_t v7;
  id v8;
  const void **v9;
  const void *v10;
  _DWORD *v11;
  _DWORD *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  const void *v16;
  _QWORD *v17;
  _QWORD *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int32x2_t v34;
  __int128 v35;
  uint64_t v36;
  void *v37;
  void *v38;
  uint64_t v39;
  int32x2_t v40;
  int8x8_t v41;
  __int128 v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::runtime_error *exception;
  __int128 v53;
  uint64_t v54;
  _QWORD v55[3];
  _DWORD v56[4];
  int32x2_t v57;
  int v58;
  int32x2_t v59;
  __int128 v60;
  _QWORD *v61;
  std::__shared_weak_count *v62;
  _QWORD *v63;
  std::__shared_weak_count *v64;
  _QWORD *v65;
  std::__shared_weak_count *v66;

  v7 = a1[1];
  v8 = *(id *)(*(_QWORD *)a2 + 152);
  v9 = *a4;
  v10 = **a4;
  if (v10
  {
    v12 = v11;
    v13 = (std::__shared_weak_count *)v9[1];
    v65 = v11;
    v66 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
      v9 = *a4;
    }
  }
  else
  {
    v12 = 0;
    v65 = 0;
    v66 = 0;
  }
  v16 = v9[2];
  if (v16
  {
    v18 = v17;
    v19 = (std::__shared_weak_count *)v9[3];
    v63 = v17;
    v64 = v19;
    if (v19)
    {
      v20 = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
  }
  else
  {
    v18 = 0;
    v63 = 0;
    v64 = 0;
  }
  v22 = *a3;
  if (*(_QWORD *)v22
  {
    v24 = *(std::__shared_weak_count **)(v22 + 8);
    v61 = v23;
    v62 = v24;
    if (v24)
    {
      v25 = (unint64_t *)&v24->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
  }
  else
  {
    v61 = 0;
    v62 = 0;
  }
  v27 = a1[49].i16[3];
  v56[0] = a1[49].i16[2];
  v56[1] = v27;
  v28 = a1[44].i32[0];
  if ((a1[47].i16[0] & 0xFFFE) == 2)
  {
    v29 = 0;
    v30 = 0;
    v31 = a1[44].i32[1];
  }
  else
  {
    if (v28 >= 0)
      v32 = a1[44].i32[0];
    else
      v32 = v28 + 1;
    v29 = v32 >> 1;
    v31 = a1[44].i32[1];
    if (v31 >= 0)
      v33 = a1[44].i32[1];
    else
      v33 = v31 + 1;
    v30 = v33 >> 1;
  }
  v56[2] = v29;
  v56[3] = v30;
  v34 = vadd_s32(a1[43], (int32x2_t)-1);
  v57 = vsra_n_s32((int32x2_t)0x100000001, (int32x2_t)vsra_n_u32((uint32x2_t)v34, (uint32x2_t)vcltz_s32(v34), 0x1EuLL), 2uLL);
  v58 = v12[5];
  v59 = (int32x2_t)__PAIR64__(v31, v28);
  *(_QWORD *)&v35 = *((_QWORD *)v12 + 1);
  *((_QWORD *)&v35 + 1) = v18[1];
  v60 = v35;
  if (!*(_QWORD *)&a1[59])
  {
    v36 = objc_msgSend(*(id *)(*(_QWORD *)&v7 + 144), "newBufferWithBytes:length:options:", v56, 52, 0);
    v37 = (void *)a1[59];
    a1[59] = (int32x2_t)v36;

  }
  if ((*(unsigned int (**)(_DWORD *))(*(_QWORD *)v12 + 32))(v12))
  {
    v38 = 0;
  }
  else
  {
    objc_msgSend(*(id *)(*(_QWORD *)&v7 + 160), "kernelForFunction:cacheString:withConstants:", "conv_weights_grad_f32", 0, 0);
    v38 = (void *)objc_claimAutoreleasedReturnValue();
  }
  if ((*(unsigned int (**)(_DWORD *))(*(_QWORD *)v12 + 32))(v12) == 1)
  {
    objc_msgSend(*(id *)(*(_QWORD *)&v7 + 160), "kernelForFunction:cacheString:withConstants:", "conv_weights_grad_f16", 0, 0);
    v39 = objc_claimAutoreleasedReturnValue();

    v38 = (void *)v39;
  }
  if (!v38)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Kernel not found");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  objc_msgSend(v8, "setComputePipelineState:", v38);
  objc_msgSend(v8, "setBuffer:offset:atIndex:", *(_QWORD *)&a1[59], 0, 0);
  objc_msgSend(v8, "setBuffer:offset:atIndex:", v61[20], 0, 1);
  objc_msgSend(v8, "setTexture:atIndex:", v65[21], 0);
  objc_msgSend(v8, "setTexture:atIndex:", v63[21], 1);
  v40 = vmul_s32(v59, vrev64_s32(v57));
  v41 = vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)0x400000004, v40), (int8x8_t)0x200000002, vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)0x1000000010, v40), (int8x8_t)0x400000004, (int8x8_t)0x800000008));
  *(_QWORD *)&v42 = v41.u32[0];
  *((_QWORD *)&v42 + 1) = v41.u32[1];
  v55[0] = (v40.i32[0] - 1) / v41.i32[0] + 1;
  v55[1] = (v40.i32[1] - 1) / v41.i32[1] + 1;
  v55[2] = 1;
  v53 = v42;
  v54 = 1;
  objc_msgSend(v8, "dispatchThreadgroups:threadsPerThreadgroup:", v55, &v53);

  v43 = v62;
  if (v62)
  {
    v44 = (unint64_t *)&v62->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  v46 = v64;
  if (v64)
  {
    v47 = (unint64_t *)&v64->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  v49 = v66;
  if (v66)
  {
    v50 = (unint64_t *)&v66->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }

}

void sub_19143E5FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  void *v15;
  uint64_t v16;
  va_list va;

  va_start(va, a15);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v16 - 96);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v16 - 80);

  _Unwind_Resume(a1);
}

void Espresso::MetalLowmemEngine::convolution_weights_grad_kernel_metal::blob_options(char a1@<W1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;

  if ((a1 & 1) != 0)
  {
    v4 = operator new(0x78uLL);
    v4[1] = 0;
    v4[2] = 0;
    *v4 = &off_1E2DBAF68;
    *((_OWORD *)v4 + 5) = 0u;
    *((_OWORD *)v4 + 6) = 0u;
    *((_OWORD *)v4 + 3) = 0u;
    *((_OWORD *)v4 + 4) = 0u;
    *((_OWORD *)v4 + 2) = 0u;
    v4[13] = 0;
    v4[14] = 0;
    *((_DWORD *)v4 + 12) = 1065353216;
    v4[7] = 0x1FFFFFFFFLL;
    v4[12] = 0;
    v4[8] = 0;
    v4[9] = 0;
    *((_BYTE *)v4 + 88) = 0;
    v4[10] = 0;
    a2[1] = v4;
    v4[3] = &off_1E2D7F198;
    *a2 = v4 + 3;
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
}

const char *Espresso::generic_convolution_weights_grad_kernel::kernel_type_str(Espresso::generic_convolution_weights_grad_kernel *this)
{
  return "convolution_weights_grad";
}

uint64_t Espresso::generic_convolution_weights_grad_kernel::outputs_gradient(Espresso::generic_convolution_weights_grad_kernel *this)
{
  return 1;
}

void Espresso::MetalLowmemEngine::bias_grad_kernel_metal::~bias_grad_kernel_metal(id *this)
{
  void **v2;

  *this = off_1E2D9DD68;
  v2 = this + 35;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v2);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{
  void **v2;

  *this = off_1E2D9DD68;
  v2 = this + 35;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v2);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::MetalLowmemEngine::bias_grad_kernel_metal::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, const void ***a4)
{
  uint64_t v7;
  id v8;
  const void **v9;
  const void *v10;
  _DWORD *v11;
  _DWORD *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  int v21;
  int v22;
  BOOL v23;
  int v24;
  int v25;
  uint64_t v26;
  void *v27;
  void *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::runtime_error *exception;
  int64x2_t v37;
  uint64_t v38;
  uint64_t v39;
  int64x2_t v40;
  _DWORD v41[2];
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  std::__shared_weak_count *v45;
  _QWORD *v46;
  std::__shared_weak_count *v47;

  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(id *)(*(_QWORD *)a2 + 152);
  v9 = *a4;
  v10 = **a4;
  if (v10
  {
    v12 = v11;
    v13 = (std::__shared_weak_count *)v9[1];
    v46 = v11;
    v47 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
    }
  }
  else
  {
    v12 = 0;
    v46 = 0;
    v47 = 0;
  }
  v16 = *a3;
  if (*(_QWORD *)v16
  {
    v18 = *(std::__shared_weak_count **)(v16 + 8);
    v44 = v17;
    v45 = v18;
    if (v18)
    {
      v19 = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
  }
  else
  {
    v44 = 0;
    v45 = 0;
  }
  v21 = v12[4];
  v22 = v12[5];
  v24 = v21 - 1;
  v23 = v21 < 1;
  v25 = v21 + 2;
  if (!v23)
    v25 = v24;
  v41[0] = (v25 >> 2) + 1;
  v41[1] = v22;
  v42 = *((_QWORD *)v12 + 1);
  v43 = 0x100000001;
  if (!*(_QWORD *)(a1 + 312))
  {
    v26 = objc_msgSend(*(id *)(v7 + 144), "newBufferWithBytes:length:options:", v41, 24, 0);
    v27 = *(void **)(a1 + 312);
    *(_QWORD *)(a1 + 312) = v26;

  }
  if ((*(unsigned int (**)(_DWORD *))(*(_QWORD *)v12 + 32))(v12))
  {
    v28 = 0;
  }
  else
  {
    objc_msgSend(*(id *)(v7 + 160), "kernelForFunction:cacheString:withConstants:", "bias_grad_f32_11", 0, 0);
    v28 = (void *)objc_claimAutoreleasedReturnValue();
  }
  if ((*(unsigned int (**)(_DWORD *))(*(_QWORD *)v12 + 32))(v12) == 1)
  {
    objc_msgSend(*(id *)(v7 + 160), "kernelForFunction:cacheString:withConstants:", "bias_grad_f16_11", 0, 0);
    v29 = objc_claimAutoreleasedReturnValue();

    v28 = (void *)v29;
  }
  if (!v28)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Kernel not found");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  objc_msgSend(v8, "setComputePipelineState:", v28);
  objc_msgSend(v8, "setBuffer:offset:atIndex:", *(_QWORD *)(a1 + 312), 0, 0);
  objc_msgSend(v8, "setBuffer:offset:atIndex:", v44[20], 0, 1);
  objc_msgSend(v8, "setTexture:atIndex:", v46[21], 0);
  v39 = v41[0];
  v40 = vdupq_n_s64(1uLL);
  v37 = v40;
  v38 = 1;
  objc_msgSend(v8, "dispatchThreadgroups:threadsPerThreadgroup:", &v39, &v37);

  v30 = v45;
  if (v45)
  {
    v31 = (unint64_t *)&v45->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v33 = v47;
  if (v47)
  {
    v34 = (unint64_t *)&v47->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }

}

void sub_19143EA8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  void *v11;
  uint64_t v12;
  va_list va;

  va_start(va, a11);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v12 - 64);

  _Unwind_Resume(a1);
}

char *Espresso::MetalLowmemEngine::bias_grad_kernel_metal::blob_options@<X0>(char *this@<X0>, char a2@<W1>, _QWORD *a3@<X8>)
{
  _BYTE *v4;

  if ((a2 & 1) != 0)
  {
    v4 = this;
    this = (char *)operator new(0x78uLL);
    *((_QWORD *)this + 1) = 0;
    *((_QWORD *)this + 2) = 0;
    *((_QWORD *)this + 3) = &off_1E2D7F198;
    *((_OWORD *)this + 2) = 0u;
    *(_QWORD *)this = &off_1E2DBAF68;
    *((_OWORD *)this + 3) = 0u;
    *((_OWORD *)this + 4) = 0u;
    *((_OWORD *)this + 5) = 0u;
    *((_OWORD *)this + 6) = 0u;
    *((_QWORD *)this + 13) = 0;
    *((_QWORD *)this + 14) = 0;
    *((_DWORD *)this + 12) = 1065353216;
    *((_QWORD *)this + 7) = 0x1FFFFFFFFLL;
    *((_QWORD *)this + 12) = 0;
    *((_QWORD *)this + 8) = 0;
    *((_QWORD *)this + 9) = 0;
    this[88] = 0;
    *((_QWORD *)this + 10) = 0;
    if (v4[320])
      this[32] = 1;
    *a3 = this + 24;
    a3[1] = this;
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
  return this;
}

const char *Espresso::generic_bias_grad_kernel::kernel_type_str(Espresso::generic_bias_grad_kernel *this)
{
  return "bias_grad";
}

uint64_t Espresso::generic_bias_grad_kernel::outputs_gradient(Espresso::generic_bias_grad_kernel *this)
{
  return 1;
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::bias_params,Espresso::abstract_kernel_with_weights_grad_>::get_params(uint64_t a1)
{
  return a1 + 304;
}

void Espresso::MetalLowmemEngine::pool_grad_kernel_metal::~pool_grad_kernel_metal(id *this)
{

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::MetalLowmemEngine::pool_grad_kernel_metal::__launch(uint64_t a1, uint64_t a2, const void ***a3, int32x2_t ***a4)
{
  int32x2_t **v7;
  int32x2_t *v8;
  __int32 v9;
  __int32 v10;
  __int32 v11;
  int v12;
  id *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t v17;
  const void **v18;
  id *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  id v23;
  unint64_t v24;
  int *v25;
  id *v26;
  id v27;
  int32x2_t v28;
  int v29;
  int32x2_t v30;
  int32x2_t v31;
  int8x8_t v32;
  int8x8_t v33;
  int v34;
  uint64_t v35;
  void *v36;
  int v37;
  __CFString *v38;
  const char *v39;
  uint64_t v40;
  void *v41;
  int32x2_t **v42;
  id *v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  id v47;
  unint64_t v48;
  int v49;
  int v50;
  BOOL v51;
  int v52;
  int v53;
  int64x2_t v54;
  int64x2_t *v55;
  uint64_t *v56;
  int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  int v63;
  int v64;
  __int32 v65;
  int v66;
  uint64_t v67;
  std::runtime_error *exception;
  std::runtime_error *v69;
  int32x2_t ***v70;
  id v71;
  int32x2_t v72;
  uint64_t v73;
  _QWORD v74[3];
  uint64_t v75;
  _QWORD v76[3];
  uint64_t v77;
  _QWORD v78[3];
  uint64_t v79;
  int64x2_t v80;
  uint64_t v81;

  v70 = a4;
  v7 = *a4;
  v8 = **a4;
  v9 = v8[1].i32[0];
  v10 = v8[1].i32[1];
  v11 = v8[2].i32[1];
  if (*(_WORD *)(a1 + 348))
    v12 = *(unsigned __int16 *)(a1 + 348);
  else
    v12 = v8[2].i32[0];
  if (v13 && (v14 = (std::__shared_weak_count *)v7[1]) != 0)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
    v71 = v13[21];
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  else
  {
    v71 = v13[21];
  }
  v18 = *a3;
  v20 = (std::__shared_weak_count *)v18[1];
  if (v20)
  {
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
    v23 = v19[21];
    do
      v24 = __ldaxr(v21);
    while (__stlxr(v24 - 1, v21));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  else
  {
    v23 = v19[21];
  }
  v25 = (int *)(a1 + 280);
  v26 = *(id **)(a1 + 8);
  v27 = *(id *)(*(_QWORD *)a2 + 152);
  v28 = *(int32x2_t *)((char *)**a3 + 8);
  v72 = v28;
  if (*(_DWORD *)(a1 + 364) != v11
    || *(_DWORD *)(a1 + 376) != v9
    || *(_DWORD *)(a1 + 380) != v10
    || *(_DWORD *)(a1 + 384) != v12
    || !*(_QWORD *)(a1 + 392)
    || *(_QWORD *)(a1 + 356) != *(_QWORD *)&v28)
  {
    *(_DWORD *)(a1 + 376) = v9;
    *(_DWORD *)(a1 + 380) = v10;
    *(_DWORD *)(a1 + 384) = v12;
    v29 = *(__int16 *)(a1 + 316);
    if (v29 != 4)
    {
      if (v29 == 2)
      {
        v33 = 0;
      }
      else
      {
        if (v29 == 1)
          goto LABEL_30;
        v28.i16[0] = *(_WORD *)(a1 + 324);
        v28.i16[2] = *(_WORD *)(a1 + 328);
        v33 = (int8x8_t)vshr_n_s32(vshl_n_s32(v28, 0x10uLL), 0x10uLL);
      }
      v30 = v72;
      goto LABEL_34;
    }
LABEL_30:
    v30 = v28;
    v31 = vmax_s32(vmla_s32(vsub_s32(*(int32x2_t *)(a1 + 284), v28), vadd_s32((**v70)[1], (int32x2_t)-1), *(int32x2_t *)(a1 + 296)), 0);
    v32 = (int8x8_t)vshr_n_u32((uint32x2_t)v31, 1uLL);
    v33 = vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(*(unsigned __int16 *)(a1 + 316) == 1), 0x1FuLL)), v32, (int8x8_t)vsub_s32(v31, (int32x2_t)v32));
LABEL_34:
    *(int8x8_t *)(a1 + 368) = v33;
    *(int32x2_t *)(a1 + 356) = v30;
    v34 = v12 - 1;
    if (v12 < 1)
      v34 = v12 + 2;
    *(_DWORD *)(a1 + 388) = (v34 >> 2) + 1;
    *(_DWORD *)(a1 + 364) = v11;
    v35 = objc_msgSend(v26[18], "newBufferWithBytes:length:options:", a1 + 280, 112, 0, v70);
    v36 = *(void **)(a1 + 392);
    *(_QWORD *)(a1 + 392) = v35;

  }
  v37 = *v25;
  if (!*v25)
  {
    if (objc_msgSend(v23, "pixelFormat") != 115)
    {
      if (objc_msgSend(v23, "pixelFormat") == 125)
      {
        v39 = "grad_avg_pool_f32_pack";
LABEL_47:
        objc_msgSend(v26[20], "kernelForFunction:cacheString:withConstants:", v39, 0, 0, v70);
        v40 = objc_claimAutoreleasedReturnValue();
        goto LABEL_51;
      }
      if (objc_msgSend(v23, "pixelFormat") != 72)
        goto LABEL_94;
    }
    v39 = "grad_avg_pool_f16_pack";
    goto LABEL_47;
  }
  if (v37 != 1)
  {
    if (v37 == 2)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "not implemented");
      goto LABEL_95;
    }
    goto LABEL_94;
  }
  if (objc_msgSend(v23, "pixelFormat") == 115)
  {
LABEL_49:
    v38 = CFSTR("grad_max_pool_f16_pack");
    goto LABEL_50;
  }
  if (objc_msgSend(v23, "pixelFormat") != 125)
  {
    if (objc_msgSend(v23, "pixelFormat") == 72)
      goto LABEL_49;
LABEL_94:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Kernel not found");
LABEL_95:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v38 = CFSTR("grad_max_pool_f32_pack");
LABEL_50:
  Espresso::context_metal::kernel_for_function((Espresso::context_metal *)v26, &v38->isa);
  v40 = objc_claimAutoreleasedReturnValue();
LABEL_51:
  v41 = (void *)v40;
  if (!v40)
    goto LABEL_94;
  objc_msgSend(v27, "setComputePipelineState:", v40);
  objc_msgSend(v27, "setTexture:atIndex:", v23, 0);
  objc_msgSend(v27, "setTexture:atIndex:", v71, 1);
  if (*v25 == 1)
  {
    v42 = *v70;
    v44 = (std::__shared_weak_count *)v42[3];
    if (v44)
    {
      v45 = (unint64_t *)&v44->__shared_owners_;
      do
        v46 = __ldxr(v45);
      while (__stxr(v46 + 1, v45));
      v47 = v43[21];
      do
        v48 = __ldaxr(v45);
      while (__stlxr(v48 - 1, v45));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
    }
    else
    {
      v47 = v43[21];
    }
    objc_msgSend(v27, "setTexture:atIndex:", v47, 2, v70);
    if (objc_msgSend(v47, "pixelFormat") != 124)
    {
      v69 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v69, "Invalid texture");
      __cxa_throw(v69, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }

  }
  objc_msgSend(v27, "setBuffer:offset:atIndex:", *(_QWORD *)(a1 + 392), 0, 0, v70);
  if (v72.i32[0] > 3 || v72.i32[1] > 3)
  {
    v57 = v72.i32[1] - 1;
    if (v72.i32[0] > 11 || v72.i32[1] > 11)
    {
      v65 = v72.i32[0] - 1;
      v66 = v12 - 1;
      if (v12 < 1)
        v66 = v12 + 2;
      v67 = v11 + v11 * (v66 >> 2);
      if (v72.i32[0] > 31 || v72.i32[1] > 31)
      {
        if (v57 < 0)
          v57 = v72.i32[1] + 14;
        v74[0] = v65 / 16 + 1;
        v74[1] = (v57 >> 4) + 1;
        v74[2] = v67;
        v73 = 16;
        v54 = (int64x2_t)xmmword_191A932B0;
        v55 = (int64x2_t *)v74;
        v56 = &v73;
      }
      else
      {
        if (v57 < 0)
          v57 = v72.i32[1] + 6;
        v76[0] = v65 / 8 + 1;
        v76[1] = (v57 >> 3) + 1;
        v76[2] = v67;
        v75 = 8;
        v54 = (int64x2_t)xmmword_191A932C0;
        v55 = (int64x2_t *)v76;
        v56 = &v75;
      }
    }
    else
    {
      v58 = v72.i32[0] - 1;
      if (v72.i32[0] < 1)
        v58 = v72.i32[0] + 2;
      v59 = (v58 >> 2) + 1;
      if (v57 < 0)
        v57 = v72.i32[1] + 2;
      v60 = (v57 >> 2) + 1;
      v61 = v12 - 1;
      if (v12 < 1)
        v61 = v12 + 2;
      v62 = v11 + v11 * (v61 >> 2);
      v63 = v62 - 1;
      v51 = v62 < 1;
      v64 = v62 + 2;
      if (!v51)
        v64 = v63;
      v78[0] = v59;
      v78[1] = v60;
      v78[2] = (v64 >> 2) + 1;
      v77 = 4;
      v54 = vdupq_n_s64(4uLL);
      v55 = (int64x2_t *)v78;
      v56 = &v77;
    }
  }
  else
  {
    v49 = v12 - 1;
    if (v12 < 1)
      v49 = v12 + 2;
    v50 = v11 + v11 * (v49 >> 2);
    v52 = v50 - 1;
    v51 = v50 < 1;
    v53 = v50 + 14;
    if (!v51)
      v53 = v52;
    v80 = vdupq_n_s64(1uLL);
    v81 = (v53 >> 4) + 1;
    v79 = v72.i32[0];
    v54 = vdupq_n_s64(0x10uLL);
    v54.i64[0] = v72.i32[1];
    v55 = &v80;
    v56 = &v79;
  }
  *(int64x2_t *)(v56 + 1) = v54;
  objc_msgSend(v27, "dispatchThreadgroups:threadsPerThreadgroup:", v55);

}

void sub_19143F340(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  __cxa_free_exception(v14);

  _Unwind_Resume(a1);
}

const char *Espresso::generic_pool_grad_kernel::kernel_type_str(Espresso::generic_pool_grad_kernel *this)
{
  return "pool_grad";
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::pool_params,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

void Espresso::MetalLowmemEngine::batchnorm_grad_kernel_metal::~batchnorm_grad_kernel_metal(id *this)
{
  void **v2;

  *this = off_1E2D9DD68;
  v2 = this + 35;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v2);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{
  void **v2;

  *this = off_1E2D9DD68;
  v2 = this + 35;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v2);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::MetalLowmemEngine::batchnorm_grad_kernel_metal::__launch()
{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "not implemented");
  __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
}

void sub_19143F4A4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

const char *Espresso::generic_batchnorm_grad_kernel::kernel_type_str(Espresso::generic_batchnorm_grad_kernel *this)
{
  return "batchnorm_grad";
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::batchnorm_params,Espresso::abstract_kernel_with_weights_grad_>::get_params(uint64_t a1)
{
  return a1 + 304;
}

void Espresso::MetalLowmemEngine::nonlinearity_kernel_metal::~nonlinearity_kernel_metal(id *this)
{

  Espresso::generic_activation_kernel::~generic_activation_kernel((Espresso::generic_activation_kernel *)this);
}

{

  Espresso::generic_activation_kernel::~generic_activation_kernel((Espresso::generic_activation_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::MetalLowmemEngine::nonlinearity_kernel_metal::__launch(uint64_t a1, uint64_t a2, const void ***a3, const void ***a4)
{
  const void **v8;
  id *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  const void **v14;
  id *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  id v19;
  unint64_t v20;
  id *v21;
  id v22;
  _DWORD *v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  _DWORD *v31;
  uint64_t v32;
  void *v33;
  const __CFString *v34;
  __CFString *v35;
  const __CFString *v36;
  NSString *v37;
  void *v38;
  int v39;
  BOOL v40;
  uint64_t v41;
  int v42;
  int v43;
  std::runtime_error *exception;
  id v45;
  uint64_t v46;
  __int128 v47;
  _QWORD v48[3];

  v8 = *a4;
  v10 = (std::__shared_weak_count *)v8[1];
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    v45 = v9[21];
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  else
  {
    v45 = v9[21];
  }
  v14 = *a3;
  v16 = (std::__shared_weak_count *)v14[1];
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
    v19 = v15[21];
    do
      v20 = __ldaxr(v17);
    while (__stlxr(v20 - 1, v17));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  else
  {
    v19 = v15[21];
  }
  v21 = *(id **)(a1 + 8);
  v22 = *(id *)(*(_QWORD *)a2 + 152);
  v23 = **a3;
  v24 = v23[4];
  v25 = v23[5];
  v26 = v24 - 1;
  v40 = v24 < 1;
  v27 = v24 + 2;
  if (!v40)
    v27 = v26;
  v28 = (v27 >> 2) + 1;
  v29 = v23[2];
  v30 = v23[3];
  v31 = (_DWORD *)(a1 + 304);
  if (*(_DWORD *)(a1 + 336) != v25
    || *(_DWORD *)(a1 + 328) != v30
    || v29 != *(_DWORD *)(a1 + 324)
    || !*(_QWORD *)(a1 + 392))
  {
    *(_DWORD *)(a1 + 328) = v30;
    *(_DWORD *)(a1 + 324) = v29;
    *(_DWORD *)(a1 + 332) = v28;
    *(_DWORD *)(a1 + 336) = v25;
    v32 = objc_msgSend(v21[18], "newBufferWithBytes:length:options:", a1 + 304, 36, 0);
    v33 = *(void **)(a1 + 392);
    *(_QWORD *)(a1 + 392) = v32;

  }
  v34 = &stru_1E2DD80E0;
  if (*v31 == 1)
    v34 = CFSTR("tanh_");
  if (*v31)
    v35 = (__CFString *)v34;
  else
    v35 = CFSTR("relu_");
  if ((*(unsigned int (**)(const void *))(*(_QWORD *)**a4 + 32))(**a4) == 1)
    v36 = CFSTR("f16");
  else
    v36 = CFSTR("f32");
  -[__CFString stringByAppendingString:](v35, "stringByAppendingString:", v36);
  v37 = (NSString *)objc_claimAutoreleasedReturnValue();
  Espresso::context_metal::kernel_for_function((Espresso::context_metal *)v21, v37);
  v38 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v38)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Kernel not found");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  objc_msgSend(v22, "setComputePipelineState:", v38);
  objc_msgSend(v22, "setTexture:atIndex:", v19, 0);
  objc_msgSend(v22, "setTexture:atIndex:", v45, 1);
  objc_msgSend(v22, "setBuffer:offset:atIndex:", *(_QWORD *)(a1 + 392), 0, 0);
  v39 = v25 * v30;
  v40 = v28 * v29 < 16 || v39 < 16;
  if (v40)
    v41 = 4;
  else
    v41 = 8;
  v42 = v39 - 1;
  v40 = v39 < 1;
  v43 = v39 + 6;
  if (!v40)
    v43 = v42;
  v48[0] = (v28 * v29 - 1) / (int)v41 + 1;
  v48[1] = (v43 >> 3) + 1;
  v48[2] = 1;
  v46 = v41;
  v47 = xmmword_191A932C0;
  objc_msgSend(v22, "dispatchThreadgroups:threadsPerThreadgroup:", v48, &v46);

}

void sub_19143F8A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  __cxa_free_exception(v14);

  _Unwind_Resume(a1);
}

void Espresso::MetalLowmemEngine::nonlinearity_grad_metal::~nonlinearity_grad_metal(id *this)
{

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::MetalLowmemEngine::nonlinearity_grad_metal::__launch(uint64_t a1, uint64_t a2, const void ***a3, const void ***a4)
{
  const void **v8;
  id *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  const void **v14;
  id *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  const void **v20;
  id *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  id v25;
  unint64_t v26;
  id *v27;
  id v28;
  _DWORD *v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  _DWORD *v37;
  uint64_t v38;
  void *v39;
  const __CFString *v40;
  __CFString *v41;
  const __CFString *v42;
  NSString *v43;
  void *v44;
  int v45;
  BOOL v46;
  uint64_t v47;
  int v48;
  int v49;
  std::runtime_error *exception;
  id v51;
  void *v52;
  id v53;
  uint64_t v54;
  __int128 v55;
  _QWORD v56[3];

  v8 = *a4;
  v10 = (std::__shared_weak_count *)v8[1];
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    v53 = v9[21];
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  else
  {
    v53 = v9[21];
  }
  v14 = *a4;
  v16 = (std::__shared_weak_count *)v14[3];
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
    v51 = v15[21];
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  else
  {
    v51 = v15[21];
  }
  v20 = *a3;
  v22 = (std::__shared_weak_count *)v20[1];
  if (v22)
  {
    v23 = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
    v25 = v21[21];
    do
      v26 = __ldaxr(v23);
    while (__stlxr(v26 - 1, v23));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  else
  {
    v25 = v21[21];
  }
  v27 = *(id **)(a1 + 8);
  v28 = *(id *)(*(_QWORD *)a2 + 152);
  v29 = **a3;
  v30 = v29[4];
  v31 = v29[5];
  v32 = v30 - 1;
  v46 = v30 < 1;
  v33 = v30 + 2;
  if (!v46)
    v33 = v32;
  v34 = (v33 >> 2) + 1;
  v36 = v29[2];
  v35 = v29[3];
  v37 = (_DWORD *)(a1 + 280);
  if (*(_DWORD *)(a1 + 312) != v31
    || *(_DWORD *)(a1 + 304) != v35
    || v36 != *(_DWORD *)(a1 + 300)
    || !*(_QWORD *)(a1 + 320))
  {
    *(_DWORD *)(a1 + 304) = v35;
    *(_DWORD *)(a1 + 300) = v36;
    *(_DWORD *)(a1 + 308) = v34;
    *(_DWORD *)(a1 + 312) = v31;
    v38 = objc_msgSend(v27[18], "newBufferWithBytes:length:options:", a1 + 280, 36, 0, v51);
    v39 = *(void **)(a1 + 320);
    *(_QWORD *)(a1 + 320) = v38;

  }
  v40 = &stru_1E2DD80E0;
  if (*v37 == 1)
    v40 = CFSTR("tanh_grad_");
  if (*v37)
    v41 = (__CFString *)v40;
  else
    v41 = CFSTR("relu_grad_");
  if ((*(unsigned int (**)(const void *))(*(_QWORD *)**a4 + 32))(**a4) == 1)
    v42 = CFSTR("f16");
  else
    v42 = CFSTR("f32");
  -[__CFString stringByAppendingString:](v41, "stringByAppendingString:", v42, v51);
  v43 = (NSString *)objc_claimAutoreleasedReturnValue();
  Espresso::context_metal::kernel_for_function((Espresso::context_metal *)v27, v43);
  v44 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v44)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Kernel not found");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  objc_msgSend(v28, "setComputePipelineState:", v44);
  objc_msgSend(v28, "setTexture:atIndex:", v25, 0);
  objc_msgSend(v28, "setTexture:atIndex:", v53, 1);
  objc_msgSend(v28, "setTexture:atIndex:", v52, 2);
  objc_msgSend(v28, "setBuffer:offset:atIndex:", *(_QWORD *)(a1 + 320), 0, 0);
  v45 = v31 * v35;
  v46 = v34 * v36 < 16 || v45 < 16;
  if (v46)
    v47 = 4;
  else
    v47 = 8;
  v48 = v45 - 1;
  v46 = v45 < 1;
  v49 = v45 + 6;
  if (!v46)
    v49 = v48;
  v56[0] = (v34 * v36 - 1) / (int)v47 + 1;
  v56[1] = (v49 >> 3) + 1;
  v56[2] = 1;
  v54 = v47;
  v55 = xmmword_191A932C0;
  objc_msgSend(v28, "dispatchThreadgroups:threadsPerThreadgroup:", v56, &v54);

}

void sub_19143FD58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  __cxa_free_exception(v14);

  _Unwind_Resume(a1);
}

const char *Espresso::generic_activation_grad_kernel::kernel_type_str(Espresso::generic_activation_grad_kernel *this)
{
  return "activation_grad";
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::activation_params,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

void Espresso::MetalLowmemEngine::concat_grad_kernel_metal::~concat_grad_kernel_metal(id *this)
{

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::MetalLowmemEngine::concat_grad_kernel_metal::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  id *v7;
  id v8;
  uint64_t v9;
  _DWORD *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  const __CFString *v14;
  NSString *v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  int32x2_t *v20;
  void *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  char *v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int32x2_t v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  _DWORD *v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  BOOL v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  int v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::runtime_error *exception;
  void *v67;
  NSString *v68;
  uint64_t v69;
  __int128 v70;
  _QWORD v71[3];
  void *__p;
  _BYTE *v73;
  _DWORD *v74;
  std::__shared_weak_count *v75;

  v7 = *(id **)(a1 + 8);
  v8 = *(id *)(*(_QWORD *)a2 + 152);
  v9 = *a4;
  v11 = *(std::__shared_weak_count **)(v9 + 8);
  v74 = v10;
  v75 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  if ((*(unsigned int (**)(_DWORD *))(*(_QWORD *)v10 + 32))(v10) == 1)
    v14 = CFSTR("f16");
  else
    v14 = CFSTR("f32");
  objc_msgSend(CFSTR("copy_"), "stringByAppendingString:", v14);
  v15 = (NSString *)objc_claimAutoreleasedReturnValue();
  v68 = v15;
  if (!*(_QWORD *)(a1 + 344))
  {
    std::vector<Espresso::axpby_params>::vector(&__p, (a3[1] - *a3) >> 4);
    v16 = *a3;
    if (a3[1] != *a3)
    {
      v17 = 0;
      v18 = 0;
      do
      {
        v19 = v16 + 16 * v17;
        v20 = *(int32x2_t **)v19;
        v22 = *(std::__shared_weak_count **)(v19 + 8);
        if (v22)
        {
          v23 = (unint64_t *)&v22->__shared_owners_;
          do
            v24 = __ldxr(v23);
          while (__stxr(v24 + 1, v23));
          v20 = *(int32x2_t **)(*a3 + 16 * v17);
        }
        v25 = (char *)__p + 56 * v17;
        v26 = v20[2].i32[0];
        v27 = v26 - 1;
        v56 = v26 < 1;
        v28 = v26 + 2;
        if (!v56)
          v28 = v27;
        v29 = (v28 >> 2) + 1;
        *(_QWORD *)v25 = 1065353216;
        v30.i32[0] = v29;
        v30.i32[1] = v20[2].i32[1];
        *(int32x2_t *)(v25 + 12) = vmul_s32(v30, v20[1]);
        *((_QWORD *)v25 + 3) = 0;
        *((_DWORD *)v25 + 5) = v18;
        v31 = v74[4];
        v32 = v31 - 1;
        v56 = v31 < 1;
        v33 = v31 + 2;
        if (!v56)
          v33 = v32;
        *((_QWORD *)v25 + 4) = ((v33 >> 2) + 1);
        *((_DWORD *)v25 + 10) = v29;
        *(_QWORD *)(v25 + 44) = *((_QWORD *)v21 + 1);
        v34 = *((_DWORD *)v21 + 4);
        v35 = v34 - 1;
        v56 = v34 < 1;
        v36 = v34 + 2;
        if (v56)
          v37 = v36;
        else
          v37 = v35;
        if (v22)
        {
          v38 = (unint64_t *)&v22->__shared_owners_;
          do
            v39 = __ldaxr(v38);
          while (__stlxr(v39 - 1, v38));
          if (!v39)
          {
            ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
            std::__shared_weak_count::__release_weak(v22);
          }
        }
        v18 += (v37 >> 2) + 1;
        ++v17;
        v16 = *a3;
      }
      while (v17 < (a3[1] - *a3) >> 4);
    }
    v40 = objc_msgSend(v7[18], "newBufferWithBytes:length:options:", __p, v73 - (_BYTE *)__p, 0);
    v41 = *(void **)(a1 + 344);
    *(_QWORD *)(a1 + 344) = v40;

    v15 = v68;
    if (__p)
    {
      v73 = __p;
      operator delete(__p);
    }
  }
  Espresso::context_metal::kernel_for_function((Espresso::context_metal *)v7, v15);
  v42 = objc_claimAutoreleasedReturnValue();
  v67 = (void *)v42;
  if (!v42)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Kernel not found");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  objc_msgSend(v8, "setComputePipelineState:", v42);
  v43 = *a3;
  if (a3[1] != *a3)
  {
    v44 = 0;
    do
    {
      v45 = v43 + 16 * v44;
      __p = v46;
      v47 = *(std::__shared_weak_count **)(v45 + 8);
      v73 = v47;
      if (v47)
      {
        v48 = (unint64_t *)&v47->__shared_owners_;
        do
          v49 = __ldxr(v48);
        while (__stxr(v49 + 1, v48));
      }
      objc_msgSend(v8, "setTexture:atIndex:", v46[21], 0, v67);
      objc_msgSend(v8, "setTexture:atIndex:", *((_QWORD *)v74 + 21), 1);
      objc_msgSend(v8, "setBuffer:offset:atIndex:", *(_QWORD *)(a1 + 344), 56 * v44, 0);
      v50 = *(_DWORD **)(*a3 + 16 * v44);
      v51 = v50[4];
      v52 = v51 - 1;
      v56 = v51 < 1;
      v53 = v51 + 2;
      if (!v56)
        v53 = v52;
      v54 = v50[2] + v50[2] * (v53 >> 2);
      v55 = v50[5] * v50[3];
      v56 = v54 < 16 || v55 < 16;
      if (v56)
        v57 = 4;
      else
        v57 = 8;
      v58 = (v54 - 1) / (int)v57 + 1;
      v59 = v55 - 1;
      v56 = v55 < 1;
      v60 = v55 + 6;
      if (!v56)
        v60 = v59;
      v71[0] = v58;
      v71[1] = (v60 >> 3) + 1;
      v71[2] = 1;
      v69 = v57;
      v70 = xmmword_191A932C0;
      objc_msgSend(v8, "dispatchThreadgroups:threadsPerThreadgroup:", v71, &v69);
      if (v47)
      {
        v61 = (unint64_t *)&v47->__shared_owners_;
        do
          v62 = __ldaxr(v61);
        while (__stlxr(v62 - 1, v61));
        if (!v62)
        {
          ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
          std::__shared_weak_count::__release_weak(v47);
        }
      }
      ++v44;
      v43 = *a3;
    }
    while (v44 < (a3[1] - *a3) >> 4);
  }

  v63 = v75;
  if (v75)
  {
    v64 = (unint64_t *)&v75->__shared_owners_;
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }

}

void sub_1914402C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,char a23)
{
  void *v23;

  if (__p)
    operator delete(__p);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  _Unwind_Resume(a1);
}

const char *Espresso::generic_concat_grad_kernel::kernel_type_str(Espresso::generic_concat_grad_kernel *this)
{
  return "concat_grad";
}

_QWORD *std::vector<Espresso::axpby_params>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0x492492492492493)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v4 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::axpby_params>>(a2);
    *a1 = v4;
    a1[1] = v4;
    a1[2] = &v4[56 * v5];
    v6 = 56 * a2;
    v7 = &v4[56 * a2];
    __asm { FMOV            V0.2S, #1.0 }
    do
    {
      *((_DWORD *)v4 + 13) = 0;
      *(_QWORD *)v4 = _D0;
      *(_OWORD *)(v4 + 8) = 0uLL;
      *(_OWORD *)(v4 + 24) = 0uLL;
      *(_OWORD *)(v4 + 36) = 0uLL;
      v4 += 56;
      v6 -= 56;
    }
    while (v6);
    a1[1] = v7;
  }
  return a1;
}

void sub_1914403F8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::axpby_params>>(unint64_t a1)
{
  if (a1 >= 0x492492492492493)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(56 * a1);
}

void Espresso::MetalLowmemEngine::elementwise_grad_kernel_metal::~elementwise_grad_kernel_metal(id *this)
{

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::MetalLowmemEngine::elementwise_grad_kernel_metal::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  id *v7;
  id v8;
  uint64_t v9;
  _DWORD *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  const __CFString *v14;
  NSString *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int32x2_t *v19;
  _QWORD *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  char *v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int32x2_t v29;
  int v30;
  int v31;
  int v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  _DWORD *v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  BOOL v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  int v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::runtime_error *exception;
  std::runtime_error *v62;
  void *v63;
  NSString *v64;
  uint64_t v65;
  __int128 v66;
  _QWORD v67[3];
  void *__p;
  _BYTE *v69;
  _DWORD *v70;
  std::__shared_weak_count *v71;

  if (*(_DWORD *)(a1 + 280))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "not supported");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v7 = *(id **)(a1 + 8);
  v8 = *(id *)(*(_QWORD *)a2 + 152);
  v9 = *a4;
  v11 = *(std::__shared_weak_count **)(v9 + 8);
  v70 = v10;
  v71 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  if ((*(unsigned int (**)(_DWORD *))(*(_QWORD *)v10 + 32))(v10) == 1)
    v14 = CFSTR("f16");
  else
    v14 = CFSTR("f32");
  objc_msgSend(CFSTR("copy_"), "stringByAppendingString:", v14);
  v15 = (NSString *)objc_claimAutoreleasedReturnValue();
  v64 = v15;
  if (!*(_QWORD *)(a1 + 336))
  {
    std::vector<Espresso::axpby_params>::vector(&__p, (a3[1] - *a3) >> 4);
    v16 = *a3;
    if (a3[1] != *a3)
    {
      v17 = 0;
      do
      {
        v18 = v16 + 16 * v17;
        v19 = *(int32x2_t **)v18;
        v21 = *(std::__shared_weak_count **)(v18 + 8);
        if (v21)
        {
          v22 = (unint64_t *)&v21->__shared_owners_;
          do
            v23 = __ldxr(v22);
          while (__stxr(v23 + 1, v22));
          v19 = *(int32x2_t **)(*a3 + 16 * v17);
        }
        v24 = (char *)__p + 56 * v17;
        v25 = v19[2].i32[0];
        v26 = v25 - 1;
        v51 = v25 < 1;
        v27 = v25 + 2;
        if (!v51)
          v27 = v26;
        v28 = (v27 >> 2) + 1;
        *(_QWORD *)v24 = 1065353216;
        v29.i32[0] = v28;
        v29.i32[1] = v19[2].i32[1];
        *(int32x2_t *)(v24 + 12) = vmul_s32(v29, v19[1]);
        *((_DWORD *)v24 + 5) = 0;
        *((_QWORD *)v24 + 3) = 0;
        v30 = v70[4];
        v31 = v30 - 1;
        v51 = v30 < 1;
        v32 = v30 + 2;
        if (!v51)
          v32 = v31;
        *((_QWORD *)v24 + 4) = ((v32 >> 2) + 1);
        *((_DWORD *)v24 + 10) = v28;
        *(_QWORD *)(v24 + 44) = v20[1];
        if (v21)
        {
          v33 = (unint64_t *)&v21->__shared_owners_;
          do
            v34 = __ldaxr(v33);
          while (__stlxr(v34 - 1, v33));
          if (!v34)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
        ++v17;
        v16 = *a3;
      }
      while (v17 < (a3[1] - *a3) >> 4);
    }
    v35 = objc_msgSend(v7[18], "newBufferWithBytes:length:options:", __p, v69 - (_BYTE *)__p, 0);
    v36 = *(void **)(a1 + 336);
    *(_QWORD *)(a1 + 336) = v35;

    v15 = v64;
    if (__p)
    {
      v69 = __p;
      operator delete(__p);
    }
  }
  Espresso::context_metal::kernel_for_function((Espresso::context_metal *)v7, v15);
  v37 = objc_claimAutoreleasedReturnValue();
  v63 = (void *)v37;
  if (!v37)
  {
    v62 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v62, "Kernel not found");
    __cxa_throw(v62, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  objc_msgSend(v8, "setComputePipelineState:", v37);
  v38 = *a3;
  if (a3[1] != *a3)
  {
    v39 = 0;
    do
    {
      v40 = v38 + 16 * v39;
      __p = v41;
      v42 = *(std::__shared_weak_count **)(v40 + 8);
      v69 = v42;
      if (v42)
      {
        v43 = (unint64_t *)&v42->__shared_owners_;
        do
          v44 = __ldxr(v43);
        while (__stxr(v44 + 1, v43));
      }
      objc_msgSend(v8, "setTexture:atIndex:", v41[21], 0, v63);
      objc_msgSend(v8, "setTexture:atIndex:", *((_QWORD *)v70 + 21), 1);
      objc_msgSend(v8, "setBuffer:offset:atIndex:", *(_QWORD *)(a1 + 336), 56 * v39, 0);
      v45 = *(_DWORD **)(*a3 + 16 * v39);
      v46 = v45[4];
      v47 = v46 - 1;
      v51 = v46 < 1;
      v48 = v46 + 2;
      if (!v51)
        v48 = v47;
      v49 = v45[2] + v45[2] * (v48 >> 2);
      v50 = v45[5] * v45[3];
      v51 = v49 < 16 || v50 < 16;
      if (v51)
        v52 = 4;
      else
        v52 = 8;
      v53 = (v49 - 1) / (int)v52 + 1;
      v54 = v50 - 1;
      v51 = v50 < 1;
      v55 = v50 + 6;
      if (!v51)
        v55 = v54;
      v67[0] = v53;
      v67[1] = (v55 >> 3) + 1;
      v67[2] = 1;
      v65 = v52;
      v66 = xmmword_191A932C0;
      objc_msgSend(v8, "dispatchThreadgroups:threadsPerThreadgroup:", v67, &v65);
      if (v42)
      {
        v56 = (unint64_t *)&v42->__shared_owners_;
        do
          v57 = __ldaxr(v56);
        while (__stlxr(v57 - 1, v56));
        if (!v57)
        {
          ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
          std::__shared_weak_count::__release_weak(v42);
        }
      }
      ++v39;
      v38 = *a3;
    }
    while (v39 < (a3[1] - *a3) >> 4);
  }

  v58 = v71;
  if (v71)
  {
    v59 = (unint64_t *)&v71->__shared_owners_;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }

}

void sub_191440978(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,char a23)
{
  void *v23;

  if (__p)
    operator delete(__p);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  _Unwind_Resume(a1);
}

const char *Espresso::generic_elementwise_grad_kernel::kernel_type_str(Espresso::generic_elementwise_grad_kernel *this)
{
  return "elementwise_grad";
}

void Espresso::MetalLowmemEngine::axpby_kernel_metal::~axpby_kernel_metal(id *this)
{

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::MetalLowmemEngine::axpby_kernel_metal::__launch(uint64_t a1, uint64_t a2, const void ***a3, const void ***a4)
{
  id *v7;
  id v8;
  const void **v9;
  const void *v10;
  void *v11;
  void *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  const void *v16;
  void *v17;
  void *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  const void **v22;
  const void *v23;
  void *v24;
  void *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  unsigned int v31;
  unint64_t v32;
  int v33;
  const __CFString *v34;
  NSString *v35;
  _DWORD *v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  uint64_t v51;
  void *v52;
  void *v53;
  BOOL v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  unsigned int v58;
  unint64_t v59;
  uint64_t v60;
  int v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  Espresso::context_metal *v65;
  unint64_t v66;
  uint64_t v67;
  void *v68;
  void *v69;
  unsigned int v70;
  uint64_t v71;
  unsigned int v72;
  uint64_t v73;
  unsigned int v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char v79;
  BOOL v80;
  char v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  std::runtime_error *v90;
  int v91;
  std::string *v92;
  __int128 v93;
  std::string *v94;
  __int128 v95;
  int v96;
  std::string *v97;
  std::string::size_type size;
  std::string *v99;
  __int128 v100;
  std::runtime_error *v101;
  std::runtime_error *exception;
  id *v103;
  id v104;
  uint64_t v105;
  __int128 v106;
  _QWORD v107[3];
  std::string v108;
  std::string v109;
  std::string v110;
  std::string v111;
  std::string v112;
  uint64_t v113;
  int64x2_t v114;
  uint64_t v115;
  int64x2_t v116;
  void *v117;
  std::__shared_weak_count *v118;
  void *v119;
  std::__shared_weak_count *v120;
  void *v121;
  std::__shared_weak_count *v122;

  v7 = *(id **)(a1 + 8);
  v8 = *(id *)(*(_QWORD *)a2 + 152);
  v9 = *a4;
  v10 = **a4;
  if (v10
  {
    v12 = v11;
    v13 = (std::__shared_weak_count *)v9[1];
    v121 = v11;
    v122 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
      v9 = *a4;
    }
  }
  else
  {
    v12 = 0;
    v121 = 0;
    v122 = 0;
  }
  v16 = v9[2];
  if (v16
  {
    v18 = v17;
    v19 = (std::__shared_weak_count *)v9[3];
    v119 = v17;
    v120 = v19;
    if (v19)
    {
      v20 = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
  }
  else
  {
    v18 = 0;
    v119 = 0;
    v120 = 0;
  }
  v22 = *a3;
  v23 = **a3;
  if (v23
  {
    v25 = v24;
    v26 = (std::__shared_weak_count *)v22[1];
    v117 = v24;
    v118 = v26;
    if (v26)
    {
      v27 = (unint64_t *)&v26->__shared_owners_;
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
    }
  }
  else
  {
    v26 = 0;
    v25 = 0;
    v117 = 0;
    v118 = 0;
  }
  v29 = (void *)*((_QWORD *)v12 + 20);
  if (v29 && *((_QWORD *)v18 + 20) && *((_QWORD *)v25 + 20))
  {
    v104 = v8;
    v30 = objc_msgSend(v29, "length");
    v31 = (*(uint64_t (**)(void *))(*(_QWORD *)v12 + 32))(v12) - 1;
    if (v31 > 0xC)
      v32 = 16;
    else
      v32 = *(_QWORD *)&asc_191A9E130[8 * v31];
    v57 = objc_msgSend(*((id *)v18 + 20), "length");
    v103 = v7;
    v58 = (*(uint64_t (**)(void *))(*(_QWORD *)v18 + 32))(v18) - 1;
    if (v58 > 0xC)
      v59 = 16;
    else
      v59 = *(_QWORD *)&asc_191A9E130[8 * v58];
    v60 = objc_msgSend(*((id *)v25 + 20), "length");
    v61 = (*(uint64_t (**)(void *))(*(_QWORD *)v25 + 32))(v25);
    v62 = (v30 - 1) / v32 + 1;
    v63 = (v57 - 1) / v59 + 1;
    if ((v61 - 1) > 0xC)
      v64 = 16;
    else
      v64 = *(_QWORD *)&asc_191A9E130[8 * (v61 - 1)];
    v65 = (Espresso::context_metal *)v103;
    v8 = v104;
    v66 = (v60 - 1) / v64;
    if (v63 >= v66 + 1)
      v63 = v66 + 1;
    if (v62 >= v63)
      v62 = v63;
    if (!*(_QWORD *)(a1 + 336) || v62 != *(_DWORD *)(a1 + 332))
    {
      *(_DWORD *)(a1 + 332) = v62;
      v67 = objc_msgSend(v103[18], "newBufferWithBytes:length:options:", a1 + 280, 56, 0);
      v68 = *(void **)(a1 + 336);
      *(_QWORD *)(a1 + 336) = v67;

      v65 = (Espresso::context_metal *)v103;
      v8 = v104;
    }
    v69 = (void *)MEMORY[0x1E0CB3940];
    v70 = (*(uint64_t (**)(void *))(*(_QWORD *)v25 + 32))(v25) - 1;
    if (v70 > 0xC)
      v71 = 32;
    else
      v71 = dword_191A9E198[v70];
    v72 = (*(uint64_t (**)(void *))(*(_QWORD *)v12 + 32))(v12) - 1;
    if (v72 > 0xC)
      v73 = 32;
    else
      v73 = dword_191A9E198[v72];
    v74 = (*(uint64_t (**)(void *))(*(_QWORD *)v18 + 32))(v18) - 1;
    if (v74 > 0xC)
      v75 = 32;
    else
      v75 = dword_191A9E198[v74];
    objc_msgSend(v69, "stringWithFormat:", CFSTR("axpby_C%d_A%d_B%d"), v71, v73, v75);
    v35 = (NSString *)objc_claimAutoreleasedReturnValue();
    Espresso::context_metal::kernel_for_function(v65, v35);
    v53 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v53)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Kernel not found");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    objc_msgSend(v8, "setComputePipelineState:", v53);
    objc_msgSend(v8, "setBuffer:offset:atIndex:", *(_QWORD *)(a1 + 336), 0, 0);
    objc_msgSend(v8, "setBuffer:offset:atIndex:", *((_QWORD *)v25 + 20), 0, 1);
    objc_msgSend(v8, "setBuffer:offset:atIndex:", *((_QWORD *)v12 + 20), 0, 2);
    objc_msgSend(v8, "setBuffer:offset:atIndex:", *((_QWORD *)v18 + 20), 0, 3);
    v76 = *(unsigned int *)(a1 + 332);
    v77 = 128;
    if (v76 < 0x100)
      v77 = 64;
    if (v76 < 0x80)
      v77 = 32;
    v78 = v76 - 1;
    v79 = 6;
    if (v76 >= 0x100)
      v79 = 7;
    v80 = v76 >= 0x80;
    v81 = 5;
    if (v80)
      v81 = v79;
    v115 = (v78 >> v81) + 1;
    v116 = vdupq_n_s64(1uLL);
    v113 = v77;
    v114 = v116;
    objc_msgSend(v8, "dispatchThreadgroups:threadsPerThreadgroup:", &v115, &v113);
  }
  else
  {
    v33 = (*(uint64_t (**)(const void *))(*(_QWORD *)**a3 + 32))(**a3);
    if (v33 != (*(unsigned int (**)(const void *))(*(_QWORD *)**a4 + 32))(**a4))
    {
      v90 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      v91 = (*(uint64_t (**)(const void *))(*(_QWORD *)**a4 + 32))(**a4);
      std::to_string(&v109, v91);
      v92 = std::string::insert(&v109, 0, "Incompatible operands CP x=");
      v93 = *(_OWORD *)&v92->__r_.__value_.__l.__data_;
      v110.__r_.__value_.__r.__words[2] = v92->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v110.__r_.__value_.__l.__data_ = v93;
      v92->__r_.__value_.__l.__size_ = 0;
      v92->__r_.__value_.__r.__words[2] = 0;
      v92->__r_.__value_.__r.__words[0] = 0;
      v94 = std::string::append(&v110, "/y=");
      v95 = *(_OWORD *)&v94->__r_.__value_.__l.__data_;
      v111.__r_.__value_.__r.__words[2] = v94->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v111.__r_.__value_.__l.__data_ = v95;
      v94->__r_.__value_.__l.__size_ = 0;
      v94->__r_.__value_.__r.__words[2] = 0;
      v94->__r_.__value_.__r.__words[0] = 0;
      v96 = (*(uint64_t (**)(const void *))(*(_QWORD *)**a3 + 32))(**a3);
      std::to_string(&v108, v96);
      if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v97 = &v108;
      else
        v97 = (std::string *)v108.__r_.__value_.__r.__words[0];
      if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v108.__r_.__value_.__r.__words[2]);
      else
        size = v108.__r_.__value_.__l.__size_;
      v99 = std::string::append(&v111, (const std::string::value_type *)v97, size);
      v100 = *(_OWORD *)&v99->__r_.__value_.__l.__data_;
      v112.__r_.__value_.__r.__words[2] = v99->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v112.__r_.__value_.__l.__data_ = v100;
      v99->__r_.__value_.__l.__size_ = 0;
      v99->__r_.__value_.__r.__words[2] = 0;
      v99->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v90, &v112);
      __cxa_throw(v90, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    if ((*(unsigned int (**)(void *))(*(_QWORD *)v25 + 32))(v25) == 1)
      v34 = CFSTR("f16");
    else
      v34 = CFSTR("f32");
    objc_msgSend(CFSTR("axpby_"), "stringByAppendingString:", v34);
    v35 = (NSString *)objc_claimAutoreleasedReturnValue();
    v36 = **a3;
    v37 = v36[4];
    v38 = v37 - 1;
    v54 = v37 < 1;
    v39 = v37 + 2;
    if (!v54)
      v39 = v38;
    v40 = v36[2] + v36[2] * (v39 >> 2);
    v41 = v36[5] * v36[3];
    *(_DWORD *)(a1 + 296) = v41;
    *(_DWORD *)(a1 + 292) = v40;
    *(_DWORD *)(a1 + 300) = 0;
    *(_QWORD *)(a1 + 304) = 0;
    v42 = *((_DWORD *)v12 + 4);
    v43 = v42 - 1;
    v54 = v42 < 1;
    v44 = v42 + 2;
    if (!v54)
      v44 = v43;
    *(_DWORD *)(a1 + 312) = (v44 >> 2) + 1;
    v45 = *((_DWORD *)v18 + 4);
    v46 = v45 - 1;
    v54 = v45 < 1;
    v47 = v45 + 2;
    if (!v54)
      v47 = v46;
    *(_DWORD *)(a1 + 316) = (v47 >> 2) + 1;
    v48 = *((_DWORD *)v25 + 4);
    v49 = v48 - 1;
    v54 = v48 < 1;
    v50 = v48 + 2;
    if (!v54)
      v50 = v49;
    *(_DWORD *)(a1 + 320) = (v50 >> 2) + 1;
    *(_QWORD *)(a1 + 324) = *((_QWORD *)v25 + 1);
    v51 = objc_msgSend(v7[18], "newBufferWithBytes:length:options:");
    v52 = *(void **)(a1 + 336);
    *(_QWORD *)(a1 + 336) = v51;

    Espresso::context_metal::kernel_for_function((Espresso::context_metal *)v7, v35);
    v53 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v53)
    {
      v101 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v101, "Kernel not found");
      __cxa_throw(v101, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    objc_msgSend(v8, "setComputePipelineState:", v53);
    objc_msgSend(v8, "setTexture:atIndex:", *((_QWORD *)v25 + 21), 0);
    objc_msgSend(v8, "setTexture:atIndex:", *((_QWORD *)v12 + 21), 1);
    objc_msgSend(v8, "setTexture:atIndex:", *((_QWORD *)v18 + 21), 2);
    objc_msgSend(v8, "setBuffer:offset:atIndex:", *(_QWORD *)(a1 + 336), 0, 0);
    v54 = v40 < 16 || v41 < 16;
    if (v54)
      v55 = 4;
    else
      v55 = 8;
    v56 = v41 - 1;
    if (v41 < 1)
      v56 = v41 + 6;
    v107[0] = (v40 - 1) / (int)v55 + 1;
    v107[1] = (v56 >> 3) + 1;
    v107[2] = 1;
    v105 = v55;
    v106 = xmmword_191A932C0;
    objc_msgSend(v8, "dispatchThreadgroups:threadsPerThreadgroup:", v107, &v105);
  }

  if (v26)
  {
    v82 = (unint64_t *)&v26->__shared_owners_;
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v84 = v120;
  if (v120)
  {
    v85 = (unint64_t *)&v120->__shared_owners_;
    do
      v86 = __ldaxr(v85);
    while (__stlxr(v86 - 1, v85));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
    }
  }
  v87 = v122;
  if (v122)
  {
    v88 = (unint64_t *)&v122->__shared_owners_;
    do
      v89 = __ldaxr(v88);
    while (__stlxr(v89 - 1, v88));
    if (!v89)
    {
      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
      std::__shared_weak_count::__release_weak(v87);
    }
  }

}

void sub_1914412E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  void *v52;
  int v53;
  uint64_t v54;

  if (a52 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  if (a45 < 0)
    operator delete(a40);
  if (a38 < 0)
    operator delete(a33);
  if (a32 < 0)
  {
    operator delete(a27);
    if ((v53 & 1) == 0)
    {
LABEL_14:
      std::shared_ptr<void>::~shared_ptr[abi:ne180100](v54 - 144);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100](v54 - 128);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100](v54 - 112);

      _Unwind_Resume(a1);
    }
  }
  else if (!v53)
  {
    goto LABEL_14;
  }
  __cxa_free_exception(v52);
  goto LABEL_14;
}

const char *Espresso::generic_axpby_kernel::kernel_type_str(Espresso::generic_axpby_kernel *this)
{
  return "axpby";
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::axpby_params,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

void Espresso::MetalLowmemEngine::axpby_kernel_metal::set_alpha_beta(Espresso::MetalLowmemEngine::axpby_kernel_metal *this, float a2, float a3, int a4)
{
  void *v8;

  if (*((float *)this + 70) != a2 || *((float *)this + 71) != a3 || *((_DWORD *)this + 72) != a4)
  {
    *((float *)this + 70) = a2;
    *((float *)this + 71) = a3;
    *((_DWORD *)this + 72) = a4;
    v8 = (void *)*((_QWORD *)this + 42);
    *((_QWORD *)this + 42) = 0;

  }
  *((float *)this + 70) = a2;
  *((float *)this + 71) = a3;
  *((_DWORD *)this + 72) = a4;
}

void Espresso::MetalLowmemEngine::inner_product_grad_kernel_metal::~inner_product_grad_kernel_metal(id *this)
{
  void **v2;

  *this = off_1E2D9DD68;
  v2 = this + 35;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v2);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{
  void **v2;

  *this = off_1E2D9DD68;
  v2 = this + 35;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v2);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::MetalLowmemEngine::inner_product_grad_kernel_metal::__launch(uint64_t a1, id **a2, const void ***a3, const void ***a4)
{
  id *v7;
  const void **v8;
  const void *v9;
  float **v10;
  float **v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  const void **v15;
  const void *v16;
  _DWORD *v17;
  _DWORD *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  int v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  int v38;
  id *v39;
  id v40;
  const __CFString *v41;
  __CFString *v42;
  void *v43;
  unint64_t *v44;
  unint64_t v45;
  int32x2_t v46;
  uint64_t v47;
  void *v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  char v52;
  BOOL v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  unsigned int v57;
  char v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t *v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::runtime_error *exception;
  uint64_t v69;
  int64x2_t v70;
  _QWORD v71[3];
  uint64_t v72;
  std::__shared_weak_count *v73;
  float **v74;
  std::__shared_weak_count *v75;
  const float **v76;
  std::__shared_weak_count *v77;
  _DWORD *v78;
  std::__shared_weak_count *v79;
  float **v80;
  std::__shared_weak_count *v81;

  v7 = *a2;
  v8 = *a4;
  v9 = **a4;
  if (v9
  {
    v11 = v10;
    v12 = (std::__shared_weak_count *)v8[1];
    v80 = v10;
    v81 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
    v80 = 0;
    v81 = 0;
  }
  v15 = *a3;
  v16 = **a3;
  if (v16
  {
    v18 = v17;
    v19 = (std::__shared_weak_count *)v15[1];
    v78 = v17;
    v79 = v19;
    if (v19)
    {
      v20 = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
  }
  else
  {
    v18 = 0;
    v78 = 0;
    v79 = 0;
  }
  if (v18[2] == 1 && v18[3] == 1)
  {
    v22 = *(_QWORD *)(a1 + 280);
    if (*(_QWORD *)v22
    {
      v24 = v23;
      v25 = *(std::__shared_weak_count **)(v22 + 8);
      v76 = (const float **)v23;
      v77 = v25;
      if (v25)
      {
        v26 = (unint64_t *)&v25->__shared_owners_;
        do
          v27 = __ldxr(v26);
        while (__stxr(v27 + 1, v26));
      }
    }
    else
    {
      v24 = 0;
      v76 = 0;
      v77 = 0;
    }
    v38 = *((_DWORD *)v11 + 5);
    v39 = *(id **)(a1 + 8);
    v40 = v7[19];
    if (v38 > 1 && (v38 & 1) == 0)
      v41 = CFSTR("tex2d_MatrixMultiplyT_f32_2x1batch");
    else
      v41 = CFSTR("tex2d_MatrixMultiplyT_f32");
    if (v38 > 3 && (v38 & 3) == 0)
      v42 = CFSTR("tex2d_MatrixMultiplyT_f32_4x1batch");
    else
      v42 = (__CFString *)v41;
    if ((*((unsigned int (**)(float **))*v11 + 4))(v11) == 1
      || (*((unsigned int (**)(float **))*v11 + 4))(v11) == 2)
    {
      -[__CFString stringByReplacingOccurrencesOfString:withString:](v42, "stringByReplacingOccurrencesOfString:withString:", CFSTR("_f32"), CFSTR("_f16"));
      v42 = (__CFString *)objc_claimAutoreleasedReturnValue();
    }
    Espresso::context_metal::kernel_for_function((Espresso::context_metal *)v39, &v42->isa);
    v43 = (void *)objc_claimAutoreleasedReturnValue();
    v74 = v11;
    v75 = v12;
    if (v12)
    {
      v44 = (unint64_t *)&v12->__shared_owners_;
      do
        v45 = __ldxr(v44);
      while (__stxr(v45 + 1, v44));
    }
    if (!*(_QWORD *)(a1 + 440)
      || *(_DWORD *)(a1 + 368) != *((_DWORD *)v11 + 5)
      || *(_DWORD *)(a1 + 376) != *(_DWORD *)(a1 + 308)
      || *(_DWORD *)(a1 + 372) != *(_DWORD *)(a1 + 304))
    {
      *(_DWORD *)(a1 + 368) = v38;
      v46 = *(int32x2_t *)(a1 + 304);
      *(int32x2_t *)(a1 + 372) = vrev64_s32(v46);
      *(int32x2_t *)(a1 + 388) = vrev64_s32((int32x2_t)vsra_n_u32((uint32x2_t)0x100000001, (uint32x2_t)vadd_s32(v46, (int32x2_t)-1), 2uLL));
      v47 = objc_msgSend(v39[18], "newBufferWithBytes:length:options:", a1 + 304, 132, 0);
      v48 = *(void **)(a1 + 440);
      *(_QWORD *)(a1 + 440) = v47;

    }
    if (!v43)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Kernel not found");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    objc_msgSend(v40, "setComputePipelineState:", v43);
    objc_msgSend(v40, "setBuffer:offset:atIndex:", v24[20], 0, 0);
    objc_msgSend(v40, "setTexture:atIndex:", v11[21], 0);
    objc_msgSend(v40, "setTexture:atIndex:", *((_QWORD *)v18 + 21), 1);
    objc_msgSend(v40, "setBuffer:offset:atIndex:", *(_QWORD *)(a1 + 440), 0, 1);
    v49 = *(_DWORD *)(a1 + 372) - 1;
    v50 = v49 >> 2;
    v51 = 128;
    if (v49 >= 0x400)
    {
      v52 = 7;
    }
    else
    {
      v51 = 64;
      v52 = 6;
    }
    if (v49 < 0x200)
    {
      v51 = 32;
      v52 = 5;
    }
    v53 = v49 >= 0x100;
    v54 = 16;
    if (v53)
      v54 = v51;
    if (v53)
      v55 = v52;
    else
      v55 = 4;
    v56 = (v50 >> v55) + 1;
    v57 = *(_DWORD *)(a1 + 368) - 1;
    v58 = v38 > 1 && (v38 & 1) == 0;
    if (v38 > 3 && (v38 & 3) == 0)
      v58 = 2;
    v71[0] = v56;
    v71[1] = (int)((v57 >> v58) + 1);
    v71[2] = 1;
    v69 = v54;
    v70 = vdupq_n_s64(1uLL);
    objc_msgSend(v40, "dispatchThreadgroups:threadsPerThreadgroup:", v71, &v69);
    if (v12)
    {
      v59 = (unint64_t *)&v12->__shared_owners_;
      do
        v60 = __ldaxr(v59);
      while (__stlxr(v60 - 1, v59));
      if (!v60)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }

    v35 = v77;
    if (v77)
    {
      v61 = (unint64_t *)&v77->__shared_owners_;
      do
        v37 = __ldaxr(v61);
      while (__stlxr(v37 - 1, v61));
      goto LABEL_77;
    }
  }
  else
  {
    (*(void (**)(const float ***__return_ptr))(***(_QWORD ***)(a1 + 280) + 56))(&v76);
    (*(void (**)(_QWORD, id **, const float ***))(***(_QWORD ***)(a1 + 280) + 40))(**(_QWORD **)(a1 + 280), a2, &v76);
    (*(void (**)(float ***__return_ptr, _DWORD *))(*(_QWORD *)v18 + 56))(&v74, v18);
    (*((void (**)(uint64_t *__return_ptr, float **))*v11 + 7))(&v72, v11);
    v28 = *((_DWORD *)v74 + 5);
    (*((void (**)(float **, id **, uint64_t *))*v11 + 5))(v11, a2, &v72);
    (*((void (**)(id *))*v7 + 5))(v7);
    cblas_sgemm(CblasRowMajor, CblasNoTrans, CblasNoTrans, v28, *(_DWORD *)(a1 + 308), *(_DWORD *)(a1 + 304), 1.0, *(const float **)(v72 + 24), *(_DWORD *)(a1 + 304), v76[3], *(_DWORD *)(a1 + 308), 0.0, v74[3], *(_DWORD *)(a1 + 308));
    (*(void (**)(_DWORD *, id **, float ***))(*(_QWORD *)v18 + 48))(v18, a2, &v74);
    v29 = v73;
    if (v73)
    {
      v30 = (unint64_t *)&v73->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    v32 = v75;
    if (v75)
    {
      v33 = (unint64_t *)&v75->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    v35 = v77;
    if (v77)
    {
      v36 = (unint64_t *)&v77->__shared_owners_;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
LABEL_77:
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
  }
  v62 = v79;
  if (v79)
  {
    v63 = (unint64_t *)&v79->__shared_owners_;
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  v65 = v81;
  if (v81)
  {
    v66 = (unint64_t *)&v81->__shared_owners_;
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
}

void sub_191441BE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,char a24)
{
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t v28;

  __cxa_free_exception(v24);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a22);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v28 - 120);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v28 - 104);
  _Unwind_Resume(a1);
}

void Espresso::generic_inner_product_grad_kernel::top_shapes_for_bottom_shapes(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v3;
  __int128 v4;
  const void *v5;
  char *v6;
  __int128 v7[2];
  uint64_t v8;
  void *__p;
  void *v10;
  uint64_t v11;
  __int128 v12;

  *((_QWORD *)&v12 + 1) = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD **)a1;
  v4 = *(_OWORD *)(*(_QWORD *)a1 + 144);
  v7[0] = *(_OWORD *)(*(_QWORD *)a1 + 128);
  v7[1] = v4;
  v5 = (const void *)v3[21];
  v8 = v3[20];
  __p = 0;
  v10 = 0;
  v11 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v5, v3[22], (uint64_t)(v3[22] - (_QWORD)v5) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v6 = (char *)operator new(0x40uLL);
  *a2 = v6;
  a2[1] = v6;
  a2[2] = v6 + 64;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a2 + 2), v7, &v12, (uint64_t)v6);
  if (__p)
  {
    v10 = __p;
    operator delete(__p);
  }
}

void sub_191441D50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v19 = v18;
  *(_QWORD *)(v17 + 8) = v19;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a17 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

const char *Espresso::generic_inner_product_grad_kernel::kernel_type_str(Espresso::generic_inner_product_grad_kernel *this)
{
  return "inner_product_grad";
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::inner_product_uniforms,Espresso::abstract_kernel_with_weights_grad_>::get_params(uint64_t a1)
{
  return a1 + 304;
}

void Espresso::MetalLowmemEngine::inner_product_weights_grad_kernel_metal::~inner_product_weights_grad_kernel_metal(id *this)
{
  void **v2;

  *this = off_1E2D9DD68;
  v2 = this + 35;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v2);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{
  void **v2;

  *this = off_1E2D9DD68;
  v2 = this + 35;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v2);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::MetalLowmemEngine::inner_product_weights_grad_kernel_metal::__launch(uint64_t a1, uint64_t *a2, uint64_t *a3, const void ***a4)
{
  const void **v7;
  const void *v8;
  _DWORD *v10;
  _DWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  const void *v15;
  _QWORD *v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  id *v28;
  id v29;
  const __CFString *v30;
  NSString *v31;
  void *v32;
  int v33;
  int v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  int32x2_t v44;
  uint64_t v45;
  void *v46;
  uint32x2_t v47;
  int32x2_t v48;
  int8x16_t v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::runtime_error *exception;
  int8x16_t v59;
  uint64_t v60;
  _QWORD v61[3];
  uint64_t v62;
  std::__shared_weak_count *v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  _QWORD *v68;
  std::__shared_weak_count *v69;
  void *v70;
  std::__shared_weak_count *v71;
  void *v72;
  std::__shared_weak_count *v73;

  v7 = *a4;
  v8 = **a4;
  if (v8
  {
    v11 = v10;
    v12 = (std::__shared_weak_count *)v7[1];
    v72 = v10;
    v73 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
      v7 = *a4;
    }
  }
  else
  {
    v11 = 0;
    v72 = 0;
    v73 = 0;
  }
  v15 = v7[2];
  if (v15
  {
    v17 = v16;
    v18 = (std::__shared_weak_count *)v7[3];
    v70 = v16;
    v71 = v18;
    if (v18)
    {
      v19 = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
  }
  else
  {
    v17 = 0;
    v70 = 0;
    v71 = 0;
  }
  v21 = *a3;
  if (*(_QWORD *)v21
  {
    v23 = v22;
    v24 = *(std::__shared_weak_count **)(v21 + 8);
    v68 = v22;
    v69 = v24;
    if (v24)
    {
      v25 = (unint64_t *)&v24->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
  }
  else
  {
    v24 = 0;
    v23 = 0;
    v68 = 0;
    v69 = 0;
  }
  v27 = *a2;
  v28 = *(id **)(a1 + 8);
  v29 = *(id *)(*a2 + 152);
  if (*((_DWORD *)v17 + 2) == 1 && *((_DWORD *)v17 + 3) == 1)
  {
    if ((*(unsigned int (**)(_DWORD *))(*(_QWORD *)v11 + 32))(v11) == 1)
      v30 = CFSTR("f16");
    else
      v30 = CFSTR("f32");
    objc_msgSend(CFSTR("innerprod_weights_grad_"), "stringByAppendingString:", v30);
    v31 = (NSString *)objc_claimAutoreleasedReturnValue();
    Espresso::context_metal::kernel_for_function((Espresso::context_metal *)v28, v31);
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    if (*(_QWORD *)(a1 + 440))
    {
      v33 = v11[5];
      if (*(_DWORD *)(a1 + 368) == v33)
      {
        if (*(_DWORD *)(a1 + 376) == *(_DWORD *)(a1 + 308))
        {
          v33 = *(_DWORD *)(a1 + 368);
          if (*(_DWORD *)(a1 + 372) == *(_DWORD *)(a1 + 304))
            goto LABEL_51;
        }
        else
        {
          v33 = *(_DWORD *)(a1 + 368);
        }
      }
    }
    else
    {
      v33 = v11[5];
    }
    *(_DWORD *)(a1 + 368) = v33;
    v44 = *(int32x2_t *)(a1 + 304);
    *(int32x2_t *)(a1 + 372) = v44;
    *(uint32x2_t *)(a1 + 388) = vsra_n_u32((uint32x2_t)0x100000001, (uint32x2_t)vadd_s32(v44, (int32x2_t)-1), 2uLL);
    v45 = objc_msgSend(v28[18], "newBufferWithBytes:length:options:", a1 + 304, 132, 0);
    v46 = *(void **)(a1 + 440);
    *(_QWORD *)(a1 + 440) = v45;

LABEL_51:
    if (!v32)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Kernel not found");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    objc_msgSend(v29, "setComputePipelineState:", v32);
    objc_msgSend(v29, "setTexture:atIndex:", v17[21], 0);
    objc_msgSend(v29, "setTexture:atIndex:", *((_QWORD *)v11 + 21), 1);
    objc_msgSend(v29, "setBuffer:offset:atIndex:", *(_QWORD *)(a1 + 440), 0, 0);
    objc_msgSend(v29, "setBuffer:offset:atIndex:", v23[20], 0, 1);
    v47 = vshr_n_u32((uint32x2_t)vadd_s32(*(int32x2_t *)(a1 + 304), (int32x2_t)-1), 2uLL);
    v48 = vadd_s32((int32x2_t)vmin_u32(v47, (uint32x2_t)0x700000007), (int32x2_t)0x100000001);
    v49.i64[0] = v48.u32[0];
    v49.i64[1] = v48.u32[1];
    v60 = 1;
    v61[0] = v47.i32[1] / (unsigned __int32)v48.i32[1] + 1;
    v61[1] = v47.i32[0] / (unsigned __int32)v48.i32[0] + 1;
    v61[2] = 1;
    v59 = vextq_s8(v49, v49, 8uLL);
    objc_msgSend(v29, "dispatchThreadgroups:threadsPerThreadgroup:", v61, &v59);

    goto LABEL_53;
  }
  (*(void (**)(uint64_t *__return_ptr, _DWORD *))(*(_QWORD *)v11 + 56))(&v66, v11);
  (*(void (**)(uint64_t *__return_ptr, _QWORD *))(*v17 + 56))(&v64, v17);
  (*(void (**)(uint64_t *__return_ptr, _QWORD *))(*v23 + 56))(&v62, v23);
  v34 = *(_DWORD *)(v66 + 20);
  (*(void (**)(_DWORD *, uint64_t *, uint64_t *))(*(_QWORD *)v11 + 40))(v11, a2, &v66);
  (*(void (**)(_QWORD *, uint64_t *, uint64_t *))(*v17 + 40))(v17, a2, &v64);
  (*(void (**)(uint64_t))(*(_QWORD *)v27 + 40))(v27);
  cblas_sgemm(CblasRowMajor, CblasTrans, CblasNoTrans, *(_DWORD *)(a1 + 304), *(_DWORD *)(a1 + 308), v34, 1.0, *(const float **)(v66 + 24), *(_DWORD *)(a1 + 304), *(const float **)(v64 + 24), *(_DWORD *)(a1 + 308), 0.0, *(float **)(v62 + 24), *(_DWORD *)(a1 + 308));
  (*(void (**)(_QWORD *, uint64_t *, uint64_t *))(*v23 + 48))(v23, a2, &v62);
  v35 = v63;
  if (v63)
  {
    v36 = (unint64_t *)&v63->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  v38 = v65;
  if (v65)
  {
    v39 = (unint64_t *)&v65->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  v41 = v67;
  if (v67)
  {
    v42 = (unint64_t *)&v67->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  v24 = v69;
LABEL_53:

  if (v24)
  {
    v50 = (unint64_t *)&v24->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v52 = v71;
  if (v71)
  {
    v53 = (unint64_t *)&v71->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  v55 = v73;
  if (v73)
  {
    v56 = (unint64_t *)&v73->__shared_owners_;
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
}

void sub_1914423F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,char a25)
{
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;

  __cxa_free_exception(v26);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v29 - 112);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v29 - 96);
  _Unwind_Resume(a1);
}

void Espresso::MetalLowmemEngine::inner_product_weights_grad_kernel_metal::blob_options(char a1@<W1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;

  if ((a1 & 1) != 0)
  {
    v4 = operator new(0x78uLL);
    v4[1] = 0;
    v4[2] = 0;
    *v4 = &off_1E2DBAF68;
    *((_OWORD *)v4 + 5) = 0u;
    *((_OWORD *)v4 + 6) = 0u;
    *((_OWORD *)v4 + 3) = 0u;
    *((_OWORD *)v4 + 4) = 0u;
    *((_OWORD *)v4 + 2) = 0u;
    v4[13] = 0;
    v4[14] = 0;
    *((_DWORD *)v4 + 12) = 1065353216;
    v4[7] = 0x1FFFFFFFFLL;
    v4[12] = 0;
    v4[8] = 0;
    v4[9] = 0;
    *((_BYTE *)v4 + 88) = 0;
    v4[10] = 0;
    a2[1] = v4;
    v4[3] = &off_1E2D7F198;
    *a2 = v4 + 3;
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
}

const char *Espresso::generic_inner_product_weights_grad_kernel::kernel_type_str(Espresso::generic_inner_product_weights_grad_kernel *this)
{
  return "inner_product_weights_grad";
}

uint64_t Espresso::generic_inner_product_weights_grad_kernel::outputs_gradient(Espresso::generic_inner_product_weights_grad_kernel *this)
{
  return 1;
}

void Espresso::abstract_kernel_with_weights_grad_::top_shapes_for_bottom_shapes(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  unint64_t v5;
  __int128 v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  void *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  _OWORD v15[2];
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  _BYTE v20[24];
  __int128 v21;
  uint64_t v22;
  __int128 v23;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v3 = *(_QWORD *)(a1 + 280);
  if (*(_QWORD *)(a1 + 288) != v3)
  {
    v5 = 0;
    do
    {
      v6 = *(_OWORD *)(v3 + 16 * v5);
      v23 = v6;
      v7 = (std::__shared_weak_count *)*((_QWORD *)&v6 + 1);
      if (*((_QWORD *)&v6 + 1))
      {
        v8 = (unint64_t *)(*((_QWORD *)&v6 + 1) + 8);
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
      v22 = 0;
      *(_OWORD *)&v20[8] = 0u;
      v21 = 0u;
      v19 = xmmword_191A8AA80;
      *(_QWORD *)v20 = 0xFFFFFFFF00000001;
      if ((_QWORD)v6)
      {
        Espresso::abstract_blob_container::shape((char *)v15, v6);
        v19 = v15[0];
        *(_OWORD *)v20 = v15[1];
        *(_QWORD *)&v20[16] = v16;
        v21 = v17;
        v22 = v18;
        v10 = (void *)v17;
      }
      else
      {
        v10 = 0;
      }
      v11 = a2[1];
      if (v11 >= a2[2])
      {
        v12 = std::vector<Espresso::layer_shape>::__push_back_slow_path<Espresso::layer_shape const&>(a2, &v19);
      }
      else
      {
        std::vector<Espresso::layer_shape>::__construct_one_at_end[abi:ne180100]<Espresso::layer_shape const&>((uint64_t)a2, &v19);
        v12 = v11 + 64;
      }
      a2[1] = v12;
      if (v10)
        operator delete(v10);
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      ++v5;
      v3 = *(_QWORD *)(a1 + 280);
    }
    while (v5 < (*(_QWORD *)(a1 + 288) - v3) >> 4);
  }
}

void sub_1914426A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v11 - 96);
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

double Espresso::kernel_with_uniforms_<Espresso::inner_product_uniforms,Espresso::abstract_kernel_with_weights_grad_>::kernel_with_uniforms_(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  double result;

  v2 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_QWORD *)(v2 + 280) = 0;
  *(_QWORD *)(v2 + 288) = 0;
  *(_QWORD *)(v2 + 296) = 0;
  *(_QWORD *)v2 = off_1E2D8B9C8;
  *(_BYTE *)(v2 + 344) = 0;
  __asm { FMOV            V1.2S, #1.0 }
  *(_QWORD *)(v2 + 352) = 0xFFFFFFFF00000000;
  *(_QWORD *)(v2 + 360) = _D1;
  *(_QWORD *)(v2 + 428) = 0;
  *(_QWORD *)&result = 0x100000001;
  *(_OWORD *)(v2 + 304) = xmmword_191A93320;
  *(_QWORD *)(v2 + 320) = 0x3F80000000000000;
  *(_QWORD *)(v2 + 328) = 1065353216;
  *(_QWORD *)(v2 + 388) = 0;
  *(_DWORD *)(v2 + 348) = 0;
  *(_QWORD *)(v2 + 336) = 0;
  *(_QWORD *)(v2 + 404) = 0;
  *(_QWORD *)(v2 + 420) = 0;
  *(_QWORD *)(v2 + 412) = 0;
  return result;
}

void Espresso::HXSimEngine::batch::~batch(Espresso::HXSimEngine::batch *this)
{
  Espresso::abstract_batch::~abstract_batch(this);
  JUMPOUT(0x19401CD90);
}

char *Espresso::HXSimEngine::context::begin_batch@<X0>(char **a1@<X8>)
{
  char *v3;
  char *result;

  v3 = (char *)operator new(0x90uLL);
  *((_QWORD *)v3 + 1) = 0;
  *((_QWORD *)v3 + 2) = 0;
  *(_QWORD *)v3 = &off_1E2DB69D8;
  *((_OWORD *)v3 + 2) = 0u;
  *((_OWORD *)v3 + 3) = 0u;
  v3[64] = 1;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *((_WORD *)v3 + 60) = 256;
  *((_QWORD *)v3 + 16) = 0;
  *((_QWORD *)v3 + 17) = 0;
  a1[1] = v3;
  *((_QWORD *)v3 + 3) = &off_1E2D5F6A8;
  result = v3 + 24;
  *a1 = result;
  return result;
}

_QWORD *Espresso::HXSimEngine::context::get_device_model_name@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HX_Sim");
}

void Espresso::HXSimEngine::context::~context(id *this)
{
  Espresso::abstract_context::~abstract_context(this);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::HXSimEngine::batch>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB69D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::HXSimEngine::batch>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB69D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::HXSimEngine::batch>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 Espresso::HXSimEngine::engine::make_abstract_blob_container@<Q0>(_QWORD *a1@<X1>, int a2@<W2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  unint64_t v7;
  __n128 result;

  v6 = operator new(0xE8uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DB6850;
  Espresso::HXEngine::blob_container::blob_container((uint64_t)(v6 + 3), a1, a2);
  v6[3] = &off_1E2D5EC38;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1914428F4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

__n128 Espresso::HXSimEngine::engine::create_context@<Q0>(_QWORD *a1@<X1>, __n128 *a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  __n128 result;

  v4 = operator new(0xA8uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_1E2DB6A48;
  v5 = Espresso::abstract_context::abstract_context((uint64_t)(v4 + 3), a1);
  v4[3] = &off_1E2D5F758;
  *((_BYTE *)v4 + 68) = 0;
  result.n128_u64[0] = v5;
  result.n128_u64[1] = (unint64_t)v4;
  *a2 = result;
  return result;
}

void sub_191442974(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void Espresso::HXSimEngine::engine::~engine(Espresso::HXSimEngine::engine *this)
{
  *(_QWORD *)this = &unk_1E2D676D0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  *(_QWORD *)this = &unk_1E2D676D0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
  JUMPOUT(0x19401CD90);
}

__n128 ___ZN8Espresso11HXSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_8@<Q0>(_QWORD *a1@<X1>, __int128 *a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  uint64_t v7;
  __n128 result;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;

  v6 = (char *)operator new(0x198uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DB6930;
  v11 = a2[2];
  v12 = a2[3];
  v13 = *((_QWORD *)a2 + 8);
  v9 = *a2;
  v10 = a2[1];
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((_OWORD *)v6 + 21) = v11;
  *((_OWORD *)v6 + 22) = v12;
  *((_QWORD *)v6 + 46) = v13;
  *((_OWORD *)v6 + 19) = v9;
  *((_OWORD *)v6 + 20) = v10;
  *((_QWORD *)v6 + 3) = &off_1E2D5F248;
  *(_OWORD *)(v6 + 376) = 0u;
  *(_OWORD *)(v6 + 392) = 0u;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_191442AA8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void Espresso::HXSimEngine::hxsim_cpu_kernel_wrapper<Espresso::upsample_kernel_cpu,Espresso::generic_upsample_kernel>::~hxsim_cpu_kernel_wrapper(Espresso::base_kernel *a1)
{
  *(_QWORD *)a1 = &off_1E2D5F248;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 368);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 352);
  Espresso::base_kernel::~base_kernel(a1);
}

{
  *(_QWORD *)a1 = &off_1E2D5F248;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 368);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 352);
  Espresso::base_kernel::~base_kernel(a1);
  JUMPOUT(0x19401CD90);
}

void Espresso::HXSimEngine::hxsim_cpu_kernel_wrapper<Espresso::upsample_kernel_cpu,Espresso::generic_upsample_kernel>::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, const void ***a4)
{
  const void **v6;
  const void *v7;
  void *v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  __n128 v32;
  double v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  __int128 v63;
  std::__shared_weak_count *v64;
  uint64_t v65[3];
  std::__shared_weak_count *v66;
  __int128 v67;
  __int128 v68[2];
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  std::__shared_weak_count *v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  void *v80;
  std::__shared_weak_count *v81;

  v6 = *a4;
  v7 = **a4;
  if (v7
  {
    v9 = v8;
    v10 = (std::__shared_weak_count *)v6[1];
    v80 = v8;
    v81 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
  }
  else
  {
    v10 = 0;
    v9 = 0;
    v80 = 0;
    v81 = 0;
  }
  v13 = *a3;
  if (*(_QWORD *)v13
  {
    v15 = *(std::__shared_weak_count **)(v13 + 8);
    v78 = (uint64_t)v14;
    v79 = v15;
    if (v15)
    {
      v16 = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
  }
  else
  {
    v78 = 0;
    v79 = 0;
  }
  if (!*(_QWORD *)(a1 + 368))
  {
    LODWORD(v68[0]) = 0;
    Espresso::create_context((int *)v68, &v71);
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 368, &v71);
    v18 = (std::__shared_weak_count *)*((_QWORD *)&v71 + 1);
    if (*((_QWORD *)&v71 + 1))
    {
      v19 = (unint64_t *)(*((_QWORD *)&v71 + 1) + 8);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    v9 = v80;
    v10 = v81;
  }
  v74 = v9;
  v75 = v10;
  if (v10)
  {
    v21 = (unint64_t *)&v10->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  Espresso::sync_copy_to_host(&v76, &v74);
  v23 = v75;
  if (v75)
  {
    v24 = (unint64_t *)&v75->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v78 + 56))(&v72);
  std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,std::shared_ptr<Espresso::blob<float,4>> &,void>(&v70, *(_QWORD *)(a1 + 368), *(_QWORD *)(a1 + 376), &v76);
  v64 = (std::__shared_weak_count *)*((_QWORD *)&v70 + 1);
  v68[0] = v70;
  v70 = 0uLL;
  v69 = 0uLL;
  Espresso::layer_data::layer_data((char **)&v71, v68, &v69);
  if (v64)
  {
    v26 = (unint64_t *)&v64->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v70 + 1);
  if (*((_QWORD *)&v70 + 1))
  {
    v29 = (unint64_t *)(*((_QWORD *)&v70 + 1) + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,std::shared_ptr<Espresso::blob<float,4>> &,void>(&v69, *(_QWORD *)(a1 + 368), *(_QWORD *)(a1 + 376), &v72);
  v63 = v69;
  v70 = v69;
  v69 = 0uLL;
  v67 = 0uLL;
  Espresso::layer_data::layer_data((char **)v68, &v70, &v67);
  v33 = *(double *)&v63;
  if (*((_QWORD *)&v63 + 1))
  {
    v34 = (unint64_t *)(*((_QWORD *)&v63 + 1) + 8);
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v63 + 1) + 16))(*((_QWORD *)&v63 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v63 + 1));
    }
  }
  v36 = (std::__shared_weak_count *)*((_QWORD *)&v69 + 1);
  if (*((_QWORD *)&v69 + 1))
  {
    v37 = (unint64_t *)(*((_QWORD *)&v69 + 1) + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  Espresso::upsample_kernel_cpu::__launch(a1, v31, (uint64_t)v68, (uint64_t)&v71, v33, v32);
  v39 = v78;
  v40 = v79;
  v65[2] = v78;
  v66 = v79;
  if (v79)
  {
    v41 = (unint64_t *)&v79->__shared_owners_;
    do
      v42 = __ldxr(v41);
    while (__stxr(v42 + 1, v41));
  }
  v43 = (std::__shared_weak_count *)v73;
  v65[0] = v72;
  v65[1] = v73;
  if (v73)
  {
    v44 = (unint64_t *)(v73 + 8);
    do
      v45 = __ldxr(v44);
    while (__stxr(v45 + 1, v44));
  }
  Espresso::sync_copy_from_host(v39, v40, v65);
  if (v43)
  {
    v46 = (unint64_t *)&v43->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  v48 = v66;
  if (v66)
  {
    v49 = (unint64_t *)&v66->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  *(_QWORD *)&v70 = v68;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v70);
  *(_QWORD *)&v68[0] = &v71;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)v68);
  v51 = (std::__shared_weak_count *)v73;
  if (v73)
  {
    v52 = (unint64_t *)(v73 + 8);
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  v54 = v77;
  if (v77)
  {
    v55 = (unint64_t *)&v77->__shared_owners_;
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  v57 = v79;
  if (v79)
  {
    v58 = (unint64_t *)&v79->__shared_owners_;
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  v60 = v81;
  if (v81)
  {
    v61 = (unint64_t *)&v81->__shared_owners_;
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
}

void sub_191443018(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1 - 80);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1 - 64);
  _Unwind_Resume(a1);
}

void sub_1914430AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;
  uint64_t v15;
  va_list va2;

  va_start(va2, a8);
  va_start(va1, a8);
  va_start(va, a8);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v13 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  JUMPOUT(0x191443084);
}

void sub_1914430CC()
{
  JUMPOUT(0x191443084);
}

void sub_1914430D4()
{
  JUMPOUT(0x19144308CLL);
}

void sub_1914430DC()
{
  uint64_t v0;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v0 - 112);
  JUMPOUT(0x191443094);
}

void Espresso::HXSimEngine::hxsim_cpu_kernel_wrapper<Espresso::upsample_kernel_cpu,Espresso::generic_upsample_kernel>::clear_weights(uint64_t a1)
{
  _QWORD *v1;

  v1 = (_QWORD *)(a1 + 160);
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*(_QWORD **)(a1 + 160));
  *(v1 - 1) = v1;
  *v1 = 0;
  v1[1] = 0;
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(0);
  *(v1 - 1) = v1;
  *v1 = 0;
  v1[1] = 0;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::reset[abi:ne180100](v1 + 24);
}

void *Espresso::HXSimEngine::hxsim_cpu_kernel_wrapper<Espresso::upsample_kernel_cpu,Espresso::generic_upsample_kernel>::__set_weight_raw_blob(void *result, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  void *v7;
  int v8;
  uint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::runtime_error *exception;
  unint64_t v15;
  std::runtime_error *v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  std::string v25;
  std::string v26;
  std::string v27;
  std::string v28;
  std::string v29;

  v7 = result;
  v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 14)
      return result;
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 14)
  {
    return result;
  }
  if (*a3 == 0x656C6163735F7868 && *(uint64_t *)((char *)a3 + 6) == 0x74666968735F656CLL)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<int,1>,std::allocator<Espresso::blob<int,1>>,int &,int &,int &,int &,void>(&v29, 2, 1, 1, 1);
    v10 = (uint64_t)v7 + 352;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v10, (__int128 *)&v29);
    size = (std::__shared_weak_count *)v29.__r_.__value_.__l.__size_;
    if (v29.__r_.__value_.__l.__size_)
    {
      v12 = (unint64_t *)(v29.__r_.__value_.__l.__size_ + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    if (a5 != 4 * *(int *)(*(_QWORD *)v10 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      v15 = a5;
      v16 = exception;
      std::to_string(&v26, v15);
      v17 = std::string::insert(&v26, 0, "Unexpected size ");
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v27.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      v19 = std::string::append(&v27, "/");
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v28.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v25, 4 * *(int *)(*(_QWORD *)v10 + 8));
      if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v21 = &v25;
      else
        v21 = (std::string *)v25.__r_.__value_.__r.__words[0];
      if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = HIBYTE(v25.__r_.__value_.__r.__words[2]);
      else
        v22 = v25.__r_.__value_.__l.__size_;
      v23 = std::string::append(&v28, (const std::string::value_type *)v21, v22);
      v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v29.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v16, &v29);
      __cxa_throw(v16, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    return memcpy(*(void **)(*(_QWORD *)v10 + 16), a4, a5);
  }
  return result;
}

void sub_191443338(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  void *v33;
  int v34;
  uint64_t v35;

  if (*(char *)(v35 - 41) < 0)
    operator delete(*(void **)(v35 - 64));
  if (a14 < 0)
    operator delete(__p);
  if (a33 < 0)
    operator delete(a28);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
  {
    operator delete(a15);
    if ((v34 & 1) == 0)
LABEL_14:
      _Unwind_Resume(a1);
  }
  else if (!v34)
  {
    goto LABEL_14;
  }
  __cxa_free_exception(v33);
  goto LABEL_14;
}

char **Espresso::layer_data::layer_data(char **a1, __int128 *a2, __int128 *a3)
{
  _QWORD *v6;
  _OWORD *v7;
  uint64_t v8;
  _OWORD *v9;
  __int128 v10;
  unint64_t *v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  __int128 v16;
  int64x2_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  __int128 v31;
  unint64_t *v32;
  unint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  __int128 v37;
  int64x2_t v38;
  char *v39;
  uint64_t v41;
  int64x2_t v42;
  char *v43;
  _QWORD *v44;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v6 = a1 + 2;
  v44 = a1 + 2;
  v7 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(1uLL);
  v9 = v7;
  v10 = *a2;
  *v7 = *a2;
  if (*((_QWORD *)&v10 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v10 + 1) + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v14 = *a1;
  v13 = a1[1];
  if (v13 == *a1)
  {
    v17 = vdupq_n_s64((unint64_t)v13);
    v15 = (char *)v7;
  }
  else
  {
    v15 = (char *)v7;
    do
    {
      v16 = *((_OWORD *)v13 - 1);
      v13 -= 16;
      *((_OWORD *)v15 - 1) = v16;
      v15 -= 16;
      *(_QWORD *)v13 = 0;
      *((_QWORD *)v13 + 1) = 0;
    }
    while (v13 != v14);
    v17 = *(int64x2_t *)a1;
  }
  v18 = (char *)(v7 + 1);
  *a1 = v15;
  a1[1] = (char *)(v7 + 1);
  v42 = v17;
  v19 = a1[2];
  a1[2] = (char *)&v7[v8];
  v43 = v19;
  v41 = v17.i64[0];
  std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v41);
  a1[1] = v18;
  if (*(_QWORD *)a3)
  {
    if ((unint64_t)v18 >= *v6)
    {
      v24 = (v18 - *a1) >> 4;
      if ((unint64_t)(v24 + 1) >> 60)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v25 = *v6 - (_QWORD)*a1;
      v26 = v25 >> 3;
      if (v25 >> 3 <= (unint64_t)(v24 + 1))
        v26 = v24 + 1;
      if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF0)
        v27 = 0xFFFFFFFFFFFFFFFLL;
      else
        v27 = v26;
      v44 = v6;
      v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v27);
      v30 = &v28[16 * v24];
      v31 = *a3;
      *(_OWORD *)v30 = *a3;
      if (*((_QWORD *)&v31 + 1))
      {
        v32 = (unint64_t *)(*((_QWORD *)&v31 + 1) + 8);
        do
          v33 = __ldxr(v32);
        while (__stxr(v33 + 1, v32));
      }
      v35 = *a1;
      v34 = a1[1];
      if (v34 == *a1)
      {
        v38 = vdupq_n_s64((unint64_t)v34);
        v36 = &v28[16 * v24];
      }
      else
      {
        v36 = &v28[16 * v24];
        do
        {
          v37 = *((_OWORD *)v34 - 1);
          v34 -= 16;
          *((_OWORD *)v36 - 1) = v37;
          v36 -= 16;
          *(_QWORD *)v34 = 0;
          *((_QWORD *)v34 + 1) = 0;
        }
        while (v34 != v35);
        v38 = *(int64x2_t *)a1;
      }
      v23 = v30 + 16;
      *a1 = v36;
      a1[1] = v30 + 16;
      v42 = v38;
      v39 = a1[2];
      a1[2] = &v28[16 * v29];
      v43 = v39;
      v41 = v38.i64[0];
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v41);
    }
    else
    {
      *((_QWORD *)v9 + 2) = *(_QWORD *)a3;
      v20 = *((_QWORD *)a3 + 1);
      *((_QWORD *)v9 + 3) = v20;
      if (v20)
      {
        v21 = (unint64_t *)(v20 + 8);
        do
          v22 = __ldxr(v21);
        while (__stxr(v22 + 1, v21));
      }
      v23 = (char *)(v9 + 2);
    }
    a1[1] = v23;
  }
  return a1;
}

void sub_1914435DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::HXSimEngine::hxsim_cpu_kernel_wrapper<Espresso::upsample_kernel_cpu,Espresso::generic_upsample_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB6930;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::HXSimEngine::hxsim_cpu_kernel_wrapper<Espresso::upsample_kernel_cpu,Espresso::generic_upsample_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB6930;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::HXSimEngine::hxsim_cpu_kernel_wrapper<Espresso::upsample_kernel_cpu,Espresso::generic_upsample_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso11HXSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_7@<Q0>(_QWORD *a1@<X1>, __int128 *a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  unint64_t v7;
  __n128 result;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[28];

  v6 = (char *)operator new(0x1D8uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DB6968;
  v11 = a2[2];
  *(_OWORD *)v12 = a2[3];
  *(_OWORD *)&v12[12] = *(__int128 *)((char *)a2 + 60);
  v9 = *a2;
  v10 = a2[1];
  Espresso::kernel_with_uniforms_<Espresso::batchnorm_params,Espresso::abstract_kernel_with_weights_>::kernel_with_uniforms_((uint64_t)(v6 + 24), a1);
  *((_QWORD *)v6 + 51) = 0;
  *((_QWORD *)v6 + 52) = 0;
  *((_QWORD *)v6 + 53) = 0;
  *((_QWORD *)v6 + 54) = 0;
  *((_QWORD *)v6 + 3) = &off_1E2D5F3A0;
  *(_OWORD *)(v6 + 360) = v11;
  *(_OWORD *)(v6 + 376) = *(_OWORD *)v12;
  *(_OWORD *)(v6 + 328) = v9;
  *(_OWORD *)(v6 + 344) = v10;
  *(_OWORD *)(v6 + 388) = *(_OWORD *)&v12[12];
  *(_OWORD *)(v6 + 440) = 0u;
  *(_OWORD *)(v6 + 456) = 0u;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1914436FC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void Espresso::HXSimEngine::hxsim_cpu_kernel_wrapper<Espresso::batchnorm_kernel_cpu,Espresso::generic_batchnorm_kernel>::~hxsim_cpu_kernel_wrapper(Espresso::generic_batchnorm_kernel *a1)
{
  *(_QWORD *)a1 = &off_1E2D5F3A0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 432);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 416);
  *(_QWORD *)a1 = &off_1E2D85C18;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 400);
  Espresso::generic_batchnorm_kernel::~generic_batchnorm_kernel(a1);
}

{
  *(_QWORD *)a1 = &off_1E2D5F3A0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 432);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 416);
  *(_QWORD *)a1 = &off_1E2D85C18;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 400);
  Espresso::generic_batchnorm_kernel::~generic_batchnorm_kernel(a1);
  JUMPOUT(0x19401CD90);
}

void Espresso::HXSimEngine::hxsim_cpu_kernel_wrapper<Espresso::batchnorm_kernel_cpu,Espresso::generic_batchnorm_kernel>::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, const void ***a4)
{
  const void **v6;
  const void *v7;
  void *v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  std::__shared_weak_count *v62;
  uint64_t v63[3];
  std::__shared_weak_count *v64;
  __int128 v65;
  __int128 v66[2];
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  std::__shared_weak_count *v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  void *v78;
  std::__shared_weak_count *v79;

  v6 = *a4;
  v7 = **a4;
  if (v7
  {
    v9 = v8;
    v10 = (std::__shared_weak_count *)v6[1];
    v78 = v8;
    v79 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
  }
  else
  {
    v10 = 0;
    v9 = 0;
    v78 = 0;
    v79 = 0;
  }
  v13 = *a3;
  if (*(_QWORD *)v13
  {
    v15 = *(std::__shared_weak_count **)(v13 + 8);
    v76 = (uint64_t)v14;
    v77 = v15;
    if (v15)
    {
      v16 = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
  }
  else
  {
    v76 = 0;
    v77 = 0;
  }
  if (!*(_QWORD *)(a1 + 432))
  {
    LODWORD(v66[0]) = 0;
    Espresso::create_context((int *)v66, &v69);
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 432, &v69);
    v18 = (std::__shared_weak_count *)*((_QWORD *)&v69 + 1);
    if (*((_QWORD *)&v69 + 1))
    {
      v19 = (unint64_t *)(*((_QWORD *)&v69 + 1) + 8);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    v9 = v78;
    v10 = v79;
  }
  v72 = v9;
  v73 = v10;
  if (v10)
  {
    v21 = (unint64_t *)&v10->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  Espresso::sync_copy_to_host(&v74, &v72);
  v23 = v73;
  if (v73)
  {
    v24 = (unint64_t *)&v73->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v76 + 56))(&v70);
  std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,std::shared_ptr<Espresso::blob<float,4>> &,void>(&v68, *(_QWORD *)(a1 + 432), *(_QWORD *)(a1 + 440), &v74);
  v61 = (std::__shared_weak_count *)*((_QWORD *)&v68 + 1);
  v66[0] = v68;
  v68 = 0uLL;
  v67 = 0uLL;
  Espresso::layer_data::layer_data((char **)&v69, v66, &v67);
  if (v61)
  {
    v26 = (unint64_t *)&v61->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v68 + 1);
  if (*((_QWORD *)&v68 + 1))
  {
    v29 = (unint64_t *)(*((_QWORD *)&v68 + 1) + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,std::shared_ptr<Espresso::blob<float,4>> &,void>(&v67, *(_QWORD *)(a1 + 432), *(_QWORD *)(a1 + 440), &v70);
  v62 = (std::__shared_weak_count *)*((_QWORD *)&v67 + 1);
  v68 = v67;
  v67 = 0uLL;
  v65 = 0uLL;
  Espresso::layer_data::layer_data((char **)v66, &v68, &v65);
  if (v62)
  {
    v32 = (unint64_t *)&v62->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  v34 = (std::__shared_weak_count *)*((_QWORD *)&v67 + 1);
  if (*((_QWORD *)&v67 + 1))
  {
    v35 = (unint64_t *)(*((_QWORD *)&v67 + 1) + 8);
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  Espresso::batchnorm_kernel_cpu::__launch(a1, v31, (uint64_t *)v66, (uint64_t *)&v69);
  v37 = v76;
  v38 = v77;
  v63[2] = v76;
  v64 = v77;
  if (v77)
  {
    v39 = (unint64_t *)&v77->__shared_owners_;
    do
      v40 = __ldxr(v39);
    while (__stxr(v40 + 1, v39));
  }
  v41 = (std::__shared_weak_count *)v71;
  v63[0] = v70;
  v63[1] = v71;
  if (v71)
  {
    v42 = (unint64_t *)(v71 + 8);
    do
      v43 = __ldxr(v42);
    while (__stxr(v43 + 1, v42));
  }
  Espresso::sync_copy_from_host(v37, v38, v63);
  if (v41)
  {
    v44 = (unint64_t *)&v41->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  v46 = v64;
  if (v64)
  {
    v47 = (unint64_t *)&v64->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  *(_QWORD *)&v68 = v66;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v68);
  *(_QWORD *)&v66[0] = &v69;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)v66);
  v49 = (std::__shared_weak_count *)v71;
  if (v71)
  {
    v50 = (unint64_t *)(v71 + 8);
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  v52 = v75;
  if (v75)
  {
    v53 = (unint64_t *)&v75->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  v55 = v77;
  if (v77)
  {
    v56 = (unint64_t *)&v77->__shared_owners_;
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  v58 = v79;
  if (v79)
  {
    v59 = (unint64_t *)&v79->__shared_owners_;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
}

void sub_191443C94(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1 - 80);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1 - 64);
  _Unwind_Resume(a1);
}

void sub_191443D28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;
  uint64_t v15;
  va_list va2;

  va_start(va2, a8);
  va_start(va1, a8);
  va_start(va, a8);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v13 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  JUMPOUT(0x191443D00);
}

void sub_191443D48()
{
  JUMPOUT(0x191443D00);
}

void sub_191443D50()
{
  JUMPOUT(0x191443D08);
}

void sub_191443D58()
{
  uint64_t v0;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v0 - 112);
  JUMPOUT(0x191443D10);
}

void Espresso::HXSimEngine::hxsim_cpu_kernel_wrapper<Espresso::batchnorm_kernel_cpu,Espresso::generic_batchnorm_kernel>::clear_weights(uint64_t a1)
{
  std::shared_ptr<Espresso::blob<unsigned short,4>>::reset[abi:ne180100]((_QWORD *)(a1 + 400));
  std::shared_ptr<Espresso::blob<unsigned short,4>>::reset[abi:ne180100]((_QWORD *)(a1 + 416));
}

void Espresso::HXSimEngine::hxsim_cpu_kernel_wrapper<Espresso::batchnorm_kernel_cpu,Espresso::generic_batchnorm_kernel>::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4, unint64_t a5, uint64_t *a6)
{
  int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  std::__shared_weak_count *size;
  unint64_t *v16;
  unint64_t v17;
  std::runtime_error *exception;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  __int128 v22;
  std::string *v23;
  std::string::size_type v24;
  std::string *v25;
  __int128 v26;
  std::string v27;
  std::string v28;
  std::string v29;
  std::string v30;
  std::string v31;

  v9 = *(char *)(a3 + 23);
  if (v9 < 0)
  {
    if (*(_QWORD *)(a3 + 8) != 14)
    {
LABEL_10:
      Espresso::generic_batchnorm_kernel::__set_weight_raw_blob(a1, a2, (_QWORD *)a3, a4, a5, a6);
      return;
    }
    v10 = *(uint64_t **)a3;
  }
  else
  {
    v10 = (uint64_t *)a3;
    if (v9 != 14)
      goto LABEL_10;
  }
  v11 = *v10;
  v12 = *(uint64_t *)((char *)v10 + 6);
  if (v11 != 0x656C6163735F7868 || v12 != 0x74666968735F656CLL)
    goto LABEL_10;
  std::allocate_shared[abi:ne180100]<Espresso::blob<int,1>,std::allocator<Espresso::blob<int,1>>,int &,int &,int &,int &,void>(&v31, 2, 1, 1, 1);
  v14 = a1 + 416;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v14, (__int128 *)&v31);
  size = (std::__shared_weak_count *)v31.__r_.__value_.__l.__size_;
  if (v31.__r_.__value_.__l.__size_)
  {
    v16 = (unint64_t *)(v31.__r_.__value_.__l.__size_ + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  if (a5 != 4 * *(int *)(*(_QWORD *)v14 + 8))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v28, a5);
    v19 = std::string::insert(&v28, 0, "Unexpected size ");
    v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v29.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    v21 = std::string::append(&v29, "/");
    v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    v30.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v27, 4 * *(int *)(*(_QWORD *)v14 + 8));
    if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v23 = &v27;
    else
      v23 = (std::string *)v27.__r_.__value_.__r.__words[0];
    if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v24 = HIBYTE(v27.__r_.__value_.__r.__words[2]);
    else
      v24 = v27.__r_.__value_.__l.__size_;
    v25 = std::string::append(&v30, (const std::string::value_type *)v23, v24);
    v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    v31.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v31);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  memcpy(*(void **)(*(_QWORD *)v14 + 16), a4, a5);
}

void sub_191443FA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  void *v33;
  int v34;
  uint64_t v35;

  if (*(char *)(v35 - 41) < 0)
    operator delete(*(void **)(v35 - 64));
  if (a14 < 0)
    operator delete(__p);
  if (a33 < 0)
    operator delete(a28);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
  {
    operator delete(a15);
    if ((v34 & 1) == 0)
LABEL_14:
      _Unwind_Resume(a1);
  }
  else if (!v34)
  {
    goto LABEL_14;
  }
  __cxa_free_exception(v33);
  goto LABEL_14;
}

_QWORD *Espresso::batchnorm_kernel_cpu::set_batchnorm_params(uint64_t a1, uint64_t *a2)
{
  return std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 400), *a2, a2[1]);
}

uint64_t Espresso::batchnorm_kernel_cpu::get_batchnorm_params@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 408);
  *a2 = *(_QWORD *)(this + 400);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

void std::__shared_ptr_emplace<Espresso::HXSimEngine::hxsim_cpu_kernel_wrapper<Espresso::batchnorm_kernel_cpu,Espresso::generic_batchnorm_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB6968;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::HXSimEngine::hxsim_cpu_kernel_wrapper<Espresso::batchnorm_kernel_cpu,Espresso::generic_batchnorm_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB6968;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::HXSimEngine::hxsim_cpu_kernel_wrapper<Espresso::batchnorm_kernel_cpu,Espresso::generic_batchnorm_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso11HXSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_6@<Q0>(_QWORD *a1@<X1>, __int128 *a2@<X2>, __n128 *a3@<X8>)
{
  void *v6;
  unsigned int v7;
  __n128 result;
  std::runtime_error *exception;
  std::string *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  int v15;
  std::string v16;
  std::string v17;

  v6 = operator new(0x178uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DB68C0;
  v12 = *a2;
  v13 = a2[1];
  v14 = a2[2];
  v15 = *((_DWORD *)a2 + 12);
  Espresso::base_kernel::base_kernel((uint64_t)v6 + 24, a1);
  *((_QWORD *)v6 + 3) = &off_1E2D5EF98;
  *((_QWORD *)v6 + 45) = 0;
  *((_QWORD *)v6 + 46) = 0;
  *((_OWORD *)v6 + 19) = v12;
  *((_OWORD *)v6 + 20) = v13;
  *((_OWORD *)v6 + 21) = v14;
  *((_DWORD *)v6 + 88) = v15;
  v7 = *((_DWORD *)v6 + 76);
  if (v7 >= 2 && v7 != 3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v16, *((_DWORD *)v6 + 76));
    v10 = std::string::insert(&v16, 0, "Elwise op not supported ");
    v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v17);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  result.n128_u64[0] = (unint64_t)v6 + 24;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_191444220(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  std::__shared_weak_count *v27;
  Espresso::base_kernel *v28;
  void *v29;
  int v30;
  void *v32;

  if (a27 < 0)
    operator delete(__p);
  if (a21 < 0)
  {
    operator delete(a16);
    if ((v30 & 1) == 0)
    {
LABEL_8:
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v27[15]);
      Espresso::base_kernel::~base_kernel(v28);
      std::__shared_weak_count::~__shared_weak_count(v27);
      operator delete(v32);
      _Unwind_Resume(a1);
    }
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void std::__shared_ptr_emplace<Espresso::HXSimEngine::elementwise_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB68C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::HXSimEngine::elementwise_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB68C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::HXSimEngine::elementwise_kernel>::__on_zero_shared(uint64_t a1)
{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(a1 + 24);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 360);
  Espresso::base_kernel::~base_kernel(v1);
}

__n128 ___ZN8Espresso11HXSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_5@<Q0>(_QWORD *a1@<X1>, __int128 *a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  uint64_t v7;
  __n128 result;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[28];

  v6 = (char *)operator new(0x1A0uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DB69A0;
  v11 = a2[2];
  *(_OWORD *)v12 = a2[3];
  *(_OWORD *)&v12[12] = *(__int128 *)((char *)a2 + 60);
  v9 = *a2;
  v10 = a2[1];
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((_OWORD *)v6 + 21) = v11;
  *((_OWORD *)v6 + 22) = *(_OWORD *)v12;
  *((_OWORD *)v6 + 19) = v9;
  *((_OWORD *)v6 + 20) = v10;
  *(_OWORD *)(v6 + 364) = *(_OWORD *)&v12[12];
  *((_QWORD *)v6 + 3) = &off_1E2D5F550;
  *((_OWORD *)v6 + 24) = 0u;
  *((_OWORD *)v6 + 25) = 0u;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1914443BC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void Espresso::HXSimEngine::hxsim_cpu_kernel_wrapper<Espresso::general_padding_kernel_cpu,Espresso::generic_general_padding_kernel>::~hxsim_cpu_kernel_wrapper(Espresso::base_kernel *a1)
{
  *(_QWORD *)a1 = &off_1E2D5F550;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 376);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 360);
  Espresso::base_kernel::~base_kernel(a1);
}

{
  *(_QWORD *)a1 = &off_1E2D5F550;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 376);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 360);
  Espresso::base_kernel::~base_kernel(a1);
  JUMPOUT(0x19401CD90);
}

void Espresso::HXSimEngine::hxsim_cpu_kernel_wrapper<Espresso::general_padding_kernel_cpu,Espresso::generic_general_padding_kernel>::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, const void ***a4)
{
  const void **v6;
  const void *v7;
  void *v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  std::__shared_weak_count *v62;
  uint64_t v63[3];
  std::__shared_weak_count *v64;
  __int128 v65;
  __int128 v66[2];
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  std::__shared_weak_count *v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  void *v78;
  std::__shared_weak_count *v79;

  v6 = *a4;
  v7 = **a4;
  if (v7
  {
    v9 = v8;
    v10 = (std::__shared_weak_count *)v6[1];
    v78 = v8;
    v79 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
  }
  else
  {
    v10 = 0;
    v9 = 0;
    v78 = 0;
    v79 = 0;
  }
  v13 = *a3;
  if (*(_QWORD *)v13
  {
    v15 = *(std::__shared_weak_count **)(v13 + 8);
    v76 = (uint64_t)v14;
    v77 = v15;
    if (v15)
    {
      v16 = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
  }
  else
  {
    v76 = 0;
    v77 = 0;
  }
  if (!*(_QWORD *)(a1 + 376))
  {
    LODWORD(v66[0]) = 0;
    Espresso::create_context((int *)v66, &v69);
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 376, &v69);
    v18 = (std::__shared_weak_count *)*((_QWORD *)&v69 + 1);
    if (*((_QWORD *)&v69 + 1))
    {
      v19 = (unint64_t *)(*((_QWORD *)&v69 + 1) + 8);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    v9 = v78;
    v10 = v79;
  }
  v72 = v9;
  v73 = v10;
  if (v10)
  {
    v21 = (unint64_t *)&v10->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  Espresso::sync_copy_to_host(&v74, &v72);
  v23 = v73;
  if (v73)
  {
    v24 = (unint64_t *)&v73->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v76 + 56))(&v70);
  std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,std::shared_ptr<Espresso::blob<float,4>> &,void>(&v68, *(_QWORD *)(a1 + 376), *(_QWORD *)(a1 + 384), &v74);
  v61 = (std::__shared_weak_count *)*((_QWORD *)&v68 + 1);
  v66[0] = v68;
  v68 = 0uLL;
  v67 = 0uLL;
  Espresso::layer_data::layer_data((char **)&v69, v66, &v67);
  if (v61)
  {
    v26 = (unint64_t *)&v61->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v68 + 1);
  if (*((_QWORD *)&v68 + 1))
  {
    v29 = (unint64_t *)(*((_QWORD *)&v68 + 1) + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,std::shared_ptr<Espresso::blob<float,4>> &,void>(&v67, *(_QWORD *)(a1 + 376), *(_QWORD *)(a1 + 384), &v70);
  v62 = (std::__shared_weak_count *)*((_QWORD *)&v67 + 1);
  v68 = v67;
  v67 = 0uLL;
  v65 = 0uLL;
  Espresso::layer_data::layer_data((char **)v66, &v68, &v65);
  if (v62)
  {
    v32 = (unint64_t *)&v62->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  v34 = (std::__shared_weak_count *)*((_QWORD *)&v67 + 1);
  if (*((_QWORD *)&v67 + 1))
  {
    v35 = (unint64_t *)(*((_QWORD *)&v67 + 1) + 8);
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  Espresso::general_padding_kernel_cpu::__launch(a1, v31, (uint64_t *)v66, (uint64_t *)&v69);
  v37 = v76;
  v38 = v77;
  v63[2] = v76;
  v64 = v77;
  if (v77)
  {
    v39 = (unint64_t *)&v77->__shared_owners_;
    do
      v40 = __ldxr(v39);
    while (__stxr(v40 + 1, v39));
  }
  v41 = (std::__shared_weak_count *)v71;
  v63[0] = v70;
  v63[1] = v71;
  if (v71)
  {
    v42 = (unint64_t *)(v71 + 8);
    do
      v43 = __ldxr(v42);
    while (__stxr(v43 + 1, v42));
  }
  Espresso::sync_copy_from_host(v37, v38, v63);
  if (v41)
  {
    v44 = (unint64_t *)&v41->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  v46 = v64;
  if (v64)
  {
    v47 = (unint64_t *)&v64->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  *(_QWORD *)&v68 = v66;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v68);
  *(_QWORD *)&v66[0] = &v69;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)v66);
  v49 = (std::__shared_weak_count *)v71;
  if (v71)
  {
    v50 = (unint64_t *)(v71 + 8);
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  v52 = v75;
  if (v75)
  {
    v53 = (unint64_t *)&v75->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  v55 = v77;
  if (v77)
  {
    v56 = (unint64_t *)&v77->__shared_owners_;
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  v58 = v79;
  if (v79)
  {
    v59 = (unint64_t *)&v79->__shared_owners_;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
}

void sub_19144492C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1 - 80);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1 - 64);
  _Unwind_Resume(a1);
}

void sub_1914449C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;
  uint64_t v15;
  va_list va2;

  va_start(va2, a8);
  va_start(va1, a8);
  va_start(va, a8);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v13 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  JUMPOUT(0x191444998);
}

void sub_1914449E0()
{
  JUMPOUT(0x191444998);
}

void sub_1914449E8()
{
  JUMPOUT(0x1914449A0);
}

void sub_1914449F0()
{
  uint64_t v0;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v0 - 112);
  JUMPOUT(0x1914449A8);
}

void Espresso::HXSimEngine::hxsim_cpu_kernel_wrapper<Espresso::general_padding_kernel_cpu,Espresso::generic_general_padding_kernel>::clear_weights(uint64_t a1)
{
  _QWORD *v1;

  v1 = (_QWORD *)(a1 + 160);
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*(_QWORD **)(a1 + 160));
  *(v1 - 1) = v1;
  *v1 = 0;
  v1[1] = 0;
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(0);
  *(v1 - 1) = v1;
  *v1 = 0;
  v1[1] = 0;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::reset[abi:ne180100](v1 + 25);
}

void *Espresso::HXSimEngine::hxsim_cpu_kernel_wrapper<Espresso::general_padding_kernel_cpu,Espresso::generic_general_padding_kernel>::__set_weight_raw_blob(void *result, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  void *v7;
  int v8;
  uint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::runtime_error *exception;
  unint64_t v15;
  std::runtime_error *v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  std::string v25;
  std::string v26;
  std::string v27;
  std::string v28;
  std::string v29;

  v7 = result;
  v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 14)
      return result;
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 14)
  {
    return result;
  }
  if (*a3 == 0x656C6163735F7868 && *(uint64_t *)((char *)a3 + 6) == 0x74666968735F656CLL)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<int,1>,std::allocator<Espresso::blob<int,1>>,int &,int &,int &,int &,void>(&v29, 2, 1, 1, 1);
    v10 = (uint64_t)v7 + 360;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v10, (__int128 *)&v29);
    size = (std::__shared_weak_count *)v29.__r_.__value_.__l.__size_;
    if (v29.__r_.__value_.__l.__size_)
    {
      v12 = (unint64_t *)(v29.__r_.__value_.__l.__size_ + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    if (a5 != 4 * *(int *)(*(_QWORD *)v10 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      v15 = a5;
      v16 = exception;
      std::to_string(&v26, v15);
      v17 = std::string::insert(&v26, 0, "Unexpected size ");
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v27.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      v19 = std::string::append(&v27, "/");
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v28.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v25, 4 * *(int *)(*(_QWORD *)v10 + 8));
      if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v21 = &v25;
      else
        v21 = (std::string *)v25.__r_.__value_.__r.__words[0];
      if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = HIBYTE(v25.__r_.__value_.__r.__words[2]);
      else
        v22 = v25.__r_.__value_.__l.__size_;
      v23 = std::string::append(&v28, (const std::string::value_type *)v21, v22);
      v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v29.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v16, &v29);
      __cxa_throw(v16, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    return memcpy(*(void **)(*(_QWORD *)v10 + 16), a4, a5);
  }
  return result;
}

void sub_191444C4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  void *v33;
  int v34;
  uint64_t v35;

  if (*(char *)(v35 - 41) < 0)
    operator delete(*(void **)(v35 - 64));
  if (a14 < 0)
    operator delete(__p);
  if (a33 < 0)
    operator delete(a28);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
  {
    operator delete(a15);
    if ((v34 & 1) == 0)
LABEL_14:
      _Unwind_Resume(a1);
  }
  else if (!v34)
  {
    goto LABEL_14;
  }
  __cxa_free_exception(v33);
  goto LABEL_14;
}

void std::__shared_ptr_emplace<Espresso::HXSimEngine::hxsim_cpu_kernel_wrapper<Espresso::general_padding_kernel_cpu,Espresso::generic_general_padding_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB69A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::HXSimEngine::hxsim_cpu_kernel_wrapper<Espresso::general_padding_kernel_cpu,Espresso::generic_general_padding_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB69A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::HXSimEngine::hxsim_cpu_kernel_wrapper<Espresso::general_padding_kernel_cpu,Espresso::generic_general_padding_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso11HXSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_4@<Q0>(_QWORD *a1@<X1>, __int128 *a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  uint64_t v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  v6 = (char *)operator new(0x178uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DB68F8;
  v9 = *a2;
  v10 = a2[1];
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((_OWORD *)v6 + 21) = 0u;
  *((_OWORD *)v6 + 22) = 0u;
  *(_DWORD *)(v6 + 367) = 0;
  *((_OWORD *)v6 + 19) = v9;
  *((_OWORD *)v6 + 20) = v10;
  *((_QWORD *)v6 + 3) = &off_1E2D5F0F0;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_191444DE0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::HXSimEngine::context_transfer_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB68F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::HXSimEngine::context_transfer_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB68F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::HXSimEngine::context_transfer_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso11HXSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_3@<Q0>(_QWORD *a1@<X1>, __n128 *a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  __n128 result;

  v4 = operator new(0x170uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_1E2DB6818;
  v5 = Espresso::base_kernel::base_kernel((uint64_t)(v4 + 3), a1);
  *((_BYTE *)v4 + 364) = 0;
  *((_WORD *)v4 + 172) = 0;
  *((_DWORD *)v4 + 76) = 0;
  *((_DWORD *)v4 + 84) = 0;
  v4[3] = &off_1E2D5EAE0;
  result.n128_u64[0] = v5;
  result.n128_u64[1] = (unint64_t)v4;
  *a2 = result;
  return result;
}

void sub_191444EBC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::HXSimEngine::concat_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB6818;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::HXSimEngine::concat_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB6818;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::HXSimEngine::concat_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso11HXSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_2@<Q0>(_QWORD *a1@<X1>, __int128 *a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  uint64_t v7;
  __n128 result;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  v6 = (char *)operator new(0x228uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DB67E0;
  v13 = a2[4];
  v14 = a2[5];
  v15 = a2[6];
  v9 = *a2;
  v10 = a2[1];
  v11 = a2[2];
  v12 = a2[3];
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((_QWORD *)v6 + 39) = 0;
  *((_QWORD *)v6 + 40) = 0;
  *((_QWORD *)v6 + 38) = v6 + 312;
  *((_QWORD *)v6 + 55) = 0;
  *((_QWORD *)v6 + 56) = 0;
  *((_QWORD *)v6 + 3) = &off_1E2D5E948;
  *(_OWORD *)(v6 + 456) = 0u;
  *(_OWORD *)(v6 + 472) = 0u;
  *(_OWORD *)(v6 + 488) = 0u;
  *(_OWORD *)(v6 + 504) = 0u;
  *(_OWORD *)(v6 + 520) = 0u;
  *(_OWORD *)(v6 + 536) = 0u;
  *(_OWORD *)(v6 + 408) = v14;
  *(_OWORD *)(v6 + 424) = v15;
  *(_OWORD *)(v6 + 328) = v9;
  *(_OWORD *)(v6 + 344) = v10;
  *(_OWORD *)(v6 + 376) = v12;
  *(_OWORD *)(v6 + 392) = v13;
  *(_OWORD *)(v6 + 360) = v11;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_191444FF8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::HXSimEngine::pool_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB67E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::HXSimEngine::pool_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB67E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::HXSimEngine::pool_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso11HXSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke@<Q0>(_QWORD *a1@<X1>, __int128 *a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  uint64_t v7;
  __n128 result;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[24];

  v6 = (char *)operator new(0x2D8uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DB6888;
  v17 = a2[8];
  *(_OWORD *)v18 = a2[9];
  *(_QWORD *)&v18[16] = *((_QWORD *)a2 + 20);
  v13 = a2[4];
  v14 = a2[5];
  v15 = a2[6];
  v16 = a2[7];
  v9 = *a2;
  v10 = a2[1];
  v11 = a2[2];
  v12 = a2[3];
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((_QWORD *)v6 + 39) = 0;
  *((_QWORD *)v6 + 40) = 0;
  *((_QWORD *)v6 + 38) = v6 + 312;
  Espresso::convolution_uniforms::convolution_uniforms((Espresso::convolution_uniforms *)(v6 + 328));
  *((_QWORD *)v6 + 72) = 0;
  *((_OWORD *)v6 + 34) = 0u;
  *((_OWORD *)v6 + 35) = 0u;
  *((_OWORD *)v6 + 32) = 0u;
  *((_OWORD *)v6 + 33) = 0u;
  *((_OWORD *)v6 + 31) = 0u;
  *((_QWORD *)v6 + 3) = &off_1E2D5ED18;
  *(_OWORD *)(v6 + 584) = 0u;
  *(_OWORD *)(v6 + 600) = 0u;
  *(_OWORD *)(v6 + 616) = 0u;
  *(_OWORD *)(v6 + 632) = 0u;
  *(_OWORD *)(v6 + 648) = 0u;
  *(_OWORD *)(v6 + 664) = 0u;
  *(_OWORD *)(v6 + 680) = 0u;
  *(_OWORD *)(v6 + 696) = 0u;
  *(_OWORD *)(v6 + 712) = 0u;
  *(_OWORD *)(v6 + 328) = v9;
  *(_OWORD *)(v6 + 344) = v10;
  *(_OWORD *)(v6 + 392) = v13;
  *(_OWORD *)(v6 + 408) = v14;
  *(_OWORD *)(v6 + 360) = v11;
  *(_OWORD *)(v6 + 376) = v12;
  *(_QWORD *)(v7 + 157) = *(_QWORD *)&v18[13];
  *(_OWORD *)(v6 + 456) = v17;
  *(_OWORD *)(v6 + 472) = *(_OWORD *)v18;
  *(_OWORD *)(v6 + 424) = v15;
  *(_OWORD *)(v6 + 440) = v16;
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19144517C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::HXSimEngine::convolution_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB6888;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::HXSimEngine::convolution_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB6888;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::HXSimEngine::convolution_kernel>::__on_zero_shared(uint64_t a1)
{
  void **v2;
  uint64_t v3;

  v2 = (void **)(a1 + 24);
  v3 = a1 + 664;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 712);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 696);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 680);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v3);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 648);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 632);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 616);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 600);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 584);
  Espresso::generic_convolution_kernel::~generic_convolution_kernel(v2);
}

void std::__shared_ptr_emplace<Espresso::HXSimEngine::context>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB6A48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::HXSimEngine::context>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB6A48;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::HXSimEngine::context>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 48))(a1 + 24);
}

void std::__shared_ptr_emplace<Espresso::HXSimEngine::blob_container>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB6850;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::HXSimEngine::blob_container>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB6850;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::HXSimEngine::blob_container>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::MetalLowmemEngine::generic_wg_transform_4_in_kernel::~generic_wg_transform_4_in_kernel(id *this)
{

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::MetalLowmemEngine::generic_wg_transform_4_in_kernel::__launch(uint64_t a1, uint64_t a2, const void ***a3, const void ***a4)
{
  const void **v7;
  const void *v8;
  _DWORD *v9;
  _DWORD *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  const void **v14;
  const void *v15;
  _QWORD *v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  id *v21;
  id *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  const void *v26;
  id *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  id v31;
  int v32;
  int v33;
  int v34;
  MTLFunctionConstantValues *v35;
  MTLFunctionConstantValues *v36;
  unsigned int v37;
  void *v38;
  const void *v39;
  Espresso::context_metal *v40;
  Espresso::context_metal *v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  NSString *v46;
  std::string *v47;
  NSString *v48;
  uint64_t v49;
  void *v50;
  unint64_t *v51;
  unint64_t v52;
  float *v53;
  float v54;
  int v55;
  float v56;
  uint64_t v57;
  void *v58;
  int v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  int v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::runtime_error *exception;
  int64x2_t v77;
  uint64_t v78;
  _QWORD v79[3];
  std::string v80;
  Espresso::context_metal *v81;
  std::__shared_weak_count *v82;
  __int16 v83;
  __int16 v84;
  __int16 v85;
  _DWORD v86[2];
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  __int16 v95;
  __int128 v96;
  id *v97;
  std::__shared_weak_count *v98;
  id *v99;
  std::__shared_weak_count *v100;
  float *v101;
  std::__shared_weak_count *v102;
  float *v103;
  std::__shared_weak_count *v104;

  v7 = *a4;
  v8 = **a4;
  if (v8
  {
    v10 = v9;
    v11 = (std::__shared_weak_count *)v7[1];
    v103 = (float *)v9;
    v104 = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }
  }
  else
  {
    v10 = 0;
    v103 = 0;
    v104 = 0;
  }
  v14 = *a3;
  v15 = **a3;
  if (v15
  {
    v17 = v16;
    v18 = (std::__shared_weak_count *)v14[1];
    v101 = (float *)v16;
    v102 = v18;
    if (v18)
    {
      v19 = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
  }
  else
  {
    v17 = 0;
    v101 = 0;
    v102 = 0;
  }
  if (*(_QWORD *)a2
  {
    v22 = v21;
    v23 = *(std::__shared_weak_count **)(a2 + 8);
    v99 = v21;
    v100 = v23;
    if (v23)
    {
      v24 = (unint64_t *)&v23->__shared_owners_;
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 1, v24));
    }
  }
  else
  {
    v22 = 0;
    v99 = 0;
    v100 = 0;
  }
  v26 = *(const void **)(a1 + 8);
  if (v26
  {
    v28 = *(std::__shared_weak_count **)(a1 + 16);
    v97 = v27;
    v98 = v28;
    if (v28)
    {
      v29 = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
    }
  }
  else
  {
    v97 = 0;
    v98 = 0;
  }
  v31 = v22[19];
  v95 = 0;
  v94 = 0;
  v96 = xmmword_191A935D0;
  v32 = v10[4];
  v88 = v32;
  v89 = 0;
  v33 = *((_DWORD *)v17 + 2);
  v87 = *((_DWORD *)v17 + 3);
  v86[0] = v33;
  v86[1] = v87 * v33;
  v92 = *((_QWORD *)v10 + 1);
  v34 = *(__int16 *)(a1 + 314);
  v90 = *(__int16 *)(a1 + 310);
  v91 = v34;
  v93 = 0;
  if (!*(_QWORD *)(a1 + 328))
  {
    v35 = (MTLFunctionConstantValues *)objc_opt_new();
    v36 = v35;
    v85 = v32;
    v37 = v32 - 1;
    if (v32 < 1)
      v37 = v32 + 2;
    v84 = (v37 >> 2) + 1;
    v83 = 0;
    -[MTLFunctionConstantValues setConstantValue:type:atIndex:](v35, "setConstantValue:type:atIndex:", &v85, 41, 0);
    -[MTLFunctionConstantValues setConstantValue:type:atIndex:](v36, "setConstantValue:type:atIndex:", &v84, 41, 1);
    -[MTLFunctionConstantValues setConstantValue:type:atIndex:](v36, "setConstantValue:type:atIndex:", &v83, 41, 2);
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("k%dx%d_w%dx%d"), *(unsigned int *)(a1 + 280), *(unsigned int *)(a1 + 280), *(unsigned int *)(a1 + 284), *(unsigned int *)(a1 + 284));
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    v39 = *(const void **)(a1 + 8);
    if (v39
    {
      v41 = v40;
      v42 = *(std::__shared_weak_count **)(a1 + 16);
      v81 = v40;
      v82 = v42;
      if (v42)
      {
        v43 = (unint64_t *)&v42->__shared_owners_;
        do
          v44 = __ldxr(v43);
        while (__stxr(v44 + 1, v43));
      }
    }
    else
    {
      v42 = 0;
      v41 = 0;
      v81 = 0;
      v82 = 0;
    }
    if (*((_DWORD *)v41 + 55) == 1)
    {
      objc_msgSend(v38, "stringByAppendingString:", CFSTR("_array"));
      v45 = objc_claimAutoreleasedReturnValue();

      v38 = (void *)v45;
    }
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("wg_transform4_in_%@"), v38);
    v46 = (NSString *)objc_claimAutoreleasedReturnValue();
    std::to_string(&v80, v32);
    if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v47 = &v80;
    else
      v47 = (std::string *)v80.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v47);
    v48 = (NSString *)objc_claimAutoreleasedReturnValue();
    Espresso::context_metal::kernel_for_function(v41, v46, v48, v36);
    v49 = objc_claimAutoreleasedReturnValue();
    v50 = *(void **)(a1 + 328);
    *(_QWORD *)(a1 + 328) = v49;

    if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v80.__r_.__value_.__l.__data_);

    if (v42)
    {
      v51 = (unint64_t *)&v42->__shared_owners_;
      do
        v52 = __ldaxr(v51);
      while (__stlxr(v52 - 1, v51));
      if (!v52)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }

  }
  if (!*(_QWORD *)(a1 + 320))
  {
    v53 = v101;
    if ((*(unsigned int (**)(float *))(*(_QWORD *)v101 + 32))(v101) != 2
      && (*(unsigned int (**)(float *))(*(_QWORD *)v53 + 32))(v53) != 4)
    {
      goto LABEL_62;
    }
    v54 = v53[28] / v103[28];
    *(float *)&v96 = v54;
    v55 = *((_DWORD *)v103 + 29);
    if (v55 == 1)
    {
      if (*((_DWORD *)v53 + 29))
      {
LABEL_62:
        v57 = objc_msgSend(v97[18], "newBufferWithBytes:length:options:", v86, 68, 0);
        v58 = *(void **)(a1 + 320);
        *(_QWORD *)(a1 + 320) = v57;

        goto LABEL_63;
      }
      v56 = 0.5;
    }
    else
    {
      if (v55)
        goto LABEL_62;
      v56 = 2.0;
      if (*((_DWORD *)v53 + 29) != 1)
        goto LABEL_62;
    }
    *(float *)&v96 = v54 * v56;
    goto LABEL_62;
  }
LABEL_63:
  if (!*(_QWORD *)(a1 + 328))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Kernel not found");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  objc_msgSend(v31, "setComputePipelineState:");
  objc_msgSend(v31, "setTexture:atIndex:", *((_QWORD *)v103 + 21), 0);
  objc_msgSend(v31, "setTexture:atIndex:", *((_QWORD *)v101 + 21), 1);
  objc_msgSend(v31, "setBuffer:offset:atIndex:", *(_QWORD *)(a1 + 320), 0, 0);
  v59 = v86[0] + 2;
  if (v86[0] >= 1)
    v59 = v86[0] - 1;
  v60 = (v59 >> 2) + 1;
  v61 = v87 + 2;
  if (v87 >= 1)
    v61 = v87 - 1;
  v62 = (v61 >> 2) + 1;
  v63 = v88 + 6;
  if (v88 >= 1)
    v63 = v88 - 1;
  v79[0] = v60;
  v79[1] = v62;
  v79[2] = (v63 >> 3) + 1;
  v77 = vdupq_n_s64(4uLL);
  v78 = 2;
  objc_msgSend(v31, "dispatchThreadgroups:threadsPerThreadgroup:", v79, &v77);

  v64 = v98;
  if (v98)
  {
    v65 = (unint64_t *)&v98->__shared_owners_;
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  v67 = v100;
  if (v100)
  {
    v68 = (unint64_t *)&v100->__shared_owners_;
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = v102;
  if (v102)
  {
    v71 = (unint64_t *)&v102->__shared_owners_;
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  v73 = v104;
  if (v104)
  {
    v74 = (unint64_t *)&v104->__shared_owners_;
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
}

void sub_1914459C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a26);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v29 - 160);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v29 - 144);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v29 - 128);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v29 - 112);
  _Unwind_Resume(a1);
}

void Espresso::MetalLowmemEngine::generic_wg_transform_4_in_kernel::top_shapes_for_bottom_shapes(uint64_t a1@<X0>, _OWORD **a2@<X1>, _QWORD *a3@<X8>)
{
  _OWORD *v5;
  uint64_t v6;
  __int128 v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  BOOL v20;
  int v21;
  int v22;
  int v23;
  BOOL v24;
  int v25;
  int v26;
  int v27;
  char *v28;
  std::runtime_error *exception;
  std::string *v30;
  __int128 v31;
  std::string v32;
  int __val[4];
  __int128 v34;
  uint64_t v35;
  void *v36;
  _BYTE *v37;
  uint64_t v38;
  _BYTE v39[32];
  uint64_t v40;
  void *__p;
  void *v42;
  uint64_t v43;
  __int128 v44;

  *((_QWORD *)&v44 + 1) = *MEMORY[0x1E0C80C00];
  v5 = *a2;
  v6 = *((_QWORD *)*a2 + 4);
  v7 = (*a2)[1];
  *(_OWORD *)__val = **a2;
  v34 = v7;
  v35 = v6;
  v36 = 0;
  v37 = 0;
  v38 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v36, *((const void **)v5 + 5), *((_QWORD *)v5 + 6), (uint64_t)(*((_QWORD *)v5 + 6) - *((_QWORD *)v5 + 5)) >> 2);
  if (*(_BYTE *)(a1 + 504))
  {
    v9 = __val[0];
    v8 = __val[1];
    v10 = *(__int16 *)(a1 + 428);
    v11 = *(__int16 *)(a1 + 430);
    v12 = *(_DWORD *)(a1 + 280);
    switch(*(_WORD *)(a1 + 408))
    {
      case 0xFFFF:
      case 0:
        v9 = (__val[0] - v12 + *(__int16 *)(a1 + 416) + *(__int16 *)(a1 + 418)) / v10 + 1;
        v13 = __val[1] - v12 + *(__int16 *)(a1 + 420) + *(__int16 *)(a1 + 422);
        goto LABEL_25;
      case 1:
      case 4:
        v9 = (__val[0] - 1) / v10 + 1;
        v13 = __val[1] - 1;
        goto LABEL_25;
      case 2:
        v9 = (__val[0] - v12) / v10 + 1;
        v13 = __val[1] - v12;
LABEL_25:
        v8 = v13 / v11 + 1;
        break;
      case 3:
        v16 = v12 + (v12 < 0);
        v17 = ~(v16 & ~(v16 >> 31));
        if (v10 <= 1)
          v18 = 1;
        else
          v18 = *(__int16 *)(a1 + 428);
        if (v11 <= 1)
          v19 = 1;
        else
          v19 = *(__int16 *)(a1 + 430);
        v20 = v10 < 0;
        if (v10 < 0)
          v21 = 1;
        else
          v21 = v18;
        v22 = v17 | 1;
        v23 = (__val[0] + v22) / v21;
        if (v20)
          v9 = ~v23;
        else
          v9 = v23 + 1;
        v24 = v11 < 0;
        if (v11 < 0)
          v25 = 1;
        else
          v25 = v19;
        v26 = (__val[1] + v22) / v25;
        if (v24)
          v8 = ~v26;
        else
          v8 = v26 + 1;
        break;
      default:
        break;
    }
    v14 = v9 & ~(v9 >> 31);
    v15 = v8 & ~(v8 >> 31);
    *(_DWORD *)(a1 + 296) = v14;
    *(_DWORD *)(a1 + 300) = v15;
  }
  else
  {
    v14 = *(_DWORD *)(a1 + 296);
    v15 = *(_DWORD *)(a1 + 300);
  }
  v27 = *(_DWORD *)(a1 + 284);
  __val[0] = (v14 - 1) / v27 + 1;
  __val[1] = (v15 - 1) / v27 + 1;
  if (__val[3] != 1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v32, __val[3]);
    v30 = std::string::insert(&v32, 0, "Invalid shape: ");
    v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    *(_QWORD *)&v39[16] = *((_QWORD *)&v30->__r_.__value_.__l + 2);
    *(_OWORD *)v39 = v31;
    v30->__r_.__value_.__l.__size_ = 0;
    v30->__r_.__value_.__r.__words[2] = 0;
    v30->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, (const std::string *)v39);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  __val[3] = (v27 + 2) * (v27 + 2);
  *(_OWORD *)v39 = *(_OWORD *)__val;
  *(_OWORD *)&v39[16] = v34;
  v40 = v35;
  __p = 0;
  v42 = 0;
  v43 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v36, (uint64_t)v37, (v37 - (_BYTE *)v36) >> 2);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v32.__r_.__value_.__r.__words[0] = (std::string::size_type)a3;
  v32.__r_.__value_.__s.__data_[8] = 0;
  v28 = (char *)operator new(0x40uLL);
  *a3 = v28;
  a3[1] = v28;
  a3[2] = v28 + 64;
  a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), (__int128 *)v39, &v44, (uint64_t)v28);
  if (__p)
  {
    v42 = __p;
    operator delete(__p);
  }
  if (v36)
  {
    v37 = v36;
    operator delete(v36);
  }
}

void sub_191445D44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33)
{
  void *v33;
  int v34;

  if (a29 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v34 & 1) == 0)
    {
LABEL_8:
      if (a21)
        operator delete(a21);
      _Unwind_Resume(a1);
    }
  }
  else if (!v34)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v33);
  goto LABEL_8;
}

const char *Espresso::generic_wg_transform_4_in_kernel_::kernel_type_str(Espresso::generic_wg_transform_4_in_kernel_ *this)
{
  return "wg_tx_in";
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::wg_transform_params,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

void Espresso::MetalLowmemEngine::generic_wg_transform_4_out_kernel::~generic_wg_transform_4_out_kernel(id *this)
{
  *this = &off_1E2D80DC0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 50));

  Espresso::generic_wg_transform_4_out_kernel_::~generic_wg_transform_4_out_kernel_((Espresso::generic_wg_transform_4_out_kernel_ *)this);
}

{
  *this = &off_1E2D80DC0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 50));

  Espresso::generic_wg_transform_4_out_kernel_::~generic_wg_transform_4_out_kernel_((Espresso::generic_wg_transform_4_out_kernel_ *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::MetalLowmemEngine::generic_wg_transform_4_out_kernel::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, const void ***a4)
{
  const void **v7;
  const void *v8;
  _DWORD *v9;
  _DWORD *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  id *v20;
  id *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  const void *v25;
  id *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  id v30;
  int v31;
  MTLFunctionConstantValues *v32;
  MTLFunctionConstantValues *v33;
  unsigned int v34;
  void *v35;
  uint64_t v36;
  Espresso::context_metal *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  NSString *v42;
  Espresso::context_metal *v43;
  std::string *v44;
  NSString *v45;
  uint64_t v46;
  void *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  float *v51;
  float v52;
  int v53;
  float v54;
  uint64_t v60;
  void *v61;
  void *v62;
  unint64_t v63;
  float *v64;
  int v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  int v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::runtime_error *exception;
  int64x2_t v83;
  uint64_t v84;
  _QWORD v85[3];
  std::string v86;
  Espresso::context_metal *v87;
  std::__shared_weak_count *v88;
  __int16 v89;
  __int16 v90;
  __int16 v91;
  __int128 v92;
  int __val[4];
  __int128 v94;
  __int16 v95;
  __int128 v96;
  id *v97;
  std::__shared_weak_count *v98;
  id *v99;
  std::__shared_weak_count *v100;
  float *v101;
  std::__shared_weak_count *v102;
  _DWORD *v103;
  std::__shared_weak_count *v104;

  v7 = *a4;
  v8 = **a4;
  if (v8
  {
    v10 = v9;
    v11 = (std::__shared_weak_count *)v7[1];
    v103 = v9;
    v104 = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }
  }
  else
  {
    v10 = 0;
    v103 = 0;
    v104 = 0;
  }
  v14 = *a3;
  if (*(_QWORD *)v14
  {
    v16 = v15;
    v17 = *(std::__shared_weak_count **)(v14 + 8);
    v101 = (float *)v15;
    v102 = v17;
    if (v17)
    {
      v18 = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
  }
  else
  {
    v16 = 0;
    v101 = 0;
    v102 = 0;
  }
  if (*(_QWORD *)a2
  {
    v21 = v20;
    v22 = *(std::__shared_weak_count **)(a2 + 8);
    v99 = v20;
    v100 = v22;
    if (v22)
    {
      v23 = (unint64_t *)&v22->__shared_owners_;
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
    }
  }
  else
  {
    v21 = 0;
    v99 = 0;
    v100 = 0;
  }
  v25 = *(const void **)(a1 + 8);
  if (v25
  {
    v27 = *(std::__shared_weak_count **)(a1 + 16);
    v97 = v26;
    v98 = v27;
    if (v27)
    {
      v28 = (unint64_t *)&v27->__shared_owners_;
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
    }
  }
  else
  {
    v97 = 0;
    v98 = 0;
  }
  v30 = v21[19];
  v95 = 0;
  *(_OWORD *)__val = 0u;
  v94 = 0u;
  v92 = 0u;
  v96 = xmmword_191A935D0;
  __val[0] = *((_DWORD *)v16 + 4);
  v95 = *(_WORD *)(a1 + 332);
  v31 = v10[2];
  DWORD2(v92) = v10[3];
  LODWORD(v92) = v31;
  DWORD1(v92) = DWORD2(v92) * v31;
  *(_QWORD *)((char *)&v94 + 4) = v16[1];
  if (!*(_QWORD *)(a1 + 368))
  {
    v32 = (MTLFunctionConstantValues *)objc_opt_new();
    v33 = v32;
    v91 = __val[0];
    v34 = __val[0] + 2;
    if (__val[0] >= 1)
      v34 = __val[0] - 1;
    v90 = (v34 >> 2) + 1;
    v89 = 0;
    -[MTLFunctionConstantValues setConstantValue:type:atIndex:](v32, "setConstantValue:type:atIndex:", &v91, 41, 0);
    -[MTLFunctionConstantValues setConstantValue:type:atIndex:](v33, "setConstantValue:type:atIndex:", &v90, 41, 1);
    -[MTLFunctionConstantValues setConstantValue:type:atIndex:](v33, "setConstantValue:type:atIndex:", &v89, 41, 2);
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("k%dx%d_w%dx%d"), *(unsigned int *)(a1 + 304), *(unsigned int *)(a1 + 304), *(unsigned int *)(a1 + 308), *(unsigned int *)(a1 + 308));
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    if ((*(unsigned int (**)(_QWORD *))(*v16 + 32))(v16) == 2
      || (*(unsigned int (**)(_QWORD *))(*v16 + 32))(v16) == 4)
    {
      objc_msgSend(v35, "stringByAppendingString:", CFSTR("_u8"));
      v36 = objc_claimAutoreleasedReturnValue();

      v35 = (void *)v36;
    }
    v38 = *(std::__shared_weak_count **)(a1 + 16);
    v87 = v37;
    v88 = v38;
    if (v38)
    {
      v39 = (unint64_t *)&v38->__shared_owners_;
      do
        v40 = __ldxr(v39);
      while (__stxr(v40 + 1, v39));
    }
    if (*((_DWORD *)v37 + 55) == 1)
    {
      objc_msgSend(v35, "stringByAppendingString:", CFSTR("_array"));
      v41 = objc_claimAutoreleasedReturnValue();

      v35 = (void *)v41;
    }
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("wg_transform4_out_%@"), v35);
    v42 = (NSString *)objc_claimAutoreleasedReturnValue();
    std::to_string(&v86, __val[0]);
    v43 = v87;
    if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v44 = &v86;
    else
      v44 = (std::string *)v86.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v44);
    v45 = (NSString *)objc_claimAutoreleasedReturnValue();
    Espresso::context_metal::kernel_for_function(v43, v42, v45, v33);
    v46 = objc_claimAutoreleasedReturnValue();
    v47 = *(void **)(a1 + 368);
    *(_QWORD *)(a1 + 368) = v46;

    if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v86.__r_.__value_.__l.__data_);

    v48 = v88;
    if (v88)
    {
      v49 = (unint64_t *)&v88->__shared_owners_;
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v50 - 1, v49));
      if (!v50)
      {
        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
        std::__shared_weak_count::__release_weak(v48);
      }
    }

  }
  if (!*(_QWORD *)(a1 + 360))
  {
    v51 = v101;
    if ((*(unsigned int (**)(float *))(*(_QWORD *)v101 + 32))(v101) != 2
      && (*(unsigned int (**)(float *))(*(_QWORD *)v51 + 32))(v51) != 4)
    {
      __asm { FMOV            V0.2S, #1.0 }
      *(_QWORD *)&v96 = _D0;
      goto LABEL_62;
    }
    v52 = v51[28];
    *(_QWORD *)&v96 = LODWORD(v52) | 0x3F80000000000000;
    v53 = v103[29];
    if (v53 == 1)
    {
      if (*((_DWORD *)v51 + 29))
      {
LABEL_62:
        v60 = objc_msgSend(v97[18], "newBufferWithBytes:length:options:", &v92, 68, 0);
        v61 = *(void **)(a1 + 360);
        *(_QWORD *)(a1 + 360) = v60;

        goto LABEL_63;
      }
      v54 = v52 * 0.5;
    }
    else
    {
      if (v53 || *((_DWORD *)v51 + 29) != 1)
        goto LABEL_62;
      v54 = v52 + v52;
    }
    *(float *)&v96 = v54;
    goto LABEL_62;
  }
LABEL_63:
  v62 = *(void **)(a1 + 376);
  if (!v62)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "bias buffer not set");
    goto LABEL_99;
  }
  v63 = objc_msgSend(v62, "length");
  if (v63 < 4 * __val[0])
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "bias buffer too small");
    goto LABEL_99;
  }
  if (!*(_QWORD *)(a1 + 368))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Kernel not found");
LABEL_99:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  objc_msgSend(v30, "setComputePipelineState:");
  objc_msgSend(v30, "setTexture:atIndex:", *((_QWORD *)v103 + 21), 0);
  v64 = v101;
  objc_msgSend(v30, "setTexture:atIndex:", *((_QWORD *)v101 + 21), 1);
  objc_msgSend(v30, "setBuffer:offset:atIndex:", *(_QWORD *)(a1 + 360), 0, 0);
  objc_msgSend(v30, "setBuffer:offset:atIndex:", *(_QWORD *)(a1 + 376), 0, 1);
  if ((*(unsigned int (**)(float *))(*(_QWORD *)v64 + 32))(v64) == 2
    || (*(unsigned int (**)(float *))(*(_QWORD *)v64 + 32))(v64) == 4)
  {
    objc_msgSend(v30, "setBuffer:offset:atIndex:", *(_QWORD *)(a1 + 392), 0, 2);
  }
  v65 = v92 + 2;
  if ((int)v92 >= 1)
    v65 = v92 - 1;
  v66 = (v65 >> 2) + 1;
  v67 = DWORD2(v92) + 2;
  if (SDWORD2(v92) >= 1)
    v67 = DWORD2(v92) - 1;
  v68 = (v67 >> 2) + 1;
  v69 = __val[0] + 2;
  if (__val[0] >= 1)
    v69 = __val[0] - 1;
  v85[0] = v66;
  v85[1] = v68;
  v85[2] = (v69 >> 2) + 1;
  v83 = vdupq_n_s64(4uLL);
  v84 = 1;
  objc_msgSend(v30, "dispatchThreadgroups:threadsPerThreadgroup:", v85, &v83);

  v70 = v98;
  if (v98)
  {
    v71 = (unint64_t *)&v98->__shared_owners_;
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  v73 = v100;
  if (v100)
  {
    v74 = (unint64_t *)&v100->__shared_owners_;
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  v76 = v102;
  if (v102)
  {
    v77 = (unint64_t *)&v102->__shared_owners_;
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  v79 = v104;
  if (v104)
  {
    v80 = (unint64_t *)&v104->__shared_owners_;
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
}

void sub_19144662C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25)
{
  void *v25;
  void *v26;
  void *v27;
  uint64_t v28;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a25);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v28 - 144);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v28 - 128);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v28 - 112);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v28 - 96);
  _Unwind_Resume(a1);
}

void Espresso::MetalLowmemEngine::generic_wg_transform_4_out_kernel::clear_weights(Espresso::MetalLowmemEngine::generic_wg_transform_4_out_kernel *this)
{
  char *v2;
  void *v3;

  v2 = (char *)this + 288;
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*((_QWORD **)this + 36));
  *((_QWORD *)this + 36) = 0;
  *((_QWORD *)this + 37) = 0;
  *((_QWORD *)this + 35) = v2;
  v3 = (void *)*((_QWORD *)this + 47);
  *((_QWORD *)this + 47) = 0;

}

void Espresso::MetalLowmemEngine::generic_wg_transform_4_out_kernel::top_shapes_for_bottom_shapes(uint64_t a1@<X0>, __int128 **a2@<X1>, _QWORD *a3@<X8>)
{
  __int128 *v5;
  uint64_t v6;
  _DWORD *v7;
  char *v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  void *v12;
  _BYTE *v13;
  uint64_t v14;
  _QWORD *v15;
  char v16;
  __int128 v17[2];
  uint64_t v18;
  void *__p;
  void *v20;
  uint64_t v21;
  __int128 v22;

  *((_QWORD *)&v22 + 1) = *MEMORY[0x1E0C80C00];
  v5 = *a2;
  v9 = **a2;
  v10 = (*a2)[1];
  v11 = *((_QWORD *)*a2 + 4);
  v12 = 0;
  v13 = 0;
  v14 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v12, *((const void **)v5 + 5), *((_QWORD *)v5 + 6), (uint64_t)(*((_QWORD *)v5 + 6) - *((_QWORD *)v5 + 5)) >> 2);
  v6 = *(_QWORD *)(a1 + 400);
  if (v6)
  {
    LODWORD(v9) = *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 320))(v6) + 16);
    v7 = (_DWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 400) + 320))(*(_QWORD *)(a1 + 400)) + 20);
  }
  else
  {
    LODWORD(v9) = *(_DWORD *)(a1 + 320);
    v7 = (_DWORD *)(a1 + 324);
  }
  DWORD1(v9) = *v7;
  HIDWORD(v9) = 1;
  v17[0] = v9;
  v17[1] = v10;
  v18 = v11;
  __p = 0;
  v20 = 0;
  v21 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v12, (uint64_t)v13, (v13 - (_BYTE *)v12) >> 2);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v15 = a3;
  v16 = 0;
  v8 = (char *)operator new(0x40uLL);
  *a3 = v8;
  a3[1] = v8;
  a3[2] = v8 + 64;
  a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), v17, &v22, (uint64_t)v8);
  if (__p)
  {
    v20 = __p;
    operator delete(__p);
  }
  if (v12)
  {
    v13 = v12;
    operator delete(v12);
  }
}

void sub_191446878(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void **a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v27 = v26;
  *(_QWORD *)(v25 + 8) = v27;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&a17);
  if (__p)
  {
    a25 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a14)
    operator delete(a14);
  _Unwind_Resume(a1);
}

void Espresso::MetalLowmemEngine::generic_wg_transform_4_out_kernel::__set_weight_raw_blob(_QWORD *a1, uint64_t a2, _DWORD *a3, uint64_t a4, uint64_t a5)
{
  int v8;
  uint64_t v9;
  const void *v11;
  id *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  unint64_t *v18;
  unint64_t v19;
  int v21;
  const void *v23;
  id *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  void *v28;
  unint64_t *v29;
  const void *v30;
  id *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  uint64_t v34;
  void *v35;
  unint64_t *v36;
  std::runtime_error *exception;
  std::runtime_error *v38;
  std::runtime_error *v39;

  if ((*((char *)a3 + 23) & 0x80000000) == 0)
  {
    v8 = *((unsigned __int8 *)a3 + 23);
    if (v8 != 4)
    {
      if (v8 != 9)
      {
        if (v8 != 12)
          return;
        goto LABEL_10;
      }
      if (*(_QWORD *)a3 != 0x6C6163735F74756FLL || *((_BYTE *)a3 + 8) != 101)
        return;
      goto LABEL_36;
    }
    v21 = *a3;
LABEL_46:
    if (v21 == 1935763810)
    {
      v30 = (const void *)a1[1];
      if (!v30
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
        exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
      }
      v13 = (std::__shared_weak_count *)a1[2];
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v33 = __ldxr(p_shared_owners);
        while (__stxr(v33 + 1, p_shared_owners));
      }
      v34 = objc_msgSend(v31[18], "newBufferWithBytes:length:options:", a4, a5, 0, v31, v13);
      v35 = (void *)a1[47];
      a1[47] = v34;

      if (v13)
      {
        v36 = (unint64_t *)&v13->__shared_owners_;
        do
          v19 = __ldaxr(v36);
        while (__stlxr(v19 - 1, v36));
        goto LABEL_55;
      }
    }
    return;
  }
  v9 = *((_QWORD *)a3 + 1);
  if (v9 == 4)
  {
    v21 = **(_DWORD **)a3;
    goto LABEL_46;
  }
  if (v9 != 9)
  {
    if (v9 != 12)
      return;
    a3 = *(_DWORD **)a3;
LABEL_10:
    if (*(_QWORD *)a3 == 0x63735F6E695F7868 && a3[2] == 1936026721)
    {
      v11 = (const void *)a1[1];
      if (!v11
      {
        v39 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v39, "Espresso: wrong_context_type");
        v39->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
      }
      v13 = (std::__shared_weak_count *)a1[2];
      if (v13)
      {
        v14 = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
      v16 = objc_msgSend(v12[18], "newBufferWithBytes:length:options:", a4, a5, 0, v12, v13);
      v17 = (void *)a1[49];
      a1[49] = v16;

      if (v13)
      {
        v18 = (unint64_t *)&v13->__shared_owners_;
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
LABEL_55:
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
        return;
      }
    }
    return;
  }
  if (**(_QWORD **)a3 != 0x6C6163735F74756FLL || *(_BYTE *)(*(_QWORD *)a3 + 8) != 101)
    return;
LABEL_36:
  v23 = (const void *)a1[1];
  if (!v23
  {
    v38 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v38, "Espresso: wrong_context_type");
    v38->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
  }
  v13 = (std::__shared_weak_count *)a1[2];
  if (v13)
  {
    v25 = (unint64_t *)&v13->__shared_owners_;
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  v27 = objc_msgSend(v24[18], "newBufferWithBytes:length:options:", a4, a5, 0, v24, v13);
  v28 = (void *)a1[48];
  a1[48] = v27;

  if (v13)
  {
    v29 = (unint64_t *)&v13->__shared_owners_;
    do
      v19 = __ldaxr(v29);
    while (__stlxr(v19 - 1, v29));
    goto LABEL_55;
  }
}

void sub_191446C54(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x191446B74);
  }
  _Unwind_Resume(a1);
}

BOOL Espresso::MetalLowmemEngine::generic_wg_transform_4_out_kernel::supports_weight_key(uint64_t a1, int **a2)
{
  int v2;
  int *v3;
  int v4;
  BOOL v5;
  int v6;
  int v8;

  if (*((char *)a2 + 23) < 0)
  {
    v3 = a2[1];
    if (v3 != (int *)4)
    {
      if (v3 == (int *)9)
        return *(_QWORD *)*a2 == 0x6C6163735F74756FLL && *((_BYTE *)*a2 + 8) == 101;
      if (v3 != (int *)12)
        return 0;
      a2 = (int **)*a2;
      goto LABEL_10;
    }
    v8 = **a2;
  }
  else
  {
    v2 = *((unsigned __int8 *)a2 + 23);
    if (v2 != 4)
    {
      if (v2 == 9)
      {
        v4 = *((unsigned __int8 *)a2 + 8);
        v5 = *a2 == (int *)0x6C6163735F74756FLL;
        v6 = 101;
        return v5 && v4 == v6;
      }
      if (v2 != 12)
        return 0;
LABEL_10:
      v4 = *((_DWORD *)a2 + 2);
      v5 = *a2 == (int *)0x63735F6E695F7868;
      v6 = 1936026721;
      return v5 && v4 == v6;
    }
    v8 = *(_DWORD *)a2;
  }
  return v8 == 1935763810;
}

const char *Espresso::generic_wg_transform_4_out_kernel_::kernel_type_str(Espresso::generic_wg_transform_4_out_kernel_ *this)
{
  return "wg_tx_out";
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::wg_transform_params,Espresso::abstract_kernel_with_weights_>::get_params(uint64_t a1)
{
  return a1 + 304;
}

const char *Espresso::generic_wg_transform_weights_3x3_kernel_::kernel_type_str(Espresso::generic_wg_transform_weights_3x3_kernel_ *this)
{
  return "wg_tx_transform_weights";
}

void Espresso::MetalLowmemEngine::wg_transform_weights_cpu(uint64_t *a1, _QWORD *a2, uint64_t a3, std::__shared_weak_count *a4, _DWORD *a5, uint64_t a6)
{
  std::__shared_weak_count *v8;
  int v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::string::size_type v19;
  int v20;
  uint64_t i;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  __int128 v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  std::string::size_type v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  float *v42;
  float *v43;
  std::__shared_weak_count *v44;
  __int128 v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t *p_shared_owners;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  std::string::size_type v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  std::string::size_type v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::string::size_type v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  unint64_t *v75;
  int v76;
  uint64_t v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  int v85;
  uint64_t v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  int v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  std::runtime_error *exception;
  std::string *v102;
  __int128 v103;
  std::string *v104;
  __int128 v105;
  std::string *v106;
  std::string::size_type size;
  std::string *v108;
  __int128 v109;
  std::runtime_error *v110;
  std::runtime_error *v111;
  std::string v112;
  std::string v113;
  std::string v114;
  std::string v115;
  std::string v116;
  uint64_t v117;
  std::__shared_weak_count *v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  uint64_t v121;
  std::__shared_weak_count *v122;
  __int128 v123;

  v123 = 0uLL;
  if (a5[12] != 3 || a5[13] != 3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v113, a5[12]);
    v102 = std::string::insert(&v113, 0, "Kernel size not supported ");
    v103 = *(_OWORD *)&v102->__r_.__value_.__l.__data_;
    v114.__r_.__value_.__r.__words[2] = v102->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v114.__r_.__value_.__l.__data_ = v103;
    v102->__r_.__value_.__l.__size_ = 0;
    v102->__r_.__value_.__r.__words[2] = 0;
    v102->__r_.__value_.__r.__words[0] = 0;
    v104 = std::string::append(&v114, "/");
    v105 = *(_OWORD *)&v104->__r_.__value_.__l.__data_;
    v115.__r_.__value_.__r.__words[2] = v104->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v115.__r_.__value_.__l.__data_ = v105;
    v104->__r_.__value_.__l.__size_ = 0;
    v104->__r_.__value_.__r.__words[2] = 0;
    v104->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v112, a5[13]);
    if ((v112.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v106 = &v112;
    else
      v106 = (std::string *)v112.__r_.__value_.__r.__words[0];
    if ((v112.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v112.__r_.__value_.__r.__words[2]);
    else
      size = v112.__r_.__value_.__l.__size_;
    v108 = std::string::append(&v115, (const std::string::value_type *)v106, size);
    v109 = *(_OWORD *)&v108->__r_.__value_.__l.__data_;
    v116.__r_.__value_.__r.__words[2] = v108->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v116.__r_.__value_.__l.__data_ = v109;
    v108->__r_.__value_.__l.__size_ = 0;
    v108->__r_.__value_.__r.__words[2] = 0;
    v108->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v116);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v8 = a4;
  v12 = *(_DWORD *)(a6 + 4);
  if (v12 == 6)
  {
    v117 = a3;
    v118 = a4;
    if (a4)
    {
      p_shared_owners = (unint64_t *)&a4->__shared_owners_;
      do
        v49 = __ldxr(p_shared_owners);
      while (__stxr(v49 + 1, p_shared_owners));
    }
    v50 = *(unsigned int *)(a3 + 16);
    v51 = *(unsigned int *)(a3 + 20);
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v116, 8, 8, *(_DWORD *)(a3 + 16), *(_DWORD *)(a3 + 20));
    if ((int)v51 >= 1)
    {
      v52 = 0;
      v53 = 0;
      v54 = v116.__r_.__value_.__r.__words[0];
      v17 = 0x900000000;
      do
      {
        if ((int)v50 >= 1)
        {
          v55 = 0;
          v56 = *(_QWORD *)(a3 + 24) + 36 * (int)v50 * (int)v53;
          v57 = *(_QWORD *)(v54 + 24) + 4 * v52 + 128;
          v58 = v50;
          do
          {
            v59 = v56 + (v55 >> 30);
            *(_DWORD *)(v57 - 128) = *(_DWORD *)v59;
            *(float *)(v57 - 124) = (float)((float)((float)(*(float *)v59 * -2.0) / 9.0)
                                          - (float)((float)(*(float *)(v59 + 4) + *(float *)(v59 + 4)) / 9.0))
                                  - (float)((float)(*(float *)(v59 + 8) + *(float *)(v59 + 8)) / 9.0);
            *(float *)(v57 - 120) = (float)((float)((float)(*(float *)(v59 + 4) + *(float *)(v59 + 4)) / 9.0)
                                          - (float)((float)(*(float *)v59 + *(float *)v59) / 9.0))
                                  - (float)((float)(*(float *)(v59 + 8) + *(float *)(v59 + 8)) / 9.0);
            *(float *)(v57 - 116) = (float)((float)(*(float *)v59 / 90.0) + (float)(*(float *)(v59 + 4) / 45.0))
                                  + (float)((float)(*(float *)(v59 + 8) + *(float *)(v59 + 8)) / 45.0);
            *(float *)(v57 - 112) = (float)((float)(*(float *)v59 / 90.0) - (float)(*(float *)(v59 + 4) / 45.0))
                                  + (float)((float)(*(float *)(v59 + 8) + *(float *)(v59 + 8)) / 45.0);
            *(float *)(v57 - 108) = (float)((float)((float)(*(float *)v59 * 32.0) / 45.0)
                                          + (float)((float)(*(float *)(v59 + 4) * 16.0) / 45.0))
                                  + (float)((float)(*(float *)(v59 + 8) * 8.0) / 45.0);
            *(float *)(v57 - 104) = (float)((float)((float)(*(float *)v59 * 32.0) / 45.0)
                                          - (float)((float)(*(float *)(v59 + 4) * 16.0) / 45.0))
                                  + (float)((float)(*(float *)(v59 + 8) * 8.0) / 45.0);
            *(_DWORD *)(v57 - 100) = *(_DWORD *)(v59 + 8);
            *(float *)(v57 - 96) = (float)((float)((float)(*(float *)v59 * -2.0) / 9.0)
                                         - (float)((float)(*(float *)(v59 + 12) + *(float *)(v59 + 12)) / 9.0))
                                 - (float)((float)(*(float *)(v59 + 24) + *(float *)(v59 + 24)) / 9.0);
            *(float *)(v57 - 92) = (float)((float)((float)((float)((float)((float)((float)((float)((float)(*(float *)v59 * 4.0)
                                                                                                 / 81.0)
                                                                                         + (float)((float)(*(float *)(v59 + 12) * 4.0)
                                                                                                 / 81.0))
                                                                                 + (float)((float)(*(float *)(v59 + 24)
                                                                                                 * 4.0)
                                                                                         / 81.0))
                                                                         + (float)((float)(*(float *)(v59 + 4) * 4.0)
                                                                                 / 81.0))
                                                                 + (float)((float)(*(float *)(v59 + 16) * 4.0) / 81.0))
                                                         + (float)((float)(*(float *)(v59 + 28) * 4.0) / 81.0))
                                                 + (float)((float)(*(float *)(v59 + 8) * 4.0) / 81.0))
                                         + (float)((float)(*(float *)(v59 + 20) * 4.0) / 81.0))
                                 + (float)((float)(*(float *)(v59 + 32) * 4.0) / 81.0);
            *(float *)(v57 - 88) = (float)((float)((float)((float)((float)((float)((float)((float)((float)(*(float *)v59 * 4.0)
                                                                                                 / 81.0)
                                                                                         + (float)((float)(*(float *)(v59 + 12) * 4.0)
                                                                                                 / 81.0))
                                                                                 + (float)((float)(*(float *)(v59 + 24)
                                                                                                 * 4.0)
                                                                                         / 81.0))
                                                                         - (float)((float)(*(float *)(v59 + 4) * 4.0)
                                                                                 / 81.0))
                                                                 - (float)((float)(*(float *)(v59 + 16) * 4.0) / 81.0))
                                                         - (float)((float)(*(float *)(v59 + 28) * 4.0) / 81.0))
                                                 + (float)((float)(*(float *)(v59 + 8) * 4.0) / 81.0))
                                         + (float)((float)(*(float *)(v59 + 20) * 4.0) / 81.0))
                                 + (float)((float)(*(float *)(v59 + 32) * 4.0) / 81.0);
            *(float *)(v57 - 84) = (float)((float)((float)((float)((float)((float)((float)((float)(*(float *)v59 / -405.0)
                                                                                         + (float)(*(float *)(v59 + 12)
                                                                                                 / -405.0))
                                                                                 + (float)(*(float *)(v59 + 24) / -405.0))
                                                                         + (float)((float)(*(float *)(v59 + 4)
                                                                                         + *(float *)(v59 + 4))
                                                                                 / -405.0))
                                                                 + (float)((float)(*(float *)(v59 + 16)
                                                                                 + *(float *)(v59 + 16))
                                                                         / -405.0))
                                                         + (float)((float)(*(float *)(v59 + 28) + *(float *)(v59 + 28))
                                                                 / -405.0))
                                                 + (float)((float)(*(float *)(v59 + 8) * 4.0) / -405.0))
                                         + (float)((float)(*(float *)(v59 + 20) * 4.0) / -405.0))
                                 + (float)((float)(*(float *)(v59 + 32) * 4.0) / -405.0);
            *(float *)(v57 - 80) = (float)((float)((float)((float)((float)((float)((float)((float)(*(float *)v59 / -405.0)
                                                                                         + (float)(*(float *)(v59 + 12)
                                                                                                 / -405.0))
                                                                                 + (float)(*(float *)(v59 + 24) / -405.0))
                                                                         + (float)((float)(*(float *)(v59 + 4)
                                                                                         + *(float *)(v59 + 4))
                                                                                 / 405.0))
                                                                 + (float)((float)(*(float *)(v59 + 16)
                                                                                 + *(float *)(v59 + 16))
                                                                         / 405.0))
                                                         + (float)((float)(*(float *)(v59 + 28) + *(float *)(v59 + 28))
                                                                 / 405.0))
                                                 + (float)((float)(*(float *)(v59 + 8) * 4.0) / -405.0))
                                         + (float)((float)(*(float *)(v59 + 20) * 4.0) / -405.0))
                                 + (float)((float)(*(float *)(v59 + 32) * 4.0) / -405.0);
            *(float *)(v57 - 76) = (float)((float)((float)((float)((float)((float)((float)((float)((float)(*(float *)v59 * -64.0)
                                                                                                 / 405.0)
                                                                                         + (float)((float)(*(float *)(v59 + 12) * -64.0)
                                                                                                 / 405.0))
                                                                                 + (float)((float)(*(float *)(v59 + 24)
                                                                                                 * -64.0)
                                                                                         / 405.0))
                                                                         + (float)((float)(*(float *)(v59 + 4) * 32.0)
                                                                                 / -405.0))
                                                                 + (float)((float)(*(float *)(v59 + 16) * 32.0) / -405.0))
                                                         + (float)((float)(*(float *)(v59 + 28) * 32.0) / -405.0))
                                                 + (float)((float)(*(float *)(v59 + 8) * 16.0) / -405.0))
                                         + (float)((float)(*(float *)(v59 + 20) * 16.0) / -405.0))
                                 + (float)((float)(*(float *)(v59 + 32) * 16.0) / -405.0);
            *(float *)(v57 - 72) = (float)((float)((float)((float)((float)((float)((float)((float)((float)(*(float *)v59 * -64.0)
                                                                                                 / 405.0)
                                                                                         + (float)((float)(*(float *)(v59 + 12) * -64.0)
                                                                                                 / 405.0))
                                                                                 + (float)((float)(*(float *)(v59 + 24)
                                                                                                 * -64.0)
                                                                                         / 405.0))
                                                                         + (float)((float)(*(float *)(v59 + 4) * 32.0)
                                                                                 / 405.0))
                                                                 + (float)((float)(*(float *)(v59 + 16) * 32.0) / 405.0))
                                                         + (float)((float)(*(float *)(v59 + 28) * 32.0) / 405.0))
                                                 + (float)((float)(*(float *)(v59 + 8) * 16.0) / -405.0))
                                         + (float)((float)(*(float *)(v59 + 20) * 16.0) / -405.0))
                                 + (float)((float)(*(float *)(v59 + 32) * 16.0) / -405.0);
            *(float *)(v57 - 68) = (float)((float)((float)(*(float *)(v59 + 8) * -2.0) / 9.0)
                                         - (float)((float)(*(float *)(v59 + 20) + *(float *)(v59 + 20)) / 9.0))
                                 - (float)((float)(*(float *)(v59 + 32) + *(float *)(v59 + 32)) / 9.0);
            *(float *)(v57 - 64) = (float)((float)((float)(*(float *)(v59 + 12) + *(float *)(v59 + 12)) / 9.0)
                                         - (float)((float)(*(float *)v59 + *(float *)v59) / 9.0))
                                 - (float)((float)(*(float *)(v59 + 24) + *(float *)(v59 + 24)) / 9.0);
            *(float *)(v57 - 60) = (float)((float)((float)((float)((float)((float)((float)((float)((float)(*(float *)v59 * 4.0)
                                                                                                 / 81.0)
                                                                                         - (float)((float)(*(float *)(v59 + 12) * 4.0)
                                                                                                 / 81.0))
                                                                                 + (float)((float)(*(float *)(v59 + 24)
                                                                                                 * 4.0)
                                                                                         / 81.0))
                                                                         + (float)((float)(*(float *)(v59 + 4) * 4.0)
                                                                                 / 81.0))
                                                                 - (float)((float)(*(float *)(v59 + 16) * 4.0) / 81.0))
                                                         + (float)((float)(*(float *)(v59 + 28) * 4.0) / 81.0))
                                                 + (float)((float)(*(float *)(v59 + 8) * 4.0) / 81.0))
                                         - (float)((float)(*(float *)(v59 + 20) * 4.0) / 81.0))
                                 + (float)((float)(*(float *)(v59 + 32) * 4.0) / 81.0);
            *(float *)(v57 - 56) = (float)((float)((float)((float)((float)((float)((float)((float)((float)(*(float *)v59 * 4.0)
                                                                                                 / 81.0)
                                                                                         - (float)((float)(*(float *)(v59 + 12) * 4.0)
                                                                                                 / 81.0))
                                                                                 + (float)((float)(*(float *)(v59 + 24)
                                                                                                 * 4.0)
                                                                                         / 81.0))
                                                                         - (float)((float)(*(float *)(v59 + 4) * 4.0)
                                                                                 / 81.0))
                                                                 + (float)((float)(*(float *)(v59 + 16) * 4.0) / 81.0))
                                                         - (float)((float)(*(float *)(v59 + 28) * 4.0) / 81.0))
                                                 + (float)((float)(*(float *)(v59 + 8) * 4.0) / 81.0))
                                         - (float)((float)(*(float *)(v59 + 20) * 4.0) / 81.0))
                                 + (float)((float)(*(float *)(v59 + 32) * 4.0) / 81.0);
            *(float *)(v57 - 52) = (float)((float)((float)((float)((float)((float)((float)((float)(*(float *)(v59 + 12)
                                                                                                 / 405.0)
                                                                                         + (float)(*(float *)v59 / -405.0))
                                                                                 + (float)(*(float *)(v59 + 24) / -405.0))
                                                                         + (float)((float)(*(float *)(v59 + 4)
                                                                                         + *(float *)(v59 + 4))
                                                                                 / -405.0))
                                                                 + (float)((float)(*(float *)(v59 + 16)
                                                                                 + *(float *)(v59 + 16))
                                                                         / 405.0))
                                                         + (float)((float)(*(float *)(v59 + 28) + *(float *)(v59 + 28))
                                                                 / -405.0))
                                                 + (float)((float)(*(float *)(v59 + 8) * 4.0) / -405.0))
                                         + (float)((float)(*(float *)(v59 + 20) * 4.0) / 405.0))
                                 + (float)((float)(*(float *)(v59 + 32) * 4.0) / -405.0);
            *(float *)(v57 - 48) = (float)((float)((float)((float)((float)((float)((float)((float)(*(float *)(v59 + 12)
                                                                                                 / 405.0)
                                                                                         + (float)(*(float *)v59 / -405.0))
                                                                                 + (float)(*(float *)(v59 + 24) / -405.0))
                                                                         + (float)((float)(*(float *)(v59 + 4)
                                                                                         + *(float *)(v59 + 4))
                                                                                 / 405.0))
                                                                 + (float)((float)(*(float *)(v59 + 16)
                                                                                 + *(float *)(v59 + 16))
                                                                         / -405.0))
                                                         + (float)((float)(*(float *)(v59 + 28) + *(float *)(v59 + 28))
                                                                 / 405.0))
                                                 + (float)((float)(*(float *)(v59 + 8) * 4.0) / -405.0))
                                         + (float)((float)(*(float *)(v59 + 20) * 4.0) / 405.0))
                                 + (float)((float)(*(float *)(v59 + 32) * 4.0) / -405.0);
            *(float *)(v57 - 44) = (float)((float)((float)((float)((float)((float)((float)((float)((float)(*(float *)(v59 + 12) * 64.0)
                                                                                                 / 405.0)
                                                                                         + (float)((float)(*(float *)v59 * -64.0)
                                                                                                 / 405.0))
                                                                                 + (float)((float)(*(float *)(v59 + 24)
                                                                                                 * -64.0)
                                                                                         / 405.0))
                                                                         + (float)((float)(*(float *)(v59 + 4) * 32.0)
                                                                                 / -405.0))
                                                                 + (float)((float)(*(float *)(v59 + 16) * 32.0) / 405.0))
                                                         + (float)((float)(*(float *)(v59 + 28) * 32.0) / -405.0))
                                                 + (float)((float)(*(float *)(v59 + 8) * 16.0) / -405.0))
                                         + (float)((float)(*(float *)(v59 + 20) * 16.0) / 405.0))
                                 + (float)((float)(*(float *)(v59 + 32) * 16.0) / -405.0);
            *(float *)(v57 - 40) = (float)((float)((float)((float)((float)((float)((float)((float)((float)(*(float *)(v59 + 12) * 64.0)
                                                                                                 / 405.0)
                                                                                         + (float)((float)(*(float *)v59 * -64.0)
                                                                                                 / 405.0))
                                                                                 + (float)((float)(*(float *)(v59 + 24)
                                                                                                 * -64.0)
                                                                                         / 405.0))
                                                                         + (float)((float)(*(float *)(v59 + 4) * 32.0)
                                                                                 / 405.0))
                                                                 + (float)((float)(*(float *)(v59 + 16) * 32.0) / -405.0))
                                                         + (float)((float)(*(float *)(v59 + 28) * 32.0) / 405.0))
                                                 + (float)((float)(*(float *)(v59 + 8) * 16.0) / -405.0))
                                         + (float)((float)(*(float *)(v59 + 20) * 16.0) / 405.0))
                                 + (float)((float)(*(float *)(v59 + 32) * 16.0) / -405.0);
            *(float *)(v57 - 36) = (float)((float)((float)(*(float *)(v59 + 20) + *(float *)(v59 + 20)) / 9.0)
                                         - (float)((float)(*(float *)(v59 + 8) + *(float *)(v59 + 8)) / 9.0))
                                 - (float)((float)(*(float *)(v59 + 32) + *(float *)(v59 + 32)) / 9.0);
            *(float *)(v57 - 32) = (float)((float)(*(float *)v59 / 90.0) + (float)(*(float *)(v59 + 12) / 45.0))
                                 + (float)((float)(*(float *)(v59 + 24) + *(float *)(v59 + 24)) / 45.0);
            *(float *)(v57 - 28) = (float)((float)((float)((float)((float)((float)((float)((float)(*(float *)v59 / -405.0)
                                                                                         + (float)((float)(*(float *)(v59 + 12) + *(float *)(v59 + 12))
                                                                                                 / -405.0))
                                                                                 + (float)((float)(*(float *)(v59 + 24)
                                                                                                 * 4.0)
                                                                                         / -405.0))
                                                                         + (float)(*(float *)(v59 + 4) / -405.0))
                                                                 + (float)((float)(*(float *)(v59 + 16)
                                                                                 + *(float *)(v59 + 16))
                                                                         / -405.0))
                                                         + (float)((float)(*(float *)(v59 + 28) * 4.0) / -405.0))
                                                 + (float)(*(float *)(v59 + 8) / -405.0))
                                         + (float)((float)(*(float *)(v59 + 20) + *(float *)(v59 + 20)) / -405.0))
                                 + (float)((float)(*(float *)(v59 + 32) * 4.0) / -405.0);
            *(float *)(v57 - 24) = (float)((float)((float)((float)((float)((float)(*(float *)(v59 + 4) / 405.0)
                                                                         + (float)((float)((float)(*(float *)v59 / -405.0)
                                                                                         + (float)((float)(*(float *)(v59 + 12) + *(float *)(v59 + 12))
                                                                                                 / -405.0))
                                                                                 + (float)((float)(*(float *)(v59 + 24)
                                                                                                 * 4.0)
                                                                                         / -405.0)))
                                                                 + (float)((float)(*(float *)(v59 + 16)
                                                                                 + *(float *)(v59 + 16))
                                                                         / 405.0))
                                                         + (float)((float)(*(float *)(v59 + 28) * 4.0) / 405.0))
                                                 + (float)(*(float *)(v59 + 8) / -405.0))
                                         + (float)((float)(*(float *)(v59 + 20) + *(float *)(v59 + 20)) / -405.0))
                                 + (float)((float)(*(float *)(v59 + 32) * 4.0) / -405.0);
            *(float *)(v57 - 20) = (float)((float)((float)(*(float *)(v59 + 8) / 2025.0)
                                                 + (float)((float)((float)((float)((float)((float)(*(float *)v59 / 8100.0)
                                                                                         + (float)(*(float *)(v59 + 12)
                                                                                                 / 4050.0))
                                                                                 + (float)(*(float *)(v59 + 24) / 2025.0))
                                                                         + (float)(*(float *)(v59 + 4) / 4050.0))
                                                                 + (float)(*(float *)(v59 + 16) / 2025.0))
                                                         + (float)((float)(*(float *)(v59 + 28) + *(float *)(v59 + 28))
                                                                 / 2025.0)))
                                         + (float)((float)(*(float *)(v59 + 20) + *(float *)(v59 + 20)) / 2025.0))
                                 + (float)((float)(*(float *)(v59 + 32) * 4.0) / 2025.0);
            *(float *)(v57 - 16) = (float)((float)((float)(*(float *)(v59 + 8) / 2025.0)
                                                 + (float)((float)((float)((float)((float)((float)(*(float *)v59 / 8100.0)
                                                                                         + (float)(*(float *)(v59 + 12)
                                                                                                 / 4050.0))
                                                                                 + (float)(*(float *)(v59 + 24) / 2025.0))
                                                                         - (float)(*(float *)(v59 + 4) / 4050.0))
                                                                 - (float)(*(float *)(v59 + 16) / 2025.0))
                                                         - (float)((float)(*(float *)(v59 + 28) + *(float *)(v59 + 28))
                                                                 / 2025.0)))
                                         + (float)((float)(*(float *)(v59 + 20) + *(float *)(v59 + 20)) / 2025.0))
                                 + (float)((float)(*(float *)(v59 + 32) * 4.0) / 2025.0);
            *(float *)(v57 - 12) = (float)((float)((float)((float)((float)((float)((float)((float)((float)(*(float *)v59 * 16.0)
                                                                                                 / 2025.0)
                                                                                         + (float)((float)(*(float *)(v59 + 12) * 32.0)
                                                                                                 / 2025.0))
                                                                                 + (float)((float)(*(float *)(v59 + 24)
                                                                                                 * 64.0)
                                                                                         / 2025.0))
                                                                         + (float)((float)(*(float *)(v59 + 4) * 8.0)
                                                                                 / 2025.0))
                                                                 + (float)((float)(*(float *)(v59 + 16) * 16.0) / 2025.0))
                                                         + (float)((float)(*(float *)(v59 + 28) * 32.0) / 2025.0))
                                                 + (float)((float)(*(float *)(v59 + 8) * 4.0) / 2025.0))
                                         + (float)((float)(*(float *)(v59 + 20) * 8.0) / 2025.0))
                                 + (float)((float)(*(float *)(v59 + 32) * 16.0) / 2025.0);
            *(float *)(v57 - 8) = (float)((float)((float)((float)((float)((float)((float)((float)((float)(*(float *)v59 * 16.0)
                                                                                                / 2025.0)
                                                                                        + (float)((float)(*(float *)(v59 + 12) * 32.0)
                                                                                                / 2025.0))
                                                                                + (float)((float)(*(float *)(v59 + 24)
                                                                                                * 64.0)
                                                                                        / 2025.0))
                                                                        - (float)((float)(*(float *)(v59 + 4) * 8.0)
                                                                                / 2025.0))
                                                                - (float)((float)(*(float *)(v59 + 16) * 16.0) / 2025.0))
                                                        - (float)((float)(*(float *)(v59 + 28) * 32.0) / 2025.0))
                                                + (float)((float)(*(float *)(v59 + 8) * 4.0) / 2025.0))
                                        + (float)((float)(*(float *)(v59 + 20) * 8.0) / 2025.0))
                                + (float)((float)(*(float *)(v59 + 32) * 16.0) / 2025.0);
            *(float *)(v57 - 4) = (float)((float)(*(float *)(v59 + 8) / 90.0) + (float)(*(float *)(v59 + 20) / 45.0))
                                + (float)((float)(*(float *)(v59 + 32) + *(float *)(v59 + 32)) / 45.0);
            *(float *)v57 = (float)((float)(*(float *)v59 / 90.0) - (float)(*(float *)(v59 + 12) / 45.0))
                          + (float)((float)(*(float *)(v59 + 24) + *(float *)(v59 + 24)) / 45.0);
            *(float *)(v57 + 4) = (float)((float)((float)((float)((float)((float)((float)((float)((float)(*(float *)(v59 + 12) + *(float *)(v59 + 12))
                                                                                                / 405.0)
                                                                                        + (float)(*(float *)v59 / -405.0))
                                                                                + (float)((float)(*(float *)(v59 + 24)
                                                                                                * 4.0)
                                                                                        / -405.0))
                                                                        + (float)(*(float *)(v59 + 4) / -405.0))
                                                                + (float)((float)(*(float *)(v59 + 16)
                                                                                + *(float *)(v59 + 16))
                                                                        / 405.0))
                                                        + (float)((float)(*(float *)(v59 + 28) * 4.0) / -405.0))
                                                + (float)(*(float *)(v59 + 8) / -405.0))
                                        + (float)((float)(*(float *)(v59 + 20) + *(float *)(v59 + 20)) / 405.0))
                                + (float)((float)(*(float *)(v59 + 32) * 4.0) / -405.0);
            *(float *)(v57 + 8) = (float)((float)((float)((float)((float)((float)(*(float *)(v59 + 4) / 405.0)
                                                                        + (float)((float)((float)((float)(*(float *)(v59 + 12) + *(float *)(v59 + 12))
                                                                                                / 405.0)
                                                                                        + (float)(*(float *)v59 / -405.0))
                                                                                + (float)((float)(*(float *)(v59 + 24)
                                                                                                * 4.0)
                                                                                        / -405.0)))
                                                                + (float)((float)(*(float *)(v59 + 16)
                                                                                + *(float *)(v59 + 16))
                                                                        / -405.0))
                                                        + (float)((float)(*(float *)(v59 + 28) * 4.0) / 405.0))
                                                + (float)(*(float *)(v59 + 8) / -405.0))
                                        + (float)((float)(*(float *)(v59 + 20) + *(float *)(v59 + 20)) / 405.0))
                                + (float)((float)(*(float *)(v59 + 32) * 4.0) / -405.0);
            *(float *)(v57 + 12) = (float)((float)((float)(*(float *)(v59 + 8) / 2025.0)
                                                 + (float)((float)((float)((float)((float)((float)(*(float *)v59 / 8100.0)
                                                                                         - (float)(*(float *)(v59 + 12)
                                                                                                 / 4050.0))
                                                                                 + (float)(*(float *)(v59 + 24) / 2025.0))
                                                                         + (float)(*(float *)(v59 + 4) / 4050.0))
                                                                 - (float)(*(float *)(v59 + 16) / 2025.0))
                                                         + (float)((float)(*(float *)(v59 + 28) + *(float *)(v59 + 28))
                                                                 / 2025.0)))
                                         - (float)((float)(*(float *)(v59 + 20) + *(float *)(v59 + 20)) / 2025.0))
                                 + (float)((float)(*(float *)(v59 + 32) * 4.0) / 2025.0);
            *(float *)(v57 + 16) = (float)((float)((float)(*(float *)(v59 + 8) / 2025.0)
                                                 + (float)((float)((float)((float)((float)((float)(*(float *)v59 / 8100.0)
                                                                                         - (float)(*(float *)(v59 + 12)
                                                                                                 / 4050.0))
                                                                                 + (float)(*(float *)(v59 + 24) / 2025.0))
                                                                         - (float)(*(float *)(v59 + 4) / 4050.0))
                                                                 + (float)(*(float *)(v59 + 16) / 2025.0))
                                                         - (float)((float)(*(float *)(v59 + 28) + *(float *)(v59 + 28))
                                                                 / 2025.0)))
                                         - (float)((float)(*(float *)(v59 + 20) + *(float *)(v59 + 20)) / 2025.0))
                                 + (float)((float)(*(float *)(v59 + 32) * 4.0) / 2025.0);
            *(float *)(v57 + 20) = (float)((float)((float)((float)((float)((float)((float)((float)((float)(*(float *)v59 * 16.0)
                                                                                                 / 2025.0)
                                                                                         - (float)((float)(*(float *)(v59 + 12) * 32.0)
                                                                                                 / 2025.0))
                                                                                 + (float)((float)(*(float *)(v59 + 24)
                                                                                                 * 64.0)
                                                                                         / 2025.0))
                                                                         + (float)((float)(*(float *)(v59 + 4) * 8.0)
                                                                                 / 2025.0))
                                                                 - (float)((float)(*(float *)(v59 + 16) * 16.0) / 2025.0))
                                                         + (float)((float)(*(float *)(v59 + 28) * 32.0) / 2025.0))
                                                 + (float)((float)(*(float *)(v59 + 8) * 4.0) / 2025.0))
                                         - (float)((float)(*(float *)(v59 + 20) * 8.0) / 2025.0))
                                 + (float)((float)(*(float *)(v59 + 32) * 16.0) / 2025.0);
            *(float *)(v57 + 24) = (float)((float)((float)((float)((float)((float)((float)((float)((float)(*(float *)v59 * 16.0)
                                                                                                 / 2025.0)
                                                                                         - (float)((float)(*(float *)(v59 + 12) * 32.0)
                                                                                                 / 2025.0))
                                                                                 + (float)((float)(*(float *)(v59 + 24)
                                                                                                 * 64.0)
                                                                                         / 2025.0))
                                                                         - (float)((float)(*(float *)(v59 + 4) * 8.0)
                                                                                 / 2025.0))
                                                                 + (float)((float)(*(float *)(v59 + 16) * 16.0) / 2025.0))
                                                         - (float)((float)(*(float *)(v59 + 28) * 32.0) / 2025.0))
                                                 + (float)((float)(*(float *)(v59 + 8) * 4.0) / 2025.0))
                                         - (float)((float)(*(float *)(v59 + 20) * 8.0) / 2025.0))
                                 + (float)((float)(*(float *)(v59 + 32) * 16.0) / 2025.0);
            *(float *)(v57 + 28) = (float)((float)(*(float *)(v59 + 8) / 90.0) - (float)(*(float *)(v59 + 20) / 45.0))
                                 + (float)((float)(*(float *)(v59 + 32) + *(float *)(v59 + 32)) / 45.0);
            *(float *)(v57 + 32) = (float)((float)((float)(*(float *)v59 * 32.0) / 45.0)
                                         + (float)((float)(*(float *)(v59 + 12) * 16.0) / 45.0))
                                 + (float)((float)(*(float *)(v59 + 24) * 8.0) / 45.0);
            *(float *)(v57 + 36) = (float)((float)((float)((float)((float)((float)((float)((float)((float)(*(float *)v59 * -64.0)
                                                                                                 / 405.0)
                                                                                         + (float)((float)(*(float *)(v59 + 12) * 32.0)
                                                                                                 / -405.0))
                                                                                 + (float)((float)(*(float *)(v59 + 24)
                                                                                                 * 16.0)
                                                                                         / -405.0))
                                                                         + (float)((float)(*(float *)(v59 + 4) * -64.0)
                                                                                 / 405.0))
                                                                 + (float)((float)(*(float *)(v59 + 16) * 32.0) / -405.0))
                                                         + (float)((float)(*(float *)(v59 + 28) * 16.0) / -405.0))
                                                 + (float)((float)(*(float *)(v59 + 8) * -64.0) / 405.0))
                                         + (float)((float)(*(float *)(v59 + 20) * 32.0) / -405.0))
                                 + (float)((float)(*(float *)(v59 + 32) * 16.0) / -405.0);
            *(float *)(v57 + 40) = (float)((float)((float)((float)((float)((float)((float)((float)((float)(*(float *)v59 * -64.0)
                                                                                                 / 405.0)
                                                                                         + (float)((float)(*(float *)(v59 + 12) * 32.0)
                                                                                                 / -405.0))
                                                                                 + (float)((float)(*(float *)(v59 + 24)
                                                                                                 * 16.0)
                                                                                         / -405.0))
                                                                         + (float)((float)(*(float *)(v59 + 4) * 64.0)
                                                                                 / 405.0))
                                                                 + (float)((float)(*(float *)(v59 + 16) * 32.0) / 405.0))
                                                         + (float)((float)(*(float *)(v59 + 28) * 16.0) / 405.0))
                                                 + (float)((float)(*(float *)(v59 + 8) * -64.0) / 405.0))
                                         + (float)((float)(*(float *)(v59 + 20) * 32.0) / -405.0))
                                 + (float)((float)(*(float *)(v59 + 32) * 16.0) / -405.0);
            *(float *)(v57 + 44) = (float)((float)((float)((float)((float)((float)((float)((float)((float)(*(float *)v59 * 16.0)
                                                                                                 / 2025.0)
                                                                                         + (float)((float)(*(float *)(v59 + 12) * 8.0)
                                                                                                 / 2025.0))
                                                                                 + (float)((float)(*(float *)(v59 + 24)
                                                                                                 * 4.0)
                                                                                         / 2025.0))
                                                                         + (float)((float)(*(float *)(v59 + 4) * 32.0)
                                                                                 / 2025.0))
                                                                 + (float)((float)(*(float *)(v59 + 16) * 16.0) / 2025.0))
                                                         + (float)((float)(*(float *)(v59 + 28) * 8.0) / 2025.0))
                                                 + (float)((float)(*(float *)(v59 + 8) * 64.0) / 2025.0))
                                         + (float)((float)(*(float *)(v59 + 20) * 32.0) / 2025.0))
                                 + (float)((float)(*(float *)(v59 + 32) * 16.0) / 2025.0);
            *(float *)(v57 + 48) = (float)((float)((float)((float)((float)((float)((float)((float)((float)(*(float *)v59 * 16.0)
                                                                                                 / 2025.0)
                                                                                         + (float)((float)(*(float *)(v59 + 12) * 8.0)
                                                                                                 / 2025.0))
                                                                                 + (float)((float)(*(float *)(v59 + 24)
                                                                                                 * 4.0)
                                                                                         / 2025.0))
                                                                         - (float)((float)(*(float *)(v59 + 4) * 32.0)
                                                                                 / 2025.0))
                                                                 - (float)((float)(*(float *)(v59 + 16) * 16.0) / 2025.0))
                                                         - (float)((float)(*(float *)(v59 + 28) * 8.0) / 2025.0))
                                                 + (float)((float)(*(float *)(v59 + 8) * 64.0) / 2025.0))
                                         + (float)((float)(*(float *)(v59 + 20) * 32.0) / 2025.0))
                                 + (float)((float)(*(float *)(v59 + 32) * 16.0) / 2025.0);
            *(float *)(v57 + 52) = (float)((float)((float)((float)((float)((float)((float)((float)((float)(*(float *)v59 * 1024.0)
                                                                                                 / 2025.0)
                                                                                         + (float)((float)(*(float *)(v59 + 12) * 512.0)
                                                                                                 / 2025.0))
                                                                                 + (float)((float)(*(float *)(v59 + 24)
                                                                                                 * 256.0)
                                                                                         / 2025.0))
                                                                         + (float)((float)(*(float *)(v59 + 4) * 512.0)
                                                                                 / 2025.0))
                                                                 + (float)((float)(*(float *)(v59 + 16) * 256.0) / 2025.0))
                                                         + (float)((float)(*(float *)(v59 + 28) * 128.0) / 2025.0))
                                                 + (float)((float)(*(float *)(v59 + 8) * 256.0) / 2025.0))
                                         + (float)((float)(*(float *)(v59 + 20) * 128.0) / 2025.0))
                                 + (float)((float)(*(float *)(v59 + 32) * 64.0) / 2025.0);
            *(float *)(v57 + 56) = (float)((float)((float)((float)((float)((float)((float)((float)((float)(*(float *)v59 * 1024.0)
                                                                                                 / 2025.0)
                                                                                         + (float)((float)(*(float *)(v59 + 12) * 512.0)
                                                                                                 / 2025.0))
                                                                                 + (float)((float)(*(float *)(v59 + 24)
                                                                                                 * 256.0)
                                                                                         / 2025.0))
                                                                         - (float)((float)(*(float *)(v59 + 4) * 512.0)
                                                                                 / 2025.0))
                                                                 - (float)((float)(*(float *)(v59 + 16) * 256.0) / 2025.0))
                                                         - (float)((float)(*(float *)(v59 + 28) * 128.0) / 2025.0))
                                                 + (float)((float)(*(float *)(v59 + 8) * 256.0) / 2025.0))
                                         + (float)((float)(*(float *)(v59 + 20) * 128.0) / 2025.0))
                                 + (float)((float)(*(float *)(v59 + 32) * 64.0) / 2025.0);
            *(float *)(v57 + 60) = (float)((float)((float)(*(float *)(v59 + 8) * 32.0) / 45.0)
                                         + (float)((float)(*(float *)(v59 + 20) * 16.0) / 45.0))
                                 + (float)((float)(*(float *)(v59 + 32) * 8.0) / 45.0);
            *(float *)(v57 + 64) = (float)((float)((float)(*(float *)v59 * 32.0) / 45.0)
                                         - (float)((float)(*(float *)(v59 + 12) * 16.0) / 45.0))
                                 + (float)((float)(*(float *)(v59 + 24) * 8.0) / 45.0);
            *(float *)(v57 + 68) = (float)((float)((float)((float)((float)((float)((float)((float)((float)(*(float *)(v59 + 12) * 32.0)
                                                                                                 / 405.0)
                                                                                         + (float)((float)(*(float *)v59 * -64.0)
                                                                                                 / 405.0))
                                                                                 + (float)((float)(*(float *)(v59 + 24)
                                                                                                 * 16.0)
                                                                                         / -405.0))
                                                                         + (float)((float)(*(float *)(v59 + 4) * -64.0)
                                                                                 / 405.0))
                                                                 + (float)((float)(*(float *)(v59 + 16) * 32.0) / 405.0))
                                                         + (float)((float)(*(float *)(v59 + 28) * 16.0) / -405.0))
                                                 + (float)((float)(*(float *)(v59 + 8) * -64.0) / 405.0))
                                         + (float)((float)(*(float *)(v59 + 20) * 32.0) / 405.0))
                                 + (float)((float)(*(float *)(v59 + 32) * 16.0) / -405.0);
            *(float *)(v57 + 72) = (float)((float)((float)((float)((float)((float)((float)((float)((float)(*(float *)(v59 + 12) * 32.0)
                                                                                                 / 405.0)
                                                                                         + (float)((float)(*(float *)v59 * -64.0)
                                                                                                 / 405.0))
                                                                                 + (float)((float)(*(float *)(v59 + 24)
                                                                                                 * 16.0)
                                                                                         / -405.0))
                                                                         + (float)((float)(*(float *)(v59 + 4) * 64.0)
                                                                                 / 405.0))
                                                                 + (float)((float)(*(float *)(v59 + 16) * 32.0) / -405.0))
                                                         + (float)((float)(*(float *)(v59 + 28) * 16.0) / 405.0))
                                                 + (float)((float)(*(float *)(v59 + 8) * -64.0) / 405.0))
                                         + (float)((float)(*(float *)(v59 + 20) * 32.0) / 405.0))
                                 + (float)((float)(*(float *)(v59 + 32) * 16.0) / -405.0);
            *(float *)(v57 + 76) = (float)((float)((float)((float)((float)((float)((float)((float)((float)(*(float *)v59 * 16.0)
                                                                                                 / 2025.0)
                                                                                         - (float)((float)(*(float *)(v59 + 12) * 8.0)
                                                                                                 / 2025.0))
                                                                                 + (float)((float)(*(float *)(v59 + 24)
                                                                                                 * 4.0)
                                                                                         / 2025.0))
                                                                         + (float)((float)(*(float *)(v59 + 4) * 32.0)
                                                                                 / 2025.0))
                                                                 - (float)((float)(*(float *)(v59 + 16) * 16.0) / 2025.0))
                                                         + (float)((float)(*(float *)(v59 + 28) * 8.0) / 2025.0))
                                                 + (float)((float)(*(float *)(v59 + 8) * 64.0) / 2025.0))
                                         - (float)((float)(*(float *)(v59 + 20) * 32.0) / 2025.0))
                                 + (float)((float)(*(float *)(v59 + 32) * 16.0) / 2025.0);
            *(float *)(v57 + 80) = (float)((float)((float)((float)((float)((float)((float)((float)((float)(*(float *)v59 * 16.0)
                                                                                                 / 2025.0)
                                                                                         - (float)((float)(*(float *)(v59 + 12) * 8.0)
                                                                                                 / 2025.0))
                                                                                 + (float)((float)(*(float *)(v59 + 24)
                                                                                                 * 4.0)
                                                                                         / 2025.0))
                                                                         - (float)((float)(*(float *)(v59 + 4) * 32.0)
                                                                                 / 2025.0))
                                                                 + (float)((float)(*(float *)(v59 + 16) * 16.0) / 2025.0))
                                                         - (float)((float)(*(float *)(v59 + 28) * 8.0) / 2025.0))
                                                 + (float)((float)(*(float *)(v59 + 8) * 64.0) / 2025.0))
                                         - (float)((float)(*(float *)(v59 + 20) * 32.0) / 2025.0))
                                 + (float)((float)(*(float *)(v59 + 32) * 16.0) / 2025.0);
            *(float *)(v57 + 84) = (float)((float)((float)((float)((float)((float)((float)((float)((float)(*(float *)v59 * 1024.0)
                                                                                                 / 2025.0)
                                                                                         - (float)((float)(*(float *)(v59 + 12) * 512.0)
                                                                                                 / 2025.0))
                                                                                 + (float)((float)(*(float *)(v59 + 24)
                                                                                                 * 256.0)
                                                                                         / 2025.0))
                                                                         + (float)((float)(*(float *)(v59 + 4) * 512.0)
                                                                                 / 2025.0))
                                                                 - (float)((float)(*(float *)(v59 + 16) * 256.0) / 2025.0))
                                                         + (float)((float)(*(float *)(v59 + 28) * 128.0) / 2025.0))
                                                 + (float)((float)(*(float *)(v59 + 8) * 256.0) / 2025.0))
                                         - (float)((float)(*(float *)(v59 + 20) * 128.0) / 2025.0))
                                 + (float)((float)(*(float *)(v59 + 32) * 64.0) / 2025.0);
            *(float *)(v57 + 88) = (float)((float)((float)((float)((float)((float)((float)((float)((float)(*(float *)v59 * 1024.0)
                                                                                                 / 2025.0)
                                                                                         - (float)((float)(*(float *)(v59 + 12) * 512.0)
                                                                                                 / 2025.0))
                                                                                 + (float)((float)(*(float *)(v59 + 24)
                                                                                                 * 256.0)
                                                                                         / 2025.0))
                                                                         - (float)((float)(*(float *)(v59 + 4) * 512.0)
                                                                                 / 2025.0))
                                                                 + (float)((float)(*(float *)(v59 + 16) * 256.0) / 2025.0))
                                                         - (float)((float)(*(float *)(v59 + 28) * 128.0) / 2025.0))
                                                 + (float)((float)(*(float *)(v59 + 8) * 256.0) / 2025.0))
                                         - (float)((float)(*(float *)(v59 + 20) * 128.0) / 2025.0))
                                 + (float)((float)(*(float *)(v59 + 32) * 64.0) / 2025.0);
            *(float *)(v57 + 92) = (float)((float)((float)(*(float *)(v59 + 8) * 32.0) / 45.0)
                                         - (float)((float)(*(float *)(v59 + 20) * 16.0) / 45.0))
                                 + (float)((float)(*(float *)(v59 + 32) * 8.0) / 45.0);
            *(_DWORD *)(v57 + 96) = *(_DWORD *)(v59 + 24);
            *(float *)(v57 + 100) = (float)((float)((float)(*(float *)(v59 + 24) * -2.0) / 9.0)
                                          - (float)((float)(*(float *)(v59 + 28) + *(float *)(v59 + 28)) / 9.0))
                                  - (float)((float)(*(float *)(v59 + 32) + *(float *)(v59 + 32)) / 9.0);
            *(float *)(v57 + 104) = (float)((float)((float)(*(float *)(v59 + 28) + *(float *)(v59 + 28)) / 9.0)
                                          - (float)((float)(*(float *)(v59 + 24) + *(float *)(v59 + 24)) / 9.0))
                                  - (float)((float)(*(float *)(v59 + 32) + *(float *)(v59 + 32)) / 9.0);
            *(float *)(v57 + 108) = (float)((float)(*(float *)(v59 + 24) / 90.0) + (float)(*(float *)(v59 + 28) / 45.0))
                                  + (float)((float)(*(float *)(v59 + 32) + *(float *)(v59 + 32)) / 45.0);
            *(float *)(v57 + 112) = (float)((float)(*(float *)(v59 + 24) / 90.0) - (float)(*(float *)(v59 + 28) / 45.0))
                                  + (float)((float)(*(float *)(v59 + 32) + *(float *)(v59 + 32)) / 45.0);
            *(float *)(v57 + 116) = (float)((float)((float)(*(float *)(v59 + 24) * 32.0) / 45.0)
                                          + (float)((float)(*(float *)(v59 + 28) * 16.0) / 45.0))
                                  + (float)((float)(*(float *)(v59 + 32) * 8.0) / 45.0);
            *(float *)(v57 + 120) = (float)((float)((float)(*(float *)(v59 + 24) * 32.0) / 45.0)
                                          - (float)((float)(*(float *)(v59 + 28) * 16.0) / 45.0))
                                  + (float)((float)(*(float *)(v59 + 32) * 8.0) / 45.0);
            *(_DWORD *)(v57 + 124) = *(_DWORD *)(v59 + 32);
            v55 += 0x900000000;
            v57 += 256;
            --v58;
          }
          while (v58);
        }
        ++v53;
        v52 += (_DWORD)v50 << 6;
      }
      while (v53 != v51);
      v8 = v118;
    }
    v60 = *(_OWORD *)&v116.__r_.__value_.__l.__data_;
    *(_OWORD *)&v116.__r_.__value_.__l.__data_ = 0uLL;
    v123 = v60;
    if (v8)
    {
      v61 = (unint64_t *)&v8->__shared_owners_;
      do
        v62 = __ldaxr(v61);
      while (__stlxr(v62 - 1, v61));
      if (!v62)
      {
        ((void (*)(std::__shared_weak_count *, uint64_t))v8->__on_zero_shared)(v8, v17);
        v63 = v8;
LABEL_70:
        std::__shared_weak_count::__release_weak(v63);
      }
    }
  }
  else
  {
    if (v12 == 4)
    {
      v119 = a3;
      v120 = a4;
      if (a4)
      {
        v31 = (unint64_t *)&a4->__shared_owners_;
        do
          v32 = __ldxr(v31);
        while (__stxr(v32 + 1, v31));
      }
      v33 = *(unsigned int *)(a3 + 16);
      v34 = *(unsigned int *)(a3 + 20);
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v116, 6, 6, *(_DWORD *)(a3 + 16), *(_DWORD *)(a3 + 20));
      v35 = v116.__r_.__value_.__r.__words[0];
      if ((int)v34 <= 0)
      {
        v64 = v116.__r_.__value_.__l.__size_;
        *(_OWORD *)&v116.__r_.__value_.__l.__data_ = 0uLL;
        *(_QWORD *)&v123 = v35;
        *((_QWORD *)&v123 + 1) = v64;
      }
      else
      {
        v36 = 0;
        v17 = 0x2400000000;
        v18 = 0x900000000;
        do
        {
          if ((int)v33 >= 1)
          {
            v37 = 0;
            v38 = 0;
            v39 = *(_QWORD *)(a3 + 24) + 36 * (int)v33 * (int)v36;
            v40 = *(_QWORD *)(v35 + 24) + 144 * (int)v33 * (int)v36;
            v41 = v33;
            do
            {
              v42 = (float *)(v39 + (v37 >> 30));
              v43 = (float *)(v40 + (v38 >> 30));
              *v43 = *v42 * 0.0625;
              v43[1] = (float)((float)(*v42 / -24.0) + (float)(v42[1] / -24.0)) + (float)(v42[2] / -24.0);
              v43[2] = (float)((float)(v42[1] / 24.0) + (float)(*v42 / -24.0)) + (float)(v42[2] / -24.0);
              v43[3] = (float)((float)(*v42 / 96.0) + (float)(v42[1] / 48.0)) + (float)(v42[2] / 24.0);
              v43[4] = (float)((float)(*v42 / 96.0) - (float)(v42[1] / 48.0)) + (float)(v42[2] / 24.0);
              v43[5] = v42[2] * 0.25;
              v43[6] = (float)((float)(*v42 / -24.0) + (float)(v42[3] / -24.0)) + (float)(v42[6] / -24.0);
              v43[7] = (float)((float)((float)((float)((float)((float)((float)((float)(*v42 / 36.0)
                                                                             + (float)(v42[3] / 36.0))
                                                                     + (float)(v42[6] / 36.0))
                                                             + (float)(v42[1] / 36.0))
                                                     + (float)(v42[4] / 36.0))
                                             + (float)(v42[7] / 36.0))
                                     + (float)(v42[2] / 36.0))
                             + (float)(v42[5] / 36.0))
                     + (float)(v42[8] / 36.0);
              v43[8] = (float)((float)((float)((float)((float)((float)((float)((float)(*v42 / 36.0)
                                                                             + (float)(v42[3] / 36.0))
                                                                     + (float)(v42[6] / 36.0))
                                                             - (float)(v42[1] / 36.0))
                                                     - (float)(v42[4] / 36.0))
                                             - (float)(v42[7] / 36.0))
                                     + (float)(v42[2] / 36.0))
                             + (float)(v42[5] / 36.0))
                     + (float)(v42[8] / 36.0);
              v43[9] = (float)((float)((float)((float)((float)((float)((float)((float)(*v42 / -144.0)
                                                                             + (float)(v42[3] / -144.0))
                                                                     + (float)(v42[6] / -144.0))
                                                             - (float)(v42[1] / 72.0))
                                                     - (float)(v42[4] / 72.0))
                                             - (float)(v42[7] / 72.0))
                                     - (float)(v42[2] / 36.0))
                             - (float)(v42[5] / 36.0))
                     - (float)(v42[8] / 36.0);
              v43[10] = (float)((float)((float)((float)((float)((float)((float)((float)(*v42 / -144.0)
                                                                              + (float)(v42[3] / -144.0))
                                                                      + (float)(v42[6] / -144.0))
                                                              + (float)(v42[1] / 72.0))
                                                      + (float)(v42[4] / 72.0))
                                              + (float)(v42[7] / 72.0))
                                      - (float)(v42[2] / 36.0))
                              - (float)(v42[5] / 36.0))
                      - (float)(v42[8] / 36.0);
              v43[11] = (float)((float)(v42[2] / -6.0) + (float)(v42[5] / -6.0)) + (float)(v42[8] / -6.0);
              v43[12] = (float)((float)(v42[3] / 24.0) + (float)(*v42 / -24.0)) + (float)(v42[6] / -24.0);
              v43[13] = (float)((float)((float)((float)((float)((float)((float)((float)(*v42 / 36.0)
                                                                              - (float)(v42[3] / 36.0))
                                                                      + (float)(v42[6] / 36.0))
                                                              + (float)(v42[1] / 36.0))
                                                      - (float)(v42[4] / 36.0))
                                              + (float)(v42[7] / 36.0))
                                      + (float)(v42[2] / 36.0))
                              - (float)(v42[5] / 36.0))
                      + (float)(v42[8] / 36.0);
              v43[14] = (float)((float)((float)((float)((float)((float)((float)((float)(*v42 / 36.0)
                                                                              - (float)(v42[3] / 36.0))
                                                                      + (float)(v42[6] / 36.0))
                                                              - (float)(v42[1] / 36.0))
                                                      + (float)(v42[4] / 36.0))
                                              - (float)(v42[7] / 36.0))
                                      + (float)(v42[2] / 36.0))
                              - (float)(v42[5] / 36.0))
                      + (float)(v42[8] / 36.0);
              v43[15] = (float)((float)((float)((float)((float)((float)((float)((float)(v42[3] / 144.0)
                                                                              + (float)(*v42 / -144.0))
                                                                      + (float)(v42[6] / -144.0))
                                                              - (float)(v42[1] / 72.0))
                                                      + (float)(v42[4] / 72.0))
                                              - (float)(v42[7] / 72.0))
                                      - (float)(v42[2] / 36.0))
                              + (float)(v42[5] / 36.0))
                      - (float)(v42[8] / 36.0);
              v43[16] = (float)((float)((float)((float)((float)((float)((float)((float)(v42[3] / 144.0)
                                                                              + (float)(*v42 / -144.0))
                                                                      + (float)(v42[6] / -144.0))
                                                              + (float)(v42[1] / 72.0))
                                                      - (float)(v42[4] / 72.0))
                                              + (float)(v42[7] / 72.0))
                                      - (float)(v42[2] / 36.0))
                              + (float)(v42[5] / 36.0))
                      - (float)(v42[8] / 36.0);
              v43[17] = (float)((float)(v42[5] / 6.0) + (float)(v42[2] / -6.0)) + (float)(v42[8] / -6.0);
              v43[18] = (float)((float)(*v42 / 96.0) + (float)(v42[3] / 48.0)) + (float)(v42[6] / 24.0);
              v43[19] = (float)((float)((float)((float)((float)((float)((float)((float)(*v42 / -144.0)
                                                                              - (float)(v42[3] / 72.0))
                                                                      - (float)(v42[6] / 36.0))
                                                              + (float)(v42[1] / -144.0))
                                                      - (float)(v42[4] / 72.0))
                                              - (float)(v42[7] / 36.0))
                                      + (float)(v42[2] / -144.0))
                              - (float)(v42[5] / 72.0))
                      - (float)(v42[8] / 36.0);
              v43[20] = (float)((float)((float)((float)((float)((float)((float)((float)(*v42 / -144.0)
                                                                              - (float)(v42[3] / 72.0))
                                                                      - (float)(v42[6] / 36.0))
                                                              + (float)(v42[1] / 144.0))
                                                      + (float)(v42[4] / 72.0))
                                              + (float)(v42[7] / 36.0))
                                      + (float)(v42[2] / -144.0))
                              - (float)(v42[5] / 72.0))
                      - (float)(v42[8] / 36.0);
              v43[21] = (float)((float)((float)((float)((float)((float)((float)((float)(*v42 / 576.0)
                                                                              + (float)(v42[3] / 288.0))
                                                                      + (float)(v42[6] / 144.0))
                                                              + (float)(v42[1] / 288.0))
                                                      + (float)(v42[4] / 144.0))
                                              + (float)(v42[7] / 72.0))
                                      + (float)(v42[2] / 144.0))
                              + (float)(v42[5] / 72.0))
                      + (float)(v42[8] / 36.0);
              v43[22] = (float)((float)((float)((float)((float)((float)((float)((float)(*v42 / 576.0)
                                                                              + (float)(v42[3] / 288.0))
                                                                      + (float)(v42[6] / 144.0))
                                                              - (float)(v42[1] / 288.0))
                                                      + (float)(v42[4] / -144.0))
                                              - (float)(v42[7] / 72.0))
                                      + (float)(v42[2] / 144.0))
                              + (float)(v42[5] / 72.0))
                      + (float)(v42[8] / 36.0);
              v43[23] = (float)((float)(v42[2] / 24.0) + (float)(v42[5] / 12.0)) + (float)(v42[8] / 6.0);
              v43[24] = (float)((float)(*v42 / 96.0) - (float)(v42[3] / 48.0)) + (float)(v42[6] / 24.0);
              v43[25] = (float)((float)((float)((float)((float)((float)((float)((float)(v42[3] / 72.0)
                                                                              + (float)(*v42 / -144.0))
                                                                      - (float)(v42[6] / 36.0))
                                                              + (float)(v42[1] / -144.0))
                                                      + (float)(v42[4] / 72.0))
                                              - (float)(v42[7] / 36.0))
                                      + (float)(v42[2] / -144.0))
                              + (float)(v42[5] / 72.0))
                      - (float)(v42[8] / 36.0);
              v43[26] = (float)((float)((float)((float)((float)((float)((float)((float)(v42[3] / 72.0)
                                                                              + (float)(*v42 / -144.0))
                                                                      - (float)(v42[6] / 36.0))
                                                              + (float)(v42[1] / 144.0))
                                                      - (float)(v42[4] / 72.0))
                                              + (float)(v42[7] / 36.0))
                                      + (float)(v42[2] / -144.0))
                              + (float)(v42[5] / 72.0))
                      - (float)(v42[8] / 36.0);
              v43[27] = (float)((float)((float)((float)((float)((float)((float)((float)(*v42 / 576.0)
                                                                              - (float)(v42[3] / 288.0))
                                                                      + (float)(v42[6] / 144.0))
                                                              + (float)(v42[1] / 288.0))
                                                      + (float)(v42[4] / -144.0))
                                              + (float)(v42[7] / 72.0))
                                      + (float)(v42[2] / 144.0))
                              - (float)(v42[5] / 72.0))
                      + (float)(v42[8] / 36.0);
              v43[28] = (float)((float)((float)((float)((float)((float)((float)((float)(*v42 / 576.0)
                                                                              - (float)(v42[3] / 288.0))
                                                                      + (float)(v42[6] / 144.0))
                                                              - (float)(v42[1] / 288.0))
                                                      + (float)(v42[4] / 144.0))
                                              - (float)(v42[7] / 72.0))
                                      + (float)(v42[2] / 144.0))
                              - (float)(v42[5] / 72.0))
                      + (float)(v42[8] / 36.0);
              v43[29] = (float)((float)(v42[2] / 24.0) - (float)(v42[5] / 12.0)) + (float)(v42[8] / 6.0);
              v43[30] = v42[6] * 0.25;
              v43[31] = (float)((float)(v42[6] / -6.0) + (float)(v42[7] / -6.0)) + (float)(v42[8] / -6.0);
              v43[32] = (float)((float)(v42[7] / 6.0) + (float)(v42[6] / -6.0)) + (float)(v42[8] / -6.0);
              v43[33] = (float)((float)(v42[6] / 24.0) + (float)(v42[7] / 12.0)) + (float)(v42[8] / 6.0);
              v43[34] = (float)((float)(v42[6] / 24.0) - (float)(v42[7] / 12.0)) + (float)(v42[8] / 6.0);
              v43[35] = v42[8];
              v38 += 0x2400000000;
              v37 += 0x900000000;
              --v41;
            }
            while (v41);
          }
          ++v36;
        }
        while (v36 != v34);
        v44 = (std::__shared_weak_count *)*((_QWORD *)&v123 + 1);
        v45 = *(_OWORD *)&v116.__r_.__value_.__l.__data_;
        *(_OWORD *)&v116.__r_.__value_.__l.__data_ = 0uLL;
        v123 = v45;
        if (v44)
        {
          v46 = (unint64_t *)&v44->__shared_owners_;
          do
            v47 = __ldaxr(v46);
          while (__stlxr(v47 - 1, v46));
          if (!v47)
          {
            ((void (*)(std::__shared_weak_count *, uint64_t, uint64_t))v44->__on_zero_shared)(v44, 0x2400000000, 0x900000000);
            std::__shared_weak_count::__release_weak(v44);
          }
        }
      }
      v65 = (std::__shared_weak_count *)v116.__r_.__value_.__l.__size_;
      if (v116.__r_.__value_.__l.__size_)
      {
        v66 = (unint64_t *)(v116.__r_.__value_.__l.__size_ + 8);
        do
          v67 = __ldaxr(v66);
        while (__stlxr(v67 - 1, v66));
        if (!v67)
        {
          ((void (*)(std::__shared_weak_count *, uint64_t, uint64_t))v65->__on_zero_shared)(v65, v17, v18);
          std::__shared_weak_count::__release_weak(v65);
        }
      }
      v68 = v120;
      if (!v120)
        goto LABEL_71;
      v69 = (unint64_t *)&v120->__shared_owners_;
      do
        v70 = __ldaxr(v69);
      while (__stlxr(v70 - 1, v69));
    }
    else
    {
      if (v12 != 2)
      {
        v111 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v111, "Outputs window not supported");
        __cxa_throw(v111, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v121 = a3;
      v122 = a4;
      if (a4)
      {
        v13 = (unint64_t *)&a4->__shared_owners_;
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
      }
      v15 = *(unsigned int *)(a3 + 16);
      v16 = *(unsigned int *)(a3 + 20);
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v116, 4, 4, *(_DWORD *)(a3 + 16), *(_DWORD *)(a3 + 20));
      v19 = v116.__r_.__value_.__r.__words[0];
      if ((int)v16 <= 0)
      {
        v71 = v116.__r_.__value_.__l.__size_;
        *(_OWORD *)&v116.__r_.__value_.__l.__data_ = 0uLL;
        *(_QWORD *)&v123 = v19;
        *((_QWORD *)&v123 + 1) = v71;
      }
      else
      {
        v20 = 0;
        for (i = 0; i != v16; ++i)
        {
          if ((int)v15 >= 1)
          {
            v22 = 0;
            v23 = *(_QWORD *)(a3 + 24) + 36 * (int)v15 * (int)i;
            v24 = *(_QWORD *)(v19 + 24) + 4 * v20 + 32;
            v25 = v15;
            do
            {
              v26 = v23 + (v22 >> 30);
              *(_DWORD *)(v24 - 32) = *(_DWORD *)v26;
              *(float *)(v24 - 28) = (float)((float)(*(float *)v26 * 0.5) + (float)(*(float *)(v26 + 4) * 0.5))
                                   + (float)(*(float *)(v26 + 8) * 0.5);
              *(float *)(v24 - 24) = (float)((float)(*(float *)v26 * 0.5) - (float)(*(float *)(v26 + 4) * 0.5))
                                   + (float)(*(float *)(v26 + 8) * 0.5);
              *(_DWORD *)(v24 - 20) = *(_DWORD *)(v26 + 8);
              *(float *)(v24 - 16) = (float)((float)(*(float *)v26 * 0.5) + (float)(*(float *)(v26 + 12) * 0.5))
                                   + (float)(*(float *)(v26 + 24) * 0.5);
              *(float *)(v24 - 12) = (float)((float)((float)((float)((float)((float)((float)((float)(*(float *)v26 * 0.25)
                                                                                           + (float)(*(float *)(v26 + 12) * 0.25))
                                                                                   + (float)(*(float *)(v26 + 24) * 0.25))
                                                                           + (float)(*(float *)(v26 + 4) * 0.25))
                                                                   + (float)(*(float *)(v26 + 16) * 0.25))
                                                           + (float)(*(float *)(v26 + 28) * 0.25))
                                                   + (float)(*(float *)(v26 + 8) * 0.25))
                                           + (float)(*(float *)(v26 + 20) * 0.25))
                                   + (float)(*(float *)(v26 + 32) * 0.25);
              *(float *)(v24 - 8) = (float)((float)((float)((float)((float)((float)((float)((float)(*(float *)v26 * 0.25)
                                                                                          + (float)(*(float *)(v26 + 12)
                                                                                                  * 0.25))
                                                                                  + (float)(*(float *)(v26 + 24) * 0.25))
                                                                          - (float)(*(float *)(v26 + 4) * 0.25))
                                                                  - (float)(*(float *)(v26 + 16) * 0.25))
                                                          - (float)(*(float *)(v26 + 28) * 0.25))
                                                  + (float)(*(float *)(v26 + 8) * 0.25))
                                          + (float)(*(float *)(v26 + 20) * 0.25))
                                  + (float)(*(float *)(v26 + 32) * 0.25);
              *(float *)(v24 - 4) = (float)((float)(*(float *)(v26 + 8) * 0.5) + (float)(*(float *)(v26 + 20) * 0.5))
                                  + (float)(*(float *)(v26 + 32) * 0.5);
              *(float *)v24 = (float)((float)(*(float *)v26 * 0.5) - (float)(*(float *)(v26 + 12) * 0.5))
                            + (float)(*(float *)(v26 + 24) * 0.5);
              *(float *)(v24 + 4) = (float)((float)((float)((float)((float)((float)((float)((float)(*(float *)v26 * 0.25)
                                                                                          - (float)(*(float *)(v26 + 12)
                                                                                                  * 0.25))
                                                                                  + (float)(*(float *)(v26 + 24) * 0.25))
                                                                          + (float)(*(float *)(v26 + 4) * 0.25))
                                                                  - (float)(*(float *)(v26 + 16) * 0.25))
                                                          + (float)(*(float *)(v26 + 28) * 0.25))
                                                  + (float)(*(float *)(v26 + 8) * 0.25))
                                          - (float)(*(float *)(v26 + 20) * 0.25))
                                  + (float)(*(float *)(v26 + 32) * 0.25);
              *(float *)(v24 + 8) = (float)((float)((float)((float)((float)((float)((float)((float)(*(float *)v26 * 0.25)
                                                                                          - (float)(*(float *)(v26 + 12)
                                                                                                  * 0.25))
                                                                                  + (float)(*(float *)(v26 + 24) * 0.25))
                                                                          - (float)(*(float *)(v26 + 4) * 0.25))
                                                                  + (float)(*(float *)(v26 + 16) * 0.25))
                                                          - (float)(*(float *)(v26 + 28) * 0.25))
                                                  + (float)(*(float *)(v26 + 8) * 0.25))
                                          - (float)(*(float *)(v26 + 20) * 0.25))
                                  + (float)(*(float *)(v26 + 32) * 0.25);
              *(float *)(v24 + 12) = (float)((float)(*(float *)(v26 + 8) * 0.5) - (float)(*(float *)(v26 + 20) * 0.5))
                                   + (float)(*(float *)(v26 + 32) * 0.5);
              *(_DWORD *)(v24 + 16) = *(_DWORD *)(v26 + 24);
              *(float *)(v24 + 20) = (float)((float)(*(float *)(v26 + 24) * 0.5) + (float)(*(float *)(v26 + 28) * 0.5))
                                   + (float)(*(float *)(v26 + 32) * 0.5);
              *(float *)(v24 + 24) = (float)((float)(*(float *)(v26 + 24) * 0.5) - (float)(*(float *)(v26 + 28) * 0.5))
                                   + (float)(*(float *)(v26 + 32) * 0.5);
              *(_DWORD *)(v24 + 28) = *(_DWORD *)(v26 + 32);
              v22 += 0x900000000;
              v24 += 64;
              --v25;
            }
            while (v25);
          }
          v20 += 16 * v15;
        }
        v27 = (std::__shared_weak_count *)*((_QWORD *)&v123 + 1);
        v28 = *(_OWORD *)&v116.__r_.__value_.__l.__data_;
        *(_OWORD *)&v116.__r_.__value_.__l.__data_ = 0uLL;
        v123 = v28;
        if (v27)
        {
          v29 = (unint64_t *)&v27->__shared_owners_;
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
      }
      v72 = (std::__shared_weak_count *)v116.__r_.__value_.__l.__size_;
      if (v116.__r_.__value_.__l.__size_)
      {
        v73 = (unint64_t *)(v116.__r_.__value_.__l.__size_ + 8);
        do
          v74 = __ldaxr(v73);
        while (__stlxr(v74 - 1, v73));
        if (!v74)
        {
          ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
          std::__shared_weak_count::__release_weak(v72);
        }
      }
      v68 = v122;
      if (!v122)
        goto LABEL_71;
      v75 = (unint64_t *)&v122->__shared_owners_;
      do
        v70 = __ldaxr(v75);
      while (__stlxr(v70 - 1, v75));
    }
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *, uint64_t, uint64_t))v68->__on_zero_shared)(v68, v17, v18);
      v63 = v68;
      goto LABEL_70;
    }
  }
LABEL_71:
  v76 = *(_DWORD *)(a6 + 4);
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 472))(*a2, v17);
  v77 = 0;
  v78 = (v76 + 2) * (v76 + 2);
  v79 = *a1;
  v80 = *(int *)(*a1 + 8);
  do
  {
    v80 *= *(int *)(*a1 + 12 + v77);
    v77 += 4;
  }
  while (v77 != 12);
  v81 = 0;
  v82 = v123;
  v83 = *(int *)(v123 + 8);
  do
  {
    v83 *= *(int *)(v123 + 12 + v81);
    v81 += 4;
  }
  while (v81 != 12);
  if (v80 != v83)
  {
    v110 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v110, "Shape mismatch");
    __cxa_throw(v110, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (v76 != -2)
  {
    v84 = 0;
    v85 = 0;
    v87 = a5[10];
    v86 = a5[11];
    if (v78 <= 1)
      v78 = 1;
    v88 = *(_DWORD *)(v123 + 12) * *(_DWORD *)(v123 + 8);
    v89 = v88 * *(_DWORD *)(v123 + 16);
    do
    {
      if (v87 >= 1)
      {
        v90 = 0;
        v91 = v85;
        v92 = v84;
        do
        {
          if ((int)v86 >= 1)
          {
            v93 = *(_QWORD *)(v82 + 24);
            v94 = *(_QWORD *)(v79 + 24);
            v95 = v91;
            v96 = v92;
            v97 = v86;
            do
            {
              *(_DWORD *)(v94 + 4 * v96++) = *(_DWORD *)(v93 + 4 * v95);
              v95 += v88;
              --v97;
            }
            while (v97);
          }
          ++v90;
          v92 += v86;
          v91 += v89;
        }
        while (v90 != v87);
      }
      ++v85;
      v84 += v87 * v86;
    }
    while (v85 != v78);
  }
  v98 = (std::__shared_weak_count *)*((_QWORD *)&v123 + 1);
  if (*((_QWORD *)&v123 + 1))
  {
    v99 = (unint64_t *)(*((_QWORD *)&v123 + 1) + 8);
    do
      v100 = __ldaxr(v99);
    while (__stlxr(v100 - 1, v99));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
      std::__shared_weak_count::__release_weak(v98);
    }
  }
}

void sub_1914495B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,char a42)
{
  void *v42;
  int v43;
  uint64_t v44;

  if (a40 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  if (a33 < 0)
    operator delete(a28);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
  {
    operator delete(a15);
    if ((v43 & 1) == 0)
    {
LABEL_14:
      std::shared_ptr<void>::~shared_ptr[abi:ne180100](v44 - 112);
      _Unwind_Resume(a1);
    }
  }
  else if (!v43)
  {
    goto LABEL_14;
  }
  __cxa_free_exception(v42);
  goto LABEL_14;
}

void Espresso::MPSGraphEngine::Kernels::transpose_kernel::~transpose_kernel(Espresso::MPSGraphEngine::Kernels::transpose_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

uint64_t Espresso::MPSGraphEngine::Kernels::transpose_kernel::is_valid_for_engine()
{
  return 1;
}

BOOL `anonymous namespace'::match_and_capture_gather_subgraph_in_tf_resample(Espresso::net_info_ir_t const&,unsigned long)::$_1::operator()(uint64_t **a1, uint64_t a2, int a3, float a4)
{
  uint64_t *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v19;
  void *v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  std::string v28;

  v7 = a1[1];
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v28, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v28 = *(std::string *)a2;
  v8 = *v7;
  v9 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(v8 + 24, &v28);
  if ((_QWORD *)(v8 + 32) == v9)
    v10 = -1;
  else
    v10 = *((_DWORD *)v9 + 14);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  if (v10 == -1)
    return 0;
  v11 = **a1;
  v12 = v11 + 224 * v10;
  v13 = (_QWORD *)(v12 + 48);
  v14 = *(char *)(v12 + 71);
  if (v14 < 0)
  {
    if (v13[1] != 11)
      return 0;
    v13 = (_QWORD *)*v13;
  }
  else if (v14 != 11)
  {
    return 0;
  }
  v15 = (_QWORD *)*v13;
  v16 = *(_QWORD *)((char *)v13 + 3);
  if (v15 != (_QWORD *)0x77746E656D656C65 || v16 != 0x65736977746E656DLL)
    return 0;
  v19 = v11 + 224 * v10;
  v21 = *(std::__shared_weak_count **)(v19 + 96);
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldxr(p_shared_owners);
    while (__stxr(v23 + 1, p_shared_owners));
  }
  v24 = (*(uint64_t (**)(void *))(*(_QWORD *)v20 + 320))(v20);
  if (v21)
  {
    v25 = (unint64_t *)&v21->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  return *(float *)(v24 + 8) == a4 && *(_DWORD *)v24 == a3;
}

void sub_1914498B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t Espresso::cpu_context_transfer_algo_t::engine_availability_reordering(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t **a5)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  std::vector<int>::size_type v9;
  std::vector<int>::size_type v10;
  uint64_t v11;
  uint64_t v12;
  std::vector<int>::size_type v13;
  std::vector<int> *v14;
  std::vector<int> *v15;
  int *begin;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  unint64_t v26;
  int v27;
  unint64_t i;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  int v34;
  _QWORD v35[4];
  _OWORD v36[2];
  int v37;
  _OWORD v38[2];
  int v39;
  _OWORD v40[2];
  int v41;

  v6 = *a5;
  memset(v40, 0, sizeof(v40));
  v41 = 1065353216;
  v8 = *v6;
  v7 = v6[1];
  if (v7 == *v6)
  {
    v13 = 0x6DB6DB6DB6DB6DB7 * ((v7 - *v6) >> 5);
  }
  else
  {
    v9 = 0;
    do
    {
      v10 = v8 + 224 * v9;
      v11 = *(_QWORD *)(v10 + 112);
      v12 = *(_QWORD *)(v10 + 120);
      if (v11 != v12)
      {
        do
        {
          std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v40, v11, v11);
          v11 += 24;
        }
        while (v11 != v12);
        v8 = *v6;
        v7 = v6[1];
      }
      ++v9;
      v13 = 0x6DB6DB6DB6DB6DB7 * ((v7 - v8) >> 5);
    }
    while (v9 < v13);
  }
  v14 = *(std::vector<int> **)(a1 + 56);
  begin = v14[1].__begin_;
  v15 = v14 + 1;
  v15->__end_ = begin;
  std::vector<int>::reserve(v15, v13);
  memset(v38, 0, sizeof(v38));
  v39 = 1065353216;
  memset(v36, 0, sizeof(v36));
  v37 = 1065353216;
  v18 = *v6;
  v17 = v6[1];
  if (v17 != *v6)
  {
    v19 = *(_BYTE *)(v18 + 105) != 0;
    do
    {
      v20 = *(_QWORD *)(v18 + 136);
      v21 = *(_QWORD *)(v18 + 144);
      while (v20 != v21)
      {
        if (!std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v40, v20))std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v36, v20, v20);
        v20 += 24;
      }
      v18 += 224;
    }
    while (v18 != v17);
    v22 = *v6;
    v23 = v6[1];
    v35[0] = v38;
    v35[1] = v6;
    v35[2] = v36;
    v35[3] = v15;
    if (v23 != v22)
    {
      v24 = 0;
      v25 = 1;
      do
      {
        v26 = v25;
        if (!std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(v38, v24))
        {
          v27 = v19 & 1;
          if (*(unsigned __int8 *)(v22 + 224 * v24 + 105) != v27)
          {
            v34 = v19;
            if (0x6DB6DB6DB6DB6DB7 * ((v23 - v22) >> 5) > v24 + 1)
            {
              for (i = v26; 0x6DB6DB6DB6DB6DB7 * ((v23 - v22) >> 5) > i; ++i)
              {
                if (!std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(v38, i)
                  && *(unsigned __int8 *)(v22 + 224 * v24 + 105) == v27)
                {
                  v29 = v22 + 224 * v24;
                  v30 = *(_QWORD *)(v29 + 136);
                  v31 = *(_QWORD *)(v29 + 144);
                  if (v30 != v31)
                  {
                    v32 = 1;
                    do
                    {
                      v32 &= std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v36, v30) != 0;
                      v30 += 24;
                    }
                    while (v30 != v31);
                    if ((v32 & 1) == 0)
                      break;
                  }
                  Espresso::cpu_context_transfer_algo_t::engine_availability_reordering(std::vector<std::shared_ptr<Espresso::SerDes::generic_serdes_object>> const&,std::shared_ptr<Espresso::abstract_context>,Espresso::compute_path,std::shared_ptr<Espresso::net_info_ir_t>)::$_0::operator()((uint64_t)v35, i);
                  v22 = *v6;
                  v23 = v6[1];
                }
              }
            }
            v19 = v34 ^ 1;
          }
          Espresso::cpu_context_transfer_algo_t::engine_availability_reordering(std::vector<std::shared_ptr<Espresso::SerDes::generic_serdes_object>> const&,std::shared_ptr<Espresso::abstract_context>,Espresso::compute_path,std::shared_ptr<Espresso::net_info_ir_t>)::$_0::operator()((uint64_t)v35, v24);
          v22 = *v6;
          v23 = v6[1];
        }
        ++v24;
        v25 = v26 + 1;
      }
      while (0x6DB6DB6DB6DB6DB7 * ((v23 - v22) >> 5) > v24);
    }
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v36);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)v38);
  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v40);
}

void sub_191449B70(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1 - 128);
  _Unwind_Resume(a1);
}

void Espresso::cpu_context_transfer_algo_t::engine_availability_reordering(std::vector<std::shared_ptr<Espresso::SerDes::generic_serdes_object>> const&,std::shared_ptr<Espresso::abstract_context>,Espresso::compute_path,std::shared_ptr<Espresso::net_info_ir_t>)::$_0::operator()(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int *v9;
  _DWORD *v10;
  int *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  BOOL v15;
  unint64_t v16;
  uint64_t v17;
  int *v18;
  unint64_t v19;
  int v20;

  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>(*(_QWORD *)a1, a2, a2);
  v4 = **(_QWORD **)(a1 + 8) + 224 * a2;
  v5 = *(_QWORD *)(v4 + 112);
  v6 = *(_QWORD *)(v4 + 120);
  while (v5 != v6)
  {
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(*(_QWORD *)(a1 + 16), v5, v5);
    v5 += 24;
  }
  v7 = *(_QWORD *)(a1 + 24);
  v9 = *(int **)(v7 + 8);
  v8 = *(_QWORD *)(v7 + 16);
  if ((unint64_t)v9 >= v8)
  {
    v11 = *(int **)v7;
    v12 = ((uint64_t)v9 - *(_QWORD *)v7) >> 2;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 62)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v14 = v8 - (_QWORD)v11;
    if (v14 >> 1 > v13)
      v13 = v14 >> 1;
    v15 = (unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL;
    v16 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v15)
      v16 = v13;
    if (v16)
    {
      v16 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v16);
      v11 = *(int **)v7;
      v9 = *(int **)(v7 + 8);
    }
    else
    {
      v17 = 0;
    }
    v18 = (int *)(v16 + 4 * v12);
    v19 = v16 + 4 * v17;
    *v18 = a2;
    v10 = v18 + 1;
    while (v9 != v11)
    {
      v20 = *--v9;
      *--v18 = v20;
    }
    *(_QWORD *)v7 = v18;
    *(_QWORD *)(v7 + 8) = v10;
    *(_QWORD *)(v7 + 16) = v19;
    if (v11)
      operator delete(v11);
  }
  else
  {
    *v9 = a2;
    v10 = v9 + 1;
  }
  *(_QWORD *)(v7 + 8) = v10;
}

void Espresso::cpu_context_transfer_algo_options::~cpu_context_transfer_algo_options(Espresso::cpu_context_transfer_algo_options *this)
{
  void **v2;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 56);
  v2 = (void **)((char *)this + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this);
}

void Espresso::cpu_context_transfer_algo_t::assign_to_fallback_context(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t **a4)
{
  uint64_t v5;
  _QWORD *i;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  BOOL v15;
  int v16;
  int v17;
  BOOL v18;
  Espresso *v19;
  const char *v20;
  _BOOL4 v21;
  BOOL v23;
  int v24;
  NSObject *v25;
  uint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  float v30;
  char *v31;
  const char *v32;
  float v33;
  NSObject *v34;
  NSObject *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  void *__p;
  uint64_t *v44;
  _QWORD *v45[2];
  uint8_t v46[4];
  double v47;
  __int16 v48;
  double v49;
  uint8_t buf[8];
  _BYTE v51[20];
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v41 = *a4;
  v5 = 0x6DB6DB6DB6DB6DB7 * ((v41[1] - *v41) >> 5);
  v42 = a1[7];
  v37 = (int)v5;
  std::vector<int>::resize((std::vector<int> *)(v42 + 48), (int)v5);
  if ((int)v5 >= 1)
    bzero(*(void **)(v42 + 48), 4 * v5);
  v45[0] = 0;
  v45[1] = 0;
  v44 = (uint64_t *)v45;
  v7 = (_QWORD *)a1[3];
  for (i = (_QWORD *)a1[4]; v7 != i; v7 += 3)
  {
    *(_QWORD *)buf = v7;
    std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v44, v7, (__int128 **)buf)[56] = 1;
  }
  buf[0] = 0;
  std::vector<BOOL>::vector(&__p, (int)v5, buf);
  if ((int)v5 >= 1)
  {
    v8 = 0;
    v9 = 0;
    v36 = v5 << 32;
    v10 = v5;
    v40 = 224 * v5;
    do
    {
      v11 = *v41;
      v12 = (uint64_t *)(*v41 + v8);
      v13 = v12 + 6;
      v14 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(v45[0], v12 + 6);
      if (*((_BYTE *)v12 + 105))
        v15 = v14 == 0;
      else
        v15 = 0;
      v16 = !v15;
      v17 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a2 + 8))(*(_QWORD *)(*(_QWORD *)a2 + 8));
      v18 = is_metal_but_not_mps_buffers(v17);
      v19 = (Espresso *)(***(uint64_t (****)(_QWORD))(*(_QWORD *)a2 + 8))(*(_QWORD *)(*(_QWORD *)a2 + 8));
      v21 = v19 >> 1 == 5003;
      if ((_DWORD)v19 == 10008 || (_DWORD)v19 == 10011)
        v21 = 1;
      if (*(_DWORD *)(v11 + v8 + 72))
        v23 = v18;
      else
        v23 = 0;
      if (v23)
        goto LABEL_25;
      v24 = v21 | v16;
      if (!*(_DWORD *)(v11 + v8 + 76))
        v24 = v16;
      if (v24 == 1)
      {
LABEL_25:
        *(_BYTE *)(v42 + 120) = 1;
        *(_QWORD *)((char *)__p + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v9;
        Espresso::espresso_os_log_subsystem(v19, v20);
        v25 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
        {
          if (*(char *)(v11 + v8 + 23) < 0)
            v12 = (uint64_t *)*v12;
          if (*(char *)(v11 + v8 + 71) < 0)
            v13 = (_QWORD *)*v13;
          *(_DWORD *)buf = 67109634;
          *(_DWORD *)&buf[4] = v9;
          *(_WORD *)v51 = 2080;
          *(_QWORD *)&v51[2] = v12;
          *(_WORD *)&v51[10] = 2080;
          *(_QWORD *)&v51[12] = v13;
          _os_log_debug_impl(&dword_190DAF000, v25, OS_LOG_TYPE_DEBUG, "[cpu_context_transfer_algo] Needs fallback: Layer %d: %s (%s)\n", buf, 0x1Cu);
        }

      }
      ++v9;
      v8 += 224;
    }
    while (v40 != v8);
    v26 = (uint64_t *)(v42 + 48);
    if (*(_BYTE *)(v42 + 120))
    {
      v27 = v36 >> 30;
      v28 = v37 - 1;
      v29 = 0x3FFFFFFFCLL;
      do
      {
        if (((*(_QWORD *)((char *)__p + ((v28 >> 3) & 0x1FFFFFF8)) >> v28) & 1) != 0)
        {
          *(_DWORD *)(*v26 + 4 * v28) = 1;
          v30 = estimate_cost(v26, (uint64_t)a1, a4);
          *(_QWORD *)buf = 0;
          *(_QWORD *)v51 = 0;
          *(_QWORD *)&v51[8] = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(buf, *(const void **)(v42 + 48), *(_QWORD *)(v42 + 56), (uint64_t)(*(_QWORD *)(v42 + 56) - *(_QWORD *)(v42 + 48)) >> 2);
          if (v10 < v37)
            memset_pattern16((void *)(*(_QWORD *)buf + v27), &xmmword_191A93A60, (v29 & 0x3FFFFFFFCLL) + 4);
          v33 = estimate_cost((uint64_t *)buf, (uint64_t)a1, a4);
          if (v30 > v33)
          {
            if (v26 != (uint64_t *)buf)
              v31 = std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)v26, *(char **)buf, *(uint64_t *)v51, (uint64_t)(*(_QWORD *)v51 - *(_QWORD *)buf) >> 2);
            Espresso::espresso_os_log_subsystem((Espresso *)v31, v32);
            v34 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
            {
              *(_WORD *)v46 = 0;
              _os_log_debug_impl(&dword_190DAF000, v34, OS_LOG_TYPE_DEBUG, "[cpu_context_transfer_algo] disabled all_next\n", v46, 2u);
            }

          }
          Espresso::espresso_os_log_subsystem((Espresso *)v31, v32);
          v35 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)v46 = 134218240;
            v47 = v30;
            v48 = 2048;
            v49 = v33;
            _os_log_debug_impl(&dword_190DAF000, v35, OS_LOG_TYPE_DEBUG, "[cpu_context_transfer_algo] cost_single: %.2f > cost_all_next: %.2f\n", v46, 0x16u);
          }

          if (*(_QWORD *)buf)
          {
            *(_QWORD *)v51 = *(_QWORD *)buf;
            operator delete(*(void **)buf);
          }
          v26 = (uint64_t *)(v42 + 48);
        }
        --v28;
        v29 += 4;
        v27 -= 4;
        --v10;
      }
      while (v10);
    }
  }
  if (__p)
    operator delete(__p);
  std::__tree<std::string>::destroy((uint64_t)&v44, (char *)v45[0]);
}

void sub_19144A1B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,char a26,char *a27)
{
  std::__tree<std::string>::destroy((uint64_t)&a26, a27);
  _Unwind_Resume(a1);
}

float estimate_cost(uint64_t *a1, uint64_t a2, _QWORD **a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  float v11;
  unint64_t v12;
  float v13;
  __int128 *v14;
  __int128 **v15;
  __int128 v21;
  __int128 v22;
  void *__p;
  void *v24;
  uint64_t v25;

  v3 = *a1;
  v4 = a1[1];
  if (v4 == *a1)
    return 0.0;
  v8 = 0;
  v9 = 0;
  v10 = (v4 - *a1) >> 2;
  v11 = 0.0;
  do
  {
    v12 = v9 + 1;
    if (v10 > v9 + 1 && *(_DWORD *)(v3 + 4 * v9) != *(_DWORD *)(v3 + 4 * v9 + 4))
      v11 = v11 + *(float *)(a2 + 48);
    v13 = *(float *)(a2 + 52);
    if (*a3)
    {
      v15 = (__int128 **)(**a3 + v8 + 160);
      v14 = *v15;
      if ((char *)v15[1] - (char *)*v15 == 64)
      {
        v21 = *v14;
        v22 = v14[1];
        v24 = 0;
        v25 = 0;
        __p = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *((const void **)v14 + 5), *((_QWORD *)v14 + 6), (uint64_t)(*((_QWORD *)v14 + 6) - *((_QWORD *)v14 + 5)) >> 2);
        if ((_DWORD)v22 == 1 && HIDWORD(v21) == 1 && DWORD2(v21) == 1 && DWORD1(v21) == 1 && (_DWORD)v21 == 1)
          v13 = 0.001;
        if (__p)
        {
          v24 = __p;
          operator delete(__p);
        }
        v3 = *a1;
        v4 = a1[1];
      }
    }
    v11 = v11 + (float)((float)*(int *)(v3 + 4 * v9) * v13);
    v10 = (v4 - v3) >> 2;
    v8 += 224;
    ++v9;
  }
  while (v10 > v12);
  return v11;
}

void str_concat<std::unordered_set<std::string>>(std::string *a1, uint64_t *a2)
{
  uint64_t *v2;
  size_t size;
  void **v5;
  std::string *v6;
  void **v7;
  std::string::size_type v8;
  void *__p[2];
  unsigned __int8 v10;
  std::string v11;

  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  if (a2)
  {
    v2 = a2;
    do
    {
      if (*((char *)v2 + 39) < 0)
        std::string::__init_copy_ctor_external(&v11, (const std::string::value_type *)v2[2], v2[3]);
      else
        v11 = *(std::string *)(v2 + 2);
      if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v11.__r_.__value_.__r.__words[2]);
      else
        size = v11.__r_.__value_.__l.__size_;
      std::string::basic_string[abi:ne180100]((uint64_t)__p, size + 1);
      if ((v10 & 0x80u) == 0)
        v5 = __p;
      else
        v5 = (void **)__p[0];
      if (size)
      {
        if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v6 = &v11;
        else
          v6 = (std::string *)v11.__r_.__value_.__r.__words[0];
        memmove(v5, v6, size);
      }
      *(_WORD *)((char *)v5 + size) = 44;
      if ((v10 & 0x80u) == 0)
        v7 = __p;
      else
        v7 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v8 = v10;
      else
        v8 = (std::string::size_type)__p[1];
      std::string::append(a1, (const std::string::value_type *)v7, v8);
      if ((char)v10 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v11.__r_.__value_.__l.__data_);
      v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
}

void sub_19144A490(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (*(char *)(v21 + 23) < 0)
    operator delete(*(void **)v21);
  _Unwind_Resume(exception_object);
}

void str_concat<std::vector<std::string>>(std::string *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  size_t size;
  void **v7;
  std::string *v8;
  void **v9;
  std::string::size_type v10;
  void *__p[2];
  unsigned __int8 v12;
  std::string v13;

  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  if (a2 != a3)
  {
    v4 = a2;
    do
    {
      if (*(char *)(v4 + 23) < 0)
        std::string::__init_copy_ctor_external(&v13, *(const std::string::value_type **)v4, *(_QWORD *)(v4 + 8));
      else
        v13 = *(std::string *)v4;
      if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v13.__r_.__value_.__r.__words[2]);
      else
        size = v13.__r_.__value_.__l.__size_;
      std::string::basic_string[abi:ne180100]((uint64_t)__p, size + 1);
      if ((v12 & 0x80u) == 0)
        v7 = __p;
      else
        v7 = (void **)__p[0];
      if (size)
      {
        if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v8 = &v13;
        else
          v8 = (std::string *)v13.__r_.__value_.__r.__words[0];
        memmove(v7, v8, size);
      }
      *(_WORD *)((char *)v7 + size) = 44;
      if ((v12 & 0x80u) == 0)
        v9 = __p;
      else
        v9 = (void **)__p[0];
      if ((v12 & 0x80u) == 0)
        v10 = v12;
      else
        v10 = (std::string::size_type)__p[1];
      std::string::append(a1, (const std::string::value_type *)v9, v10);
      if ((char)v12 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v13.__r_.__value_.__l.__data_);
      v4 += 24;
    }
    while (v4 != a3);
  }
}

void sub_19144A604(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (*(char *)(v21 + 23) < 0)
    operator delete(*(void **)v21);
  _Unwind_Resume(exception_object);
}

void Espresso::cpu_context_transfer_algo_t::compute_local_costs(uint64_t *a1, uint64_t a2, uint64_t **a3, _QWORD *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  int v13;
  int v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  int v21;
  void *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  void *v32;
  unint64_t *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  __int128 v37;
  std::__shared_weak_count *v38;
  unint64_t *p_shared_owners;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  Espresso *v48;
  const char *v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  unint64_t v66;
  unsigned __int8 *v67;
  unsigned __int8 *v68;
  _DWORD *v69;
  int v70;
  unsigned int v71;
  float v72;
  int v73;
  uint64_t v74;
  float v75;
  int v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  void *v84;
  void *v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  int v89;
  int v90;
  unint64_t *v91;
  unint64_t v92;
  void *v93;
  void *v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  __int16 v98;
  uint64_t v99;
  int v100;
  int v101;
  unsigned int v102;
  int v103;
  unint64_t *v104;
  unint64_t v105;
  unint64_t v106;
  unsigned __int8 *v107;
  int v108;
  uint64_t *v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  __int128 v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  int v117;
  _QWORD *v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t *v122;
  unint64_t v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  NSObject *v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  unint64_t v139;
  __n128 v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v149;
  uint64_t v150;
  __int128 v153;
  uint64_t *v154;
  std::__shared_weak_count *v155;
  __int128 v156;
  uint64_t v157;
  std::__shared_weak_count *v158;
  int v159;
  void *lpsrc[2];
  __n128 v161;
  __int128 v162;
  _DWORD *v163;
  char *v164;
  unint64_t v165;
  _BYTE buf[24];
  uint64_t v167;

  v167 = *MEMORY[0x1E0C80C00];
  v149 = (*a3)[1];
  v145 = **a3;
  v7 = *a1;
  v6 = a1[1];
  v163 = 0;
  v164 = 0;
  v165 = 0;
  v144 = v6;
  v141 = v7;
  v8 = v6 - v7;
  if (v6 != v7)
  {
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = v7;
    do
    {
      v13 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)v12 + 8))(*(_QWORD *)(*(_QWORD *)v12 + 8));
      v14 = v13;
      if ((unint64_t)v11 >= v10)
      {
        v16 = (v11 - v9) >> 2;
        v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) >> 62)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        if ((uint64_t)(v10 - (_QWORD)v9) >> 1 > v17)
          v17 = (uint64_t)(v10 - (_QWORD)v9) >> 1;
        if (v10 - (unint64_t)v9 >= 0x7FFFFFFFFFFFFFFCLL)
          v18 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v18 = v17;
        if (v18)
          v18 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v18);
        else
          v19 = 0;
        v20 = (_DWORD *)(v18 + 4 * v16);
        *v20 = v14;
        v15 = (char *)(v20 + 1);
        while (v11 != v9)
        {
          v21 = *((_DWORD *)v11 - 1);
          v11 -= 4;
          *--v20 = v21;
        }
        v10 = v18 + 4 * v19;
        v163 = v20;
        v165 = v10;
        if (v9)
          operator delete(v9);
        v9 = (char *)v20;
      }
      else
      {
        *(_DWORD *)v11 = v13;
        v15 = v11 + 4;
      }
      v164 = v15;
      v12 += 16;
      v11 = v15;
    }
    while (v12 != v144);
  }
  v139 = v8 >> 4;
  *(_QWORD *)&v162 = 0x4004000000000000;
  std::vector<double>::vector(buf, ((0x100000000 - 0x4924924900000000 * ((v149 - v145) >> 5)) >> 32) * (v8 >> 4), &v162);
  v22 = *(void **)a5;
  if (*(_QWORD *)a5)
  {
    *(_QWORD *)(a5 + 8) = v22;
    operator delete(v22);
    *(_QWORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = 0;
    *(_QWORD *)(a5 + 16) = 0;
  }
  *(_OWORD *)a5 = *(_OWORD *)buf;
  *(_QWORD *)(a5 + 16) = *(_QWORD *)&buf[16];
  LOBYTE(v162) = 1;
  std::vector<BOOL>::vector(buf, ((0x100000000 - 0x4924924900000000 * ((v149 - v145) >> 5)) >> 32) * (v8 >> 4), (unsigned __int8 *)&v162);
  if (*(_QWORD *)a6)
  {
    operator delete(*(void **)a6);
    *(_QWORD *)a6 = 0;
    *(_QWORD *)(a6 + 8) = 0;
    *(_QWORD *)(a6 + 16) = 0;
  }
  *(_QWORD *)a6 = *(_QWORD *)buf;
  *(_OWORD *)(a6 + 8) = *(_OWORD *)&buf[8];
  v162 = 0uLL;
  if (0xB6DB6DB700000000 * ((v149 - v145) >> 5))
  {
    v23 = 0;
    v24 = (int)(-1227133513 * ((v149 - v145) >> 5));
    v25 = v8 >> 4;
    if (v139 <= 1)
      v25 = 1;
    v146 = v25;
    if (v24 <= 1)
      v24 = 1;
    v142 = v24;
    while (1)
    {
      v26 = **a3;
      v27 = *(__n128 *)(*a4 + 16 * v23);
      v161 = v27;
      v28 = v27.n128_u64[1];
      if (v27.n128_u64[1])
      {
        v29 = (unint64_t *)(v27.n128_u64[1] + 8);
        do
          v30 = __ldxr(v29);
        while (__stxr(v30 + 1, v29));
      }
      v31 = v26 + 224 * v23;
      v32 = *(void **)(v31 + 88);
      lpsrc[0] = v32;
      v33 = *(unint64_t **)(v31 + 96);
      lpsrc[1] = v33;
      if (v33)
      {
        v34 = v33 + 1;
        do
          v35 = __ldxr(v34);
        while (__stxr(v35 + 1, v34));
      }
      v150 = v23;
      if (v32)
        goto LABEL_79;
      v140 = v27;
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](lpsrc, *(_QWORD *)(v26 + 224 * v23 + 208), *(_QWORD *)(v26 + 224 * v23 + 216));
      v27 = v140;
      if (lpsrc[0])
        goto LABEL_79;
      if ((_QWORD)v162)
      {
        v36 = v140.n128_u64[0];
      }
      else
      {
        v159 = 0;
        Espresso::create_context(&v159, buf);
        v37 = *(_OWORD *)buf;
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = 0;
        v38 = (std::__shared_weak_count *)*((_QWORD *)&v162 + 1);
        v162 = v37;
        if (v38)
        {
          p_shared_owners = (unint64_t *)&v38->__shared_owners_;
          do
            v40 = __ldaxr(p_shared_owners);
          while (__stlxr(v40 - 1, p_shared_owners));
          if (!v40)
          {
            ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
            std::__shared_weak_count::__release_weak(v38);
          }
        }
        v41 = *(std::__shared_weak_count **)&buf[8];
        if (*(_QWORD *)&buf[8])
        {
          v42 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
          do
            v43 = __ldaxr(v42);
          while (__stlxr(v43 - 1, v42));
          if (!v43)
          {
            ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
            std::__shared_weak_count::__release_weak(v41);
          }
        }
        v28 = v161.n128_u64[1];
        v36 = v161.n128_u64[0];
      }
      v157 = v36;
      v158 = (std::__shared_weak_count *)v28;
      if (v28)
      {
        v44 = (unint64_t *)(v28 + 8);
        do
          v45 = __ldxr(v44);
        while (__stxr(v45 + 1, v44));
      }
      v156 = v162;
      if (*((_QWORD *)&v162 + 1))
      {
        v46 = (unint64_t *)(*((_QWORD *)&v162 + 1) + 8);
        do
          v47 = __ldxr(v46);
        while (__stxr(v47 + 1, v46));
      }
      Espresso::create_kernel_for_engine(buf, v26 + 224 * v23, &v157, (uint64_t *)&v156, 0);
      v27 = *(__n128 *)buf;
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = 0;
      v50 = (std::__shared_weak_count *)lpsrc[1];
      *(__n128 *)lpsrc = v27;
      if (v50)
      {
        v51 = (unint64_t *)&v50->__shared_owners_;
        do
          v52 = __ldaxr(v51);
        while (__stlxr(v52 - 1, v51));
        if (!v52)
        {
          ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
          std::__shared_weak_count::__release_weak(v50);
        }
      }
      v53 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v54 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v55 = __ldaxr(v54);
        while (__stlxr(v55 - 1, v54));
        if (!v55)
        {
          ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
          std::__shared_weak_count::__release_weak(v53);
        }
      }
      v56 = (std::__shared_weak_count *)*((_QWORD *)&v156 + 1);
      if (*((_QWORD *)&v156 + 1))
      {
        v57 = (unint64_t *)(*((_QWORD *)&v156 + 1) + 8);
        do
          v58 = __ldaxr(v57);
        while (__stlxr(v58 - 1, v57));
        if (!v58)
        {
          ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
          std::__shared_weak_count::__release_weak(v56);
        }
      }
      v59 = v158;
      if (v158)
      {
        v60 = (unint64_t *)&v158->__shared_owners_;
        do
          v61 = __ldaxr(v60);
        while (__stlxr(v61 - 1, v60));
        if (!v61)
        {
          ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
          std::__shared_weak_count::__release_weak(v59);
        }
      }
      if (lpsrc[0])
      {
LABEL_79:
        if (v141 != v144)
        {
          v62 = 0;
          v63 = v26 + 224 * v23;
          v64 = (_QWORD *)(v63 + 184);
          v65 = (_QWORD *)(v63 + 192);
          v66 = v23 * v139;
          v67 = (unsigned __int8 *)(v63 + 105);
          v68 = (unsigned __int8 *)(v63 + 106);
          do
          {
            v69 = v163;
            v70 = v163[v62];
            *(_DWORD *)buf = v70;
            v71 = v70 - 10006;
            if ((v70 - 10006) < 6 && ((0x2Fu >> v71) & 1) != 0)
            {
              *(_DWORD *)buf = v70;
              v72 = 800.0;
            }
            else
            {
              if ((v70 & 0xFFFFFFFD) == 5)
              {
                v72 = 300.0;
              }
              else
              {
                v73 = is_gpu((int *)buf);
                v27.n128_u32[0] = 1123024896;
                if (v73)
                  v72 = 120.0;
                else
                  v72 = 20.0;
              }
              *(_DWORD *)buf = v70;
              if (v71 >= 6)
                goto LABEL_92;
            }
            if (((0x2Fu >> v71) & 1) != 0)
            {
              v75 = 50.0;
              v74 = v150;
              goto LABEL_98;
            }
LABEL_92:
            v74 = v150;
            if ((v70 & 0xFFFFFFFD) == 5)
            {
              v75 = 40.0;
            }
            else
            {
              v76 = is_gpu((int *)buf);
              v27.n128_u32[0] = 1109393408;
              if (v76)
                v75 = 40.0;
              else
                v75 = 10.0;
            }
LABEL_98:
            v77 = 0.0;
            if (*v64 == *v65)
            {
              v82 = 0.0;
              v80 = 0.0;
              v78 = 0.0;
            }
            else
            {
              v78 = (*(float (**)(void *, _QWORD *, uint64_t, __n128))(*(_QWORD *)lpsrc[0] + 128))(lpsrc[0], v64, 1, v27);
              v80 = v79;
              v82 = v81;
              v77 = v83;
            }
            if (is_gpu(&v69[v62]))
            {
              if (lpsrc[0]
              {
                v85 = v84;
                v86 = (std::__shared_weak_count *)lpsrc[1];
                *(_QWORD *)buf = v84;
                *(void **)&buf[8] = lpsrc[1];
                if (lpsrc[1])
                {
                  v87 = (unint64_t *)((char *)lpsrc[1] + 8);
                  do
                    v88 = __ldxr(v87);
                  while (__stxr(v88 + 1, v87));
                }
                if (*(__int16 *)((*(uint64_t (**)(void *))(*(_QWORD *)v84 + 384))(v84) + 92) > 4
                  || *(__int16 *)((*(uint64_t (**)(void *))(*(_QWORD *)v85 + 384))(v85) + 94) >= 5)
                {
                  v89 = *(__int16 *)((*(uint64_t (**)(void *))(*(_QWORD *)v85 + 384))(v85) + 92);
                  v90 = *(__int16 *)((*(uint64_t (**)(void *))(*(_QWORD *)v85 + 384))(v85) + 94) * v89;
                  if (v90 <= 1)
                    v90 = 1;
                  v78 = v78 * (float)v90;
                }
                if (v86)
                {
                  v91 = (unint64_t *)&v86->__shared_owners_;
                  do
                    v92 = __ldaxr(v91);
                  while (__stlxr(v92 - 1, v91));
                  if (!v92)
                  {
                    ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
                    std::__shared_weak_count::__release_weak(v86);
                  }
                }
              }
              else
              {
                *(_QWORD *)buf = 0;
                *(_QWORD *)&buf[8] = 0;
              }
              v69 = v163;
            }
            if (is_cpu(&v69[v62]))
            {
              if (lpsrc[0]
              {
                v94 = v93;
                v95 = (std::__shared_weak_count *)lpsrc[1];
                *(_QWORD *)buf = v93;
                *(void **)&buf[8] = lpsrc[1];
                if (lpsrc[1])
                {
                  v96 = (unint64_t *)((char *)lpsrc[1] + 8);
                  do
                    v97 = __ldxr(v96);
                  while (__stxr(v97 + 1, v96));
                }
                v98 = *(_WORD *)((*(uint64_t (**)(void *))(*(_QWORD *)v93 + 384))(v93) + 96);
                v99 = (*(uint64_t (**)(void *))(*(_QWORD *)v94 + 384))(v94);
                v100 = v98;
                if (v98 <= 1)
                  v100 = 1;
                v101 = *(__int16 *)(v99 + 98);
                if (v101 <= 1)
                  v101 = 1;
                v102 = v101 * v100;
                if (v102 >= 0x10)
                  v103 = 16;
                else
                  v103 = v102;
                if (v102 > 4)
                  v78 = v78 * (float)v103;
                if (v95)
                {
                  v104 = (unint64_t *)&v95->__shared_owners_;
                  do
                    v105 = __ldaxr(v104);
                  while (__stlxr(v105 - 1, v104));
                  if (!v105)
                  {
                    ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
                    std::__shared_weak_count::__release_weak(v95);
                  }
                }
              }
              else
              {
                *(_QWORD *)buf = 0;
                *(_QWORD *)&buf[8] = 0;
              }
            }
            v106 = v62 + v66;
            *(double *)(*(_QWORD *)a5 + 8 * (v62 + v66)) = (float)((float)((float)((float)((float)(v77
                                                                                                 + (float)(v82 + v80))
                                                                                         * 0.00097656)
                                                                                 / v75)
                                                                         + (float)(v78 / v72))
                                                                 * 1000.0);
            if (v62)
              v107 = v68;
            else
              v107 = v67;
            v108 = *v107;
            v109 = *a3;
            v110 = (std::__shared_weak_count *)a3[1];
            v154 = *a3;
            v155 = v110;
            if (v110)
            {
              v111 = (unint64_t *)&v110->__shared_owners_;
              do
                v112 = __ldxr(v111);
              while (__stxr(v112 + 1, v111));
            }
            v113 = *(_OWORD *)(*a1 + 16 * v62);
            v153 = v113;
            v114 = (std::__shared_weak_count *)*((_QWORD *)&v113 + 1);
            if (*((_QWORD *)&v113 + 1))
            {
              v115 = (unint64_t *)(*((_QWORD *)&v113 + 1) + 8);
              do
                v116 = __ldxr(v115);
              while (__stxr(v116 + 1, v115));
            }
            v117 = Espresso::also_check_not_blacklisted(v74, v108 != 0, *v109, (const void **)&v153);
            v118 = *(_QWORD **)a6;
            v119 = v106 >> 6;
            v120 = 1 << v106;
            if (v117)
              v121 = v118[v119] | v120;
            else
              v121 = v118[v119] & ~v120;
            v118[v119] = v121;
            if (v114)
            {
              v122 = (unint64_t *)&v114->__shared_owners_;
              do
                v123 = __ldaxr(v122);
              while (__stlxr(v123 - 1, v122));
              if (!v123)
              {
                ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
                std::__shared_weak_count::__release_weak(v114);
              }
            }
            v124 = v155;
            if (v155)
            {
              v125 = (unint64_t *)&v155->__shared_owners_;
              do
                v126 = __ldaxr(v125);
              while (__stlxr(v126 - 1, v125));
              if (!v126)
              {
                ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
                std::__shared_weak_count::__release_weak(v124);
              }
            }
            if ((*(_QWORD *)(*(_QWORD *)a6 + 8 * v119) & v120) == 0)
              *(_QWORD *)(*(_QWORD *)a5 + 8 * v106) = 0x41CDCD6500000000;
            ++v62;
          }
          while (v62 != v146);
        }
      }
      else
      {
        Espresso::espresso_os_log_subsystem(v48, v49);
        v127 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v127, OS_LOG_TYPE_ERROR))
        {
          v134 = v26 + 224 * v23;
          v135 = (_QWORD *)(v134 + 48);
          if (*(char *)(v134 + 71) < 0)
            v135 = (_QWORD *)*v135;
          *(_DWORD *)buf = 134218242;
          *(_QWORD *)&buf[4] = v23;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = v135;
          _os_log_error_impl(&dword_190DAF000, v127, OS_LOG_TYPE_ERROR, "Cannot find any kernel for layer %zu (%s)", buf, 0x16u);
        }

      }
      v128 = (std::__shared_weak_count *)lpsrc[1];
      if (lpsrc[1])
      {
        v129 = (unint64_t *)((char *)lpsrc[1] + 8);
        do
          v130 = __ldaxr(v129);
        while (__stlxr(v130 - 1, v129));
        if (!v130)
        {
          ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
          std::__shared_weak_count::__release_weak(v128);
        }
      }
      v131 = (std::__shared_weak_count *)v161.n128_u64[1];
      if (v161.n128_u64[1])
      {
        v132 = (unint64_t *)(v161.n128_u64[1] + 8);
        do
          v133 = __ldaxr(v132);
        while (__stlxr(v133 - 1, v132));
        if (!v133)
        {
          ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
          std::__shared_weak_count::__release_weak(v131);
        }
      }
      v23 = v150 + 1;
      if (v150 + 1 == v142)
      {
        v136 = (std::__shared_weak_count *)*((_QWORD *)&v162 + 1);
        if (*((_QWORD *)&v162 + 1))
        {
          v137 = (unint64_t *)(*((_QWORD *)&v162 + 1) + 8);
          do
            v138 = __ldaxr(v137);
          while (__stlxr(v138 - 1, v137));
          if (!v138)
          {
            ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
            std::__shared_weak_count::__release_weak(v136);
          }
        }
        break;
      }
    }
  }
  if (v163)
    operator delete(v163);
}

void sub_19144B230(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](&v4);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](&v5);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1 - 240);
  v3 = *(void **)(v1 - 216);
  if (v3)
  {
    *(_QWORD *)(v1 - 208) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(a1);
}

void sub_19144B244()
{
  JUMPOUT(0x19144B2D4);
}

void sub_19144B24C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,char a34)
{
  uint64_t v34;
  void *v36;
  uint64_t v37;
  uint64_t v38;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a32);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a34);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v37);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v38);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v34 - 240);
  v36 = *(void **)(v34 - 216);
  if (v36)
  {
    *(_QWORD *)(v34 - 208) = v36;
    operator delete(v36);
  }
  _Unwind_Resume(a1);
}

void sub_19144B264()
{
  JUMPOUT(0x19144B2C4);
}

void sub_19144B270(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1 - 192);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v4);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v5);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1 - 240);
  v3 = *(void **)(v1 - 216);
  if (v3)
  {
    *(_QWORD *)(v1 - 208) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(a1);
}

void sub_19144B284(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1 - 192);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v4);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v5);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1 - 240);
  v3 = *(void **)(v1 - 216);
  if (v3)
  {
    *(_QWORD *)(v1 - 208) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(a1);
}

void sub_19144B298(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,char a30)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a30);
  JUMPOUT(0x19144B2ACLL);
}

void Espresso::cpu_context_transfer_algo_t::compute_graph_shortest_path(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t **a4, uint64_t *a5, uint64_t *a6, uint64_t *a7)
{
  uint64_t v7;
  char *v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  int v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  int *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  float *v30;
  float v31;
  uint64_t v32;
  float v33;
  int v34;
  float *v35;
  float v36;
  float engine_switch_const_ms;
  float v38;
  float v40;
  float v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v46;
  unsigned int v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v55;
  uint64_t v57;
  _DWORD *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  int *__p;
  uint8_t buf[4];
  int v64;
  __int16 v65;
  int v66;
  uint64_t v67;

  v67 = *MEMORY[0x1E0C80C00];
  v59 = **a4;
  v60 = (*a4)[1];
  __p = 0;
  v51 = *(_QWORD *)a2;
  v52 = *(_QWORD *)(a2 + 8);
  v7 = v52 - *(_QWORD *)a2;
  if (v52 != *(_QWORD *)a2)
  {
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = *(_QWORD *)a2;
    do
    {
      a1 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)v11 + 8))(*(_QWORD *)(*(_QWORD *)v11 + 8));
      v12 = a1;
      if ((unint64_t)v10 >= v9)
      {
        v14 = (v10 - v8) >> 2;
        v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 62)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        if ((uint64_t)(v9 - (_QWORD)v8) >> 1 > v15)
          v15 = (uint64_t)(v9 - (_QWORD)v8) >> 1;
        if (v9 - (unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL)
          a1 = 0x3FFFFFFFFFFFFFFFLL;
        else
          a1 = v15;
        if (a1)
          a1 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(a1);
        else
          a2 = 0;
        v16 = (int *)(a1 + 4 * v14);
        *v16 = v12;
        v13 = (char *)(v16 + 1);
        while (v10 != v8)
        {
          v17 = *((_DWORD *)v10 - 1);
          v10 -= 4;
          *--v16 = v17;
        }
        v9 = a1 + 4 * a2;
        __p = v16;
        if (v8)
          operator delete(v8);
        v8 = (char *)v16;
      }
      else
      {
        *(_DWORD *)v10 = a1;
        v13 = v10 + 4;
      }
      v11 += 16;
      v10 = v13;
    }
    while (v11 != v52);
  }
  v18 = 0x6DB6DB6DB6DB6DB7 * ((v60 - v59) >> 5);
  v19 = 0x100000000 - 0x4924924900000000 * ((v60 - v59) >> 5);
  v20 = v19 >> 32;
  v49 = v7 >> 4;
  v21 = (v19 >> 32) * (v7 >> 4);
  if (v21)
  {
    if (v21 >= 0x1555555555555556)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    a1 = (unint64_t)operator new(12 * v21);
    v22 = (_DWORD *)a1;
    v23 = 0;
    do
    {
      v24 = a1 + v23;
      *(_DWORD *)(v24 + 8) = 0;
      *(_QWORD *)v24 = 0xFFFFFFFFLL;
      v23 += 12;
    }
    while (12 * v49 * v20 != v23);
  }
  else
  {
    v22 = 0;
  }
  v48 = -1227133513 * ((v60 - v59) >> 5);
  v25 = (int)v18;
  if (v19)
  {
    v26 = 0;
    if (v49 <= 1)
      v27 = 1;
    else
      v27 = v7 >> 4;
    if (v20 <= 1)
      v28 = 1;
    else
      v28 = v20;
    v55 = *a6;
    v57 = *a5;
    v50 = v28;
    v53 = (uint64_t)&v22[-3 * v49 + 2];
    v58 = v22;
    do
    {
      if (v51 != v52)
      {
        v29 = 0;
        v61 = v26 * v49;
        do
        {
          v30 = (float *)&v22[3 * v29 + 3 * v61];
          v31 = *(double *)(v57 + 8 * (v29 + v61));
          v30[1] = v31;
          *((_BYTE *)v30 + 8) = (*(_QWORD *)(v55 + (((v29 + v61) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v29
                                                                                                  + v61)) & 1;
          if (v26)
          {
            v32 = 0;
            v33 = 0.0;
            v34 = -1;
            v35 = (float *)v53;
            do
            {
              if (*(_BYTE *)v35)
              {
                v36 = *(v35 - 1);
                if (v26 != (int)v18)
                {
                  engine_switch_const_ms = get_engine_switch_const_ms(__p[v29], __p[v32]);
                  if (v29 == v32)
                    v38 = 0.0;
                  else
                    v38 = 1.0;
                  v36 = v36 + (float)(v38 * engine_switch_const_ms);
                }
                if (v36 < v33 || v34 == -1)
                {
                  v33 = v36;
                  v34 = v32;
                }
              }
              ++v32;
              v35 += 3;
            }
            while (v27 != v32);
          }
          else
          {
            v40 = get_engine_switch_const_ms(__p[v29], *__p);
            v34 = 0;
            if (v29)
              v41 = 1.0;
            else
              v41 = 0.0;
            v33 = v40 * v41;
          }
          v30[1] = v33 + v31;
          *(_DWORD *)v30 = v34 + (v26 - 1) * v49;
          ++v29;
          v22 = v58;
        }
        while (v29 != v27);
      }
      ++v26;
      v53 += 12 * v49;
    }
    while (v26 != v50);
  }
  v42 = v49 * v18;
  if ((v48 & 0x80000000) == 0)
  {
    v43 = *a7;
    v44 = v48;
    while (1)
    {
      if (v44 < v25)
        *(_DWORD *)(v43 + 4 * v44) = v42 % v49 != 0;
      v42 = v22[3 * v42];
      if (v44)
      {
        if (v42 < 0)
          break;
      }
      if (v44-- <= 0)
        goto LABEL_70;
    }
    Espresso::espresso_os_log_subsystem((Espresso *)a1, (const char *)a2);
    v46 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109376;
      v64 = v42;
      v65 = 1024;
      v66 = v44;
      _os_log_error_impl(&dword_190DAF000, v46, OS_LOG_TYPE_ERROR, "assign_to_fallback_context_v2: disconnected graph_position=%d ilayer=%d", buf, 0xEu);
    }

  }
LABEL_70:
  operator delete(v22);
  if (__p)
    operator delete(__p);
}

void sub_19144B794(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  _Unwind_Resume(exception_object);
}

float get_engine_switch_const_ms(int a1, int a2)
{
  char v2;
  float result;
  int v4;
  int v5;
  int v6;

  v6 = a1;
  v5 = a2;
  v2 = is_gpu(&v6);
  result = 4.0;
  if ((v2 & 1) == 0)
  {
    v4 = is_gpu(&v5);
    result = 2.5;
    if (v4)
      return 4.0;
  }
  return result;
}

void Espresso::MetalLowmemEngine::inner_product_kernel::~inner_product_kernel(id *this)
{
  *this = &off_1E2D7EE18;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 77));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 75));

  Espresso::generic_inner_product_kernel::~generic_inner_product_kernel((Espresso::generic_inner_product_kernel *)this);
}

{
  *this = &off_1E2D7EE18;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 77));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 75));

  Espresso::generic_inner_product_kernel::~generic_inner_product_kernel((Espresso::generic_inner_product_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::MetalLowmemEngine::inner_product_kernel::__launch(uint64_t a1, id **a2, uint64_t *a3, const void ***a4)
{
  id **v5;
  id *v7;
  uint64_t v8;
  const void **v9;
  const void *v10;
  const int *v11;
  const int *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  _DWORD *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  id v23;
  void *v24;
  const float *v25;
  float *__C;
  id v27;
  const float *__B;
  const float *v29;
  _DWORD *v30;
  uint64_t v31;
  id **v32;
  uint64_t v33;
  vDSP_Length v34;
  float *v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  float *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  BOOL v46;
  float v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  id **v53;
  int v54;
  id *v55;
  id v56;
  int v57;
  __CFString *v58;
  void *v59;
  int v60;
  int v61;
  unsigned int v62;
  int v63;
  char v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  _QWORD *v68;
  _BOOL4 v69;
  _BOOL4 v70;
  _BOOL4 v71;
  _BOOL4 v72;
  BOOL v73;
  BOOL v74;
  const __CFString *v75;
  const __CFString *v76;
  BOOL v77;
  void *v78;
  void *v79;
  int32x2_t v80;
  int v81;
  char v82;
  uint64_t v83;
  void *v84;
  uint64_t v85;
  _QWORD *v86;
  char v87;
  char v88;
  int v89;
  char v90;
  unsigned int v91;
  unsigned int v92;
  uint64_t v93;
  char v94;
  BOOL v95;
  uint64_t v96;
  char v97;
  uint64_t v98;
  unsigned int v99;
  uint64_t v100;
  std::runtime_error *v101;
  std::runtime_error *exception;
  int v103;
  void *v104;
  uint64_t v105;
  int64x2_t v106;
  _QWORD v107[3];
  _DWORD *v108;
  std::__shared_weak_count *v109;
  const int *v110;
  std::__shared_weak_count *v111;
  __int128 v112;
  uint64_t v113;
  __int128 v114;
  uint64_t v115;

  v5 = a2;
  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *a4;
  v10 = **a4;
  if (v10
  {
    v12 = v11;
    v13 = (std::__shared_weak_count *)v9[1];
    v110 = v11;
    v111 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
    }
  }
  else
  {
    v12 = 0;
    v110 = 0;
    v111 = 0;
  }
  v16 = *a3;
  if (*(_QWORD *)v16
  {
    v18 = v17;
    v19 = *(std::__shared_weak_count **)(v16 + 8);
    v108 = v17;
    v109 = v19;
    if (v19)
    {
      v20 = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
  }
  else
  {
    v19 = 0;
    v18 = 0;
    v108 = 0;
    v109 = 0;
  }
  if (v12[2] != 1 || v12[3] != 1 || *(_DWORD *)(a1 + 340))
  {
    if (!*(_QWORD *)(a1 + 600))
    {
      (*(void (**)(__int128 *__return_ptr, const int *))(*(_QWORD *)v12 + 56))(&v114, v12);
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 600, &v114);
      v40 = (std::__shared_weak_count *)*((_QWORD *)&v114 + 1);
      if (*((_QWORD *)&v114 + 1))
      {
        v41 = (unint64_t *)(*((_QWORD *)&v114 + 1) + 8);
        do
          v42 = __ldaxr(v41);
        while (__stlxr(v42 - 1, v41));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }
    }
    v22 = a1 + 616;
    if (!*(_QWORD *)(a1 + 616))
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v108 + 56))(&v114);
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 616, &v114);
      v43 = (std::__shared_weak_count *)*((_QWORD *)&v114 + 1);
      if (*((_QWORD *)&v114 + 1))
      {
        v44 = (unint64_t *)(*((_QWORD *)&v114 + 1) + 8);
        do
          v45 = __ldaxr(v44);
        while (__stlxr(v45 - 1, v44));
        if (!v45)
        {
          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
          std::__shared_weak_count::__release_weak(v43);
        }
      }
    }
    (*(void (**)(const int *, id **, uint64_t))(*(_QWORD *)v110 + 40))(v110, v5, a1 + 600);
    v23 = *(id *)(a1 + 568);
    if ((*(unsigned int (**)(const int *))(*(_QWORD *)v110 + 32))(v110) == 1)
    {
      v24 = (void *)objc_msgSend(*(id *)(v8 + 144), "newBufferWithLength:options:", 4 * (*(_DWORD *)(a1 + 304) * *(_DWORD *)(a1 + 308)), 0);

      v23 = v24;
      Espresso::convert_float16_to_float32(v8, (uint64_t)v7, *(void **)(a1 + 584), v24, (*(_DWORD *)(a1 + 304) * *(_DWORD *)(a1 + 308)), 0, 0);
    }
    (*((void (**)(id *))*v7 + 5))(v7);
    v25 = *(const float **)(*(_QWORD *)(a1 + 600) + 24);
    __C = *(float **)(*(_QWORD *)v22 + 24);
    v27 = objc_retainAutorelease(v23);
    __B = (const float *)objc_msgSend(v27, "contents");
    v29 = (const float *)objc_msgSend(*(id *)(a1 + 576), "contents");
    cblas_sgemm(CblasRowMajor, CblasNoTrans, CblasTrans, v110[5], *(_DWORD *)(a1 + 304), *(_DWORD *)(a1 + 308), 1.0, v25, *(_DWORD *)(a1 + 308), __B, ((*(_DWORD *)(a1 + 308) - 1) & 0xFFFFFFFC) + 4, 0.0, __C, *(_DWORD *)(a1 + 304));
    v30 = v108;
    LODWORD(v31) = v108[5];
    if (*(_DWORD *)(a1 + 312) && v29 && (int)v31 >= 1)
    {
      v32 = v5;
      v33 = 0;
      v34 = *(int *)(a1 + 304);
      v35 = __C;
      do
      {
        vDSP_vadd(v29, 1, v35, 1, v35, 1, v34);
        ++v33;
        v31 = (int)v108[5];
        v35 += v34;
      }
      while (v33 < v31);
      v5 = v32;
    }
    v36 = (v108[3] * v108[2] * v108[4] * v31);
    v37 = *(_DWORD *)(a1 + 316);
    if (v37 == 1)
    {
      LODWORD(v114) = 0;
      vDSP_vthr(__C, 1, (const float *)&v114, __C, 1, (int)v36);
    }
    else if (v37 == 2)
    {
      v38 = (*(_DWORD *)(a1 + 304) * v31);
      if ((_DWORD)v38)
      {
        v39 = __C;
        do
        {
          if (*v39 < 0.0)
            *v39 = *v39 * 0.25;
          ++v39;
          --v38;
        }
        while (v38);
      }
    }
    if (*(_DWORD *)(a1 + 320))
      v46 = (int)v36 < 1;
    else
      v46 = 1;
    if (!v46)
    {
      do
      {
        v47 = *(float *)(a1 + 324);
        *__C = v47 * tanhf(*(float *)(a1 + 328) * *__C);
        ++__C;
        --v36;
      }
      while (v36);
    }
    (*(void (**)(_DWORD *, id **, uint64_t))(*(_QWORD *)v30 + 48))(v30, v5, v22);
    goto LABEL_53;
  }
  v53 = v5;
  v54 = v12[5];
  if (*((_QWORD *)v12 + 20)
    && *((_QWORD *)v18 + 20)
    && (*(_DWORD *)(a1 + 352) || !*((_QWORD *)v18 + 21) || !*((_QWORD *)v12 + 21)))
  {
    v55 = *(id **)(a1 + 8);
    v56 = (*v53)[19];
    v57 = v12[5];
    if (*(_DWORD *)(a1 + 336))
      v58 = CFSTR("embedding_lookup_f16");
    else
      v58 = CFSTR("buff_MatrixMultiply_f16_g1");
    if ((*(_DWORD *)(a1 + 596) - 1) <= 1)
    {
      -[__CFString stringByReplacingOccurrencesOfString:withString:](v58, "stringByReplacingOccurrencesOfString:withString:", CFSTR("_f32"), CFSTR("_f16"));
      v58 = (__CFString *)objc_claimAutoreleasedReturnValue();
    }
    Espresso::context_metal::kernel_for_function((Espresso::context_metal *)v55, &v58->isa);
    v59 = (void *)objc_claimAutoreleasedReturnValue();
    if (!*(_QWORD *)(a1 + 544)
      || *(_DWORD *)(a1 + 368) != v12[5]
      || *(_DWORD *)(a1 + 376) != *(_DWORD *)(a1 + 308)
      || *(_DWORD *)(a1 + 372) != *(_DWORD *)(a1 + 304))
    {
      *(_DWORD *)(a1 + 368) = v57;
      v60 = *(_DWORD *)(a1 + 308);
      *(_DWORD *)(a1 + 376) = v60;
      v61 = *(_DWORD *)(a1 + 304);
      *(_DWORD *)(a1 + 372) = v61;
      *(_DWORD *)(a1 + 388) = ((v61 - 1) >> 2) + 1;
      *(_DWORD *)(a1 + 392) = ((v60 - 1) >> 2) + 1;
      v62 = ((v60 - 1) >> 3) + 1;
      *(_DWORD *)(a1 + 396) = v62;
      *(_DWORD *)(a1 + 400) = v62;
      v63 = *(_DWORD *)(a1 + 596);
      if (v63 == 1)
        v64 = 1;
      else
        v64 = 2 * (v63 != 2);
      *(_DWORD *)(a1 + 380) = v60 << v64;
      *(_DWORD *)(a1 + 384) = v61 << v64;
      v65 = objc_msgSend(v55[18], "newBufferWithBytes:length:options:", a1 + 304, 132, 0);
      v66 = *(void **)(a1 + 544);
      *(_QWORD *)(a1 + 544) = v65;

    }
    if (!v59)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Kernel not found");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    objc_msgSend(v56, "setComputePipelineState:", v59);
    objc_msgSend(v56, "setBuffer:offset:atIndex:", *((_QWORD *)v12 + 20), 0, 0);
    objc_msgSend(v56, "setBuffer:offset:atIndex:", *((_QWORD *)v18 + 20), 0, 1);
    if ((*(_DWORD *)(a1 + 596) - 1) > 1)
    {
      objc_msgSend(v56, "setBuffer:offset:atIndex:", *(_QWORD *)(a1 + 568), 0, 2);
      v67 = *(_QWORD *)(a1 + 576);
      if (!v67)
      {
        v68 = (_QWORD *)(a1 + 568);
        goto LABEL_138;
      }
    }
    else
    {
      objc_msgSend(v56, "setBuffer:offset:atIndex:", *(_QWORD *)(a1 + 584), 0, 2);
      v67 = *(_QWORD *)(a1 + 576);
      if (!v67)
      {
        v68 = (_QWORD *)(a1 + 584);
LABEL_138:
        objc_msgSend(v56, "setBuffer:offset:atIndex:", *v68, 0, 3);
LABEL_139:
        objc_msgSend(v56, "setBuffer:offset:atIndex:", *(_QWORD *)(a1 + 544), 0, 4);
        v100 = *(int *)(a1 + 368);
        *(_QWORD *)&v114 = ((*(_DWORD *)(a1 + 304) - 1) >> 6) + 1;
        *((_QWORD *)&v114 + 1) = v100;
        v115 = 1;
        v112 = xmmword_191A932B0;
        v113 = 1;
        objc_msgSend(v56, "dispatchThreadgroups:threadsPerThreadgroup:", &v114, &v112);

        if (!v19)
          goto LABEL_58;
        goto LABEL_54;
      }
    }
    objc_msgSend(v56, "setBuffer:offset:atIndex:", v67, 0, 3);
    goto LABEL_139;
  }
  v27 = v7[19];
  v69 = v54 > 1;
  v70 = (v54 & 1) == 0;
  v71 = v54 > 3;
  v72 = (v54 & 3) == 0;
  v74 = v69 && v70;
  v73 = !v69 || !v70;
  v75 = CFSTR("tex2d_MatrixMultiply_f32");
  if (!v73)
    v75 = CFSTR("tex2d_MatrixMultiply_f32_2x1batch");
  v76 = CFSTR("texarray_MatrixMultiply_f32");
  if (!v73)
    v76 = CFSTR("texarray_MatrixMultiply_f32_2x1batch");
  v77 = v71 && v72;
  if (v71 && v72)
  {
    v75 = CFSTR("tex2d_MatrixMultiply_f32_4x1batch");
    v76 = CFSTR("texarray_MatrixMultiply_f32_4x1batch");
  }
  v103 = *(_DWORD *)(v8 + 220);
  if (v103 == 1)
    v78 = (void *)v76;
  else
    v78 = (void *)v75;
  if ((*(_DWORD *)(a1 + 596) - 1) <= 1)
  {
    objc_msgSend(v78, "stringByReplacingOccurrencesOfString:withString:", CFSTR("_f32"), CFSTR("_f16"));
    v78 = (void *)objc_claimAutoreleasedReturnValue();
  }
  v104 = v78;
  Espresso::context_metal::kernel_for_function((Espresso::context_metal *)v8, (NSString *)v78);
  v79 = (void *)objc_claimAutoreleasedReturnValue();
  if (!*(_QWORD *)(a1 + 544)
    || *(_DWORD *)(a1 + 368) != v12[5]
    || *(_DWORD *)(a1 + 376) != *(_DWORD *)(a1 + 308)
    || *(_DWORD *)(a1 + 372) != *(_DWORD *)(a1 + 304))
  {
    *(_DWORD *)(a1 + 368) = v54;
    v80 = *(int32x2_t *)(a1 + 304);
    *(int32x2_t *)(a1 + 372) = v80;
    *(uint32x2_t *)(a1 + 388) = vsra_n_u32((uint32x2_t)0x100000001, (uint32x2_t)vadd_s32(v80, (int32x2_t)-1), 2uLL);
    v81 = *(_DWORD *)(a1 + 596);
    if (v81 == 1)
      v82 = 1;
    else
      v82 = 2 * (v81 != 2);
    *(_DWORD *)(a1 + 380) = v80.i32[1] << v82;
    *(_DWORD *)(a1 + 384) = v80.i32[0] << v82;
    v83 = objc_msgSend(*(id *)(v8 + 144), "newBufferWithBytes:length:options:", a1 + 304, 132, 0);
    v84 = *(void **)(a1 + 544);
    *(_QWORD *)(a1 + 544) = v83;

  }
  if (!v79)
  {
    v101 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v101, "Kernel not found");
    __cxa_throw(v101, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  objc_msgSend(v27, "setComputePipelineState:", v79);
  if ((*(_DWORD *)(a1 + 596) - 1) > 1)
  {
    objc_msgSend(v27, "setBuffer:offset:atIndex:", *(_QWORD *)(a1 + 568), 0, 0);
    v85 = *(_QWORD *)(a1 + 576);
    if (!v85)
    {
      v86 = (_QWORD *)(a1 + 568);
      goto LABEL_114;
    }
  }
  else
  {
    objc_msgSend(v27, "setBuffer:offset:atIndex:", *(_QWORD *)(a1 + 584), 0, 0);
    v85 = *(_QWORD *)(a1 + 576);
    if (!v85)
    {
      v86 = (_QWORD *)(a1 + 584);
LABEL_114:
      objc_msgSend(v27, "setBuffer:offset:atIndex:", *v86, 0, 1);
      goto LABEL_115;
    }
  }
  objc_msgSend(v27, "setBuffer:offset:atIndex:", v85, 0, 1);
LABEL_115:
  objc_msgSend(v27, "setTexture:atIndex:", *((_QWORD *)v12 + 21), 0);
  objc_msgSend(v27, "setTexture:atIndex:", *((_QWORD *)v18 + 21), 2);
  objc_msgSend(v27, "setBuffer:offset:atIndex:", *(_QWORD *)(a1 + 544), 0, 3);
  v87 = v74;
  if (v77)
    v87 = 2;
  if (v74)
    v88 = 1;
  else
    v88 = v87;
  v89 = *(_DWORD *)(a1 + 372);
  if (v77)
    v90 = 2;
  else
    v90 = v88;
  v91 = v89 - 1;
  v92 = (v89 - 1) >> 2;
  v93 = 128;
  if (v91 >= 0x400)
  {
    v94 = 7;
  }
  else
  {
    v93 = 64;
    v94 = 6;
  }
  if (v91 < 0x200)
  {
    v93 = 32;
    v94 = 5;
  }
  v95 = v91 >= 0x100;
  v96 = 16;
  if (v95)
    v96 = v93;
  if (v95)
    v97 = v94;
  else
    v97 = 4;
  v98 = (v92 >> v97) + 1;
  v99 = *(_DWORD *)(a1 + 368) - 1;
  if (v103 == 1)
    v87 = v90;
  v107[0] = v98;
  v107[1] = (int)((v99 >> v87) + 1);
  v107[2] = 1;
  v105 = v96;
  v106 = vdupq_n_s64(1uLL);
  objc_msgSend(v27, "dispatchThreadgroups:threadsPerThreadgroup:", v107, &v105);

LABEL_53:
  v19 = v109;
  if (!v109)
    goto LABEL_58;
LABEL_54:
  v48 = (unint64_t *)&v19->__shared_owners_;
  do
    v49 = __ldaxr(v48);
  while (__stlxr(v49 - 1, v48));
  if (!v49)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
LABEL_58:
  v50 = v111;
  if (v111)
  {
    v51 = (unint64_t *)&v111->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
}

void sub_19144C39C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,char a23)
{
  void *v23;
  void *v24;
  void *v25;
  void *v26;

  __cxa_free_exception(v23);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  _Unwind_Resume(a1);
}

_QWORD *Espresso::MetalLowmemEngine::inner_product_kernel::blob_options@<X0>(_QWORD *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;

  if (*((_DWORD *)this + 88))
  {
    v3 = operator new(0x78uLL);
    v3[1] = 0;
    v3[2] = 0;
    *v3 = &off_1E2DBAF68;
    *((_OWORD *)v3 + 5) = 0u;
    *((_OWORD *)v3 + 6) = 0u;
    *((_OWORD *)v3 + 3) = 0u;
    *((_OWORD *)v3 + 4) = 0u;
    *((_OWORD *)v3 + 2) = 0u;
    v3[13] = 0;
    v3[14] = 0;
    *((_DWORD *)v3 + 12) = 1065353216;
    v3[7] = 0x1FFFFFFFFLL;
    v3[12] = 0;
    v3[8] = 0;
    v3[9] = 0;
    *((_BYTE *)v3 + 88) = 0;
    v3[10] = 0;
    a2[1] = v3;
    v3[3] = &off_1E2D7F198;
    this = v3 + 3;
    *a2 = this;
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return this;
}

void Espresso::MetalLowmemEngine::inner_product_kernel::share_weights(uint64_t a1, uint64_t a2)
{
  id *v4;
  id *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::runtime_error *exception;

  if (!*(_QWORD *)a2
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "invalid share_weights parameter");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v5 = v4;
  v6 = *(std::__shared_weak_count **)(a2 + 8);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  objc_storeStrong((id *)(a1 + 568), v4[71]);
  objc_storeStrong((id *)(a1 + 584), v5[73]);
  objc_storeStrong((id *)(a1 + 576), v5[72]);
  *(_QWORD *)(a1 + 552) = v5[69];
  *(_QWORD *)(a1 + 560) = v5[70];
  if (v6)
  {
    v9 = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_19144C610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void Espresso::MetalLowmemEngine::inner_product_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t *a2, unsigned __int8 **a3, const void *a4, unint64_t a5, uint64_t *a6)
{
  int v11;
  int v13;
  int v14;
  BOOL v15;
  unsigned __int8 *v16;
  int v20;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  int v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  int v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *p_shared_owners;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t *v64;
  __int128 v66;
  unint64_t *v67;
  unint64_t v68;
  int v69;
  int v70;
  BOOL v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  char *v78;
  uint64_t v79;
  char *v80;
  int v81;
  uint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  uint64_t v85;
  const void *v86;
  id *v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  size_t v91;
  uint64_t v92;
  void *v93;
  unint64_t *v94;
  unint64_t v95;
  void *v96;
  void *v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  unint64_t *v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  __int128 v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  __int128 v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  std::runtime_error *v119;
  std::runtime_error *exception;
  __int128 v121;
  uint64_t v122[2];
  id *v123;
  std::__shared_weak_count *v124;
  __int128 v125;
  uint64_t v126[4];
  __int128 v127;
  __int128 v128;
  uint64_t v129[2];
  uint64_t v130[3];
  uint64_t v131;
  uint64_t v132;

  v131 = 0;
  v132 = 0;
  if (a6 && *a6)
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v131, *a6, a6[1]);
  if (*((char *)a3 + 23) < 0)
  {
    v16 = a3[1];
    if (v16 != (unsigned __int8 *)1)
    {
      if (v16 == (unsigned __int8 *)5)
      {
        if (*(_DWORD *)*a3 != 828792663 || (*a3)[4] != 54)
          goto LABEL_164;
        goto LABEL_39;
      }
      if (v16 != (unsigned __int8 *)7)
        goto LABEL_164;
      if (*(_DWORD *)*a3 != 862347127 || *(_DWORD *)(*a3 + 3) != 1952395827)
      {
        if (*(_DWORD *)*a3 != 828792695 || *(_DWORD *)(*a3 + 3) != 1952396849)
          goto LABEL_164;
        goto LABEL_39;
      }
      goto LABEL_52;
    }
    v20 = **a3;
    goto LABEL_51;
  }
  v11 = *((unsigned __int8 *)a3 + 23);
  if (v11 == 1)
  {
    v20 = *(unsigned __int8 *)a3;
LABEL_51:
    if (v20 != 87)
    {
      if (v20 != 98)
        goto LABEL_164;
      v34 = (std::__shared_weak_count *)v132;
      v122[0] = v131;
      v122[1] = v132;
      if (v132)
      {
        v35 = (unint64_t *)(v132 + 8);
        do
          v36 = __ldxr(v35);
        while (__stxr(v36 + 1, v35));
      }
      Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<float,1>(v130, *(_QWORD *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, v122, *(_DWORD *)(a1 + 304), 1);
      if (v34)
      {
        p_shared_owners = (unint64_t *)&v34->__shared_owners_;
        do
          v38 = __ldaxr(p_shared_owners);
        while (__stlxr(v38 - 1, p_shared_owners));
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
      }
      v121 = *(_OWORD *)v130;
      if (v130[1])
      {
        v39 = (unint64_t *)(v130[1] + 8);
        do
          v40 = __ldxr(v39);
        while (__stxr(v40 + 1, v39));
      }
      v41 = (std::__shared_weak_count *)a2[1];
      if (v41)
      {
        v42 = (unint64_t *)&v41->__shared_owners_;
        do
          v43 = __ldxr(v42);
        while (__stxr(v43 + 1, v42));
      }
      Espresso::generic_inner_product_kernel::set_biases(a1, (uint64_t *)&v121);
      if (v41)
      {
        v44 = (unint64_t *)&v41->__shared_owners_;
        do
          v45 = __ldaxr(v44);
        while (__stlxr(v45 - 1, v44));
        if (!v45)
        {
          ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
          std::__shared_weak_count::__release_weak(v41);
        }
      }
      v46 = (std::__shared_weak_count *)*((_QWORD *)&v121 + 1);
      if (*((_QWORD *)&v121 + 1))
      {
        v47 = (unint64_t *)(*((_QWORD *)&v121 + 1) + 8);
        do
          v48 = __ldaxr(v47);
        while (__stlxr(v48 - 1, v47));
        if (!v48)
        {
          ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
          std::__shared_weak_count::__release_weak(v46);
        }
      }
      v49 = (std::__shared_weak_count *)v130[1];
      if (!v130[1])
        goto LABEL_164;
      v50 = (unint64_t *)(v130[1] + 8);
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
LABEL_162:
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
      goto LABEL_164;
    }
LABEL_52:
    v28 = (std::__shared_weak_count *)v132;
    v129[0] = v131;
    v129[1] = v132;
    if (v132)
    {
      v29 = (unint64_t *)(v132 + 8);
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
    }
    Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<float,2>(v130, *(_QWORD *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, v129, *(_DWORD *)(a1 + 308), *(_DWORD *)(a1 + 304), 1);
    if (v28)
    {
      v31 = (unint64_t *)&v28->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    v33 = *((char *)a3 + 23);
    if (v33 < 0)
    {
      if (a3[1] != (unsigned __int8 *)7)
      {
LABEL_98:
        v127 = *(_OWORD *)v130;
        if (v130[1])
        {
          v53 = (unint64_t *)(v130[1] + 8);
          do
            v54 = __ldxr(v53);
          while (__stxr(v54 + 1, v53));
        }
        v55 = *a2;
        v56 = (std::__shared_weak_count *)a2[1];
        v126[2] = v55;
        v126[3] = (uint64_t)v56;
        if (v56)
        {
          v57 = (unint64_t *)&v56->__shared_owners_;
          do
            v58 = __ldxr(v57);
          while (__stxr(v58 + 1, v57));
        }
        Espresso::generic_inner_product_kernel::set_weights(a1, (uint64_t *)&v127);
        if (v56)
        {
          v59 = (unint64_t *)&v56->__shared_owners_;
          do
            v60 = __ldaxr(v59);
          while (__stlxr(v60 - 1, v59));
          if (!v60)
          {
            ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
            std::__shared_weak_count::__release_weak(v56);
          }
        }
        v61 = (std::__shared_weak_count *)*((_QWORD *)&v127 + 1);
        if (*((_QWORD *)&v127 + 1))
        {
          v62 = (unint64_t *)(*((_QWORD *)&v127 + 1) + 8);
          do
            v63 = __ldaxr(v62);
          while (__stlxr(v63 - 1, v62));
          if (!v63)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        v49 = (std::__shared_weak_count *)v130[1];
        if (!v130[1])
          goto LABEL_164;
        v64 = (unint64_t *)(v130[1] + 8);
        do
          v51 = __ldaxr(v64);
        while (__stlxr(v51 - 1, v64));
        goto LABEL_162;
      }
      a3 = (unsigned __int8 **)*a3;
    }
    else if (v33 != 7)
    {
      goto LABEL_98;
    }
    if (*(_DWORD *)a3 == 862347127 && *(_DWORD *)((char *)a3 + 3) == 1952395827)
    {
      Espresso::transposed_blob_2d<Espresso::blob<float,2>>(&v128, v130);
      v105 = v128;
      v128 = 0uLL;
      v106 = (std::__shared_weak_count *)v130[1];
      *(_OWORD *)v130 = v105;
      if (v106)
      {
        v107 = (unint64_t *)&v106->__shared_owners_;
        do
          v108 = __ldaxr(v107);
        while (__stlxr(v108 - 1, v107));
        if (!v108)
        {
          ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
          std::__shared_weak_count::__release_weak(v106);
        }
      }
      v109 = (std::__shared_weak_count *)*((_QWORD *)&v128 + 1);
      if (*((_QWORD *)&v128 + 1))
      {
        v110 = (unint64_t *)(*((_QWORD *)&v128 + 1) + 8);
        do
          v111 = __ldaxr(v110);
        while (__stlxr(v111 - 1, v110));
        if (!v111)
        {
          ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
          std::__shared_weak_count::__release_weak(v109);
        }
      }
    }
    goto LABEL_98;
  }
  if (v11 != 5)
  {
    if (v11 != 7)
      goto LABEL_164;
    if (*(_DWORD *)a3 != 862347127 || *(_DWORD *)((char *)a3 + 3) != 1952395827)
    {
      v13 = *(_DWORD *)((char *)a3 + 3);
      v14 = 1952396849;
      v15 = *(_DWORD *)a3 == 828792695;
      goto LABEL_27;
    }
    goto LABEL_52;
  }
  v13 = *((unsigned __int8 *)a3 + 4);
  v15 = *(_DWORD *)a3 == 828792663;
  v14 = 54;
LABEL_27:
  if (!v15 || v13 != v14)
    goto LABEL_164;
LABEL_39:
  v22 = (std::__shared_weak_count *)v132;
  v126[0] = v131;
  v126[1] = v132;
  if (v132)
  {
    v23 = (unint64_t *)(v132 + 8);
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<unsigned short,2>(v130, *(_QWORD *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, v126, *(_DWORD *)(a1 + 308), *(_DWORD *)(a1 + 304), 1);
  if (v22)
  {
    v25 = (unint64_t *)&v22->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v27 = *((char *)a3 + 23);
  if (v27 < 0)
  {
    if (a3[1] != (unsigned __int8 *)7)
      goto LABEL_124;
    a3 = (unsigned __int8 **)*a3;
  }
  else if (v27 != 7)
  {
    goto LABEL_124;
  }
  if (*(_DWORD *)a3 == 828792695 && *(_DWORD *)((char *)a3 + 3) == 1952396849)
  {
    Espresso::transposed_blob_2d<Espresso::blob<unsigned short,2>>(&v128, v130);
    v112 = v128;
    v128 = 0uLL;
    v113 = (std::__shared_weak_count *)v130[1];
    *(_OWORD *)v130 = v112;
    if (v113)
    {
      v114 = (unint64_t *)&v113->__shared_owners_;
      do
        v115 = __ldaxr(v114);
      while (__stlxr(v115 - 1, v114));
      if (!v115)
      {
        ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
        std::__shared_weak_count::__release_weak(v113);
      }
    }
    v116 = (std::__shared_weak_count *)*((_QWORD *)&v128 + 1);
    if (*((_QWORD *)&v128 + 1))
    {
      v117 = (unint64_t *)(*((_QWORD *)&v128 + 1) + 8);
      do
        v118 = __ldaxr(v117);
      while (__stlxr(v118 - 1, v117));
      if (!v118)
      {
        ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
        std::__shared_weak_count::__release_weak(v116);
      }
    }
  }
LABEL_124:
  if ((*(_DWORD *)(a1 + 596) - 1) > 1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "not supported");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v66 = *(_OWORD *)v130;
  v125 = *(_OWORD *)v130;
  if (v130[1])
  {
    v67 = (unint64_t *)(v130[1] + 8);
    do
      v68 = __ldxr(v67);
    while (__stxr(v68 + 1, v67));
  }
  v70 = *(_DWORD *)(v66 + 8);
  v69 = *(_DWORD *)(v66 + 12);
  if (((v70 | v69) & 3) != 0)
  {
    v72 = v70 - 1;
    v71 = v70 < 1;
    v73 = v70 + 2;
    if (!v71)
      v73 = v72;
    v74 = (v73 & 0xFFFFFFFC) + 4;
    v75 = v69 - 1;
    v71 = v69 < 1;
    v76 = v69 + 2;
    if (!v71)
      v76 = v75;
    std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned short,2>,std::allocator<Espresso::blob<unsigned short,2>>,int &,int &,int &,int &,void>(&v128, v74, (v76 & 0xFFFFFFFC) + 4, 1, 1);
    if (*(int *)(v66 + 12) >= 1)
    {
      v77 = 0;
      v78 = *(char **)(v66 + 16);
      v79 = v128;
      v80 = *(char **)(v128 + 16);
      v81 = *(_DWORD *)(v66 + 8);
      do
      {
        memcpy(v80, v78, 2 * v81);
        v81 = *(_DWORD *)(v66 + 8);
        v82 = *(int *)(v79 + 8);
        if (v81 < (int)v82)
          bzero(&v80[2 * v81], 2 * (v82 + ~v81) + 2);
        v80 += 2 * v82;
        v78 += 2 * v81;
        ++v77;
      }
      while (v77 < *(_DWORD *)(v66 + 12));
    }
    if (*((_QWORD *)&v66 + 1))
    {
      v83 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
      do
        v84 = __ldaxr(v83);
      while (__stlxr(v84 - 1, v83));
      if (!v84)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v66 + 1) + 16))(*((_QWORD *)&v66 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v66 + 1));
      }
    }
  }
  else
  {
    v128 = v66;
    v125 = 0uLL;
  }
  v85 = *(int *)(v128 + 12) * (uint64_t)*(int *)(v128 + 8);
  *(_QWORD *)(a1 + 560) = v85;
  v86 = *(const void **)(a1 + 8);
  if (!v86
  {
    v123 = 0;
    v124 = 0;
    v119 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v119, "Espresso: wrong_context_type");
    v119->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
  }
  v88 = *(std::__shared_weak_count **)(a1 + 16);
  v123 = v87;
  v124 = v88;
  if (v88)
  {
    v89 = (unint64_t *)&v88->__shared_owners_;
    do
      v90 = __ldxr(v89);
    while (__stxr(v90 + 1, v89));
  }
  v91 = 2 * v85;
  v92 = objc_msgSend(v87[18], "newBufferWithLength:options:", v91, 0);
  v93 = *(void **)(a1 + 584);
  *(_QWORD *)(a1 + 584) = v92;

  if (v88)
  {
    v94 = (unint64_t *)&v88->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
  v96 = (void *)objc_msgSend(*(id *)(a1 + 584), "contents");
  memcpy(v96, *(const void **)(v128 + 16), v91);
  v97 = *(void **)(a1 + 568);
  *(_QWORD *)(a1 + 568) = 0;

  v98 = (std::__shared_weak_count *)*((_QWORD *)&v128 + 1);
  if (*((_QWORD *)&v128 + 1))
  {
    v99 = (unint64_t *)(*((_QWORD *)&v128 + 1) + 8);
    do
      v100 = __ldaxr(v99);
    while (__stlxr(v100 - 1, v99));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
      std::__shared_weak_count::__release_weak(v98);
    }
  }
  v49 = (std::__shared_weak_count *)v130[1];
  if (v130[1])
  {
    v101 = (unint64_t *)(v130[1] + 8);
    do
      v51 = __ldaxr(v101);
    while (__stlxr(v51 - 1, v101));
    goto LABEL_162;
  }
LABEL_164:
  v102 = (std::__shared_weak_count *)v132;
  if (v132)
  {
    v103 = (unint64_t *)(v132 + 8);
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      std::__shared_weak_count::__release_weak(v102);
    }
  }
}

void sub_19144CFC4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1 - 128);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1 - 104);
  _Unwind_Resume(a1);
}

BOOL Espresso::MetalLowmemEngine::inner_product_kernel::is_valid_for_engine(uint64_t a1)
{
  return !*(_DWORD *)(a1 + 336)
      && !*(_BYTE *)(a1 + 344)
      && !*(_DWORD *)(a1 + 348)
      && (double)(2 * *(_DWORD *)(a1 + 308) * *(_DWORD *)(a1 + 304)) * 0.000000953674316 < 0.5;
}

uint64_t Espresso::MetalLowmemEngine::inner_product_kernel::get_weights_blob@<X0>(uint64_t this@<X0>, int a2@<W1>, _OWORD *a3@<X8>)
{
  uint64_t v3;
  __int128 v5;
  uint64_t v6;
  int v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _OWORD v11[2];

  v3 = this;
  v5 = 0uLL;
  v11[1] = 0u;
  if (a2 == 1)
  {
    this = std::allocate_shared[abi:ne180100]<Espresso::MetalLowmemEngine::blob_container,std::allocator<Espresso::MetalLowmemEngine::blob_container>,std::shared_ptr<Espresso::abstract_context> &,Espresso::compute_path &,objc_object  {objcproto9MTLBuffer}* {__strong}&,unsigned long &,int,int,int,void>((uint64_t *)v11, (_QWORD *)(this + 8), *(_DWORD *)(this + 596), *(void **)(this + 576), *(_QWORD *)(this + 552), 1, 1, 1);
    v5 = v11[0];
  }
  else if (!a2)
  {
    v6 = *(_QWORD *)(this + 584);
    v7 = *(_DWORD *)(this + 308);
    v8 = operator new(0x100uLL);
    v9 = v8;
    v10 = 584;
    if (!v6)
      v10 = 568;
    v8[1] = 0;
    v8[2] = 0;
    *v8 = &off_1E2DBACC8;
    this = Espresso::MetalLowmemEngine::blob_container::blob_container((uint64_t)(v8 + 3), (_QWORD *)(v3 + 8), *(_DWORD *)(v3 + 596), *(void **)(v3 + v10), ((v7 - 1) & 0xFFFFFFFC) + 4, *(_DWORD *)(v3 + 304), 1, 1);
    *(_QWORD *)&v5 = this;
    *((_QWORD *)&v5 + 1) = v9;
  }
  *a3 = v5;
  return this;
}

void sub_19144D1D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t Espresso::MetalLowmemEngine::inner_product_kernel::num_weights_blob(Espresso::MetalLowmemEngine::inner_product_kernel *this)
{
  return 2;
}

void Espresso::MetalLowmemEngine::inner_product_kernel::set_biases(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  BOOL v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  const void *v19;
  _QWORD *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  size_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  unint64_t *v29;
  unint64_t v30;
  void *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::runtime_error *exception;
  _QWORD *v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  uint64_t v39;
  std::__shared_weak_count *v40;

  v4 = *a2;
  *(_DWORD *)(a1 + 312) = *a2 != 0;
  if (!v4)
  {
    v5 = *(void **)(a1 + 576);
    *(_QWORD *)(a1 + 576) = 0;

    v4 = *a2;
  }
  v6 = (std::__shared_weak_count *)a2[1];
  v37 = v4;
  v38 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v9 = *(_DWORD *)(v4 + 8);
  if ((v9 & 3) != 0)
  {
    v11 = v9 - 1;
    v10 = v9 < 1;
    v12 = v9 + 2;
    if (!v10)
      v12 = v11;
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v39, (v12 & 0xFFFFFFFC) + 4, 1, 1, 1);
    v13 = v39;
    memcpy(*(void **)(v39 + 16), *(const void **)(v4 + 16), 4 * *(int *)(v4 + 8));
    v14 = *(int *)(v4 + 8);
    v15 = *(_DWORD *)(v13 + 8);
    if ((int)v14 < v15)
      bzero((void *)(*(_QWORD *)(v13 + 16) + 4 * v14), 4 * (v15 + ~(_DWORD)v14) + 4);
    if (v6)
    {
      v16 = (unint64_t *)&v6->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  else
  {
    v39 = v4;
    v40 = v6;
    v37 = 0;
    v38 = 0;
  }
  v18 = *(int *)(v39 + 8);
  *(_QWORD *)(a1 + 552) = v18;
  v19 = *(const void **)(a1 + 8);
  if (!v19
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
  }
  v21 = *(std::__shared_weak_count **)(a1 + 16);
  v36 = v20;
  if (v21)
  {
    v22 = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  v24 = (void *)v20[18];
  v25 = 4 * v18;
  if (v25 <= 8)
    v26 = 8;
  else
    v26 = v25;
  v27 = objc_msgSend(v24, "newBufferWithLength:options:", v26, 0, v36, v21, v37, v38);
  v28 = *(void **)(a1 + 576);
  *(_QWORD *)(a1 + 576) = v27;

  if (v21)
  {
    v29 = (unint64_t *)&v21->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v31 = (void *)objc_msgSend(*(id *)(a1 + 576), "contents");
  memcpy(v31, *(const void **)(v39 + 16), v25);
  v32 = v40;
  if (v40)
  {
    v33 = (unint64_t *)&v40->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
}

void sub_19144D484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void Espresso::MetalLowmemEngine::inner_product_kernel::set_weights(uint64_t a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  int v7;
  int v8;
  BOOL v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  char *v16;
  uint64_t v17;
  char *v18;
  int v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  const void *v24;
  id *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  void *v30;
  unint64_t *v31;
  unint64_t v32;
  int *v33;
  _WORD *i;
  int v35;
  void *v41;
  const void *v42;
  _QWORD *v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  unint64_t *v51;
  unint64_t v52;
  void *v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::runtime_error *v57;
  std::runtime_error *exception;
  _QWORD *v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  uint64_t v62;
  std::__shared_weak_count *v63;

  v4 = *a2;
  v3 = (std::__shared_weak_count *)a2[1];
  v60 = *a2;
  v61 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v8 = *(_DWORD *)(v4 + 8);
  v7 = *(_DWORD *)(v4 + 12);
  if (((v8 | v7) & 3) != 0)
  {
    v10 = v8 - 1;
    v9 = v8 < 1;
    v11 = v8 + 2;
    if (!v9)
      v11 = v10;
    v12 = (v11 & 0xFFFFFFFC) + 4;
    v13 = v7 - 1;
    v9 = v7 < 1;
    v14 = v7 + 2;
    if (!v9)
      v14 = v13;
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,2>,std::allocator<Espresso::blob<float,2>>,int &,int &,int &,int &,void>(&v62, v12, (v14 & 0xFFFFFFFC) + 4, 1, 1);
    if (*(int *)(v4 + 12) >= 1)
    {
      v15 = 0;
      v16 = *(char **)(v4 + 16);
      v17 = v62;
      v18 = *(char **)(v62 + 16);
      v19 = *(_DWORD *)(v4 + 8);
      do
      {
        memcpy(v18, v16, 4 * v19);
        v19 = *(_DWORD *)(v4 + 8);
        v20 = *(int *)(v17 + 8);
        if (v19 < (int)v20)
          bzero(&v18[4 * v19], 4 * (v20 + ~v19) + 4);
        v18 += 4 * v20;
        v16 += 4 * v19;
        ++v15;
      }
      while (v15 < *(_DWORD *)(v4 + 12));
    }
    if (v3)
    {
      v21 = (unint64_t *)&v3->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
  }
  else
  {
    v62 = v4;
    v63 = v3;
    v60 = 0;
    v61 = 0;
  }
  v23 = *(int *)(v62 + 12) * (uint64_t)*(int *)(v62 + 8);
  *(_QWORD *)(a1 + 560) = v23;
  if ((*(_DWORD *)(a1 + 596) - 1) > 1)
  {
    v42 = *(const void **)(a1 + 8);
    if (!v42
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
      exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
    }
    v44 = *(std::__shared_weak_count **)(a1 + 16);
    v59 = v43;
    if (v44)
    {
      v45 = (unint64_t *)&v44->__shared_owners_;
      do
        v46 = __ldxr(v45);
      while (__stxr(v46 + 1, v45));
    }
    v47 = (void *)v43[18];
    if ((unint64_t)(4 * v23) <= 8)
      v48 = 8;
    else
      v48 = 4 * v23;
    v49 = objc_msgSend(v47, "newBufferWithLength:options:", v48, 0, v59, v44, v60, v61);
    v50 = *(void **)(a1 + 568);
    *(_QWORD *)(a1 + 568) = v49;

    if (v44)
    {
      v51 = (unint64_t *)&v44->__shared_owners_;
      do
        v52 = __ldaxr(v51);
      while (__stlxr(v52 - 1, v51));
      if (!v52)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
    }
    v53 = (void *)objc_msgSend(*(id *)(a1 + 568), "contents");
    memcpy(v53, *(const void **)(v62 + 16), 4 * v23);
  }
  else
  {
    v24 = *(const void **)(a1 + 8);
    if (!v24
    {
      v57 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v57, "Espresso: wrong_context_type");
      v57->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
    }
    v26 = *(std::__shared_weak_count **)(a1 + 16);
    if (v26)
    {
      v27 = (unint64_t *)&v26->__shared_owners_;
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
    }
    v29 = objc_msgSend(v25[18], "newBufferWithLength:options:", 2 * v23, 0, v25, v26, v60, v61);
    v30 = *(void **)(a1 + 584);
    *(_QWORD *)(a1 + 584) = v29;

    if (v26)
    {
      v31 = (unint64_t *)&v26->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    v33 = *(int **)(v62 + 16);
    for (i = (_WORD *)objc_msgSend(*(id *)(a1 + 584), "contents"); v23; --v23)
    {
      v35 = *v33++;
      _S0 = v35;
      __asm { FCVT            H0, S0 }
      *i++ = _S0;
    }
    v41 = *(void **)(a1 + 568);
    *(_QWORD *)(a1 + 568) = 0;

  }
  v54 = v63;
  if (v63)
  {
    v55 = (unint64_t *)&v63->__shared_owners_;
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
}

void sub_19144D8A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19144D8F0()
{
  JUMPOUT(0x19144D8E4);
}

char *Espresso::MetalLowmemEngine::inner_product_kernel::get_biases@<X0>(id *this@<X0>, char **a2@<X8>)
{
  uint64_t v4;
  char *v5;
  int v6;
  char *result;

  v4 = objc_msgSend(this[72], "contents");
  v5 = (char *)operator new(0x58uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &off_1E2DBEC00;
  v6 = *((_DWORD *)this + 76);
  *(_OWORD *)(v5 + 56) = 0u;
  *(_OWORD *)(v5 + 72) = 0u;
  *((_DWORD *)v5 + 8) = v6;
  *((_QWORD *)v5 + 5) = v4;
  v5[48] = 0;
  a2[1] = v5;
  *((_QWORD *)v5 + 3) = &off_1E2DA1190;
  result = v5 + 24;
  *a2 = result;
  return result;
}

char *Espresso::MetalLowmemEngine::inner_product_kernel::get_weights@<X0>(int32x2_t *this@<X0>, char **a2@<X8>)
{
  uint64_t v4;
  char *v5;
  char *result;

  v4 = objc_msgSend(*(id *)&this[72], "contents");
  v5 = (char *)operator new(0x58uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &off_1E2DBEC38;
  *(_OWORD *)(v5 + 56) = 0u;
  *(_OWORD *)(v5 + 72) = 0u;
  *((int32x2_t *)v5 + 4) = vrev64_s32(this[38]);
  *((_QWORD *)v5 + 5) = v4;
  v5[48] = 0;
  a2[1] = v5;
  *((_QWORD *)v5 + 3) = &off_1E2DA11B0;
  result = v5 + 24;
  *a2 = result;
  return result;
}

uint64_t std::allocate_shared[abi:ne180100]<Espresso::MetalLowmemEngine::blob_container,std::allocator<Espresso::MetalLowmemEngine::blob_container>,std::shared_ptr<Espresso::abstract_context> &,Espresso::compute_path &,objc_object  {objcproto9MTLBuffer}* {__strong}&,unsigned long &,int,int,int,void>(uint64_t *a1, _QWORD *a2, int a3, void *a4, int a5, int a6, int a7, int a8)
{
  _QWORD *v16;
  uint64_t result;

  v16 = operator new(0x100uLL);
  v16[1] = 0;
  v16[2] = 0;
  *v16 = &off_1E2DBACC8;
  result = Espresso::MetalLowmemEngine::blob_container::blob_container((uint64_t)(v16 + 3), a2, a3, a4, a5, a6, a7, a8);
  *a1 = result;
  a1[1] = (uint64_t)v16;
  return result;
}

void sub_19144DA90(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t Espresso::MetalLowmemEngine::blob_container::blob_container(uint64_t a1, _QWORD *a2, int a3, void *a4, int a5, int a6, int a7, int a8)
{
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  unint64_t v23;
  id v25;

  v25 = a4;
  *(_QWORD *)a1 = off_1E2D8F108;
  *(_DWORD *)(a1 + 28) = -1;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_QWORD *)(a1 + 64) = 0;
  v16 = a2[1];
  *(_QWORD *)(a1 + 72) = *a2;
  *(_QWORD *)(a1 + 80) = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 112) = 1065353216;
  *(_QWORD *)(a1 + 116) = 0xFFFFFFFF00000000;
  *(_DWORD *)(a1 + 124) = 1;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 128) = 0uLL;
  *(_OWORD *)(a1 + 144) = 0uLL;
  *(_QWORD *)a1 = &off_1E2D7E008;
  *(_OWORD *)(a1 + 160) = 0uLL;
  *(_OWORD *)(a1 + 176) = 0uLL;
  *(_QWORD *)(a1 + 192) = 0;
  *(_DWORD *)(a1 + 200) = a3;
  *(_QWORD *)(a1 + 212) = 0;
  *(_QWORD *)(a1 + 204) = 0;
  *(_DWORD *)(a1 + 228) = 0;
  *(_QWORD *)(a1 + 220) = 0;
  v19 = (std::__shared_weak_count *)operator new(0x78uLL);
  v20 = v19;
  v19->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v19->__shared_owners_;
  v19->__shared_weak_owners_ = 0;
  v19[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2D7F198;
  v19->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBAF68;
  *(_OWORD *)&v19[3].__shared_owners_ = 0u;
  v19[4].std::__shared_count = 0u;
  v19[2].std::__shared_count = 0u;
  *(_OWORD *)&v19[2].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v19[1].__shared_owners_ = 0u;
  v19[4].__shared_owners_ = 0;
  v19[4].__shared_weak_owners_ = 0;
  LODWORD(v19[2].__vftable) = 1065353216;
  v19[2].__shared_owners_ = 0x1FFFFFFFFLL;
  v19[4].__vftable = 0;
  v19[2].__shared_weak_owners_ = 0;
  v19[3].__vftable = 0;
  LOBYTE(v19[3].__shared_weak_owners_) = 0;
  v19[3].__shared_owners_ = 0;
  do
    v22 = __ldxr(p_shared_owners);
  while (__stxr(v22 + 1, p_shared_owners));
  *(_QWORD *)(a1 + 88) = v19 + 1;
  *(_QWORD *)(a1 + 96) = v19;
  objc_storeStrong((id *)(a1 + 160), a4);
  *(_DWORD *)(a1 + 8) = a5;
  *(_DWORD *)(a1 + 12) = a6;
  *(_DWORD *)(a1 + 16) = a7;
  *(_DWORD *)(a1 + 20) = a8;
  *(_DWORD *)(a1 + 24) = 1;
  do
    v23 = __ldaxr(p_shared_owners);
  while (__stlxr(v23 - 1, p_shared_owners));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }

  return a1;
}

void sub_19144DC7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  id *v10;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(v10 + 27));

  Espresso::abstract_blob_container::~abstract_blob_container((Espresso::abstract_blob_container *)v10);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::blob_container>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBACC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::blob_container>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBACC8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::blob_container>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::transposed_blob_2d<Espresso::blob<float,2>>(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  _DWORD *v12;
  uint64_t v13;

  std::allocate_shared[abi:ne180100]<Espresso::blob<float,2>,std::allocator<Espresso::blob<float,2>>,int &,int &,int &,int &,void>(a1, *(_DWORD *)(*a2 + 12), *(_DWORD *)(*a2 + 8), 1, 1);
  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 12);
  if ((int)v5 >= 1)
  {
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = *(unsigned int *)(v4 + 8);
    v10 = *a2;
    do
    {
      if ((int)v9 >= 1)
      {
        v11 = (_DWORD *)(*(_QWORD *)(v4 + 16) + v7);
        v12 = (_DWORD *)(*(_QWORD *)(v10 + 16) + v6);
        v13 = v9;
        do
        {
          *v11++ = *v12;
          v12 += v5;
          --v13;
        }
        while (v13);
      }
      ++v8;
      v7 += 4 * (int)v9;
      v6 += 4;
    }
    while (v8 != v5);
  }
}

void Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<float,1>(_QWORD *a1, uint64_t a2, std::__shared_weak_count *a3, const void *a4, unint64_t a5, uint64_t *a6, int a7, char a8)
{
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18[3];
  std::__shared_weak_count *v19;

  v18[2] = a2;
  v19 = a3;
  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v10 = (std::__shared_weak_count *)a6[1];
  v18[0] = *a6;
  v18[1] = (uint64_t)v10;
  if (v10)
  {
    v11 = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob_static<float,1>(a1, a2, a4, a5, v18, a7, a8);
  if (v10)
  {
    v13 = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v15 = v19;
  if (v19)
  {
    v16 = (unint64_t *)&v19->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_19144DEB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

_QWORD *Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob_static<float,1>(_QWORD *a1, uint64_t a2, const void *a3, unint64_t a4, uint64_t *a5, int a6, char a7)
{
  std::__shared_weak_count *size;
  unint64_t *v13;
  unint64_t v14;
  char *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::runtime_error *exception;
  std::string *v21;
  __int128 v22;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  std::string v29;
  std::string v30;
  std::string v31;
  std::string v32;
  std::string v33;

  *a1 = 0;
  a1[1] = 0;
  if (!*(_BYTE *)(a2 + 73))
    goto LABEL_5;
  if (!*a5 || (a7 & 1) != 0)
  {
    if (!*a5)
    {
LABEL_5:
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v33, a6, 1, 1, 1);
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)a1, (__int128 *)&v33);
      size = (std::__shared_weak_count *)v33.__r_.__value_.__l.__size_;
      if (v33.__r_.__value_.__l.__size_)
      {
        v13 = (unint64_t *)(v33.__r_.__value_.__l.__size_ + 8);
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
      if (a4 != 4 * *(int *)(*a1 + 8))
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::to_string(&v30, a4);
        v21 = std::string::insert(&v30, 0, "Unexpected size s=");
        v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
        v31.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v22;
        v21->__r_.__value_.__l.__size_ = 0;
        v21->__r_.__value_.__r.__words[2] = 0;
        v21->__r_.__value_.__r.__words[0] = 0;
        v23 = std::string::append(&v31, "/blob=");
        v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
        v32.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v24;
        v23->__r_.__value_.__l.__size_ = 0;
        v23->__r_.__value_.__r.__words[2] = 0;
        v23->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v29, 4 * *(int *)(*a1 + 8));
        if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v25 = &v29;
        else
          v25 = (std::string *)v29.__r_.__value_.__r.__words[0];
        if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v26 = HIBYTE(v29.__r_.__value_.__r.__words[2]);
        else
          v26 = v29.__r_.__value_.__l.__size_;
        v27 = std::string::append(&v32, (const std::string::value_type *)v25, v26);
        v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
        v33.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v28;
        v27->__r_.__value_.__l.__size_ = 0;
        v27->__r_.__value_.__r.__words[2] = 0;
        v27->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, &v33);
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      return memcpy(*(void **)(*a1 + 16), a3, a4);
    }
  }
  else if (!*(_BYTE *)(a2 + 123))
  {
    goto LABEL_5;
  }
  v16 = (char *)operator new(0x58uLL);
  *((_QWORD *)v16 + 1) = 0;
  *((_QWORD *)v16 + 2) = 0;
  *(_QWORD *)v16 = &off_1E2DBEC00;
  *((_QWORD *)v16 + 3) = &off_1E2DA1190;
  *(_OWORD *)(v16 + 56) = 0u;
  *(_OWORD *)(v16 + 72) = 0u;
  *((_DWORD *)v16 + 8) = a6;
  *((_QWORD *)v16 + 5) = a3;
  v16[48] = 0;
  v33.__r_.__value_.__r.__words[0] = (std::string::size_type)(v16 + 24);
  v33.__r_.__value_.__l.__size_ = (std::string::size_type)v16;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)a1, (__int128 *)&v33);
  v17 = (std::__shared_weak_count *)v33.__r_.__value_.__l.__size_;
  if (v33.__r_.__value_.__l.__size_)
  {
    v18 = (unint64_t *)(v33.__r_.__value_.__l.__size_ + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  return std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(*a1 + 32), *a5, a5[1]);
}

void sub_19144E144(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;
  void *v34;
  int v35;
  uint64_t v36;

  if (*(char *)(v36 - 57) < 0)
    operator delete(*(void **)(v36 - 80));
  if (a14 < 0)
    operator delete(__p);
  if (a33 < 0)
    operator delete(a28);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
  {
    operator delete(a15);
    if ((v35 & 1) == 0)
    {
LABEL_14:
      std::shared_ptr<void>::~shared_ptr[abi:ne180100](v33);
      _Unwind_Resume(a1);
    }
  }
  else if (!v35)
  {
    goto LABEL_14;
  }
  __cxa_free_exception(v34);
  goto LABEL_14;
}

void Espresso::ANECompilerEngine::einsum_kernel::~einsum_kernel(void **this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 47);
  Espresso::generic_einsum_kernel::~generic_einsum_kernel((Espresso::generic_einsum_kernel *)this);
}

{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 47);
  Espresso::generic_einsum_kernel::~generic_einsum_kernel((Espresso::generic_einsum_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANECompilerEngine::einsum_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob((_QWORD *)(a1 + 376), a3, a4, a5);
}

BOOL Espresso::ANECompilerEngine::einsum_kernel::is_valid_for_engine(uint64_t a1, int64x2_t **a2, Espresso::ANECompilerEngine *a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  const Espresso::base_kernel::validate_for_engine_args_t *v8;
  void *v9;
  std::__shared_weak_count *v10;
  const Espresso::net *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  const Espresso::net *v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  __int128 v24;
  const void *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  const Espresso::net *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  NSString *v48;
  const Espresso::base_kernel::validate_for_engine_args_t *v49;
  unsigned int v50;
  unsigned int v51;
  int64x2_t *v52;
  unint64_t *v53;
  unint64_t v54;
  int64x2_t **v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t *v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t *v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  unint64_t *v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  unint64_t *v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  unint64_t *v90;
  _BOOL8 v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  int64x2_t *v96;
  unint64_t *v97;
  unint64_t v98;
  int64x2_t *v99;
  unint64_t *v100;
  unint64_t v101;
  __CFString *v102;
  __CFString *v103;
  __int128 v104;
  int v105;
  int64x2_t *v106;
  unint64_t *v107;
  unint64_t v108;
  std::string *v109;
  uint64_t **v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  uint64_t *v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  int64x2_t *v121;
  std::__shared_weak_count *v122;
  std::string v123;
  std::string v124;
  std::string v125;
  uint64_t v126;
  uint64_t v127;
  std::__shared_weak_count *v128;
  int64x2_t *v129[2];
  std::string v130;
  __int128 v131;
  uint64_t v132;
  _QWORD v133[3];
  __int128 v134;
  __int128 v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  _QWORD v140[2];
  int64x2_t *v141[2];
  int64x2_t *v142[2];
  int64x2_t *v143[2];
  int64x2_t *v144;
  std::__shared_weak_count *v145;
  int64x2_t *v146;
  std::__shared_weak_count *v147;
  int64x2_t *v148;
  std::__shared_weak_count *v149;
  int64x2_t *v150;
  std::__shared_weak_count *v151;
  int64x2_t *v152;
  std::__shared_weak_count *v153;
  int64x2_t *v154;
  std::__shared_weak_count *v155;
  _OWORD v156[2];
  uint64_t v157;
  void *v158;
  void *v159;
  uint64_t v160;
  const Espresso::base_kernel::validate_for_engine_args_t *v161;
  std::__shared_weak_count *v162;
  _DWORD v163[8];
  _OWORD v164[2];
  uint64_t v165;
  void *__p;
  void *v167;
  uint64_t v168;
  const Espresso::base_kernel::validate_for_engine_args_t *v169;
  std::__shared_weak_count *v170;
  _DWORD v171[8];
  _OWORD v172[2];
  uint64_t v173;
  void *v174;
  void *v175;
  uint64_t v176;
  const Espresso::base_kernel::validate_for_engine_args_t *v177;
  std::__shared_weak_count *v178;
  int v179;
  int v180;
  int v181;
  int v182;
  int v183;
  int v184;
  int v185;
  int v186;
  const Espresso::base_kernel::validate_for_engine_args_t *v187;
  std::__shared_weak_count *v188;
  void **v189;

  v6 = *((_QWORD *)a3 + 6);
  v187 = 0;
  v188 = 0;
  v7 = *(std::__shared_weak_count **)(v6 + 80);
  if (v7 && (v188 = std::__shared_weak_count::lock(v7)) != 0)
  {
    v8 = *(const Espresso::base_kernel::validate_for_engine_args_t **)(v6 + 72);
    v187 = v8;
  }
  else
  {
    v8 = 0;
  }
  Espresso::ANECompilerEngine::ane_arch_allow_network_override((uint64_t)v8 + 472);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = v187;
  v10 = v188;
  v177 = v187;
  v178 = v188;
  if (v188)
  {
    p_shared_owners = (unint64_t *)&v188->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  v14 = *(_QWORD *)a3;
  v15 = *(_QWORD *)(*(_QWORD *)a3 + 32);
  v16 = *(_OWORD *)(*(_QWORD *)a3 + 16);
  v172[0] = *(_OWORD *)*(_QWORD *)a3;
  v172[1] = v16;
  v173 = v15;
  v174 = 0;
  v175 = 0;
  v176 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v174, *(const void **)(v14 + 40), *(_QWORD *)(v14 + 48), (uint64_t)(*(_QWORD *)(v14 + 48) - *(_QWORD *)(v14 + 40)) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)&v179, v11, (const Espresso::layer_shape *)v172, 1);
  if (v174)
  {
    v175 = v174;
    operator delete(v174);
  }
  if (v10)
  {
    v17 = (unint64_t *)&v10->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v20 = v187;
  v19 = v188;
  v169 = v187;
  v170 = v188;
  if (v188)
  {
    v21 = (unint64_t *)&v188->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  v23 = *(_QWORD **)a3;
  v24 = *(_OWORD *)(*(_QWORD *)a3 + 80);
  v164[0] = *(_OWORD *)(*(_QWORD *)a3 + 64);
  v164[1] = v24;
  v25 = (const void *)v23[13];
  v165 = v23[12];
  __p = 0;
  v168 = 0;
  v167 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v25, v23[14], (uint64_t)(v23[14] - (_QWORD)v25) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v171, v20, (const Espresso::layer_shape *)v164, 1);
  if (__p)
  {
    v167 = __p;
    operator delete(__p);
  }
  if (v19)
  {
    v26 = (unint64_t *)&v19->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v29 = v187;
  v28 = v188;
  v161 = v187;
  v162 = v188;
  if (v188)
  {
    v30 = (unint64_t *)&v188->__shared_owners_;
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  v32 = *((_QWORD *)a3 + 3);
  v33 = *(_QWORD *)(v32 + 32);
  v34 = *(_OWORD *)(v32 + 16);
  v156[0] = *(_OWORD *)v32;
  v156[1] = v34;
  v157 = v33;
  v158 = 0;
  v160 = 0;
  v159 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v158, *(const void **)(v32 + 40), *(_QWORD *)(v32 + 48), (uint64_t)(*(_QWORD *)(v32 + 48) - *(_QWORD *)(v32 + 40)) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v163, v29, (const Espresso::layer_shape *)v156, 1);
  if (v158)
  {
    v159 = v158;
    operator delete(v158);
  }
  if (v28)
  {
    v35 = (unint64_t *)&v28->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  if (v185 > 4 || v171[6] > 4 || v163[6] >= 5)
  {
    v39 = (std::__shared_weak_count *)a2[1];
    v154 = *a2;
    v155 = v39;
    if (v39)
    {
      v40 = (unint64_t *)&v39->__shared_owners_;
      do
        v41 = __ldxr(v40);
      while (__stxr(v41 + 1, v40));
    }
    std::string::basic_string[abi:ne180100]<0>(&v125, "einsum_kernel: inputs must be rank 3 or 4");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v130, (__int128 *)&v125, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v154, (Espresso::base_kernel::validate_for_engine_warning_t *)&v130);
    v42 = (std::__shared_weak_count *)*((_QWORD *)&v134 + 1);
    if (*((_QWORD *)&v134 + 1))
    {
      v43 = (unint64_t *)(*((_QWORD *)&v134 + 1) + 8);
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }
    v123.__r_.__value_.__r.__words[0] = (std::string::size_type)v133;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v123);
    v123.__r_.__value_.__r.__words[0] = (std::string::size_type)&v131;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v123);
    if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v130.__r_.__value_.__l.__data_);
    if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v125.__r_.__value_.__l.__data_);
    v45 = v155;
    if (!v155)
      goto LABEL_154;
    v46 = (unint64_t *)&v155->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    goto LABEL_152;
  }
  if (!v186)
  {
    v56 = (std::__shared_weak_count *)a2[1];
    v152 = *a2;
    v153 = v56;
    if (v56)
    {
      v57 = (unint64_t *)&v56->__shared_owners_;
      do
        v58 = __ldxr(v57);
      while (__stxr(v58 + 1, v57));
    }
    std::string::basic_string[abi:ne180100]<0>(&v125, "einsum_kernel: 'x' of NCDHW layout not supported.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v130, (__int128 *)&v125, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v152, (Espresso::base_kernel::validate_for_engine_warning_t *)&v130);
    v59 = (std::__shared_weak_count *)*((_QWORD *)&v134 + 1);
    if (*((_QWORD *)&v134 + 1))
    {
      v60 = (unint64_t *)(*((_QWORD *)&v134 + 1) + 8);
      do
        v61 = __ldaxr(v60);
      while (__stlxr(v61 - 1, v60));
      if (!v61)
      {
        ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
        std::__shared_weak_count::__release_weak(v59);
      }
    }
    v123.__r_.__value_.__r.__words[0] = (std::string::size_type)v133;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v123);
    v123.__r_.__value_.__r.__words[0] = (std::string::size_type)&v131;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v123);
    if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v130.__r_.__value_.__l.__data_);
    if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v125.__r_.__value_.__l.__data_);
    v45 = v153;
    if (!v153)
      goto LABEL_154;
    v62 = (unint64_t *)&v153->__shared_owners_;
    do
      v47 = __ldaxr(v62);
    while (__stlxr(v47 - 1, v62));
LABEL_152:
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
    goto LABEL_154;
  }
  if (!v171[7])
  {
    v63 = (std::__shared_weak_count *)a2[1];
    v150 = *a2;
    v151 = v63;
    if (v63)
    {
      v64 = (unint64_t *)&v63->__shared_owners_;
      do
        v65 = __ldxr(v64);
      while (__stxr(v65 + 1, v64));
    }
    std::string::basic_string[abi:ne180100]<0>(&v125, "einsum_kernel: 'y' of NCDHW layout not supported.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v130, (__int128 *)&v125, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v150, (Espresso::base_kernel::validate_for_engine_warning_t *)&v130);
    v66 = (std::__shared_weak_count *)*((_QWORD *)&v134 + 1);
    if (*((_QWORD *)&v134 + 1))
    {
      v67 = (unint64_t *)(*((_QWORD *)&v134 + 1) + 8);
      do
        v68 = __ldaxr(v67);
      while (__stlxr(v68 - 1, v67));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
        std::__shared_weak_count::__release_weak(v66);
      }
    }
    v123.__r_.__value_.__r.__words[0] = (std::string::size_type)v133;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v123);
    v123.__r_.__value_.__r.__words[0] = (std::string::size_type)&v131;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v123);
    if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v130.__r_.__value_.__l.__data_);
    if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v125.__r_.__value_.__l.__data_);
    v45 = v151;
    if (!v151)
      goto LABEL_154;
    v69 = (unint64_t *)&v151->__shared_owners_;
    do
      v47 = __ldaxr(v69);
    while (__stlxr(v47 - 1, v69));
    goto LABEL_152;
  }
  if (!Espresso::ANECompilerEngine::blob_shape_ane_compatible(&v179, v9))
  {
    v70 = (std::__shared_weak_count *)a2[1];
    v148 = *a2;
    v149 = v70;
    if (v70)
    {
      v71 = (unint64_t *)&v70->__shared_owners_;
      do
        v72 = __ldxr(v71);
      while (__stxr(v72 + 1, v71));
    }
    std::string::basic_string[abi:ne180100]<0>(&v125, "einsum_kernel: 'x' blob dimensions exceed ANE limit.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v130, (__int128 *)&v125, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v148, (Espresso::base_kernel::validate_for_engine_warning_t *)&v130);
    v73 = (std::__shared_weak_count *)*((_QWORD *)&v134 + 1);
    if (*((_QWORD *)&v134 + 1))
    {
      v74 = (unint64_t *)(*((_QWORD *)&v134 + 1) + 8);
      do
        v75 = __ldaxr(v74);
      while (__stlxr(v75 - 1, v74));
      if (!v75)
      {
        ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
        std::__shared_weak_count::__release_weak(v73);
      }
    }
    v123.__r_.__value_.__r.__words[0] = (std::string::size_type)v133;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v123);
    v123.__r_.__value_.__r.__words[0] = (std::string::size_type)&v131;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v123);
    if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v130.__r_.__value_.__l.__data_);
    if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v125.__r_.__value_.__l.__data_);
    v45 = v149;
    if (!v149)
      goto LABEL_154;
    v76 = (unint64_t *)&v149->__shared_owners_;
    do
      v47 = __ldaxr(v76);
    while (__stlxr(v47 - 1, v76));
    goto LABEL_152;
  }
  if (!Espresso::ANECompilerEngine::blob_shape_ane_compatible(v171, v9))
  {
    v77 = (std::__shared_weak_count *)a2[1];
    v146 = *a2;
    v147 = v77;
    if (v77)
    {
      v78 = (unint64_t *)&v77->__shared_owners_;
      do
        v79 = __ldxr(v78);
      while (__stxr(v79 + 1, v78));
    }
    std::string::basic_string[abi:ne180100]<0>(&v125, "einsum_kernel: 'y' blob dimensions exceed ANE limit.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v130, (__int128 *)&v125, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v146, (Espresso::base_kernel::validate_for_engine_warning_t *)&v130);
    v80 = (std::__shared_weak_count *)*((_QWORD *)&v134 + 1);
    if (*((_QWORD *)&v134 + 1))
    {
      v81 = (unint64_t *)(*((_QWORD *)&v134 + 1) + 8);
      do
        v82 = __ldaxr(v81);
      while (__stlxr(v82 - 1, v81));
      if (!v82)
      {
        ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
        std::__shared_weak_count::__release_weak(v80);
      }
    }
    v123.__r_.__value_.__r.__words[0] = (std::string::size_type)v133;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v123);
    v123.__r_.__value_.__r.__words[0] = (std::string::size_type)&v131;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v123);
    if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v130.__r_.__value_.__l.__data_);
    if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v125.__r_.__value_.__l.__data_);
    v45 = v147;
    if (!v147)
      goto LABEL_154;
    v83 = (unint64_t *)&v147->__shared_owners_;
    do
      v47 = __ldaxr(v83);
    while (__stlxr(v47 - 1, v83));
    goto LABEL_152;
  }
  if (!Espresso::ANECompilerEngine::blob_shape_ane_compatible(v163, v9))
  {
    v84 = (std::__shared_weak_count *)a2[1];
    v144 = *a2;
    v145 = v84;
    if (v84)
    {
      v85 = (unint64_t *)&v84->__shared_owners_;
      do
        v86 = __ldxr(v85);
      while (__stxr(v86 + 1, v85));
    }
    std::string::basic_string[abi:ne180100]<0>(&v125, "einsum_kernel: output blob dimensions exceed ANE limit.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v130, (__int128 *)&v125, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v144, (Espresso::base_kernel::validate_for_engine_warning_t *)&v130);
    v87 = (std::__shared_weak_count *)*((_QWORD *)&v134 + 1);
    if (*((_QWORD *)&v134 + 1))
    {
      v88 = (unint64_t *)(*((_QWORD *)&v134 + 1) + 8);
      do
        v89 = __ldaxr(v88);
      while (__stlxr(v89 - 1, v88));
      if (!v89)
      {
        ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
        std::__shared_weak_count::__release_weak(v87);
      }
    }
    v123.__r_.__value_.__r.__words[0] = (std::string::size_type)v133;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v123);
    v123.__r_.__value_.__r.__words[0] = (std::string::size_type)&v131;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v123);
    if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v130.__r_.__value_.__l.__data_);
    if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v125.__r_.__value_.__l.__data_);
    v45 = v145;
    if (!v145)
      goto LABEL_154;
    v90 = (unint64_t *)&v145->__shared_owners_;
    do
      v47 = __ldaxr(v90);
    while (__stlxr(v47 - 1, v90));
    goto LABEL_152;
  }
  if (Espresso::ANECompilerEngine::is_mix((Espresso::ANECompilerEngine *)v9, v48) && v184 != v171[5])
  {
    v96 = a2[1];
    v143[0] = *a2;
    v143[1] = v96;
    if (v96)
    {
      v97 = &v96->u64[1];
      do
        v98 = __ldxr(v97);
      while (__stxr(v98 + 1, v97));
    }
    std::string::basic_string[abi:ne180100]<0>(&v125, "einsum_kernel: broadcasting not supported on pre-h13.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v130, (__int128 *)&v125, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v143, (Espresso::base_kernel::validate_for_engine_warning_t *)&v130);
    Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)&v130.__r_.__value_.__l.__data_);
    if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v125.__r_.__value_.__l.__data_);
    v55 = v143;
    goto LABEL_175;
  }
  v49 = v187;
  v50 = Espresso::ANECompilerEngine::bottom_compute_path(a3, v187, 0);
  v51 = Espresso::ANECompilerEngine::bottom_compute_path(a3, v49, (const Espresso::net *)1);
  if (v50 >= 8 || ((0x97u >> v50) & 1) == 0)
  {
    v52 = a2[1];
    v142[0] = *a2;
    v142[1] = v52;
    if (v52)
    {
      v53 = &v52->u64[1];
      do
        v54 = __ldxr(v53);
      while (__stxr(v54 + 1, v53));
    }
    std::string::basic_string[abi:ne180100]<0>(&v125, "einsum_kernel: unsupported 'x' compute path for ANE.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v130, (__int128 *)&v125, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v142, (Espresso::base_kernel::validate_for_engine_warning_t *)&v130);
    Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)&v130.__r_.__value_.__l.__data_);
    if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v125.__r_.__value_.__l.__data_);
    v55 = v142;
LABEL_175:
    std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v55);
LABEL_154:
    v91 = 0;
    goto LABEL_155;
  }
  if (v51 >= 8 || ((0x97u >> v51) & 1) == 0)
  {
    v99 = a2[1];
    v141[0] = *a2;
    v141[1] = v99;
    if (v99)
    {
      v100 = &v99->u64[1];
      do
        v101 = __ldxr(v100);
      while (__stxr(v101 + 1, v100));
    }
    std::string::basic_string[abi:ne180100]<0>(&v125, "einsum_kernel: unsupported 'y' compute path for ANE.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v130, (__int128 *)&v125, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v141, (Espresso::base_kernel::validate_for_engine_warning_t *)&v130);
    Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)&v130.__r_.__value_.__l.__data_);
    if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v125.__r_.__value_.__l.__data_);
    v55 = v141;
    goto LABEL_175;
  }
  v102 = off_1E2DD33E8[v50];
  v103 = off_1E2DD33E8[v51];
  Espresso::ANECompilerEngine::ane_kernel::get_ane_validator((Espresso::ANECompilerEngine::ane_kernel *)v140, (NSString *)(a1 + 376), v9);
  ANECMatrixMultLayerDescInitialize();
  v137 = 0;
  v138 = 0;
  ANECTensorDescInitialize();
  ANECTensorDescInitialize();
  v130.__r_.__value_.__l.__size_ = v179;
  v130.__r_.__value_.__r.__words[2] = v180;
  v132 = v181;
  *(_QWORD *)&v104 = v182;
  *((_QWORD *)&v104 + 1) = v183;
  v131 = v104;
  v130.__r_.__value_.__r.__words[0] = (std::string::size_type)v102;
  *(_QWORD *)&v104 = v171[3];
  *((_QWORD *)&v104 + 1) = v171[4];
  v135 = v104;
  v133[2] = v103;
  v136 = v171[2];
  *(_QWORD *)&v104 = v171[0];
  *((_QWORD *)&v104 + 1) = v171[1];
  v134 = v104;
  v139 = v180;
  v105 = ANECValidateMatrixMultLayer();
  v91 = v105 == 0;
  if (v105)
  {
    v106 = a2[1];
    v129[0] = *a2;
    v129[1] = v106;
    if (v106)
    {
      v107 = &v106->u64[1];
      do
        v108 = __ldxr(v107);
      while (__stxr(v108 + 1, v107));
    }
    std::to_string(&v124, v105);
    v109 = std::string::insert(&v124, 0, "einsum_kernel: ANECValidateMatrixMultLayer failed with status");
    v123 = *v109;
    v109->__r_.__value_.__l.__size_ = 0;
    v109->__r_.__value_.__r.__words[2] = 0;
    v109->__r_.__value_.__r.__words[0] = 0;
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v125, (__int128 *)&v123, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v129, (Espresso::base_kernel::validate_for_engine_warning_t *)&v125);
    Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)&v125.__r_.__value_.__l.__data_);
    if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v123.__r_.__value_.__l.__data_);
    if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v124.__r_.__value_.__l.__data_);
    std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v129);
    Espresso::ANECompilerEngine::violations_from_alternates<ANECMatrixMultLayerDescAlternate>((uint64_t)&v123, v138, v137);
    v110 = (uint64_t **)v123.__r_.__value_.__r.__words[2];
    if (v123.__r_.__value_.__r.__words[2])
    {
      do
      {
        v111 = (std::__shared_weak_count *)a2[1];
        v121 = *a2;
        v122 = v111;
        if (v111)
        {
          v112 = (unint64_t *)&v111->__shared_owners_;
          do
            v113 = __ldxr(v112);
          while (__stxr(v113 + 1, v112));
        }
        v114 = objc_retainAutorelease(v110[2]);
        std::string::basic_string[abi:ne180100]<0>(&v124, (char *)objc_msgSend(v114, "UTF8String", v121));
        Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v125, (__int128 *)&v124, (uint64_t)a3, 0);
        Espresso::emit_kernel_validation_warning(&v121, (Espresso::base_kernel::validate_for_engine_warning_t *)&v125);
        v115 = v128;
        if (v128)
        {
          v116 = (unint64_t *)&v128->__shared_owners_;
          do
            v117 = __ldaxr(v116);
          while (__stlxr(v117 - 1, v116));
          if (!v117)
          {
            ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
            std::__shared_weak_count::__release_weak(v115);
          }
        }
        v189 = (void **)&v127;
        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v189);
        v189 = (void **)&v126;
        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v189);
        if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v125.__r_.__value_.__l.__data_);
        if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v124.__r_.__value_.__l.__data_);
        v118 = v122;
        if (v122)
        {
          v119 = (unint64_t *)&v122->__shared_owners_;
          do
            v120 = __ldaxr(v119);
          while (__stlxr(v120 - 1, v119));
          if (!v120)
          {
            ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
            std::__shared_weak_count::__release_weak(v118);
          }
        }
        v110 = (uint64_t **)*v110;
      }
      while (v110);
    }
    std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&v123);
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v140);
LABEL_155:

  v92 = v188;
  if (v188)
  {
    v93 = (unint64_t *)&v188->__shared_owners_;
    do
      v94 = __ldaxr(v93);
    while (__stlxr(v94 - 1, v93));
    if (!v94)
    {
      ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
      std::__shared_weak_count::__release_weak(v92);
    }
  }
  return v91;
}

void sub_19144EFD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  void *v55;
  uint64_t v56;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a55);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v56 - 104);
  _Unwind_Resume(a1);
}

void sub_19144F2EC()
{
  JUMPOUT(0x19144F2DCLL);
}

const char *Espresso::generic_einsum_kernel::kernel_type_str(Espresso::generic_einsum_kernel *this)
{
  return "einsum";
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::einsum_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

void Espresso::ANECompilerEngine::einsum_kernel::compile(Espresso::ANECompilerEngine::einsum_kernel *this, Espresso::ANECompilerEngine::compiler *a2, std::string *a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  std::__shared_weak_count *v10;
  const void *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  char *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  _DWORD *v18;
  _DWORD *v19;
  unint64_t *v20;
  unint64_t v21;
  __CFString *v22;
  std::string::pointer data;
  __int128 v24;
  __int128 v25;
  uint64_t i;
  std::string *v27;
  std::string *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  const char *v44;
  std::string v45;
  uint64_t v46;
  std::vector<std::string> v47;
  void *__p;
  char v49;
  id v50;
  __CFString *v51;
  id v52;
  int v53;
  void *v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  std::string *v57;
  _QWORD v58[2];
  std::__shared_weak_count *v59;
  const void *v60;
  std::__shared_weak_count *v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  std::string __str;
  std::string v65;
  __int128 v66;

  *((_QWORD *)&v66 + 1) = *MEMORY[0x1E0C80C00];
  v62 = 0;
  v63 = 0;
  v4 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
  if (!v4 || (v63 = std::__shared_weak_count::lock(v4)) == 0 || (v7 = *((_QWORD *)a2 + 1), (v62 = v7) == 0))
  {
    v44 = "Inconsistent state: null network";
    goto LABEL_67;
  }
  if (!*(_QWORD *)(v7 + 576))
  {
    v44 = "Inconsistent state: blob_storage";
LABEL_67:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v44);
  }
  v8 = v7 + 136;
  v45.__r_.__value_.__r.__words[0] = a3[2].__r_.__value_.__r.__words[0];
  v9 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7 + 136, (unsigned __int8 *)v45.__r_.__value_.__l.__data_, (__int128 **)&v45);
  v11 = (const void *)*((_QWORD *)v9 + 5);
  v10 = (std::__shared_weak_count *)*((_QWORD *)v9 + 6);
  v60 = v11;
  v61 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  v45.__r_.__value_.__r.__words[0] = (std::string::size_type)a3;
  v14 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8, (unsigned __int8 *)a3, (__int128 **)&v45);
  v15 = (std::__shared_weak_count *)*((_QWORD *)v14 + 6);
  v58[1] = *((_QWORD *)v14 + 5);
  v59 = v15;
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  v56 = 0;
  v57 = 0;
  v58[0] = 0;
  if (v11
  {
    v19 = v18;
    v54 = v18;
    v55 = v10;
    if (v10)
    {
      v20 = (unint64_t *)&v10->__shared_owners_;
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
  }
  else
  {
    v10 = 0;
    v19 = 0;
    v54 = 0;
    v55 = 0;
  }
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v45.__r_.__value_.__l.__data_, (id *)&a3->__r_.__value_.__l.__data_);
  v22 = v51;
  v51 = CFSTR("MatrixMultiplication");

  v53 = v19[41];
  data = a3[2].__r_.__value_.__l.__data_;
  if (data[23] < 0)
  {
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)data, *((_QWORD *)data + 1));
    data = a3[2].__r_.__value_.__l.__data_;
  }
  else
  {
    v24 = *(_OWORD *)data;
    __str.__r_.__value_.__r.__words[2] = *((_QWORD *)data + 2);
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v24;
  }
  if (data[47] < 0)
  {
    std::string::__init_copy_ctor_external(&v65, *((const std::string::value_type **)data + 3), *((_QWORD *)data + 4));
  }
  else
  {
    v25 = *(_OWORD *)(data + 24);
    v65.__r_.__value_.__r.__words[2] = *((_QWORD *)data + 5);
    *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v25;
  }
  std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v47, &__str, &v66, 2uLL);
  for (i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v65.__r_.__value_.__r.__words[i + 2]) < 0)
      operator delete(*(void **)((char *)&__str + i * 8 + 24));
  }
  std::string::operator=(&v45, a3);
  v27 = v57;
  if ((unint64_t)v57 >= v58[0])
  {
    v29 = 0x8E38E38E38E38E39 * (((uint64_t)v57 - v56) >> 4);
    if (v29 + 1 > 0x1C71C71C71C71C7)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v30 = 0x1C71C71C71C71C72 * ((v58[0] - v56) >> 4);
    if (v30 <= v29 + 1)
      v30 = v29 + 1;
    if (0x8E38E38E38E38E39 * ((v58[0] - v56) >> 4) >= 0xE38E38E38E38E3)
      v31 = 0x1C71C71C71C71C7;
    else
      v31 = v30;
    v65.__r_.__value_.__l.__size_ = (std::string::size_type)v58;
    if (v31)
      v31 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v31);
    else
      v32 = 0;
    __str.__r_.__value_.__r.__words[0] = v31;
    __str.__r_.__value_.__l.__size_ = v31 + 144 * v29;
    __str.__r_.__value_.__r.__words[2] = __str.__r_.__value_.__l.__size_;
    v65.__r_.__value_.__r.__words[0] = v31 + 144 * v32;
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)__str.__r_.__value_.__l.__size_, (uint64_t)&v45);
    __str.__r_.__value_.__r.__words[2] += 144;
    std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v56, &__str);
    v28 = v57;
    std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&__str);
  }
  else
  {
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v57, (uint64_t)&v45);
    v28 = v27 + 6;
  }
  v57 = v28;
  (*(void (**)(char *, Espresso::ANECompilerEngine::compiler *, uint64_t *))(*((_QWORD *)this + 47) + 24))((char *)this + 376, a2, &v56);

  if (v49 < 0)
    operator delete(__p);
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v47;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v46;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  if (v10)
  {
    v33 = (unint64_t *)&v10->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v45.__r_.__value_.__r.__words[0] = (std::string::size_type)&v56;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&v45);
  v35 = v59;
  if (v59)
  {
    v36 = (unint64_t *)&v59->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  v38 = v61;
  if (v61)
  {
    v39 = (unint64_t *)&v61->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  v41 = v63;
  if (v63)
  {
    v42 = (unint64_t *)&v63->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
}

void sub_19144F7B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,char a30)
{
  uint64_t v30;

  if (*(char *)(v30 - 105) < 0)
    operator delete(*(void **)(v30 - 128));
  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t((id *)&a10);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  a10 = (void **)&a30;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v30 - 176);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v30 - 160);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v30 - 144);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::einsum_kernel::compile(Espresso::ANECompilerEngine::einsum_kernel *this, Espresso::ANECompilerEngine::compiler *a2, std::string *a3)
{
  Espresso::ANECompilerEngine::einsum_kernel::compile((Espresso::ANECompilerEngine::einsum_kernel *)((char *)this - 376), a2, a3);
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::einsum_kernel::~einsum_kernel(void **this)
{
  Espresso::generic_einsum_kernel *v1;

  v1 = (Espresso::generic_einsum_kernel *)(this - 47);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::generic_einsum_kernel::~generic_einsum_kernel(v1);
}

{
  Espresso::generic_einsum_kernel *v1;

  v1 = (Espresso::generic_einsum_kernel *)(this - 47);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::generic_einsum_kernel::~generic_einsum_kernel(v1);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANECompilerEngine::violations_from_alternates<ANECMatrixMultLayerDescAlternate>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  CFTypeRef *v7;
  unint64_t *v8;
  unint64_t v9;
  CFTypeRef *v10;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a2)
  {
    v6 = 0;
    v7 = (CFTypeRef *)(a3 + 8);
    do
    {
      v8 = (unint64_t *)(a3 + 552 * v6);
      if (*v8)
      {
        v9 = 0;
        v10 = v7;
        do
        {
          std::__hash_table<__CFString const*,Espresso::ANECompilerEngine::CFStringHasher,Espresso::ANECompilerEngine::CFStringEqualWrapper,std::allocator<__CFString const*>>::__emplace_unique_key_args<__CFString const*,__CFString const* const&>((float *)a1, v10, v10);
          ++v9;
          ++v10;
        }
        while (v9 < *v8);
      }
      ++v6;
      v7 += 69;
    }
    while (v6 != a2);
  }
}

void sub_19144F98C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

char *Espresso::ANECompilerEngine::einsum_kernel::einsum_kernel(char *a1, _QWORD *a2, const std::string *a3)
{
  uint64_t v6;
  const std::string *v7;
  char v8;

  v6 = Espresso::base_kernel::base_kernel((uint64_t)a1, a2);
  v7 = (const std::string *)(v6 + 280);
  *(_OWORD *)(v6 + 344) = 0u;
  *(_OWORD *)(v6 + 360) = 0u;
  *(_OWORD *)(v6 + 312) = 0u;
  *(_OWORD *)(v6 + 328) = 0u;
  *(_OWORD *)(v6 + 280) = 0u;
  *(_OWORD *)(v6 + 296) = 0u;
  v8 = *(_BYTE *)(*a2 + 123);
  *(_OWORD *)(v6 + 512) = 0u;
  *(_OWORD *)(v6 + 528) = 0u;
  *(_OWORD *)(v6 + 384) = 0u;
  *(_OWORD *)(v6 + 400) = 0u;
  *(_OWORD *)(v6 + 416) = 0u;
  *(_BYTE *)(v6 + 432) = 0;
  *(_OWORD *)(v6 + 440) = 0u;
  *(_OWORD *)(v6 + 456) = 0u;
  *(_OWORD *)(v6 + 472) = 0u;
  *(_OWORD *)(v6 + 488) = 0u;
  *(_BYTE *)(v6 + 504) = 0;
  *(_DWORD *)(v6 + 544) = 1065353216;
  *(_WORD *)(v6 + 552) = 0;
  *(_BYTE *)(v6 + 554) = 0;
  __asm { FMOV            V1.2S, #1.0 }
  *(_QWORD *)(v6 + 556) = _D1;
  *(_BYTE *)(v6 + 564) = 0;
  *(_OWORD *)(v6 + 568) = 0u;
  *(_BYTE *)(v6 + 584) = v8;
  *(_QWORD *)v6 = &off_1E2D74D60;
  *(_QWORD *)(v6 + 376) = &unk_1E2D74EC0;
  std::string::operator=((std::string *)(v6 + 280), a3);
  if (v7 != a3)
  {
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(a1 + 304, a3[1].__r_.__value_.__l.__data_, a3[1].__r_.__value_.__l.__size_, (uint64_t)(a3[1].__r_.__value_.__l.__size_ - a3[1].__r_.__value_.__r.__words[0]) >> 2);
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(a1 + 328, a3[2].__r_.__value_.__l.__data_, a3[2].__r_.__value_.__l.__size_, (uint64_t)(a3[2].__r_.__value_.__l.__size_ - a3[2].__r_.__value_.__r.__words[0]) >> 2);
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(a1 + 352, a3[3].__r_.__value_.__l.__data_, a3[3].__r_.__value_.__l.__size_, (uint64_t)(a3[3].__r_.__value_.__l.__size_ - a3[3].__r_.__value_.__r.__words[0]) >> 2);
  }
  return a1;
}

void sub_19144FAAC(_Unwind_Exception *a1)
{
  Espresso::generic_einsum_kernel *v1;
  void **v2;

  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);
  Espresso::generic_einsum_kernel::~generic_einsum_kernel(v1);
  _Unwind_Resume(a1);
}

void Espresso::MPSBuffersEngine::softmax_kernel::~softmax_kernel(id *this)
{

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::MPSBuffersEngine::softmax_kernel::__launch(Espresso::MPSBuffersEngine::softmax_kernel *this, uint64_t a2, Espresso::layer_data *a3, Espresso::layer_data *a4)
{
  uint64_t v8;
  const void *v9;
  id *v10;
  id *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  const void *v16;
  id *v17;
  id *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  id v28;
  id v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  _QWORD *v36;
  std::__shared_weak_count *v37;
  id *v38;
  std::__shared_weak_count *v39;
  std::__shared_weak_count *v40;

  if (!*((_QWORD *)this + 39))
    Espresso::MPSBuffersEngine::softmax_kernel::on_resized(this, a3, a4);
  v8 = *(_QWORD *)a3;
  v9 = **(const void ***)a3;
  if (v9
  {
    v11 = v10;
    v12 = *(std::__shared_weak_count **)(v8 + 8);
    v40 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
  }
  else
  {
    v11 = 0;
    v40 = 0;
  }
  v15 = *(_QWORD *)a4;
  v16 = **(const void ***)a4;
  if (v16
  {
    v18 = v17;
    v19 = *(std::__shared_weak_count **)(v15 + 8);
    v38 = v17;
    v39 = v19;
    if (v19)
    {
      v20 = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
  }
  else
  {
    v18 = 0;
    v38 = 0;
    v39 = 0;
  }
  if (*(_QWORD *)a2
  {
    v23 = *(std::__shared_weak_count **)(a2 + 8);
    v36 = v22;
    v37 = v23;
    if (v23)
    {
      v24 = (unint64_t *)&v23->__shared_owners_;
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 1, v24));
    }
  }
  else
  {
    v23 = 0;
    v22 = 0;
    v36 = 0;
    v37 = 0;
  }
  v26 = (void *)*((_QWORD *)this + 39);
  if (!v26)
    Espresso::throw_exception_selector<Espresso::generic_error>("Failed to make softmax in softmax_kernel");
  v27 = v22[18];
  v28 = v18[25];
  v29 = v11[25];
  objc_msgSend(v26, "encodeToCommandBuffer:inputMatrix:resultMatrix:", v27, v28, v29, v36, v37, v38);

  if (v23)
  {
    v30 = (unint64_t *)&v23->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  if (v39)
  {
    v32 = (unint64_t *)&v39->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  if (v40)
  {
    v34 = (unint64_t *)&v40->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
}

void sub_19144FD90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  void *v13;
  void *v14;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void Espresso::MPSBuffersEngine::softmax_kernel::blob_options(Espresso::MPSBuffersEngine::softmax_kernel *this@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  const void *v4;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 v17;
  _QWORD *v18;
  std::__shared_weak_count *v19;

  *a3 = 0;
  a3[1] = 0;
  v4 = (const void *)*((_QWORD *)this + 1);
  if (v4)
  {
    if (v7)
    {
      v8 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
      v18 = v7;
      v19 = v8;
      if (v8)
      {
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldxr(p_shared_owners);
        while (__stxr(v10 + 1, p_shared_owners));
      }
      if (a2)
      {
        v11 = operator new(0x70uLL);
        v11[1] = 0;
        v11[2] = 0;
        *v11 = &off_1E2DBE228;
        *((_OWORD *)v11 + 4) = 0u;
        *((_OWORD *)v11 + 5) = 0u;
        *((_OWORD *)v11 + 2) = 0u;
        *((_OWORD *)v11 + 3) = 0u;
        v11[3] = &off_1E2D9B4D8;
        *((_DWORD *)v11 + 12) = 1065353216;
        v11[7] = 0x1FFFFFFFFLL;
        v11[12] = 0;
        v11[13] = 0;
        v11[8] = 0;
        v11[9] = 0;
        *((_BYTE *)v11 + 88) = 0;
        v11[10] = 0;
        *(_QWORD *)&v17 = v11 + 3;
        *((_QWORD *)&v17 + 1) = v11;
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)a3, &v17);
        v12 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
        if (*((_QWORD *)&v17 + 1))
        {
          v13 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 - 1, v13));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(*a3 + 72), v18[28], v18[29]);
        v8 = v19;
      }
      if (v8)
      {
        v15 = (unint64_t *)&v8->__shared_owners_;
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
  }
}

void sub_19144FF40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v3);
  _Unwind_Resume(a1);
}

uint64_t Espresso::MPSBuffersEngine::softmax_kernel::force_high_precision_output_f32(Espresso::MPSBuffersEngine::softmax_kernel *this)
{
  return 0;
}

void Espresso::MPSBuffersEngine::softmax_kernel::on_resized(Espresso::MPSBuffersEngine::softmax_kernel *this, Espresso::layer_data *a2, Espresso::layer_data *a3)
{
  void *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  int *v12;
  int *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  const void *v17;
  _QWORD *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  _QWORD *v25;
  void *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  std::runtime_error *exception;
  int *v34;
  std::__shared_weak_count *v35;
  std::__shared_weak_count *v36;

  if (*((_QWORD *)a2 + 1) != *(_QWORD *)a2 && *((_QWORD *)a3 + 1) != *(_QWORD *)a3)
  {
    v6 = (void *)*((_QWORD *)this + 39);
    *((_QWORD *)this + 39) = 0;

    v7 = *(_QWORD *)a2;
    if (*(_QWORD *)v7
    {
      v8 = *(std::__shared_weak_count **)(v7 + 8);
      v36 = v8;
      if (v8)
      {
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldxr(p_shared_owners);
        while (__stxr(v10 + 1, p_shared_owners));
      }
    }
    else
    {
      v36 = 0;
    }
    v11 = *(_QWORD *)a3;
    if (*(_QWORD *)v11
    {
      v13 = v12;
      v14 = *(std::__shared_weak_count **)(v11 + 8);
      v34 = v12;
      v35 = v14;
      if (v14)
      {
        v15 = (unint64_t *)&v14->__shared_owners_;
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 1, v15));
      }
    }
    else
    {
      v13 = 0;
      v34 = 0;
      v35 = 0;
    }
    v17 = (const void *)*((_QWORD *)this + 1);
    if (!v17
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
      exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
    }
    v19 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
    if (v19)
    {
      v20 = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    v22 = objc_msgSend(objc_alloc(MEMORY[0x1E0CC6F38]), "initWithDevice:", v18[18], v18, v19, v34);
    v23 = (void *)*((_QWORD *)this + 39);
    *((_QWORD *)this + 39) = v22;

    v24 = (void *)*((_QWORD *)this + 39);
    if (!v24)
      Espresso::throw_exception_selector<Espresso::generic_error>("Error creating mps_kernel for softmax_kernel in METAL_MPS_BUFFERS engine");
    objc_msgSend(v24, "setSourceRows:", v13[4] * (uint64_t)v13[3]);
    objc_msgSend(*((id *)this + 39), "setSourceColumns:", v13[2]);
    if (*(_BYTE *)(*((_QWORD *)this + 1) + 64))
    {
      v25 = (_QWORD *)((char *)this + 176);
      if (*((char *)this + 199) < 0)
        v25 = (_QWORD *)*v25;
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v25);
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*((id *)this + 39), "setLabel:", v26);

    }
    if (v19)
    {
      v27 = (unint64_t *)&v19->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    if (v35)
    {
      v29 = (unint64_t *)&v35->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
    if (v36)
    {
      v31 = (unint64_t *)&v36->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
  }
}

void sub_191450224(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  void *v13;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

BOOL Espresso::MPSBuffersEngine::softmax_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, const Espresso::layer_shape **a3)
{
  _BOOL4 v3;
  _BYTE v5[20];
  unsigned int v6;

  v3 = !*(_DWORD *)(a1 + 300) && !*(_BYTE *)(a1 + 307) && !*(_BYTE *)(a1 + 306) && *(_BYTE *)(a1 + 304) == 0;
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v5, *a3, 0);
  return v6 < 4 && v3;
}

void Espresso::MPSBuffersEngine::inner_product_kernel::~inner_product_kernel(id *this)
{
  Espresso::MPSBuffersEngine::inner_product_kernel::~inner_product_kernel(this);
  JUMPOUT(0x19401CD90);
}

{

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 109));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 107));

  if (*((char *)this + 775) < 0)
    operator delete(this[94]);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 82));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 80));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 78));

  Espresso::generic_inner_product_kernel::~generic_inner_product_kernel((Espresso::generic_inner_product_kernel *)this);
}

void Espresso::MPSBuffersEngine::inner_product_kernel::__launch(int32x2_t *this, uint64_t *a2, uint64_t **a3, const void ***a4)
{
  int32x2_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  __int32 v14;
  int32x2_t v15;
  _BOOL4 v16;
  _BOOL4 v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  int32x2_t v21;
  const char *v22;
  uint64_t v23;
  void *v24;
  int v25;
  uint64_t *v26;
  const void *v27;
  int *v28;
  int *v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  const void **v33;
  const void *v34;
  int *v35;
  int *v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  id v40;
  uint64_t *v41;
  const void *v42;
  id *v43;
  id *v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  const void *v50;
  id *v51;
  id *v52;
  uint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  id v61;
  id v62;
  void *v63;
  double v64;
  double v65;
  double v66;
  void *v67;
  uint64_t v68;
  id v69;
  int32x2_t v70;
  id v71;
  uint64_t v72;
  unint64_t v73;
  void *v74;
  void *v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  uint64_t v86;
  int v87;
  int v88;
  uint64_t v89;
  int v90;
  unint64_t v91;
  int v92;
  int v93;
  int v94;
  int v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  int v99;
  int v100;
  int v101;
  uint64_t v102;
  int v103;
  unint64_t v104;
  int v105;
  int v106;
  int v107;
  int v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  int v112;
  unint64_t *v113;
  unint64_t v114;
  unint64_t *v115;
  std::runtime_error *exception;
  std::runtime_error *v117;
  int32x2_t v118;
  __int128 v119;
  uint64_t v120;
  _QWORD v121[3];
  __int128 v122;
  uint64_t v123;
  unint64_t v124;
  int64x2_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  int v130;
  int v131;
  int v132;
  int v133;
  unsigned int v134;
  int v135;
  int v136;
  id *v137;
  std::__shared_weak_count *v138;
  unsigned int v139;
  __int128 v140;
  uint64_t v141;
  int v142;
  int v143;
  int v144;
  int v145;
  void *__p;
  void *v147;
  int v148;
  int v149;
  int v150;
  int v151;
  unsigned int v152;
  id v153[2];
  int *v154;
  std::__shared_weak_count *v155;
  int *v156;
  std::__shared_weak_count *v157;

  if (this[51].i32[1] > 0 || this[52].i32[0] >= 1)
  {
    v8 = this[1];
    v9 = *a2;
    v10 = *(id *)(*(_QWORD *)&v8 + 144);
    v118 = this[38];
    v11 = **a3;
    v12 = **a4;
    objc_msgSend(*(id *)(v9 + 144), "computeCommandEncoder");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = this[51].i32[1];
    if (v14 == 16)
    {
      v17 = 0;
      v16 = this[52].i32[0] == 1;
      v15 = v118;
    }
    else
    {
      v15 = v118;
      if (v14 == 4)
      {
        v16 = 0;
        v17 = this[52].i32[0] == 4;
        if (this[52].i32[0] == 4)
        {
LABEL_10:
          v18 = v15.u32[0] / (unint64_t)this[52].i32[0];
          if (!*(_QWORD *)&this[89])
          {
            LODWORD(v140) = v15.u32[0] / (unint64_t)this[52].i32[0];
            *(int32x2_t *)((char *)&v140 + 4) = vrev64_s32(v15);
            v19 = objc_msgSend(v10, "newBufferWithBytes:length:options:", &v140, 12, 0);
            v20 = (void *)this[89];
            this[89] = (int32x2_t)v19;

          }
          v21 = this[90];
          if (!*(_QWORD *)&v21)
          {
            if (v17)
              v22 = "spmv_sparseblock4x4_h";
            else
              v22 = "spmv_sparseblock16x1_h";
            objc_msgSend(*(id *)(*(_QWORD *)&v8 + 160), "kernelForFunction:cacheString:withConstants:", v22, 0, 0);
            v23 = objc_claimAutoreleasedReturnValue();
            v24 = (void *)this[90];
            this[90] = (int32x2_t)v23;

            v21 = this[90];
          }
          objc_msgSend(v13, "setComputePipelineState:", *(_QWORD *)&v21);
          objc_msgSend(v13, "setBuffer:offset:atIndex:", *(_QWORD *)&this[85], 0, 0);
          objc_msgSend(v13, "setBuffer:offset:atIndex:", v12[21], 0, 1);
          objc_msgSend(v13, "setBuffer:offset:atIndex:", *(_QWORD *)(v11 + 168), 0, 2);
          objc_msgSend(v13, "setBuffer:offset:atIndex:", *(_QWORD *)&this[86], 0, 3);
          objc_msgSend(v13, "setBuffer:offset:atIndex:", *(_QWORD *)&this[87], 0, 4);
          objc_msgSend(v13, "setBuffer:offset:atIndex:", *(_QWORD *)&this[89], 0, 5);
          if (Espresso::MPSBuffersEngine::inner_product_kernel::__launch_sparse(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::onceToken != -1)
            dispatch_once(&Espresso::MPSBuffersEngine::inner_product_kernel::__launch_sparse(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::onceToken, &__block_literal_global_3996);
          v25 = Espresso::MPSBuffersEngine::inner_product_kernel::__launch_sparse(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::force_bs;
          if (!Espresso::MPSBuffersEngine::inner_product_kernel::__launch_sparse(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::force_bs)
            v25 = 16;
          *(_QWORD *)&v140 = 1;
          *((_QWORD *)&v140 + 1) = (v18 - 1) / v25 + 1;
          v141 = 1;
          v126 = 2;
          v127 = v25;
          v128 = 1;
          objc_msgSend(v13, "dispatchThreadgroups:threadsPerThreadgroup:", &v140, &v126);
          objc_msgSend(v13, "endEncoding");

          return;
        }
      }
      else
      {
        v17 = 0;
        v16 = 0;
      }
    }
    if (!v16)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
      Espresso::not_implemented_error::not_implemented_error(exception);
    }
    goto LABEL_10;
  }
  if (this[69].i8[4] && !this[42].i32[0])
  {
    if (!*(_QWORD *)&this[70])
      Espresso::MPSBuffersEngine::inner_product_kernel::populate_weight_buffer((Espresso::MPSBuffersEngine::inner_product_kernel *)this);
    if (this[39].i32[0] && !*(_QWORD *)&this[73])
      goto LABEL_34;
  }
  else
  {
    if (!*(_QWORD *)&this[72])
      Espresso::MPSBuffersEngine::inner_product_kernel::populate_weight_buffer((Espresso::MPSBuffersEngine::inner_product_kernel *)this);
    if (this[39].i32[0] && !*(_QWORD *)&this[75])
LABEL_34:
      Espresso::MPSBuffersEngine::inner_product_kernel::populate_bias_buffer((Espresso::MPSBuffersEngine::inner_product_kernel *)this);
  }
  if (this[42].i32[0])
  {
    v26 = *a3;
    v27 = (const void *)**a3;
    if (v27
    {
      v29 = v28;
      v30 = (std::__shared_weak_count *)v26[1];
      v156 = v28;
      v157 = v30;
      if (v30)
      {
        p_shared_owners = (unint64_t *)&v30->__shared_owners_;
        do
          v32 = __ldxr(p_shared_owners);
        while (__stxr(v32 + 1, p_shared_owners));
      }
    }
    else
    {
      v29 = 0;
      v156 = 0;
      v157 = 0;
    }
    v33 = *a4;
    v34 = **a4;
    if (v34
    {
      v36 = v35;
      v37 = (std::__shared_weak_count *)v33[1];
      v154 = v35;
      v155 = v37;
      if (v37)
      {
        v38 = (unint64_t *)&v37->__shared_owners_;
        do
          v39 = __ldxr(v38);
        while (__stxr(v39 + 1, v38));
      }
    }
    else
    {
      v37 = 0;
      v36 = 0;
      v154 = 0;
      v155 = 0;
    }
    Espresso::temporary_mtl_encoder::temporary_mtl_encoder((uint64_t)v153, *a2);
    v40 = v153[0];
    Espresso::abstract_blob_container::shape((char *)&v140, (uint64_t)**a4);
    Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v148, (const Espresso::layer_shape *)&v140, 0);
    if (__p)
    {
      v147 = __p;
      operator delete(__p);
    }
    Espresso::abstract_blob_container::shape((char *)&v140, **a3);
    Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v137, (const Espresso::layer_shape *)&v140, 0);
    if (__p)
    {
      v147 = __p;
      operator delete(__p);
    }
    if (this[43].i8[0] || v152 <= 3)
    {
      switch(v152)
      {
        case 1u:
          v48 = 1;
          break;
        case 2u:
          goto LABEL_89;
        case 3u:
          goto LABEL_88;
        case 4u:
          v48 = v149 * (uint64_t)v148 * v150;
          break;
        case 5u:
          v48 = v149 * (uint64_t)v148 * v150 * v151;
          break;
        default:
          goto LABEL_90;
      }
    }
    else if (v152 == 5)
    {
LABEL_88:
      v48 = v149 * (uint64_t)v148;
    }
    else if (v152 == 4)
    {
LABEL_89:
      v48 = v148;
    }
    else
    {
LABEL_90:
      v48 = 0;
    }
    if (this[43].i8[0] || v139 <= 3)
    {
      switch(v139)
      {
        case 1u:
          v86 = 1;
          break;
        case 2u:
          goto LABEL_127;
        case 3u:
          goto LABEL_126;
        case 4u:
          v86 = SHIDWORD(v137) * (uint64_t)(int)v137 * (int)v138;
          break;
        case 5u:
          v86 = SHIDWORD(v137) * (uint64_t)(int)v137 * (int)v138 * SHIDWORD(v138);
          break;
        default:
          goto LABEL_128;
      }
    }
    else if (v139 == 5)
    {
LABEL_126:
      v86 = SHIDWORD(v137) * (uint64_t)(int)v137;
    }
    else if (v139 == 4)
    {
LABEL_127:
      v86 = (int)v137;
    }
    else
    {
LABEL_128:
      v86 = 0;
    }
    if (v48 != v86)
      Espresso::throw_exception_selector<Espresso::unsupported_configuration_error>("src, dst must have same nbatch for inner_product.");
    if (!*(_QWORD *)&this[91])
    {
      Espresso::MPSBuffersEngine::inner_product_kernel::on_resized((Espresso::MPSBuffersEngine::inner_product_kernel *)this, a3, (uint64_t **)a4);
      if (!*(_QWORD *)&this[91])
        Espresso::throw_exception_selector<Espresso::generic_error>("kernel not found.");
    }
    v87 = (*(uint64_t (**)(int *))(*(_QWORD *)v29 + 32))(v29);
    v88 = v29[3];
    v89 = v29[2];
    v90 = v29[4];
    DWORD1(v140) = v29[2];
    DWORD2(v140) = v90 * v88;
    v142 = v88;
    v143 = v90;
    v91 = *((_QWORD *)v29 + 31);
    v145 = *((_QWORD *)v29 + 31);
    v92 = v29[5];
    v93 = v29[6];
    if (v92 <= 1)
      v94 = 1;
    else
      v94 = v29[5];
    if (v93 <= 1)
      v95 = 1;
    else
      v95 = v29[6];
    v144 = v95 * v94;
    if ((v87 - 1) >= 0xD)
    {
      v97 = v91 + v91 * ((4 * v89 - 1) / v91);
      v96 = 4;
    }
    else
    {
      v96 = qword_191AC0CA0[v87 - 1];
      v97 = v91 + v91 * ((v96 * v89 - 1) / v91);
    }
    v98 = v97 / v96;
    v99 = v89 - 1;
    if ((int)v89 < 1)
      v99 = v89 + 2;
    LODWORD(__p) = (v99 >> 2) + 1;
    HIDWORD(__p) = v98 >> 2;
    LODWORD(v140) = v98;
    HIDWORD(v140) = v88 * v89;
    LODWORD(v141) = v90 * v88 * v89;
    HIDWORD(v141) = v141 * v92;
    v147 = (void *)__PAIR64__(v93, v94);
    v100 = (*(uint64_t (**)(int *))(*(_QWORD *)v36 + 32))(v36);
    v101 = v36[3];
    v102 = v36[2];
    v103 = v36[4];
    HIDWORD(v126) = v36[2];
    LODWORD(v127) = v103 * v101;
    v129 = v101;
    v130 = v103;
    v104 = *((_QWORD *)v36 + 31);
    v132 = *((_QWORD *)v36 + 31);
    v105 = v36[5];
    v106 = v36[6];
    if (v105 <= 1)
      v107 = 1;
    else
      v107 = v36[5];
    if (v106 <= 1)
      v108 = 1;
    else
      v108 = v36[6];
    v131 = v108 * v107;
    if ((v100 - 1) >= 0xD)
    {
      v110 = v104 + v104 * ((4 * v102 - 1) / v104);
      v109 = 4;
    }
    else
    {
      v109 = qword_191AC0CA0[v100 - 1];
      v110 = v104 + v104 * ((v109 * v102 - 1) / v104);
    }
    v111 = v110 / v109;
    v112 = v102 - 1;
    if ((int)v102 < 1)
      v112 = v102 + 2;
    v133 = (v112 >> 2) + 1;
    v134 = v111 >> 2;
    LODWORD(v126) = v111;
    HIDWORD(v127) = v101 * v102;
    LODWORD(v128) = v103 * v101 * v102;
    HIDWORD(v128) = v128 * v105;
    v135 = v107;
    v136 = v106;
    objc_msgSend(v40, "setComputePipelineState:", *(_QWORD *)&this[91]);
    objc_msgSend(v40, "setBuffer:offset:atIndex:", *((_QWORD *)v29 + 21), 0, 0);
    objc_msgSend(v40, "setBuffer:offset:atIndex:", *((_QWORD *)v36 + 21), 0, 1);
    objc_msgSend(v40, "setBuffer:offset:atIndex:", *(_QWORD *)&this[72], 0, 2);
    objc_msgSend(v40, "setBuffer:offset:atIndex:", *(_QWORD *)&this[98], 0, 3);
    objc_msgSend(v40, "setBytes:length:atIndex:", &v140, 56, 4);
    objc_msgSend(v40, "setBytes:length:atIndex:", &v126, 56, 5);
    objc_msgSend(v40, "setBuffer:offset:atIndex:", *(_QWORD *)&this[75], 0, 6);
    v124 = ((unint64_t)(v48 - 1) >> 2) + 1;
    v125 = vdupq_n_s64(1uLL);
    v122 = xmmword_191A93520;
    v123 = 1;
    objc_msgSend(v40, "dispatchThreadgroups:threadsPerThreadgroup:", &v124, &v122);

    Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(v153);
    if (v37)
    {
      v113 = (unint64_t *)&v37->__shared_owners_;
      do
        v114 = __ldaxr(v113);
      while (__stlxr(v114 - 1, v113));
      if (!v114)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    v83 = v157;
    if (v157)
    {
      v115 = (unint64_t *)&v157->__shared_owners_;
      do
        v85 = __ldaxr(v115);
      while (__stlxr(v85 - 1, v115));
      goto LABEL_164;
    }
    return;
  }
  v41 = *a3;
  v42 = (const void *)**a3;
  if (v42
  {
    v44 = v43;
    v45 = v41[1];
    v137 = v43;
    v138 = (std::__shared_weak_count *)v45;
    if (v45)
    {
      v46 = (unint64_t *)(v45 + 8);
      do
        v47 = __ldxr(v46);
      while (__stxr(v47 + 1, v46));
    }
  }
  else
  {
    v44 = 0;
    v137 = 0;
    v138 = 0;
  }
  v49 = (uint64_t *)*a4;
  v50 = **a4;
  if (v50
  {
    v52 = v51;
    v53 = v49[1];
    v124 = (unint64_t)v51;
    v125.i64[0] = v53;
    if (v53)
    {
      v54 = (unint64_t *)(v53 + 8);
      do
        v55 = __ldxr(v54);
      while (__stxr(v55 + 1, v54));
    }
  }
  else
  {
    v52 = 0;
    v124 = 0;
    v125.i64[0] = 0;
  }
  if (*a2
  {
    v57 = v56;
    v58 = (std::__shared_weak_count *)a2[1];
    *(_QWORD *)&v122 = v56;
    *((_QWORD *)&v122 + 1) = v58;
    if (v58)
    {
      v59 = (unint64_t *)&v58->__shared_owners_;
      do
        v60 = __ldxr(v59);
      while (__stxr(v60 + 1, v59));
    }
  }
  else
  {
    v58 = 0;
    v57 = 0;
    v122 = 0uLL;
  }
  if (this[69].i8[4])
  {
    v61 = *(id *)&this[70];
    if ((char *)a4[1] - (char *)*a4 == 32)
    {
      std::dynamic_pointer_cast[abi:ne180100]<Espresso::MPSBuffersEngine::blob_container,Espresso::abstract_blob_container>(&v140, (void *)(*a4)[2], (uint64_t)(*a4)[3]);
      v62 = *(id *)(v140 + 200);

      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v140);
      v61 = v62;
    }
    v63 = (void *)this[68];
    if (!v63)
      Espresso::throw_exception_selector<Espresso::generic_error>("mps_kernel was nil in METAL_MPS_BUFFERS inner_product_kernel.");
    objc_msgSend(v63, "setSourceInputFeatureChannels:", this[38].u32[1]);
    objc_msgSend(*(id *)&this[68], "setSourceOutputFeatureChannels:", this[38].u32[0]);
    LODWORD(v64) = this[76].i32[1];
    LODWORD(v65) = this[77].i32[0];
    LODWORD(v66) = this[77].i32[1];
    objc_msgSend(*(id *)&this[68], "setNeuronType:parameterA:parameterB:parameterC:", this[76].u32[0], v64, v65, v66);
    v67 = (void *)this[68];
    v68 = v57[18];
    v69 = v52[25];
    v70 = this[73];
    v71 = v44[25];
    objc_msgSend(v67, "encodeToCommandBuffer:inputMatrix:weightMatrix:biasVector:resultMatrix:", v68, v69, v61, *(_QWORD *)&v70, v71);

    if (!v58)
      goto LABEL_108;
LABEL_104:
    v78 = (unint64_t *)&v58->__shared_owners_;
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 - 1, v78));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
    goto LABEL_108;
  }
  v72 = *a2;
  Espresso::abstract_blob_container::shape((char *)&v140, (uint64_t)**a4);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v126, (const Espresso::layer_shape *)&v140, 0);
  if (__p)
  {
    v147 = __p;
    operator delete(__p);
  }
  Espresso::abstract_blob_container::shape((char *)&v140, **a3);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v148, (const Espresso::layer_shape *)&v140, 0);
  if (__p)
  {
    v147 = __p;
    operator delete(__p);
  }
  v73 = Espresso::layer_nd_shape::matrix_rows((Espresso::layer_nd_shape *)&v126);
  if (v73 != Espresso::layer_nd_shape::matrix_rows((Espresso::layer_nd_shape *)&v148))
    Espresso::throw_exception_selector<Espresso::unsupported_configuration_error>("src, dst must have same nbatch for inner_product.");
  if ((HIDWORD(v128) & 0xFFFFFFFE) != 2)
    Espresso::throw_exception_selector<Espresso::not_implemented_error>("inner product for rank() != 2 or 3 is not implemented in MPS_BUFFERS_ENGINE.");
  if (!*(_QWORD *)&this[91])
  {
    Espresso::MPSBuffersEngine::inner_product_kernel::on_resized((Espresso::MPSBuffersEngine::inner_product_kernel *)this, a3, (uint64_t **)a4);
    if (!*(_QWORD *)&this[91])
      Espresso::throw_exception_selector<Espresso::generic_error>("kernel not found.");
  }
  objc_msgSend(*(id *)(v72 + 144), "computeCommandEncoder");
  v74 = (void *)objc_claimAutoreleasedReturnValue();
  v75 = v74;
  if (*((_DWORD *)v52 + 60) % this[93].i32[0])
  {
    v117 = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
    Espresso::generic_error::generic_error(v117);
  }
  objc_msgSend(v74, "setComputePipelineState:", *(_QWORD *)&this[91]);
  objc_msgSend(v75, "setBuffer:offset:atIndex:", v44[21], 0, 0);
  objc_msgSend(v75, "setBuffer:offset:atIndex:", v52[21], 0, 1);
  objc_msgSend(v75, "setBuffer:offset:atIndex:", *(_QWORD *)&this[72], 0, 2);
  if (this[62])
  {
    objc_msgSend(v75, "setBuffer:offset:atIndex:", *(_QWORD *)&this[113], 0, 3);
    objc_msgSend(v75, "setBuffer:offset:atIndex:", *(_QWORD *)&this[98], 0, 4);
    v76 = 5;
  }
  else
  {
    objc_msgSend(v75, "setBuffer:offset:atIndex:", *(_QWORD *)&this[98], 0, 3);
    v76 = 4;
  }
  objc_msgSend(v75, "setBuffer:offset:atIndex:", *(_QWORD *)&this[75], 0, v76);
  v77 = v73 / this[92].i32[0];
  v121[0] = ((this[38].i32[0] / (unsigned __int32)this[92].i32[1] - 1) >> 6) + 1;
  v121[1] = v77;
  v121[2] = 1;
  v119 = xmmword_191A93520;
  v120 = 1;
  objc_msgSend(v75, "dispatchThreadgroups:threadsPerThreadgroup:", v121, &v119);
  objc_msgSend(v75, "endEncoding");

  if (v58)
    goto LABEL_104;
LABEL_108:
  v80 = (std::__shared_weak_count *)v125.i64[0];
  if (v125.i64[0])
  {
    v81 = (unint64_t *)(v125.i64[0] + 8);
    do
      v82 = __ldaxr(v81);
    while (__stlxr(v82 - 1, v81));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
  }
  v83 = v138;
  if (v138)
  {
    v84 = (unint64_t *)&v138->__shared_owners_;
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
LABEL_164:
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
}

void sub_19145104C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40)
{
  void *v40;
  void *v41;

  __cxa_free_exception(v41);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a31);
  _Unwind_Resume(a1);
}

void Espresso::MPSBuffersEngine::inner_product_kernel::blob_options(Espresso::MPSBuffersEngine::inner_product_kernel *this@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  const void *v4;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 v17;
  _QWORD *v18;
  std::__shared_weak_count *v19;

  *a3 = 0;
  a3[1] = 0;
  v4 = (const void *)*((_QWORD *)this + 1);
  if (v4)
  {
    if (v7)
    {
      v8 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
      v18 = v7;
      v19 = v8;
      if (v8)
      {
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldxr(p_shared_owners);
        while (__stxr(v10 + 1, p_shared_owners));
      }
      if (a2)
      {
        v11 = operator new(0x70uLL);
        v11[1] = 0;
        v11[2] = 0;
        *v11 = &off_1E2DBE228;
        *((_OWORD *)v11 + 4) = 0u;
        *((_OWORD *)v11 + 5) = 0u;
        *((_OWORD *)v11 + 2) = 0u;
        *((_OWORD *)v11 + 3) = 0u;
        v11[3] = &off_1E2D9B4D8;
        *((_DWORD *)v11 + 12) = 1065353216;
        v11[7] = 0x1FFFFFFFFLL;
        v11[12] = 0;
        v11[13] = 0;
        v11[8] = 0;
        v11[9] = 0;
        *((_BYTE *)v11 + 88) = 0;
        v11[10] = 0;
        *(_QWORD *)&v17 = v11 + 3;
        *((_QWORD *)&v17 + 1) = v11;
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)a3, &v17);
        v12 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
        if (*((_QWORD *)&v17 + 1))
        {
          v13 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 - 1, v13));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(*a3 + 72), v18[28], v18[29]);
        v8 = v19;
      }
      if (v8)
      {
        v15 = (unint64_t *)&v8->__shared_owners_;
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
  }
}

void sub_191451300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v3);
  _Unwind_Resume(a1);
}

void Espresso::MPSBuffersEngine::inner_product_kernel::clear_weights(Espresso::MPSBuffersEngine::inner_product_kernel *this)
{
  char *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;

  v2 = (char *)this + 288;
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*((_QWORD **)this + 36));
  *((_QWORD *)this + 36) = 0;
  *((_QWORD *)this + 37) = 0;
  *((_QWORD *)this + 35) = v2;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::reset[abi:ne180100]((_QWORD *)this + 62);
  v3 = (void *)*((_QWORD *)this + 70);
  *((_QWORD *)this + 70) = 0;

  v4 = (void *)*((_QWORD *)this + 71);
  *((_QWORD *)this + 71) = 0;

  v5 = (void *)*((_QWORD *)this + 72);
  *((_QWORD *)this + 72) = 0;

  v6 = (void *)*((_QWORD *)this + 73);
  *((_QWORD *)this + 73) = 0;

  v7 = (void *)*((_QWORD *)this + 74);
  *((_QWORD *)this + 74) = 0;

  v8 = (void *)*((_QWORD *)this + 75);
  *((_QWORD *)this + 75) = 0;

  v9 = (void *)*((_QWORD *)this + 112);
  *((_QWORD *)this + 112) = 0;

  v10 = (void *)*((_QWORD *)this + 113);
  *((_QWORD *)this + 113) = 0;

  std::shared_ptr<Espresso::blob<unsigned short,4>>::reset[abi:ne180100]((_QWORD *)this + 78);
  std::shared_ptr<Espresso::blob<unsigned short,4>>::reset[abi:ne180100]((_QWORD *)this + 80);
  std::shared_ptr<Espresso::blob<unsigned short,4>>::reset[abi:ne180100]((_QWORD *)this + 82);
  v11 = (void *)*((_QWORD *)this + 85);
  *((_QWORD *)this + 85) = 0;

}

void Espresso::MPSBuffersEngine::inner_product_kernel::on_resized(Espresso::MPSBuffersEngine::inner_product_kernel *this, uint64_t **a2, uint64_t **a3)
{
  _QWORD *v6;
  void *v7;
  void *v8;
  void *v9;
  const void **v10;
  const void *v11;
  _DWORD *v12;
  _DWORD *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint64_t *v17;
  const void *v18;
  int *v19;
  int *v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t *v24;
  const void *v25;
  void *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  const void *v31;
  id *v32;
  id *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  int v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  const void *v41;
  id *v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  void *v48;
  _QWORD *v49;
  void *v50;
  int v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  int v57;
  unsigned int v58;
  int v59;
  const void **v60;
  const void *v61;
  _DWORD *v62;
  _DWORD *v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  void **v67;
  char *v68;
  char *v69;
  char *v70;
  int v71;
  int v72;
  int v73;
  unint64_t v74;
  uint64_t v75;
  void *v76;
  void *v77;
  void *v78;
  uint64_t v79;
  const char *v80;
  BOOL v81;
  uint64_t v82;
  void *v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  uint64_t v91;
  unsigned int v92;
  int v93;
  unsigned int v94;
  int v95;
  unint64_t v96;
  int v97;
  unsigned int v98;
  std::string *v99;
  __int128 v100;
  std::string *v101;
  __int128 v102;
  std::string *v103;
  std::string::size_type size;
  std::string *v105;
  __int128 v106;
  std::string *v107;
  __int128 v108;
  std::string *v109;
  std::string::size_type v110;
  std::string *v111;
  std::string::size_type v112;
  char v113;
  _QWORD *v114;
  const std::string::value_type *v115;
  int v116;
  const std::string::value_type *v117;
  void *v118;
  void *v119;
  std::string *v120;
  std::string::size_type v121;
  uint64_t v122;
  id v123;
  id v124;
  uint64_t v125;
  void *v126;
  uint64_t v127;
  void *v128;
  unint64_t *v129;
  unint64_t v130;
  unint64_t *v131;
  std::runtime_error *v132;
  std::runtime_error *exception;
  int v134;
  int v135;
  int v136;
  id v137;
  int v138;
  std::__shared_weak_count *v139;
  std::string v140;
  std::string v141;
  std::string v142;
  std::string v143;
  std::string v144;
  std::string v145;
  int *v146;
  std::__shared_weak_count *v147;
  unsigned int v148;
  void *v149;
  std::__shared_weak_count *v150;
  void *v151;
  std::__shared_weak_count *v152;
  std::string v153;
  void *v154;
  void *v155;
  int v156;
  int v157;
  int v158;
  int v159;
  unsigned int v160;
  _QWORD v161[5];

  v161[2] = *MEMORY[0x1E0C80C00];
  v6 = (_QWORD *)((char *)this + 324);
  v7 = (void *)*((_QWORD *)this + 72);
  *((_QWORD *)this + 72) = 0;

  v8 = (void *)*((_QWORD *)this + 75);
  *((_QWORD *)this + 75) = 0;

  v9 = (void *)*((_QWORD *)this + 91);
  *((_QWORD *)this + 91) = 0;

  if (!*((_BYTE *)this + 556))
  {
    if (*((int *)this + 103) > 0 || *((int *)this + 104) > 0)
      return;
    v10 = (const void **)*a2;
    v11 = (const void *)**a2;
    if (v11
    {
      v13 = v12;
      v14 = (std::__shared_weak_count *)v10[1];
      v151 = v12;
      v152 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
      }
    }
    else
    {
      v13 = 0;
      v151 = 0;
      v152 = 0;
    }
    v60 = (const void **)*a3;
    v61 = (const void *)**a3;
    if (v61
    {
      v63 = v62;
      v64 = (std::__shared_weak_count *)v60[1];
      v149 = v62;
      v150 = v64;
      if (v64)
      {
        v65 = (unint64_t *)&v64->__shared_owners_;
        do
          v66 = __ldxr(v65);
        while (__stxr(v66 + 1, v65));
        v139 = v64;
      }
      else
      {
        v139 = 0;
      }
    }
    else
    {
      v139 = 0;
      v63 = 0;
      v149 = 0;
      v150 = 0;
    }
    v67 = (void **)((char *)this + 752);
    MEMORY[0x19401C808]((char *)this + 752, "NULL");
    *((_QWORD *)this + 92) = 0x400000004;
    *((_DWORD *)this + 186) = 8;
    v68 = getenv("INNER_PRODUCT_BPT");
    v69 = getenv("INNER_PRODUCT_RPT");
    v70 = getenv("INNER_PRODUCT_LS");
    if (v68)
      v71 = atoi(v68);
    else
      v71 = 4;
    *((_DWORD *)this + 184) = v71;
    if (v69)
      v72 = atoi(v69);
    else
      v72 = 4;
    *((_DWORD *)this + 185) = v72;
    if (v70)
      v73 = atoi(v70);
    else
      v73 = 8;
    *((_DWORD *)this + 186) = v73;
    Espresso::abstract_blob_container::shape((char *)&v153, **a3);
    Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v156, (const Espresso::layer_shape *)&v153, 0);
    if (v154)
    {
      v155 = v154;
      operator delete(v154);
    }
    Espresso::abstract_blob_container::shape((char *)&v153, **a2);
    Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v146, (const Espresso::layer_shape *)&v153, 0);
    if (v154)
    {
      v155 = v154;
      operator delete(v154);
    }
    if (v160 > 3)
    {
      if (v160 == 5)
      {
LABEL_96:
        v74 = v157 * (uint64_t)v156;
        goto LABEL_130;
      }
      if (v160 == 4)
      {
LABEL_95:
        v74 = v156;
        goto LABEL_130;
      }
      v74 = 0;
    }
    else
    {
      v74 = (int)v160;
      if (!v160)
        goto LABEL_130;
      if (v160 != 1)
      {
        if (v160 != 2)
          goto LABEL_96;
        goto LABEL_95;
      }
      v74 = 1;
    }
LABEL_130:
    v91 = (int)v148;
    if (v148 > 3)
    {
      if (v148 == 5)
      {
LABEL_138:
        v91 = SHIDWORD(v146) * (uint64_t)(int)v146;
        goto LABEL_140;
      }
      if (v148 == 4)
      {
LABEL_137:
        v91 = (int)v146;
        goto LABEL_140;
      }
      v91 = 0;
    }
    else if (v148 && v148 != 1)
    {
      if (v148 != 2)
        goto LABEL_138;
      goto LABEL_137;
    }
LABEL_140:
    if (v74 != v91)
      Espresso::throw_exception_selector<Espresso::unsupported_configuration_error>("src, dst must have same nbatch for inner_product.");
    if (v160 == 2)
    {
      v92 = *((_DWORD *)this + 185);
      *((_DWORD *)this + 211) = v13[60] / v92;
      v93 = *((_DWORD *)this + 186);
      *((_DWORD *)this + 210) = v63[60] / v93;
      *((_DWORD *)this + 212) = *((_DWORD *)this + 222) / v93;
      v94 = *((_DWORD *)this + 76);
      *((_DWORD *)this + 198) = v94;
      *((_DWORD *)this + 199) = v74;
      v6[61] = *((_QWORD *)this + 39);
      *((_DWORD *)this + 205) = *((_DWORD *)this + 80);
      *((_QWORD *)this + 103) = *v6;
      *((_DWORD *)this + 213) = *((_DWORD *)this + 107);
      v95 = *((_DWORD *)this + 184);
      if (v74 >= v95)
      {
        v96 = v95;
      }
      else
      {
        *((_DWORD *)this + 184) = v74;
        v96 = v74;
        v95 = v74;
      }
      if (v74 != v96)
      {
        if (v74 % v96)
          v95 = 3;
        if (v74 % v95)
          v95 = 2;
        if (v74 % v95)
          v97 = 1;
        else
          v97 = v95;
        *((_DWORD *)this + 184) = v97;
      }
      if (v94 % v92)
        v98 = 2;
      else
        v98 = v92;
      if (v94 % v98)
        v98 = 1;
      *((_DWORD *)this + 185) = v98;
      std::to_string(&v142, v93);
      v99 = std::string::insert(&v142, 0, "inner_product_rank2_l");
      v100 = *(_OWORD *)&v99->__r_.__value_.__l.__data_;
      v143.__r_.__value_.__r.__words[2] = v99->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v143.__r_.__value_.__l.__data_ = v100;
      v99->__r_.__value_.__l.__size_ = 0;
      v99->__r_.__value_.__r.__words[2] = 0;
      v99->__r_.__value_.__r.__words[0] = 0;
      v101 = std::string::append(&v143, "_r");
      v102 = *(_OWORD *)&v101->__r_.__value_.__l.__data_;
      v144.__r_.__value_.__r.__words[2] = v101->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v144.__r_.__value_.__l.__data_ = v102;
      v101->__r_.__value_.__l.__size_ = 0;
      v101->__r_.__value_.__r.__words[2] = 0;
      v101->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v141, *((_DWORD *)this + 185));
      if ((v141.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v103 = &v141;
      else
        v103 = (std::string *)v141.__r_.__value_.__r.__words[0];
      if ((v141.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v141.__r_.__value_.__r.__words[2]);
      else
        size = v141.__r_.__value_.__l.__size_;
      v105 = std::string::append(&v144, (const std::string::value_type *)v103, size);
      v106 = *(_OWORD *)&v105->__r_.__value_.__l.__data_;
      v145.__r_.__value_.__r.__words[2] = v105->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v145.__r_.__value_.__l.__data_ = v106;
      v105->__r_.__value_.__l.__size_ = 0;
      v105->__r_.__value_.__r.__words[2] = 0;
      v105->__r_.__value_.__r.__words[0] = 0;
      v107 = std::string::append(&v145, "_b");
      v108 = *(_OWORD *)&v107->__r_.__value_.__l.__data_;
      v153.__r_.__value_.__r.__words[2] = v107->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v153.__r_.__value_.__l.__data_ = v108;
      v107->__r_.__value_.__l.__size_ = 0;
      v107->__r_.__value_.__r.__words[2] = 0;
      v107->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v140, *((_DWORD *)this + 184));
      if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v109 = &v140;
      else
        v109 = (std::string *)v140.__r_.__value_.__r.__words[0];
      if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v110 = HIBYTE(v140.__r_.__value_.__r.__words[2]);
      else
        v110 = v140.__r_.__value_.__l.__size_;
      v111 = std::string::append(&v153, (const std::string::value_type *)v109, v110);
      v112 = v111->__r_.__value_.__r.__words[0];
      v161[0] = v111->__r_.__value_.__l.__size_;
      *(_QWORD *)((char *)v161 + 7) = *(std::string::size_type *)((char *)&v111->__r_.__value_.__r.__words[1] + 7);
      v113 = HIBYTE(v111->__r_.__value_.__r.__words[2]);
      v111->__r_.__value_.__l.__size_ = 0;
      v111->__r_.__value_.__r.__words[2] = 0;
      v111->__r_.__value_.__r.__words[0] = 0;
      if (*((char *)this + 775) < 0)
        operator delete(*v67);
      *((_QWORD *)this + 94) = v112;
      *((_QWORD *)this + 95) = v161[0];
      *(_QWORD *)((char *)this + 767) = *(_QWORD *)((char *)v161 + 7);
      *((_BYTE *)this + 775) = v113;
      if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v140.__r_.__value_.__l.__data_);
      if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v153.__r_.__value_.__l.__data_);
      if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v145.__r_.__value_.__l.__data_);
      if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v141.__r_.__value_.__l.__data_);
      if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v144.__r_.__value_.__l.__data_);
      if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v143.__r_.__value_.__l.__data_);
      if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v142.__r_.__value_.__l.__data_);
      v114 = std::string::basic_string[abi:ne180100]<0>(&v153, "None");
      if (*((_QWORD *)this + 62))
      {
        MEMORY[0x19401C808](v114, "Range");
        v115 = "_wuchar";
      }
      else if (*((_QWORD *)this + 80))
      {
        v115 = "_whalf";
      }
      else
      {
        v115 = "_wfloat";
      }
      std::string::append((std::string *)((char *)this + 752), v115);
      v116 = *((_DWORD *)this + 168);
      if (v116 == 1)
      {
        v117 = "_dhalf";
      }
      else
      {
        if (v116)
          Espresso::throw_exception_selector<Espresso::generic_error>("inner product supports FP16 and FP32, aborting.");
        v117 = "_dfloat";
      }
      std::string::append((std::string *)((char *)this + 752), v117);
      v118 = (void *)objc_opt_new();
      v119 = (void *)objc_opt_new();
      *((_WORD *)this + 388) = *((_DWORD *)this + 78) != 0;
      objc_msgSend(v118, "setConstantValue:type:atIndex:", (char *)this + 776, 37, 0);
      std::operator+<char>();
      if ((v145.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v120 = &v145;
      else
        v120 = (std::string *)v145.__r_.__value_.__r.__words[0];
      if ((v145.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v121 = HIBYTE(v145.__r_.__value_.__r.__words[2]);
      else
        v121 = v145.__r_.__value_.__l.__size_;
      std::string::append((std::string *)((char *)this + 752), (const std::string::value_type *)v120, v121);
      if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v145.__r_.__value_.__l.__data_);
      v122 = *((_QWORD *)this + 1);
      v123 = *(id *)(v122 + 144);
      if (*((char *)this + 775) < 0)
        v67 = (void **)*v67;
      v124 = objc_retainAutorelease(v119);
      objc_msgSend(*(id *)(v122 + 160), "kernelForFunction:cacheString:withConstants:", v67, objc_msgSend(v124, "UTF8String"), v118);
      v125 = objc_claimAutoreleasedReturnValue();
      v126 = (void *)*((_QWORD *)this + 91);
      *((_QWORD *)this + 91) = v125;

      v127 = objc_msgSend(v123, "newBufferWithBytes:length:options:", (char *)this + 792, 64, 0);
      v128 = (void *)*((_QWORD *)this + 98);
      *((_QWORD *)this + 98) = v127;

      if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v153.__r_.__value_.__l.__data_);
    }
    if (v139)
    {
      v129 = (unint64_t *)&v139->__shared_owners_;
      do
        v130 = __ldaxr(v129);
      while (__stlxr(v130 - 1, v129));
      if (!v130)
      {
        ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
        std::__shared_weak_count::__release_weak(v139);
      }
    }
    v88 = v152;
    if (v152)
    {
      v131 = (unint64_t *)&v152->__shared_owners_;
      do
        v90 = __ldaxr(v131);
      while (__stlxr(v90 - 1, v131));
LABEL_125:
      if (!v90)
      {
        ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
        std::__shared_weak_count::__release_weak(v88);
      }
      return;
    }
    return;
  }
  *((_OWORD *)this + 38) = 0u;
  if (*((_DWORD *)this + 79))
  {
    *((_DWORD *)this + 152) = 1;
  }
  else if (*((_DWORD *)this + 80))
  {
    *((_DWORD *)this + 152) = 5;
    *((_DWORD *)this + 153) = *((_DWORD *)this + 81);
    *((_DWORD *)this + 154) = *((_DWORD *)this + 82);
  }
  if (*((_DWORD *)this + 84))
  {
    v17 = *a2;
    v18 = (const void *)**a2;
    if (v18
    {
      v20 = v19;
      v21 = v17[1];
      v146 = v19;
      v147 = (std::__shared_weak_count *)v21;
      if (v21)
      {
        v22 = (unint64_t *)(v21 + 8);
        do
          v23 = __ldxr(v22);
        while (__stxr(v23 + 1, v22));
      }
    }
    else
    {
      v20 = 0;
      v146 = 0;
      v147 = 0;
    }
    v24 = *a3;
    v25 = (const void *)**a3;
    if (!v25)
      goto LABEL_122;
    if (!v26)
      goto LABEL_122;
    v27 = (uint64_t)v26;
    v28 = (std::__shared_weak_count *)v24[1];
    v145.__r_.__value_.__r.__words[0] = (std::string::size_type)v26;
    v145.__r_.__value_.__l.__size_ = (std::string::size_type)v28;
    if (v28)
    {
      v29 = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
    }
    if (!v20)
    {
LABEL_117:
      if (v28)
      {
        v86 = (unint64_t *)&v28->__shared_owners_;
        do
          v87 = __ldaxr(v86);
        while (__stlxr(v87 - 1, v86));
        if (!v87)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
LABEL_122:
      v88 = v147;
      if (!v147)
        return;
      v89 = (unint64_t *)&v147->__shared_owners_;
      do
        v90 = __ldaxr(v89);
      while (__stlxr(v90 - 1, v89));
      goto LABEL_125;
    }
    v31 = (const void *)*((_QWORD *)this + 1);
    if (!v31
    {
      *(_OWORD *)&v144.__r_.__value_.__l.__data_ = 0uLL;
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
      exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
    }
    v33 = v32;
    v34 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
    v144.__r_.__value_.__r.__words[0] = (std::string::size_type)v32;
    v144.__r_.__value_.__l.__size_ = (std::string::size_type)v34;
    if (v34)
    {
      v35 = (unint64_t *)&v34->__shared_owners_;
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
    }
    v37 = (*(uint64_t (**)(int *))(*(_QWORD *)v20 + 32))(v20);
    v38 = v20[2];
    if ((v37 - 1) >= 0xD)
    {
      v40 = *((_QWORD *)v20 + 31) + *((_QWORD *)v20 + 31) * ((unint64_t)(4 * v38 - 1) / *((_QWORD *)v20 + 31));
      v39 = 4;
    }
    else
    {
      v39 = qword_191AC0CA0[v37 - 1];
      v40 = *((_QWORD *)v20 + 31) + *((_QWORD *)v20 + 31) * ((v39 * v38 - 1) / *((_QWORD *)v20 + 31));
    }
    v136 = v20[3];
    v138 = v20[4];
    v51 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 32))(v27);
    v52 = *(int *)(v27 + 8);
    if ((v51 - 1) >= 0xD)
    {
      v54 = *(_QWORD *)(v27 + 248) + *(_QWORD *)(v27 + 248) * ((unint64_t)(4 * v52 - 1) / *(_QWORD *)(v27 + 248));
      v53 = 4;
    }
    else
    {
      v53 = qword_191AC0CA0[v51 - 1];
      v54 = *(_QWORD *)(v27 + 248) + *(_QWORD *)(v27 + 248) * ((v53 * v52 - 1) / *(_QWORD *)(v27 + 248));
    }
    v134 = *(_DWORD *)(v27 + 16);
    v135 = *(_DWORD *)(v27 + 12);
    Espresso::abstract_blob_container::shape((char *)&v153, v27);
    Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v156, (const Espresso::layer_shape *)&v153, 0);
    v55 = v40 / v39;
    v56 = v54 / v53;
    if (v154)
    {
      v155 = v154;
      operator delete(v154);
    }
    *((_QWORD *)this + 104) = *((_QWORD *)this + 38);
    v57 = *((unsigned __int8 *)this + 344);
    v58 = v160;
    if (*((_BYTE *)this + 344) || v160 <= 3)
    {
      switch(v160)
      {
        case 1u:
          v59 = 1;
          break;
        case 2u:
          goto LABEL_75;
        case 3u:
          goto LABEL_74;
        case 4u:
          v59 = v157 * v156 * v158;
          break;
        case 5u:
          v59 = v157 * v156 * v158 * v159;
          break;
        default:
          goto LABEL_76;
      }
    }
    else if (v160 == 5)
    {
LABEL_74:
      v59 = v157 * v156;
    }
    else if (v160 == 4)
    {
LABEL_75:
      v59 = v156;
    }
    else
    {
LABEL_76:
      v59 = 0;
    }
    *((_DWORD *)this + 199) = v59;
    v6[61] = *((_QWORD *)this + 39);
    *((_DWORD *)this + 205) = *((_DWORD *)this + 80);
    *((_QWORD *)this + 103) = *v6;
    *((_DWORD *)this + 213) = *((_DWORD *)this + 107);
    *((_DWORD *)this + 201) = v55;
    *((_DWORD *)this + 200) = v56;
    *((_DWORD *)this + 202) = 1;
    if (!v57 && v58 >= 4)
    {
      *((_DWORD *)this + 202) = v136 * v55;
      *((_DWORD *)this + 201) = v136 * v55 * v138;
      *((_DWORD *)this + 200) = v134 * v135 * v56;
    }
    v75 = objc_msgSend(v33[18], "newBufferWithBytes:length:options:", (char *)this + 792, 64, 0);
    v76 = (void *)*((_QWORD *)this + 98);
    *((_QWORD *)this + 98) = v75;

    v77 = (void *)objc_opt_new();
    v78 = (void *)objc_opt_new();
    *((_WORD *)this + 388) = *((_DWORD *)this + 78) != 0;
    objc_msgSend(v77, "setConstantValue:type:atIndex:", (char *)this + 776, 37, 0);
    if ((*(unsigned int (**)(int *))(*(_QWORD *)v20 + 32))(v20))
    {
      if ((*(unsigned int (**)(int *))(*(_QWORD *)v20 + 32))(v20) != 1)
      {
LABEL_110:
        if (!*((_QWORD *)this + 91))
          Espresso::throw_exception_selector<Espresso::generic_error>("could not find kernel for inner_product.");

        if (v34)
        {
          v84 = (unint64_t *)&v34->__shared_owners_;
          do
            v85 = __ldaxr(v84);
          while (__stlxr(v85 - 1, v84));
          if (!v85)
          {
            ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
            std::__shared_weak_count::__release_weak(v34);
          }
        }
        v28 = (std::__shared_weak_count *)v145.__r_.__value_.__l.__size_;
        goto LABEL_117;
      }
      v79 = objc_msgSend(objc_retainAutorelease(v78), "UTF8String");
      v80 = "inner_product_buffers_generic_is_lookup_template_f16_src_f16_wt";
    }
    else
    {
      v81 = *((_QWORD *)this + 80) == 0;
      v79 = objc_msgSend(objc_retainAutorelease(v78), "UTF8String");
      if (v81)
        v80 = "inner_product_buffers_generic_is_lookup_template_f32_src_f32_wt";
      else
        v80 = "inner_product_buffers_generic_is_lookup_template_f32_src_f16_wt";
    }
    objc_msgSend(v33[20], "kernelForFunction:cacheString:withConstants:", v80, v79, v77);
    v82 = objc_claimAutoreleasedReturnValue();
    v83 = (void *)*((_QWORD *)this + 91);
    *((_QWORD *)this + 91) = v82;

    goto LABEL_110;
  }
  v41 = (const void *)*((_QWORD *)this + 1);
  if (!v41
  {
    *(_OWORD *)&v153.__r_.__value_.__l.__data_ = 0uLL;
    v132 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v132, "Espresso: wrong_context_type");
    v132->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
  }
  v43 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  v153.__r_.__value_.__r.__words[0] = (std::string::size_type)v42;
  v153.__r_.__value_.__l.__size_ = (std::string::size_type)v43;
  if (v43)
  {
    v44 = (unint64_t *)&v43->__shared_owners_;
    do
      v45 = __ldxr(v44);
    while (__stxr(v45 + 1, v44));
    v137 = v42[18];
    do
      v46 = __ldaxr(v44);
    while (__stlxr(v46 - 1, v44));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  else
  {
    v137 = v42[18];
  }
  v47 = objc_msgSend(objc_alloc(MEMORY[0x1E0CC6F08]), "initWithDevice:", v137);
  v48 = (void *)*((_QWORD *)this + 68);
  *((_QWORD *)this + 68) = v47;

  if (!*((_QWORD *)this + 68))
    Espresso::throw_exception_selector<Espresso::generic_error>("Error creating mps_kernel for inner_product_kernel in METAL_MPS_BUFFERS engine");
  if (*(_BYTE *)(*((_QWORD *)this + 1) + 64))
  {
    v49 = (_QWORD *)((char *)this + 176);
    if (*((char *)this + 199) < 0)
      v49 = (_QWORD *)*v49;
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v49);
    v50 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*((id *)this + 68), "setLabel:", v50);

  }
}

void sub_19145229C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49,char a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,char a55)
{
  void *v55;
  void *v56;
  uint64_t v57;

  if (a49 < 0)
    operator delete(__p);

  if (*(char *)(v57 - 185) < 0)
    operator delete(*(void **)(v57 - 208));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a53);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a55);
  _Unwind_Resume(a1);
}

uint64_t Espresso::MPSBuffersEngine::inner_product_kernel::estimated_compute_resources(uint64_t a1, __int128 **a2, int a3)
{
  double v4;

  if (!*(_DWORD *)(a1 + 412) && !*(_DWORD *)(a1 + 416))
    return Espresso::generic_inner_product_kernel::estimated_compute_resources(a1, a2, a3);
  *(float *)&v4 = Espresso::base_kernel::estimated_compute_resources(a1, a2, a3);
  return objc_msgSend(*(id *)(a1 + 680), "length", v4);
}

void Espresso::MPSBuffersEngine::inner_product_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t *a2, unsigned __int8 *a3, void *a4, unint64_t a5, uint64_t *a6)
{
  const void *v12;
  id *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint64_t v17;
  id v18;
  double v19;
  double v20;
  int32x2_t v21;
  unint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  BOOL v29;
  unsigned __int8 *v30;
  uint64_t v33;
  void *v34;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  int v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  __int128 v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  int *v57;
  int v59;
  int v60;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  void *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t *v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  unint64_t *v85;
  unint64_t v86;
  __int128 v87;
  unint64_t *v88;
  unint64_t v89;
  unint64_t *v90;
  unint64_t v91;
  uint64_t v92;
  void *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  unint64_t *v99;
  unint64_t *v100;
  unint64_t *v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::runtime_error *exception;
  int v106;
  int v107;
  uint64_t v108[2];
  uint64_t v109;
  std::__shared_weak_count *v110;
  uint64_t v111;
  std::__shared_weak_count *v112;
  uint64_t v113[2];
  uint64_t v114[2];
  __int128 v115;
  uint64_t v116;
  uint64_t v117;

  v116 = 0;
  v117 = 0;
  if (a6 && *a6)
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v116, *a6, a6[1]);
  v12 = *(const void **)(a1 + 8);
  if (!v12
  {
    v115 = 0uLL;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
  }
  v14 = *(std::__shared_weak_count **)(a1 + 16);
  *(_QWORD *)&v115 = v13;
  *((_QWORD *)&v115 + 1) = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
    v18 = v13[18];
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  else
  {
    v18 = v13[18];
  }
  v23 = a3[23];
  if (((char)a3[23] & 0x80000000) == 0)
  {
    switch(a3[23])
    {
      case 1u:
        v24 = *a3;
        if (v24 == 98)
          goto LABEL_87;
        if (v24 != 87)
          goto LABEL_136;
        goto LABEL_157;
      case 2u:
      case 3u:
      case 4u:
      case 6u:
      case 8u:
      case 9u:
      case 0xBu:
        goto LABEL_136;
      case 5u:
        if (*(_DWORD *)a3 != 828792663 || a3[4] != 54)
          goto LABEL_136;
        goto LABEL_63;
      case 7u:
        if (*(_DWORD *)a3 == 828792695 && *(_DWORD *)(a3 + 3) == 1952396849)
          goto LABEL_145;
        if (*(_DWORD *)a3 != 862347127 || *(_DWORD *)(a3 + 3) != 1952395827)
          goto LABEL_136;
        goto LABEL_174;
      case 0xAu:
        goto LABEL_46;
      case 0xCu:
        if (*(_QWORD *)a3 != 0x74735F6B636F6C62 || *((_DWORD *)a3 + 2) != 1937011297)
          goto LABEL_136;
        goto LABEL_57;
      default:
        goto LABEL_36;
    }
  }
  v25 = *((_QWORD *)a3 + 1);
  if (v25 > 6)
  {
    if (v25 == 7)
    {
      v57 = *(int **)a3;
      if (**(_DWORD **)a3 == 828792695 && *(_DWORD *)(*(_QWORD *)a3 + 3) == 1952396849)
      {
LABEL_145:
        v75 = *(void **)(a1 + 576);
        *(_QWORD *)(a1 + 576) = 0;

        v111 = v116;
        v112 = (std::__shared_weak_count *)v117;
        if (v117)
        {
          v76 = (unint64_t *)(v117 + 8);
          do
            v77 = __ldxr(v76);
          while (__stxr(v77 + 1, v76));
        }
        Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<unsigned short,2>(&v115, *(_QWORD *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, &v111, *(_DWORD *)(a1 + 304), *(_DWORD *)(a1 + 308), (a4 & 0x3F) == 0);
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 528, &v115);
        v78 = (std::__shared_weak_count *)*((_QWORD *)&v115 + 1);
        if (*((_QWORD *)&v115 + 1))
        {
          v79 = (unint64_t *)(*((_QWORD *)&v115 + 1) + 8);
          do
            v80 = __ldaxr(v79);
          while (__stlxr(v80 - 1, v79));
          if (!v80)
          {
            ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
            std::__shared_weak_count::__release_weak(v78);
          }
        }
        v41 = v112;
        if (!v112)
          goto LABEL_197;
        v81 = (unint64_t *)&v112->__shared_owners_;
        do
          v43 = __ldaxr(v81);
        while (__stlxr(v43 - 1, v81));
      }
      else
      {
        v59 = *v57;
        v60 = *(int *)((char *)v57 + 3);
        if (v59 != 862347127 || v60 != 1952395827)
          goto LABEL_110;
LABEL_174:
        v93 = *(void **)(a1 + 576);
        *(_QWORD *)(a1 + 576) = 0;

        v109 = v116;
        v110 = (std::__shared_weak_count *)v117;
        if (v117)
        {
          v94 = (unint64_t *)(v117 + 8);
          do
            v95 = __ldxr(v94);
          while (__stxr(v95 + 1, v94));
        }
        Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<float,2>(&v115, *(_QWORD *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, &v109, *(_DWORD *)(a1 + 304), *(_DWORD *)(a1 + 308), (a4 & 0x3F) == 0);
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 512, &v115);
        v96 = (std::__shared_weak_count *)*((_QWORD *)&v115 + 1);
        if (*((_QWORD *)&v115 + 1))
        {
          v97 = (unint64_t *)(*((_QWORD *)&v115 + 1) + 8);
          do
            v98 = __ldaxr(v97);
          while (__stlxr(v98 - 1, v97));
          if (!v98)
          {
            ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
            std::__shared_weak_count::__release_weak(v96);
          }
        }
        v41 = v110;
        if (!v110)
          goto LABEL_197;
        v99 = (unint64_t *)&v110->__shared_owners_;
        do
          v43 = __ldaxr(v99);
        while (__stlxr(v43 - 1, v99));
      }
LABEL_195:
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
      goto LABEL_197;
    }
    if (v25 == 12)
    {
      if (**(_QWORD **)a3 == 0x74735F6B636F6C62 && *(_DWORD *)(*(_QWORD *)a3 + 8) == 1937011297)
      {
LABEL_57:
        v33 = objc_msgSend(v18, "newBufferWithBytes:length:options:", a4, a5, 0);
        v34 = *(void **)(a1 + 688);
        *(_QWORD *)(a1 + 688) = v33;
        goto LABEL_173;
      }
      if ((v23 & 0x80) == 0)
      {
        if (v23 != 10)
        {
LABEL_36:
          if (v23 != 18)
            goto LABEL_136;
          v29 = *(_QWORD *)a3 == 0x775F657372617073
             && *((_QWORD *)a3 + 1) == 0x665F737468676965
             && *((_WORD *)a3 + 8) == 12851;
          v30 = a3;
          if (!v29)
            goto LABEL_129;
          goto LABEL_204;
        }
LABEL_46:
        if (*(_QWORD *)a3 != 0x6F635F6B636F6C62 || *((_WORD *)a3 + 4) != 29548)
          goto LABEL_136;
        goto LABEL_144;
      }
    }
    goto LABEL_110;
  }
  if (v25 == 1)
  {
    v46 = **(unsigned __int8 **)a3;
    if (v46 == 87)
    {
LABEL_157:
      v82 = (std::__shared_weak_count *)v117;
      v114[0] = v116;
      v114[1] = v117;
      if (v117)
      {
        v83 = (unint64_t *)(v117 + 8);
        do
          v84 = __ldxr(v83);
        while (__stxr(v84 + 1, v83));
      }
      Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<float,2>(&v115, *(_QWORD *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, v114, *(_DWORD *)(a1 + 308), *(_DWORD *)(a1 + 304), (a4 & 0x3F) == 0);
      if (v82)
      {
        v85 = (unint64_t *)&v82->__shared_owners_;
        do
          v86 = __ldaxr(v85);
        while (__stlxr(v86 - 1, v85));
        if (!v86)
        {
          ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
          std::__shared_weak_count::__release_weak(v82);
        }
      }
      v87 = v115;
      if (*((_QWORD *)&v115 + 1))
      {
        v88 = (unint64_t *)(*((_QWORD *)&v115 + 1) + 8);
        do
          v89 = __ldxr(v88);
        while (__stxr(v89 + 1, v88));
        std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 624), v87, *((uint64_t *)&v87 + 1));
        *(_DWORD *)(a1 + 552) = 268435488;
        v90 = (unint64_t *)(*((_QWORD *)&v87 + 1) + 8);
        do
          v91 = __ldaxr(v90);
        while (__stlxr(v91 - 1, v90));
        if (!v91)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v87 + 1) + 16))(*((_QWORD *)&v87 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v87 + 1));
        }
      }
      else
      {
        std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 624), v115, 0);
        *(_DWORD *)(a1 + 552) = 268435488;
      }
      *(_DWORD *)(a1 + 552) = 268435488;
      Espresso::MPSBuffersEngine::inner_product_kernel::populate_weight_buffer((Espresso::MPSBuffersEngine::inner_product_kernel *)a1);
      v41 = (std::__shared_weak_count *)*((_QWORD *)&v115 + 1);
      if (*((_QWORD *)&v115 + 1))
      {
        v100 = (unint64_t *)(*((_QWORD *)&v115 + 1) + 8);
        do
          v43 = __ldaxr(v100);
        while (__stlxr(v43 - 1, v100));
        goto LABEL_195;
      }
      goto LABEL_197;
    }
    if (v46 == 98)
    {
LABEL_87:
      v47 = (std::__shared_weak_count *)v117;
      v108[0] = v116;
      v108[1] = v117;
      if (v117)
      {
        v48 = (unint64_t *)(v117 + 8);
        do
          v49 = __ldxr(v48);
        while (__stxr(v49 + 1, v48));
      }
      Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<float,1>(&v115, *(_QWORD *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, v108, *(_DWORD *)(a1 + 304), (a4 & 0x3F) == 0);
      if (v47)
      {
        v50 = (unint64_t *)&v47->__shared_owners_;
        do
          v51 = __ldaxr(v50);
        while (__stlxr(v51 - 1, v50));
        if (!v51)
        {
          ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
          std::__shared_weak_count::__release_weak(v47);
        }
      }
      v52 = v115;
      if (*((_QWORD *)&v115 + 1))
      {
        v53 = (unint64_t *)(*((_QWORD *)&v115 + 1) + 8);
        do
          v54 = __ldxr(v53);
        while (__stxr(v54 + 1, v53));
        std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 656), v52, *((uint64_t *)&v52 + 1));
        v55 = (unint64_t *)(*((_QWORD *)&v52 + 1) + 8);
        do
          v56 = __ldaxr(v55);
        while (__stlxr(v56 - 1, v55));
        if (!v56)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v52 + 1) + 16))(*((_QWORD *)&v52 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v52 + 1));
        }
      }
      else
      {
        std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 656), v115, 0);
      }
      Espresso::MPSBuffersEngine::inner_product_kernel::populate_bias_buffer((Espresso::MPSBuffersEngine::inner_product_kernel *)a1);
      v41 = (std::__shared_weak_count *)*((_QWORD *)&v115 + 1);
      if (*((_QWORD *)&v115 + 1))
      {
        v101 = (unint64_t *)(*((_QWORD *)&v115 + 1) + 8);
        do
          v43 = __ldaxr(v101);
        while (__stlxr(v43 - 1, v101));
        goto LABEL_195;
      }
      goto LABEL_197;
    }
LABEL_110:
    if (*((_QWORD *)a3 + 1) != 10)
    {
LABEL_116:
      if (*((_QWORD *)a3 + 1) != 18)
        goto LABEL_127;
      if (**(_QWORD **)a3 != 0x775F657372617073
        || *(_QWORD *)(*(_QWORD *)a3 + 8) != 0x665F737468676965
        || *(_WORD *)(*(_QWORD *)a3 + 16) != 12851)
      {
        if ((v23 & 0x80) == 0)
        {
          v30 = a3;
          if (v23 != 18)
            goto LABEL_136;
          goto LABEL_129;
        }
LABEL_127:
        if (*((_QWORD *)a3 + 1) == 18)
        {
          v30 = *(unsigned __int8 **)a3;
LABEL_129:
          v65 = *(_QWORD *)v30;
          v66 = *((_QWORD *)v30 + 1);
          v67 = *((unsigned __int16 *)v30 + 8);
          if (v65 != 0x775F657372617073 || v66 != 0x665F737468676965 || v67 != 13873)
            goto LABEL_136;
          v92 = objc_msgSend(v18, "newBufferWithBytes:length:options:", a4, a5, 0);
          v34 = *(void **)(a1 + 680);
          *(_QWORD *)(a1 + 680) = v92;
LABEL_173:

          goto LABEL_197;
        }
LABEL_136:
        v70 = *(_QWORD *)(a1 + 440);
        if (!v70)
        {
          v106 = 1;
          v107 = 1;
          std::allocate_shared[abi:ne180100]<Espresso::quantized_weights_helper,std::allocator<Espresso::quantized_weights_helper>,std::shared_ptr<Espresso::abstract_context> &,int,int,unsigned int &,unsigned int &,void>(&v115, *(_QWORD *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), &v107, &v106, (int *)(a1 + 308), (int *)(a1 + 304));
          std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 440, &v115);
          v71 = (std::__shared_weak_count *)*((_QWORD *)&v115 + 1);
          if (*((_QWORD *)&v115 + 1))
          {
            v72 = (unint64_t *)(*((_QWORD *)&v115 + 1) + 8);
            do
              v73 = __ldaxr(v72);
            while (__stlxr(v73 - 1, v72));
            if (!v73)
            {
              ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
              std::__shared_weak_count::__release_weak(v71);
            }
          }
          v70 = *(_QWORD *)(a1 + 440);
        }
        Espresso::quantized_weights_helper::__set_weight_raw_blob(v70, v19, v20, v21, v17, (uint64_t)a3, (char *)a4, a5, a6);
        Espresso::MPSBuffersEngine::inner_product_kernel::__set_weights_finalize(a1, a2);
        goto LABEL_197;
      }
LABEL_204:
      Espresso::throw_exception_selector<Espresso::not_implemented_error>("inner_producet_kernel");
    }
    if (**(_QWORD **)a3 != 0x6F635F6B636F6C62 || *(_WORD *)(*(_QWORD *)a3 + 8) != 29548)
    {
      if ((v23 & 0x80) == 0)
        goto LABEL_136;
      goto LABEL_116;
    }
LABEL_144:
    v74 = objc_msgSend(v18, "newBufferWithBytes:length:options:", a4, a5, 0);
    v34 = *(void **)(a1 + 696);
    *(_QWORD *)(a1 + 696) = v74;
    goto LABEL_173;
  }
  if (v25 != 5)
    goto LABEL_110;
  if (**(_DWORD **)a3 != 828792663 || *(_BYTE *)(*(_QWORD *)a3 + 4) != 54)
    goto LABEL_110;
LABEL_63:
  v36 = (std::__shared_weak_count *)v117;
  v113[0] = v116;
  v113[1] = v117;
  if (v117)
  {
    v37 = (unint64_t *)(v117 + 8);
    do
      v38 = __ldxr(v37);
    while (__stxr(v38 + 1, v37));
  }
  Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<unsigned short,2>(&v115, *(_QWORD *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, v113, *(_DWORD *)(a1 + 308), *(_DWORD *)(a1 + 304), (a4 & 0x3F) == 0);
  if (v36)
  {
    v39 = (unint64_t *)&v36->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 640), v115, *((uint64_t *)&v115 + 1));
  *(_DWORD *)(a1 + 552) = 268435472;
  Espresso::MPSBuffersEngine::inner_product_kernel::populate_weight_buffer((Espresso::MPSBuffersEngine::inner_product_kernel *)a1);
  v41 = (std::__shared_weak_count *)*((_QWORD *)&v115 + 1);
  if (*((_QWORD *)&v115 + 1))
  {
    v42 = (unint64_t *)(*((_QWORD *)&v115 + 1) + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    goto LABEL_195;
  }
LABEL_197:

  v102 = (std::__shared_weak_count *)v117;
  if (v117)
  {
    v103 = (unint64_t *)(v117 + 8);
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      std::__shared_weak_count::__release_weak(v102);
    }
  }
}

void sub_191452F8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void *v5;
  uint64_t v6;
  va_list va;

  va_start(va, a5);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v6 - 96);
  _Unwind_Resume(a1);
}

void Espresso::MPSBuffersEngine::inner_product_kernel::__set_weights_finalize(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  int32x2_t v22;
  int *v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  char *v28;
  unint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t *v38;
  unint64_t v39;
  uint64_t *v40;
  unint64_t v41;
  unint64_t *v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  char *v53;
  std::__shared_weak_count *v54;
  char *v55;
  std::__shared_weak_count *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  uint64_t v65;
  std::__shared_weak_count *v66;

  v3 = *(_QWORD *)(a1 + 440);
  if (v3)
  {
    if (*(_QWORD *)v3)
    {
      v5 = *(_QWORD *)(v3 + 32);
      if (v5 || *(_QWORD *)(v3 + 48) || *(_QWORD *)(v3 + 64) || *(_QWORD *)(v3 + 80))
      {
        if (*(_DWORD *)(*(_QWORD *)(a1 + 8) + 76))
        {
          Espresso::quantized_weights_helper::dequantize_to_float32_2d((Espresso::quantized_weights_helper *)v3, &v49);
          std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 624), v49, (uint64_t)v50);
          *(_DWORD *)(a1 + 552) = 268435488;
          v6 = v50;
          if (!v50)
            return;
          p_shared_owners = (unint64_t *)&v50->__shared_owners_;
          do
            v8 = __ldaxr(p_shared_owners);
          while (__stlxr(v8 - 1, p_shared_owners));
          goto LABEL_69;
        }
        if (*(int *)(v3 + 156) <= 7)
        {
          Espresso::quantized_weights_helper::make_uint8_weight_from_raw((Espresso::quantized_weights_helper *)v3);
          v3 = *(_QWORD *)(a1 + 440);
          v5 = *(_QWORD *)(v3 + 32);
        }
        if (v5 || *(_QWORD *)(v3 + 48) || *(_QWORD *)(v3 + 64) || !*(_QWORD *)(v3 + 80))
        {
          v43 = *(_QWORD *)(v3 + 40);
          v59 = v5;
          v60 = v43;
          if (v43)
          {
            v44 = (unint64_t *)(v43 + 8);
            do
              v45 = __ldxr(v44);
            while (__stxr(v45 + 1, v44));
          }
          v46 = a2[1];
          v57 = *a2;
          v58 = v46;
          if (v46)
          {
            v47 = (unint64_t *)(v46 + 8);
            do
              v48 = __ldxr(v47);
            while (__stxr(v48 + 1, v47));
          }
          Espresso::throw_exception_selector<Espresso::not_implemented_error>("LUT quantization not implemented for inner_product_kernel.");
        }
        Espresso::quantized_weights_helper::get_per_ch_ranges((Espresso::quantized_weights_helper *)v3, &v65);
        v63 = v65;
        v64 = v66;
        if (v66)
        {
          v9 = (unint64_t *)&v66->__shared_owners_;
          do
            v10 = __ldxr(v9);
          while (__stxr(v10 + 1, v9));
        }
        v11 = (std::__shared_weak_count *)a2[1];
        v61 = *a2;
        v62 = v11;
        if (v11)
        {
          v12 = (unint64_t *)&v11->__shared_owners_;
          do
            v13 = __ldxr(v12);
          while (__stxr(v13 + 1, v12));
        }
        Espresso::MPSBuffersEngine::inner_product_kernel::set_quantization_ranges_blob(a1, (uint64_t)&v63);
        if (v11)
        {
          v14 = (unint64_t *)&v11->__shared_owners_;
          do
            v15 = __ldaxr(v14);
          while (__stlxr(v15 - 1, v14));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
            std::__shared_weak_count::__release_weak(v11);
          }
        }
        v16 = v64;
        if (v64)
        {
          v17 = (unint64_t *)&v64->__shared_owners_;
          do
            v18 = __ldaxr(v17);
          while (__stlxr(v18 - 1, v17));
          if (!v18)
          {
            ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
            std::__shared_weak_count::__release_weak(v16);
          }
        }
        v19 = v66;
        if (v66)
        {
          v20 = (unint64_t *)&v66->__shared_owners_;
          do
            v21 = __ldaxr(v20);
          while (__stlxr(v21 - 1, v20));
          if (!v21)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
        v22 = *(int32x2_t *)(a1 + 304);
        v23 = *(int **)(a1 + 440);
        if (v23[40] >= 1 && (v24 = *((_QWORD *)v23 + 2)) != 0)
        {
          v25 = (std::__shared_weak_count *)*((_QWORD *)v23 + 3);
        }
        else
        {
          v24 = *(_QWORD *)v23;
          v25 = (std::__shared_weak_count *)*((_QWORD *)v23 + 1);
        }
        v65 = v24;
        v66 = v25;
        if (v25)
        {
          v26 = (unint64_t *)&v25->__shared_owners_;
          do
            v27 = __ldxr(v26);
          while (__stxr(v27 + 1, v26));
        }
        v28 = (char *)operator new(0x58uLL);
        *((_QWORD *)v28 + 1) = 0;
        v29 = (unint64_t *)(v28 + 8);
        *((_QWORD *)v28 + 2) = 0;
        *(_QWORD *)v28 = &off_1E2DBED88;
        *((_QWORD *)v28 + 3) = &off_1E2DA1270;
        v30 = *(_QWORD *)(v24 + 16);
        *(_OWORD *)(v28 + 72) = 0u;
        *(_OWORD *)(v28 + 56) = 0u;
        *((int32x2_t *)v28 + 4) = vrev64_s32(v22);
        *((_QWORD *)v28 + 5) = v30;
        v28[48] = 0;
        v55 = v28 + 24;
        v56 = (std::__shared_weak_count *)v28;
        v53 = v28 + 24;
        v54 = (std::__shared_weak_count *)v28;
        do
          v31 = __ldxr(v29);
        while (__stxr(v31 + 1, v29));
        v32 = *a2;
        v33 = (std::__shared_weak_count *)a2[1];
        v51 = v32;
        v52 = v33;
        if (v33)
        {
          v34 = (unint64_t *)&v33->__shared_owners_;
          do
            v35 = __ldxr(v34);
          while (__stxr(v35 + 1, v34));
        }
        std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 496), (uint64_t)(v28 + 24), (uint64_t)v28);
        Espresso::MPSBuffersEngine::inner_product_kernel::populate_weight_buffer<unsigned char>(a1, (uint64_t *)(a1 + 496));
        if (v33)
        {
          v36 = (unint64_t *)&v33->__shared_owners_;
          do
            v37 = __ldaxr(v36);
          while (__stlxr(v37 - 1, v36));
          if (!v37)
          {
            ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
            std::__shared_weak_count::__release_weak(v33);
          }
        }
        if (v54)
        {
          v38 = &v54->__shared_owners_;
          do
            v39 = __ldaxr((unint64_t *)v38);
          while (__stlxr(v39 - 1, (unint64_t *)v38));
          if (!v39)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        if (v56)
        {
          v40 = &v56->__shared_owners_;
          do
            v41 = __ldaxr((unint64_t *)v40);
          while (__stlxr(v41 - 1, (unint64_t *)v40));
          if (!v41)
          {
            ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
            std::__shared_weak_count::__release_weak(v56);
          }
        }
        v6 = v66;
        if (v66)
        {
          v42 = (unint64_t *)&v66->__shared_owners_;
          do
            v8 = __ldaxr(v42);
          while (__stlxr(v8 - 1, v42));
LABEL_69:
          if (!v8)
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
        }
      }
    }
  }
}

void sub_19145342C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  va_list va1;
  uint64_t v10;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v8 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v3 - 64);
  _Unwind_Resume(a1);
}

BOOL Espresso::MPSBuffersEngine::inner_product_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BOOL8 result;
  const Espresso::layer_shape *v6;
  unint64_t v7;
  int v8;
  int v9;
  int v10;
  _BYTE v11[20];
  unsigned int v12;

  if (*(int *)(a1 + 424) > 0 || *(_DWORD *)(a1 + 404))
    return 0;
  result = 0;
  v6 = *(const Espresso::layer_shape **)a3;
  v7 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
  if (v7 && v7 <= 0x80)
  {
    if (*(_DWORD *)(a1 + 332))
      return 0;
    if (*(_DWORD *)(a1 + 316) == 2)
      return 0;
    if (*(_DWORD *)(a1 + 340))
      return 0;
    if (*(_DWORD *)(a1 + 348))
      return 0;
    v8 = *(_DWORD *)(a1 + 336);
    if (!v8)
    {
      if (*(_DWORD *)(a3 + 64))
        return 0;
    }
    if (!v8)
    {
      if (v7 != 128)
        return 1;
      Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v11, v6, 0);
      result = 0;
      if (v12 <= 3)
      {
        Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v11, (const Espresso::layer_shape *)(*(_QWORD *)a3 + 64), 0);
        result = 0;
        if (v12 <= 3)
          return 1;
      }
      return result;
    }
    if (v7 != 64)
      return 0;
    Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v11, v6, 0);
    v9 = *(unsigned __int8 *)(a1 + 344);
    v10 = Espresso::layer_nd_shape::matrix_rows((Espresso::layer_nd_shape *)v11, v9);
    result = 0;
    if (v10 >= 20)
    {
      if ((unint64_t)Espresso::layer_nd_shape::matrix_cols((Espresso::layer_nd_shape *)v11, v9 != 0) <= 1
        && *(_QWORD *)(a3 + 8) - *(_QWORD *)a3 == 64)
      {
        return v12 > 1;
      }
      return 0;
    }
  }
  return result;
}

uint64_t Espresso::MPSBuffersEngine::inner_product_kernel::supports_weight_key(uint64_t a1, _QWORD *a2)
{
  int v2;
  BOOL v3;
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  int v8;

  if (*((char *)a2 + 23) < 0)
  {
    v4 = a2[1];
    if (v4 != 12)
    {
      if (v4 == 13)
      {
        v3 = *(_QWORD *)*a2 == 0x715F68635F726570 && *(_QWORD *)(*a2 + 5) == 0x656C616373715F68;
        return !v3;
      }
      return 1;
    }
    a2 = (_QWORD *)*a2;
LABEL_14:
    v6 = 0x7065725F63685F71;
    v7 = bswap64(*a2);
    if (v7 == 0x7065725F63685F71 && (v6 = 1651073395, v7 = bswap32(*((_DWORD *)a2 + 2)), (_DWORD)v7 == 1651073395))
    {
      v8 = 0;
    }
    else if (v7 < v6)
    {
      v8 = -1;
    }
    else
    {
      v8 = 1;
    }
    v3 = v8 == 0;
    return !v3;
  }
  v2 = *((unsigned __int8 *)a2 + 23);
  if (v2 == 12)
    goto LABEL_14;
  if (v2 != 13)
    return 1;
  v3 = *a2 == 0x715F68635F726570 && *(_QWORD *)((char *)a2 + 5) == 0x656C616373715F68;
  return !v3;
}

_QWORD *Espresso::MPSBuffersEngine::inner_product_kernel::set_biases(uint64_t a1, uint64_t *a2)
{
  return std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 656), *a2, a2[1]);
}

_QWORD *Espresso::MPSBuffersEngine::inner_product_kernel::set_weights(uint64_t a1, uint64_t *a2)
{
  _QWORD *result;

  result = std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 624), *a2, a2[1]);
  *(_DWORD *)(a1 + 552) = 268435488;
  return result;
}

void Espresso::MPSBuffersEngine::inner_product_kernel::get_biases(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void Espresso::MPSBuffersEngine::inner_product_kernel::get_weights(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void Espresso::MPSBuffersEngine::inner_product_kernel::set_quantized_weights_blob(uint64_t a1, uint64_t *a2)
{
  uint64_t *v3;

  v3 = (uint64_t *)(a1 + 496);
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 496), *a2, a2[1]);
  Espresso::MPSBuffersEngine::inner_product_kernel::populate_weight_buffer<unsigned char>(a1, v3);
}

void Espresso::MPSBuffersEngine::inner_product_kernel::set_quantization_ranges_blob(uint64_t a1, uint64_t a2)
{
  int v4;
  char *v5;
  Espresso *v6;
  void *v7;
  uint64_t *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  void *v19;
  __int128 v20;

  v4 = 2 * *(_DWORD *)(a1 + 304);
  v5 = (char *)operator new(0x58uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &off_1E2DBEC00;
  *((_QWORD *)v5 + 3) = &off_1E2DA1190;
  *(_OWORD *)(v5 + 56) = 0u;
  *(_OWORD *)(v5 + 72) = 0u;
  v6 = (Espresso *)(4 * v4);
  *((_DWORD *)v5 + 8) = v4;
  v7 = Espresso::kern_alloc_uninitialized(v6);
  bzero(v7, (size_t)v6);
  *((_QWORD *)v5 + 5) = v7;
  v5[48] = 1;
  *(_QWORD *)&v20 = v5 + 24;
  *((_QWORD *)&v20 + 1) = v5;
  v8 = (uint64_t *)(a1 + 856);
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 856, &v20);
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
  if (*((_QWORD *)&v20 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = *v8;
  if (!*v8)
    Espresso::throw_exception_selector<Espresso::memory_error>("Error allocating memory");
  v13 = *(_QWORD *)(v12 + 16);
  v14 = *(unsigned int *)(a1 + 304);
  if ((_DWORD)v14)
  {
    v15 = 0;
    v16 = *(_QWORD *)(*(_QWORD *)a2 + 16);
    v17 = (_DWORD *)(v13 + 4);
    do
    {
      *(v17 - 1) = *(_DWORD *)(v16 + 4 * v15);
      *v17 = *(_DWORD *)(v16 + 4 * (v14 + v15));
      v17 += 2;
      ++v15;
    }
    while (v14 != v15);
  }
  v18 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 8) + 144), "newBufferWithBytesNoCopy:length:options:deallocator:", v13, (4 * *(int *)(v12 + 8) + 4095) & 0xFFFFFFFFFFFFF000, 0, 0);
  v19 = *(void **)(a1 + 904);
  *(_QWORD *)(a1 + 904) = v18;

}

void sub_1914538E4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;
  void *v4;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v1[3]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v2);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

void Espresso::MPSBuffersEngine::inner_product_kernel::set_quantization_lut_blob()
{
  Espresso::throw_exception_selector<Espresso::not_implemented_error>("LUT quantization not implemented for inner_product_kernel.");
}

void Espresso::MPSBuffersEngine::inner_product_kernel::populate_weight_buffer<unsigned char>(uint64_t a1, uint64_t *a2)
{
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  char v30;

  v4 = *(void **)(a1 + 560);
  *(_QWORD *)(a1 + 560) = 0;

  v5 = *(void **)(a1 + 576);
  *(_QWORD *)(a1 + 576) = 0;

  v6 = *(void **)(a1 + 568);
  *(_QWORD *)(a1 + 568) = 0;

  if (*(_BYTE *)(a1 + 556))
    v7 = *(unsigned int *)(a1 + 304);
  else
    v7 = *(unsigned int *)(a1 + 308);
  if (*(_BYTE *)(a1 + 556))
    v8 = *(unsigned int *)(a1 + 308);
  else
    v8 = *(unsigned int *)(a1 + 304);
  v9 = 6;
  if (*(_DWORD *)(a1 + 336))
    v9 = 0;
  v10 = (((unint64_t)(v7 - 1) >> v9) + 1) << v9;
  v11 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 8) + 144), "newBufferWithLength:options:", v10 * v8, 0);
  v12 = *(void **)(a1 + 576);
  *(_QWORD *)(a1 + 576) = v11;

  v13 = objc_msgSend(*(id *)(a1 + 576), "contents");
  v14 = *a2;
  v15 = *(_BYTE **)(*a2 + 16);
  *(_DWORD *)(a1 + 888) = v10;
  if (*(_BYTE *)(a1 + 556) || *(_DWORD *)(a1 + 336))
  {
    v16 = *(unsigned int *)(v14 + 8);
    if ((int)v16 >= 1)
    {
      v17 = 0;
      v18 = *(unsigned int *)(v14 + 12);
      do
      {
        v19 = v15;
        v20 = (_BYTE *)v13;
        v21 = v18;
        if ((int)v18 >= 1)
        {
          do
          {
            *v20++ = *v19;
            v19 += v16;
            --v21;
          }
          while (v21);
        }
        ++v17;
        v13 += v10;
        ++v15;
      }
      while (v17 != v16);
    }
    objc_msgSend(MEMORY[0x1E0CC6F00], "matrixDescriptorWithRows:columns:matrices:rowBytes:matrixBytes:dataType:", v8, v7, 1, v10, v10 * v8, 8);
    v22 = objc_claimAutoreleasedReturnValue();
    v23 = *(void **)(a1 + 568);
    *(_QWORD *)(a1 + 568) = v22;

    v24 = objc_msgSend(objc_alloc(MEMORY[0x1E0CC6ED8]), "initWithBuffer:descriptor:", *(_QWORD *)(a1 + 576), *(_QWORD *)(a1 + 568));
    v25 = *(void **)(a1 + 560);
    *(_QWORD *)(a1 + 560) = v24;

  }
  else
  {
    v26 = *(unsigned int *)(v14 + 12);
    if ((int)v26 >= 1)
    {
      v27 = 0;
      v28 = *(int *)(v14 + 8);
      do
      {
        if (v10)
        {
          for (i = 0; i != v10; ++i)
          {
            if (i >= v28)
              v30 = 0;
            else
              v30 = v15[i];
            *(_BYTE *)(v13 + i) = v30;
          }
        }
        ++v27;
        v15 += v28;
        v13 += v10;
      }
      while (v27 != v26);
    }
  }
}

void Espresso::MPSBuffersEngine::inner_product_kernel::populate_weight_buffer(Espresso::MPSBuffersEngine::inner_product_kernel *this)
{
  int v2;
  uint64_t *v3;
  uint64_t *v4;
  int v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  _WORD *v13;
  int v14;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  int v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int *v29;
  _WORD *v30;
  int v31;
  unint64_t *v33;
  __int128 v34;

  v2 = *((_DWORD *)this + 168);
  if (!v2)
  {
    if (*((_QWORD *)this + 78))
    {
      v4 = (uint64_t *)((char *)this + 624);
      v5 = 0;
    }
    else
    {
      if (*((_QWORD *)this + 80))
      {
        v3 = (uint64_t *)((char *)this + 640);
        goto LABEL_24;
      }
      if (*((_QWORD *)this + 66))
        goto LABEL_41;
      if (!*((_QWORD *)this + 64))
      {
        if (!*((_QWORD *)this + 62))
          Espresso::throw_exception_selector<Espresso::invalid_state_error>("Weights (weights_f32) not found in METAL_MPS_BUFFERS inner_product_kernel!");
        return;
      }
      v4 = (uint64_t *)((char *)this + 512);
      v5 = 1;
    }
    Espresso::MPSBuffersEngine::inner_product_kernel::populate_weight_buffer<float>((uint64_t)this, v4, v5);
    return;
  }
  if (v2 != 1)
    return;
  if (*((_QWORD *)this + 80))
  {
    v3 = (uint64_t *)((char *)this + 640);
LABEL_24:
    v23 = 0;
LABEL_25:
    Espresso::MPSBuffersEngine::inner_product_kernel::populate_weight_buffer<unsigned short>((uint64_t)this, v3, v23);
    return;
  }
  v6 = *((_QWORD *)this + 78);
  if (v6)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned short,2>,std::allocator<Espresso::blob<unsigned short,2>>,int const*&,void>(&v34, (int *)(v6 + 8));
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)this + 640, &v34);
    v7 = (std::__shared_weak_count *)*((_QWORD *)&v34 + 1);
    if (*((_QWORD *)&v34 + 1))
    {
      v8 = (unint64_t *)(*((_QWORD *)&v34 + 1) + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v10 = *((_QWORD *)this + 78);
    v11 = *(int *)(v10 + 12) * (uint64_t)*(int *)(v10 + 8);
    if (v11)
    {
      v12 = *(int **)(v10 + 16);
      v13 = *(_WORD **)(*((_QWORD *)this + 80) + 16);
      do
      {
        v14 = *v12++;
        _S0 = v14;
        __asm { FCVT            H0, S0 }
        *v13++ = _S0;
        --v11;
      }
      while (v11);
    }
    Espresso::MPSBuffersEngine::inner_product_kernel::populate_weight_buffer<unsigned short>((uint64_t)this, (uint64_t *)this + 80, 0);
    v34 = 0uLL;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)this + 640, &v34);
    v20 = (std::__shared_weak_count *)*((_QWORD *)&v34 + 1);
    if (*((_QWORD *)&v34 + 1))
    {
      v21 = (unint64_t *)(*((_QWORD *)&v34 + 1) + 8);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
LABEL_20:
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
      return;
    }
    return;
  }
  if (*((_QWORD *)this + 66))
  {
LABEL_41:
    v3 = (uint64_t *)((char *)this + 528);
    v23 = 1;
    goto LABEL_25;
  }
  if (*((_QWORD *)this + 64))
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned short,2>,std::allocator<Espresso::blob<unsigned short,2>>,int const*&,void>(&v34, (int *)8);
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)this + 640, &v34);
    v24 = (std::__shared_weak_count *)*((_QWORD *)&v34 + 1);
    if (*((_QWORD *)&v34 + 1))
    {
      v25 = (unint64_t *)(*((_QWORD *)&v34 + 1) + 8);
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    v27 = *((_QWORD *)this + 78);
    v28 = *(int *)(v27 + 12) * (uint64_t)*(int *)(v27 + 8);
    if (v28)
    {
      v29 = *(int **)(v27 + 16);
      v30 = *(_WORD **)(*((_QWORD *)this + 80) + 16);
      do
      {
        v31 = *v29++;
        _S0 = v31;
        __asm { FCVT            H0, S0 }
        *v30++ = _S0;
        --v28;
      }
      while (v28);
    }
    Espresso::MPSBuffersEngine::inner_product_kernel::populate_weight_buffer<unsigned short>((uint64_t)this, (uint64_t *)this + 80, 1);
    v34 = 0uLL;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)this + 640, &v34);
    v20 = (std::__shared_weak_count *)*((_QWORD *)&v34 + 1);
    if (*((_QWORD *)&v34 + 1))
    {
      v33 = (unint64_t *)(*((_QWORD *)&v34 + 1) + 8);
      do
        v22 = __ldaxr(v33);
      while (__stlxr(v22 - 1, v33));
      goto LABEL_20;
    }
  }
}

void Espresso::MPSBuffersEngine::inner_product_kernel::populate_bias_buffer(Espresso::MPSBuffersEngine::inner_product_kernel *this)
{
  uint64_t v2;
  int v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  uint64_t v6;
  size_t v7;
  _WORD *v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  int v12;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  _WORD *v23;
  int shared_owners;
  __int16 *shared_weak_owners;
  uint64_t shared_owners_low;
  __int16 v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  void *v31;
  unint64_t v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  uint64_t v39;
  void *v40;
  _DWORD *v41;
  uint64_t v42;
  uint64_t v43;
  int *v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  void *v50;

  v2 = *((_QWORD *)this + 82);
  v3 = *((_DWORD *)this + 78);
  if (!v2)
  {
    if (v3)
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("inner product kernel p.has_biases is true, but biases were not found!");
    goto LABEL_15;
  }
  if (!v3)
  {
LABEL_15:
    v33 = (void *)*((_QWORD *)this + 73);
    *((_QWORD *)this + 73) = 0;

    v34 = (void *)*((_QWORD *)this + 74);
    *((_QWORD *)this + 74) = 0;

    v35 = (void *)*((_QWORD *)this + 75);
    *((_QWORD *)this + 75) = 0;

    return;
  }
  if (*((_DWORD *)this + 168) == 1)
  {
    v4 = (std::__shared_weak_count *)operator new(0x58uLL);
    v4->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    v4->__shared_weak_owners_ = 0;
    v4->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBEFB8;
    v4[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA13B0;
    *(_OWORD *)&v4[2].__shared_owners_ = 0u;
    v4[3].std::__shared_count = 0u;
    v6 = *(int *)(v2 + 8);
    LODWORD(v4[1].__shared_owners_) = v6;
    v7 = 2 * v6;
    v8 = Espresso::kern_alloc_uninitialized((Espresso *)(2 * v6));
    bzero(v8, v7);
    v4[1].__shared_weak_owners_ = (uint64_t)v8;
    LOBYTE(v4[2].__vftable) = 1;
    v9 = *((_QWORD *)this + 82);
    v10 = *(int *)(v9 + 8);
    if ((_DWORD)v10)
    {
      v11 = *(int **)(v9 + 16);
      do
      {
        v12 = *v11++;
        _S0 = v12;
        __asm { FCVT            H0, S0 }
        *v8++ = _S0;
        --v10;
      }
      while (v10);
    }
    v18 = (void *)*((_QWORD *)this + 73);
    *((_QWORD *)this + 73) = 0;

    v19 = (void *)*((_QWORD *)this + 74);
    *((_QWORD *)this + 74) = 0;

    v20 = (void *)*((_QWORD *)this + 75);
    *((_QWORD *)this + 75) = 0;

    v21 = objc_msgSend(*(id *)(*((_QWORD *)this + 1) + 144), "newBufferWithLength:options:", 2 * SLODWORD(v4[1].__shared_owners_), 0, &v4[1], v4);
    v22 = (void *)*((_QWORD *)this + 75);
    *((_QWORD *)this + 75) = v21;

    v23 = (_WORD *)objc_msgSend(*((id *)this + 75), "contents");
    shared_owners = v4[1].__shared_owners_;
    if (shared_owners)
    {
      shared_weak_owners = (__int16 *)v4[1].__shared_weak_owners_;
      shared_owners_low = LODWORD(v4[1].__shared_owners_);
      do
      {
        v27 = *shared_weak_owners++;
        *v23++ = v27;
        --shared_owners_low;
      }
      while (shared_owners_low);
    }
    objc_msgSend(MEMORY[0x1E0CC7250], "vectorDescriptorWithLength:vectors:vectorBytes:dataType:", shared_owners, 1, 2 * shared_owners, 268435472);
    v28 = objc_claimAutoreleasedReturnValue();
    v29 = (void *)*((_QWORD *)this + 74);
    *((_QWORD *)this + 74) = v28;

    v30 = objc_msgSend(objc_alloc(MEMORY[0x1E0CC7248]), "initWithBuffer:descriptor:", *((_QWORD *)this + 75), *((_QWORD *)this + 74));
    v31 = (void *)*((_QWORD *)this + 73);
    *((_QWORD *)this + 73) = v30;

    do
      v32 = __ldaxr(p_shared_owners);
    while (__stlxr(v32 - 1, p_shared_owners));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    v36 = (void *)*((_QWORD *)this + 73);
    *((_QWORD *)this + 73) = 0;

    v37 = (void *)*((_QWORD *)this + 74);
    *((_QWORD *)this + 74) = 0;

    v38 = (void *)*((_QWORD *)this + 75);
    *((_QWORD *)this + 75) = 0;

    v39 = objc_msgSend(*(id *)(*((_QWORD *)this + 1) + 144), "newBufferWithLength:options:", 4 * *(int *)(*((_QWORD *)this + 82) + 8), 0);
    v40 = (void *)*((_QWORD *)this + 75);
    *((_QWORD *)this + 75) = v39;

    v41 = (_DWORD *)objc_msgSend(*((id *)this + 75), "contents");
    v42 = *((_QWORD *)this + 82);
    v43 = *(unsigned int *)(v42 + 8);
    if ((_DWORD)v43)
    {
      v44 = *(int **)(v42 + 16);
      v45 = v43;
      do
      {
        v46 = *v44++;
        *v41++ = v46;
        --v45;
      }
      while (v45);
    }
    objc_msgSend(MEMORY[0x1E0CC7250], "vectorDescriptorWithLength:vectors:vectorBytes:dataType:", (int)v43, 1, 4 * (int)v43, 268435488);
    v47 = objc_claimAutoreleasedReturnValue();
    v48 = (void *)*((_QWORD *)this + 74);
    *((_QWORD *)this + 74) = v47;

    v49 = objc_msgSend(objc_alloc(MEMORY[0x1E0CC7248]), "initWithBuffer:descriptor:", *((_QWORD *)this + 75), *((_QWORD *)this + 74));
    v50 = (void *)*((_QWORD *)this + 73);
    *((_QWORD *)this + 73) = v49;

  }
}

void sub_1914540C4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;
  void *v4;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v1[3]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v2);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<Espresso::quantized_weights_helper,std::allocator<Espresso::quantized_weights_helper>,std::shared_ptr<Espresso::abstract_context> &,int,int,unsigned int &,unsigned int &,void>(_QWORD *a1, uint64_t a2, std::__shared_weak_count *a3, int *a4, int *a5, int *a6, int *a7)
{
  char *v14;
  char *v15;
  _OWORD *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  int v19;
  int v20;
  int v21;
  int v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;

  v14 = (char *)operator new(0xD0uLL);
  v15 = v14;
  *((_QWORD *)v14 + 1) = 0;
  *((_QWORD *)v14 + 2) = 0;
  *(_QWORD *)v14 = &off_1E2DBD3F0;
  v16 = v14 + 24;
  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
  }
  v19 = *a4;
  v20 = *a5;
  v21 = *a6;
  v22 = *a7;
  *v16 = 0u;
  *(_OWORD *)(v14 + 40) = 0u;
  *(_OWORD *)(v14 + 56) = 0u;
  *(_OWORD *)(v14 + 72) = 0u;
  *(_OWORD *)(v14 + 88) = 0u;
  *(_OWORD *)(v14 + 104) = 0u;
  *(_OWORD *)(v14 + 120) = 0u;
  *((_QWORD *)v14 + 17) = a2;
  *((_QWORD *)v14 + 18) = a3;
  if (a3)
  {
    v23 = (unint64_t *)&a3->__shared_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  *((_DWORD *)v14 + 38) = v19;
  *((_DWORD *)v14 + 39) = v20;
  *((_DWORD *)v14 + 40) = v21;
  *((_DWORD *)v14 + 41) = v22;
  *((_QWORD *)v14 + 21) = 0x100000000;
  v14[176] = 0;
  *((_QWORD *)v14 + 24) = 0;
  *((_QWORD *)v14 + 25) = 0;
  *(_QWORD *)(v14 + 180) = 0;
  v14[188] = 0;
  if (a3)
  {
    v25 = (unint64_t *)&a3->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
      std::__shared_weak_count::__release_weak(a3);
    }
  }
  *a1 = v16;
  a1[1] = v15;
}

void std::__shared_ptr_emplace<Espresso::quantized_weights_helper>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBD3F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::quantized_weights_helper>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBD3F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::quantized_weights_helper>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 24;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 192);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 136);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 120);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 104);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 88);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 72);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 56);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 40);
  return std::shared_ptr<void>::~shared_ptr[abi:ne180100](v2);
}

uint64_t Espresso::blob<unsigned short,1>::~blob(uint64_t a1, void *a2)
{
  void *v3;

  *(_QWORD *)a1 = &off_1E2DA13B0;
  if (*(_BYTE *)(a1 + 24))
  {
    v3 = *(void **)(a1 + 16);
    if (v3)
    {
      Espresso::on_dealloc(*(Espresso **)(a1 + 16), a2);
      free(v3);
    }
  }
  *(_QWORD *)(a1 + 16) = 0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 48);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 32);
  return a1;
}

void Espresso::blob<unsigned short,1>::~blob(uint64_t a1, void *a2)
{
  void *v3;

  *(_QWORD *)a1 = &off_1E2DA13B0;
  if (*(_BYTE *)(a1 + 24))
  {
    v3 = *(void **)(a1 + 16);
    if (v3)
    {
      Espresso::on_dealloc(*(Espresso **)(a1 + 16), a2);
      free(v3);
    }
  }
  *(_QWORD *)(a1 + 16) = 0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 48);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 32);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::blob<unsigned short,1>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBEFB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::blob<unsigned short,1>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBEFB8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::blob<unsigned short,1>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::MPSBuffersEngine::inner_product_kernel::populate_weight_buffer<unsigned short>(uint64_t a1, uint64_t *a2, int a3)
{
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  __int16 *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int16 *v23;
  _WORD *v24;
  uint64_t v25;
  __int16 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int16 *v31;
  __int16 *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int16 v44;
  std::runtime_error *exception;

  v6 = *(void **)(a1 + 560);
  *(_QWORD *)(a1 + 560) = 0;

  v7 = *(void **)(a1 + 576);
  *(_QWORD *)(a1 + 576) = 0;

  v8 = *(void **)(a1 + 568);
  *(_QWORD *)(a1 + 568) = 0;

  if (*(_BYTE *)(a1 + 556))
    v9 = *(unsigned int *)(a1 + 304);
  else
    v9 = *(unsigned int *)(a1 + 308);
  if (*(_BYTE *)(a1 + 556))
    v10 = *(unsigned int *)(a1 + 308);
  else
    v10 = *(unsigned int *)(a1 + 304);
  v11 = 6;
  if (*(_DWORD *)(a1 + 336))
    v11 = 1;
  v12 = (((unint64_t)(2 * v9 - 1) >> v11) + 1) << v11;
  v13 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 8) + 144), "newBufferWithLength:options:", v12 * v10, 0);
  v14 = *(void **)(a1 + 576);
  *(_QWORD *)(a1 + 576) = v13;

  v15 = objc_msgSend(*(id *)(a1 + 576), "contents");
  v16 = *a2;
  v17 = *(__int16 **)(*a2 + 16);
  v18 = v12 >> 1;
  *(_DWORD *)(a1 + 888) = v12 >> 1;
  if (*(_BYTE *)(a1 + 556) || *(_DWORD *)(a1 + 336))
  {
    if (a3)
    {
      v19 = *(unsigned int *)(v16 + 12);
      if ((int)v19 >= 1)
      {
        v20 = 0;
        v21 = *(unsigned int *)(v16 + 8);
        v22 = 2 * v18;
        do
        {
          v23 = v17;
          v24 = (_WORD *)v15;
          v25 = v21;
          if ((int)v21 >= 1)
          {
            do
            {
              v26 = *v23++;
              *v24++ = v26;
              --v25;
            }
            while (v25);
          }
          ++v20;
          v15 += v22;
          v17 += (int)v21;
        }
        while (v20 != v19);
      }
    }
    else
    {
      v27 = *(unsigned int *)(v16 + 8);
      if ((int)v27 >= 1)
      {
        v28 = 0;
        v29 = *(unsigned int *)(v16 + 12);
        v30 = 2 * v18;
        do
        {
          v31 = v17;
          v32 = (__int16 *)v15;
          v33 = v29;
          if ((int)v29 >= 1)
          {
            do
            {
              *v32++ = *v31;
              v31 += v27;
              --v33;
            }
            while (v33);
          }
          ++v28;
          v15 += v30;
          ++v17;
        }
        while (v28 != v27);
      }
    }
    objc_msgSend(MEMORY[0x1E0CC6F00], "matrixDescriptorWithRows:columns:matrices:rowBytes:matrixBytes:dataType:", v10, v9, 1, v12, v12 * v10, 268435472);
    v34 = objc_claimAutoreleasedReturnValue();
    v35 = *(void **)(a1 + 568);
    *(_QWORD *)(a1 + 568) = v34;

    v36 = objc_msgSend(objc_alloc(MEMORY[0x1E0CC6ED8]), "initWithBuffer:descriptor:", *(_QWORD *)(a1 + 576), *(_QWORD *)(a1 + 568));
    v37 = *(void **)(a1 + 560);
    *(_QWORD *)(a1 + 560) = v36;

  }
  else
  {
    if (a3)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
      Espresso::not_implemented_error::not_implemented_error(exception);
    }
    v38 = *(unsigned int *)(v16 + 12);
    if ((int)v38 >= 1)
    {
      v39 = 0;
      v40 = *(int *)(v16 + 8);
      if (v18 <= 1)
        v41 = 1;
      else
        v41 = v12 >> 1;
      v42 = 2 * v18;
      do
      {
        if (v12)
        {
          v43 = 0;
          do
          {
            if (v43 >= v40)
              v44 = 0;
            else
              v44 = v17[v43];
            *(_WORD *)(v15 + 2 * v43++) = v44;
          }
          while (v41 != v43);
        }
        ++v39;
        v17 += v40;
        v15 += v42;
      }
      while (v39 != v38);
    }
  }
}

void sub_19145468C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Espresso::MPSBuffersEngine::inner_product_kernel::populate_weight_buffer<float>(uint64_t a1, uint64_t *a2, int a3)
{
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  _DWORD *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  int *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  std::runtime_error *exception;

  v6 = *(void **)(a1 + 560);
  *(_QWORD *)(a1 + 560) = 0;

  v7 = *(void **)(a1 + 576);
  *(_QWORD *)(a1 + 576) = 0;

  v8 = *(void **)(a1 + 568);
  *(_QWORD *)(a1 + 568) = 0;

  if (*(_BYTE *)(a1 + 556))
    v9 = *(unsigned int *)(a1 + 304);
  else
    v9 = *(unsigned int *)(a1 + 308);
  if (*(_BYTE *)(a1 + 556))
    v10 = *(unsigned int *)(a1 + 308);
  else
    v10 = *(unsigned int *)(a1 + 304);
  v11 = 2;
  if (!*(_DWORD *)(a1 + 336))
    v11 = 6;
  v12 = (((unint64_t)(4 * v9 - 1) >> v11) + 1) << v11;
  v13 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 8) + 144), "newBufferWithLength:options:", v12 * v10, 0);
  v14 = *(void **)(a1 + 576);
  *(_QWORD *)(a1 + 576) = v13;

  v15 = objc_msgSend(*(id *)(a1 + 576), "contents");
  v16 = *a2;
  v17 = *(int **)(*a2 + 16);
  v18 = v12 >> 2;
  *(_DWORD *)(a1 + 888) = v12 >> 2;
  if (*(_BYTE *)(a1 + 556) || *(_DWORD *)(a1 + 336))
  {
    if (a3)
    {
      v19 = *(unsigned int *)(v16 + 12);
      if ((int)v19 >= 1)
      {
        v20 = 0;
        v21 = *(unsigned int *)(v16 + 8);
        v22 = 4 * v18;
        do
        {
          v23 = v17;
          v24 = (_DWORD *)v15;
          v25 = v21;
          if ((int)v21 >= 1)
          {
            do
            {
              v26 = *v23++;
              *v24++ = v26;
              --v25;
            }
            while (v25);
          }
          ++v20;
          v15 += v22;
          v17 += (int)v21;
        }
        while (v20 != v19);
      }
    }
    else
    {
      v27 = *(unsigned int *)(v16 + 8);
      if ((int)v27 >= 1)
      {
        v28 = 0;
        v29 = *(unsigned int *)(v16 + 12);
        v30 = 4 * v18;
        do
        {
          v31 = v17;
          v32 = (int *)v15;
          v33 = v29;
          if ((int)v29 >= 1)
          {
            do
            {
              *v32++ = *v31;
              v31 += v27;
              --v33;
            }
            while (v33);
          }
          ++v28;
          v15 += v30;
          ++v17;
        }
        while (v28 != v27);
      }
    }
    objc_msgSend(MEMORY[0x1E0CC6F00], "matrixDescriptorWithRows:columns:matrices:rowBytes:matrixBytes:dataType:", v10, v9, 1, v12, v12 * v10, 268435488);
    v34 = objc_claimAutoreleasedReturnValue();
    v35 = *(void **)(a1 + 568);
    *(_QWORD *)(a1 + 568) = v34;

    v36 = objc_msgSend(objc_alloc(MEMORY[0x1E0CC6ED8]), "initWithBuffer:descriptor:", *(_QWORD *)(a1 + 576), *(_QWORD *)(a1 + 568));
    v37 = *(void **)(a1 + 560);
    *(_QWORD *)(a1 + 560) = v36;

  }
  else
  {
    if (a3)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
      Espresso::not_implemented_error::not_implemented_error(exception);
    }
    v38 = *(unsigned int *)(v16 + 12);
    if ((int)v38 >= 1)
    {
      v39 = 0;
      v40 = *(int *)(v16 + 8);
      if (v18 <= 1)
        v41 = 1;
      else
        v41 = v12 >> 2;
      v42 = 4 * v18;
      do
      {
        if (v12)
        {
          v43 = 0;
          do
          {
            v44 = 0;
            if (v43 < v40)
              v44 = v17[v43];
            *(_DWORD *)(v15 + 4 * v43++) = v44;
          }
          while (v41 != v43);
        }
        ++v39;
        v17 += v40;
        v15 += v42;
      }
      while (v39 != v38);
    }
  }
}

void sub_191454940(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::dynamic_pointer_cast[abi:ne180100]<Espresso::MPSBuffersEngine::blob_container,Espresso::abstract_blob_container>(_QWORD *result, void *lpsrc, uint64_t a3)
{
  _QWORD *v3;
  unint64_t *v5;
  unint64_t v6;

  v3 = result;
  if (lpsrc
  {
    *v3 = result;
    v3[1] = a3;
    if (a3)
    {
      v5 = (unint64_t *)(a3 + 8);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
  }
  else
  {
    *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

unint64_t Espresso::layer_nd_shape::matrix_rows(Espresso::layer_nd_shape *this)
{
  unint64_t result;

  result = *((int *)this + 5);
  if (result > 3)
  {
    if (result == 5)
      return *((int *)this + 1) * (uint64_t)*(int *)this;
    if (result != 4)
      return 0;
    return *(int *)this;
  }
  if (result < 2)
    return result;
  if (result == 2)
    return *(int *)this;
  return *((int *)this + 1) * (uint64_t)*(int *)this;
}

void Espresso::MPSBuffersEngine::elementwise_kernel::~elementwise_kernel(Espresso::MPSBuffersEngine::elementwise_kernel *this)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)*((_QWORD *)this + 53);
  if (v2)
  {
    *((_QWORD *)this + 54) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 50);
  if (v3)
  {
    *((_QWORD *)this + 51) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 47);
  if (v4)
  {
    *((_QWORD *)this + 48) = v4;
    operator delete(v4);
  }

  Espresso::base_kernel::~base_kernel(this);
}

{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)*((_QWORD *)this + 53);
  if (v2)
  {
    *((_QWORD *)this + 54) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 50);
  if (v3)
  {
    *((_QWORD *)this + 51) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 47);
  if (v4)
  {
    *((_QWORD *)this + 48) = v4;
    operator delete(v4);
  }

  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::MPSBuffersEngine::elementwise_kernel::__launch(uint64_t a1, uint64_t *a2, Espresso::layer_data *a3, uint64_t a4)
{
  uint64_t v7;
  int v8;
  const void **v9;
  const void **v10;
  const void *v11;
  id *v12;
  id *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  id *v17;
  id *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  const void **v22;
  unint64_t v23;
  unsigned int *v24;
  unsigned int *v25;
  char *v26;
  unint64_t *v27;
  unint64_t v28;
  const void *v29;
  unsigned int *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v40;
  unsigned int v42;
  unsigned int v43;
  BOOL v44;
  BOOL v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  const void **v61;
  const void *v62;
  void *v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  const void **v70;
  const void *v71;
  void *v72;
  uint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  unint64_t *v77;
  unint64_t v78;
  const void **v79;
  const void *v80;
  void *v81;
  uint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  const void **v88;
  const void *v89;
  void *v90;
  uint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  unint64_t *v95;
  unint64_t v96;
  _BOOL4 v97;
  _BOOL4 v98;
  _BOOL4 v99;
  BOOL v100;
  const void **v101;
  const void *v102;
  id *v103;
  id *v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  uint64_t v108;
  id v109;
  id v110;
  id v111;
  id *v112;
  id v113;
  id v114;
  id v115;
  uint64_t v116;
  Espresso *v117;
  const char *v118;
  NSObject *v119;
  NSObject *v120;
  id v121;
  NSObject *v122;
  unsigned int v123;
  const char *v124;
  id v125;
  void *v126;
  unint64_t *v127;
  unint64_t v128;
  int v129;
  id v130;
  _DWORD *v131;
  int v132;
  unsigned int v133;
  int v134;
  int v135;
  int v136;
  int v137;
  int v138;
  int v139;
  unsigned int v140;
  uint64_t v141;
  unsigned int v142;
  unint64_t v143;
  int v144;
  int v145;
  int v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  int v150;
  int v151;
  int v152;
  int v153;
  int v154;
  const void **v155;
  id *v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  id v160;
  unint64_t v161;
  int v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  id *v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  id v170;
  unint64_t v171;
  unint64_t *v172;
  unint64_t v173;
  unint64_t *v174;
  unint64_t v175;
  const char *v176;
  int v177;
  int v178;
  id *v179;
  unsigned int v180;
  const void **v181;
  std::__shared_weak_count *v182;
  id v183;
  id v184;
  std::__shared_weak_count *v185;
  std::__shared_weak_count *v186;
  _OWORD v187[2];
  uint64_t v188;
  void *__p;
  void *v190;
  uint64_t v191;
  _OWORD v192[2];
  uint64_t v193;
  void *v194;
  void *v195;
  uint64_t v196;
  void *v197;
  std::__shared_weak_count *v198;
  void *v199;
  void *v200;
  uint8_t buf[8];
  std::__shared_weak_count *v202;
  void *v203;
  void *v204;
  __int128 v205;
  __int128 v206;
  uint64_t v207;
  void *v208;
  _BYTE *v209;

  v7 = *a2;
  v8 = *(_DWORD *)(a4 + 8);
  v9 = *(const void ***)a4;
  v181 = *(const void ***)a4;
  v10 = *(const void ***)a3;
  v11 = **(const void ***)a3;
  if (v11
  {
    v13 = v12;
    v14 = (std::__shared_weak_count *)v10[1];
    v186 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldxr(p_shared_owners);
      while (__stxr(v16 + 1, p_shared_owners));
      v9 = *(const void ***)a4;
    }
  }
  else
  {
    v13 = 0;
    v186 = 0;
  }
  if (!*v9
  {
    v176 = "Inconsistent state: src_a_blob is nil in elementwise op";
    goto LABEL_256;
  }
  v18 = v17;
  v19 = (std::__shared_weak_count *)v9[1];
  v185 = v19;
  if (v19)
  {
    v20 = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  if (!v13)
  {
    v176 = "Inconsistent state: dst_blob is nil in elementwise op";
LABEL_256:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v176);
  }
  if (!*(_QWORD *)(a1 + 344) && !*(_QWORD *)(a1 + 360))
  {
    Espresso::MPSBuffersEngine::elementwise_kernel::on_resized((Espresso::MPSBuffersEngine::elementwise_kernel *)a1, a3, (const void ***)a4);
    if (!*(_QWORD *)(a1 + 344) && !*(_QWORD *)(a1 + 360))
      Espresso::throw_exception_selector<Espresso::generic_error>("Failed to create kernel in elementwise.");
  }
  if (!*(_BYTE *)(a1 + 368))
  {
    if ((*(_DWORD *)(a1 + 284) || fabsf(*(float *)(a1 + 288) + -1.0) > 0.00001 || fabsf(*(float *)(a1 + 292)) > 0.00001)
      && *(_BYTE *)(a1 + 332))
    {
      Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Broadcasted elementwise ops do not support fused relu or alpha * x + beta semantics.");
    }
    v22 = *(const void ***)a4;
    v23 = *(_QWORD *)(a4 + 8) - *(_QWORD *)a4;
    if (v23 == 32)
    {
      if (*v22
      {
        v25 = v24;
        v26 = (char *)v22[1];
        *(_QWORD *)&v205 = v24;
        *((_QWORD *)&v205 + 1) = v26;
        if (v26)
        {
          v27 = (unint64_t *)(v26 + 8);
          do
            v28 = __ldxr(v27);
          while (__stxr(v28 + 1, v27));
          v22 = *(const void ***)a4;
        }
      }
      else
      {
        v25 = 0;
        v205 = 0uLL;
      }
      v29 = v22[2];
      if (v29
      {
        v31 = (std::__shared_weak_count *)v22[3];
        *(_QWORD *)buf = v30;
        v202 = v31;
        if (v31)
        {
          v32 = (unint64_t *)&v31->__shared_owners_;
          do
            v33 = __ldxr(v32);
          while (__stxr(v33 + 1, v32));
        }
      }
      else
      {
        v31 = 0;
        v30 = 0;
        *(_QWORD *)buf = 0;
        v202 = 0;
      }
      v34 = v25[2];
      v35 = v25[3];
      v36 = v30[2];
      v37 = v30[3];
      if ((_DWORD)v36 != 1 && (_DWORD)v34 != 1 && (_DWORD)v34 != (_DWORD)v36)
        goto LABEL_257;
      v40 = (_DWORD)v37 == 1 || (_DWORD)v35 == 1;
      if (!v40 && (_DWORD)v35 != (_DWORD)v37)
        goto LABEL_257;
      v42 = v25[4];
      v43 = v30[4];
      v44 = v43 == 1 || v42 == 1;
      v45 = v44 || v42 == v43;
      if (!v45
        || (v46 = v30[5], v46 != 1) && (v47 = v25[5], v47 != 1) && v47 != v46
        || (v48 = v30[6], v48 != 1) && (v49 = v25[6], v49 != 1) && v49 != v48)
      {
LABEL_257:
        Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error,int &,int &,int &,int &,int &,int &,int &,int &,int &,int &>("Cannot broadcast [%d, %d, %d, %d, %d] and [%d, %d, %d, %d, %d]", v34, v35, v25[4], v25[5], v25[6], v36, v37, *((_QWORD *)v30 + 2), HIDWORD(*((_QWORD *)v30 + 2)), v30[6]);
      }
      if (v31)
      {
        v50 = (unint64_t *)&v31->__shared_owners_;
        do
          v51 = __ldaxr(v50);
        while (__stlxr(v51 - 1, v50));
        if (!v51)
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
      }
      if (*((_QWORD *)&v205 + 1))
      {
        v52 = (unint64_t *)(*((_QWORD *)&v205 + 1) + 8);
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v205 + 1) + 16))(*((_QWORD *)&v205 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v205 + 1));
        }
      }
      v22 = *(const void ***)a4;
      v23 = *(_QWORD *)(a4 + 8) - *(_QWORD *)a4;
    }
    if (v23 >= 0x21)
    {
      if (*v22
      {
        v55 = (uint64_t)v54;
        v56 = (std::__shared_weak_count *)v22[1];
        *(_QWORD *)buf = v54;
        v202 = v56;
        if (v56)
        {
          v57 = (unint64_t *)&v56->__shared_owners_;
          do
            v58 = __ldxr(v57);
          while (__stxr(v58 + 1, v57));
        }
      }
      else
      {
        v56 = 0;
        v55 = 0;
        *(_QWORD *)buf = 0;
        v202 = 0;
      }
      Espresso::abstract_blob_container::shape((char *)&v205, v55);
      if (v56)
      {
        v59 = (unint64_t *)&v56->__shared_owners_;
        do
          v60 = __ldaxr(v59);
        while (__stlxr(v60 - 1, v59));
        if (!v60)
        {
          ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
          std::__shared_weak_count::__release_weak(v56);
        }
      }
      v61 = *(const void ***)a4;
      v62 = *(const void **)(*(_QWORD *)a4 + 16);
      if (v62
      {
        v64 = (uint64_t)v63;
        v65 = (std::__shared_weak_count *)v61[3];
        v197 = v63;
        v198 = v65;
        if (v65)
        {
          v66 = (unint64_t *)&v65->__shared_owners_;
          do
            v67 = __ldxr(v66);
          while (__stxr(v67 + 1, v66));
        }
      }
      else
      {
        v65 = 0;
        v64 = 0;
        v197 = 0;
        v198 = 0;
      }
      Espresso::abstract_blob_container::shape((char *)buf, v64);
      if (v65)
      {
        v68 = (unint64_t *)&v65->__shared_owners_;
        do
          v69 = __ldaxr(v68);
        while (__stlxr(v69 - 1, v68));
        if (!v69)
        {
          ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
          std::__shared_weak_count::__release_weak(v65);
        }
      }
      v70 = *(const void ***)a4;
      v71 = *(const void **)(*(_QWORD *)a4 + 32);
      if (v71
      {
        v73 = (uint64_t)v72;
        v74 = (std::__shared_weak_count *)v70[5];
        *(_QWORD *)&v192[0] = v72;
        *((_QWORD *)&v192[0] + 1) = v74;
        if (v74)
        {
          v75 = (unint64_t *)&v74->__shared_owners_;
          do
            v76 = __ldxr(v75);
          while (__stxr(v76 + 1, v75));
        }
      }
      else
      {
        v74 = 0;
        v73 = 0;
        v192[0] = 0uLL;
      }
      Espresso::abstract_blob_container::shape((char *)&v197, v73);
      if (v74)
      {
        v77 = (unint64_t *)&v74->__shared_owners_;
        do
          v78 = __ldaxr(v77);
        while (__stlxr(v78 - 1, v77));
        if (!v78)
        {
          ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
          std::__shared_weak_count::__release_weak(v74);
        }
      }
      v79 = *(const void ***)a4;
      if (*(_QWORD *)(a4 + 8) - *(_QWORD *)a4 < 0x31uLL)
      {
        v192[0] = v205;
        v192[1] = v206;
        v193 = v207;
        v194 = 0;
        v195 = 0;
        v196 = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v194, v208, (uint64_t)v209, (v209 - (_BYTE *)v208) >> 2);
      }
      else
      {
        v80 = v79[6];
        if (v80
        {
          v82 = (uint64_t)v81;
          v83 = (std::__shared_weak_count *)v79[7];
          *(_QWORD *)&v187[0] = v81;
          *((_QWORD *)&v187[0] + 1) = v83;
          if (v83)
          {
            v84 = (unint64_t *)&v83->__shared_owners_;
            do
              v85 = __ldxr(v84);
            while (__stxr(v85 + 1, v84));
          }
        }
        else
        {
          v83 = 0;
          v82 = 0;
          v187[0] = 0uLL;
        }
        Espresso::abstract_blob_container::shape((char *)v192, v82);
        if (v83)
        {
          v86 = (unint64_t *)&v83->__shared_owners_;
          do
            v87 = __ldaxr(v86);
          while (__stlxr(v87 - 1, v86));
          if (!v87)
          {
            ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
            std::__shared_weak_count::__release_weak(v83);
          }
        }
      }
      v88 = *(const void ***)a4;
      if (*(_QWORD *)(a4 + 8) - *(_QWORD *)a4 < 0x41uLL)
      {
        v187[0] = v205;
        v187[1] = v206;
        v188 = v207;
        __p = 0;
        v190 = 0;
        v191 = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v208, (uint64_t)v209, (v209 - (_BYTE *)v208) >> 2);
      }
      else
      {
        v89 = v88[8];
        if (v89
        {
          v91 = (uint64_t)v90;
          v92 = (std::__shared_weak_count *)v88[9];
          if (v92)
          {
            v93 = (unint64_t *)&v92->__shared_owners_;
            do
              v94 = __ldxr(v93);
            while (__stxr(v94 + 1, v93));
          }
        }
        else
        {
          v92 = 0;
          v91 = 0;
        }
        Espresso::abstract_blob_container::shape((char *)v187, v91);
        if (v92)
        {
          v95 = (unint64_t *)&v92->__shared_owners_;
          do
            v96 = __ldaxr(v95);
          while (__stlxr(v96 - 1, v95));
          if (!v96)
          {
            ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
            std::__shared_weak_count::__release_weak(v92);
          }
        }
      }
      v97 = Espresso::layer_shape::operator==((uint64_t)&v205, (uint64_t)buf);
      v98 = Espresso::layer_shape::operator==((uint64_t)&v205, (uint64_t)&v197);
      v99 = Espresso::layer_shape::operator==((uint64_t)&v205, (uint64_t)v192);
      v100 = Espresso::layer_shape::operator==((uint64_t)&v205, (uint64_t)v187);
      if (!v97 || !v98 || !v99 || !v100)
        Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error>("Elementwise operations with 3 or more blobs require exact shape match.");
      if (__p)
      {
        v190 = __p;
        operator delete(__p);
      }
      if (v194)
      {
        v195 = v194;
        operator delete(v194);
      }
      if (v199)
      {
        v200 = v199;
        operator delete(v199);
      }
      if (v203)
      {
        v204 = v203;
        operator delete(v203);
      }
      if (v208)
      {
        v209 = v208;
        operator delete(v208);
      }
    }
    *(_BYTE *)(a1 + 368) = 1;
  }
  v183 = v18[21];
  v184 = v13[21];
  if (*(_BYTE *)(a1 + 332))
  {
    v101 = *(const void ***)a4;
    if (*(_QWORD *)(a4 + 8) - *(_QWORD *)a4 != 32)
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("Expected two source blobs.");
    v102 = v101[2];
    if (v102
    {
      v104 = v103;
      v105 = (std::__shared_weak_count *)v101[3];
      *(_QWORD *)&v205 = v103;
      *((_QWORD *)&v205 + 1) = v105;
      if (v105)
      {
        v106 = (unint64_t *)&v105->__shared_owners_;
        do
          v107 = __ldxr(v106);
        while (__stxr(v107 + 1, v106));
        v182 = v105;
        v108 = v7;
      }
      else
      {
        v108 = v7;
        v182 = 0;
      }
    }
    else
    {
      v108 = v7;
      v182 = 0;
      v104 = 0;
      v205 = 0uLL;
    }
    v109 = v18[27];
    v110 = v104[27];
    v111 = v13[27];
    v112 = v18;
    v113 = v111;
    v179 = v112;
    objc_msgSend(v112[25], "ndArrayWithCommandBuffer:descriptor:aliasing:", *(_QWORD *)(v108 + 144), v112[28], 1);
    v114 = (id)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v104[25], "ndArrayWithCommandBuffer:descriptor:aliasing:", *(_QWORD *)(v108 + 144), v104[28], 1);
    v115 = (id)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v13[25], "ndArrayWithCommandBuffer:descriptor:aliasing:", *(_QWORD *)(v108 + 144), v13[28], 1);
    v116 = objc_claimAutoreleasedReturnValue();

    if (!v114)
    {
      Espresso::espresso_os_log_subsystem(v117, v118);
      v119 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v119, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_debug_impl(&dword_190DAF000, v119, OS_LOG_TYPE_DEBUG, "Failed to alias src_a in elementwise.", buf, 2u);
      }

      v114 = v179[27];
      v117 = (Espresso *)objc_msgSend(v114, "importDataWithCommandBuffer:fromBuffer:sourceDataType:offset:rowStrides:", *(_QWORD *)(v108 + 144), v179[21], *((unsigned int *)v179 + 48), 0, *(_QWORD *)(a1 + 376));
    }
    if (!v115)
    {
      Espresso::espresso_os_log_subsystem(v117, v118);
      v120 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v120, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_debug_impl(&dword_190DAF000, v120, OS_LOG_TYPE_DEBUG, "Failed to alias src_b in elementwise.", buf, 2u);
      }

      v115 = v104[27];
      v117 = (Espresso *)objc_msgSend(v115, "importDataWithCommandBuffer:fromBuffer:sourceDataType:offset:rowStrides:", *(_QWORD *)(v108 + 144), v104[21], *((unsigned int *)v104 + 48), 0, *(_QWORD *)(a1 + 400));
    }
    v121 = (id)v116;
    if (!v116)
    {
      Espresso::espresso_os_log_subsystem(v117, v118);
      v122 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v122, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_debug_impl(&dword_190DAF000, v122, OS_LOG_TYPE_DEBUG, "Failed to alias dst in elementwise.", buf, 2u);
      }

      v121 = v13[27];
      objc_msgSend(v121, "importDataWithCommandBuffer:fromBuffer:sourceDataType:offset:rowStrides:", *(_QWORD *)(v108 + 144), v13[21], *((unsigned int *)v13 + 48), 0, *(_QWORD *)(a1 + 424));
    }
    v123 = *(_DWORD *)(a1 + 280);
    if (v123 - 100 <= 0xD && ((1 << (v123 - 100)) & 0x2CFD) != 0
      || (v124 = "Elementwise op not compatible with MPSNDArray.", v123 <= 0x24)
      && ((1 << v123) & 0x1200C02003) != 0)
    {
      v125 = *(id *)(a1 + 360);
      if (v125)
      {
        v126 = v125;
        objc_msgSend(v125, "encodeToCommandBuffer:primarySourceArray:secondarySourceArray:destinationArray:", *(_QWORD *)(v108 + 144), v114, v115, v121);
        if (!v116)
          objc_msgSend(v121, "exportDataWithCommandBuffer:toBuffer:destinationDataType:offset:rowStrides:", *(_QWORD *)(v108 + 144), v13[21], *((unsigned int *)v13 + 48), 0, *(_QWORD *)(a1 + 424));

        if (v182)
        {
          v127 = (unint64_t *)&v182->__shared_owners_;
          do
            v128 = __ldaxr(v127);
          while (__stlxr(v128 - 1, v127));
          if (!v128)
          {
            ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
            std::__shared_weak_count::__release_weak(v182);
          }
        }
        goto LABEL_243;
      }
      v124 = "could not cast to ndarray elementwise op.";
    }
    Espresso::throw_exception_selector<Espresso::generic_error>(v124);
  }
  v129 = v8;
  Espresso::temporary_mtl_encoder::temporary_mtl_encoder((uint64_t)buf, v7);
  v130 = *(id *)buf;
  v131 = **(_DWORD ***)a3;
  v133 = v131[2];
  v132 = v131[3];
  v134 = v131[4];
  if ((int)v131[5] <= 1)
    v135 = 1;
  else
    v135 = v131[5];
  v136 = v131[6];
  if (v136 <= 1)
    v137 = 1;
  else
    v137 = v136;
  v138 = (*((uint64_t (**)(id *))*v13 + 4))(v13);
  v139 = v137 * v135;
  v140 = *((_DWORD *)v13 + 3);
  v141 = *((int *)v13 + 2);
  v142 = *((_DWORD *)v13 + 4);
  DWORD1(v205) = *((_DWORD *)v13 + 2);
  DWORD2(v205) = v142 * v140;
  *((_QWORD *)&v206 + 1) = __PAIR64__(v142, v140);
  v143 = v13[31];
  HIDWORD(v207) = v13[31];
  v145 = *((_DWORD *)v13 + 5);
  v144 = *((_DWORD *)v13 + 6);
  if (v145 <= 1)
    v145 = 1;
  if (v144 <= 1)
    v146 = 1;
  else
    v146 = *((_DWORD *)v13 + 6);
  LODWORD(v207) = v146 * v145;
  if ((v138 - 1) >= 0xD)
  {
    v148 = v143 + v143 * ((4 * v141 - 1) / v143);
    v147 = 4;
  }
  else
  {
    v147 = qword_191AC0CA0[v138 - 1];
    v148 = v143 + v143 * ((v147 * v141 - 1) / v143);
  }
  v149 = v148 / v147;
  v150 = v141 - 1;
  if ((int)v141 < 1)
    v150 = v141 + 2;
  LODWORD(v208) = (v150 >> 2) + 1;
  HIDWORD(v208) = v149 >> 2;
  v151 = *((_DWORD *)v13 + 5);
  if (v151 <= 1)
    v152 = 1;
  else
    v152 = *((_DWORD *)v13 + 5);
  LODWORD(v205) = v149;
  HIDWORD(v205) = v140 * v141;
  LODWORD(v206) = v142 * v140 * v141;
  DWORD1(v206) = v206 * v151;
  v209 = (_BYTE *)__PAIR64__(v144, v152);
  v153 = v134 - 1;
  if (v134 < 1)
    v153 = v134 + 2;
  v154 = (v153 >> 2) + 1;
  if (v154 != *(_DWORD *)(a1 + 308)
    || *(_DWORD *)(a1 + 312) != v139
    || *(_DWORD *)(a1 + 320) != v132
    || *(_DWORD *)(a1 + 316) != v133)
  {
    *(_DWORD *)(a1 + 316) = v133;
    *(_DWORD *)(a1 + 320) = v132;
    *(_DWORD *)(a1 + 308) = v154;
    *(_DWORD *)(a1 + 312) = v139;
  }
  v180 = v137 * v135;
  if (!*(_QWORD *)(a1 + 344))
    Espresso::throw_exception_selector<Espresso::generic_error>("MPS_BUFFERS_ENGINE elementwise_kernel: Kernel not found");
  objc_msgSend(v130, "setComputePipelineState:");
  objc_msgSend(v130, "setBuffer:offset:atIndex:", v184, 0, 0);
  objc_msgSend(v130, "setBytes:length:atIndex:", a1 + 280, 52, 1);
  objc_msgSend(v130, "setBytes:length:atIndex:", &v205, 56, 2);
  v177 = v134;
  v178 = v132;
  if (*(_BYTE *)(a1 + 352))
  {
    v155 = *(const void ***)a4;
    v157 = (std::__shared_weak_count *)v155[3];
    if (v157)
    {
      v158 = (unint64_t *)&v157->__shared_owners_;
      do
        v159 = __ldxr(v158);
      while (__stxr(v159 + 1, v158));
      v160 = v156[21];
      do
        v161 = __ldaxr(v158);
      while (__stlxr(v161 - 1, v158));
      if (!v161)
      {
        ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
        std::__shared_weak_count::__release_weak(v157);
      }
    }
    else
    {
      v160 = v156[21];
    }
    objc_msgSend(v130, "setBuffer:offset:atIndex:", v183, 0, 4);
    objc_msgSend(v130, "setBuffer:offset:atIndex:", v160, 0, 3);

  }
  else
  {
    objc_msgSend(v130, "setBuffer:offset:atIndex:", v183, 0, 3);
    v162 = (v129 - (_DWORD)v181) << 12;
    if (v162 >= 0x20000)
    {
      v163 = HIWORD(v162);
      v164 = 1;
      do
      {
        v165 = *(_QWORD *)a4 + 16 * v164;
        v167 = *(std::__shared_weak_count **)(v165 + 8);
        if (v167)
        {
          v168 = (unint64_t *)&v167->__shared_owners_;
          do
            v169 = __ldxr(v168);
          while (__stxr(v169 + 1, v168));
          v170 = v166[21];
          do
            v171 = __ldaxr(v168);
          while (__stlxr(v171 - 1, v168));
          if (!v171)
          {
            ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
            std::__shared_weak_count::__release_weak(v167);
          }
        }
        else
        {
          v170 = v166[21];
        }
        objc_msgSend(v130, "setBuffer:offset:atIndex:", v170, 0, v164 + 3);

        ++v164;
      }
      while (v164 != v163);
    }
  }

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder((id *)buf);
LABEL_243:

  if (v185)
  {
    v172 = (unint64_t *)&v185->__shared_owners_;
    do
      v173 = __ldaxr(v172);
    while (__stlxr(v173 - 1, v172));
    if (!v173)
    {
      ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
      std::__shared_weak_count::__release_weak(v185);
    }
  }
  if (v186)
  {
    v174 = (unint64_t *)&v186->__shared_owners_;
    do
      v175 = __ldaxr(v174);
    while (__stlxr(v175 - 1, v174));
    if (!v175)
    {
      ((void (*)(std::__shared_weak_count *))v186->__on_zero_shared)(v186);
      std::__shared_weak_count::__release_weak(v186);
    }
  }
}

void sub_191455B6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45)
{
  uint64_t v45;
  void *v47;
  void *v48;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  if (__p)
  {
    a37 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a44)
  {
    a45 = (uint64_t)a44;
    operator delete(a44);
  }
  v47 = *(void **)(v45 - 184);
  if (v47)
  {
    *(_QWORD *)(v45 - 176) = v47;
    operator delete(v47);
  }
  v48 = *(void **)(v45 - 112);
  if (v48)
  {
    *(_QWORD *)(v45 - 104) = v48;
    operator delete(v48);
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void Espresso::MPSBuffersEngine::elementwise_kernel::blob_options(Espresso::MPSBuffersEngine::elementwise_kernel *this@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  const void *v4;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 v17;
  _QWORD *v18;
  std::__shared_weak_count *v19;

  *a3 = 0;
  a3[1] = 0;
  v4 = (const void *)*((_QWORD *)this + 1);
  if (v4)
  {
    if (v7)
    {
      v8 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
      v18 = v7;
      v19 = v8;
      if (v8)
      {
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldxr(p_shared_owners);
        while (__stxr(v10 + 1, p_shared_owners));
      }
      if (a2)
      {
        v11 = operator new(0x70uLL);
        v11[1] = 0;
        v11[2] = 0;
        *v11 = &off_1E2DBE228;
        *((_OWORD *)v11 + 4) = 0u;
        *((_OWORD *)v11 + 5) = 0u;
        *((_OWORD *)v11 + 2) = 0u;
        *((_OWORD *)v11 + 3) = 0u;
        v11[3] = &off_1E2D9B4D8;
        *((_DWORD *)v11 + 12) = 1065353216;
        v11[7] = 0x1FFFFFFFFLL;
        v11[12] = 0;
        v11[13] = 0;
        v11[8] = 0;
        v11[9] = 0;
        *((_BYTE *)v11 + 88) = 0;
        v11[10] = 0;
        *(_QWORD *)&v17 = v11 + 3;
        *((_QWORD *)&v17 + 1) = v11;
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)a3, &v17);
        v12 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
        if (*((_QWORD *)&v17 + 1))
        {
          v13 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 - 1, v13));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(*a3 + 72), v18[28], v18[29]);
        v8 = v19;
      }
      if (v8)
      {
        v15 = (unint64_t *)&v8->__shared_owners_;
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
  }
}

void sub_191455E54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v3);
  _Unwind_Resume(a1);
}

void Espresso::MPSBuffersEngine::elementwise_kernel::on_resized(Espresso::MPSBuffersEngine::elementwise_kernel *this, Espresso::layer_data *a2, const void ***a3)
{
  uint64_t v3;
  const void **v5;
  _QWORD *v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  void *v16;
  void *v17;
  unint64_t v18;
  void *v19;
  const void *v20;
  _QWORD *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  void **v25;
  void *v26;
  uint64_t v27;
  char *v28;
  const void *v29;
  _DWORD *v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  int v35;
  int v36;
  const void *v37;
  _DWORD *v38;
  _DWORD *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  _DWORD *v46;
  unsigned int v47;
  unsigned int v48;
  void *v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  const void **v64;
  const void *v65;
  _QWORD *v66;
  _QWORD *v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  _QWORD *v71;
  void *v72;
  void *v73;
  void *v74;
  _QWORD *v75;
  int v76;
  int v77;
  Class *v78;
  MTLFunctionConstantValues *v79;
  int v80;
  std::string *v81;
  __int128 v82;
  int v83;
  void **v84;
  const char *v85;
  uint64_t v86;
  void *v87;
  int v88;
  void *v89;
  id v90;
  uint64_t v91;
  void *v92;
  unint64_t *v93;
  unint64_t v94;
  int v95;
  void *v96;
  int v97;
  void *v98;
  int v99;
  void *v100;
  int v101;
  void *v102;
  int v103;
  void *v104;
  int v105;
  void *v106;
  int v107;
  void *v108;
  int v109;
  void *v110;
  int v111;
  void *v112;
  int v113;
  void *v114;
  int v115;
  void *v116;
  int v117;
  void *v118;
  int v119;
  void *v120;
  int v121;
  void *v122;
  int v123;
  void *v124;
  int v125;
  void *v126;
  int v127;
  void *v128;
  int v129;
  void *v130;
  int v131;
  void *v132;
  int v133;
  void *v134;
  int v135;
  void *v136;
  int v137;
  void *v138;
  int v139;
  void *v140;
  int v141;
  void *v142;
  int v143;
  void *v144;
  int v145;
  void *v146;
  int v147;
  void *v148;
  int v149;
  void *v150;
  int v151;
  void *v152;
  int v153;
  void *v154;
  uint64_t v155;
  void *v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  unint64_t *v160;
  unint64_t v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  std::runtime_error *exception;
  std::string v166;
  void *__p;
  void *v168;
  void *v169[2];
  int64_t v170;
  void *v171;
  void *v172;
  _DWORD *v173;
  std::__shared_weak_count *v174;
  _DWORD *v175;
  std::__shared_weak_count *v176;
  _QWORD *v177;
  std::__shared_weak_count *v178;
  __int16 v179;
  _QWORD *v180;
  std::__shared_weak_count *v181;
  _QWORD *v182;
  std::__shared_weak_count *v183;

  v3 = *(_QWORD *)a2;
  if (*((_QWORD *)a2 + 1) == *(_QWORD *)a2)
    return;
  v5 = *a3;
  if (a3[1] == *a3)
    return;
  if (*(_QWORD *)v3
  {
    v8 = v7;
    v9 = *(std::__shared_weak_count **)(v3 + 8);
    v182 = v7;
    v183 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      v5 = *a3;
    }
  }
  else
  {
    v8 = 0;
    v182 = 0;
    v183 = 0;
  }
  if (*v5)
  {
    if (v12)
    {
      v13 = (std::__shared_weak_count *)v5[1];
      v180 = v12;
      v181 = v13;
      if (v13)
      {
        v14 = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
      if (!v8)
        goto LABEL_286;
      *((_BYTE *)this + 368) = 0;
      *((_BYTE *)this + 332) = 0;
      v16 = (void *)*((_QWORD *)this + 43);
      *((_QWORD *)this + 43) = 0;

      v17 = (void *)*((_QWORD *)this + 45);
      *((_QWORD *)this + 45) = 0;

      v18 = (unint64_t)((char *)a3[1] - (char *)*a3) >> 4;
      v179 = v18;
      v19 = (void *)*((_QWORD *)this + 43);
      *((_QWORD *)this + 43) = 0;

      *((_BYTE *)this + 352) = 0;
      v20 = (const void *)*((_QWORD *)this + 1);
      if (!v20
      {
        v177 = 0;
        v178 = 0;
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
        exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
      }
      v22 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
      v177 = v21;
      v178 = v22;
      if (v22)
      {
        v23 = (unint64_t *)&v22->__shared_owners_;
        do
          v24 = __ldxr(v23);
        while (__stxr(v24 + 1, v23));
      }
      v25 = (void **)((char *)this + 344);
      if ((unsigned __int16)v18 == 1)
      {
        v35 = *((_DWORD *)this + 70);
        if (v35 == 1)
        {
          v36 = 3;
        }
        else
        {
          if (v35)
            goto LABEL_129;
          v36 = 2;
        }
        *((_DWORD *)this + 70) = v36;
LABEL_129:
        if (!*((_BYTE *)this + 332))
        {
          v79 = (MTLFunctionConstantValues *)objc_opt_new();
          -[MTLFunctionConstantValues setConstantValue:type:atIndex:](v79, "setConstantValue:type:atIndex:", &v179, 37, 0);
          v80 = *((_DWORD *)this + 70);
          switch(v80)
          {
            case 0:
              std::to_string(&v166, v179);
              v81 = std::string::insert(&v166, 0, "ELEM_ADD-");
              v82 = *(_OWORD *)&v81->__r_.__value_.__l.__data_;
              v170 = v81->__r_.__value_.__r.__words[2];
              *(_OWORD *)v169 = v82;
              v81->__r_.__value_.__l.__size_ = 0;
              v81->__r_.__value_.__r.__words[2] = 0;
              v81->__r_.__value_.__r.__words[0] = 0;
              if (SHIBYTE(v166.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v166.__r_.__value_.__l.__data_);
              v83 = (*(uint64_t (**)(_QWORD *))(*v180 + 32))(v180);
              if (v170 >= 0)
                v84 = v169;
              else
                v84 = (void **)v169[0];
              if (v83)
                v85 = "elementwise_add_f16_buffers";
              else
                v85 = "elementwise_add_f32_buffers";
              Espresso::context_metal::kernel_for_function((Espresso::context_metal *)v177[20], v85, (const char *)v84, v79);
              v86 = objc_claimAutoreleasedReturnValue();
              v87 = *v25;
              *v25 = (void *)v86;

              if (SHIBYTE(v170) < 0)
                operator delete(v169[0]);
              goto LABEL_279;
            case 1:
              v125 = (*(uint64_t (**)(_QWORD *))(*v180 + 32))(v180);
              v126 = (void *)v177[20];
              if (v125)
                objc_msgSend(v126, "kernelForFunction:cacheString:withConstants:", "elementwise_mul_f16_buffers", 0, 0);
              else
                objc_msgSend(v126, "kernelForFunction:cacheString:withConstants:", "elementwise_mul_f32_buffers", 0, 0);
              goto LABEL_247;
            case 2:
              v115 = (*(uint64_t (**)(_QWORD *))(*v180 + 32))(v180);
              v116 = (void *)v177[20];
              if (v115)
                objc_msgSend(v116, "kernelForFunction:cacheString:withConstants:", "elementwise_addc_f16_buffers", 0, 0);
              else
                objc_msgSend(v116, "kernelForFunction:cacheString:withConstants:", "elementwise_addc_f32_buffers", 0, 0);
              goto LABEL_247;
            case 3:
              v127 = (*(uint64_t (**)(_QWORD *))(*v180 + 32))(v180);
              v128 = (void *)v177[20];
              if (v127)
                objc_msgSend(v128, "kernelForFunction:cacheString:withConstants:", "elementwise_mulc_f16_buffers", 0, 0);
              else
                objc_msgSend(v128, "kernelForFunction:cacheString:withConstants:", "elementwise_mulc_f32_buffers", 0, 0);
              goto LABEL_247;
            case 4:
              v129 = (*(uint64_t (**)(_QWORD *))(*v180 + 32))(v180);
              v130 = (void *)v177[20];
              if (v129)
                objc_msgSend(v130, "kernelForFunction:cacheString:withConstants:", "elementwise_add_xy_f16_buffers", 0, 0);
              else
                objc_msgSend(v130, "kernelForFunction:cacheString:withConstants:", "elementwise_add_xy_f32_buffers", 0, 0);
              goto LABEL_247;
            case 5:
              v133 = (*(uint64_t (**)(_QWORD *))(*v180 + 32))(v180);
              v134 = (void *)v177[20];
              if (v133)
                objc_msgSend(v134, "kernelForFunction:cacheString:withConstants:", "elementwise_add_k_f16_buffers", 0, 0);
              else
                objc_msgSend(v134, "kernelForFunction:cacheString:withConstants:", "elementwise_add_k_f32_buffers", 0, 0);
              goto LABEL_247;
            case 6:
              v141 = (*(uint64_t (**)(_QWORD *))(*v180 + 32))(v180);
              v142 = (void *)v177[20];
              if (v141)
                objc_msgSend(v142, "kernelForFunction:cacheString:withConstants:", "elementwise_add_xyk_f16_buffers", 0, 0);
              else
                objc_msgSend(v142, "kernelForFunction:cacheString:withConstants:", "elementwise_add_xyk_f32_buffers", 0, 0);
              goto LABEL_247;
            case 7:
              v111 = (*(uint64_t (**)(_QWORD *))(*v180 + 32))(v180);
              v112 = (void *)v177[20];
              if (v111)
                objc_msgSend(v112, "kernelForFunction:cacheString:withConstants:", "elementwise_mul_xy_f16_buffers", 0, 0);
              else
                objc_msgSend(v112, "kernelForFunction:cacheString:withConstants:", "elementwise_mul_xy_f32_buffers", 0, 0);
              goto LABEL_247;
            case 8:
              v119 = (*(uint64_t (**)(_QWORD *))(*v180 + 32))(v180);
              v120 = (void *)v177[20];
              if (v119)
                objc_msgSend(v120, "kernelForFunction:cacheString:withConstants:", "elementwise_mul_k_f16_buffers", 0, 0);
              else
                objc_msgSend(v120, "kernelForFunction:cacheString:withConstants:", "elementwise_mul_k_f32_buffers", 0, 0);
              goto LABEL_247;
            case 9:
              v107 = (*(uint64_t (**)(_QWORD *))(*v180 + 32))(v180);
              v108 = (void *)v177[20];
              if (v107)
                objc_msgSend(v108, "kernelForFunction:cacheString:withConstants:", "elementwise_mul_xyk_f16_buffers", 0, 0);
              else
                objc_msgSend(v108, "kernelForFunction:cacheString:withConstants:", "elementwise_mul_xyk_f32_buffers", 0, 0);
              goto LABEL_247;
            case 10:
              v139 = (*(uint64_t (**)(_QWORD *))(*v180 + 32))(v180);
              v140 = (void *)v177[20];
              if (v139)
                objc_msgSend(v140, "kernelForFunction:cacheString:withConstants:", "elementwise_inverse_f16_buffers", 0, 0);
              else
                objc_msgSend(v140, "kernelForFunction:cacheString:withConstants:", "elementwise_inverse_f32_buffers", 0, 0);
              goto LABEL_247;
            case 11:
              v137 = (*(uint64_t (**)(_QWORD *))(*v180 + 32))(v180);
              v138 = (void *)v177[20];
              if (v137)
                objc_msgSend(v138, "kernelForFunction:cacheString:withConstants:", "elementwise_sqrt_f16_buffers", 0, 0);
              else
                objc_msgSend(v138, "kernelForFunction:cacheString:withConstants:", "elementwise_sqrt_f32_buffers", 0, 0);
              goto LABEL_247;
            case 12:
              v117 = (*(uint64_t (**)(_QWORD *))(*v180 + 32))(v180);
              v118 = (void *)v177[20];
              if (v117)
                objc_msgSend(v118, "kernelForFunction:cacheString:withConstants:", "elementwise_rsqrt_f16_buffers", 0, 0);
              else
                objc_msgSend(v118, "kernelForFunction:cacheString:withConstants:", "elementwise_rsqrt_f32_buffers", 0, 0);
              goto LABEL_247;
            case 13:
              v121 = (*(uint64_t (**)(_QWORD *))(*v180 + 32))(v180);
              v122 = (void *)v177[20];
              if (v121)
                objc_msgSend(v122, "kernelForFunction:cacheString:withConstants:", "elementwise_pow_f16_buffers", 0, 0);
              else
                objc_msgSend(v122, "kernelForFunction:cacheString:withConstants:", "elementwise_pow_f32_buffers", 0, 0);
              goto LABEL_247;
            case 14:
            case 15:
            case 16:
            case 17:
            case 18:
            case 19:
            case 20:
            case 21:
            case 28:
            case 33:
            case 34:
            case 35:
            case 36:
              goto LABEL_279;
            case 22:
              v145 = (*(uint64_t (**)(_QWORD *))(*v180 + 32))(v180);
              v146 = (void *)v177[20];
              if (v145)
                objc_msgSend(v146, "kernelForFunction:cacheString:withConstants:", "elementwise_min_f16_buffers", 0, 0);
              else
                objc_msgSend(v146, "kernelForFunction:cacheString:withConstants:", "elementwise_min_f32_buffers", 0, 0);
              goto LABEL_247;
            case 23:
              v101 = (*(uint64_t (**)(_QWORD *))(*v180 + 32))(v180);
              v102 = (void *)v177[20];
              if (v101)
                objc_msgSend(v102, "kernelForFunction:cacheString:withConstants:", "elementwise_max_f16_buffers", 0, 0);
              else
                objc_msgSend(v102, "kernelForFunction:cacheString:withConstants:", "elementwise_max_f32_buffers", 0, 0);
              goto LABEL_247;
            case 24:
              v131 = (*(uint64_t (**)(_QWORD *))(*v180 + 32))(v180);
              v132 = (void *)v177[20];
              if (v131)
                objc_msgSend(v132, "kernelForFunction:cacheString:withConstants:", "elementwise_abs_f16_buffers", 0, 0);
              else
                objc_msgSend(v132, "kernelForFunction:cacheString:withConstants:", "elementwise_abs_f32_buffers", 0, 0);
              goto LABEL_247;
            case 25:
              v103 = (*(uint64_t (**)(_QWORD *))(*v180 + 32))(v180);
              v104 = (void *)v177[20];
              if (v103)
                objc_msgSend(v104, "kernelForFunction:cacheString:withConstants:", "elementwise_threshold_f16_buffers", 0, 0);
              else
                objc_msgSend(v104, "kernelForFunction:cacheString:withConstants:", "elementwise_threshold_f32_buffers", 0, 0);
              goto LABEL_247;
            case 26:
              v99 = (*(uint64_t (**)(_QWORD *))(*v180 + 32))(v180);
              v100 = (void *)v177[20];
              if (v99)
                objc_msgSend(v100, "kernelForFunction:cacheString:withConstants:", "elementwise_log_f16_buffers", 0, 0);
              else
                objc_msgSend(v100, "kernelForFunction:cacheString:withConstants:", "elementwise_log_f32_buffers", 0, 0);
              goto LABEL_247;
            case 27:
              v113 = (*(uint64_t (**)(_QWORD *))(*v180 + 32))(v180);
              v114 = (void *)v177[20];
              if (v113)
                objc_msgSend(v114, "kernelForFunction:cacheString:withConstants:", "elementwise_exp_f16_buffers", 0, 0);
              else
                objc_msgSend(v114, "kernelForFunction:cacheString:withConstants:", "elementwise_exp_f32_buffers", 0, 0);
              goto LABEL_247;
            case 29:
              v105 = (*(uint64_t (**)(_QWORD *))(*v180 + 32))(v180);
              v106 = (void *)v177[20];
              if (v105)
                objc_msgSend(v106, "kernelForFunction:cacheString:withConstants:", "elementwise_add_n_f16_buffers", 0, 0);
              else
                objc_msgSend(v106, "kernelForFunction:cacheString:withConstants:", "elementwise_add_n_f32_buffers", 0, 0);
              goto LABEL_247;
            case 30:
              v143 = (*(uint64_t (**)(_QWORD *))(*v180 + 32))(v180);
              v144 = (void *)v177[20];
              if (v143)
                objc_msgSend(v144, "kernelForFunction:cacheString:withConstants:", "elementwise_mul_n_f16_buffers", 0, 0);
              else
                objc_msgSend(v144, "kernelForFunction:cacheString:withConstants:", "elementwise_mul_n_f32_buffers", 0, 0);
              goto LABEL_247;
            case 31:
              v97 = (*(uint64_t (**)(_QWORD *))(*v180 + 32))(v180);
              v98 = (void *)v177[20];
              if (v97)
                objc_msgSend(v98, "kernelForFunction:cacheString:withConstants:", "elementwise_add_scalar_f16_buffers", 0, 0);
              else
                objc_msgSend(v98, "kernelForFunction:cacheString:withConstants:", "elementwise_add_scalar_f32_buffers", 0, 0);
              goto LABEL_247;
            case 32:
              v109 = (*(uint64_t (**)(_QWORD *))(*v180 + 32))(v180);
              v110 = (void *)v177[20];
              if (v109)
                objc_msgSend(v110, "kernelForFunction:cacheString:withConstants:", "elementwise_mul_scalar_f16_buffers", 0, 0);
              else
                objc_msgSend(v110, "kernelForFunction:cacheString:withConstants:", "elementwise_mul_scalar_f32_buffers", 0, 0);
              goto LABEL_247;
            case 37:
              v123 = (*(uint64_t (**)(_QWORD *))(*v180 + 32))(v180);
              v124 = (void *)v177[20];
              if (v123)
                objc_msgSend(v124, "kernelForFunction:cacheString:withConstants:", "elementwise_round_f16_buffers", 0, 0);
              else
                objc_msgSend(v124, "kernelForFunction:cacheString:withConstants:", "elementwise_round_f32_buffers", 0, 0);
              goto LABEL_247;
            case 38:
              v135 = (*(uint64_t (**)(_QWORD *))(*v180 + 32))(v180);
              v136 = (void *)v177[20];
              if (v135)
                objc_msgSend(v136, "kernelForFunction:cacheString:withConstants:", "elementwise_sign_f16_buffers", 0, 0);
              else
                objc_msgSend(v136, "kernelForFunction:cacheString:withConstants:", "elementwise_sign_f32_buffers", 0, 0);
              goto LABEL_247;
            default:
              switch(v80)
              {
                case 'r':
                  v88 = (*(uint64_t (**)(_QWORD *))(*v180 + 32))(v180);
                  v89 = (void *)v177[20];
                  if (v88)
                    objc_msgSend(v89, "kernelForFunction:cacheString:withConstants:", "elementwise_cos_f16_buffers", 0, 0);
                  else
                    objc_msgSend(v89, "kernelForFunction:cacheString:withConstants:", "elementwise_cos_f32_buffers", 0, 0);
                  break;
                case 's':
                  v149 = (*(uint64_t (**)(_QWORD *))(*v180 + 32))(v180);
                  v150 = (void *)v177[20];
                  if (v149)
                    objc_msgSend(v150, "kernelForFunction:cacheString:withConstants:", "elementwise_sin_f16_buffers", 0, 0);
                  else
                    objc_msgSend(v150, "kernelForFunction:cacheString:withConstants:", "elementwise_sin_f32_buffers", 0, 0);
                  break;
                case 't':
                  goto LABEL_279;
                case 'u':
                  v147 = (*(uint64_t (**)(_QWORD *))(*v180 + 32))(v180);
                  v148 = (void *)v177[20];
                  if (v147)
                    objc_msgSend(v148, "kernelForFunction:cacheString:withConstants:", "elementwise_floor_f16_buffers", 0, 0);
                  else
                    objc_msgSend(v148, "kernelForFunction:cacheString:withConstants:", "elementwise_floor_f32_buffers", 0, 0);
                  break;
                case 'v':
                  v153 = (*(uint64_t (**)(_QWORD *))(*v180 + 32))(v180);
                  v154 = (void *)v177[20];
                  if (v153)
                    objc_msgSend(v154, "kernelForFunction:cacheString:withConstants:", "elementwise_ceil_f16_buffers", 0, 0);
                  else
                    objc_msgSend(v154, "kernelForFunction:cacheString:withConstants:", "elementwise_ceil_f32_buffers", 0, 0);
                  break;
                case 'w':
                  v151 = (*(uint64_t (**)(_QWORD *))(*v180 + 32))(v180);
                  v152 = (void *)v177[20];
                  if (v151)
                    objc_msgSend(v152, "kernelForFunction:cacheString:withConstants:", "elementwise_clip_f16_buffers", 0, 0);
                  else
                    objc_msgSend(v152, "kernelForFunction:cacheString:withConstants:", "elementwise_clip_f32_buffers", 0, 0);
                  break;
                default:
                  if (v80 != 103)
                    goto LABEL_279;
                  v95 = (*(uint64_t (**)(_QWORD *))(*v180 + 32))(v180);
                  v96 = (void *)v177[20];
                  if (v95)
                    objc_msgSend(v96, "kernelForFunction:cacheString:withConstants:", "elementwise_less_scalar_f16_buffers", 0, 0);
                  else
                    objc_msgSend(v96, "kernelForFunction:cacheString:withConstants:", "elementwise_less_scalar_f32_buffers", 0, 0);
                  break;
              }
LABEL_247:
              v155 = objc_claimAutoreleasedReturnValue();
              v156 = *v25;
              *v25 = (void *)v155;

LABEL_279:
              break;
          }
          goto LABEL_280;
        }
        v64 = *a3;
        v65 = v64[2];
        if (!v65
        {
          *(_OWORD *)&v166.__r_.__value_.__l.__data_ = 0uLL;
          Espresso::throw_exception_selector<Espresso::invalid_state_error>("Second blob is invalid in elementwise kernel.");
        }
        v67 = v66;
        v68 = (std::__shared_weak_count *)v64[3];
        v166.__r_.__value_.__r.__words[0] = (std::string::size_type)v66;
        v166.__r_.__value_.__l.__size_ = (std::string::size_type)v68;
        if (v68)
        {
          v69 = (unint64_t *)&v68->__shared_owners_;
          do
            v70 = __ldxr(v69);
          while (__stxr(v70 + 1, v69));
        }
        Espresso::MPSBuffersEngine::blob_container::ndarray_strides((Espresso::MPSBuffersEngine::blob_container *)v169, v180);
        v71 = (_QWORD *)((char *)this + 376);
        v72 = (void *)*((_QWORD *)this + 47);
        if (v72)
        {
          *((_QWORD *)this + 48) = v72;
          operator delete(v72);
          *v71 = 0;
          *((_QWORD *)this + 48) = 0;
          *((_QWORD *)this + 49) = 0;
        }
        *(_OWORD *)v71 = *(_OWORD *)v169;
        *((_QWORD *)this + 49) = v170;
        Espresso::MPSBuffersEngine::blob_container::ndarray_strides((Espresso::MPSBuffersEngine::blob_container *)v169, v67);
        v73 = (void *)*((_QWORD *)this + 50);
        if (v73)
        {
          *((_QWORD *)this + 51) = v73;
          operator delete(v73);
          *((_QWORD *)this + 50) = 0;
          *((_QWORD *)this + 51) = 0;
          *((_QWORD *)this + 52) = 0;
        }
        *((_OWORD *)this + 25) = *(_OWORD *)v169;
        *((_QWORD *)this + 52) = v170;
        Espresso::MPSBuffersEngine::blob_container::ndarray_strides((Espresso::MPSBuffersEngine::blob_container *)v169, v182);
        v75 = (_QWORD *)((char *)this + 424);
        v74 = (void *)*((_QWORD *)this + 53);
        if (v74)
        {
          *((_QWORD *)this + 54) = v74;
          operator delete(v74);
          *v75 = 0;
          *((_QWORD *)this + 54) = 0;
          *((_QWORD *)this + 55) = 0;
        }
        *(_OWORD *)v75 = *(_OWORD *)v169;
        *((_QWORD *)this + 55) = v170;
        v76 = *((_DWORD *)this + 70);
        if (v76 > 32)
        {
          v77 = v76 - 100;
          v78 = (Class *)0x1E0CC7058;
          switch(v77)
          {
            case 0:
              v78 = (Class *)0x1E0CC6FF0;
              break;
            case 1:
            case 8:
            case 9:
            case 12:
              goto LABEL_306;
            case 2:
              v78 = (Class *)0x1E0CC6FE8;
              break;
            case 3:
              break;
            case 4:
              v78 = (Class *)0x1E0CC7060;
              break;
            case 5:
              v78 = (Class *)0x1E0CC7010;
              break;
            case 6:
              v78 = (Class *)0x1E0CC7018;
              break;
            case 7:
              v78 = (Class *)0x1E0CC70B0;
              break;
            case 10:
              v78 = (Class *)0x1E0CC6F58;
              break;
            case 11:
              v78 = (Class *)0x1E0CC70B8;
              break;
            case 13:
              v78 = (Class *)0x1E0CC71B0;
              break;
            default:
              if (0xE0CC7058 == 33)
              {
                v78 = (Class *)0x1E0CC7188;
                break;
              }
              if (0xE0CC7058 != 36)
                goto LABEL_306;
              v78 = (Class *)0x1E0CC7098;
              break;
          }
LABEL_181:
          v90 = objc_alloc(*v78);
          v91 = objc_msgSend(v90, "initWithDevice:", v177[18], v166.__r_.__value_.__r.__words[0], v166.__r_.__value_.__l.__size_);
          v92 = (void *)*((_QWORD *)this + 45);
          *((_QWORD *)this + 45) = v91;

          if (v68)
          {
            v93 = (unint64_t *)&v68->__shared_owners_;
            do
              v94 = __ldaxr(v93);
            while (__stlxr(v94 - 1, v93));
            if (!v94)
            {
              ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
              std::__shared_weak_count::__release_weak(v68);
            }
          }
          goto LABEL_280;
        }
        if (v76 <= 12)
        {
          if (!v76)
          {
            v78 = (Class *)0x1E0CC6F60;
            goto LABEL_181;
          }
          if (v76 == 1)
          {
            v78 = (Class *)0x1E0CC70A0;
            goto LABEL_181;
          }
        }
        else
        {
          switch(v76)
          {
            case 13:
              v78 = (Class *)0x1E0CC70E0;
              goto LABEL_181;
            case 22:
              v78 = (Class *)0x1E0CC7090;
              goto LABEL_181;
            case 23:
              v78 = (Class *)0x1E0CC7088;
              goto LABEL_181;
          }
        }
LABEL_306:
        Espresso::throw_exception_selector<Espresso::generic_error>("Elementwise op not compatible with MPSNDArray.");
      }
      if ((unsigned __int16)v18 == 3 && *((_DWORD *)this + 70) == 101)
      {
        *((_BYTE *)this + 332) = 0;
        v26 = (void *)v21[20];
        if (*((_DWORD *)this + 84))
          objc_msgSend(v26, "kernelForFunction:cacheString:withConstants:", "elementwise_if_f16_buffers", 0, 0);
        else
          objc_msgSend(v26, "kernelForFunction:cacheString:withConstants:", "elementwise_if_f32_buffers", 0, 0);
        v27 = objc_claimAutoreleasedReturnValue();
        v49 = *v25;
        *v25 = (void *)v27;

LABEL_280:
        v157 = v178;
        if (v178)
        {
          v158 = (unint64_t *)&v178->__shared_owners_;
          do
            v159 = __ldaxr(v158);
          while (__stlxr(v159 - 1, v158));
          if (!v159)
          {
            ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
            std::__shared_weak_count::__release_weak(v157);
          }
        }
        v13 = v181;
LABEL_286:
        if (v13)
        {
          v160 = (unint64_t *)&v13->__shared_owners_;
          do
            v161 = __ldaxr(v160);
          while (__stlxr(v161 - 1, v160));
          if (!v161)
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
        goto LABEL_291;
      }
      v28 = (char *)*a3;
      v29 = **a3;
      if (v29
      {
        v31 = (uint64_t)v30;
        v32 = (std::__shared_weak_count *)*((_QWORD *)v28 + 1);
        v175 = v30;
        v176 = v32;
        if (v32)
        {
          v33 = (unint64_t *)&v32->__shared_owners_;
          do
            v34 = __ldxr(v33);
          while (__stxr(v34 + 1, v33));
          v28 = (char *)*a3;
        }
      }
      else
      {
        v32 = 0;
        v31 = 0;
        v175 = 0;
        v176 = 0;
      }
      v37 = (const void *)*((_QWORD *)v28 + 2);
      if (v37
      {
        v39 = v38;
        v40 = (std::__shared_weak_count *)*((_QWORD *)v28 + 3);
        v173 = v38;
        v174 = v40;
        if (v40)
        {
          v41 = (unint64_t *)&v40->__shared_owners_;
          do
            v42 = __ldxr(v41);
          while (__stxr(v42 + 1, v41));
          v28 = (char *)*a3;
        }
      }
      else
      {
        v40 = 0;
        v39 = 0;
        v173 = 0;
        v174 = 0;
      }
      if ((char *)a3[1] - v28 != 32)
        goto LABEL_52;
      v43 = *((_DWORD *)this + 70);
      if (v43 >= 0xA && v43 - 29 > 3)
        goto LABEL_52;
      Espresso::abstract_blob_container::shape((char *)v169, v31);
      v44 = Espresso::layer_shape::total_dim((Espresso::layer_shape *)v169);
      Espresso::abstract_blob_container::shape((char *)&v166, (uint64_t)v39);
      v45 = Espresso::layer_shape::total_dim((Espresso::layer_shape *)&v166);
      if (__p)
      {
        v168 = __p;
        operator delete(__p);
      }
      if (v171)
      {
        v172 = v171;
        operator delete(v171);
      }
      if (v44 < v45)
      {
        v175 = v39;
        v176 = v40;
        v173 = (_DWORD *)v31;
        v174 = v32;
        v46 = (_DWORD *)v31;
        *((_BYTE *)this + 352) = 1;
      }
      else
      {
LABEL_52:
        v32 = v40;
        v46 = v39;
        v39 = (_DWORD *)v31;
      }
      v47 = *((_DWORD *)this + 70);
      v48 = v47 - 100;
      if (v47 - 100 <= 0xD)
      {
        if (((1 << v48) & 0x2CF5) != 0)
          goto LABEL_118;
        if (v47 == 103)
          goto LABEL_60;
      }
      if (v47 > 0x24)
        goto LABEL_119;
      if (((1 << v47) & 0x1200002000) != 0)
        goto LABEL_118;
      if (((1 << v47) & 3) == 0)
      {
        if (((1 << v47) & 0xC00000) == 0)
          goto LABEL_119;
LABEL_60:
        if ((v39[2] != v46[2] || v39[3] != v46[3] || v39[4] != v46[4] || v39[5] != v46[5] || v39[6] != v46[6])
          && (v47 <= 0x24 && ((1 << v47) & 0x1200C00000) != 0 || v48 <= 3))
        {
          goto LABEL_118;
        }
LABEL_119:
        if (v32)
        {
LABEL_120:
          v59 = (unint64_t *)&v32->__shared_owners_;
          do
            v60 = __ldaxr(v59);
          while (__stlxr(v60 - 1, v59));
          if (!v60)
          {
            ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
            std::__shared_weak_count::__release_weak(v32);
          }
        }
LABEL_124:
        v61 = v176;
        if (v176)
        {
          v62 = (unint64_t *)&v176->__shared_owners_;
          do
            v63 = __ldaxr(v62);
          while (__stlxr(v63 - 1, v62));
          if (!v63)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        goto LABEL_129;
      }
      v50 = v39[2];
      v51 = v46[2];
      if (v50 == v51 && v39[3] == v46[3] && v39[4] == v46[4] && v39[5] == v46[5] && v39[6] == v46[6])
        goto LABEL_119;
      v52 = v46[4];
      if (v52 == 1)
      {
        v58 = v46[6];
        if (v58 <= 1)
          v58 = 1;
        if (v50 == v51 && v58 * v46[5] == 1 && v46[3] == v39[3])
        {
          if (v47 == 1)
          {
            v54 = 7;
          }
          else
          {
            if (v47)
              goto LABEL_119;
            v54 = 4;
          }
          goto LABEL_302;
        }
      }
      if (v51 == 1 && v46[3] == 1)
      {
        v53 = v46[6];
        if (v53 <= 1)
          v53 = 1;
        if (v53 * v46[5] == 1 && v52 == v39[4])
        {
          if (v47 == 1)
          {
            v54 = 8;
          }
          else
          {
            if (v47)
              goto LABEL_119;
            v54 = 5;
          }
          goto LABEL_302;
        }
      }
      v55 = v46[5];
      v56 = v46[6];
      if (v56 <= 1)
        v57 = 1;
      else
        v57 = v46[6];
      if (v50 == v51 && v57 * v55 == 1 && v46[3] == v39[3] && v52 == v39[4])
      {
        if (v47 == 1)
        {
          v54 = 9;
        }
        else
        {
          if (v47)
            goto LABEL_119;
          v54 = 6;
        }
        goto LABEL_302;
      }
      if (v51 == 1 && v46[3] == 1 && v52 == 1)
      {
        if (v55 * v56 == v39[6] * v39[5])
        {
          if (v47 == 1)
          {
            v54 = 30;
          }
          else
          {
            if (v47)
              goto LABEL_119;
            v54 = 29;
          }
          goto LABEL_302;
        }
        if (v56 == 1 && v55 == 1)
        {
          if (v47 == 1)
          {
            v54 = 32;
          }
          else
          {
            if (v47)
              goto LABEL_119;
            v54 = 31;
          }
LABEL_302:
          *((_DWORD *)this + 70) = v54;
          if (v32)
            goto LABEL_120;
          goto LABEL_124;
        }
      }
LABEL_118:
      *((_BYTE *)this + 332) = 1;
      goto LABEL_119;
    }
  }
LABEL_291:
  v162 = v183;
  if (v183)
  {
    v163 = (unint64_t *)&v183->__shared_owners_;
    do
      v164 = __ldaxr(v163);
    while (__stlxr(v164 - 1, v163));
    if (!v164)
    {
      ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
      std::__shared_weak_count::__release_weak(v162);
    }
  }
}

void sub_191457498(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,char a34)
{
  void *v34;
  uint64_t v35;

  if (a14 < 0)
    operator delete(__p);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v35 - 136);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v35 - 112);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v35 - 96);
  _Unwind_Resume(a1);
}

uint64_t Espresso::MPSBuffersEngine::elementwise_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v5;
  uint64_t v6;
  unsigned int v7;
  __int128 v8;
  uint64_t v9;
  _QWORD *v10;
  __int128 v11;
  const void *v12;
  _QWORD *v13;
  __int128 v14;
  const void *v15;
  _BOOL4 v16;
  int v17;
  char v18;
  unsigned int v19;
  __int128 v20;
  uint64_t v21;
  _QWORD *v22;
  __int128 v23;
  const void *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  __int128 v28;
  uint64_t v29;
  char v30;
  int v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  BOOL v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  BOOL v42;
  int v43;
  int v44;
  int v45;
  int v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  void *__p;
  void *v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  void *v56[2];
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;

  v5 = (_QWORD *)*a3;
  v6 = a3[1] - *a3;
  v7 = *(_DWORD *)(a1 + 280);
  if (v6 == 192 && v7 == 101)
  {
    v8 = *((_OWORD *)v5 + 1);
    v9 = v5[4];
    v58 = *(_OWORD *)v5;
    v59 = v8;
    v60 = v9;
    v61 = 0uLL;
    v62 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v61, (const void *)v5[5], v5[6], (uint64_t)(v5[6] - v5[5]) >> 2);
    v10 = (_QWORD *)*a3;
    v11 = *(_OWORD *)(*a3 + 80);
    v53 = *(_OWORD *)(*a3 + 64);
    v54 = v11;
    v12 = (const void *)v10[13];
    v55 = v10[12];
    v56[0] = 0;
    v56[1] = 0;
    v57 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v56, v12, v10[14], (uint64_t)(v10[14] - (_QWORD)v12) >> 2);
    v13 = (_QWORD *)*a3;
    v14 = *(_OWORD *)(*a3 + 144);
    v47 = *(_OWORD *)(*a3 + 128);
    v48 = v14;
    v15 = (const void *)v13[21];
    v49 = v13[20];
    __p = 0;
    v51 = 0;
    v52 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v15, v13[22], (uint64_t)(v13[22] - (_QWORD)v15) >> 2);
    v16 = Espresso::layer_shape::operator==((uint64_t)&v58, (uint64_t)&v53);
    v17 = v16 & Espresso::layer_shape::operator==((uint64_t)&v58, (uint64_t)&v47);
    if (*(_DWORD *)(a1 + 284))
      v18 = 0;
    else
      v18 = v17;
    if (__p)
    {
      v51 = __p;
      operator delete(__p);
    }
    if (v56[0])
    {
      v56[1] = v56[0];
      operator delete(v56[0]);
    }
    if ((_QWORD)v61)
    {
      *((_QWORD *)&v61 + 1) = v61;
      operator delete((void *)v61);
    }
    return v18 & 1;
  }
  if (!(v6 >> 6))
    goto LABEL_17;
  if (v6 >> 6 != 1)
  {
    v20 = *((_OWORD *)v5 + 1);
    v21 = v5[4];
    v58 = *(_OWORD *)v5;
    v59 = v20;
    v60 = v21;
    v61 = 0uLL;
    v62 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v61, (const void *)v5[5], v5[6], (uint64_t)(v5[6] - v5[5]) >> 2);
    v22 = (_QWORD *)*a3;
    v23 = *(_OWORD *)(*a3 + 80);
    v53 = *(_OWORD *)(*a3 + 64);
    v54 = v23;
    v24 = (const void *)v22[13];
    v55 = v22[12];
    v56[0] = 0;
    v56[1] = 0;
    v57 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v56, v24, v22[14], (uint64_t)(v22[14] - (_QWORD)v24) >> 2);
    if (v6 == 128 && (v7 < 0xA || v7 - 29 <= 3))
    {
      v25 = Espresso::layer_shape::total_dim((Espresso::layer_shape *)&v58);
      if (v25 < Espresso::layer_shape::total_dim((Espresso::layer_shape *)&v53))
      {
        v27 = (void *)v61;
        v49 = v60;
        v26 = v60;
        v47 = v58;
        v28 = v58;
        v48 = v59;
        v29 = v62;
        v58 = v53;
        v59 = v54;
        v60 = v55;
        v61 = *(_OWORD *)v56;
        v62 = v57;
        v53 = v28;
        v54 = v48;
        v55 = v26;
        v56[0] = v27;
        v57 = v29;
      }
    }
    v18 = 0;
    if (v7 - 25 < 2 || v7 == 119)
    {
      v19 = v7;
      v30 = 0;
      goto LABEL_26;
    }
    if (v7 > 1)
    {
      v30 = 0;
      v35 = *(_DWORD *)(a1 + 280);
      v18 = 1;
      if ((v35 - 100 > 0xD || ((1 << (v35 - 100)) & 0x2CFD) == 0)
        && (v35 > 0x24 || ((1 << v35) & 0x1200C02000) == 0))
      {
        v18 = 0;
        v30 = 0;
      }
    }
    else
    {
      if (DWORD2(v53) == 1)
      {
        v32 = v54;
        if ((int)v54 <= 1)
          v33 = 1;
        else
          v33 = v54;
        v34 = v53;
        if (v33 * HIDWORD(v53) == 1 && (_QWORD)v53 == (_QWORD)v58)
        {
          if (v7)
          {
            if (*(_DWORD *)(a1 + 280) == 1)
              v19 = 7;
            else
              v19 = 1;
LABEL_101:
            v30 = 1;
            goto LABEL_26;
          }
          v30 = 1;
          v19 = 4;
LABEL_26:
          if (v56[0])
          {
            v56[1] = v56[0];
            operator delete(v56[0]);
          }
          if ((_QWORD)v61)
          {
            *((_QWORD *)&v61 + 1) = v61;
            operator delete((void *)v61);
          }
          if ((v30 & 1) == 0)
            return v18 & 1;
          goto LABEL_31;
        }
      }
      else
      {
        v34 = v53;
        v32 = v54;
      }
      v36 = v34 == 1 && DWORD1(v53) == 1;
      v37 = v36;
      if (!v36)
      {
        v39 = HIDWORD(v53);
        v40 = DWORD2(v58);
        if (v32 <= 1)
          v38 = 1;
        else
          v38 = v32;
        goto LABEL_75;
      }
      if (v32 <= 1)
        v38 = 1;
      else
        v38 = v32;
      v39 = HIDWORD(v53);
      v40 = DWORD2(v58);
      if (v38 * HIDWORD(v53) != 1 || DWORD2(v53) != DWORD2(v58))
      {
LABEL_75:
        if (v38 * v39 == 1 && __PAIR64__(DWORD1(v53), v34) == (_QWORD)v58 && DWORD2(v53) == v40)
        {
          if (!v7)
          {
            v30 = 1;
            v19 = 6;
            goto LABEL_26;
          }
          v42 = *(_DWORD *)(a1 + 280) == 1;
          v43 = 9;
        }
        else
        {
          if (DWORD2(v53) == 1)
            v44 = v37;
          else
            v44 = 0;
          if (v44 == 1 && v39 * v32 == (_DWORD)v59 * HIDWORD(v58))
          {
            if (!v7)
            {
              v30 = 1;
              v19 = 29;
              goto LABEL_26;
            }
            v42 = *(_DWORD *)(a1 + 280) == 1;
            v43 = 30;
          }
          else
          {
            v45 = v44 ^ 1;
            if (v39 != 1)
              v45 = 1;
            if (v32 == 1)
              v46 = v45;
            else
              v46 = 1;
            if (v46)
              v19 = v7;
            else
              v19 = 31;
            v30 = v46 ^ 1;
            v18 = 1;
            if ((v46 & 1) != 0 || !v7)
              goto LABEL_26;
            v42 = *(_DWORD *)(a1 + 280) == 1;
            v43 = 32;
          }
        }
        if (v42)
          v19 = v43;
        else
          v19 = v7;
        goto LABEL_101;
      }
      v41 = *(_DWORD *)(a1 + 280);
      if (!v41)
      {
        v30 = 1;
        v19 = 5;
        goto LABEL_26;
      }
      v30 = 1;
      if (v41 == 1)
      {
        v19 = 8;
        goto LABEL_26;
      }
    }
    v19 = v7;
    goto LABEL_26;
  }
  if (v7 < 0x27)
  {
    v19 = *(_DWORD *)(a1 + 280);
    if (((0x6000000003uLL >> v7) & 1) != 0)
      goto LABEL_32;
    goto LABEL_31;
  }
LABEL_17:
  v19 = *(_DWORD *)(a1 + 280);
LABEL_31:
  if (v19 < 0xE)
  {
LABEL_32:
    v18 = 1;
    return v18 & 1;
  }
  v18 = 1;
  if ((v19 > 0x20 || ((1 << v19) & 0x1EFC00000) == 0) && (v19 - 103 > 0x10 || ((1 << (v19 - 103)) & 0x1D801) == 0))
    v18 = 0;
  return v18 & 1;
}

void sub_191457A74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  uint64_t v23;
  void *v25;

  v25 = *(void **)(v23 - 72);
  if (v25)
  {
    *(_QWORD *)(v23 - 64) = v25;
    operator delete(v25);
  }
  _Unwind_Resume(exception_object);
}

void `anonymous namespace'::dispatch_auto_threadgroupsize(void *a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  unsigned int v13;
  uint64_t v14;
  char v15;
  _QWORD v16[3];
  _QWORD v17[3];

  v7 = a1;
  v8 = v7;
  v9 = 8;
  if (a3 >= 8)
    LODWORD(v10) = 8;
  else
    LODWORD(v10) = 4;
  if (a3 < 4)
    LODWORD(v10) = 2;
  if (a3 <= 1)
    v10 = 1;
  else
    v10 = v10;
  if (a2 >= 8)
  {
    v11 = 3;
  }
  else
  {
    v9 = 4;
    v11 = 2;
  }
  if (a2 >= 4)
  {
    v12 = v11;
  }
  else
  {
    v9 = 2;
    v12 = 1;
  }
  if (a2 <= 1)
  {
    v9 = 1;
    v12 = 0;
  }
  if ((_DWORD)v10 << v12 < 9u && (v13 = ((_DWORD)v10 << v12) - 1, ((0x8Bu >> v13) & 1) != 0))
  {
    LODWORD(v14) = dword_191A9EEC4[v13];
  }
  else
  {
    if (a4 >= 8)
      LODWORD(v14) = 16;
    else
      LODWORD(v14) = 4;
    if (a4 < 4)
      LODWORD(v14) = 2;
    if (a4 <= 1)
      LODWORD(v14) = 1;
  }
  if (a3 < 8)
    v15 = 2;
  else
    v15 = 3;
  if (a3 < 4)
    v15 = 1;
  if (a3 <= 1)
    v15 = 0;
  if ((_DWORD)v14 << (v15 + v12) <= 0x200u)
    v14 = v14;
  else
    v14 = 8;
  v17[0] = (int)(((a2 - 1) >> v12) + 1);
  v17[1] = (int)(((a3 - 1) >> v15) + 1);
  v17[2] = (int)((a4 - 1) / v14 + 1);
  v16[0] = v9;
  v16[1] = v10;
  v16[2] = v14;
  objc_msgSend(v7, "dispatchThreadgroups:threadsPerThreadgroup:", v17, v16);

}

void sub_191457BF4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void Espresso::MPSBuffersEngine::activation_kernel::~activation_kernel(Espresso::MPSBuffersEngine::activation_kernel *this)
{
  Espresso::MPSBuffersEngine::activation_kernel::~activation_kernel(this);
  JUMPOUT(0x19401CD90);
}

{
  void *v2;
  void *v3;

  v2 = (void *)*((_QWORD *)this + 59);
  if (v2)
  {
    *((_QWORD *)this + 60) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 56);
  if (v3)
  {
    *((_QWORD *)this + 57) = v3;
    operator delete(v3);
  }

  Espresso::generic_activation_kernel::~generic_activation_kernel(this);
}

void Espresso::MPSBuffersEngine::activation_kernel::__launch(Espresso::MPSBuffersEngine::activation_kernel *this, uint64_t a2, const void ***a3, Espresso::layer_data *a4)
{
  unsigned int v8;
  BOOL v9;
  int v10;
  const void **v12;
  const void *v13;
  int *v14;
  int *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  void *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  int v32;
  unint64_t v33;
  int v34;
  int v35;
  int v36;
  int v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  int v41;
  id v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  std::__shared_weak_count *v49;
  int v50;
  int v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  int v56;
  int v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  const void **v66;
  const void *v67;
  id *v68;
  id *v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  id *v74;
  id *v75;
  uint64_t v76;
  unint64_t *v77;
  unint64_t v78;
  int *v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  void *v83;
  uint64_t v84;
  id v85;
  id v86;
  int v87;
  int v88;
  uint64_t v89;
  int v90;
  unint64_t v91;
  int v92;
  int v93;
  int v94;
  int v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  int v99;
  id v100;
  int v101;
  int v102;
  int v103;
  int v104;
  int v105;
  int v106;
  uint64_t v107;
  int v108;
  int v109;
  _QWORD *v110;
  uint64_t *v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  int v115;
  int v116;
  int v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  unint64_t *v123;
  uint64_t v124;
  _QWORD v125[3];
  uint64_t v126;
  _QWORD v127[3];
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  std::__shared_weak_count *v132;
  uint64_t v133;
  id v134[2];
  int v135;
  int v136;
  int v137;
  int v138;
  int v139;
  int v140;
  int v141;
  int v142;
  int v143;
  unsigned int v144;
  int v145;
  unsigned int v146;
  int v147;
  int v148;
  void *v149;
  std::__shared_weak_count *v150;
  id v151;
  std::__shared_weak_count *v152;
  int *v153;
  std::__shared_weak_count *v154;

  if (!*((_QWORD *)this + 52) && !*((_QWORD *)this + 49))
    Espresso::MPSBuffersEngine::activation_kernel::on_resized(this, (Espresso::layer_data *)a3, a4);
  v8 = *((_DWORD *)this + 76);
  v9 = v8 > 0x16;
  v10 = (1 << v8) & 0x680000;
  if (!v9 && v10 != 0)
  {
    if (!*((_QWORD *)this + 52))
      Espresso::throw_exception_selector<Espresso::generic_error>("no kernel found for activation.");
    v12 = *a3;
    v13 = **a3;
    if (v13
    {
      v15 = v14;
      v16 = (std::__shared_weak_count *)v12[1];
      v153 = v14;
      v154 = v16;
      if (v16)
      {
        p_shared_owners = (unint64_t *)&v16->__shared_owners_;
        do
          v18 = __ldxr(p_shared_owners);
        while (__stxr(v18 + 1, p_shared_owners));
      }
    }
    else
    {
      v15 = 0;
      v153 = 0;
      v154 = 0;
    }
    v19 = *(_QWORD *)a4;
    if (*(_QWORD *)v19
    {
      v21 = v20;
      v22 = *(std::__shared_weak_count **)(v19 + 8);
      v151 = v20;
      v152 = v22;
      if (v22)
      {
        v23 = (unint64_t *)&v22->__shared_owners_;
        do
          v24 = __ldxr(v23);
        while (__stxr(v24 + 1, v23));
      }
    }
    else
    {
      v21 = 0;
      v151 = 0;
      v152 = 0;
    }
    if (*(_QWORD *)a2
    {
      v26 = *(std::__shared_weak_count **)(a2 + 8);
      v149 = v25;
      v150 = v26;
      if (v26)
      {
        v27 = (unint64_t *)&v26->__shared_owners_;
        do
          v28 = __ldxr(v27);
        while (__stxr(v28 + 1, v27));
      }
    }
    else
    {
      v26 = 0;
      v149 = 0;
      v150 = 0;
    }
    v29 = (*(uint64_t (**)(int *))(*(_QWORD *)v15 + 32))(v15);
    v30 = v15[3];
    v31 = v15[2];
    v32 = v15[4];
    v136 = v15[2];
    v137 = v32 * v30;
    v141 = v30;
    v142 = v32;
    v33 = *((_QWORD *)v15 + 31);
    v144 = *((_QWORD *)v15 + 31);
    v34 = v15[5];
    v35 = v15[6];
    if (v34 <= 1)
      v36 = 1;
    else
      v36 = v15[5];
    if (v35 <= 1)
      v37 = 1;
    else
      v37 = v15[6];
    v143 = v37 * v36;
    if ((v29 - 1) >= 0xD)
    {
      v39 = v33 + v33 * ((4 * v31 - 1) / v33);
      v38 = 4;
    }
    else
    {
      v38 = qword_191AC0CA0[v29 - 1];
      v39 = v33 + v33 * ((v38 * v31 - 1) / v33);
    }
    v40 = v39 / v38;
    v41 = v31 - 1;
    if ((int)v31 < 1)
      v41 = v31 + 2;
    v145 = (v41 >> 2) + 1;
    v146 = v40 >> 2;
    v135 = v40;
    v138 = v30 * v31;
    v139 = v32 * v30 * v31;
    v140 = v139 * v34;
    v147 = v36;
    v148 = v35;
    Espresso::temporary_mtl_encoder::temporary_mtl_encoder((uint64_t)v134, *(_QWORD *)a2);
    v42 = v134[0];
    objc_msgSend(v42, "setComputePipelineState:", *((_QWORD *)this + 52));
    objc_msgSend(v42, "setBuffer:offset:atIndex:", *((_QWORD *)v15 + 21), 0, 0);
    objc_msgSend(v42, "setBuffer:offset:atIndex:", v21[21], 0, 1);
    objc_msgSend(v42, "setBytes:length:atIndex:", &v135, 56, 2);
    objc_msgSend(v42, "setBytes:length:atIndex:", (char *)this + 304, 36, 3);
    v43 = v15[6] * (uint64_t)v15[5];
    v44 = v15[2];
    v45 = v44 - 1;
    if (v44 == 1)
    {
      v46 = v15[4] * v15[3];
      v47 = v46 - 1;
      v9 = v46 < 1;
      v48 = v46 + 6;
      if (!v9)
        v48 = v47;
      v49 = (std::__shared_weak_count *)((v48 >> 3) + 1);
      v50 = v43 - 1;
      v9 = (int)v43 < 1;
      v51 = v43 + 6;
      if (!v9)
        v51 = v50;
      v131 = 1;
      v132 = v49;
      v133 = (v51 >> 3) + 1;
      v128 = 1;
      v52 = 8;
    }
    else
    {
      v53 = v44 + 6;
      if (v45 < 0)
        v45 = v53;
      v54 = (v45 >> 3) + 1;
      v55 = v15[4] * v15[3];
      v56 = v55 - 1;
      v9 = v55 < 1;
      v57 = v55 + 6;
      if (!v9)
        v57 = v56;
      v131 = v54;
      v132 = (std::__shared_weak_count *)((v57 >> 3) + 1);
      v133 = v43;
      v128 = 8;
      v52 = 1;
    }
    v129 = 8;
    v130 = v52;
    objc_msgSend(v42, "dispatchThreadgroups:threadsPerThreadgroup:", &v131);

    Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(v134);
    if (v26)
    {
      v58 = (unint64_t *)&v26->__shared_owners_;
      do
        v59 = __ldaxr(v58);
      while (__stlxr(v59 - 1, v58));
      if (!v59)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    v60 = v152;
    if (v152)
    {
      v61 = (unint64_t *)&v152->__shared_owners_;
      do
        v62 = __ldaxr(v61);
      while (__stlxr(v62 - 1, v61));
      if (!v62)
      {
        ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
        std::__shared_weak_count::__release_weak(v60);
      }
    }
    v63 = v154;
    if (v154)
    {
      v64 = (unint64_t *)&v154->__shared_owners_;
      do
        v65 = __ldaxr(v64);
      while (__stlxr(v65 - 1, v64));
LABEL_129:
      if (!v65)
      {
        ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
        std::__shared_weak_count::__release_weak(v63);
      }
      return;
    }
    return;
  }
  if (!*((_BYTE *)this + 440))
  {
    if (*((_QWORD *)this + 52))
      goto LABEL_68;
LABEL_93:
    Espresso::throw_exception_selector<Espresso::generic_error>("Failed to find a kernel in MPS_BUFFERS_ENGINE activation!");
  }
  if (!*((_QWORD *)this + 49))
    goto LABEL_93;
LABEL_68:
  v66 = *a3;
  v67 = **a3;
  if (v67
  {
    v69 = v68;
    v70 = (std::__shared_weak_count *)v66[1];
    v131 = (uint64_t)v68;
    v132 = v70;
    if (v70)
    {
      v71 = (unint64_t *)&v70->__shared_owners_;
      do
        v72 = __ldxr(v71);
      while (__stxr(v72 + 1, v71));
    }
  }
  else
  {
    v69 = 0;
    v131 = 0;
    v132 = 0;
  }
  v73 = *(_QWORD *)a4;
  if (*(_QWORD *)v73
  {
    v75 = v74;
    v76 = *(_QWORD *)(v73 + 8);
    v128 = (uint64_t)v74;
    v129 = v76;
    if (v76)
    {
      v77 = (unint64_t *)(v76 + 8);
      do
        v78 = __ldxr(v77);
      while (__stxr(v78 + 1, v77));
    }
  }
  else
  {
    v75 = 0;
    v128 = 0;
    v129 = 0;
  }
  if (*(_QWORD *)a2
  {
    v80 = *(std::__shared_weak_count **)(a2 + 8);
    v153 = v79;
    v154 = v80;
    if (v80)
    {
      v81 = (unint64_t *)&v80->__shared_owners_;
      do
        v82 = __ldxr(v81);
      while (__stxr(v82 + 1, v81));
    }
  }
  else
  {
    v80 = 0;
    v79 = 0;
    v153 = 0;
    v154 = 0;
  }
  if (*((_BYTE *)this + 440))
  {
    v83 = (void *)*((_QWORD *)this + 49);
    v84 = *((_QWORD *)v79 + 18);
    v85 = v75[25];
    v86 = v69[25];
    objc_msgSend(v83, "encodeToCommandBuffer:inputMatrix:biasVector:resultMatrix:", v84, v85, 0, v86);

    if (!v80)
      goto LABEL_121;
    goto LABEL_117;
  }
  v87 = (*((uint64_t (**)(id *))*v69 + 4))(v69);
  v88 = *((_DWORD *)v69 + 3);
  v89 = *((int *)v69 + 2);
  v90 = *((_DWORD *)v69 + 4);
  v136 = *((_DWORD *)v69 + 2);
  v137 = v90 * v88;
  v141 = v88;
  v142 = v90;
  v91 = v69[31];
  v144 = v69[31];
  v93 = *((_DWORD *)v69 + 5);
  v92 = *((_DWORD *)v69 + 6);
  if (v93 <= 1)
    v94 = 1;
  else
    v94 = *((_DWORD *)v69 + 5);
  if (v92 <= 1)
    v95 = 1;
  else
    v95 = *((_DWORD *)v69 + 6);
  v143 = v95 * v94;
  if ((v87 - 1) >= 0xD)
  {
    v97 = v91 + v91 * ((4 * v89 - 1) / v91);
    v96 = 4;
  }
  else
  {
    v96 = qword_191AC0CA0[v87 - 1];
    v97 = v91 + v91 * ((v96 * v89 - 1) / v91);
  }
  v98 = v97 / v96;
  v99 = v89 - 1;
  if ((int)v89 < 1)
    v99 = v89 + 2;
  v145 = (v99 >> 2) + 1;
  v146 = v98 >> 2;
  v135 = v98;
  v138 = v88 * v89;
  v139 = v90 * v88 * v89;
  v140 = v139 * v93;
  v147 = v94;
  v148 = v92;
  Espresso::temporary_mtl_encoder::temporary_mtl_encoder((uint64_t)&v151, *(_QWORD *)a2);
  v100 = v151;
  objc_msgSend(v100, "setComputePipelineState:", *((_QWORD *)this + 52));
  objc_msgSend(v100, "setBuffer:offset:atIndex:", v69[21], 0, 0);
  objc_msgSend(v100, "setBuffer:offset:atIndex:", v75[21], 0, 1);
  objc_msgSend(v100, "setBytes:length:atIndex:", &v135, 56, 2);
  objc_msgSend(v100, "setBytes:length:atIndex:", (char *)this + 304, 36, 3);
  objc_msgSend(v100, "setBuffer:offset:atIndex:", *((_QWORD *)this + 53), 0, 4);
  objc_msgSend(v100, "setBuffer:offset:atIndex:", *((_QWORD *)this + 54), 0, 5);
  v101 = v95 * v93;
  v102 = *((_DWORD *)v69 + 2);
  v103 = v102 - 1;
  if (v102 == 1)
  {
    v104 = *((_DWORD *)v69 + 4) * *((_DWORD *)v69 + 3);
    v105 = v104 - 1;
    v9 = v104 < 1;
    v106 = v104 + 6;
    if (!v9)
      v106 = v105;
    v107 = (v106 >> 3) + 1;
    v108 = v101 - 1;
    v9 = v101 < 1;
    v109 = v101 + 6;
    if (!v9)
      v109 = v108;
    v127[0] = 1;
    v127[1] = v107;
    v127[2] = (v109 >> 3) + 1;
    v126 = 1;
    v110 = v127;
    v111 = &v126;
    v112 = 8;
  }
  else
  {
    v113 = v102 + 6;
    if (v103 < 0)
      v103 = v113;
    v114 = (v103 >> 3) + 1;
    v115 = *((_DWORD *)v69 + 4) * *((_DWORD *)v69 + 3);
    v116 = v115 - 1;
    v9 = v115 < 1;
    v117 = v115 + 6;
    if (!v9)
      v117 = v116;
    v125[0] = v114;
    v125[1] = (v117 >> 3) + 1;
    v125[2] = v101;
    v124 = 8;
    v110 = v125;
    v111 = &v124;
    v112 = 1;
  }
  v111[1] = 8;
  v111[2] = v112;
  objc_msgSend(v100, "dispatchThreadgroups:threadsPerThreadgroup:", v110);

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(&v151);
  if (v80)
  {
LABEL_117:
    v118 = (unint64_t *)&v80->__shared_owners_;
    do
      v119 = __ldaxr(v118);
    while (__stlxr(v119 - 1, v118));
    if (!v119)
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
  }
LABEL_121:
  v120 = (std::__shared_weak_count *)v129;
  if (v129)
  {
    v121 = (unint64_t *)(v129 + 8);
    do
      v122 = __ldaxr(v121);
    while (__stlxr(v122 - 1, v121));
    if (!v122)
    {
      ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
      std::__shared_weak_count::__release_weak(v120);
    }
  }
  v63 = v132;
  if (v132)
  {
    v123 = (unint64_t *)&v132->__shared_owners_;
    do
      v65 = __ldaxr(v123);
    while (__stlxr(v65 - 1, v123));
    goto LABEL_129;
  }
}

void sub_1914584D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  uint64_t v14;
  uint64_t v16;
  va_list va;
  uint64_t v18;
  uint64_t v19;
  va_list va1;

  va_start(va1, a14);
  va_start(va, a14);
  v16 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v14 - 96);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void Espresso::MPSBuffersEngine::activation_kernel::blob_options(Espresso::MPSBuffersEngine::activation_kernel *this@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  const void *v4;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 v17;
  _QWORD *v18;
  std::__shared_weak_count *v19;

  *a3 = 0;
  a3[1] = 0;
  v4 = (const void *)*((_QWORD *)this + 1);
  if (v4)
  {
    if (v7)
    {
      v8 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
      v18 = v7;
      v19 = v8;
      if (v8)
      {
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldxr(p_shared_owners);
        while (__stxr(v10 + 1, p_shared_owners));
      }
      if (a2)
      {
        v11 = operator new(0x70uLL);
        v11[1] = 0;
        v11[2] = 0;
        *v11 = &off_1E2DBE228;
        *((_OWORD *)v11 + 4) = 0u;
        *((_OWORD *)v11 + 5) = 0u;
        *((_OWORD *)v11 + 2) = 0u;
        *((_OWORD *)v11 + 3) = 0u;
        v11[3] = &off_1E2D9B4D8;
        *((_DWORD *)v11 + 12) = 1065353216;
        v11[7] = 0x1FFFFFFFFLL;
        v11[12] = 0;
        v11[13] = 0;
        v11[8] = 0;
        v11[9] = 0;
        *((_BYTE *)v11 + 88) = 0;
        v11[10] = 0;
        *(_QWORD *)&v17 = v11 + 3;
        *((_QWORD *)&v17 + 1) = v11;
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)a3, &v17);
        v12 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
        if (*((_QWORD *)&v17 + 1))
        {
          v13 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 - 1, v13));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(*a3 + 72), v18[28], v18[29]);
        v8 = v19;
      }
      if (v8)
      {
        v15 = (unint64_t *)&v8->__shared_owners_;
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
  }
}

void sub_1914586D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v3);
  _Unwind_Resume(a1);
}

void Espresso::MPSBuffersEngine::activation_kernel::on_resized(Espresso::MPSBuffersEngine::activation_kernel *this, Espresso::layer_data *a2, Espresso::layer_data *a3)
{
  uint64_t v3;
  void *v6;
  void *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unsigned int v11;
  int *v12;
  id *v13;
  const char *v14;
  int v15;
  int v16;
  int v17;
  int v23;
  uint64_t v24;
  void *v25;
  id *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  id v30;
  unint64_t v31;
  uint64_t v32;
  void *v33;
  double v34;
  double v35;
  double v36;
  const void *v37;
  id *v38;
  id *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  void *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  int v50;
  const char *v51;
  void *p_p;
  uint64_t v53;
  void *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  std::runtime_error *exception;
  std::runtime_error *v66;
  void *__p;
  std::__shared_weak_count *v68;
  uint64_t v69;
  void *v70;
  std::__shared_weak_count *v71;
  void *v72;
  std::__shared_weak_count *v73;
  id *v74;
  std::__shared_weak_count *v75;
  void *v76;
  std::__shared_weak_count *v77;

  v3 = *(_QWORD *)a3;
  if (*((_QWORD *)a3 + 1) != *(_QWORD *)a3)
  {
    if (*(_QWORD *)v3)
    {
      if (v6)
      {
        v7 = v6;
        v8 = *(std::__shared_weak_count **)(v3 + 8);
        v76 = v6;
        v77 = v8;
        if (v8)
        {
          p_shared_owners = (unint64_t *)&v8->__shared_owners_;
          do
            v10 = __ldxr(p_shared_owners);
          while (__stxr(v10 + 1, p_shared_owners));
        }
        *((_QWORD *)this + 50) = 0;
        *((_QWORD *)this + 51) = 0;
        *((_BYTE *)this + 440) = 1;
        v11 = *((_DWORD *)this + 76);
        v12 = (int *)((char *)this + 400);
        v13 = (id *)*((_QWORD *)this + 1);
        switch(v11)
        {
          case 0u:
            v15 = 1;
            goto LABEL_38;
          case 1u:
            v16 = 5;
            goto LABEL_31;
          case 2u:
            v17 = 1;
            goto LABEL_35;
          case 3u:
            v15 = 3;
            goto LABEL_38;
          case 4u:
            if (*((_DWORD *)this + 111))
              v14 = "activation_prelu_f16_buffers";
            else
              v14 = "activation_prelu_f32_buffers";
            goto LABEL_45;
          case 5u:
            v23 = 5;
            goto LABEL_40;
          case 6u:
            v23 = 2;
            goto LABEL_40;
          case 7u:
            v23 = 4;
LABEL_40:
            *((_DWORD *)this + 100) = v23;
            _D0 = *(_QWORD *)((char *)this + 308);
            goto LABEL_41;
          case 8u:
            v17 = 9;
LABEL_35:
            *((_DWORD *)this + 100) = v17;
            *((_DWORD *)this + 101) = *((_DWORD *)this + 77);
            goto LABEL_46;
          case 9u:
            if (*((_DWORD *)this + 111))
              v14 = "activation_thresholded_relu_f16_buffers";
            else
              v14 = "activation_thresholded_relu_f32_buffers";
            goto LABEL_45;
          case 0xAu:
            v16 = 7;
LABEL_31:
            *v12 = v16;
            __asm { FMOV            V0.2S, #1.0 }
LABEL_41:
            *(_QWORD *)((char *)this + 404) = _D0;
            goto LABEL_46;
          case 0xBu:
            if (*((_DWORD *)this + 111))
              v14 = "activation_parametric_softplus_f16_buffers";
            else
              v14 = "activation_parametric_softplus_f32_buffers";
            goto LABEL_45;
          case 0xCu:
            v15 = 8;
LABEL_38:
            *v12 = v15;
            goto LABEL_47;
          case 0xDu:
            if (*((_DWORD *)this + 111))
              v14 = "activation_rectilinear_f16_buffers";
            else
              v14 = "activation_rectilinear_f32_buffers";
            goto LABEL_45;
          case 0xEu:
            if (*((_DWORD *)this + 111))
              v14 = "activation_relu_clamped_f16_buffers";
            else
              v14 = "activation_relu_clamped_f32_buffers";
            goto LABEL_45;
          case 0x13u:
          case 0x15u:
          case 0x16u:
            *((_BYTE *)this + 440) = 0;
            goto LABEL_58;
          case 0x14u:
            if (*((_DWORD *)this + 111))
              v14 = "activation_erf_f16_buffers";
            else
              v14 = "activation_erf_f32_buffers";
            goto LABEL_45;
          case 0x17u:
            if (*((_DWORD *)this + 111))
              v14 = "activation_step_f16_buffers";
            else
              v14 = "activation_step_f32_buffers";
LABEL_45:
            objc_msgSend(v13[20], "kernelForFunction:cacheString:withConstants:", v14, 0, 0);
            v24 = objc_claimAutoreleasedReturnValue();
            v25 = (void *)*((_QWORD *)this + 52);
            *((_QWORD *)this + 52) = v24;

            *((_BYTE *)this + 440) = 0;
LABEL_46:
            v13 = (id *)*((_QWORD *)this + 1);
LABEL_47:
            if (!v13
            {
              __p = 0;
              v68 = 0;
              exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
              exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
            }
            v27 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
            __p = v26;
            v68 = v27;
            if (v27)
            {
              v28 = (unint64_t *)&v27->__shared_owners_;
              do
                v29 = __ldxr(v28);
              while (__stxr(v29 + 1, v28));
              v30 = v26[18];
              do
                v31 = __ldaxr(v28);
              while (__stlxr(v31 - 1, v28));
              if (!v31)
              {
                ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
                std::__shared_weak_count::__release_weak(v27);
              }
            }
            else
            {
              v30 = v26[18];
            }
            v32 = objc_msgSend(objc_alloc(MEMORY[0x1E0CC6F28]), "initWithDevice:", v30);
            v33 = (void *)*((_QWORD *)this + 49);
            *((_QWORD *)this + 49) = v32;

            LODWORD(v34) = *((_DWORD *)this + 101);
            LODWORD(v35) = *((_DWORD *)this + 102);
            LODWORD(v36) = *((_DWORD *)this + 103);
            objc_msgSend(*((id *)this + 49), "setNeuronType:parameterA:parameterB:parameterC:", *((unsigned int *)this + 100), v34, v35, v36);

            v11 = *((_DWORD *)this + 76);
LABEL_58:
            if (v11 > 0x16 || ((1 << v11) & 0x680000) == 0)
              goto LABEL_113;
            v37 = (const void *)*((_QWORD *)this + 1);
            if (!v37
            {
              v74 = 0;
              v75 = 0;
              v66 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v66, "Espresso: wrong_context_type");
              v66->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
            }
            v39 = v38;
            v40 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
            v74 = v38;
            v75 = v40;
            if (v40)
            {
              v41 = (unint64_t *)&v40->__shared_owners_;
              do
                v42 = __ldxr(v41);
              while (__stxr(v42 + 1, v41));
            }
            v72 = v7;
            v73 = v8;
            if (v8)
            {
              v43 = (unint64_t *)&v8->__shared_owners_;
              do
                v44 = __ldxr(v43);
              while (__stxr(v44 + 1, v43));
            }
            v45 = *(_QWORD *)a2;
            if (*(_QWORD *)v45
            {
              v47 = *(std::__shared_weak_count **)(v45 + 8);
              v70 = v46;
              v71 = v47;
              if (v47)
              {
                v48 = (unint64_t *)&v47->__shared_owners_;
                do
                  v49 = __ldxr(v48);
                while (__stxr(v49 + 1, v48));
              }
            }
            else
            {
              v47 = 0;
              v70 = 0;
              v71 = 0;
            }
            __p = 0;
            v68 = 0;
            v69 = 0;
            v50 = *((_DWORD *)this + 76);
            switch(v50)
            {
              case 22:
                if ((*(unsigned int (**)(void *))(*(_QWORD *)v7 + 32))(v7) == 1)
                {
                  v51 = "activation_fast_gelu2_f16_buffers";
                }
                else
                {
                  if ((*(unsigned int (**)(void *))(*(_QWORD *)v7 + 32))(v7))
                    goto LABEL_91;
                  v51 = "activation_fast_gelu2_f32_buffers";
                }
                break;
              case 21:
                if ((*(unsigned int (**)(void *))(*(_QWORD *)v7 + 32))(v7) == 1)
                {
                  v51 = "activation_fast_gelu1_f16_buffers";
                }
                else
                {
                  if ((*(unsigned int (**)(void *))(*(_QWORD *)v7 + 32))(v7))
                    goto LABEL_91;
                  v51 = "activation_fast_gelu1_f32_buffers";
                }
                break;
              case 19:
                if ((*(unsigned int (**)(void *))(*(_QWORD *)v7 + 32))(v7) == 1)
                {
                  v51 = "activation_gelu_f16_buffers";
                }
                else
                {
                  if ((*(unsigned int (**)(void *))(*(_QWORD *)v7 + 32))(v7))
                    goto LABEL_91;
                  v51 = "activation_gelu_f32_buffers";
                }
                break;
              default:
                goto LABEL_91;
            }
            MEMORY[0x19401C808](&__p, v51);
LABEL_91:
            if (v69 >= 0)
              p_p = &__p;
            else
              p_p = __p;
            objc_msgSend(v39[20], "kernelForFunction:cacheString:withConstants:", p_p, 0, 0);
            v53 = objc_claimAutoreleasedReturnValue();
            v54 = (void *)*((_QWORD *)this + 52);
            *((_QWORD *)this + 52) = v53;

            if (!*((_QWORD *)this + 52))
              Espresso::throw_exception_selector<Espresso::generic_error>("Failed to create kernel for GeLU");
            if (SHIBYTE(v69) < 0)
              operator delete(__p);
            if (v47)
            {
              v55 = (unint64_t *)&v47->__shared_owners_;
              do
                v56 = __ldaxr(v55);
              while (__stlxr(v56 - 1, v55));
              if (!v56)
              {
                ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
                std::__shared_weak_count::__release_weak(v47);
              }
            }
            v57 = v73;
            if (v73)
            {
              v58 = (unint64_t *)&v73->__shared_owners_;
              do
                v59 = __ldaxr(v58);
              while (__stlxr(v59 - 1, v58));
              if (!v59)
              {
                ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
                std::__shared_weak_count::__release_weak(v57);
              }
            }
            v60 = v75;
            if (v75)
            {
              v61 = (unint64_t *)&v75->__shared_owners_;
              do
                v62 = __ldaxr(v61);
              while (__stlxr(v62 - 1, v61));
              if (!v62)
              {
                ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
                std::__shared_weak_count::__release_weak(v60);
              }
            }
            v8 = v77;
LABEL_113:
            if (v8)
            {
              v63 = (unint64_t *)&v8->__shared_owners_;
              do
                v64 = __ldaxr(v63);
              while (__stlxr(v64 - 1, v63));
              if (!v64)
              {
                ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
                std::__shared_weak_count::__release_weak(v8);
              }
            }
            break;
          default:
            Espresso::throw_exception_selector<Espresso::not_implemented_error>("Unimplemented activation function in MPS_BUFFERS_ENGINE");
        }
      }
    }
  }
}

void sub_191458E18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  _Unwind_Resume(a1);
}

void Espresso::MPSBuffersEngine::activation_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, _QWORD *a3, const void *a4, size_t a5)
{
  uint64_t v7;
  int v8;
  uint64_t v10;
  void **v14;
  int v16;
  size_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;

  v7 = *(_QWORD *)(a1 + 8);
  if (*((char *)a3 + 23) < 0)
  {
    v10 = a3[1];
    if (v10 == 12)
    {
      if (*(_QWORD *)*a3 == 0x705F736D61726170 && *(_DWORD *)(*a3 + 8) == 1970038130)
        goto LABEL_28;
    }
    else
    {
      if (v10 == 14)
      {
        a3 = (_QWORD *)*a3;
        goto LABEL_30;
      }
      if (v10 == 15 && *(_QWORD *)*a3 == 0x73756C7074666F73 && *(_QWORD *)(*a3 + 7) == 0x736168706C615F73)
        goto LABEL_28;
    }
LABEL_40:
    Espresso::throw_exception_selector<Espresso::generic_error>("Unknown weight name");
  }
  v8 = *((unsigned __int8 *)a3 + 23);
  if (v8 == 12)
  {
    if (*a3 != 0x705F736D61726170 || *((_DWORD *)a3 + 2) != 1970038130)
      goto LABEL_40;
LABEL_28:
    v14 = (void **)(a1 + 424);
    goto LABEL_36;
  }
  if (v8 != 14)
  {
    if (v8 != 15)
      goto LABEL_40;
    if (*a3 != 0x73756C7074666F73 || *(_QWORD *)((char *)a3 + 7) != 0x736168706C615F73)
      goto LABEL_40;
    goto LABEL_28;
  }
LABEL_30:
  if (*a3 != 0x73756C7074666F73 || *(_QWORD *)((char *)a3 + 6) != 0x73617465625F7375)
    goto LABEL_40;
  v14 = (void **)(a1 + 432);
LABEL_36:
  v16 = a5 - 1;
  if ((int)a5 < 1)
    v16 = a5 + 14;
  v17 = (int)((v16 & 0xFFFFFFF0) + 16);
  v18 = malloc_type_calloc(v17, 1uLL, 0x99C4288uLL);
  if (!v18)
    Espresso::throw_exception_selector<Espresso::memory_error>("Error allocating memory for weights in activation kernel");
  v19 = v18;
  memcpy(v18, a4, a5);
  v20 = objc_msgSend(*(id *)(v7 + 144), "newBufferWithBytes:length:options:", v19, v17, 0);
  v21 = *v14;
  *v14 = (void *)v20;

  free(v19);
}

BOOL Espresso::MPSBuffersEngine::activation_kernel::is_valid_for_engine(uint64_t a1)
{
  _BOOL8 v2;
  uint64_t v4[5];
  _OWORD v5[5];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v5[2] = xmmword_191A9E984;
  v5[3] = unk_191A9E994;
  v5[4] = xmmword_191A9E9A4;
  v5[0] = xmmword_191A9E964;
  v5[1] = unk_191A9E974;
  std::unordered_set<Espresso::activation_mode>::unordered_set((uint64_t)v4, (int *)v5, 20);
  v2 = std::__hash_table<Espresso::activation_mode,std::hash<Espresso::activation_mode>,std::equal_to<Espresso::activation_mode>,std::allocator<Espresso::activation_mode>>::find<Espresso::activation_mode>(v4[0], v4[1], *(_DWORD *)(a1 + 304)) != 0;
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)v4);
  return v2;
}

uint64_t Espresso::MPSBuffersEngine::activation_kernel::supports_weight_key()
{
  return 1;
}

void Espresso::MPSBuffersEngine::concat_kernel::~concat_kernel(Espresso::MPSBuffersEngine::concat_kernel *this)
{
  *(_QWORD *)this = &off_1E2D70DC0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 344);
  Espresso::base_kernel::~base_kernel(this);
}

{
  *(_QWORD *)this = &off_1E2D70DC0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 344);
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

uint64_t Espresso::MPSBuffersEngine::concat_kernel::__launch(uint64_t result, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v7;
  uint64_t v8;

  if (a3[1] != *a3 && a4[1] != *a4)
  {
    v7 = (_QWORD *)result;
    v8 = *(_QWORD *)(result + 344);
    if (!v8)
    {
      (*(void (**)(_QWORD *, _QWORD *, _QWORD *))(*v7 + 80))(v7, a3, a4);
      v8 = v7[43];
      if (!v8)
        Espresso::throw_exception_selector<Espresso::invalid_state_error>("Failed to make fallback kernel in concat");
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, _QWORD *))(*(_QWORD *)v8 + 16))(v8, a2, a3, a4);
  }
  return result;
}

void Espresso::MPSBuffersEngine::concat_kernel::blob_options(Espresso::MPSBuffersEngine::concat_kernel *this@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  const void *v4;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 v17;
  _QWORD *v18;
  std::__shared_weak_count *v19;

  *a3 = 0;
  a3[1] = 0;
  v4 = (const void *)*((_QWORD *)this + 1);
  if (v4)
  {
    if (v7)
    {
      v8 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
      v18 = v7;
      v19 = v8;
      if (v8)
      {
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldxr(p_shared_owners);
        while (__stxr(v10 + 1, p_shared_owners));
      }
      if (a2)
      {
        v11 = operator new(0x70uLL);
        v11[1] = 0;
        v11[2] = 0;
        *v11 = &off_1E2DBE228;
        *((_OWORD *)v11 + 4) = 0u;
        *((_OWORD *)v11 + 5) = 0u;
        *((_OWORD *)v11 + 2) = 0u;
        *((_OWORD *)v11 + 3) = 0u;
        v11[3] = &off_1E2D9B4D8;
        *((_DWORD *)v11 + 12) = 1065353216;
        v11[7] = 0x1FFFFFFFFLL;
        v11[12] = 0;
        v11[13] = 0;
        v11[8] = 0;
        v11[9] = 0;
        *((_BYTE *)v11 + 88) = 0;
        v11[10] = 0;
        *(_QWORD *)&v17 = v11 + 3;
        *((_QWORD *)&v17 + 1) = v11;
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)a3, &v17);
        v12 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
        if (*((_QWORD *)&v17 + 1))
        {
          v13 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 - 1, v13));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(*a3 + 72), v18[28], v18[29]);
        v8 = v19;
      }
      if (v8)
      {
        v15 = (unint64_t *)&v8->__shared_owners_;
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
  }
}

void sub_19145944C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v3);
  _Unwind_Resume(a1);
}

void Espresso::MPSBuffersEngine::concat_kernel::on_resized(Espresso::MPSBuffersEngine::concat_kernel *this, Espresso::layer_data *a2, Espresso::layer_data *a3)
{
  _QWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  _BYTE *v16;
  int v17;
  _QWORD *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  __int128 v26[2];
  void *__p;
  void *v28;
  char v29[20];
  unsigned int v30;
  void *v31;
  std::__shared_weak_count *v32;

  v26[0] = 0uLL;
  v6 = (_QWORD *)((char *)this + 344);
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)this + 344, v26);
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v26[0] + 1);
  if (*((_QWORD *)&v26[0] + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v26[0] + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (*((_QWORD *)a2 + 1) != *(_QWORD *)a2)
  {
    v10 = *(_QWORD *)a3;
    if (*((_QWORD *)a3 + 1) != *(_QWORD *)a3)
    {
      if (*(_QWORD *)v10)
      {
        if (v11)
        {
          v12 = (uint64_t)v11;
          v13 = *(std::__shared_weak_count **)(v10 + 8);
          v31 = v11;
          v32 = v13;
          if (v13)
          {
            p_shared_owners = (unint64_t *)&v13->__shared_owners_;
            do
              v15 = __ldxr(p_shared_owners);
            while (__stxr(v15 + 1, p_shared_owners));
          }
          v16 = (_BYTE *)*v6;
          if (!*v6)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v12 + 32))(v12);
            Espresso::abstract_blob_container::shape((char *)v26, v12);
            Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v29, (const Espresso::layer_shape *)v26, 0);
            if (__p)
            {
              v28 = __p;
              operator delete(__p);
            }
            if (*((_BYTE *)this + 340))
              v17 = 0;
            else
              v17 = 2 * (v30 > 3);
            v18 = operator new(0x160uLL);
            v18[1] = 0;
            v18[2] = 0;
            *v18 = &off_1E2DB98E0;
            v19 = Espresso::base_kernel::base_kernel((uint64_t)(v18 + 3), (_QWORD *)this + 1);
            v18[3] = &off_1E2D72688;
            *((_BYTE *)v18 + 312) = 0;
            *((_OWORD *)v18 + 20) = 0u;
            *((_OWORD *)v18 + 21) = 0u;
            *((_DWORD *)v18 + 76) = v17;
            *((_WORD *)v18 + 154) = 0;
            *(_QWORD *)&v26[0] = v19;
            *((_QWORD *)&v26[0] + 1) = v18;
            std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)v6, v26);
            v20 = (std::__shared_weak_count *)*((_QWORD *)&v26[0] + 1);
            if (*((_QWORD *)&v26[0] + 1))
            {
              v21 = (unint64_t *)(*((_QWORD *)&v26[0] + 1) + 8);
              do
                v22 = __ldaxr(v21);
              while (__stlxr(v22 - 1, v21));
              if (!v22)
              {
                ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
                std::__shared_weak_count::__release_weak(v20);
              }
            }
            v16 = (_BYTE *)*((_QWORD *)this + 43);
            v16[288] = *((_DWORD *)this + 70) != 0;
          }
          (*(void (**)(_BYTE *, Espresso::layer_data *, Espresso::layer_data *))(*(_QWORD *)v16 + 80))(v16, a2, a3);
          v23 = v32;
          if (v32)
          {
            v24 = (unint64_t *)&v32->__shared_owners_;
            do
              v25 = __ldaxr(v24);
            while (__stlxr(v25 - 1, v24));
            if (!v25)
            {
              ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
              std::__shared_weak_count::__release_weak(v23);
            }
          }
        }
      }
    }
  }
}

void sub_19145969C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  std::__shared_weak_count *v16;
  uint64_t v17;
  void *v19;

  std::__shared_weak_count::~__shared_weak_count(v16);
  operator delete(v19);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v17 - 64);
  _Unwind_Resume(a1);
}

BOOL Espresso::MPSBuffersEngine::concat_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BOOL8 result;
  BOOL v5;
  _BYTE v6[20];
  unsigned int v7;

  if (*(_QWORD *)(a3 + 8) == *(_QWORD *)a3)
    return 0;
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v6, *(const Espresso::layer_shape **)a3, 0);
  result = 0;
  if (*(_BYTE *)(a1 + 340))
    v5 = v7 > 3;
  else
    v5 = 0;
  if (!v5)
    return *(_WORD *)(a1 + 320) == 0;
  return result;
}

void Espresso::MPSBuffersEngine::general_concat_kernel::~general_concat_kernel(Espresso::MPSBuffersEngine::general_concat_kernel *this)
{
  void *v2;

  *(_QWORD *)this = &off_1E2D72688;
  v2 = (void *)*((_QWORD *)this + 38);
  if (v2)
  {
    *((_QWORD *)this + 39) = v2;
    operator delete(v2);
  }

  Espresso::base_kernel::~base_kernel(this);
}

{
  void *v2;

  *(_QWORD *)this = &off_1E2D72688;
  v2 = (void *)*((_QWORD *)this + 38);
  if (v2)
  {
    *((_QWORD *)this + 39) = v2;
    operator delete(v2);
  }

  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::MPSBuffersEngine::general_concat_kernel::__launch(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t **a4)
{
  uint64_t v5;
  uint64_t **v6;
  int *v8;
  int *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  int32x2_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  const void *v24;
  char *v25;
  char *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  id v30;
  int v31;
  unsigned int v32;
  unint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  unsigned int v36;
  unsigned int v37;
  int v38;
  unsigned int v39;
  unint64_t v40;
  unint64_t v41;
  int v42;
  int v43;
  int v44;
  unsigned int v45;
  unint64_t v46;
  unint64_t v47;
  int v48;
  int v49;
  int v50;
  unsigned int v51;
  unint64_t v52;
  unint64_t v53;
  int v54;
  int v55;
  int v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  id *v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  id v65;
  unint64_t v66;
  id v67;
  uint64_t *v68;
  const void *v69;
  char *v70;
  char *v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  int v75;
  unsigned int v76;
  unint64_t v77;
  unint64_t v78;
  int v79;
  int v80;
  unint64_t *v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  id *v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  id v89;
  unint64_t v90;
  id v91;
  uint64_t *v92;
  const void *v93;
  char *v94;
  char *v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  int v99;
  unsigned int v100;
  unint64_t v101;
  unint64_t v102;
  int v103;
  int v104;
  unint64_t *v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  id *v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  id v113;
  unint64_t v114;
  id v115;
  uint64_t *v116;
  const void *v117;
  char *v118;
  char *v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  int v123;
  unsigned int v124;
  unint64_t v125;
  unint64_t v126;
  int v127;
  int v128;
  unint64_t *v129;
  unint64_t v130;
  unsigned int v131;
  _BOOL4 v132;
  unint64_t v133;
  BOOL v134;
  uint64_t v135;
  int v136;
  uint64_t v137;
  int *v138;
  int v139;
  int v140;
  int v141;
  uint64_t v142;
  int v143;
  unsigned int v144;
  unsigned int v145;
  unsigned int v146;
  unsigned int v147;
  unsigned int *v148;
  unsigned int v149;
  int v150;
  int v151;
  int v152;
  int *v153;
  unsigned int v154;
  int v155;
  int v156;
  int v157;
  int *v158;
  unsigned __int32 v159;
  __int32 v160;
  __int32 v161;
  __int32 v162;
  int *v163;
  unsigned __int32 v164;
  __int32 v165;
  _DWORD *v166;
  void *v167;
  uint64_t v168;
  unsigned int *v169;
  unsigned int v170;
  BOOL v171;
  unsigned int v172;
  uint64_t v173;
  int *v174;
  unsigned int v175;
  BOOL v176;
  int v177;
  uint64_t v178;
  int *v179;
  unsigned int v180;
  BOOL v181;
  int v182;
  uint64_t v183;
  int *v184;
  unsigned __int32 v185;
  BOOL v186;
  int v187;
  uint64_t v188;
  int *v189;
  unsigned __int32 v190;
  BOOL v191;
  int v192;
  std::__shared_weak_count *v193;
  unint64_t *v194;
  unint64_t v195;
  unint64_t *v196;
  unint64_t v197;
  uint64_t **v198;
  id v199;
  id v200;
  uint64_t v201;
  uint64_t v202;
  __int32 v203;
  __int32 v204;
  void *v205;
  unsigned int *__p;
  id v207;
  id v209;
  id v210;
  unint64_t v211;
  unsigned int v212;
  int v213;
  int v214;
  int32x2_t v215;
  int v216;
  int v217;
  int v218;
  int v219;
  __int32 v220;
  unsigned int v221;
  int v222;
  int v223;
  int32x2_t v224;
  int v225;
  int v226;
  int v227;
  int v228;
  __int32 v229;
  unsigned int v230;
  int v231;
  int v232;
  int32x2_t v233;
  int v234;
  int v235;
  int v236;
  int v237;
  __int32 v238;
  unsigned int v239;
  unsigned int v240;
  unsigned int v241;
  int32x2_t v242;
  int v243;
  int v244;
  int v245;
  int v246;
  __int32 v247;
  char *v248;
  std::__shared_weak_count *v249;
  __int128 v250;
  __int128 v251;
  _DWORD v252[3];
  int32x2_t v253;
  int v254;
  int v255;
  int v256;
  int v257;
  int v258;
  id v259[2];
  int *v260;
  std::__shared_weak_count *v261;
  char *v262;
  std::__shared_weak_count *v263;
  void *v264;
  void *v265;
  char v266[20];
  int v267;

  if (a4[1] != *a4)
  {
    v5 = *a3;
    if (a3[1] != *a3)
    {
      v6 = a4;
      if (!*(_QWORD *)(a1 + 296))
      {
        (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)a1 + 80))(a1, a3, a4);
        if (!*(_QWORD *)(a1 + 296))
          Espresso::throw_exception_selector<Espresso::generic_error>("Kernel not found");
        v5 = *a3;
      }
      if (*(_QWORD *)v5
      {
        v9 = v8;
        v10 = *(std::__shared_weak_count **)(v5 + 8);
        v260 = v8;
        v261 = v10;
        if (v10)
        {
          p_shared_owners = (unint64_t *)&v10->__shared_owners_;
          do
            v12 = __ldxr(p_shared_owners);
          while (__stxr(v12 + 1, p_shared_owners));
        }
      }
      else
      {
        v10 = 0;
        v9 = 0;
        v260 = 0;
        v261 = 0;
      }
      v199 = *((id *)v9 + 21);
      Espresso::temporary_mtl_encoder::temporary_mtl_encoder((uint64_t)v259, *a2);
      v200 = v259[0];
      v14 = *v6;
      v13 = v6[1];
      v15 = (*(uint64_t (**)(int *))(*(_QWORD *)v9 + 32))(v9);
      v16 = v9[3];
      v17 = v9[2];
      v252[0] = v9[2];
      v252[1] = v16;
      v18 = v9[4];
      v19 = vmax_s32(*(int32x2_t *)(v9 + 5), (int32x2_t)0x100000001);
      v253 = v19;
      v252[2] = v18;
      v254 = 1;
      if ((v15 - 1) >= 0xD)
      {
        v21 = *((_QWORD *)v9 + 31) + *((_QWORD *)v9 + 31) * ((unint64_t)(4 * v17 - 1) / *((_QWORD *)v9 + 31));
        v20 = 4;
      }
      else
      {
        v20 = qword_191AC0CA0[v15 - 1];
        v21 = *((_QWORD *)v9 + 31) + *((_QWORD *)v9 + 31) * ((v20 * v17 - 1) / *((_QWORD *)v9 + 31));
      }
      v255 = v21 / v20;
      v256 = v16 * v255;
      v257 = v16 * v255 * v18;
      v258 = v257 * v19.i32[0];
      if (v13 != v14)
      {
        v22 = 0;
        v211 = ((char *)v13 - (char *)v14) >> 4;
        v198 = v6;
        do
        {
          v250 = 0u;
          v251 = 0u;
          v23 = *v6;
          v24 = (const void *)(*v6)[2 * v22];
          if (v24
          {
            v26 = v25;
            v248 = v25;
            v27 = (std::__shared_weak_count *)v23[2 * v22 + 1];
            v249 = v27;
            if (v27)
            {
              v28 = (unint64_t *)&v27->__shared_owners_;
              do
                v29 = __ldxr(v28);
              while (__stxr(v29 + 1, v28));
            }
          }
          else
          {
            v26 = 0;
            v248 = 0;
            v249 = 0;
          }
          v207 = *((id *)v26 + 21);
          v30 = *((id *)v26 + 21);
          v210 = *((id *)v26 + 21);
          v209 = *((id *)v26 + 21);
          v31 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*v6)[2 * v22] + 32))((*v6)[2 * v22]);
          v32 = *((_DWORD *)v26 + 2);
          if ((v31 - 1) >= 0xD)
          {
            v34 = v26 + 248;
            v35 = *((_QWORD *)v26 + 31)
                + *((_QWORD *)v26 + 31) * ((unint64_t)(4 * (int)v32 - 1) / *((_QWORD *)v26 + 31));
            v33 = 4;
          }
          else
          {
            v33 = qword_191AC0CA0[v31 - 1];
            v34 = v26 + 248;
            v35 = *((_QWORD *)v26 + 31) + *((_QWORD *)v26 + 31) * ((v33 * (int)v32 - 1) / *((_QWORD *)v26 + 31));
          }
          v36 = *((_DWORD *)v26 + 3);
          v37 = *((_DWORD *)v26 + 4);
          v242 = vmax_s32(*(int32x2_t *)(v26 + 20), (int32x2_t)0x100000001);
          v239 = v32;
          v240 = v36;
          v241 = v37;
          v243 = 1;
          v244 = v35 / v33;
          v245 = v36 * v244;
          v246 = v36 * v244 * v37;
          v247 = v246 * v242.i32[0];
          v38 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*v6)[2 * v22] + 32))((*v6)[2 * v22]);
          v39 = *((_DWORD *)v26 + 2);
          if ((v38 - 1) >= 0xD)
          {
            v41 = *v34 + *v34 * ((unint64_t)(4 * (int)v39 - 1) / *v34);
            v40 = 4;
          }
          else
          {
            v40 = qword_191AC0CA0[v38 - 1];
            v41 = *v34 + *v34 * ((v40 * (int)v39 - 1) / *v34);
          }
          v42 = *((_DWORD *)v26 + 3);
          v43 = *((_DWORD *)v26 + 4);
          v233 = vmax_s32(*(int32x2_t *)(v26 + 20), (int32x2_t)0x100000001);
          v230 = v39;
          v231 = v42;
          v232 = v43;
          v234 = 1;
          v235 = v41 / v40;
          v236 = v42 * v235;
          v237 = v42 * v235 * v43;
          v238 = v237 * v233.i32[0];
          v44 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*v6)[2 * v22] + 32))((*v6)[2 * v22]);
          v45 = *((_DWORD *)v26 + 2);
          if ((v44 - 1) >= 0xD)
          {
            v47 = *v34 + *v34 * ((unint64_t)(4 * (int)v45 - 1) / *v34);
            v46 = 4;
          }
          else
          {
            v46 = qword_191AC0CA0[v44 - 1];
            v47 = *v34 + *v34 * ((v46 * (int)v45 - 1) / *v34);
          }
          v48 = *((_DWORD *)v26 + 3);
          v49 = *((_DWORD *)v26 + 4);
          v224 = vmax_s32(*(int32x2_t *)(v26 + 20), (int32x2_t)0x100000001);
          v221 = v45;
          v222 = v48;
          v223 = v49;
          v225 = 1;
          v226 = v47 / v46;
          v227 = v48 * v226;
          v228 = v48 * v226 * v49;
          v229 = v228 * v224.i32[0];
          v50 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*v6)[2 * v22] + 32))((*v6)[2 * v22]);
          v51 = *((_DWORD *)v26 + 2);
          if ((v50 - 1) >= 0xD)
          {
            v53 = *v34 + *v34 * ((unint64_t)(4 * (int)v51 - 1) / *v34);
            v52 = 4;
          }
          else
          {
            v52 = qword_191AC0CA0[v50 - 1];
            v53 = *v34 + *v34 * ((v52 * (int)v51 - 1) / *v34);
          }
          v54 = *((_DWORD *)v26 + 3);
          v55 = *((_DWORD *)v26 + 4);
          v215 = vmax_s32(*(int32x2_t *)(v26 + 20), (int32x2_t)0x100000001);
          v212 = v51;
          v213 = v54;
          v214 = v55;
          v216 = 1;
          v217 = v53 / v52;
          v218 = v54 * v217;
          v219 = v54 * v217 * v55;
          v220 = v219 * v215.i32[0];
          if (v211 >= 2)
          {
            v59 = v22 + 1;
            v60 = (uint64_t)&(*v6)[2 * v22 + 2];
            v62 = *(std::__shared_weak_count **)(v60 + 8);
            if (v62)
            {
              v63 = (unint64_t *)&v62->__shared_owners_;
              do
                v64 = __ldxr(v63);
              while (__stxr(v64 + 1, v63));
              v65 = v61[21];

              do
                v66 = __ldaxr(v63);
              while (__stlxr(v66 - 1, v63));
              if (!v66)
              {
                ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
                std::__shared_weak_count::__release_weak(v62);
              }
              v30 = v65;
            }
            else
            {
              v67 = v61[21];

              v30 = v67;
            }
            v68 = *v6;
            v69 = (const void *)(*v6)[2 * v59];
            if (v69
            {
              v71 = v70;
              v262 = v70;
              v72 = (std::__shared_weak_count *)v68[2 * v59 + 1];
              v263 = v72;
              if (v72)
              {
                v73 = (unint64_t *)&v72->__shared_owners_;
                do
                  v74 = __ldxr(v73);
                while (__stxr(v74 + 1, v73));
                v68 = *v6;
              }
            }
            else
            {
              v72 = 0;
              v71 = 0;
              v262 = 0;
              v263 = 0;
            }
            v75 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v68[2 * v22] + 32))(v68[2 * v22]);
            v76 = *((_DWORD *)v71 + 2);
            if ((v75 - 1) >= 0xD)
            {
              v78 = *((_QWORD *)v71 + 31)
                  + *((_QWORD *)v71 + 31) * ((unint64_t)(4 * (int)v76 - 1) / *((_QWORD *)v71 + 31));
              v77 = 4;
            }
            else
            {
              v77 = qword_191AC0CA0[v75 - 1];
              v78 = *((_QWORD *)v71 + 31) + *((_QWORD *)v71 + 31) * ((v77 * (int)v76 - 1) / *((_QWORD *)v71 + 31));
            }
            v79 = *((_DWORD *)v71 + 3);
            v80 = *((_DWORD *)v71 + 4);
            v233 = vmax_s32(*(int32x2_t *)(v71 + 20), (int32x2_t)0x100000001);
            v230 = v76;
            v231 = v79;
            v232 = v80;
            v234 = 1;
            v235 = v78 / v77;
            v236 = v79 * v235;
            v237 = v79 * v235 * v80;
            v238 = v237 * v233.i32[0];
            if (v72)
            {
              v81 = (unint64_t *)&v72->__shared_owners_;
              do
                v82 = __ldaxr(v81);
              while (__stlxr(v82 - 1, v81));
              if (!v82)
              {
                ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
                std::__shared_weak_count::__release_weak(v72);
              }
            }
            if (v211 < 3)
            {
              v56 = 0;
              v57 = 0;
              v58 = 2;
            }
            else
            {
              v83 = v22 + 2;
              v84 = (uint64_t)&(*v6)[2 * v22 + 4];
              v86 = *(std::__shared_weak_count **)(v84 + 8);
              if (v86)
              {
                v87 = (unint64_t *)&v86->__shared_owners_;
                do
                  v88 = __ldxr(v87);
                while (__stxr(v88 + 1, v87));
                v89 = v85[21];

                do
                  v90 = __ldaxr(v87);
                while (__stlxr(v90 - 1, v87));
                if (!v90)
                {
                  ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
                  std::__shared_weak_count::__release_weak(v86);
                }
                v210 = v89;
              }
              else
              {
                v91 = v85[21];

                v210 = v91;
              }
              v92 = *v6;
              v93 = (const void *)(*v6)[2 * v83];
              if (v93
              {
                v95 = v94;
                v262 = v94;
                v96 = (std::__shared_weak_count *)v92[2 * v83 + 1];
                v263 = v96;
                if (v96)
                {
                  v97 = (unint64_t *)&v96->__shared_owners_;
                  do
                    v98 = __ldxr(v97);
                  while (__stxr(v98 + 1, v97));
                  v92 = *v6;
                }
              }
              else
              {
                v96 = 0;
                v95 = 0;
                v262 = 0;
                v263 = 0;
              }
              v99 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v92[2 * v22] + 32))(v92[2 * v22]);
              v100 = *((_DWORD *)v95 + 2);
              if ((v99 - 1) >= 0xD)
              {
                v102 = *((_QWORD *)v95 + 31)
                     + *((_QWORD *)v95 + 31) * ((unint64_t)(4 * (int)v100 - 1) / *((_QWORD *)v95 + 31));
                v101 = 4;
              }
              else
              {
                v101 = qword_191AC0CA0[v99 - 1];
                v102 = *((_QWORD *)v95 + 31) + *((_QWORD *)v95 + 31) * ((v101 * (int)v100 - 1) / *((_QWORD *)v95 + 31));
              }
              v103 = *((_DWORD *)v95 + 3);
              v104 = *((_DWORD *)v95 + 4);
              v224 = vmax_s32(*(int32x2_t *)(v95 + 20), (int32x2_t)0x100000001);
              v221 = v100;
              v222 = v103;
              v223 = v104;
              v225 = 1;
              v226 = v102 / v101;
              v227 = v103 * v226;
              v228 = v103 * v226 * v104;
              v229 = v228 * v224.i32[0];
              if (v96)
              {
                v105 = (unint64_t *)&v96->__shared_owners_;
                do
                  v106 = __ldaxr(v105);
                while (__stlxr(v106 - 1, v105));
                if (!v106)
                {
                  ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
                  std::__shared_weak_count::__release_weak(v96);
                }
              }
              if (v211 < 4)
              {
                v56 = 1;
                v57 = 1;
                v58 = 3;
              }
              else
              {
                v107 = v22 + 3;
                v108 = (uint64_t)&(*v6)[2 * v22 + 6];
                v110 = *(std::__shared_weak_count **)(v108 + 8);
                if (v110)
                {
                  v111 = (unint64_t *)&v110->__shared_owners_;
                  do
                    v112 = __ldxr(v111);
                  while (__stxr(v112 + 1, v111));
                  v113 = v109[21];

                  do
                    v114 = __ldaxr(v111);
                  while (__stlxr(v114 - 1, v111));
                  if (!v114)
                  {
                    ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
                    std::__shared_weak_count::__release_weak(v110);
                  }
                  v209 = v113;
                }
                else
                {
                  v115 = v109[21];

                  v209 = v115;
                }
                v116 = *v6;
                v117 = (const void *)(*v6)[2 * v107];
                if (v117
                {
                  v119 = v118;
                  v262 = v118;
                  v120 = (std::__shared_weak_count *)v116[2 * v107 + 1];
                  v263 = v120;
                  if (v120)
                  {
                    v121 = (unint64_t *)&v120->__shared_owners_;
                    do
                      v122 = __ldxr(v121);
                    while (__stxr(v122 + 1, v121));
                    v116 = *v6;
                  }
                }
                else
                {
                  v120 = 0;
                  v119 = 0;
                  v262 = 0;
                  v263 = 0;
                }
                v123 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v116[2 * v22] + 32))(v116[2 * v22]);
                v124 = *((_DWORD *)v119 + 2);
                if ((v123 - 1) >= 0xD)
                {
                  v126 = *((_QWORD *)v119 + 31)
                       + *((_QWORD *)v119 + 31) * ((unint64_t)(4 * (int)v124 - 1) / *((_QWORD *)v119 + 31));
                  v125 = 4;
                }
                else
                {
                  v125 = qword_191AC0CA0[v123 - 1];
                  v126 = *((_QWORD *)v119 + 31)
                       + *((_QWORD *)v119 + 31) * ((v125 * (int)v124 - 1) / *((_QWORD *)v119 + 31));
                }
                v127 = *((_DWORD *)v119 + 3);
                v128 = *((_DWORD *)v119 + 4);
                v215 = vmax_s32(*(int32x2_t *)(v119 + 20), (int32x2_t)0x100000001);
                v212 = v124;
                v213 = v127;
                v214 = v128;
                v216 = 1;
                v217 = v126 / v125;
                v218 = v127 * v217;
                v219 = v127 * v217 * v128;
                v220 = v219 * v215.i32[0];
                if (v120)
                {
                  v129 = (unint64_t *)&v120->__shared_owners_;
                  do
                    v130 = __ldaxr(v129);
                  while (__stlxr(v130 - 1, v129));
                  if (!v130)
                  {
                    ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
                    std::__shared_weak_count::__release_weak(v120);
                  }
                }
                v57 = 0;
                v56 = 1;
                v58 = 4;
              }
            }
          }
          else
          {
            v56 = 0;
            v57 = 0;
            v58 = 1;
          }
          LODWORD(v250) = v58;
          Espresso::abstract_blob_container::shape((char *)&v262, **v6);
          Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v266, (const Espresso::layer_shape *)&v262, 0);
          if (v264)
          {
            v265 = v264;
            operator delete(v264);
          }
          v131 = *(_DWORD *)(a1 + 280) + (v267 & (*(int *)(a1 + 280) >> 31));
          if (v267)
            v132 = *(_BYTE *)(a1 + 284) == 0;
          else
            v132 = 1;
          if (v132)
            v133 = v131;
          else
            v133 = v267 + ~v131;
          v134 = v267 >= v133 || *(_BYTE *)(a1 + 284) == 0;
          if ((v133 & 0x80000000) != 0 || !v134)
            Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Invalid value of the argument 'axis'.");
          v135 = *(_QWORD *)(a1 + 304);
          v136 = 0;
          if (v22)
          {
            v137 = 8 * v22;
            v138 = *(int **)(a1 + 304);
            do
            {
              v139 = *v138;
              v138 += 2;
              v136 += v139;
              v137 -= 8;
            }
            while (v137);
          }
          DWORD1(v250) = v133;
          v140 = 1;
          switch((int)v133)
          {
            case 0:
              break;
            case 1:
              v140 = v255;
              break;
            case 2:
              v140 = v256;
              break;
            case 3:
              v140 = v257;
              break;
            case 4:
              v140 = v258;
              break;
            default:
              Espresso::throw_exception_selector<Espresso::generic_error>("axis not supported in general_concat mpsbuffers.");
          }
          DWORD2(v251) = v140;
          LODWORD(v250) = v58;
          DWORD2(v250) = v140 * v136;
          if (v211 >= 2)
          {
            v141 = v136 + *(_DWORD *)(v135 + 8 * v22);
            HIDWORD(v250) = v140 * v141;
            if (v56)
            {
              v142 = v135 + 8 * v22;
              v143 = v141 + *(_DWORD *)(v142 + 8);
              LODWORD(v251) = v140 * v143;
              if ((v57 & 1) == 0)
                DWORD1(v251) = v140 * (v143 + *(_DWORD *)(v142 + 16));
            }
          }
          v144 = v239;
          v145 = v230;
          v146 = v221;
          v147 = v212;
          v148 = (unsigned int *)operator new(0x10uLL);
          v202 = v22;
          *v148 = v144;
          v148[1] = v145;
          v148[2] = v146;
          v148[3] = v147;
          __p = v148;
          v149 = v240;
          v150 = v231;
          v151 = v222;
          v152 = v213;
          v153 = (int *)operator new(0x10uLL);
          v201 = v58;
          v205 = v30;
          *v153 = v149;
          v153[1] = v150;
          v153[2] = v151;
          v153[3] = v152;
          v154 = v241;
          v155 = v232;
          v156 = v223;
          v157 = v214;
          v158 = (int *)operator new(0x10uLL);
          *v158 = v154;
          v158[1] = v155;
          v158[2] = v156;
          v158[3] = v157;
          v159 = v242.i32[0];
          v160 = v233.i32[0];
          v161 = v224.i32[0];
          v162 = v215.i32[0];
          v163 = (int *)operator new(0x10uLL);
          *v163 = v159;
          v163[1] = v160;
          v163[2] = v161;
          v163[3] = v162;
          v164 = v242.u32[1];
          v165 = v233.i32[1];
          v203 = v215.i32[1];
          v204 = v224.i32[1];
          v166 = operator new(0x10uLL);
          v167 = v166;
          *v166 = v164;
          v166[1] = v165;
          v168 = 1;
          v169 = __p;
          v166[2] = v204;
          v166[3] = v203;
          do
          {
            v170 = __p[v168];
            v171 = v144 >= v170;
            if (v144 <= v170)
              v144 = __p[v168];
            if (!v171)
              v169 = &__p[v168];
            ++v168;
          }
          while (v168 != 4);
          v172 = *v169;
          v173 = 1;
          v174 = v153;
          do
          {
            v175 = v153[v173];
            v176 = v149 >= v175;
            if (v149 <= v175)
              v149 = v153[v173];
            if (!v176)
              v174 = &v153[v173];
            ++v173;
          }
          while (v173 != 4);
          v177 = *v174;
          v178 = 1;
          v179 = v158;
          do
          {
            v180 = v158[v178];
            v181 = v154 >= v180;
            if (v154 <= v180)
              v154 = v158[v178];
            if (!v181)
              v179 = &v158[v178];
            ++v178;
          }
          while (v178 != 4);
          v182 = *v179;
          v183 = 1;
          v184 = v163;
          do
          {
            v185 = v163[v183];
            v186 = v159 >= v185;
            if (v159 <= v185)
              v159 = v163[v183];
            if (!v186)
              v184 = &v163[v183];
            ++v183;
          }
          while (v183 != 4);
          v187 = *v184;
          v188 = 1;
          v189 = v166;
          do
          {
            v190 = v166[v188];
            v191 = v164 >= v190;
            if (v164 <= v190)
              v164 = v166[v188];
            if (!v191)
              v189 = &v166[v188];
            ++v188;
          }
          while (v188 != 4);
          v192 = *v189;
          objc_msgSend(v200, "setComputePipelineState:", *(_QWORD *)(a1 + 296));
          objc_msgSend(v200, "setBuffer:offset:atIndex:", v199, 0, 0);
          objc_msgSend(v200, "setBuffer:offset:atIndex:", v207, 0, 1);
          objc_msgSend(v200, "setBuffer:offset:atIndex:", v205, 0, 2);
          objc_msgSend(v200, "setBuffer:offset:atIndex:", v210, 0, 3);
          objc_msgSend(v200, "setBuffer:offset:atIndex:", v209, 0, 4);
          objc_msgSend(v200, "setBytes:length:atIndex:", v252, 40, 5);
          objc_msgSend(v200, "setBytes:length:atIndex:", &v239, 40, 6);
          objc_msgSend(v200, "setBytes:length:atIndex:", &v230, 40, 7);
          objc_msgSend(v200, "setBytes:length:atIndex:", &v221, 40, 8);
          objc_msgSend(v200, "setBytes:length:atIndex:", &v212, 40, 9);
          objc_msgSend(v200, "setBytes:length:atIndex:", &v250, 32, 10);
          operator delete(v167);
          operator delete(v163);
          operator delete(v158);
          operator delete(v153);
          operator delete(__p);

          v193 = v249;
          v6 = v198;
          if (v249)
          {
            v194 = (unint64_t *)&v249->__shared_owners_;
            do
              v195 = __ldaxr(v194);
            while (__stlxr(v195 - 1, v194));
            if (!v195)
            {
              ((void (*)(std::__shared_weak_count *))v193->__on_zero_shared)(v193);
              std::__shared_weak_count::__release_weak(v193);
            }
          }
          v22 = v201 + v202;
          v211 -= v201;
        }
        while (v211);
        v10 = v261;
      }

      Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(v259);
      if (v10)
      {
        v196 = (unint64_t *)&v10->__shared_owners_;
        do
          v197 = __ldaxr(v196);
        while (__stlxr(v197 - 1, v196));
        if (!v197)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
    }
  }
}

void sub_19145A7B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  uint64_t v43;

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder((id *)(v43 - 232));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v43 - 216);
  _Unwind_Resume(a1);
}

void Espresso::MPSBuffersEngine::general_concat_kernel::blob_options(Espresso::MPSBuffersEngine::general_concat_kernel *this@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  const void *v4;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 v17;
  _QWORD *v18;
  std::__shared_weak_count *v19;

  *a3 = 0;
  a3[1] = 0;
  v4 = (const void *)*((_QWORD *)this + 1);
  if (v4)
  {
    if (v7)
    {
      v8 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
      v18 = v7;
      v19 = v8;
      if (v8)
      {
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldxr(p_shared_owners);
        while (__stxr(v10 + 1, p_shared_owners));
      }
      if (a2)
      {
        v11 = operator new(0x70uLL);
        v11[1] = 0;
        v11[2] = 0;
        *v11 = &off_1E2DBE228;
        *((_OWORD *)v11 + 4) = 0u;
        *((_OWORD *)v11 + 5) = 0u;
        *((_OWORD *)v11 + 2) = 0u;
        *((_OWORD *)v11 + 3) = 0u;
        v11[3] = &off_1E2D9B4D8;
        *((_DWORD *)v11 + 12) = 1065353216;
        v11[7] = 0x1FFFFFFFFLL;
        v11[12] = 0;
        v11[13] = 0;
        v11[8] = 0;
        v11[9] = 0;
        *((_BYTE *)v11 + 88) = 0;
        v11[10] = 0;
        *(_QWORD *)&v17 = v11 + 3;
        *((_QWORD *)&v17 + 1) = v11;
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)a3, &v17);
        v12 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
        if (*((_QWORD *)&v17 + 1))
        {
          v13 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 - 1, v13));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(*a3 + 72), v18[28], v18[29]);
        v8 = v19;
      }
      if (v8)
      {
        v15 = (unint64_t *)&v8->__shared_owners_;
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
  }
}

void sub_19145AA3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v3);
  _Unwind_Resume(a1);
}

void Espresso::MPSBuffersEngine::general_concat_kernel::on_resized(Espresso::MPSBuffersEngine::general_concat_kernel *this, Espresso::layer_data *a2, uint64_t **a3)
{
  void *v6;
  uint64_t v7;
  uint64_t *v8;
  void *v9;
  void *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  const void *v19;
  Espresso::context_metal *v20;
  Espresso::context_metal *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  __CFString *v25;
  uint64_t v26;
  void *v27;
  unsigned int v28;
  _BOOL4 v29;
  unint64_t v30;
  BOOL v31;
  _QWORD *v32;
  void *v33;
  uint64_t *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::runtime_error *exception;
  __int128 v58;
  uint64_t v59;
  void *__p;
  void *v61;
  char v62[20];
  int v63;
  Espresso::context_metal *v64;
  std::__shared_weak_count *v65;
  void *v66;
  std::__shared_weak_count *v67;
  void *v68;
  std::__shared_weak_count *v69;

  v6 = (void *)*((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = 0;

  v7 = *(_QWORD *)a2;
  if (*((_QWORD *)a2 + 1) != *(_QWORD *)a2)
  {
    v8 = *a3;
    if (a3[1] != *a3)
    {
      if (*(_QWORD *)v7
      {
        v10 = v9;
        v11 = *(std::__shared_weak_count **)(v7 + 8);
        v68 = v9;
        v69 = v11;
        if (v11)
        {
          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          do
            v13 = __ldxr(p_shared_owners);
          while (__stxr(v13 + 1, p_shared_owners));
          v8 = *a3;
        }
      }
      else
      {
        v10 = 0;
        v68 = 0;
        v69 = 0;
      }
      if (*v8
      {
        v15 = v14;
        v16 = v8[1];
        v66 = v14;
        v67 = (std::__shared_weak_count *)v16;
        if (v16)
        {
          v17 = (unint64_t *)(v16 + 8);
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
      }
      else
      {
        v15 = 0;
        v66 = 0;
        v67 = 0;
      }
      v19 = (const void *)*((_QWORD *)this + 1);
      if (!v19
      {
        v64 = 0;
        v65 = 0;
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
        exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
      }
      v21 = v20;
      v22 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
      v64 = v20;
      v65 = v22;
      if (v22)
      {
        v23 = (unint64_t *)&v22->__shared_owners_;
        do
          v24 = __ldxr(v23);
        while (__stxr(v24 + 1, v23));
      }
      if (v10 && v15)
      {
        if ((*(unsigned int (**)(void *))(*(_QWORD *)v15 + 32))(v15))
        {
          if ((*(unsigned int (**)(void *))(*(_QWORD *)v15 + 32))(v15) != 1)
            Espresso::throw_exception_selector<Espresso::generic_error>("unsupported compute path in general_concat kernel");
          v25 = CFSTR("general_concat_f16_buffers");
        }
        else
        {
          v25 = CFSTR("general_concat_f32_buffers");
        }
        Espresso::context_metal::kernel_for_function(v21, &v25->isa);
        v26 = objc_claimAutoreleasedReturnValue();
        v27 = (void *)*((_QWORD *)this + 37);
        *((_QWORD *)this + 37) = v26;

        Espresso::abstract_blob_container::shape((char *)&v58, **a3);
        Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v62, (const Espresso::layer_shape *)&v58, 0);
        if (__p)
        {
          v61 = __p;
          operator delete(__p);
        }
        v28 = *((_DWORD *)this + 70) + (v63 & (*((int *)this + 70) >> 31));
        if (v63)
          v29 = *((_BYTE *)this + 284) == 0;
        else
          v29 = 1;
        if (v29)
          v30 = v28;
        else
          v30 = v63 + ~v28;
        v31 = v63 >= v30 || *((_BYTE *)this + 284) == 0;
        if ((v30 & 0x80000000) != 0 || !v31)
          Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Invalid value of the argument 'axis'.");
        std::vector<unsigned long>::vector(&v58, ((char *)a3[1] - (char *)*a3) >> 4);
        v32 = (_QWORD *)((char *)this + 304);
        v33 = (void *)*((_QWORD *)this + 38);
        if (v33)
        {
          *((_QWORD *)this + 39) = v33;
          operator delete(v33);
          *v32 = 0;
          *((_QWORD *)this + 39) = 0;
          *((_QWORD *)this + 40) = 0;
        }
        *((_OWORD *)this + 19) = v58;
        *((_QWORD *)this + 40) = v59;
        switch((int)v30)
        {
          case 0:
            v34 = *a3;
            if (a3[1] != *a3)
            {
              v35 = 0;
              v36 = 0;
              do
              {
                Espresso::abstract_blob_container::shape((char *)&v58, v34[v35]);
                *(_QWORD *)(*v32 + 8 * v36) = (int)v58;
                if (__p)
                {
                  v61 = __p;
                  operator delete(__p);
                }
                ++v36;
                v34 = *a3;
                v35 += 2;
              }
              while (v36 < ((char *)a3[1] - (char *)*a3) >> 4);
            }
            break;
          case 1:
            v46 = *a3;
            if (a3[1] != *a3)
            {
              v47 = 0;
              v48 = 0;
              do
              {
                Espresso::abstract_blob_container::shape((char *)&v58, v46[v47]);
                *(_QWORD *)(*v32 + 8 * v48) = SDWORD1(v58);
                if (__p)
                {
                  v61 = __p;
                  operator delete(__p);
                }
                ++v48;
                v46 = *a3;
                v47 += 2;
              }
              while (v48 < ((char *)a3[1] - (char *)*a3) >> 4);
            }
            break;
          case 2:
            v40 = *a3;
            if (a3[1] != *a3)
            {
              v41 = 0;
              v42 = 0;
              do
              {
                Espresso::abstract_blob_container::shape((char *)&v58, v40[v41]);
                *(_QWORD *)(*v32 + 8 * v42) = SDWORD2(v58);
                if (__p)
                {
                  v61 = __p;
                  operator delete(__p);
                }
                ++v42;
                v40 = *a3;
                v41 += 2;
              }
              while (v42 < ((char *)a3[1] - (char *)*a3) >> 4);
            }
            break;
          case 3:
            v43 = *a3;
            if (a3[1] != *a3)
            {
              v44 = 0;
              v45 = 0;
              do
              {
                Espresso::abstract_blob_container::shape((char *)&v58, v43[v44]);
                *(_QWORD *)(*v32 + 8 * v45) = SHIDWORD(v58);
                if (__p)
                {
                  v61 = __p;
                  operator delete(__p);
                }
                ++v45;
                v43 = *a3;
                v44 += 2;
              }
              while (v45 < ((char *)a3[1] - (char *)*a3) >> 4);
            }
            break;
          case 4:
            v37 = *a3;
            if (a3[1] != *a3)
            {
              v38 = 0;
              v39 = 0;
              do
              {
                Espresso::abstract_blob_container::shape((char *)&v58, v37[v38]);
                *(_QWORD *)(*v32 + 8 * v39) = (int)v59;
                if (__p)
                {
                  v61 = __p;
                  operator delete(__p);
                }
                ++v39;
                v37 = *a3;
                v38 += 2;
              }
              while (v39 < ((char *)a3[1] - (char *)*a3) >> 4);
            }
            break;
          default:
            break;
        }
      }
      if (v22)
      {
        v49 = (unint64_t *)&v22->__shared_owners_;
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      v51 = v67;
      if (v67)
      {
        v52 = (unint64_t *)&v67->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v54 = v69;
      if (v69)
      {
        v55 = (unint64_t *)&v69->__shared_owners_;
        do
          v56 = __ldaxr(v55);
        while (__stlxr(v56 - 1, v55));
        if (!v56)
        {
          ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
          std::__shared_weak_count::__release_weak(v54);
        }
      }
    }
  }
}

void sub_19145AF9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  uint64_t v21;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v21 - 80);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v21 - 64);
  _Unwind_Resume(a1);
}

BOOL Espresso::MPSBuffersEngine::general_concat_kernel::is_valid_for_engine(uint64_t a1)
{
  return *(_BYTE *)(a1 + 285) == 0;
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::general_concat_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB98E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::general_concat_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB98E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::general_concat_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::MPSBuffersEngine::copy_kernel::~copy_kernel(id *this)
{

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::MPSBuffersEngine::copy_kernel::__launch(uint64_t a1, uint64_t a2, const void ***a3, const void ***a4)
{
  const void **v7;
  const void *v8;
  id *v9;
  id *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  const void **v14;
  const void *v15;
  id *v16;
  id *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  void *v25;
  const void *v26;
  id *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  id v31;
  unint64_t v32;
  uint64_t v33;
  void *v34;
  double v35;
  double v36;
  double v37;
  uint64_t v38;
  id v39;
  id v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  std::runtime_error *exception;
  id *v48;
  _QWORD *v49;
  std::__shared_weak_count *v50;
  id *v51;
  std::__shared_weak_count *v52;
  id *v53;
  std::__shared_weak_count *v54;

  v7 = *a3;
  v8 = **a3;
  if (v8
  {
    v10 = v9;
    v11 = (std::__shared_weak_count *)v7[1];
    v53 = v9;
    v54 = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }
  }
  else
  {
    v10 = 0;
    v53 = 0;
    v54 = 0;
  }
  v14 = *a4;
  v15 = **a4;
  if (v15
  {
    v17 = v16;
    v18 = (std::__shared_weak_count *)v14[1];
    v51 = v16;
    v52 = v18;
    if (v18)
    {
      v19 = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
  }
  else
  {
    v17 = 0;
    v51 = 0;
    v52 = 0;
  }
  if (*(_QWORD *)a2
  {
    v22 = *(std::__shared_weak_count **)(a2 + 8);
    v49 = v21;
    v50 = v22;
    if (v22)
    {
      v23 = (unint64_t *)&v22->__shared_owners_;
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
    }
  }
  else
  {
    v21 = 0;
    v49 = 0;
    v50 = 0;
  }
  v25 = *(void **)(a1 + 288);
  if (!v25)
  {
    *(_DWORD *)(a1 + 296) = 2;
    v26 = *(const void **)(a1 + 8);
    if (!v26
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
      exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
    }
    v28 = *(std::__shared_weak_count **)(a1 + 16);
    v48 = v27;
    if (v28)
    {
      v29 = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
      v31 = v27[18];
      do
        v32 = __ldaxr(v29);
      while (__stlxr(v32 - 1, v29));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    else
    {
      v31 = v27[18];
    }
    v33 = objc_msgSend(objc_alloc(MEMORY[0x1E0CC6F28]), "initWithDevice:", v31, v48, v28);
    v34 = *(void **)(a1 + 288);
    *(_QWORD *)(a1 + 288) = v33;

    LODWORD(v35) = 1.0;
    LODWORD(v36) = 0;
    LODWORD(v37) = 0;
    objc_msgSend(*(id *)(a1 + 288), "setNeuronType:parameterA:parameterB:parameterC:", *(unsigned int *)(a1 + 296), v35, v36, v37);

    v25 = *(void **)(a1 + 288);
    v21 = v49;
    v17 = v51;
    v10 = v53;
  }
  v38 = v21[18];
  v39 = v17[25];
  v40 = v10[25];
  objc_msgSend(v25, "encodeToCommandBuffer:inputMatrix:biasVector:resultMatrix:", v38, v39, 0, v40);

  if (v50)
  {
    v41 = (unint64_t *)&v50->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  if (v52)
  {
    v43 = (unint64_t *)&v52->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  if (v54)
  {
    v45 = (unint64_t *)&v54->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
}

void sub_19145B430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void Espresso::MPSBuffersEngine::copy_kernel::blob_options(Espresso::MPSBuffersEngine::copy_kernel *this@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  const void *v4;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 v17;
  _QWORD *v18;
  std::__shared_weak_count *v19;

  *a3 = 0;
  a3[1] = 0;
  v4 = (const void *)*((_QWORD *)this + 1);
  if (v4)
  {
    if (v7)
    {
      v8 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
      v18 = v7;
      v19 = v8;
      if (v8)
      {
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldxr(p_shared_owners);
        while (__stxr(v10 + 1, p_shared_owners));
      }
      if (a2)
      {
        v11 = operator new(0x70uLL);
        v11[1] = 0;
        v11[2] = 0;
        *v11 = &off_1E2DBE228;
        *((_OWORD *)v11 + 4) = 0u;
        *((_OWORD *)v11 + 5) = 0u;
        *((_OWORD *)v11 + 2) = 0u;
        *((_OWORD *)v11 + 3) = 0u;
        v11[3] = &off_1E2D9B4D8;
        *((_DWORD *)v11 + 12) = 1065353216;
        v11[7] = 0x1FFFFFFFFLL;
        v11[12] = 0;
        v11[13] = 0;
        v11[8] = 0;
        v11[9] = 0;
        *((_BYTE *)v11 + 88) = 0;
        v11[10] = 0;
        *(_QWORD *)&v17 = v11 + 3;
        *((_QWORD *)&v17 + 1) = v11;
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)a3, &v17);
        v12 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
        if (*((_QWORD *)&v17 + 1))
        {
          v13 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 - 1, v13));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(*a3 + 72), v18[28], v18[29]);
        v8 = v19;
      }
      if (v8)
      {
        v15 = (unint64_t *)&v8->__shared_owners_;
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
  }
}

void sub_19145B604(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v3);
  _Unwind_Resume(a1);
}

void Espresso::MPSBuffersEngine::split_kernel::~split_kernel(id *this)
{

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::MPSBuffersEngine::split_kernel::__launch(uint64_t a1, uint64_t *a2, uint64_t *a3, _QWORD **a4)
{
  uint64_t v4;
  id *v8;
  id *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  Espresso::context_metal *v13;
  int v14;
  uint64_t v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  int v25;
  int v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  id *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  id *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  id v49;
  unint64_t v50;
  uint64_t v51;
  id *v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  id *v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int *v65;
  int *v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  int v70;
  int v71;
  uint64_t v72;
  int v73;
  unint64_t v74;
  int v75;
  int v76;
  int v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  int v81;
  int v82;
  int v83;
  unint64_t *v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  id *v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  id v92;
  unint64_t v93;
  uint64_t v94;
  id v95;
  uint64_t v96;
  uint64_t v97;
  int *v98;
  int *v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  int v103;
  int v104;
  uint64_t v105;
  int v106;
  unint64_t v107;
  int v108;
  int v109;
  int v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  int v114;
  int v115;
  int v116;
  unint64_t *v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  id *v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  id v125;
  unint64_t v126;
  id v127;
  uint64_t v128;
  uint64_t v129;
  int *v130;
  int *v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  int v135;
  int v136;
  uint64_t v137;
  int v138;
  unint64_t v139;
  int v140;
  int v141;
  int v142;
  unint64_t v143;
  unint64_t v144;
  unint64_t v145;
  int v146;
  int v147;
  int v148;
  unint64_t *v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  id *v153;
  std::__shared_weak_count *v154;
  unint64_t *v155;
  unint64_t v156;
  id v157;
  unint64_t v158;
  id v159;
  uint64_t v160;
  uint64_t v161;
  int *v162;
  int *v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  int v167;
  int v168;
  uint64_t v169;
  int v170;
  unint64_t v171;
  int v172;
  int v173;
  int v174;
  unint64_t v175;
  unint64_t v176;
  unint64_t v177;
  int v178;
  int v179;
  int v180;
  unint64_t *v181;
  unint64_t v182;
  unint64_t *v183;
  unint64_t v184;
  id v185;
  unsigned int v187;
  int v188;
  int v189;
  id v190;
  id v191;
  id v192;
  _DWORD v193[4];
  int v194;
  int v195;
  int v196;
  int v197;
  int v198;
  int v199;
  int v200;
  unsigned int v201;
  int v202;
  int v203;
  _DWORD v204[4];
  int v205;
  int v206;
  int v207;
  int v208;
  int v209;
  int v210;
  int v211;
  unsigned int v212;
  int v213;
  int v214;
  _DWORD v215[4];
  int v216;
  int v217;
  int v218;
  int v219;
  int v220;
  int v221;
  int v222;
  unsigned int v223;
  int v224;
  int v225;
  _DWORD v226[4];
  int v227;
  int v228;
  int v229;
  int v230;
  int v231;
  int v232;
  int v233;
  unsigned int v234;
  int v235;
  int v236;
  uint64_t v237;
  uint64_t v238;
  int v239;
  _DWORD v240[2];
  unsigned int v241;
  int v242;
  int v243;
  int v244;
  int v245;
  int v246;
  unsigned int v247;
  unsigned int v248;
  int v249;
  unsigned int v250;
  int v251;
  int v252;
  id v253[2];
  id *v254;
  std::__shared_weak_count *v255;

  v4 = (uint64_t)*a4;
  if (a4[1] != *a4)
  {
    if (*(_QWORD *)v4
    {
      v9 = v8;
      v10 = *(std::__shared_weak_count **)(v4 + 8);
      v254 = v8;
      v255 = v10;
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldxr(p_shared_owners);
        while (__stxr(v12 + 1, p_shared_owners));
      }
    }
    else
    {
      v10 = 0;
      v9 = 0;
      v254 = 0;
      v255 = 0;
    }
    v185 = v9[21];
    v13 = *(Espresso::context_metal **)(a1 + 8);
    v14 = *(_DWORD *)(a1 + 344);
    if (v14 == 1)
    {
      Espresso::context_metal::kernel_for_function(v13, CFSTR("split_f16_buffers"));
      v15 = objc_claimAutoreleasedReturnValue();
    }
    else
    {
      if (v14)
        Espresso::throw_exception_selector<Espresso::generic_error>("unsupported compute path in split kernel");
      Espresso::context_metal::kernel_for_function(v13, CFSTR("split_f32_buffers"));
      v15 = objc_claimAutoreleasedReturnValue();
    }
    v16 = *(void **)(a1 + 336);
    *(_QWORD *)(a1 + 336) = v15;

    Espresso::temporary_mtl_encoder::temporary_mtl_encoder((uint64_t)v253, *a2);
    v17 = v253[0];
    v19 = *a3;
    v18 = a3[1];
    v20 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**a4 + 32))(**a4);
    v21 = *((_DWORD *)v9 + 3);
    v22 = *((int *)v9 + 2);
    v23 = *((_DWORD *)v9 + 4);
    v240[1] = *((_DWORD *)v9 + 2);
    v241 = v23 * v21;
    v245 = v21;
    v246 = v23;
    v24 = v9[31];
    v248 = v9[31];
    v26 = *((_DWORD *)v9 + 5);
    v25 = *((_DWORD *)v9 + 6);
    if (v26 <= 1)
      v26 = 1;
    if (v25 <= 1)
      v27 = 1;
    else
      v27 = *((_DWORD *)v9 + 6);
    v247 = v27 * v26;
    if ((v20 - 1) >= 0xD)
    {
      v29 = v24 + v24 * ((4 * v22 - 1) / v24);
      v28 = 4;
    }
    else
    {
      v28 = qword_191AC0CA0[v20 - 1];
      v29 = v24 + v24 * ((v28 * v22 - 1) / v24);
    }
    v30 = v29 / v28;
    v31 = v22 - 1;
    if ((int)v22 < 1)
      v31 = v22 + 2;
    v249 = (v31 >> 2) + 1;
    v250 = v30 >> 2;
    v32 = *((_DWORD *)v9 + 5);
    if (v32 <= 1)
      v33 = 1;
    else
      v33 = *((_DWORD *)v9 + 5);
    v240[0] = v30;
    v242 = v21 * v22;
    v243 = v23 * v21 * v22;
    v244 = v243 * v32;
    v251 = v33;
    v252 = v25;
    v34 = *(_DWORD *)(**a4 + 8);
    v35 = *(_DWORD *)(a1 + 280);
    v237 = 0;
    v238 = 0;
    v239 = 0;
    if (v18 != v19)
    {
      v36 = 0;
      v37 = (v18 - v19) >> 4;
      v187 = (v34 - 1) / v35 + 1;
      v188 = 0;
      do
      {
        v38 = *a3 + 16 * v36;
        v40 = *(std::__shared_weak_count **)(v38 + 8);
        if (v40)
        {
          v41 = (unint64_t *)&v40->__shared_owners_;
          do
            v42 = __ldxr(v41);
          while (__stxr(v42 + 1, v41));
          v190 = v39[21];
          do
            v43 = __ldaxr(v41);
          while (__stlxr(v43 - 1, v41));
          if (!v43)
          {
            ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
            std::__shared_weak_count::__release_weak(v40);
          }
        }
        else
        {
          v190 = v39[21];
        }
        v44 = *a3 + 16 * v36;
        v46 = *(std::__shared_weak_count **)(v44 + 8);
        if (v46)
        {
          v47 = (unint64_t *)&v46->__shared_owners_;
          do
            v48 = __ldxr(v47);
          while (__stxr(v48 + 1, v47));
          v49 = v45[21];
          do
            v50 = __ldaxr(v47);
          while (__stlxr(v50 - 1, v47));
          if (!v50)
          {
            ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
            std::__shared_weak_count::__release_weak(v46);
          }
        }
        else
        {
          v49 = v45[21];
        }
        v51 = *a3 + 16 * v36;
        v53 = *(std::__shared_weak_count **)(v51 + 8);
        if (v53)
        {
          v54 = (unint64_t *)&v53->__shared_owners_;
          do
            v55 = __ldxr(v54);
          while (__stxr(v55 + 1, v54));
          v192 = v52[21];
          do
            v56 = __ldaxr(v54);
          while (__stlxr(v56 - 1, v54));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
            std::__shared_weak_count::__release_weak(v53);
          }
        }
        else
        {
          v192 = v52[21];
        }
        v57 = *a3 + 16 * v36;
        v59 = *(std::__shared_weak_count **)(v57 + 8);
        if (v59)
        {
          v60 = (unint64_t *)&v59->__shared_owners_;
          do
            v61 = __ldxr(v60);
          while (__stxr(v61 + 1, v60));
          v191 = v58[21];
          do
            v62 = __ldaxr(v60);
          while (__stlxr(v62 - 1, v60));
          if (!v62)
          {
            ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
            std::__shared_weak_count::__release_weak(v59);
          }
        }
        else
        {
          v191 = v58[21];
        }
        HIDWORD(v237) = v188;
        v63 = *a3;
        v64 = *(_QWORD *)(*a3 + 16 * v36);
        if (v64
        {
          v66 = v65;
          v67 = *(std::__shared_weak_count **)(v63 + 16 * v36 + 8);
          if (v67)
          {
            v68 = (unint64_t *)&v67->__shared_owners_;
            do
              v69 = __ldxr(v68);
            while (__stxr(v69 + 1, v68));
            v64 = *(_QWORD *)(*a3 + 16 * v36);
          }
        }
        else
        {
          v67 = 0;
          v66 = 0;
        }
        v70 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v64 + 32))(v64);
        v71 = v66[3];
        v72 = v66[2];
        v73 = v66[4];
        v226[1] = v66[2];
        v226[2] = v73 * v71;
        v230 = v73;
        v229 = v71;
        v74 = *((_QWORD *)v66 + 31);
        v232 = *((_QWORD *)v66 + 31);
        v76 = v66[5];
        v75 = v66[6];
        if (v76 <= 1)
          v76 = 1;
        if (v75 <= 1)
          v77 = 1;
        else
          v77 = v66[6];
        v231 = v77 * v76;
        if ((v70 - 1) >= 0xD)
        {
          v79 = v74 + v74 * ((4 * v72 - 1) / v74);
          v78 = 4;
        }
        else
        {
          v78 = qword_191AC0CA0[v70 - 1];
          v79 = v74 + v74 * ((v78 * v72 - 1) / v74);
        }
        v80 = v79 / v78;
        v81 = v72 - 1;
        if ((int)v72 < 1)
          v81 = v72 + 2;
        v233 = (v81 >> 2) + 1;
        v234 = v80 >> 2;
        v82 = v66[5];
        v226[0] = v80;
        v226[3] = v71 * v72;
        v227 = v73 * v71 * v72;
        v228 = v227 * v82;
        if (v82 <= 1)
          v83 = 1;
        else
          v83 = v82;
        v235 = v83;
        v236 = v75;
        if (v67)
        {
          v84 = (unint64_t *)&v67->__shared_owners_;
          do
            v85 = __ldaxr(v84);
          while (__stlxr(v85 - 1, v84));
          if (!v85)
          {
            ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
            std::__shared_weak_count::__release_weak(v67);
          }
        }
        if (v37 < 2)
        {
          v94 = 1;
        }
        else
        {
          v188 += v187;
          LODWORD(v238) = v188;
          v86 = v36 + 1;
          v87 = *a3 + 16 * (v36 + 1);
          v89 = *(std::__shared_weak_count **)(v87 + 8);
          if (v89)
          {
            v90 = (unint64_t *)&v89->__shared_owners_;
            do
              v91 = __ldxr(v90);
            while (__stxr(v91 + 1, v90));
            v92 = v88[21];

            do
              v93 = __ldaxr(v90);
            while (__stlxr(v93 - 1, v90));
            if (!v93)
            {
              ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
              std::__shared_weak_count::__release_weak(v89);
            }
            v49 = v92;
          }
          else
          {
            v95 = v88[21];

            v49 = v95;
          }
          v96 = *a3;
          v97 = *(_QWORD *)(*a3 + 16 * v86);
          if (v97
          {
            v99 = v98;
            v100 = *(std::__shared_weak_count **)(v96 + 16 * v86 + 8);
            if (v100)
            {
              v101 = (unint64_t *)&v100->__shared_owners_;
              do
                v102 = __ldxr(v101);
              while (__stxr(v102 + 1, v101));
              v97 = *(_QWORD *)(*a3 + 16 * v86);
            }
          }
          else
          {
            v100 = 0;
            v99 = 0;
          }
          v103 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v97 + 32))(v97);
          v104 = v99[3];
          v105 = v99[2];
          v106 = v99[4];
          v215[1] = v99[2];
          v215[2] = v106 * v104;
          v218 = v104;
          v219 = v106;
          v107 = *((_QWORD *)v99 + 31);
          v221 = *((_QWORD *)v99 + 31);
          v109 = v99[5];
          v108 = v99[6];
          if (v109 <= 1)
            v109 = 1;
          if (v108 <= 1)
            v110 = 1;
          else
            v110 = v99[6];
          v220 = v110 * v109;
          if ((v103 - 1) >= 0xD)
          {
            v112 = v107 + v107 * ((4 * v105 - 1) / v107);
            v111 = 4;
          }
          else
          {
            v111 = qword_191AC0CA0[v103 - 1];
            v112 = v107 + v107 * ((v111 * v105 - 1) / v107);
          }
          v113 = v112 / v111;
          v114 = v105 - 1;
          if ((int)v105 < 1)
            v114 = v105 + 2;
          v222 = (v114 >> 2) + 1;
          v223 = v113 >> 2;
          v115 = v99[5];
          v215[0] = v113;
          v215[3] = v104 * v105;
          v216 = v106 * v104 * v105;
          v217 = v216 * v115;
          if (v115 <= 1)
            v116 = 1;
          else
            v116 = v115;
          v224 = v116;
          v225 = v108;
          if (v100)
          {
            v117 = (unint64_t *)&v100->__shared_owners_;
            do
              v118 = __ldaxr(v117);
            while (__stlxr(v118 - 1, v117));
            if (!v118)
            {
              ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
              std::__shared_weak_count::__release_weak(v100);
            }
          }
          if (v37 < 3)
          {
            v94 = 2;
          }
          else
          {
            v188 += v187;
            HIDWORD(v238) = v188;
            v119 = v36 + 2;
            v120 = *a3 + 16 * (v36 + 2);
            v122 = *(std::__shared_weak_count **)(v120 + 8);
            if (v122)
            {
              v123 = (unint64_t *)&v122->__shared_owners_;
              do
                v124 = __ldxr(v123);
              while (__stxr(v124 + 1, v123));
              v125 = v121[21];

              do
                v126 = __ldaxr(v123);
              while (__stlxr(v126 - 1, v123));
              if (!v126)
              {
                ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
                std::__shared_weak_count::__release_weak(v122);
              }
              v192 = v125;
            }
            else
            {
              v127 = v121[21];

              v192 = v127;
            }
            v128 = *a3;
            v129 = *(_QWORD *)(*a3 + 16 * v119);
            if (v129
            {
              v131 = v130;
              v132 = *(std::__shared_weak_count **)(v128 + 16 * v119 + 8);
              if (v132)
              {
                v133 = (unint64_t *)&v132->__shared_owners_;
                do
                  v134 = __ldxr(v133);
                while (__stxr(v134 + 1, v133));
                v129 = *(_QWORD *)(*a3 + 16 * v119);
              }
            }
            else
            {
              v132 = 0;
              v131 = 0;
            }
            v135 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v129 + 32))(v129);
            v136 = v131[3];
            v137 = v131[2];
            v138 = v131[4];
            v204[1] = v131[2];
            v204[2] = v138 * v136;
            v207 = v136;
            v208 = v138;
            v139 = *((_QWORD *)v131 + 31);
            v210 = *((_QWORD *)v131 + 31);
            v141 = v131[5];
            v140 = v131[6];
            if (v141 <= 1)
              v141 = 1;
            if (v140 <= 1)
              v142 = 1;
            else
              v142 = v131[6];
            v209 = v142 * v141;
            if ((v135 - 1) >= 0xD)
            {
              v144 = v139 + v139 * ((4 * v137 - 1) / v139);
              v143 = 4;
            }
            else
            {
              v143 = qword_191AC0CA0[v135 - 1];
              v144 = v139 + v139 * ((v143 * v137 - 1) / v139);
            }
            v145 = v144 / v143;
            v146 = v137 - 1;
            if ((int)v137 < 1)
              v146 = v137 + 2;
            v211 = (v146 >> 2) + 1;
            v212 = v145 >> 2;
            v147 = v131[5];
            v204[0] = v145;
            v204[3] = v136 * v137;
            v205 = v138 * v136 * v137;
            v206 = v205 * v147;
            if (v147 <= 1)
              v148 = 1;
            else
              v148 = v147;
            v213 = v148;
            v214 = v140;
            if (v132)
            {
              v149 = (unint64_t *)&v132->__shared_owners_;
              do
                v150 = __ldaxr(v149);
              while (__stlxr(v150 - 1, v149));
              if (!v150)
              {
                ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
                std::__shared_weak_count::__release_weak(v132);
              }
            }
            if (v37 < 4)
            {
              v94 = 3;
            }
            else
            {
              v239 = v188 + v187;
              v151 = v36 + 3;
              v152 = *a3 + 16 * (v36 + 3);
              v154 = *(std::__shared_weak_count **)(v152 + 8);
              v189 = v188 + v187;
              if (v154)
              {
                v155 = (unint64_t *)&v154->__shared_owners_;
                do
                  v156 = __ldxr(v155);
                while (__stxr(v156 + 1, v155));
                v157 = v153[21];

                do
                  v158 = __ldaxr(v155);
                while (__stlxr(v158 - 1, v155));
                if (!v158)
                {
                  ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
                  std::__shared_weak_count::__release_weak(v154);
                }
                v191 = v157;
              }
              else
              {
                v159 = v153[21];

                v191 = v159;
              }
              v160 = *a3;
              v161 = *(_QWORD *)(*a3 + 16 * v151);
              if (v161
              {
                v163 = v162;
                v164 = *(std::__shared_weak_count **)(v160 + 16 * v151 + 8);
                if (v164)
                {
                  v165 = (unint64_t *)&v164->__shared_owners_;
                  do
                    v166 = __ldxr(v165);
                  while (__stxr(v166 + 1, v165));
                  v161 = *(_QWORD *)(*a3 + 16 * v151);
                }
              }
              else
              {
                v164 = 0;
                v163 = 0;
              }
              v167 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v161 + 32))(v161);
              v168 = v163[3];
              v169 = v163[2];
              v170 = v163[4];
              v193[1] = v163[2];
              v193[2] = v170 * v168;
              v196 = v168;
              v197 = v170;
              v171 = *((_QWORD *)v163 + 31);
              v199 = *((_QWORD *)v163 + 31);
              v173 = v163[5];
              v172 = v163[6];
              if (v173 <= 1)
                v173 = 1;
              if (v172 <= 1)
                v174 = 1;
              else
                v174 = v163[6];
              v198 = v174 * v173;
              if ((v167 - 1) >= 0xD)
              {
                v176 = v171 + v171 * ((4 * v169 - 1) / v171);
                v175 = 4;
              }
              else
              {
                v175 = qword_191AC0CA0[v167 - 1];
                v176 = v171 + v171 * ((v175 * v169 - 1) / v171);
              }
              v177 = v176 / v175;
              v178 = v169 - 1;
              if ((int)v169 < 1)
                v178 = v169 + 2;
              v200 = (v178 >> 2) + 1;
              v201 = v177 >> 2;
              v179 = v163[5];
              v193[0] = v177;
              v193[3] = v168 * v169;
              v194 = v170 * v168 * v169;
              v195 = v194 * v179;
              if (v179 <= 1)
                v180 = 1;
              else
                v180 = v179;
              v202 = v180;
              v203 = v172;
              if (v164)
              {
                v181 = (unint64_t *)&v164->__shared_owners_;
                do
                  v182 = __ldaxr(v181);
                while (__stlxr(v182 - 1, v181));
                if (!v182)
                {
                  ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
                  std::__shared_weak_count::__release_weak(v164);
                }
              }
              v188 = v189 + v187;
              v94 = 4;
            }
          }
        }
        LODWORD(v237) = v94;
        if (!*(_QWORD *)(a1 + 336))
          Espresso::throw_exception_selector<Espresso::generic_error>("Kernel not found");
        objc_msgSend(v17, "setComputePipelineState:");
        objc_msgSend(v17, "setBuffer:offset:atIndex:", v185, 0, 0);
        objc_msgSend(v17, "setBuffer:offset:atIndex:", v190, 0, 1);
        objc_msgSend(v17, "setBuffer:offset:atIndex:", v49, 0, 2);
        objc_msgSend(v17, "setBuffer:offset:atIndex:", v192, 0, 3);
        objc_msgSend(v17, "setBuffer:offset:atIndex:", v191, 0, 4);
        objc_msgSend(v17, "setBytes:length:atIndex:", v240, 56, 5);
        objc_msgSend(v17, "setBytes:length:atIndex:", v226, 56, 6);
        objc_msgSend(v17, "setBytes:length:atIndex:", v215, 56, 7);
        objc_msgSend(v17, "setBytes:length:atIndex:", v204, 56, 8);
        objc_msgSend(v17, "setBytes:length:atIndex:", v193, 56, 9);
        objc_msgSend(v17, "setBytes:length:atIndex:", &v237, 20, 10);
        v36 += v94;
        v37 -= v94;

      }
      while (v37);
      v10 = v255;
    }

    Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(v253);
    if (v10)
    {
      v183 = (unint64_t *)&v10->__shared_owners_;
      do
        v184 = __ldaxr(v183);
      while (__stlxr(v184 - 1, v183));
      if (!v184)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
}

void sub_19145C4EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  uint64_t v11;

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder((id *)(v11 - 120));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v11 - 104);
  _Unwind_Resume(a1);
}

void Espresso::MPSBuffersEngine::split_kernel::blob_options(Espresso::MPSBuffersEngine::split_kernel *this@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  const void *v4;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 v17;
  _QWORD *v18;
  std::__shared_weak_count *v19;

  *a3 = 0;
  a3[1] = 0;
  v4 = (const void *)*((_QWORD *)this + 1);
  if (v4)
  {
    if (v7)
    {
      v8 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
      v18 = v7;
      v19 = v8;
      if (v8)
      {
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldxr(p_shared_owners);
        while (__stxr(v10 + 1, p_shared_owners));
      }
      if (a2)
      {
        v11 = operator new(0x70uLL);
        v11[1] = 0;
        v11[2] = 0;
        *v11 = &off_1E2DBE228;
        *((_OWORD *)v11 + 4) = 0u;
        *((_OWORD *)v11 + 5) = 0u;
        *((_OWORD *)v11 + 2) = 0u;
        *((_OWORD *)v11 + 3) = 0u;
        v11[3] = &off_1E2D9B4D8;
        *((_DWORD *)v11 + 12) = 1065353216;
        v11[7] = 0x1FFFFFFFFLL;
        v11[12] = 0;
        v11[13] = 0;
        v11[8] = 0;
        v11[9] = 0;
        *((_BYTE *)v11 + 88) = 0;
        v11[10] = 0;
        *(_QWORD *)&v17 = v11 + 3;
        *((_QWORD *)&v17 + 1) = v11;
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)a3, &v17);
        v12 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
        if (*((_QWORD *)&v17 + 1))
        {
          v13 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 - 1, v13));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(*a3 + 72), v18[28], v18[29]);
        v8 = v19;
      }
      if (v8)
      {
        v15 = (unint64_t *)&v8->__shared_owners_;
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
  }
}

void sub_19145C6E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v3);
  _Unwind_Resume(a1);
}

BOOL Espresso::MPSBuffersEngine::split_kernel::is_valid_for_engine(_DWORD *a1, uint64_t a2, __int128 **a3)
{
  const Espresso::layer_shape *v4;
  const Espresso::layer_shape *v5;
  _BOOL8 v6;
  void **v8[2];
  unsigned int v9;
  const Espresso::layer_shape *v10;
  const Espresso::layer_shape *v11;
  uint64_t v12;

  if (a1[71] != 2)
    return 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  std::vector<Espresso::layer_shape>::__init_with_size[abi:ne180100]<Espresso::layer_shape*,Espresso::layer_shape*>(&v10, *a3, a3[1], ((char *)a3[1] - (char *)*a3) >> 6);
  v4 = v10;
  v5 = v11;
  while (v4 != v5)
  {
    Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v8, v4, 0);
    if (v9 >= 4)
      goto LABEL_9;
    v4 = (const Espresso::layer_shape *)((char *)v4 + 64);
  }
  if (a1[86] <= 1u)
  {
    v6 = a1[74] == 0;
    goto LABEL_10;
  }
LABEL_9:
  v6 = 0;
LABEL_10:
  v8[0] = (void **)&v10;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v8);
  return v6;
}

void sub_19145C7BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, char a12)
{
  a9 = (void **)&a12;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void Espresso::MPSBuffersEngine::reduce_kernel::~reduce_kernel(id *this)
{

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::MPSBuffersEngine::reduce_kernel::__launch(Espresso::MPSBuffersEngine::reduce_kernel *this, uint64_t *a2, Espresso::layer_data *a3, Espresso::layer_data *a4)
{
  uint64_t v4;
  id *v9;
  id *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  const void *v15;
  id *v16;
  id *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  id v21;
  id v22;
  id v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  int v29;
  int v30;
  int v31;
  int v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  int v40;
  unint64_t v41;
  int v42;
  int v43;
  int v44;
  int v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  int v49;
  int v50;
  BOOL v51;
  int v52;
  int v53;
  int v54;
  uint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  int64x2_t v64;
  _DWORD v65[4];
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  unsigned int v71;
  int v72;
  unsigned int v73;
  int v74;
  int v75;
  _DWORD v76[4];
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  unsigned int v82;
  int v83;
  unsigned int v84;
  int v85;
  int v86;
  id v87[2];
  id *v88;
  std::__shared_weak_count *v89;
  id *v90;
  std::__shared_weak_count *v91;

  v4 = *(_QWORD *)a4;
  if (*((_QWORD *)a4 + 1) != *(_QWORD *)a4)
  {
    if (!*((_QWORD *)this + 41))
    {
      Espresso::MPSBuffersEngine::reduce_kernel::on_resized(this, a3, a4);
      if (!*((_QWORD *)this + 41))
        Espresso::throw_exception_selector<Espresso::generic_error>("reduce kernel not found");
      v4 = *(_QWORD *)a4;
    }
    if (*(_QWORD *)v4
    {
      v10 = v9;
      v11 = *(std::__shared_weak_count **)(v4 + 8);
      v90 = v9;
      v91 = v11;
      if (v11)
      {
        p_shared_owners = (unint64_t *)&v11->__shared_owners_;
        do
          v13 = __ldxr(p_shared_owners);
        while (__stxr(v13 + 1, p_shared_owners));
      }
    }
    else
    {
      v10 = 0;
      v90 = 0;
      v91 = 0;
    }
    v14 = *(_QWORD *)a3;
    v15 = **(const void ***)a3;
    if (v15
    {
      v17 = v16;
      v18 = *(std::__shared_weak_count **)(v14 + 8);
      v88 = v16;
      v89 = v18;
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldxr(v19);
        while (__stxr(v20 + 1, v19));
      }
    }
    else
    {
      v18 = 0;
      v17 = 0;
      v88 = 0;
      v89 = 0;
    }
    v21 = v10[21];
    Espresso::temporary_mtl_encoder::temporary_mtl_encoder((uint64_t)v87, *a2);
    v22 = v87[0];
    v23 = v17[21];
    v24 = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)a4 + 32))(**(_QWORD **)a4);
    v25 = *((_DWORD *)v10 + 3);
    v26 = *((int *)v10 + 2);
    v27 = *((_DWORD *)v10 + 4);
    v76[1] = *((_DWORD *)v10 + 2);
    v76[2] = v27 * v25;
    v79 = v25;
    v80 = v27;
    v28 = v10[31];
    v82 = v10[31];
    v29 = *((_DWORD *)v10 + 5);
    v30 = *((_DWORD *)v10 + 6);
    if (v29 <= 1)
      v31 = 1;
    else
      v31 = *((_DWORD *)v10 + 5);
    if (v30 <= 1)
      v32 = 1;
    else
      v32 = *((_DWORD *)v10 + 6);
    v81 = v32 * v31;
    if ((v24 - 1) >= 0xD)
    {
      v34 = v28 + v28 * ((4 * v26 - 1) / v28);
      v33 = 4;
    }
    else
    {
      v33 = qword_191AC0CA0[v24 - 1];
      v34 = v28 + v28 * ((v33 * v26 - 1) / v28);
    }
    v35 = v34 / v33;
    v36 = v26 - 1;
    if ((int)v26 < 1)
      v36 = v26 + 2;
    v83 = (v36 >> 2) + 1;
    v84 = v35 >> 2;
    v76[0] = v35;
    v76[3] = v25 * v26;
    v77 = v27 * v25 * v26;
    v78 = v77 * v29;
    v85 = v31;
    v86 = v30;
    v37 = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)a3 + 32))(**(_QWORD **)a3);
    v38 = *((_DWORD *)v17 + 3);
    v39 = *((int *)v17 + 2);
    v40 = *((_DWORD *)v17 + 4);
    v65[1] = *((_DWORD *)v17 + 2);
    v65[2] = v40 * v38;
    v68 = v38;
    v69 = v40;
    v41 = v17[31];
    v71 = v17[31];
    v42 = *((_DWORD *)v17 + 5);
    v43 = *((_DWORD *)v17 + 6);
    if (v42 <= 1)
      v44 = 1;
    else
      v44 = *((_DWORD *)v17 + 5);
    if (v43 <= 1)
      v45 = 1;
    else
      v45 = *((_DWORD *)v17 + 6);
    v70 = v45 * v44;
    if ((v37 - 1) >= 0xD)
    {
      v47 = v41 + v41 * ((4 * v39 - 1) / v41);
      v46 = 4;
    }
    else
    {
      v46 = qword_191AC0CA0[v37 - 1];
      v47 = v41 + v41 * ((v46 * v39 - 1) / v41);
    }
    v48 = v47 / v46;
    v49 = v39 - 1;
    if ((int)v39 < 1)
      v49 = v39 + 2;
    v72 = (v49 >> 2) + 1;
    v73 = v48 >> 2;
    v65[0] = v48;
    v65[3] = v38 * v39;
    v66 = v40 * v38 * v39;
    v67 = v66 * v42;
    v74 = v44;
    v75 = v43;
    objc_msgSend(v22, "setComputePipelineState:", *((_QWORD *)this + 41));
    v50 = *((_DWORD *)this + 114);
    v52 = v50 - 1;
    v51 = v50 < 1;
    v53 = v50 + 254;
    if (v51)
      v54 = v53;
    else
      v54 = v52;
    objc_msgSend(v22, "setComputePipelineState:", *((_QWORD *)this + 41));
    objc_msgSend(v22, "setBuffer:offset:atIndex:", v21, 0, 0);
    objc_msgSend(v22, "setBuffer:offset:atIndex:", v23, 0, 1);
    objc_msgSend(v22, "setBytes:length:atIndex:", v76, 56, 2);
    objc_msgSend(v22, "setBytes:length:atIndex:", v65, 56, 3);
    objc_msgSend(v22, "setBuffer:offset:atIndex:", *((_QWORD *)this + 42), 0, 4);
    objc_msgSend(v22, "setThreadgroupMemoryLength:atIndex:", 1024, 0);
    if (*((_DWORD *)this + 70) == 11)
      v55 = 1024;
    else
      v55 = 16;
    objc_msgSend(v22, "setThreadgroupMemoryLength:atIndex:", v55, 1);
    v62 = 1;
    v63 = (v54 >> 8) + 1;
    v64 = vdupq_n_s64(1uLL);
    v61 = xmmword_191A935E0;
    objc_msgSend(v22, "dispatchThreadgroups:threadsPerThreadgroup:", &v63, &v61);

    Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(v87);
    if (v18)
    {
      v56 = (unint64_t *)&v18->__shared_owners_;
      do
        v57 = __ldaxr(v56);
      while (__stlxr(v57 - 1, v56));
      if (!v57)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    v58 = v91;
    if (v91)
    {
      v59 = (unint64_t *)&v91->__shared_owners_;
      do
        v60 = __ldaxr(v59);
      while (__stlxr(v60 - 1, v59));
      if (!v60)
      {
        ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
        std::__shared_weak_count::__release_weak(v58);
      }
    }
  }
}

void sub_19145CCCC(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v2 - 112);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v2 - 96);
  _Unwind_Resume(a1);
}

void Espresso::MPSBuffersEngine::reduce_kernel::blob_options(Espresso::MPSBuffersEngine::reduce_kernel *this@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  const void *v4;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 v17;
  _QWORD *v18;
  std::__shared_weak_count *v19;

  *a3 = 0;
  a3[1] = 0;
  v4 = (const void *)*((_QWORD *)this + 1);
  if (v4)
  {
    if (v7)
    {
      v8 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
      v18 = v7;
      v19 = v8;
      if (v8)
      {
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldxr(p_shared_owners);
        while (__stxr(v10 + 1, p_shared_owners));
      }
      if (a2)
      {
        v11 = operator new(0x70uLL);
        v11[1] = 0;
        v11[2] = 0;
        *v11 = &off_1E2DBE228;
        *((_OWORD *)v11 + 4) = 0u;
        *((_OWORD *)v11 + 5) = 0u;
        *((_OWORD *)v11 + 2) = 0u;
        *((_OWORD *)v11 + 3) = 0u;
        v11[3] = &off_1E2D9B4D8;
        *((_DWORD *)v11 + 12) = 1065353216;
        v11[7] = 0x1FFFFFFFFLL;
        v11[12] = 0;
        v11[13] = 0;
        v11[8] = 0;
        v11[9] = 0;
        *((_BYTE *)v11 + 88) = 0;
        v11[10] = 0;
        *(_QWORD *)&v17 = v11 + 3;
        *((_QWORD *)&v17 + 1) = v11;
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)a3, &v17);
        v12 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
        if (*((_QWORD *)&v17 + 1))
        {
          v13 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 - 1, v13));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(*a3 + 72), v18[28], v18[29]);
        v8 = v19;
      }
      if (v8)
      {
        v15 = (unint64_t *)&v8->__shared_owners_;
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
  }
}

void sub_19145CE88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v3);
  _Unwind_Resume(a1);
}

void Espresso::MPSBuffersEngine::reduce_kernel::on_resized(Espresso::MPSBuffersEngine::reduce_kernel *this, Espresso::layer_data *a2, Espresso::layer_data *a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  const void *v19;
  id *v20;
  id *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unsigned int v25;
  unsigned int v26;
  BOOL v27;
  int v28;
  int v29;
  unint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  int v34;
  unint64_t v35;
  int v36;
  int v37;
  int v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  uint64_t v48;
  int v49;
  int v50;
  unint64_t v51;
  int v52;
  int v53;
  int v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  uint64_t v80;
  int v81;
  const std::string::value_type *v82;
  std::string *v83;
  uint64_t v84;
  void *v85;
  uint64_t v86;
  void *v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::runtime_error *exception;
  const char *v97;
  id v98;
  void *v99;
  _DWORD v100[6];
  std::string v101;
  std::vector<int> v102;
  char v103[4];
  int v104;
  int v105;
  int v106;
  int v107;
  void *__p;
  void *v109;
  _BYTE v110[20];
  int v111;
  int v112;
  int v113;
  int v114;
  int v115;
  int v116;
  void *v117;
  void *v118;
  id *v119;
  std::__shared_weak_count *v120;
  void *v121;
  std::__shared_weak_count *v122;
  void *v123;
  std::__shared_weak_count *v124;

  v6 = (void *)*((_QWORD *)this + 41);
  *((_QWORD *)this + 41) = 0;

  v7 = *(_QWORD *)a3;
  if (*((_QWORD *)a3 + 1) == *(_QWORD *)a3)
    return;
  v8 = *(_QWORD *)a2;
  if (*((_QWORD *)a2 + 1) == *(_QWORD *)a2)
    return;
  *((_BYTE *)this + 464) = 0;
  if (*(_QWORD *)v7
  {
    v10 = (uint64_t)v9;
    v11 = *(std::__shared_weak_count **)(v7 + 8);
    v123 = v9;
    v124 = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
      v8 = *(_QWORD *)a2;
    }
  }
  else
  {
    v10 = 0;
    v123 = 0;
    v124 = 0;
  }
  if (*(_QWORD *)v8
  {
    v15 = (uint64_t)v14;
    v16 = *(std::__shared_weak_count **)(v8 + 8);
    v121 = v14;
    v122 = v16;
    if (v16)
    {
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
  }
  else
  {
    v15 = 0;
    v121 = 0;
    v122 = 0;
  }
  v19 = (const void *)*((_QWORD *)this + 1);
  if (!v19
  {
    v119 = 0;
    v120 = 0;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
  }
  v21 = v20;
  v22 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  v119 = v20;
  v120 = v22;
  if (v22)
  {
    v23 = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  if (v10 && v15)
  {
    if (*((_BYTE *)this + 320))
    {
      LOBYTE(v25) = 0;
    }
    else
    {
      v26 = *((_DWORD *)this + 72);
      v27 = v26 > 0x10;
      v25 = (0x10116u >> v26) & 1;
      if (v27)
        LOBYTE(v25) = 0;
    }
    *((_BYTE *)this + 464) = v25;
    Espresso::abstract_blob_container::shape((char *)&v112, v10);
    Espresso::abstract_blob_container::shape(v103, v10);
    Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v110, (const Espresso::layer_shape *)v103, 0);
    if (__p)
    {
      v109 = __p;
      operator delete(__p);
    }
    Espresso::layer_nd_shape::shape_vector(&v102, (uint64_t)v110);
    Espresso::abstract_blob_container::shape(v103, v15);
    v98 = v21[18];
    if (*((_BYTE *)this + 464))
    {
      v28 = 0;
      v29 = *((_DWORD *)this + 72);
      switch(v29)
      {
        case 2:
          v28 = 1;
          goto LABEL_40;
        case 3:
        case 7:
          goto LABEL_112;
        case 4:
          v28 = 2;
          goto LABEL_40;
        case 5:
        case 6:
        case 9:
        case 10:
        case 11:
        case 12:
        case 13:
        case 14:
        case 15:
          goto LABEL_40;
        case 8:
          v28 = 3;
          goto LABEL_40;
        case 16:
          v28 = 4;
          goto LABEL_40;
        default:
          if (v29 != 31)
            goto LABEL_40;
LABEL_112:
          Espresso::throw_exception_selector<Espresso::not_implemented_error>("Axis mode not implemented on mps buffers.");
      }
    }
    v30 = *((_DWORD *)this + 79) + (v111 & (*((int *)this + 79) >> 31));
    if ((v30 & 0x80000000) != 0 || v30 >= v102.__end_ - v102.__begin_)
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("Invalid value of the argument 'axis'.");
    v28 = v111 + ~(_DWORD)v30;
LABEL_40:
    v31 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
    v32 = *(int *)(v10 + 8);
    *((_DWORD *)this + 87) = v32;
    v34 = *(_DWORD *)(v10 + 12);
    v33 = *(_DWORD *)(v10 + 16);
    *((_DWORD *)this + 88) = v33 * v34;
    *((_DWORD *)this + 93) = v33;
    *((_DWORD *)this + 92) = v34;
    v35 = *(_QWORD *)(v10 + 248);
    *((_DWORD *)this + 95) = *(_QWORD *)(v10 + 248);
    v37 = *(_DWORD *)(v10 + 20);
    v36 = *(_DWORD *)(v10 + 24);
    if (v37 <= 1)
      v37 = 1;
    if (v36 <= 1)
      v38 = 1;
    else
      v38 = *(_DWORD *)(v10 + 24);
    *((_DWORD *)this + 94) = v38 * v37;
    if ((v31 - 1) >= 0xD)
    {
      v40 = v35 + v35 * ((4 * v32 - 1) / v35);
      v39 = 4;
    }
    else
    {
      v39 = qword_191AC0CA0[v31 - 1];
      v40 = v35 + v35 * ((v39 * v32 - 1) / v35);
    }
    v41 = v40 / v39;
    *((_DWORD *)this + 86) = v41;
    v42 = v32 - 1;
    if ((int)v32 < 1)
      v42 = v32 + 2;
    *((_DWORD *)this + 96) = (v42 >> 2) + 1;
    *((_DWORD *)this + 97) = v41 >> 2;
    v43 = *(_DWORD *)(v10 + 20);
    if (v43 <= 1)
      v44 = 1;
    else
      v44 = *(_DWORD *)(v10 + 20);
    *((_DWORD *)this + 98) = v44;
    v45 = v34 * v32;
    *((_DWORD *)this + 89) = v45;
    v46 = v33 * v45;
    *((_DWORD *)this + 90) = v46;
    *((_DWORD *)this + 91) = v46 * v43;
    *((_DWORD *)this + 99) = v36;
    v47 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 32))(v15);
    v48 = *(int *)(v15 + 8);
    *((_DWORD *)this + 101) = v48;
    v50 = *(_DWORD *)(v15 + 12);
    v49 = *(_DWORD *)(v15 + 16);
    *((_DWORD *)this + 102) = v49 * v50;
    *((_DWORD *)this + 107) = v49;
    *((_DWORD *)this + 106) = v50;
    v51 = *(_QWORD *)(v15 + 248);
    *((_DWORD *)this + 109) = *(_QWORD *)(v15 + 248);
    v53 = *(_DWORD *)(v15 + 20);
    v52 = *(_DWORD *)(v15 + 24);
    if (v53 <= 1)
      v53 = 1;
    if (v52 <= 1)
      v54 = 1;
    else
      v54 = *(_DWORD *)(v15 + 24);
    *((_DWORD *)this + 108) = v54 * v53;
    if ((v47 - 1) >= 0xD)
    {
      v56 = v51 + v51 * ((4 * v48 - 1) / v51);
      v55 = 4;
    }
    else
    {
      v55 = qword_191AC0CA0[v47 - 1];
      v56 = v51 + v51 * ((v55 * v48 - 1) / v51);
    }
    v57 = v56 / v55;
    *((_DWORD *)this + 100) = v57;
    v58 = v48 - 1;
    if ((int)v48 < 1)
      v58 = v48 + 2;
    *((_DWORD *)this + 110) = (v58 >> 2) + 1;
    *((_DWORD *)this + 111) = v57 >> 2;
    v59 = *(_DWORD *)(v15 + 20);
    if (v59 <= 1)
      v60 = 1;
    else
      v60 = *(_DWORD *)(v15 + 20);
    *((_DWORD *)this + 112) = v60;
    v61 = v50 * v48;
    *((_DWORD *)this + 103) = v61;
    v62 = v49 * v61;
    *((_DWORD *)this + 104) = v62;
    *((_DWORD *)this + 105) = v62 * v59;
    *((_DWORD *)this + 113) = v52;
    *((_DWORD *)this + 114) = 0;
    switch(v28)
    {
      case 0:
        v63 = v112;
        v64 = v115 * v114 * v113 * v116;
        *((_DWORD *)this + 114) = 32 * v64;
        v65 = *(_DWORD *)(v10 + 240);
        v66 = *(_DWORD *)(v15 + 240);
        v67 = 1;
        v68 = 1;
        break;
      case 1:
        v68 = *(_DWORD *)(v10 + 240);
        v63 = v113;
        v64 = v115 * v114 * v116;
        *((_DWORD *)this + 114) = 32 * v64 * v68;
        v67 = *((_DWORD *)this + 86);
        v65 = v68 * v63;
        v66 = v104 * *(_DWORD *)(v15 + 240);
        break;
      case 2:
        v74 = *(_DWORD *)(v10 + 240);
        v75 = v113;
        v63 = v114;
        v64 = v116 * v115;
        *((_DWORD *)this + 114) = 32 * v116 * v115 * v74 * v113;
        v76 = *((_DWORD *)this + 86);
        v67 = *((_DWORD *)this + 92) * v76;
        v65 = v74 * v63 * v75;
        v68 = v76 * v75;
        v66 = v104 * *(_DWORD *)(v15 + 240) * v105;
        break;
      case 3:
        v63 = v115;
        v64 = v116;
        v77 = v114 * v113;
        v78 = v114 * v113 * *(_DWORD *)(v10 + 240);
        *((_DWORD *)this + 114) = 32 * v78 * v116;
        v79 = *((_DWORD *)this + 86);
        v67 = *((_DWORD *)this + 88) * v79;
        v68 = v77 * v79;
        v65 = v78 * v63;
        v66 = v104 * *(_DWORD *)(v15 + 240) * v105 * v106;
        break;
      case 4:
        v69 = *(_DWORD *)(v10 + 240);
        v70 = v115;
        v63 = v116;
        v71 = v114 * v113;
        v72 = v114 * v113 * v115;
        *((_DWORD *)this + 114) = 32 * v72 * v69;
        v73 = *((_DWORD *)this + 86);
        v67 = *((_DWORD *)this + 88) * v73 * *((_DWORD *)this + 98);
        v65 = v71 * v63 * v69 * v70;
        v68 = v72 * v73;
        v66 = v104 * *(_DWORD *)(v15 + 240) * v105 * v106 * v107;
        v64 = 1;
        break;
      default:
        Espresso::throw_exception_selector<Espresso::generic_error>("axis not supported in reduce_kernel nd mode for mpsbuffers.");
    }
    std::string::basic_string[abi:ne180100]<0>(&v101, "");
    v80 = *((unsigned int *)this + 70);
    if (v80 < 0xC && ((0xE03u >> v80) & 1) != 0)
    {
      MEMORY[0x19401C808](&v101, off_1E2DD3448[v80]);
      v81 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
      if (!v81)
      {
        v82 = "_f32";
        goto LABEL_78;
      }
      if (v81 == 1)
      {
        v82 = "_f16";
LABEL_78:
        std::string::append(&v101, v82);
        if ((v101.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v83 = &v101;
        else
          v83 = (std::string *)v101.__r_.__value_.__r.__words[0];
        objc_msgSend(v21[20], "kernelForFunction:cacheString:withConstants:", v83, 0, 0, v98);
        v84 = objc_claimAutoreleasedReturnValue();
        v85 = (void *)*((_QWORD *)this + 41);
        *((_QWORD *)this + 41) = v84;

        if (!*((_QWORD *)this + 41))
          Espresso::throw_exception_selector<Espresso::generic_error>("kernel not found");
        v100[0] = v68;
        v100[1] = v65;
        v100[2] = v67;
        v100[3] = v63;
        v100[4] = v64;
        v100[5] = v66;
        v86 = objc_msgSend(v99, "newBufferWithBytes:length:options:", v100, 24, 0);
        v87 = (void *)*((_QWORD *)this + 42);
        *((_QWORD *)this + 42) = v86;

        if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v101.__r_.__value_.__l.__data_);

        if (__p)
        {
          v109 = __p;
          operator delete(__p);
        }
        if (v102.__begin_)
        {
          v102.__end_ = v102.__begin_;
          operator delete(v102.__begin_);
        }
        if (v117)
        {
          v118 = v117;
          operator delete(v117);
        }
        goto LABEL_90;
      }
      v97 = "compute path not supported for reduce in reduce_kernel";
    }
    else
    {
      v97 = "reduce mode not implemented in reduce_kernel";
    }
    Espresso::throw_exception_selector<Espresso::not_implemented_error>(v97);
  }
LABEL_90:
  if (v22)
  {
    v88 = (unint64_t *)&v22->__shared_owners_;
    do
      v89 = __ldaxr(v88);
    while (__stlxr(v89 - 1, v88));
    if (!v89)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v90 = v122;
  if (v122)
  {
    v91 = (unint64_t *)&v122->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  v93 = v124;
  if (v124)
  {
    v94 = (unint64_t *)&v124->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
}

void sub_19145D6FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39)
{
  uint64_t v39;

  if (__p)
    operator delete(__p);
  if (a19)
    operator delete(a19);
  if (a38)
    operator delete(a38);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v39 - 136);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v39 - 120);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v39 - 104);
  _Unwind_Resume(a1);
}

uint64_t Espresso::MPSBuffersEngine::reduce_kernel::is_valid_for_engine(uint64_t a1)
{
  unsigned int v1;
  BOOL v2;
  unsigned int v3;
  int v4;
  BOOL v5;
  unsigned int v6;

  v1 = *(_DWORD *)(a1 + 280);
  if (*(_BYTE *)(a1 + 320))
  {
    v2 = v1 >= 0xC;
    v3 = 3587;
  }
  else
  {
    v2 = v1 >= 0xB;
    v5 = v1 == 11;
    v4 = (1 << v1) & 0xE03;
    v5 = !v5 && v2 || v4 == 0;
    if (v5)
      return 0;
    v1 = *(_DWORD *)(a1 + 288);
    v2 = v1 >= 0x11;
    v3 = 65814;
  }
  v6 = (v3 >> v1) & 1;
  if (v2)
    return 0;
  else
    return v6;
}

void Espresso::MPSBuffersEngine::general_padding_kernel::~general_padding_kernel(id *this)
{

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::MPSBuffersEngine::general_padding_kernel::__launch(_QWORD *a1, uint64_t *a2, const void ***a3, uint64_t *a4)
{
  const void **v7;
  const void *v8;
  int *v9;
  int *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  int v24;
  BOOL v25;
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  int64x2_t v37;
  uint64_t v38;
  _QWORD v39[3];
  id v40[2];
  void *v41;
  std::__shared_weak_count *v42;
  int *v43;
  std::__shared_weak_count *v44;

  v7 = *a3;
  v8 = **a3;
  if (v8
  {
    v10 = v9;
    v11 = (std::__shared_weak_count *)v7[1];
    v43 = v9;
    v44 = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }
  }
  else
  {
    v10 = 0;
    v43 = 0;
    v44 = 0;
  }
  v14 = *a4;
  if (*(_QWORD *)v14
  {
    v16 = v15;
    v17 = *(std::__shared_weak_count **)(v14 + 8);
    v41 = v15;
    v42 = v17;
    if (v17)
    {
      v18 = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
  }
  else
  {
    v17 = 0;
    v16 = 0;
    v41 = 0;
    v42 = 0;
  }
  v20 = v10[6];
  if (v20 <= 1)
    v21 = 1;
  else
    v21 = v20;
  if (!a1[61])
    Espresso::throw_exception_selector<Espresso::generic_error>("kernel not found in MPSBuffersEngine::general_padding_kernel!");
  v22 = v10[5];
  Espresso::temporary_mtl_encoder::temporary_mtl_encoder((uint64_t)v40, *a2);
  v23 = v40[0];
  objc_msgSend(v23, "setComputePipelineState:", a1[61]);
  objc_msgSend(v23, "setBuffer:offset:atIndex:", v16[21], 0, 0);
  objc_msgSend(v23, "setBuffer:offset:atIndex:", *((_QWORD *)v10 + 21), 0, 1);
  objc_msgSend(v23, "setBuffer:offset:atIndex:", a1[62], 0, 2);
  objc_msgSend(v23, "setBuffer:offset:atIndex:", a1[63], 0, 3);
  objc_msgSend(v23, "setBuffer:offset:atIndex:", a1[64], 0, 4);
  v24 = v10[2];
  v26 = v24 - 1;
  v25 = v24 < 1;
  v27 = v24 + 6;
  if (!v25)
    v27 = v26;
  v28 = (v27 >> 3) + 1;
  v29 = v10[4] * v10[3];
  v30 = v29 - 1;
  v25 = v29 < 1;
  v31 = v29 + 6;
  if (!v25)
    v31 = v30;
  v39[0] = v28;
  v39[1] = (v31 >> 3) + 1;
  v39[2] = v21 * v22;
  v37 = vdupq_n_s64(8uLL);
  v38 = 1;
  objc_msgSend(v23, "dispatchThreadgroups:threadsPerThreadgroup:", v39, &v37);

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(v40);
  if (v17)
  {
    v32 = (unint64_t *)&v17->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v34 = v44;
  if (v44)
  {
    v35 = (unint64_t *)&v44->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
}

void sub_19145DB38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void Espresso::MPSBuffersEngine::general_padding_kernel::on_resized(Espresso::MPSBuffersEngine::general_padding_kernel *this, const void ***a2, Espresso::layer_data *a3)
{
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  id v11;
  int v12;
  const char *v13;
  int v14;
  void **v15;
  uint64_t v16;
  void *v17;
  const void **v18;
  const void *v19;
  int *v20;
  int *v21;
  char *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  int *v26;
  int *v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  int v34;
  unint64_t v35;
  int v36;
  int v37;
  int v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  uint64_t v48;
  int v49;
  int v50;
  unint64_t v51;
  int v52;
  int v53;
  int v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  void *v66;
  int32x4_t v67;
  int32x4_t v68;
  uint64_t v69;
  void *v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  const char *v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  void *__p[2];
  uint64_t v80;
  void *v81[2];
  char v82;

  v6 = (void *)*((_QWORD *)this + 61);
  *((_QWORD *)this + 61) = 0;

  v7 = (void *)*((_QWORD *)this + 64);
  *((_QWORD *)this + 64) = 0;

  v8 = (void *)*((_QWORD *)this + 62);
  *((_QWORD *)this + 62) = 0;

  v9 = (void *)*((_QWORD *)this + 63);
  *((_QWORD *)this + 63) = 0;

  v10 = *((_QWORD *)this + 1);
  v11 = *(id *)(v10 + 144);
  std::string::basic_string[abi:ne180100]<0>(v81, "");
  v12 = *((_DWORD *)this + 130);
  if (v12)
  {
    if (v12 != 1)
      Espresso::throw_exception_selector<Espresso::not_implemented_error>("MPS Buffers Engine supports FP16, FP32 compute paths.");
    v13 = "fp16";
  }
  else
  {
    v13 = "fp32";
  }
  MEMORY[0x19401C808](v81, v13);
  __p[0] = 0;
  __p[1] = 0;
  v80 = 0;
  v14 = *((unsigned __int16 *)this + 141);
  if (*((_WORD *)this + 141) && v14 != 2 && v14 != 1)
    Espresso::throw_exception_selector<Espresso::unsupported_configuration_error>("Unknown mode selected in general_padding kernel.");
  std::operator+<char>();
  if (SHIBYTE(v80) < 0)
    operator delete(__p[0]);
  *(_OWORD *)__p = v76;
  v80 = v78;
  if (v78 >= 0)
    v15 = __p;
  else
    v15 = (void **)v76;
  objc_msgSend(*(id *)(v10 + 160), "kernelForFunction:cacheString:withConstants:", v15, 0, 0);
  v16 = objc_claimAutoreleasedReturnValue();
  v17 = (void *)*((_QWORD *)this + 61);
  *((_QWORD *)this + 61) = v16;

  v18 = *a2;
  v19 = **a2;
  if (v19
  {
    v21 = v20;
    v22 = (char *)v18[1];
    *((_QWORD *)&v77 + 1) = v22;
    if (v22)
    {
      v23 = (unint64_t *)(v22 + 8);
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
    }
  }
  else
  {
    v21 = 0;
    v77 = 0uLL;
  }
  v25 = *(_QWORD *)a3;
  if (*(_QWORD *)v25
  {
    v27 = v26;
    v28 = *(std::__shared_weak_count **)(v25 + 8);
    if (v28)
    {
      p_shared_owners = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldxr(p_shared_owners);
      while (__stxr(v30 + 1, p_shared_owners));
    }
  }
  else
  {
    v28 = 0;
    v27 = 0;
  }
  v31 = (*(uint64_t (**)(int *))(*(_QWORD *)v27 + 32))(v27);
  v32 = v27[2];
  *((_DWORD *)this + 90) = v32;
  v34 = v27[3];
  v33 = v27[4];
  *((_DWORD *)this + 91) = v33 * v34;
  *((_DWORD *)this + 96) = v33;
  *((_DWORD *)this + 95) = v34;
  v35 = *((_QWORD *)v27 + 31);
  *((_DWORD *)this + 98) = *((_QWORD *)v27 + 31);
  v37 = v27[5];
  v36 = v27[6];
  if (v37 <= 1)
    v37 = 1;
  if (v36 <= 1)
    v38 = 1;
  else
    v38 = v27[6];
  *((_DWORD *)this + 97) = v38 * v37;
  if ((v31 - 1) >= 0xD)
  {
    v40 = v35 + v35 * ((4 * v32 - 1) / v35);
    v39 = 4;
  }
  else
  {
    v39 = qword_191AC0CA0[v31 - 1];
    v40 = v35 + v35 * ((v39 * v32 - 1) / v35);
  }
  v41 = v40 / v39;
  *((_DWORD *)this + 89) = v41;
  v42 = v32 - 1;
  if ((int)v32 < 1)
    v42 = v32 + 2;
  *((_DWORD *)this + 99) = (v42 >> 2) + 1;
  *((_DWORD *)this + 100) = v41 >> 2;
  v43 = v27[5];
  if (v43 <= 1)
    v44 = 1;
  else
    v44 = v27[5];
  *((_DWORD *)this + 101) = v44;
  v45 = v34 * v32;
  *((_DWORD *)this + 92) = v45;
  v46 = v33 * v45;
  *((_DWORD *)this + 93) = v46;
  *((_DWORD *)this + 94) = v46 * v43;
  *((_DWORD *)this + 102) = v36;
  v47 = (*(uint64_t (**)(int *))(*(_QWORD *)v21 + 32))(v21);
  v48 = v21[2];
  *((_DWORD *)this + 104) = v48;
  v50 = v21[3];
  v49 = v21[4];
  *((_DWORD *)this + 105) = v49 * v50;
  *((_DWORD *)this + 110) = v49;
  *((_DWORD *)this + 109) = v50;
  v51 = *((_QWORD *)v21 + 31);
  *((_DWORD *)this + 112) = *((_QWORD *)v21 + 31);
  v53 = v21[5];
  v52 = v21[6];
  if (v53 <= 1)
    v53 = 1;
  if (v52 <= 1)
    v54 = 1;
  else
    v54 = v21[6];
  *((_DWORD *)this + 111) = v54 * v53;
  if ((v47 - 1) >= 0xD)
  {
    v56 = v51 + v51 * ((4 * v48 - 1) / v51);
    v55 = 4;
  }
  else
  {
    v55 = qword_191AC0CA0[v47 - 1];
    v56 = v51 + v51 * ((v55 * v48 - 1) / v51);
  }
  v57 = v56 / v55;
  *((_DWORD *)this + 103) = v57;
  v58 = v48 - 1;
  if ((int)v48 < 1)
    v58 = v48 + 2;
  *((_DWORD *)this + 113) = (v58 >> 2) + 1;
  *((_DWORD *)this + 114) = v57 >> 2;
  v59 = v21[5];
  if (v59 <= 1)
    v60 = 1;
  else
    v60 = v21[5];
  *((_DWORD *)this + 115) = v60;
  v61 = v50 * v48;
  *((_DWORD *)this + 106) = v61;
  v62 = v49 * v61;
  *((_DWORD *)this + 107) = v62;
  *((_DWORD *)this + 108) = v62 * v59;
  *((_DWORD *)this + 116) = v52;
  v63 = objc_msgSend(v11, "newBufferWithBytes:length:options:", (char *)this + 356, 56, 0);
  v64 = (void *)*((_QWORD *)this + 62);
  *((_QWORD *)this + 62) = v63;

  v65 = objc_msgSend(v11, "newBufferWithBytes:length:options:", (char *)this + 412, 56, 0);
  v66 = (void *)*((_QWORD *)this + 63);
  *((_QWORD *)this + 63) = v65;

  v67 = vmovl_s16(*(int16x4_t *)((char *)this + 288));
  v68 = vrev64q_s32(v67);
  v68.i64[0] = v67.i64[0];
  *(int32x4_t *)((char *)this + 468) = v68;
  *((_DWORD *)this + 121) = *((_DWORD *)this + 71);
  v69 = objc_msgSend(v11, "newBufferWithBytes:length:options:");
  v70 = (void *)*((_QWORD *)this + 64);
  *((_QWORD *)this + 64) = v69;

  if (!*((_QWORD *)this + 64))
  {
    v75 = "padding params buffer is nil";
    goto LABEL_74;
  }
  if (!*((_QWORD *)this + 62))
  {
    v75 = "pb_src buffer is nil.";
    goto LABEL_74;
  }
  if (!*((_QWORD *)this + 63))
  {
    v75 = "pb_dst buffer is nil.";
LABEL_74:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v75);
  }
  if (v28)
  {
    v71 = (unint64_t *)&v28->__shared_owners_;
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  if (*((_QWORD *)&v77 + 1))
  {
    v73 = (unint64_t *)(*((_QWORD *)&v77 + 1) + 8);
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v77 + 1) + 16))(*((_QWORD *)&v77 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v77 + 1));
    }
  }
  if (SHIBYTE(v80) < 0)
    operator delete(__p[0]);
  if (v82 < 0)
    operator delete(v81[0]);

}

void sub_19145E0CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  void *v26;

  if (a20 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);

  _Unwind_Resume(a1);
}

void Espresso::MPSBuffersEngine::transpose_kernel::~transpose_kernel(id *this)
{
  id v2;
  id v3;
  id v4;

  v2 = this[44];
  if (v2)
  {
    this[45] = v2;
    operator delete(v2);
  }
  v3 = this[41];
  if (v3)
  {
    this[42] = v3;
    operator delete(v3);
  }
  v4 = this[38];
  if (v4)
  {
    this[39] = v4;
    operator delete(v4);
  }
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{
  id v2;
  id v3;
  id v4;

  v2 = this[44];
  if (v2)
  {
    this[45] = v2;
    operator delete(v2);
  }
  v3 = this[41];
  if (v3)
  {
    this[42] = v3;
    operator delete(v3);
  }
  v4 = this[38];
  if (v4)
  {
    this[39] = v4;
    operator delete(v4);
  }
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::MPSBuffersEngine::transpose_kernel::__launch(Espresso::MPSBuffersEngine::transpose_kernel *this, uint64_t *a2, Espresso::layer_data *a3, Espresso::layer_data *a4)
{
  uint64_t v8;
  const void *v9;
  void *v10;
  void *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  id v21;
  int v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  id v28[2];
  void *v29;
  std::__shared_weak_count *v30;
  void *v31;
  std::__shared_weak_count *v32;

  if (*((_QWORD *)a4 + 1) != *(_QWORD *)a4)
  {
    if (!*((_BYTE *)this + 300))
      Espresso::MPSBuffersEngine::transpose_kernel::on_resized(this, a3, a4);
    if (!*((_QWORD *)this + 58))
      Espresso::throw_exception_selector<Espresso::generic_error>("Kernel not found");
    if (!*((_BYTE *)this + 300))
      Espresso::throw_exception_selector<Espresso::generic_error>("Failed to make transpose kernel ready");
    v8 = *(_QWORD *)a4;
    v9 = **(const void ***)a4;
    if (v9
    {
      v11 = v10;
      v12 = *(std::__shared_weak_count **)(v8 + 8);
      v31 = v10;
      v32 = v12;
      if (v12)
      {
        p_shared_owners = (unint64_t *)&v12->__shared_owners_;
        do
          v14 = __ldxr(p_shared_owners);
        while (__stxr(v14 + 1, p_shared_owners));
      }
    }
    else
    {
      v11 = 0;
      v31 = 0;
      v32 = 0;
    }
    v15 = *(_QWORD *)a3;
    if (*(_QWORD *)v15
    {
      v17 = v16;
      v18 = *(std::__shared_weak_count **)(v15 + 8);
      v29 = v16;
      v30 = v18;
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldxr(v19);
        while (__stxr(v20 + 1, v19));
      }
    }
    else
    {
      v18 = 0;
      v17 = 0;
      v29 = 0;
      v30 = 0;
    }
    Espresso::temporary_mtl_encoder::temporary_mtl_encoder((uint64_t)v28, *a2);
    v21 = v28[0];
    objc_msgSend(v21, "setComputePipelineState:", *((_QWORD *)this + 58));
    objc_msgSend(v21, "setBuffer:offset:atIndex:", *((_QWORD *)v11 + 21), 0, 0);
    objc_msgSend(v21, "setBuffer:offset:atIndex:", v17[21], 0, 1);
    objc_msgSend(v21, "setBytes:length:atIndex:", (char *)this + 380, 40, 2);
    objc_msgSend(v21, "setBytes:length:atIndex:", (char *)this + 420, 40, 3);
    if (*((int *)v11 + 6) <= 1)
      v22 = 1;
    else
      v22 = *((_DWORD *)v11 + 6);

    Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(v28);
    if (v18)
    {
      v23 = (unint64_t *)&v18->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    v25 = v32;
    if (v32)
    {
      v26 = (unint64_t *)&v32->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
  }
}

void sub_19145E440(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  void *v13;

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(&a9);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void Espresso::MPSBuffersEngine::transpose_kernel::blob_options(Espresso::MPSBuffersEngine::transpose_kernel *this@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  const void *v4;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 v17;
  _QWORD *v18;
  std::__shared_weak_count *v19;

  *a3 = 0;
  a3[1] = 0;
  v4 = (const void *)*((_QWORD *)this + 1);
  if (v4)
  {
    if (v7)
    {
      v8 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
      v18 = v7;
      v19 = v8;
      if (v8)
      {
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldxr(p_shared_owners);
        while (__stxr(v10 + 1, p_shared_owners));
      }
      if (a2)
      {
        v11 = operator new(0x70uLL);
        v11[1] = 0;
        v11[2] = 0;
        *v11 = &off_1E2DBE228;
        *((_OWORD *)v11 + 4) = 0u;
        *((_OWORD *)v11 + 5) = 0u;
        *((_OWORD *)v11 + 2) = 0u;
        *((_OWORD *)v11 + 3) = 0u;
        v11[3] = &off_1E2D9B4D8;
        *((_DWORD *)v11 + 12) = 1065353216;
        v11[7] = 0x1FFFFFFFFLL;
        v11[12] = 0;
        v11[13] = 0;
        v11[8] = 0;
        v11[9] = 0;
        *((_BYTE *)v11 + 88) = 0;
        v11[10] = 0;
        *(_QWORD *)&v17 = v11 + 3;
        *((_QWORD *)&v17 + 1) = v11;
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)a3, &v17);
        v12 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
        if (*((_QWORD *)&v17 + 1))
        {
          v13 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 - 1, v13));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(*a3 + 72), v18[28], v18[29]);
        v8 = v19;
      }
      if (v8)
      {
        v15 = (unint64_t *)&v8->__shared_owners_;
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
  }
}

void sub_19145E5F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v3);
  _Unwind_Resume(a1);
}

void Espresso::MPSBuffersEngine::transpose_kernel::on_resized(Espresso::MPSBuffersEngine::transpose_kernel *this, Espresso::layer_data *a2, Espresso::layer_data *a3)
{
  void *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  const void *v11;
  Espresso::context_metal *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  int v16;
  __CFString *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  char *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  int *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  int v30;
  int v31;
  int v32;
  int32x2_t v33;
  unsigned int v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  int v38;
  int v39;
  uint64_t v40;
  int v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  int v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  std::runtime_error *exception;
  std::__shared_weak_count *v55;
  std::__shared_weak_count *v56;
  __int128 v57;
  int v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  *((_BYTE *)this + 300) = 0;
  v6 = (void *)*((_QWORD *)this + 58);
  *((_QWORD *)this + 58) = 0;

  v7 = *(_QWORD *)a3;
  if (*((_QWORD *)a3 + 1) == *(_QWORD *)a3
    || !*(_QWORD *)v7
  {
    return;
  }
  v8 = *(std::__shared_weak_count **)(v7 + 8);
  v56 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v11 = (const void *)*((_QWORD *)this + 1);
  if (!v11
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
  }
  v13 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  v55 = v13;
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v16 = *((_DWORD *)this + 94);
  if (v16 == 1)
  {
    v17 = CFSTR("strided_copy_kernel_fp16");
    goto LABEL_16;
  }
  if (!v16)
  {
    v17 = CFSTR("strided_copy_kernel_fp32");
LABEL_16:
    Espresso::context_metal::kernel_for_function(v12, &v17->isa);
    v18 = objc_claimAutoreleasedReturnValue();
    v19 = (void *)*((_QWORD *)this + 58);
    *((_QWORD *)this + 58) = v18;

  }
  if (!*((_QWORD *)this + 58))
    Espresso::throw_exception_selector<Espresso::generic_error>("Failed to find kernel in transpose mps buffers.");
  v20 = *(_QWORD *)a3;
  if (*(_QWORD *)v20)
  {
    if (v21)
    {
      v22 = *(std::__shared_weak_count **)(v20 + 8);
      if (v22)
      {
        v23 = (unint64_t *)&v22->__shared_owners_;
        do
          v24 = __ldxr(v23);
        while (__stxr(v24 + 1, v23));
      }
    }
    else
    {
      v22 = 0;
    }
  }
  else
  {
    v22 = 0;
    v21 = 0;
  }
  v25 = *(_QWORD *)a2;
  v26 = *(int **)v25;
  if (*(_QWORD *)v25
  {
    v27 = *(std::__shared_weak_count **)(v25 + 8);
    if (v27)
    {
      v28 = (unint64_t *)&v27->__shared_owners_;
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
    }
  }
  else
  {
    v27 = 0;
  }
  v30 = *((_DWORD *)v21 + 2);
  v31 = *((_DWORD *)v21 + 3);
  v32 = *((_DWORD *)v21 + 4);
  v33 = vmax_s32(*(int32x2_t *)(v21 + 20), (int32x2_t)0x100000001);
  v34 = *((_DWORD *)this + 94) - 1;
  if (v34 >= 0xD)
  {
    v36 = *((_QWORD *)v21 + 31) + *((_QWORD *)v21 + 31) * ((unint64_t)(4 * v30 - 1) / *((_QWORD *)v21 + 31));
    v35 = 4;
  }
  else
  {
    v35 = qword_191AC0CA0[v34];
    v36 = *((_QWORD *)v21 + 31) + *((_QWORD *)v21 + 31) * ((v35 * v30 - 1) / *((_QWORD *)v21 + 31));
  }
  v37 = v36 / v35;
  v38 = v31 * v37 * v32;
  *((_DWORD *)this + 95) = v30;
  *((_DWORD *)this + 96) = v31;
  *((_DWORD *)this + 97) = v32;
  *((int32x2_t *)this + 49) = v33;
  *((_DWORD *)this + 100) = 1;
  *((_DWORD *)this + 101) = v37;
  *((_DWORD *)this + 102) = v31 * v37;
  *((_DWORD *)this + 103) = v38;
  *((_DWORD *)this + 104) = v38 * v33.i32[0];
  v39 = v26[3];
  v40 = v26[2];
  v41 = v26[5];
  if (v41 <= 1)
    v41 = 1;
  if (v34 >= 0xD)
  {
    v43 = *((_QWORD *)v26 + 31) + *((_QWORD *)v26 + 31) * ((unint64_t)(4 * v40 - 1) / *((_QWORD *)v26 + 31));
    v42 = 4;
  }
  else
  {
    v42 = qword_191AC0CA0[v34];
    v43 = *((_QWORD *)v26 + 31) + *((_QWORD *)v26 + 31) * ((v42 * v40 - 1) / *((_QWORD *)v26 + 31));
  }
  v44 = v43 / v42;
  v45 = v39 * v44 * v26[4];
  v57 = 0uLL;
  v58 = 0;
  *((_DWORD *)&v57 + *((int *)this + 70)) = 1;
  *((_DWORD *)&v57 + *((int *)this + 71)) = v44;
  *((_DWORD *)&v57 + *((int *)this + 72)) = v39 * v44;
  *((_DWORD *)&v57 + *((int *)this + 73)) = v45;
  *((_DWORD *)&v57 + *((int *)this + 74)) = v45 * v41;
  LODWORD(v44) = v58;
  *((_DWORD *)this + 109) = 0;
  *(_QWORD *)((char *)this + 428) = 0;
  *(_QWORD *)((char *)this + 420) = 0;
  *(_OWORD *)((char *)this + 440) = v57;
  *((_DWORD *)this + 114) = v44;
  *((_BYTE *)this + 300) = 1;
  if (v27)
  {
    v46 = (unint64_t *)&v27->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  if (v22)
  {
    v48 = (unint64_t *)&v22->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  if (v55)
  {
    v50 = (unint64_t *)&v55->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  if (v56)
  {
    v52 = (unint64_t *)&v56->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
}

void sub_19145EA80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t Espresso::MPSBuffersEngine::transpose_kernel::is_valid_for_engine()
{
  return 1;
}

void Espresso::MPSBuffersEngine::squeeze_kernel::~squeeze_kernel(id *this)
{

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::MPSBuffersEngine::squeeze_kernel::__launch(_QWORD *a1, uint64_t *a2, uint64_t *a3, const void ***a4)
{
  const void **v8;
  const void *v9;
  void *v10;
  void *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  id v21;
  int v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  id v28[2];
  void *v29;
  std::__shared_weak_count *v30;
  void *v31;
  std::__shared_weak_count *v32;

  if (!a1[64])
  {
    (*(void (**)(_QWORD *, uint64_t *, const void ***))(*a1 + 80))(a1, a3, a4);
    if (!a1[64])
      Espresso::throw_exception_selector<Espresso::generic_error>("Kernel not found");
  }
  v8 = *a4;
  v9 = **a4;
  if (v9
  {
    v11 = v10;
    v12 = (std::__shared_weak_count *)v8[1];
    v31 = v10;
    v32 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
  }
  else
  {
    v11 = 0;
    v31 = 0;
    v32 = 0;
  }
  v15 = *a3;
  if (*(_QWORD *)v15
  {
    v17 = v16;
    v18 = *(std::__shared_weak_count **)(v15 + 8);
    v29 = v16;
    v30 = v18;
    if (v18)
    {
      v19 = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
  }
  else
  {
    v18 = 0;
    v17 = 0;
    v29 = 0;
    v30 = 0;
  }
  Espresso::temporary_mtl_encoder::temporary_mtl_encoder((uint64_t)v28, *a2);
  v21 = v28[0];
  objc_msgSend(v21, "setComputePipelineState:", a1[64]);
  objc_msgSend(v21, "setBuffer:offset:atIndex:", *((_QWORD *)v11 + 21), 0, 0);
  objc_msgSend(v21, "setBuffer:offset:atIndex:", v17[21], 0, 1);
  objc_msgSend(v21, "setBytes:length:atIndex:", a1 + 53, 40, 2);
  objc_msgSend(v21, "setBytes:length:atIndex:", a1 + 58, 40, 3);
  if (*((int *)v11 + 6) <= 1)
    v22 = 1;
  else
    v22 = *((_DWORD *)v11 + 6);

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(v28);
  if (v18)
  {
    v23 = (unint64_t *)&v18->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v25 = v32;
  if (v32)
  {
    v26 = (unint64_t *)&v32->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
}

void sub_19145ED50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  void *v13;

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(&a9);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void Espresso::MPSBuffersEngine::squeeze_kernel::blob_options(Espresso::MPSBuffersEngine::squeeze_kernel *this@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  const void *v4;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 v17;
  _QWORD *v18;
  std::__shared_weak_count *v19;

  *a3 = 0;
  a3[1] = 0;
  v4 = (const void *)*((_QWORD *)this + 1);
  if (v4)
  {
    if (v7)
    {
      v8 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
      v18 = v7;
      v19 = v8;
      if (v8)
      {
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldxr(p_shared_owners);
        while (__stxr(v10 + 1, p_shared_owners));
      }
      if (a2)
      {
        v11 = operator new(0x70uLL);
        v11[1] = 0;
        v11[2] = 0;
        *v11 = &off_1E2DBE228;
        *((_OWORD *)v11 + 4) = 0u;
        *((_OWORD *)v11 + 5) = 0u;
        *((_OWORD *)v11 + 2) = 0u;
        *((_OWORD *)v11 + 3) = 0u;
        v11[3] = &off_1E2D9B4D8;
        *((_DWORD *)v11 + 12) = 1065353216;
        v11[7] = 0x1FFFFFFFFLL;
        v11[12] = 0;
        v11[13] = 0;
        v11[8] = 0;
        v11[9] = 0;
        *((_BYTE *)v11 + 88) = 0;
        v11[10] = 0;
        *(_QWORD *)&v17 = v11 + 3;
        *((_QWORD *)&v17 + 1) = v11;
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)a3, &v17);
        v12 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
        if (*((_QWORD *)&v17 + 1))
        {
          v13 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 - 1, v13));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(*a3 + 72), v18[28], v18[29]);
        v8 = v19;
      }
      if (v8)
      {
        v15 = (unint64_t *)&v8->__shared_owners_;
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
  }
}

void sub_19145EF00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v3);
  _Unwind_Resume(a1);
}

void Espresso::MPSBuffersEngine::squeeze_kernel::on_resized(Espresso::MPSBuffersEngine::squeeze_kernel *this, Espresso::layer_data *a2, const void ***a3)
{
  const void *v4;
  Espresso::context_metal *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  uint64_t v12;
  void *v13;
  const void **v14;
  const void *v15;
  void *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  int *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  int v26;
  int v27;
  int v28;
  int32x2_t v29;
  unsigned int v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  int *v43;
  const char *v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::runtime_error *exception;
  int v59;
  char v60;
  char v61[20];
  int v62;
  int *v63;
  std::__shared_weak_count *v64;
  void *v65;
  std::__shared_weak_count *v66;
  Espresso::context_metal *v67;
  std::__shared_weak_count *v68;
  int v69;
  __int128 v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  void *__p;
  void *v77;
  __int128 v78;
  __int32 v79;
  uint64_t v80;

  v80 = *MEMORY[0x1E0C80C00];
  v4 = (const void *)*((_QWORD *)this + 1);
  if (!v4
  {
    v67 = 0;
    v68 = 0;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
  }
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  v67 = v7;
  v68 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v11 = *((_DWORD *)this + 126);
  if (v11 == 1)
  {
    Espresso::context_metal::kernel_for_function(v7, CFSTR("strided_copy_kernel_fp16"));
    v12 = objc_claimAutoreleasedReturnValue();
  }
  else
  {
    if (v11)
      goto LABEL_11;
    Espresso::context_metal::kernel_for_function(v7, CFSTR("strided_copy_kernel_fp32"));
    v12 = objc_claimAutoreleasedReturnValue();
  }
  v13 = (void *)*((_QWORD *)this + 64);
  *((_QWORD *)this + 64) = v12;

LABEL_11:
  if (!*((_QWORD *)this + 64))
    Espresso::throw_exception_selector<Espresso::generic_error>("Kernel not found");
  v14 = *a3;
  v15 = **a3;
  if (v15
  {
    v17 = (uint64_t)v16;
    v18 = (std::__shared_weak_count *)v14[1];
    v65 = v16;
    v66 = v18;
    if (v18)
    {
      v19 = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
  }
  else
  {
    v17 = 0;
    v65 = 0;
    v66 = 0;
  }
  v21 = *(_QWORD *)a2;
  if (*(_QWORD *)v21
  {
    v23 = *(std::__shared_weak_count **)(v21 + 8);
    v63 = v22;
    v64 = v23;
    if (v23)
    {
      v24 = (unint64_t *)&v23->__shared_owners_;
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 1, v24));
    }
  }
  else
  {
    v23 = 0;
    v22 = 0;
    v63 = 0;
    v64 = 0;
  }
  v26 = *(_DWORD *)(v17 + 8);
  v27 = *(_DWORD *)(v17 + 12);
  v28 = *(_DWORD *)(v17 + 16);
  v29 = vmax_s32(*(int32x2_t *)(v17 + 20), (int32x2_t)0x100000001);
  v30 = *((_DWORD *)this + 126) - 1;
  if (v30 >= 0xD)
  {
    v32 = *(_QWORD *)(v17 + 248) + *(_QWORD *)(v17 + 248) * ((unint64_t)(4 * v26 - 1) / *(_QWORD *)(v17 + 248));
    v31 = 4;
  }
  else
  {
    v31 = qword_191AC0CA0[v30];
    v32 = *(_QWORD *)(v17 + 248) + *(_QWORD *)(v17 + 248) * ((v31 * v26 - 1) / *(_QWORD *)(v17 + 248));
  }
  v33 = v32 / v31;
  v34 = v27 * v33 * v28;
  *((_DWORD *)this + 106) = v26;
  *((_DWORD *)this + 107) = v27;
  *((_DWORD *)this + 108) = v28;
  *(int32x2_t *)((char *)this + 436) = v29;
  *((_DWORD *)this + 111) = 1;
  *((_DWORD *)this + 112) = v33;
  *((_DWORD *)this + 113) = v27 * v33;
  *((_DWORD *)this + 114) = v34;
  *((_DWORD *)this + 115) = v34 * v29.i32[0];
  v35 = v22[2];
  if (v22[5] <= 1)
    v36 = 1;
  else
    v36 = v22[5];
  if (v30 >= 0xD)
  {
    v38 = *((_QWORD *)v22 + 31) + *((_QWORD *)v22 + 31) * ((unint64_t)(4 * v35 - 1) / *((_QWORD *)v22 + 31));
    v37 = 4;
  }
  else
  {
    v37 = qword_191AC0CA0[v30];
    v38 = *((_QWORD *)v22 + 31) + *((_QWORD *)v22 + 31) * ((v37 * v35 - 1) / *((_QWORD *)v22 + 31));
  }
  v39 = v22[3];
  v40 = v22[4];
  v78 = *(_OWORD *)((char *)this + 424);
  v79 = v29.i32[1];
  Espresso::abstract_blob_container::shape((char *)&v71, v17);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v61, (const Espresso::layer_shape *)&v71, 0);
  if (__p)
  {
    v77 = __p;
    operator delete(__p);
  }
  v41 = v62;
  v60 = 0;
  v59 = 0;
  if (*((_BYTE *)this + 416))
  {
    v60 = 1;
    v59 = 16843009;
  }
  else
  {
    v42 = *((unsigned int *)this + 71);
    if ((_DWORD)v42)
    {
      if (v42 > 5)
        Espresso::throw_exception_selector<Espresso::invalid_argument_error>("too many axes");
      v43 = (int *)((char *)this + 288);
      v44 = "duplicate axis";
      while (1)
      {
        v45 = *v43++;
        v46 = v41 + ~((v41 & (v45 >> 31)) + v45);
        if (*((_BYTE *)&v59 + v46))
          goto LABEL_70;
        if (*((_DWORD *)&v78 + v46) != 1)
          break;
        *((_BYTE *)&v59 + v46) = 1;
        if (!--v42)
          goto LABEL_47;
      }
      v44 = "axis dimension must be one";
LABEL_70:
      Espresso::throw_exception_selector<Espresso::invalid_argument_error>(v44);
    }
    *((_BYTE *)&v59 + v62 + ~((v62 & (*((int *)this + 70) >> 31)) + *((_DWORD *)this + 70))) = 1;
  }
LABEL_47:
  v47 = 0;
  v48 = 1;
  v71 = 1;
  v72 = v38 / v37;
  v73 = v39 * v72;
  v74 = v39 * v72 * v40;
  v75 = v74 * v36;
  v70 = 0uLL;
  v69 = 1;
  do
  {
    if (*((_DWORD *)&v78 + v47) == 1 && *((_BYTE *)&v59 + v47))
    {
      v49 = v48;
      LODWORD(v48) = v48 - 1;
    }
    else
    {
      v49 = (v48 + 1);
    }
    *(&v69 + ++v47) = *(&v71 + (int)v48);
    v48 = v49;
  }
  while (v47 != 4);
  *((_QWORD *)this + 58) = 0;
  *((_QWORD *)this + 59) = 0;
  *((_QWORD *)this + 60) = 0x100000000;
  *(_OWORD *)((char *)this + 488) = v70;
  if (v23)
  {
    v50 = (unint64_t *)&v23->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v52 = v66;
  if (v66)
  {
    v53 = (unint64_t *)&v66->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  v55 = v68;
  if (v68)
  {
    v56 = (unint64_t *)&v68->__shared_owners_;
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
}

void sub_19145F450(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  _Unwind_Resume(a1);
}

uint64_t Espresso::MPSBuffersEngine::squeeze_kernel::is_valid_for_engine()
{
  return 1;
}

const char *Espresso::generic_squeeze_kernel::kernel_type_str(Espresso::generic_squeeze_kernel *this)
{
  return "squeeze";
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::squeeze_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

void Espresso::MPSBuffersEngine::expand_dims_kernel::~expand_dims_kernel(id *this)
{

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::MPSBuffersEngine::expand_dims_kernel::__launch(_QWORD *a1, uint64_t *a2, uint64_t *a3, const void ***a4)
{
  const void **v8;
  const void *v9;
  void *v10;
  void *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  id v21;
  int v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  id v28[2];
  void *v29;
  std::__shared_weak_count *v30;
  void *v31;
  std::__shared_weak_count *v32;

  if (!a1[63])
  {
    (*(void (**)(_QWORD *, uint64_t *, const void ***))(*a1 + 80))(a1, a3, a4);
    if (!a1[63])
      Espresso::throw_exception_selector<Espresso::generic_error>("Kernel not found");
  }
  v8 = *a4;
  v9 = **a4;
  if (v9
  {
    v11 = v10;
    v12 = (std::__shared_weak_count *)v8[1];
    v31 = v10;
    v32 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
  }
  else
  {
    v11 = 0;
    v31 = 0;
    v32 = 0;
  }
  v15 = *a3;
  if (*(_QWORD *)v15
  {
    v17 = v16;
    v18 = *(std::__shared_weak_count **)(v15 + 8);
    v29 = v16;
    v30 = v18;
    if (v18)
    {
      v19 = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
  }
  else
  {
    v18 = 0;
    v17 = 0;
    v29 = 0;
    v30 = 0;
  }
  Espresso::temporary_mtl_encoder::temporary_mtl_encoder((uint64_t)v28, *a2);
  v21 = v28[0];
  objc_msgSend(v21, "setComputePipelineState:", a1[63]);
  objc_msgSend(v21, "setBuffer:offset:atIndex:", *((_QWORD *)v11 + 21), 0, 0);
  objc_msgSend(v21, "setBuffer:offset:atIndex:", v17[21], 0, 1);
  objc_msgSend(v21, "setBytes:length:atIndex:", a1 + 52, 40, 2);
  objc_msgSend(v21, "setBytes:length:atIndex:", a1 + 57, 40, 3);
  if (*((int *)v11 + 6) <= 1)
    v22 = 1;
  else
    v22 = *((_DWORD *)v11 + 6);

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(v28);
  if (v18)
  {
    v23 = (unint64_t *)&v18->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v25 = v32;
  if (v32)
  {
    v26 = (unint64_t *)&v32->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
}

void sub_19145F764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  void *v13;

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(&a9);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void Espresso::MPSBuffersEngine::expand_dims_kernel::blob_options(Espresso::MPSBuffersEngine::expand_dims_kernel *this@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  const void *v4;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 v17;
  _QWORD *v18;
  std::__shared_weak_count *v19;

  *a3 = 0;
  a3[1] = 0;
  v4 = (const void *)*((_QWORD *)this + 1);
  if (v4)
  {
    if (v7)
    {
      v8 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
      v18 = v7;
      v19 = v8;
      if (v8)
      {
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldxr(p_shared_owners);
        while (__stxr(v10 + 1, p_shared_owners));
      }
      if (a2)
      {
        v11 = operator new(0x70uLL);
        v11[1] = 0;
        v11[2] = 0;
        *v11 = &off_1E2DBE228;
        *((_OWORD *)v11 + 4) = 0u;
        *((_OWORD *)v11 + 5) = 0u;
        *((_OWORD *)v11 + 2) = 0u;
        *((_OWORD *)v11 + 3) = 0u;
        v11[3] = &off_1E2D9B4D8;
        *((_DWORD *)v11 + 12) = 1065353216;
        v11[7] = 0x1FFFFFFFFLL;
        v11[12] = 0;
        v11[13] = 0;
        v11[8] = 0;
        v11[9] = 0;
        *((_BYTE *)v11 + 88) = 0;
        v11[10] = 0;
        *(_QWORD *)&v17 = v11 + 3;
        *((_QWORD *)&v17 + 1) = v11;
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)a3, &v17);
        v12 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
        if (*((_QWORD *)&v17 + 1))
        {
          v13 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 - 1, v13));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(*a3 + 72), v18[28], v18[29]);
        v8 = v19;
      }
      if (v8)
      {
        v15 = (unint64_t *)&v8->__shared_owners_;
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
  }
}

void sub_19145F914(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v3);
  _Unwind_Resume(a1);
}

void Espresso::MPSBuffersEngine::expand_dims_kernel::on_resized(Espresso::MPSBuffersEngine::expand_dims_kernel *this, Espresso::layer_data *a2, const void ***a3)
{
  const void *v4;
  Espresso::context_metal *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  uint64_t v12;
  void *v13;
  const void **v14;
  const void *v15;
  char *v16;
  char *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  int v27;
  int v28;
  int v29;
  int32x2_t v30;
  unsigned int v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int32x2_t v39;
  unint64_t v40;
  unint64_t v41;
  int v42;
  uint64_t v43;
  int *v44;
  const char *v45;
  int v46;
  int v47;
  uint64_t v48;
  int v49;
  int v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::runtime_error *exception;
  __int32 v60;
  int v61;
  char v62;
  char v63[20];
  int v64;
  void *v65;
  std::__shared_weak_count *v66;
  char *v67;
  std::__shared_weak_count *v68;
  Espresso::context_metal *v69;
  std::__shared_weak_count *v70;
  __int128 v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  void *__p;
  void *v79;
  _DWORD v80[3];
  int32x2_t v81;
  uint64_t v82;

  v82 = *MEMORY[0x1E0C80C00];
  v4 = (const void *)*((_QWORD *)this + 1);
  if (!v4
  {
    v69 = 0;
    v70 = 0;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
  }
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  v69 = v7;
  v70 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v11 = *((_DWORD *)this + 124);
  if (v11 == 1)
  {
    Espresso::context_metal::kernel_for_function(v7, CFSTR("strided_copy_kernel_fp16"));
    v12 = objc_claimAutoreleasedReturnValue();
  }
  else
  {
    if (v11)
      goto LABEL_11;
    Espresso::context_metal::kernel_for_function(v7, CFSTR("strided_copy_kernel_fp32"));
    v12 = objc_claimAutoreleasedReturnValue();
  }
  v13 = (void *)*((_QWORD *)this + 63);
  *((_QWORD *)this + 63) = v12;

LABEL_11:
  if (!*((_QWORD *)this + 63))
    Espresso::throw_exception_selector<Espresso::generic_error>("Kernel not found");
  v14 = *a3;
  v15 = **a3;
  if (v15
  {
    v17 = v16;
    v18 = (std::__shared_weak_count *)v14[1];
    v67 = v16;
    v68 = v18;
    if (v18)
    {
      v19 = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
  }
  else
  {
    v17 = 0;
    v67 = 0;
    v68 = 0;
  }
  v21 = *(_QWORD *)a2;
  if (*(_QWORD *)v21
  {
    v23 = (uint64_t)v22;
    v24 = *(std::__shared_weak_count **)(v21 + 8);
    v65 = v22;
    v66 = v24;
    if (v24)
    {
      v25 = (unint64_t *)&v24->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
  }
  else
  {
    v24 = 0;
    v23 = 0;
    v65 = 0;
    v66 = 0;
  }
  v27 = *((_DWORD *)v17 + 2);
  v28 = *((_DWORD *)v17 + 3);
  v29 = *((_DWORD *)v17 + 4);
  v30 = vmax_s32(*(int32x2_t *)(v17 + 20), (int32x2_t)0x100000001);
  v31 = *((_DWORD *)this + 124) - 1;
  if (v31 >= 0xD)
  {
    v33 = *((_QWORD *)v17 + 31) + *((_QWORD *)v17 + 31) * ((unint64_t)(4 * v27 - 1) / *((_QWORD *)v17 + 31));
    v32 = 4;
  }
  else
  {
    v32 = qword_191AC0CA0[v31];
    v33 = *((_QWORD *)v17 + 31) + *((_QWORD *)v17 + 31) * ((v32 * v27 - 1) / *((_QWORD *)v17 + 31));
  }
  v34 = v33 / v32;
  v35 = v28 * v34 * v29;
  *((_DWORD *)this + 104) = v27;
  *((_DWORD *)this + 105) = v28;
  *((_DWORD *)this + 106) = v29;
  *(int32x2_t *)((char *)this + 428) = v30;
  *((_DWORD *)this + 109) = 1;
  *((_DWORD *)this + 110) = v34;
  *((_DWORD *)this + 111) = v28 * v34;
  *((_DWORD *)this + 112) = v35;
  *((_DWORD *)this + 113) = v35 * v30.i32[0];
  v36 = *(_DWORD *)(v23 + 8);
  v37 = *(_DWORD *)(v23 + 12);
  v38 = *(_DWORD *)(v23 + 16);
  v39 = vmax_s32(*(int32x2_t *)(v23 + 20), (int32x2_t)0x100000001);
  v60 = v39.i32[0];
  if (v31 >= 0xD)
  {
    v41 = *(_QWORD *)(v23 + 248) + *(_QWORD *)(v23 + 248) * ((unint64_t)(4 * v36 - 1) / *(_QWORD *)(v23 + 248));
    v40 = 4;
  }
  else
  {
    v40 = qword_191AC0CA0[v31];
    v41 = *(_QWORD *)(v23 + 248) + *(_QWORD *)(v23 + 248) * ((v40 * v36 - 1) / *(_QWORD *)(v23 + 248));
  }
  v80[0] = *(_DWORD *)(v23 + 8);
  v80[1] = v37;
  v80[2] = v38;
  v81 = v39;
  Espresso::abstract_blob_container::shape((char *)&v73, v23);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v63, (const Espresso::layer_shape *)&v73, 0);
  if (__p)
  {
    v79 = __p;
    operator delete(__p);
  }
  v42 = v64;
  v62 = 0;
  v61 = 0;
  v43 = *((unsigned int *)this + 71);
  if ((_DWORD)v43)
  {
    if (v43 > 5)
      Espresso::throw_exception_selector<Espresso::invalid_argument_error>("too many axes");
    v44 = (int *)((char *)this + 288);
    v45 = "duplicate axis";
    while (1)
    {
      v46 = *v44++;
      v47 = v42 + ~((v42 & (v46 >> 31)) + v46);
      if (*((_BYTE *)&v61 + v47))
        goto LABEL_63;
      if (v80[v47] != 1)
        break;
      *((_BYTE *)&v61 + v47) = 1;
      if (!--v43)
        goto LABEL_42;
    }
    v45 = "axis dimension must be one";
LABEL_63:
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>(v45);
  }
  *((_BYTE *)&v61 + v64 + ~((v64 & (*((int *)this + 70) >> 31)) + *((_DWORD *)this + 70))) = 1;
LABEL_42:
  v48 = 0;
  v49 = 0;
  v73 = 1;
  v74 = v41 / v40;
  v75 = v37 * v74;
  v76 = v37 * v74 * v38;
  v77 = v76 * v60;
  v71 = 0uLL;
  v72 = 0;
  do
  {
    if (!*((_BYTE *)&v61 + v48))
      *((_DWORD *)&v71 + v49++) = *(&v73 + v48);
    ++v48;
  }
  while (v48 != 5);
  v50 = v72;
  *((_QWORD *)this + 57) = 0;
  *((_QWORD *)this + 58) = 0;
  *((_DWORD *)this + 118) = 0;
  *(_OWORD *)((char *)this + 476) = v71;
  *((_DWORD *)this + 123) = v50;
  if (v24)
  {
    v51 = (unint64_t *)&v24->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v53 = v68;
  if (v68)
  {
    v54 = (unint64_t *)&v68->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  v56 = v70;
  if (v70)
  {
    v57 = (unint64_t *)&v70->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
}

void sub_19145FE40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t Espresso::MPSBuffersEngine::expand_dims_kernel::is_valid_for_engine()
{
  return 1;
}

const char *Espresso::generic_expand_dims_kernel::kernel_type_str(Espresso::generic_expand_dims_kernel *this)
{
  return "expand_dims";
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::expand_dims_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

void Espresso::MPSBuffersEngine::batch_matmul_kernel::~batch_matmul_kernel(Espresso::MPSBuffersEngine::batch_matmul_kernel *this)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)*((_QWORD *)this + 44);
  if (v2)
  {
    *((_QWORD *)this + 45) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 41);
  if (v3)
  {
    *((_QWORD *)this + 42) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 38);
  if (v4)
  {
    *((_QWORD *)this + 39) = v4;
    operator delete(v4);
  }

  Espresso::base_kernel::~base_kernel(this);
}

{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)*((_QWORD *)this + 44);
  if (v2)
  {
    *((_QWORD *)this + 45) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 41);
  if (v3)
  {
    *((_QWORD *)this + 42) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 38);
  if (v4)
  {
    *((_QWORD *)this + 39) = v4;
    operator delete(v4);
  }

  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::MPSBuffersEngine::batch_matmul_kernel::__launch(Espresso::MPSBuffersEngine::batch_matmul_kernel *this, uint64_t a2, Espresso::layer_data *a3, const void ***a4)
{
  unint64_t v4;
  _QWORD *v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  const void **v14;
  const void *v15;
  id *v16;
  id *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  const void *v21;
  id *v22;
  id *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  id *v28;
  id *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  Espresso *v39;
  const char *v40;
  NSObject *v41;
  NSObject *v42;
  NSObject *v43;
  id v44;
  id v45;
  void *v46;
  void *v47;
  const char *v48;
  NSObject *v49;
  void *v50;
  void *v51;
  void *v52;
  const char *v53;
  NSObject *v54;
  id v55;
  void *v56;
  void *v57;
  uint64_t v58;
  void *v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  id v73;
  uint8_t buf[8];
  id *v75;
  std::__shared_weak_count *v76;
  id *v77;
  std::__shared_weak_count *v78;
  id *v79;
  std::__shared_weak_count *v80;
  _QWORD *v81;
  std::__shared_weak_count *v82;
  _QWORD v83[3];

  v83[2] = *MEMORY[0x1E0C80C00];
  v4 = (char *)a4[1] - (char *)*a4;
  if (v4)
  {
    if (v4 <= 0x1F)
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("Matrix multiplication requires two inputs.");
    if (!*((_BYTE *)this + 296))
    {
      Espresso::MPSBuffersEngine::batch_matmul_kernel::on_resized(this, a3, (Espresso::layer_data *)a4);
      if (!*((_BYTE *)this + 296))
        Espresso::throw_exception_selector<Espresso::generic_error>("Failed to prepare batch matmul with MPSNDArray.");
    }
    if (*(_QWORD *)a2
    {
      v10 = v9;
      v11 = *(std::__shared_weak_count **)(a2 + 8);
      v81 = v9;
      v82 = v11;
      if (v11)
      {
        p_shared_owners = (unint64_t *)&v11->__shared_owners_;
        do
          v13 = __ldxr(p_shared_owners);
        while (__stxr(v13 + 1, p_shared_owners));
      }
    }
    else
    {
      v10 = 0;
      v81 = 0;
      v82 = 0;
    }
    v14 = *a4;
    v15 = **a4;
    if (v15
    {
      v17 = v16;
      v18 = (std::__shared_weak_count *)v14[1];
      v79 = v16;
      v80 = v18;
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldxr(v19);
        while (__stxr(v20 + 1, v19));
        v14 = *a4;
      }
    }
    else
    {
      v17 = 0;
      v79 = 0;
      v80 = 0;
    }
    v21 = v14[2];
    if (v21
    {
      v23 = v22;
      v24 = (std::__shared_weak_count *)v14[3];
      v77 = v22;
      v78 = v24;
      if (v24)
      {
        v25 = (unint64_t *)&v24->__shared_owners_;
        do
          v26 = __ldxr(v25);
        while (__stxr(v26 + 1, v25));
      }
    }
    else
    {
      v23 = 0;
      v77 = 0;
      v78 = 0;
    }
    v27 = *(_QWORD *)a3;
    if (*(_QWORD *)v27
    {
      v29 = v28;
      v30 = *(std::__shared_weak_count **)(v27 + 8);
      v75 = v28;
      v76 = v30;
      if (v30)
      {
        v31 = (unint64_t *)&v30->__shared_owners_;
        do
          v32 = __ldxr(v31);
        while (__stxr(v32 + 1, v31));
      }
    }
    else
    {
      v29 = 0;
      v75 = 0;
      v76 = 0;
    }
    v33 = v17[27];
    v34 = v23[27];
    v35 = v29[27];
    objc_msgSend(v17[25], "ndArrayWithCommandBuffer:descriptor:aliasing:", v10[18], v17[28], 1);
    v36 = (id)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v23[25], "ndArrayWithCommandBuffer:descriptor:aliasing:", v10[18], v23[28], 1);
    v37 = (id)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v29[25], "ndArrayWithCommandBuffer:descriptor:aliasing:", v10[18], v29[28], 1);
    v72 = objc_claimAutoreleasedReturnValue();
    v38 = (id)v72;

    if (!v36)
    {
      Espresso::espresso_os_log_subsystem(v39, v40);
      v41 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v41, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_debug_impl(&dword_190DAF000, v41, OS_LOG_TYPE_DEBUG, "Failed to alias src_a in batch_matmul.", buf, 2u);
      }

      v36 = v17[27];
      v39 = (Espresso *)objc_msgSend(v36, "importDataWithCommandBuffer:fromBuffer:sourceDataType:offset:rowStrides:", v10[18], v17[21], *((unsigned int *)v17 + 48), 0, *((_QWORD *)this + 38));
    }
    if (!v37)
    {
      Espresso::espresso_os_log_subsystem(v39, v40);
      v42 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v42, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_debug_impl(&dword_190DAF000, v42, OS_LOG_TYPE_DEBUG, "Failed to alias src_b in batch_matmul.", buf, 2u);
      }

      v37 = v23[27];
      v39 = (Espresso *)objc_msgSend(v37, "importDataWithCommandBuffer:fromBuffer:sourceDataType:offset:rowStrides:", v10[18], v23[21], *((unsigned int *)v23 + 48), 0, *((_QWORD *)this + 41));
    }
    if (!v72)
    {
      Espresso::espresso_os_log_subsystem(v39, v40);
      v43 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v43, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_debug_impl(&dword_190DAF000, v43, OS_LOG_TYPE_DEBUG, "Failed to alias dst in batch_matmul.", buf, 2u);
      }

      v38 = v29[27];
      objc_msgSend(v38, "importDataWithCommandBuffer:fromBuffer:sourceDataType:offset:rowStrides:", v10[18], v29[21], *((unsigned int *)v29 + 48), 0, *((_QWORD *)this + 44));
    }
    v44 = v36;
    v45 = v37;
    if (*((_BYTE *)this + 281))
    {
      objc_msgSend(v44, "descriptor");
      v46 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v46, "transposeDimension:withDimension:", 0, 1);
      objc_msgSend(v44, "arrayViewWithCommandBuffer:descriptor:aliasing:", v10[18], v46, 1);
      v47 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v47)
      {
        Espresso::espresso_os_log_subsystem(0, v48);
        v49 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v49, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_debug_impl(&dword_190DAF000, v49, OS_LOG_TYPE_DEBUG, "Failed to alias src_a_nd_array for transpose in batch_matmul.", buf, 2u);
        }

        objc_msgSend(v44, "arrayViewWithCommandBuffer:descriptor:aliasing:", v10[18], v46, 2);
        v47 = (void *)objc_claimAutoreleasedReturnValue();
      }
      v73 = v47;

      v50 = v73;
    }
    else
    {
      v73 = 0;
      v50 = v44;
    }
    if (*((_BYTE *)this + 282))
    {
      objc_msgSend(v45, "descriptor");
      v51 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v51, "transposeDimension:withDimension:", 0, 1);
      objc_msgSend(v45, "arrayViewWithCommandBuffer:descriptor:aliasing:", v10[18], v51, 1);
      v52 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v52)
      {
        Espresso::espresso_os_log_subsystem(0, v53);
        v54 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v54, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_debug_impl(&dword_190DAF000, v54, OS_LOG_TYPE_DEBUG, "Failed to alias src_b_nd_array for transpose in batch_matmul.", buf, 2u);
        }

        objc_msgSend(v45, "arrayViewWithCommandBuffer:descriptor:aliasing:", v10[18], v51, 2);
        v52 = (void *)objc_claimAutoreleasedReturnValue();
      }
      v55 = v52;

      v56 = v55;
    }
    else
    {
      v55 = 0;
      v56 = v45;
    }
    v57 = (void *)*((_QWORD *)this + 36);
    if (!v57)
      Espresso::throw_exception_selector<Espresso::generic_error>("ndarray matrix multiplication kernel was nil.");
    v58 = v10[18];
    v83[0] = v50;
    v83[1] = v56;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v83, 2);
    v59 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v57, "encodeToCommandBuffer:sourceArrays:destinationArray:", v58, v59, v38);

    if (!v72)
      objc_msgSend(v38, "exportDataWithCommandBuffer:toBuffer:destinationDataType:offset:rowStrides:", v81[18], v75[21], *((unsigned int *)v75 + 48), 0, *((_QWORD *)this + 44));

    v60 = v76;
    if (v76)
    {
      v61 = (unint64_t *)&v76->__shared_owners_;
      do
        v62 = __ldaxr(v61);
      while (__stlxr(v62 - 1, v61));
      if (!v62)
      {
        ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
        std::__shared_weak_count::__release_weak(v60);
      }
    }
    v63 = v78;
    if (v78)
    {
      v64 = (unint64_t *)&v78->__shared_owners_;
      do
        v65 = __ldaxr(v64);
      while (__stlxr(v65 - 1, v64));
      if (!v65)
      {
        ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
        std::__shared_weak_count::__release_weak(v63);
      }
    }
    v66 = v80;
    if (v80)
    {
      v67 = (unint64_t *)&v80->__shared_owners_;
      do
        v68 = __ldaxr(v67);
      while (__stlxr(v68 - 1, v67));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
        std::__shared_weak_count::__release_weak(v66);
      }
    }
    v69 = v82;
    if (v82)
    {
      v70 = (unint64_t *)&v82->__shared_owners_;
      do
        v71 = __ldaxr(v70);
      while (__stlxr(v71 - 1, v70));
      if (!v71)
      {
        ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
        std::__shared_weak_count::__release_weak(v69);
      }
    }
  }
}

void sub_1914606A0(_Unwind_Exception *a1, uint64_t a2, void *a3, uint64_t a4, ...)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  va_list va1;
  uint64_t v14;
  uint64_t v15;
  va_list va2;
  uint64_t v17;
  va_list va3;

  va_start(va3, a4);
  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v12 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v15 = va_arg(va3, _QWORD);
  v17 = va_arg(va3, _QWORD);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va3);
  _Unwind_Resume(a1);
}

void Espresso::MPSBuffersEngine::batch_matmul_kernel::blob_options(Espresso::MPSBuffersEngine::batch_matmul_kernel *this@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  const void *v4;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 v17;
  _QWORD *v18;
  std::__shared_weak_count *v19;

  *a3 = 0;
  a3[1] = 0;
  v4 = (const void *)*((_QWORD *)this + 1);
  if (v4)
  {
    if (v7)
    {
      v8 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
      v18 = v7;
      v19 = v8;
      if (v8)
      {
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldxr(p_shared_owners);
        while (__stxr(v10 + 1, p_shared_owners));
      }
      if (a2)
      {
        v11 = operator new(0x70uLL);
        v11[1] = 0;
        v11[2] = 0;
        *v11 = &off_1E2DBE228;
        *((_OWORD *)v11 + 4) = 0u;
        *((_OWORD *)v11 + 5) = 0u;
        *((_OWORD *)v11 + 2) = 0u;
        *((_OWORD *)v11 + 3) = 0u;
        v11[3] = &off_1E2D9B4D8;
        *((_DWORD *)v11 + 12) = 1065353216;
        v11[7] = 0x1FFFFFFFFLL;
        v11[12] = 0;
        v11[13] = 0;
        v11[8] = 0;
        v11[9] = 0;
        *((_BYTE *)v11 + 88) = 0;
        v11[10] = 0;
        *(_QWORD *)&v17 = v11 + 3;
        *((_QWORD *)&v17 + 1) = v11;
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)a3, &v17);
        v12 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
        if (*((_QWORD *)&v17 + 1))
        {
          v13 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 - 1, v13));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(*a3 + 72), v18[28], v18[29]);
        v8 = v19;
      }
      if (v8)
      {
        v15 = (unint64_t *)&v8->__shared_owners_;
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
  }
}

void sub_1914608D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v3);
  _Unwind_Resume(a1);
}

void Espresso::MPSBuffersEngine::batch_matmul_kernel::on_resized(Espresso::MPSBuffersEngine::batch_matmul_kernel *this, Espresso::layer_data *a2, Espresso::layer_data *a3)
{
  uint64_t v3;
  _QWORD *v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  const void *v12;
  _QWORD *v13;
  _QWORD *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  const void *v21;
  _QWORD *v22;
  _QWORD *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  void *v33;
  _QWORD *v34;
  void *v35;
  void *v36;
  uint64_t v37;
  void *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::runtime_error *exception;
  __int128 v53;
  uint64_t v54;
  _QWORD *v55;
  std::__shared_weak_count *v56;
  _QWORD *v57;
  std::__shared_weak_count *v58;
  _QWORD *v59;
  std::__shared_weak_count *v60;
  void *v61;
  std::__shared_weak_count *v62;
  _QWORD *v63;
  std::__shared_weak_count *v64;

  v3 = *(_QWORD *)a3;
  if (*((_QWORD *)a3 + 1) != *(_QWORD *)a3)
  {
    *((_BYTE *)this + 296) = 0;
    if (*(_QWORD *)v3)
    {
      if (v7)
      {
        v8 = v7;
        v9 = *(std::__shared_weak_count **)(v3 + 8);
        v63 = v7;
        v64 = v9;
        if (v9)
        {
          p_shared_owners = (unint64_t *)&v9->__shared_owners_;
          do
            v11 = __ldxr(p_shared_owners);
          while (__stxr(v11 + 1, p_shared_owners));
        }
        v12 = (const void *)*((_QWORD *)this + 1);
        if (!v12
        {
          v61 = 0;
          v62 = 0;
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
          exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
        }
        v14 = v13;
        v15 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
        v61 = v13;
        v62 = v15;
        if (v15)
        {
          v16 = (unint64_t *)&v15->__shared_owners_;
          do
            v17 = __ldxr(v16);
          while (__stxr(v17 + 1, v16));
        }
        v18 = *(_QWORD *)a3;
        if (*((_QWORD *)a3 + 1) - *(_QWORD *)a3 >= 0x20uLL)
        {
          v59 = v8;
          v60 = v9;
          if (v9)
          {
            v19 = (unint64_t *)&v9->__shared_owners_;
            do
              v20 = __ldxr(v19);
            while (__stxr(v20 + 1, v19));
            v18 = *(_QWORD *)a3;
          }
          v21 = *(const void **)(v18 + 16);
          if (v21
          {
            v23 = v22;
            v24 = *(std::__shared_weak_count **)(v18 + 24);
            v57 = v22;
            v58 = v24;
            if (v24)
            {
              v25 = (unint64_t *)&v24->__shared_owners_;
              do
                v26 = __ldxr(v25);
              while (__stxr(v26 + 1, v25));
            }
          }
          else
          {
            v23 = 0;
            v57 = 0;
            v58 = 0;
          }
          v27 = *(_QWORD *)a2;
          if (*(_QWORD *)v27
          {
            v29 = v28;
            v30 = *(std::__shared_weak_count **)(v27 + 8);
            v55 = v28;
            v56 = v30;
            if (v30)
            {
              v31 = (unint64_t *)&v30->__shared_owners_;
              do
                v32 = __ldxr(v31);
              while (__stxr(v32 + 1, v31));
            }
          }
          else
          {
            v30 = 0;
            v29 = 0;
            v55 = 0;
            v56 = 0;
          }
          Espresso::MPSBuffersEngine::blob_container::ndarray_strides((Espresso::MPSBuffersEngine::blob_container *)&v53, v8);
          v33 = (void *)*((_QWORD *)this + 38);
          if (v33)
          {
            *((_QWORD *)this + 39) = v33;
            operator delete(v33);
            *((_QWORD *)this + 38) = 0;
            *((_QWORD *)this + 39) = 0;
            *((_QWORD *)this + 40) = 0;
          }
          *((_OWORD *)this + 19) = v53;
          *((_QWORD *)this + 40) = v54;
          Espresso::MPSBuffersEngine::blob_container::ndarray_strides((Espresso::MPSBuffersEngine::blob_container *)&v53, v23);
          v34 = (_QWORD *)((char *)this + 328);
          v35 = (void *)*((_QWORD *)this + 41);
          if (v35)
          {
            *((_QWORD *)this + 42) = v35;
            operator delete(v35);
            *v34 = 0;
            *((_QWORD *)this + 42) = 0;
            *((_QWORD *)this + 43) = 0;
          }
          *(_OWORD *)v34 = v53;
          *((_QWORD *)this + 43) = v54;
          Espresso::MPSBuffersEngine::blob_container::ndarray_strides((Espresso::MPSBuffersEngine::blob_container *)&v53, v29);
          v36 = (void *)*((_QWORD *)this + 44);
          if (v36)
          {
            *((_QWORD *)this + 45) = v36;
            operator delete(v36);
            *((_QWORD *)this + 44) = 0;
            *((_QWORD *)this + 45) = 0;
            *((_QWORD *)this + 46) = 0;
          }
          *((_OWORD *)this + 22) = v53;
          *((_QWORD *)this + 46) = v54;
          v37 = objc_msgSend(objc_alloc(MEMORY[0x1E0CC7078]), "initWithDevice:sourceCount:", v14[18], 2);
          v38 = (void *)*((_QWORD *)this + 36);
          *((_QWORD *)this + 36) = v37;

          objc_msgSend(*((id *)this + 36), "setBeta:", 0.0);
          *((_BYTE *)this + 296) = 1;
          if (v30)
          {
            v39 = (unint64_t *)&v30->__shared_owners_;
            do
              v40 = __ldaxr(v39);
            while (__stlxr(v40 - 1, v39));
            if (!v40)
            {
              ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
              std::__shared_weak_count::__release_weak(v30);
            }
          }
          v41 = v58;
          if (v58)
          {
            v42 = (unint64_t *)&v58->__shared_owners_;
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v44 = v60;
          if (v60)
          {
            v45 = (unint64_t *)&v60->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          v15 = v62;
        }
        if (v15)
        {
          v47 = (unint64_t *)&v15->__shared_owners_;
          do
            v48 = __ldaxr(v47);
          while (__stlxr(v48 - 1, v47));
          if (!v48)
          {
            ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
            std::__shared_weak_count::__release_weak(v15);
          }
        }
        v49 = v64;
        if (v64)
        {
          v50 = (unint64_t *)&v64->__shared_owners_;
          do
            v51 = __ldaxr(v50);
          while (__stlxr(v51 - 1, v50));
          if (!v51)
          {
            ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
            std::__shared_weak_count::__release_weak(v49);
          }
        }
      }
    }
  }
}

void sub_191460CF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;
  uint64_t v15;
  va_list va3;

  va_start(va3, a5);
  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v13 = va_arg(va3, _QWORD);
  v15 = va_arg(va3, _QWORD);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va3);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v5 - 80);
  _Unwind_Resume(a1);
}

BOOL Espresso::MPSBuffersEngine::batch_matmul_kernel::is_valid_for_engine(_BYTE *a1, uint64_t a2, uint64_t a3)
{
  const Espresso::layer_shape *v3;
  int *v6;
  unsigned int v7;
  _BOOL4 v8;
  int v9;
  int v10;
  int v13;
  int v14;
  int v17;
  int v18;
  BOOL v19;
  int v21;
  int v22;
  _BOOL4 v23;
  _BYTE v24[20];
  unsigned int v25;

  v3 = *(const Espresso::layer_shape **)a3;
  if (*(_QWORD *)(a3 + 8) - *(_QWORD *)a3 < 0x80uLL)
    return 0;
  v6 = (int *)((char *)v3 + 64);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v24, *(const Espresso::layer_shape **)a3, 0);
  v7 = v25;
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v24, (const Espresso::layer_shape *)((char *)v3 + 64), 0);
  v8 = 0;
  v9 = *((_DWORD *)v3 + 2);
  v10 = *((_DWORD *)v3 + 18);
  if (v10 == 1 || v9 == 1 || v9 == v10)
  {
    v13 = *((_DWORD *)v3 + 3);
    v14 = *((_DWORD *)v3 + 19);
    if (v14 != 1 && v13 != 1 && v13 != v14)
      goto LABEL_37;
    v17 = *((_DWORD *)v3 + 4);
    v18 = *((_DWORD *)v3 + 20);
    v19 = v18 == 1 || v17 == 1;
    if (!v19 && v17 != v18)
      goto LABEL_37;
    if (a1[281])
    {
      if (a1[282])
        v21 = *v6;
      else
        v21 = *((_DWORD *)v3 + 17);
      v8 = *((_DWORD *)v3 + 1) == v21;
      goto LABEL_38;
    }
    v22 = a1[282] ? *v6 : *((_DWORD *)v3 + 17);
    if (*(_DWORD *)v3 == v22)
      v8 = 1;
    else
LABEL_37:
      v8 = 0;
  }
LABEL_38:
  if (v7 >= 5)
    v8 = 0;
  v23 = v25 < 5 && v8;
  return !a1[280] && v23;
}

void Espresso::MPSBuffersEngine::reshape_kernel::~reshape_kernel(id *this)
{

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::MPSBuffersEngine::reshape_kernel::__launch(Espresso::MPSBuffersEngine::reshape_kernel *this, uint64_t *a2, Espresso::layer_data *a3, Espresso::layer_data *a4)
{
  const void *v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t *v13;
  const void *v14;
  id *v15;
  id *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  id *v21;
  id *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  id v26;
  id v27;
  id v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::runtime_error *exception;
  id v42[2];
  id *v43;
  std::__shared_weak_count *v44;
  id *v45;
  std::__shared_weak_count *v46;
  void *v47;
  std::__shared_weak_count *v48;

  if (*((_QWORD *)a4 + 1) != *(_QWORD *)a4)
  {
    if (!*((_QWORD *)this + 40))
    {
      Espresso::MPSBuffersEngine::reshape_kernel::on_resized(this, a3, a4);
      if (!*((_QWORD *)this + 40))
        Espresso::throw_exception_selector<Espresso::invalid_state_error>("reshape_kernel failed to get ready.");
    }
    v8 = (const void *)*((_QWORD *)this + 1);
    if (!v8
    {
      v47 = 0;
      v48 = 0;
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
      exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
    }
    v10 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
    v47 = v9;
    v48 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
    v13 = *(uint64_t **)a4;
    v14 = **(const void ***)a4;
    if (v14
    {
      v16 = v15;
      v17 = (std::__shared_weak_count *)v13[1];
      v45 = v15;
      v46 = v17;
      if (v17)
      {
        v18 = (unint64_t *)&v17->__shared_owners_;
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 1, v18));
      }
    }
    else
    {
      v16 = 0;
      v45 = 0;
      v46 = 0;
    }
    v20 = *(_QWORD *)a3;
    if (*(_QWORD *)v20
    {
      v22 = v21;
      v23 = *(std::__shared_weak_count **)(v20 + 8);
      v43 = v21;
      v44 = v23;
      if (v23)
      {
        v24 = (unint64_t *)&v23->__shared_owners_;
        do
          v25 = __ldxr(v24);
        while (__stxr(v25 + 1, v24));
      }
    }
    else
    {
      v23 = 0;
      v22 = 0;
      v43 = 0;
      v44 = 0;
    }
    v26 = v16[21];
    Espresso::temporary_mtl_encoder::temporary_mtl_encoder((uint64_t)v42, *a2);
    v27 = v42[0];
    v28 = v22[21];
    v29 = **(_QWORD **)a4;
    v31 = *(_DWORD *)(v29 + 20);
    v30 = *(_DWORD *)(v29 + 24);
    if (v30 <= 1)
      v32 = 1;
    else
      v32 = v30;
    objc_msgSend(v27, "setComputePipelineState:", *((_QWORD *)this + 40));
    objc_msgSend(v27, "setBuffer:offset:atIndex:", v26, 0, 0);
    objc_msgSend(v27, "setBuffer:offset:atIndex:", v28, 0, 1);
    objc_msgSend(v27, "setBuffer:offset:atIndex:", *((_QWORD *)this + 41), 0, 2);
    objc_msgSend(v27, "setBuffer:offset:atIndex:", *((_QWORD *)this + 42), 0, 3);

    Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(v42);
    if (v23)
    {
      v33 = (unint64_t *)&v23->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    v35 = v46;
    if (v46)
    {
      v36 = (unint64_t *)&v46->__shared_owners_;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
    v38 = v48;
    if (v48)
    {
      v39 = (unint64_t *)&v48->__shared_owners_;
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
  }
}

void sub_191461230(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  va_list va1;
  uint64_t v10;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v8 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  _Unwind_Resume(a1);
}

void Espresso::MPSBuffersEngine::reshape_kernel::blob_options(Espresso::MPSBuffersEngine::reshape_kernel *this@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  const void *v4;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 v17;
  _QWORD *v18;
  std::__shared_weak_count *v19;

  *a3 = 0;
  a3[1] = 0;
  v4 = (const void *)*((_QWORD *)this + 1);
  if (v4)
  {
    if (v7)
    {
      v8 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
      v18 = v7;
      v19 = v8;
      if (v8)
      {
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldxr(p_shared_owners);
        while (__stxr(v10 + 1, p_shared_owners));
      }
      if (a2)
      {
        v11 = operator new(0x70uLL);
        v11[1] = 0;
        v11[2] = 0;
        *v11 = &off_1E2DBE228;
        *((_OWORD *)v11 + 4) = 0u;
        *((_OWORD *)v11 + 5) = 0u;
        *((_OWORD *)v11 + 2) = 0u;
        *((_OWORD *)v11 + 3) = 0u;
        v11[3] = &off_1E2D9B4D8;
        *((_DWORD *)v11 + 12) = 1065353216;
        v11[7] = 0x1FFFFFFFFLL;
        v11[12] = 0;
        v11[13] = 0;
        v11[8] = 0;
        v11[9] = 0;
        *((_BYTE *)v11 + 88) = 0;
        v11[10] = 0;
        *(_QWORD *)&v17 = v11 + 3;
        *((_QWORD *)&v17 + 1) = v11;
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)a3, &v17);
        v12 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
        if (*((_QWORD *)&v17 + 1))
        {
          v13 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 - 1, v13));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(*a3 + 72), v18[28], v18[29]);
        v8 = v19;
      }
      if (v8)
      {
        v15 = (unint64_t *)&v8->__shared_owners_;
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
  }
}

void sub_191461404(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v3);
  _Unwind_Resume(a1);
}

void Espresso::MPSBuffersEngine::reshape_kernel::on_resized(Espresso::MPSBuffersEngine::reshape_kernel *this, Espresso::layer_data *a2, Espresso::layer_data *a3)
{
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  int *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  _DWORD *v16;
  _DWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  unint64_t v25;
  int v26;
  int v27;
  int v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  int v39;
  int v40;
  unint64_t v41;
  int v42;
  int v43;
  int v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  const void *v53;
  id *v54;
  id *v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  void *v62;
  unsigned int (*v63)(_DWORD *);
  const char *v64;
  uint64_t v65;
  void *v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  std::runtime_error *exception;
  const char *v74;
  _DWORD *v75;
  std::__shared_weak_count *v76;
  std::__shared_weak_count *v77;

  v6 = (void *)*((_QWORD *)this + 40);
  *((_QWORD *)this + 40) = 0;

  v7 = (void *)*((_QWORD *)this + 41);
  *((_QWORD *)this + 41) = 0;

  v8 = (void *)*((_QWORD *)this + 42);
  *((_QWORD *)this + 42) = 0;

  v9 = *(_QWORD *)a3;
  if (*((_QWORD *)a3 + 1) == *(_QWORD *)a3)
    return;
  v10 = *(_QWORD *)a2;
  if (*((_QWORD *)a2 + 1) == *(_QWORD *)a2)
    return;
  if (*(_QWORD *)v9
  {
    v12 = v11;
    v13 = *(std::__shared_weak_count **)(v9 + 8);
    v77 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
      v10 = *(_QWORD *)a2;
    }
  }
  else
  {
    v12 = 0;
    v77 = 0;
  }
  if (*(_QWORD *)v10)
  {
    if (v16)
    {
      v17 = v16;
      v18 = *(std::__shared_weak_count **)(v10 + 8);
      v75 = v16;
      v76 = v18;
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldxr(v19);
        while (__stxr(v20 + 1, v19));
      }
      if (!v12)
        goto LABEL_66;
      v21 = (*(uint64_t (**)(int *))(*(_QWORD *)v12 + 32))(v12);
      v22 = v12[2];
      *((_DWORD *)this + 87) = v22;
      v24 = v12[3];
      v23 = v12[4];
      *((_DWORD *)this + 88) = v23 * v24;
      *((_DWORD *)this + 93) = v23;
      *((_DWORD *)this + 92) = v24;
      v25 = *((_QWORD *)v12 + 31);
      *((_DWORD *)this + 95) = *((_QWORD *)v12 + 31);
      v27 = v12[5];
      v26 = v12[6];
      if (v27 <= 1)
        v27 = 1;
      if (v26 <= 1)
        v28 = 1;
      else
        v28 = v12[6];
      *((_DWORD *)this + 94) = v28 * v27;
      if ((v21 - 1) >= 0xD)
      {
        v30 = v25 + v25 * ((4 * v22 - 1) / v25);
        v29 = 4;
      }
      else
      {
        v29 = qword_191AC0CA0[v21 - 1];
        v30 = v25 + v25 * ((v29 * v22 - 1) / v25);
      }
      v31 = v30 / v29;
      *((_DWORD *)this + 86) = v31;
      v32 = v22 - 1;
      if ((int)v22 < 1)
        v32 = v22 + 2;
      *((_DWORD *)this + 96) = (v32 >> 2) + 1;
      *((_DWORD *)this + 97) = v31 >> 2;
      v33 = v12[5];
      if (v33 <= 1)
        v34 = 1;
      else
        v34 = v12[5];
      *((_DWORD *)this + 98) = v34;
      v35 = v24 * v22;
      *((_DWORD *)this + 89) = v35;
      v36 = v23 * v35;
      *((_DWORD *)this + 90) = v36;
      *((_DWORD *)this + 91) = v36 * v33;
      *((_DWORD *)this + 99) = v26;
      v37 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v17 + 32))(v17);
      v38 = (int)v17[2];
      *((_DWORD *)this + 101) = v38;
      v40 = v17[3];
      v39 = v17[4];
      *((_DWORD *)this + 102) = v39 * v40;
      *((_DWORD *)this + 107) = v39;
      *((_DWORD *)this + 106) = v40;
      v41 = *((_QWORD *)v17 + 31);
      *((_DWORD *)this + 109) = *((_QWORD *)v17 + 31);
      v43 = v17[5];
      v42 = v17[6];
      if (v43 <= 1)
        v43 = 1;
      if (v42 <= 1)
        v44 = 1;
      else
        v44 = v17[6];
      *((_DWORD *)this + 108) = v44 * v43;
      if ((v37 - 1) >= 0xD)
      {
        v46 = v41 + v41 * ((4 * v38 - 1) / v41);
        v45 = 4;
      }
      else
      {
        v45 = qword_191AC0CA0[v37 - 1];
        v46 = v41 + v41 * ((v45 * v38 - 1) / v41);
      }
      v47 = v46 / v45;
      *((_DWORD *)this + 100) = v47;
      v48 = v38 - 1;
      if ((int)v38 < 1)
        v48 = v38 + 2;
      *((_DWORD *)this + 110) = (v48 >> 2) + 1;
      *((_DWORD *)this + 111) = v47 >> 2;
      v49 = v17[5];
      if (v49 <= 1)
        v50 = 1;
      else
        v50 = v17[5];
      *((_DWORD *)this + 112) = v50;
      v51 = v40 * v38;
      *((_DWORD *)this + 103) = v51;
      v52 = v39 * v51;
      *((_DWORD *)this + 104) = v52;
      *((_DWORD *)this + 105) = v52 * v49;
      *((_DWORD *)this + 113) = v42;
      v53 = (const void *)*((_QWORD *)this + 1);
      if (!v53
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
        exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
      }
      v55 = v54;
      v56 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
      if (v56)
      {
        v57 = (unint64_t *)&v56->__shared_owners_;
        do
          v58 = __ldxr(v57);
        while (__stxr(v58 + 1, v57));
      }
      v59 = objc_msgSend(v54[18], "newBufferWithBytes:length:options:", (char *)this + 344, 56, 0, v54, v56, v75);
      v60 = (void *)*((_QWORD *)this + 41);
      *((_QWORD *)this + 41) = v59;

      v61 = objc_msgSend(v55[18], "newBufferWithBytes:length:options:", (char *)this + 400, 56, 0);
      v62 = (void *)*((_QWORD *)this + 42);
      *((_QWORD *)this + 42) = v61;

      v63 = *(unsigned int (**)(_DWORD *))(*(_QWORD *)v17 + 32);
      if (v17[2] == v12[2])
      {
        if (v63(v17))
        {
          if ((*(unsigned int (**)(_DWORD *))(*(_QWORD *)v17 + 32))(v17) != 1)
            goto LABEL_57;
          v64 = "reshape_fast_axis_unchanged_buffers_f16";
        }
        else
        {
          v64 = "reshape_fast_axis_unchanged_buffers_f32";
        }
      }
      else if (v63(v17))
      {
        if ((*(unsigned int (**)(_DWORD *))(*(_QWORD *)v17 + 32))(v17) != 1)
          goto LABEL_57;
        v64 = "reshape_fast_axis_changed_buffers_f16";
      }
      else
      {
        v64 = "reshape_fast_axis_changed_buffers_f32";
      }
      objc_msgSend(v55[20], "kernelForFunction:cacheString:withConstants:", v64, 0, 0);
      v65 = objc_claimAutoreleasedReturnValue();
      v66 = (void *)*((_QWORD *)this + 40);
      *((_QWORD *)this + 40) = v65;

LABEL_57:
      if (*((_QWORD *)this + 40))
      {
        if (*((_QWORD *)this + 41))
        {
          if (*((_QWORD *)this + 42))
          {
            if (v56)
            {
              v67 = (unint64_t *)&v56->__shared_owners_;
              do
                v68 = __ldaxr(v67);
              while (__stlxr(v68 - 1, v67));
              if (!v68)
              {
                ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
                std::__shared_weak_count::__release_weak(v56);
              }
            }
            v18 = v76;
LABEL_66:
            if (v18)
            {
              v69 = (unint64_t *)&v18->__shared_owners_;
              do
                v70 = __ldaxr(v69);
              while (__stlxr(v70 - 1, v69));
              if (!v70)
              {
                ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
                std::__shared_weak_count::__release_weak(v18);
              }
            }
            goto LABEL_71;
          }
          v74 = "Failed to create pb_dst buffer.";
        }
        else
        {
          v74 = "Failed to create pb_src buffer.";
        }
      }
      else
      {
        v74 = "Failed to create kernel in reshape_kernel";
      }
      Espresso::throw_exception_selector<Espresso::generic_error>(v74);
    }
  }
LABEL_71:
  if (v77)
  {
    v71 = (unint64_t *)&v77->__shared_owners_;
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }
}

void sub_19146196C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

BOOL Espresso::MPSBuffersEngine::reshape_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  return !*(_DWORD *)(a1 + 304) && (!*(_BYTE *)(a1 + 312) || a3[1] - *a3 == 64);
}

void Espresso::MPSBuffersEngine::matrix_band_part_kernel::~matrix_band_part_kernel(id *this)
{

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::MPSBuffersEngine::matrix_band_part_kernel::__launch(Espresso::MPSBuffersEngine::matrix_band_part_kernel *this, Espresso::layer_data *a2, uint64_t *a3, uint64_t **a4)
{
  uint64_t *v4;
  id *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  id v13;
  unint64_t v14;
  id v15;
  uint64_t v16;
  id *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  id v21;
  unint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  id v26[2];

  v4 = *a4;
  if (a4[1] != *a4)
  {
    if (!*((_QWORD *)this + 38) || !*((_QWORD *)this + 50))
    {
      Espresso::MPSBuffersEngine::matrix_band_part_kernel::on_resized(this, a2, a4);
      v4 = *a4;
    }
    v10 = (std::__shared_weak_count *)v4[1];
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
      v13 = v9[21];
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    else
    {
      v13 = v9[21];
    }
    Espresso::temporary_mtl_encoder::temporary_mtl_encoder((uint64_t)v26, *(_QWORD *)a2);
    v15 = v26[0];
    v16 = *a3;
    v18 = *(std::__shared_weak_count **)(v16 + 8);
    if (v18)
    {
      v19 = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
      v21 = v17[21];
      do
        v22 = __ldaxr(v19);
      while (__stlxr(v22 - 1, v19));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    else
    {
      v21 = v17[21];
    }
    v23 = **a4;
    if (*(int *)(v23 + 24) <= 1)
      v24 = 1;
    else
      v24 = *(_DWORD *)(v23 + 24);
    if (!*((_QWORD *)this + 38))
      Espresso::throw_exception_selector<Espresso::generic_error>("Kernel not found");
    v25 = *(_DWORD *)(v23 + 20);
    objc_msgSend(v15, "setComputePipelineState:");
    objc_msgSend(v15, "setBuffer:offset:atIndex:", v21, 0, 0);
    objc_msgSend(v15, "setBuffer:offset:atIndex:", *((_QWORD *)this + 50), 0, 1);
    objc_msgSend(v15, "setBuffer:offset:atIndex:", *((_QWORD *)this + 49), 0, 2);
    objc_msgSend(v15, "setBuffer:offset:atIndex:", v13, 0, 3);

    Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(v26);
  }
}

void sub_191461CAC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void Espresso::MPSBuffersEngine::matrix_band_part_kernel::on_resized(Espresso::MPSBuffersEngine::matrix_band_part_kernel *this, Espresso::layer_data *a2, uint64_t **a3)
{
  void *v5;
  void *v6;
  void *v7;
  const void **v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  id *v13;
  id v14;
  int v15;
  __CFString *v16;
  uint64_t v17;
  void *v18;
  uint64_t *v19;
  uint64_t v20;
  int *v21;
  int *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  int v29;
  unint64_t v30;
  int v31;
  int v32;
  int v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  void *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  const char *v51;
  int *v52;
  std::__shared_weak_count *v53;
  void *__p;
  void *v55;
  char v56[20];
  int v57;
  uint64_t v58;
  std::__shared_weak_count *v59;

  v5 = (void *)*((_QWORD *)this + 38);
  *((_QWORD *)this + 38) = 0;

  v6 = (void *)*((_QWORD *)this + 49);
  *((_QWORD *)this + 49) = 0;

  v7 = (void *)*((_QWORD *)this + 50);
  *((_QWORD *)this + 50) = 0;

  v8 = (const void **)*a3;
  if (a3[1] == *a3)
    return;
  if (!*v8)
    return;
  if (!v9)
    return;
  v10 = (std::__shared_weak_count *)v8[1];
  v58 = (uint64_t)v9;
  v59 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v13 = (id *)*((_QWORD *)this + 1);
  v14 = v13[18];
  v15 = *((_DWORD *)this + 78);
  if (v15 == 1)
  {
    v16 = CFSTR("matrix_band_part_f16_buffers");
  }
  else
  {
    if (v15)
    {
      v51 = "Unsupported CP in matrix_band_part kernel MPS_BUFFERS_ENGINE.";
LABEL_47:
      Espresso::throw_exception_selector<Espresso::generic_error>(v51);
    }
    v16 = CFSTR("matrix_band_part_f32_buffers");
  }
  Espresso::context_metal::kernel_for_function((Espresso::context_metal *)v13, &v16->isa);
  v17 = objc_claimAutoreleasedReturnValue();
  v18 = (void *)*((_QWORD *)this + 38);
  *((_QWORD *)this + 38) = v17;

  if (!*((_QWORD *)this + 38))
  {
    v51 = "Could not find kernel for matrix_band_part in buffers engine.";
    goto LABEL_47;
  }
  v19 = *a3;
  v20 = **a3;
  if (v20
  {
    v22 = v21;
    v23 = (std::__shared_weak_count *)v19[1];
    v52 = v21;
    v53 = v23;
    if (v23)
    {
      v24 = (unint64_t *)&v23->__shared_owners_;
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 1, v24));
      v20 = **a3;
    }
  }
  else
  {
    v23 = 0;
    v22 = 0;
    v52 = 0;
    v53 = 0;
  }
  v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 32))(v20);
  v27 = v22[2];
  *((_DWORD *)this + 80) = v27;
  v29 = v22[3];
  v28 = v22[4];
  *((_DWORD *)this + 81) = v28 * v29;
  *((_DWORD *)this + 86) = v28;
  *((_DWORD *)this + 85) = v29;
  v30 = *((_QWORD *)v22 + 31);
  *((_DWORD *)this + 88) = *((_QWORD *)v22 + 31);
  v32 = v22[5];
  v31 = v22[6];
  if (v32 <= 1)
    v32 = 1;
  if (v31 <= 1)
    v33 = 1;
  else
    v33 = v22[6];
  *((_DWORD *)this + 87) = v33 * v32;
  if ((v26 - 1) >= 0xD)
  {
    v35 = v30 + v30 * ((4 * v27 - 1) / v30);
    v34 = 4;
  }
  else
  {
    v34 = qword_191AC0CA0[v26 - 1];
    v35 = v30 + v30 * ((v34 * v27 - 1) / v30);
  }
  v36 = v35 / v34;
  *((_DWORD *)this + 79) = v36;
  v37 = v27 - 1;
  if ((int)v27 < 1)
    v37 = v27 + 2;
  *((_DWORD *)this + 89) = (v37 >> 2) + 1;
  *((_DWORD *)this + 90) = v36 >> 2;
  v38 = v22[5];
  if (v38 <= 1)
    v39 = 1;
  else
    v39 = v22[5];
  *((_DWORD *)this + 91) = v39;
  v40 = v29 * v27;
  *((_DWORD *)this + 82) = v40;
  v41 = v28 * v40;
  *((_DWORD *)this + 83) = v41;
  *((_DWORD *)this + 84) = v41 * v38;
  *((_DWORD *)this + 92) = v31;
  if (v23)
  {
    v42 = (unint64_t *)&v23->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v44 = objc_msgSend(v14, "newBufferWithBytes:length:options:", (char *)this + 316, 56, 0);
  v45 = (void *)*((_QWORD *)this + 49);
  *((_QWORD *)this + 49) = v44;

  *(int32x2_t *)((char *)this + 372) = vrev64_s32(*(int32x2_t *)((char *)this + 280));
  *((_DWORD *)this + 95) = *((unsigned __int8 *)this + 292);
  *((_DWORD *)this + 96) = *((_DWORD *)this + 72);
  Espresso::abstract_blob_container::shape((char *)&v52, v58);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v56, (const Espresso::layer_shape *)&v52, 0);
  *((_DWORD *)this + 97) = v57;
  if (__p)
  {
    v55 = __p;
    operator delete(__p);
  }
  v46 = objc_msgSend(v14, "newBufferWithBytes:length:options:", (char *)this + 372, 20, 0);
  v47 = (void *)*((_QWORD *)this + 50);
  *((_QWORD *)this + 50) = v46;

  v48 = v59;
  if (v59)
  {
    v49 = (unint64_t *)&v59->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
}

void sub_191462048(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  void *v16;
  uint64_t v17;

  if (__p)
    operator delete(__p);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v17 - 64);
  _Unwind_Resume(a1);
}

uint64_t Espresso::MPSBuffersEngine::matrix_band_part_kernel::is_valid_for_engine()
{
  return 1;
}

const char *Espresso::generic_matrix_band_part_kernel::kernel_type_str(Espresso::generic_matrix_band_part_kernel *this)
{
  return "matrix_band_part";
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::matrix_band_part_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

void Espresso::MPSBuffersEngine::l2_normalize_kernel::~l2_normalize_kernel(id *this)
{

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::MPSBuffersEngine::l2_normalize_kernel::__launch(Espresso::MPSBuffersEngine::l2_normalize_kernel *this, uint64_t *a2, Espresso::layer_data *a3, Espresso::layer_data *a4)
{
  const void *v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t *v13;
  const void *v14;
  id *v15;
  id *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  id *v21;
  id *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  id v26;
  id v27;
  id v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::runtime_error *exception;
  __int128 v43;
  uint64_t v44;
  int64x2_t v45;
  uint64_t v46;
  id v47[2];
  id *v48;
  std::__shared_weak_count *v49;
  id *v50;
  std::__shared_weak_count *v51;
  void *v52;
  std::__shared_weak_count *v53;

  if (*((_QWORD *)a4 + 1) != *(_QWORD *)a4)
  {
    if (!*((_QWORD *)this + 37) || !*((_QWORD *)this + 38))
    {
      Espresso::MPSBuffersEngine::l2_normalize_kernel::on_resized(this, a3, a4);
      if (!*((_QWORD *)this + 37) || !*((_QWORD *)this + 38))
        Espresso::throw_exception_selector<Espresso::invalid_state_error>("l2_normalize_kernel failed to create kernels.");
    }
    v8 = (const void *)*((_QWORD *)this + 1);
    if (!v8
    {
      v52 = 0;
      v53 = 0;
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
      exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
    }
    v10 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
    v52 = v9;
    v53 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
    v13 = *(uint64_t **)a4;
    v14 = **(const void ***)a4;
    if (v14
    {
      v16 = v15;
      v17 = (std::__shared_weak_count *)v13[1];
      v50 = v15;
      v51 = v17;
      if (v17)
      {
        v18 = (unint64_t *)&v17->__shared_owners_;
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 1, v18));
      }
    }
    else
    {
      v16 = 0;
      v50 = 0;
      v51 = 0;
    }
    v20 = *(_QWORD *)a3;
    if (*(_QWORD *)v20
    {
      v22 = v21;
      v23 = *(std::__shared_weak_count **)(v20 + 8);
      v48 = v21;
      v49 = v23;
      if (v23)
      {
        v24 = (unint64_t *)&v23->__shared_owners_;
        do
          v25 = __ldxr(v24);
        while (__stxr(v25 + 1, v24));
      }
    }
    else
    {
      v23 = 0;
      v22 = 0;
      v48 = 0;
      v49 = 0;
    }
    v26 = v16[21];
    Espresso::temporary_mtl_encoder::temporary_mtl_encoder((uint64_t)v47, *a2);
    v27 = v47[0];
    v28 = v22[21];
    v29 = **(_QWORD **)a4;
    v31 = *(_DWORD *)(v29 + 20);
    v30 = *(_DWORD *)(v29 + 24);
    if (v30 <= 1)
      v32 = 1;
    else
      v32 = v30;
    objc_msgSend(v27, "setComputePipelineState:", *((_QWORD *)this + 37));
    objc_msgSend(v27, "setBuffer:offset:atIndex:", v26, 0, 0);
    objc_msgSend(v27, "setBuffer:offset:atIndex:", *((_QWORD *)this + 46), 0, 1);
    objc_msgSend(v27, "setBuffer:offset:atIndex:", *((_QWORD *)this + 47), 0, 2);
    objc_msgSend(v27, "setThreadgroupMemoryLength:atIndex:", 512, 0);
    objc_msgSend(v27, "setThreadgroupMemoryLength:atIndex:", 512, 1);
    v33 = v32 * v31;
    if (*((_DWORD *)this + 72) == 1)
      v33 = (*((_DWORD *)this + 85) * v33);
    v45 = vdupq_n_s64(1uLL);
    v46 = v33;
    v43 = xmmword_191A935F0;
    v44 = 1;
    objc_msgSend(v27, "dispatchThreadgroups:threadsPerThreadgroup:", &v45, &v43);
    objc_msgSend(v27, "setComputePipelineState:", *((_QWORD *)this + 38));
    objc_msgSend(v27, "setBuffer:offset:atIndex:", v26, 0, 0);
    objc_msgSend(v27, "setBuffer:offset:atIndex:", *((_QWORD *)this + 46), 0, 1);
    objc_msgSend(v27, "setBuffer:offset:atIndex:", v28, 0, 2);
    objc_msgSend(v27, "setBuffer:offset:atIndex:", *((_QWORD *)this + 47), 0, 3);

    Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(v47);
    if (v23)
    {
      v34 = (unint64_t *)&v23->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    v36 = v51;
    if (v51)
    {
      v37 = (unint64_t *)&v51->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
    v39 = v53;
    if (v53)
    {
      v40 = (unint64_t *)&v53->__shared_owners_;
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }
  }
}

void sub_191462528(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  void *v11;
  uint64_t v12;
  uint64_t v14;
  va_list va;
  uint64_t v16;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v14 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v12 - 80);
  _Unwind_Resume(a1);
}

void Espresso::MPSBuffersEngine::l2_normalize_kernel::blob_options(Espresso::MPSBuffersEngine::l2_normalize_kernel *this@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  const void *v4;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 v17;
  _QWORD *v18;
  std::__shared_weak_count *v19;

  *a3 = 0;
  a3[1] = 0;
  v4 = (const void *)*((_QWORD *)this + 1);
  if (v4)
  {
    if (v7)
    {
      v8 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
      v18 = v7;
      v19 = v8;
      if (v8)
      {
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldxr(p_shared_owners);
        while (__stxr(v10 + 1, p_shared_owners));
      }
      if (a2)
      {
        v11 = operator new(0x70uLL);
        v11[1] = 0;
        v11[2] = 0;
        *v11 = &off_1E2DBE228;
        *((_OWORD *)v11 + 4) = 0u;
        *((_OWORD *)v11 + 5) = 0u;
        *((_OWORD *)v11 + 2) = 0u;
        *((_OWORD *)v11 + 3) = 0u;
        v11[3] = &off_1E2D9B4D8;
        *((_DWORD *)v11 + 12) = 1065353216;
        v11[7] = 0x1FFFFFFFFLL;
        v11[12] = 0;
        v11[13] = 0;
        v11[8] = 0;
        v11[9] = 0;
        *((_BYTE *)v11 + 88) = 0;
        v11[10] = 0;
        *(_QWORD *)&v17 = v11 + 3;
        *((_QWORD *)&v17 + 1) = v11;
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)a3, &v17);
        v12 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
        if (*((_QWORD *)&v17 + 1))
        {
          v13 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 - 1, v13));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(*a3 + 72), v18[28], v18[29]);
        v8 = v19;
      }
      if (v8)
      {
        v15 = (unint64_t *)&v8->__shared_owners_;
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
  }
}

void sub_191462704(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v3);
  _Unwind_Resume(a1);
}

void Espresso::MPSBuffersEngine::l2_normalize_kernel::on_resized(Espresso::MPSBuffersEngine::l2_normalize_kernel *this, Espresso::layer_data *a2, Espresso::layer_data *a3)
{
  void *v6;
  void *v7;
  uint64_t v8;
  Espresso::layer_data *v9;
  void *v10;
  void *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  const void *v15;
  id *v16;
  id *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  MTLFunctionConstantValues *v21;
  MTLFunctionConstantValues *v22;
  int v23;
  __int16 v24;
  __int16 v25;
  NSString *v26;
  unsigned int (*v27)(void *);
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  void *v36;
  void *v37;
  uint64_t v38;
  int *v39;
  int *v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  int v44;
  uint64_t v45;
  int v46;
  int v47;
  unint64_t v48;
  int v49;
  int v50;
  int v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::runtime_error *exception;
  const char *v74;
  int *v75;
  std::__shared_weak_count *v76;
  int v77;
  __int16 v78;
  __int16 v79;
  __int16 v80;
  id *v81;
  std::__shared_weak_count *v82;
  void *v83;
  std::__shared_weak_count *v84;

  v6 = (void *)*((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = 0;

  v7 = (void *)*((_QWORD *)this + 46);
  *((_QWORD *)this + 46) = 0;

  v9 = a3;
  v8 = *(_QWORD *)a3;
  if (*((_QWORD *)v9 + 1) == v8)
    return;
  if (!*(_QWORD *)v8)
    return;
  if (!v10)
    return;
  v11 = v10;
  v12 = *(std::__shared_weak_count **)(v8 + 8);
  v83 = v10;
  v84 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  v15 = (const void *)*((_QWORD *)this + 1);
  if (!v15
  {
    v81 = 0;
    v82 = 0;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
  }
  v17 = v16;
  v18 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  v81 = v16;
  v82 = v18;
  if (v18)
  {
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v21 = (MTLFunctionConstantValues *)objc_opt_new();
  v22 = v21;
  v23 = *((_DWORD *)this + 71);
  v24 = v23 == 1;
  v80 = (v23 - 1) < 2;
  v25 = v23 == 3 || v23 == 1;
  v79 = v25;
  v78 = v24;
  v77 = *((_DWORD *)this + 70);
  -[MTLFunctionConstantValues setConstantValue:type:atIndex:](v21, "setConstantValue:type:atIndex:", &v80, 37, 0);
  -[MTLFunctionConstantValues setConstantValue:type:atIndex:](v22, "setConstantValue:type:atIndex:", &v79, 37, 1);
  -[MTLFunctionConstantValues setConstantValue:type:atIndex:](v22, "setConstantValue:type:atIndex:", &v78, 37, 2);
  -[MTLFunctionConstantValues setConstantValue:type:atIndex:](v22, "setConstantValue:type:atIndex:", &v77, 3, 3);
  v26 = (NSString *)objc_opt_new();
  v27 = *(unsigned int (**)(void *))(*(_QWORD *)v11 + 32);
  if (*((_DWORD *)this + 72) != 1)
  {
    if (!v27(v11))
    {
      Espresso::context_metal::kernel_for_function((Espresso::context_metal *)v17, CFSTR("l2_normalize_buffers_f32"));
      v35 = objc_claimAutoreleasedReturnValue();
      v36 = (void *)*((_QWORD *)this + 37);
      *((_QWORD *)this + 37) = v35;

      Espresso::context_metal::kernel_for_function((Espresso::context_metal *)v17, CFSTR("l2_normalize_apply_buffers_f32"), v26, v22);
      v30 = objc_claimAutoreleasedReturnValue();
      goto LABEL_24;
    }
    if ((*(unsigned int (**)(void *))(*(_QWORD *)v11 + 32))(v11) == 1)
    {
      Espresso::context_metal::kernel_for_function((Espresso::context_metal *)v17, CFSTR("l2_normalize_buffers_f16"));
      v31 = objc_claimAutoreleasedReturnValue();
      v32 = (void *)*((_QWORD *)this + 37);
      *((_QWORD *)this + 37) = v31;

      Espresso::context_metal::kernel_for_function((Espresso::context_metal *)v17, CFSTR("l2_normalize_apply_buffers_f16"), v26, v22);
      v30 = objc_claimAutoreleasedReturnValue();
      goto LABEL_24;
    }
LABEL_68:
    Espresso::throw_exception_selector<Espresso::generic_error>("Unsupported compute path for L2 norm in buffers engine.");
  }
  if (!v27(v11))
  {
    Espresso::context_metal::kernel_for_function((Espresso::context_metal *)v17, CFSTR("l2_normalize_buffers_f32_axis1"));
    v33 = objc_claimAutoreleasedReturnValue();
    v34 = (void *)*((_QWORD *)this + 37);
    *((_QWORD *)this + 37) = v33;

    Espresso::context_metal::kernel_for_function((Espresso::context_metal *)v17, CFSTR("l2_normalize_apply_buffers_f32_axis1"), v26, v22);
    v30 = objc_claimAutoreleasedReturnValue();
    goto LABEL_24;
  }
  if ((*(unsigned int (**)(void *))(*(_QWORD *)v11 + 32))(v11) != 1)
    goto LABEL_68;
  Espresso::context_metal::kernel_for_function((Espresso::context_metal *)v17, CFSTR("l2_normalize_buffers_f16_axis1"));
  v28 = objc_claimAutoreleasedReturnValue();
  v29 = (void *)*((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = v28;

  Espresso::context_metal::kernel_for_function((Espresso::context_metal *)v17, CFSTR("l2_normalize_apply_buffers_f16_axis1"), v26, v22);
  v30 = objc_claimAutoreleasedReturnValue();
LABEL_24:
  v37 = (void *)*((_QWORD *)this + 38);
  *((_QWORD *)this + 38) = v30;

  v38 = *(_QWORD *)a2;
  if (*(_QWORD *)v38
  {
    v40 = v39;
    v41 = *(std::__shared_weak_count **)(v38 + 8);
    v75 = v39;
    v76 = v41;
    if (v41)
    {
      v42 = (unint64_t *)&v41->__shared_owners_;
      do
        v43 = __ldxr(v42);
      while (__stxr(v43 + 1, v42));
    }
  }
  else
  {
    v41 = 0;
    v40 = 0;
    v75 = 0;
    v76 = 0;
  }
  v44 = (*(uint64_t (**)(int *))(*(_QWORD *)v40 + 32))(v40);
  v45 = v40[2];
  *((_DWORD *)this + 79) = v45;
  v47 = v40[3];
  v46 = v40[4];
  *((_DWORD *)this + 80) = v46 * v47;
  *((_DWORD *)this + 85) = v46;
  *((_DWORD *)this + 84) = v47;
  v48 = *((_QWORD *)v40 + 31);
  *((_DWORD *)this + 87) = *((_QWORD *)v40 + 31);
  v50 = v40[5];
  v49 = v40[6];
  if (v50 <= 1)
    v50 = 1;
  if (v49 <= 1)
    v51 = 1;
  else
    v51 = v40[6];
  *((_DWORD *)this + 86) = v51 * v50;
  if ((v44 - 1) >= 0xD)
  {
    v53 = v48 + v48 * ((4 * v45 - 1) / v48);
    v52 = 4;
  }
  else
  {
    v52 = qword_191AC0CA0[v44 - 1];
    v53 = v48 + v48 * ((v52 * v45 - 1) / v48);
  }
  v54 = v53 / v52;
  *((_DWORD *)this + 78) = v54;
  v55 = v45 - 1;
  if ((int)v45 < 1)
    v55 = v45 + 2;
  *((_DWORD *)this + 88) = (v55 >> 2) + 1;
  *((_DWORD *)this + 89) = v54 >> 2;
  v56 = v40[5];
  if (v56 <= 1)
    v57 = 1;
  else
    v57 = v40[5];
  *((_DWORD *)this + 90) = v57;
  v58 = v47 * v45;
  *((_DWORD *)this + 81) = v58;
  v59 = v46 * v58;
  *((_DWORD *)this + 82) = v59;
  *((_DWORD *)this + 83) = v59 * v56;
  *((_DWORD *)this + 91) = v49;
  v60 = objc_msgSend(v17[18], "newBufferWithBytes:length:options:", (char *)this + 312, 56, 0, v75, v76);
  v61 = (void *)*((_QWORD *)this + 46);
  *((_QWORD *)this + 46) = v60;

  v62 = 8 * *((unsigned int *)this + 86);
  if (*((_DWORD *)this + 72) == 1)
    v62 *= *((unsigned int *)this + 85);
  v63 = objc_msgSend(v17[18], "newBufferWithLength:options:", v62, 0);
  v64 = (void *)*((_QWORD *)this + 47);
  *((_QWORD *)this + 47) = v63;

  if (!*((_QWORD *)this + 37))
  {
    v74 = "Failed to find kernel for L2 norm in buffers engine.";
    goto LABEL_67;
  }
  if (!*((_QWORD *)this + 38))
  {
    v74 = "Failed to find application kernel for L2 norm in buffers engine.";
LABEL_67:
    Espresso::throw_exception_selector<Espresso::generic_error>(v74);
  }
  if (v41)
  {
    v65 = (unint64_t *)&v41->__shared_owners_;
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }

  v67 = v82;
  if (v82)
  {
    v68 = (unint64_t *)&v82->__shared_owners_;
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = v84;
  if (v84)
  {
    v71 = (unint64_t *)&v84->__shared_owners_;
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
}

void sub_191462CD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void *v5;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

BOOL Espresso::MPSBuffersEngine::l2_normalize_kernel::is_valid_for_engine(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 288) - 1) <= 1 && *(_DWORD *)(a1 + 284) != 0;
}

void Espresso::MPSBuffersEngine::softmax_nd_kernel::~softmax_nd_kernel(Espresso::MPSBuffersEngine::softmax_nd_kernel *this)
{
  void *v2;

  v2 = (void *)*((_QWORD *)this + 47);
  if (v2)
  {
    *((_QWORD *)this + 48) = v2;
    operator delete(v2);
  }

  Espresso::base_kernel::~base_kernel(this);
}

{
  void *v2;

  v2 = (void *)*((_QWORD *)this + 47);
  if (v2)
  {
    *((_QWORD *)this + 48) = v2;
    operator delete(v2);
  }

  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::MPSBuffersEngine::softmax_nd_kernel::__launch(Espresso::MPSBuffersEngine::softmax_nd_kernel *this, uint64_t *a2, Espresso::layer_data *a3, Espresso::layer_data *a4)
{
  const void *v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  const void *v14;
  id *v15;
  id *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  id *v21;
  id *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  id v26;
  id v27;
  id v28;
  int v29;
  BOOL v30;
  int v31;
  int v32;
  int v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::runtime_error *exception;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  int64x2_t v46;
  id v47[2];
  id *v48;
  std::__shared_weak_count *v49;
  id *v50;
  std::__shared_weak_count *v51;
  void *v52;
  std::__shared_weak_count *v53;

  if (*((_QWORD *)a4 + 1) != *(_QWORD *)a4)
  {
    if (!*((_QWORD *)this + 36))
    {
      Espresso::MPSBuffersEngine::softmax_nd_kernel::on_resized(this, a3, a4);
      if (!*((_QWORD *)this + 36))
        Espresso::throw_exception_selector<Espresso::invalid_state_error>("softmax_nd_kernel failed to get ready.");
    }
    v8 = (const void *)*((_QWORD *)this + 1);
    if (!v8
    {
      v52 = 0;
      v53 = 0;
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
      exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
    }
    v10 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
    v52 = v9;
    v53 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
    v13 = *(_QWORD *)a4;
    v14 = **(const void ***)a4;
    if (v14
    {
      v16 = v15;
      v17 = *(std::__shared_weak_count **)(v13 + 8);
      v50 = v15;
      v51 = v17;
      if (v17)
      {
        v18 = (unint64_t *)&v17->__shared_owners_;
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 1, v18));
      }
    }
    else
    {
      v16 = 0;
      v50 = 0;
      v51 = 0;
    }
    v20 = *(_QWORD *)a3;
    if (*(_QWORD *)v20
    {
      v22 = v21;
      v23 = *(std::__shared_weak_count **)(v20 + 8);
      v48 = v21;
      v49 = v23;
      if (v23)
      {
        v24 = (unint64_t *)&v23->__shared_owners_;
        do
          v25 = __ldxr(v24);
        while (__stxr(v25 + 1, v24));
      }
    }
    else
    {
      v23 = 0;
      v22 = 0;
      v48 = 0;
      v49 = 0;
    }
    v26 = v16[21];
    Espresso::temporary_mtl_encoder::temporary_mtl_encoder((uint64_t)v47, *a2);
    v27 = v47[0];
    v28 = v22[21];
    v29 = *((_DWORD *)this + 92);
    v31 = v29 - 1;
    v30 = v29 < 1;
    v32 = v29 + 254;
    if (v30)
      v33 = v32;
    else
      v33 = v31;
    objc_msgSend(v27, "setComputePipelineState:", *((_QWORD *)this + 36));
    objc_msgSend(v27, "setBuffer:offset:atIndex:", v26, 0, 0);
    objc_msgSend(v27, "setBuffer:offset:atIndex:", *((_QWORD *)this + 37), 0, 1);
    objc_msgSend(v27, "setBuffer:offset:atIndex:", v28, 0, 2);
    objc_msgSend(v27, "setBuffer:offset:atIndex:", *((_QWORD *)this + 38), 0, 3);
    objc_msgSend(v27, "setThreadgroupMemoryLength:atIndex:", 1024, 0);
    v44 = 1;
    v45 = (v33 >> 8) + 1;
    v46 = vdupq_n_s64(1uLL);
    v43 = xmmword_191A935E0;
    objc_msgSend(v27, "dispatchThreadgroups:threadsPerThreadgroup:", &v45, &v43);

    Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(v47);
    if (v23)
    {
      v34 = (unint64_t *)&v23->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    v36 = v51;
    if (v51)
    {
      v37 = (unint64_t *)&v51->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
    v39 = v53;
    if (v53)
    {
      v40 = (unint64_t *)&v53->__shared_owners_;
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }
  }
}

void sub_191463150(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  uint64_t v10;
  uint64_t v12;
  va_list va;
  uint64_t v14;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v10 - 64);
  _Unwind_Resume(a1);
}

void Espresso::MPSBuffersEngine::softmax_nd_kernel::blob_options(Espresso::MPSBuffersEngine::softmax_nd_kernel *this@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  const void *v4;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 v17;
  _QWORD *v18;
  std::__shared_weak_count *v19;

  *a3 = 0;
  a3[1] = 0;
  v4 = (const void *)*((_QWORD *)this + 1);
  if (v4)
  {
    if (v7)
    {
      v8 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
      v18 = v7;
      v19 = v8;
      if (v8)
      {
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldxr(p_shared_owners);
        while (__stxr(v10 + 1, p_shared_owners));
      }
      if (a2)
      {
        v11 = operator new(0x70uLL);
        v11[1] = 0;
        v11[2] = 0;
        *v11 = &off_1E2DBE228;
        *((_OWORD *)v11 + 4) = 0u;
        *((_OWORD *)v11 + 5) = 0u;
        *((_OWORD *)v11 + 2) = 0u;
        *((_OWORD *)v11 + 3) = 0u;
        v11[3] = &off_1E2D9B4D8;
        *((_DWORD *)v11 + 12) = 1065353216;
        v11[7] = 0x1FFFFFFFFLL;
        v11[12] = 0;
        v11[13] = 0;
        v11[8] = 0;
        v11[9] = 0;
        *((_BYTE *)v11 + 88) = 0;
        v11[10] = 0;
        *(_QWORD *)&v17 = v11 + 3;
        *((_QWORD *)&v17 + 1) = v11;
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)a3, &v17);
        v12 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
        if (*((_QWORD *)&v17 + 1))
        {
          v13 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 - 1, v13));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(*a3 + 72), v18[28], v18[29]);
        v8 = v19;
      }
      if (v8)
      {
        v15 = (unint64_t *)&v8->__shared_owners_;
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
  }
}

void sub_191463328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v3);
  _Unwind_Resume(a1);
}

void Espresso::MPSBuffersEngine::softmax_nd_kernel::on_resized(Espresso::MPSBuffersEngine::softmax_nd_kernel *this, Espresso::layer_data *a2, Espresso::layer_data *a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD *v18;
  void *v19;
  const void *v20;
  id *v21;
  id *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  id v26;
  int v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  int v32;
  int v33;
  int v34;
  unint64_t v35;
  int v36;
  int v37;
  int v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  unsigned int v47;
  unsigned int v48;
  int v49;
  int v50;
  unsigned int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  unsigned int v56;
  int v57;
  int v58;
  const char *v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  void *v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::runtime_error *exception;
  const char *v74;
  id *v75;
  std::vector<int> v76;
  void *__p;
  void *v78;
  _BYTE v79[20];
  int v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  void *v86;
  void *v87;
  void *v88;
  std::__shared_weak_count *v89;
  void *v90;
  std::__shared_weak_count *v91;

  v6 = (void *)*((_QWORD *)this + 36);
  *((_QWORD *)this + 36) = 0;

  v7 = *(_QWORD *)a3;
  if (*((_QWORD *)a3 + 1) == *(_QWORD *)a3)
    return;
  v8 = *(_QWORD *)a2;
  if (*((_QWORD *)a2 + 1) == *(_QWORD *)a2)
    return;
  if (*(_QWORD *)v7
  {
    v10 = (uint64_t)v9;
    v11 = *(std::__shared_weak_count **)(v7 + 8);
    v90 = v9;
    v91 = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
      v8 = *(_QWORD *)a2;
    }
  }
  else
  {
    v10 = 0;
    v90 = 0;
    v91 = 0;
  }
  if (*(_QWORD *)v8)
  {
    if (v14)
    {
      v15 = *(std::__shared_weak_count **)(v8 + 8);
      v88 = v14;
      v89 = v15;
      if (v15)
      {
        v16 = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
      }
      if (!v10)
        goto LABEL_63;
      Espresso::abstract_blob_container::shape((char *)&v81, v10);
      Espresso::abstract_blob_container::shape((char *)&v76, v10);
      Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v79, (const Espresso::layer_shape *)&v76, 0);
      if (__p)
      {
        v78 = __p;
        operator delete(__p);
      }
      Espresso::layer_nd_shape::shape_vector(&v76, (uint64_t)v79);
      v18 = (_QWORD *)((char *)this + 376);
      v19 = (void *)*((_QWORD *)this + 47);
      if (v19)
      {
        *((_QWORD *)this + 48) = v19;
        operator delete(v19);
        *v18 = 0;
        *((_QWORD *)this + 48) = 0;
        *((_QWORD *)this + 49) = 0;
      }
      *(_OWORD *)v18 = *(_OWORD *)&v76.__begin_;
      *((_QWORD *)this + 49) = v76.__end_cap_.__value_;
      v20 = (const void *)*((_QWORD *)this + 1);
      if (!v20
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
        exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
      }
      v22 = v21;
      v23 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
      v75 = v21;
      if (v23)
      {
        v24 = (unint64_t *)&v23->__shared_owners_;
        do
          v25 = __ldxr(v24);
        while (__stxr(v25 + 1, v24));
      }
      v26 = v21[18];
      v27 = *((_DWORD *)this + 70);
      if (v27 < 0 && (v27 += v80, v27 < 0)
        || v27 >= (unint64_t)((uint64_t)(*((_QWORD *)this + 48) - *((_QWORD *)this + 47)) >> 2))
      {
        Espresso::throw_exception_selector<Espresso::invalid_state_error>("Invalid value of the argument 'axis'.");
      }
      v28 = v80;
      v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
      v30 = v28 + ~v27;
      v31 = *(int *)(v10 + 8);
      *((_DWORD *)this + 79) = v31;
      v32 = *(_DWORD *)(v10 + 12);
      v33 = *(_DWORD *)(v10 + 16);
      v34 = v33 * v32;
      *((_DWORD *)this + 80) = v33 * v32;
      *((_DWORD *)this + 85) = v33;
      *((_DWORD *)this + 84) = v32;
      v35 = *(_QWORD *)(v10 + 248);
      *((_DWORD *)this + 87) = *(_QWORD *)(v10 + 248);
      v37 = *(_DWORD *)(v10 + 20);
      v36 = *(_DWORD *)(v10 + 24);
      if (v37 <= 1)
        v37 = 1;
      if (v36 <= 1)
        v38 = 1;
      else
        v38 = *(_DWORD *)(v10 + 24);
      *((_DWORD *)this + 86) = v38 * v37;
      if ((v29 - 1) >= 0xD)
      {
        v40 = v35 + v35 * ((4 * v31 - 1) / v35);
        v39 = 4;
      }
      else
      {
        v39 = qword_191AC0CA0[v29 - 1];
        v40 = v35 + v35 * ((v39 * v31 - 1) / v35);
      }
      v41 = v40 / v39;
      *((_DWORD *)this + 78) = v40 / v39;
      v42 = v31 - 1;
      if ((int)v31 < 1)
        v42 = v31 + 2;
      *((_DWORD *)this + 88) = (v42 >> 2) + 1;
      *((_DWORD *)this + 89) = v41 >> 2;
      v43 = *(_DWORD *)(v10 + 20);
      if (v43 <= 1)
        v44 = 1;
      else
        v44 = *(_DWORD *)(v10 + 20);
      *((_DWORD *)this + 90) = v44;
      v45 = v32 * v31;
      *((_DWORD *)this + 81) = v45;
      v46 = v33 * v45;
      *((_DWORD *)this + 82) = v46;
      *((_DWORD *)this + 83) = v46 * v43;
      *((_DWORD *)this + 91) = v36;
      *((_DWORD *)this + 92) = 0;
      switch(v30)
      {
        case 0:
          v47 = v81;
          v48 = v84 * v83 * v82 * v85;
          *((_DWORD *)this + 92) = 32 * v48;
          v49 = *(_DWORD *)(v10 + 240);
          LODWORD(v41) = 1;
          v50 = 1;
          goto LABEL_48;
        case 1:
          v50 = *(_DWORD *)(v10 + 240);
          v47 = v82;
          v48 = v84 * v83 * v85;
          *((_DWORD *)this + 92) = 32 * v48 * v50;
          v49 = v50 * v47;
          goto LABEL_48;
        case 2:
          v55 = *(_DWORD *)(v10 + 240);
          v56 = v82;
          v47 = v83;
          v48 = v85 * v84;
          *((_DWORD *)this + 92) = 32 * v85 * v84 * v55 * v82;
          v50 = v56 * v41;
          v49 = v55 * v47 * v56;
          LODWORD(v41) = v32 * v41;
          goto LABEL_48;
        case 3:
          v47 = v84;
          v48 = v85;
          v57 = v83 * v82;
          v58 = v83 * v82 * *(_DWORD *)(v10 + 240);
          *((_DWORD *)this + 92) = 32 * v58 * v85;
          v50 = v57 * v41;
          v54 = v34 * v41;
          v49 = v58 * v47;
          goto LABEL_46;
        case 4:
          v51 = v84;
          v47 = v85;
          v52 = v83 * v82;
          v53 = v83 * v82 * *(_DWORD *)(v10 + 240) * v84;
          *((_DWORD *)this + 92) = 32 * v53;
          v54 = v34 * v41 * v44;
          v49 = v53 * v47;
          v50 = v52 * v41 * v51;
          v48 = 1;
LABEL_46:
          LODWORD(v41) = v54;
LABEL_48:
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10))
          {
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10) != 1)
              goto LABEL_53;
            v59 = "softmax_nd_axis_get_max_and_sum_buffers_fp16";
          }
          else
          {
            v59 = "softmax_nd_axis_get_max_and_sum_buffers_fp32";
          }
          objc_msgSend(v22[20], "kernelForFunction:cacheString:withConstants:", v59, 0, 0, v75, v23);
          v60 = objc_claimAutoreleasedReturnValue();
          v61 = (void *)*((_QWORD *)this + 36);
          *((_QWORD *)this + 36) = v60;

LABEL_53:
          if (*((_QWORD *)this + 36))
          {
            v62 = objc_msgSend(v26, "newBufferWithBytes:length:options:", (char *)this + 312, 56, 0);
            v63 = (void *)*((_QWORD *)this + 37);
            *((_QWORD *)this + 37) = v62;

            if (*((_QWORD *)this + 37))
            {
              v76.__begin_ = (std::vector<int>::pointer)__PAIR64__(v49, v50);
              v76.__end_ = (std::vector<int>::pointer)__PAIR64__(v47, v41);
              v76.__end_cap_.__value_ = (int *)v48;
              v64 = objc_msgSend(v26, "newBufferWithBytes:length:options:", &v76, 24, 0);
              v65 = (void *)*((_QWORD *)this + 38);
              *((_QWORD *)this + 38) = v64;

              if (v23)
              {
                v66 = (unint64_t *)&v23->__shared_owners_;
                do
                  v67 = __ldaxr(v66);
                while (__stlxr(v67 - 1, v66));
                if (!v67)
                {
                  ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
                  std::__shared_weak_count::__release_weak(v23);
                }
              }
              if (v86)
              {
                v87 = v86;
                operator delete(v86);
              }
              v15 = v89;
LABEL_63:
              if (v15)
              {
                v68 = (unint64_t *)&v15->__shared_owners_;
                do
                  v69 = __ldaxr(v68);
                while (__stlxr(v69 - 1, v68));
                if (!v69)
                {
                  ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
                  std::__shared_weak_count::__release_weak(v15);
                }
              }
              break;
            }
            v74 = "failed to allocate buffer for pb_src params.";
          }
          else
          {
            v74 = "Could not create kernel for softmax_nd!";
          }
LABEL_78:
          Espresso::throw_exception_selector<Espresso::generic_error>(v74);
        default:
          v74 = "axis not supported in softmax_nd mpsbuffers.";
          goto LABEL_78;
      }
    }
  }
  v70 = v91;
  if (v91)
  {
    v71 = (unint64_t *)&v91->__shared_owners_;
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
}

void sub_191463944(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28)
{
  void *v28;
  uint64_t v29;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (__p)
  {
    a28 = (uint64_t)__p;
    operator delete(__p);
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v29 - 120);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v29 - 104);
  _Unwind_Resume(a1);
}

uint64_t Espresso::MPSBuffersEngine::softmax_nd_kernel::is_valid_for_engine()
{
  return 1;
}

void Espresso::MPSBuffersEngine::fill_kernel::~fill_kernel(id *this)
{

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::MPSBuffersEngine::fill_kernel::__launch(_QWORD *a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4;
  void *v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  id v13;
  id v14;
  unint64_t *v15;
  unint64_t v16;
  id v17[2];
  void *v18;
  std::__shared_weak_count *v19;

  v4 = *a3;
  if (a3[1] != *a3)
  {
    if (!a1[40] || !a1[41])
    {
      (*(void (**)(_QWORD *, uint64_t *, uint64_t))(*a1 + 80))(a1, a3, a4);
      if (!a1[40])
        Espresso::throw_exception_selector<Espresso::generic_error>("Failed to create kernel for fill_kernel.");
      v4 = *a3;
    }
    if (*(_QWORD *)v4
    {
      v9 = v8;
      v10 = *(std::__shared_weak_count **)(v4 + 8);
      v18 = v8;
      v19 = v10;
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldxr(p_shared_owners);
        while (__stxr(v12 + 1, p_shared_owners));
      }
    }
    else
    {
      v10 = 0;
      v9 = 0;
      v18 = 0;
      v19 = 0;
    }
    Espresso::temporary_mtl_encoder::temporary_mtl_encoder((uint64_t)v17, *a2);
    v13 = v17[0];
    v14 = *((id *)v9 + 21);
    objc_msgSend(v13, "setComputePipelineState:", a1[40]);
    objc_msgSend(v13, "setBuffer:offset:atIndex:", v14, 0, 0);
    objc_msgSend(v13, "setBuffer:offset:atIndex:", a1[41], 0, 1);
    objc_msgSend(v13, "setBytes:length:atIndex:", a1 + 35, 36, 2);

    Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(v17);
    if (v10)
    {
      v15 = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
}

void sub_191463BF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void Espresso::MPSBuffersEngine::fill_kernel::on_resized(Espresso::MPSBuffersEngine::fill_kernel *this, Espresso::layer_data *a2, Espresso::layer_data *a3)
{
  void *v5;
  void *v6;
  uint64_t v7;
  Espresso::layer_data *v8;
  int *v9;
  int *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  const void *v14;
  id *v15;
  id *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  const char *v20;
  uint64_t v21;
  void *v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  unint64_t v27;
  int v28;
  int v29;
  int v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  void *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  std::runtime_error *exception;
  const char *v46;
  id *v47;
  std::__shared_weak_count *v48;
  int *v49;
  std::__shared_weak_count *v50;

  v5 = (void *)*((_QWORD *)this + 40);
  *((_QWORD *)this + 40) = 0;

  v6 = (void *)*((_QWORD *)this + 41);
  *((_QWORD *)this + 41) = 0;

  v8 = a2;
  v7 = *(_QWORD *)a2;
  if (*((_QWORD *)v8 + 1) == v7)
    return;
  if (!*(_QWORD *)v7)
    return;
  if (!v9)
    return;
  v10 = v9;
  v11 = *(std::__shared_weak_count **)(v7 + 8);
  v49 = v9;
  v50 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  v14 = (const void *)*((_QWORD *)this + 1);
  if (!v14
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
  }
  v16 = v15;
  v17 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  v47 = v15;
  v48 = v17;
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  if ((*(unsigned int (**)(int *))(*(_QWORD *)v10 + 32))(v10))
  {
    if ((*(unsigned int (**)(int *))(*(_QWORD *)v10 + 32))(v10) != 1)
      goto LABEL_17;
    v20 = "fill_kernel_buffers_f16";
  }
  else
  {
    v20 = "fill_kernel_buffers_f32";
  }
  objc_msgSend(v16[20], "kernelForFunction:cacheString:withConstants:", v20, 0, 0, v47, v17, v49);
  v21 = objc_claimAutoreleasedReturnValue();
  v22 = (void *)*((_QWORD *)this + 40);
  *((_QWORD *)this + 40) = v21;

LABEL_17:
  if (!*((_QWORD *)this + 40))
  {
    v46 = "Failed to find kernel for fill_kernel";
    goto LABEL_46;
  }
  v23 = (*(uint64_t (**)(int *))(*(_QWORD *)v10 + 32))(v10);
  v24 = v10[2];
  *((_DWORD *)this + 85) = v24;
  v26 = v10[3];
  v25 = v10[4];
  *((_DWORD *)this + 86) = v25 * v26;
  *((_DWORD *)this + 91) = v25;
  *((_DWORD *)this + 90) = v26;
  v27 = *((_QWORD *)v10 + 31);
  *((_DWORD *)this + 93) = *((_QWORD *)v10 + 31);
  v29 = v10[5];
  v28 = v10[6];
  if (v29 <= 1)
    v29 = 1;
  if (v28 <= 1)
    v30 = 1;
  else
    v30 = v10[6];
  *((_DWORD *)this + 92) = v30 * v29;
  if ((v23 - 1) >= 0xD)
  {
    v32 = v27 + v27 * ((4 * v24 - 1) / v27);
    v31 = 4;
  }
  else
  {
    v31 = qword_191AC0CA0[v23 - 1];
    v32 = v27 + v27 * ((v31 * v24 - 1) / v27);
  }
  v33 = v32 / v31;
  *((_DWORD *)this + 84) = v33;
  v34 = v24 - 1;
  if ((int)v24 < 1)
    v34 = v24 + 2;
  *((_DWORD *)this + 94) = (v34 >> 2) + 1;
  *((_DWORD *)this + 95) = v33 >> 2;
  v35 = v10[5];
  if (v35 <= 1)
    v36 = 1;
  else
    v36 = v10[5];
  *((_DWORD *)this + 96) = v36;
  v37 = v26 * v24;
  *((_DWORD *)this + 87) = v37;
  v38 = v25 * v37;
  *((_DWORD *)this + 88) = v38;
  *((_DWORD *)this + 89) = v38 * v35;
  *((_DWORD *)this + 97) = v28;
  v39 = objc_msgSend(v16[18], "newBufferWithBytes:length:options:", (char *)this + 336, 56, 0, v47, v48);
  v40 = (void *)*((_QWORD *)this + 41);
  *((_QWORD *)this + 41) = v39;

  if (!*((_QWORD *)this + 41))
  {
    v46 = "Failed to create pb_dst in fill_kernel.";
LABEL_46:
    Espresso::throw_exception_selector<Espresso::generic_error>(v46);
  }
  if (v17)
  {
    v41 = (unint64_t *)&v17->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (v50)
  {
    v43 = (unint64_t *)&v50->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
}

void sub_191463F48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

BOOL Espresso::MPSBuffersEngine::fill_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  return a3[1] == *a3 || *(_BYTE *)(a1 + 312) == 0;
}

void Espresso::MPSBuffersEngine::general_slice_kernel::~general_slice_kernel(id *this)
{

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::MPSBuffersEngine::general_slice_kernel::__launch(_QWORD *a1, uint64_t *a2, uint64_t *a3, const void ***a4)
{
  const void *v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  const void **v13;
  const void *v14;
  void *v15;
  void *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  id *v21;
  id *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  id v26;
  id v27;
  id v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::runtime_error *exception;
  id v38[2];
  id *v39;
  std::__shared_weak_count *v40;
  void *v41;
  std::__shared_weak_count *v42;
  void *v43;
  std::__shared_weak_count *v44;

  if (a4[1] != *a4)
  {
    if ((!a1[48] || !a1[65] || !a1[63] || !a1[64])
      && (((*(void (**)(_QWORD *, uint64_t *, const void ***))(*a1 + 80))(a1, a3, a4), !a1[48]) || !a1[65])
      || !a1[63]
      || !a1[64])
    {
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("failed to either create kernel or allocate buffers in general_slice_kernel.");
    }
    v8 = (const void *)a1[1];
    if (!v8
    {
      v43 = 0;
      v44 = 0;
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
      exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
    }
    v10 = (std::__shared_weak_count *)a1[2];
    v43 = v9;
    v44 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
    v13 = *a4;
    v14 = **a4;
    if (v14
    {
      v16 = v15;
      v17 = (std::__shared_weak_count *)v13[1];
      v41 = v15;
      v42 = v17;
      if (v17)
      {
        v18 = (unint64_t *)&v17->__shared_owners_;
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 1, v18));
      }
    }
    else
    {
      v16 = 0;
      v41 = 0;
      v42 = 0;
    }
    v20 = *a3;
    if (*(_QWORD *)v20
    {
      v22 = v21;
      v23 = *(std::__shared_weak_count **)(v20 + 8);
      v39 = v21;
      v40 = v23;
      if (v23)
      {
        v24 = (unint64_t *)&v23->__shared_owners_;
        do
          v25 = __ldxr(v24);
        while (__stxr(v25 + 1, v24));
      }
    }
    else
    {
      v23 = 0;
      v22 = 0;
      v39 = 0;
      v40 = 0;
    }
    v26 = *((id *)v16 + 21);
    Espresso::temporary_mtl_encoder::temporary_mtl_encoder((uint64_t)v38, *a2);
    v27 = v38[0];
    v28 = v22[21];
    objc_msgSend(v27, "setComputePipelineState:", a1[48]);
    objc_msgSend(v27, "setBuffer:offset:atIndex:", v26, 0, 0);
    objc_msgSend(v27, "setBuffer:offset:atIndex:", v28, 0, 1);
    objc_msgSend(v27, "setBuffer:offset:atIndex:", a1[63], 0, 2);
    objc_msgSend(v27, "setBuffer:offset:atIndex:", a1[64], 0, 3);
    objc_msgSend(v27, "setBuffer:offset:atIndex:", a1[65], 0, 4);

    Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(v38);
    if (v23)
    {
      v29 = (unint64_t *)&v23->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    v31 = v42;
    if (v42)
    {
      v32 = (unint64_t *)&v42->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    v34 = v44;
    if (v44)
    {
      v35 = (unint64_t *)&v44->__shared_owners_;
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
  }
}

void sub_191464390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  va_list va1;
  uint64_t v10;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v8 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  _Unwind_Resume(a1);
}

void Espresso::MPSBuffersEngine::general_slice_kernel::blob_options(Espresso::MPSBuffersEngine::general_slice_kernel *this@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  const void *v4;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 v17;
  _QWORD *v18;
  std::__shared_weak_count *v19;

  *a3 = 0;
  a3[1] = 0;
  v4 = (const void *)*((_QWORD *)this + 1);
  if (v4)
  {
    if (v7)
    {
      v8 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
      v18 = v7;
      v19 = v8;
      if (v8)
      {
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldxr(p_shared_owners);
        while (__stxr(v10 + 1, p_shared_owners));
      }
      if (a2)
      {
        v11 = operator new(0x70uLL);
        v11[1] = 0;
        v11[2] = 0;
        *v11 = &off_1E2DBE228;
        *((_OWORD *)v11 + 4) = 0u;
        *((_OWORD *)v11 + 5) = 0u;
        *((_OWORD *)v11 + 2) = 0u;
        *((_OWORD *)v11 + 3) = 0u;
        v11[3] = &off_1E2D9B4D8;
        *((_DWORD *)v11 + 12) = 1065353216;
        v11[7] = 0x1FFFFFFFFLL;
        v11[12] = 0;
        v11[13] = 0;
        v11[8] = 0;
        v11[9] = 0;
        *((_BYTE *)v11 + 88) = 0;
        v11[10] = 0;
        *(_QWORD *)&v17 = v11 + 3;
        *((_QWORD *)&v17 + 1) = v11;
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)a3, &v17);
        v12 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
        if (*((_QWORD *)&v17 + 1))
        {
          v13 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 - 1, v13));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(*a3 + 72), v18[28], v18[29]);
        v8 = v19;
      }
      if (v8)
      {
        v15 = (unint64_t *)&v8->__shared_owners_;
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
  }
}

void sub_191464564(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v3);
  _Unwind_Resume(a1);
}

void Espresso::MPSBuffersEngine::general_slice_kernel::on_resized(Espresso::MPSBuffersEngine::general_slice_kernel *this, Espresso::layer_data *a2, Espresso::layer_data *a3)
{
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  int *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  int *v16;
  int *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  std::vector<int>::pointer begin;
  char *v24;
  char *v25;
  int v26;
  uint64_t v27;
  char *v28;
  char *v29;
  int v30;
  char *v31;
  __int128 v32;
  char *v33;
  _DWORD *v34;
  int v35;
  char *v36;
  int v37;
  char *v38;
  int v39;
  char *v40;
  int v41;
  unsigned int v42;
  int v43;
  char *v44;
  int v45;
  const void *v46;
  id *v47;
  id *v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  int v52;
  uint64_t v53;
  int v54;
  int v55;
  unint64_t v56;
  int v57;
  int v58;
  int v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  uint64_t v69;
  int v70;
  int v71;
  unint64_t v72;
  int v73;
  int v74;
  int v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  uint64_t v84;
  void *v85;
  uint64_t v86;
  void *v87;
  uint64_t v88;
  void *v89;
  const char *v90;
  uint64_t v91;
  void *v92;
  unint64_t *v93;
  unint64_t v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  std::runtime_error *exception;
  id *v101;
  std::__shared_weak_count *v102;
  std::vector<int> v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  __int128 v108;
  _BYTE __p[20];
  int v110;
  _BYTE v111[20];
  int v112;
  int *v113;
  std::__shared_weak_count *v114;
  int *v115;
  std::__shared_weak_count *v116;

  v6 = (void *)*((_QWORD *)this + 48);
  *((_QWORD *)this + 48) = 0;

  v7 = (void *)*((_QWORD *)this + 63);
  *((_QWORD *)this + 63) = 0;

  v8 = (void *)*((_QWORD *)this + 64);
  *((_QWORD *)this + 64) = 0;

  v9 = *(_QWORD *)a3;
  if (*((_QWORD *)a3 + 1) == *(_QWORD *)a3)
    return;
  v10 = *(_QWORD *)a2;
  if (*((_QWORD *)a2 + 1) == *(_QWORD *)a2)
    return;
  if (*(_QWORD *)v9
  {
    v12 = v11;
    v13 = *(std::__shared_weak_count **)(v9 + 8);
    v115 = v11;
    v116 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
      v10 = *(_QWORD *)a2;
    }
  }
  else
  {
    v12 = 0;
    v115 = 0;
    v116 = 0;
  }
  if (!*(_QWORD *)v10)
    goto LABEL_101;
  if (!v16)
    goto LABEL_101;
  v17 = v16;
  v18 = *(std::__shared_weak_count **)(v10 + 8);
  v113 = v16;
  v114 = v18;
  if (v18)
  {
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  if (!v12)
    goto LABEL_96;
  Espresso::abstract_blob_container::shape((char *)&v104, **(_QWORD **)a3);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v111, (const Espresso::layer_shape *)&v104, 0);
  if (*(_QWORD *)__p)
  {
    *(_QWORD *)&__p[8] = *(_QWORD *)__p;
    operator delete(*(void **)__p);
  }
  Espresso::layer_nd_shape::shape_vector(&v103, (uint64_t)v111);
  v21 = v112;
  if (v112 < 1)
    goto LABEL_40;
  v22 = 0;
  begin = v103.__begin_;
  v24 = (char *)this + 340;
  do
  {
    if (v24[v22])
    {
      v25 = &v24[4 * v22];
      if (*((int *)v25 - 5) <= 0)
        v26 = begin[v22] - 1;
      else
        v26 = 0;
    }
    else
    {
      v25 = &v24[4 * v22];
      v26 = *((_DWORD *)v25 - 15);
      if ((v26 & 0x80000000) == 0)
        goto LABEL_27;
      v26 += begin[v22];
    }
    *((_DWORD *)v25 - 15) = v26;
    if (v26 < 0)
      goto LABEL_107;
LABEL_27:
    if (v26 >= begin[v22])
LABEL_107:
      Espresso::throw_exception_selector<Espresso::invalid_argument_error>("general_slice_kernel: Invalid values in begin_ids");
    ++v22;
  }
  while (v21 != v22);
  v27 = 0;
  v28 = (char *)this + 345;
  do
  {
    if (v28[v27])
    {
      v29 = &v28[4 * v27];
      if (*(int *)(v29 - 25) < 1)
        v30 = -1;
      else
        v30 = begin[v27];
      *(_DWORD *)(v29 - 45) = v30;
    }
    else
    {
      v31 = &v28[4 * v27];
      v30 = *(_DWORD *)(v31 - 45);
      if (v30 < 0)
      {
        v30 += begin[v27];
        *(_DWORD *)(v31 - 45) = v30;
        if (v30 < 0)
LABEL_108:
          Espresso::throw_exception_selector<Espresso::invalid_argument_error>("general_slice_kernel: Invalid values in end_ids");
      }
    }
    if (v30 > begin[v27])
      goto LABEL_108;
    ++v27;
  }
  while (v21 != v27);
LABEL_40:
  v106 = 0;
  v105 = 0;
  v107 = 0;
  *(_QWORD *)&v32 = 0x100000001;
  *((_QWORD *)&v32 + 1) = 0x100000001;
  v108 = v32;
  *(_DWORD *)__p = 1;
  *(_OWORD *)&__p[4] = 0uLL;
  v110 = 0;
  v104 = v21;
  if ((int)v21 > 0)
  {
    v33 = (char *)this + 280;
    v34 = (_DWORD *)((char *)this + 4 * (v21 - 1) + 280);
    v35 = v34[5];
    LODWORD(v105) = *v34;
    LODWORD(v108) = v35;
    *(_DWORD *)&__p[4] = v34[10];
    if ((_DWORD)v21 != 1)
    {
      v36 = (char *)this + 4 * (v21 - 2);
      v37 = *((_DWORD *)v36 + 75);
      HIDWORD(v105) = *(_DWORD *)&v33[4 * (v21 - 2)];
      DWORD1(v108) = v37;
      *(_DWORD *)&__p[8] = *((_DWORD *)v36 + 80);
      if (v21 >= 3)
      {
        v38 = (char *)this + 4 * (v21 - 3);
        v39 = *((_DWORD *)v38 + 75);
        LODWORD(v106) = *(_DWORD *)&v33[4 * (v21 - 3)];
        DWORD2(v108) = v39;
        *(_DWORD *)&__p[12] = *((_DWORD *)v38 + 80);
        if ((_DWORD)v21 != 3)
        {
          v40 = (char *)this + 4 * (v21 - 4);
          v41 = *((_DWORD *)v40 + 75);
          HIDWORD(v106) = *(_DWORD *)&v33[4 * (v21 - 4)];
          HIDWORD(v108) = v41;
          *(_DWORD *)&__p[16] = *((_DWORD *)v40 + 80);
          if (v21 >= 5)
          {
            v42 = v21 - 5;
            v43 = *(_DWORD *)&v33[4 * v42];
            v44 = (char *)this + 4 * v42;
            v45 = *((_DWORD *)v44 + 75);
            v107 = v43;
            *(_DWORD *)__p = v45;
            v110 = *((_DWORD *)v44 + 80);
          }
        }
      }
    }
  }
  v46 = (const void *)*((_QWORD *)this + 1);
  if (!v46
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
  }
  v48 = v47;
  v49 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  v101 = v47;
  v102 = v49;
  if (v49)
  {
    v50 = (unint64_t *)&v49->__shared_owners_;
    do
      v51 = __ldxr(v50);
    while (__stxr(v51 + 1, v50));
  }
  v52 = (*(uint64_t (**)(int *))(*(_QWORD *)v12 + 32))(v12);
  v53 = v12[2];
  *((_DWORD *)this + 99) = v53;
  v55 = v12[3];
  v54 = v12[4];
  *((_DWORD *)this + 100) = v54 * v55;
  *((_DWORD *)this + 105) = v54;
  *((_DWORD *)this + 104) = v55;
  v56 = *((_QWORD *)v12 + 31);
  *((_DWORD *)this + 107) = *((_QWORD *)v12 + 31);
  v58 = v12[5];
  v57 = v12[6];
  if (v58 <= 1)
    v58 = 1;
  if (v57 <= 1)
    v59 = 1;
  else
    v59 = v12[6];
  *((_DWORD *)this + 106) = v59 * v58;
  if ((v52 - 1) >= 0xD)
  {
    v61 = v56 + v56 * ((4 * v53 - 1) / v56);
    v60 = 4;
  }
  else
  {
    v60 = qword_191AC0CA0[v52 - 1];
    v61 = v56 + v56 * ((v60 * v53 - 1) / v56);
  }
  v62 = v61 / v60;
  *((_DWORD *)this + 98) = v62;
  v63 = v53 - 1;
  if ((int)v53 < 1)
    v63 = v53 + 2;
  *((_DWORD *)this + 108) = (v63 >> 2) + 1;
  *((_DWORD *)this + 109) = v62 >> 2;
  v64 = v12[5];
  if (v64 <= 1)
    v65 = 1;
  else
    v65 = v12[5];
  *((_DWORD *)this + 110) = v65;
  v66 = v55 * v53;
  *((_DWORD *)this + 101) = v66;
  v67 = v54 * v66;
  *((_DWORD *)this + 102) = v67;
  *((_DWORD *)this + 103) = v67 * v64;
  *((_DWORD *)this + 111) = v57;
  v68 = (*(uint64_t (**)(int *))(*(_QWORD *)v17 + 32))(v17);
  v69 = v17[2];
  *((_DWORD *)this + 113) = v69;
  v71 = v17[3];
  v70 = v17[4];
  *((_DWORD *)this + 114) = v70 * v71;
  *((_DWORD *)this + 119) = v70;
  *((_DWORD *)this + 118) = v71;
  v72 = *((_QWORD *)v17 + 31);
  *((_DWORD *)this + 121) = *((_QWORD *)v17 + 31);
  v74 = v17[5];
  v73 = v17[6];
  if (v74 <= 1)
    v74 = 1;
  if (v73 <= 1)
    v75 = 1;
  else
    v75 = v17[6];
  *((_DWORD *)this + 120) = v75 * v74;
  if ((v68 - 1) >= 0xD)
  {
    v77 = v72 + v72 * ((4 * v69 - 1) / v72);
    v76 = 4;
  }
  else
  {
    v76 = qword_191AC0CA0[v68 - 1];
    v77 = v72 + v72 * ((v76 * v69 - 1) / v72);
  }
  v78 = v77 / v76;
  *((_DWORD *)this + 112) = v78;
  v79 = v69 - 1;
  if ((int)v69 < 1)
    v79 = v69 + 2;
  *((_DWORD *)this + 122) = (v79 >> 2) + 1;
  *((_DWORD *)this + 123) = v78 >> 2;
  v80 = v17[5];
  if (v80 <= 1)
    v81 = 1;
  else
    v81 = v17[5];
  *((_DWORD *)this + 124) = v81;
  v82 = v71 * v69;
  *((_DWORD *)this + 115) = v82;
  v83 = v70 * v82;
  *((_DWORD *)this + 116) = v83;
  *((_DWORD *)this + 117) = v83 * v80;
  *((_DWORD *)this + 125) = v73;
  if (!*((_QWORD *)this + 65))
  {
    v84 = objc_msgSend(v48[18], "newBufferWithBytes:length:options:", &v104, 64, 0, v101, v49);
    v85 = (void *)*((_QWORD *)this + 65);
    *((_QWORD *)this + 65) = v84;

  }
  if (!*((_QWORD *)this + 63))
  {
    v86 = objc_msgSend(v48[18], "newBufferWithBytes:length:options:", (char *)this + 392, 56, 0);
    v87 = (void *)*((_QWORD *)this + 63);
    *((_QWORD *)this + 63) = v86;

  }
  if (!*((_QWORD *)this + 64))
  {
    v88 = objc_msgSend(v48[18], "newBufferWithBytes:length:options:", (char *)this + 448, 56, 0);
    v89 = (void *)*((_QWORD *)this + 64);
    *((_QWORD *)this + 64) = v88;

  }
  if ((*(unsigned int (**)(_QWORD))(***(_QWORD ***)a2 + 32))(**(_QWORD **)a2) == 1)
  {
    v90 = "general_slice_buffers_f16";
    goto LABEL_87;
  }
  if (!(*(unsigned int (**)(_QWORD))(***(_QWORD ***)a2 + 32))(**(_QWORD **)a2))
  {
    v90 = "general_slice_buffers_f32";
LABEL_87:
    objc_msgSend(v48[20], "kernelForFunction:cacheString:withConstants:", v90, 0, 0, v101, v102);
    v91 = objc_claimAutoreleasedReturnValue();
    v92 = (void *)*((_QWORD *)this + 48);
    *((_QWORD *)this + 48) = v91;

  }
  if (v49)
  {
    v93 = (unint64_t *)&v49->__shared_owners_;
    do
      v94 = __ldaxr(v93);
    while (__stlxr(v94 - 1, v93));
    if (!v94)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  if (v103.__begin_)
  {
    v103.__end_ = v103.__begin_;
    operator delete(v103.__begin_);
  }
  v18 = v114;
LABEL_96:
  if (v18)
  {
    v95 = (unint64_t *)&v18->__shared_owners_;
    do
      v96 = __ldaxr(v95);
    while (__stlxr(v96 - 1, v95));
    if (!v96)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
LABEL_101:
  v97 = v116;
  if (v116)
  {
    v98 = (unint64_t *)&v116->__shared_owners_;
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
}

void sub_191464CC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v20 - 80);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v20 - 64);
  _Unwind_Resume(a1);
}

BOOL Espresso::MPSBuffersEngine::general_slice_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  return a3[1] - *a3 == 64;
}

void Espresso::MPSBuffersEngine::instancenorm_1d_kernel::~instancenorm_1d_kernel(id *this)
{

  Espresso::generic_instancenorm_1d_kernel::~generic_instancenorm_1d_kernel((Espresso::generic_instancenorm_1d_kernel *)this);
}

{

  Espresso::generic_instancenorm_1d_kernel::~generic_instancenorm_1d_kernel((Espresso::generic_instancenorm_1d_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::MPSBuffersEngine::instancenorm_1d_kernel::__launch(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t **a4)
{
  const void *v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t *v13;
  const void *v14;
  id *v15;
  id *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  id *v21;
  id *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  id v26;
  id v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::runtime_error *exception;
  int64x2_t v40;
  uint64_t v41;
  _QWORD v42[3];
  id v43[2];
  id *v44;
  std::__shared_weak_count *v45;
  id *v46;
  std::__shared_weak_count *v47;
  void *v48;
  std::__shared_weak_count *v49;
  void *__p;
  void *v51;
  _DWORD v52[5];
  int v53;

  if (a4[1] != *a4)
  {
    if (!*(_QWORD *)(a1 + 336) || !*(_QWORD *)(a1 + 344) || !*(_QWORD *)(a1 + 352))
    {
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)a1 + 80))(a1, a3, a4);
      if (!*(_QWORD *)(a1 + 344))
        Espresso::throw_exception_selector<Espresso::invalid_state_error>("instancenorm_1d_kernel: wGammaBuffer is nil.");
      if (!*(_QWORD *)(a1 + 352))
        Espresso::throw_exception_selector<Espresso::invalid_state_error>("instancenorm_1d_kernel: wBetaBuffer is nil.");
    }
    if (!*(_QWORD *)(a1 + 336))
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("failed to create kernel in instancenorm_1d_kernel.");
    Espresso::abstract_blob_container::shape((char *)&v48, **a4);
    Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v52, (const Espresso::layer_shape *)&v48, 0);
    if (__p)
    {
      v51 = __p;
      operator delete(__p);
    }
    if ((!v53 || v52[v53 - 1] <= 1u) && (!*(_DWORD *)(a1 + 280) || *(_DWORD *)(a1 + 288)))
      Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error>("instancenorm_1d_kernel: inner dimension must have size > 1");
    v8 = *(const void **)(a1 + 8);
    if (!v8
    {
      v48 = 0;
      v49 = 0;
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
      exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
    }
    v10 = *(std::__shared_weak_count **)(a1 + 16);
    v48 = v9;
    v49 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
    v13 = *a4;
    v14 = (const void *)**a4;
    if (v14
    {
      v16 = v15;
      v17 = v13[1];
      v46 = v15;
      v47 = (std::__shared_weak_count *)v17;
      if (v17)
      {
        v18 = (unint64_t *)(v17 + 8);
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 1, v18));
      }
    }
    else
    {
      v16 = 0;
      v46 = 0;
      v47 = 0;
    }
    v20 = *a3;
    if (*(_QWORD *)v20
    {
      v22 = v21;
      v23 = *(std::__shared_weak_count **)(v20 + 8);
      v44 = v21;
      v45 = v23;
      if (v23)
      {
        v24 = (unint64_t *)&v23->__shared_owners_;
        do
          v25 = __ldxr(v24);
        while (__stxr(v25 + 1, v24));
      }
    }
    else
    {
      v23 = 0;
      v22 = 0;
      v44 = 0;
      v45 = 0;
    }
    v26 = v16[21];
    v27 = v22[21];
    Espresso::temporary_mtl_encoder::temporary_mtl_encoder((uint64_t)v43, *a2);
    v28 = v43[0];
    objc_msgSend(v28, "setComputePipelineState:", *(_QWORD *)(a1 + 336));
    objc_msgSend(v28, "setBuffer:offset:atIndex:", v26, 0, 0);
    objc_msgSend(v28, "setBuffer:offset:atIndex:", v27, 0, 1);
    objc_msgSend(v28, "setBytes:length:atIndex:", a1 + 360, 56, 2);
    objc_msgSend(v28, "setBytes:length:atIndex:", a1 + 280, 20, 3);
    objc_msgSend(v28, "setBuffer:offset:atIndex:", *(_QWORD *)(a1 + 344), 0, 4);
    objc_msgSend(v28, "setBuffer:offset:atIndex:", *(_QWORD *)(a1 + 352), 0, 5);
    objc_msgSend(v28, "setThreadgroupMemoryLength:atIndex:", 1024, 0);
    objc_msgSend(v28, "setThreadgroupMemoryLength:atIndex:", 1024, 1);
    v29 = ((*(_DWORD *)(a1 + 368) - 1) >> 4) + 1;
    v30 = (*(_DWORD *)(a1 + 408) * *(_DWORD *)(a1 + 412));
    v42[0] = 1;
    v42[1] = v29;
    v42[2] = v30;
    v40 = vdupq_n_s64(0x10uLL);
    v41 = 1;
    objc_msgSend(v28, "dispatchThreadgroups:threadsPerThreadgroup:", v42, &v40);

    Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(v43);
    if (v23)
    {
      v31 = (unint64_t *)&v23->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    v33 = v47;
    if (v47)
    {
      v34 = (unint64_t *)&v47->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    v36 = v49;
    if (v49)
    {
      v37 = (unint64_t *)&v49->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
  }
}

void sub_1914651FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28)
{
  void *v28;
  void *v29;
  void *v30;

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(&a16);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  _Unwind_Resume(a1);
}

void Espresso::MPSBuffersEngine::instancenorm_1d_kernel::on_resized(Espresso::MPSBuffersEngine::instancenorm_1d_kernel *this, Espresso::layer_data *a2, Espresso::layer_data *a3)
{
  void *v6;
  uint64_t v7;
  Espresso::layer_data *v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  int v13;
  const void *v14;
  id *v15;
  id *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  const char *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  int *v24;
  int *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  int v32;
  unint64_t v33;
  int v34;
  int v35;
  int v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  unint64_t v46;
  uint64_t v47;
  void *v48;
  _DWORD *v49;
  uint64_t v50;
  uint64_t v51;
  int *v52;
  int v53;
  uint64_t v54;
  void *v55;
  _DWORD *v56;
  uint64_t v57;
  uint64_t v58;
  int *v59;
  int v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  std::runtime_error *exception;
  const char *v68;
  int *v69;
  std::__shared_weak_count *v70;
  id *v71;
  std::__shared_weak_count *v72;
  std::__shared_weak_count *v73;

  v6 = (void *)*((_QWORD *)this + 42);
  *((_QWORD *)this + 42) = 0;

  v8 = a3;
  v7 = *(_QWORD *)a3;
  if (*((_QWORD *)v8 + 1) == v7)
    return;
  if (*((_QWORD *)a2 + 1) == *(_QWORD *)a2)
    return;
  if (!*(_QWORD *)v7)
    return;
  if (!v9)
    return;
  v10 = *(std::__shared_weak_count **)(v7 + 8);
  v73 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v13 = (*(uint64_t (**)(void *))(*(_QWORD *)v9 + 32))(v9);
  v14 = (const void *)*((_QWORD *)this + 1);
  if (!v14
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
  }
  v16 = v15;
  v17 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  v71 = v15;
  v72 = v17;
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  if (*((_DWORD *)this + 70))
  {
    if (v13 == 1)
    {
      v20 = "instancenorm_1d_tf_layernorm_buffers_f16";
    }
    else
    {
      if (v13)
        goto LABEL_23;
      v20 = "instancenorm_1d_tf_layernorm_buffers_f32";
    }
  }
  else if (v13)
  {
    if (v13 != 1)
      goto LABEL_23;
    v20 = "instancenorm_1d_buffers_f16";
  }
  else
  {
    v20 = "instancenorm_1d_buffers_f32";
  }
  objc_msgSend(v15[20], "kernelForFunction:cacheString:withConstants:", v20, 0, 0);
  v21 = objc_claimAutoreleasedReturnValue();
  v22 = (void *)*((_QWORD *)this + 42);
  *((_QWORD *)this + 42) = v21;

LABEL_23:
  if (!*((_QWORD *)this + 42))
    Espresso::throw_exception_selector<Espresso::generic_error>("Failed to find kernel for instancenorm_1d in buffers engine.");
  v23 = *(_QWORD *)a2;
  if (*(_QWORD *)v23
  {
    v25 = v24;
    v26 = *(std::__shared_weak_count **)(v23 + 8);
    v69 = v24;
    v70 = v26;
    if (v26)
    {
      v27 = (unint64_t *)&v26->__shared_owners_;
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
    }
  }
  else
  {
    v26 = 0;
    v25 = 0;
    v69 = 0;
    v70 = 0;
  }
  v29 = (*(uint64_t (**)(int *))(*(_QWORD *)v25 + 32))(v25);
  v30 = v25[2];
  *((_DWORD *)this + 91) = v30;
  v32 = v25[3];
  v31 = v25[4];
  *((_DWORD *)this + 92) = v31 * v32;
  *((_DWORD *)this + 97) = v31;
  *((_DWORD *)this + 96) = v32;
  v33 = *((_QWORD *)v25 + 31);
  *((_DWORD *)this + 99) = *((_QWORD *)v25 + 31);
  v35 = v25[5];
  v34 = v25[6];
  if (v35 <= 1)
    v35 = 1;
  if (v34 <= 1)
    v36 = 1;
  else
    v36 = v25[6];
  *((_DWORD *)this + 98) = v36 * v35;
  v37 = 4 * v30;
  if ((v29 - 1) >= 0xD)
  {
    v39 = v33 + v33 * ((v37 - 1) / v33);
    v38 = 4;
  }
  else
  {
    v38 = qword_191AC0CA0[v29 - 1];
    v39 = v33 + v33 * ((v38 * v30 - 1) / v33);
  }
  v40 = v39 / v38;
  *((_DWORD *)this + 90) = v40;
  v41 = v30 - 1;
  if ((int)v30 < 1)
    v41 = v30 + 2;
  *((_DWORD *)this + 100) = (v41 >> 2) + 1;
  *((_DWORD *)this + 101) = v40 >> 2;
  v42 = v25[5];
  if (v42 <= 1)
    v43 = 1;
  else
    v43 = v25[5];
  *((_DWORD *)this + 102) = v43;
  v44 = v32 * v30;
  *((_DWORD *)this + 93) = v44;
  v45 = v31 * v44;
  *((_DWORD *)this + 94) = v45;
  *((_DWORD *)this + 95) = v45 * v42;
  *((_DWORD *)this + 103) = v34;
  v46 = v33 + v33 * ((v37 - 1) / v33);
  if (!*((_QWORD *)this + 43))
  {
    if (!*((_QWORD *)this + 38))
    {
      v68 = "Could not find wGamma in instancenorm_1d";
      goto LABEL_74;
    }
    v47 = objc_msgSend(v16[18], "newBufferWithLength:options:", (((v46 & 0x3FFFFFFFCLL) - 1) & 0xFFFFFFFFFFFFFFF0) + 16, 0, v69, v70, v71);
    v48 = (void *)*((_QWORD *)this + 43);
    *((_QWORD *)this + 43) = v47;

    v49 = (_DWORD *)objc_msgSend(*((id *)this + 43), "contents");
    v50 = *((_QWORD *)this + 38);
    v51 = *(int *)(v50 + 8);
    if ((_DWORD)v51)
    {
      v52 = *(int **)(v50 + 16);
      do
      {
        v53 = *v52++;
        *v49++ = v53;
        --v51;
      }
      while (v51);
    }
  }
  if (!*((_QWORD *)this + 44))
  {
    if (*((_QWORD *)this + 40))
    {
      v54 = objc_msgSend(v16[18], "newBufferWithLength:options:", (((v46 & 0x3FFFFFFFCLL) - 1) & 0xFFFFFFFFFFFFFFF0) + 16, 0);
      v55 = (void *)*((_QWORD *)this + 44);
      *((_QWORD *)this + 44) = v54;

      v56 = (_DWORD *)objc_msgSend(*((id *)this + 44), "contents");
      v57 = *((_QWORD *)this + 40);
      v58 = *(int *)(v57 + 8);
      if ((_DWORD)v58)
      {
        v59 = *(int **)(v57 + 16);
        do
        {
          v60 = *v59++;
          *v56++ = v60;
          --v58;
        }
        while (v58);
      }
      goto LABEL_54;
    }
    v68 = "Could not find wBeta in instancenorm_1d";
LABEL_74:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v68);
  }
LABEL_54:
  if (v26)
  {
    v61 = (unint64_t *)&v26->__shared_owners_;
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  if (v72)
  {
    v63 = (unint64_t *)&v72->__shared_owners_;
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  if (v73)
  {
    v65 = (unint64_t *)&v73->__shared_owners_;
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
}

void sub_191465700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t Espresso::MPSBuffersEngine::instancenorm_1d_kernel::supports_weight_key()
{
  return 1;
}

const char *Espresso::generic_instancenorm_1d_kernel::kernel_type_str(Espresso::generic_instancenorm_1d_kernel *this)
{
  return "instancenorm_1d";
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::instancenorm_1d_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

void Espresso::MPSBuffersEngine::split_nd_kernel::~split_nd_kernel(Espresso::MPSBuffersEngine::split_nd_kernel *this)
{
  void *v2;

  *(_QWORD *)this = &off_1E2D716B0;
  v2 = (void *)*((_QWORD *)this + 102);
  if (v2)
  {
    *((_QWORD *)this + 103) = v2;
    operator delete(v2);
  }

  Espresso::base_kernel::~base_kernel(this);
}

{
  void *v2;

  *(_QWORD *)this = &off_1E2D716B0;
  v2 = (void *)*((_QWORD *)this + 102);
  if (v2)
  {
    *((_QWORD *)this + 103) = v2;
    operator delete(v2);
  }

  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::MPSBuffersEngine::split_nd_kernel::__launch(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t **v6;
  int *v8;
  int *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  int32x2_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  id *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  id *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  id v36;
  unint64_t v37;
  uint64_t v38;
  id *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  id *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int *v52;
  int *v53;
  int *v54;
  unint64_t *v55;
  unint64_t v56;
  int v57;
  signed int v58;
  unint64_t v59;
  unint64_t v60;
  int v61;
  int v62;
  unint64_t *v63;
  unint64_t v64;
  int v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  id *v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  id v74;
  unint64_t v75;
  id v76;
  uint64_t v77;
  const void *v78;
  int *v79;
  int *v80;
  int *v81;
  unint64_t *v82;
  unint64_t v83;
  int v84;
  int v85;
  unint64_t v86;
  unint64_t v87;
  int v88;
  int v89;
  unint64_t *v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  id *v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  id v98;
  unint64_t v99;
  id v100;
  uint64_t v101;
  const void *v102;
  int *v103;
  int *v104;
  int *v105;
  unint64_t *v106;
  unint64_t v107;
  int v108;
  int v109;
  unint64_t v110;
  unint64_t v111;
  int v112;
  int v113;
  unint64_t *v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  id *v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  id v122;
  unint64_t v123;
  id v124;
  uint64_t v125;
  const void *v126;
  int *v127;
  int *v128;
  int *v129;
  unint64_t *v130;
  unint64_t v131;
  int v132;
  int v133;
  unint64_t v134;
  unint64_t v135;
  int v136;
  int v137;
  unint64_t *v138;
  unint64_t v139;
  int v140;
  uint64_t v141;
  int v142;
  uint64_t v143;
  int *v144;
  int v145;
  int v146;
  int v147;
  uint64_t v148;
  int v149;
  unint64_t *v150;
  unint64_t v151;
  uint64_t **v152;
  id v153;
  id v154;
  id v156;
  id v157;
  _DWORD v158[3];
  int32x2_t v159;
  int v160;
  int v161;
  int v162;
  int v163;
  __int32 v164;
  _DWORD v165[3];
  int32x2_t v166;
  int v167;
  int v168;
  int v169;
  int v170;
  __int32 v171;
  _DWORD v172[3];
  int32x2_t v173;
  int v174;
  int v175;
  int v176;
  int v177;
  __int32 v178;
  unsigned int v179;
  int v180;
  int v181;
  int32x2_t v182;
  int v183;
  int v184;
  int v185;
  int v186;
  __int32 v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  int v191;
  _DWORD v192[3];
  int32x2_t v193;
  int v194;
  int v195;
  int v196;
  int v197;
  int v198;
  id v199[2];
  int *v200;
  std::__shared_weak_count *v201;
  std::vector<int> v202;
  void *v203;
  void *v204;
  _BYTE v205[20];
  int v206;

  v4 = *(uint64_t **)a4;
  if (*(_QWORD *)(a4 + 8) != *(_QWORD *)a4 && a3[1] != *a3)
  {
    v6 = (uint64_t **)a4;
    if (!*(_QWORD *)(a1 + 800))
    {
      (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a1 + 80))(a1, a3, a4);
      if (!*(_QWORD *)(a1 + 800))
        Espresso::throw_exception_selector<Espresso::generic_error>("Kernel not found");
      v4 = *v6;
    }
    if (*v4
    {
      v9 = v8;
      v10 = (std::__shared_weak_count *)v4[1];
      v200 = v8;
      v201 = v10;
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldxr(p_shared_owners);
        while (__stxr(v12 + 1, p_shared_owners));
      }
    }
    else
    {
      v10 = 0;
      v9 = 0;
      v200 = 0;
      v201 = 0;
    }
    v153 = *((id *)v9 + 21);
    Espresso::temporary_mtl_encoder::temporary_mtl_encoder((uint64_t)v199, *a2);
    v13 = v199[0];
    v15 = *a3;
    v14 = a3[1];
    v16 = (*(uint64_t (**)(int *))(*(_QWORD *)v9 + 32))(v9);
    v17 = v9[3];
    v18 = v9[2];
    v192[0] = v9[2];
    v192[1] = v17;
    v19 = v9[4];
    v20 = vmax_s32(*(int32x2_t *)(v9 + 5), (int32x2_t)0x100000001);
    v193 = v20;
    v192[2] = v19;
    v194 = 1;
    if ((v16 - 1) >= 0xD)
    {
      v22 = *((_QWORD *)v9 + 31) + *((_QWORD *)v9 + 31) * ((unint64_t)(4 * v18 - 1) / *((_QWORD *)v9 + 31));
      v21 = 4;
    }
    else
    {
      v21 = qword_191AC0CA0[v16 - 1];
      v22 = *((_QWORD *)v9 + 31) + *((_QWORD *)v9 + 31) * ((v21 * v18 - 1) / *((_QWORD *)v9 + 31));
    }
    v195 = v22 / v21;
    v196 = v17 * v195;
    v197 = v17 * v195 * v19;
    v198 = v197 * v20.i32[0];
    if (v14 != v15)
    {
      v152 = v6;
      v23 = 0;
      v24 = (v14 - v15) >> 4;
      do
      {
        v188 = 0;
        v189 = 0;
        v191 = 0;
        v190 = 0;
        v25 = *a3 + 16 * v23;
        v27 = *(std::__shared_weak_count **)(v25 + 8);
        if (v27)
        {
          v28 = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldxr(v28);
          while (__stxr(v29 + 1, v28));
          v154 = v26[21];
          do
            v30 = __ldaxr(v28);
          while (__stlxr(v30 - 1, v28));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        else
        {
          v154 = v26[21];
        }
        v31 = *a3 + 16 * v23;
        v33 = *(std::__shared_weak_count **)(v31 + 8);
        if (v33)
        {
          v34 = (unint64_t *)&v33->__shared_owners_;
          do
            v35 = __ldxr(v34);
          while (__stxr(v35 + 1, v34));
          v36 = v32[21];
          do
            v37 = __ldaxr(v34);
          while (__stlxr(v37 - 1, v34));
          if (!v37)
          {
            ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
            std::__shared_weak_count::__release_weak(v33);
          }
        }
        else
        {
          v36 = v32[21];
        }
        v38 = *a3 + 16 * v23;
        v40 = *(std::__shared_weak_count **)(v38 + 8);
        if (v40)
        {
          v41 = (unint64_t *)&v40->__shared_owners_;
          do
            v42 = __ldxr(v41);
          while (__stxr(v42 + 1, v41));
          v157 = v39[21];
          do
            v43 = __ldaxr(v41);
          while (__stlxr(v43 - 1, v41));
          if (!v43)
          {
            ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
            std::__shared_weak_count::__release_weak(v40);
          }
        }
        else
        {
          v157 = v39[21];
        }
        v44 = *a3 + 16 * v23;
        v46 = *(std::__shared_weak_count **)(v44 + 8);
        if (v46)
        {
          v47 = (unint64_t *)&v46->__shared_owners_;
          do
            v48 = __ldxr(v47);
          while (__stxr(v48 + 1, v47));
          v156 = v45[21];
          do
            v49 = __ldaxr(v47);
          while (__stlxr(v49 - 1, v47));
          if (!v49)
          {
            ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
            std::__shared_weak_count::__release_weak(v46);
          }
        }
        else
        {
          v156 = v45[21];
        }
        v50 = *a3;
        v51 = *(_QWORD *)(*a3 + 16 * v23);
        if (v51
        {
          v53 = v52;
          v202.__begin_ = v52;
          v54 = *(int **)(v50 + 16 * v23 + 8);
          v202.__end_ = v54;
          if (v54)
          {
            v55 = (unint64_t *)(v54 + 2);
            do
              v56 = __ldxr(v55);
            while (__stxr(v56 + 1, v55));
            v51 = *(_QWORD *)(*a3 + 16 * v23);
          }
        }
        else
        {
          v54 = 0;
          v53 = 0;
          v202.__begin_ = 0;
          v202.__end_ = 0;
        }
        v57 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v51 + 32))(v51);
        v58 = v53[2];
        if ((v57 - 1) >= 0xD)
        {
          v60 = *((_QWORD *)v53 + 31)
              + *((_QWORD *)v53 + 31) * ((unint64_t)(4 * v58 - 1) / *((_QWORD *)v53 + 31));
          v59 = 4;
        }
        else
        {
          v59 = qword_191AC0CA0[v57 - 1];
          v60 = *((_QWORD *)v53 + 31) + *((_QWORD *)v53 + 31) * ((v59 * v58 - 1) / *((_QWORD *)v53 + 31));
        }
        v61 = v53[3];
        v62 = v53[4];
        v182 = vmax_s32(*(int32x2_t *)(v53 + 5), (int32x2_t)0x100000001);
        v179 = v58;
        v180 = v61;
        v181 = v62;
        v183 = 1;
        v184 = v60 / v59;
        v185 = v61 * v184;
        v186 = v61 * v184 * v62;
        v187 = v186 * v182.i32[0];
        if (v54)
        {
          v63 = (unint64_t *)(v54 + 2);
          do
            v64 = __ldaxr(v63);
          while (__stlxr(v64 - 1, v63));
          if (!v64)
          {
            (*(void (**)(int *))(*(_QWORD *)v54 + 16))(v54);
            std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v54);
          }
        }
        if (v24 >= 2)
        {
          v68 = v23 + 1;
          v69 = *a3 + 16 * (v23 + 1);
          v71 = *(std::__shared_weak_count **)(v69 + 8);
          if (v71)
          {
            v72 = (unint64_t *)&v71->__shared_owners_;
            do
              v73 = __ldxr(v72);
            while (__stxr(v73 + 1, v72));
            v74 = v70[21];

            do
              v75 = __ldaxr(v72);
            while (__stlxr(v75 - 1, v72));
            if (!v75)
            {
              ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
              std::__shared_weak_count::__release_weak(v71);
            }
            v36 = v74;
          }
          else
          {
            v76 = v70[21];

            v36 = v76;
          }
          v77 = *a3;
          v78 = *(const void **)(*a3 + 16 * v68);
          if (v78
          {
            v80 = v79;
            v202.__begin_ = v79;
            v81 = *(int **)(v77 + 16 * v68 + 8);
            v202.__end_ = v81;
            if (v81)
            {
              v82 = (unint64_t *)(v81 + 2);
              do
                v83 = __ldxr(v82);
              while (__stxr(v83 + 1, v82));
              v77 = *a3;
            }
          }
          else
          {
            v81 = 0;
            v80 = 0;
            v202.__begin_ = 0;
            v202.__end_ = 0;
          }
          v84 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v77 + 16 * v23) + 32))(*(_QWORD *)(v77 + 16 * v23));
          v85 = v80[2];
          v6 = v152;
          if ((v84 - 1) >= 0xD)
          {
            v87 = *((_QWORD *)v80 + 31)
                + *((_QWORD *)v80 + 31) * ((unint64_t)(4 * v85 - 1) / *((_QWORD *)v80 + 31));
            v86 = 4;
          }
          else
          {
            v86 = qword_191AC0CA0[v84 - 1];
            v87 = *((_QWORD *)v80 + 31) + *((_QWORD *)v80 + 31) * ((v86 * v85 - 1) / *((_QWORD *)v80 + 31));
          }
          v88 = v80[3];
          v89 = v80[4];
          v173 = vmax_s32(*(int32x2_t *)(v80 + 5), (int32x2_t)0x100000001);
          v172[0] = v85;
          v172[1] = v88;
          v172[2] = v89;
          v174 = 1;
          v175 = v87 / v86;
          v176 = v88 * v175;
          v177 = v88 * v175 * v89;
          v178 = v177 * v173.i32[0];
          if (v81)
          {
            v90 = (unint64_t *)(v81 + 2);
            do
              v91 = __ldaxr(v90);
            while (__stlxr(v91 - 1, v90));
            if (!v91)
            {
              (*(void (**)(int *))(*(_QWORD *)v81 + 16))(v81);
              std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v81);
            }
          }
          if (v24 < 3)
          {
            v65 = 0;
            v66 = 0;
            v67 = 2;
          }
          else
          {
            v92 = v23 + 2;
            v93 = *a3 + 16 * (v23 + 2);
            v95 = *(std::__shared_weak_count **)(v93 + 8);
            if (v95)
            {
              v96 = (unint64_t *)&v95->__shared_owners_;
              do
                v97 = __ldxr(v96);
              while (__stxr(v97 + 1, v96));
              v98 = v94[21];

              do
                v99 = __ldaxr(v96);
              while (__stlxr(v99 - 1, v96));
              if (!v99)
              {
                ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
                std::__shared_weak_count::__release_weak(v95);
              }
              v157 = v98;
            }
            else
            {
              v100 = v94[21];

              v157 = v100;
            }
            v101 = *a3;
            v102 = *(const void **)(*a3 + 16 * v92);
            if (v102
            {
              v104 = v103;
              v202.__begin_ = v103;
              v105 = *(int **)(v101 + 16 * v92 + 8);
              v202.__end_ = v105;
              if (v105)
              {
                v106 = (unint64_t *)(v105 + 2);
                do
                  v107 = __ldxr(v106);
                while (__stxr(v107 + 1, v106));
                v101 = *a3;
              }
            }
            else
            {
              v105 = 0;
              v104 = 0;
              v202.__begin_ = 0;
              v202.__end_ = 0;
            }
            v108 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v101 + 16 * v23) + 32))(*(_QWORD *)(v101 + 16 * v23));
            v109 = v104[2];
            v6 = v152;
            if ((v108 - 1) >= 0xD)
            {
              v111 = *((_QWORD *)v104 + 31)
                   + *((_QWORD *)v104 + 31) * ((unint64_t)(4 * v109 - 1) / *((_QWORD *)v104 + 31));
              v110 = 4;
            }
            else
            {
              v110 = qword_191AC0CA0[v108 - 1];
              v111 = *((_QWORD *)v104 + 31) + *((_QWORD *)v104 + 31) * ((v110 * v109 - 1) / *((_QWORD *)v104 + 31));
            }
            v112 = v104[3];
            v113 = v104[4];
            v166 = vmax_s32(*(int32x2_t *)(v104 + 5), (int32x2_t)0x100000001);
            v165[0] = v109;
            v165[1] = v112;
            v165[2] = v113;
            v167 = 1;
            v168 = v111 / v110;
            v169 = v112 * v168;
            v170 = v112 * v168 * v113;
            v171 = v170 * v166.i32[0];
            if (v105)
            {
              v114 = (unint64_t *)(v105 + 2);
              do
                v115 = __ldaxr(v114);
              while (__stlxr(v115 - 1, v114));
              if (!v115)
              {
                (*(void (**)(int *))(*(_QWORD *)v105 + 16))(v105);
                std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v105);
              }
            }
            if (v24 < 4)
            {
              v65 = 1;
              v66 = 1;
              v67 = 3;
            }
            else
            {
              v116 = v23 + 3;
              v117 = *a3 + 16 * (v23 + 3);
              v119 = *(std::__shared_weak_count **)(v117 + 8);
              if (v119)
              {
                v120 = (unint64_t *)&v119->__shared_owners_;
                do
                  v121 = __ldxr(v120);
                while (__stxr(v121 + 1, v120));
                v122 = v118[21];

                do
                  v123 = __ldaxr(v120);
                while (__stlxr(v123 - 1, v120));
                if (!v123)
                {
                  ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
                  std::__shared_weak_count::__release_weak(v119);
                }
                v156 = v122;
              }
              else
              {
                v124 = v118[21];

                v156 = v124;
              }
              v125 = *a3;
              v126 = *(const void **)(*a3 + 16 * v116);
              if (v126
              {
                v128 = v127;
                v202.__begin_ = v127;
                v129 = *(int **)(v125 + 16 * v116 + 8);
                v202.__end_ = v129;
                if (v129)
                {
                  v130 = (unint64_t *)(v129 + 2);
                  do
                    v131 = __ldxr(v130);
                  while (__stxr(v131 + 1, v130));
                  v125 = *a3;
                }
              }
              else
              {
                v129 = 0;
                v128 = 0;
                v202.__begin_ = 0;
                v202.__end_ = 0;
              }
              v132 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v125 + 16 * v23) + 32))(*(_QWORD *)(v125 + 16 * v23));
              v133 = v128[2];
              v6 = v152;
              if ((v132 - 1) >= 0xD)
              {
                v135 = *((_QWORD *)v128 + 31)
                     + *((_QWORD *)v128 + 31) * ((unint64_t)(4 * v133 - 1) / *((_QWORD *)v128 + 31));
                v134 = 4;
              }
              else
              {
                v134 = qword_191AC0CA0[v132 - 1];
                v135 = *((_QWORD *)v128 + 31) + *((_QWORD *)v128 + 31) * ((v134 * v133 - 1) / *((_QWORD *)v128 + 31));
              }
              v136 = v128[3];
              v137 = v128[4];
              v159 = vmax_s32(*(int32x2_t *)(v128 + 5), (int32x2_t)0x100000001);
              v158[0] = v133;
              v158[1] = v136;
              v158[2] = v137;
              v160 = 1;
              v161 = v135 / v134;
              v162 = v136 * v161;
              v163 = v136 * v161 * v137;
              v164 = v163 * v159.i32[0];
              if (v129)
              {
                v138 = (unint64_t *)(v129 + 2);
                do
                  v139 = __ldaxr(v138);
                while (__stlxr(v139 - 1, v138));
                if (!v139)
                {
                  (*(void (**)(int *))(*(_QWORD *)v129 + 16))(v129);
                  std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v129);
                }
              }
              v66 = 0;
              v65 = 1;
              v67 = 4;
            }
          }
        }
        else
        {
          v65 = 0;
          v66 = 0;
          v67 = 1;
        }
        LODWORD(v188) = v67;
        v140 = *(_DWORD *)(a1 + 280);
        Espresso::abstract_blob_container::shape((char *)&v202, **v6);
        Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v205, (const Espresso::layer_shape *)&v202, 0);
        if (v203)
        {
          v204 = v203;
          operator delete(v203);
        }
        Espresso::layer_nd_shape::shape_vector(&v202, (uint64_t)v205);
        if (v140 < 0 && (v140 += v206, v140 < 0)
          || v140 >= (unint64_t)(v202.__end_ - v202.__begin_))
        {
          Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Invalid value of the argument 'axis'.");
        }
        v141 = *(_QWORD *)(a1 + 816);
        v142 = 0;
        if (v23)
        {
          v143 = 8 * v23;
          v144 = *(int **)(a1 + 816);
          do
          {
            v145 = *v144;
            v144 += 2;
            v142 += v145;
            v143 -= 8;
          }
          while (v143);
        }
        HIDWORD(v188) = v206 + ~v140;
        v146 = 1;
        switch(HIDWORD(v188))
        {
          case 0:
            break;
          case 1:
            v146 = v195;
            break;
          case 2:
            v146 = v196;
            break;
          case 3:
            v146 = v197;
            break;
          case 4:
            v146 = v198;
            break;
          default:
            Espresso::throw_exception_selector<Espresso::generic_error>("axis not supported in split_nd mpsbuffers.");
        }
        v191 = v146;
        LODWORD(v188) = v67;
        LODWORD(v189) = v146 * v142;
        if (v24 >= 2)
        {
          v147 = v142 + *(_DWORD *)(v141 + 8 * v23);
          HIDWORD(v189) = v146 * v147;
          if (v65)
          {
            v148 = v141 + 8 * v23;
            v149 = v147 + *(_DWORD *)(v148 + 8);
            LODWORD(v190) = v146 * v149;
            if ((v66 & 1) == 0)
              HIDWORD(v190) = v146 * (v149 + *(_DWORD *)(v148 + 16));
          }
        }
        if (v202.__begin_)
        {
          v202.__end_ = v202.__begin_;
          operator delete(v202.__begin_);
        }
        objc_msgSend(v13, "setComputePipelineState:", *(_QWORD *)(a1 + 800), v152);
        objc_msgSend(v13, "setBuffer:offset:atIndex:", v153, 0, 0);
        objc_msgSend(v13, "setBuffer:offset:atIndex:", v154, 0, 1);
        objc_msgSend(v13, "setBuffer:offset:atIndex:", v36, 0, 2);
        objc_msgSend(v13, "setBuffer:offset:atIndex:", v157, 0, 3);
        objc_msgSend(v13, "setBuffer:offset:atIndex:", v156, 0, 4);
        objc_msgSend(v13, "setBytes:length:atIndex:", v192, 40, 5);
        objc_msgSend(v13, "setBytes:length:atIndex:", &v179, 40, 6);
        objc_msgSend(v13, "setBytes:length:atIndex:", v172, 40, 7);
        objc_msgSend(v13, "setBytes:length:atIndex:", v165, 40, 8);
        objc_msgSend(v13, "setBytes:length:atIndex:", v158, 40, 9);
        objc_msgSend(v13, "setBytes:length:atIndex:", &v188, 28, 10);
        v23 += v67;
        v24 -= v67;

      }
      while (v24);
      v10 = v201;
    }

    Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(v199);
    if (v10)
    {
      v150 = (unint64_t *)&v10->__shared_owners_;
      do
        v151 = __ldaxr(v150);
      while (__stlxr(v151 - 1, v150));
      if (!v151)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
}

void sub_19146665C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  void *v11;
  uint64_t v12;

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder((id *)(v12 - 224));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v12 - 208);
  _Unwind_Resume(a1);
}

void Espresso::MPSBuffersEngine::split_nd_kernel::blob_options(Espresso::MPSBuffersEngine::split_nd_kernel *this@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  const void *v4;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 v17;
  _QWORD *v18;
  std::__shared_weak_count *v19;

  *a3 = 0;
  a3[1] = 0;
  v4 = (const void *)*((_QWORD *)this + 1);
  if (v4)
  {
    if (v7)
    {
      v8 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
      v18 = v7;
      v19 = v8;
      if (v8)
      {
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldxr(p_shared_owners);
        while (__stxr(v10 + 1, p_shared_owners));
      }
      if (a2)
      {
        v11 = operator new(0x70uLL);
        v11[1] = 0;
        v11[2] = 0;
        *v11 = &off_1E2DBE228;
        *((_OWORD *)v11 + 4) = 0u;
        *((_OWORD *)v11 + 5) = 0u;
        *((_OWORD *)v11 + 2) = 0u;
        *((_OWORD *)v11 + 3) = 0u;
        v11[3] = &off_1E2D9B4D8;
        *((_DWORD *)v11 + 12) = 1065353216;
        v11[7] = 0x1FFFFFFFFLL;
        v11[12] = 0;
        v11[13] = 0;
        v11[8] = 0;
        v11[9] = 0;
        *((_BYTE *)v11 + 88) = 0;
        v11[10] = 0;
        *(_QWORD *)&v17 = v11 + 3;
        *((_QWORD *)&v17 + 1) = v11;
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)a3, &v17);
        v12 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
        if (*((_QWORD *)&v17 + 1))
        {
          v13 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 - 1, v13));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(*a3 + 72), v18[28], v18[29]);
        v8 = v19;
      }
      if (v8)
      {
        v15 = (unint64_t *)&v8->__shared_owners_;
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
  }
}

void sub_191466878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v3);
  _Unwind_Resume(a1);
}

void Espresso::MPSBuffersEngine::split_nd_kernel::on_resized(std::vector<int> *this, Espresso::layer_data *a2, uint64_t **a3)
{
  std::vector<int>::pointer end;
  uint64_t v7;
  uint64_t *v8;
  void *v9;
  void *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::vector<int>::pointer v19;
  Espresso::context_metal *v20;
  std::__shared_weak_count *value;
  unint64_t *v22;
  unint64_t v23;
  int v24;
  __CFString *v25;
  uint64_t v26;
  std::vector<int>::pointer v27;
  std::vector<int> *v28;
  int *begin;
  int v30;
  int v31;
  unint64_t value_high;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  std::vector<int>::pointer v36;
  int64x2_t v37;
  uint64x2_t v38;
  int64x2_t v39;
  int32x2_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::runtime_error *exception;
  std::vector<int> v52;
  void *__p;
  void *v54;
  _BYTE v55[20];
  int v56;
  Espresso::context_metal *v57;
  std::__shared_weak_count *v58;
  void *v59;
  std::__shared_weak_count *v60;
  void *v61;
  std::__shared_weak_count *v62;

  end = this[33].__end_;
  this[33].__end_ = 0;

  v7 = *(_QWORD *)a2;
  if (*((_QWORD *)a2 + 1) != *(_QWORD *)a2)
  {
    v8 = *a3;
    if (a3[1] != *a3)
    {
      if (*(_QWORD *)v7
      {
        v10 = v9;
        v11 = *(std::__shared_weak_count **)(v7 + 8);
        v61 = v9;
        v62 = v11;
        if (v11)
        {
          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          do
            v13 = __ldxr(p_shared_owners);
          while (__stxr(v13 + 1, p_shared_owners));
          v8 = *a3;
        }
      }
      else
      {
        v10 = 0;
        v61 = 0;
        v62 = 0;
      }
      if (*v8
      {
        v15 = v14;
        v16 = v8[1];
        v59 = v14;
        v60 = (std::__shared_weak_count *)v16;
        if (v16)
        {
          v17 = (unint64_t *)(v16 + 8);
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
      }
      else
      {
        v15 = 0;
        v59 = 0;
        v60 = 0;
      }
      v19 = this->__end_;
      if (!v19
      {
        v57 = 0;
        v58 = 0;
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
        exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
      }
      value = (std::__shared_weak_count *)this->__end_cap_.__value_;
      v57 = v20;
      v58 = value;
      if (value)
      {
        v22 = (unint64_t *)&value->__shared_owners_;
        do
          v23 = __ldxr(v22);
        while (__stxr(v23 + 1, v22));
      }
      if (v10 && v15)
      {
        v24 = (int)this[33].__end_cap_.__value_;
        if (v24 == 1)
        {
          v25 = CFSTR("split_nd_f16_buffers");
        }
        else
        {
          if (v24)
            Espresso::throw_exception_selector<Espresso::generic_error>("unsupported compute path in split_nd kernel");
          v25 = CFSTR("split_nd_f32_buffers");
        }
        Espresso::context_metal::kernel_for_function(v20, &v25->isa);
        v26 = objc_claimAutoreleasedReturnValue();
        v27 = this[33].__end_;
        this[33].__end_ = (std::vector<int>::pointer)v26;

        std::vector<unsigned long>::vector(&v52, SHIDWORD(this[11].__end_cap_.__value_));
        v28 = this + 34;
        begin = this[34].__begin_;
        if (begin)
        {
          this[34].__end_ = begin;
          operator delete(begin);
          v28->__begin_ = 0;
          this[34].__end_ = 0;
          this[34].__end_cap_.__value_ = 0;
        }
        this[34] = v52;
        v30 = (int)this[11].__end_cap_.__value_;
        Espresso::abstract_blob_container::shape((char *)&v52, **a3);
        Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v55, (const Espresso::layer_shape *)&v52, 0);
        if (__p)
        {
          v54 = __p;
          operator delete(__p);
        }
        Espresso::layer_nd_shape::shape_vector(&v52, (uint64_t)v55);
        if (v30 < 0 && (v30 += v56, v30 < 0) || v30 >= (unint64_t)(v52.__end_ - v52.__begin_))
          Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Invalid value of the argument 'axis'.");
        v31 = v52.__begin_[v30];
        value_high = SHIDWORD(this[11].__end_cap_.__value_);
        std::vector<unsigned long>::resize(v28, value_high);
        if ((int)value_high >= 1)
        {
          v33 = 0;
          v34 = v31 / value_high;
          v35 = v31 % value_high;
          v36 = v28->__begin_;
          v37 = (int64x2_t)xmmword_191A82A80;
          v38 = (uint64x2_t)vdupq_n_s64((unint64_t)value_high - 1);
          v39 = vdupq_n_s64(2uLL);
          do
          {
            v40 = vmovn_s64((int64x2_t)vcgeq_u64(v38, (uint64x2_t)v37));
            if ((v40.i8[0] & 1) != 0)
            {
              if (v35 <= v33)
                v41 = v31 / value_high;
              else
                v41 = v34 + 1;
              *(_QWORD *)&v36[2 * v33] = v41;
            }
            if ((v40.i8[4] & 1) != 0)
            {
              if (v35 <= v33 + 1)
                v42 = v31 / value_high;
              else
                v42 = v34 + 1;
              *(_QWORD *)&v36[2 * v33 + 2] = v42;
            }
            v33 += 2;
            v37 = vaddq_s64(v37, v39);
          }
          while (((value_high + 1) & 0x1FFFFFFFELL) != v33);
        }
        if (v52.__begin_)
        {
          v52.__end_ = v52.__begin_;
          operator delete(v52.__begin_);
        }
      }
      if (value)
      {
        v43 = (unint64_t *)&value->__shared_owners_;
        do
          v44 = __ldaxr(v43);
        while (__stlxr(v44 - 1, v43));
        if (!v44)
        {
          ((void (*)(std::__shared_weak_count *))value->__on_zero_shared)(value);
          std::__shared_weak_count::__release_weak(value);
        }
      }
      v45 = v60;
      if (v60)
      {
        v46 = (unint64_t *)&v60->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
          std::__shared_weak_count::__release_weak(v45);
        }
      }
      v48 = v62;
      if (v62)
      {
        v49 = (unint64_t *)&v62->__shared_owners_;
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
    }
  }
}

void sub_191466C74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  uint64_t v21;

  if (__p)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v21 - 80);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v21 - 64);
  _Unwind_Resume(a1);
}

BOOL Espresso::MPSBuffersEngine::split_nd_kernel::is_valid_for_engine(uint64_t a1)
{
  return *(int *)(a1 + 288) < 1 || *(_DWORD *)(a1 + 292) < 1;
}

void Espresso::MPSBuffersEngine::tile_kernel::~tile_kernel(id *this)
{

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::MPSBuffersEngine::tile_kernel::__launch(Espresso::MPSBuffersEngine::tile_kernel *this, uint64_t *a2, Espresso::layer_data *a3, Espresso::layer_data *a4)
{
  id v8;
  uint64_t v9;
  const void *v10;
  id *v11;
  id *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  id *v17;
  id *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  id v22;
  id v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  id *v28;
  std::__shared_weak_count *v29;
  id *v30;
  std::__shared_weak_count *v31;
  id v32[2];

  if (!*((_QWORD *)this + 38))
  {
    Espresso::MPSBuffersEngine::tile_kernel::on_resized(this, a3, a4);
    if (!*((_QWORD *)this + 38))
      Espresso::throw_exception_selector<Espresso::generic_error>("Kernel not found");
  }
  Espresso::temporary_mtl_encoder::temporary_mtl_encoder((uint64_t)v32, *a2);
  v8 = v32[0];
  v9 = *(_QWORD *)a4;
  v10 = **(const void ***)a4;
  if (v10
  {
    v12 = v11;
    v13 = *(std::__shared_weak_count **)(v9 + 8);
    v30 = v11;
    v31 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
    }
  }
  else
  {
    v12 = 0;
    v30 = 0;
    v31 = 0;
  }
  v16 = *(_QWORD *)a3;
  if (*(_QWORD *)v16
  {
    v18 = v17;
    v19 = *(std::__shared_weak_count **)(v16 + 8);
    v28 = v17;
    v29 = v19;
    if (v19)
    {
      v20 = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
  }
  else
  {
    v19 = 0;
    v18 = 0;
    v28 = 0;
    v29 = 0;
  }
  v22 = v12[21];
  v23 = v18[21];
  objc_msgSend(v8, "setComputePipelineState:", *((_QWORD *)this + 38), v28, v29, v30);
  objc_msgSend(v8, "setBuffer:offset:atIndex:", v22, 0, 0);
  objc_msgSend(v8, "setBuffer:offset:atIndex:", v23, 0, 1);
  objc_msgSend(v8, "setBytes:length:atIndex:", (char *)this + 352, 40, 2);
  objc_msgSend(v8, "setBytes:length:atIndex:", (char *)this + 312, 40, 3);

  if (v19)
  {
    v24 = (unint64_t *)&v19->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  if (v31)
  {
    v26 = (unint64_t *)&v31->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(v32);
}

void sub_191466FC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, id a13)
{
  void *v13;
  void *v14;
  void *v15;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(&a13);
  _Unwind_Resume(a1);
}

void Espresso::MPSBuffersEngine::tile_kernel::blob_options(Espresso::MPSBuffersEngine::tile_kernel *this@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  const void *v4;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 v17;
  _QWORD *v18;
  std::__shared_weak_count *v19;

  *a3 = 0;
  a3[1] = 0;
  v4 = (const void *)*((_QWORD *)this + 1);
  if (v4)
  {
    if (v7)
    {
      v8 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
      v18 = v7;
      v19 = v8;
      if (v8)
      {
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldxr(p_shared_owners);
        while (__stxr(v10 + 1, p_shared_owners));
      }
      if (a2)
      {
        v11 = operator new(0x70uLL);
        v11[1] = 0;
        v11[2] = 0;
        *v11 = &off_1E2DBE228;
        *((_OWORD *)v11 + 4) = 0u;
        *((_OWORD *)v11 + 5) = 0u;
        *((_OWORD *)v11 + 2) = 0u;
        *((_OWORD *)v11 + 3) = 0u;
        v11[3] = &off_1E2D9B4D8;
        *((_DWORD *)v11 + 12) = 1065353216;
        v11[7] = 0x1FFFFFFFFLL;
        v11[12] = 0;
        v11[13] = 0;
        v11[8] = 0;
        v11[9] = 0;
        *((_BYTE *)v11 + 88) = 0;
        v11[10] = 0;
        *(_QWORD *)&v17 = v11 + 3;
        *((_QWORD *)&v17 + 1) = v11;
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)a3, &v17);
        v12 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
        if (*((_QWORD *)&v17 + 1))
        {
          v13 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 - 1, v13));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(*a3 + 72), v18[28], v18[29]);
        v8 = v19;
      }
      if (v8)
      {
        v15 = (unint64_t *)&v8->__shared_owners_;
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
  }
}

void sub_19146716C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v3);
  _Unwind_Resume(a1);
}

void Espresso::MPSBuffersEngine::tile_kernel::on_resized(Espresso::MPSBuffersEngine::tile_kernel *this, Espresso::layer_data *a2, Espresso::layer_data *a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  char *v14;
  char *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  const void *v19;
  Espresso::context_metal *v20;
  Espresso::context_metal *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  __CFString *v25;
  uint64_t v26;
  void *v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int32x2_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int32x2_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  int v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  std::runtime_error *exception;
  std::__shared_weak_count *v53;
  std::__shared_weak_count *v54;

  v6 = (void *)*((_QWORD *)this + 38);
  *((_QWORD *)this + 38) = 0;

  v7 = *(_QWORD *)a2;
  if (*((_QWORD *)a2 + 1) != *(_QWORD *)a2)
  {
    v8 = *(_QWORD *)a3;
    if (*((_QWORD *)a3 + 1) != *(_QWORD *)a3)
    {
      if (*(_QWORD *)v7
      {
        v10 = v9;
        v11 = *(std::__shared_weak_count **)(v7 + 8);
        v54 = v11;
        if (v11)
        {
          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          do
            v13 = __ldxr(p_shared_owners);
          while (__stxr(v13 + 1, p_shared_owners));
          v8 = *(_QWORD *)a3;
        }
      }
      else
      {
        v10 = 0;
        v54 = 0;
      }
      if (*(_QWORD *)v8
      {
        v15 = v14;
        v16 = *(std::__shared_weak_count **)(v8 + 8);
        v53 = v16;
        if (v16)
        {
          v17 = (unint64_t *)&v16->__shared_owners_;
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
      }
      else
      {
        v15 = 0;
        v53 = 0;
      }
      v19 = (const void *)*((_QWORD *)this + 1);
      if (!v19
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
        exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
      }
      v21 = v20;
      v22 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
      if (v22)
      {
        v23 = (unint64_t *)&v22->__shared_owners_;
        do
          v24 = __ldxr(v23);
        while (__stxr(v24 + 1, v23));
      }
      if (v10 && v15)
      {
        if ((*(unsigned int (**)(char *))(*(_QWORD *)v10 + 32))(v10))
        {
          if ((*(unsigned int (**)(char *))(*(_QWORD *)v10 + 32))(v10) != 1)
            Espresso::throw_exception_selector<Espresso::generic_error>("unsupported compute path in tile_kernel kernel");
          v25 = CFSTR("tile_kernel_f16_buffers");
        }
        else
        {
          v25 = CFSTR("tile_kernel_f32_buffers");
        }
        Espresso::context_metal::kernel_for_function(v21, &v25->isa);
        v26 = objc_claimAutoreleasedReturnValue();
        v27 = (void *)*((_QWORD *)this + 38);
        *((_QWORD *)this + 38) = v26;

        if (!*((_QWORD *)this + 38))
          Espresso::throw_exception_selector<Espresso::invalid_state_error>("Failed to find kernel in tile_kernel MPSBuffers");
        v28 = (*(uint64_t (**)(char *))(*(_QWORD *)v15 + 32))(v15);
        v29 = *((_DWORD *)v15 + 2);
        v30 = *((_DWORD *)v15 + 3);
        v31 = *((_DWORD *)v15 + 4);
        v32 = vmax_s32(*(int32x2_t *)(v15 + 20), (int32x2_t)0x100000001);
        if ((v28 - 1) >= 0xD)
        {
          v34 = *((_QWORD *)v15 + 31)
              + *((_QWORD *)v15 + 31) * ((unint64_t)(4 * v29 - 1) / *((_QWORD *)v15 + 31));
          v33 = 4;
        }
        else
        {
          v33 = qword_191AC0CA0[v28 - 1];
          v34 = *((_QWORD *)v15 + 31) + *((_QWORD *)v15 + 31) * ((v33 * v29 - 1) / *((_QWORD *)v15 + 31));
        }
        v35 = v34 / v33;
        v36 = v30 * v35 * v31;
        *((_DWORD *)this + 88) = v29;
        *((_DWORD *)this + 89) = v30;
        *((_DWORD *)this + 90) = v31;
        *(int32x2_t *)((char *)this + 364) = v32;
        *((_DWORD *)this + 93) = 1;
        *((_DWORD *)this + 94) = v35;
        *((_DWORD *)this + 95) = v30 * v35;
        *((_DWORD *)this + 96) = v36;
        *((_DWORD *)this + 97) = v36 * v32.i32[0];
        v37 = (*(uint64_t (**)(char *))(*(_QWORD *)v10 + 32))(v10);
        v38 = *((_DWORD *)v10 + 2);
        v39 = *((_DWORD *)v10 + 3);
        v40 = *((_DWORD *)v10 + 4);
        v41 = vmax_s32(*(int32x2_t *)(v10 + 20), (int32x2_t)0x100000001);
        if ((v37 - 1) >= 0xD)
        {
          v43 = *((_QWORD *)v10 + 31)
              + *((_QWORD *)v10 + 31) * ((unint64_t)(4 * v38 - 1) / *((_QWORD *)v10 + 31));
          v42 = 4;
        }
        else
        {
          v42 = qword_191AC0CA0[v37 - 1];
          v43 = *((_QWORD *)v10 + 31) + *((_QWORD *)v10 + 31) * ((v42 * v38 - 1) / *((_QWORD *)v10 + 31));
        }
        v44 = v43 / v42;
        v45 = v39 * v44 * v40;
        *((_DWORD *)this + 78) = v38;
        *((_DWORD *)this + 79) = v39;
        *((_DWORD *)this + 80) = v40;
        *(int32x2_t *)((char *)this + 324) = v41;
        *((_DWORD *)this + 83) = 1;
        *((_DWORD *)this + 84) = v44;
        *((_DWORD *)this + 85) = v39 * v44;
        *((_DWORD *)this + 86) = v45;
        *((_DWORD *)this + 87) = v45 * v41.i32[0];
      }
      if (v22)
      {
        v46 = (unint64_t *)&v22->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      if (v53)
      {
        v48 = (unint64_t *)&v53->__shared_owners_;
        do
          v49 = __ldaxr(v48);
        while (__stlxr(v49 - 1, v48));
        if (!v49)
        {
          ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
          std::__shared_weak_count::__release_weak(v53);
        }
      }
      if (v54)
      {
        v50 = (unint64_t *)&v54->__shared_owners_;
        do
          v51 = __ldaxr(v50);
        while (__stlxr(v51 - 1, v50));
        if (!v51)
        {
          ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
          std::__shared_weak_count::__release_weak(v54);
        }
      }
    }
  }
}

void sub_1914675A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

BOOL Espresso::MPSBuffersEngine::tile_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  return a3[1] - *a3 < 0x80uLL;
}

void Espresso::MPSBuffersEngine::gather_nd_kernel::~gather_nd_kernel(id *this)
{

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::MPSBuffersEngine::gather_nd_kernel::__launch(Espresso::MPSBuffersEngine::gather_nd_kernel *this, uint64_t *a2, Espresso::layer_data *a3, uint64_t **a4)
{
  uint64_t *v8;
  const void *v9;
  id *v10;
  id *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  const void *v15;
  id *v16;
  id *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  id *v22;
  id *v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  id v27;
  id v28;
  id v29;
  id v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  id v39[2];
  id *v40;
  std::__shared_weak_count *v41;
  id *v42;
  std::__shared_weak_count *v43;
  id *v44;
  std::__shared_weak_count *v45;

  if (!*((_QWORD *)this + 38))
  {
    Espresso::MPSBuffersEngine::gather_nd_kernel::on_resized(this, a3, a4);
    if (!*((_QWORD *)this + 38))
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("Failed to create kernel for gather_nd mps buffers.");
  }
  v8 = *a4;
  v9 = (const void *)**a4;
  if (v9
  {
    v11 = v10;
    v12 = v8[1];
    v44 = v10;
    v45 = (std::__shared_weak_count *)v12;
    if (v12)
    {
      v13 = (unint64_t *)(v12 + 8);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
      v8 = *a4;
    }
  }
  else
  {
    v11 = 0;
    v44 = 0;
    v45 = 0;
  }
  v15 = (const void *)v8[2];
  if (v15
  {
    v17 = v16;
    v18 = v8[3];
    v42 = v16;
    v43 = (std::__shared_weak_count *)v18;
    if (v18)
    {
      v19 = (unint64_t *)(v18 + 8);
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
  }
  else
  {
    v17 = 0;
    v42 = 0;
    v43 = 0;
  }
  v21 = *(_QWORD *)a3;
  if (!*(_QWORD *)v21
  {
    v40 = 0;
    v41 = 0;
    goto LABEL_41;
  }
  v23 = v22;
  v24 = *(std::__shared_weak_count **)(v21 + 8);
  v40 = v22;
  v41 = v24;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldxr(p_shared_owners);
    while (__stxr(v26 + 1, p_shared_owners));
  }
  if (!v11 || !v17)
LABEL_41:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Found nil blob in gather_nd mps buffers");
  v27 = v11[21];
  v28 = v17[21];
  v29 = v23[21];
  Espresso::temporary_mtl_encoder::temporary_mtl_encoder((uint64_t)v39, *a2);
  v30 = v39[0];
  objc_msgSend(v30, "setComputePipelineState:", *((_QWORD *)this + 38));
  objc_msgSend(v30, "setBuffer:offset:atIndex:", v27, 0, 0);
  objc_msgSend(v30, "setBuffer:offset:atIndex:", v28, 0, 1);
  objc_msgSend(v30, "setBuffer:offset:atIndex:", v29, 0, 2);
  objc_msgSend(v30, "setBytes:length:atIndex:", (char *)this + 352, 40, 3);
  objc_msgSend(v30, "setBytes:length:atIndex:", (char *)this + 392, 40, 4);
  objc_msgSend(v30, "setBytes:length:atIndex:", (char *)this + 312, 40, 5);
  objc_msgSend(v30, "setBytes:length:atIndex:", (char *)this + 432, 20, 6);

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(v39);
  if (v24)
  {
    v31 = (unint64_t *)&v24->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v33 = v43;
  if (v43)
  {
    v34 = (unint64_t *)&v43->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  v36 = v45;
  if (v45)
  {
    v37 = (unint64_t *)&v45->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
}

void sub_191467984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  void *v4;
  void *v5;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  _Unwind_Resume(a1);
}

void Espresso::MPSBuffersEngine::gather_nd_kernel::blob_options(Espresso::MPSBuffersEngine::gather_nd_kernel *this@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  const void *v4;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 v17;
  _QWORD *v18;
  std::__shared_weak_count *v19;

  *a3 = 0;
  a3[1] = 0;
  v4 = (const void *)*((_QWORD *)this + 1);
  if (v4)
  {
    if (v7)
    {
      v8 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
      v18 = v7;
      v19 = v8;
      if (v8)
      {
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldxr(p_shared_owners);
        while (__stxr(v10 + 1, p_shared_owners));
      }
      if (a2)
      {
        v11 = operator new(0x70uLL);
        v11[1] = 0;
        v11[2] = 0;
        *v11 = &off_1E2DBE228;
        *((_OWORD *)v11 + 4) = 0u;
        *((_OWORD *)v11 + 5) = 0u;
        *((_OWORD *)v11 + 2) = 0u;
        *((_OWORD *)v11 + 3) = 0u;
        v11[3] = &off_1E2D9B4D8;
        *((_DWORD *)v11 + 12) = 1065353216;
        v11[7] = 0x1FFFFFFFFLL;
        v11[12] = 0;
        v11[13] = 0;
        v11[8] = 0;
        v11[9] = 0;
        *((_BYTE *)v11 + 88) = 0;
        v11[10] = 0;
        *(_QWORD *)&v17 = v11 + 3;
        *((_QWORD *)&v17 + 1) = v11;
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)a3, &v17);
        v12 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
        if (*((_QWORD *)&v17 + 1))
        {
          v13 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 - 1, v13));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(*a3 + 72), v18[28], v18[29]);
        v8 = v19;
      }
      if (v8)
      {
        v15 = (unint64_t *)&v8->__shared_owners_;
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
  }
}

void sub_191467B4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v3);
  _Unwind_Resume(a1);
}

void Espresso::MPSBuffersEngine::gather_nd_kernel::on_resized(Espresso::MPSBuffersEngine::gather_nd_kernel *this, Espresso::layer_data *a2, uint64_t **a3)
{
  void *v6;
  uint64_t v7;
  uint64_t *v8;
  char *v9;
  char *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  const void *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  const void *v25;
  Espresso::context_metal *v26;
  Espresso::context_metal *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int32x2_t v35;
  unint64_t v36;
  unint64_t v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int32x2_t v43;
  unint64_t v44;
  unint64_t v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int32x2_t v51;
  unint64_t v52;
  unint64_t v53;
  int v54;
  unsigned int v55;
  int v56;
  int v57;
  BOOL v58;
  int v59;
  uint64_t v60;
  int v61;
  int *v62;
  int v63;
  int v64;
  unsigned int v65;
  unint64_t v66;
  int v67;
  int *v68;
  int v69;
  int v70;
  uint64_t v71;
  int v72;
  int *v73;
  int v74;
  __CFString *v75;
  uint64_t v76;
  void *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::runtime_error *exception;
  _BYTE v90[20];
  int v91;
  char v92[40];
  void *__p;
  void *v94;
  _DWORD v95[5];
  unsigned int v96;
  Espresso::context_metal *v97;
  std::__shared_weak_count *v98;
  char *v99;
  std::__shared_weak_count *v100;
  char *v101;
  std::__shared_weak_count *v102;
  char *v103;
  std::__shared_weak_count *v104;

  v6 = (void *)*((_QWORD *)this + 38);
  *((_QWORD *)this + 38) = 0;

  v7 = *(_QWORD *)a2;
  if (*((_QWORD *)a2 + 1) != *(_QWORD *)a2)
  {
    v8 = *a3;
    if ((unint64_t)((char *)a3[1] - (char *)*a3) >= 0x20)
    {
      if (*(_QWORD *)v7
      {
        v10 = v9;
        v11 = *(std::__shared_weak_count **)(v7 + 8);
        v103 = v9;
        v104 = v11;
        if (v11)
        {
          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          do
            v13 = __ldxr(p_shared_owners);
          while (__stxr(v13 + 1, p_shared_owners));
          v8 = *a3;
        }
      }
      else
      {
        v10 = 0;
        v103 = 0;
        v104 = 0;
      }
      if (*v8
      {
        v15 = v14;
        v16 = v8[1];
        v101 = v14;
        v102 = (std::__shared_weak_count *)v16;
        if (v16)
        {
          v17 = (unint64_t *)(v16 + 8);
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
          v8 = *a3;
        }
      }
      else
      {
        v15 = 0;
        v101 = 0;
        v102 = 0;
      }
      v19 = (const void *)v8[2];
      if (v19
      {
        v21 = v20;
        v22 = v8[3];
        v99 = v20;
        v100 = (std::__shared_weak_count *)v22;
        if (v22)
        {
          v23 = (unint64_t *)(v22 + 8);
          do
            v24 = __ldxr(v23);
          while (__stxr(v24 + 1, v23));
        }
      }
      else
      {
        v21 = 0;
        v99 = 0;
        v100 = 0;
      }
      v25 = (const void *)*((_QWORD *)this + 1);
      if (!v25
      {
        v97 = 0;
        v98 = 0;
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
        exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
      }
      v27 = v26;
      v28 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
      v97 = v26;
      v98 = v28;
      if (v28)
      {
        v29 = (unint64_t *)&v28->__shared_owners_;
        do
          v30 = __ldxr(v29);
        while (__stxr(v30 + 1, v29));
      }
      if (v10 && v15 && v21)
      {
        v31 = (*(uint64_t (**)(char *))(*(_QWORD *)v15 + 32))(v15);
        v32 = *((_DWORD *)v15 + 2);
        v33 = *((_DWORD *)v15 + 3);
        v34 = *((_DWORD *)v15 + 4);
        v35 = vmax_s32(*(int32x2_t *)(v15 + 20), (int32x2_t)0x100000001);
        if ((v31 - 1) > 0xC)
          v36 = 4;
        else
          v36 = qword_191AC0CA0[v31 - 1];
        v37 = (*((_QWORD *)v15 + 31) + *((_QWORD *)v15 + 31) * ((v36 * v32 - 1) / *((_QWORD *)v15 + 31))) / v36;
        v38 = v33 * v37 * v34;
        *((_DWORD *)this + 88) = v32;
        *((_DWORD *)this + 89) = v33;
        *((_DWORD *)this + 90) = v34;
        *(int32x2_t *)((char *)this + 364) = v35;
        *((_DWORD *)this + 93) = 1;
        *((_DWORD *)this + 94) = v37;
        *((_DWORD *)this + 95) = v33 * v37;
        *((_DWORD *)this + 96) = v38;
        *((_DWORD *)this + 97) = v38 * v35.i32[0];
        v39 = (*(uint64_t (**)(char *))(*(_QWORD *)v21 + 32))(v21);
        v40 = *((_DWORD *)v21 + 2);
        v41 = *((_DWORD *)v21 + 3);
        v42 = *((_DWORD *)v21 + 4);
        v43 = vmax_s32(*(int32x2_t *)(v21 + 20), (int32x2_t)0x100000001);
        if ((v39 - 1) > 0xC)
          v44 = 4;
        else
          v44 = qword_191AC0CA0[v39 - 1];
        v45 = (*((_QWORD *)v21 + 31) + *((_QWORD *)v21 + 31) * ((v44 * v40 - 1) / *((_QWORD *)v21 + 31))) / v44;
        v46 = v41 * v45 * v42;
        *((_DWORD *)this + 98) = v40;
        *((_DWORD *)this + 99) = v41;
        *((_DWORD *)this + 100) = v42;
        *(int32x2_t *)((char *)this + 404) = v43;
        *((_DWORD *)this + 103) = 1;
        *((_DWORD *)this + 104) = v45;
        *((_DWORD *)this + 105) = v41 * v45;
        *((_DWORD *)this + 106) = v46;
        *((_DWORD *)this + 107) = v46 * v43.i32[0];
        v47 = (*(uint64_t (**)(char *))(*(_QWORD *)v10 + 32))(v10);
        v48 = *((_DWORD *)v10 + 2);
        v49 = *((_DWORD *)v10 + 3);
        v50 = *((_DWORD *)v10 + 4);
        v51 = vmax_s32(*(int32x2_t *)(v10 + 20), (int32x2_t)0x100000001);
        if ((v47 - 1) > 0xC)
          v52 = 4;
        else
          v52 = qword_191AC0CA0[v47 - 1];
        v53 = (*((_QWORD *)v10 + 31) + *((_QWORD *)v10 + 31) * ((v52 * v48 - 1) / *((_QWORD *)v10 + 31))) / v52;
        v54 = v49 * v53 * v50;
        *((_DWORD *)this + 78) = v48;
        *((_DWORD *)this + 79) = v49;
        *((_DWORD *)this + 80) = v50;
        *(int32x2_t *)((char *)this + 324) = v51;
        *((_DWORD *)this + 83) = 1;
        *((_DWORD *)this + 84) = v53;
        *((_DWORD *)this + 85) = v49 * v53;
        *((_DWORD *)this + 86) = v54;
        *((_DWORD *)this + 87) = v54 * v51.i32[0];
        Espresso::abstract_blob_container::shape(v92, **a3);
        Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v95, (const Espresso::layer_shape *)v92, 0);
        if (__p)
        {
          v94 = __p;
          operator delete(__p);
        }
        v55 = v96;
        Espresso::abstract_blob_container::shape(v92, (*a3)[2]);
        Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v90, (const Espresso::layer_shape *)v92, 0);
        if (__p)
        {
          v94 = __p;
          operator delete(__p);
        }
        v56 = *((_DWORD *)this + 71);
        v57 = v55 & (v56 >> 31);
        v58 = __OFADD__(v57, v56);
        v59 = v57 + v56;
        if (v59 < 0 != v58)
          v60 = v96;
        else
          v60 = v59;
        v61 = 1;
        if ((int)v60 >= 1)
        {
          v62 = v95;
          do
          {
            v63 = *v62++;
            v61 *= v63;
            --v60;
          }
          while (v60);
        }
        if (v59 < 0)
          v64 = -1;
        else
          v64 = v59;
        v65 = v64 + 1;
        if (v64 + 1 >= (int)v96)
        {
          v67 = 1;
        }
        else
        {
          v66 = v96 - (unint64_t)v65;
          v67 = 1;
          v68 = &v95[v65];
          do
          {
            v69 = *v68++;
            v67 *= v69;
            --v66;
          }
          while (v66);
        }
        v70 = v95[v59];
        v71 = v91;
        v72 = 1;
        if (v91 >= 1)
        {
          v73 = (int *)v90;
          do
          {
            v74 = *v73++;
            v72 *= v74;
            --v71;
          }
          while (v71);
        }
        *((_DWORD *)this + 112) = v59;
        *((_DWORD *)this + 109) = v61;
        *((_DWORD *)this + 108) = v70;
        *((_DWORD *)this + 110) = v67;
        *((_DWORD *)this + 111) = v72;
        if (!*((_DWORD *)this + 70))
        {
          if ((*(unsigned int (**)(char *))(*(_QWORD *)v10 + 32))(v10))
          {
            if ((*(unsigned int (**)(char *))(*(_QWORD *)v10 + 32))(v10) != 1)
              Espresso::throw_exception_selector<Espresso::generic_error>("Failed to find kernel for TF_GATHER in gather_nd kernel mps buffers");
            v75 = CFSTR("gather_nd_tf_gather_mode_kernel_f16_buffers");
          }
          else
          {
            v75 = CFSTR("gather_nd_tf_gather_mode_kernel_f32_buffers");
          }
          Espresso::context_metal::kernel_for_function(v27, &v75->isa);
          v76 = objc_claimAutoreleasedReturnValue();
          v77 = (void *)*((_QWORD *)this + 38);
          *((_QWORD *)this + 38) = v76;

        }
        if (!*((_QWORD *)this + 38))
          Espresso::throw_exception_selector<Espresso::invalid_state_error>("Failed to find kernel in gather_nd kernel MPSBuffers");
      }
      if (v28)
      {
        v78 = (unint64_t *)&v28->__shared_owners_;
        do
          v79 = __ldaxr(v78);
        while (__stlxr(v79 - 1, v78));
        if (!v79)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
      v80 = v100;
      if (v100)
      {
        v81 = (unint64_t *)&v100->__shared_owners_;
        do
          v82 = __ldaxr(v81);
        while (__stlxr(v82 - 1, v81));
        if (!v82)
        {
          ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
          std::__shared_weak_count::__release_weak(v80);
        }
      }
      v83 = v102;
      if (v102)
      {
        v84 = (unint64_t *)&v102->__shared_owners_;
        do
          v85 = __ldaxr(v84);
        while (__stlxr(v85 - 1, v84));
        if (!v85)
        {
          ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
          std::__shared_weak_count::__release_weak(v83);
        }
      }
      v86 = v104;
      if (v104)
      {
        v87 = (unint64_t *)&v104->__shared_owners_;
        do
          v88 = __ldaxr(v87);
        while (__stlxr(v88 - 1, v87));
        if (!v88)
        {
          ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
          std::__shared_weak_count::__release_weak(v86);
        }
      }
    }
  }
}

void sub_1914681B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,char a25)
{
  uint64_t v25;

  if (__p)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 112);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 96);
  _Unwind_Resume(a1);
}

BOOL Espresso::MPSBuffersEngine::gather_nd_kernel::is_valid_for_engine(_DWORD *a1, uint64_t a2, __int128 **a3)
{
  unsigned int v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  void ***v10;
  int v11;
  unsigned int v12;
  unint64_t v13;
  int *v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  int *v19;
  int v20;
  _BOOL8 v21;
  _BYTE v23[20];
  int v24;
  void **v25[2];
  unsigned int v26;
  const Espresso::layer_shape *v27;
  uint64_t v28;
  uint64_t v29;

  v27 = 0;
  v28 = 0;
  v29 = 0;
  std::vector<Espresso::layer_shape>::__init_with_size[abi:ne180100]<Espresso::layer_shape*,Espresso::layer_shape*>(&v27, *a3, a3[1], ((char *)a3[1] - (char *)*a3) >> 6);
  if ((unint64_t)(v28 - (_QWORD)v27) < 0x80)
    goto LABEL_20;
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v25, v27, 0);
  v4 = v26;
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v23, (const Espresso::layer_shape *)((char *)v27 + 64), 0);
  if (a1[72])
    goto LABEL_20;
  v5 = a1[71];
  v6 = v4 & (v5 >> 31);
  v7 = v6 + v5;
  if (v6 + v5 < 0 != __OFADD__(v6, v5))
    v8 = v26;
  else
    v8 = v7;
  v9 = 1;
  if ((int)v8 >= 1)
  {
    v10 = v25;
    do
    {
      v11 = *(_DWORD *)v10;
      v10 = (void ***)((char *)v10 + 4);
      v9 *= v11;
      --v8;
    }
    while (v8);
  }
  if (v7 < 0)
    v7 = -1;
  v12 = v7 + 1;
  if (v7 + 1 >= (int)v26)
  {
    v15 = 1;
  }
  else
  {
    v13 = v26 - (unint64_t)v12;
    v14 = (int *)v25 + v12;
    v15 = 1;
    do
    {
      v16 = *v14++;
      v15 *= v16;
      --v13;
    }
    while (v13);
  }
  v17 = v24;
  v18 = 1;
  if (v24 >= 1)
  {
    v19 = (int *)v23;
    do
    {
      v20 = *v19++;
      v18 *= v20;
      --v17;
    }
    while (v17);
  }
  if (v15 * v9 * v18 > 250000)
LABEL_20:
    v21 = 0;
  else
    v21 = a1[70] == 0;
  v25[0] = (void **)&v27;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v25);
  return v21;
}

void sub_191468378(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, char a16)
{
  a13 = (void **)&a16;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

void Espresso::MPSBuffersEngine::sgd_kernel::~sgd_kernel(id *this)
{

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::MPSBuffersEngine::sgd_kernel::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  _QWORD *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  double v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  const void *v23;
  void *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  const void *v29;
  void *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  const void *v35;
  void *v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  const void *v43;
  void *v44;
  void *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  const void *v51;
  void *v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  void *v64;
  uint64_t v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  void *v76;
  uint64_t v77;
  void *v78;
  void *v79;
  void *v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  uint64_t v96;
  std::__shared_weak_count *v97;
  void *v98;
  std::__shared_weak_count *v99;
  void *v100;
  std::__shared_weak_count *v101;
  void *v102;
  std::__shared_weak_count *v103;
  void *v104;
  std::__shared_weak_count *v105;
  void *v106;
  std::__shared_weak_count *v107;
  void *v108;
  std::__shared_weak_count *v109;
  __int128 v110;
  _QWORD *v111;
  std::__shared_weak_count *v112;

  if (*(_QWORD *)a2
  {
    v8 = *(std::__shared_weak_count **)(a2 + 8);
    v111 = v7;
    v112 = v8;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
    }
  }
  else
  {
    v111 = 0;
    v112 = 0;
  }
  v11 = *(int *)(a1 + 288);
  if (*(_BYTE *)(a1 + 280))
  {
    v12 = 3 * v11;
    v13 = *a4;
    if (v12 + 1 < (unint64_t)((a4[1] - *a4) >> 4))
      Espresso::throw_exception_selector<Espresso::unsupported_configuration_error>("momentum scale as input is not supported on mps buffers sgd");
  }
  else
  {
    v12 = 2 * (int)v11;
    v13 = *a4;
  }
  v14 = *(_OWORD *)(v13 + 16 * v12);
  v110 = v14;
  v15 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1))
  {
    v16 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
    v18 = (std::__shared_weak_count *)*((_QWORD *)&v110 + 1);
  }
  else
  {
    v18 = 0;
  }
  *(float *)&v19 = get_cpu_scalar((_QWORD *)a2, (void *)v14, v18);
  objc_msgSend(*(id *)(a1 + 296), "setLearningRate:", v19);
  LODWORD(v20) = *(_DWORD *)(a1 + 288);
  if ((_DWORD)v20)
  {
    v21 = 0;
    do
    {
      v22 = *a4;
      v23 = *(const void **)(*a4 + 16 * v21);
      if (v23
      {
        v108 = v24;
        v25 = *(std::__shared_weak_count **)(v22 + 16 * v21 + 8);
        v109 = v25;
        if (v25)
        {
          v26 = (unint64_t *)&v25->__shared_owners_;
          do
            v27 = __ldxr(v26);
          while (__stxr(v27 + 1, v26));
          LODWORD(v20) = *(_DWORD *)(a1 + 288);
          v22 = *a4;
        }
      }
      else
      {
        v108 = 0;
        v109 = 0;
      }
      v28 = v21 + (int)v20;
      v29 = *(const void **)(v22 + 16 * v28);
      if (v29
      {
        v106 = v30;
        v31 = *(std::__shared_weak_count **)(v22 + 16 * v28 + 8);
        v107 = v31;
        if (v31)
        {
          v32 = (unint64_t *)&v31->__shared_owners_;
          do
            v33 = __ldxr(v32);
          while (__stxr(v33 + 1, v32));
        }
      }
      else
      {
        v106 = 0;
        v107 = 0;
      }
      v34 = *a3;
      v35 = *(const void **)(*a3 + 16 * v21);
      if (v35
      {
        v104 = v36;
        v37 = *(std::__shared_weak_count **)(v34 + 16 * v21 + 8);
        v105 = v37;
        if (v37)
        {
          v38 = (unint64_t *)&v37->__shared_owners_;
          do
            v39 = __ldxr(v38);
          while (__stxr(v39 + 1, v38));
        }
      }
      else
      {
        v104 = 0;
        v105 = 0;
      }
      if (*(_BYTE *)(a1 + 280))
      {
        v40 = *(int *)(a1 + 288);
        v41 = v21 + 2 * v40;
        v42 = *a4;
        v43 = *(const void **)(*a4 + 16 * v41);
        if (v43
        {
          v45 = v44;
          v102 = v44;
          v46 = *(std::__shared_weak_count **)(v42 + 16 * v41 + 8);
          v103 = v46;
          if (v46)
          {
            v47 = (unint64_t *)&v46->__shared_owners_;
            do
              v48 = __ldxr(v47);
            while (__stxr(v48 + 1, v47));
            LODWORD(v40) = *(_DWORD *)(a1 + 288);
          }
        }
        else
        {
          v46 = 0;
          v45 = 0;
          v102 = 0;
          v103 = 0;
        }
        v49 = v21 + (int)v40;
        v50 = *a3;
        v51 = *(const void **)(*a3 + 16 * v49);
        if (v51
        {
          v100 = v52;
          v53 = *(std::__shared_weak_count **)(v50 + 16 * v49 + 8);
          v101 = v53;
          if (v53)
          {
            v54 = (unint64_t *)&v53->__shared_owners_;
            do
              v55 = __ldxr(v54);
            while (__stxr(v55 + 1, v54));
          }
        }
        else
        {
          v52 = 0;
          v100 = 0;
          v101 = 0;
        }
        v98 = v45;
        v99 = v46;
        if (v46)
        {
          v56 = (unint64_t *)&v46->__shared_owners_;
          do
            v57 = __ldxr(v56);
          while (__stxr(v57 + 1, v56));
        }
        v96 = 0;
        v97 = 0;
        (*(void (**)(void *, uint64_t, void **, uint64_t *))(*(_QWORD *)v52 + 144))(v52, a2, &v98, &v96);
        v58 = v97;
        if (v97)
        {
          v59 = (unint64_t *)&v97->__shared_owners_;
          do
            v60 = __ldaxr(v59);
          while (__stlxr(v60 - 1, v59));
          if (!v60)
          {
            ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
            std::__shared_weak_count::__release_weak(v58);
          }
        }
        v61 = v99;
        if (v99)
        {
          v62 = (unint64_t *)&v99->__shared_owners_;
          do
            v63 = __ldaxr(v62);
          while (__stlxr(v63 - 1, v62));
          if (!v63)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        v64 = *(void **)(a1 + 296);
        v65 = v111[18];
        pack_mps_vector((uint64_t)&v106);
        v66 = (void *)objc_claimAutoreleasedReturnValue();
        pack_mps_vector((uint64_t)&v108);
        v67 = (void *)objc_claimAutoreleasedReturnValue();
        pack_mps_vector((uint64_t)&v100);
        v68 = (void *)objc_claimAutoreleasedReturnValue();
        pack_mps_vector((uint64_t)&v104);
        v69 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v64, "encodeToCommandBuffer:inputGradientVector:inputValuesVector:inputMomentumVector:resultValuesVector:", v65, v66, v67, v68, v69);

        v70 = v101;
        if (v101)
        {
          v71 = (unint64_t *)&v101->__shared_owners_;
          do
            v72 = __ldaxr(v71);
          while (__stlxr(v72 - 1, v71));
          if (!v72)
          {
            ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
            std::__shared_weak_count::__release_weak(v70);
          }
        }
        v73 = v103;
        if (v103)
        {
          v74 = (unint64_t *)&v103->__shared_owners_;
          do
            v75 = __ldaxr(v74);
          while (__stlxr(v75 - 1, v74));
          if (!v75)
          {
            ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
            std::__shared_weak_count::__release_weak(v73);
          }
        }
      }
      else
      {
        v76 = *(void **)(a1 + 296);
        v77 = v111[18];
        pack_mps_vector((uint64_t)&v106);
        v78 = (void *)objc_claimAutoreleasedReturnValue();
        pack_mps_vector((uint64_t)&v108);
        v79 = (void *)objc_claimAutoreleasedReturnValue();
        pack_mps_vector((uint64_t)&v104);
        v80 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v76, "encodeToCommandBuffer:inputGradientVector:inputValuesVector:inputMomentumVector:resultValuesVector:", v77, v78, v79, 0, v80);

      }
      v81 = v105;
      if (v105)
      {
        v82 = (unint64_t *)&v105->__shared_owners_;
        do
          v83 = __ldaxr(v82);
        while (__stlxr(v83 - 1, v82));
        if (!v83)
        {
          ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
          std::__shared_weak_count::__release_weak(v81);
        }
      }
      v84 = v107;
      if (v107)
      {
        v85 = (unint64_t *)&v107->__shared_owners_;
        do
          v86 = __ldaxr(v85);
        while (__stlxr(v86 - 1, v85));
        if (!v86)
        {
          ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
          std::__shared_weak_count::__release_weak(v84);
        }
      }
      v87 = v109;
      if (v109)
      {
        v88 = (unint64_t *)&v109->__shared_owners_;
        do
          v89 = __ldaxr(v88);
        while (__stlxr(v89 - 1, v88));
        if (!v89)
        {
          ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
          std::__shared_weak_count::__release_weak(v87);
        }
      }
      ++v21;
      v20 = *(int *)(a1 + 288);
    }
    while (v21 < v20);
    v15 = (std::__shared_weak_count *)*((_QWORD *)&v110 + 1);
  }
  if (v15)
  {
    v90 = (unint64_t *)&v15->__shared_owners_;
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v92 = v112;
  if (v112)
  {
    v93 = (unint64_t *)&v112->__shared_owners_;
    do
      v94 = __ldaxr(v93);
    while (__stlxr(v94 - 1, v93));
    if (!v94)
    {
      ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
      std::__shared_weak_count::__release_weak(v92);
    }
  }
}

void sub_191468A44(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1 - 104);
  _Unwind_Resume(a1);
}

void Espresso::MPSBuffersEngine::sgd_kernel::blob_options(Espresso::MPSBuffersEngine::sgd_kernel *this@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  const void *v4;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 v17;
  _QWORD *v18;
  std::__shared_weak_count *v19;

  *a3 = 0;
  a3[1] = 0;
  v4 = (const void *)*((_QWORD *)this + 1);
  if (v4)
  {
    if (v7)
    {
      v8 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
      v18 = v7;
      v19 = v8;
      if (v8)
      {
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldxr(p_shared_owners);
        while (__stxr(v10 + 1, p_shared_owners));
      }
      if (a2)
      {
        v11 = operator new(0x70uLL);
        v11[1] = 0;
        v11[2] = 0;
        *v11 = &off_1E2DBE228;
        *((_OWORD *)v11 + 4) = 0u;
        *((_OWORD *)v11 + 5) = 0u;
        *((_OWORD *)v11 + 2) = 0u;
        *((_OWORD *)v11 + 3) = 0u;
        v11[3] = &off_1E2D9B4D8;
        *((_DWORD *)v11 + 12) = 1065353216;
        v11[7] = 0x1FFFFFFFFLL;
        v11[12] = 0;
        v11[13] = 0;
        v11[8] = 0;
        v11[9] = 0;
        *((_BYTE *)v11 + 88) = 0;
        v11[10] = 0;
        *(_QWORD *)&v17 = v11 + 3;
        *((_QWORD *)&v17 + 1) = v11;
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)a3, &v17);
        v12 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
        if (*((_QWORD *)&v17 + 1))
        {
          v13 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 - 1, v13));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(*a3 + 72), v18[28], v18[29]);
        v8 = v19;
      }
      if (v8)
      {
        v15 = (unint64_t *)&v8->__shared_owners_;
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
  }
}

void sub_191468C88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v3);
  _Unwind_Resume(a1);
}

const char *Espresso::generic_sgd_kernel::kernel_type_str(Espresso::generic_sgd_kernel *this)
{
  return "sgd";
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::sgd_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

float get_cpu_scalar(_QWORD *a1, void *lpsrc, std::__shared_weak_count *a3)
{
  _QWORD *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  float v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v16;
  std::__shared_weak_count *v17;
  _QWORD *v18;
  std::__shared_weak_count *v19;

  if (lpsrc)
  {
    if (v6)
    {
      v18 = v6;
      v19 = a3;
      if (a3)
      {
        p_shared_owners = (unint64_t *)&a3->__shared_owners_;
        do
          v8 = __ldxr(p_shared_owners);
        while (__stxr(v8 + 1, p_shared_owners));
      }
      v9 = **(float **)(v6[20] + 24);
      if (!a3)
        return v9;
LABEL_14:
      v13 = (unint64_t *)&a3->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
        std::__shared_weak_count::__release_weak(a3);
      }
      return v9;
    }
  }
  v18 = 0;
  v19 = 0;
  v16 = 0;
  v17 = 0;
  (*(void (**)(void *, _QWORD *, uint64_t *))(*(_QWORD *)lpsrc + 40))(lpsrc, a1, &v16);
  (*(void (**)(_QWORD))(*(_QWORD *)*a1 + 40))(*a1);
  v10 = v17;
  v9 = **(float **)(v16 + 24);
  if (v17)
  {
    v11 = (unint64_t *)&v17->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  a3 = v19;
  if (v19)
    goto LABEL_14;
  return v9;
}

void sub_191468DF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

id pack_mps_vector(uint64_t a1)
{
  void *v2;
  void *v3;

  objc_msgSend(MEMORY[0x1E0CC7250], "vectorDescriptorWithLength:dataType:", (*(_DWORD *)(*(_QWORD *)a1 + 12)* *(_DWORD *)(*(_QWORD *)a1 + 240)* *(_DWORD *)(*(_QWORD *)a1 + 16)* *(_DWORD *)(*(_QWORD *)a1 + 20)* *(_DWORD *)(*(_QWORD *)a1 + 24)), *(unsigned int *)(*(_QWORD *)a1 + 192));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CC7248]), "initWithBuffer:descriptor:", *(_QWORD *)(*(_QWORD *)a1 + 168), v2);

  return v3;
}

void sub_191468E8C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void Espresso::MPSBuffersEngine::adam_kernel::~adam_kernel(id *this)
{

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::MPSBuffersEngine::adam_kernel::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  _QWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  unint64_t *v14;
  unint64_t v15;
  void *v16;
  __int128 v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  float cpu_scalar;
  float v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  const void *v26;
  void *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  const void *v32;
  void *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  const void *v38;
  void *v39;
  void *v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  const void *v45;
  void *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  const void *v51;
  void *v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  const void *v57;
  void *v58;
  void *v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  const void *v65;
  void *v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  void *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  void *v87;
  uint64_t v88;
  void *v89;
  void *v90;
  void *v91;
  void *v92;
  void *v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  void *v123;
  uint64_t v124;
  int v125[2];
  uint64_t v128;
  std::__shared_weak_count *v129;
  void *v130;
  std::__shared_weak_count *v131;
  uint64_t v132;
  std::__shared_weak_count *v133;
  void *v134;
  std::__shared_weak_count *v135;
  void *v136;
  std::__shared_weak_count *v137;
  void *v138;
  std::__shared_weak_count *v139;
  void *v140;
  std::__shared_weak_count *v141;
  void *v142;
  std::__shared_weak_count *v143;
  void *v144;
  std::__shared_weak_count *v145;
  void *v146;
  std::__shared_weak_count *v147;
  void *v148;
  std::__shared_weak_count *v149;
  __int128 v150;
  __int128 v151;
  _QWORD *v152;
  std::__shared_weak_count *v153;

  if (*(_QWORD *)a2
  {
    v7 = *(std::__shared_weak_count **)(a2 + 8);
    v152 = v6;
    v153 = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
  }
  else
  {
    v152 = 0;
    v153 = 0;
  }
  v10 = *(int *)(a1 + 292);
  v11 = *a4;
  if (((4 * v10) | 2uLL) < (a4[1] - *a4) >> 4)
    Espresso::throw_exception_selector<Espresso::unsupported_configuration_error>("betas as input is not supported on mps buffers adam");
  v12 = 4 * v10;
  v13 = *(_OWORD *)(v11 + 16 * v12);
  v151 = v13;
  if (*((_QWORD *)&v13 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
    v11 = *a4;
  }
  *(_QWORD *)v125 = a2;
  v16 = (void *)v13;
  v17 = *(_OWORD *)(v11 + ((16 * v12) | 0x10));
  v150 = v17;
  v18 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
  v123 = (void *)v17;
  if (*((_QWORD *)&v17 + 1))
  {
    v19 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  cpu_scalar = get_cpu_scalar((_QWORD *)a2, v16, *((std::__shared_weak_count **)&v151 + 1));
  v22 = get_cpu_scalar((_QWORD *)a2, v123, *((std::__shared_weak_count **)&v150 + 1));
  *(float *)&v23 = cpu_scalar;
  objc_msgSend(*(id *)(a1 + 296), "setLearningRate:", v23);
  if (*(_DWORD *)(a1 + 292))
  {
    v24 = 0;
    v124 = (int)llroundf(v22);
    while (1)
    {
      objc_msgSend(*(id *)(a1 + 296), "setTimeStep:", v124, v124);
      v25 = *a4;
      v26 = *(const void **)(*a4 + 16 * v24);
      if (v26
      {
        v148 = v27;
        v28 = *(std::__shared_weak_count **)(v25 + 16 * v24 + 8);
        v149 = v28;
        if (v28)
        {
          v29 = (unint64_t *)&v28->__shared_owners_;
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
          v25 = *a4;
        }
      }
      else
      {
        v148 = 0;
        v149 = 0;
      }
      v31 = *(int *)(a1 + 292);
      v32 = *(const void **)(v25 + 16 * (v24 + v31));
      if (v32
      {
        v146 = v33;
        v34 = *(std::__shared_weak_count **)(v25 + 16 * (v24 + v31) + 8);
        v147 = v34;
        if (v34)
        {
          v35 = (unint64_t *)&v34->__shared_owners_;
          do
            v36 = __ldxr(v35);
          while (__stxr(v36 + 1, v35));
          LODWORD(v31) = *(_DWORD *)(a1 + 292);
          v25 = *a4;
        }
      }
      else
      {
        v146 = 0;
        v147 = 0;
      }
      v37 = v24 + 2 * (int)v31;
      v38 = *(const void **)(v25 + 16 * v37);
      if (v38
      {
        v40 = v39;
        v144 = v39;
        v41 = *(std::__shared_weak_count **)(v25 + 16 * v37 + 8);
        v145 = v41;
        if (v41)
        {
          v42 = (unint64_t *)&v41->__shared_owners_;
          do
            v43 = __ldxr(v42);
          while (__stxr(v43 + 1, v42));
          LODWORD(v31) = *(_DWORD *)(a1 + 292);
          v25 = *a4;
        }
      }
      else
      {
        v41 = 0;
        v40 = 0;
        v144 = 0;
        v145 = 0;
      }
      v44 = v24 + 3 * (int)v31;
      v45 = *(const void **)(v25 + 16 * v44);
      if (v45
      {
        v142 = v46;
        v47 = *(std::__shared_weak_count **)(v25 + 16 * v44 + 8);
        v143 = v47;
        if (v47)
        {
          v48 = (unint64_t *)&v47->__shared_owners_;
          do
            v49 = __ldxr(v48);
          while (__stxr(v49 + 1, v48));
        }
      }
      else
      {
        v142 = 0;
        v143 = 0;
      }
      v50 = *a3;
      v51 = *(const void **)(*a3 + 16 * v24);
      if (v51
      {
        v140 = v52;
        v53 = *(std::__shared_weak_count **)(v50 + 16 * v24 + 8);
        v141 = v53;
        if (v53)
        {
          v54 = (unint64_t *)&v53->__shared_owners_;
          do
            v55 = __ldxr(v54);
          while (__stxr(v55 + 1, v54));
          v50 = *a3;
        }
      }
      else
      {
        v140 = 0;
        v141 = 0;
      }
      v56 = *(int *)(a1 + 292);
      v57 = *(const void **)(v50 + 16 * (v24 + v56));
      if (v57
      {
        v59 = v58;
        v138 = v58;
        v60 = *(std::__shared_weak_count **)(v50 + 16 * (v24 + v56) + 8);
        v139 = v60;
        if (v60)
        {
          v61 = (unint64_t *)&v60->__shared_owners_;
          v62 = *(_QWORD *)v125;
          do
            v63 = __ldxr(v61);
          while (__stxr(v63 + 1, v61));
          LODWORD(v56) = *(_DWORD *)(a1 + 292);
          v50 = *a3;
          goto LABEL_61;
        }
      }
      else
      {
        v59 = 0;
        v138 = 0;
        v139 = 0;
      }
      v62 = *(_QWORD *)v125;
LABEL_61:
      v64 = v24 + 2 * (int)v56;
      v65 = *(const void **)(v50 + 16 * v64);
      if (v65
      {
        v136 = v66;
        v67 = *(std::__shared_weak_count **)(v50 + 16 * v64 + 8);
        v137 = v67;
        if (v67)
        {
          v68 = (unint64_t *)&v67->__shared_owners_;
          do
            v69 = __ldxr(v68);
          while (__stxr(v69 + 1, v68));
        }
      }
      else
      {
        v136 = 0;
        v137 = 0;
      }
      v134 = v40;
      v135 = v41;
      if (v41)
      {
        v70 = (unint64_t *)&v41->__shared_owners_;
        do
          v71 = __ldxr(v70);
        while (__stxr(v71 + 1, v70));
      }
      v132 = 0;
      v133 = 0;
      (*(void (**)(void *, uint64_t, void **, uint64_t *))(*(_QWORD *)v59 + 144))(v59, v62, &v134, &v132);
      v72 = v133;
      if (v133)
      {
        v73 = (unint64_t *)&v133->__shared_owners_;
        do
          v74 = __ldaxr(v73);
        while (__stlxr(v74 - 1, v73));
        if (!v74)
        {
          ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
          std::__shared_weak_count::__release_weak(v72);
        }
      }
      v75 = v135;
      if (v135)
      {
        v76 = (unint64_t *)&v135->__shared_owners_;
        do
          v77 = __ldaxr(v76);
        while (__stlxr(v77 - 1, v76));
        if (!v77)
        {
          ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
          std::__shared_weak_count::__release_weak(v75);
        }
      }
      v78 = v136;
      v130 = v142;
      v131 = v143;
      if (v143)
      {
        v79 = (unint64_t *)&v143->__shared_owners_;
        do
          v80 = __ldxr(v79);
        while (__stxr(v80 + 1, v79));
      }
      v128 = 0;
      v129 = 0;
      (*(void (**)(void *, uint64_t, void **, uint64_t *))(*(_QWORD *)v78 + 144))(v78, v62, &v130, &v128);
      v81 = v129;
      if (v129)
      {
        v82 = (unint64_t *)&v129->__shared_owners_;
        do
          v83 = __ldaxr(v82);
        while (__stlxr(v83 - 1, v82));
        if (!v83)
        {
          ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
          std::__shared_weak_count::__release_weak(v81);
        }
      }
      v84 = v131;
      if (v131)
      {
        v85 = (unint64_t *)&v131->__shared_owners_;
        do
          v86 = __ldaxr(v85);
        while (__stlxr(v86 - 1, v85));
        if (!v86)
        {
          ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
          std::__shared_weak_count::__release_weak(v84);
        }
      }
      v87 = *(void **)(a1 + 296);
      v88 = v152[18];
      pack_mps_vector((uint64_t)&v146);
      v89 = (void *)objc_claimAutoreleasedReturnValue();
      pack_mps_vector((uint64_t)&v148);
      v90 = (void *)objc_claimAutoreleasedReturnValue();
      pack_mps_vector((uint64_t)&v138);
      v91 = (void *)objc_claimAutoreleasedReturnValue();
      pack_mps_vector((uint64_t)&v136);
      v92 = (void *)objc_claimAutoreleasedReturnValue();
      pack_mps_vector((uint64_t)&v140);
      v93 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v87, "encodeToCommandBuffer:inputGradientVector:inputValuesVector:inputMomentumVector:inputVelocityVector:resultValuesVector:", v88, v89, v90, v91, v92, v93);

      v94 = v137;
      if (v137)
      {
        v95 = (unint64_t *)&v137->__shared_owners_;
        do
          v96 = __ldaxr(v95);
        while (__stlxr(v96 - 1, v95));
        if (!v96)
        {
          ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
          std::__shared_weak_count::__release_weak(v94);
        }
      }
      v97 = v139;
      if (v139)
      {
        v98 = (unint64_t *)&v139->__shared_owners_;
        do
          v99 = __ldaxr(v98);
        while (__stlxr(v99 - 1, v98));
        if (!v99)
        {
          ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
          std::__shared_weak_count::__release_weak(v97);
        }
      }
      v100 = v141;
      if (v141)
      {
        v101 = (unint64_t *)&v141->__shared_owners_;
        do
          v102 = __ldaxr(v101);
        while (__stlxr(v102 - 1, v101));
        if (!v102)
        {
          ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
          std::__shared_weak_count::__release_weak(v100);
        }
      }
      v103 = v143;
      if (v143)
      {
        v104 = (unint64_t *)&v143->__shared_owners_;
        do
          v105 = __ldaxr(v104);
        while (__stlxr(v105 - 1, v104));
        if (!v105)
        {
          ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
          std::__shared_weak_count::__release_weak(v103);
        }
      }
      v106 = v145;
      if (v145)
      {
        v107 = (unint64_t *)&v145->__shared_owners_;
        do
          v108 = __ldaxr(v107);
        while (__stlxr(v108 - 1, v107));
        if (!v108)
        {
          ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
          std::__shared_weak_count::__release_weak(v106);
        }
      }
      v109 = v147;
      if (v147)
      {
        v110 = (unint64_t *)&v147->__shared_owners_;
        do
          v111 = __ldaxr(v110);
        while (__stlxr(v111 - 1, v110));
        if (!v111)
        {
          ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
          std::__shared_weak_count::__release_weak(v109);
        }
      }
      v112 = v149;
      if (v149)
      {
        v113 = (unint64_t *)&v149->__shared_owners_;
        do
          v114 = __ldaxr(v113);
        while (__stlxr(v114 - 1, v113));
        if (!v114)
        {
          ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
          std::__shared_weak_count::__release_weak(v112);
        }
      }
      if (++v24 >= (unint64_t)*(int *)(a1 + 292))
      {
        v18 = (std::__shared_weak_count *)*((_QWORD *)&v150 + 1);
        break;
      }
    }
  }
  if (v18)
  {
    v115 = (unint64_t *)&v18->__shared_owners_;
    do
      v116 = __ldaxr(v115);
    while (__stlxr(v116 - 1, v115));
    if (!v116)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v117 = (std::__shared_weak_count *)*((_QWORD *)&v151 + 1);
  if (*((_QWORD *)&v151 + 1))
  {
    v118 = (unint64_t *)(*((_QWORD *)&v151 + 1) + 8);
    do
      v119 = __ldaxr(v118);
    while (__stlxr(v119 - 1, v118));
    if (!v119)
    {
      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
      std::__shared_weak_count::__release_weak(v117);
    }
  }
  v120 = v153;
  if (v153)
  {
    v121 = (unint64_t *)&v153->__shared_owners_;
    do
      v122 = __ldaxr(v121);
    while (__stlxr(v122 - 1, v121));
    if (!v122)
    {
      ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
      std::__shared_weak_count::__release_weak(v120);
    }
  }
}

void sub_191469798(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1 - 160);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1 - 144);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1 - 120);
  _Unwind_Resume(a1);
}

void Espresso::MPSBuffersEngine::adam_kernel::blob_options(Espresso::MPSBuffersEngine::adam_kernel *this@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  const void *v4;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 v17;
  _QWORD *v18;
  std::__shared_weak_count *v19;

  *a3 = 0;
  a3[1] = 0;
  v4 = (const void *)*((_QWORD *)this + 1);
  if (v4)
  {
    if (v7)
    {
      v8 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
      v18 = v7;
      v19 = v8;
      if (v8)
      {
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldxr(p_shared_owners);
        while (__stxr(v10 + 1, p_shared_owners));
      }
      if (a2)
      {
        v11 = operator new(0x70uLL);
        v11[1] = 0;
        v11[2] = 0;
        *v11 = &off_1E2DBE228;
        *((_OWORD *)v11 + 4) = 0u;
        *((_OWORD *)v11 + 5) = 0u;
        *((_OWORD *)v11 + 2) = 0u;
        *((_OWORD *)v11 + 3) = 0u;
        v11[3] = &off_1E2D9B4D8;
        *((_DWORD *)v11 + 12) = 1065353216;
        v11[7] = 0x1FFFFFFFFLL;
        v11[12] = 0;
        v11[13] = 0;
        v11[8] = 0;
        v11[9] = 0;
        *((_BYTE *)v11 + 88) = 0;
        v11[10] = 0;
        *(_QWORD *)&v17 = v11 + 3;
        *((_QWORD *)&v17 + 1) = v11;
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)a3, &v17);
        v12 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
        if (*((_QWORD *)&v17 + 1))
        {
          v13 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 - 1, v13));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(*a3 + 72), v18[28], v18[29]);
        v8 = v19;
      }
      if (v8)
      {
        v15 = (unint64_t *)&v8->__shared_owners_;
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
  }
}

void sub_1914699F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v3);
  _Unwind_Resume(a1);
}

const char *Espresso::generic_adam_kernel::kernel_type_str(Espresso::generic_adam_kernel *this)
{
  return "adam";
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::adam_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

void Espresso::MPSBuffersEngine::dev_op_kernel::~dev_op_kernel(id *this)
{
  *this = &off_1E2D70F18;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 56));

  Espresso::generic_dev_op_kernel::~generic_dev_op_kernel(this);
}

{
  *this = &off_1E2D70F18;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 56));

  Espresso::generic_dev_op_kernel::~generic_dev_op_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::MPSBuffersEngine::dev_op_kernel::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  Espresso::batch_metal *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  id *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *v21;
  void *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  id *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  void *v34;
  void *v35;
  unint64_t *v36;
  unint64_t v37;
  id v38;
  id *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  void *v44;
  unint64_t *v45;
  unint64_t v46;
  void *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  _QWORD v54[6];
  std::__shared_weak_count *v55;
  id *v56;
  std::__shared_weak_count *v57;
  Espresso::batch_metal *v58;
  std::__shared_weak_count *v59;

  if (!*(_QWORD *)(a1 + 440))
  {
    (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)a1 + 80))(a1, a3, a4);
    if (!*(_QWORD *)(a1 + 440))
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("Expected non-nill executable in dev_op kernel.");
  }
  if (*(_QWORD *)a2
  {
    v9 = *(std::__shared_weak_count **)(a2 + 8);
    v58 = v8;
    v59 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
  }
  else
  {
    v58 = 0;
    v59 = 0;
  }
  if (!*(_QWORD *)(a1 + 424))
  {
    v12 = objc_opt_new();
    v13 = *(void **)(a1 + 424);
    *(_QWORD *)(a1 + 424) = v12;

    v14 = *a4;
    if (a4[1] != *a4)
    {
      v15 = 0;
      do
      {
        v16 = v14 + 16 * v15;
        v56 = v17;
        v18 = *(std::__shared_weak_count **)(v16 + 8);
        v57 = v18;
        if (v18)
        {
          v19 = (unint64_t *)&v18->__shared_owners_;
          do
            v20 = __ldxr(v19);
          while (__stxr(v20 + 1, v19));
        }
        objc_msgSend(v17[25], "ndArrayWithCommandBuffer:descriptor:aliasing:", *((_QWORD *)v58 + 18), v17[28], 1);
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        v22 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CC7660]), "initWithMPSNDArray:", v21);
        objc_msgSend(*(id *)(a1 + 424), "addObject:", v22);

        if (v18)
        {
          v23 = (unint64_t *)&v18->__shared_owners_;
          do
            v24 = __ldaxr(v23);
          while (__stlxr(v24 - 1, v23));
          if (!v24)
          {
            ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
            std::__shared_weak_count::__release_weak(v18);
          }
        }
        ++v15;
        v14 = *a4;
      }
      while (v15 < (a4[1] - *a4) >> 4);
    }
  }
  if (!*(_QWORD *)(a1 + 432))
  {
    v25 = objc_opt_new();
    v26 = *(void **)(a1 + 432);
    *(_QWORD *)(a1 + 432) = v25;

    v27 = *a3;
    if (a3[1] != *a3)
    {
      v28 = 0;
      do
      {
        v29 = v27 + 16 * v28;
        v56 = v30;
        v31 = *(std::__shared_weak_count **)(v29 + 8);
        v57 = v31;
        if (v31)
        {
          v32 = (unint64_t *)&v31->__shared_owners_;
          do
            v33 = __ldxr(v32);
          while (__stxr(v33 + 1, v32));
        }
        objc_msgSend(v30[25], "ndArrayWithCommandBuffer:descriptor:aliasing:", *((_QWORD *)v58 + 18), v30[28], 1);
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        v35 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CC7660]), "initWithMPSNDArray:", v34);
        objc_msgSend(*(id *)(a1 + 432), "addObject:", v35);

        if (v31)
        {
          v36 = (unint64_t *)&v31->__shared_owners_;
          do
            v37 = __ldaxr(v36);
          while (__stlxr(v37 - 1, v36));
          if (!v37)
          {
            ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
            std::__shared_weak_count::__release_weak(v31);
          }
        }
        ++v28;
        v27 = *a3;
      }
      while (v28 < (a3[1] - *a3) >> 4);
    }
  }
  Espresso::batch_metal::recreate_command_buffer(v58);
  v38 = *((id *)v58 + 23);
  if (!v38)
  {
    v40 = *(std::__shared_weak_count **)(a1 + 16);
    if (v40)
    {
      v41 = (unint64_t *)&v40->__shared_owners_;
      do
        v42 = __ldxr(v41);
      while (__stxr(v42 + 1, v41));
      v38 = v39[24];
      do
        v43 = __ldaxr(v41);
      while (__stlxr(v43 - 1, v41));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
    else
    {
      v38 = v39[24];
    }
    if (!v38)
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("No command queue found in dev_op");
  }
  v44 = (void *)objc_opt_new();
  v54[0] = MEMORY[0x1E0C809B0];
  v54[1] = 3321888768;
  v54[2] = ___ZN8Espresso16MPSBuffersEngine13dev_op_kernel8__launchERKNSt3__110shared_ptrINS_14abstract_batchEEERNS_10layer_dataES9__block_invoke;
  v54[3] = &__block_descriptor_56_ea8_40c53_ZTSNSt3__110shared_ptrIN8Espresso9MPSEngine5batchEEE_e29_v24__0__NSArray_8__NSError_16l;
  v54[4] = a1;
  v54[5] = v58;
  v55 = v59;
  if (v59)
  {
    v45 = (unint64_t *)&v59->__shared_owners_;
    do
      v46 = __ldxr(v45);
    while (__stxr(v46 + 1, v45));
  }
  v47 = (void *)MEMORY[0x19401D648](v54);
  objc_msgSend(v44, "setScheduledHandler:", v47);
  objc_msgSend(*(id *)(a1 + 440), "runAsyncWithMTLCommandQueue:inputsArray:resultsArray:executionDescriptor:", v38, *(_QWORD *)(a1 + 424), *(_QWORD *)(a1 + 432), v44);

  v48 = v55;
  if (v55)
  {
    v49 = (unint64_t *)&v55->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }

  v51 = v59;
  if (v59)
  {
    v52 = (unint64_t *)&v59->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
}

void sub_191469F94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void Espresso::MPSBuffersEngine::dev_op_kernel::blob_options(Espresso::MPSBuffersEngine::dev_op_kernel *this@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  const void *v4;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 v17;
  _QWORD *v18;
  std::__shared_weak_count *v19;

  *a3 = 0;
  a3[1] = 0;
  v4 = (const void *)*((_QWORD *)this + 1);
  if (v4)
  {
    if (v7)
    {
      v8 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
      v18 = v7;
      v19 = v8;
      if (v8)
      {
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldxr(p_shared_owners);
        while (__stxr(v10 + 1, p_shared_owners));
      }
      if (a2)
      {
        v11 = operator new(0x70uLL);
        v11[1] = 0;
        v11[2] = 0;
        *v11 = &off_1E2DBE228;
        *((_OWORD *)v11 + 4) = 0u;
        *((_OWORD *)v11 + 5) = 0u;
        *((_OWORD *)v11 + 2) = 0u;
        *((_OWORD *)v11 + 3) = 0u;
        v11[3] = &off_1E2D9B4D8;
        *((_DWORD *)v11 + 12) = 1065353216;
        v11[7] = 0x1FFFFFFFFLL;
        v11[12] = 0;
        v11[13] = 0;
        v11[8] = 0;
        v11[9] = 0;
        *((_BYTE *)v11 + 88) = 0;
        v11[10] = 0;
        *(_QWORD *)&v17 = v11 + 3;
        *((_QWORD *)&v17 + 1) = v11;
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)a3, &v17);
        v12 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
        if (*((_QWORD *)&v17 + 1))
        {
          v13 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 - 1, v13));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(*a3 + 72), v18[28], v18[29]);
        v8 = v19;
      }
      if (v8)
      {
        v15 = (unint64_t *)&v8->__shared_owners_;
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
  }
}

void sub_19146A19C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v3);
  _Unwind_Resume(a1);
}

void Espresso::MPSBuffersEngine::dev_op_kernel::on_resized(id *this, Espresso::layer_data *a2, Espresso::layer_data *a3)
{
  id v4;
  _QWORD *v5;
  void *v6;
  Espresso *v7;
  const char *v8;
  NSObject *v9;
  MIL::MILContext *v10;
  MIL::ParserOptions *v11;
  uint64_t v12;
  Espresso *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  void *v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  id v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  void *__p[2];
  char v31;
  _BYTE buf[24];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v4 = objc_alloc(MEMORY[0x1E0CB3940]);
  v5 = this + 43;
  if (*((char *)this + 367) < 0)
    v5 = (_QWORD *)*v5;
  v6 = (void *)objc_msgSend(v4, "initWithCString:encoding:", v5, 4);
  objc_msgSend(this[52], "stringByAppendingPathComponent:", v6);
  v7 = (Espresso *)objc_claimAutoreleasedReturnValue();
  Espresso::espresso_os_log_subsystem(v7, v8);
  v9 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = -[Espresso UTF8String](objc_retainAutorelease(v7), "UTF8String");
    _os_log_debug_impl(&dword_190DAF000, v9, OS_LOG_TYPE_DEBUG, "mpsbuffers dev_op: attempting to access mil program at %s", buf, 0xCu);
  }

  MIL::MILContext::Make(v10);
  std::shared_ptr<MIL::MILContext>::operator=[abi:ne180100]<MIL::MILContext,std::default_delete<MIL::MILContext>,void>(this + 56, (uint64_t *)buf);
  v11 = *(MIL::ParserOptions **)buf;
  *(_QWORD *)buf = 0;
  if (v11)
    v11 = (MIL::ParserOptions *)(*(uint64_t (**)(MIL::ParserOptions *))(*(_QWORD *)v11 + 8))(v11);
  MIL::ParserOptions::Make(v11);
  v12 = *(_QWORD *)buf;
  v13 = objc_retainAutorelease(v7);
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)-[Espresso UTF8String](v13, "UTF8String"));
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v12 + 32))(v12, __p, 1);
  if (v31 < 0)
    operator delete(__p[0]);
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)buf + 64))(*(_QWORD *)buf, 1);
  v14 = (std::__shared_weak_count *)this[57];
  v27 = this[56];
  v28 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }
  MIL::Text::ParseProgramFromFile();
  if (v28)
  {
    v17 = (unint64_t *)&v28->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  if (!v29)
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Unable to load MIL program.");
  v19 = (void *)objc_opt_new();
  objc_msgSend(v19, "setCompilerOptions:", objc_msgSend(v19, "compilerOptions", v27) | 0x10);
  v20 = (void *)objc_opt_new();
  objc_msgSend(v19, "setCompilationDescriptor:", v20);

  objc_msgSend(v19, "compilationDescriptor");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v21, "setOptimizationLevel:", 0);

  v22 = objc_alloc(MEMORY[0x1E0CC7628]);
  v23 = (void *)objc_opt_new();
  v24 = objc_msgSend(v22, "initWithMILProgram:executableDescriptor:", v29, v23);
  v25 = this[55];
  this[55] = (id)v24;

  (*(void (**)())(*(_QWORD *)v29 + 8))();
  v26 = *(_QWORD *)buf;
  *(_QWORD *)buf = 0;
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);

}

void sub_19146A4AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18)
{
  void *v18;
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

BOOL Espresso::MPSBuffersEngine::dev_op_kernel::is_valid_for_engine(uint64_t a1)
{
  if (*(char *)(a1 + 367) < 0)
  {
    if (*(_QWORD *)(a1 + 352))
      return *(_DWORD *)(a1 + 280) == 50002;
  }
  else if (*(_BYTE *)(a1 + 367))
  {
    return *(_DWORD *)(a1 + 280) == 50002;
  }
  return 0;
}

_QWORD *std::shared_ptr<MIL::MILContext>::operator=[abi:ne180100]<MIL::MILContext,std::default_delete<MIL::MILContext>,void>(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = *a2;
  if (*a2)
  {
    v5 = (_QWORD *)operator new();
    v6 = *a2;
    *v5 = &unk_1E2DC2E80;
    v5[1] = 0;
    v5[2] = 0;
    v5[3] = v6;
  }
  else
  {
    v5 = 0;
  }
  *a2 = 0;
  v7 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v5;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

void ___ZN8Espresso16MPSBuffersEngine13dev_op_kernel8__launchERKNSt3__110shared_ptrINS_14abstract_batchEEERNS_10layer_dataES9__block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  unint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;

  v10 = a2;
  v5 = a3;
  v6 = 0;
  v7 = *(_QWORD *)(a1 + 32);
  while (v6 < objc_msgSend(*(id *)(v7 + 432), "count"))
  {
    objc_msgSend(*(id *)(v7 + 432), "objectAtIndex:", v6);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "mpsndarray");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "synchronizeOnCommandBuffer:", *(_QWORD *)(*(_QWORD *)(a1 + 40) + 144));

    ++v6;
  }

}

void sub_19146A700(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_40c53_ZTSNSt3__110shared_ptrIN8Espresso9MPSEngine5batchEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_ea8_40c53_ZTSNSt3__110shared_ptrIN8Espresso9MPSEngine5batchEEE(uint64_t a1)
{
  return std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 40);
}

void sub_19146A7D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  Espresso::zephyr::function_t::~function_t((Espresso::zephyr::function_t *)&a9);
  _Unwind_Resume(a1);
}

uint64_t Espresso::zephyr_passes::merge_tf_normalization(Espresso::zephyr_passes *this, Espresso::zephyr::function_t *a2)
{
  char *v2;
  char *v3;
  char v4;
  uint64_t v5;
  char matched;
  _QWORD *v7;
  uint64_t v8;
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = (char *)this + 64;
  v3 = (char *)*((_QWORD *)this + 9);
  if (v3 != (char *)this + 64)
  {
    v4 = 0;
    while (1)
    {
      v5 = *((_QWORD *)v3 + 2);
      v10[0] = &off_1E2DB0AB0;
      v10[1] = v3 + 16;
      v11 = v10;
      matched = Espresso::zephyr::ordered_block_t::match_transform(v5, (uint64_t)v10);
      v7 = v11;
      if (v11 == v10)
        break;
      if (v11)
      {
        v8 = 5;
LABEL_7:
        (*(void (**)(void))(*v7 + 8 * v8))();
      }
      v4 |= matched;
      v3 = (char *)*((_QWORD *)v3 + 1);
      if (v3 == v2)
        return v4 & 1;
    }
    v7 = v10;
    v8 = 4;
    goto LABEL_7;
  }
  v4 = 0;
  return v4 & 1;
}

void sub_19146A8C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void std::__function::__func<Espresso::zephyr_passes::merge_tf_normalization(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::merge_tf_normalization(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<Espresso::zephyr_passes::merge_tf_normalization(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::merge_tf_normalization(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DB0AB0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<Espresso::zephyr_passes::merge_tf_normalization(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::merge_tf_normalization(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DB0AB0;
  a2[1] = v2;
  return result;
}

BOOL std::__function::__func<Espresso::zephyr_passes::merge_tf_normalization(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::merge_tf_normalization(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::operator()(uint64_t a1, uint64_t *a2)
{
  Espresso::zephyr::node_t *v3;
  Espresso *matched;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Espresso::zephyr::node_t *v14;
  const char *v15;
  uint64_t v16;
  Espresso *constant;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  Espresso::zephyr::node_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  Espresso::zephyr::node_t *v28;
  Espresso *v29;
  const char *v30;
  uint64_t *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  NSObject *v36;
  _BOOL8 v37;
  Espresso::zephyr::value_t **v38;
  char **v39;
  Espresso::zephyr::value_t **v40;
  uint64_t v41;
  Espresso::zephyr::value_t *v42;
  uint64_t v43;
  Espresso::zephyr::value_t **v44;
  uint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  unint64_t v48;
  char *v49;
  char *v50;
  void *v51;
  uint64_t v52;
  Espresso *v53;
  const char *v54;
  uint64_t v55;
  char *v56;
  Espresso *v57;
  const char *v58;
  NSObject *v59;
  uint64_t **i;
  NSObject *v61;
  std::__shared_weak_count *v62;
  unint64_t *p_shared_owners;
  unint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  uint64_t *v70;
  _QWORD *v71;
  uint64_t v72;
  _QWORD v73[2];
  uint64_t **v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  _BYTE buf[32];
  uint64_t v79;
  Espresso::zephyr::node_t *v80;
  Espresso::zephyr::node_t *v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;

  v86 = *MEMORY[0x1E0C80C00];
  v3 = (Espresso::zephyr::node_t *)*a2;
  matched = (Espresso *)Espresso::zephyr::match_simple_eltwise_binop(*a2, 0);
  if (!matched)
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(0, v5);
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_compl"
                             "ex_subgraph_matching.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 148;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = "match_simple_eltwise_binop(add1, ELEMENTWISE_OPERATION_ADD)";
        _os_log_impl(&dword_190DAF000, v9, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_20;
    }
    return 0;
  }
  v6 = *((_QWORD *)v3 + 15);
  v7 = *((_QWORD *)v3 + 16);
  while (1)
  {
    if (v6 == v7)
      goto LABEL_17;
    if (*(_QWORD *)v6)
    {
      v8 = *(_QWORD *)(*(_QWORD *)v6 + 80);
      matched = (Espresso *)Espresso::zephyr::match_simple_eltwise_binop(v8, 0x21u);
      if (matched)
        break;
    }
    v6 += 8;
  }
  if (!v8)
  {
LABEL_17:
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(matched, v5);
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_compl"
                             "ex_subgraph_matching.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 153;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = "sub";
        _os_log_impl(&dword_190DAF000, v9, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
LABEL_20:

      return 0;
    }
    return 0;
  }
  v10 = *((_QWORD *)v3 + 15);
  v11 = *((_QWORD *)v3 + 16);
  while (1)
  {
    if (v10 == v11)
      goto LABEL_30;
    if (*(_QWORD *)v10)
    {
      v12 = *(_QWORD *)(*(_QWORD *)v10 + 80);
      matched = (Espresso *)Espresso::zephyr::match_simple_eltwise_binop(v12, 1u);
      if (matched)
        break;
    }
    v10 += 8;
  }
  if (!v12)
  {
LABEL_30:
    if (!Espresso::zephyr::match_verbose)
      return 0;
    Espresso::espresso_os_log_subsystem(matched, v5);
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 158;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "mul1";
      _os_log_impl(&dword_190DAF000, v9, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_20;
  }
  v14 = *(Espresso::zephyr::node_t **)(**(_QWORD **)(v8 + 120) + 80);
  if (!Espresso::zephyr::cast_kernel<Espresso::generic_load_constant_kernel>((uint64_t)v14))
  {
    if (!Espresso::zephyr::match_verbose)
      return 0;
    Espresso::espresso_os_log_subsystem(0, v15);
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 161;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "zephyr::cast_kernel<generic_load_constant_kernel>(beta_read)";
      _os_log_impl(&dword_190DAF000, v9, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_20;
  }
  v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 120) + 8) + 80);
  constant = (Espresso *)Espresso::zephyr::match_simple_eltwise_binop(v16, 1u);
  if (!constant)
  {
    if (!Espresso::zephyr::match_verbose)
      return 0;
    Espresso::espresso_os_log_subsystem(0, v18);
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 164;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "match_simple_eltwise_binop(mul2, ELEMENTWISE_OPERATION_MUL)";
      _os_log_impl(&dword_190DAF000, v9, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_20;
  }
  v19 = *(_QWORD *)(v12 + 120);
  v20 = *(_QWORD *)(v12 + 128);
  while (1)
  {
    if (v19 == v20)
      goto LABEL_49;
    if (*(_QWORD *)v19)
    {
      v21 = *(_QWORD *)(*(_QWORD *)v19 + 80);
      constant = (Espresso *)Espresso::zephyr::match_simple_eltwise_binop(v21, 1u);
      if (constant)
        break;
    }
    v19 += 8;
  }
  if (!v21)
  {
LABEL_49:
    if (!Espresso::zephyr::match_verbose)
      return 0;
    Espresso::espresso_os_log_subsystem(constant, v18);
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 170;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "mul";
      _os_log_impl(&dword_190DAF000, v9, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_20;
  }
  v22 = *(_QWORD *)(v16 + 120);
  v23 = *(_QWORD *)(v16 + 128);
  while (1)
  {
    if (v22 == v23)
    {
      if (!Espresso::zephyr::match_verbose)
        return 0;
      Espresso::espresso_os_log_subsystem(constant, v18);
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_compl"
                             "ex_subgraph_matching.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 177;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = "mul_from_mul2";
        _os_log_impl(&dword_190DAF000, v9, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_20;
    }
    if (*(_QWORD *)v22)
    {
      if (v21 == *(_QWORD *)(*(_QWORD *)v22 + 80))
      {
        constant = (Espresso *)Espresso::zephyr::match_simple_eltwise_binop(v21, 1u);
        if (constant)
          break;
      }
    }
    v22 += 8;
  }
  v24 = (Espresso::zephyr::node_t *)v21;
  v26 = *(_QWORD *)(v21 + 120);
  v25 = *(_QWORD *)(v21 + 128);
  if (v26 == v25)
    goto LABEL_62;
  v27 = v16;
  while (1)
  {
    if (*(_QWORD *)v26)
    {
      v28 = *(Espresso::zephyr::node_t **)(*(_QWORD *)v26 + 80);
      constant = (Espresso *)Espresso::zephyr::cast_kernel<Espresso::generic_load_constant_kernel>((uint64_t)v28);
      if (constant)
        break;
    }
    v26 += 8;
    if (v26 == v25)
      goto LABEL_62;
  }
  if (!v28)
  {
LABEL_62:
    if (!Espresso::zephyr::match_verbose)
      return 0;
    Espresso::espresso_os_log_subsystem(constant, v18);
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 182;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "gamma_read";
      _os_log_impl(&dword_190DAF000, v9, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_20;
  }
  v76 = 0u;
  v77 = 0u;
  v75 = 0u;
  v29 = (Espresso *)Espresso::zephyr_passes::normalization_factors_matcher::match((Espresso::zephyr_passes::normalization_factors_matcher *)&v75, v24);
  if ((v29 & 1) == 0)
  {
    if (!Espresso::zephyr::match_verbose)
      return 0;
    Espresso::espresso_os_log_subsystem(v29, v30);
    v36 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 186;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "f.match(mul)";
      _os_log_impl(&dword_190DAF000, v36, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_81;
  }
  v31 = *(uint64_t **)(v77 + 96);
  if (*(uint64_t **)(v77 + 104) == v31)
    goto LABEL_129;
  v32 = *(_QWORD **)(v27 + 120);
  v33 = *(_QWORD *)(v27 + 128) - (_QWORD)v32;
  if (!v33)
  {
LABEL_74:
    if (!Espresso::zephyr::match_verbose)
      return 0;
    Espresso::espresso_os_log_subsystem(v29, v30);
    v36 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 192;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "mul2->input_index(v_mean).first";
      _os_log_impl(&dword_190DAF000, v36, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
LABEL_81:

    return 0;
  }
  v34 = *v31;
  v35 = v33 >> 3;
  if (v35 <= 1)
    v35 = 1;
  while (*v32 != v34)
  {
    ++v32;
    if (!--v35)
      goto LABEL_74;
  }
  v38 = *(Espresso::zephyr::value_t ***)(v77 + 120);
  if (*(Espresso::zephyr::value_t ***)(v77 + 128) == v38
    || (v39 = (char **)*((_QWORD *)v3 + 12), *((char ***)v3 + 13) == v39))
  {
LABEL_129:
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  }
  v40 = *(Espresso::zephyr::value_t ***)(*((_QWORD *)&v77 + 1) + 120);
  v41 = *(_QWORD *)(*((_QWORD *)&v77 + 1) + 128) - (_QWORD)v40;
  if (!v41)
    return 0;
  v42 = *v38;
  v67 = *v39;
  v43 = v41 >> 3;
  if ((unint64_t)(v41 >> 3) <= 1)
    v43 = 1;
  while (*v40 != v42)
  {
    ++v40;
    if (!--v43)
      return 0;
  }
  v44 = *(Espresso::zephyr::value_t ***)(v12 + 120);
  v45 = *(_QWORD *)(v12 + 128) - (_QWORD)v44;
  if (!v45)
    return 0;
  v46 = v45 >> 3;
  if (v46 <= 1)
    v46 = 1;
  while (*v44 != v42)
  {
    v37 = 0;
    ++v44;
    if (!--v46)
      return v37;
  }
  *(_QWORD *)buf = v3;
  *(_QWORD *)&buf[8] = v8;
  *(_QWORD *)&buf[16] = v12;
  *(_QWORD *)&buf[24] = v14;
  v79 = v27;
  v80 = v24;
  v66 = *((_QWORD *)&v75 + 1);
  v82 = v75;
  v83 = v76;
  v81 = v28;
  v84 = *((_QWORD *)&v77 + 1);
  v85 = v77;
  std::unordered_set<Espresso::zephyr::node_t *>::unordered_set((uint64_t)v73, (unint64_t *)buf, 13);
  Espresso::zephyr::find_values_used_externally<std::unordered_set<Espresso::zephyr::node_t *>>(&v70, v73);
  if (v72 != 1 || (v47 = v71) == 0)
  {
LABEL_110:
    v37 = 0;
    goto LABEL_111;
  }
  while (2)
  {
    if (v67)
      v48 = *(_QWORD *)v67;
    else
      v48 = 0;
    v49 = (char *)v47[4];
    if (v49)
    {
      v49 = *(char **)v49;
      if (v48 < (unint64_t)v49)
      {
LABEL_109:
        v47 = (_QWORD *)*v47;
        if (!v47)
          goto LABEL_110;
        continue;
      }
    }
    break;
  }
  v50 = v67;
  if (v67)
    v50 = *(char **)v67;
  if (v49 < v50)
  {
    ++v47;
    goto LABEL_109;
  }
  v51 = Espresso::zephyr::cast_kernel<Espresso::generic_elementwise_kernel>(v66);
  v52 = (*(uint64_t (**)(void *))(*(_QWORD *)v51 + 320))(v51);
  Espresso::zephyr_passes::create_instancenorm_kenel((Espresso::zephyr_passes *)&v68, v28, v14, *(float *)(v52 + 8));
  v55 = v68;
  v37 = v68 != 0;
  if (v68)
  {
    v56 = Espresso::zephyr::function_t::new_detached_node(*(_QWORD *)(v66 + 24), v66 + 144);
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(*((_QWORD *)v56 + 1) + 8), v55, (uint64_t)v69);
    Espresso::zephyr::node_t::add_input((Espresso::zephyr::node_t *)v56, v42);
    Espresso::zephyr::node_t::add_output((Espresso::zephyr::node_t *)v56, (Espresso::zephyr::value_t *)v67);
    Espresso::espresso_os_log_subsystem(v57, v58);
    v59 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v59, OS_LOG_TYPE_DEBUG))
    {
      v65 = v67 + 32;
      if (v67[55] < 0)
        v65 = (_QWORD *)*v65;
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v65;
      _os_log_debug_impl(&dword_190DAF000, v59, OS_LOG_TYPE_DEBUG, "zephyr_passes::merge_tf_normalization: at %s", buf, 0xCu);
    }

    Espresso::zephyr::ordered_block_t::insert_node_after(**(Espresso::zephyr::ordered_block_t ***)(a1 + 8), (Espresso::zephyr::node_t *)v56, v3);
    for (i = v74; i; i = (uint64_t **)*i)
      Espresso::zephyr::node_t::remove_from_graphs((Espresso::zephyr::node_t *)i[2]);
  }
  else if (Espresso::zephyr::match_verbose)
  {
    Espresso::espresso_os_log_subsystem(v53, v54);
    v61 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v61, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 224;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "instancenorm_kernel";
      _os_log_impl(&dword_190DAF000, v61, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }

  }
  v62 = v69;
  if (v69)
  {
    p_shared_owners = (unint64_t *)&v69->__shared_owners_;
    do
      v64 = __ldaxr(p_shared_owners);
    while (__stlxr(v64 - 1, p_shared_owners));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
LABEL_111:
  std::__tree<int>::destroy(v71);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)v73);
  return v37;
}

void sub_19146B464(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _QWORD *a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  std::__tree<int>::destroy(a9);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<Espresso::zephyr_passes::merge_tf_normalization(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::merge_tf_normalization(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN8Espresso13zephyr_passes22merge_tf_normalizationERNS_6zephyr10function_tEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<Espresso::zephyr_passes::merge_tf_normalization(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::merge_tf_normalization(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::target_type()
{
}

void *Espresso::zephyr::cast_kernel<Espresso::generic_load_constant_kernel>(uint64_t a1)
{
  uint64_t v1;
  const void *v2;
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;

  if (!a1)
    return 0;
  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(const void **)(v1 + 8);
  if (!v2)
    return 0;
  if (v3)
  {
    v4 = *(std::__shared_weak_count **)(v1 + 16);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  return v3;
}

uint64_t Espresso::zephyr_passes::normalization_factors_matcher::match(Espresso::zephyr_passes::normalization_factors_matcher *this, Espresso::zephyr::node_t *a2)
{
  float *matched;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v32;
  const char *v33;
  __int16 v34;
  int v35;
  __int16 v36;
  const char *v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  matched = (float *)Espresso::zephyr::match_simple_eltwise_binop((uint64_t)a2, 0x66u);
  v6 = *((_QWORD *)a2 + 15);
  v7 = *((_QWORD *)a2 + 16);
  if (matched)
  {
    for (; v6 != v7; v6 += 8)
    {
      if (*(_QWORD *)v6)
      {
        v8 = *(_QWORD *)(*(_QWORD *)v6 + 80);
        matched = (float *)Espresso::zephyr::match_simple_eltwise_unaryop(v8, 11);
        if (matched)
          goto LABEL_18;
      }
    }
LABEL_11:
    *(_QWORD *)this = 0;
LABEL_12:
    if (!Espresso::zephyr::match_verbose)
      return 0;
    Espresso::espresso_os_log_subsystem((Espresso *)matched, v5);
    v9 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      goto LABEL_16;
    v32 = 136315650;
    v33 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex_subgraph_matching.mm";
    v34 = 1024;
    v35 = 33;
    v36 = 2080;
    v37 = "rsqrt_or_sqrt";
    goto LABEL_15;
  }
  if (v6 == v7)
    goto LABEL_11;
  while (1)
  {
    if (*(_QWORD *)v6)
    {
      v8 = *(_QWORD *)(*(_QWORD *)v6 + 80);
      matched = (float *)Espresso::zephyr::match_simple_eltwise_unaryop(v8, 12);
      if (matched)
        break;
    }
    v6 += 8;
    if (v6 == v7)
      goto LABEL_11;
  }
LABEL_18:
  *(_QWORD *)this = v8;
  if (!v8)
    goto LABEL_12;
  v11 = *(_QWORD *)(v8 + 120);
  v12 = *(_QWORD *)(v8 + 128);
  while (1)
  {
    if (v11 == v12)
    {
      *((_QWORD *)this + 1) = 0;
LABEL_26:
      if (!Espresso::zephyr::match_verbose)
        return 0;
      Espresso::espresso_os_log_subsystem((Espresso *)matched, v5);
      v9 = objc_claimAutoreleasedReturnValue();
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
        goto LABEL_16;
      v32 = 136315650;
      v33 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex_subgraph_matching.mm";
      v34 = 1024;
      v35 = 41;
      v36 = 2080;
      v37 = "add";
      goto LABEL_15;
    }
    if (*(_QWORD *)v11)
    {
      v13 = *(_QWORD *)(*(_QWORD *)v11 + 80);
      matched = (float *)Espresso::zephyr::match_simple_eltwise_unaryop(v13, 2);
      if (matched)
        break;
      matched = (float *)Espresso::zephyr::match_simple_eltwise_unaryop(v13, 0);
      if (matched)
        break;
    }
    v11 += 8;
  }
  *((_QWORD *)this + 1) = v13;
  if (!v13)
    goto LABEL_26;
  v14 = *(_QWORD *)(v13 + 120);
  v15 = *(_QWORD *)(v13 + 128);
  while (1)
  {
    if (v14 == v15)
    {
      *((_QWORD *)this + 2) = 0;
      if (!Espresso::zephyr::match_verbose)
        return 0;
      Espresso::espresso_os_log_subsystem((Espresso *)matched, v5);
      v9 = objc_claimAutoreleasedReturnValue();
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
        goto LABEL_16;
      v32 = 136315650;
      v33 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex_subgraph_matching.mm";
      v34 = 1024;
      v35 = 59;
      v36 = 2080;
      v37 = "variance";
      goto LABEL_15;
    }
    if (*(_QWORD *)v14)
    {
      v16 = *(_QWORD *)(*(_QWORD *)v14 + 80);
      matched = (float *)Espresso::zephyr::cast_kernel<Espresso::generic_reduce_kernel>(v16);
      if (matched)
      {
        if (*(_QWORD *)(v16 + 128) - *(_QWORD *)(v16 + 120) == 8)
        {
          matched = (float *)(*(uint64_t (**)(float *))(*(_QWORD *)matched + 320))(matched);
          if (*(_DWORD *)matched == 1
            && *((_DWORD *)matched + 2) == 1
            && (*((_DWORD *)matched + 9) == -1 || ((_BYTE)matched[10] & 1) == 0))
          {
            break;
          }
        }
      }
    }
    v14 += 8;
  }
  *((_QWORD *)this + 2) = v16;
  v19 = *(_QWORD *)(v16 + 120);
  v20 = *(_QWORD *)(v16 + 128);
  if (v19 == v20)
  {
LABEL_57:
    *((_QWORD *)this + 3) = 0;
LABEL_58:
    if (!Espresso::zephyr::match_verbose)
      return 0;
    Espresso::espresso_os_log_subsystem((Espresso *)matched, v5);
    v9 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      goto LABEL_16;
    v32 = 136315650;
    v33 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex_subgraph_matching.mm";
    v34 = 1024;
    v35 = 73;
    v36 = 2080;
    v37 = "squared_difference";
LABEL_15:
    _os_log_impl(&dword_190DAF000, v9, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", (uint8_t *)&v32, 0x1Cu);
    goto LABEL_16;
  }
  while (1)
  {
    if (!*(_QWORD *)v19)
      goto LABEL_56;
    v21 = *(_QWORD *)(*(_QWORD *)v19 + 80);
    v22 = Espresso::zephyr::match_simple_eltwise_unaryop(v21, 13);
    if (v22)
      break;
    matched = (float *)Espresso::zephyr::match_simple_eltwise_binop(v21, 1u);
    if (matched)
    {
      v24 = *(_QWORD **)(v21 + 120);
      if (*v24 == v24[1])
      {
        *((_QWORD *)this + 3) = v21;
        goto LABEL_64;
      }
    }
LABEL_56:
    v19 += 8;
    if (v19 == v20)
      goto LABEL_57;
  }
  v23 = v22;
  matched = (float *)(*(uint64_t (**)(void *))(*(_QWORD *)v22 + 320))(v22);
  if (fabsf(matched[2] + -2.0) >= 1.0e-10)
    goto LABEL_56;
  matched = (float *)(*(uint64_t (**)(void *))(*(_QWORD *)v23 + 320))(v23);
  if (fabsf(matched[3]) >= 1.0e-10)
    goto LABEL_56;
  *((_QWORD *)this + 3) = v21;
  if (!v21)
    goto LABEL_58;
  v24 = *(_QWORD **)(v21 + 120);
LABEL_64:
  v25 = *(_QWORD **)(v21 + 128);
  while (1)
  {
    if (v24 == v25)
    {
      *((_QWORD *)this + 5) = 0;
      goto LABEL_70;
    }
    if (*v24)
    {
      v26 = *(_QWORD *)(*v24 + 80);
      matched = (float *)Espresso::zephyr::match_simple_eltwise_binop(v26, 0x21u);
      if (matched)
        break;
    }
    ++v24;
  }
  *((_QWORD *)this + 5) = v26;
  if (v26)
  {
    v27 = *(_QWORD *)(v26 + 120);
    v28 = *(_QWORD *)(v26 + 128);
    while (v27 != v28)
    {
      if (*(_QWORD *)v27)
      {
        v29 = *(_QWORD *)(*(_QWORD *)v27 + 80);
        matched = (float *)Espresso::zephyr::cast_kernel<Espresso::generic_reduce_kernel>(v29);
        if (matched)
        {
          if (*(_QWORD *)(v29 + 128) - *(_QWORD *)(v29 + 120) == 8)
          {
            matched = (float *)(*(uint64_t (**)(float *))(*(_QWORD *)matched + 320))(matched);
            if (*(_DWORD *)matched == 1
              && *((_DWORD *)matched + 2) == 1
              && (*((_DWORD *)matched + 9) == -1 || ((_BYTE)matched[10] & 1) == 0))
            {
              *((_QWORD *)this + 4) = v29;
              return 1;
            }
          }
        }
      }
      v27 += 8;
    }
    *((_QWORD *)this + 4) = 0;
    if (!Espresso::zephyr::match_verbose)
      return 0;
    Espresso::espresso_os_log_subsystem((Espresso *)matched, v5);
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      v32 = 136315650;
      v33 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex_subgraph_matching.mm";
      v34 = 1024;
      v35 = 96;
      v36 = 2080;
      v37 = "mean";
      goto LABEL_15;
    }
    goto LABEL_16;
  }
LABEL_70:
  if (!Espresso::zephyr::match_verbose)
    return 0;
  Espresso::espresso_os_log_subsystem((Espresso *)matched, v5);
  v9 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    v32 = 136315650;
    v33 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex_subgraph_matching.mm";
    v34 = 1024;
    v35 = 78;
    v36 = 2080;
    v37 = "squared_difference_sub_";
    goto LABEL_15;
  }
LABEL_16:

  return 0;
}

uint64_t std::unordered_set<Espresso::zephyr::node_t *>::unordered_set(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 8 * a3;
    do
    {
      std::__hash_table<Espresso::zephyr::node_t *,std::hash<Espresso::zephyr::node_t *>,std::equal_to<Espresso::zephyr::node_t *>,std::allocator<Espresso::zephyr::node_t *>>::__emplace_unique_key_args<Espresso::zephyr::node_t *,Espresso::zephyr::node_t * const&>(a1, *a2, *a2);
      ++a2;
      v5 -= 8;
    }
    while (v5);
  }
  return a1;
}

void sub_19146BC28(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t **Espresso::zephyr::find_values_used_externally<std::unordered_set<Espresso::zephyr::node_t *>>(uint64_t **result, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t **v4;
  uint64_t v5;
  unint64_t **v6;
  unint64_t **v7;
  unint64_t *v8;
  unint64_t *v9;
  unint64_t *v10;
  unint64_t *v11;

  result[1] = 0;
  result[2] = 0;
  *result = (uint64_t *)(result + 1);
  v2 = (_QWORD *)a2[2];
  if (v2)
  {
    v4 = result;
    do
    {
      v5 = v2[2];
      v6 = *(unint64_t ***)(v5 + 96);
      v7 = *(unint64_t ***)(v5 + 104);
      while (v6 != v7)
      {
        v8 = *v6;
        v11 = v8;
        v9 = (unint64_t *)v8[7];
        v10 = (unint64_t *)v8[8];
        while (v9 != v10)
        {
          result = (uint64_t **)std::__hash_table<Espresso::zephyr::node_t *,std::hash<Espresso::zephyr::node_t *>,std::equal_to<Espresso::zephyr::node_t *>,std::allocator<Espresso::zephyr::node_t *>>::find<Espresso::zephyr::node_t *>(a2, *v9);
          if (!result)
          {
            result = (uint64_t **)std::__tree<Espresso::zephyr::value_t *,Espresso::zephyr::ir_object_set_compare<Espresso::zephyr::value_t *>,std::allocator<Espresso::zephyr::value_t *>>::__emplace_unique_key_args<Espresso::zephyr::value_t *,Espresso::zephyr::value_t * const&>(v4, v8, (uint64_t *)&v11);
            break;
          }
          v9 += 2;
        }
        ++v6;
      }
      v2 = (_QWORD *)*v2;
    }
    while (v2);
  }
  return result;
}

void sub_19146BCF8(_Unwind_Exception *a1)
{
  _QWORD **v1;

  std::__tree<int>::destroy(*v1);
  _Unwind_Resume(a1);
}

void Espresso::zephyr_passes::create_instancenorm_kenel(Espresso::zephyr_passes *this, Espresso::zephyr::node_t *a2, Espresso::zephyr::node_t *a3, float a4)
{
  _QWORD *constant;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  void *__p[2];
  char v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  int v58;

  v56 = 0x358637BD00000000;
  v57 = 0;
  v58 = 0;
  Espresso::zephyr::make_kernel<Espresso::generic_instancenorm_1d_kernel,Espresso::zephyr::node_t,Espresso::instancenorm_1d_params_t>(&v55, *(_QWORD *)(*((_QWORD *)a2 + 1) + 8), (uint64_t)&v56);
  *((float *)&v56 + 1) = a4;
  HIDWORD(v57) = 1;
  constant = Espresso::zephyr::cast_kernel<Espresso::generic_load_constant_kernel>((uint64_t)a2);
  v9 = constant[43];
  if (!v9 || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v9 + 32))(v9))
  {
    v10 = 0;
    v53 = 0;
    v54 = 0;
    goto LABEL_4;
  }
  v16 = constant[43];
  v17 = *(_QWORD *)(v16 + 160);
  v10 = *(std::__shared_weak_count **)(v16 + 168);
  v53 = v17;
  v54 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v19 = __ldxr(p_shared_owners);
    while (__stxr(v19 + 1, p_shared_owners));
  }
  if (v17)
  {
    v20 = v55;
    if (*(_BYTE *)(*(_QWORD *)(v55 + 8) + 53))
    {
      v51 = 0;
      v52 = 0;
      std::string::basic_string[abi:ne180100]<0>(__p, "wGamma");
      v21 = 0;
      v22 = *(int *)(v17 + 8);
      do
      {
        v22 *= *(int *)(v17 + 12 + v21);
        v21 += 4;
      }
      while (v21 != 12);
      (*(void (**)(uint64_t, uint64_t *, void **, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v20 + 168))(v20, &v51, __p, *(_QWORD *)(v17 + 24), 4 * v22, 0);
      if (v50 < 0)
        operator delete(__p[0]);
      v23 = v52;
      if (v52)
      {
        v24 = (unint64_t *)&v52->__shared_owners_;
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        goto LABEL_35;
      }
    }
    else
    {
      v51 = 0;
      v52 = 0;
      std::string::basic_string[abi:ne180100]<0>(__p, "wGamma");
      v26 = 0;
      v27 = *(int *)(v17 + 8);
      do
      {
        v27 *= *(int *)(v17 + 12 + v26);
        v26 += 4;
      }
      while (v26 != 12);
      (*(void (**)(uint64_t, uint64_t *, void **, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v20 + 160))(v20, &v51, __p, *(_QWORD *)(v17 + 24), 4 * v27, 0);
      if (v50 < 0)
        operator delete(__p[0]);
      v23 = v52;
      if (v52)
      {
        v28 = (unint64_t *)&v52->__shared_owners_;
        do
          v25 = __ldaxr(v28);
        while (__stlxr(v25 - 1, v28));
LABEL_35:
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
    }
    v29 = Espresso::zephyr::cast_kernel<Espresso::generic_load_constant_kernel>((uint64_t)a3);
    v30 = v29[43];
    if (!v30 || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v30 + 32))(v30))
    {
      v51 = 0;
      v52 = 0;
      *(_QWORD *)this = 0;
      *((_QWORD *)this + 1) = 0;
      goto LABEL_40;
    }
    v31 = v29[43];
    v33 = *(_QWORD *)(v31 + 160);
    v32 = *(std::__shared_weak_count **)(v31 + 168);
    v51 = v33;
    v52 = v32;
    if (v32)
    {
      v34 = (unint64_t *)&v32->__shared_owners_;
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 1, v34));
    }
    if (!v33)
    {
LABEL_65:
      *(_QWORD *)this = 0;
      *((_QWORD *)this + 1) = 0;
      if (v32)
      {
        v45 = (unint64_t *)&v32->__shared_owners_;
        do
          v46 = __ldaxr(v45);
        while (__stlxr(v46 - 1, v45));
        if (!v46)
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
      }
LABEL_40:
      v10 = v54;
      if (!v54)
        goto LABEL_9;
      goto LABEL_5;
    }
    v36 = v55;
    if (*(_BYTE *)(*(_QWORD *)(v55 + 8) + 53))
    {
      v47 = 0;
      v48 = 0;
      std::string::basic_string[abi:ne180100]<0>(__p, "wBeta");
      v37 = 0;
      v38 = *(int *)(v33 + 8);
      do
      {
        v38 *= *(int *)(v33 + 12 + v37);
        v37 += 4;
      }
      while (v37 != 12);
      (*(void (**)(uint64_t, uint64_t *, void **, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v36 + 168))(v36, &v47, __p, *(_QWORD *)(v33 + 24), 4 * v38, 0);
      if (v50 < 0)
        operator delete(__p[0]);
      v39 = v48;
      if (!v48)
        goto LABEL_64;
      v40 = (unint64_t *)&v48->__shared_owners_;
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
    }
    else
    {
      v47 = 0;
      v48 = 0;
      std::string::basic_string[abi:ne180100]<0>(__p, "wBeta");
      v42 = 0;
      v43 = *(int *)(v33 + 8);
      do
      {
        v43 *= *(int *)(v33 + 12 + v42);
        v42 += 4;
      }
      while (v42 != 12);
      (*(void (**)(uint64_t, uint64_t *, void **, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v36 + 160))(v36, &v47, __p, *(_QWORD *)(v33 + 24), 4 * v43, 0);
      if (v50 < 0)
        operator delete(__p[0]);
      v39 = v48;
      if (!v48)
        goto LABEL_64;
      v44 = (unint64_t *)&v48->__shared_owners_;
      do
        v41 = __ldaxr(v44);
      while (__stlxr(v41 - 1, v44));
    }
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
LABEL_64:
    *(_OWORD *)this = v55;
    this = (Espresso::zephyr_passes *)&v55;
    v32 = v52;
    goto LABEL_65;
  }
LABEL_4:
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  if (!v10)
    goto LABEL_9;
LABEL_5:
  v11 = (unint64_t *)&v10->__shared_owners_;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
LABEL_9:
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v55 + 1);
  if (*((_QWORD *)&v55 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v55 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_19146C160(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22)
{
  if (a17 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  _Unwind_Resume(a1);
}

void Espresso::zephyr::make_kernel<Espresso::generic_instancenorm_1d_kernel,Espresso::zephyr::node_t,Espresso::instancenorm_1d_params_t>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  int v17;
  void *__p[2];
  char v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  void *lpsrc;
  std::__shared_weak_count *v23;

  Espresso::abstract_engine_factory::shared(&v20);
  v6 = v20;
  std::string::basic_string[abi:ne180100]<0>(__p, "instancenorm_1d");
  v17 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)(a2 + 8) + 8))(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v6, a2 + 8, (uint64_t)__p, a3, &v17);
  if (v19 < 0)
    operator delete(__p[0]);
  v7 = v21;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (lpsrc
  {
    v11 = v23;
    *a1 = v10;
    a1[1] = v11;
    if (v11)
    {
      v12 = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
  }
  v14 = v23;
  if (v23)
  {
    v15 = (unint64_t *)&v23->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_19146C348(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<Espresso::zephyr::node_t *,std::hash<Espresso::zephyr::node_t *>,std::equal_to<Espresso::zephyr::node_t *>,std::allocator<Espresso::zephyr::node_t *>>::find<Espresso::zephyr::node_t *>(_QWORD *a1, unint64_t a2)
{
  int8x8_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *result;
  unint64_t v10;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v4 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v3 >> 47) ^ v3);
  v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = v5;
    if (v5 >= *(_QWORD *)&v2)
      v7 = v5 % *(_QWORD *)&v2;
  }
  else
  {
    v7 = v5 & (*(_QWORD *)&v2 - 1);
  }
  v8 = *(_QWORD **)(*a1 + 8 * v7);
  if (!v8)
    return 0;
  result = (_QWORD *)*v8;
  if (*v8)
  {
    do
    {
      v10 = result[1];
      if (v5 == v10)
      {
        if (result[2] == a2)
          return result;
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= *(_QWORD *)&v2)
            v10 %= *(_QWORD *)&v2;
        }
        else
        {
          v10 &= *(_QWORD *)&v2 - 1;
        }
        if (v10 != v7)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t *std::__tree<Espresso::zephyr::value_t *,Espresso::zephyr::ir_object_set_compare<Espresso::zephyr::value_t *>,std::allocator<Espresso::zephyr::value_t *>>::__emplace_unique_key_args<Espresso::zephyr::value_t *,Espresso::zephyr::value_t * const&>(uint64_t **a1, unint64_t *a2, uint64_t *a3)
{
  uint64_t *result;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t v8;

  result = std::__tree<Espresso::zephyr::value_t *,Espresso::zephyr::ir_object_set_compare<Espresso::zephyr::value_t *>,std::allocator<Espresso::zephyr::value_t *>>::__find_equal<Espresso::zephyr::value_t *>((uint64_t)a1, &v8, a2);
  if (!*result)
  {
    v6 = (uint64_t **)result;
    v7 = (uint64_t *)operator new(0x28uLL);
    v7[4] = *a3;
    return std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at(a1, v8, v6, v7);
  }
  return result;
}

_QWORD *std::__tree<Espresso::zephyr::value_t *,Espresso::zephyr::ir_object_set_compare<Espresso::zephyr::value_t *>,std::allocator<Espresso::zephyr::value_t *>>::__find_equal<Espresso::zephyr::value_t *>(uint64_t a1, _QWORD *a2, unint64_t *a3)
{
  _QWORD *result;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;

  v5 = *(_QWORD **)(a1 + 8);
  result = (_QWORD *)(a1 + 8);
  v4 = v5;
  if (v5)
  {
    do
    {
      while (1)
      {
        v6 = v4;
        v7 = a3 ? *a3 : 0;
        v8 = (_QWORD *)v4[4];
        if (!v8)
          break;
        v8 = (_QWORD *)*v8;
        if (v7 >= (unint64_t)v8)
          break;
        v4 = (_QWORD *)*v6;
        result = v6;
        if (!*v6)
          goto LABEL_16;
      }
      if (a3)
        v9 = *a3;
      else
        v9 = 0;
      if ((unint64_t)v8 >= v9)
        break;
      result = v6 + 1;
      v4 = (_QWORD *)v6[1];
    }
    while (v4);
  }
  else
  {
    v6 = result;
  }
LABEL_16:
  *a2 = v6;
  return result;
}

void std::__hash_table<Espresso::zephyr::node_t *,std::hash<Espresso::zephyr::node_t *>,std::equal_to<Espresso::zephyr::node_t *>,std::allocator<Espresso::zephyr::node_t *>>::__emplace_unique_key_args<Espresso::zephyr::node_t *,Espresso::zephyr::node_t * const&>(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD *v11;
  _QWORD *i;
  unint64_t v13;
  _QWORD *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = v8 & (v9 - 1);
    }
    v11 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      for (i = (_QWORD *)*v11; i; i = (_QWORD *)*i)
      {
        v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == a2)
            return;
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9)
              v13 %= v9;
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3)
            break;
        }
      }
    }
  }
  v14 = operator new(0x18uLL);
  *v14 = 0;
  v14[1] = v8;
  v14[2] = a3;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    v17 = 1;
    if (v9 >= 3)
      v17 = (v9 & (v9 - 1)) != 0;
    v18 = v17 | (2 * v9);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__rehash<true>(a1, v20);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v21 = *(_QWORD *)a1;
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *v14 = *v22;
LABEL_38:
    *v22 = v14;
    goto LABEL_39;
  }
  *v14 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(v21 + 8 * v3) = a1 + 16;
  if (*v14)
  {
    v23 = *(_QWORD *)(*v14 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v23 >= v9)
        v23 %= v9;
    }
    else
    {
      v23 &= v9 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
}

void sub_19146C774(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void *Espresso::zephyr::cast_kernel<Espresso::generic_reduce_kernel>(uint64_t a1)
{
  uint64_t v1;
  const void *v2;
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;

  if (!a1)
    return 0;
  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(const void **)(v1 + 8);
  if (!v2)
    return 0;
  if (v3)
  {
    v4 = *(std::__shared_weak_count **)(v1 + 16);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  return v3;
}

void sub_19146C898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  Espresso::zephyr::function_t::~function_t((Espresso::zephyr::function_t *)&a9);
  _Unwind_Resume(a1);
}

uint64_t Espresso::zephyr_passes::merge_tf_layernorm(Espresso::zephyr_passes *this, Espresso::zephyr::function_t *a2)
{
  char *v2;
  char *v3;
  char v4;
  uint64_t v5;
  char matched;
  _QWORD *v7;
  uint64_t v8;
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = (char *)this + 64;
  v3 = (char *)*((_QWORD *)this + 9);
  if (v3 != (char *)this + 64)
  {
    v4 = 0;
    while (1)
    {
      v5 = *((_QWORD *)v3 + 2);
      v10[0] = &off_1E2DB0950;
      v10[1] = v3 + 16;
      v11 = v10;
      matched = Espresso::zephyr::ordered_block_t::match_transform(v5, (uint64_t)v10);
      v7 = v11;
      if (v11 == v10)
        break;
      if (v11)
      {
        v8 = 5;
LABEL_7:
        (*(void (**)(void))(*v7 + 8 * v8))();
      }
      v4 |= matched;
      v3 = (char *)*((_QWORD *)v3 + 1);
      if (v3 == v2)
        return v4 & 1;
    }
    v7 = v10;
    v8 = 4;
    goto LABEL_7;
  }
  v4 = 0;
  return v4 & 1;
}

void sub_19146C990(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void std::__function::__func<Espresso::zephyr_passes::merge_tf_layernorm(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::merge_tf_layernorm(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<Espresso::zephyr_passes::merge_tf_layernorm(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::merge_tf_layernorm(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DB0950;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<Espresso::zephyr_passes::merge_tf_layernorm(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::merge_tf_layernorm(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DB0950;
  a2[1] = v2;
  return result;
}

BOOL std::__function::__func<Espresso::zephyr_passes::merge_tf_layernorm(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::merge_tf_layernorm(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::operator()(Espresso::zephyr::ordered_block_t ***a1, const char *a2)
{
  Espresso::zephyr::node_t *v2;
  const char *v4;
  Espresso *v5;
  _QWORD *v6;
  Espresso::zephyr::node_t *v7;
  Espresso::zephyr::node_t *v8;
  const char *v9;
  unsigned __int8 v10;
  uint64_t v11;
  NSObject *v12;
  _QWORD *v13;
  Espresso::zephyr::node_t *v14;
  Espresso::zephyr::node_t *v15;
  Espresso::zephyr::node_t *v16;
  Espresso::zephyr::node_t *v17;
  Espresso *v18;
  _QWORD *v19;
  Espresso::zephyr::node_t *v20;
  Espresso::zephyr::node_t *v21;
  const char *v22;
  BOOL v23;
  uint64_t v24;
  NSObject *v25;
  _QWORD *v27;
  Espresso::zephyr::node_t *v28;
  Espresso::zephyr::node_t *v29;
  Espresso::zephyr::node_t *v30;
  uint64_t matched;
  char *v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  const char **v38;
  _QWORD *v39;
  uint64_t v40;
  const char *v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  const char *v45;
  const char **v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  const char *v50;
  char **v51;
  char **v52;
  Espresso::zephyr::node_t *v53;
  char *v54;
  char *v55;
  const char **v56;
  char *v57;
  unint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  char *v61;
  uint64_t **v62;
  const char *v63;
  int v64;
  _QWORD *v65;
  unint64_t v66;
  _QWORD *v67;
  unint64_t v68;
  NSObject *v69;
  unint64_t **v70;
  unint64_t *v71;
  _QWORD *v72;
  unint64_t v73;
  _QWORD *v74;
  unint64_t v75;
  _BOOL8 v76;
  void *v77;
  uint64_t v78;
  Espresso *v79;
  const char *v80;
  uint64_t v81;
  char *v82;
  Espresso *v83;
  const char *v84;
  NSObject *v85;
  _QWORD *i;
  Espresso::zephyr::node_t *v87;
  unint64_t **v89;
  unint64_t *v90;
  _QWORD *v91;
  unint64_t v92;
  _QWORD *v93;
  unint64_t v94;
  NSObject *v95;
  std::__shared_weak_count *v96;
  unint64_t *p_shared_owners;
  unint64_t v98;
  _QWORD *v99;
  Espresso::zephyr::value_t *v100;
  uint64_t v101;
  Espresso::zephyr::node_t *v102;
  uint64_t v103;
  std::__shared_weak_count *v104;
  uint64_t *v105;
  _QWORD *v106;
  uint64_t v107;
  _QWORD v108[2];
  _QWORD *v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  _BYTE buf[32];
  __int128 v114;
  __int128 v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  Espresso::zephyr::node_t *v119;
  _QWORD v120[3];
  Espresso *v121;
  _QWORD v122[3];
  Espresso *v123;
  uint64_t v124;

  v124 = *MEMORY[0x1E0C80C00];
  v2 = *(Espresso::zephyr::node_t **)a2;
  if (*(_QWORD *)(*(_QWORD *)a2 + 104) - *(_QWORD *)(*(_QWORD *)a2 + 96) != 8)
  {
    if (!Espresso::zephyr::match_verbose)
      return 0;
    Espresso::espresso_os_log_subsystem((Espresso *)a1, a2);
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 255;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "add1->outputs().size() == 1";
      _os_log_impl(&dword_190DAF000, v12, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
LABEL_16:

    return 0;
  }
  if (!Espresso::zephyr::match_simple_eltwise_binop(*(_QWORD *)a2, 0))
  {
    if (!Espresso::zephyr::match_verbose)
      return 0;
    Espresso::espresso_os_log_subsystem(0, v4);
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 258;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "match_simple_eltwise_binop(add1, ELEMENTWISE_OPERATION_ADD)";
      _os_log_impl(&dword_190DAF000, v12, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_16;
  }
  v5 = (Espresso *)v122;
  v122[0] = &off_1E2DB3A78;
  v123 = (Espresso *)v122;
  v6 = (_QWORD *)*((_QWORD *)v2 + 15);
  if (*((_QWORD *)v2 + 16) - (_QWORD)v6 == 16)
  {
    v7 = *(Espresso::zephyr::node_t **)(*v6 + 80);
    v8 = *(Espresso::zephyr::node_t **)(v6[1] + 80);
    *(_QWORD *)buf = v7;
    *(_QWORD *)&v110 = v8;
    v10 = std::__function::__func<Espresso::zephyr_passes::merge_tf_layernorm(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)#1},std::allocator<Espresso::zephyr_passes::merge_tf_layernorm(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)#1}>,BOOL ()(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)>::operator()((uint64_t)v122, (uint64_t *)buf, (uint64_t *)&v110);
    v5 = v123;
    if ((v10 & 1) == 0)
    {
      *(_QWORD *)buf = v8;
      *(_QWORD *)&v110 = v7;
      if (!v123)
        std::__throw_bad_function_call[abi:ne180100]();
      if ((*(unsigned int (**)(Espresso *, _BYTE *, __int128 *))(*(_QWORD *)v123 + 48))(v123, buf, &v110))
        v7 = v8;
      else
        v7 = 0;
      v5 = v123;
    }
    if (v5 == (Espresso *)v122)
    {
      v11 = 4;
      v5 = (Espresso *)v122;
    }
    else
    {
      if (!v5)
        goto LABEL_24;
      v11 = 5;
    }
  }
  else
  {
    v7 = 0;
    v11 = 4;
  }
  v5 = (Espresso *)(*(uint64_t (**)(void))(*(_QWORD *)v5 + 8 * v11))();
LABEL_24:
  if (!v7)
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(v5, v9);
      v25 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_compl"
                             "ex_subgraph_matching.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 265;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = "mul1";
        _os_log_impl(&dword_190DAF000, v25, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_50;
    }
    return 0;
  }
  v13 = (_QWORD *)*((_QWORD *)v2 + 15);
  if (*((_QWORD *)v2 + 16) - (_QWORD)v13 != 16
    || ((v14 = *(Espresso::zephyr::node_t **)(*v13 + 80),
         v15 = *(Espresso::zephyr::node_t **)(v13[1] + 80),
         v15 != v7)
      ? (v16 = 0)
      : (v16 = v14),
        v14 != v7 ? (v17 = v16) : (v17 = v15),
        !v17))
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(v5, v9);
      v25 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_compl"
                             "ex_subgraph_matching.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 267;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = "beta_read";
        _os_log_impl(&dword_190DAF000, v25, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
LABEL_50:

      return 0;
    }
    return 0;
  }
  v18 = (Espresso *)v120;
  v120[0] = &off_1E2DB3A20;
  v121 = (Espresso *)v120;
  v19 = (_QWORD *)*((_QWORD *)v7 + 15);
  if (*((_QWORD *)v7 + 16) - (_QWORD)v19 == 16)
  {
    v20 = *(Espresso::zephyr::node_t **)(*v19 + 80);
    v21 = *(Espresso::zephyr::node_t **)(v19[1] + 80);
    *(_QWORD *)buf = v20;
    *(_QWORD *)&v110 = v21;
    v23 = std::__function::__func<Espresso::zephyr_passes::merge_tf_layernorm(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)#2},std::allocator<Espresso::zephyr_passes::merge_tf_layernorm(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)#2}>,BOOL ()(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)>::operator()((uint64_t)v120, (uint64_t *)buf, (uint64_t *)&v110);
    v18 = v121;
    if (!v23)
    {
      *(_QWORD *)buf = v21;
      *(_QWORD *)&v110 = v20;
      if (!v121)
        std::__throw_bad_function_call[abi:ne180100]();
      if ((*(unsigned int (**)(Espresso *, _BYTE *, __int128 *))(*(_QWORD *)v121 + 48))(v121, buf, &v110))
        v20 = v21;
      else
        v20 = 0;
      v18 = v121;
    }
    if (v18 == (Espresso *)v120)
    {
      v24 = 4;
      v18 = (Espresso *)v120;
    }
    else
    {
      if (!v18)
        goto LABEL_55;
      v24 = 5;
    }
  }
  else
  {
    v20 = 0;
    v24 = 4;
  }
  v18 = (Espresso *)(*(uint64_t (**)(void))(*(_QWORD *)v18 + 8 * v24))();
LABEL_55:
  if (!v20)
  {
    if (!Espresso::zephyr::match_verbose)
      return 0;
    Espresso::espresso_os_log_subsystem(v18, v22);
    v25 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 280;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "mul_or_div";
      _os_log_impl(&dword_190DAF000, v25, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_50;
  }
  v27 = (_QWORD *)*((_QWORD *)v7 + 15);
  if (*((_QWORD *)v7 + 16) - (_QWORD)v27 != 16)
    goto LABEL_74;
  v28 = *(Espresso::zephyr::node_t **)(*v27 + 80);
  v29 = *(Espresso::zephyr::node_t **)(v27[1] + 80);
  if (v29 == v20)
    v30 = v28;
  else
    v30 = 0;
  if (v28 != v20)
    v29 = v30;
  if (!v29)
  {
LABEL_74:
    if (!Espresso::zephyr::match_verbose)
      return 0;
    Espresso::espresso_os_log_subsystem(v18, v22);
    v25 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 283;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "gamma_read";
      _os_log_impl(&dword_190DAF000, v25, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_50;
  }
  v102 = v29;
  v111 = 0u;
  v112 = 0u;
  v110 = 0u;
  matched = Espresso::zephyr_passes::normalization_factors_matcher::match((Espresso::zephyr_passes::normalization_factors_matcher *)&v110, v20);
  if ((matched & 1) == 0)
  {
    if (!Espresso::zephyr::match_verbose)
      return 0;
    Espresso::espresso_os_log_subsystem((Espresso *)matched, v32);
    v25 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 287;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "f.match(mul_or_div)";
      _os_log_impl(&dword_190DAF000, v25, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_50;
  }
  v33 = (uint64_t *)*((_QWORD *)v20 + 15);
  v34 = (uint64_t *)*((_QWORD *)v20 + 16);
  if (v33 == v34)
    goto LABEL_70;
  v35 = v110;
  while (1)
  {
    v36 = *v33;
    if (*v33)
    {
      v37 = *(_QWORD *)(v36 + 80);
      if (v35 != v37)
      {
        matched = (uint64_t)Espresso::zephyr::match_simple_eltwise_binop(*(_QWORD *)(v36 + 80), 0x21u);
        if (matched)
          break;
      }
    }
    if (++v33 == v34)
      goto LABEL_70;
  }
  if (!v37)
  {
LABEL_70:
    if (!Espresso::zephyr::match_verbose)
      return 0;
    Espresso::espresso_os_log_subsystem((Espresso *)matched, v32);
    v25 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 293;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "sub_1";
      _os_log_impl(&dword_190DAF000, v25, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_50;
  }
  v38 = *(const char ***)(v112 + 96);
  if (*(const char ***)(v112 + 104) == v38)
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  v39 = *(_QWORD **)(v37 + 120);
  v40 = *(_QWORD *)(v37 + 128) - (_QWORD)v39;
  if (!v40)
    goto LABEL_136;
  v41 = *v38;
  v42 = v40 >> 3;
  v43 = (unint64_t)(v40 >> 3) <= 1 ? 1 : v40 >> 3;
  if ((const char *)*v39 != v41)
  {
    v44 = 0;
    do
    {
      if (v43 - 1 == v44)
        goto LABEL_136;
      v45 = (const char *)v39[++v44];
    }
    while (v45 != v41);
    if (v44 >= v42)
    {
LABEL_136:
      if (!Espresso::zephyr::match_verbose)
        return 0;
      Espresso::espresso_os_log_subsystem((Espresso *)matched, v32);
      v25 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_compl"
                             "ex_subgraph_matching.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 297;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = "sub_1->uses_value(f.mean->output())";
        _os_log_impl(&dword_190DAF000, v25, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_50;
    }
  }
  v46 = *(const char ***)(*((_QWORD *)&v112 + 1) + 120);
  v47 = *(_QWORD *)(*((_QWORD *)&v112 + 1) + 128) - (_QWORD)v46;
  if (!v47)
    goto LABEL_140;
  v48 = v47 >> 3;
  matched = v48 <= 1 ? 1 : v48;
  v32 = (char *)*v46;
  if (*v46 != v41)
  {
    v49 = 0;
    do
    {
      if (matched - 1 == v49)
        goto LABEL_140;
      v50 = v46[++v49];
    }
    while (v50 != v41);
    if (v49 >= v48)
    {
LABEL_140:
      if (!Espresso::zephyr::match_verbose)
        return 0;
      Espresso::espresso_os_log_subsystem((Espresso *)matched, v32);
      v25 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_compl"
                             "ex_subgraph_matching.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 298;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = "f.squared_difference_sub_->uses_value(f.mean->output())";
        _os_log_impl(&dword_190DAF000, v25, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_50;
    }
  }
  v51 = *(char ***)(v112 + 120);
  if (*(char ***)(v112 + 128) == v51)
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  v52 = (char **)*((_QWORD *)v2 + 12);
  if (*((char ***)v2 + 13) == v52)
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  v53 = v20;
  v54 = *v51;
  v55 = *v52;
  if (v32 != v54)
  {
    v32 = 0;
    v56 = v46 + 1;
    --matched;
    do
    {
      if ((char *)matched == v32)
        goto LABEL_144;
      v57 = (char *)v56[(_QWORD)v32++];
    }
    while (v57 != v54);
    if ((unint64_t)v32 >= v48)
    {
LABEL_144:
      if (!Espresso::zephyr::match_verbose)
        return 0;
      Espresso::espresso_os_log_subsystem((Espresso *)matched, v32);
      v25 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_compl"
                             "ex_subgraph_matching.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 303;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = "f.squared_difference_sub_->uses_value(x)";
        _os_log_impl(&dword_190DAF000, v25, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_50;
    }
  }
  if ((char *)*v39 != v54)
  {
    v58 = 0;
    v59 = v39 + 1;
    v60 = v43 - 1;
    do
    {
      if (v60 == v58)
        goto LABEL_148;
      v61 = (char *)v59[v58++];
    }
    while (v61 != v54);
    if (v58 >= v42)
    {
LABEL_148:
      if (!Espresso::zephyr::match_verbose)
        return 0;
      Espresso::espresso_os_log_subsystem((Espresso *)matched, v32);
      v25 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_compl"
                             "ex_subgraph_matching.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 305;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = "sub_1->uses_value(x)";
        _os_log_impl(&dword_190DAF000, v25, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_50;
    }
  }
  v100 = (Espresso::zephyr::value_t *)v54;
  *(_QWORD *)buf = v2;
  *(_QWORD *)&buf[8] = v7;
  *(_QWORD *)&buf[16] = v17;
  *(_QWORD *)&buf[24] = v102;
  v101 = *((_QWORD *)&v110 + 1);
  v114 = v110;
  v115 = v111;
  v116 = *((_QWORD *)&v112 + 1);
  v117 = v112;
  v118 = v37;
  v119 = v53;
  std::unordered_set<Espresso::zephyr::node_t *>::unordered_set((uint64_t)v108, (unint64_t *)buf, 12);
  v62 = Espresso::zephyr::find_values_used_externally<std::unordered_set<Espresso::zephyr::node_t *>>(&v105, v108);
  if (v107 != 3)
  {
    if (v107 == 1)
    {
      v64 = 0;
      v65 = v106;
      if (v106)
        goto LABEL_121;
LABEL_132:
      if (!Espresso::zephyr::match_verbose)
        goto LABEL_174;
      Espresso::espresso_os_log_subsystem((Espresso *)v62, v63);
      v69 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v69, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_compl"
                             "ex_subgraph_matching.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 331;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = "external_values.count(y)";
        _os_log_impl(&dword_190DAF000, v69, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_173;
    }
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem((Espresso *)v62, v63);
      v69 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v69, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_compl"
                             "ex_subgraph_matching.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 322;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = "external_values.size() == 1 || external_values.size() == 3";
        _os_log_impl(&dword_190DAF000, v69, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
LABEL_173:

      goto LABEL_174;
    }
    goto LABEL_174;
  }
  v70 = (unint64_t **)*((_QWORD *)v102 + 12);
  if (*((unint64_t ***)v102 + 13) == v70)
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  v65 = v106;
  if (!v106)
  {
LABEL_166:
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem((Espresso *)v62, v63);
      v69 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v69, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_compl"
                             "ex_subgraph_matching.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 327;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = "external_values.count(gamma_read->output())";
        _os_log_impl(&dword_190DAF000, v69, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_173;
    }
LABEL_174:
    v76 = 0;
    goto LABEL_175;
  }
  v71 = *v70;
  v72 = v106;
  while (1)
  {
    if (v71)
      v73 = *v71;
    else
      v73 = 0;
    v74 = (_QWORD *)v72[4];
    if (v74)
    {
      v74 = (_QWORD *)*v74;
      if (v73 < (unint64_t)v74)
        goto LABEL_165;
    }
    v75 = v71 ? *v71 : 0;
    if ((unint64_t)v74 >= v75)
      break;
    ++v72;
LABEL_165:
    v72 = (_QWORD *)*v72;
    if (!v72)
      goto LABEL_166;
  }
  v89 = (unint64_t **)*((_QWORD *)v17 + 12);
  if (*((unint64_t ***)v17 + 13) == v89)
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  v90 = *v89;
  v91 = v106;
  while (2)
  {
    if (v90)
      v92 = *v90;
    else
      v92 = 0;
    v93 = (_QWORD *)v91[4];
    if (v93)
    {
      v93 = (_QWORD *)*v93;
      if (v92 < (unint64_t)v93)
      {
LABEL_199:
        v91 = (_QWORD *)*v91;
        if (v91)
          continue;
        if (Espresso::zephyr::match_verbose)
        {
          Espresso::espresso_os_log_subsystem((Espresso *)v62, v63);
          v69 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v69, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 136315650;
            *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_c"
                                 "omplex_subgraph_matching.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 328;
            *(_WORD *)&buf[18] = 2080;
            *(_QWORD *)&buf[20] = "external_values.count(beta_read->output())";
            _os_log_impl(&dword_190DAF000, v69, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
          }
          goto LABEL_173;
        }
        goto LABEL_174;
      }
    }
    break;
  }
  if (v90)
    v94 = *v90;
  else
    v94 = 0;
  if ((unint64_t)v93 < v94)
  {
    ++v91;
    goto LABEL_199;
  }
  v64 = 1;
LABEL_121:
  while (2)
  {
    if (v55)
      v66 = *(_QWORD *)v55;
    else
      v66 = 0;
    v67 = (_QWORD *)v65[4];
    if (v67)
    {
      v67 = (_QWORD *)*v67;
      if (v66 < (unint64_t)v67)
      {
LABEL_131:
        v65 = (_QWORD *)*v65;
        if (!v65)
          goto LABEL_132;
        continue;
      }
    }
    break;
  }
  if (v55)
    v68 = *(_QWORD *)v55;
  else
    v68 = 0;
  if ((unint64_t)v67 < v68)
  {
    ++v65;
    goto LABEL_131;
  }
  v77 = Espresso::zephyr::cast_kernel<Espresso::generic_elementwise_kernel>(v101);
  v78 = (*(uint64_t (**)(void *))(*(_QWORD *)v77 + 320))(v77);
  Espresso::zephyr_passes::create_instancenorm_kenel((Espresso::zephyr_passes *)&v103, v102, v17, *(float *)(v78 + 8));
  v81 = v103;
  v76 = v103 != 0;
  if (v103)
  {
    v82 = Espresso::zephyr::function_t::new_detached_node(*(_QWORD *)(v101 + 24), v101 + 144);
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(*((_QWORD *)v82 + 1) + 8), v81, (uint64_t)v104);
    Espresso::zephyr::node_t::add_input((Espresso::zephyr::node_t *)v82, v100);
    Espresso::zephyr::node_t::add_output((Espresso::zephyr::node_t *)v82, (Espresso::zephyr::value_t *)v55);
    Espresso::espresso_os_log_subsystem(v83, v84);
    v85 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v85, OS_LOG_TYPE_DEBUG))
    {
      v99 = v55 + 32;
      if (v55[55] < 0)
        v99 = (_QWORD *)*v99;
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v99;
      _os_log_debug_impl(&dword_190DAF000, v85, OS_LOG_TYPE_DEBUG, "zephyr_passes::merge_tf_layernorm: at %s", buf, 0xCu);
    }

    Espresso::zephyr::ordered_block_t::insert_node_after(*a1[1], (Espresso::zephyr::node_t *)v82, v2);
    for (i = v109; i; i = (_QWORD *)*i)
    {
      v87 = (Espresso::zephyr::node_t *)i[2];
      if (v64)
      {
        if (v87 == v102 || v87 == v17)
          continue;
      }
      Espresso::zephyr::node_t::remove_from_graphs(v87);
    }
  }
  else if (Espresso::zephyr::match_verbose)
  {
    Espresso::espresso_os_log_subsystem(v79, v80);
    v95 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v95, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 338;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "instancenorm_kernel";
      _os_log_impl(&dword_190DAF000, v95, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }

  }
  v96 = v104;
  if (v104)
  {
    p_shared_owners = (unint64_t *)&v104->__shared_owners_;
    do
      v98 = __ldaxr(p_shared_owners);
    while (__stlxr(v98 - 1, p_shared_owners));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
  }
LABEL_175:
  std::__tree<int>::destroy(v106);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)v108);
  return v76;
}

void sub_19146DAE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _QWORD *a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  std::__tree<int>::destroy(a11);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<Espresso::zephyr_passes::merge_tf_layernorm(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::merge_tf_layernorm(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN8Espresso13zephyr_passes18merge_tf_layernormERNS_6zephyr10function_tEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<Espresso::zephyr_passes::merge_tf_layernorm(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::merge_tf_layernorm(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::target_type()
{
}

void std::__function::__func<Espresso::zephyr_passes::merge_tf_layernorm(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)#2},std::allocator<Espresso::zephyr_passes::merge_tf_layernorm(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)#2}>,BOOL ()(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<Espresso::zephyr_passes::merge_tf_layernorm(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)#2},std::allocator<Espresso::zephyr_passes::merge_tf_layernorm(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)#2}>,BOOL ()(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2DB3A20;
  return result;
}

void std::__function::__func<Espresso::zephyr_passes::merge_tf_layernorm(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)#2},std::allocator<Espresso::zephyr_passes::merge_tf_layernorm(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)#2}>,BOOL ()(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2DB3A20;
}

BOOL std::__function::__func<Espresso::zephyr_passes::merge_tf_layernorm(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)#2},std::allocator<Espresso::zephyr_passes::merge_tf_layernorm(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)#2}>,BOOL ()(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)>::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  void *matched;
  void *constant;
  BOOL v7;

  v3 = *a2;
  v4 = *a3;
  matched = Espresso::zephyr::match_simple_eltwise_binop(*a2, 1u);
  if (!matched)
    matched = Espresso::zephyr::match_simple_eltwise_binop(v3, 0x66u);
  constant = Espresso::zephyr::cast_kernel<Espresso::generic_load_constant_kernel>(v4);
  if (matched)
    v7 = constant == 0;
  else
    v7 = 1;
  return !v7;
}

uint64_t std::__function::__func<Espresso::zephyr_passes::merge_tf_layernorm(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)#2},std::allocator<Espresso::zephyr_passes::merge_tf_layernorm(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)#2}>,BOOL ()(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZZN8Espresso13zephyr_passes18merge_tf_layernormERNS_6zephyr10function_tEENK3$_0clEPNS1_6node_tEEUlS6_S6_E0_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<Espresso::zephyr_passes::merge_tf_layernorm(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)#2},std::allocator<Espresso::zephyr_passes::merge_tf_layernorm(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)#2}>,BOOL ()(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)>::target_type()
{
}

void std::__function::__func<Espresso::zephyr_passes::merge_tf_layernorm(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)#1},std::allocator<Espresso::zephyr_passes::merge_tf_layernorm(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)#1}>,BOOL ()(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<Espresso::zephyr_passes::merge_tf_layernorm(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)#1},std::allocator<Espresso::zephyr_passes::merge_tf_layernorm(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)#1}>,BOOL ()(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2DB3A78;
  return result;
}

void std::__function::__func<Espresso::zephyr_passes::merge_tf_layernorm(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)#1},std::allocator<Espresso::zephyr_passes::merge_tf_layernorm(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)#1}>,BOOL ()(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2DB3A78;
}

void *std::__function::__func<Espresso::zephyr_passes::merge_tf_layernorm(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)#1},std::allocator<Espresso::zephyr_passes::merge_tf_layernorm(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)#1}>,BOOL ()(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)>::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  void *result;

  v3 = *a3;
  result = Espresso::zephyr::match_simple_eltwise_binop(*a2, 1u);
  if (result)
    return (void *)(Espresso::zephyr::cast_kernel<Espresso::generic_load_constant_kernel>(v3) != 0);
  return result;
}

uint64_t std::__function::__func<Espresso::zephyr_passes::merge_tf_layernorm(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)#1},std::allocator<Espresso::zephyr_passes::merge_tf_layernorm(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)#1}>,BOOL ()(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZZN8Espresso13zephyr_passes18merge_tf_layernormERNS_6zephyr10function_tEENK3$_0clEPNS1_6node_tEEUlS6_S6_E_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<Espresso::zephyr_passes::merge_tf_layernorm(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)#1},std::allocator<Espresso::zephyr_passes::merge_tf_layernorm(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)#1}>,BOOL ()(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)>::target_type()
{
}

void sub_19146DE34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  Espresso::zephyr::function_t::~function_t((Espresso::zephyr::function_t *)&a9);
  _Unwind_Resume(a1);
}

uint64_t Espresso::zephyr_passes::fuse_fast_gelu_1(Espresso::zephyr_passes *this, Espresso::zephyr::function_t *a2)
{
  char *v2;
  char *v3;
  char v4;
  uint64_t v5;
  char matched;
  _QWORD *v7;
  uint64_t v8;
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = (char *)this + 64;
  v3 = (char *)*((_QWORD *)this + 9);
  if (v3 != (char *)this + 64)
  {
    v4 = 0;
    while (1)
    {
      v5 = *((_QWORD *)v3 + 2);
      v10[0] = &off_1E2DB0638;
      v10[1] = v3 + 16;
      v11 = v10;
      matched = Espresso::zephyr::ordered_block_t::match_transform(v5, (uint64_t)v10);
      v7 = v11;
      if (v11 == v10)
        break;
      if (v11)
      {
        v8 = 5;
LABEL_7:
        (*(void (**)(void))(*v7 + 8 * v8))();
      }
      v4 |= matched;
      v3 = (char *)*((_QWORD *)v3 + 1);
      if (v3 == v2)
        return v4 & 1;
    }
    v7 = v10;
    v8 = 4;
    goto LABEL_7;
  }
  v4 = 0;
  return v4 & 1;
}

void sub_19146DF2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void std::__function::__func<Espresso::zephyr_passes::fuse_fast_gelu_1(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fuse_fast_gelu_1(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<Espresso::zephyr_passes::fuse_fast_gelu_1(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fuse_fast_gelu_1(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DB0638;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<Espresso::zephyr_passes::fuse_fast_gelu_1(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fuse_fast_gelu_1(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DB0638;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<Espresso::zephyr_passes::fuse_fast_gelu_1(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fuse_fast_gelu_1(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::operator()(uint64_t a1, uint64_t *a2)
{
  Espresso::zephyr::node_t *v3;
  void *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v11;
  void *matched;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  Espresso::zephyr::value_t **v30;
  char **v31;
  Espresso::zephyr::value_t **v32;
  uint64_t v33;
  Espresso::zephyr::value_t *v34;
  char *v35;
  uint64_t v36;
  Espresso::zephyr::value_t **v37;
  uint64_t v38;
  unint64_t v39;
  const char *v40;
  Espresso *v42;
  unint64_t v43;
  _QWORD *v44;
  unint64_t v45;
  NSObject *v46;
  char *v47;
  std::__shared_weak_count *v48;
  uint64_t **j;
  unint64_t *p_shared_owners;
  unint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  Espresso::zephyr::ordered_block_t **v54;
  uint64_t v55;
  uint64_t i;
  uint64_t v57;
  std::__shared_weak_count *v58;
  uint64_t *v59;
  Espresso *v60;
  uint64_t v61;
  _QWORD v62[2];
  uint64_t **v63;
  _BYTE buf[40];
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  v3 = (Espresso::zephyr::node_t *)*a2;
  result = Espresso::zephyr::match_simple_eltwise_binop(*a2, 1u);
  if (!result)
    return result;
  v5 = *((_QWORD *)v3 + 15);
  v6 = *((_QWORD *)v3 + 16);
  if (v5 == v6)
  {
LABEL_74:
    v11 = 0;
    return (void *)(v11 != 0);
  }
  v54 = *(Espresso::zephyr::ordered_block_t ***)(a1 + 8);
  __asm { FMOV            V13.2S, #1.0 }
  while (1)
  {
    if (*(_QWORD *)v5)
    {
      v11 = *(_QWORD *)(*(_QWORD *)v5 + 80);
      matched = Espresso::zephyr::match_simple_eltwise_unaryop(v11, 3);
      if (matched)
      {
        if (fabsf(*(float *)((*(uint64_t (**)(void *))(*(_QWORD *)matched + 320))(matched) + 8) + -0.5) < 1.0e-10)
        {
          v13 = *(_QWORD *)(v11 + 120);
          if (*(_QWORD *)(v11 + 128) == v13)
            std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
          v14 = *(_QWORD *)(*(_QWORD *)v13 + 80);
          v15 = Espresso::zephyr::match_simple_eltwise_unaryop(v14, 2);
          if (v15)
          {
            if (fabsf(*(float *)((*(uint64_t (**)(void *))(*(_QWORD *)v15 + 320))(v15) + 8) + -1.0) < 1.0e-10)
            {
              v16 = *(_QWORD *)(v14 + 120);
              if (*(_QWORD *)(v14 + 128) == v16)
                std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
              v17 = *(_QWORD *)(*(_QWORD *)v16 + 80);
              if (Espresso::zephyr::match_simple_activation(v17, 1))
              {
                v18 = *(_QWORD *)(v17 + 120);
                if (*(_QWORD *)(v17 + 128) == v18)
                  std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
                v19 = *(_QWORD *)(*(_QWORD *)v18 + 80);
                v20 = Espresso::zephyr::match_simple_eltwise_unaryop(v19, 3);
                if (v20)
                {
                  if (fabsf(*(float *)((*(uint64_t (**)(void *))(*(_QWORD *)v20 + 320))(v20) + 8) + -0.79788) < 1.0e-10)
                  {
                    v21 = *(_QWORD *)(v19 + 120);
                    if (*(_QWORD *)(v19 + 128) == v21)
                      std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
                    v53 = *(_QWORD *)(*(_QWORD *)v21 + 80);
                    v22 = Espresso::zephyr::match_simple_eltwise_binop(v53, 0);
                    if (v22)
                    {
                      if (fabsf(*(float *)((*(uint64_t (**)(void *))(*(_QWORD *)v22 + 320))(v22) + 8) + -1.0) < 1.0e-10)
                        break;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_69:
    v5 += 8;
    if (v5 == v6)
      goto LABEL_74;
  }
  v24 = *(_QWORD *)(v53 + 120);
  v23 = *(_QWORD *)(v53 + 128);
  for (i = v23; ; v23 = i)
  {
    if (v24 == v23)
      goto LABEL_69;
    if (*(_QWORD *)v24)
    {
      v55 = *(_QWORD *)(*(_QWORD *)v24 + 80);
      v25 = Espresso::zephyr::match_simple_eltwise_unaryop(v19, 3);
      if (v25)
      {
        if (fabsf(*(float *)((*(uint64_t (**)(void *))(*(_QWORD *)v25 + 320))(v25) + 8) + -0.79788) < 1.0e-10)
        {
          v26 = *(_QWORD *)(v55 + 120);
          if (*(_QWORD *)(v55 + 128) == v26)
            std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
          v27 = *(_QWORD *)(*(_QWORD *)v26 + 80);
          v28 = Espresso::zephyr::match_simple_eltwise_unaryop(v27, 13);
          v29 = v28;
          if (v28)
          {
            if (fabsf(*(float *)((*(uint64_t (**)(void *))(*(_QWORD *)v28 + 320))(v28) + 8) + -3.0) < 1.0e-10
              && fabsf(*(float *)((*(uint64_t (**)(void *))(*(_QWORD *)v29 + 320))(v29) + 12)) < 1.0e-10)
            {
              break;
            }
          }
        }
      }
    }
LABEL_59:
    v24 += 8;
  }
  *(_QWORD *)buf = v3;
  *(_QWORD *)&buf[8] = v11;
  *(_QWORD *)&buf[16] = v14;
  *(_QWORD *)&buf[24] = v17;
  *(_QWORD *)&buf[32] = v19;
  v65 = v53;
  v66 = v55;
  v67 = v27;
  std::unordered_set<Espresso::zephyr::node_t *>::unordered_set((uint64_t)v62, (unint64_t *)buf, 8);
  v30 = *(Espresso::zephyr::value_t ***)(v27 + 120);
  if (*(Espresso::zephyr::value_t ***)(v27 + 128) == v30)
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  v31 = (char **)*((_QWORD *)v3 + 12);
  if (*((char ***)v3 + 13) == v31)
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  v32 = (Espresso::zephyr::value_t **)*((_QWORD *)v3 + 15);
  v33 = *((_QWORD *)v3 + 16) - (_QWORD)v32;
  if (!v33)
    goto LABEL_58;
  v34 = *v30;
  v35 = *v31;
  v36 = v33 >> 3;
  if ((unint64_t)(v33 >> 3) <= 1)
    v36 = 1;
  while (*v32 != v34)
  {
    ++v32;
    if (!--v36)
      goto LABEL_58;
  }
  v37 = *(Espresso::zephyr::value_t ***)(v53 + 120);
  v38 = *(_QWORD *)(v53 + 128) - (_QWORD)v37;
  if (!v38)
  {
LABEL_58:
    std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)v62);
    goto LABEL_59;
  }
  v39 = v38 >> 3;
  if (v39 <= 1)
    v39 = 1;
  while (*v37 != v34)
  {
    ++v37;
    if (!--v39)
      goto LABEL_58;
  }
  Espresso::zephyr::find_values_used_externally<std::unordered_set<Espresso::zephyr::node_t *>>(&v59, v62);
  if (v61 != 1 || v60 == 0)
  {
LABEL_57:
    std::__tree<int>::destroy(v60);
    goto LABEL_58;
  }
  v42 = v60;
  while (1)
  {
    if (v35)
      v43 = *(_QWORD *)v35;
    else
      v43 = 0;
    v44 = (_QWORD *)*((_QWORD *)v42 + 4);
    if (v44)
    {
      v44 = (_QWORD *)*v44;
      if (v43 < (unint64_t)v44)
        goto LABEL_56;
    }
    v45 = v35 ? *(_QWORD *)v35 : 0;
    if ((unint64_t)v44 >= v45)
      break;
    v42 = (Espresso *)((char *)v42 + 8);
LABEL_56:
    v42 = *(Espresso **)v42;
    if (!v42)
      goto LABEL_57;
  }
  Espresso::espresso_os_log_subsystem(v60, v40);
  v46 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v46, OS_LOG_TYPE_DEBUG))
  {
    v52 = v35 + 32;
    if (v35[55] < 0)
      v52 = (_QWORD *)*v52;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v52;
    _os_log_debug_impl(&dword_190DAF000, v46, OS_LOG_TYPE_DEBUG, "zephyr_passes::fuse_fast_gelu_1: at %s", buf, 0xCu);
  }

  *(_QWORD *)&buf[4] = _D13;
  memset(&buf[12], 0, 24);
  *(_DWORD *)buf = 21;
  Espresso::zephyr::make_kernel<Espresso::generic_activation_kernel,Espresso::zephyr::node_t,Espresso::activation_params>(&v57, *(_QWORD *)(*((_QWORD *)v3 + 1) + 8), (uint64_t)buf);
  v47 = Espresso::zephyr::function_t::new_detached_node(*((_QWORD *)v3 + 3), (uint64_t)v3 + 144);
  v48 = v58;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(*((_QWORD *)v47 + 1) + 8), v57, (uint64_t)v58);
  Espresso::zephyr::node_t::add_input((Espresso::zephyr::node_t *)v47, v34);
  Espresso::zephyr::node_t::add_output((Espresso::zephyr::node_t *)v47, (Espresso::zephyr::value_t *)v35);
  Espresso::zephyr::ordered_block_t::insert_node_after(*v54, (Espresso::zephyr::node_t *)v47, v3);
  for (j = v63; j; j = (uint64_t **)*j)
    Espresso::zephyr::node_t::remove_from_graphs((Espresso::zephyr::node_t *)j[2]);
  if (v48)
  {
    p_shared_owners = (unint64_t *)&v48->__shared_owners_;
    do
      v51 = __ldaxr(p_shared_owners);
    while (__stlxr(v51 - 1, p_shared_owners));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  std::__tree<int>::destroy(v60);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)v62);
  if (!v55)
    goto LABEL_69;
  return (void *)(v11 != 0);
}

void sub_19146E574(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, _QWORD *a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  std::__tree<int>::destroy(a15);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<Espresso::zephyr_passes::fuse_fast_gelu_1(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fuse_fast_gelu_1(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN8Espresso13zephyr_passes16fuse_fast_gelu_1ERNS_6zephyr10function_tEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<Espresso::zephyr_passes::fuse_fast_gelu_1(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fuse_fast_gelu_1(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::target_type()
{
}

void Espresso::zephyr::make_kernel<Espresso::generic_activation_kernel,Espresso::zephyr::node_t,Espresso::activation_params>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  int v17;
  void *__p[2];
  char v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  void *lpsrc;
  std::__shared_weak_count *v23;

  Espresso::abstract_engine_factory::shared(&v20);
  v6 = v20;
  std::string::basic_string[abi:ne180100]<0>(__p, "activation");
  v17 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)(a2 + 8) + 8))(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v6, a2 + 8, (uint64_t)__p, a3, &v17);
  if (v19 < 0)
    operator delete(__p[0]);
  v7 = v21;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (lpsrc
  {
    v11 = v23;
    *a1 = v10;
    a1[1] = v11;
    if (v11)
    {
      v12 = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
  }
  v14 = v23;
  if (v23)
  {
    v15 = (unint64_t *)&v23->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_19146E788(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_19146E828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  Espresso::zephyr::function_t::~function_t((Espresso::zephyr::function_t *)&a9);
  _Unwind_Resume(a1);
}

uint64_t Espresso::zephyr_passes::fuse_gelu_with_erf(Espresso::zephyr_passes *this, Espresso::zephyr::function_t *a2)
{
  char *v2;
  char *v3;
  char v4;
  uint64_t v5;
  char matched;
  _QWORD *v7;
  uint64_t v8;
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = (char *)this + 64;
  v3 = (char *)*((_QWORD *)this + 9);
  if (v3 != (char *)this + 64)
  {
    v4 = 0;
    while (1)
    {
      v5 = *((_QWORD *)v3 + 2);
      v10[0] = &off_1E2DB0848;
      v10[1] = v3 + 16;
      v11 = v10;
      matched = Espresso::zephyr::ordered_block_t::match_transform(v5, (uint64_t)v10);
      v7 = v11;
      if (v11 == v10)
        break;
      if (v11)
      {
        v8 = 5;
LABEL_7:
        (*(void (**)(void))(*v7 + 8 * v8))();
      }
      v4 |= matched;
      v3 = (char *)*((_QWORD *)v3 + 1);
      if (v3 == v2)
        return v4 & 1;
    }
    v7 = v10;
    v8 = 4;
    goto LABEL_7;
  }
  v4 = 0;
  return v4 & 1;
}

void sub_19146E920(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void std::__function::__func<Espresso::zephyr_passes::fuse_gelu_with_erf(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fuse_gelu_with_erf(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<Espresso::zephyr_passes::fuse_gelu_with_erf(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fuse_gelu_with_erf(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DB0848;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<Espresso::zephyr_passes::fuse_gelu_with_erf(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fuse_gelu_with_erf(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DB0848;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<Espresso::zephyr_passes::fuse_gelu_with_erf(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fuse_gelu_with_erf(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::operator()(uint64_t a1, uint64_t *a2)
{
  Espresso::zephyr::node_t *v3;
  Espresso *matched;
  const char *v5;
  _QWORD *v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  float *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  float *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  float *v25;
  const char *v26;
  Espresso *v27;
  const char *v28;
  Espresso::zephyr::value_t **v29;
  char **v30;
  Espresso::zephyr::value_t **v31;
  uint64_t v32;
  Espresso::zephyr::value_t *v33;
  char *v34;
  uint64_t v35;
  Espresso::zephyr::value_t **v36;
  uint64_t v37;
  NSObject *v38;
  uint64_t v39;
  NSObject *v40;
  uint64_t **v41;
  const char *v42;
  _QWORD *v43;
  unint64_t v44;
  _QWORD *v45;
  unint64_t v46;
  NSObject *v48;
  char *v54;
  std::__shared_weak_count *v55;
  uint64_t **v56;
  unint64_t *p_shared_owners;
  unint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  uint64_t *v62;
  _QWORD *v63;
  uint64_t v64;
  _BYTE buf[40];
  uint8_t v66[4];
  const char *v67;
  __int16 v68;
  _DWORD v69[6];
  uint64_t v70;

  v70 = *MEMORY[0x1E0C80C00];
  v3 = (Espresso::zephyr::node_t *)*a2;
  matched = (Espresso *)Espresso::zephyr::match_simple_eltwise_binop(*a2, 1u);
  if (!matched)
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(0, v5);
      v40 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v40, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)v66 = 136315650;
        v67 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex_subgraph_matching.mm";
        v68 = 1024;
        v69[0] = 510;
        LOWORD(v69[1]) = 2080;
        *(_QWORD *)((char *)&v69[1] + 2) = "match_simple_eltwise_binop(mul_3, ELEMENTWISE_OPERATION_MUL)";
        _os_log_impl(&dword_190DAF000, v40, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", v66, 0x1Cu);
      }
      goto LABEL_90;
    }
    return 0;
  }
  v6 = (_QWORD *)*((_QWORD *)v3 + 15);
  if (!*v6)
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(matched, v5);
      v40 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v40, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)v66 = 136315650;
        v67 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex_subgraph_matching.mm";
        v68 = 1024;
        v69[0] = 511;
        LOWORD(v69[1]) = 2080;
        *(_QWORD *)((char *)&v69[1] + 2) = "mul_3->inputs()[0]";
        _os_log_impl(&dword_190DAF000, v40, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", v66, 0x1Cu);
      }
      goto LABEL_90;
    }
    return 0;
  }
  if (*((_QWORD *)v3 + 16) - (_QWORD)v6 != 16)
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(matched, v5);
      v40 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v40, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)v66 = 136315650;
        v67 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex_subgraph_matching.mm";
        v68 = 1024;
        v69[0] = 512;
        LOWORD(v69[1]) = 2080;
        *(_QWORD *)((char *)&v69[1] + 2) = "mul_3->inputs().size() == 2";
        _os_log_impl(&dword_190DAF000, v40, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", v66, 0x1Cu);
      }
      goto LABEL_90;
    }
    return 0;
  }
  v7 = *(_QWORD *)(v6[1] + 80);
  v8 = Espresso::zephyr::match_simple_eltwise_unaryop(v7, 3);
  if (!v8)
  {
    v8 = Espresso::zephyr::match_simple_eltwise_unaryop(v7, 1);
    if (!v8)
    {
      v7 = *(_QWORD *)(**((_QWORD **)v3 + 15) + 80);
      v8 = Espresso::zephyr::match_simple_eltwise_unaryop(v7, 3);
      if (!v8)
      {
        v8 = Espresso::zephyr::match_simple_eltwise_unaryop(v7, 1);
        if (!v8)
        {
          if (Espresso::zephyr::match_verbose)
          {
            Espresso::espresso_os_log_subsystem(0, v9);
            v40 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v40, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)v66 = 136315650;
              v67 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex_subgraph_matching.mm";
              v68 = 1024;
              v69[0] = 525;
              LOWORD(v69[1]) = 2080;
              *(_QWORD *)((char *)&v69[1] + 2) = "k_mul2 != nullptr";
              _os_log_impl(&dword_190DAF000, v40, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", v66, 0x1Cu);
            }
            goto LABEL_90;
          }
          return 0;
        }
      }
    }
  }
  v10 = (float *)(*(uint64_t (**)(void *))(*(_QWORD *)v8 + 320))(v8);
  if (fabsf(v10[2] + -0.5) >= 1.0e-10)
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem((Espresso *)v10, v11);
      v40 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v40, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)v66 = 136315650;
        v67 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex_subgraph_matching.mm";
        v68 = 1024;
        v69[0] = 526;
        LOWORD(v69[1]) = 2080;
        *(_QWORD *)((char *)&v69[1] + 2) = "close_floats(k_mul2->get_params().alpha, 0.5f)";
        _os_log_impl(&dword_190DAF000, v40, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", v66, 0x1Cu);
      }
      goto LABEL_90;
    }
    return 0;
  }
  v12 = *(_QWORD *)(v7 + 120);
  if (*(_QWORD *)(v7 + 128) == v12)
    goto LABEL_109;
  v13 = *(_QWORD *)(*(_QWORD *)v12 + 80);
  v14 = Espresso::zephyr::match_simple_eltwise_unaryop(v13, 2);
  if (!v14)
  {
    v14 = Espresso::zephyr::match_simple_eltwise_unaryop(v13, 0);
    if (!v14)
    {
      if (Espresso::zephyr::match_verbose)
      {
        Espresso::espresso_os_log_subsystem(0, v15);
        v40 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v40, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)v66 = 136315650;
          v67 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex_subgraph_matching.mm";
          v68 = 1024;
          v69[0] = 533;
          LOWORD(v69[1]) = 2080;
          *(_QWORD *)((char *)&v69[1] + 2) = "k_add1 != nullptr";
          _os_log_impl(&dword_190DAF000, v40, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", v66, 0x1Cu);
        }
        goto LABEL_90;
      }
      return 0;
    }
  }
  v16 = (float *)(*(uint64_t (**)(void *))(*(_QWORD *)v14 + 320))(v14);
  if (fabsf(v16[2] + -1.0) >= 1.0e-10)
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem((Espresso *)v16, v17);
      v40 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v40, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)v66 = 136315650;
        v67 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex_subgraph_matching.mm";
        v68 = 1024;
        v69[0] = 534;
        LOWORD(v69[1]) = 2080;
        *(_QWORD *)((char *)&v69[1] + 2) = "close_floats(k_add1->get_params().alpha, 1.0f)";
        _os_log_impl(&dword_190DAF000, v40, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", v66, 0x1Cu);
      }
      goto LABEL_90;
    }
    return 0;
  }
  v18 = *(_QWORD *)(v13 + 120);
  if (*(_QWORD *)(v13 + 128) == v18)
    goto LABEL_109;
  v19 = *(_QWORD *)(*(_QWORD *)v18 + 80);
  if (!Espresso::zephyr::match_simple_activation(v19, 20))
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(0, v20);
      v40 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v40, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)v66 = 136315650;
        v67 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex_subgraph_matching.mm";
        v68 = 1024;
        v69[0] = 537;
        LOWORD(v69[1]) = 2080;
        *(_QWORD *)((char *)&v69[1] + 2) = "match_simple_activation(erf, ACTIVATION_ERF)";
        _os_log_impl(&dword_190DAF000, v40, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", v66, 0x1Cu);
      }
      goto LABEL_90;
    }
    return 0;
  }
  v21 = *(_QWORD *)(v19 + 120);
  if (*(_QWORD *)(v19 + 128) == v21)
LABEL_109:
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  v22 = *(_QWORD *)(*(_QWORD *)v21 + 80);
  v23 = Espresso::zephyr::match_simple_eltwise_unaryop(v22, 3);
  if (!v23)
  {
    v23 = Espresso::zephyr::match_simple_eltwise_unaryop(v22, 1);
    if (!v23)
    {
      if (Espresso::zephyr::match_verbose)
      {
        Espresso::espresso_os_log_subsystem(0, v24);
        v40 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v40, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)v66 = 136315650;
          v67 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex_subgraph_matching.mm";
          v68 = 1024;
          v69[0] = 545;
          LOWORD(v69[1]) = 2080;
          *(_QWORD *)((char *)&v69[1] + 2) = "k_mul != nullptr";
          _os_log_impl(&dword_190DAF000, v40, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", v66, 0x1Cu);
        }
        goto LABEL_90;
      }
      return 0;
    }
  }
  if (fabsf(*(float *)((*(uint64_t (**)(void *))(*(_QWORD *)v23 + 320))(v23) + 8) + -0.70711) >= 1.0e-10)
  {
    v25 = (float *)(*(uint64_t (**)(void *))(*(_QWORD *)v23 + 320))(v23);
    if (fabsf(v25[2] + -0.70703) >= 0.0001)
    {
      if (Espresso::zephyr::match_verbose)
      {
        Espresso::espresso_os_log_subsystem((Espresso *)v25, v26);
        v40 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v40, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)v66 = 136315650;
          v67 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex_subgraph_matching.mm";
          v68 = 1024;
          v69[0] = 547;
          LOWORD(v69[1]) = 2080;
          *(_QWORD *)((char *)&v69[1] + 2) = "close_floats(k_mul->get_params().alpha, k_one_over_sqrt2) || close_floats(k"
                                             "_mul->get_params().alpha, 0.707031, 1e-4)";
          _os_log_impl(&dword_190DAF000, v40, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", v66, 0x1Cu);
        }
LABEL_90:

        return 0;
      }
      return 0;
    }
  }
  *(_QWORD *)buf = v3;
  *(_QWORD *)&buf[8] = v7;
  *(_QWORD *)&buf[16] = v13;
  *(_QWORD *)&buf[24] = v19;
  *(_QWORD *)&buf[32] = v22;
  v27 = (Espresso *)std::unordered_set<Espresso::zephyr::node_t *>::unordered_set((uint64_t)v66, (unint64_t *)buf, 5);
  v29 = *(Espresso::zephyr::value_t ***)(v22 + 120);
  if (*(Espresso::zephyr::value_t ***)(v22 + 128) == v29)
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  v30 = (char **)*((_QWORD *)v3 + 12);
  if (*((char ***)v3 + 13) == v30)
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  v31 = (Espresso::zephyr::value_t **)*((_QWORD *)v3 + 15);
  v32 = *((_QWORD *)v3 + 16) - (_QWORD)v31;
  if (!v32)
  {
LABEL_28:
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(v27, v28);
      v38 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_compl"
                             "ex_subgraph_matching.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 556;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = "mul_3->input_index(x).first";
        _os_log_impl(&dword_190DAF000, v38, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_31;
    }
    goto LABEL_32;
  }
  v33 = *v29;
  v34 = *v30;
  v35 = v32 >> 3;
  if ((unint64_t)(v32 >> 3) <= 1)
    v35 = 1;
  v36 = (Espresso::zephyr::value_t **)*((_QWORD *)v3 + 15);
  v37 = v35;
  while (*v36 != v33)
  {
    ++v36;
    if (!--v37)
      goto LABEL_28;
  }
  while (*v31 != v33)
  {
    ++v31;
    if (!--v35)
    {
      if (Espresso::zephyr::match_verbose)
      {
        Espresso::espresso_os_log_subsystem(v27, v28);
        v38 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_com"
                               "plex_subgraph_matching.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 559;
          *(_WORD *)&buf[18] = 2080;
          *(_QWORD *)&buf[20] = "mul_3->input_index(x).first";
          _os_log_impl(&dword_190DAF000, v38, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
        }
LABEL_31:

      }
LABEL_32:
      v39 = 0;
      goto LABEL_33;
    }
  }
  v41 = Espresso::zephyr::find_values_used_externally<std::unordered_set<Espresso::zephyr::node_t *>>(&v62, v66);
  if (v64 != 1 || (v43 = v63) == 0)
  {
LABEL_65:
    v39 = 0;
    goto LABEL_66;
  }
  while (1)
  {
    if (v34)
      v44 = *(_QWORD *)v34;
    else
      v44 = 0;
    v45 = (_QWORD *)v43[4];
    if (v45)
    {
      v45 = (_QWORD *)*v45;
      if (v44 < (unint64_t)v45)
        goto LABEL_64;
    }
    v46 = v34 ? *(_QWORD *)v34 : 0;
    if ((unint64_t)v45 >= v46)
      break;
    ++v43;
LABEL_64:
    v43 = (_QWORD *)*v43;
    if (!v43)
      goto LABEL_65;
  }
  Espresso::espresso_os_log_subsystem((Espresso *)v41, v42);
  v48 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v48, OS_LOG_TYPE_DEBUG))
  {
    v59 = v34 + 32;
    if (v34[55] < 0)
      v59 = (_QWORD *)*v59;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v59;
    _os_log_debug_impl(&dword_190DAF000, v48, OS_LOG_TYPE_DEBUG, "zephyr_passes::fuse_gelu_with_erf: at %s", buf, 0xCu);
  }

  __asm { FMOV            V0.2S, #1.0 }
  *(_OWORD *)&buf[4] = _D0;
  *(_OWORD *)&buf[20] = 0uLL;
  *(_DWORD *)buf = 19;
  Espresso::zephyr::make_kernel<Espresso::generic_activation_kernel,Espresso::zephyr::node_t,Espresso::activation_params>(&v60, *(_QWORD *)(*((_QWORD *)v3 + 1) + 8), (uint64_t)buf);
  v54 = Espresso::zephyr::function_t::new_detached_node(*((_QWORD *)v3 + 3), (uint64_t)v3 + 144);
  v55 = v61;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(*((_QWORD *)v54 + 1) + 8), v60, (uint64_t)v61);
  Espresso::zephyr::node_t::add_input((Espresso::zephyr::node_t *)v54, v33);
  Espresso::zephyr::node_t::add_output((Espresso::zephyr::node_t *)v54, (Espresso::zephyr::value_t *)v34);
  Espresso::zephyr::ordered_block_t::insert_node_after(**(Espresso::zephyr::ordered_block_t ***)(a1 + 8), (Espresso::zephyr::node_t *)v54, v3);
  v56 = *(uint64_t ***)((char *)v69 + 2);
  if (*(_QWORD *)((char *)v69 + 2))
  {
    do
    {
      Espresso::zephyr::node_t::remove_from_graphs((Espresso::zephyr::node_t *)v56[2]);
      v56 = (uint64_t **)*v56;
    }
    while (v56);
  }
  if (v55)
  {
    p_shared_owners = (unint64_t *)&v55->__shared_owners_;
    do
      v58 = __ldaxr(p_shared_owners);
    while (__stlxr(v58 - 1, p_shared_owners));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  v39 = 1;
LABEL_66:
  std::__tree<int>::destroy(v63);
LABEL_33:
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)v66);
  return v39;
}

void sub_19146F4EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  std::__tree<int>::destroy(a6);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<Espresso::zephyr_passes::fuse_gelu_with_erf(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fuse_gelu_with_erf(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN8Espresso13zephyr_passes18fuse_gelu_with_erfERNS_6zephyr10function_tEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<Espresso::zephyr_passes::fuse_gelu_with_erf(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fuse_gelu_with_erf(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::target_type()
{
}

void sub_19146F61C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  Espresso::zephyr::function_t::~function_t((Espresso::zephyr::function_t *)&a9);
  _Unwind_Resume(a1);
}

uint64_t Espresso::zephyr_passes::l2_normalize_5d_to_instancenorm(Espresso::zephyr_passes *this, Espresso::zephyr::function_t *a2)
{
  char *v2;
  char *v3;
  char v4;
  uint64_t v5;
  char matched;
  _QWORD *v7;
  uint64_t v8;
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = (char *)this + 64;
  v3 = (char *)*((_QWORD *)this + 9);
  if (v3 != (char *)this + 64)
  {
    v4 = 0;
    while (1)
    {
      v5 = *((_QWORD *)v3 + 2);
      v10[0] = &off_1E2DB0D18;
      v10[1] = v3 + 16;
      v11 = v10;
      matched = Espresso::zephyr::ordered_block_t::match_transform(v5, (uint64_t)v10);
      v7 = v11;
      if (v11 == v10)
        break;
      if (v11)
      {
        v8 = 5;
LABEL_7:
        (*(void (**)(void))(*v7 + 8 * v8))();
      }
      v4 |= matched;
      v3 = (char *)*((_QWORD *)v3 + 1);
      if (v3 == v2)
        return v4 & 1;
    }
    v7 = v10;
    v8 = 4;
    goto LABEL_7;
  }
  v4 = 0;
  return v4 & 1;
}

void sub_19146F714(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void std::__function::__func<Espresso::zephyr_passes::l2_normalize_5d_to_instancenorm(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::l2_normalize_5d_to_instancenorm(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<Espresso::zephyr_passes::l2_normalize_5d_to_instancenorm(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::l2_normalize_5d_to_instancenorm(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DB0D18;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<Espresso::zephyr_passes::l2_normalize_5d_to_instancenorm(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::l2_normalize_5d_to_instancenorm(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DB0D18;
  a2[1] = v2;
  return result;
}

BOOL std::__function::__func<Espresso::zephyr_passes::l2_normalize_5d_to_instancenorm(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::l2_normalize_5d_to_instancenorm(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::operator()(uint64_t a1, uint64_t *a2)
{
  unint64_t v3;
  void *v4;
  const char *v5;
  void *v6;
  Espresso *v7;
  const char *v8;
  Espresso *v9;
  const char *v10;
  int *v11;
  const char *v12;
  uint64_t v13;
  const char *v14;
  Espresso::zephyr::node_t *v15;
  const char *v16;
  uint64_t v17;
  const char *v18;
  Espresso::zephyr::node_t *v19;
  const char *v20;
  uint64_t v21;
  const char *v22;
  uint64_t *v23;
  void *v24;
  const char *v25;
  void *v26;
  Espresso *v27;
  const char *v28;
  Espresso *v29;
  const char *v30;
  int *v31;
  const char *v32;
  Espresso *v33;
  const char *v34;
  Espresso::zephyr::value_t **v35;
  uint64_t v36;
  Espresso::zephyr::value_t *v37;
  Espresso::zephyr::value_t *v38;
  Espresso *v39;
  const char *v40;
  Espresso *v41;
  const char *v42;
  Espresso *v43;
  const char *v44;
  Espresso *v45;
  const char *v46;
  Espresso *v47;
  const char *v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  int v53;
  int v54;
  NSObject *v55;
  _BOOL8 v56;
  NSObject *v58;
  _QWORD *v59;
  unint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  int v65;
  Espresso::zephyr::value_t **v66;
  void *v67;
  float *v68;
  Espresso *v69;
  const char *v70;
  uint64_t v71;
  char *v72;
  uint64_t **i;
  NSObject *v74;
  std::__shared_weak_count *v75;
  unint64_t *p_shared_owners;
  unint64_t v77;
  Espresso::zephyr::value_t *v78;
  uint64_t v79;
  std::__shared_weak_count *v80;
  uint64_t *v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84[2];
  uint64_t **v85;
  _BYTE buf[32];
  Espresso::zephyr::node_t *v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;

  v90 = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  v4 = Espresso::zephyr::cast_kernel<Espresso::generic_reshape_kernel>(*a2);
  if (!v4)
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(0, v5);
      v55 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v55, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_compl"
                             "ex_subgraph_matching.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 611;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = "reshape_kernel != nullptr";
        _os_log_impl(&dword_190DAF000, v55, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_78;
    }
    return 0;
  }
  v6 = v4;
  v7 = (Espresso *)(*(uint64_t (**)(void *))(*(_QWORD *)v4 + 320))(v4);
  if (*((_DWORD *)v7 + 2) != 1)
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(v7, v8);
      v55 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v55, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_compl"
                             "ex_subgraph_matching.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 612;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = "reshape_kernel->get_params().dst_k == 1";
        _os_log_impl(&dword_190DAF000, v55, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_78;
    }
    return 0;
  }
  v9 = (Espresso *)(*(uint64_t (**)(void *))(*(_QWORD *)v6 + 320))(v6);
  if (*((_DWORD *)v9 + 3) != 1)
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(v9, v10);
      v55 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v55, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_compl"
                             "ex_subgraph_matching.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 613;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = "reshape_kernel->get_params().dst_n == 1";
        _os_log_impl(&dword_190DAF000, v55, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_78;
    }
    return 0;
  }
  v11 = (int *)(*(uint64_t (**)(void *))(*(_QWORD *)v6 + 320))(v6);
  if (v11[4] >= 2)
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem((Espresso *)v11, v12);
      v55 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v55, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_compl"
                             "ex_subgraph_matching.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 614;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = "reshape_kernel->get_params().dst_seq <= 1";
        _os_log_impl(&dword_190DAF000, v55, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_78;
    }
    return 0;
  }
  v13 = *(_QWORD *)(**(_QWORD **)(v3 + 120) + 80);
  if (!Espresso::zephyr::match_simple_eltwise_binop(v13, 0))
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(0, v14);
      v55 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v55, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_compl"
                             "ex_subgraph_matching.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 617;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = "match_simple_eltwise_binop(beta_add, ELEMENTWISE_OPERATION_ADD)";
        _os_log_impl(&dword_190DAF000, v55, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_78;
    }
    return 0;
  }
  v15 = *(Espresso::zephyr::node_t **)(*(_QWORD *)(*(_QWORD *)(v13 + 120) + 8) + 80);
  if (!Espresso::zephyr::cast_kernel<Espresso::generic_load_constant_kernel>((uint64_t)v15))
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(0, v16);
      v55 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v55, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_compl"
                             "ex_subgraph_matching.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 620;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = "zephyr::cast_kernel<generic_load_constant_kernel>(beta_read)";
        _os_log_impl(&dword_190DAF000, v55, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_78;
    }
    return 0;
  }
  v17 = *(_QWORD *)(**(_QWORD **)(v13 + 120) + 80);
  if (!Espresso::zephyr::match_simple_eltwise_binop(v17, 1u))
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(0, v18);
      v55 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v55, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_compl"
                             "ex_subgraph_matching.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 623;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = "match_simple_eltwise_binop(gamma_mul, ELEMENTWISE_OPERATION_MUL)";
        _os_log_impl(&dword_190DAF000, v55, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_78;
    }
    return 0;
  }
  v19 = *(Espresso::zephyr::node_t **)(*(_QWORD *)(*(_QWORD *)(v17 + 120) + 8) + 80);
  if (!Espresso::zephyr::cast_kernel<Espresso::generic_load_constant_kernel>((uint64_t)v19))
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(0, v20);
      v55 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v55, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_compl"
                             "ex_subgraph_matching.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 626;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = "zephyr::cast_kernel<generic_load_constant_kernel>(gamma_read)";
        _os_log_impl(&dword_190DAF000, v55, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_78;
    }
    return 0;
  }
  v21 = *(_QWORD *)(**(_QWORD **)(v17 + 120) + 80);
  if (!Espresso::zephyr::cast_kernel<Espresso::generic_l2_normalize_kernel>(v21))
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(0, v22);
      v55 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v55, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_compl"
                             "ex_subgraph_matching.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 629;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = "zephyr::cast_kernel<generic_l2_normalize_kernel>(l2_normalize)";
        _os_log_impl(&dword_190DAF000, v55, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_78;
    }
    return 0;
  }
  v23 = *(uint64_t **)(**(_QWORD **)(v21 + 120) + 80);
  v24 = Espresso::zephyr::cast_kernel<Espresso::generic_reshape_kernel>((uint64_t)v23);
  if (!v24)
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(0, v25);
      v55 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v55, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_compl"
                             "ex_subgraph_matching.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 633;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = "reshape2_kernel";
        _os_log_impl(&dword_190DAF000, v55, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_78;
    }
    return 0;
  }
  v26 = v24;
  v27 = (Espresso *)(*(uint64_t (**)(void *))(*(_QWORD *)v24 + 320))(v24);
  if (*(_DWORD *)v27 != 1)
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(v27, v28);
      v55 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v55, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_compl"
                             "ex_subgraph_matching.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 634;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = "reshape2_kernel->get_params().dst_w == 1";
        _os_log_impl(&dword_190DAF000, v55, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_78;
    }
    return 0;
  }
  v29 = (Espresso *)(*(uint64_t (**)(void *))(*(_QWORD *)v26 + 320))(v26);
  if (*((_DWORD *)v29 + 1) != 1)
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(v29, v30);
      v55 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v55, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_compl"
                             "ex_subgraph_matching.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 635;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = "reshape2_kernel->get_params().dst_h == 1";
        _os_log_impl(&dword_190DAF000, v55, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_78;
    }
    return 0;
  }
  v31 = (int *)(*(uint64_t (**)(void *))(*(_QWORD *)v26 + 320))(v26);
  if (v31[4] >= 2)
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem((Espresso *)v31, v32);
      v55 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v55, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_compl"
                             "ex_subgraph_matching.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 636;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = "reshape2_kernel->get_params().dst_seq <= 1";
        _os_log_impl(&dword_190DAF000, v55, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
LABEL_78:

      return 0;
    }
    return 0;
  }
  *(_QWORD *)buf = v3;
  *(_QWORD *)&buf[8] = v13;
  *(_QWORD *)&buf[16] = v15;
  *(_QWORD *)&buf[24] = v17;
  v87 = v19;
  v88 = v21;
  v89 = v23;
  v33 = (Espresso *)std::unordered_set<Espresso::zephyr::node_t *>::unordered_set((uint64_t)v84, (unint64_t *)buf, 7);
  v35 = *(Espresso::zephyr::value_t ***)(v3 + 96);
  if (*(Espresso::zephyr::value_t ***)(v3 + 104) == v35)
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  v36 = v23[15];
  if (v23[16] == v36)
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  v37 = *(Espresso::zephyr::value_t **)v36;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v36 + 8) + 8))
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(v33, v34);
      v58 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v58, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_compl"
                             "ex_subgraph_matching.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 646;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = "ec(x)->shape";
        _os_log_impl(&dword_190DAF000, v58, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_108;
    }
    goto LABEL_109;
  }
  v38 = *v35;
  if (!*(_QWORD *)(*((_QWORD *)v38 + 1) + 8))
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(v33, v34);
      v58 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v58, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_compl"
                             "ex_subgraph_matching.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 647;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = "ec(y)->shape";
        _os_log_impl(&dword_190DAF000, v58, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_108;
    }
    goto LABEL_109;
  }
  v78 = v38;
  v39 = (Espresso *)(*(uint64_t (**)(void *))(*(_QWORD *)v6 + 320))(v6);
  if (*(_DWORD *)v39 != **(_DWORD **)(*((_QWORD *)v37 + 1) + 8))
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(v39, v40);
      v58 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v58, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_compl"
                             "ex_subgraph_matching.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 648;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = "reshape_kernel->get_params().dst_w == ec(x)->shape->w";
        _os_log_impl(&dword_190DAF000, v58, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_108;
    }
    goto LABEL_109;
  }
  v41 = (Espresso *)(*(uint64_t (**)(void *))(*(_QWORD *)v6 + 320))(v6);
  if (*((_DWORD *)v41 + 1) != *(_DWORD *)(*(_QWORD *)(*((_QWORD *)v37 + 1) + 8) + 4))
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(v41, v42);
      v58 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v58, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_compl"
                             "ex_subgraph_matching.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 649;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = "reshape_kernel->get_params().dst_h == ec(x)->shape->h";
        _os_log_impl(&dword_190DAF000, v58, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_108;
    }
    goto LABEL_109;
  }
  v43 = (Espresso *)(*(uint64_t (**)(void *))(*(_QWORD *)v6 + 320))(v6);
  if (*((_DWORD *)v43 + 2) != *(_DWORD *)(*(_QWORD *)(*((_QWORD *)v37 + 1) + 8) + 8))
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(v43, v44);
      v58 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v58, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_compl"
                             "ex_subgraph_matching.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 650;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = "reshape_kernel->get_params().dst_k == ec(x)->shape->k";
        _os_log_impl(&dword_190DAF000, v58, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_108;
    }
    goto LABEL_109;
  }
  v45 = (Espresso *)(*(uint64_t (**)(void *))(*(_QWORD *)v6 + 320))(v6);
  if (*((_DWORD *)v45 + 3) != *(_DWORD *)(*(_QWORD *)(*((_QWORD *)v37 + 1) + 8) + 12))
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(v45, v46);
      v58 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v58, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_compl"
                             "ex_subgraph_matching.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 651;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = "reshape_kernel->get_params().dst_n == ec(x)->shape->n";
        _os_log_impl(&dword_190DAF000, v58, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_108;
    }
LABEL_109:
    v56 = 0;
    goto LABEL_110;
  }
  v47 = (Espresso *)(*(uint64_t (**)(void *))(*(_QWORD *)v6 + 320))(v6);
  v49 = *((_DWORD *)v47 + 4);
  v50 = *(_QWORD *)(*((_QWORD *)v37 + 1) + 8);
  if (v49 != *(_DWORD *)(v50 + 16))
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(v47, v48);
      v58 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v58, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_compl"
                             "ex_subgraph_matching.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 652;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = "reshape_kernel->get_params().dst_seq == ec(x)->shape->seq";
        _os_log_impl(&dword_190DAF000, v58, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
LABEL_108:

      goto LABEL_109;
    }
    goto LABEL_109;
  }
  v51 = *(_QWORD *)(*((_QWORD *)v78 + 1) + 8);
  v52 = *(_DWORD *)(v51 + 20);
  if (v52 == -1)
  {
    if (*(_DWORD *)(v51 + 16) == 1)
      v52 = 4;
    else
      v52 = 5;
    v53 = *(_DWORD *)(v50 + 20);
    if (v49 == 1)
      v54 = 4;
    else
      v54 = 5;
  }
  else
  {
    v53 = *(_DWORD *)(v50 + 20);
    if (v49 == 1)
      v54 = 4;
    else
      v54 = 5;
  }
  if (v53 != -1)
    v54 = v53;
  if (v52 != v54 && v52 != v54 + 1)
  {
    if (!Espresso::zephyr::match_verbose)
      goto LABEL_109;
    Espresso::espresso_os_log_subsystem(v47, v48);
    v58 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v58, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 656;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "ec(y)->shape->rank() == ec(x)->shape->rank() || ec(y)->shape->rank() == ec(x)->shape->rank() + 1";
      _os_log_impl(&dword_190DAF000, v58, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_108;
  }
  Espresso::zephyr::find_values_used_externally<std::unordered_set<Espresso::zephyr::node_t *>>(&v81, v84);
  if (v83 != 1 || (v59 = v82) == 0)
  {
LABEL_129:
    v56 = 0;
    goto LABEL_130;
  }
  v60 = *(_QWORD *)v78;
  while (1)
  {
    v61 = (_QWORD *)v59[4];
    if (v61)
    {
      v61 = (_QWORD *)*v61;
      if (v60 < (unint64_t)v61)
        goto LABEL_128;
    }
    if ((unint64_t)v61 >= v60)
      break;
    ++v59;
LABEL_128:
    v59 = (_QWORD *)*v59;
    if (!v59)
      goto LABEL_129;
  }
  v62 = *(_QWORD *)(*((_QWORD *)v78 + 1) + 8);
  v63 = *(_DWORD *)(v62 + 20);
  if (v63 == -1)
  {
    if (*(_DWORD *)(v62 + 16) == 1)
      v63 = 4;
    else
      v63 = 5;
  }
  v64 = *(_QWORD *)(*((_QWORD *)v37 + 1) + 8);
  v65 = *(_DWORD *)(v64 + 20);
  if (v65 == -1)
  {
    if (*(_DWORD *)(v64 + 16) == 1)
      v65 = 4;
    else
      v65 = 5;
  }
  if (v63 == v65 + 1)
  {
    std::__hash_table<Espresso::zephyr::node_t *,std::hash<Espresso::zephyr::node_t *>,std::equal_to<Espresso::zephyr::node_t *>,std::allocator<Espresso::zephyr::node_t *>>::__erase_unique<Espresso::zephyr::node_t *>(v84, v3);
    v66 = *(Espresso::zephyr::value_t ***)(v3 + 120);
    if (*(Espresso::zephyr::value_t ***)(v3 + 128) == v66)
      std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
    v78 = *v66;
  }
  v67 = Espresso::zephyr::cast_kernel<Espresso::generic_l2_normalize_kernel>(v21);
  v68 = (float *)(*(uint64_t (**)(void *))(*(_QWORD *)v67 + 320))(v67);
  Espresso::zephyr_passes::create_instancenorm_kenel((Espresso::zephyr_passes *)&v79, v19, v15, *v68);
  v71 = v79;
  v56 = v79 != 0;
  if (v79)
  {
    v72 = Espresso::zephyr::function_t::new_detached_node(v23[3], (uint64_t)(v23 + 18));
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(*((_QWORD *)v72 + 1) + 8), v71, (uint64_t)v80);
    Espresso::zephyr::node_t::add_input((Espresso::zephyr::node_t *)v72, v37);
    Espresso::zephyr::node_t::add_output((Espresso::zephyr::node_t *)v72, v78);
    Espresso::zephyr::ordered_block_t::insert_node_after(**(Espresso::zephyr::ordered_block_t ***)(a1 + 8), (Espresso::zephyr::node_t *)v72, (Espresso::zephyr::node_t *)v23);
    for (i = v85; i; i = (uint64_t **)*i)
      Espresso::zephyr::node_t::remove_from_graphs((Espresso::zephyr::node_t *)i[2]);
  }
  else if (Espresso::zephyr::match_verbose)
  {
    Espresso::espresso_os_log_subsystem(v69, v70);
    v74 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v74, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 672;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "instancenorm_kernel";
      _os_log_impl(&dword_190DAF000, v74, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }

  }
  v75 = v80;
  if (v80)
  {
    p_shared_owners = (unint64_t *)&v80->__shared_owners_;
    do
      v77 = __ldaxr(p_shared_owners);
    while (__stlxr(v77 - 1, p_shared_owners));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
LABEL_130:
  std::__tree<int>::destroy(v82);
LABEL_110:
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)v84);
  return v56;
}

void sub_1914708E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  std::__tree<int>::destroy(a7);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<Espresso::zephyr_passes::l2_normalize_5d_to_instancenorm(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::l2_normalize_5d_to_instancenorm(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN8Espresso13zephyr_passes31l2_normalize_5d_to_instancenormERNS_6zephyr10function_tEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<Espresso::zephyr_passes::l2_normalize_5d_to_instancenorm(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::l2_normalize_5d_to_instancenorm(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::target_type()
{
}

void *Espresso::zephyr::cast_kernel<Espresso::generic_reshape_kernel>(uint64_t a1)
{
  uint64_t v1;
  const void *v2;
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;

  if (!a1)
    return 0;
  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(const void **)(v1 + 8);
  if (!v2)
    return 0;
  if (v3)
  {
    v4 = *(std::__shared_weak_count **)(v1 + 16);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  return v3;
}

void *Espresso::zephyr::cast_kernel<Espresso::generic_l2_normalize_kernel>(uint64_t a1)
{
  uint64_t v1;
  const void *v2;
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;

  if (!a1)
    return 0;
  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(const void **)(v1 + 8);
  if (!v2)
    return 0;
  if (v3)
  {
    v4 = *(std::__shared_weak_count **)(v1 + 16);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  return v3;
}

void std::__hash_table<Espresso::zephyr::node_t *,std::hash<Espresso::zephyr::node_t *>,std::equal_to<Espresso::zephyr::node_t *>,std::allocator<Espresso::zephyr::node_t *>>::__erase_unique<Espresso::zephyr::node_t *>(uint64_t *a1, unint64_t a2)
{
  int8x8_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint8x8_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;

  v2 = (int8x8_t)a1[1];
  if (v2)
  {
    v3 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
    v4 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v3 >> 47) ^ v3);
    v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
    v6 = (uint8x8_t)vcnt_s8(v2);
    v6.i16[0] = vaddlv_u8(v6);
    if (v6.u32[0] > 1uLL)
    {
      v7 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
      if (v5 >= *(_QWORD *)&v2)
        v7 = v5 % *(_QWORD *)&v2;
    }
    else
    {
      v7 = v5 & (*(_QWORD *)&v2 - 1);
    }
    v8 = *a1;
    v9 = *(uint64_t ***)(*a1 + 8 * v7);
    if (v9)
    {
      v10 = *v9;
      if (v10)
      {
        v11 = *(_QWORD *)&v2 - 1;
        do
        {
          v12 = v10[1];
          if (v12 == v5)
          {
            if (v10[2] == a2)
            {
              if (v6.u32[0] > 1uLL)
              {
                if (v5 >= *(_QWORD *)&v2)
                  v5 %= *(_QWORD *)&v2;
              }
              else
              {
                v5 &= v11;
              }
              v13 = *(uint64_t **)(v8 + 8 * v5);
              do
              {
                v14 = v13;
                v13 = (uint64_t *)*v13;
              }
              while (v13 != v10);
              if (v14 == a1 + 2)
                goto LABEL_36;
              v15 = v14[1];
              if (v6.u32[0] > 1uLL)
              {
                if (v15 >= *(_QWORD *)&v2)
                  v15 %= *(_QWORD *)&v2;
              }
              else
              {
                v15 &= v11;
              }
              if (v15 != v5)
              {
LABEL_36:
                if (!*v10)
                  goto LABEL_37;
                v16 = *(_QWORD *)(*v10 + 8);
                if (v6.u32[0] > 1uLL)
                {
                  if (v16 >= *(_QWORD *)&v2)
                    v16 %= *(_QWORD *)&v2;
                }
                else
                {
                  v16 &= v11;
                }
                if (v16 != v5)
LABEL_37:
                  *(_QWORD *)(v8 + 8 * v5) = 0;
              }
              v17 = *v10;
              if (*v10)
              {
                v18 = *(_QWORD *)(v17 + 8);
                if (v6.u32[0] > 1uLL)
                {
                  if (v18 >= *(_QWORD *)&v2)
                    v18 %= *(_QWORD *)&v2;
                }
                else
                {
                  v18 &= v11;
                }
                if (v18 != v5)
                {
                  *(_QWORD *)(*a1 + 8 * v18) = v14;
                  v17 = *v10;
                }
              }
              *v14 = v17;
              *v10 = 0;
              --a1[3];
              operator delete(v10);
              return;
            }
          }
          else
          {
            if (v6.u32[0] > 1uLL)
            {
              if (v12 >= *(_QWORD *)&v2)
                v12 %= *(_QWORD *)&v2;
            }
            else
            {
              v12 &= v11;
            }
            if (v12 != v7)
              return;
          }
          v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
    }
  }
}

void sub_191470D3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  Espresso::zephyr::function_t::~function_t((Espresso::zephyr::function_t *)&a9);
  _Unwind_Resume(a1);
}

uint64_t Espresso::zephyr_passes::merge_channel_norm(Espresso::zephyr_passes *this, Espresso::zephyr::function_t *a2)
{
  char *v2;
  char *v3;
  char v4;
  uint64_t v5;
  char matched;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v14;
  _QWORD v15[3];
  _QWORD *v16;
  _QWORD v17[3];
  _QWORD *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v2 = (char *)this + 64;
  v3 = (char *)*((_QWORD *)this + 9);
  if (v3 != (char *)this + 64)
  {
    v4 = 0;
    while (1)
    {
      v5 = *((_QWORD *)v3 + 2);
      v14 = v3 + 16;
      v17[0] = &off_1E2DB08A0;
      v17[1] = v3 + 16;
      v17[2] = &v14;
      v18 = v17;
      matched = Espresso::zephyr::ordered_block_t::match_transform(v5, (uint64_t)v17);
      v7 = v18;
      if (v18 == v17)
      {
        v7 = v17;
        v8 = 4;
      }
      else
      {
        if (!v18)
          goto LABEL_8;
        v8 = 5;
      }
      (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_8:
      v9 = *((_QWORD *)v3 + 2);
      v15[0] = &off_1E2DB08F8;
      v15[1] = v3 + 16;
      v15[2] = &v14;
      v16 = v15;
      v10 = Espresso::zephyr::ordered_block_t::match_transform(v9, (uint64_t)v15);
      v11 = v16;
      if (v16 == v15)
      {
        v11 = v15;
        v12 = 4;
        goto LABEL_12;
      }
      if (v16)
      {
        v12 = 5;
LABEL_12:
        (*(void (**)(void))(*v11 + 8 * v12))();
      }
      v4 |= matched | v10;
      v3 = (char *)*((_QWORD *)v3 + 1);
      if (v3 == v2)
        return v4 & 1;
    }
  }
  v4 = 0;
  return v4 & 1;
}

void sub_191470EA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  char *v18;
  uint64_t v19;

  v18 = a13;
  if (a13 == &a10)
  {
    v19 = 4;
    v18 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void std::__function::__func<Espresso::zephyr_passes::merge_channel_norm(Espresso::zephyr::function_t &)::$_2,std::allocator<Espresso::zephyr_passes::merge_channel_norm(Espresso::zephyr::function_t &)::$_2>,BOOL ()(Espresso::zephyr::node_t *)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

__n128 std::__function::__func<Espresso::zephyr_passes::merge_channel_norm(Espresso::zephyr::function_t &)::$_2,std::allocator<Espresso::zephyr_passes::merge_channel_norm(Espresso::zephyr::function_t &)::$_2>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DB08F8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<Espresso::zephyr_passes::merge_channel_norm(Espresso::zephyr::function_t &)::$_2,std::allocator<Espresso::zephyr_passes::merge_channel_norm(Espresso::zephyr::function_t &)::$_2>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DB08F8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<Espresso::zephyr_passes::merge_channel_norm(Espresso::zephyr::function_t &)::$_2,std::allocator<Espresso::zephyr_passes::merge_channel_norm(Espresso::zephyr::function_t &)::$_2>,BOOL ()(Espresso::zephyr::node_t *)>::operator()(Espresso::zephyr::ordered_block_t ****a1, const char *a2)
{
  _QWORD *v2;
  const char *v4;
  void *v5;
  Espresso *constant;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v19;
  const char *v20;
  void *v21;
  Espresso *matched;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  NSObject *v31;
  uint64_t v32;
  void *v33;
  const char *v34;
  float *v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  void *v41;
  const char *v42;
  float *v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v49;
  Espresso *v50;
  const char *v51;
  uint64_t v52;
  void *v53;
  const char *v54;
  Espresso *v55;
  const char *v56;
  uint64_t v58;
  void *v59;
  const char *v60;
  uint64_t v61;
  const char *isa;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t v67;
  uint64_t v68;
  size_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  const void **v73;
  uint64_t v74;
  uint64_t v75;
  NSObject *v77;
  uint64_t v78;
  objc_class *v79;
  Class isa_high;
  int v81;
  const void **v82;
  uint64_t v83;
  int v84;
  int v85;
  int v86;
  int v87;
  BOOL v89;
  _BOOL4 v90;
  objc_class *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  size_t v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  const void **v100;
  uint64_t **v101;
  const char *v102;
  unint64_t **v103;
  _QWORD *v104;
  unint64_t *v105;
  unint64_t v106;
  _QWORD *v107;
  unint64_t v108;
  NSObject *v109;
  _BOOL8 v110;
  const char *v111;
  uint64_t v112;
  uint64_t v113;
  os_log_t log;
  NSObject *loga;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  uint64_t *v120;
  _QWORD *v121;
  uint64_t v122;
  _QWORD v123[5];
  _BYTE buf[32];
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  _QWORD *v130;
  uint64_t v131;
  os_log_t v132;
  uint64_t v133;

  v133 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD **)a2;
  if (*(_QWORD *)(*(_QWORD *)a2 + 104) - *(_QWORD *)(*(_QWORD *)a2 + 96) != 8)
  {
    if (!Espresso::zephyr::match_verbose)
      return 0;
    Espresso::espresso_os_log_subsystem((Espresso *)a1, a2);
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1036;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "add_0->outputs().size() == 1";
      _os_log_impl(&dword_190DAF000, v11, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_44;
  }
  if (v2[16] - v2[15] != 16)
  {
    if (!Espresso::zephyr::match_verbose)
      return 0;
    Espresso::espresso_os_log_subsystem((Espresso *)a1, a2);
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1037;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "add_0->inputs().size() == 2";
      _os_log_impl(&dword_190DAF000, v11, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_44;
  }
  if (!Espresso::zephyr::match_simple_eltwise_binop(*(_QWORD *)a2, 0))
  {
    if (!Espresso::zephyr::match_verbose)
      return 0;
    Espresso::espresso_os_log_subsystem(0, v4);
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1039;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "match_simple_eltwise_binop(add_0, ELEMENTWISE_OPERATION_ADD)";
      _os_log_impl(&dword_190DAF000, v11, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_44;
  }
  v5 = Espresso::zephyr::cast_kernel<Espresso::generic_elementwise_kernel>((uint64_t)v2);
  constant = (Espresso *)(*(uint64_t (**)(void *))(*(_QWORD *)v5 + 320))(v5);
  if (!*((_BYTE *)constant + 24))
  {
    if (!Espresso::zephyr::match_verbose)
      return 0;
    Espresso::espresso_os_log_subsystem(constant, v7);
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1041;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "zephyr::cast_kernel<generic_elementwise_kernel>(add_0)->get_params().nd_mode";
      _os_log_impl(&dword_190DAF000, v11, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_44;
  }
  v8 = v2[15];
  v9 = v2[16];
  while (1)
  {
    if (v8 == v9)
      goto LABEL_41;
    if (*(_QWORD *)v8)
    {
      v10 = *(_QWORD *)(*(_QWORD *)v8 + 80);
      constant = (Espresso *)Espresso::zephyr::cast_kernel<Espresso::generic_load_constant_kernel>(v10);
      if (constant)
        break;
    }
    v8 += 8;
  }
  if (!v10)
  {
LABEL_41:
    if (!Espresso::zephyr::match_verbose)
      return 0;
    Espresso::espresso_os_log_subsystem(constant, v7);
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1047;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "beta";
      _os_log_impl(&dword_190DAF000, v11, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_44;
  }
  v12 = v2[15];
  v13 = v2[16];
  if (v12 == v13)
  {
LABEL_37:
    if (!Espresso::zephyr::match_verbose)
      return 0;
    Espresso::espresso_os_log_subsystem(constant, v7);
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1057;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "div_0";
      _os_log_impl(&dword_190DAF000, v11, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_44;
  }
  while (1)
  {
    if (*(_QWORD *)v12)
    {
      v14 = *(_QWORD *)(*(_QWORD *)v12 + 80);
      constant = (Espresso *)Espresso::zephyr::match_simple_eltwise_binop(v14, 0x66u);
      if (!constant)
      {
        if (Espresso::zephyr::match_verbose)
        {
          Espresso::espresso_os_log_subsystem(0, v7);
          v16 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 136315650;
            *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_c"
                                 "omplex_subgraph_matching.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1050;
            *(_WORD *)&buf[18] = 2080;
            *(_QWORD *)&buf[20] = "match_simple_eltwise_binop(div_0, ELEMENTWISE_OPERATION_DIV)";
            _os_log_impl(&dword_190DAF000, v16, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
          }

        }
        goto LABEL_36;
      }
      v15 = Espresso::zephyr::cast_kernel<Espresso::generic_elementwise_kernel>(v14);
      constant = (Espresso *)(*(uint64_t (**)(void *))(*(_QWORD *)v15 + 320))(v15);
      if (*((_BYTE *)constant + 24))
        break;
    }
LABEL_36:
    v12 += 8;
    if (v12 == v13)
      goto LABEL_37;
  }
  if (!v14)
    goto LABEL_37;
  v19 = *(_QWORD *)(**(_QWORD **)(v14 + 120) + 80);
  if (!Espresso::zephyr::match_simple_eltwise_binop(v19, 1u))
  {
    if (!Espresso::zephyr::match_verbose)
      return 0;
    Espresso::espresso_os_log_subsystem(0, v20);
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1060;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "match_simple_eltwise_binop(mul_0, ELEMENTWISE_OPERATION_MUL)";
      _os_log_impl(&dword_190DAF000, v11, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_44;
  }
  v21 = Espresso::zephyr::cast_kernel<Espresso::generic_elementwise_kernel>(v19);
  matched = (Espresso *)(*(uint64_t (**)(void *))(*(_QWORD *)v21 + 320))(v21);
  if (!*((_BYTE *)matched + 24))
  {
    if (!Espresso::zephyr::match_verbose)
      return 0;
    Espresso::espresso_os_log_subsystem(matched, v23);
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1063;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "zephyr::cast_kernel<generic_elementwise_kernel>(mul_0)->get_params().nd_mode == true";
      _os_log_impl(&dword_190DAF000, v11, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_44;
  }
  v24 = *(_QWORD *)(v19 + 120);
  v25 = *(_QWORD *)(v19 + 128);
  while (1)
  {
    if (v24 == v25)
      goto LABEL_78;
    if (*(_QWORD *)v24)
    {
      v26 = *(_QWORD *)(*(_QWORD *)v24 + 80);
      matched = (Espresso *)Espresso::zephyr::cast_kernel<Espresso::generic_load_constant_kernel>(v26);
      if (matched)
        break;
    }
    v24 += 8;
  }
  if (!v26)
  {
LABEL_78:
    if (!Espresso::zephyr::match_verbose)
      return 0;
    Espresso::espresso_os_log_subsystem(matched, v23);
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1068;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "gamma";
      _os_log_impl(&dword_190DAF000, v11, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_44;
  }
  v28 = *(_QWORD *)(v19 + 120);
  v27 = *(_QWORD *)(v19 + 128);
  if (v28 == v27)
  {
LABEL_74:
    if (!Espresso::zephyr::match_verbose)
      return 0;
    Espresso::espresso_os_log_subsystem(matched, v23);
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1078;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "sub_0";
      _os_log_impl(&dword_190DAF000, v11, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_44;
  }
  while (2)
  {
    if (!*(_QWORD *)v28)
    {
LABEL_73:
      v28 += 8;
      if (v28 == v27)
        goto LABEL_74;
      continue;
    }
    break;
  }
  v29 = *(_QWORD *)(*(_QWORD *)v28 + 80);
  matched = (Espresso *)Espresso::zephyr::match_simple_eltwise_binop(v29, 0x21u);
  if (!matched)
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(0, v23);
      v31 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_compl"
                             "ex_subgraph_matching.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1072;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = "match_simple_eltwise_binop(sub_0, ELEMENTWISE_OPERATION_SUBTRACT)";
        _os_log_impl(&dword_190DAF000, v31, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }

    }
    goto LABEL_73;
  }
  v30 = Espresso::zephyr::cast_kernel<Espresso::generic_elementwise_kernel>(v29);
  matched = (Espresso *)(*(uint64_t (**)(void *))(*(_QWORD *)v30 + 320))(v30);
  if (!*((_BYTE *)matched + 24))
    goto LABEL_73;
  if (!v29)
    goto LABEL_74;
  v32 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v14 + 120) + 8) + 80);
  v33 = Espresso::zephyr::cast_kernel<Espresso::generic_elementwise_kernel>(v32);
  if (!v33)
  {
    if (!Espresso::zephyr::match_verbose)
      return 0;
    Espresso::espresso_os_log_subsystem(0, v34);
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1082;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "std_0_k";
      _os_log_impl(&dword_190DAF000, v11, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_44;
  }
  v35 = (float *)(*(uint64_t (**)(void *))(*(_QWORD *)v33 + 320))(v33);
  v37 = *(_QWORD *)(v32 + 120);
  v38 = *(_QWORD *)(v32 + 128);
  v39 = v38 - v37 == 8 && *(_DWORD *)v35 == 0;
  if (!v39 || v35[4] <= 0.0)
  {
    if (!Espresso::zephyr::match_verbose)
      return 0;
    Espresso::espresso_os_log_subsystem((Espresso *)v35, v36);
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1086;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "std_0->inputs().size() == 1 && std_0_p.operation == ELEMENTWISE_OPERATION_ADD && std_0_p.eps > 0.0f";
      _os_log_impl(&dword_190DAF000, v11, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_44;
  }
  if (v38 == v37)
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  v40 = *(_QWORD *)(*(_QWORD *)v37 + 80);
  v41 = Espresso::zephyr::cast_kernel<Espresso::generic_elementwise_kernel>(v40);
  if (!v41)
  {
    if (!Espresso::zephyr::match_verbose)
      return 0;
    Espresso::espresso_os_log_subsystem(0, v42);
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1090;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "mul_1_k";
      _os_log_impl(&dword_190DAF000, v11, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_44;
  }
  v43 = (float *)(*(uint64_t (**)(void *))(*(_QWORD *)v41 + 320))(v41);
  v45 = *(_QWORD *)(v40 + 120);
  v46 = *(_QWORD *)(v40 + 128);
  if (v46 - v45 != 8 || *(_DWORD *)v43 != 1 || v43[2] <= 1.0)
  {
    if (!Espresso::zephyr::match_verbose)
      return 0;
    Espresso::espresso_os_log_subsystem((Espresso *)v43, v44);
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1094;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "mul_1->inputs().size() == 1 && mul_1_p.operation == ELEMENTWISE_OPERATION_MUL && mul_1_p.alpha > 1.0f";
      _os_log_impl(&dword_190DAF000, v11, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_44;
  }
  if (v46 == v45)
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  v49 = *(_QWORD *)(*(_QWORD *)v45 + 80);
  v50 = (Espresso *)Espresso::zephyr::match_simple_eltwise_unaryop(v49, 11);
  if (!v50)
  {
    if (!Espresso::zephyr::match_verbose)
      return 0;
    Espresso::espresso_os_log_subsystem(0, v51);
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1097;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "match_simple_eltwise_unaryop(sqrt_0, ELEMENTWISE_OPERATION_SQRT)";
      _os_log_impl(&dword_190DAF000, v11, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_44;
  }
  v52 = *(_QWORD *)(v49 + 120);
  if (*(_QWORD *)(v49 + 128) == v52)
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  v119 = *(_QWORD **)(*(_QWORD *)v52 + 80);
  if (v119[16] - v119[15] != 8)
  {
    if (!Espresso::zephyr::match_verbose)
      return 0;
    Espresso::espresso_os_log_subsystem(v50, v51);
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1101;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "mean_1->inputs().size() == 1";
      _os_log_impl(&dword_190DAF000, v11, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_44;
  }
  if (v119[13] - v119[12] != 8)
  {
    if (!Espresso::zephyr::match_verbose)
      return 0;
    Espresso::espresso_os_log_subsystem(v50, v51);
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1102;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "mean_1->outputs().size() == 1";
      _os_log_impl(&dword_190DAF000, v11, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_44;
  }
  v53 = Espresso::zephyr::cast_kernel<Espresso::generic_reduce_kernel>((uint64_t)v119);
  if (!v53)
  {
    if (!Espresso::zephyr::match_verbose)
      return 0;
    Espresso::espresso_os_log_subsystem(0, v54);
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1104;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "mean_1_k";
      _os_log_impl(&dword_190DAF000, v11, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_44;
  }
  v55 = (Espresso *)(*(uint64_t (**)(void *))(*(_QWORD *)v53 + 320))(v53);
  if (*(_DWORD *)v55 != 1 || *((_DWORD *)v55 + 2) != 2)
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(v55, v56);
      v11 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_compl"
                             "ex_subgraph_matching.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1107;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = "mean_1_p.mode == REDUCE_MODE_AVG && mean_1_p.axis_mode == REDUCE_AXIS_Y";
        _os_log_impl(&dword_190DAF000, v11, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_44;
    }
    return 0;
  }
  v58 = v119[15];
  if (v119[16] == v58)
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  v112 = *(_QWORD *)(*(_QWORD *)v58 + 80);
  v59 = Espresso::zephyr::cast_kernel<Espresso::generic_elementwise_kernel>(v112);
  if (!v59)
  {
    if (!Espresso::zephyr::match_verbose)
      return 0;
    Espresso::espresso_os_log_subsystem(0, v60);
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1111;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "square_0_k";
      _os_log_impl(&dword_190DAF000, v11, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_44;
  }
  v61 = (*(uint64_t (**)(void *))(*(_QWORD *)v59 + 320))(v59);
  v63 = *(uint64_t **)(v112 + 120);
  v64 = *(uint64_t **)(v112 + 128);
  if ((char *)v64 - (char *)v63 != 8 || *(_DWORD *)v61 != 13 || *(float *)(v61 + 8) != 2.0)
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem((Espresso *)v61, isa);
      v11 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_compl"
                             "ex_subgraph_matching.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1115;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = "square_0->inputs().size() == 1 && square_0_p.operation == ELEMENTWISE_OPERATION_POW && squ"
                              "are_0_p.alpha == 2.0f";
        _os_log_impl(&dword_190DAF000, v11, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_44;
    }
    return 0;
  }
  if (v64 == v63)
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  v67 = *v63;
  v68 = *(unsigned __int8 *)(*v63 + 55);
  v69 = *(_QWORD *)(v67 + 40);
  if ((v68 & 0x80u) == 0)
    v70 = v68;
  else
    v70 = *(_QWORD *)(v67 + 40);
  v71 = *(unsigned __int8 *)(v29 + 167);
  v72 = (char)v71;
  if ((v71 & 0x80u) != 0)
    v71 = *(_QWORD *)(v29 + 152);
  if (v70 != v71)
    goto LABEL_179;
  v73 = (const void **)(v67 + 32);
  if (v72 >= 0)
    isa = (const char *)(v29 + 144);
  else
    isa = *(const char **)(v29 + 144);
  if ((v68 & 0x80) != 0)
  {
    v61 = memcmp(*v73, isa, v69);
    if ((_DWORD)v61)
      goto LABEL_179;
  }
  else if ((_DWORD)v68)
  {
    while (*(unsigned __int8 *)v73 == *(unsigned __int8 *)isa)
    {
      v73 = (const void **)((char *)v73 + 1);
      ++isa;
      if (!--v68)
        goto LABEL_183;
    }
LABEL_179:
    if (!Espresso::zephyr::match_verbose)
      return 0;
    Espresso::espresso_os_log_subsystem((Espresso *)v61, isa);
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1117;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "square_0->input()->name() == sub_0->name()";
      _os_log_impl(&dword_190DAF000, v11, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
LABEL_44:

    return 0;
  }
LABEL_183:
  v74 = *(_QWORD *)(v29 + 120);
  v75 = *(_QWORD *)(v29 + 128);
  v116 = v74;
  v113 = v75;
  while (2)
  {
    if (v74 == v75)
    {
      if (!Espresso::zephyr::match_verbose)
        return 0;
      Espresso::espresso_os_log_subsystem((Espresso *)v61, isa);
      v11 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_compl"
                             "ex_subgraph_matching.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1127;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = "mean_0";
        _os_log_impl(&dword_190DAF000, v11, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_44;
    }
    if (!*(_QWORD *)v116)
      goto LABEL_206;
    log = *(os_log_t *)(*(_QWORD *)v116 + 80);
    if ((Class)(log[16].isa - log[15].isa) != (Class)8)
    {
      if (!Espresso::zephyr::match_verbose)
        goto LABEL_206;
      Espresso::espresso_os_log_subsystem((Espresso *)v61, isa);
      loga = objc_claimAutoreleasedReturnValue();
      if (!os_log_type_enabled(loga, OS_LOG_TYPE_INFO))
        goto LABEL_205;
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1120;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "mean_0->inputs().size() == 1";
      v77 = loga;
LABEL_204:
      _os_log_impl(&dword_190DAF000, v77, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      goto LABEL_205;
    }
    if ((Class)(log[13].isa - log[12].isa) != (Class)8)
    {
      if (!Espresso::zephyr::match_verbose)
        goto LABEL_206;
      Espresso::espresso_os_log_subsystem((Espresso *)v61, isa);
      loga = objc_claimAutoreleasedReturnValue();
      if (!os_log_type_enabled(loga, OS_LOG_TYPE_INFO))
        goto LABEL_205;
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1121;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "mean_0->outputs().size() == 1";
      v77 = loga;
      goto LABEL_204;
    }
    v61 = (uint64_t)Espresso::zephyr::cast_kernel<Espresso::generic_reduce_kernel>((uint64_t)log);
    if (!v61)
    {
      if (Espresso::zephyr::match_verbose)
      {
        Espresso::espresso_os_log_subsystem(0, isa);
        loga = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(loga, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_com"
                               "plex_subgraph_matching.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1123;
          *(_WORD *)&buf[18] = 2080;
          *(_QWORD *)&buf[20] = "mean_0_k";
          v77 = loga;
          goto LABEL_204;
        }
LABEL_205:

      }
LABEL_206:
      v74 = v116 + 8;
      v116 += 8;
      v75 = v113;
      continue;
    }
    break;
  }
  v61 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v61 + 320))(v61);
  if (*(_DWORD *)(v61 + 8) != 2 || *(_DWORD *)v61 != 1)
    goto LABEL_206;
  v117 = *(_QWORD *)(v29 + 120);
  v78 = *(unsigned __int8 *)(*(_QWORD *)v117 + 55);
  if ((v78 & 0x80u) == 0)
    v79 = (objc_class *)*(unsigned __int8 *)(*(_QWORD *)v117 + 55);
  else
    v79 = *(objc_class **)(*(_QWORD *)v117 + 40);
  isa_high = (Class)HIBYTE(log[20].isa);
  v81 = (char)isa_high;
  if ((char)isa_high < 0)
    isa_high = log[19].isa;
  if (v79 == isa_high)
  {
    v82 = (const void **)(*(_QWORD *)v117 + 32);
    if (v81 >= 0)
      isa = (const char *)&log[18];
    else
      isa = (const char *)log[18].isa;
    if ((v78 & 0x80) != 0)
    {
      v61 = memcmp(*v82, isa, *(_QWORD *)(*(_QWORD *)v117 + 40));
      v90 = v61 == 0;
    }
    else if (*(_BYTE *)(*(_QWORD *)v117 + 55))
    {
      v83 = v78 - 1;
      do
      {
        v85 = *(unsigned __int8 *)v82;
        v82 = (const void **)((char *)v82 + 1);
        v84 = v85;
        v87 = *(unsigned __int8 *)isa++;
        v86 = v87;
        v89 = v83-- != 0;
        v39 = v84 == v86;
        v90 = v84 == v86;
      }
      while (v39 && v89);
    }
    else
    {
      v90 = 1;
    }
  }
  else
  {
    v90 = 0;
  }
  v91 = log[15].isa;
  if (log[16].isa == v91)
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  v92 = *(_QWORD *)(v117 + 8 * v90);
  v93 = *(_QWORD *)v91;
  v94 = *(unsigned __int8 *)(*(_QWORD *)v91 + 55);
  v95 = *(_QWORD *)(v93 + 40);
  if ((v94 & 0x80u) == 0)
    v96 = v94;
  else
    v96 = *(_QWORD *)(v93 + 40);
  v97 = *(unsigned __int8 *)(v92 + 55);
  v98 = (char)v97;
  v118 = v92;
  v99 = *(_QWORD *)(v92 + 40);
  if ((v97 & 0x80u) != 0)
    v97 = v99;
  if (v96 != v97)
    goto LABEL_249;
  v100 = (const void **)(v93 + 32);
  if (v98 >= 0)
    isa = (const char *)(v118 + 32);
  else
    isa = *(const char **)(v118 + 32);
  if ((v94 & 0x80) != 0)
  {
    v61 = memcmp(*v100, isa, v95);
    if ((_DWORD)v61)
      goto LABEL_249;
  }
  else if ((_DWORD)v94)
  {
    while (*(unsigned __int8 *)v100 == *(unsigned __int8 *)isa)
    {
      v100 = (const void **)((char *)v100 + 1);
      ++isa;
      if (!--v94)
        goto LABEL_253;
    }
LABEL_249:
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem((Espresso *)v61, isa);
      v11 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_compl"
                             "ex_subgraph_matching.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1132;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = "mean_0->input()->name() == conv_out->name()";
        _os_log_impl(&dword_190DAF000, v11, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_44;
    }
    return 0;
  }
LABEL_253:
  *(_QWORD *)buf = v2;
  *(_QWORD *)&buf[8] = v10;
  *(_QWORD *)&buf[16] = v14;
  *(_QWORD *)&buf[24] = v19;
  v125 = v26;
  v126 = v29;
  v127 = v32;
  v128 = v40;
  v129 = v49;
  v130 = v119;
  v131 = v112;
  v132 = log;
  std::unordered_set<Espresso::zephyr::node_t *>::unordered_set((uint64_t)v123, (unint64_t *)buf, 12);
  v101 = Espresso::zephyr::find_values_used_externally<std::unordered_set<Espresso::zephyr::node_t *>>(&v120, v123);
  if (v122 != 1)
    goto LABEL_268;
  v103 = (unint64_t **)v2[12];
  if ((unint64_t **)v2[13] == v103)
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  v104 = v121;
  if (!v121)
  {
LABEL_268:
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem((Espresso *)v101, v102);
      v109 = objc_claimAutoreleasedReturnValue();
      if (!os_log_type_enabled(v109, OS_LOG_TYPE_INFO))
      {
LABEL_272:
        v17 = 0;
        goto LABEL_273;
      }
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1142;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "external_values.size() == 1 && external_values.count(add_0->output())";
LABEL_271:
      _os_log_impl(&dword_190DAF000, v109, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      goto LABEL_272;
    }
LABEL_281:
    v17 = 0;
    goto LABEL_282;
  }
  v105 = *v103;
  while (1)
  {
    if (v105)
      v106 = *v105;
    else
      v106 = 0;
    v107 = (_QWORD *)v104[4];
    if (v107)
    {
      v107 = (_QWORD *)*v107;
      if (v106 < (unint64_t)v107)
        goto LABEL_267;
    }
    v108 = v105 ? *v105 : 0;
    if ((unint64_t)v107 >= v108)
      break;
    ++v104;
LABEL_267:
    v104 = (_QWORD *)*v104;
    if (!v104)
      goto LABEL_268;
  }
  v110 = Espresso::zephyr_passes::merge_channel_norm(Espresso::zephyr::function_t &)::$_0::operator()(a1[2], (uint64_t)v123, v2, v26, v10, (Espresso::zephyr::node_t **)v118);
  if (!v110)
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem((Espresso *)v110, v111);
      v109 = objc_claimAutoreleasedReturnValue();
      if (!os_log_type_enabled(v109, OS_LOG_TYPE_INFO))
        goto LABEL_272;
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1144;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "substitution_func(subgraph, add_0, gamma, beta, conv_out)";
      goto LABEL_271;
    }
    goto LABEL_281;
  }
  if (Espresso::zephyr::match_verbose)
  {
    Espresso::espresso_os_log_subsystem((Espresso *)v110, v111);
    v109 = objc_claimAutoreleasedReturnValue();
    v17 = 1;
    if (os_log_type_enabled(v109, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1145;
      _os_log_impl(&dword_190DAF000, v109, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_PASS %s:%d\n", buf, 0x12u);
    }
LABEL_273:

  }
  else
  {
    v17 = 1;
  }
LABEL_282:
  std::__tree<int>::destroy(v121);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)v123);
  return v17;
}

void sub_191472758(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _QWORD *a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  std::__tree<int>::destroy(a11);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<Espresso::zephyr_passes::merge_channel_norm(Espresso::zephyr::function_t &)::$_2,std::allocator<Espresso::zephyr_passes::merge_channel_norm(Espresso::zephyr::function_t &)::$_2>,BOOL ()(Espresso::zephyr::node_t *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN8Espresso13zephyr_passes18merge_channel_normERNS_6zephyr10function_tEE3$_2"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<Espresso::zephyr_passes::merge_channel_norm(Espresso::zephyr::function_t &)::$_2,std::allocator<Espresso::zephyr_passes::merge_channel_norm(Espresso::zephyr::function_t &)::$_2>,BOOL ()(Espresso::zephyr::node_t *)>::target_type()
{
}

BOOL Espresso::zephyr_passes::merge_channel_norm(Espresso::zephyr::function_t &)::$_0::operator()(Espresso::zephyr::ordered_block_t ***a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, Espresso::zephyr::node_t **a6)
{
  const std::string *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  void *v15;
  char *v16;
  std::string::size_type v18;
  uint64_t v19;
  size_t size;
  _BYTE *v21;
  std::string *v22;
  char *v23;
  uint64_t v24;
  size_t v25;
  _BYTE *v26;
  std::string *v27;
  char *v28;
  Espresso *v29;
  const char *v30;
  Espresso *v31;
  const char *v32;
  _QWORD *v33;
  const char *v34;
  void *constant;
  Espresso *v36;
  std::__shared_weak_count *v37;
  NSObject *v38;
  _BOOL8 v39;
  unint64_t *v40;
  unint64_t v41;
  NSObject *v42;
  NSObject *v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v57;
  uint64_t v58;
  unint64_t *p_shared_owners;
  unint64_t v60;
  const char *v61;
  void *v62;
  Espresso *v63;
  std::__shared_weak_count *v64;
  NSObject *v65;
  unint64_t *v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t *v91;
  char *v92;
  uint64_t v93;
  size_t v94;
  _BYTE *v95;
  std::string *v96;
  char *v97;
  uint64_t v98;
  size_t v99;
  _BYTE *v100;
  std::string *v101;
  char *v102;
  Espresso::zephyr::value_t **v103;
  uint64_t **i;
  uint64_t v106;
  std::__shared_weak_count *v107;
  uint64_t v108;
  std::__shared_weak_count *v109;
  uint64_t v110;
  std::__shared_weak_count *v111;
  _QWORD *v112;
  std::__shared_weak_count *v113;
  _QWORD v114[2];
  int v115;
  uint64_t v116;
  std::__shared_weak_count *v117;
  uint64_t v118;
  std::__shared_weak_count *v119;
  _DWORD *v120;
  std::__shared_weak_count *v121;
  __int128 v122;
  int v123;
  __int128 v124;
  int v125;
  std::string v126;
  _BYTE buf[12];
  __int16 v128;
  int v129;
  __int16 v130;
  const char *v131;
  uint64_t v132;

  v132 = *MEMORY[0x1E0C80C00];
  v11 = (const std::string *)(a4 + 144);
  if (*(char *)(a4 + 167) < 0)
  {
    v13 = *(char **)(a4 + 144);
    v12 = *(_QWORD *)(a4 + 152);
  }
  else
  {
    v12 = *(unsigned __int8 *)(a4 + 167);
    v13 = (char *)(a4 + 144);
  }
  v14 = &v13[v12];
  if (v12 >= 6)
  {
    v15 = v13;
    do
    {
      v16 = (char *)memchr(v15, 46, v12 - 5);
      if (!v16)
        break;
      if (*(_DWORD *)v16 == 1835099950 && *((_WORD *)v16 + 2) == 24941)
        goto LABEL_13;
      v15 = v16 + 1;
      v12 = v14 - (_BYTE *)v15;
    }
    while (v14 - (_BYTE *)v15 > 5);
  }
  v16 = v14;
LABEL_13:
  if (v16 == v14)
    v18 = -1;
  else
    v18 = v16 - v13;
  std::string::basic_string(&v126, v11, 0, v18, (std::allocator<char> *)buf);
  v19 = a3[3];
  if ((v126.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v126.__r_.__value_.__r.__words[2]);
  else
    size = v126.__r_.__value_.__l.__size_;
  std::string::basic_string[abi:ne180100]((uint64_t)buf, size + 6);
  if (SBYTE3(v131) >= 0)
    v21 = buf;
  else
    v21 = *(_BYTE **)buf;
  if (size)
  {
    if ((v126.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v22 = &v126;
    else
      v22 = (std::string *)v126.__r_.__value_.__r.__words[0];
    memmove(v21, v22, size);
  }
  strcpy(&v21[size], "_input");
  v23 = Espresso::zephyr::function_t::new_detached_node(v19, (uint64_t)buf);
  if (SBYTE3(v131) < 0)
    operator delete(*(void **)buf);
  v24 = a3[3];
  if ((v126.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v25 = HIBYTE(v126.__r_.__value_.__r.__words[2]);
  else
    v25 = v126.__r_.__value_.__l.__size_;
  std::string::basic_string[abi:ne180100]((uint64_t)buf, v25 + 7);
  if (SBYTE3(v131) >= 0)
    v26 = buf;
  else
    v26 = *(_BYTE **)buf;
  if (v25)
  {
    if ((v126.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v27 = &v126;
    else
      v27 = (std::string *)v126.__r_.__value_.__r.__words[0];
    memmove(v26, v27, v25);
  }
  strcpy(&v26[v25], "_output");
  v28 = Espresso::zephyr::function_t::new_detached_node(v24, (uint64_t)buf);
  if (SBYTE3(v131) < 0)
    operator delete(*(void **)buf);
  v124 = xmmword_191A93600;
  v125 = 4;
  v122 = xmmword_191A93610;
  v123 = 4;
  Espresso::zephyr::need_shape((Espresso::zephyr *)&v120, (Espresso::zephyr::value_t *)a6);
  if (v120)
  {
    if (*v120 != 1 && v120[1] != 1 && v120[2] == 1 && v120[3] == 1 && v120[4] == 1)
    {
      v122 = xmmword_191A93620;
      v123 = 4;
      v125 = 4;
      v124 = xmmword_191A93620;
    }
    Espresso::zephyr::make_kernel<Espresso::generic_transpose_kernel,Espresso::zephyr::node_t,Espresso::transpose_params_t>(&v118, *(_QWORD *)(a3[1] + 8), (uint64_t)&v124);
    Espresso::zephyr::make_kernel<Espresso::generic_transpose_kernel,Espresso::zephyr::node_t,Espresso::transpose_params_t>(&v116, *(_QWORD *)(a3[1] + 8), (uint64_t)&v122);
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(*((_QWORD *)v23 + 1) + 8), v118, (uint64_t)v119);
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(*((_QWORD *)v28 + 1) + 8), v116, (uint64_t)v117);
    v115 = 0;
    v114[1] = 1;
    v114[0] = 0x358637BD00000001;
    Espresso::zephyr::make_kernel<Espresso::generic_instancenorm_1d_kernel,Espresso::zephyr::node_t,Espresso::instancenorm_1d_params_t>(&v112, *(_QWORD *)(*(_QWORD *)(a4 + 8) + 8), (uint64_t)v114);
    v33 = v112;
    if (!v112)
    {
      if (Espresso::zephyr::match_verbose)
      {
        Espresso::espresso_os_log_subsystem(v31, v32);
        v43 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_com"
                               "plex_subgraph_matching.mm";
          v128 = 1024;
          v129 = 751;
          v130 = 2080;
          v131 = "instancenorm_kernel";
          _os_log_impl(&dword_190DAF000, v43, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
        }

      }
      v39 = 0;
      goto LABEL_72;
    }
    constant = Espresso::zephyr::cast_kernel<Espresso::generic_load_constant_kernel>(a4);
    v36 = (Espresso *)*((_QWORD *)constant + 43);
    if (!v36 || (v36 = (Espresso *)(*(uint64_t (**)(Espresso *))(*(_QWORD *)v36 + 32))(v36), (_DWORD)v36))
    {
      v37 = 0;
      v110 = 0;
      v111 = 0;
      goto LABEL_53;
    }
    v57 = *((_QWORD *)constant + 43);
    v58 = *(_QWORD *)(v57 + 160);
    v37 = *(std::__shared_weak_count **)(v57 + 168);
    v110 = v58;
    v111 = v37;
    if (v37)
    {
      p_shared_owners = (unint64_t *)&v37->__shared_owners_;
      do
        v60 = __ldxr(p_shared_owners);
      while (__stxr(v60 + 1, p_shared_owners));
    }
    if (!v58)
    {
LABEL_53:
      if (Espresso::zephyr::match_verbose)
      {
        Espresso::espresso_os_log_subsystem(v36, v34);
        v38 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_com"
                               "plex_subgraph_matching.mm";
          v128 = 1024;
          v129 = 756;
          v130 = 2080;
          v131 = "gamma_blob";
          _os_log_impl(&dword_190DAF000, v38, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
        }

      }
      v39 = 0;
      if (!v37)
        goto LABEL_72;
      goto LABEL_58;
    }
    v62 = Espresso::zephyr::cast_kernel<Espresso::generic_load_constant_kernel>(a5);
    v63 = (Espresso *)*((_QWORD *)v62 + 43);
    if (!v63 || (v63 = (Espresso *)(*(uint64_t (**)(Espresso *))(*(_QWORD *)v63 + 32))(v63), (_DWORD)v63))
    {
      v39 = 0;
      v64 = 0;
      v108 = 0;
      v109 = 0;
      goto LABEL_102;
    }
    v68 = *((_QWORD *)v62 + 43);
    v69 = *(_QWORD *)(v68 + 160);
    v64 = *(std::__shared_weak_count **)(v68 + 168);
    v108 = v69;
    v109 = v64;
    if (v64)
    {
      v70 = (unint64_t *)&v64->__shared_owners_;
      do
        v71 = __ldxr(v70);
      while (__stxr(v71 + 1, v70));
    }
    v39 = v69 != 0;
    if (!v69)
    {
LABEL_102:
      if (Espresso::zephyr::match_verbose)
      {
        Espresso::espresso_os_log_subsystem(v63, v61);
        v65 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v65, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_com"
                               "plex_subgraph_matching.mm";
          v128 = 1024;
          v129 = 761;
          v130 = 2080;
          v131 = "beta_blob";
          _os_log_impl(&dword_190DAF000, v65, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
        }

      }
      if (v64)
      {
LABEL_107:
        v66 = (unint64_t *)&v64->__shared_owners_;
        do
          v67 = __ldaxr(v66);
        while (__stlxr(v67 - 1, v66));
        if (!v67)
        {
          ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
          std::__shared_weak_count::__release_weak(v64);
        }
      }
LABEL_111:
      v37 = v111;
      if (!v111)
      {
LABEL_72:
        v44 = v113;
        if (v113)
        {
          v45 = (unint64_t *)&v113->__shared_owners_;
          do
            v46 = __ldaxr(v45);
          while (__stlxr(v46 - 1, v45));
          if (!v46)
          {
            ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
            std::__shared_weak_count::__release_weak(v44);
          }
        }
        v47 = v117;
        if (v117)
        {
          v48 = (unint64_t *)&v117->__shared_owners_;
          do
            v49 = __ldaxr(v48);
          while (__stlxr(v49 - 1, v48));
          if (!v49)
          {
            ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
            std::__shared_weak_count::__release_weak(v47);
          }
        }
        v50 = v119;
        if (v119)
        {
          v51 = (unint64_t *)&v119->__shared_owners_;
          do
            v52 = __ldaxr(v51);
          while (__stlxr(v52 - 1, v51));
          if (!v52)
          {
            ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
            std::__shared_weak_count::__release_weak(v50);
          }
        }
        goto LABEL_87;
      }
LABEL_58:
      v40 = (unint64_t *)&v37->__shared_owners_;
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
      goto LABEL_72;
    }
    if (*(_BYTE *)(v33[1] + 53))
    {
      v106 = 0;
      v107 = 0;
      std::string::basic_string[abi:ne180100]<0>(buf, "wGamma");
      v72 = 0;
      v73 = *(int *)(v58 + 8);
      do
      {
        v73 *= *(int *)(v58 + 12 + v72);
        v72 += 4;
      }
      while (v72 != 12);
      (*(void (**)(_QWORD *, uint64_t *, _BYTE *, _QWORD, uint64_t, _QWORD))(*v33 + 168))(v33, &v106, buf, *(_QWORD *)(v58 + 24), 4 * v73, 0);
      if (SBYTE3(v131) < 0)
        operator delete(*(void **)buf);
      v74 = v107;
      if (v107)
      {
        v75 = (unint64_t *)&v107->__shared_owners_;
        do
          v76 = __ldaxr(v75);
        while (__stlxr(v76 - 1, v75));
        if (!v76)
        {
          ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
          std::__shared_weak_count::__release_weak(v74);
        }
      }
      v77 = (uint64_t)v112;
      v106 = 0;
      v107 = 0;
      std::string::basic_string[abi:ne180100]<0>(buf, "wBeta");
      v78 = 0;
      v79 = *(int *)(v108 + 8);
      do
      {
        v79 *= *(int *)(v108 + 12 + v78);
        v78 += 4;
      }
      while (v78 != 12);
      (*(void (**)(uint64_t, uint64_t *, _BYTE *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v77 + 168))(v77, &v106, buf, *(_QWORD *)(v108 + 24), 4 * v79, 0);
      if (SBYTE3(v131) < 0)
        operator delete(*(void **)buf);
      v80 = v107;
      if (v107)
      {
        v81 = (unint64_t *)&v107->__shared_owners_;
        do
          v82 = __ldaxr(v81);
        while (__stlxr(v82 - 1, v81));
        goto LABEL_151;
      }
    }
    else
    {
      v106 = 0;
      v107 = 0;
      std::string::basic_string[abi:ne180100]<0>(buf, "wGamma");
      v83 = 0;
      v84 = *(int *)(v58 + 8);
      do
      {
        v84 *= *(int *)(v58 + 12 + v83);
        v83 += 4;
      }
      while (v83 != 12);
      (*(void (**)(_QWORD *, uint64_t *, _BYTE *, _QWORD, uint64_t, _QWORD))(*v33 + 160))(v33, &v106, buf, *(_QWORD *)(v58 + 24), 4 * v84, 0);
      if (SBYTE3(v131) < 0)
        operator delete(*(void **)buf);
      v85 = v107;
      if (v107)
      {
        v86 = (unint64_t *)&v107->__shared_owners_;
        do
          v87 = __ldaxr(v86);
        while (__stlxr(v87 - 1, v86));
        if (!v87)
        {
          ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
          std::__shared_weak_count::__release_weak(v85);
        }
      }
      v88 = (uint64_t)v112;
      v106 = 0;
      v107 = 0;
      std::string::basic_string[abi:ne180100]<0>(buf, "wBeta");
      v89 = 0;
      v90 = *(int *)(v108 + 8);
      do
      {
        v90 *= *(int *)(v108 + 12 + v89);
        v89 += 4;
      }
      while (v89 != 12);
      (*(void (**)(uint64_t, uint64_t *, _BYTE *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v88 + 160))(v88, &v106, buf, *(_QWORD *)(v108 + 24), 4 * v90, 0);
      if (SBYTE3(v131) < 0)
        operator delete(*(void **)buf);
      v80 = v107;
      if (v107)
      {
        v91 = (unint64_t *)&v107->__shared_owners_;
        do
          v82 = __ldaxr(v91);
        while (__stlxr(v82 - 1, v91));
LABEL_151:
        if (!v82)
        {
          ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
          std::__shared_weak_count::__release_weak(v80);
        }
      }
    }
    v92 = Espresso::zephyr::function_t::new_detached_node(a3[3], (uint64_t)&v126);
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(*((_QWORD *)v92 + 1) + 8), (uint64_t)v112, (uint64_t)v113);
    Espresso::zephyr::node_t::add_input((Espresso::zephyr::node_t *)v23, (Espresso::zephyr::value_t *)a6);
    v93 = a3[3];
    if ((v126.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v94 = HIBYTE(v126.__r_.__value_.__r.__words[2]);
    else
      v94 = v126.__r_.__value_.__l.__size_;
    std::string::basic_string[abi:ne180100]((uint64_t)buf, v94 + 6);
    if (SBYTE3(v131) >= 0)
      v95 = buf;
    else
      v95 = *(_BYTE **)buf;
    if (v94)
    {
      if ((v126.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v96 = &v126;
      else
        v96 = (std::string *)v126.__r_.__value_.__r.__words[0];
      memmove(v95, v96, v94);
    }
    strcpy(&v95[v94], "_input");
    v97 = Espresso::zephyr::function_t::new_value(v93, (uint64_t)buf);
    if (SBYTE3(v131) < 0)
      operator delete(*(void **)buf);
    Espresso::zephyr::node_t::add_output((Espresso::zephyr::node_t *)v23, (Espresso::zephyr::value_t *)v97);
    Espresso::zephyr::node_t::add_input((Espresso::zephyr::node_t *)v92, (Espresso::zephyr::value_t *)v97);
    v98 = a3[3];
    if ((v126.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v99 = HIBYTE(v126.__r_.__value_.__r.__words[2]);
    else
      v99 = v126.__r_.__value_.__l.__size_;
    std::string::basic_string[abi:ne180100]((uint64_t)buf, v99 + 7);
    if (SBYTE3(v131) >= 0)
      v100 = buf;
    else
      v100 = *(_BYTE **)buf;
    if (v99)
    {
      if ((v126.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v101 = &v126;
      else
        v101 = (std::string *)v126.__r_.__value_.__r.__words[0];
      memmove(v100, v101, v99);
    }
    strcpy(&v100[v99], "_output");
    v102 = Espresso::zephyr::function_t::new_value(v98, (uint64_t)buf);
    if (SBYTE3(v131) < 0)
      operator delete(*(void **)buf);
    Espresso::zephyr::node_t::add_output((Espresso::zephyr::node_t *)v92, (Espresso::zephyr::value_t *)v102);
    Espresso::zephyr::node_t::add_input((Espresso::zephyr::node_t *)v28, (Espresso::zephyr::value_t *)v102);
    v103 = (Espresso::zephyr::value_t **)a3[12];
    if ((Espresso::zephyr::value_t **)a3[13] == v103)
      std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
    Espresso::zephyr::node_t::add_output((Espresso::zephyr::node_t *)v28, *v103);
    Espresso::zephyr::ordered_block_t::insert_node_after(**a1, (Espresso::zephyr::node_t *)v23, a6[10]);
    Espresso::zephyr::ordered_block_t::insert_node_after(**a1, (Espresso::zephyr::node_t *)v92, (Espresso::zephyr::node_t *)v23);
    Espresso::zephyr::ordered_block_t::insert_node_after(**a1, (Espresso::zephyr::node_t *)v28, (Espresso::zephyr::node_t *)v92);
    for (i = (uint64_t **)(a2 + 16); ; Espresso::zephyr::node_t::remove_from_graphs((Espresso::zephyr::node_t *)i[2]))
    {
      i = (uint64_t **)*i;
      if (!i)
        break;
    }
    v64 = v109;
    if (v109)
      goto LABEL_107;
    goto LABEL_111;
  }
  if (Espresso::zephyr::match_verbose)
  {
    Espresso::espresso_os_log_subsystem(v29, v30);
    v42 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v42, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      v128 = 1024;
      v129 = 725;
      v130 = 2080;
      v131 = "input_shape_ptr";
      _os_log_impl(&dword_190DAF000, v42, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }

  }
  v39 = 0;
LABEL_87:
  v53 = v121;
  if (v121)
  {
    v54 = (unint64_t *)&v121->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v126.__r_.__value_.__l.__data_);
  return v39;
}

void sub_191473420(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,char a27)
{
  uint64_t v27;

  if (*(char *)(v27 - 121) < 0)
    operator delete(*(void **)(v27 - 144));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
  if (*(char *)(v27 - 145) < 0)
    operator delete(*(void **)(v27 - 168));
  _Unwind_Resume(a1);
}

void Espresso::zephyr::make_kernel<Espresso::generic_transpose_kernel,Espresso::zephyr::node_t,Espresso::transpose_params_t>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  int v17;
  void *__p[2];
  char v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  void *lpsrc;
  std::__shared_weak_count *v23;

  Espresso::abstract_engine_factory::shared(&v20);
  v6 = v20;
  std::string::basic_string[abi:ne180100]<0>(__p, "transpose");
  v17 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)(a2 + 8) + 8))(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v6, a2 + 8, (uint64_t)__p, a3, &v17);
  if (v19 < 0)
    operator delete(__p[0]);
  v7 = v21;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (lpsrc
  {
    v11 = v23;
    *a1 = v10;
    a1[1] = v11;
    if (v11)
    {
      v12 = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
  }
  v14 = v23;
  if (v23)
  {
    v15 = (unint64_t *)&v23->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_191473694(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void std::__function::__func<Espresso::zephyr_passes::merge_channel_norm(Espresso::zephyr::function_t &)::$_1,std::allocator<Espresso::zephyr_passes::merge_channel_norm(Espresso::zephyr::function_t &)::$_1>,BOOL ()(Espresso::zephyr::node_t *)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

__n128 std::__function::__func<Espresso::zephyr_passes::merge_channel_norm(Espresso::zephyr::function_t &)::$_1,std::allocator<Espresso::zephyr_passes::merge_channel_norm(Espresso::zephyr::function_t &)::$_1>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DB08A0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<Espresso::zephyr_passes::merge_channel_norm(Espresso::zephyr::function_t &)::$_1,std::allocator<Espresso::zephyr_passes::merge_channel_norm(Espresso::zephyr::function_t &)::$_1>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DB08A0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<Espresso::zephyr_passes::merge_channel_norm(Espresso::zephyr::function_t &)::$_1,std::allocator<Espresso::zephyr_passes::merge_channel_norm(Espresso::zephyr::function_t &)::$_1>,BOOL ()(Espresso::zephyr::node_t *)>::operator()(uint64_t a1, uint64_t *a2)
{
  return std::__invoke[abi:ne180100]<Espresso::zephyr_passes::merge_channel_norm(Espresso::zephyr::function_t &)::$_1 &,Espresso::zephyr::node_t *>((Espresso::zephyr::ordered_block_t ****)(a1 + 8), *a2);
}

uint64_t std::__function::__func<Espresso::zephyr_passes::merge_channel_norm(Espresso::zephyr::function_t &)::$_1,std::allocator<Espresso::zephyr_passes::merge_channel_norm(Espresso::zephyr::function_t &)::$_1>,BOOL ()(Espresso::zephyr::node_t *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN8Espresso13zephyr_passes18merge_channel_normERNS_6zephyr10function_tEE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<Espresso::zephyr_passes::merge_channel_norm(Espresso::zephyr::function_t &)::$_1,std::allocator<Espresso::zephyr_passes::merge_channel_norm(Espresso::zephyr::function_t &)::$_1>,BOOL ()(Espresso::zephyr::node_t *)>::target_type()
{
}

uint64_t std::__invoke[abi:ne180100]<Espresso::zephyr_passes::merge_channel_norm(Espresso::zephyr::function_t &)::$_1 &,Espresso::zephyr::node_t *>(Espresso::zephyr::ordered_block_t ****a1, uint64_t a2)
{
  const char *v4;
  void *v5;
  float *constant;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  NSObject *v23;
  NSObject *v24;
  const char *v25;
  uint32_t v26;
  NSObject *v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  const char *v32;
  void *v33;
  Espresso *v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  NSObject *v43;
  NSObject *v44;
  uint64_t v45;
  const char *v46;
  uint64_t v47;
  uint64_t matched;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  size_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  const void **v60;
  const char *v61;
  const char *v62;
  const char *v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v68;
  uint64_t v69;
  NSObject *v70;
  NSObject *v71;
  NSObject *v72;
  Espresso *v73;
  const char *v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  size_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  const char *v83;
  const char *v84;
  const char *v85;
  unsigned __int8 *v86;
  void *v87;
  uint64_t v88;
  const char *v89;
  int v90;
  uint64_t *v92;
  uint64_t *v93;
  NSObject *v94;
  uint64_t v95;
  uint64_t v96;
  size_t v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  const void **v101;
  uint64_t v102;
  uint64_t v103;
  void *v104;
  Class v105;
  Class v106;
  Class v107;
  Class v108;
  uint64_t v109;
  void *v110;
  NSObject *v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  const void **v117;
  uint64_t v118;
  uint64_t v119;
  size_t v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  const void **v124;
  uint64_t **v125;
  const char *v126;
  unint64_t **v127;
  _QWORD *v128;
  unint64_t *v129;
  unint64_t v130;
  _QWORD *v131;
  unint64_t v132;
  NSObject *v133;
  _BOOL8 v134;
  const char *v135;
  objc_class *v136;
  Class isa;
  uint64_t v138;
  os_log_t log;
  os_log_t loga;
  NSObject *logb;
  _QWORD *v142;
  const void **v143;
  uint64_t v144;
  _QWORD *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t *v152;
  _QWORD *v153;
  uint64_t v154;
  _QWORD v155[5];
  _BYTE buf[32];
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  _QWORD *v164;
  uint64_t v165;
  _QWORD *v166;
  os_log_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;

  v170 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a2 + 104) - *(_QWORD *)(a2 + 96) != 8)
  {
    if (!Espresso::zephyr::match_verbose)
      return 0;
    Espresso::espresso_os_log_subsystem((Espresso *)a1, (const char *)a2);
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 826;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "add_18->outputs().size() == 1";
      _os_log_impl(&dword_190DAF000, v11, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_44;
  }
  if (*(_QWORD *)(a2 + 128) - *(_QWORD *)(a2 + 120) != 16)
  {
    if (!Espresso::zephyr::match_verbose)
      return 0;
    Espresso::espresso_os_log_subsystem((Espresso *)a1, (const char *)a2);
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 827;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "add_18->inputs().size() == 2";
      _os_log_impl(&dword_190DAF000, v11, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_44;
  }
  if (!Espresso::zephyr::match_simple_eltwise_binop(a2, 0))
  {
    if (!Espresso::zephyr::match_verbose)
      return 0;
    Espresso::espresso_os_log_subsystem(0, v4);
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 829;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "match_simple_eltwise_binop(add_18, ELEMENTWISE_OPERATION_ADD)";
      _os_log_impl(&dword_190DAF000, v11, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_44;
  }
  v5 = Espresso::zephyr::cast_kernel<Espresso::generic_elementwise_kernel>(a2);
  constant = (float *)(*(uint64_t (**)(void *))(*(_QWORD *)v5 + 320))(v5);
  if (!*((_BYTE *)constant + 24))
  {
    if (!Espresso::zephyr::match_verbose)
      return 0;
    Espresso::espresso_os_log_subsystem((Espresso *)constant, v7);
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 831;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "zephyr::cast_kernel<generic_elementwise_kernel>(add_18)->get_params().nd_mode";
      _os_log_impl(&dword_190DAF000, v11, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_44;
  }
  v8 = *(_QWORD *)(a2 + 120);
  v9 = *(_QWORD *)(a2 + 128);
  while (1)
  {
    if (v8 == v9)
      goto LABEL_41;
    if (*(_QWORD *)v8)
    {
      v10 = *(_QWORD *)(*(_QWORD *)v8 + 80);
      constant = (float *)Espresso::zephyr::cast_kernel<Espresso::generic_load_constant_kernel>(v10);
      if (constant)
        break;
    }
    v8 += 8;
  }
  if (!v10)
  {
LABEL_41:
    if (!Espresso::zephyr::match_verbose)
      return 0;
    Espresso::espresso_os_log_subsystem((Espresso *)constant, v7);
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 837;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "beta";
      _os_log_impl(&dword_190DAF000, v11, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_44;
  }
  v12 = *(_QWORD *)(a2 + 120);
  v13 = *(_QWORD *)(a2 + 128);
  if (v12 == v13)
  {
LABEL_37:
    if (!Espresso::zephyr::match_verbose)
      return 0;
    Espresso::espresso_os_log_subsystem((Espresso *)constant, v7);
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 847;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "div_17";
      _os_log_impl(&dword_190DAF000, v11, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_44;
  }
  while (1)
  {
    if (*(_QWORD *)v12)
    {
      v14 = *(_QWORD *)(*(_QWORD *)v12 + 80);
      constant = (float *)Espresso::zephyr::match_simple_eltwise_binop(v14, 0x66u);
      if (!constant)
      {
        if (Espresso::zephyr::match_verbose)
        {
          Espresso::espresso_os_log_subsystem(0, v7);
          v16 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 136315650;
            *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_c"
                                 "omplex_subgraph_matching.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 840;
            *(_WORD *)&buf[18] = 2080;
            *(_QWORD *)&buf[20] = "match_simple_eltwise_binop(div_17, ELEMENTWISE_OPERATION_DIV)";
            _os_log_impl(&dword_190DAF000, v16, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
          }

        }
        goto LABEL_36;
      }
      v15 = Espresso::zephyr::cast_kernel<Espresso::generic_elementwise_kernel>(v14);
      constant = (float *)(*(uint64_t (**)(void *))(*(_QWORD *)v15 + 320))(v15);
      if (*((_BYTE *)constant + 24))
        break;
    }
LABEL_36:
    v12 += 8;
    if (v12 == v13)
      goto LABEL_37;
  }
  if (!v14)
    goto LABEL_37;
  v20 = *(_QWORD *)(v14 + 120);
  v19 = *(_QWORD *)(v14 + 128);
  if (v20 == v19)
    goto LABEL_75;
  while (1)
  {
    if (!*(_QWORD *)v20)
      goto LABEL_74;
    v21 = *(_QWORD *)(*(_QWORD *)v20 + 80);
    constant = (float *)Espresso::zephyr::cast_kernel<Espresso::generic_elementwise_kernel>(v21);
    if (!constant)
    {
      if (Espresso::zephyr::match_verbose)
      {
        Espresso::espresso_os_log_subsystem(0, v7);
        v23 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_com"
                               "plex_subgraph_matching.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 852;
          *(_WORD *)&buf[18] = 2080;
          *(_QWORD *)&buf[20] = "clip_14_k";
          v24 = v23;
          v25 = "ZEPHYR_MATCH_FAIL %s:%d '%s'\n";
          goto LABEL_71;
        }
        goto LABEL_73;
      }
      goto LABEL_74;
    }
    constant = (float *)(*(uint64_t (**)(float *))(*(_QWORD *)constant + 320))(constant);
    v22 = constant[2];
    if (*(_DWORD *)constant != 119)
    {
      if (*(_DWORD *)constant == 2)
      {
        if (v22 >= 0.00000001)
          goto LABEL_79;
        if (!Espresso::zephyr::match_verbose)
          goto LABEL_74;
        Espresso::espresso_os_log_subsystem((Espresso *)constant, v7);
        v23 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_com"
                               "plex_subgraph_matching.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 858;
          *(_WORD *)&buf[18] = 2080;
          *(_QWORD *)&buf[20] = "clip_14_p.alpha >= 9.99999993922529e-09";
          v24 = v23;
          v25 = "ZEPHYR_MATCH_FAIL %s:%d '%s'\n";
          goto LABEL_71;
        }
        goto LABEL_73;
      }
      if (Espresso::zephyr::match_verbose)
      {
        Espresso::espresso_os_log_subsystem((Espresso *)constant, v7);
        v23 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_com"
                               "plex_subgraph_matching.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 865;
          v24 = v23;
          v25 = "ZEPHYR_MATCH_FAIL %s:%d\n";
          v26 = 18;
          goto LABEL_72;
        }
        goto LABEL_73;
      }
      goto LABEL_74;
    }
    if (v22 > 0.0)
      break;
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem((Espresso *)constant, v7);
      v23 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_compl"
                             "ex_subgraph_matching.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 861;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = "clip_14_p.alpha > 0";
        v24 = v23;
        v25 = "ZEPHYR_MATCH_FAIL %s:%d '%s'\n";
LABEL_71:
        v26 = 28;
LABEL_72:
        _os_log_impl(&dword_190DAF000, v24, OS_LOG_TYPE_INFO, v25, buf, v26);
      }
LABEL_73:

    }
LABEL_74:
    v20 += 8;
    if (v20 == v19)
      goto LABEL_75;
  }
  if (constant[3] > 3.4028e38)
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem((Espresso *)constant, v7);
      v23 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_compl"
                             "ex_subgraph_matching.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 863;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = "clip_14_p.beta <= FLT_MAX";
        v24 = v23;
        v25 = "ZEPHYR_MATCH_FAIL %s:%d '%s'\n";
        goto LABEL_71;
      }
      goto LABEL_73;
    }
    goto LABEL_74;
  }
LABEL_79:
  if (Espresso::zephyr::match_verbose)
  {
    Espresso::espresso_os_log_subsystem((Espresso *)constant, v7);
    v27 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 868;
      _os_log_impl(&dword_190DAF000, v27, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_PASS %s:%d\n", buf, 0x12u);
    }

  }
  if (!v21)
  {
LABEL_75:
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem((Espresso *)constant, v7);
      v11 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_compl"
                             "ex_subgraph_matching.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 871;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = "clip_14";
        _os_log_impl(&dword_190DAF000, v11, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_44;
    }
    return 0;
  }
  v28 = *(_QWORD *)(v21 + 120);
  if (*(_QWORD *)(v21 + 128) == v28)
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  v29 = *(_QWORD *)(*(_QWORD *)v28 + 80);
  if (!Espresso::zephyr::match_simple_eltwise_unaryop(v29, 11))
  {
    if (!Espresso::zephyr::match_verbose)
      return 0;
    Espresso::espresso_os_log_subsystem(0, v30);
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 875;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "match_simple_eltwise_unaryop(sqrt_13, ELEMENTWISE_OPERATION_SQRT)";
      _os_log_impl(&dword_190DAF000, v11, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_44;
  }
  v31 = *(_QWORD *)(v29 + 120);
  if (*(_QWORD *)(v29 + 128) == v31)
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  v151 = *(_QWORD *)(*(_QWORD *)v31 + 80);
  if (!Espresso::zephyr::match_simple_eltwise_binop(v151, 0x66u))
  {
    if (!Espresso::zephyr::match_verbose)
      return 0;
    Espresso::espresso_os_log_subsystem(0, v32);
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 879;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "match_simple_eltwise_binop(div_12, ELEMENTWISE_OPERATION_DIV)";
      _os_log_impl(&dword_190DAF000, v11, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_44;
  }
  v33 = Espresso::zephyr::cast_kernel<Espresso::generic_elementwise_kernel>(v151);
  v34 = (Espresso *)(*(uint64_t (**)(void *))(*(_QWORD *)v33 + 320))(v33);
  if (!*((_BYTE *)v34 + 24))
  {
    if (!Espresso::zephyr::match_verbose)
      return 0;
    Espresso::espresso_os_log_subsystem(v34, v35);
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 882;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "zephyr::cast_kernel<generic_elementwise_kernel>(div_12)->get_params().nd_mode";
      _os_log_impl(&dword_190DAF000, v11, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_44;
  }
  v36 = *(_QWORD *)(v151 + 120);
  v37 = *(_QWORD *)(v151 + 128);
  while (1)
  {
    if (v36 == v37)
      goto LABEL_125;
    if (*(_QWORD *)v36)
    {
      v38 = *(_QWORD *)(*(_QWORD *)v36 + 80);
      v34 = (Espresso *)Espresso::zephyr::cast_kernel<Espresso::generic_load_constant_kernel>(v38);
      if (v34)
        break;
    }
    v36 += 8;
  }
  if (!v38)
  {
LABEL_125:
    if (!Espresso::zephyr::match_verbose)
      return 0;
    Espresso::espresso_os_log_subsystem(v34, v35);
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 888;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "const_306";
      _os_log_impl(&dword_190DAF000, v11, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_44;
  }
  v40 = *(_QWORD *)(v151 + 120);
  v39 = *(_QWORD *)(v151 + 128);
  while (2)
  {
    if (v40 == v39)
    {
      if (!Espresso::zephyr::match_verbose)
        return 0;
      Espresso::espresso_os_log_subsystem(v34, v35);
      v11 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_compl"
                             "ex_subgraph_matching.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 902;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = "mul_10";
        _os_log_impl(&dword_190DAF000, v11, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_44;
    }
    if (!*(_QWORD *)v40)
      goto LABEL_124;
    v41 = *(_QWORD *)(*(_QWORD *)v40 + 80);
    if (*(_QWORD *)(v41 + 128) - *(_QWORD *)(v41 + 120) != 8)
    {
      if (!Espresso::zephyr::match_verbose)
        goto LABEL_124;
      Espresso::espresso_os_log_subsystem(v34, v35);
      v42 = objc_claimAutoreleasedReturnValue();
      if (!os_log_type_enabled(v42, OS_LOG_TYPE_INFO))
        goto LABEL_123;
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 891;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "mul_10->inputs().size() == 1";
      v43 = v42;
LABEL_122:
      _os_log_impl(&dword_190DAF000, v43, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      goto LABEL_123;
    }
    v34 = (Espresso *)Espresso::zephyr::cast_kernel<Espresso::generic_elementwise_kernel>(*(_QWORD *)(*(_QWORD *)v40 + 80));
    if (!v34)
    {
      if (!Espresso::zephyr::match_verbose)
        goto LABEL_124;
      Espresso::espresso_os_log_subsystem(0, v35);
      v42 = objc_claimAutoreleasedReturnValue();
      if (!os_log_type_enabled(v42, OS_LOG_TYPE_INFO))
        goto LABEL_123;
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 894;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "mul_10_k";
      v43 = v42;
      goto LABEL_122;
    }
    v34 = (Espresso *)(*(uint64_t (**)(Espresso *))(*(_QWORD *)v34 + 320))(v34);
    if (*(_DWORD *)v34 != 3)
    {
      if (Espresso::zephyr::match_verbose)
      {
        Espresso::espresso_os_log_subsystem(v34, v35);
        v42 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v42, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_com"
                               "plex_subgraph_matching.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 897;
          *(_WORD *)&buf[18] = 2080;
          *(_QWORD *)&buf[20] = "mul_10_p.operation == ELEMENTWISE_OPERATION_INTERNAL_MULC";
          v43 = v42;
          goto LABEL_122;
        }
LABEL_123:

      }
LABEL_124:
      v40 += 8;
      continue;
    }
    break;
  }
  if (Espresso::zephyr::match_verbose)
  {
    Espresso::espresso_os_log_subsystem(v34, v35);
    v44 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v44, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 899;
      _os_log_impl(&dword_190DAF000, v44, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_PASS %s:%d\n", buf, 0x12u);
    }

  }
  v45 = *(_QWORD *)(v41 + 120);
  if (*(_QWORD *)(v41 + 128) == v45)
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  v149 = *(_QWORD *)(*(_QWORD *)v45 + 80);
  if (!Espresso::zephyr::match_simple_eltwise_unaryop(v149, 24))
  {
    if (!Espresso::zephyr::match_verbose)
      return 0;
    Espresso::espresso_os_log_subsystem(0, v46);
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 906;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "match_simple_eltwise_unaryop(abs_8, ELEMENTWISE_OPERATION_ABS)";
      _os_log_impl(&dword_190DAF000, v11, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_44;
  }
  v47 = *(_QWORD *)(v149 + 120);
  if (*(_QWORD *)(v149 + 128) == v47)
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  v148 = *(_QWORD *)(*(_QWORD *)v47 + 80);
  matched = (uint64_t)Espresso::zephyr::match_simple_eltwise_binop(v148, 0x21u);
  if (!matched)
  {
    if (!Espresso::zephyr::match_verbose)
      return 0;
    Espresso::espresso_os_log_subsystem(0, v49);
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 910;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "match_simple_eltwise_binop(sub_7, ELEMENTWISE_OPERATION_SUBTRACT)";
      _os_log_impl(&dword_190DAF000, v11, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_44;
  }
  v50 = *(_QWORD *)(v148 + 120);
  v51 = *(_QWORD *)(v148 + 128);
  while (1)
  {
    if (v50 == v51)
      goto LABEL_169;
    if (*(_QWORD *)v50)
    {
      v150 = *(_QWORD *)(*(_QWORD *)v50 + 80);
      matched = (uint64_t)Espresso::zephyr::match_simple_eltwise_binop(v150, 1u);
      if (matched)
        break;
    }
    v50 += 8;
  }
  if (!v150)
  {
LABEL_169:
    if (!Espresso::zephyr::match_verbose)
      return 0;
    Espresso::espresso_os_log_subsystem((Espresso *)matched, v49);
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 916;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "mul_6";
      _os_log_impl(&dword_190DAF000, v11, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_44;
  }
  v52 = *(_QWORD **)(v150 + 120);
  v53 = *v52;
  v54 = v52[1];
  v55 = *(unsigned __int8 *)(*v52 + 55);
  v56 = *(_QWORD *)(v53 + 40);
  if ((v55 & 0x80u) == 0)
    v57 = v55;
  else
    v57 = *(_QWORD *)(v53 + 40);
  v58 = *(unsigned __int8 *)(v54 + 55);
  v59 = (char)v58;
  if ((v58 & 0x80u) != 0)
    v58 = *(_QWORD *)(v54 + 40);
  if (v57 != v58)
  {
LABEL_174:
    if (!Espresso::zephyr::match_verbose)
      return 0;
    Espresso::espresso_os_log_subsystem((Espresso *)matched, v49);
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 918;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "mul_6->inputs()[0]->name() == mul_6->inputs()[1]->name()";
      _os_log_impl(&dword_190DAF000, v11, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_44;
  }
  v60 = (const void **)(v53 + 32);
  v63 = *(const char **)(v54 + 32);
  v61 = (const char *)(v54 + 32);
  v62 = v63;
  if (v59 >= 0)
    v49 = v61;
  else
    v49 = v62;
  if ((v55 & 0x80) != 0)
  {
    matched = memcmp(*v60, v49, v56);
    if ((_DWORD)matched)
      goto LABEL_174;
  }
  else if ((_DWORD)v55)
  {
    while (*(unsigned __int8 *)v60 == *(unsigned __int8 *)v49)
    {
      v60 = (const void **)((char *)v60 + 1);
      ++v49;
      if (!--v55)
        goto LABEL_178;
    }
    goto LABEL_174;
  }
LABEL_178:
  v65 = *(_QWORD *)(v148 + 120);
  v64 = *(_QWORD *)(v148 + 128);
  v146 = v64;
  while (2)
  {
    if (v65 == v64)
    {
      if (!Espresso::zephyr::match_verbose)
        return 0;
      Espresso::espresso_os_log_subsystem((Espresso *)matched, v49);
      v11 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_compl"
                             "ex_subgraph_matching.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 937;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = "reducemean_4";
        _os_log_impl(&dword_190DAF000, v11, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_44;
    }
    if (!*(_QWORD *)v65)
      goto LABEL_207;
    v145 = *(_QWORD **)(*(_QWORD *)v65 + 80);
    matched = (uint64_t)Espresso::zephyr::cast_kernel<Espresso::generic_reduce_kernel>((uint64_t)v145);
    if (!matched)
    {
      if (Espresso::zephyr::match_verbose)
      {
        Espresso::espresso_os_log_subsystem(0, v49);
        v70 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v70, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_com"
                               "plex_subgraph_matching.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 923;
          *(_WORD *)&buf[18] = 2080;
          *(_QWORD *)&buf[20] = "reducemean_4_k";
          v71 = v70;
          goto LABEL_205;
        }
        goto LABEL_206;
      }
      goto LABEL_207;
    }
    matched = (*(uint64_t (**)(uint64_t))(*(_QWORD *)matched + 320))(matched);
    v66 = *(_DWORD *)(matched + 8);
    if (v66 != 2 && v66 != 4)
    {
      if (Espresso::zephyr::match_verbose)
      {
        Espresso::espresso_os_log_subsystem((Espresso *)matched, v49);
        v70 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v70, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_com"
                               "plex_subgraph_matching.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 928;
          *(_WORD *)&buf[18] = 2080;
          *(_QWORD *)&buf[20] = "reducemean_4_p.axis_mode == REDUCE_AXIS_Y || reducemean_4_p.axis_mode == REDUCE_AXIS_K";
          v71 = v70;
          goto LABEL_205;
        }
        goto LABEL_206;
      }
      goto LABEL_207;
    }
    if (*(_DWORD *)matched != 1)
    {
      if (Espresso::zephyr::match_verbose)
      {
        Espresso::espresso_os_log_subsystem((Espresso *)matched, v49);
        v70 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v70, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_com"
                               "plex_subgraph_matching.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 929;
          *(_WORD *)&buf[18] = 2080;
          *(_QWORD *)&buf[20] = "reducemean_4_p.mode == REDUCE_MODE_AVG";
          v71 = v70;
          goto LABEL_205;
        }
        goto LABEL_206;
      }
      goto LABEL_207;
    }
    v68 = v145[15];
    v69 = v145[16];
    if (v69 - v68 != 8)
    {
      if (Espresso::zephyr::match_verbose)
      {
        Espresso::espresso_os_log_subsystem((Espresso *)matched, v49);
        v70 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v70, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_com"
                               "plex_subgraph_matching.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 931;
          *(_WORD *)&buf[18] = 2080;
          *(_QWORD *)&buf[20] = "reducemean_4->inputs().size() == 1";
          v71 = v70;
LABEL_205:
          _os_log_impl(&dword_190DAF000, v71, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
        }
LABEL_206:

      }
LABEL_207:
      v65 += 8;
      v64 = v146;
      continue;
    }
    break;
  }
  if (v145[13] - v145[12] != 8)
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem((Espresso *)matched, v49);
      v70 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v70, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_compl"
                             "ex_subgraph_matching.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 932;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = "reducemean_4->outputs().size() == 1";
        v71 = v70;
        goto LABEL_205;
      }
      goto LABEL_206;
    }
    goto LABEL_207;
  }
  if (Espresso::zephyr::match_verbose)
  {
    Espresso::espresso_os_log_subsystem((Espresso *)matched, v49);
    v72 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v72, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 934;
      _os_log_impl(&dword_190DAF000, v72, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_PASS %s:%d\n", buf, 0x12u);
    }

    v68 = v145[15];
    v69 = v145[16];
  }
  if (v69 == v68)
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  v147 = *(_QWORD *)(*(_QWORD *)v68 + 80);
  v73 = (Espresso *)Espresso::zephyr::match_simple_eltwise_binop(v147, 1u);
  if (!v73)
  {
    if (!Espresso::zephyr::match_verbose)
      return 0;
    Espresso::espresso_os_log_subsystem(0, v74);
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 941;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "match_simple_eltwise_binop(mul_3, ELEMENTWISE_OPERATION_MUL)";
      _os_log_impl(&dword_190DAF000, v11, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_44;
  }
  v75 = *(_QWORD **)(v147 + 120);
  v77 = *v75;
  v76 = v75[1];
  v78 = *(unsigned __int8 *)(*v75 + 55);
  v144 = v77;
  v79 = *(_QWORD *)(v77 + 40);
  if ((v78 & 0x80u) == 0)
    v80 = v78;
  else
    v80 = *(_QWORD *)(v77 + 40);
  v81 = *(unsigned __int8 *)(v76 + 55);
  v82 = (char)v81;
  if ((v81 & 0x80u) != 0)
    v81 = *(_QWORD *)(v76 + 40);
  if (v80 != v81)
    goto LABEL_240;
  v143 = (const void **)(v144 + 32);
  v85 = *(const char **)(v76 + 32);
  v83 = (const char *)(v76 + 32);
  v84 = v85;
  if (v82 >= 0)
    v74 = v83;
  else
    v74 = v84;
  if ((v78 & 0x80) != 0)
  {
    v73 = (Espresso *)memcmp(*v143, v74, v79);
    if ((_DWORD)v73)
      goto LABEL_240;
  }
  else if ((_DWORD)v78)
  {
    v86 = (unsigned __int8 *)(v144 + 32);
    while (*v86 == *(unsigned __int8 *)v74)
    {
      ++v86;
      ++v74;
      if (!--v78)
        goto LABEL_244;
    }
LABEL_240:
    if (!Espresso::zephyr::match_verbose)
      return 0;
    Espresso::espresso_os_log_subsystem(v73, v74);
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 943;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "mul_3->inputs()[0]->name() == mul_3->inputs()[1]->name()";
      _os_log_impl(&dword_190DAF000, v11, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
LABEL_44:

    return 0;
  }
LABEL_244:
  v142 = *(_QWORD **)(**(_QWORD **)(v150 + 120) + 80);
  v87 = Espresso::zephyr::cast_kernel<Espresso::generic_reduce_kernel>((uint64_t)v142);
  v88 = (*(uint64_t (**)(void *))(*(_QWORD *)v87 + 320))(v87);
  v90 = *(_DWORD *)(v88 + 8);
  if (v90 != 2 && v90 != 4)
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem((Espresso *)v88, v89);
      v11 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_compl"
                             "ex_subgraph_matching.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 953;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = "reducemean_5_p.axis_mode == REDUCE_AXIS_Y || reducemean_5_p.axis_mode == REDUCE_AXIS_K";
        _os_log_impl(&dword_190DAF000, v11, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_44;
    }
    return 0;
  }
  if (*(_DWORD *)v88 != 1)
  {
    if (!Espresso::zephyr::match_verbose)
      return 0;
    Espresso::espresso_os_log_subsystem((Espresso *)v88, v89);
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 954;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "reducemean_5_p.mode == REDUCE_MODE_AVG";
      _os_log_impl(&dword_190DAF000, v11, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_44;
  }
  v92 = (uint64_t *)v142[15];
  v93 = (uint64_t *)v142[16];
  if ((char *)v93 - (char *)v92 != 8)
  {
    if (!Espresso::zephyr::match_verbose)
      return 0;
    Espresso::espresso_os_log_subsystem((Espresso *)v88, v89);
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 956;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "reducemean_5->inputs().size() == 1";
      _os_log_impl(&dword_190DAF000, v11, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_44;
  }
  v94 = v142[13];
  log = (os_log_t)v142[12];
  if ((char *)v94 - (char *)log != 8)
  {
    if (!Espresso::zephyr::match_verbose)
      return 0;
    Espresso::espresso_os_log_subsystem((Espresso *)v88, v89);
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 957;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "reducemean_5->outputs().size() == 1";
      _os_log_impl(&dword_190DAF000, v11, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_44;
  }
  if (v93 == v92)
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  v95 = *v92;
  v96 = *(unsigned __int8 *)(*v92 + 55);
  v97 = *(_QWORD *)(v95 + 40);
  if ((v96 & 0x80u) == 0)
    v98 = v96;
  else
    v98 = *(_QWORD *)(v95 + 40);
  v99 = *(unsigned __int8 *)(v144 + 55);
  v100 = (char)v99;
  if ((v99 & 0x80u) != 0)
    v99 = *(_QWORD *)(v144 + 40);
  if (v98 != v99)
  {
LABEL_284:
    if (!Espresso::zephyr::match_verbose)
      return 0;
    Espresso::espresso_os_log_subsystem((Espresso *)v88, v89);
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 959;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "reducemean_5->input()->name() == conv_0_new1->name()";
      _os_log_impl(&dword_190DAF000, v11, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_44;
  }
  v101 = (const void **)(v95 + 32);
  if (v100 >= 0)
    v89 = (const char *)(v144 + 32);
  else
    v89 = (const char *)*v143;
  if ((v96 & 0x80) != 0)
  {
    v88 = memcmp(*v101, v89, v97);
    if (!(_DWORD)v88)
      goto LABEL_288;
    goto LABEL_284;
  }
  if ((_DWORD)v96)
  {
    while (*(unsigned __int8 *)v101 == *(unsigned __int8 *)v89)
    {
      v101 = (const void **)((char *)v101 + 1);
      ++v89;
      if (!--v96)
        goto LABEL_288;
    }
    goto LABEL_284;
  }
LABEL_288:
  if (v94 == log)
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  v102 = *(_QWORD *)(v14 + 120);
  v103 = *(_QWORD *)(v14 + 128);
  if (v102 == v103)
  {
LABEL_300:
    if (!Espresso::zephyr::match_verbose)
      return 0;
    Espresso::espresso_os_log_subsystem((Espresso *)v88, v89);
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 971;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "mul_16";
      _os_log_impl(&dword_190DAF000, v11, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_44;
  }
  isa = log->isa;
  while (2)
  {
    if (!*(_QWORD *)v102)
    {
LABEL_299:
      v102 += 8;
      if (v102 == v103)
        goto LABEL_300;
      continue;
    }
    break;
  }
  loga = *(os_log_t *)(*(_QWORD *)v102 + 80);
  v88 = (uint64_t)Espresso::zephyr::match_simple_eltwise_binop((uint64_t)loga, 1u);
  if (!v88)
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(0, v89);
      logb = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(logb, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_compl"
                             "ex_subgraph_matching.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 964;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = "match_simple_eltwise_binop(mul_16, ELEMENTWISE_OPERATION_MUL)";
        _os_log_impl(&dword_190DAF000, logb, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }

    }
    goto LABEL_299;
  }
  v104 = Espresso::zephyr::cast_kernel<Espresso::generic_elementwise_kernel>((uint64_t)loga);
  v88 = (*(uint64_t (**)(void *))(*(_QWORD *)v104 + 320))(v104);
  if (!*(_BYTE *)(v88 + 24))
    goto LABEL_299;
  if (!loga)
    goto LABEL_300;
  v105 = loga[15].isa;
  v106 = loga[16].isa;
  while (1)
  {
    if (v105 == v106)
      goto LABEL_324;
    if (*(_QWORD *)v105)
    {
      v138 = *(_QWORD *)(*(_QWORD *)v105 + 80);
      v88 = (uint64_t)Espresso::zephyr::cast_kernel<Espresso::generic_load_constant_kernel>(v138);
      if (v88)
        break;
    }
    v105 = (Class)((char *)v105 + 8);
  }
  if (!v138)
  {
LABEL_324:
    if (!Espresso::zephyr::match_verbose)
      return 0;
    Espresso::espresso_os_log_subsystem((Espresso *)v88, v89);
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 977;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "gamma";
      _os_log_impl(&dword_190DAF000, v11, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_44;
  }
  v108 = loga[15].isa;
  v107 = loga[16].isa;
  v136 = v107;
  while (2)
  {
    if (v108 == v107)
      goto LABEL_343;
    if (!*(_QWORD *)v108)
      goto LABEL_323;
    v109 = *(_QWORD *)(*(_QWORD *)v108 + 80);
    v88 = (uint64_t)Espresso::zephyr::match_simple_eltwise_binop(v109, 0x21u);
    if (!v88)
    {
      if (Espresso::zephyr::match_verbose)
      {
        Espresso::espresso_os_log_subsystem(0, v89);
        v111 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v111, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_com"
                               "plex_subgraph_matching.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 981;
          *(_WORD *)&buf[18] = 2080;
          *(_QWORD *)&buf[20] = "match_simple_eltwise_binop(sub_15, ELEMENTWISE_OPERATION_SUBTRACT)";
          _os_log_impl(&dword_190DAF000, v111, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
        }

      }
      goto LABEL_323;
    }
    v110 = Espresso::zephyr::cast_kernel<Espresso::generic_elementwise_kernel>(v109);
    v88 = (*(uint64_t (**)(void *))(*(_QWORD *)v110 + 320))(v110);
    if (!*(_BYTE *)(v88 + 24))
    {
LABEL_323:
      v108 = (Class)((char *)v108 + 8);
      v107 = v136;
      continue;
    }
    break;
  }
  if (!v109)
  {
LABEL_343:
    if (!Espresso::zephyr::match_verbose)
      return 0;
    Espresso::espresso_os_log_subsystem((Espresso *)v88, v89);
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 988;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "sub_15";
      _os_log_impl(&dword_190DAF000, v11, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_44;
  }
  v112 = *(_QWORD **)(v109 + 120);
  v113 = *(unsigned __int8 *)(*v112 + 55);
  if ((v113 & 0x80u) == 0)
    v114 = *(unsigned __int8 *)(*v112 + 55);
  else
    v114 = *(_QWORD *)(*v112 + 40);
  v115 = *(unsigned __int8 *)(v144 + 55);
  v116 = (char)v115;
  if ((v115 & 0x80u) != 0)
    v115 = *(_QWORD *)(v144 + 40);
  if (v114 != v115)
    goto LABEL_348;
  v117 = (const void **)(*v112 + 32);
  if (v116 >= 0)
    v89 = (const char *)(v144 + 32);
  else
    v89 = (const char *)*v143;
  if ((v113 & 0x80) != 0)
  {
    v88 = memcmp(*v117, v89, *(_QWORD *)(*v112 + 40));
    if ((_DWORD)v88)
      goto LABEL_348;
  }
  else if (*(_BYTE *)(*v112 + 55))
  {
    while (*(unsigned __int8 *)v117 == *(unsigned __int8 *)v89)
    {
      v117 = (const void **)((char *)v117 + 1);
      ++v89;
      if (!--v113)
        goto LABEL_352;
    }
LABEL_348:
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem((Espresso *)v88, v89);
      v11 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_compl"
                             "ex_subgraph_matching.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 990;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = "sub_15->inputs()[0]->name() == conv_0_new1->name()";
        _os_log_impl(&dword_190DAF000, v11, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_44;
    }
    return 0;
  }
LABEL_352:
  v118 = v112[1];
  v119 = *(unsigned __int8 *)(v118 + 55);
  v120 = *(_QWORD *)(v118 + 40);
  if ((v119 & 0x80u) == 0)
    v121 = *(unsigned __int8 *)(v118 + 55);
  else
    v121 = *(_QWORD *)(v118 + 40);
  v122 = *((unsigned __int8 *)isa + 55);
  v123 = (char)v122;
  if ((v122 & 0x80u) != 0)
    v122 = *((_QWORD *)isa + 5);
  if (v121 != v122)
  {
LABEL_368:
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem((Espresso *)v88, v89);
      v11 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_compl"
                             "ex_subgraph_matching.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 991;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = "sub_15->inputs()[1]->name() == conv_0_new1_avg->name()";
        _os_log_impl(&dword_190DAF000, v11, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_44;
    }
    return 0;
  }
  v124 = (const void **)(v118 + 32);
  if (v123 >= 0)
    v89 = (char *)isa + 32;
  else
    v89 = (const char *)*((_QWORD *)isa + 4);
  if ((v119 & 0x80) != 0)
  {
    v88 = memcmp(*v124, v89, v120);
    if ((_DWORD)v88)
      goto LABEL_368;
  }
  else if ((_DWORD)v119)
  {
    while (*(unsigned __int8 *)v124 == *(unsigned __int8 *)v89)
    {
      v124 = (const void **)((char *)v124 + 1);
      ++v89;
      if (!--v119)
        goto LABEL_372;
    }
    goto LABEL_368;
  }
LABEL_372:
  *(_QWORD *)buf = a2;
  *(_QWORD *)&buf[8] = v10;
  *(_QWORD *)&buf[16] = v14;
  *(_QWORD *)&buf[24] = v21;
  v157 = v29;
  v158 = v151;
  v159 = v38;
  v160 = v41;
  v161 = v149;
  v162 = v148;
  v163 = v150;
  v164 = v145;
  v165 = v147;
  v166 = v142;
  v167 = loga;
  v168 = v138;
  v169 = v109;
  std::unordered_set<Espresso::zephyr::node_t *>::unordered_set((uint64_t)v155, (unint64_t *)buf, 17);
  v125 = Espresso::zephyr::find_values_used_externally<std::unordered_set<Espresso::zephyr::node_t *>>(&v152, v155);
  if (v154 != 1)
    goto LABEL_387;
  v127 = *(unint64_t ***)(a2 + 96);
  if (*(unint64_t ***)(a2 + 104) == v127)
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  v128 = v153;
  if (!v153)
  {
LABEL_387:
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem((Espresso *)v125, v126);
      v133 = objc_claimAutoreleasedReturnValue();
      if (!os_log_type_enabled(v133, OS_LOG_TYPE_INFO))
      {
LABEL_391:
        v17 = 0;
        goto LABEL_392;
      }
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1003;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "external_values.size() == 1 && external_values.count(add_18->output())";
LABEL_390:
      _os_log_impl(&dword_190DAF000, v133, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      goto LABEL_391;
    }
LABEL_400:
    v17 = 0;
    goto LABEL_401;
  }
  v129 = *v127;
  while (1)
  {
    if (v129)
      v130 = *v129;
    else
      v130 = 0;
    v131 = (_QWORD *)v128[4];
    if (v131)
    {
      v131 = (_QWORD *)*v131;
      if (v130 < (unint64_t)v131)
        goto LABEL_386;
    }
    v132 = v129 ? *v129 : 0;
    if ((unint64_t)v131 >= v132)
      break;
    ++v128;
LABEL_386:
    v128 = (_QWORD *)*v128;
    if (!v128)
      goto LABEL_387;
  }
  v134 = Espresso::zephyr_passes::merge_channel_norm(Espresso::zephyr::function_t &)::$_0::operator()(a1[1], (uint64_t)v155, (_QWORD *)a2, v138, v10, (Espresso::zephyr::node_t **)v144);
  if (!v134)
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem((Espresso *)v134, v135);
      v133 = objc_claimAutoreleasedReturnValue();
      if (!os_log_type_enabled(v133, OS_LOG_TYPE_INFO))
        goto LABEL_391;
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1005;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "substitution_func(subgraph, add_18, gamma, beta, conv_0_new1)";
      goto LABEL_390;
    }
    goto LABEL_400;
  }
  if (Espresso::zephyr::match_verbose)
  {
    Espresso::espresso_os_log_subsystem((Espresso *)v134, v135);
    v133 = objc_claimAutoreleasedReturnValue();
    v17 = 1;
    if (os_log_type_enabled(v133, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1006;
      _os_log_impl(&dword_190DAF000, v133, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_PASS %s:%d\n", buf, 0x12u);
    }
LABEL_392:

  }
  else
  {
    v17 = 1;
  }
LABEL_401:
  std::__tree<int>::destroy(v153);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)v155);
  return v17;
}

void sub_191475B1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,_QWORD *a28,uint64_t a29,char a30)
{
  std::__tree<int>::destroy(a28);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&a30);
  _Unwind_Resume(a1);
}

void sub_191475BBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  Espresso::zephyr::function_t::~function_t((Espresso::zephyr::function_t *)&a9);
  _Unwind_Resume(a1);
}

uint64_t Espresso::zephyr_passes::merge_pytorch_layernorm(Espresso::zephyr_passes *this, Espresso::zephyr::function_t *a2)
{
  char *v2;
  char *v3;
  char v4;
  uint64_t v5;
  char matched;
  _QWORD *v7;
  uint64_t v8;
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = (char *)this + 64;
  v3 = (char *)*((_QWORD *)this + 9);
  if (v3 != (char *)this + 64)
  {
    v4 = 0;
    while (1)
    {
      v5 = *((_QWORD *)v3 + 2);
      v10[0] = &off_1E2DB0B08;
      v10[1] = v3 + 16;
      v11 = v10;
      matched = Espresso::zephyr::ordered_block_t::match_transform(v5, (uint64_t)v10);
      v7 = v11;
      if (v11 == v10)
        break;
      if (v11)
      {
        v8 = 5;
LABEL_7:
        (*(void (**)(void))(*v7 + 8 * v8))();
      }
      v4 |= matched;
      v3 = (char *)*((_QWORD *)v3 + 1);
      if (v3 == v2)
        return v4 & 1;
    }
    v7 = v10;
    v8 = 4;
    goto LABEL_7;
  }
  v4 = 0;
  return v4 & 1;
}

void sub_191475CB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void std::__function::__func<Espresso::zephyr_passes::merge_pytorch_layernorm(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::merge_pytorch_layernorm(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<Espresso::zephyr_passes::merge_pytorch_layernorm(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::merge_pytorch_layernorm(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DB0B08;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<Espresso::zephyr_passes::merge_pytorch_layernorm(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::merge_pytorch_layernorm(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DB0B08;
  a2[1] = v2;
  return result;
}

BOOL std::__function::__func<Espresso::zephyr_passes::merge_pytorch_layernorm(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::merge_pytorch_layernorm(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::operator()(Espresso::zephyr::ordered_block_t ***a1, const char *a2)
{
  uint64_t *v2;
  const char *v4;
  Espresso *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  unsigned __int8 v10;
  uint64_t v11;
  NSObject *v12;
  _QWORD *v13;
  Espresso::zephyr::node_t *v14;
  Espresso::zephyr::node_t *v15;
  Espresso::zephyr::node_t *v16;
  Espresso::zephyr::node_t *v17;
  Espresso *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  BOOL v23;
  uint64_t v24;
  NSObject *v25;
  _BOOL8 v26;
  _QWORD *v28;
  Espresso::zephyr::node_t *v29;
  Espresso::zephyr::node_t *v30;
  Espresso::zephyr::node_t *v31;
  float *matched;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  BOOL v42;
  float v43;
  char *v44;
  uint64_t v45;
  BOOL v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  Espresso *v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  Espresso::zephyr::value_t **v56;
  char **v57;
  char *v58;
  uint64_t **v59;
  const char *v60;
  int v61;
  _QWORD *v62;
  unint64_t v63;
  _QWORD *v64;
  unint64_t v65;
  NSObject *v66;
  unint64_t **v67;
  unint64_t *v68;
  _QWORD *v69;
  unint64_t v70;
  _QWORD *v71;
  unint64_t v72;
  Espresso *v73;
  const char *v74;
  uint64_t v75;
  char *v76;
  Espresso *v77;
  const char *v78;
  NSObject *v79;
  _QWORD *i;
  Espresso::zephyr::node_t *v81;
  unint64_t **v83;
  unint64_t *v84;
  _QWORD *v85;
  unint64_t v86;
  _QWORD *v87;
  unint64_t v88;
  NSObject *v89;
  std::__shared_weak_count *v90;
  unint64_t *p_shared_owners;
  unint64_t v92;
  _QWORD *v93;
  Espresso::zephyr::value_t *v94;
  uint64_t v95;
  uint64_t v96;
  Espresso::zephyr::node_t *v97;
  uint64_t v98;
  std::__shared_weak_count *v99;
  uint64_t *v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103[2];
  _QWORD *v104;
  _BYTE buf[32];
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD v112[3];
  Espresso *v113;
  _QWORD v114[3];
  Espresso *v115;
  uint64_t v116;

  v116 = *MEMORY[0x1E0C80C00];
  v2 = *(uint64_t **)a2;
  if (*(_QWORD *)(*(_QWORD *)a2 + 104) - *(_QWORD *)(*(_QWORD *)a2 + 96) != 8)
  {
    if (!Espresso::zephyr::match_verbose)
      return 0;
    Espresso::espresso_os_log_subsystem((Espresso *)a1, a2);
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1161;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "add1->outputs().size() == 1";
      _os_log_impl(&dword_190DAF000, v12, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
LABEL_16:

    return 0;
  }
  if (!Espresso::zephyr::match_simple_eltwise_binop(*(_QWORD *)a2, 0))
  {
    if (!Espresso::zephyr::match_verbose)
      return 0;
    Espresso::espresso_os_log_subsystem(0, v4);
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1162;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "match_simple_eltwise_binop(add1, ELEMENTWISE_OPERATION_ADD)";
      _os_log_impl(&dword_190DAF000, v12, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_16;
  }
  v5 = (Espresso *)v114;
  v114[0] = &off_1E2DB3B80;
  v115 = (Espresso *)v114;
  v6 = (_QWORD *)v2[15];
  if (v2[16] - (_QWORD)v6 == 16)
  {
    v7 = *(_QWORD *)(*v6 + 80);
    v8 = *(_QWORD *)(v6[1] + 80);
    *(_QWORD *)buf = v7;
    v103[0] = v8;
    v10 = std::__function::__func<Espresso::zephyr_passes::merge_pytorch_layernorm(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)#1},std::allocator<Espresso::zephyr_passes::merge_pytorch_layernorm(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)#1}>,BOOL ()(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)>::operator()((uint64_t)v114, (uint64_t *)buf, v103);
    v5 = v115;
    if ((v10 & 1) == 0)
    {
      *(_QWORD *)buf = v8;
      v103[0] = v7;
      if (!v115)
        std::__throw_bad_function_call[abi:ne180100]();
      if ((*(unsigned int (**)(Espresso *, _BYTE *, uint64_t *))(*(_QWORD *)v115 + 48))(v115, buf, v103))
        v7 = v8;
      else
        v7 = 0;
      v5 = v115;
    }
    if (v5 == (Espresso *)v114)
    {
      v11 = 4;
      v5 = (Espresso *)v114;
    }
    else
    {
      if (!v5)
        goto LABEL_24;
      v11 = 5;
    }
  }
  else
  {
    v7 = 0;
    v11 = 4;
  }
  v5 = (Espresso *)(*(uint64_t (**)(void))(*(_QWORD *)v5 + 8 * v11))();
LABEL_24:
  if (!v7)
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(v5, v9);
      v25 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_compl"
                             "ex_subgraph_matching.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1169;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = "mul1";
        _os_log_impl(&dword_190DAF000, v25, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_50;
    }
    return 0;
  }
  v13 = (_QWORD *)v2[15];
  if (v2[16] - (_QWORD)v13 != 16
    || ((v14 = *(Espresso::zephyr::node_t **)(*v13 + 80),
         v15 = *(Espresso::zephyr::node_t **)(v13[1] + 80),
         v15 != (Espresso::zephyr::node_t *)v7)
      ? (v16 = 0)
      : (v16 = v14),
        v14 != (Espresso::zephyr::node_t *)v7 ? (v17 = v16) : (v17 = v15),
        !v17))
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(v5, v9);
      v25 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_compl"
                             "ex_subgraph_matching.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1171;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = "beta_read";
        _os_log_impl(&dword_190DAF000, v25, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
LABEL_50:

      return 0;
    }
    return 0;
  }
  v18 = (Espresso *)v112;
  v112[0] = &off_1E2DB3B28;
  v113 = (Espresso *)v112;
  v19 = *(_QWORD **)(v7 + 120);
  if (*(_QWORD *)(v7 + 128) - (_QWORD)v19 != 16)
  {
    v20 = 0;
    v24 = 4;
    goto LABEL_55;
  }
  v20 = *(_QWORD *)(*v19 + 80);
  v21 = *(_QWORD *)(v19[1] + 80);
  *(_QWORD *)buf = v20;
  v103[0] = v21;
  v23 = std::__function::__func<Espresso::zephyr_passes::merge_pytorch_layernorm(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)#2},std::allocator<Espresso::zephyr_passes::merge_pytorch_layernorm(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)#2}>,BOOL ()(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)>::operator()((uint64_t)v112, (uint64_t *)buf, v103);
  v18 = v113;
  if (!v23)
  {
    *(_QWORD *)buf = v21;
    v103[0] = v20;
    if (!v113)
      std::__throw_bad_function_call[abi:ne180100]();
    if ((*(unsigned int (**)(Espresso *, _BYTE *, uint64_t *))(*(_QWORD *)v113 + 48))(v113, buf, v103))
      v20 = v21;
    else
      v20 = 0;
    v18 = v113;
  }
  if (v18 == (Espresso *)v112)
  {
    v24 = 4;
    v18 = (Espresso *)v112;
    goto LABEL_55;
  }
  if (v18)
  {
    v24 = 5;
LABEL_55:
    v18 = (Espresso *)(*(uint64_t (**)(void))(*(_QWORD *)v18 + 8 * v24))();
  }
  if (!v20)
  {
    if (!Espresso::zephyr::match_verbose)
      return 0;
    Espresso::espresso_os_log_subsystem(v18, v22);
    v25 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1184;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "mul_or_div";
      _os_log_impl(&dword_190DAF000, v25, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_50;
  }
  v28 = *(_QWORD **)(v7 + 120);
  if (*(_QWORD *)(v7 + 128) - (_QWORD)v28 != 16)
    goto LABEL_70;
  v29 = *(Espresso::zephyr::node_t **)(*v28 + 80);
  v30 = *(Espresso::zephyr::node_t **)(v28[1] + 80);
  if (v30 == (Espresso::zephyr::node_t *)v20)
    v31 = v29;
  else
    v31 = 0;
  if (v29 != (Espresso::zephyr::node_t *)v20)
    v30 = v31;
  if (!v30)
  {
LABEL_70:
    if (!Espresso::zephyr::match_verbose)
      return 0;
    Espresso::espresso_os_log_subsystem(v18, v22);
    v25 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1187;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "gamma_read";
      _os_log_impl(&dword_190DAF000, v25, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_50;
  }
  v97 = v30;
  matched = (float *)Espresso::zephyr::match_simple_eltwise_binop(v20, 0x66u);
  if (!matched)
  {
    if (!Espresso::zephyr::match_verbose)
      return 0;
    Espresso::espresso_os_log_subsystem(0, v33);
    v25 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1190;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "match_simple_eltwise_binop(mul_or_div, ELEMENTWISE_OPERATION_DIV)";
      _os_log_impl(&dword_190DAF000, v25, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_50;
  }
  v34 = *(_QWORD *)(v20 + 120);
  v35 = *(_QWORD *)(v20 + 128);
  while (1)
  {
    if (v34 == v35)
      goto LABEL_94;
    if (*(_QWORD *)v34)
    {
      v36 = *(_QWORD *)(*(_QWORD *)v34 + 80);
      matched = (float *)Espresso::zephyr::match_simple_eltwise_unaryop(v36, 11);
      if (matched)
        break;
    }
    v34 += 8;
  }
  if (!v36)
  {
LABEL_94:
    if (!Espresso::zephyr::match_verbose)
      return 0;
    Espresso::espresso_os_log_subsystem((Espresso *)matched, v33);
    v25 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1195;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "denominator";
      _os_log_impl(&dword_190DAF000, v25, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_50;
  }
  v37 = *(_QWORD *)(v36 + 120);
  v38 = *(_QWORD *)(v36 + 128);
  while (1)
  {
    if (v37 == v38)
    {
      if (!Espresso::zephyr::match_verbose)
        return 0;
      Espresso::espresso_os_log_subsystem((Espresso *)matched, v33);
      v25 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_compl"
                             "ex_subgraph_matching.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1220;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = "square_of_denominator";
        _os_log_impl(&dword_190DAF000, v25, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_50;
    }
    if (*(_QWORD *)v37)
    {
      v39 = *(_QWORD *)(*(_QWORD *)v37 + 80);
      matched = (float *)Espresso::zephyr::cast_kernel<Espresso::generic_elementwise_kernel>(v39);
      if (matched)
      {
        matched = (float *)(*(uint64_t (**)(float *))(*(_QWORD *)matched + 320))(matched);
        v41 = *(char **)(v39 + 120);
        v40 = *(char **)(v39 + 128);
        v42 = v40 - v41 == 16 && *(_DWORD *)matched == 1;
        if (v42 && *(_QWORD *)v41 == *((_QWORD *)v41 + 1))
          break;
      }
    }
    v37 += 8;
  }
  if (v41 == v40)
  {
LABEL_112:
    if (!Espresso::zephyr::match_verbose)
      return 0;
    Espresso::espresso_os_log_subsystem((Espresso *)matched, v33);
    v25 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1237;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "reduce_l2";
      _os_log_impl(&dword_190DAF000, v25, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_50;
  }
  v43 = matched[3];
  while (1)
  {
    if (*(_QWORD *)v41)
    {
      v44 = v40;
      v45 = *(_QWORD *)(*(_QWORD *)v41 + 80);
      matched = (float *)Espresso::zephyr::cast_kernel<Espresso::generic_reduce_kernel>(v45);
      v40 = v44;
      if (matched)
      {
        if (*(_QWORD *)(v45 + 128) - *(_QWORD *)(v45 + 120) == 8)
        {
          matched = (float *)(*(uint64_t (**)(float *))(*(_QWORD *)matched + 320))(matched);
          v46 = *(_DWORD *)matched == 5 && *((_DWORD *)matched + 2) == 1;
          v40 = v44;
          if (v46)
            break;
        }
      }
    }
    v41 += 8;
    if (v41 == v40)
      goto LABEL_112;
  }
  v95 = v36;
  v96 = v39;
  v47 = *(uint64_t **)(v45 + 120);
  if (*(uint64_t **)(v45 + 128) == v47)
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  v48 = *v47;
  v49 = *(_QWORD *)(v48 + 80);
  if (!v49)
  {
    if (!Espresso::zephyr::match_verbose)
      return 0;
    Espresso::espresso_os_log_subsystem((Espresso *)matched, v33);
    v25 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1240;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "numerator";
      _os_log_impl(&dword_190DAF000, v25, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_50;
  }
  v50 = (Espresso *)Espresso::zephyr::match_simple_eltwise_binop(*(_QWORD *)(v48 + 80), 0x21u);
  if (!v50)
  {
    if (!Espresso::zephyr::match_verbose)
      return 0;
    Espresso::espresso_os_log_subsystem(0, v51);
    v25 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1242;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "match_simple_eltwise_binop(numerator, ELEMENTWISE_OPERATION_SUBTRACT)";
      _os_log_impl(&dword_190DAF000, v25, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_50;
  }
  v52 = *(_QWORD *)(v49 + 120);
  v53 = *(_QWORD *)(v49 + 128);
  while (1)
  {
    if (v52 == v53)
    {
      if (!Espresso::zephyr::match_verbose)
        return 0;
      Espresso::espresso_os_log_subsystem(v50, v51);
      v25 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_compl"
                             "ex_subgraph_matching.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1258;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = "reduce_mean";
        _os_log_impl(&dword_190DAF000, v25, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_50;
    }
    if (*(_QWORD *)v52)
    {
      v54 = *(_QWORD *)(*(_QWORD *)v52 + 80);
      v50 = (Espresso *)Espresso::zephyr::cast_kernel<Espresso::generic_reduce_kernel>(v54);
      if (v50)
      {
        if (*(_QWORD *)(v54 + 128) - *(_QWORD *)(v54 + 120) == 8)
        {
          v50 = (Espresso *)(*(uint64_t (**)(Espresso *))(*(_QWORD *)v50 + 320))(v50);
          if (*(_DWORD *)v50 == 1 && *((_DWORD *)v50 + 2) == 1)
            break;
        }
      }
    }
    v52 += 8;
  }
  v56 = *(Espresso::zephyr::value_t ***)(v54 + 120);
  if (*(Espresso::zephyr::value_t ***)(v54 + 128) == v56)
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  v57 = (char **)v2[12];
  if ((char **)v2[13] == v57)
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  v94 = *v56;
  v58 = *v57;
  *(_QWORD *)buf = v2;
  *(_QWORD *)&buf[8] = v7;
  *(_QWORD *)&buf[16] = v17;
  *(_QWORD *)&buf[24] = v97;
  v106 = v20;
  v107 = v95;
  v108 = v96;
  v109 = v45;
  v110 = v49;
  v111 = v54;
  std::unordered_set<Espresso::zephyr::node_t *>::unordered_set((uint64_t)v103, (unint64_t *)buf, 10);
  v59 = Espresso::zephyr::find_values_used_externally<std::unordered_set<Espresso::zephyr::node_t *>>(&v100, v103);
  if (v102 != 3)
  {
    if (v102 == 1)
    {
      v61 = 0;
      v62 = v101;
      if (v101)
        goto LABEL_146;
LABEL_157:
      if (Espresso::zephyr::match_verbose)
      {
        Espresso::espresso_os_log_subsystem((Espresso *)v59, v60);
        v66 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v66, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_com"
                               "plex_subgraph_matching.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1286;
          *(_WORD *)&buf[18] = 2080;
          *(_QWORD *)&buf[20] = "external_values.count(y)";
          _os_log_impl(&dword_190DAF000, v66, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
        }
        goto LABEL_182;
      }
LABEL_183:
      v26 = 0;
      goto LABEL_184;
    }
    if (!Espresso::zephyr::match_verbose)
      goto LABEL_183;
    Espresso::espresso_os_log_subsystem((Espresso *)v59, v60);
    v66 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v66, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1277;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "external_values.size() == 1 || external_values.size() == 3";
      _os_log_impl(&dword_190DAF000, v66, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
LABEL_182:

    goto LABEL_183;
  }
  v67 = (unint64_t **)*((_QWORD *)v97 + 12);
  if (*((unint64_t ***)v97 + 13) == v67)
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  v62 = v101;
  if (!v101)
  {
LABEL_175:
    if (!Espresso::zephyr::match_verbose)
      goto LABEL_183;
    Espresso::espresso_os_log_subsystem((Espresso *)v59, v60);
    v66 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v66, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1282;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "external_values.count(gamma_read->output())";
      _os_log_impl(&dword_190DAF000, v66, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_182;
  }
  v68 = *v67;
  v69 = v101;
  while (2)
  {
    if (v68)
      v70 = *v68;
    else
      v70 = 0;
    v71 = (_QWORD *)v69[4];
    if (v71)
    {
      v71 = (_QWORD *)*v71;
      if (v70 < (unint64_t)v71)
      {
LABEL_174:
        v69 = (_QWORD *)*v69;
        if (!v69)
          goto LABEL_175;
        continue;
      }
    }
    break;
  }
  if (v68)
    v72 = *v68;
  else
    v72 = 0;
  if ((unint64_t)v71 < v72)
  {
    ++v69;
    goto LABEL_174;
  }
  v83 = (unint64_t **)*((_QWORD *)v17 + 12);
  if (*((unint64_t ***)v17 + 13) == v83)
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  v84 = *v83;
  v85 = v101;
  while (2)
  {
    if (v84)
      v86 = *v84;
    else
      v86 = 0;
    v87 = (_QWORD *)v85[4];
    if (v87)
    {
      v87 = (_QWORD *)*v87;
      if (v86 < (unint64_t)v87)
      {
LABEL_209:
        v85 = (_QWORD *)*v85;
        if (v85)
          continue;
        if (!Espresso::zephyr::match_verbose)
          goto LABEL_183;
        Espresso::espresso_os_log_subsystem((Espresso *)v59, v60);
        v66 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v66, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_com"
                               "plex_subgraph_matching.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1283;
          *(_WORD *)&buf[18] = 2080;
          *(_QWORD *)&buf[20] = "external_values.count(beta_read->output())";
          _os_log_impl(&dword_190DAF000, v66, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
        }
        goto LABEL_182;
      }
    }
    break;
  }
  if (v84)
    v88 = *v84;
  else
    v88 = 0;
  if ((unint64_t)v87 < v88)
  {
    ++v85;
    goto LABEL_209;
  }
  v61 = 1;
LABEL_146:
  while (2)
  {
    if (v58)
      v63 = *(_QWORD *)v58;
    else
      v63 = 0;
    v64 = (_QWORD *)v62[4];
    if (v64)
    {
      v64 = (_QWORD *)*v64;
      if (v63 < (unint64_t)v64)
      {
LABEL_156:
        v62 = (_QWORD *)*v62;
        if (!v62)
          goto LABEL_157;
        continue;
      }
    }
    break;
  }
  if (v58)
    v65 = *(_QWORD *)v58;
  else
    v65 = 0;
  if ((unint64_t)v64 < v65)
  {
    ++v62;
    goto LABEL_156;
  }
  Espresso::zephyr_passes::create_instancenorm_kenel((Espresso::zephyr_passes *)&v98, v97, v17, v43);
  v75 = v98;
  v26 = v98 != 0;
  if (v98)
  {
    v76 = Espresso::zephyr::function_t::new_detached_node(v2[3], (uint64_t)(v2 + 18));
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(*((_QWORD *)v76 + 1) + 8), v75, (uint64_t)v99);
    Espresso::zephyr::node_t::add_input((Espresso::zephyr::node_t *)v76, v94);
    Espresso::zephyr::node_t::add_output((Espresso::zephyr::node_t *)v76, (Espresso::zephyr::value_t *)v58);
    Espresso::espresso_os_log_subsystem(v77, v78);
    v79 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v79, OS_LOG_TYPE_DEBUG))
    {
      v93 = v58 + 32;
      if (v58[55] < 0)
        v93 = (_QWORD *)*v93;
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v93;
      _os_log_debug_impl(&dword_190DAF000, v79, OS_LOG_TYPE_DEBUG, "zephyr_passes::merge_pytorch_layernorm: at %s", buf, 0xCu);
    }

    Espresso::zephyr::ordered_block_t::insert_node_after(*a1[1], (Espresso::zephyr::node_t *)v76, (Espresso::zephyr::node_t *)v2);
    for (i = v104; i; i = (_QWORD *)*i)
    {
      v81 = (Espresso::zephyr::node_t *)i[2];
      if (v61)
      {
        if (v81 == v97 || v81 == v17)
          continue;
      }
      Espresso::zephyr::node_t::remove_from_graphs(v81);
    }
  }
  else if (Espresso::zephyr::match_verbose)
  {
    Espresso::espresso_os_log_subsystem(v73, v74);
    v89 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v89, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex"
                           "_subgraph_matching.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1292;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "instancenorm_kernel";
      _os_log_impl(&dword_190DAF000, v89, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }

  }
  v90 = v99;
  if (v99)
  {
    p_shared_owners = (unint64_t *)&v99->__shared_owners_;
    do
      v92 = __ldaxr(p_shared_owners);
    while (__stlxr(v92 - 1, p_shared_owners));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
LABEL_184:
  std::__tree<int>::destroy(v101);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)v103);
  return v26;
}

void sub_191476E70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _QWORD *a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  std::__tree<int>::destroy(a9);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<Espresso::zephyr_passes::merge_pytorch_layernorm(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::merge_pytorch_layernorm(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN8Espresso13zephyr_passes23merge_pytorch_layernormERNS_6zephyr10function_tEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<Espresso::zephyr_passes::merge_pytorch_layernorm(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::merge_pytorch_layernorm(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::target_type()
{
}

void std::__function::__func<Espresso::zephyr_passes::merge_pytorch_layernorm(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)#2},std::allocator<Espresso::zephyr_passes::merge_pytorch_layernorm(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)#2}>,BOOL ()(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<Espresso::zephyr_passes::merge_pytorch_layernorm(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)#2},std::allocator<Espresso::zephyr_passes::merge_pytorch_layernorm(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)#2}>,BOOL ()(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2DB3B28;
  return result;
}

void std::__function::__func<Espresso::zephyr_passes::merge_pytorch_layernorm(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)#2},std::allocator<Espresso::zephyr_passes::merge_pytorch_layernorm(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)#2}>,BOOL ()(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2DB3B28;
}

BOOL std::__function::__func<Espresso::zephyr_passes::merge_pytorch_layernorm(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)#2},std::allocator<Espresso::zephyr_passes::merge_pytorch_layernorm(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)#2}>,BOOL ()(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)>::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  void *matched;
  void *constant;
  BOOL v7;

  v3 = *a2;
  v4 = *a3;
  matched = Espresso::zephyr::match_simple_eltwise_binop(*a2, 1u);
  if (!matched)
    matched = Espresso::zephyr::match_simple_eltwise_binop(v3, 0x66u);
  constant = Espresso::zephyr::cast_kernel<Espresso::generic_load_constant_kernel>(v4);
  if (matched)
    v7 = constant == 0;
  else
    v7 = 1;
  return !v7;
}

uint64_t std::__function::__func<Espresso::zephyr_passes::merge_pytorch_layernorm(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)#2},std::allocator<Espresso::zephyr_passes::merge_pytorch_layernorm(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)#2}>,BOOL ()(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZZN8Espresso13zephyr_passes23merge_pytorch_layernormERNS_6zephyr10function_tEENK3$_0clEPNS1_6node_tEEUlS6_S6_E0_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<Espresso::zephyr_passes::merge_pytorch_layernorm(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)#2},std::allocator<Espresso::zephyr_passes::merge_pytorch_layernorm(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)#2}>,BOOL ()(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)>::target_type()
{
}

void std::__function::__func<Espresso::zephyr_passes::merge_pytorch_layernorm(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)#1},std::allocator<Espresso::zephyr_passes::merge_pytorch_layernorm(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)#1}>,BOOL ()(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<Espresso::zephyr_passes::merge_pytorch_layernorm(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)#1},std::allocator<Espresso::zephyr_passes::merge_pytorch_layernorm(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)#1}>,BOOL ()(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2DB3B80;
  return result;
}

void std::__function::__func<Espresso::zephyr_passes::merge_pytorch_layernorm(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)#1},std::allocator<Espresso::zephyr_passes::merge_pytorch_layernorm(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)#1}>,BOOL ()(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2DB3B80;
}

void *std::__function::__func<Espresso::zephyr_passes::merge_pytorch_layernorm(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)#1},std::allocator<Espresso::zephyr_passes::merge_pytorch_layernorm(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)#1}>,BOOL ()(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)>::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  void *result;

  v3 = *a3;
  result = Espresso::zephyr::match_simple_eltwise_binop(*a2, 1u);
  if (result)
    return (void *)(Espresso::zephyr::cast_kernel<Espresso::generic_load_constant_kernel>(v3) != 0);
  return result;
}

uint64_t std::__function::__func<Espresso::zephyr_passes::merge_pytorch_layernorm(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)#1},std::allocator<Espresso::zephyr_passes::merge_pytorch_layernorm(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)#1}>,BOOL ()(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZZN8Espresso13zephyr_passes23merge_pytorch_layernormERNS_6zephyr10function_tEENK3$_0clEPNS1_6node_tEEUlS6_S6_E_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<Espresso::zephyr_passes::merge_pytorch_layernorm(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)#1},std::allocator<Espresso::zephyr_passes::merge_pytorch_layernorm(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)#1}>,BOOL ()(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)>::target_type()
{
}

void sub_1914771BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  Espresso::zephyr::function_t::~function_t((Espresso::zephyr::function_t *)&a9);
  _Unwind_Resume(a1);
}

uint64_t Espresso::zephyr_passes::optimize_coreml_conv1d_lrelu(Espresso::zephyr_passes *this, Espresso::zephyr::function_t *a2)
{
  char *v2;
  char *v3;
  char v4;
  uint64_t v5;
  char matched;
  _QWORD *v7;
  uint64_t v8;
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = (char *)this + 64;
  v3 = (char *)*((_QWORD *)this + 9);
  if (v3 != (char *)this + 64)
  {
    v4 = 0;
    while (1)
    {
      v5 = *((_QWORD *)v3 + 2);
      v10[0] = &off_1E2DB0C10;
      v10[1] = v3 + 16;
      v11 = v10;
      matched = Espresso::zephyr::ordered_block_t::match_transform(v5, (uint64_t)v10);
      v7 = v11;
      if (v11 == v10)
        break;
      if (v11)
      {
        v8 = 5;
LABEL_7:
        (*(void (**)(void))(*v7 + 8 * v8))();
      }
      v4 |= matched;
      v3 = (char *)*((_QWORD *)v3 + 1);
      if (v3 == v2)
        return v4 & 1;
    }
    v7 = v10;
    v8 = 4;
    goto LABEL_7;
  }
  v4 = 0;
  return v4 & 1;
}

void sub_1914772B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void std::__function::__func<Espresso::zephyr_passes::optimize_coreml_conv1d_lrelu(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::optimize_coreml_conv1d_lrelu(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<Espresso::zephyr_passes::optimize_coreml_conv1d_lrelu(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::optimize_coreml_conv1d_lrelu(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DB0C10;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<Espresso::zephyr_passes::optimize_coreml_conv1d_lrelu(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::optimize_coreml_conv1d_lrelu(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DB0C10;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<Espresso::zephyr_passes::optimize_coreml_conv1d_lrelu(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::optimize_coreml_conv1d_lrelu(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t *v3;
  void *v4;
  const char *v5;
  void *v6;
  Espresso *v7;
  const char *v8;
  __n128 v9;
  __n128 v10;
  Espresso *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  int v16;
  int v17;
  unsigned __int32 *v18;
  unsigned __int32 v19;
  NSObject *v20;
  int v21;
  unint64_t *v22;
  unint64_t v23;
  Espresso::zephyr::value_t **v24;
  uint64_t v25;
  Espresso::zephyr::value_t *v26;
  Espresso::zephyr::node_t *v27;
  void *v28;
  const char *v29;
  _DWORD *v30;
  const char *v31;
  _QWORD *v32;
  BOOL v33;
  int v34;
  Espresso::zephyr::value_t **v35;
  Espresso::zephyr::value_t *v36;
  Espresso::zephyr::value_t **v37;
  Espresso::zephyr::value_t *v38;
  uint64_t v39;
  const char *v40;
  Espresso *v41;
  const char *v42;
  int v43;
  uint64_t v44;
  void *v45;
  const char *v46;
  _DWORD *v47;
  const char *v48;
  _QWORD *v49;
  BOOL v50;
  int v51;
  NSObject *v52;
  const char *v53;
  NSObject *v54;
  uint32_t v55;
  NSObject *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  char *v64;
  Espresso *inserted;
  const char *v66;
  Espresso::zephyr::value_t *v67;
  Espresso::zephyr::value_t *v68;
  int v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  uint8_t buf[4];
  const char *v73;
  __int16 v74;
  int v75;
  __int16 v76;
  const char *v77;
  uint64_t v78;

  v78 = *MEMORY[0x1E0C80C00];
  v3 = (uint64_t *)*a2;
  v4 = Espresso::zephyr::cast_kernel<Espresso::generic_activation_kernel>(*a2);
  if (!v4)
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(0, v5);
      v20 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        v73 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex_subgraph_matching.mm";
        v74 = 1024;
        v75 = 1336;
        v76 = 2080;
        v77 = "act_k";
        _os_log_impl(&dword_190DAF000, v20, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_92;
    }
    return 0;
  }
  v6 = v4;
  v7 = (Espresso *)(*(uint64_t (**)(void *))(*(_QWORD *)v4 + 384))(v4);
  v11 = v7;
  if (*(_DWORD *)v7 == 2)
  {
    v21 = 0;
    v19 = 0;
  }
  else
  {
    if (*(_DWORD *)v7 != 4)
    {
      if (Espresso::zephyr::match_verbose)
      {
        Espresso::espresso_os_log_subsystem(v7, v8);
        v20 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315650;
          v73 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex_subgraph_matching.mm";
          v74 = 1024;
          v75 = 1339;
          v76 = 2080;
          v77 = "act_params.mode == ACTIVATION_PRELU || act_params.mode == ACTIVATION_LEAKY_RELU";
          _os_log_impl(&dword_190DAF000, v20, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
        }
        goto LABEL_92;
      }
      return 0;
    }
    v12 = *((_QWORD *)v6 + 43);
    v13 = (std::__shared_weak_count *)*((_QWORD *)v6 + 44);
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
    }
    v16 = *(_DWORD *)(v12 + 8);
    if (v16)
    {
      v17 = 0;
      v18 = *(unsigned __int32 **)(v12 + 16);
      v9.n128_u32[0] = *v18;
      v10.n128_u32[0] = 0;
      while (1)
      {
        v19 = *v18;
        if (v17)
        {
          v19 = v10.n128_u32[0];
          if (v9.n128_f32[0] != v10.n128_f32[0])
            break;
        }
        ++v17;
        v10.n128_u32[0] = v19;
        if (v16 == v17)
        {
          if (!v13)
            goto LABEL_28;
          goto LABEL_24;
        }
      }
      if (Espresso::zephyr::match_verbose)
      {
        Espresso::espresso_os_log_subsystem(v7, v8);
        v56 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v56, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315394;
          v73 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex_subgraph_matching.mm";
          v74 = 1024;
          v75 = 1350;
          _os_log_impl(&dword_190DAF000, v56, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d\n", buf, 0x12u);
        }

      }
      if (v13)
      {
        v57 = (unint64_t *)&v13->__shared_owners_;
        do
          v58 = __ldaxr(v57);
        while (__stlxr(v58 - 1, v57));
        if (!v58)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      return 0;
    }
    v19 = 0;
    if (!v13)
      goto LABEL_28;
LABEL_24:
    v22 = (unint64_t *)&v13->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *, __n128, __n128))v13->__on_zero_shared)(v13, v9, v10);
      std::__shared_weak_count::__release_weak(v13);
    }
LABEL_28:
    v21 = 1;
  }
  v24 = (Espresso::zephyr::value_t **)v3[12];
  if ((Espresso::zephyr::value_t **)v3[13] == v24)
    goto LABEL_114;
  v25 = v3[15];
  if (v3[16] == v25)
    goto LABEL_114;
  v26 = *v24;
  v27 = *(Espresso::zephyr::node_t **)(*(_QWORD *)v25 + 80);
  v28 = Espresso::zephyr::cast_kernel<Espresso::generic_squeeze_kernel>((uint64_t)v27);
  if (!v28)
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(0, v29);
      v20 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        v73 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex_subgraph_matching.mm";
        v74 = 1024;
        v75 = 1361;
        v76 = 2080;
        v77 = "squeeze_k";
        _os_log_impl(&dword_190DAF000, v20, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_92;
    }
    return 0;
  }
  v30 = (_DWORD *)(*(uint64_t (**)(void *))(*(_QWORD *)v28 + 320))(v28);
  v32 = v30;
  v33 = v30[1] == 1 && v30[2] == -2;
  v34 = v33;
  if (!v33 && *v30 != 2)
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem((Espresso *)v30, v31);
      v20 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315394;
        v73 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex_subgraph_matching.mm";
        v74 = 1024;
        v75 = 1367;
        _os_log_impl(&dword_190DAF000, v20, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d\n", buf, 0x12u);
      }
LABEL_92:

      return 0;
    }
    return 0;
  }
  v35 = (Espresso::zephyr::value_t **)*((_QWORD *)v27 + 12);
  if (*((Espresso::zephyr::value_t ***)v27 + 13) == v35)
    goto LABEL_114;
  v36 = *v35;
  if (*((_QWORD *)*v35 + 8) - *((_QWORD *)*v35 + 7) != 16)
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem((Espresso *)v30, v31);
      v20 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        v73 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex_subgraph_matching.mm";
        v74 = 1024;
        v75 = 1370;
        v76 = 2080;
        v77 = "squeeze_out->has_one_use()";
        _os_log_impl(&dword_190DAF000, v20, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_92;
    }
    return 0;
  }
  v69 = v34;
  v68 = v26;
  v37 = (Espresso::zephyr::value_t **)*((_QWORD *)v27 + 15);
  if (*((Espresso::zephyr::value_t ***)v27 + 16) == v37)
LABEL_114:
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  v38 = *v37;
  v39 = *((_QWORD *)*v37 + 10);
  if (!Espresso::zephyr::cast_kernel<Espresso::generic_convolution_kernel>(v39))
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(0, v40);
      v20 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        v73 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex_subgraph_matching.mm";
        v74 = 1024;
        v75 = 1377;
        v76 = 2080;
        v77 = "conv_k";
        _os_log_impl(&dword_190DAF000, v20, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_92;
    }
    return 0;
  }
  v67 = v38;
  Espresso::zephyr::need_shape((Espresso::zephyr *)&v70, v38);
  if (!v70 || (v43 = *(_DWORD *)(v70 + 20), v43 != 4) && (v43 != -1 || *(_DWORD *)(v70 + 16) != 1))
  {
    if (!Espresso::zephyr::match_verbose)
      goto LABEL_98;
    Espresso::espresso_os_log_subsystem(v41, v42);
    v52 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v52, OS_LOG_TYPE_INFO))
      goto LABEL_87;
    *(_DWORD *)buf = 136315650;
    v73 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex_subgraph_matching.mm";
    v74 = 1024;
    v75 = 1379;
    v76 = 2080;
    v77 = "conv_out_shape_ptr && conv_out_shape_ptr->rank() == 4";
    v53 = "ZEPHYR_MATCH_FAIL %s:%d '%s'\n";
LABEL_85:
    v54 = v52;
    v55 = 28;
    goto LABEL_86;
  }
  v44 = *(_QWORD *)(v39 + 120);
  if (*(_QWORD *)(v39 + 128) == v44)
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  v45 = Espresso::zephyr::cast_kernel<Espresso::generic_expand_dims_kernel>(*(_QWORD *)(*(_QWORD *)v44 + 80));
  if (!v45)
  {
    if (!Espresso::zephyr::match_verbose)
      goto LABEL_98;
    Espresso::espresso_os_log_subsystem(0, v46);
    v52 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v52, OS_LOG_TYPE_INFO))
      goto LABEL_87;
    *(_DWORD *)buf = 136315650;
    v73 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex_subgraph_matching.mm";
    v74 = 1024;
    v75 = 1385;
    v76 = 2080;
    v77 = "expand_dims_k";
    v53 = "ZEPHYR_MATCH_FAIL %s:%d '%s'\n";
    goto LABEL_85;
  }
  v47 = (_DWORD *)(*(uint64_t (**)(void *))(*(_QWORD *)v45 + 320))(v45);
  v49 = v47;
  v50 = v47[1] == 1 && v47[2] == -2;
  v51 = v50;
  if (v50 || *v47 == 2)
  {
    if (v21)
    {
      std::shared_ptr<Espresso::blob<unsigned short,4>>::reset[abi:ne180100]((_QWORD *)v6 + 43);
      *(_DWORD *)v11 = 2;
      *((_DWORD *)v11 + 1) = v19;
      *((_DWORD *)v11 + 2) = 0;
    }
    if (v69)
      *v32 = 2;
    if (v51)
      *v49 = 2;
    v64 = Espresso::zephyr::function_t::new_value(v3[3], (uint64_t)v36 + 32);
    Espresso::zephyr::node_t::replace_output_at((uint64_t)v3, 0, (Espresso::zephyr::value_t *)v64);
    Espresso::zephyr::node_t::replace_input_with((Espresso::zephyr::node_t *)v3, v36, v67);
    Espresso::zephyr::node_t::remove_from_graphs(v27);
    Espresso::zephyr::node_t::add_input(v27, (Espresso::zephyr::value_t *)v64);
    Espresso::zephyr::node_t::add_output(v27, v68);
    inserted = (Espresso *)Espresso::zephyr::ordered_block_t::insert_node_after(**(Espresso::zephyr::ordered_block_t ***)(a1 + 8), v27, (Espresso::zephyr::node_t *)v3);
    if (!Espresso::zephyr::match_verbose)
    {
      v59 = 1;
      goto LABEL_99;
    }
    Espresso::espresso_os_log_subsystem(inserted, v66);
    v52 = objc_claimAutoreleasedReturnValue();
    v59 = 1;
    if (os_log_type_enabled(v52, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315394;
      v73 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex_subgraph_matching.mm";
      v74 = 1024;
      v75 = 1431;
      _os_log_impl(&dword_190DAF000, v52, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_PASS %s:%d\n", buf, 0x12u);
    }
    goto LABEL_88;
  }
  if (!Espresso::zephyr::match_verbose)
  {
LABEL_98:
    v59 = 0;
    goto LABEL_99;
  }
  Espresso::espresso_os_log_subsystem((Espresso *)v47, v48);
  v52 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v52, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    v73 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_complex_subgraph_matching.mm";
    v74 = 1024;
    v75 = 1391;
    v53 = "ZEPHYR_MATCH_FAIL %s:%d\n";
    v54 = v52;
    v55 = 18;
LABEL_86:
    _os_log_impl(&dword_190DAF000, v54, OS_LOG_TYPE_INFO, v53, buf, v55);
  }
LABEL_87:
  v59 = 0;
LABEL_88:

LABEL_99:
  v61 = v71;
  if (v71)
  {
    v62 = (unint64_t *)&v71->__shared_owners_;
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  return v59;
}

void sub_191477CA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  unint64_t *p_shared_owners;
  unint64_t v16;

  if (a14)
  {
    p_shared_owners = (unint64_t *)&a14->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))a14->__on_zero_shared)(a14);
      std::__shared_weak_count::__release_weak(a14);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<Espresso::zephyr_passes::optimize_coreml_conv1d_lrelu(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::optimize_coreml_conv1d_lrelu(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN8Espresso13zephyr_passes28optimize_coreml_conv1d_lreluERNS_6zephyr10function_tEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<Espresso::zephyr_passes::optimize_coreml_conv1d_lrelu(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::optimize_coreml_conv1d_lrelu(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::target_type()
{
}

float *channelnorm1d_training_slice(float *a1, unint64_t a2, unint64_t a3, uint64_t a4, float *a5, uint64_t a6, const float *a7, unint64_t a8, double a9, double a10, double a11, double a12, double a13, double a14, unint64_t a15, float *a16, float *a17, BOOL a18, BOOL a19)
{
  float32x4_t v19;
  float32x4_t v20;
  float *v21;
  uint64_t v27;
  uint64_t v28;
  float v29;
  float v30;
  float32x4_t v31;
  unint64_t v32;
  const float *v33;
  unint64_t v34;
  const float *v35;
  unint64_t v36;
  const float *v37;
  uint64_t v38;
  float *v39;
  float *v40;
  uint64_t v41;
  float32x4_t v42;
  float *v43;
  float *v44;
  const float *v45;
  float *v46;
  uint64_t v47;
  uint64_t v48;
  float32x4_t *v49;
  const float *v50;
  const float *v51;
  const float *v52;
  uint64_t v53;
  unint64_t v54;
  float32x4_t v55;
  float32x4_t v56;
  uint64_t v57;
  float32x4_t v58;
  float32x4_t v59;
  unint64_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  unint64_t v67;
  unint64_t v68;
  float32x4_t v69;
  float32x4_t v70;
  unint64_t v71;
  uint64_t v72;
  float32x4_t v73;
  float32x4_t v74;
  uint64_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t *v90;
  float32x4_t *v91;
  float32x4_t *v92;
  float32x4_t *v93;
  unint64_t v94;
  uint64_t v95;
  float32x4_t *v96;
  unint64_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t *v102;
  const float *v103;
  const float *v104;
  unint64_t v105;
  float32x4_t v106;
  float32x4_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  const float *v112;
  const float *v113;
  const float *v114;
  const float *v115;
  uint64_t v116;
  unint64_t v117;
  float32x4_t v118;
  float32x4_t v119;
  uint64_t v120;
  unint64_t v121;
  float32x4_t v122;
  float32x4_t v123;
  unint64_t v124;
  unint64_t v125;
  float32x4_t v126;
  unint64_t v127;
  float32x4_t v128;
  float32x4_t v129;
  const float *v130;
  const float *v131;
  const float *v132;
  float *v133;
  const float *v134;
  float *v135;
  float32x4_t v136;
  float *v137;
  float *v138;
  float32x4_t v139;
  float32x4_t v140;
  float32x4_t v141;
  float32x4_t v142;
  float32x4_t v143;
  float32x4_t v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  float32x4_t v149;
  uint64_t v150;
  float *v151;
  float *v152;
  unint64_t v153;
  float v154;
  float v155;
  __int32 v156;
  uint64_t v157;
  float v158;
  uint64_t v159;
  unint64_t v160;
  float v161;
  float v162;
  const float *v163;
  float *v164;
  unint64_t v165;
  float v166;
  float v167;
  float *v168;
  float *v169;
  float *v170;
  unint64_t v171;
  float v172;
  float v173;
  float v174;
  unint64_t v175;
  unint64_t v176;
  float *result;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  float *v181;
  const float *v182;
  float v183;
  float v184;
  unint64_t v185;
  float32x4_t v186;
  const float *v187;
  const float *v188;
  unint64_t v189;
  uint64_t v190;
  float *v191;
  float *v192;
  uint64_t v193;
  const float *v194;
  uint64_t v195;
  float *v196;
  char *v197;
  float32x4_t v198;
  uint64_t v199;
  const float *v200;
  uint64_t v201;
  uint64_t v202;
  float32x4_t *v203;
  float *v204;
  const float *v205;
  const float *v206;
  uint64_t v207;
  unint64_t v208;
  float32x4_t v209;
  float32x4_t v210;
  uint64_t v211;
  float32x4_t v212;
  float32x4_t v213;
  unint64_t v214;
  float32x4_t v215;
  float32x4_t v216;
  float32x4_t v217;
  float32x4_t v218;
  float32x4_t v219;
  float32x4_t v220;
  unint64_t v221;
  unint64_t v222;
  float32x4_t v223;
  float32x4_t v224;
  unint64_t v225;
  float32x4_t v226;
  uint64_t v227;
  float32x4_t v228;
  float32x4_t v229;
  uint64_t v230;
  float32x4_t v231;
  float32x4_t v232;
  float32x4_t v233;
  float32x4_t v234;
  float32x4_t v235;
  float32x4_t v236;
  float32x4_t v237;
  float32x4_t v238;
  float32x4_t v239;
  float32x4_t v240;
  float32x4_t v241;
  float32x4_t v242;
  float32x4_t v243;
  float32x4_t v244;
  float32x4_t *v245;
  float32x4_t *v246;
  float32x4_t *v247;
  float32x4_t *v248;
  unint64_t v249;
  uint64_t v250;
  float32x4_t *v251;
  unint64_t v252;
  float32x4_t v253;
  float32x4_t v254;
  float32x4_t v255;
  float32x4_t *v256;
  float32x4_t v257;
  const float *v258;
  const float *v259;
  float32x4_t *v260;
  unint64_t v261;
  float32x4_t v262;
  float32x4_t v263;
  float32x4_t v264;
  float32x4_t v265;
  uint64_t v266;
  uint64_t v267;
  unint64_t v268;
  uint64_t v269;
  uint64_t v270;
  const float *v271;
  const float *v272;
  const float *v273;
  const float *v274;
  uint64_t v275;
  unint64_t v276;
  float32x4_t v277;
  float32x4_t v278;
  uint64_t v279;
  unint64_t v280;
  float32x4_t v281;
  float32x4_t v282;
  unint64_t v283;
  unint64_t v284;
  float32x4_t v285;
  unint64_t v286;
  float32x4_t v287;
  float32x4_t v288;
  const float *v289;
  const float *v290;
  const float *v291;
  float *v292;
  float *v293;
  const float *v294;
  float32x4_t v295;
  float32x4_t v296;
  float *v297;
  float *v298;
  float32x4_t v299;
  float32x4_t v300;
  float32x4_t v301;
  float32x4_t v302;
  float32x4_t v303;
  float32x4_t v304;
  unint64_t v305;
  uint64_t v306;
  uint64_t v307;
  unint64_t v308;
  float32x4_t v309;
  uint64_t v310;
  float32x4_t v311;
  float *v312;
  float *v313;
  uint64_t v314;
  unint64_t v315;
  float v316;
  float v317;
  __int32 v318;
  uint64_t v319;
  float v320;
  uint64_t v321;
  unint64_t v322;
  float v323;
  float v324;
  uint64_t v325;
  uint64_t v326;
  unint64_t v327;
  float v328;
  uint64_t v329;
  float v330;
  float *v331;
  float *v332;
  uint64_t v333;
  unint64_t v334;
  float v335;
  float v336;
  float v337;
  float v338;
  const float *v340;
  const float *v341;
  const float *v343;
  const float *v344;
  uint64_t v345;
  uint64_t v347;
  const float *v348;
  unint64_t v349;
  uint64_t v350;
  const float *v351;
  unint64_t v352;
  uint64_t v353;
  const float *v355;
  uint64_t v356;
  const float *v357;
  const float *v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  float *v362;
  const float *v363;
  float *v364;
  float *v365;
  const float *v366;
  float *v367;
  float *v368;
  uint64_t v369;
  unint64_t v370;
  const float *v371;
  unint64_t v372;
  const float *v373;
  const float *v374;
  float *v375;
  const float *v376;
  const float *v377;
  float *v378;
  float *v379;
  const float *v380;
  const float *v381;
  float *v382;
  float *v383;
  const float *v384;
  float *v385;
  float *v386;
  uint64_t v387;
  float *v388;
  uint64_t v389;
  uint64_t v390;
  char *v391;

  v21 = a17;
  __asm { FMOV            V1.4S, #1.0 }
  v389 = a6;
  if (_ZF && a4)
  {
    v369 = 0;
    v27 = 0;
    v28 = 0;
    v29 = 1.0 / (float)a8;
    v30 = 1.0 / (float)((float)a8 + -1.0);
    LODWORD(a14) = 0;
    if (a19)
      *(float *)&a13 = 0.0;
    else
      *(float *)&a13 = *(float *)&a9;
    if (a19)
      *(float *)&a14 = *(float *)&a9;
    v31 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a14, 0);
    v32 = a8 & 0xFFFFFFFFFFFFFFFCLL;
    v33 = a7;
    v352 = a15 * a8;
    v34 = 16 * a15;
    v35 = &a7[2 * a15];
    v36 = 4 * a15;
    v37 = &a7[a15];
    v348 = &a7[3 * a15];
    v350 = 4 * a8 * a6;
    v38 = 16 * a6;
    v39 = &a5[3 * a6];
    v40 = &a5[2 * a6];
    v41 = 4 * a6;
    v42 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a13, 0);
    v43 = &a5[a6];
    v365 = v39;
    v367 = v40;
    if (!a18)
      v30 = 1.0 / (float)a8;
    v44 = a5;
    v344 = &a7[2 * a15];
    v45 = &a7[3 * a15];
    v372 = a2;
    do
    {
      v359 = v28;
      v361 = v27;
      v357 = v37;
      v363 = v35;
      v46 = v21;
      if (a2 >= 8)
      {
        v48 = 0;
        v49 = (float32x4_t *)v44;
        v50 = v33;
        v51 = v37;
        v52 = v45;
        v53 = 8;
        do
        {
          v47 = v53;
          if (a8 >= 4)
          {
            v57 = 0;
            v58 = 0uLL;
            v59 = 0uLL;
            v60 = 4;
            v61 = 0uLL;
            v62 = 0uLL;
            v63 = 0uLL;
            v64 = 0uLL;
            v65 = 0uLL;
            v66 = 0uLL;
            do
            {
              v59 = vaddq_f32(v59, *(float32x4_t *)((char *)v50 + v57 + 16));
              v58 = vaddq_f32(v58, *(float32x4_t *)((char *)v50 + v57));
              v62 = vaddq_f32(v62, *(float32x4_t *)((char *)v51 + v57 + 16));
              v61 = vaddq_f32(v61, *(float32x4_t *)((char *)v51 + v57));
              v64 = vaddq_f32(v64, *(float32x4_t *)((char *)v35 + v57 + 16));
              v63 = vaddq_f32(v63, *(float32x4_t *)((char *)v35 + v57));
              v66 = vaddq_f32(v66, *(float32x4_t *)((char *)v52 + v57 + 16));
              v65 = vaddq_f32(v65, *(float32x4_t *)((char *)v52 + v57));
              v60 += 4;
              v57 += v34;
            }
            while (v60 <= a8);
            v55 = vaddq_f32(vaddq_f32(v65, v63), vaddq_f32(v61, v58));
            v56 = vaddq_f32(vaddq_f32(v66, v64), vaddq_f32(v62, v59));
            v54 = v32;
          }
          else
          {
            v54 = 0;
            v55 = 0uLL;
            v56 = 0uLL;
          }
          v67 = a8 - v54;
          if (a8 > v54)
          {
            v68 = v36 * v54;
            do
            {
              v56 = vaddq_f32(v56, *(float32x4_t *)((char *)v50 + v68 + 16));
              v55 = vaddq_f32(v55, *(float32x4_t *)((char *)v50 + v68));
              v68 += v36;
              --v67;
            }
            while (v67);
          }
          v69 = vmulq_n_f32(v55, v29);
          v70 = vmulq_n_f32(v56, v29);
          if (a8 >= 4)
          {
            v72 = 0;
            v71 = 0;
            v73 = 0uLL;
            v74 = 0uLL;
            v75 = v27;
            v76 = 0uLL;
            v77 = 0uLL;
            v78 = 0uLL;
            v79 = 0uLL;
            v80 = 0uLL;
            v81 = 0uLL;
            do
            {
              v82 = vsubq_f32(*(float32x4_t *)((char *)v50 + v72), v69);
              v83 = vsubq_f32(*(float32x4_t *)((char *)v50 + v72 + 16), v70);
              v84 = vsubq_f32(*(float32x4_t *)((char *)v51 + v72), v69);
              v85 = vsubq_f32(*(float32x4_t *)((char *)v51 + v72 + 16), v70);
              v86 = vsubq_f32(*(float32x4_t *)((char *)v35 + v72), v69);
              v87 = vsubq_f32(*(float32x4_t *)((char *)v35 + v72 + 16), v70);
              v88 = vsubq_f32(*(float32x4_t *)((char *)v52 + v72), v69);
              v89 = vsubq_f32(*(float32x4_t *)((char *)v52 + v72 + 16), v70);
              v90 = (float32x4_t *)((char *)a5 + v75);
              *v90 = v82;
              v90[1] = v83;
              v91 = (float32x4_t *)((char *)v43 + v75);
              *v91 = v84;
              v91[1] = v85;
              v92 = (float32x4_t *)((char *)v40 + v75);
              *v92 = v86;
              v92[1] = v87;
              v93 = (float32x4_t *)((char *)v39 + v75);
              *v93 = v88;
              v93[1] = v89;
              v74 = vmlaq_f32(v74, v83, v83);
              v73 = vmlaq_f32(v73, v82, v82);
              v77 = vmlaq_f32(v77, v85, v85);
              v76 = vmlaq_f32(v76, v84, v84);
              v81 = vmlaq_f32(v81, v87, v87);
              v80 = vmlaq_f32(v80, v86, v86);
              v79 = vmlaq_f32(v79, v89, v89);
              v94 = v71 + 8;
              v78 = vmlaq_f32(v78, v88, v88);
              v71 += 4;
              v75 += v38;
              v72 += v34;
            }
            while (v94 <= a8);
            v19 = vaddq_f32(vaddq_f32(v80, v78), vaddq_f32(v76, v73));
            v20 = vaddq_f32(vaddq_f32(v81, v79), vaddq_f32(v77, v74));
          }
          else
          {
            v71 = 0;
            v19 = 0uLL;
            v20 = 0uLL;
          }
          v95 = a8 - v71;
          if (a8 > v71)
          {
            v96 = (float32x4_t *)&v44[v48 + a6 * v71];
            v97 = v36 * v71;
            do
            {
              v98 = vsubq_f32(*(float32x4_t *)((char *)v50 + v97), v69);
              v99 = vsubq_f32(*(float32x4_t *)((char *)v50 + v97 + 16), v70);
              *v96 = v98;
              v96[1] = v99;
              v20 = vmlaq_f32(v20, v99, v99);
              v19 = vmlaq_f32(v19, v98, v98);
              v96 = (float32x4_t *)((char *)v96 + v41);
              v97 += v36;
              --v95;
            }
            while (v95);
          }
          if (a8)
          {
            v100 = vdivq_f32(_Q1, vaddq_f32(v42, vsqrtq_f32(vaddq_f32(v31, vmulq_n_f32(v19, v30)))));
            v101 = vdivq_f32(_Q1, vaddq_f32(v42, vsqrtq_f32(vaddq_f32(v31, vmulq_n_f32(v20, v30)))));
            v102 = v49;
            v103 = a16;
            v104 = v46;
            v105 = a8;
            do
            {
              v106 = vld1q_dup_f32(v103++);
              v20 = vmulq_f32(v100, *v102);
              v19 = vmulq_f32(v101, v102[1]);
              v107 = vld1q_dup_f32(v104++);
              *v102 = vmlaq_f32(v107, v106, v20);
              v102[1] = vmlaq_f32(v107, v106, v19);
              v102 = (float32x4_t *)((char *)v102 + v41);
              --v105;
            }
            while (v105);
          }
          v53 = v47 + 8;
          v52 += 8;
          v35 += 8;
          v51 += 8;
          v50 += 8;
          v27 += 32;
          v48 += 8;
          v49 += 2;
        }
        while (v47 + 8 <= a2);
      }
      else
      {
        v47 = 0;
      }
      v108 = v47 | 4;
      v355 = v45;
      if ((v47 | 4uLL) <= a2)
      {
        v110 = 0;
        v111 = 4 * v47;
        v112 = &v348[v47];
        v113 = &v344[v47];
        v114 = &a7[a15 + v47];
        v115 = &a7[v47];
        v386 = &v365[v47];
        v388 = &v44[v47];
        v382 = &v367[v47];
        v384 = &v45[v47];
        v378 = &v44[a6 + v47];
        v380 = &v363[v47];
        v116 = v369;
        v374 = &v33[v47];
        v376 = &v33[a15 + v47];
        do
        {
          v109 = v108;
          if (a8 >= 4)
          {
            v119 = 0uLL;
            v120 = v116;
            v121 = 4;
            v122 = 0uLL;
            v123 = 0uLL;
            v20 = 0uLL;
            do
            {
              v20 = vaddq_f32(v20, *(float32x4_t *)((char *)v115 + v120));
              v123 = vaddq_f32(v123, *(float32x4_t *)((char *)v114 + v120));
              v122 = vaddq_f32(v122, *(float32x4_t *)((char *)v113 + v120));
              v119 = vaddq_f32(v119, *(float32x4_t *)((char *)v112 + v120));
              v121 += 4;
              v120 += v34;
            }
            while (v121 <= a8);
            v19 = vaddq_f32(v20, v123);
            v118 = vaddq_f32(v19, vaddq_f32(v122, v119));
            v117 = v32;
          }
          else
          {
            v117 = 0;
            v118 = 0uLL;
          }
          v124 = a8 - v117;
          if (a8 > v117)
          {
            v125 = 4 * (v47 + a15 * v117);
            do
            {
              v118 = vaddq_f32(v118, *(float32x4_t *)((char *)v33 + v125));
              v125 += v36;
              --v124;
            }
            while (v124);
          }
          v126 = vmulq_n_f32(v118, v29);
          if (a8 >= 4)
          {
            v390 = v47;
            v127 = 0;
            v129 = 0uLL;
            v130 = v374;
            v131 = v376;
            v133 = v378;
            v132 = v380;
            v135 = v382;
            v134 = v384;
            v19 = 0uLL;
            v136 = 0uLL;
            v138 = v386;
            v137 = v388;
            v139 = 0uLL;
            do
            {
              v140 = *(float32x4_t *)&v134[v110];
              v141 = vsubq_f32(*(float32x4_t *)&v130[v110], v126);
              v142 = vsubq_f32(*(float32x4_t *)&v131[v110], v126);
              v143 = vsubq_f32(*(float32x4_t *)&v132[v110], v126);
              *(float32x4_t *)&v137[v110] = v141;
              *(float32x4_t *)&v133[v110] = v142;
              *(float32x4_t *)&v135[v110] = v143;
              v144 = vsubq_f32(v140, v126);
              *(float32x4_t *)&v138[v110] = v144;
              v139 = vmlaq_f32(v139, v141, v141);
              v136 = vmlaq_f32(v136, v142, v142);
              v19 = vmlaq_f32(v19, v143, v143);
              v145 = v127 + 8;
              v127 += 4;
              v137 = (float *)((char *)v137 + v38);
              v138 = (float *)((char *)v138 + v38);
              v134 = (const float *)((char *)v134 + v34);
              v135 = (float *)((char *)v135 + v38);
              v132 = (const float *)((char *)v132 + v34);
              v129 = vmlaq_f32(v129, v144, v144);
              v133 = (float *)((char *)v133 + v38);
              v131 = (const float *)((char *)v131 + v34);
              v130 = (const float *)((char *)v130 + v34);
            }
            while (v145 <= a8);
            v20 = vaddq_f32(v139, v136);
            v128 = vaddq_f32(v20, vaddq_f32(v19, v129));
            v46 = a17;
            a6 = v389;
            v32 = a8 & 0xFFFFFFFFFFFFFFFCLL;
            a2 = v372;
            v47 = v390;
          }
          else
          {
            v127 = 0;
            v128 = 0uLL;
          }
          v146 = a8 - v127;
          if (a8 > v127)
          {
            v147 = 4 * (v47 + a6 * v127);
            v148 = 4 * (v47 + a15 * v127);
            do
            {
              v19 = vsubq_f32(*(float32x4_t *)((char *)v33 + v148), v126);
              *(float32x4_t *)((char *)v44 + v147) = v19;
              v128 = vmlaq_f32(v128, v19, v19);
              v147 += v41;
              v148 += v36;
              --v146;
            }
            while (v146);
          }
          if (a8)
          {
            v149 = vdivq_f32(_Q1, vaddq_f32(v42, vsqrtq_f32(vaddq_f32(v31, vmulq_n_f32(v128, v30)))));
            v150 = v111;
            v151 = a16;
            v152 = v46;
            v153 = a8;
            do
            {
              v154 = *v151++;
              v155 = v154;
              v156 = *(_DWORD *)v152++;
              v20.i32[0] = v156;
              v20 = vmlaq_n_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v20.f32, 0), vmulq_f32(v149, *(float32x4_t *)((char *)v44 + v150)), v155);
              *(float32x4_t *)((char *)v44 + v150) = v20;
              v150 += v41;
              --v153;
            }
            while (v153);
          }
          v108 = v109 + 4;
          v116 += 16;
          v47 += 4;
          v110 += 4;
          v111 += 16;
        }
        while (v109 + 4 <= a2);
      }
      else
      {
        v109 = v47;
      }
      v21 = v46;
      if (v109 < a2)
      {
        v157 = v109;
        do
        {
          if (a8)
          {
            v158 = 0.0;
            v159 = v157 * 4;
            v160 = a8;
            do
            {
              v158 = v158 + *(const float *)((char *)v33 + v159);
              v159 += v36;
              --v160;
            }
            while (v160);
            v161 = v29 * v158;
            v162 = 0.0;
            v163 = v33;
            v164 = v44;
            v165 = a8;
            do
            {
              v166 = v163[v157] - v161;
              v164[v157] = v166;
              v162 = v162 + (float)(v166 * v166);
              v164 = (float *)((char *)v164 + v41);
              v163 = (const float *)((char *)v163 + v36);
              --v165;
            }
            while (v165);
            v167 = 1.0 / (float)(*(float *)&a13 + sqrtf(*(float *)&a14 + (float)(v30 * v162)));
            v168 = v44;
            v169 = a16;
            v170 = v46;
            v171 = a8;
            do
            {
              v172 = *v169++;
              v173 = v172;
              v174 = *v170++;
              v168[v157] = v174 + (float)((float)(v167 * v168[v157]) * v173);
              v168 = (float *)((char *)v168 + v41);
              --v171;
            }
            while (v171);
          }
          ++v109;
          ++v157;
        }
        while (v109 != a2);
      }
      v28 = v359 + 1;
      v45 = &v355[v352];
      v35 = &v363[v352];
      v37 = &v357[v352];
      v33 = (const float *)((char *)v33 + v352 * 4);
      v27 = v361 + v350;
      v44 = (float *)((char *)v44 + v350);
      v369 += v352 * 4;
      v365 = (float *)((char *)v365 + v350);
      v367 = (float *)((char *)v367 + v350);
    }
    while (v359 + 1 != a4);
  }
  v175 = a15 - a2;
  if (a3 <= a15)
    v176 = a15 - a2;
  else
    v176 = a3;
  result = a1;
  if (a1 && a4)
  {
    v178 = 0;
    v179 = 0;
    v180 = 0;
    v181 = &a5[a2];
    v182 = &a7[a2];
    v183 = 1.0 / (float)a8;
    v184 = 1.0 / (float)((float)a8 + -1.0);
    v349 = 4 * a15 * a8;
    v185 = 16 * a15;
    if (a19)
      *(float *)&a13 = 0.0;
    else
      *(float *)&a13 = *(float *)&a9;
    if (!a19)
      *(float *)&a9 = 0.0;
    v186 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a9, 0);
    v187 = &a7[3 * a15 + a2];
    v188 = &a7[2 * a15 + a2];
    v189 = 4 * a15;
    v190 = 16 * a6;
    v191 = &a5[3 * a6 + a2];
    v192 = &a5[2 * a6 + a2];
    v193 = 4 * a6;
    v194 = &a7[a15 + a2];
    v195 = 4 * a6 + 4 * a2;
    v196 = &a5[a2];
    v197 = (char *)a5 + v195;
    v198 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a13, 0);
    v345 = 4 * v176 * a8;
    v347 = 4 * a8 * a6;
    v199 = 4 * a3;
    v362 = v191;
    v364 = v192;
    if (!a18)
      v184 = 1.0 / (float)a8;
    v341 = v187;
    v343 = v182;
    v340 = v188;
    v200 = v188;
    v366 = v187;
    v368 = v181;
    v391 = v197;
    v370 = v175;
    do
    {
      v358 = v200;
      v360 = v178;
      v356 = v179;
      v351 = v194;
      v353 = v180;
      if (v175 >= 8)
      {
        v202 = 0;
        v203 = (float32x4_t *)v181;
        v204 = result;
        v205 = v182;
        v206 = v366;
        v207 = 8;
        do
        {
          v201 = v207;
          if (a8 >= 4)
          {
            v211 = 0;
            v212 = 0uLL;
            v213 = 0uLL;
            v214 = 4;
            v215 = 0uLL;
            v216 = 0uLL;
            v217 = 0uLL;
            v218 = 0uLL;
            v219 = 0uLL;
            v220 = 0uLL;
            do
            {
              v213 = vaddq_f32(v213, *(float32x4_t *)((char *)v205 + v211 + 16));
              v212 = vaddq_f32(v212, *(float32x4_t *)((char *)v205 + v211));
              v216 = vaddq_f32(v216, *(float32x4_t *)((char *)v194 + v211 + 16));
              v215 = vaddq_f32(v215, *(float32x4_t *)((char *)v194 + v211));
              v218 = vaddq_f32(v218, *(float32x4_t *)((char *)v200 + v211 + 16));
              v217 = vaddq_f32(v217, *(float32x4_t *)((char *)v200 + v211));
              v220 = vaddq_f32(v220, *(float32x4_t *)((char *)v206 + v211 + 16));
              v219 = vaddq_f32(v219, *(float32x4_t *)((char *)v206 + v211));
              v214 += 4;
              v211 += v185;
            }
            while (v214 <= a8);
            v209 = vaddq_f32(vaddq_f32(v219, v217), vaddq_f32(v215, v212));
            v210 = vaddq_f32(vaddq_f32(v220, v218), vaddq_f32(v216, v213));
            v208 = a8 & 0xFFFFFFFFFFFFFFFCLL;
          }
          else
          {
            v208 = 0;
            v209 = 0uLL;
            v210 = 0uLL;
          }
          v221 = a8 - v208;
          if (a8 > v208)
          {
            v222 = v189 * v208;
            do
            {
              v210 = vaddq_f32(v210, *(float32x4_t *)((char *)v205 + v222 + 16));
              v209 = vaddq_f32(v209, *(float32x4_t *)((char *)v205 + v222));
              v222 += v189;
              --v221;
            }
            while (v221);
          }
          v223 = vmulq_n_f32(v209, v183);
          v224 = vmulq_n_f32(v210, v183);
          if (a8 >= 4)
          {
            v227 = 0;
            v225 = 0;
            v228 = 0uLL;
            v229 = 0uLL;
            v230 = v179;
            v231 = 0uLL;
            v232 = 0uLL;
            v233 = 0uLL;
            v234 = 0uLL;
            v235 = 0uLL;
            v236 = 0uLL;
            do
            {
              v237 = vsubq_f32(*(float32x4_t *)((char *)v205 + v227), v223);
              v238 = vsubq_f32(*(float32x4_t *)((char *)v205 + v227 + 16), v224);
              v239 = vsubq_f32(*(float32x4_t *)((char *)v194 + v227), v223);
              v240 = vsubq_f32(*(float32x4_t *)((char *)v194 + v227 + 16), v224);
              v241 = vsubq_f32(*(float32x4_t *)((char *)v200 + v227), v223);
              v242 = vsubq_f32(*(float32x4_t *)((char *)v200 + v227 + 16), v224);
              v243 = vsubq_f32(*(float32x4_t *)((char *)v206 + v227), v223);
              v244 = vsubq_f32(*(float32x4_t *)((char *)v206 + v227 + 16), v224);
              v245 = (float32x4_t *)((char *)v196 + v230);
              *v245 = v237;
              v245[1] = v238;
              v246 = (float32x4_t *)&v197[v230];
              *v246 = v239;
              v246[1] = v240;
              v247 = (float32x4_t *)((char *)v192 + v230);
              *v247 = v241;
              v247[1] = v242;
              v248 = (float32x4_t *)((char *)v191 + v230);
              *v248 = v243;
              v248[1] = v244;
              v229 = vmlaq_f32(v229, v238, v238);
              v228 = vmlaq_f32(v228, v237, v237);
              v232 = vmlaq_f32(v232, v240, v240);
              v231 = vmlaq_f32(v231, v239, v239);
              v236 = vmlaq_f32(v236, v242, v242);
              v235 = vmlaq_f32(v235, v241, v241);
              v234 = vmlaq_f32(v234, v244, v244);
              v249 = v225 + 8;
              v233 = vmlaq_f32(v233, v243, v243);
              v225 += 4;
              v230 += v190;
              v227 += v185;
            }
            while (v249 <= a8);
            v226 = vaddq_f32(vaddq_f32(v235, v233), vaddq_f32(v231, v228));
            v19 = vaddq_f32(vaddq_f32(v236, v234), vaddq_f32(v232, v229));
          }
          else
          {
            v225 = 0;
            v226 = 0uLL;
            v19 = 0uLL;
          }
          v250 = a8 - v225;
          if (a8 > v225)
          {
            v251 = (float32x4_t *)&v181[v202 + a6 * v225];
            v252 = v189 * v225;
            do
            {
              v253 = vsubq_f32(*(float32x4_t *)((char *)v205 + v252), v223);
              v254 = vsubq_f32(*(float32x4_t *)((char *)v205 + v252 + 16), v224);
              *v251 = v253;
              v251[1] = v254;
              v19 = vmlaq_f32(v19, v254, v254);
              v226 = vmlaq_f32(v226, v253, v253);
              v251 = (float32x4_t *)((char *)v251 + v193);
              v252 += v189;
              --v250;
            }
            while (v250);
          }
          if (a8)
          {
            v255 = vdivq_f32(_Q1, vaddq_f32(v198, vsqrtq_f32(vaddq_f32(v186, vmulq_n_f32(v226, v184)))));
            v256 = v203;
            v257 = vdivq_f32(_Q1, vaddq_f32(v198, vsqrtq_f32(vaddq_f32(v186, vmulq_n_f32(v19, v184)))));
            v258 = a16;
            v259 = v21;
            v260 = (float32x4_t *)v204;
            v261 = a8;
            do
            {
              v262 = vld1q_dup_f32(v258++);
              v263 = vld1q_dup_f32(v259++);
              v19 = vmulq_f32(v255, *v256);
              v264 = vmlaq_f32(v263, v262, vmulq_f32(v257, v256[1]));
              v265 = vmlaq_f32(v263, v262, v19);
              *v256 = v265;
              v256[1] = v264;
              *v260 = v265;
              v260[1] = v264;
              v260 = (float32x4_t *)((char *)v260 + v199);
              v256 = (float32x4_t *)((char *)v256 + v193);
              --v261;
            }
            while (v261);
          }
          v207 = v201 + 8;
          v206 += 8;
          v200 += 8;
          v194 += 8;
          v205 += 8;
          v179 += 32;
          v202 += 8;
          v204 += 8;
          v203 += 2;
          v197 = v391;
        }
        while (v201 + 8 <= v175);
      }
      else
      {
        v201 = 0;
      }
      v266 = v201 | 4;
      v267 = v201;
      if ((v201 | 4uLL) <= v175)
      {
        v269 = 0;
        v270 = 4 * v201;
        v271 = &v341[v201];
        v272 = &v340[v201];
        v273 = &v343[a15 + v201];
        v274 = &v343[v201];
        v385 = &v181[v201];
        v275 = v360;
        v383 = &v362[v267];
        v381 = &v366[v267];
        v379 = &v364[v267];
        v377 = &v358[v267];
        v373 = &v182[a15 + v267];
        v375 = &v181[a6 + v267];
        v371 = &v182[v267];
        do
        {
          v268 = v266;
          if (a8 >= 4)
          {
            v278 = 0uLL;
            v279 = v275;
            v280 = 4;
            v281 = 0uLL;
            v282 = 0uLL;
            v19 = 0uLL;
            do
            {
              v19 = vaddq_f32(v19, *(float32x4_t *)((char *)v274 + v279));
              v282 = vaddq_f32(v282, *(float32x4_t *)((char *)v273 + v279));
              v281 = vaddq_f32(v281, *(float32x4_t *)((char *)v272 + v279));
              v278 = vaddq_f32(v278, *(float32x4_t *)((char *)v271 + v279));
              v280 += 4;
              v279 += v185;
            }
            while (v280 <= a8);
            v277 = vaddq_f32(vaddq_f32(v19, v282), vaddq_f32(v281, v278));
            v276 = a8 & 0xFFFFFFFFFFFFFFFCLL;
          }
          else
          {
            v276 = 0;
            v277 = 0uLL;
          }
          v283 = a8 - v276;
          if (a8 > v276)
          {
            v284 = 4 * (v267 + a15 * v276);
            do
            {
              v277 = vaddq_f32(v277, *(float32x4_t *)((char *)v182 + v284));
              v284 += v189;
              --v283;
            }
            while (v283);
          }
          v285 = vmulq_n_f32(v277, v183);
          if (a8 >= 4)
          {
            v387 = v267;
            v286 = 0;
            v288 = 0uLL;
            v289 = v371;
            v290 = v373;
            v292 = v375;
            v291 = v377;
            v293 = v379;
            v294 = v381;
            v295 = 0uLL;
            v296 = 0uLL;
            v297 = v383;
            v298 = v385;
            v299 = 0uLL;
            do
            {
              v300 = *(float32x4_t *)&v294[v269];
              v301 = vsubq_f32(*(float32x4_t *)&v289[v269], v285);
              v302 = vsubq_f32(*(float32x4_t *)&v290[v269], v285);
              v303 = vsubq_f32(*(float32x4_t *)&v291[v269], v285);
              *(float32x4_t *)&v298[v269] = v301;
              *(float32x4_t *)&v292[v269] = v302;
              *(float32x4_t *)&v293[v269] = v303;
              v304 = vsubq_f32(v300, v285);
              *(float32x4_t *)&v297[v269] = v304;
              v299 = vmlaq_f32(v299, v301, v301);
              v296 = vmlaq_f32(v296, v302, v302);
              v295 = vmlaq_f32(v295, v303, v303);
              v305 = v286 + 8;
              v286 += 4;
              v298 = (float *)((char *)v298 + v190);
              v297 = (float *)((char *)v297 + v190);
              v294 = (const float *)((char *)v294 + v185);
              v293 = (float *)((char *)v293 + v190);
              v291 = (const float *)((char *)v291 + v185);
              v288 = vmlaq_f32(v288, v304, v304);
              v292 = (float *)((char *)v292 + v190);
              v290 = (const float *)((char *)v290 + v185);
              v289 = (const float *)((char *)v289 + v185);
            }
            while (v305 <= a8);
            v19 = vaddq_f32(v299, v296);
            v287 = vaddq_f32(v19, vaddq_f32(v295, v288));
            v21 = a17;
            a6 = v389;
            v196 = v368;
            v175 = v370;
            v267 = v387;
          }
          else
          {
            v286 = 0;
            v287 = 0uLL;
          }
          v306 = a8 - v286;
          if (a8 > v286)
          {
            v307 = 4 * (v267 + a6 * v286);
            v308 = 4 * (v267 + a15 * v286);
            do
            {
              v309 = vsubq_f32(*(float32x4_t *)((char *)v182 + v308), v285);
              *(float32x4_t *)((char *)v181 + v307) = v309;
              v287 = vmlaq_f32(v287, v309, v309);
              v307 += v193;
              v308 += v189;
              --v306;
            }
            while (v306);
          }
          if (a8)
          {
            v310 = v270;
            v311 = vdivq_f32(_Q1, vaddq_f32(v198, vsqrtq_f32(vaddq_f32(v186, vmulq_n_f32(v287, v184)))));
            v312 = a16;
            v313 = v21;
            v314 = v270;
            v315 = a8;
            do
            {
              v316 = *v312++;
              v317 = v316;
              v318 = *(_DWORD *)v313++;
              v19.i32[0] = v318;
              v19 = vmlaq_n_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v19.f32, 0), vmulq_f32(v311, *(float32x4_t *)((char *)v181 + v310)), v317);
              *(float32x4_t *)((char *)v181 + v310) = v19;
              *(float32x4_t *)((char *)result + v314) = v19;
              v314 += v199;
              v310 += v193;
              --v315;
            }
            while (v315);
          }
          v266 = v268 + 4;
          v275 += 16;
          v267 += 4;
          v269 += 4;
          v270 += 16;
        }
        while (v268 + 4 <= v175);
      }
      else
      {
        v268 = v201;
      }
      if (v268 < v175)
      {
        v319 = 4 * v268;
        do
        {
          if (a8)
          {
            v320 = 0.0;
            v321 = v319;
            v322 = a8;
            do
            {
              v320 = v320 + *(const float *)((char *)v182 + v321);
              v321 += v189;
              --v322;
            }
            while (v322);
            v323 = v183 * v320;
            v324 = 0.0;
            v325 = v319;
            v326 = v319;
            v327 = a8;
            do
            {
              v328 = *(const float *)((char *)v182 + v325) - v323;
              *(float *)((char *)v181 + v326) = v328;
              v324 = v324 + (float)(v328 * v328);
              v326 += v193;
              v325 += v189;
              --v327;
            }
            while (v327);
            v329 = v319;
            v330 = 1.0 / (float)(*(float *)&a13 + sqrtf(*(float *)&a9 + (float)(v184 * v324)));
            v331 = a16;
            v332 = v21;
            v333 = v319;
            v334 = a8;
            do
            {
              v335 = *v331++;
              v336 = v335;
              v337 = *v332++;
              v338 = v337 + (float)((float)(v330 * *(float *)((char *)v181 + v329)) * v336);
              *(float *)((char *)v181 + v329) = v338;
              *(float *)((char *)result + v333) = v338;
              v333 += v199;
              v329 += v193;
              --v334;
            }
            while (v334);
          }
          ++v268;
          v319 += 4;
        }
        while (v268 != v175);
      }
      v180 = v353 + 1;
      v366 = (const float *)((char *)v366 + v349);
      v200 = &v358[v349 / 4];
      v194 = &v351[v349 / 4];
      v182 = (const float *)((char *)v182 + v349);
      v179 = v356 + v347;
      v181 = (float *)((char *)v181 + v347);
      result = (float *)((char *)result + v345);
      v178 = v360 + v349;
      v362 = (float *)((char *)v362 + v347);
      v364 = (float *)((char *)v364 + v347);
      v197 = v391;
    }
    while (v353 + 1 != a4);
  }
  return result;
}

void Espresso::MPSGraphEngine::Kernels::split_kernel::~split_kernel(Espresso::MPSGraphEngine::Kernels::split_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

uint64_t Espresso::MPSGraphEngine::Kernels::split_kernel::is_valid_for_engine(uint64_t a1, int64x2_t **a2, uint64_t a3)
{
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  int64x2_t *v45;
  unint64_t *v46;
  unint64_t v47;
  int64x2_t *v48[2];
  int64x2_t *v49;
  std::__shared_weak_count *v50;
  int64x2_t *v51;
  std::__shared_weak_count *v52;
  void *v53[2];
  char v54;
  int64x2_t *v55;
  std::__shared_weak_count *v56;
  int64x2_t *v57;
  std::__shared_weak_count *v58;
  void *v59[2];
  unsigned int v60;
  std::string __p;
  _BYTE v62[24];
  _BYTE v63[32];
  std::__shared_weak_count *v64;
  int64x2_t *v65;
  std::__shared_weak_count *v66;
  void **v67;

  if (*(_QWORD *)(a3 + 8) - *(_QWORD *)a3 != 64)
  {
    v15 = (std::__shared_weak_count *)a2[1];
    v65 = *a2;
    v66 = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldxr(p_shared_owners);
      while (__stxr(v17 + 1, p_shared_owners));
    }
    std::string::basic_string[abi:ne180100]<0>(v59, "[Dispatch::MPSGraph::split_kernel] unsupported: layer supports 1 input only");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)v59, a3, 0);
    Espresso::emit_kernel_validation_warning(&v65, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    v18 = v64;
    if (v64)
    {
      v19 = (unint64_t *)&v64->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    v53[0] = v63;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v53);
    v53[0] = v62;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v53);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v60) < 0)
      operator delete(v59[0]);
    v12 = v66;
    if (!v66)
      return 0;
    v21 = (unint64_t *)&v66->__shared_owners_;
    do
      v14 = __ldaxr(v21);
    while (__stlxr(v14 - 1, v21));
LABEL_85:
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    return 0;
  }
  if (*(_DWORD *)(a1 + 284) != 2)
  {
    v22 = (std::__shared_weak_count *)a2[1];
    v57 = *a2;
    v58 = v22;
    if (v22)
    {
      v23 = (unint64_t *)&v22->__shared_owners_;
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
    }
    std::string::basic_string[abi:ne180100]<0>(v59, "[Dispatch::MPSGraph::split_kernel] unsupported: axis must be 2");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)v59, a3, 0);
    Espresso::emit_kernel_validation_warning(&v57, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    v25 = v64;
    if (v64)
    {
      v26 = (unint64_t *)&v64->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    v53[0] = v63;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v53);
    v53[0] = v62;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v53);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v60) < 0)
      operator delete(v59[0]);
    v12 = v58;
    if (!v58)
      return 0;
    v28 = (unint64_t *)&v58->__shared_owners_;
    do
      v14 = __ldaxr(v28);
    while (__stlxr(v14 - 1, v28));
    goto LABEL_85;
  }
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v59, *(const Espresso::layer_shape **)a3, 0);
  if (v60 <= 3)
  {
    v6 = (std::__shared_weak_count *)a2[1];
    v55 = *a2;
    v56 = v6;
    if (v6)
    {
      v7 = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    std::string::basic_string[abi:ne180100]<0>(v53, "[Dispatch::MPSGraph::split_kernel] unsupported: input rank < 4");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)v53, a3, 0);
    Espresso::emit_kernel_validation_warning(&v55, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    v9 = v64;
    if (v64)
    {
      v10 = (unint64_t *)&v64->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v67 = (void **)v63;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v67);
    v67 = (void **)v62;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v67);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v54 < 0)
      operator delete(v53[0]);
    v12 = v56;
    if (!v56)
      return 0;
    v13 = (unint64_t *)&v56->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    goto LABEL_85;
  }
  v29 = *(int *)(a1 + 280);
  if (v29 != (uint64_t)(*(_QWORD *)(a3 + 32) - *(_QWORD *)(a3 + 24)) >> 6)
  {
    v37 = (std::__shared_weak_count *)a2[1];
    v51 = *a2;
    v52 = v37;
    if (v37)
    {
      v38 = (unint64_t *)&v37->__shared_owners_;
      do
        v39 = __ldxr(v38);
      while (__stxr(v39 + 1, v38));
    }
    std::string::basic_string[abi:ne180100]<0>(v53, "[Dispatch::MPSGraph::split_kernel] top blobs size does not match n_outputs for split layer");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)v53, a3, 0);
    Espresso::emit_kernel_validation_warning(&v51, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    v40 = v64;
    if (v64)
    {
      v41 = (unint64_t *)&v64->__shared_owners_;
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
    v67 = (void **)v63;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v67);
    v67 = (void **)v62;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v67);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v54 < 0)
      operator delete(v53[0]);
    v12 = v52;
    if (!v52)
      return 0;
    v43 = (unint64_t *)&v52->__shared_owners_;
    do
      v14 = __ldaxr(v43);
    while (__stlxr(v14 - 1, v43));
    goto LABEL_85;
  }
  if (*(_BYTE *)(a1 + 288))
  {
    v30 = (std::__shared_weak_count *)a2[1];
    v49 = *a2;
    v50 = v30;
    if (v30)
    {
      v31 = (unint64_t *)&v30->__shared_owners_;
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
    }
    std::string::basic_string[abi:ne180100]<0>(v53, "[Dispatch::MPSGraph::split_kernel] unsupported: nd_mode");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)v53, a3, 0);
    Espresso::emit_kernel_validation_warning(&v49, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    v33 = v64;
    if (v64)
    {
      v34 = (unint64_t *)&v64->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    v67 = (void **)v63;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v67);
    v67 = (void **)v62;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v67);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v54 < 0)
      operator delete(v53[0]);
    v12 = v50;
    if (!v50)
      return 0;
    v36 = (unint64_t *)&v50->__shared_owners_;
    do
      v14 = __ldaxr(v36);
    while (__stlxr(v14 - 1, v36));
    goto LABEL_85;
  }
  if ((int)v29 > 1)
    return 1;
  v45 = a2[1];
  v48[0] = *a2;
  v48[1] = v45;
  if (v45)
  {
    v46 = &v45->u64[1];
    do
      v47 = __ldxr(v46);
    while (__stxr(v47 + 1, v46));
  }
  std::string::basic_string[abi:ne180100]<0>(v53, "[Dispatch::MPSGraph::split_kernel] split must produce more than one output");
  Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)v53, a3, 0);
  Espresso::emit_kernel_validation_warning(v48, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)&__p.__r_.__value_.__l.__data_);
  if (v54 < 0)
    operator delete(v53[0]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v48);
  return 0;
}

void sub_1914792FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32)
{
  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t(&a32);
  if (a21 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,Espresso::DTypeConverter::DTypeConversionSpec>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,Espresso::DTypeConverter::DTypeConversionSpec>,0>(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void Espresso::DTypeConverter::~DTypeConverter(Espresso::DTypeConverter *this)
{
  std::__hash_table<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>>>::~__hash_table((uint64_t)this + 16);
}

BOOL Espresso::DTypeConverter::NeedsConversion(_QWORD *a1, unsigned __int8 *a2)
{
  _QWORD *v4;
  Espresso *v5;
  const char *v6;
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL8 result;
  NSObject *v12;
  uint64_t *v13;
  int v14;
  uint64_t *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v4 = (_QWORD *)*a1;
  if (v4 + 48 != std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(*a1 + 376, a2))
  {
    if (v4 + 30 == std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>((uint64_t)(v4 + 29), a2)&& (v5 = (Espresso *)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>((uint64_t)(v4 + 32), a2), v4 + 33 == (_QWORD *)v5))
    {
      v12 = Espresso::espresso_os_log_subsystem(v5, v6);
      result = os_log_type_enabled(v12, OS_LOG_TYPE_ERROR);
      if (!result)
        return result;
      if ((a2[23] & 0x80u) == 0)
        v13 = (uint64_t *)a2;
      else
        v13 = *(uint64_t **)a2;
      v14 = 136315138;
      v15 = v13;
      _os_log_error_impl(&dword_190DAF000, v12, OS_LOG_TYPE_ERROR, "Ignoring invalid io_bind_info specification for blob \"%s\" that is neither a network input nor an output", (uint8_t *)&v14, 0xCu);
    }
    else
    {
      v7 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>(v4 + 17, a2);
      if (!v7)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      v8 = *((_QWORD *)v7 + 5);
      v9 = std::map<std::string,Espresso::blob_numerical_properties>::at(*a1 + 376, a2);
      if (*(_DWORD *)(v8 + 120) != *(_DWORD *)(v9 + 8) || *(_DWORD *)(v8 + 124) != *(_DWORD *)(v9 + 12))
        return std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>(a1 + 2, a2) == 0;
    }
  }
  return 0;
}

void Espresso::DTypeConverter::GetConversionSpec(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  size_t v13;
  std::string *v14;
  const void *v15;
  std::string *p_p;
  std::string::size_type size;
  std::string *v18;
  __int128 v19;
  const std::string *v20;
  const std::string *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  std::string __p;
  std::string v27;
  void *v28[2];
  std::string::size_type v29;

  v8 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>((_QWORD *)(*(_QWORD *)a2 + 136), (unsigned __int8 *)a3);
  if (!v8)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v9 = *((_QWORD *)v8 + 5);
  v10 = std::map<std::string,Espresso::blob_numerical_properties>::at(*(_QWORD *)a2 + 376, (_QWORD *)a3);
  if (*(_DWORD *)(v9 + 124) != *(_DWORD *)(v10 + 12))
    Espresso::throw_exception_selector<Espresso::generic_error>("Interleave factors do not match. Conversion not supported");
  v11 = v10;
  v12 = *(_DWORD *)(v9 + 120);
  if (*(char *)(a3 + 23) >= 0)
    v13 = *(unsigned __int8 *)(a3 + 23);
  else
    v13 = *(_QWORD *)(a3 + 8);
  v14 = &v27;
  std::string::basic_string[abi:ne180100]((uint64_t)&v27, v13 + 1);
  if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v27.__r_.__value_.__r.__words[0];
  if (v13)
  {
    if (*(char *)(a3 + 23) >= 0)
      v15 = (const void *)a3;
    else
      v15 = *(const void **)a3;
    memmove(v14, v15, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 64;
  Espresso::compute_path_to_string(v12, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v18 = std::string::append(&v27, (const std::string::value_type *)p_p, size);
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v29 = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)v28 = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
  *(_DWORD *)(a1 + 52) = 1065353216;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_QWORD *)(a1 + 56) = 0xFFFFFFFF00000000;
  *(_DWORD *)(a1 + 64) = 1065353216;
  *(_DWORD *)(a1 + 48) = a4 ^ 1;
  if (a4)
    v20 = (const std::string *)a3;
  else
    v20 = (const std::string *)v28;
  *(_QWORD *)(a1 + 68) = 0xFFFFFFFF00000000;
  std::string::operator=((std::string *)a1, v20);
  if (a4)
    v21 = (const std::string *)v28;
  else
    v21 = (const std::string *)a3;
  std::string::operator=((std::string *)(a1 + 24), v21);
  v22 = v9 + 112;
  if (a4)
    v23 = v11;
  else
    v23 = v9 + 112;
  v24 = *(_QWORD *)v23;
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(v23 + 8);
  *(_QWORD *)(a1 + 52) = v24;
  if (!a4)
    v22 = v11;
  v25 = *(_QWORD *)v22;
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(v22 + 8);
  *(_QWORD *)(a1 + 64) = v25;
  if (SHIBYTE(v29) < 0)
    operator delete(v28[0]);
}

void sub_19147986C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, __int128 **a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  unsigned __int8 **v12;
  unsigned __int8 *i;
  unint64_t v14;
  _QWORD *v15;
  char *v16;
  std::string *v17;
  __int128 *v18;
  __int128 v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  int8x8_t prime;
  void *v26;
  void *v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  uint8x8_t v31;
  unint64_t v32;
  uint8x8_t v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  unsigned __int8 **v37;
  unint64_t v38;
  void *v40;
  _QWORD v41[2];
  char v42;

  v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v12 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      for (i = *v12; i; i = *(unsigned __int8 **)i)
      {
        v14 = *((_QWORD *)i + 1);
        if (v14 == v8)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](i + 16, a2))
            return i;
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9)
              v14 %= v9;
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3)
            break;
        }
      }
    }
  }
  v15 = (_QWORD *)(a1 + 16);
  v16 = (char *)operator new(0x78uLL);
  v41[0] = v16;
  v41[1] = a1 + 16;
  v42 = 0;
  *(_QWORD *)v16 = 0;
  *((_QWORD *)v16 + 1) = v8;
  v17 = (std::string *)(v16 + 16);
  v18 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v17, *(const std::string::value_type **)v18, *((_QWORD *)v18 + 1));
  }
  else
  {
    v19 = *v18;
    *((_QWORD *)v16 + 4) = *((_QWORD *)v18 + 2);
    *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v19;
  }
  *(_OWORD *)(v16 + 88) = 0u;
  *(_OWORD *)(v16 + 104) = 0u;
  *(_OWORD *)(v16 + 72) = 0u;
  *(_OWORD *)(v16 + 56) = 0u;
  *(_OWORD *)(v16 + 40) = 0u;
  *((_DWORD *)v16 + 23) = 1065353216;
  *((_DWORD *)v16 + 25) = -1;
  *((_DWORD *)v16 + 26) = 1065353216;
  *((_DWORD *)v16 + 28) = -1;
  v42 = 1;
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v21 = *(float *)(a1 + 32);
  if (!v9 || (float)(v21 * (float)v9) < v20)
  {
    v22 = 1;
    if (v9 >= 3)
      v22 = (v9 & (v9 - 1)) != 0;
    v23 = v22 | (2 * v9);
    v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24)
      prime = (int8x8_t)v24;
    else
      prime = (int8x8_t)v23;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v9 = *(_QWORD *)(a1 + 8);
    if (*(_QWORD *)&prime > v9)
      goto LABEL_33;
    if (*(_QWORD *)&prime < v9)
    {
      v32 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (v33 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
      {
        v32 = std::__next_prime(v32);
      }
      else
      {
        v34 = 1 << -(char)__clz(v32 - 1);
        if (v32 >= 2)
          v32 = v34;
      }
      if (*(_QWORD *)&prime <= v32)
        prime = (int8x8_t)v32;
      if (*(_QWORD *)&prime >= v9)
      {
        v9 = *(_QWORD *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_33:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v26 = operator new(8 * *(_QWORD *)&prime);
          v27 = *(void **)a1;
          *(_QWORD *)a1 = v26;
          if (v27)
            operator delete(v27);
          v28 = 0;
          *(int8x8_t *)(a1 + 8) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v28++) = 0;
          while (*(_QWORD *)&prime != v28);
          v29 = (_QWORD *)*v15;
          if (*v15)
          {
            v30 = v29[1];
            v31 = (uint8x8_t)vcnt_s8(prime);
            v31.i16[0] = vaddlv_u8(v31);
            if (v31.u32[0] > 1uLL)
            {
              if (v30 >= *(_QWORD *)&prime)
                v30 %= *(_QWORD *)&prime;
            }
            else
            {
              v30 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v30) = v15;
            v35 = (_QWORD *)*v29;
            if (*v29)
            {
              do
              {
                v36 = v35[1];
                if (v31.u32[0] > 1uLL)
                {
                  if (v36 >= *(_QWORD *)&prime)
                    v36 %= *(_QWORD *)&prime;
                }
                else
                {
                  v36 &= *(_QWORD *)&prime - 1;
                }
                if (v36 != v30)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v36))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v36) = v29;
                    goto LABEL_58;
                  }
                  *v29 = *v35;
                  *v35 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v36);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v36) = v35;
                  v35 = v29;
                }
                v36 = v30;
LABEL_58:
                v29 = v35;
                v35 = (_QWORD *)*v35;
                v30 = v36;
              }
              while (v35);
            }
          }
          v9 = (unint64_t)prime;
          goto LABEL_62;
        }
        v40 = *(void **)a1;
        *(_QWORD *)a1 = 0;
        if (v40)
          operator delete(v40);
        v9 = 0;
        *(_QWORD *)(a1 + 8) = 0;
      }
    }
LABEL_62:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v37 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
  i = (unsigned __int8 *)v41[0];
  if (v37)
  {
    *(_QWORD *)v41[0] = *v37;
LABEL_75:
    *v37 = i;
    goto LABEL_76;
  }
  *(_QWORD *)v41[0] = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = v15;
  if (*(_QWORD *)i)
  {
    v38 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v38 >= v9)
        v38 %= v9;
    }
    else
    {
      v38 &= v9 - 1;
    }
    v37 = (unsigned __int8 **)(*(_QWORD *)a1 + 8 * v38);
    goto LABEL_75;
  }
LABEL_76:
  v41[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,void *>>>>::reset[abi:ne180100]((uint64_t)v41);
  return i;
}

void sub_191479D24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,Espresso::DTypeConverter::DTypeConversionSpec>,0>((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

Espresso::DTypeConverter *Espresso::DTypeConverter::DTypeConverter(Espresso::DTypeConverter *this, Espresso::net *a2)
{
  char *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  __int128 *v10;
  __int128 *v11;
  unsigned __int8 *v12;
  void **v13;
  char v14;
  void **v15;
  _QWORD *v16;
  __int128 *v17;
  __int128 *v18;
  unsigned __int8 *v19;
  void **v20;
  char v21;
  void **v22;
  void *__p[2];
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  _OWORD v28[2];
  __int128 *v29;

  *(_QWORD *)this = a2;
  *((_BYTE *)this + 8) = 0;
  *((_OWORD *)this + 1) = 0u;
  v3 = (char *)this + 16;
  *((_OWORD *)this + 2) = 0u;
  *((_DWORD *)this + 12) = 1065353216;
  v4 = *((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4);
  if (v4)
  {
    v5 = 0;
    v6 = v4 >> 4;
    if (v6 <= 1)
      v7 = 1;
    else
      v7 = v6;
    do
    {
      v8 = *(_QWORD *)this;
      v9 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::find<unsigned long>((_QWORD *)(*(_QWORD *)this + 56), v5);
      if (!v9)
        goto LABEL_29;
      v10 = (__int128 *)v9[3];
      v11 = (__int128 *)v9[4];
      if (v10 != v11)
      {
        do
        {
          if (Espresso::DTypeConverter::NeedsConversion(this, (unsigned __int8 *)v10))
          {
            Espresso::DTypeConverter::GetConversionSpec((uint64_t)__p, (uint64_t)this, (uint64_t)v10, 1);
            v29 = v10;
            v12 = std::__hash_table<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v3, (unsigned __int8 *)v10, &v29);
            v13 = (void **)(v12 + 40);
            if ((char)v12[63] < 0)
              operator delete(*v13);
            v14 = 0;
            *((_QWORD *)v12 + 7) = v25;
            *(_OWORD *)v13 = *(_OWORD *)__p;
            HIBYTE(v25) = 0;
            LOBYTE(__p[0]) = 0;
            v15 = (void **)(v12 + 64);
            if ((char)v12[87] < 0)
            {
              operator delete(*v15);
              v14 = HIBYTE(v25);
            }
            *(_OWORD *)v15 = v26;
            *((_QWORD *)v12 + 10) = v27;
            HIBYTE(v27) = 0;
            LOBYTE(v26) = 0;
            *(_OWORD *)(v12 + 88) = v28[0];
            *(_OWORD *)(v12 + 100) = *(_OWORD *)((char *)v28 + 12);
            if (v14 < 0)
              operator delete(__p[0]);
          }
          v10 = (__int128 *)((char *)v10 + 24);
        }
        while (v10 != v11);
        v8 = *(_QWORD *)this;
      }
      v16 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::find<unsigned long>((_QWORD *)(v8 + 96), v5);
      if (!v16)
LABEL_29:
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      v17 = (__int128 *)v16[3];
      v18 = (__int128 *)v16[4];
      while (v17 != v18)
      {
        if (Espresso::DTypeConverter::NeedsConversion(this, (unsigned __int8 *)v17))
        {
          Espresso::DTypeConverter::GetConversionSpec((uint64_t)__p, (uint64_t)this, (uint64_t)v17, 0);
          v29 = v17;
          v19 = std::__hash_table<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v3, (unsigned __int8 *)v17, &v29);
          v20 = (void **)(v19 + 40);
          if ((char)v19[63] < 0)
            operator delete(*v20);
          v21 = 0;
          *((_QWORD *)v19 + 7) = v25;
          *(_OWORD *)v20 = *(_OWORD *)__p;
          HIBYTE(v25) = 0;
          LOBYTE(__p[0]) = 0;
          v22 = (void **)(v19 + 64);
          if ((char)v19[87] < 0)
          {
            operator delete(*v22);
            v21 = HIBYTE(v25);
          }
          *(_OWORD *)v22 = v26;
          *((_QWORD *)v19 + 10) = v27;
          HIBYTE(v27) = 0;
          LOBYTE(v26) = 0;
          *(_OWORD *)(v19 + 88) = v28[0];
          *(_OWORD *)(v19 + 100) = *(_OWORD *)((char *)v28 + 12);
          if (v21 < 0)
            operator delete(__p[0]);
        }
        v17 = (__int128 *)((char *)v17 + 24);
      }
      ++v5;
    }
    while (v5 != v7);
  }
  return this;
}

void sub_191479FF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  std::__hash_table<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::DTypeConverter::DTypeConversionSpec>>>::~__hash_table(v21);
  _Unwind_Resume(a1);
}

void Espresso::DTypeConverter::PrepareNetworkForConversion(Espresso::DTypeConverter *this)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  uint64_t **v5;
  uint64_t **v6;
  char *v7;
  uint64_t *v8;
  unsigned __int8 *v9;
  char *v10;
  char *v11;
  uint64_t *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  __int128 v16;
  __int128 v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  std::string *i;
  unsigned __int8 *v30;
  const std::string *v31;
  std::string *j;
  unsigned __int8 *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  std::string v38;
  uint64_t *v39[3];

  v2 = *(_QWORD *)this;
  v35 = *(_QWORD *)(*(_QWORD *)this + 32);
  v36 = *(_QWORD *)(*(_QWORD *)this + 40);
  v3 = (uint64_t *)*((_QWORD *)this + 4);
  if (v3)
  {
    v4 = (_QWORD *)(v2 + 136);
    v5 = (uint64_t **)(v2 + 352);
    v6 = (uint64_t **)(v2 + 184);
    v37 = (char *)(v2 + 192);
    v7 = (char *)(v2 + 360);
    do
    {
      v8 = v3 + 2;
      v9 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>(v4, (unsigned __int8 *)v3 + 16);
      v10 = (char *)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>((uint64_t)v6, v3 + 2);
      if (!v9 || (v11 = v10, v37 == v10))
      {
        if (*((char *)v3 + 39) < 0)
          v8 = (uint64_t *)*v8;
        v39[0] = v8;
        v34 = "Blob container or shapes not found for %s";
LABEL_45:
        Espresso::throw_exception_selector<Espresso::generic_error,char const*&>(v34, v39);
      }
      v12 = v3 + 5;
      v13 = 5;
      if (!*((_DWORD *)v3 + 22))
      {
        v13 = 8;
        v12 = v3 + 8;
      }
      if (*((char *)v12 + 23) < 0)
        std::string::__init_copy_ctor_external(&v38, (const std::string::value_type *)v3[v13], v12[1]);
      else
        v38 = *(std::string *)v12;
      v39[0] = (uint64_t *)&v38;
      v14 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v4, (unsigned __int8 *)&v38, (__int128 **)v39);
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v14 + 5, *((_QWORD *)v9 + 5), *((_QWORD *)v9 + 6));
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::remove((uint64_t)v39, v4, v9);
      std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>>>>::reset[abi:ne180100]((uint64_t)v39);
      v39[0] = (uint64_t *)&v38;
      v15 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6, &v38, (__int128 **)v39);
      v16 = *(_OWORD *)(v11 + 56);
      v17 = *(_OWORD *)(v11 + 72);
      *((_QWORD *)v15 + 11) = *((_QWORD *)v11 + 11);
      *(_OWORD *)(v15 + 72) = v17;
      *(_OWORD *)(v15 + 56) = v16;
      if (v15 != v11)
        std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v15 + 96, *((char **)v11 + 12), *((_QWORD *)v11 + 13), (uint64_t)(*((_QWORD *)v11 + 13) - *((_QWORD *)v11 + 12)) >> 2);
      std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__remove_node_pointer(v6, (uint64_t *)v11);
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,Espresso::layer_shape>,0>((uint64_t)(v11 + 32));
      operator delete(v11);
      v18 = (char *)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>((uint64_t)v5, v3 + 2);
      if (v7 == v18)
      {
        v39[0] = (uint64_t *)&v38;
        v21 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v5, &v38, (uint64_t)&std::piecewise_construct, (__int128 **)v39);
        v22 = std::map<std::string,Espresso::blob_numerical_properties>::at(*(_QWORD *)this + 376, v3 + 2);
        *(_OWORD *)(v21 + 56) = *(_OWORD *)v22;
        if (v21 + 56 != (char *)v22)
          std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v21 + 72, *(char **)(v22 + 16), *(_QWORD *)(v22 + 24), (uint64_t)(*(_QWORD *)(v22 + 24) - *(_QWORD *)(v22 + 16)) >> 2);
        if (*((_DWORD *)v3 + 22))
          v23 = (uint64_t *)((char *)v3 + 92);
        else
          v23 = v3 + 13;
        v24 = *v23;
        *((_DWORD *)v21 + 16) = *((_DWORD *)v23 + 2);
        *((_QWORD *)v21 + 7) = v24;
      }
      else
      {
        v19 = v18;
        v39[0] = (uint64_t *)&v38;
        v20 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v5, &v38, (uint64_t)&std::piecewise_construct, (__int128 **)v39);
        *(_OWORD *)(v20 + 56) = *(_OWORD *)(v19 + 56);
        if (v20 != v19)
          std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v20 + 72, *((char **)v19 + 9), *((_QWORD *)v19 + 10), (uint64_t)(*((_QWORD *)v19 + 10) - *((_QWORD *)v19 + 9)) >> 2);
        std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__remove_node_pointer(v5, (uint64_t *)v19);
        std::__destroy_at[abi:ne180100]<std::pair<std::string const,Espresso::blob_numerical_properties>,0>((uint64_t)(v19 + 32));
        operator delete(v19);
      }
      if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v38.__r_.__value_.__l.__data_);
      v3 = (uint64_t *)*v3;
    }
    while (v3);
  }
  v38.__r_.__value_.__r.__words[0] = 0;
  if (v36 != v35)
  {
    do
    {
      v25 = *(_QWORD *)this + 56;
      v39[0] = (uint64_t *)&v38;
      v26 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v25, (unint64_t *)&v38, (uint64_t)&std::piecewise_construct, v39);
      v27 = *(_QWORD *)this + 96;
      v39[0] = (uint64_t *)&v38;
      v28 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v27, (unint64_t *)&v38, (uint64_t)&std::piecewise_construct, v39);
      for (i = (std::string *)v26[3]; i != (std::string *)v26[4]; ++i)
      {
        v30 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>((_QWORD *)this + 2, (unsigned __int8 *)i);
        if (v30)
        {
          if (*((_DWORD *)v30 + 22) == 1)
            v31 = (const std::string *)(v30 + 40);
          else
            v31 = (const std::string *)(v30 + 64);
          std::string::operator=(i, v31);
        }
      }
      for (j = (std::string *)v28[3]; j != (std::string *)v28[4]; ++j)
      {
        v33 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>((_QWORD *)this + 2, (unsigned __int8 *)j);
        if (v33)
        {
          if (!*((_DWORD *)v33 + 22))
          {
            if (SHIBYTE(j->__r_.__value_.__r.__words[2]) < 0)
              j = (std::string *)j->__r_.__value_.__r.__words[0];
            v39[0] = (uint64_t *)j;
            v34 = "Invalid dtype conversion mode for layer input/output blob %s. The blob is expressed as an external inp"
                  "ut and also an output of a layer.";
            goto LABEL_45;
          }
          std::string::operator=(j, (const std::string *)(v33 + 40));
        }
      }
      ++v38.__r_.__value_.__r.__words[0];
    }
    while (v38.__r_.__value_.__r.__words[0] < (v36 - v35) >> 4);
  }
  *((_BYTE *)this + 8) = 1;
}

void sub_19147A434(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(uint64_t a1, uint64_t a2, unsigned __int8 **a3)
{
  uint64_t v3;
  char v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;

  v3 = a1;
  if (a1 != a2)
  {
    v5 = *((_BYTE *)a3 + 23);
    if (v5 >= 0)
      v6 = (unsigned __int8 *)*((unsigned __int8 *)a3 + 23);
    else
      v6 = a3[1];
    if (v5 >= 0)
      v7 = (unsigned __int8 *)a3;
    else
      v7 = *a3;
    do
    {
      v8 = *(unsigned __int8 *)(v3 + 23);
      if ((v8 & 0x80u) == 0)
        v9 = (unsigned __int8 *)*(unsigned __int8 *)(v3 + 23);
      else
        v9 = *(unsigned __int8 **)(v3 + 8);
      if (v9 == v6)
      {
        if ((v8 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v3, v7, *(_QWORD *)(v3 + 8)))
            return v3;
        }
        else
        {
          if (!*(_BYTE *)(v3 + 23))
            return v3;
          v10 = 0;
          while (*(unsigned __int8 *)(v3 + v10) == v7[v10])
          {
            if (v8 == ++v10)
              return v3;
          }
        }
      }
      v3 += 24;
    }
    while (v3 != a2);
    return a2;
  }
  return v3;
}

void Espresso::DTypeConverter::PerformConversions(Espresso::DTypeConverter *this)
{
  uint64_t *v2;
  __int128 *v3;
  uint64_t **v4;
  uint64_t **v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  char *v24;
  __int128 v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  __int128 *v29;
  uint64_t v30;
  unint64_t *v31;
  void *v32;
  size_t v33;
  __int128 *v34;
  const void *v35;
  uint64_t v36;
  void *v37;
  __int128 v38;
  BOOL v39;
  BOOL v40;
  __int128 *v41;
  uint64_t v42;
  size_t v43;
  void **v44;
  const void *v45;
  BOOL v46;
  BOOL v48;
  _BOOL4 v50;
  __int128 *v51;
  uint64_t v52;
  size_t v53;
  void **v54;
  const void *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  __int128 *v62;
  _OWORD *v63;
  __int128 v64;
  std::string *v65;
  __int128 *v66;
  _OWORD *v67;
  __int128 v68;
  std::string *v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *p_shared_owners;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t **v79;
  char *v80;
  __int128 v81;
  __int128 v82;
  uint64_t **v83;
  uint64_t **v84;
  uint64_t **v85;
  uint64_t **v86;
  char *v87;
  uint64_t **v88;
  uint64_t **v89;
  uint64_t **v90;
  uint64_t v91;
  uint64_t **v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  __int128 *v101;
  void *v102;
  void *v103;
  void *v104;
  _QWORD *v105;
  void *__p[2];
  void *v107[4];
  int64x2_t *v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  std::string v113;
  int64x2_t v114;
  unint64_t v115;
  uint64_t v116;
  __int128 v117;
  void *v118;
  void *v119;
  unint64_t *v120;
  unsigned __int128 v121;
  __int128 *v122;
  std::__shared_weak_count *v123;

  if (!*((_BYTE *)this + 8))
    Espresso::throw_exception_selector<Espresso::generic_error,char const(&)[19]>();
  v114 = 0uLL;
  v115 = 0;
  v2 = (uint64_t *)*((_QWORD *)this + 4);
  if (v2)
  {
    v105 = (_QWORD *)((char *)this + 16);
    while (1)
    {
      v3 = (__int128 *)(v2 + 2);
      v4 = *(uint64_t ***)this;
      v5 = (uint64_t **)(*(_QWORD *)this + 232);
      memset(&v113, 0, sizeof(v113));
      v6 = (uint64_t **)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>((uint64_t)v5, v2 + 2);
      if (v4 + 30 == v6 || *((_DWORD *)v2 + 22))
      {
        v7 = (uint64_t **)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>((uint64_t)(v4 + 32), v2 + 2);
        if (v4 + 33 == v7 || *((_DWORD *)v2 + 22) != 1)
        {
          if (*((char *)v2 + 39) < 0)
            v3 = *(__int128 **)v3;
          v108 = (int64x2_t *)v3;
          Espresso::throw_exception_selector<Espresso::generic_error,char const*&>("Invalid DType conversion spec ORDType conversion requested for non I/O blob: %s", &v108);
        }
        v8 = (uint64_t)v7;
        std::string::operator=(&v113, (const std::string *)(v2 + 5));
        std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::erase(v4 + 32, v8);
        v108 = (int64x2_t *)(v2 + 8);
        std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v4 + 32, v2 + 8, (__int128 **)&v108)[56] = 1;
        v9 = *(_QWORD *)(*(_QWORD *)this + 40) - *(_QWORD *)(*(_QWORD *)this + 32);
        if ((int)(v9 >> 4) < 1)
        {
LABEL_155:
          v101 = (__int128 *)&v113;
          if ((v113.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v101 = (__int128 *)v113.__r_.__value_.__r.__words[0];
          v108 = (int64x2_t *)v101;
          Espresso::throw_exception_selector<Espresso::generic_error,char const*&>("No consumers found for %s", &v108);
        }
        v10 = 0;
        v11 = (v9 >> 4);
        v12 = (_QWORD *)(*(_QWORD *)this + 96);
        while (1)
        {
          v13 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::find<unsigned long>(v12, v10);
          if (!v13)
            goto LABEL_158;
          v14 = v13[4];
          if (std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(v13[3], v14, (unsigned __int8 **)&v113) != v14)break;
          if (v11 == ++v10)
            goto LABEL_155;
        }
        v15 = 0;
      }
      else
      {
        v16 = (uint64_t)v6;
        std::string::operator=(&v113, (const std::string *)(v2 + 8));
        std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::erase(v5, v16);
        v108 = (int64x2_t *)(v2 + 5);
        std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v5, v2 + 5, (__int128 **)&v108)[56] = 1;
        v17 = *(_QWORD *)(*(_QWORD *)this + 40) - *(_QWORD *)(*(_QWORD *)this + 32);
        if ((int)(v17 >> 4) < 1)
          goto LABEL_155;
        v10 = 0;
        v18 = (v17 >> 4);
        v19 = (_QWORD *)(*(_QWORD *)this + 56);
        while (1)
        {
          v20 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::find<unsigned long>(v19, v10);
          if (!v20)
LABEL_158:
            std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
          v21 = v20[4];
          if (std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(v20[3], v21, (unsigned __int8 **)&v113) != v21)break;
          if (v18 == ++v10)
            goto LABEL_155;
        }
        v15 = 1;
      }
      v22 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>(v105, (unsigned __int8 *)v2 + 16);
      if (!v22)
      {
        if (*((char *)v2 + 39) >= 0)
          v102 = v2 + 2;
        else
          v102 = (void *)v2[2];
        __p[0] = v102;
        Espresso::throw_exception_selector<Espresso::generic_error,char const*&>("Cannot create conversion layer. No conversion specs for %s.", __p);
      }
      v23 = v22;
      LODWORD(v108) = 0;
      v109 = 0u;
      v110 = 0u;
      v111 = 0u;
      v112 = 0u;
      v24 = (char *)operator new(0xF8uLL);
      *((_QWORD *)v24 + 1) = 0;
      *((_QWORD *)v24 + 2) = 0;
      *((_QWORD *)v24 + 3) = &off_1E2DA1A38;
      *(_QWORD *)v24 = &off_1E2DBF0D0;
      *(_OWORD *)(v24 + 40) = 0u;
      *(_OWORD *)(v24 + 56) = 0u;
      *(_OWORD *)(v24 + 72) = 0u;
      *(_OWORD *)(v24 + 88) = 0u;
      *(_OWORD *)(v24 + 104) = 0u;
      *(_OWORD *)(v24 + 120) = 0u;
      *(_OWORD *)(v24 + 136) = 0u;
      *(_OWORD *)(v24 + 152) = 0u;
      *(_OWORD *)(v24 + 161) = 0u;
      *((_OWORD *)v24 + 13) = 0u;
      *((_OWORD *)v24 + 14) = 0u;
      *((_QWORD *)v24 + 30) = 0;
      *(_QWORD *)&v25 = v24 + 24;
      *((_QWORD *)&v25 + 1) = v24;
      v109 = v25;
      v26 = *((_DWORD *)v23 + 22);
      if (v15)
      {
        if (v26)
        {
          if (*((char *)v2 + 39) >= 0)
            v103 = v2 + 2;
          else
            v103 = (void *)v2[2];
          __p[0] = v103;
          Espresso::throw_exception_selector<Espresso::generic_error,char const*&>("Invalid conversion mode for input blob %s", __p);
        }
        LODWORD(v10) = v10 - 1;
      }
      else if (v26 != 1)
      {
        if (*((char *)v2 + 39) >= 0)
          v104 = v2 + 2;
        else
          v104 = (void *)v2[2];
        __p[0] = v104;
        Espresso::throw_exception_selector<Espresso::generic_error,char const*&>("Invalid conversion mode for output blob %s", __p);
      }
      LODWORD(v108) = v10;
      v27 = *((_DWORD *)v23 + 25);
      v28 = *((_DWORD *)v23 + 28);
      Espresso::abstract_engine_factory::shared(&v122);
      v121 = 0uLL;
      if (v27 != 4 && v27 != 2)
        break;
      if (v28 > 1)
      {
        v39 = 0;
        v40 = 0;
LABEL_64:
        if (v28)
          v46 = 0;
        else
          v46 = v40;
        if (v28 != 1)
          v39 = 0;
        v48 = v27 == 2 && v28 == 4;
        v50 = v27 == 4 && v28 == 2;
        if (!v46 && !v39 && !v48 && !v50)
          Espresso::throw_exception_selector<Espresso::generic_error>("Unsupported conversion.");
        v119 = (void *)v28;
        v51 = v122;
        v52 = *(_QWORD *)this;
        std::string::basic_string[abi:ne180100]<0>(__p, "cast");
        v116 = 0;
        Espresso::abstract_engine_factory::make_kernel_priv((uint64_t)v51, v52 + 16, (uint64_t)__p, (uint64_t)&v119, (int *)&v116 + 1);
        v31 = (unint64_t *)*((_QWORD *)&v117 + 1);
        v32 = (void *)v117;
        v117 = 0uLL;
        v121 = __PAIR128__((unint64_t)v31, (unint64_t)v32);
        if (SHIBYTE(v107[0]) < 0)
          operator delete(__p[0]);
        MEMORY[0x19401C808](v109 + 40, "cast");
        if (*((char *)v2 + 39) >= 0)
          v53 = *((unsigned __int8 *)v2 + 39);
        else
          v53 = v2[3];
        std::string::basic_string[abi:ne180100]((uint64_t)__p, v53 + 6);
        if (SHIBYTE(v107[0]) >= 0)
          v54 = __p;
        else
          v54 = (void **)__p[0];
        if (v53)
        {
          if (*((char *)v2 + 39) >= 0)
            v55 = v2 + 2;
          else
            v55 = (const void *)v2[2];
          memmove(v54, v55, v53);
        }
        strcpy((char *)v54 + v53, "__cast");
        goto LABEL_99;
      }
      LODWORD(v107[0]) = 0;
      __p[1] = 0;
      *(void **)((char *)v107 + 4) = (void *)1065353216;
      HIDWORD(v107[1]) = 0;
      LODWORD(__p[0]) = v28;
      HIDWORD(__p[0]) = *((_DWORD *)v23 + 23);
      v29 = v122;
      v30 = *(_QWORD *)this;
      std::string::basic_string[abi:ne180100]<0>(&v117, "static_dequantize");
      v116 = 0;
      Espresso::abstract_engine_factory::make_kernel_priv((uint64_t)v29, v30 + 16, (uint64_t)&v117, (uint64_t)__p, (int *)&v116 + 1);
      v32 = v119;
      v31 = v120;
      v119 = 0;
      v120 = 0;
      *(_QWORD *)&v121 = v32;
      *((_QWORD *)&v121 + 1) = v31;
      if (SHIBYTE(v118) < 0)
        operator delete((void *)v117);
      MEMORY[0x19401C808](v109 + 40, "static_dequantize");
      if (*((char *)v2 + 39) >= 0)
        v33 = *((unsigned __int8 *)v2 + 39);
      else
        v33 = v2[3];
      std::string::basic_string[abi:ne180100]((uint64_t)&v117, v33 + 12);
      if (SHIBYTE(v118) >= 0)
        v34 = &v117;
      else
        v34 = (__int128 *)v117;
      if (v33)
      {
        if (*((char *)v2 + 39) >= 0)
          v35 = v2 + 2;
        else
          v35 = (const void *)v2[2];
        memmove(v34, v35, v33);
      }
      strcpy((char *)v34 + v33, "__dequantize");
      v36 = v109 + 16;
      if (*(char *)(v109 + 39) < 0)
        operator delete(*(void **)v36);
      v37 = v118;
      v38 = v117;
LABEL_102:
      *(_OWORD *)v36 = v38;
      *(_QWORD *)(v36 + 16) = v37;
      __p[0] = v32;
      __p[1] = v31;
      if (v31)
      {
        v56 = v31 + 1;
        do
          v57 = __ldxr(v56);
        while (__stxr(v57 + 1, v56));
      }
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v109 + 64, (__int128 *)__p);
      v58 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v59 = (unint64_t *)((char *)__p[1] + 8);
        do
          v60 = __ldaxr(v59);
        while (__stlxr(v60 - 1, v59));
        if (!v60)
        {
          ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
          std::__shared_weak_count::__release_weak(v58);
        }
      }
      v61 = v109;
      *(_QWORD *)(v109 + 8) = 0;
      std::string::operator=((std::string *)(v61 + 200), (const std::string *)(v61 + 16));
      v62 = (__int128 *)(v23 + 40);
      v63 = (_OWORD *)*((_QWORD *)&v110 + 1);
      if (*((_QWORD *)&v110 + 1) >= (unint64_t)v111)
      {
        v65 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v110, (uint64_t)v62);
      }
      else
      {
        if ((char)v23[63] < 0)
        {
          std::string::__init_copy_ctor_external(*((std::string **)&v110 + 1), *((const std::string::value_type **)v23 + 5), *((_QWORD *)v23 + 6));
        }
        else
        {
          v64 = *v62;
          *(_QWORD *)(*((_QWORD *)&v110 + 1) + 16) = *((_QWORD *)v23 + 7);
          *v63 = v64;
        }
        v65 = (std::string *)((char *)v63 + 24);
      }
      *((_QWORD *)&v110 + 1) = v65;
      v66 = (__int128 *)(v23 + 64);
      v67 = (_OWORD *)v112;
      if ((unint64_t)v112 >= *((_QWORD *)&v112 + 1))
      {
        v69 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v111 + 1, (uint64_t)v66);
      }
      else
      {
        if ((char)v23[87] < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v112, *((const std::string::value_type **)v23 + 8), *((_QWORD *)v23 + 9));
        }
        else
        {
          v68 = *v66;
          *(_QWORD *)(v112 + 16) = *((_QWORD *)v23 + 10);
          *v67 = v68;
        }
        v69 = (std::string *)((char *)v67 + 24);
      }
      *(_QWORD *)&v112 = v69;
      v70 = (std::__shared_weak_count *)*((_QWORD *)&v121 + 1);
      if (*((_QWORD *)&v121 + 1))
      {
        v71 = (unint64_t *)(*((_QWORD *)&v121 + 1) + 8);
        do
          v72 = __ldaxr(v71);
        while (__stlxr(v72 - 1, v71));
        if (!v72)
        {
          ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
          std::__shared_weak_count::__release_weak(v70);
        }
      }
      v73 = v123;
      if (v123)
      {
        p_shared_owners = (unint64_t *)&v123->__shared_owners_;
        do
          v75 = __ldaxr(p_shared_owners);
        while (__stlxr(v75 - 1, p_shared_owners));
        if (!v75)
        {
          ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
          std::__shared_weak_count::__release_weak(v73);
        }
      }
      v76 = v114.i64[1];
      if (v114.i64[1] >= v115)
      {
        v77 = std::vector<Espresso::net::new_layer_info>::__push_back_slow_path<Espresso::net::new_layer_info const&>(&v114, (uint64_t)&v108);
      }
      else
      {
        std::allocator<Espresso::net::new_layer_info>::construct[abi:ne180100]<Espresso::net::new_layer_info,Espresso::net::new_layer_info const&>(v114.i64[1], (uint64_t)&v108);
        v77 = v76 + 72;
      }
      v114.i64[1] = v77;
      v78 = std::map<std::string,Espresso::blob_numerical_properties>::at(*(_QWORD *)this + 184, &v113);
      v79 = (uint64_t **)(*(_QWORD *)this + 184);
      __p[0] = v2 + 2;
      v80 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v79, v2 + 2, (__int128 **)__p);
      v81 = *(_OWORD *)v78;
      v82 = *(_OWORD *)(v78 + 16);
      *((_QWORD *)v80 + 11) = *(_QWORD *)(v78 + 32);
      *(_OWORD *)(v80 + 72) = v82;
      *(_OWORD *)(v80 + 56) = v81;
      if (v80 + 56 != (char *)v78)
        std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v80 + 96, *(char **)(v78 + 40), *(_QWORD *)(v78 + 48), (uint64_t)(*(_QWORD *)(v78 + 48) - *(_QWORD *)(v78 + 40)) >> 2);
      v83 = (uint64_t **)(*(_QWORD *)this + 184);
      if (v15)
      {
        __p[0] = &v113;
        *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v83, &v113, (__int128 **)__p)+ 20) = 0;
        v84 = (uint64_t **)(*(_QWORD *)this + 184);
        __p[0] = &v113;
        *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v84, &v113, (__int128 **)__p)+ 21) = 0;
        v85 = (uint64_t **)(*(_QWORD *)this + 184);
        __p[0] = &v113;
        *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v85, &v113, (__int128 **)__p)+ 22) = 0;
        v86 = (uint64_t **)(*(_QWORD *)this + 184);
        __p[0] = &v113;
        v87 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v86, &v113, (__int128 **)__p);
      }
      else
      {
        __p[0] = v2 + 2;
        *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v83, v2 + 2, (__int128 **)__p)+ 20) = 0;
        v88 = (uint64_t **)(*(_QWORD *)this + 184);
        __p[0] = v2 + 2;
        *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v88, v2 + 2, (__int128 **)__p)+ 21) = 0;
        v89 = (uint64_t **)(*(_QWORD *)this + 184);
        __p[0] = v2 + 2;
        *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v89, v2 + 2, (__int128 **)__p)+ 22) = 0;
        v90 = (uint64_t **)(*(_QWORD *)this + 184);
        __p[0] = v2 + 2;
        v87 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v90, v2 + 2, (__int128 **)__p);
      }
      *((_DWORD *)v87 + 23) = 0;
      v91 = std::map<std::string,Espresso::blob_numerical_properties>::at(*(_QWORD *)this + 376, v2 + 2);
      *(_OWORD *)__p = *(_OWORD *)v91;
      memset(v107, 0, 24);
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v107, *(const void **)(v91 + 16), *(_QWORD *)(v91 + 24), (uint64_t)(*(_QWORD *)(v91 + 24) - *(_QWORD *)(v91 + 16)) >> 2);
      v92 = (uint64_t **)(*(_QWORD *)this + 352);
      v122 = (__int128 *)(v2 + 2);
      v93 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v92, v2 + 2, (uint64_t)&std::piecewise_construct, &v122);
      *(_OWORD *)(v93 + 56) = *(_OWORD *)__p;
      if (v93 + 56 != (char *)__p)
        std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v93 + 72, (char *)v107[0], (uint64_t)v107[1], ((char *)v107[1] - (char *)v107[0]) >> 2);
      v94 = std::map<std::string,Espresso::blob_numerical_properties>::at(*(_QWORD *)this + 352, &v113);
      v95 = 52;
      if (v15)
        v95 = 64;
      v96 = (uint64_t)v2 + v95;
      v97 = *(_QWORD *)(v96 + 40);
      *(_DWORD *)(v94 + 8) = *(_DWORD *)(v96 + 48);
      *(_QWORD *)v94 = v97;
      if (v107[0])
      {
        v107[1] = v107[0];
        operator delete(v107[0]);
      }
      __p[0] = (char *)&v111 + 8;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      __p[0] = &v110;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      v98 = (std::__shared_weak_count *)*((_QWORD *)&v109 + 1);
      if (*((_QWORD *)&v109 + 1))
      {
        v99 = (unint64_t *)(*((_QWORD *)&v109 + 1) + 8);
        do
          v100 = __ldaxr(v99);
        while (__stlxr(v100 - 1, v99));
        if (!v100)
        {
          ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
          std::__shared_weak_count::__release_weak(v98);
        }
      }
      if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v113.__r_.__value_.__l.__data_);
      v2 = (uint64_t *)*v2;
      if (!v2)
        goto LABEL_154;
    }
    v39 = v27 == 0;
    v40 = v27 == 1;
    if (v27 > 1 || v28 != 4 && v28 != 2)
      goto LABEL_64;
    LODWORD(v120) = 0;
    LODWORD(v119) = v28;
    HIDWORD(v119) = *((_DWORD *)v23 + 26);
    v41 = v122;
    v42 = *(_QWORD *)this;
    std::string::basic_string[abi:ne180100]<0>(__p, "static_quantize");
    v116 = 0;
    Espresso::abstract_engine_factory::make_kernel_priv((uint64_t)v41, v42 + 16, (uint64_t)__p, (uint64_t)&v119, (int *)&v116 + 1);
    v31 = (unint64_t *)*((_QWORD *)&v117 + 1);
    v32 = (void *)v117;
    v117 = 0uLL;
    v121 = __PAIR128__((unint64_t)v31, (unint64_t)v32);
    if (SHIBYTE(v107[0]) < 0)
      operator delete(__p[0]);
    MEMORY[0x19401C808](v109 + 40, "static_quantize");
    if (*((char *)v2 + 39) >= 0)
      v43 = *((unsigned __int8 *)v2 + 39);
    else
      v43 = v2[3];
    std::string::basic_string[abi:ne180100]((uint64_t)__p, v43 + 10);
    if (SHIBYTE(v107[0]) >= 0)
      v44 = __p;
    else
      v44 = (void **)__p[0];
    if (v43)
    {
      if (*((char *)v2 + 39) >= 0)
        v45 = v2 + 2;
      else
        v45 = (const void *)v2[2];
      memmove(v44, v45, v43);
    }
    strcpy((char *)v44 + v43, "__quantize");
LABEL_99:
    v36 = v109 + 16;
    if (*(char *)(v109 + 39) < 0)
      operator delete(*(void **)v36);
    v37 = v107[0];
    v38 = *(_OWORD *)__p;
    goto LABEL_102;
  }
LABEL_154:
  Espresso::net::insert_layers(*(_QWORD *)this, v114.i64);
  Espresso::shape_network_recursive(*(Espresso **)this, (Espresso::net *)(*(_QWORD *)this + 184), 0, 0);
  v108 = &v114;
  std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&v108);
}

void sub_19147B0E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,char a37,uint64_t a38)
{
  uint64_t v38;

  *(_QWORD *)(v38 - 176) = &a37;
  std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)(v38 - 176));
  _Unwind_Resume(a1);
}

void Espresso::throw_exception_selector<Espresso::generic_error,char const(&)[19]>()
{
  Espresso::throw_exception_with_format<Espresso::generic_error>("Invalid call to %s. Blob renaming not yet done.", "PerformConversions");
}

void Espresso::prepare_network_reshape_graph_coloring(Espresso::net **a1, uint64_t a2)
{
  Espresso::net *v4;
  uint64_t **v5;
  Espresso::net *v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t i;
  uint64_t v18;
  uint64_t j;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  __int128 *v23;
  uint64_t v24;
  Espresso::net *v25;
  _QWORD *v26;
  __int128 v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  Espresso::net *v34;
  _QWORD *v35;
  __int128 v36;
  __int128 *v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t **v41;
  char *v42;
  char *v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  char *v50;
  char *v51;
  _QWORD *v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char *v63;
  uint64_t v64;
  char *v65;
  __int128 v66;
  unint64_t *v67;
  unint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  char *v71;
  __int128 v72;
  int64x2_t v73;
  Espresso::net *v74;
  _QWORD **v75;
  unint64_t *v76;
  unint64_t v77;
  uint64_t *blob_container;
  uint64_t v79;
  char *v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  __int128 *v90;
  uint64_t v91;
  Espresso::net *v92;
  _QWORD *v93;
  __int128 v94;
  uint64_t v95;
  char *v96;
  char *v97;
  _QWORD *v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t *v101;
  unint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  char *v109;
  uint64_t v110;
  char *v111;
  __int128 v112;
  unint64_t *v113;
  unint64_t v114;
  _QWORD *v115;
  _QWORD *v116;
  char *v117;
  __int128 v118;
  int64x2_t v119;
  const void *v120;
  _QWORD *v121;
  _QWORD *v122;
  __int128 *v123;
  unint64_t *v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t *v128;
  unint64_t v129;
  uint64_t v130;
  Espresso::net *v131;
  _QWORD **v132;
  unint64_t *v133;
  unint64_t v134;
  uint64_t *v135;
  uint64_t v136;
  char *v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  Espresso::net *v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t *v144;
  unint64_t v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  unint64_t *v155;
  unint64_t v156;
  _QWORD *v157;
  _QWORD *v158;
  std::__shared_weak_count *v159;
  unint64_t v160;
  int v161;
  __int128 *v162;
  __int128 *v163;
  __int128 v164;
  uint64_t v165;
  std::__shared_weak_count *v166;
  uint64_t v167;
  std::__shared_weak_count *v168;
  _BYTE v169[40];
  void *__p[4];
  __int128 *v171[3];
  __int128 v172;
  _BYTE v173[24];
  __int128 v174;
  uint64_t v175;
  uint64_t v176;
  std::__shared_weak_count *v177;
  unsigned int v178;
  __int128 *v179;
  void **v180;

  Espresso::net::_tag_inputs_and_outputs(*a1);
  v4 = *a1;
  v5 = (uint64_t **)((char *)*a1 + 184);
  if (v5 != (uint64_t **)a2)
  {
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,Espresso::layer_shape>,std::__tree_node<std::__value_type<std::string,Espresso::layer_shape>,void *> *,long>>(v5, *(__int128 **)a2, (__int128 *)(a2 + 8));
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,Espresso::layer_shape>,std::__tree_node<std::__value_type<std::string,Espresso::layer_shape>,void *> *,long>>((uint64_t **)v4 + 26, *(__int128 **)(a2 + 24), (__int128 *)(a2 + 32));
    v4 = *a1;
  }
  (*(void (**)(_QWORD, Espresso::net *))(**((_QWORD **)v4 + 2) + 64))(*((_QWORD *)v4 + 2), v4);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::clear((uint64_t)*a1 + 136);
  v6 = *a1;
  v7 = (_QWORD *)*((_QWORD *)*a1 + 4);
  v157 = (_QWORD *)*((_QWORD *)*a1 + 5);
  if (v7 != v157)
  {
    v8 = 0;
    while (1)
    {
      v9 = *v7;
      v158 = v7;
      v159 = (std::__shared_weak_count *)v7[1];
      if (v159)
      {
        p_shared_owners = (unint64_t *)&v159->__shared_owners_;
        do
          v11 = __ldxr(p_shared_owners);
        while (__stxr(v11 + 1, p_shared_owners));
      }
      v161 = *(_DWORD *)(v9 + 8);
      v178 = *(_DWORD *)(v9 + 12);
      v12 = *(_QWORD *)(v9 + 64);
      v14 = *(_QWORD *)(v12 + 8);
      v13 = *(std::__shared_weak_count **)(v12 + 16);
      v176 = v14;
      v177 = v13;
      if (v13)
      {
        v15 = (unint64_t *)&v13->__shared_owners_;
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 1, v15));
      }
      v18 = *(_QWORD *)(v9 + 104);
      for (i = *(_QWORD *)(v9 + 112); i != v18; i = std::shared_ptr<void>::~shared_ptr[abi:ne180100](i - 16))
        ;
      *(_QWORD *)(v9 + 112) = v18;
      v20 = *(_QWORD *)(v9 + 80);
      for (j = *(_QWORD *)(v9 + 88); j != v20; j = std::shared_ptr<void>::~shared_ptr[abi:ne180100](j - 16))
        ;
      *(_QWORD *)(v9 + 88) = v20;
      v21 = (uint64_t)*a1 + 96;
      *(_QWORD *)&v172 = v8;
      v22 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v21, v8, &v172);
      v23 = (__int128 *)v22[3];
      v162 = (__int128 *)v22[4];
      if (v23 != v162)
      {
        v24 = 0;
        v160 = v8;
        do
        {
          v175 = 0;
          *(_OWORD *)&v173[8] = 0u;
          v174 = 0u;
          v172 = xmmword_191A8AA80;
          *(_QWORD *)v173 = 0xFFFFFFFF00000001;
          v25 = *a1;
          v26 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>((uint64_t)*a1 + 184, v23);
          if ((_QWORD *)((char *)v25 + 192) == v26)
          {
            *(_QWORD *)v169 = v8;
            v28 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)v25 + 56, v8, v169);
            std::vector<Espresso::layer_shape>::vector(v171, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v28[4] - v28[3]) >> 3));
            v29 = (uint64_t)*a1 + 56;
            *(_QWORD *)v169 = v8;
            v30 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v29, v8, v169);
            v31 = (_QWORD *)v30[3];
            v32 = (_QWORD *)v30[4];
            if (v31 != v32)
            {
              v33 = 0;
              do
              {
                *(_OWORD *)&v169[24] = 0u;
                memset(__p, 0, 24);
                *(_OWORD *)v169 = xmmword_191A8AA80;
                *(_QWORD *)&v169[16] = 0xFFFFFFFF00000001;
                v34 = *a1;
                v35 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>((uint64_t)*a1 + 184, v31);
                if ((_QWORD *)((char *)v34 + 192) != v35)
                {
                  v36 = *(_OWORD *)(v35 + 9);
                  *(_OWORD *)v169 = *(_OWORD *)(v35 + 7);
                  *(_OWORD *)&v169[16] = v36;
                  *(_QWORD *)&v169[32] = v35[11];
                  if (v169 != (_BYTE *)(v35 + 7))
                    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)__p, (char *)v35[12], v35[13], (uint64_t)(v35[13] - v35[12]) >> 2);
                }
                v37 = &v171[0][v33];
                v38 = *(_OWORD *)v169;
                v39 = *(_OWORD *)&v169[16];
                *((_QWORD *)v37 + 4) = *(_QWORD *)&v169[32];
                *v37 = v38;
                v37[1] = v39;
                if (v37 != (__int128 *)v169)
                  std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)v37 + 40, (char *)__p[0], (uint64_t)__p[1], ((char *)__p[1] - (char *)__p[0]) >> 2);
                if (__p[0])
                {
                  __p[1] = __p[0];
                  operator delete(__p[0]);
                }
                v31 += 3;
                v33 += 4;
              }
              while (v31 != v32);
            }
            (*(void (**)(_BYTE *__return_ptr, _QWORD, __int128 **))(**(_QWORD **)(v9 + 64) + 64))(v169, *(_QWORD *)(v9 + 64), v171);
            v40 = *(_QWORD *)v169;
            v41 = (uint64_t **)((char *)*a1 + 184);
            v179 = v23;
            v42 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v41, v23, &v179);
            v43 = (char *)(v40 + (v24 << 6));
            v44 = *(_OWORD *)v43;
            v45 = *((_OWORD *)v43 + 1);
            *((_QWORD *)v42 + 11) = *((_QWORD *)v43 + 4);
            *(_OWORD *)(v42 + 72) = v45;
            *(_OWORD *)(v42 + 56) = v44;
            if (v42 + 56 != v43)
              std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v42 + 96, *((char **)v43 + 5), *((_QWORD *)v43 + 6), (uint64_t)(*((_QWORD *)v43 + 6) - *((_QWORD *)v43 + 5)) >> 2);
            v46 = *(_QWORD *)v169 + (v24 << 6);
            v47 = *(_QWORD *)(v46 + 32);
            v48 = *(_OWORD *)(v46 + 16);
            v172 = *(_OWORD *)v46;
            *(_OWORD *)v173 = v48;
            *(_QWORD *)&v173[16] = v47;
            if (&v172 != (__int128 *)v46)
              std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)&v174, *(char **)(v46 + 40), *(_QWORD *)(v46 + 48), (uint64_t)(*(_QWORD *)(v46 + 48) - *(_QWORD *)(v46 + 40)) >> 2);
            v180 = (void **)v169;
            std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v180);
            *(_QWORD *)v169 = v171;
            std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v169);
            v8 = v160;
          }
          else
          {
            v27 = *(_OWORD *)(v26 + 9);
            v172 = *(_OWORD *)(v26 + 7);
            *(_OWORD *)v173 = v27;
            *(_QWORD *)&v173[16] = v26[11];
            if (&v172 != (__int128 *)(v26 + 7))
              std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)&v174, (char *)v26[12], v26[13], (uint64_t)(v26[13] - v26[12]) >> 2);
          }
          if (!std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>((_QWORD *)*a1 + 17, (unsigned __int8 *)v23))
          {
            (*(void (**)(_BYTE *__return_ptr, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v9 + 64) + 24))(v169, *(_QWORD *)(v9 + 64), 1, v24);
            v74 = *a1;
            v75 = *(_QWORD ***)(v9 + 64);
            v167 = v176;
            v168 = v177;
            if (v177)
            {
              v76 = (unint64_t *)&v177->__shared_owners_;
              do
                v77 = __ldxr(v76);
              while (__stxr(v77 + 1, v76));
            }
            blob_container = (uint64_t *)Espresso::make_blob_container(v161, &v178, (uint64_t)v74, v75, &v167, v23, 1, v24);
            v79 = (uint64_t)*a1 + 136;
            v171[0] = v23;
            v80 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v79, (unsigned __int8 *)v23, v171);
            std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v80 + 5, *blob_container, blob_container[1]);
            v81 = v168;
            if (v168)
            {
              v82 = (unint64_t *)&v168->__shared_owners_;
              do
                v83 = __ldaxr(v82);
              while (__stlxr(v83 - 1, v82));
              if (!v83)
              {
                ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
                std::__shared_weak_count::__release_weak(v81);
              }
            }
            v84 = *(std::__shared_weak_count **)&v169[8];
            if (*(_QWORD *)&v169[8])
            {
              v85 = (unint64_t *)(*(_QWORD *)&v169[8] + 8);
              do
                v86 = __ldaxr(v85);
              while (__stlxr(v86 - 1, v85));
              if (!v86)
              {
                ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
                std::__shared_weak_count::__release_weak(v84);
              }
            }
          }
          v49 = (uint64_t)*a1 + 136;
          *(_QWORD *)v169 = v23;
          v50 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v49, (unsigned __int8 *)v23, (__int128 **)v169);
          v51 = v50;
          v52 = *(_QWORD **)(v9 + 112);
          v53 = *(_QWORD *)(v9 + 120);
          if ((unint64_t)v52 >= v53)
          {
            v58 = *(_QWORD *)(v9 + 104);
            v59 = ((uint64_t)v52 - v58) >> 4;
            v60 = v59 + 1;
            if ((unint64_t)(v59 + 1) >> 60)
              std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
            v61 = v53 - v58;
            if (v61 >> 3 > v60)
              v60 = v61 >> 3;
            if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFF0)
              v62 = 0xFFFFFFFFFFFFFFFLL;
            else
              v62 = v60;
            *(_QWORD *)&v169[32] = v9 + 120;
            v63 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v62);
            v65 = &v63[16 * v59];
            v66 = *(_OWORD *)(v51 + 40);
            *(_OWORD *)v65 = v66;
            if (*((_QWORD *)&v66 + 1))
            {
              v67 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
              do
                v68 = __ldxr(v67);
              while (__stxr(v68 + 1, v67));
            }
            v70 = *(_QWORD **)(v9 + 104);
            v69 = *(_QWORD **)(v9 + 112);
            if (v69 == v70)
            {
              v73 = vdupq_n_s64((unint64_t)v69);
              v71 = &v63[16 * v59];
            }
            else
            {
              v71 = &v63[16 * v59];
              do
              {
                v72 = *((_OWORD *)v69 - 1);
                v69 -= 2;
                *((_OWORD *)v71 - 1) = v72;
                v71 -= 16;
                *v69 = 0;
                v69[1] = 0;
              }
              while (v69 != v70);
              v73 = *(int64x2_t *)(v9 + 104);
            }
            v57 = v65 + 16;
            *(_QWORD *)(v9 + 104) = v71;
            *(_QWORD *)(v9 + 112) = v65 + 16;
            *(int64x2_t *)&v169[8] = v73;
            v87 = *(_QWORD *)(v9 + 120);
            *(_QWORD *)(v9 + 120) = &v63[16 * v64];
            *(_QWORD *)&v169[24] = v87;
            *(_QWORD *)v169 = v73.i64[0];
            std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v169);
          }
          else
          {
            *v52 = *((_QWORD *)v50 + 5);
            v54 = *((_QWORD *)v50 + 6);
            v52[1] = v54;
            if (v54)
            {
              v55 = (unint64_t *)(v54 + 8);
              do
                v56 = __ldxr(v55);
              while (__stxr(v56 + 1, v55));
            }
            v57 = v52 + 2;
          }
          *(_QWORD *)(v9 + 112) = v57;
          if ((_QWORD)v174)
          {
            *((_QWORD *)&v174 + 1) = v174;
            operator delete((void *)v174);
          }
          ++v24;
          v23 = (__int128 *)((char *)v23 + 24);
        }
        while (v23 != v162);
      }
      v88 = (uint64_t)*a1 + 56;
      *(_QWORD *)&v172 = v8;
      v89 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v88, v8, &v172);
      v90 = (__int128 *)v89[3];
      v163 = (__int128 *)v89[4];
      if (v90 != v163)
      {
        v91 = 0;
        do
        {
          v175 = 0;
          *(_OWORD *)&v173[8] = 0u;
          v174 = 0u;
          v172 = xmmword_191A8AA80;
          *(_QWORD *)v173 = 0xFFFFFFFF00000001;
          v92 = *a1;
          v93 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>((uint64_t)*a1 + 184, v90);
          if ((_QWORD *)((char *)v92 + 192) != v93)
          {
            v94 = *(_OWORD *)(v93 + 9);
            v172 = *(_OWORD *)(v93 + 7);
            *(_OWORD *)v173 = v94;
            *(_QWORD *)&v173[16] = v93[11];
            if (&v172 != (__int128 *)(v93 + 7))
            {
              std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)&v174, (char *)v93[12], v93[13], (uint64_t)(v93[13] - v93[12]) >> 2);
              v92 = *a1;
            }
          }
          if (!std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>((_QWORD *)v92 + 17, (unsigned __int8 *)v90))
          {
            (*(void (**)(_BYTE *__return_ptr, _QWORD, _QWORD, uint64_t))(**(_QWORD **)(v9 + 64) + 24))(v169, *(_QWORD *)(v9 + 64), 0, v91);
            v120 = *(const void **)(v9 + 64);
            if (v120)
            {
              if (v121)
              {
                v122 = v121;
                v123 = *(__int128 **)(v9 + 72);
                v171[0] = (__int128 *)v121;
                v171[1] = v123;
                if (v123)
                {
                  v124 = (unint64_t *)v123 + 1;
                  do
                    v125 = __ldxr(v124);
                  while (__stxr(v125 + 1, v124));
                }
                v126 = v121[41];
                if (v126)
                {
                  v161 = (***(uint64_t (****)(_QWORD))(v126 + 8))(*(_QWORD *)(v126 + 8));
                  v178 = *(_DWORD *)((*(uint64_t (**)(_QWORD *))(*v122 + 320))(v122) + 24);
                  v127 = v122[41];
                  if (v127)
                    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v176, v127, v122[42]);
                }
                if (v123)
                {
                  v128 = (unint64_t *)v123 + 1;
                  do
                    v129 = __ldaxr(v128);
                  while (__stlxr(v129 - 1, v128));
                  if (!v129)
                  {
                    (*(void (**)(__int128 *))(*(_QWORD *)v123 + 16))(v123);
                    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v123);
                  }
                }
              }
            }
            v131 = *a1;
            v132 = *(_QWORD ***)(v9 + 64);
            v165 = v176;
            v166 = v177;
            if (v177)
            {
              v133 = (unint64_t *)&v177->__shared_owners_;
              do
                v134 = __ldxr(v133);
              while (__stxr(v134 + 1, v133));
            }
            v135 = (uint64_t *)Espresso::make_blob_container(v161, &v178, (uint64_t)v131, v132, &v165, v90, 0, v91);
            v136 = (uint64_t)*a1 + 136;
            v171[0] = v90;
            v137 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v136, (unsigned __int8 *)v90, v171);
            std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v137 + 5, *v135, v135[1]);
            v138 = v166;
            if (v166)
            {
              v139 = (unint64_t *)&v166->__shared_owners_;
              do
                v140 = __ldaxr(v139);
              while (__stlxr(v140 - 1, v139));
              if (!v140)
              {
                ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
                std::__shared_weak_count::__release_weak(v138);
              }
            }
            v141 = *a1;
            v142 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*((_QWORD **)*a1 + 30), v90);
            if (!v8 || v142)
            {
              v171[0] = v90;
              v143 = *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v141 + 136, (unsigned __int8 *)v90, v171)+ 5);
              v164 = *(_OWORD *)v169;
              if (*(_QWORD *)&v169[8])
              {
                v144 = (unint64_t *)(*(_QWORD *)&v169[8] + 8);
                do
                  v145 = __ldxr(v144);
                while (__stxr(v145 + 1, v144));
              }
              (*(void (**)(uint64_t, __int128 *, __int128 *))(*(_QWORD *)v143 + 16))(v143, &v172, &v164);
              v146 = (std::__shared_weak_count *)*((_QWORD *)&v164 + 1);
              if (*((_QWORD *)&v164 + 1))
              {
                v147 = (unint64_t *)(*((_QWORD *)&v164 + 1) + 8);
                do
                  v148 = __ldaxr(v147);
                while (__stlxr(v148 - 1, v147));
                if (!v148)
                {
                  ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
                  std::__shared_weak_count::__release_weak(v146);
                }
              }
            }
            v149 = *(std::__shared_weak_count **)&v169[8];
            if (*(_QWORD *)&v169[8])
            {
              v150 = (unint64_t *)(*(_QWORD *)&v169[8] + 8);
              do
                v151 = __ldaxr(v150);
              while (__stlxr(v151 - 1, v150));
              if (!v151)
              {
                ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
                std::__shared_weak_count::__release_weak(v149);
              }
            }
          }
          v95 = (uint64_t)*a1 + 136;
          *(_QWORD *)v169 = v90;
          v96 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v95, (unsigned __int8 *)v90, (__int128 **)v169);
          v97 = v96;
          v98 = *(_QWORD **)(v9 + 88);
          v99 = *(_QWORD *)(v9 + 96);
          if ((unint64_t)v98 >= v99)
          {
            v104 = *(_QWORD *)(v9 + 80);
            v105 = ((uint64_t)v98 - v104) >> 4;
            v106 = v105 + 1;
            if ((unint64_t)(v105 + 1) >> 60)
              std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
            v107 = v99 - v104;
            if (v107 >> 3 > v106)
              v106 = v107 >> 3;
            if ((unint64_t)v107 >= 0x7FFFFFFFFFFFFFF0)
              v108 = 0xFFFFFFFFFFFFFFFLL;
            else
              v108 = v106;
            *(_QWORD *)&v169[32] = v9 + 96;
            v109 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v108);
            v111 = &v109[16 * v105];
            v112 = *(_OWORD *)(v97 + 40);
            *(_OWORD *)v111 = v112;
            if (*((_QWORD *)&v112 + 1))
            {
              v113 = (unint64_t *)(*((_QWORD *)&v112 + 1) + 8);
              do
                v114 = __ldxr(v113);
              while (__stxr(v114 + 1, v113));
            }
            v116 = *(_QWORD **)(v9 + 80);
            v115 = *(_QWORD **)(v9 + 88);
            if (v115 == v116)
            {
              v119 = vdupq_n_s64((unint64_t)v115);
              v117 = &v109[16 * v105];
            }
            else
            {
              v117 = &v109[16 * v105];
              do
              {
                v118 = *((_OWORD *)v115 - 1);
                v115 -= 2;
                *((_OWORD *)v117 - 1) = v118;
                v117 -= 16;
                *v115 = 0;
                v115[1] = 0;
              }
              while (v115 != v116);
              v119 = *(int64x2_t *)(v9 + 80);
            }
            v103 = v111 + 16;
            *(_QWORD *)(v9 + 80) = v117;
            *(_QWORD *)(v9 + 88) = v111 + 16;
            *(int64x2_t *)&v169[8] = v119;
            v130 = *(_QWORD *)(v9 + 96);
            *(_QWORD *)(v9 + 96) = &v109[16 * v110];
            *(_QWORD *)&v169[24] = v130;
            *(_QWORD *)v169 = v119.i64[0];
            std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v169);
          }
          else
          {
            *v98 = *((_QWORD *)v96 + 5);
            v100 = *((_QWORD *)v96 + 6);
            v98[1] = v100;
            if (v100)
            {
              v101 = (unint64_t *)(v100 + 8);
              do
                v102 = __ldxr(v101);
              while (__stxr(v102 + 1, v101));
            }
            v103 = v98 + 2;
          }
          *(_QWORD *)(v9 + 88) = v103;
          if ((_QWORD)v174)
          {
            *((_QWORD *)&v174 + 1) = v174;
            operator delete((void *)v174);
          }
          v91 = (v91 + 1);
          v90 = (__int128 *)((char *)v90 + 24);
        }
        while (v90 != v163);
      }
      v152 = v177;
      if (!v177)
        goto LABEL_144;
      v153 = (unint64_t *)&v177->__shared_owners_;
      do
        v154 = __ldaxr(v153);
      while (__stlxr(v154 - 1, v153));
      if (!v154)
      {
        ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
        std::__shared_weak_count::__release_weak(v152);
        if (v159)
        {
LABEL_145:
          v155 = (unint64_t *)&v159->__shared_owners_;
          do
            v156 = __ldaxr(v155);
          while (__stlxr(v156 - 1, v155));
          if (!v156)
          {
            ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
            std::__shared_weak_count::__release_weak(v159);
          }
        }
      }
      else
      {
LABEL_144:
        if (v159)
          goto LABEL_145;
      }
      ++v8;
      v7 = v158 + 2;
      if (v158 + 2 == v157)
      {
        v6 = *a1;
        break;
      }
    }
  }
  Espresso::net::_assign_streams(v6);
  Espresso::net::_on_resized(*a1);
  Espresso::net::_resolve_default_configuration(*a1);
  (*(void (**)(_QWORD))(**((_QWORD **)*a1 + 2) + 80))(*((_QWORD *)*a1 + 2));
  Espresso::run_pass_on_network<Espresso::pass_update_absolute_indexes_after_transform>((uint64_t)*a1);
}

void sub_19147BDAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  uint64_t v36;
  std::__shared_weak_count *v38;
  unint64_t *p_shared_owners;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;

  v38 = *(std::__shared_weak_count **)(v36 - 136);
  if (v38)
  {
    p_shared_owners = (unint64_t *)&v38->__shared_owners_;
    do
      v40 = __ldaxr(p_shared_owners);
    while (__stlxr(v40 - 1, p_shared_owners));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  if (a11)
  {
    v41 = (unint64_t *)&a11->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))a11->__on_zero_shared)(a11);
      std::__shared_weak_count::__release_weak(a11);
    }
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<Espresso::pass_update_absolute_indexes_after_transform>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBEA40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::pass_update_absolute_indexes_after_transform>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBEA40;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void Espresso::shape_network(Espresso *this, Espresso::net *a2, const Espresso::network_shape *a3)
{
  Espresso::shape_network_recursive(this, a2, 0, 0);
}

uint64_t _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2EEEEJNS_10shared_ptrIN8Espresso23abstract_blob_containerEEENS4_11layer_shapeENS3_INS4_31abstract_blob_container_optionsEEEEEC2B8ne180100IJLm0ELm1ELm2EEJS6_S7_S9_EJEJEJRS6_RS7_RS9_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSG_IJDpT2_EEEDpOT3_(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4, _QWORD *a5)
{
  unint64_t *v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  if (a3)
  {
    v7 = (unint64_t *)(a3 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = *a4;
  v10 = a4[1];
  v11 = *((_QWORD *)a4 + 4);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 48) = v11;
  *(_OWORD *)(a1 + 32) = v10;
  *(_OWORD *)(a1 + 16) = v9;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((_QWORD *)(a1 + 56), *((const void **)a4 + 5), *((_QWORD *)a4 + 6), (uint64_t)(*((_QWORD *)a4 + 6) - *((_QWORD *)a4 + 5)) >> 2);
  v12 = a5[1];
  *(_QWORD *)(a1 + 80) = *a5;
  *(_QWORD *)(a1 + 88) = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  return a1;
}

void sub_19147BFD0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

char *std::vector<std::tuple<std::shared_ptr<Espresso::abstract_blob_container>,Espresso::layer_shape,std::shared_ptr<Espresso::abstract_blob_container_options>>>::__push_back_slow_path<std::tuple<std::shared_ptr<Espresso::abstract_blob_container>,Espresso::layer_shape,std::shared_ptr<Espresso::abstract_blob_container_options>>>(void **a1, __int128 *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v6;
  char *v7;
  __int128 v8;
  __int128 v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  v2 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 5);
  v3 = v2 + 1;
  if (v2 + 1 > 0x2AAAAAAAAAAAAAALL)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 5) > v3)
    v3 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 5);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 5) >= 0x155555555555555)
    v6 = 0x2AAAAAAAAAAAAAALL;
  else
    v6 = v3;
  if (v6)
  {
    if (v6 > 0x2AAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v7 = (char *)operator new(96 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = *a2;
  v9 = a2[1];
  v10 = &v7[96 * v2];
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v11 = &v7[96 * v6];
  *(_OWORD *)v10 = v8;
  *((_OWORD *)v10 + 1) = v9;
  *((_OWORD *)v10 + 2) = a2[2];
  *((_QWORD *)v10 + 6) = *((_QWORD *)a2 + 6);
  *(_OWORD *)(v10 + 56) = *(__int128 *)((char *)a2 + 56);
  *((_QWORD *)v10 + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 7) = 0;
  *((_QWORD *)a2 + 8) = 0;
  *((_OWORD *)v10 + 5) = a2[5];
  *((_QWORD *)a2 + 10) = 0;
  *((_QWORD *)a2 + 11) = 0;
  *((_QWORD *)a2 + 9) = 0;
  v12 = v10 + 96;
  v13 = (char *)*a1;
  v14 = (char *)a1[1];
  if (v14 == *a1)
  {
    *a1 = v10;
    a1[1] = v12;
    a1[2] = v11;
  }
  else
  {
    v15 = 0;
    do
    {
      v16 = &v10[v15];
      v17 = &v14[v15];
      *((_OWORD *)v16 - 6) = *(_OWORD *)&v14[v15 - 96];
      *((_QWORD *)v17 - 12) = 0;
      *((_QWORD *)v17 - 11) = 0;
      v18 = *(_OWORD *)&v14[v15 - 80];
      v19 = *(_OWORD *)&v14[v15 - 64];
      *((_QWORD *)v16 - 6) = *(_QWORD *)&v14[v15 - 48];
      *((_OWORD *)v16 - 5) = v18;
      *((_OWORD *)v16 - 4) = v19;
      *((_QWORD *)v16 - 3) = 0;
      *(_OWORD *)(v16 - 40) = *(_OWORD *)&v14[v15 - 40];
      *((_QWORD *)v16 - 3) = *(_QWORD *)&v14[v15 - 24];
      *((_QWORD *)v17 - 5) = 0;
      *((_QWORD *)v17 - 4) = 0;
      *((_QWORD *)v17 - 3) = 0;
      *((_OWORD *)v16 - 1) = *(_OWORD *)&v14[v15 - 16];
      *((_QWORD *)v17 - 2) = 0;
      *((_QWORD *)v17 - 1) = 0;
      v15 -= 96;
    }
    while (&v14[v15] != v13);
    v14 = (char *)*a1;
    v20 = (uint64_t)a1[1];
    *a1 = &v10[v15];
    a1[1] = v12;
    a1[2] = v11;
    while ((char *)v20 != v14)
    {
      v20 -= 96;
      std::tuple<std::shared_ptr<Espresso::abstract_blob_container>,Espresso::layer_shape,std::shared_ptr<Espresso::abstract_blob_container_options>>::~tuple(v20);
    }
  }
  if (v14)
    operator delete(v14);
  return v12;
}

uint64_t std::tuple<std::shared_ptr<Espresso::abstract_blob_container>,Espresso::layer_shape,std::shared_ptr<Espresso::abstract_blob_container_options>>::~tuple(uint64_t a1)
{
  void *v2;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 80);
  v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(_QWORD *)(a1 + 64) = v2;
    operator delete(v2);
  }
  return std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1);
}

uint64_t Espresso::compute_network_shape<std::string,Espresso::layer_shape,std::map<std::string,Espresso::layer_shape>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Espresso *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  char *v9;
  char *v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  char *v21;
  char *v22;
  __int128 *v23;
  __int128 *v24;
  __int128 *v25;
  Espresso *v26;
  const char *v27;
  Espresso *v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t v32;
  BOOL v33;
  Espresso *v34;
  char *v35;
  char *v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *i;
  _QWORD *v42;
  uint64_t *v43;
  __int128 *v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  char *v48;
  __int128 v49;
  __int128 v50;
  NSObject *v51;
  char *v52;
  __int128 v53;
  void *v54;
  _QWORD *v55;
  char *v56;
  char *v57;
  __int128 v58;
  void *v59;
  _QWORD *v60;
  char *v61;
  __int128 v62;
  const void *v63;
  __int128 *v64;
  _QWORD *v65;
  __int128 v66;
  const void *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  __int128 *v71;
  char *v72;
  __int128 v73;
  __int128 v74;
  Espresso *v76;
  uint64_t v77;
  void *__p[2];
  uint64_t v80;
  __int128 *v81;
  __int128 *v82;
  unint64_t v83;
  int v84;
  _OWORD v85[2];
  int v86;
  _QWORD v87[4];
  int v88;
  uint64_t v89;
  __int128 *v90;
  _BYTE buf[32];
  uint64_t v92;
  void *v93;
  void *v94;
  uint64_t v95;
  __int128 v96;

  *((_QWORD *)&v96 + 1) = *MEMORY[0x1E0C80C00];
  v89 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = a1 + 8;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = a1 + 32;
  memset(v87, 0, sizeof(v87));
  v88 = 1065353216;
  memset(v85, 0, sizeof(v85));
  v86 = 1065353216;
  v81 = 0;
  if (*(_QWORD *)(a2 + 40) != *(_QWORD *)(a2 + 32))
  {
    v4 = (Espresso *)(a3 + 8);
    do
    {
      *(_QWORD *)buf = &v81;
      v5 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(a2 + 56, (unint64_t *)&v81, (uint64_t)&std::piecewise_construct, (uint64_t **)buf);
      v6 = (_QWORD *)v5[3];
      v7 = (_QWORD *)v5[4];
      v8 = v6;
      if (v6 != v7)
      {
        do
        {
          if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(_QWORD **)v4, v6))
          {
            v9 = (char *)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(a3, v6);
            *(_QWORD *)buf = v6;
            v10 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a1, v6, (__int128 **)buf);
            v11 = *(_OWORD *)(v9 + 56);
            v12 = *(_OWORD *)(v9 + 72);
            *((_QWORD *)v10 + 11) = *((_QWORD *)v9 + 11);
            *(_OWORD *)(v10 + 72) = v12;
            *(_OWORD *)(v10 + 56) = v11;
            if (v10 != v9)
              std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v10 + 96, *((char **)v9 + 12), *((_QWORD *)v9 + 13), (uint64_t)(*((_QWORD *)v9 + 13) - *((_QWORD *)v9 + 12)) >> 2);
          }
          if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v87, (uint64_t)v6))
          {
            std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)v85, (unint64_t *)&v81, &v81);
          }
          v6 += 3;
        }
        while (v6 != v7);
        v6 = (_QWORD *)v5[3];
        v8 = (_QWORD *)v5[4];
      }
      v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v89 + 32) + 16 * (_QWORD)v81) + 64);
      if (((*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v13 + 264))(v13, 0xAAAAAAAAAAAAAAABLL * (v8 - v6)) & 1) != 0|| std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::find<unsigned long>(v85, (unint64_t)v81))
      {
        *(_QWORD *)buf = &v81;
        v14 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v89 + 96, (unint64_t *)&v81, (uint64_t)&std::piecewise_construct, (uint64_t **)buf);
        v15 = v14[3];
        v16 = v14[4];
        while (v15 != v16)
        {
          std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v87, v15, v15);
          v15 += 24;
        }
      }
      v81 = (__int128 *)((char *)v81 + 1);
      a2 = v89;
      v18 = *(_QWORD *)(v89 + 32);
      v17 = *(_QWORD *)(v89 + 40);
    }
    while ((unint64_t)v81 < (v17 - v18) >> 4);
    v84 = 0;
    v77 = v18;
    if (v17 != v18)
    {
      v19 = 0;
      do
      {
        *(_QWORD *)buf = v84;
        v20 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(a2 + 56, v84, buf);
        v81 = 0;
        v82 = 0;
        v83 = 0;
        std::vector<Espresso::layer_shape>::reserve((uint64_t *)&v81, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20[4] - v20[3]) >> 3));
        v21 = (char *)v20[3];
        v22 = (char *)v20[4];
        while (v21 != v22)
        {
          __p[0] = v21;
          v23 = (__int128 *)(std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a1, v21, (__int128 **)__p)+ 56);
          v24 = v82;
          if ((unint64_t)v82 >= v83)
          {
            v25 = (__int128 *)std::vector<Espresso::layer_shape>::__push_back_slow_path<Espresso::layer_shape const&>((uint64_t *)&v81, v23);
          }
          else
          {
            std::vector<Espresso::layer_shape>::__construct_one_at_end[abi:ne180100]<Espresso::layer_shape const&>((uint64_t)&v81, v23);
            v25 = v24 + 4;
          }
          v82 = v25;
          v21 += 24;
        }
        if (!v84)
        {
          std::string::basic_string[abi:ne180100]<0>(buf, "");
          v39 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(_QWORD **)v4, buf);
          v40 = v39;
          if ((buf[23] & 0x80000000) != 0)
          {
            operator delete(*(void **)buf);
            if (v40)
            {
LABEL_73:
              std::string::basic_string[abi:ne180100]<0>(__p, "");
              v65 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(a3, __p);
              v66 = *(_OWORD *)(v65 + 9);
              *(_OWORD *)buf = *(_OWORD *)(v65 + 7);
              *(_OWORD *)&buf[16] = v66;
              v67 = (const void *)v65[12];
              v92 = v65[11];
              v93 = 0;
              v94 = 0;
              v95 = 0;
              std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v93, v67, v65[13], (uint64_t)(v65[13] - (_QWORD)v67) >> 2);
              std::vector<Espresso::layer_shape>::__assign_with_size[abi:ne180100]<Espresso::layer_shape const*,Espresso::layer_shape const*>((uint64_t *)&v81, (__int128 *)buf, &v96, 1uLL);
              if (v93)
              {
                v94 = v93;
                operator delete(v93);
              }
              if (SHIBYTE(v80) < 0)
                operator delete(__p[0]);
              v68 = (char *)v20[3];
              v69 = (char *)v20[4];
              if (v68 != v69)
              {
                v70 = 0;
                do
                {
                  v71 = v81;
                  __p[0] = v68;
                  v72 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a1, v68, (__int128 **)__p);
                  v73 = v71[v70];
                  v74 = v71[v70 + 1];
                  *((_QWORD *)v72 + 11) = *(_QWORD *)&v71[v70 + 2];
                  *(_OWORD *)(v72 + 72) = v74;
                  *(_OWORD *)(v72 + 56) = v73;
                  if (&v71[v70] != (__int128 *)(v72 + 56))
                    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v72 + 96, *((char **)&v71[v70 + 2] + 1), *(_QWORD *)&v71[v70 + 3], (uint64_t)(*(_QWORD *)&v71[v70 + 3] - *((_QWORD *)&v71[v70 + 2] + 1)) >> 2);
                  v68 += 24;
                  v70 += 4;
                }
                while (v68 != v69);
              }
            }
          }
          else if (v39)
          {
            goto LABEL_73;
          }
        }
        __p[0] = 0;
        __p[1] = 0;
        v80 = 0;
        std::vector<Espresso::layer_shape>::__init_with_size[abi:ne180100]<Espresso::layer_shape*,Espresso::layer_shape*>(__p, v81, v82, ((char *)v82 - (char *)v81) >> 6);
        *(_QWORD *)buf = v84;
        v26 = (Espresso *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v89 + 96, v84, buf);
        v28 = v26;
        v30 = (_QWORD *)*((_QWORD *)v26 + 3);
        v29 = (_QWORD *)*((_QWORD *)v26 + 4);
        if (v30 == v29)
        {
          v33 = 1;
        }
        else
        {
          v76 = v26;
          v31 = 0;
          v32 = 1;
          while (1)
          {
            v26 = (Espresso *)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(a3, v30);
            v33 = v4 != v26;
            if (v4 == v26)
              break;
            v34 = v26;
            v35 = (char *)__p[0];
            if (v32 - 1 >= ((char *)__p[1] - (char *)__p[0]) >> 6)
            {
              std::vector<Espresso::layer_shape>::resize((uint64_t *)__p, v32);
              v35 = (char *)__p[0];
            }
            v36 = &v35[v31];
            v37 = *(_OWORD *)((char *)v34 + 56);
            v38 = *(_OWORD *)((char *)v34 + 72);
            *((_QWORD *)v36 + 4) = *((_QWORD *)v34 + 11);
            *(_OWORD *)v36 = v37;
            *((_OWORD *)v36 + 1) = v38;
            if (v36 != (char *)v34 + 56)
              v26 = (Espresso *)std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v36 + 40, *((char **)v34 + 12), *((_QWORD *)v34 + 13), (uint64_t)(*((_QWORD *)v34 + 13) - *((_QWORD *)v34 + 12)) >> 2);
            v30 += 3;
            ++v32;
            v31 += 64;
            if (v30 == v29)
            {
              v33 = 1;
              break;
            }
          }
          v28 = v76;
        }
        if (!v33)
        {
          v26 = *(Espresso **)(*(_QWORD *)(v77 + 16 * v19) + 64);
          if (v26)
          {
            (*(void (**)(_BYTE *__return_ptr, Espresso *, __int128 **))(*(_QWORD *)v26 + 64))(buf, v26, &v81);
            std::vector<Espresso::layer_shape>::__vdeallocate((uint64_t *)__p);
            *(_OWORD *)__p = *(_OWORD *)buf;
            v80 = *(_QWORD *)&buf[16];
            v90 = (__int128 *)buf;
            memset(buf, 0, 24);
            std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v90);
          }
        }
        v42 = __p[0];
        for (i = __p[1]; v42 != i; v42 += 8)
        {
          v42[3] = 0;
          v42[4] = 0;
        }
        v44 = (__int128 *)*((_QWORD *)v28 + 3);
        v43 = (uint64_t *)*((_QWORD *)v28 + 4);
        if (v44 != (__int128 *)v43)
        {
          v45 = 0;
          v46 = 0;
          do
          {
            v47 = (char *)__p[0];
            if (v46 >= ((char *)__p[1] - (char *)__p[0]) >> 6)
            {
              Espresso::espresso_os_log_subsystem(v26, v27);
              v51 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v51, OS_LOG_TYPE_DEBUG))
              {
                v64 = v44;
                if (*((char *)v44 + 23) < 0)
                  v64 = *(__int128 **)v44;
                *(_DWORD *)buf = 136315650;
                *(_QWORD *)&buf[4] = v64;
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v84;
                *(_WORD *)&buf[18] = 1024;
                *(_DWORD *)&buf[20] = v46;
                _os_log_debug_impl(&dword_190DAF000, v51, OS_LOG_TYPE_DEBUG, "TODO: Blob shape not found:%s layer:%d j=%d", buf, 0x18u);
              }

              v90 = v44;
              v52 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a1, v44, &v90);
              *(_QWORD *)&v53 = 0x100000001;
              *((_QWORD *)&v53 + 1) = 0x100000001;
              *(_OWORD *)(v52 + 56) = v53;
              *((_QWORD *)v52 + 9) = 0xFFFFFFFF00000001;
              *((_QWORD *)v52 + 10) = 0;
              *((_QWORD *)v52 + 11) = 0;
              v55 = v52 + 96;
              v54 = (void *)*((_QWORD *)v52 + 12);
              if (v54)
              {
                *((_QWORD *)v52 + 13) = v54;
                operator delete(v54);
                *v55 = 0;
                v55[1] = 0;
                v55[2] = 0;
              }
              *v55 = 0;
              v55[1] = 0;
              v55[2] = 0;
            }
            else
            {
              v90 = v44;
              v48 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a1, v44, &v90);
              v49 = *(_OWORD *)&v47[v45];
              v50 = *(_OWORD *)&v47[v45 + 16];
              *((_QWORD *)v48 + 11) = *(_QWORD *)&v47[v45 + 32];
              *(_OWORD *)(v48 + 72) = v50;
              *(_OWORD *)(v48 + 56) = v49;
              if (&v47[v45] != v48 + 56)
                std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v48 + 96, *(char **)&v47[v45 + 40], *(_QWORD *)&v47[v45 + 48], (uint64_t)(*(_QWORD *)&v47[v45 + 48] - *(_QWORD *)&v47[v45 + 40]) >> 2);
            }
            if (std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::find<unsigned long>(v85, v19))
            {
              v90 = v44;
              v56 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a1, v44, &v90);
              if ((*((_DWORD *)v56 + 18) & 0x80000000) != 0
                || (*((_DWORD *)v56 + 17) & 0x80000000) != 0
                || (*((_DWORD *)v56 + 16) & 0x80000000) != 0
                || (*((_DWORD *)v56 + 15) & 0x80000000) != 0
                || (*((_DWORD *)v56 + 14) & 0x80000000) != 0)
              {
                v90 = v44;
                v57 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a1, v44, &v90);
                *(_QWORD *)&v58 = 0x100000001;
                *((_QWORD *)&v58 + 1) = 0x100000001;
                *(_OWORD *)(v57 + 56) = v58;
                *((_QWORD *)v57 + 9) = 0xFFFFFFFF00000001;
                *((_QWORD *)v57 + 10) = 0;
                *((_QWORD *)v57 + 11) = 0;
                v60 = v57 + 96;
                v59 = (void *)*((_QWORD *)v57 + 12);
                if (v59)
                {
                  *((_QWORD *)v57 + 13) = v59;
                  operator delete(v59);
                  *v60 = 0;
                  v60[1] = 0;
                  v60[2] = 0;
                }
                *v60 = 0;
                v60[1] = 0;
                v60[2] = 0;
              }
            }
            v90 = v44;
            v61 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a1, v44, &v90);
            v62 = *(_OWORD *)(v61 + 72);
            *(_OWORD *)buf = *(_OWORD *)(v61 + 56);
            *(_OWORD *)&buf[16] = v62;
            v63 = (const void *)*((_QWORD *)v61 + 12);
            v92 = *((_QWORD *)v61 + 11);
            v93 = 0;
            v94 = 0;
            v95 = 0;
            std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v93, v63, *((_QWORD *)v61 + 13), (uint64_t)(*((_QWORD *)v61 + 13) - (_QWORD)v63) >> 2);
            v26 = (Espresso *)v93;
            if (v93)
            {
              v94 = v93;
              operator delete(v93);
            }
            v44 = (__int128 *)((char *)v44 + 24);
            v45 += 64;
            ++v46;
          }
          while (v44 != (__int128 *)v43);
        }
        ++v84;
        *(_QWORD *)buf = __p;
        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
        *(_QWORD *)buf = &v81;
        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
        ++v19;
        a2 = v89;
        v77 = *(_QWORD *)(v89 + 32);
      }
      while (v19 < (*(_QWORD *)(v89 + 40) - v77) >> 4);
    }
  }
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)v85);
  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v87);
}

void sub_19147CB28()
{
  uint64_t v0;
  uint64_t v1;

  __cxa_end_catch();
  *(_QWORD *)(v0 - 192) = &v1;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)(v0 - 192));
  JUMPOUT(0x19147CBDCLL);
}

void sub_19147CB3C(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x19147CC0CLL);
}

void sub_19147CB4C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;
  void *v27;
  uint64_t v28;

  v27 = *(void **)(v26 - 152);
  if (v27)
  {
    *(_QWORD *)(v26 - 144) = v27;
    operator delete(v27);
  }
  if (a26 < 0)
    operator delete(__p);
  *(_QWORD *)(v26 - 192) = &v28;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)(v26 - 192));
  JUMPOUT(0x19147CBF4);
}

void sub_19147CBA0()
{
  JUMPOUT(0x19147CC0CLL);
}

void std::vector<std::tuple<std::shared_ptr<Espresso::abstract_blob_container>,Espresso::layer_shape,std::shared_ptr<Espresso::abstract_blob_container_options>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 96;
        std::tuple<std::shared_ptr<Espresso::abstract_blob_container>,Espresso::layer_shape,std::shared_ptr<Espresso::abstract_blob_container_options>>::~tuple(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__shared_ptr_emplace<Espresso::pass_params_graph_coloring>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBD8F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::pass_params_graph_coloring>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBD8F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::pass_unpack_layers>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBBB38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::pass_unpack_layers>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBBB38;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void Espresso::shape_network(Espresso **a1, Espresso::net *a2)
{
  Espresso::shape_network_recursive(*a1, a2, 0, 0);
}

void Espresso::shape_network_and_keep_unchanged_blobs(Espresso **a1, Espresso::net *a2)
{
  Espresso::shape_network_recursive(*a1, a2, 0, 1);
}

void Espresso::compute_network_shape_starting_from_data_shape(uint64_t *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  _OWORD *v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15[2];
  void *__p[2];
  char v17;
  char **v18;
  char *v19[2];
  void **v20;

  v19[0] = 0;
  v19[1] = 0;
  v18 = v19;
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  v20 = __p;
  v6 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v18, __p, (_OWORD **)&v20);
  v7 = *a2;
  v8 = a2[1];
  *((_QWORD *)v6 + 11) = *((_QWORD *)a2 + 4);
  *(_OWORD *)((char *)v6 + 72) = v8;
  *(_OWORD *)((char *)v6 + 56) = v7;
  if ((_OWORD *)((char *)v6 + 56) != a2)
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)v6 + 96, *((char **)a2 + 5), *((_QWORD *)a2 + 6), (uint64_t)(*((_QWORD *)a2 + 6) - *((_QWORD *)a2 + 5)) >> 2);
  if (v17 < 0)
    operator delete(__p[0]);
  v9 = *a1;
  v10 = (std::__shared_weak_count *)a1[1];
  v15[0] = v9;
  v15[1] = (uint64_t)v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  Espresso::compute_network_shape_starting_from_data_shapes(v15, (uint64_t)&v18, a3);
  if (v10)
  {
    v13 = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v18, v19[0]);
}

void sub_19147CE44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, char *a19)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&a18, a19);
  _Unwind_Resume(a1);
}

void Espresso::compute_network_shape_starting_from_data_shapes(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v6 = *a1;
  v7 = (std::__shared_weak_count *)a1[1];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  Espresso::compute_network_shape<std::string,Espresso::layer_shape,std::map<std::string,Espresso::layer_shape>>(a3, v6, a2);
  if (v7)
  {
    v10 = (unint64_t *)&v7->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_19147CF14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t Espresso::compute_network_shape_starting_from_data_shapes@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return Espresso::compute_network_shape<std::string,Espresso::layer_shape,std::map<std::string,Espresso::layer_shape>>(a3, a1, a2);
}

uint64_t std::vector<Espresso::layer_shape>::push_back[abi:ne180100](uint64_t *a1, __int128 *a2)
{
  unint64_t v3;
  uint64_t result;

  v3 = a1[1];
  if (v3 >= a1[2])
  {
    result = std::vector<Espresso::layer_shape>::__push_back_slow_path<Espresso::layer_shape const&>(a1, a2);
  }
  else
  {
    std::vector<Espresso::layer_shape>::__construct_one_at_end[abi:ne180100]<Espresso::layer_shape const&>((uint64_t)a1, a2);
    result = v3 + 64;
  }
  a1[1] = result;
  return result;
}

void sub_19147CFDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  Espresso::zephyr::function_t::~function_t((Espresso::zephyr::function_t *)&a9);
  _Unwind_Resume(a1);
}

void sub_19147D054(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  Espresso::zephyr::function_t::~function_t((Espresso::zephyr::function_t *)&a9);
  _Unwind_Resume(a1);
}

void Espresso::MPSGraphEngine::Kernels::slice_kernel::~slice_kernel(Espresso::MPSGraphEngine::Kernels::slice_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

uint64_t Espresso::MPSGraphEngine::Kernels::slice_kernel::is_valid_for_engine(_DWORD *a1, int64x2_t **a2, _QWORD *a3)
{
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  int v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  int64x2_t *v29;
  unint64_t *v30;
  unint64_t v31;
  int64x2_t **v32;
  int64x2_t *v33;
  unint64_t *v34;
  unint64_t v35;
  int64x2_t *v36[2];
  int64x2_t *v37[2];
  int64x2_t *v38;
  std::__shared_weak_count *v39;
  int64x2_t *v40;
  std::__shared_weak_count *v41;
  void *v42[2];
  char v43;
  std::string __p;
  _BYTE v45[24];
  _BYTE v46[32];
  std::__shared_weak_count *v47;
  int64x2_t *v48;
  std::__shared_weak_count *v49;
  void **v50;

  if (a3[1] - *a3 != 64 || a3[4] - a3[3] != 64)
  {
    v13 = (std::__shared_weak_count *)a2[1];
    v48 = *a2;
    v49 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
    }
    std::string::basic_string[abi:ne180100]<0>(v42, "[Dispatch::MPSGraph::slice_kernel] unsupported: invalid number of inputs or outputs. ");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)v42, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v48, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    v16 = v47;
    if (v47)
    {
      v17 = (unint64_t *)&v47->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v50 = (void **)v46;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v50);
    v50 = (void **)v45;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v50);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v43 < 0)
      operator delete(v42[0]);
    v10 = v49;
    if (!v49)
      return 0;
    v19 = (unint64_t *)&v49->__shared_owners_;
    do
      v12 = __ldaxr(v19);
    while (__stlxr(v12 - 1, v19));
LABEL_36:
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    return 0;
  }
  if (a1[73] == 1)
  {
    if (a1[74])
    {
      v4 = (std::__shared_weak_count *)a2[1];
      v40 = *a2;
      v41 = v4;
      if (v4)
      {
        v5 = (unint64_t *)&v4->__shared_owners_;
        do
          v6 = __ldxr(v5);
        while (__stxr(v6 + 1, v5));
      }
      std::string::basic_string[abi:ne180100]<0>(v42, "[Dispatch::MPSGraph::slice_kernel] unsupported: mode must be SLICE_STATIC ");
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)v42, (uint64_t)a3, 0);
      Espresso::emit_kernel_validation_warning(&v40, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
      v7 = v47;
      if (v47)
      {
        v8 = (unint64_t *)&v47->__shared_owners_;
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 - 1, v8));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      v50 = (void **)v46;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v50);
      v50 = (void **)v45;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v50);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (v43 < 0)
        operator delete(v42[0]);
      v10 = v41;
      if (!v41)
        return 0;
      v11 = (unint64_t *)&v41->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      goto LABEL_36;
    }
    v21 = a1[72];
    if (v21 < a1[71])
    {
      v22 = (std::__shared_weak_count *)a2[1];
      v38 = *a2;
      v39 = v22;
      if (v22)
      {
        v23 = (unint64_t *)&v22->__shared_owners_;
        do
          v24 = __ldxr(v23);
        while (__stxr(v24 + 1, v23));
      }
      std::string::basic_string[abi:ne180100]<0>(v42, "[Dispatch::MPSGraph::slice_kernel] unsupported: end < start");
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)v42, (uint64_t)a3, 0);
      Espresso::emit_kernel_validation_warning(&v38, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
      v25 = v47;
      if (v47)
      {
        v26 = (unint64_t *)&v47->__shared_owners_;
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
      v50 = (void **)v46;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v50);
      v50 = (void **)v45;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v50);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (v43 < 0)
        operator delete(v42[0]);
      v10 = v39;
      if (!v39)
        return 0;
      v28 = (unint64_t *)&v39->__shared_owners_;
      do
        v12 = __ldaxr(v28);
      while (__stlxr(v12 - 1, v28));
      goto LABEL_36;
    }
    if (v21 <= 0)
    {
      v29 = a2[1];
      v37[0] = *a2;
      v37[1] = v29;
      if (v29)
      {
        v30 = &v29->u64[1];
        do
          v31 = __ldxr(v30);
        while (__stxr(v31 + 1, v30));
      }
      std::string::basic_string[abi:ne180100]<0>(v42, "[Dispatch::MPSGraph::slice_kernel] unsupported: end < 1");
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)v42, (uint64_t)a3, 0);
      Espresso::emit_kernel_validation_warning(v37, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
      Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)&__p.__r_.__value_.__l.__data_);
      if (v43 < 0)
        operator delete(v42[0]);
      v32 = v37;
    }
    else
    {
      if ((a1[70] & 0xFFFFFFFE) == 2)
        return 1;
      v33 = a2[1];
      v36[0] = *a2;
      v36[1] = v33;
      if (v33)
      {
        v34 = &v33->u64[1];
        do
          v35 = __ldxr(v34);
        while (__stxr(v35 + 1, v34));
      }
      std::string::basic_string[abi:ne180100]<0>(v42, "[Dispatch::MPSGraph::slice_kernel] unsupported: axis != 2 && axis != 3");
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)v42, (uint64_t)a3, 0);
      Espresso::emit_kernel_validation_warning(v36, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
      Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)&__p.__r_.__value_.__l.__data_);
      if (v43 < 0)
        operator delete(v42[0]);
      v32 = v36;
    }
    std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v32);
  }
  return 0;
}

void sub_19147D4F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23)
{
  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t(&a23);
  if (a22 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void exitFramework(int a1)
{
  _DWORD *exception;

  exception = __cxa_allocate_exception(4uLL);
  *exception = a1;
  __cxa_throw(exception, MEMORY[0x1E0DE4EF0], 0);
}

uint64_t i2s(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v4[13];
  char v5;
  uint64_t v6;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v4);
  std::ostream::operator<<();
  std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v4, (uint64_t)a1);
  v4[0] = *MEMORY[0x1E0DE4F50];
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(uint64_t *)((char *)v4 + *(_QWORD *)(v4[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v4[2] = v2;
  v4[3] = MEMORY[0x1E0DE4FB8] + 16;
  if (v5 < 0)
    operator delete((void *)v4[11]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x19401CCD0](&v6);
}

void sub_19147D6EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  if (*(char *)(v2 + 23) < 0)
    operator delete(*(void **)v2);
  _Unwind_Resume(a1);
}

size_t writeByteArray(size_t __stream, int *a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  FILE *v7;
  char __ptr;
  uint64_t v9;
  uint64_t v10;

  if (a3 >= 1)
  {
    v9 = v3;
    v10 = v4;
    v5 = a3;
    v7 = (FILE *)__stream;
    do
    {
      __ptr = 85;
      __stream = fwrite(&__ptr, 1uLL, 1uLL, v7);
      ++*a2;
      --v5;
    }
    while (v5);
  }
  return __stream;
}

size_t writeArray<float,float>(FILE *__stream, _DWORD *a2, void *__ptr, int a4)
{
  size_t result;

  result = fwrite(__ptr, 4uLL, a4, __stream);
  if (result != a4)
    exitFramework(9);
  *a2 += 4 * a4;
  return result;
}

size_t writeArray<float,short>(FILE *__stream, _DWORD *a2, float *a3, _WORD *__ptr, int a5)
{
  uint64_t v7;
  _WORD *v8;
  float v9;
  int v10;
  size_t result;

  if (a5 >= 1)
  {
    v7 = a5;
    v8 = __ptr;
    do
    {
      v9 = *a3;
      if (*a3 <= -5.0)
      {
        LOWORD(v10) = -32767;
      }
      else if (v9 < 5.0 && (v10 = llroundf(v9 * 6553.6), v10 < 0x8000))
      {
        if (v10 <= -32767)
          LOWORD(v10) = -32767;
      }
      else
      {
        LOWORD(v10) = 0x7FFF;
      }
      *v8++ = v10;
      ++a3;
      --v7;
    }
    while (v7);
  }
  result = fwrite(__ptr, 2uLL, a5, __stream);
  if (result != a5)
    exitFramework(9);
  *a2 += 2 * a5;
  return result;
}

size_t writeArray<float,signed char>(FILE *__stream, _DWORD *a2, float *a3, _BYTE *__ptr, int a5)
{
  uint64_t v7;
  _BYTE *v8;
  float v9;
  int v10;
  size_t result;

  if (a5 >= 1)
  {
    v7 = a5;
    v8 = __ptr;
    do
    {
      v9 = *a3;
      if (*a3 <= -5.0)
      {
        LOBYTE(v10) = -127;
      }
      else if (v9 < 5.0 && (v10 = llroundf(v9 * 25.6), v10 <= 127))
      {
        if (v10 <= -127)
          LOBYTE(v10) = -127;
      }
      else
      {
        LOBYTE(v10) = 127;
      }
      *v8++ = v10;
      ++a3;
      --v7;
    }
    while (v7);
  }
  result = fwrite(__ptr, 1uLL, a5, __stream);
  if (result != a5)
    exitFramework(9);
  *a2 += a5;
  return result;
}

size_t writeArray<signed char,float>(FILE *__stream, _DWORD *a2, char *a3, float *__ptr, int a5)
{
  uint64_t v7;
  float *v8;
  int v9;
  int v10;
  float v11;
  size_t result;

  if (a5 >= 1)
  {
    v7 = a5;
    v8 = __ptr;
    do
    {
      v10 = *a3++;
      v9 = v10;
      v11 = -5.0;
      if (v10 >= -126)
      {
        v11 = 5.0;
        if (v9 != 127)
          v11 = (float)v9 * 0.039062;
      }
      *v8++ = v11;
      --v7;
    }
    while (v7);
  }
  result = fwrite(__ptr, 4uLL, a5, __stream);
  if (result != a5)
    exitFramework(9);
  *a2 += 4 * a5;
  return result;
}

size_t writeArray<short,float>(FILE *__stream, _DWORD *a2, __int16 *a3, float *__ptr, int a5)
{
  float *v7;
  uint64_t v8;
  int v9;
  int v10;
  float v11;
  size_t result;

  if (a5 >= 1)
  {
    v7 = __ptr;
    v8 = a5;
    do
    {
      v10 = *a3++;
      v9 = v10;
      v11 = -5.0;
      if (v10 >= -32766)
      {
        v11 = 5.0;
        if (v9 != 0x7FFF)
          v11 = (float)v9 * 0.00015259;
      }
      *v7++ = v11;
      --v8;
    }
    while (v8);
  }
  result = fwrite(__ptr, 4uLL, a5, __stream);
  if (result != a5)
    exitFramework(9);
  *a2 += 4 * a5;
  return result;
}

void Espresso::abstract_batch::log_profiler_event(Espresso::abstract_batch *this)
{
  BOOL v2;

  if (Espresso::abstract_batch::log_profiler_event(int,unsigned long long,unsigned long long,unsigned long long,unsigned long long)::onceToken != -1)
    dispatch_once(&Espresso::abstract_batch::log_profiler_event(int,unsigned long long,unsigned long long,unsigned long long,unsigned long long)::onceToken, &__block_literal_global_4566);
  if (*((_QWORD *)this + 13))
    v2 = 0;
  else
    v2 = Espresso::abstract_batch::log_profiler_event(int,unsigned long long,unsigned long long,unsigned long long,unsigned long long)::profiler_signposts_enabled == 0;
  if (!v2)
    kdebug_trace();
}

void ___ZN8Espresso14abstract_batch18log_profiler_eventEiyyyy_block_invoke()
{
  void *v0;
  void *v1;
  id v2;

  objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "persistentDomainForName:", *MEMORY[0x1E0CB2B58]);
  v2 = (id)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v2, "objectForKeyedSubscript:", CFSTR("com.apple.espresso.profiler.signposts"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  Espresso::abstract_batch::log_profiler_event(int,unsigned long long,unsigned long long,unsigned long long,unsigned long long)::profiler_signposts_enabled = objc_msgSend(v1, "BOOLValue");

}

void sub_19147DBC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void Espresso::abstract_context::batch_callback(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  NSObject *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD block[4];
  _BYTE v9[24];
  _BYTE *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3321888768;
  block[2] = ___ZN8Espresso16abstract_context14batch_callbackERKNSt3__110shared_ptrINS_14abstract_batchEEEPU28objcproto17OS_dispatch_queue8NSObjectNS1_8functionIFvRKNS_17execution_error_tEEEE_block_invoke;
  block[3] = &__block_descriptor_64_ea8_32c58_ZTSNSt3__18functionIFvRKN8Espresso17execution_error_tEEEE_e5_v8__0l;
  std::__function::__value_func<void ()(Espresso::execution_error_t const&)>::__value_func[abi:ne180100]((uint64_t)v9, a4);
  dispatch_async(v5, block);
  v6 = v10;
  if (v10 == v9)
  {
    v7 = 4;
    v6 = v9;
    goto LABEL_5;
  }
  if (v10)
  {
    v7 = 5;
LABEL_5:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }

}

void sub_19147DCC8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t Espresso::abstract_context::enable_training(Espresso::abstract_context *this)
{
  uint64_t result;

  result = (***((uint64_t (****)(_QWORD))this + 1))(*((_QWORD *)this + 1));
  if ((_DWORD)result == 80000)
    *((_BYTE *)this + 44) = 0;
  *((_BYTE *)this + 53) = 1;
  *((_BYTE *)this + 114) = 1;
  return result;
}

uint64_t Espresso::abstract_context::set_platform_specific_option(Espresso::abstract_context *this, const char *a2)
{
  return 0;
}

uint64_t Espresso::abstract_context::is_valid_for_submit()
{
  return 0;
}

void ___ZN8Espresso16abstract_context14batch_callbackERKNSt3__110shared_ptrINS_14abstract_batchEEEPU28objcproto17OS_dispatch_queue8NSObjectNS1_8functionIFvRKNS_17execution_error_tEEEE_block_invoke(uint64_t a1)
{
  uint64_t v1;
  void *__p[2];
  __int128 v3;

  *(_OWORD *)__p = 0u;
  v3 = 0u;
  v1 = *(_QWORD *)(a1 + 56);
  if (!v1)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v1 + 48))(v1, __p);
  if (SHIBYTE(v3) < 0)
    operator delete(__p[1]);
}

void sub_19147DD9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__value_func<void ()(Espresso::execution_error_t const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1);
    }
    else
    {
      *(_QWORD *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t __copy_helper_block_ea8_32c58_ZTSNSt3__18functionIFvRKN8Espresso17execution_error_tEEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(Espresso::execution_error_t const&)>::__value_func[abi:ne180100](a1 + 32, a2 + 32);
}

_QWORD *__destroy_helper_block_ea8_32c58_ZTSNSt3__18functionIFvRKN8Espresso17execution_error_tEEEE(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 56);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

uint64_t Espresso::base_kernel::input_blob_type(Espresso::base_kernel *this)
{
  return 0;
}

void Espresso::base_kernel::share_weights(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t **v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t **v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t **v12;
  uint64_t **v13;
  _QWORD *v14;
  _QWORD *v15;
  BOOL v16;
  uint64_t *v17;
  char *v18;
  uint64_t *v19;
  uint64_t **v20;
  uint64_t **v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t *v26;

  v2 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 != a1)
  {
    v4 = (uint64_t **)(a1 + 19);
    v5 = (_QWORD *)v2[19];
    v6 = v2 + 20;
    if (a1[21])
    {
      v8 = (uint64_t **)(a1 + 20);
      v7 = a1[20];
      v9 = a1[19];
      a1[19] = a1 + 20;
      *(_QWORD *)(v7 + 16) = 0;
      a1[20] = 0;
      a1[21] = 0;
      if (*(_QWORD *)(v9 + 8))
        v10 = *(uint64_t **)(v9 + 8);
      else
        v10 = (uint64_t *)v9;
      v24 = a1 + 19;
      v25 = v10;
      v26 = v10;
      if (!v10
        || (v25 = std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::_DetachedTreeCache::__detach_next((uint64_t)v10),
            v5 == v6))
      {
        v15 = v5;
      }
      else
      {
        do
        {
          std::string::operator=((std::string *)(v10 + 4), (const std::string *)(v5 + 4));
          std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v10 + 7, v5[7], v5[8]);
          v11 = *v8;
          v12 = (uint64_t **)(a1 + 20);
          v13 = (uint64_t **)(a1 + 20);
          if (*v8)
          {
            do
            {
              while (1)
              {
                v12 = (uint64_t **)v11;
                if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v26 + 4, v11 + 4))
                  break;
                v11 = *v12;
                v13 = v12;
                if (!*v12)
                  goto LABEL_14;
              }
              v11 = v12[1];
            }
            while (v11);
            v13 = v12 + 1;
          }
LABEL_14:
          std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at(v4, (uint64_t)v12, v13, v26);
          v10 = v25;
          v26 = v25;
          if (v25)
            v25 = std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::_DetachedTreeCache::__detach_next((uint64_t)v25);
          v14 = (_QWORD *)v5[1];
          if (v14)
          {
            do
            {
              v15 = v14;
              v14 = (_QWORD *)*v14;
            }
            while (v14);
          }
          else
          {
            do
            {
              v15 = (_QWORD *)v5[2];
              v16 = *v15 == (_QWORD)v5;
              v5 = v15;
            }
            while (!v16);
          }
          if (!v10)
            break;
          v5 = v15;
        }
        while (v15 != v6);
      }
      std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::blob<unsigned char,1>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::blob<unsigned char,1>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::blob<unsigned char,1>>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v24);
      v5 = v15;
    }
    if (v5 != v6)
    {
      v17 = a1 + 20;
      do
      {
        v18 = (char *)operator new(0x48uLL);
        v24 = v18;
        v25 = v17;
        LOBYTE(v26) = 0;
        std::pair<std::string const,std::shared_ptr<Espresso::blob<float,4>>>::pair[abi:ne180100]((std::string *)(v18 + 32), (__int128 *)v5 + 2);
        LOBYTE(v26) = 1;
        v19 = (uint64_t *)*v17;
        v20 = (uint64_t **)v17;
        v21 = (uint64_t **)v17;
        if (*v17)
        {
          do
          {
            while (1)
            {
              v20 = (uint64_t **)v19;
              if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)v18 + 4, v19 + 4))break;
              v19 = *v20;
              v21 = v20;
              if (!*v20)
                goto LABEL_34;
            }
            v19 = v20[1];
          }
          while (v19);
          v21 = v20 + 1;
        }
LABEL_34:
        std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at(v4, (uint64_t)v20, v21, (uint64_t *)v18);
        v24 = 0;
        std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v24);
        v22 = (_QWORD *)v5[1];
        if (v22)
        {
          do
          {
            v23 = v22;
            v22 = (_QWORD *)*v22;
          }
          while (v22);
        }
        else
        {
          do
          {
            v23 = (_QWORD *)v5[2];
            v16 = *v23 == (_QWORD)v5;
            v5 = v23;
          }
          while (!v16);
        }
        v5 = v23;
      }
      while (v23 != v6);
    }
  }
}

void sub_19147E128(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::blob<unsigned char,1>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::blob<unsigned char,1>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::blob<unsigned char,1>>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void Espresso::base_kernel::clear_weights(Espresso::base_kernel *this)
{
  _QWORD *v1;

  v1 = (_QWORD *)((char *)this + 160);
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*((_QWORD **)this + 20));
  *(v1 - 1) = v1;
  *v1 = 0;
  v1[1] = 0;
}

void Espresso::base_kernel::__set_weight_raw_blob_for_serialization(uint64_t **a1, uint64_t a2, __int128 *a3, const void *a4, size_t a5)
{
  uint64_t **v8;
  uint64_t v9;
  uint64_t *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  __int128 *v16;

  v8 = a1 + 19;
  ((void (*)(uint64_t **))(*a1)[20])(a1);
  std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v14, a5, 1, 1, 1);
  v9 = v14;
  memcpy(*(void **)(v14 + 16), a4, a5);
  v16 = a3;
  v10 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::blob<unsigned char,1>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::blob<unsigned char,1>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::blob<unsigned char,1>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8, a3, &v16);
  v11 = v15;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v10 + 7, v9, (uint64_t)v15);
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_19147E260(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void Espresso::base_kernel::backpropable(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  unint64_t v3;
  unsigned __int8 v4;
  void *__p[3];

  v3 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 3);
  v4 = 1;
  std::vector<BOOL>::vector(__p, v3, &v4);
  std::vector<BOOL>::vector(a2, (uint64_t)__p);
  if (__p[0])
    operator delete(__p[0]);
}

void sub_19147E2DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Espresso::base_kernel::build_grads_for_inputs()
{
  Espresso::throw_exception_selector<Espresso::not_implemented_error>("build_grads_for_inputs not implemented");
}

void Espresso::base_kernel::get_runtime_type_config(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  int v8;
  _BOOL4 v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void **v14;
  void **v15;
  void **v16;
  unint64_t v17;
  void **v18;
  uint64_t v19;
  void **v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  void **v26;
  void **v27;
  void **v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  void **v32;
  void **v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void ***v38;
  std::__shared_weak_count *v39;

  v8 = (***(uint64_t (****)(_QWORD))(a1[1] + 8))(*(_QWORD *)(a1[1] + 8));
  v9 = v8 != 101;
  if (v8 == 100)
    v9 = 0;
  if (v8)
    v10 = v9;
  else
    v10 = 0;
  v35 = 0;
  v36 = 0;
  v37 = 0;
  std::vector<Espresso::blob_numerical_properties>::__init_with_size[abi:ne180100]<Espresso::blob_numerical_properties*,Espresso::blob_numerical_properties*>((uint64_t)&v35, *a2, a2[1], 0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 3));
  v32 = 0;
  v33 = 0;
  v34 = 0;
  std::vector<Espresso::blob_numerical_properties>::__init_with_size[abi:ne180100]<Espresso::blob_numerical_properties*,Espresso::blob_numerical_properties*>((uint64_t)&v32, *a3, a3[1], 0xCCCCCCCCCCCCCCCDLL * ((a3[1] - *a3) >> 3));
  v11 = v35;
  v12 = v36;
  if (v35 != v36)
  {
    v13 = v35;
    do
    {
      *(_QWORD *)v13 = 1065353216;
      *(_DWORD *)(v13 + 8) = v10;
      v13 += 40;
    }
    while (v13 != v12);
  }
  v14 = v32;
  v15 = v33;
  if (v32 != v33)
  {
    v16 = v32;
    do
    {
      *v16 = (void *)1065353216;
      *((_DWORD *)v16 + 2) = v10;
      v16 += 5;
    }
    while (v16 != v15);
  }
  if (v11 == v12)
  {
    v24 = v11;
  }
  else
  {
    v17 = 0;
    do
    {
      (*(void (**)(void ****__return_ptr, _QWORD *, _QWORD, unint64_t))(*a1 + 24))(&v38, a1, 0, v17);
      v18 = (void **)v38;
      if (v38)
      {
        if (*((_BYTE *)v38 + 8))
          *(_DWORD *)(v35 + 40 * v17 + 8) = *((_DWORD *)v38 + 3);
        if (*((_BYTE *)v18 + 16))
        {
          v19 = v35;
          v20 = (void **)(v35 + 40 * v17);
          *(_OWORD *)v20 = *(_OWORD *)(v18 + 3);
          if (v20 != v18 + 3)
            std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)(v19 + 40 * v17 + 16), (char *)v18[5], (uint64_t)v18[6], ((_BYTE *)v18[6] - (_BYTE *)v18[5]) >> 2);
        }
      }
      v21 = v39;
      if (v39)
      {
        p_shared_owners = (unint64_t *)&v39->__shared_owners_;
        do
          v23 = __ldaxr(p_shared_owners);
        while (__stlxr(v23 - 1, p_shared_owners));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      ++v17;
      v24 = v35;
      v11 = v36;
    }
    while (0xCCCCCCCCCCCCCCCDLL * ((v36 - v35) >> 3) > v17);
    v14 = v32;
    v15 = v33;
  }
  if (v15 != v14)
  {
    v25 = 0;
    do
    {
      (*(void (**)(void ****__return_ptr, _QWORD *, uint64_t, unint64_t))(*a1 + 24))(&v38, a1, 1, v25);
      v26 = (void **)v38;
      if (v38)
      {
        if (*((_BYTE *)v38 + 8))
          LODWORD(v32[5 * v25 + 1]) = *((_DWORD *)v38 + 3);
        if (*((_BYTE *)v26 + 16))
        {
          v27 = v32;
          v28 = &v32[5 * v25];
          *(_OWORD *)v28 = *(_OWORD *)(v26 + 3);
          if (v28 != v26 + 3)
            std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)&v27[5 * v25 + 2], (char *)v26[5], (uint64_t)v26[6], ((_BYTE *)v26[6] - (_BYTE *)v26[5]) >> 2);
        }
      }
      v29 = v39;
      if (v39)
      {
        v30 = (unint64_t *)&v39->__shared_owners_;
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 - 1, v30));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
      ++v25;
    }
    while (0xCCCCCCCCCCCCCCCDLL * (v33 - v32) > v25);
    v24 = v35;
    v11 = v36;
  }
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  std::vector<Espresso::blob_numerical_properties>::__init_with_size[abi:ne180100]<Espresso::blob_numerical_properties*,Espresso::blob_numerical_properties*>((uint64_t)a4, v24, v11, 0xCCCCCCCCCCCCCCCDLL * ((v11 - v24) >> 3));
  a4[3] = 0;
  a4[4] = 0;
  a4[5] = 0;
  std::vector<Espresso::blob_numerical_properties>::__init_with_size[abi:ne180100]<Espresso::blob_numerical_properties*,Espresso::blob_numerical_properties*>((uint64_t)(a4 + 3), (uint64_t)v32, (uint64_t)v33, 0xCCCCCCCCCCCCCCCDLL * (v33 - v32));
  v38 = &v32;
  std::vector<Espresso::blob_numerical_properties>::__destroy_vector::operator()[abi:ne180100]((void ***)&v38);
  v32 = (void **)&v35;
  std::vector<Espresso::blob_numerical_properties>::__destroy_vector::operator()[abi:ne180100](&v32);
}

void sub_19147E648(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void **v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va1;
  uint64_t v10;
  uint64_t v11;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, void **);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v8 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  std::vector<Espresso::blob_numerical_properties>::__destroy_vector::operator()[abi:ne180100]((void ***)va2);
  *(_QWORD *)(v2 - 56) = va;
  std::vector<Espresso::blob_numerical_properties>::__destroy_vector::operator()[abi:ne180100]((void ***)(v2 - 56));
  va_copy((va_list)v4, va1);
  std::vector<Espresso::blob_numerical_properties>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<BOOL>::vector(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  int v13;
  int v14;
  _QWORD *v15;
  int v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = *(_QWORD *)(a2 + 8);
  if (!v4)
    return a1;
  std::vector<BOOL>::__vallocate[abi:ne180100](a1, v4);
  v5 = *(_QWORD **)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = a1[1];
  v8 = v7 + v6;
  a1[1] = v7 + v6;
  if (v7)
  {
    v9 = v8 - 1;
    if (((v8 - 1) ^ (v7 - 1)) < 0x40)
      goto LABEL_10;
  }
  else
  {
    v9 = v8 - 1;
  }
  v10 = v9 >> 6;
  if (v8 >= 0x41)
    v11 = v10;
  else
    v11 = 0;
  *(_QWORD *)(*a1 + 8 * v11) = 0;
LABEL_10:
  v12 = v6 & 0x3F;
  if (v6 > 0x3F || (v6 & 0x3F) != 0)
  {
    v13 = 0;
    v14 = 0;
    v15 = &v5[v6 >> 6];
    v16 = v7 & 0x3F;
    v17 = (uint64_t *)(*a1 + 8 * (v7 >> 6));
    do
    {
      v18 = 1 << v16;
      if (((*v5 >> v14) & 1) != 0)
        v19 = *v17 | v18;
      else
        v19 = *v17 & ~v18;
      *v17 = v19;
      ++v14;
      v5 += v13 == 63;
      if (v13 == 63)
        v14 = 0;
      v17 += v16 == 63;
      if (v16 == 63)
        v16 = 0;
      else
        ++v16;
      v13 = v14;
    }
    while (v5 != v15 || v12 != v14);
  }
  return a1;
}

uint64_t std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::blob<unsigned char,1>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::blob<unsigned char,1>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::blob<unsigned char,1>>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*(_QWORD **)(a1 + 16));
  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v3 = (_QWORD *)v2[2];
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = (_QWORD *)v3[2];
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(v2);
  }
  return a1;
}

void Espresso::wrong_context_type::~wrong_context_type(std::runtime_error *this)
{
  std::runtime_error::~runtime_error(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::wrong_batch_type::~wrong_batch_type(std::runtime_error *this)
{
  std::runtime_error::~runtime_error(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::abstract_blob_container::__copy_from_CVPixelBuffer(int *a1, uint64_t a2, int a3, CVPixelBufferRef pixelBuffer, __int128 *a5, uint64_t a6)
{
  OSType PixelFormatType;
  uint64_t v11;
  __IOSurface *IOSurface;
  __IOSurface *v13;
  void *BaseAddress;
  void *v15;
  size_t Height;
  size_t Width;
  size_t BytesPerRow;
  size_t v19;
  _QWORD *v20;
  uint64_t v21;
  std::runtime_error *exception;
  void *__p;
  void *v24;
  _QWORD *v25;
  _QWORD v26[3];

  if (a6)
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Batch index > 0 not supported");
  if (!pixelBuffer)
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Invalid source CVPixelBufferRef.");
  PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBuffer);
  if (PixelFormatType == 1111970369)
  {
    v11 = 4;
  }
  else
  {
    if (PixelFormatType != 1278226488)
      Espresso::throw_exception_selector<Espresso::invalid_argument_error>("CVPixelBuffer format must be Planar8 or 32BGRA");
    if (a1[4] != 1)
      Espresso::throw_exception_selector<Espresso::invalid_argument_error>("kCVPixelFormatType_OneComponent8 supported only for single channel inputs");
    v11 = 1;
  }
  v26[2] = pixelBuffer;
  IOSurface = CVPixelBufferGetIOSurface(pixelBuffer);
  v26[1] = IOSurface;
  if (IOSurface)
  {
    v13 = IOSurface;
    IOSurfaceLock(IOSurface, 5u, 0);
    BaseAddress = IOSurfaceGetBaseAddress(v13);
  }
  else
  {
    CVPixelBufferLockBaseAddress(pixelBuffer, 1uLL);
    BaseAddress = CVPixelBufferGetBaseAddress(pixelBuffer);
  }
  v15 = BaseAddress;
  v26[0] = BaseAddress;
  Height = CVPixelBufferGetHeight(pixelBuffer);
  Width = CVPixelBufferGetWidth(pixelBuffer);
  BytesPerRow = CVPixelBufferGetBytesPerRow(pixelBuffer);
  if (!v15)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
    Espresso::memory_error::memory_error(exception);
  }
  v19 = BytesPerRow;
  v20 = operator new(0x20uLL);
  v24 = v20 + 4;
  v25 = v20 + 4;
  *v20 = v15;
  v20[1] = Height;
  v20[2] = Width;
  v20[3] = v19;
  __p = v20;
  Espresso::fill_blob_with_images_batch_safe_v2(a2, a1, (const char ***)&__p, v11, v21, a5);
  if (__p)
  {
    v24 = __p;
    operator delete(__p);
  }
  Espresso::scoped_cvpixelbuffer_iosurface_lock::~scoped_cvpixelbuffer_iosurface_lock((Espresso::scoped_cvpixelbuffer_iosurface_lock *)v26);
}

void sub_19147EA10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12)
{
  void *v12;

  __cxa_free_exception(v12);
  Espresso::scoped_cvpixelbuffer_iosurface_lock::~scoped_cvpixelbuffer_iosurface_lock((Espresso::scoped_cvpixelbuffer_iosurface_lock *)&a12);
  _Unwind_Resume(a1);
}

void Espresso::abstract_blob_container::__copy_from_MTLTexture()
{
  Espresso::throw_exception_selector<Espresso::not_implemented_error>("__copy_from_MTLTexture not supported with engine.");
}

void Espresso::abstract_blob_container::__copy_to_CVPixelBuffer()
{
  Espresso::throw_exception_selector<Espresso::unsupported_configuration_error>("Copy not implemented for CVPixelBuffer on this engine.");
}

uint64_t Espresso::abstract_blob_container::use_external_cvpixelbuffers()
{
  return 0;
}

void *Espresso::abstract_blob_container::create_uninitialized_host_blob@<X0>(Espresso::abstract_blob_container *this@<X0>, _QWORD *a2@<X8>)
{
  return std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,Espresso::blob<float,4>::UnitializedBlobType,void>(a2, *((_DWORD *)this + 2), *((_DWORD *)this + 3), *((_DWORD *)this + 4), *((_DWORD *)this + 6) * *((_DWORD *)this + 5));
}

void Espresso::scoped_cvpixelbuffer_iosurface_lock::~scoped_cvpixelbuffer_iosurface_lock(Espresso::scoped_cvpixelbuffer_iosurface_lock *this)
{
  __IOSurface *v2;

  v2 = (__IOSurface *)*((_QWORD *)this + 1);
  if (v2)
    IOSurfaceUnlock(v2, 5u, 0);
  else
    CVPixelBufferUnlockBaseAddress(*((CVPixelBufferRef *)this + 2), 1uLL);
}

void Espresso::switch_engine_batch::~switch_engine_batch(Espresso::switch_engine_batch *this)
{
  *(_QWORD *)this = &off_1E2D85988;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 120);
  Espresso::abstract_batch::~abstract_batch(this);
}

{
  *(_QWORD *)this = &off_1E2D85988;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 120);
  Espresso::abstract_batch::~abstract_batch(this);
  JUMPOUT(0x19401CD90);
}

uint64_t Espresso::switch_engine_batch::sync_wait(Espresso::switch_engine_batch *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 15);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  return result;
}

uint64_t Espresso::switch_engine_batch::sync_wait_for_scheduled(Espresso::switch_engine_batch *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 15);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
  return result;
}

uint64_t Espresso::switch_engine_batch::sync_point(Espresso::switch_engine_batch *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 15);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  return result;
}

uint64_t Espresso::switch_engine_batch::log_profiler_event(Espresso::switch_engine_batch *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 15);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 64))(result);
  return result;
}

void Espresso::base_kernel::get_parameter_blob<unsigned short,1>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, _QWORD *a3@<X8>)
{
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  const void *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  const void *v15;
  void *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;

  v4 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>((_QWORD *)(a1 + 64), a2);
  if (!v4)
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Unsupported blob_key for kernel parameter.");
  v5 = v4;
  v6 = (const void *)*((_QWORD *)v4 + 5);
  v7 = (std::__shared_weak_count *)*((_QWORD *)v5 + 6);
  v24 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  if (!v6
  {
    v7 = 0;
LABEL_19:
    *a3 = 0;
    a3[1] = 0;
    goto LABEL_20;
  }
  v11 = v10;
  if (v7)
  {
    v12 = (unint64_t *)&v7->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  if ((*(unsigned int (**)(_QWORD *))(*v10 + 32))(v10) != 1)
    goto LABEL_19;
  v14 = v11[22];
  if (!v14)
    goto LABEL_19;
  v15 = *(const void **)(v14 + 56);
  if (!v15)
    goto LABEL_19;
  if (!v16)
    goto LABEL_19;
  v17 = *(_QWORD *)(v14 + 64);
  *a3 = v16;
  a3[1] = v17;
  if (v17)
  {
    v18 = (unint64_t *)(v17 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
LABEL_20:
  if (v7)
  {
    v20 = (unint64_t *)&v7->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v24)
  {
    v22 = (unint64_t *)&v24->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
}

void sub_19147ED50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void Espresso::base_kernel::get_parameter_blob<unsigned short,5>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, _QWORD *a3@<X8>)
{
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  const void *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  const void *v15;
  void *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;

  v4 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>((_QWORD *)(a1 + 64), a2);
  if (!v4)
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Unsupported blob_key for kernel parameter.");
  v5 = v4;
  v6 = (const void *)*((_QWORD *)v4 + 5);
  v7 = (std::__shared_weak_count *)*((_QWORD *)v5 + 6);
  v24 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  if (!v6
  {
    v7 = 0;
LABEL_19:
    *a3 = 0;
    a3[1] = 0;
    goto LABEL_20;
  }
  v11 = v10;
  if (v7)
  {
    v12 = (unint64_t *)&v7->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  if ((*(unsigned int (**)(_QWORD *))(*v10 + 32))(v10) != 1)
    goto LABEL_19;
  v14 = v11[22];
  if (!v14)
    goto LABEL_19;
  v15 = *(const void **)(v14 + 56);
  if (!v15)
    goto LABEL_19;
  if (!v16)
    goto LABEL_19;
  v17 = *(_QWORD *)(v14 + 64);
  *a3 = v16;
  a3[1] = v17;
  if (v17)
  {
    v18 = (unint64_t *)(v17 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
LABEL_20:
  if (v7)
  {
    v20 = (unint64_t *)&v7->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v24)
  {
    v22 = (unint64_t *)&v24->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
}

void sub_19147EF08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t Espresso::base_kernel::set_parameter_blob<unsigned short,1>(uint64_t a1, uint64_t *a2, __int128 *a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  void *v16;
  void *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t result;
  void *__p[2];
  char v33;
  std::__shared_weak_count *v34;
  uint64_t v35;

  v8 = operator new();
  v9 = v8;
  *(_QWORD *)v8 = off_1E2D8F108;
  *(_DWORD *)(v8 + 28) = -1;
  *(_OWORD *)(v8 + 32) = 0u;
  *(_OWORD *)(v8 + 48) = 0u;
  v11 = *a2;
  v10 = a2[1];
  *(_QWORD *)(v8 + 64) = 0;
  *(_QWORD *)(v8 + 72) = v11;
  *(_QWORD *)(v8 + 80) = v10;
  if (v10)
  {
    v12 = (unint64_t *)(v10 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  *(_QWORD *)(v8 + 88) = 0;
  *(_QWORD *)(v8 + 96) = 0;
  *(_DWORD *)(v8 + 104) = 0;
  *(_DWORD *)(v8 + 112) = 1065353216;
  *(_QWORD *)(v8 + 116) = 0xFFFFFFFF00000000;
  *(_DWORD *)(v8 + 124) = 1;
  *(_QWORD *)(v8 + 8) = 0;
  *(_QWORD *)(v8 + 16) = 0;
  *(_DWORD *)(v8 + 24) = 0;
  *(_OWORD *)(v8 + 128) = 0uLL;
  *(_OWORD *)(v8 + 144) = 0uLL;
  *(_QWORD *)v8 = &off_1E2DA6B80;
  *(_OWORD *)(v8 + 160) = 0uLL;
  *(_OWORD *)(v8 + 176) = 0uLL;
  *(_QWORD *)(v8 + 248) = 0;
  *(_OWORD *)(v8 + 192) = 0uLL;
  *(_OWORD *)(v8 + 208) = 0uLL;
  *(_OWORD *)(v8 + 224) = 0uLL;
  *(_DWORD *)(v8 + 240) = 0;
  v14 = *a4;
  v15 = (char *)operator new(0x60uLL);
  v16 = v15;
  *((_QWORD *)v15 + 1) = 0;
  *((_QWORD *)v15 + 2) = 0;
  *(_QWORD *)v15 = &off_1E2DBF060;
  v17 = v15 + 24;
  v18 = (std::__shared_weak_count *)a4[1];
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(p_shared_owners);
    while (__stxr(v20 + 1, p_shared_owners));
    v21 = *(_DWORD *)(v14 + 8);
    *((_QWORD *)v15 + 3) = &off_1E2DA1410;
    *((_QWORD *)v15 + 8) = 0;
    *((_QWORD *)v15 + 9) = 0;
    *((_QWORD *)v15 + 10) = v14;
    *((_QWORD *)v15 + 11) = v18;
    do
      v22 = __ldxr(p_shared_owners);
    while (__stxr(v22 + 1, p_shared_owners));
    *((_DWORD *)v15 + 8) = v21;
    *(_QWORD *)(v15 + 36) = 0x100000001;
    *((_DWORD *)v15 + 11) = 1;
    *((_QWORD *)v15 + 6) = *(_QWORD *)(v14 + 16);
    v15[56] = 0;
    do
      v23 = __ldaxr(p_shared_owners);
    while (__stlxr(v23 - 1, p_shared_owners));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  else
  {
    v24 = *(_DWORD *)(v14 + 8);
    *((_QWORD *)v15 + 3) = &off_1E2DA1410;
    *((_QWORD *)v15 + 8) = 0;
    *((_QWORD *)v15 + 9) = 0;
    *((_QWORD *)v15 + 10) = v14;
    *((_QWORD *)v15 + 11) = 0;
    *((_DWORD *)v15 + 8) = v24;
    *(_QWORD *)(v15 + 36) = 0x100000001;
    *((_DWORD *)v15 + 11) = 1;
    *((_QWORD *)v15 + 6) = *(_QWORD *)(v14 + 16);
    v15[56] = 0;
  }
  __p[0] = v17;
  __p[1] = v16;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v9 + 176, (__int128 *)__p);
  v25 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v26 = (unint64_t *)((char *)__p[1] + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  *(_DWORD *)(v9 + 240) = 1;
  v35 = v9;
  std::pair<std::string const,std::shared_ptr<Espresso::blob_cpu>>::pair[abi:ne180100]<std::string,std::unique_ptr<Espresso::blob_cpu>,0>((uint64_t)__p, a3, &v35);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob_cpu>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob_cpu>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob_cpu>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob_cpu>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<Espresso::blob_cpu>>>(a1 + 64, (unsigned __int8 *)__p, (uint64_t)__p);
  v28 = v34;
  if (v34)
  {
    v29 = (unint64_t *)&v34->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  if (v33 < 0)
    operator delete(__p[0]);
  result = v35;
  if (v35)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  return result;
}

{
  return __ZN8Espresso11base_kernel18set_parameter_blobItLi1EEEvNSt3__110shared_ptrINS_16abstract_contextEEENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS3_INS_4blobIT_XT0_EEEEE(a1, a2, a3, a4);
}

void sub_19147F1E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  std::pair<std::string,std::shared_ptr<Espresso::abstract_blob_container>>::~pair((uint64_t)&a9);
  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 8))(a14);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string const,std::shared_ptr<Espresso::blob_cpu>>::pair[abi:ne180100]<std::string,std::unique_ptr<Espresso::blob_cpu>,0>(uint64_t a1, __int128 *a2, uint64_t *a3)
{
  __int128 v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v5 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v5;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  v6 = *a3;
  *(_QWORD *)(a1 + 24) = *a3;
  if (v6)
  {
    v7 = (_QWORD *)operator new();
    v8 = *a3;
    *v7 = &off_1E2DC3740;
    v7[1] = 0;
    v7[2] = 0;
    v7[3] = v8;
  }
  else
  {
    v7 = 0;
  }
  *(_QWORD *)(a1 + 32) = v7;
  *a3 = 0;
  return a1;
}

void sub_19147F2E8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob_cpu>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob_cpu>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob_cpu>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob_cpu>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<Espresso::blob_cpu>>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  unsigned __int8 **v12;
  unsigned __int8 *i;
  unint64_t v14;
  _QWORD *v15;
  char *v16;
  std::string *v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  int8x8_t prime;
  void *v24;
  void *v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  uint8x8_t v29;
  unint64_t v30;
  uint8x8_t v31;
  uint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  unint64_t v37;
  void *v38;
  _QWORD v39[2];
  char v40;

  v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v12 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      for (i = *v12; i; i = *(unsigned __int8 **)i)
      {
        v14 = *((_QWORD *)i + 1);
        if (v14 == v8)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](i + 16, a2))
            return;
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9)
              v14 %= v9;
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3)
            break;
        }
      }
    }
  }
  v15 = (_QWORD *)(a1 + 16);
  v16 = (char *)operator new(0x38uLL);
  v39[0] = v16;
  v39[1] = a1 + 16;
  v40 = 0;
  *(_QWORD *)v16 = 0;
  *((_QWORD *)v16 + 1) = v8;
  v17 = (std::string *)(v16 + 16);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v17, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v17->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((_QWORD *)v16 + 4) = *(_QWORD *)(a3 + 16);
  }
  *(_OWORD *)(v16 + 40) = *(_OWORD *)(a3 + 24);
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  v40 = 1;
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (!v9 || (float)(v19 * (float)v9) < v18)
  {
    v20 = 1;
    if (v9 >= 3)
      v20 = (v9 & (v9 - 1)) != 0;
    v21 = v20 | (2 * v9);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      prime = (int8x8_t)v22;
    else
      prime = (int8x8_t)v21;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v9 = *(_QWORD *)(a1 + 8);
    if (*(_QWORD *)&prime > v9)
      goto LABEL_33;
    if (*(_QWORD *)&prime < v9)
    {
      v30 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (v31 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
      {
        v30 = std::__next_prime(v30);
      }
      else
      {
        v32 = 1 << -(char)__clz(v30 - 1);
        if (v30 >= 2)
          v30 = v32;
      }
      if (*(_QWORD *)&prime <= v30)
        prime = (int8x8_t)v30;
      if (*(_QWORD *)&prime >= v9)
      {
        v9 = *(_QWORD *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_33:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v24 = operator new(8 * *(_QWORD *)&prime);
          v25 = *(void **)a1;
          *(_QWORD *)a1 = v24;
          if (v25)
            operator delete(v25);
          v26 = 0;
          *(int8x8_t *)(a1 + 8) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v26++) = 0;
          while (*(_QWORD *)&prime != v26);
          v27 = (_QWORD *)*v15;
          if (*v15)
          {
            v28 = v27[1];
            v29 = (uint8x8_t)vcnt_s8(prime);
            v29.i16[0] = vaddlv_u8(v29);
            if (v29.u32[0] > 1uLL)
            {
              if (v28 >= *(_QWORD *)&prime)
                v28 %= *(_QWORD *)&prime;
            }
            else
            {
              v28 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v28) = v15;
            v33 = (_QWORD *)*v27;
            if (*v27)
            {
              do
              {
                v34 = v33[1];
                if (v29.u32[0] > 1uLL)
                {
                  if (v34 >= *(_QWORD *)&prime)
                    v34 %= *(_QWORD *)&prime;
                }
                else
                {
                  v34 &= *(_QWORD *)&prime - 1;
                }
                if (v34 != v28)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v34))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v34) = v27;
                    goto LABEL_58;
                  }
                  *v27 = *v33;
                  *v33 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v34);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v34) = v33;
                  v33 = v27;
                }
                v34 = v28;
LABEL_58:
                v27 = v33;
                v33 = (_QWORD *)*v33;
                v28 = v34;
              }
              while (v33);
            }
          }
          v9 = (unint64_t)prime;
          goto LABEL_62;
        }
        v38 = *(void **)a1;
        *(_QWORD *)a1 = 0;
        if (v38)
          operator delete(v38);
        v9 = 0;
        *(_QWORD *)(a1 + 8) = 0;
      }
    }
LABEL_62:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v35 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  v36 = v39[0];
  if (v35)
  {
    *(_QWORD *)v39[0] = *v35;
LABEL_75:
    *v35 = v36;
    goto LABEL_76;
  }
  *(_QWORD *)v39[0] = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v36;
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = v15;
  if (*(_QWORD *)v36)
  {
    v37 = *(_QWORD *)(*(_QWORD *)v36 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v37 >= v9)
        v37 %= v9;
    }
    else
    {
      v37 &= v9 - 1;
    }
    v35 = (_QWORD *)(*(_QWORD *)a1 + 8 * v37);
    goto LABEL_75;
  }
LABEL_76:
  v39[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>>>>::reset[abi:ne180100]((uint64_t)v39);
}

void sub_19147F744(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<Espresso::blob_cpu  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_pointer<Espresso::blob_cpu  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<Espresso::blob_cpu  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), 0x8000000191AB35E6))
    return a1 + 24;
  else
    return 0;
}

uint64_t Espresso::base_kernel::set_parameter_blob<unsigned short,5>(uint64_t a1, uint64_t *a2, __int128 *a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  char *v17;
  void *v18;
  void *v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t result;
  void *__p[2];
  char v38;
  std::__shared_weak_count *v39;
  uint64_t v40;

  v8 = operator new();
  v9 = v8;
  *(_QWORD *)v8 = off_1E2D8F108;
  *(_DWORD *)(v8 + 28) = -1;
  *(_OWORD *)(v8 + 32) = 0u;
  *(_OWORD *)(v8 + 48) = 0u;
  v11 = *a2;
  v10 = a2[1];
  *(_QWORD *)(v8 + 64) = 0;
  *(_QWORD *)(v8 + 72) = v11;
  *(_QWORD *)(v8 + 80) = v10;
  if (v10)
  {
    v12 = (unint64_t *)(v10 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  *(_QWORD *)(v8 + 88) = 0;
  *(_QWORD *)(v8 + 96) = 0;
  *(_DWORD *)(v8 + 104) = 0;
  *(_DWORD *)(v8 + 112) = 1065353216;
  *(_QWORD *)(v8 + 116) = 0xFFFFFFFF00000000;
  *(_DWORD *)(v8 + 124) = 1;
  *(_QWORD *)(v8 + 8) = 0;
  *(_QWORD *)(v8 + 16) = 0;
  *(_DWORD *)(v8 + 24) = 0;
  *(_OWORD *)(v8 + 128) = 0uLL;
  *(_OWORD *)(v8 + 144) = 0uLL;
  *(_OWORD *)(v8 + 160) = 0uLL;
  *(_QWORD *)v8 = &off_1E2DA6B80;
  *(_OWORD *)(v8 + 176) = 0uLL;
  *(_QWORD *)(v8 + 248) = 0;
  *(_OWORD *)(v8 + 192) = 0uLL;
  *(_OWORD *)(v8 + 208) = 0uLL;
  *(_OWORD *)(v8 + 224) = 0uLL;
  *(_DWORD *)(v8 + 240) = 0;
  v14 = *a4;
  v15 = *(_DWORD *)(*a4 + 20);
  v16 = *(_DWORD *)(*a4 + 24);
  v17 = (char *)operator new(0x60uLL);
  v18 = v17;
  *((_QWORD *)v17 + 1) = 0;
  *((_QWORD *)v17 + 2) = 0;
  *(_QWORD *)v17 = &off_1E2DBF060;
  v19 = v17 + 24;
  v20 = (std::__shared_weak_count *)a4[1];
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldxr(p_shared_owners);
    while (__stxr(v22 + 1, p_shared_owners));
  }
  v23 = *(_QWORD *)(v14 + 8);
  v24 = *(_DWORD *)(v14 + 16);
  v25 = v16 * v15;
  *((_QWORD *)v17 + 3) = &off_1E2DA1410;
  *((_QWORD *)v17 + 8) = 0;
  *((_QWORD *)v17 + 9) = 0;
  *((_QWORD *)v17 + 10) = v14;
  *((_QWORD *)v17 + 11) = v20;
  if (v20)
  {
    v26 = (unint64_t *)&v20->__shared_owners_;
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
    *((_QWORD *)v17 + 4) = v23;
    *((_DWORD *)v17 + 10) = v24;
    *((_DWORD *)v17 + 11) = v25;
    *((_QWORD *)v17 + 6) = *(_QWORD *)(v14 + 32);
    v17[56] = 0;
    v28 = (unint64_t *)&v20->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  else
  {
    *((_QWORD *)v17 + 4) = v23;
    *((_DWORD *)v17 + 10) = v24;
    *((_DWORD *)v17 + 11) = v25;
    *((_QWORD *)v17 + 6) = *(_QWORD *)(v14 + 32);
    v17[56] = 0;
  }
  __p[0] = v19;
  __p[1] = v18;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v9 + 176, (__int128 *)__p);
  v30 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v31 = (unint64_t *)((char *)__p[1] + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  *(_DWORD *)(v9 + 240) = 1;
  v40 = v9;
  std::pair<std::string const,std::shared_ptr<Espresso::blob_cpu>>::pair[abi:ne180100]<std::string,std::unique_ptr<Espresso::blob_cpu>,0>((uint64_t)__p, a3, &v40);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob_cpu>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob_cpu>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob_cpu>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob_cpu>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<Espresso::blob_cpu>>>(a1 + 64, (unsigned __int8 *)__p, (uint64_t)__p);
  v33 = v39;
  if (v39)
  {
    v34 = (unint64_t *)&v39->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  if (v38 < 0)
    operator delete(__p[0]);
  result = v40;
  if (v40)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  return result;
}

{
  return __ZN8Espresso11base_kernel18set_parameter_blobItLi5EEEvNSt3__110shared_ptrINS_16abstract_contextEEENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS3_INS_4blobIT_XT0_EEEEE(a1, a2, a3, a4);
}

void sub_19147FA8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  std::pair<std::string,std::shared_ptr<Espresso::abstract_blob_container>>::~pair((uint64_t)&a9);
  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 8))(a14);
  _Unwind_Resume(a1);
}

BOOL Espresso::is_ptr_aligned(Espresso *this, void *a2)
{
  return (this & 0x3F) == 0;
}

void Espresso::platform_to_string(int a1@<W0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  char *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  int v12;
  uint64_t v13;
  std::__shared_weak_count *v14;

  v12 = a1;
  Espresso::abstract_engine_factory::shared(&v13);
  Espresso::abstract_engine_factory::engine_for_platform(v13, &v12, &v10);
  v3 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
  std::string::basic_string[abi:ne180100]<0>(a2, v6);
  v7 = v11;
  if (v11)
  {
    v8 = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_19147FBF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t Espresso::is_ane_platform(unsigned int a1)
{
  _BOOL4 v1;

  v1 = a1 == 10011 || a1 >> 1 == 5003;
  return a1 == 10008 || v1;
}

BOOL Espresso::is_ane_compiler_platform(int a1)
{
  return a1 == 10008 || a1 == 10011;
}

BOOL Espresso::is_ane_runtime_platform(unsigned int a1)
{
  return a1 >> 1 == 5003;
}

std::string *Espresso::compute_path_to_string@<X0>(int a1@<W0>, std::string *a2@<X8>)
{
  char *v2;
  std::string *result;

  switch(a1)
  {
    case 0:
      v2 = "FP32";
      goto LABEL_10;
    case 1:
      v2 = "FP16";
      goto LABEL_10;
    case 2:
      v2 = "S8";
      goto LABEL_10;
    case 3:
      v2 = "I32";
      goto LABEL_10;
    case 4:
      v2 = "U8";
      goto LABEL_10;
    case 5:
      v2 = "U16";
      goto LABEL_10;
    case 7:
      v2 = "I16";
LABEL_10:
      result = (std::string *)std::string::basic_string[abi:ne180100]<0>(a2, v2);
      break;
    default:
      result = std::to_string(a2, a1);
      break;
  }
  return result;
}

uint64_t Espresso::is_floating_point_compute_path(unsigned int a1)
{
  return (a1 > 0xE) | (0x3003u >> a1) & 1;
}

uint64_t Espresso::is_integral_compute_path(unsigned int a1)
{
  return (a1 > 0xD) | (0xFFCu >> a1) & 1;
}

uint64_t Espresso::abstract_context::set_option(Espresso::abstract_context *this, const char *a2, uint64_t a3)
{
  int v6;

  v6 = Espresso::abstract_context::set_generic_option(this, a2, a3);
  return v6 | (*(unsigned int (**)(Espresso::abstract_context *, const char *, uint64_t))(*(_QWORD *)this
                                                                                                  + 144))(this, a2, a3);
}

void Espresso::abstract_engine::~abstract_engine(Espresso::abstract_engine *this)
{
  *(_QWORD *)this = &unk_1E2D676D0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

BOOL Espresso::blobcpy(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL4 v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  char v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  unsigned int (***v30)(_QWORD);
  unsigned int (***v31)(_QWORD);
  char v32;
  unsigned int (***v33)(_QWORD);
  unsigned int (***v34)(_QWORD);
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v39;
  std::__shared_weak_count *v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  char v45[40];
  void *__p;
  void *v47;
  __int128 v48[2];
  void *v49;
  void *v50;

  v6 = *a2;
  if (!*a2)
  {
    v7 = *a3 + 72;
    v8 = *(_QWORD *)(*(_QWORD *)v7 + 8);
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a3 + 32))(*a3);
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 24))(v48, v8, v7, v9);
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)a2, v48);
    v10 = (std::__shared_weak_count *)*((_QWORD *)&v48[0] + 1);
    if (*((_QWORD *)&v48[0] + 1))
    {
      v11 = (unint64_t *)(*((_QWORD *)&v48[0] + 1) + 8);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    v6 = *a2;
  }
  v13 = *a3;
  *(_OWORD *)(v6 + 112) = *(_OWORD *)(*a3 + 112);
  if (v6 != v13)
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)(v6 + 128), *(char **)(v13 + 128), *(_QWORD *)(v13 + 136), (uint64_t)(*(_QWORD *)(v13 + 136) - *(_QWORD *)(v13 + 128)) >> 2);
  Espresso::abstract_blob_container::shape((char *)v48, *a2);
  Espresso::abstract_blob_container::shape(v45, *a3);
  v14 = Espresso::layer_shape::operator==((uint64_t)v48, (uint64_t)v45);
  if (__p)
  {
    v47 = __p;
    operator delete(__p);
  }
  if (v49)
  {
    v50 = v49;
    operator delete(v49);
  }
  if (!v14)
  {
    v15 = *a2;
    Espresso::abstract_blob_container::shape((char *)v48, *a3);
    v43 = 0;
    v44 = 0;
    (*(void (**)(uint64_t, __int128 *, uint64_t *))(*(_QWORD *)v15 + 16))(v15, v48, &v43);
    v16 = v44;
    if (v44)
    {
      p_shared_owners = (unint64_t *)&v44->__shared_owners_;
      do
        v18 = __ldaxr(p_shared_owners);
      while (__stlxr(v18 - 1, p_shared_owners));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    if (v49)
    {
      v50 = v49;
      operator delete(v49);
    }
  }
  v19 = *a2;
  v20 = a3[1];
  v41 = *a3;
  v42 = (std::__shared_weak_count *)v20;
  if (v20)
  {
    v21 = (unint64_t *)(v20 + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  v39 = 0;
  v40 = 0;
  v23 = (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t *, uint64_t *))(*(_QWORD *)v19 + 144))(v19, a1, &v41, &v39);
  v24 = v40;
  if (v40)
  {
    v25 = (unint64_t *)&v40->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = v42;
  if (!v42)
    goto LABEL_34;
  v28 = (unint64_t *)&v42->__shared_owners_;
  do
    v29 = __ldaxr(v28);
  while (__stlxr(v29 - 1, v28));
  if (!v29)
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
    if ((v23 & 1) != 0)
      return !v14;
  }
  else
  {
LABEL_34:
    if ((v23 & 1) != 0)
      return !v14;
  }
  (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a3 + 192))(v48);
  v30 = *(unsigned int (****)(_QWORD))(*(_QWORD *)(*a3 + 72) + 8);
  if ((**v30)(v30) == 10007
    || (v31 = *(unsigned int (****)(_QWORD))(*(_QWORD *)(*a3 + 72) + 8), (**v31)(v31) == 10006))
  {
    (*(void (**)(_QWORD))(*(_QWORD *)*a1 + 40))(*a1);
    v32 = 1;
  }
  else
  {
    v32 = 0;
  }
  (*(void (**)(uint64_t, _QWORD *, __int128 *))(*(_QWORD *)*a3 + 40))(*a3, a1, v48);
  if ((v32 & 1) == 0)
  {
    v33 = *(unsigned int (****)(_QWORD))(*(_QWORD *)(*a3 + 72) + 8);
    if ((**v33)(v33))
    {
      v34 = *(unsigned int (****)(_QWORD))(*(_QWORD *)(*a3 + 72) + 8);
      if ((**v34)(v34) != 100)
        (*(void (**)(_QWORD))(*(_QWORD *)*a1 + 40))(*a1);
    }
  }
  (*(void (**)(uint64_t, _QWORD *, __int128 *))(*(_QWORD *)*a2 + 48))(*a2, a1, v48);
  v35 = (std::__shared_weak_count *)*((_QWORD *)&v48[0] + 1);
  if (*((_QWORD *)&v48[0] + 1))
  {
    v36 = (unint64_t *)(*((_QWORD *)&v48[0] + 1) + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  return !v14;
}

void sub_19148014C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  if (__p)
  {
    a29 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unique_ptr<Espresso::blob_file_metadata>>,0>(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v2)
    std::default_delete<Espresso::blob_file_metadata>::operator()[abi:ne180100](v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::default_delete<Espresso::blob_file_metadata>::operator()[abi:ne180100](uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x19401CD90);
}

uint64_t std::pair<std::string const,std::unique_ptr<Espresso::blob_file_metadata>>::~pair(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v2)
    std::default_delete<Espresso::blob_file_metadata>::operator()[abi:ne180100](v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<Espresso::blob_file_metadata>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<Espresso::blob_file_metadata>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unique_ptr<Espresso::blob_file_metadata>>,0>((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

BOOL Espresso::base_kernel::has_blob_file_metadata(uint64_t a1, unsigned __int8 *a2)
{
  return std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>((_QWORD *)(a1 + 24), a2) != 0;
}

uint64_t Espresso::base_kernel::get_blob_file_metadata(uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int8 *v2;

  v2 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>((_QWORD *)(a1 + 24), a2);
  if (!v2)
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Could not find details for given blob type.");
  return *((_QWORD *)v2 + 5);
}

unsigned __int8 *Espresso::base_kernel::get_parameter_blob@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, _QWORD *a3@<X8>)
{
  unsigned __int8 *result;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  result = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>((_QWORD *)(a1 + 64), a2);
  if (!result)
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Unsupported blob_key for kernel parameter.");
  v5 = *((_QWORD *)result + 6);
  *a3 = *((_QWORD *)result + 5);
  a3[1] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return result;
}

BOOL Espresso::base_kernel::has_parameter_blob(int8x8_t *a1, unsigned __int8 *a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 **v10;
  unsigned __int8 *i;
  unint64_t v12;

  v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  v5 = a1[9];
  if (!*(_QWORD *)&v5)
    goto LABEL_18;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(unsigned __int8 ***)(*(_QWORD *)&a1[8] + 8 * v9);
  if (v10)
  {
    for (i = *v10; i; i = *(unsigned __int8 **)i)
    {
      v12 = *((_QWORD *)i + 1);
      if (v6 == v12)
      {
        if (std::equal_to<std::string>::operator()[abi:ne180100](i + 16, a2))
          return i != 0;
      }
      else
      {
        if (v8 > 1)
        {
          if (v12 >= *(_QWORD *)&v5)
            v12 %= *(_QWORD *)&v5;
        }
        else
        {
          v12 &= *(_QWORD *)&v5 - 1;
        }
        if (v12 != v9)
          goto LABEL_18;
      }
    }
  }
  else
  {
LABEL_18:
    i = 0;
  }
  return i != 0;
}

uint64_t Espresso::base_kernel::set_parameter_blob(uint64_t a1, __int128 *a2, uint64_t a3)
{
  uint64_t v6;
  const void *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  uint64_t result;
  uint64_t v35;
  void *__p[2];
  char v37;
  std::__shared_weak_count *v38;

  v6 = operator new();
  *(_QWORD *)v6 = off_1E2D8F108;
  *(_OWORD *)(v6 + 8) = *(_OWORD *)(a3 + 8);
  *(_OWORD *)(v6 + 24) = *(_OWORD *)(a3 + 24);
  *(_QWORD *)(v6 + 48) = 0;
  v7 = *(const void **)(a3 + 48);
  *(_QWORD *)(v6 + 40) = *(_QWORD *)(a3 + 40);
  *(_QWORD *)(v6 + 56) = 0;
  *(_QWORD *)(v6 + 64) = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((_QWORD *)(v6 + 48), v7, *(_QWORD *)(a3 + 56), (uint64_t)(*(_QWORD *)(a3 + 56) - (_QWORD)v7) >> 2);
  v8 = *(_QWORD *)(a3 + 80);
  *(_QWORD *)(v6 + 72) = *(_QWORD *)(a3 + 72);
  *(_QWORD *)(v6 + 80) = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11 = *(_QWORD *)(a3 + 96);
  *(_QWORD *)(v6 + 88) = *(_QWORD *)(a3 + 88);
  *(_QWORD *)(v6 + 96) = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v14 = *(_DWORD *)(a3 + 104);
  *(_QWORD *)(v6 + 128) = 0;
  *(_DWORD *)(v6 + 104) = v14;
  *(_OWORD *)(v6 + 112) = *(_OWORD *)(a3 + 112);
  *(_QWORD *)(v6 + 136) = 0;
  *(_QWORD *)(v6 + 144) = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((_QWORD *)(v6 + 128), *(const void **)(a3 + 128), *(_QWORD *)(a3 + 136), (uint64_t)(*(_QWORD *)(a3 + 136) - *(_QWORD *)(a3 + 128)) >> 2);
  *(_QWORD *)v6 = &off_1E2DA6B80;
  v15 = *(_QWORD *)(a3 + 160);
  *(_QWORD *)(v6 + 152) = *(_QWORD *)(a3 + 152);
  *(_QWORD *)(v6 + 160) = v15;
  v16 = *(_QWORD *)(a3 + 168);
  *(_QWORD *)(v6 + 168) = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v19 = *(_QWORD *)(a3 + 184);
  *(_QWORD *)(v6 + 176) = *(_QWORD *)(a3 + 176);
  *(_QWORD *)(v6 + 184) = v19;
  if (v19)
  {
    v20 = (unint64_t *)(v19 + 8);
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  v22 = *(_QWORD *)(a3 + 200);
  *(_QWORD *)(v6 + 192) = *(_QWORD *)(a3 + 192);
  *(_QWORD *)(v6 + 200) = v22;
  if (v22)
  {
    v23 = (unint64_t *)(v22 + 8);
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  v25 = *(_QWORD *)(a3 + 216);
  *(_QWORD *)(v6 + 208) = *(_QWORD *)(a3 + 208);
  *(_QWORD *)(v6 + 216) = v25;
  if (v25)
  {
    v26 = (unint64_t *)(v25 + 8);
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  v28 = *(_QWORD *)(a3 + 232);
  *(_QWORD *)(v6 + 224) = *(_QWORD *)(a3 + 224);
  *(_QWORD *)(v6 + 232) = v28;
  if (v28)
  {
    v29 = (unint64_t *)(v28 + 8);
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
  }
  *(_OWORD *)(v6 + 240) = *(_OWORD *)(a3 + 240);
  v35 = v6;
  std::pair<std::string const,std::shared_ptr<Espresso::blob_cpu>>::pair[abi:ne180100]<std::string,std::unique_ptr<Espresso::blob_cpu>,0>((uint64_t)__p, a2, &v35);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob_cpu>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob_cpu>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob_cpu>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob_cpu>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<Espresso::blob_cpu>>>(a1 + 64, (unsigned __int8 *)__p, (uint64_t)__p);
  v31 = v38;
  if (v38)
  {
    p_shared_owners = (unint64_t *)&v38->__shared_owners_;
    do
      v33 = __ldaxr(p_shared_owners);
    while (__stlxr(v33 - 1, p_shared_owners));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  if (v37 < 0)
    operator delete(__p[0]);
  result = v35;
  if (v35)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  return result;
}

void sub_191480698(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::pair<std::string,std::shared_ptr<Espresso::abstract_blob_container>>::~pair((uint64_t)va);
  if (a2)
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 8))(a2);
  _Unwind_Resume(a1);
}

double Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(Espresso::base_kernel::validate_for_engine_warning_t *this)
{
  double result;

  *((_QWORD *)this + 10) = 0;
  result = 0.0;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  *((_DWORD *)this + 22) = 1;
  *((_QWORD *)this + 12) = 0;
  *((_BYTE *)this + 104) = 1;
  return result;
}

{
  double result;

  *((_QWORD *)this + 10) = 0;
  result = 0.0;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  *((_DWORD *)this + 22) = 1;
  *((_QWORD *)this + 12) = 0;
  *((_BYTE *)this + 104) = 1;
  return result;
}

uint64_t Espresso::is_espresso_os_log_requested(int a1)
{
  if (Espresso::is_espresso_os_log_requested(Espresso::espresso_os_log_flag)::onceToken != -1)
    dispatch_once(&Espresso::is_espresso_os_log_requested(Espresso::espresso_os_log_flag)::onceToken, &__block_literal_global_49_4727);
  return Espresso::is_espresso_os_log_requested(Espresso::espresso_os_log_flag)::logs_requested[a1];
}

unint64_t Espresso::abstract_blob_container::get_src_crop_rect(unint64_t a1, unint64_t a2, _DWORD *a3, int a4, int a5)
{
  int v5;
  BOOL v6;
  int v7;
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  int v12;
  int v13;
  BOOL v14;
  int v15;
  int v16;
  uint64_t v17;
  unsigned int v18;

  v5 = a3[20];
  if (v5)
    v6 = v5 == 3;
  else
    v6 = 1;
  if (v6)
  {
    v7 = (int)(float)((float)((float)a1 / (float)a4) * (float)a5);
    v8 = a2 - v7;
    if ((int)a2 >= v7)
      v9 = a2 - v7;
    else
      v9 = v8 + 1;
    v10 = v9 >> 1;
    v11 = (int)(float)((float)((float)a2 / (float)a5) * (float)a4);
    v12 = a1 - v11;
    if ((int)a1 < v11)
      ++v12;
    v13 = v12 >> 1;
    v14 = v8 <= -2;
    if (v8 <= -2)
      v17 = 0;
    else
      v17 = v10;
    if (v14)
      v18 = v13;
    else
      v18 = 0;
    if (v5 == 3)
    {
      v15 = a3[26];
      if (v15 >= a4)
        v15 = a4;
      v18 = v15 & ~(v15 >> 31);
      if (a3[27] >= a5)
        v16 = a5;
      else
        v16 = a3[27];
      v17 = v16 & ~(v16 >> 31);
    }
  }
  else
  {
    v17 = 0;
    v18 = 0;
  }
  return v18 | (unint64_t)(v17 << 32);
}

void Espresso::check_backpropable_result_t::backpropable_input_names(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  std::string *v10;
  unint64_t v11;
  __int128 *v12;

  v5 = *a2;
  v4 = a2[1];
  v6 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a2) >> 3);
  if (v6 != a1[1])
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("input_names and inputs_backpropable should be of same length");
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  if (v4 != v5)
  {
    v9 = 0;
    v10 = 0;
    v11 = 0;
    do
    {
      if (((*(_QWORD *)(*a1 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v11) & 1) != 0)
      {
        v12 = (__int128 *)(*a2 + v9);
        if ((unint64_t)v10 >= *(_QWORD *)(a3 + 16))
        {
          v10 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)a3, (uint64_t)v12);
        }
        else
        {
          std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(a3, v12);
          ++v10;
        }
        *(_QWORD *)(a3 + 8) = v10;
        v6 = a1[1];
      }
      ++v11;
      v9 += 24;
    }
    while (v11 < v6);
  }
}

void sub_1914809C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void Espresso::check_backpropable_result_t::not_backpropable_on_all_inputs(Espresso::check_backpropable_result_t *this@<X0>, _QWORD *a2@<X8>)
{
  unsigned __int8 v3;
  void *__p[3];

  v3 = 0;
  std::vector<BOOL>::vector(__p, (unint64_t)this, &v3);
  std::vector<BOOL>::vector(a2, (uint64_t)__p);
  if (__p[0])
    operator delete(__p[0]);
}

void sub_191480A30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Espresso::ANECompilerEngine::ane_kernel::compile(Espresso::ANECompilerEngine::ane_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
  Espresso::throw_exception_selector<Espresso::generic_error>("Should never reach here");
}

void Espresso::ANECompilerEngine::ane_kernel::add_units(int a1, Espresso::ANECompilerEngine::compiler *this, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v6;
  unint64_t v7;

  v3 = *a3;
  if (a3[1] != *a3)
  {
    v6 = 0;
    v7 = 0;
    do
    {
      Espresso::ANECompilerEngine::compiler::add_unit(this, (const Espresso::ANECompilerEngine::compiler::unit_t *)(v3 + v6));
      ++v7;
      v3 = *a3;
      v6 += 144;
    }
    while (0x8E38E38E38E38E39 * ((a3[1] - *a3) >> 4) > v7);
  }
}

void Espresso::ANECompilerEngine::ane_kernel::add_units_sequential(int a1, Espresso::ANECompilerEngine::compiler *this, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  std::string *v10;
  __int128 v11;
  std::string *p_p;
  std::string::size_type size;
  uint64_t v14;
  __int128 v15;
  std::string v16;
  std::string __p;
  __int128 v18;

  *(_QWORD *)&v18 = *MEMORY[0x1E0C80C00];
  v3 = *a3;
  v4 = a3[1] - *a3;
  if (v4)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0x8E38E38E38E38E39 * (v4 >> 4);
    do
    {
      if (v9 - 1 <= v8)
        goto LABEL_13;
      std::to_string(&v16, v8);
      v10 = std::string::insert(&v16, 0, "_tmp_");
      v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
      std::string::append((std::string *)(*a3 + v7), (const std::string::value_type *)p_p, size);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v16.__r_.__value_.__l.__data_);
        if (v8)
        {
LABEL_14:
          v14 = *a3 + 144 * (v8 - 1);
          if (*(char *)(v14 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v14, *(_QWORD *)(v14 + 8));
          }
          else
          {
            v15 = *(_OWORD *)v14;
            __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v14 + 16);
            *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v15;
          }
          std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>((std::vector<std::string> *)(v3 + v7 + 48), &__p, &v18, 1uLL);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      else
      {
LABEL_13:
        if (v8)
          goto LABEL_14;
      }
      Espresso::ANECompilerEngine::compiler::add_unit(this, (const Espresso::ANECompilerEngine::compiler::unit_t *)(v3 + v7));
      ++v8;
      v3 = *a3;
      v9 = 0x8E38E38E38E38E39 * ((a3[1] - *a3) >> 4);
      v7 += 144;
    }
    while (v9 > v8);
  }
}

void sub_191480CD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  _Unwind_Resume(exception_object);
}

void Espresso::ANECompilerEngine::ane_kernel::add_units_parallel_and_merge(uint64_t a1, Espresso::ANECompilerEngine::compiler *a2, uint64_t *a3, unint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v10;
  char **v11;
  uint64_t v12;
  uint64_t v13;
  std::string **v14;
  _QWORD *v15;
  uint64_t v16;
  std::string *v17;
  __int128 v18;
  void **v19;
  std::string::size_type v20;
  __int128 *v21;
  std::string *v22;
  std::string *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  std::string *v27;
  __int128 v28;
  void **v29;
  std::string::size_type v30;
  uint64_t v31;
  char **v32;
  std::string *v33;
  std::string *v34;
  unint64_t v35;
  std::string v37;
  void *__p[2];
  int64_t v39;

  v4 = 0x8E38E38E38E38E39 * ((a3[1] - *a3) >> 4);
  v5 = v4 - a4;
  if (v4 <= a4 || a4 == 0 || v4 <= 1)
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Invalid unit count for add_units_parallel_and_merge");
  v35 = 0x8E38E38E38E38E39 * ((a3[1] - *a3) >> 4);
  v10 = *a3 + 144 * v5;
  v11 = (char **)(v10 + 48);
  std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)(v10 + 48));
  v12 = 0;
  v13 = 0;
  v14 = (std::string **)(v10 + 56);
  v15 = (_QWORD *)(v10 + 64);
  do
  {
    v16 = *a3;
    std::to_string(&v37, v13);
    v17 = std::string::insert(&v37, 0, "_tmp_parallel_");
    v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v39 = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    if (v39 >= 0)
      v19 = __p;
    else
      v19 = (void **)__p[0];
    if (v39 >= 0)
      v20 = HIBYTE(v39);
    else
      v20 = (std::string::size_type)__p[1];
    std::string::append((std::string *)(*a3 + v12), (const std::string::value_type *)v19, v20);
    if (SHIBYTE(v39) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v37.__r_.__value_.__l.__data_);
    v21 = (__int128 *)(*a3 + v12);
    v22 = *v14;
    if ((unint64_t)*v14 >= *v15)
    {
      v23 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v11, (uint64_t)v21);
    }
    else
    {
      std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v11, v21);
      v23 = v22 + 1;
    }
    *v14 = v23;
    Espresso::ANECompilerEngine::compiler::add_unit(a2, (const Espresso::ANECompilerEngine::compiler::unit_t *)(v16 + v12));
    ++v13;
    v12 += 144;
  }
  while (v5 != v13);
  v24 = 0;
  if (a4 <= 1)
    v25 = 1;
  else
    v25 = a4;
  v26 = 144 * v35 - 144 * a4;
  do
  {
    if (a4 - 1 > v24)
    {
      std::to_string(&v37, v24);
      v27 = std::string::insert(&v37, 0, "_tmp_merge_");
      v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v39 = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      if (v39 >= 0)
        v29 = __p;
      else
        v29 = (void **)__p[0];
      if (v39 >= 0)
        v30 = HIBYTE(v39);
      else
        v30 = (std::string::size_type)__p[1];
      std::string::append((std::string *)(*a3 + v26), (const std::string::value_type *)v29, v30);
      if (SHIBYTE(v39) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v37.__r_.__value_.__l.__data_);
      std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)(*a3 + v26 + 192));
      v31 = *a3 + v26;
      v32 = (char **)(v31 + 192);
      v33 = *(std::string **)(v31 + 200);
      if ((unint64_t)v33 >= *(_QWORD *)(v31 + 208))
      {
        v34 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v32, v31);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v32, (__int128 *)v31);
        v34 = v33 + 1;
      }
      *(_QWORD *)(v31 + 200) = v34;
    }
    Espresso::ANECompilerEngine::compiler::add_unit(a2, (const Espresso::ANECompilerEngine::compiler::unit_t *)(*a3 + v26));
    ++v24;
    v26 += 144;
  }
  while (v25 != v24);
}

void sub_191480FAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  if (a17 < 0)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

void Espresso::ANECompilerEngine::ane_kernel::add_high_precision_tanh_units(uint64_t a1, uint64_t a2, id *a3)
{
  __CFString *v5;
  void *v6;
  void *v7;
  std::string *v8;
  std::string *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  std::string *v14;
  std::string *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  __CFString *v21;
  std::string *v22;
  std::string *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  void *v28[2];
  char v29;
  uint64_t v30;
  uint64_t v31;
  void *__p;
  char v33;
  id v34;
  __CFString *v35;
  id v36[2];
  uint64_t v37;
  std::string *v38;
  unint64_t v39;
  void **v40;
  std::string *v41;
  std::string *v42;
  unint64_t v43;
  unint64_t *v44;

  v37 = 0;
  v38 = 0;
  v39 = 0;
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t(v28, a3);
  v5 = v35;
  v35 = CFSTR("NeuronCustom");

  Espresso::ANECompilerEngine::generate_custom_neuron_params(1, (uint64_t)&__block_literal_global_4820, 0.1, 1.625, 0.0, 1.75, 0.0, 0.0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  Espresso::ANECompilerEngine::generate_custom_neuron_params(1, (uint64_t)&__block_literal_global_4820, 1.75, 3.5, 1.625, 4.25, 0.0, 1.0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_storeStrong(v36, v6);
  v8 = v38;
  if ((unint64_t)v38 >= v39)
  {
    v10 = 0x8E38E38E38E38E39 * (((uint64_t)v38 - v37) >> 4);
    if (v10 + 1 > 0x1C71C71C71C71C7)
      goto LABEL_42;
    v11 = 0x1C71C71C71C71C72 * ((uint64_t)(v39 - v37) >> 4);
    if (v11 <= v10 + 1)
      v11 = v10 + 1;
    if (0x8E38E38E38E38E39 * ((uint64_t)(v39 - v37) >> 4) >= 0xE38E38E38E38E3)
      v12 = 0x1C71C71C71C71C7;
    else
      v12 = v11;
    v44 = &v39;
    if (v12)
      v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v12);
    else
      v13 = 0;
    v40 = (void **)v12;
    v41 = (std::string *)(v12 + 144 * v10);
    v42 = v41;
    v43 = v12 + 144 * v13;
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v41, (uint64_t)v28);
    v42 += 6;
    std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v37, &v40);
    v9 = v38;
    std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&v40);
  }
  else
  {
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v38, (uint64_t)v28);
    v9 = v8 + 6;
  }
  v38 = v9;
  objc_storeStrong(v36, v7);
  v14 = v38;
  if ((unint64_t)v38 < v39)
  {
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v38, (uint64_t)v28);
    v15 = v14 + 6;
    goto LABEL_25;
  }
  v16 = 0x8E38E38E38E38E39 * (((uint64_t)v38 - v37) >> 4);
  if (v16 + 1 > 0x1C71C71C71C71C7)
LABEL_42:
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  v17 = 0x1C71C71C71C71C72 * ((uint64_t)(v39 - v37) >> 4);
  if (v17 <= v16 + 1)
    v17 = v16 + 1;
  if (0x8E38E38E38E38E39 * ((uint64_t)(v39 - v37) >> 4) >= 0xE38E38E38E38E3)
    v18 = 0x1C71C71C71C71C7;
  else
    v18 = v17;
  v44 = &v39;
  if (v18)
    v18 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v18);
  else
    v19 = 0;
  v40 = (void **)v18;
  v41 = (std::string *)(v18 + 144 * v16);
  v42 = v41;
  v43 = v18 + 144 * v19;
  std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v41, (uint64_t)v28);
  v42 += 6;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v37, &v40);
  v15 = v38;
  std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&v40);
LABEL_25:
  v38 = v15;
  v20 = (void *)objc_opt_new();
  objc_msgSend(v20, "setObject:forKeyedSubscript:", CFSTR("Add"), CFSTR("Type"));
  v21 = v35;
  v35 = CFSTR("ElementWise");

  objc_storeStrong(v36, v20);
  v22 = v38;
  if ((unint64_t)v38 >= v39)
  {
    v24 = 0x8E38E38E38E38E39 * (((uint64_t)v38 - v37) >> 4);
    if (v24 + 1 > 0x1C71C71C71C71C7)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v25 = 0x1C71C71C71C71C72 * ((uint64_t)(v39 - v37) >> 4);
    if (v25 <= v24 + 1)
      v25 = v24 + 1;
    if (0x8E38E38E38E38E39 * ((uint64_t)(v39 - v37) >> 4) >= 0xE38E38E38E38E3)
      v26 = 0x1C71C71C71C71C7;
    else
      v26 = v25;
    v44 = &v39;
    if (v26)
      v26 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v26);
    else
      v27 = 0;
    v40 = (void **)v26;
    v41 = (std::string *)(v26 + 144 * v24);
    v42 = v41;
    v43 = v26 + 144 * v27;
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v41, (uint64_t)v28);
    v42 += 6;
    std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v37, &v40);
    v23 = v38;
    std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&v40);
  }
  else
  {
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v38, (uint64_t)v28);
    v23 = v22 + 6;
  }
  v38 = v23;
  (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a1 + 40))(a1, a2, &v37, 1);

  if (v33 < 0)
    operator delete(__p);
  v40 = (void **)&v31;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v40);
  v40 = (void **)&v30;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v40);
  if (v29 < 0)
    operator delete(v28[0]);
  v28[0] = &v37;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)v28);
}

void sub_191481444(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  void *v27;
  void *v28;
  void *v29;
  uint64_t v30;

  std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer(v30 - 120);

  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t((id *)&a9);
  a9 = (void **)&a27;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::ane_kernel::add_high_precision_sigmoid_units(_QWORD *a1, uint64_t a2, id *a3, int a4)
{
  __CFString *v7;
  __CFString *v8;
  size_t v9;
  void **v10;
  void **v11;
  std::string *v12;
  std::string *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  std::string *v18;
  std::string *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  void *v24;
  __CFString *v25;
  std::string *v26;
  std::string *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  std::string *v32;
  std::string *i;
  std::string *j;
  std::string *v35;
  __int128 v36;
  std::string *v37;
  void *v38;
  __CFString *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *p_shared_owners;
  unint64_t v43;
  float *v44;
  uint64_t v46;
  _BOOL4 v47;
  unint64_t *v48;
  unint64_t v49;
  void *v50;
  void *v56;
  std::string *v58;
  std::string *v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  id v65;
  id obj;
  void *v67[2];
  char *v68;
  unint64_t v69;
  unint64_t *v70;
  std::string *v71;
  std::string *v72;
  unint64_t v73;
  void *v74;
  char v75;
  id v76;
  __CFString *v77;
  id v78;
  void *__p[2];
  char *v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  char v84;
  id v85;
  __CFString *v86;
  id v87[3];
  void *v88[2];
  char v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  char v93;
  id v94;
  __CFString *v95;
  id v96;
  std::string *v97;
  std::string *v98;
  unint64_t v99;
  char **v100;
  std::string *v101;
  std::string *v102;
  unint64_t v103;
  unint64_t *v104;

  v97 = 0;
  v98 = 0;
  v99 = 0;
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t(v88, a3);
  v7 = v95;
  v95 = CFSTR("NeuronCustom");

  Espresso::ANECompilerEngine::generate_custom_neuron_params(1, (uint64_t)&__block_literal_global_16_4812, 0.25, 2.5, 0.0, 2.625, 0.0, 0.0);
  obj = (id)objc_claimAutoreleasedReturnValue();
  Espresso::ANECompilerEngine::generate_custom_neuron_params(1, (uint64_t)&__block_literal_global_16_4812, 2.625, 7.0, 2.5, 8.75, 0.0, 0.5);
  v65 = (id)objc_claimAutoreleasedReturnValue();
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t(__p, a3);
  v8 = v86;
  v86 = CFSTR("NeuronCustom");

  if (SHIBYTE(v80) >= 0)
    v9 = HIBYTE(v80);
  else
    v9 = (size_t)__p[1];
  std::string::basic_string[abi:ne180100]((uint64_t)v67, v9 + 9);
  if (SHIBYTE(v68) >= 0)
    v10 = v67;
  else
    v10 = (void **)v67[0];
  if (v9)
  {
    if (SHIBYTE(v80) >= 0)
      v11 = __p;
    else
      v11 = (void **)__p[0];
    memmove(v10, v11, v9);
  }
  strcpy((char *)v10 + v9, "_pre_bias");
  if (SHIBYTE(v80) < 0)
    operator delete(__p[0]);
  *(_OWORD *)__p = *(_OWORD *)v67;
  v80 = v68;
  objc_storeStrong(v87, obj);
  v12 = v98;
  if ((unint64_t)v98 >= v99)
  {
    v14 = 0x8E38E38E38E38E39 * (((char *)v98 - (char *)v97) >> 4);
    if (v14 + 1 > 0x1C71C71C71C71C7)
      goto LABEL_110;
    v15 = 0x1C71C71C71C71C72 * ((uint64_t)(v99 - (_QWORD)v97) >> 4);
    if (v15 <= v14 + 1)
      v15 = v14 + 1;
    if (0x8E38E38E38E38E39 * ((uint64_t)(v99 - (_QWORD)v97) >> 4) >= 0xE38E38E38E38E3)
      v16 = 0x1C71C71C71C71C7;
    else
      v16 = v15;
    v70 = &v99;
    if (v16)
      v16 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v16);
    else
      v17 = 0;
    v67[0] = (void *)v16;
    v67[1] = (void *)(v16 + 144 * v14);
    v68 = (char *)v67[1];
    v69 = v16 + 144 * v17;
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)v67[1], (uint64_t)__p);
    v68 += 144;
    std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer((uint64_t *)&v97, v67);
    v13 = v98;
    std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)v67);
  }
  else
  {
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v98, (uint64_t)__p);
    v13 = v12 + 6;
  }
  v98 = v13;
  objc_storeStrong(v87, v65);
  v18 = v98;
  if ((unint64_t)v98 < v99)
  {
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v98, (uint64_t)__p);
    v19 = v18 + 6;
    goto LABEL_38;
  }
  v20 = 0x8E38E38E38E38E39 * (((char *)v98 - (char *)v97) >> 4);
  if (v20 + 1 > 0x1C71C71C71C71C7)
LABEL_110:
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  v21 = 0x1C71C71C71C71C72 * ((uint64_t)(v99 - (_QWORD)v97) >> 4);
  if (v21 <= v20 + 1)
    v21 = v20 + 1;
  if (0x8E38E38E38E38E39 * ((uint64_t)(v99 - (_QWORD)v97) >> 4) >= 0xE38E38E38E38E3)
    v22 = 0x1C71C71C71C71C7;
  else
    v22 = v21;
  v70 = &v99;
  if (v22)
    v22 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v22);
  else
    v23 = 0;
  v67[0] = (void *)v22;
  v67[1] = (void *)(v22 + 144 * v20);
  v68 = (char *)v67[1];
  v69 = v22 + 144 * v23;
  std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)v67[1], (uint64_t)__p);
  v68 += 144;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer((uint64_t *)&v97, v67);
  v19 = v98;
  std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)v67);
LABEL_38:
  v98 = v19;
  v24 = (void *)objc_opt_new();
  objc_msgSend(v24, "setObject:forKeyedSubscript:", CFSTR("Add"), CFSTR("Type"));
  v25 = v86;
  v86 = CFSTR("ElementWise");

  objc_storeStrong(v87, v24);
  v26 = v98;
  if ((unint64_t)v98 >= v99)
  {
    v28 = 0x8E38E38E38E38E39 * (((char *)v98 - (char *)v97) >> 4);
    if (v28 + 1 > 0x1C71C71C71C71C7)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v29 = 0x1C71C71C71C71C72 * ((uint64_t)(v99 - (_QWORD)v97) >> 4);
    if (v29 <= v28 + 1)
      v29 = v28 + 1;
    if (0x8E38E38E38E38E39 * ((uint64_t)(v99 - (_QWORD)v97) >> 4) >= 0xE38E38E38E38E3)
      v30 = 0x1C71C71C71C71C7;
    else
      v30 = v29;
    v70 = &v99;
    if (v30)
      v30 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v30);
    else
      v31 = 0;
    v67[0] = (void *)v30;
    v67[1] = (void *)(v30 + 144 * v28);
    v68 = (char *)v67[1];
    v69 = v30 + 144 * v31;
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)v67[1], (uint64_t)__p);
    v68 += 144;
    std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer((uint64_t *)&v97, v67);
    v27 = v98;
    std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)v67);
  }
  else
  {
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v98, (uint64_t)__p);
    v27 = v26 + 6;
  }
  v98 = v27;
  (*(void (**)(_QWORD *, uint64_t, std::string **, uint64_t))(*a1 + 40))(a1, a2, &v97, 1);
  v32 = v97;
  for (i = v98; i != v32; std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::destroy[abi:ne180100]((uint64_t)i))
    i -= 6;
  v98 = v32;
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t(v67, a3);
  v35 = v71;
  for (j = v72; j != v35; --j)
  {
    if (SHIBYTE(j[-1].__r_.__value_.__r.__words[2]) < 0)
      operator delete(j[-1].__r_.__value_.__l.__data_);
  }
  v72 = v35;
  if ((unint64_t)v35 >= v73)
  {
    v37 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v71, (uint64_t)__p);
  }
  else
  {
    if (SHIBYTE(v80) < 0)
    {
      std::string::__init_copy_ctor_external(v35, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    }
    else
    {
      v36 = *(_OWORD *)__p;
      v35->__r_.__value_.__r.__words[2] = (std::string::size_type)v80;
      *(_OWORD *)&v35->__r_.__value_.__l.__data_ = v36;
    }
    v37 = v35 + 1;
  }
  v72 = v37;
  v38 = (void *)objc_opt_new();
  objc_storeStrong(&v78, v38);
  v39 = v77;
  v77 = CFSTR("GOC");

  v40 = a1[8];
  v41 = (std::__shared_weak_count *)a1[9];
  if (v41)
  {
    p_shared_owners = (unint64_t *)&v41->__shared_owners_;
    do
      v43 = __ldxr(p_shared_owners);
    while (__stxr(v43 + 1, p_shared_owners));
  }
  if (v40)
  {
    v44 = *(float **)(v40 + 16);
    _S8 = *v44;
    v46 = *(int *)(v40 + 8);
    if ((_DWORD)v46)
    {
      while (1)
      {
        v47 = _S8 != *v44;
        if (_S8 != *v44)
          break;
        ++v44;
        if (!--v46)
        {
          v47 = 0;
          if (v41)
            goto LABEL_78;
          goto LABEL_82;
        }
      }
      _S8 = 1.0;
      if (!v41)
        goto LABEL_82;
    }
    else
    {
      v47 = 1;
      if (!v41)
        goto LABEL_82;
    }
  }
  else
  {
    v47 = 1;
    _S8 = 0.0;
    if (!v41)
      goto LABEL_82;
  }
LABEL_78:
  v48 = (unint64_t *)&v41->__shared_owners_;
  do
    v49 = __ldaxr(v48);
  while (__stlxr(v49 - 1, v48));
  if (!v49)
  {
    ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
    std::__shared_weak_count::__release_weak(v41);
  }
LABEL_82:
  if (((v47 | a4 ^ 1) & 1) != 0)
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithShort:", 14336);
  }
  else
  {
    *(_BYTE *)((*(uint64_t (**)(_QWORD *))(*a1 + 104))(a1) + 40) = 1;
    __asm { FCVT            H0, S8 }
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithShort:", _H0);
    v56 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v38, "setObject:forKeyedSubscript:", v56, CFSTR("ScaleScalar"));

    _S0 = _S8 * 0.5;
    __asm { FCVT            H0, S0 }
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithShort:", SLOWORD(_S0));
  }
  v50 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v38, "setObject:forKeyedSubscript:", v50, CFSTR("BiasScalar"));

  v58 = v98;
  if ((unint64_t)v98 >= v99)
  {
    v60 = 0x8E38E38E38E38E39 * (((char *)v98 - (char *)v97) >> 4);
    if (v60 + 1 > 0x1C71C71C71C71C7)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v61 = 0x1C71C71C71C71C72 * ((uint64_t)(v99 - (_QWORD)v97) >> 4);
    if (v61 <= v60 + 1)
      v61 = v60 + 1;
    if (0x8E38E38E38E38E39 * ((uint64_t)(v99 - (_QWORD)v97) >> 4) >= 0xE38E38E38E38E3)
      v62 = 0x1C71C71C71C71C7;
    else
      v62 = v61;
    v104 = &v99;
    if (v62)
      v62 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v62);
    else
      v63 = 0;
    v100 = (char **)v62;
    v101 = (std::string *)(v62 + 144 * v60);
    v102 = v101;
    v103 = v62 + 144 * v63;
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v101, (uint64_t)v67);
    v102 += 6;
    std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer((uint64_t *)&v97, &v100);
    v59 = v98;
    std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&v100);
  }
  else
  {
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v98, (uint64_t)v67);
    v59 = v58 + 6;
  }
  v98 = v59;

  if (v75 < 0)
    operator delete(v74);
  v100 = (char **)&v71;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v100);
  v100 = (char **)&v69;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v100);
  if (SHIBYTE(v68) < 0)
    operator delete(v67[0]);
  (*(void (**)(_QWORD *, uint64_t, std::string **))(*a1 + 32))(a1, a2, &v97);

  if (v84 < 0)
    operator delete(v83);
  v67[0] = &v82;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v67);
  v67[0] = &v81;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v67);
  if (SHIBYTE(v80) < 0)
    operator delete(__p[0]);

  if (v93 < 0)
    operator delete(v92);
  __p[0] = &v91;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  __p[0] = &v90;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (v89 < 0)
    operator delete(v88[0]);
  v88[0] = &v97;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)v88);
}

void sub_191481E24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, id a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,id a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void **a50)
{
  void *v50;
  uint64_t v51;

  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t(&a13);

  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t(&a31);
  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t((id *)&a50);
  a50 = (void **)(v51 - 168);
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100](&a50);
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::ane_kernel::add_softmax_inverse_units_extended_lut(Espresso::ANECompilerEngine::ane_kernel *this, Espresso::ANECompilerEngine::compiler *a2, uint64_t a3, unint64_t a4, id *a5)
{
  int v7;
  unint64_t v8;
  unint64_t v9;
  float *v10;
  float v11;
  float *v12;
  float *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  float *v19;
  int v20;
  uint64_t v21;
  const unsigned __int8 *v22;
  float *v23;
  _WORD *v24;
  unint64_t v25;
  int v26;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  __CFString *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  uint64_t weights_file_index;
  void *v45;
  void *v46;
  unint64_t v47;
  uint64_t v48;
  int64x2_t v49;
  uint64x2_t v50;
  int64x2_t v51;
  float v52;
  float v53;
  void *v54;
  id v55;
  __CFString *v56;
  __CFString *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  uint64_t v63;
  void *v64;
  void *v65;
  std::string *v66;
  std::string *v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  std::string *v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  std::string *v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  uint64_t v86;
  void *v88[2];
  char v89;
  uint64_t v90;
  uint64_t v91;
  void *__p;
  char v93;
  id v94;
  __CFString *v95;
  id v96;
  int v97;
  int v98;
  _OWORD v99[8];
  int v100;
  void *v101[2];
  char v102;
  uint64_t v103;
  uint64_t v104;
  void *v105;
  char v106;
  id v107;
  __CFString *v108;
  id v109;
  _OWORD v110[8];
  int v111;
  void *v112[2];
  char v113;
  uint64_t v114;
  uint64_t v115;
  void *v116;
  char v117;
  id v118;
  __CFString *v119;
  id v120;
  int v121;
  int v122;
  uint64_t v123;
  std::__shared_weak_count *v124;
  uint64_t v125;
  std::__shared_weak_count *v126;
  float *v127;
  float *v128;
  unint64_t v129;
  uint64_t v130;
  std::string *v131;
  unint64_t v132;
  void **v133;
  std::string *v134;
  std::string *v135;
  unint64_t v136;
  unint64_t *v137;

  v7 = *((unsigned __int8 *)a2 + 552);
  v130 = 0;
  v131 = 0;
  v132 = 0;
  v8 = (unint64_t)fmax((double)(unint64_t)ceil(log2((double)a4)), 1.0);
  v127 = 0;
  v128 = 0;
  v129 = 0;
  std::vector<float>::reserve((void **)&v127, v8);
  if (v8)
  {
    v9 = 0;
    v10 = v128;
    do
    {
      v11 = 1.0 / exp2((double)v9);
      if ((unint64_t)v10 >= v129)
      {
        v13 = v127;
        v14 = v10 - v127;
        v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 62)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v16 = v129 - (_QWORD)v127;
        if ((uint64_t)(v129 - (_QWORD)v127) >> 1 > v15)
          v15 = v16 >> 1;
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
          v17 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v17 = v15;
        if (v17)
        {
          v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v17);
          v13 = v127;
          v10 = v128;
        }
        else
        {
          v18 = 0;
        }
        v19 = (float *)(v17 + 4 * v14);
        *v19 = v11;
        v12 = v19 + 1;
        while (v10 != v13)
        {
          v20 = *((_DWORD *)v10-- - 1);
          *((_DWORD *)v19-- - 1) = v20;
        }
        v127 = v19;
        v128 = v12;
        v129 = v17 + 4 * v18;
        if (v13)
          operator delete(v13);
      }
      else
      {
        *v10 = v11;
        v12 = v10 + 1;
      }
      v128 = v12;
      ++v9;
      v10 = v12;
    }
    while (v9 != v8);
  }
  std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v125, 2 * v8, 1, 1, 1);
  v21 = v125;
  v22 = *(const unsigned __int8 **)(v125 + 16);
  if (v8)
  {
    v23 = v127;
    v24 = *(_WORD **)(v125 + 16);
    v25 = v8;
    do
    {
      v26 = *(_DWORD *)v23++;
      _S0 = v26;
      __asm { FCVT            H0, S0 }
      *v24++ = _S0;
      --v25;
    }
    while (v25);
  }
  v32 = v126;
  v123 = v21;
  v124 = v126;
  if (v126)
  {
    p_shared_owners = (unint64_t *)&v126->__shared_owners_;
    do
      v34 = __ldxr(p_shared_owners);
    while (__stxr(v34 + 1, p_shared_owners));
    v22 = *(const unsigned __int8 **)(v21 + 16);
  }
  v35 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler *)((char *)a2 + 128), v22, *(int *)(v21 + 8));
  if (v32)
  {
    v36 = (unint64_t *)&v32->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t(v112, a5);
  v38 = v119;
  v119 = CFSTR("Conv");

  v39 = (void *)objc_opt_new();
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", a3);
  v40 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v39, "setObject:forKeyedSubscript:", v40, CFSTR("Channels"));

  objc_msgSend(v39, "setObject:forKeyedSubscript:", CFSTR("Conv"), CFSTR("Type"));
  objc_msgSend(v39, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], CFSTR("KernelGroupReuse"));
  objc_msgSend(v39, "setObject:forKeyedSubscript:", CFSTR("Float16"), CFSTR("KernelType"));
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 1);
  v41 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v39, "setObject:forKeyedSubscript:", v41, CFSTR("KernelWidth"));

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 1);
  v42 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v39, "setObject:forKeyedSubscript:", v42, CFSTR("KernelHeight"));

  v43 = (void *)MEMORY[0x1E0CB37E8];
  if (v7)
    weights_file_index = 0;
  else
  objc_msgSend(v43, "numberWithUnsignedLong:", weights_file_index, this);
  v45 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v39, "setObject:forKeyedSubscript:", v45, CFSTR("KernelIndex"));

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v35);
  v46 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v39, "setObject:forKeyedSubscript:", v46, CFSTR("KernelOffset"));

  objc_msgSend(v39, "setObject:forKeyedSubscript:", &unk_1E2DEE040, CFSTR("Step"));
  objc_msgSend(v39, "setObject:forKeyedSubscript:", &unk_1E2DEDB20, CFSTR("PadLeft"));
  objc_msgSend(v39, "setObject:forKeyedSubscript:", &unk_1E2DEDB20, CFSTR("PadRight"));
  objc_msgSend(v39, "setObject:forKeyedSubscript:", &unk_1E2DEDB20, CFSTR("PadTop"));
  objc_msgSend(v39, "setObject:forKeyedSubscript:", &unk_1E2DEDB20, CFSTR("PadBot"));
  objc_msgSend(v39, "setObject:forKeyedSubscript:", CFSTR("Zero"), CFSTR("PaddingMode"));
  v47 = v8 * a3;
  v122 = a3;
  v121 = v47;
  objc_storeStrong(&v120, v39);
  v48 = 0;
  v49 = (int64x2_t)xmmword_191A82A80;
  v50 = (uint64x2_t)vdupq_n_s64(0x21uLL);
  v51 = vdupq_n_s64(2uLL);
  do
  {
    if ((vmovn_s64((int64x2_t)vcgtq_u64(v50, (uint64x2_t)v49)).u8[0] & 1) != 0)
    {
      v52 = 1.0 / ((float)(int)v48 * 0.03125 + 1.0);
      *((float *)v110 + v48) = v52;
    }
    if ((vmovn_s64((int64x2_t)vcgtq_u64((uint64x2_t)vdupq_n_s64(0x21uLL), *(uint64x2_t *)&v49)).i32[1] & 1) != 0)
    {
      v53 = 1.0 / ((float)(v48 + 1) * 0.03125 + 1.0);
      *((float *)v110 + v48 + 1) = v53;
    }
    v48 += 2;
    v49 = vaddq_s64(v49, v51);
  }
  while (v48 != 34);
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t(v101, a5);
  v99[6] = v110[6];
  v99[7] = v110[7];
  v100 = v111;
  v99[2] = v110[2];
  v99[3] = v110[3];
  v99[4] = v110[4];
  v99[5] = v110[5];
  v99[0] = v110[0];
  v99[1] = v110[1];
  Espresso::ANECompilerEngine::generate_v1_custom_neuron_from_values((float *)v99, 1, 0.99951, 0.0, 2.0, 0.0, 1.0, 2.0, 0.00001);
  v54 = (void *)objc_claimAutoreleasedReturnValue();
  v55 = v109;
  v109 = v54;

  v56 = v108;
  v108 = CFSTR("NeuronCustom");

  Espresso::ANECompilerEngine::compiler::unit_t::unit_t(v88, a5);
  v57 = v95;
  v95 = CFSTR("Conv");

  v58 = (void *)objc_opt_new();
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", v47);
  v59 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v58, "setObject:forKeyedSubscript:", v59, CFSTR("Channels"));

  objc_msgSend(v58, "setObject:forKeyedSubscript:", CFSTR("Conv"), CFSTR("Type"));
  objc_msgSend(v58, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], CFSTR("KernelGroupReuse"));
  objc_msgSend(v58, "setObject:forKeyedSubscript:", CFSTR("Float16"), CFSTR("KernelType"));
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 1);
  v60 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v58, "setObject:forKeyedSubscript:", v60, CFSTR("KernelWidth"));

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 1);
  v61 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v58, "setObject:forKeyedSubscript:", v61, CFSTR("KernelHeight"));

  v62 = (void *)MEMORY[0x1E0CB37E8];
  if (v7)
    v63 = 0;
  else
  objc_msgSend(v62, "numberWithUnsignedLong:", v63);
  v64 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v58, "setObject:forKeyedSubscript:", v64, CFSTR("KernelIndex"));

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v35);
  v65 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v58, "setObject:forKeyedSubscript:", v65, CFSTR("KernelOffset"));

  objc_msgSend(v58, "setObject:forKeyedSubscript:", &unk_1E2DEE058, CFSTR("Step"));
  objc_msgSend(v58, "setObject:forKeyedSubscript:", &unk_1E2DEDB20, CFSTR("PadLeft"));
  objc_msgSend(v58, "setObject:forKeyedSubscript:", &unk_1E2DEDB20, CFSTR("PadRight"));
  objc_msgSend(v58, "setObject:forKeyedSubscript:", &unk_1E2DEDB20, CFSTR("PadTop"));
  objc_msgSend(v58, "setObject:forKeyedSubscript:", &unk_1E2DEDB20, CFSTR("PadBot"));
  objc_msgSend(v58, "setObject:forKeyedSubscript:", CFSTR("Zero"), CFSTR("PaddingMode"));
  v97 = a3;
  v98 = a3;
  objc_storeStrong(&v96, v58);
  v66 = v131;
  if ((unint64_t)v131 >= v132)
  {
    v68 = 0x8E38E38E38E38E39 * (((uint64_t)v131 - v130) >> 4);
    if (v68 + 1 > 0x1C71C71C71C71C7)
      goto LABEL_101;
    v69 = 0x1C71C71C71C71C72 * ((uint64_t)(v132 - v130) >> 4);
    if (v69 <= v68 + 1)
      v69 = v68 + 1;
    if (0x8E38E38E38E38E39 * ((uint64_t)(v132 - v130) >> 4) >= 0xE38E38E38E38E3)
      v70 = 0x1C71C71C71C71C7;
    else
      v70 = v69;
    v137 = &v132;
    if (v70)
      v70 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v70);
    else
      v71 = 0;
    v133 = (void **)v70;
    v134 = (std::string *)(v70 + 144 * v68);
    v135 = v134;
    v136 = v70 + 144 * v71;
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v134, (uint64_t)v112);
    v135 += 6;
    std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v130, &v133);
    v67 = v131;
    std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&v133);
  }
  else
  {
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v131, (uint64_t)v112);
    v67 = v66 + 6;
  }
  v131 = v67;
  if ((unint64_t)v67 >= v132)
  {
    v73 = 0x8E38E38E38E38E39 * (((uint64_t)v67 - v130) >> 4);
    if (v73 + 1 > 0x1C71C71C71C71C7)
      goto LABEL_101;
    v74 = 0x1C71C71C71C71C72 * ((uint64_t)(v132 - v130) >> 4);
    if (v74 <= v73 + 1)
      v74 = v73 + 1;
    if (0x8E38E38E38E38E39 * ((uint64_t)(v132 - v130) >> 4) >= 0xE38E38E38E38E3)
      v75 = 0x1C71C71C71C71C7;
    else
      v75 = v74;
    v137 = &v132;
    if (v75)
      v75 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v75);
    else
      v76 = 0;
    v133 = (void **)v75;
    v134 = (std::string *)(v75 + 144 * v73);
    v135 = v134;
    v136 = v75 + 144 * v76;
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v134, (uint64_t)v101);
    v135 += 6;
    std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v130, &v133);
    v72 = v131;
    std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&v133);
  }
  else
  {
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v67, (uint64_t)v101);
    v72 = v67 + 6;
  }
  v131 = v72;
  if ((unint64_t)v72 < v132)
  {
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v72, (uint64_t)v88);
    v77 = v72 + 6;
    goto LABEL_80;
  }
  v78 = 0x8E38E38E38E38E39 * (((uint64_t)v72 - v130) >> 4);
  if (v78 + 1 > 0x1C71C71C71C71C7)
LABEL_101:
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  v79 = 0x1C71C71C71C71C72 * ((uint64_t)(v132 - v130) >> 4);
  if (v79 <= v78 + 1)
    v79 = v78 + 1;
  if (0x8E38E38E38E38E39 * ((uint64_t)(v132 - v130) >> 4) >= 0xE38E38E38E38E3)
    v80 = 0x1C71C71C71C71C7;
  else
    v80 = v79;
  v137 = &v132;
  if (v80)
    v80 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v80);
  else
    v81 = 0;
  v133 = (void **)v80;
  v134 = (std::string *)(v80 + 144 * v78);
  v135 = v134;
  v136 = v80 + 144 * v81;
  std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v134, (uint64_t)v88);
  v135 += 6;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v130, &v133);
  v77 = v131;
  std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&v133);
LABEL_80:
  v131 = v77;
  (*(void (**)(uint64_t, Espresso::ANECompilerEngine::compiler *, uint64_t *))(*(_QWORD *)v86 + 32))(v86, a2, &v130);

  if (v93 < 0)
    operator delete(__p);
  v133 = (void **)&v91;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v133);
  v133 = (void **)&v90;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v133);
  if (v89 < 0)
    operator delete(v88[0]);

  if (v106 < 0)
    operator delete(v105);
  v88[0] = &v104;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v88);
  v88[0] = &v103;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v88);
  if (v102 < 0)
    operator delete(v101[0]);

  if (v117 < 0)
    operator delete(v116);
  v101[0] = &v115;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v101);
  v101[0] = &v114;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v101);
  if (v113 < 0)
    operator delete(v112[0]);
  v82 = v126;
  if (v126)
  {
    v83 = (unint64_t *)&v126->__shared_owners_;
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  if (v127)
  {
    v128 = v127;
    operator delete(v127);
  }
  v112[0] = &v130;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)v112);
}

void sub_191482ABC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, id a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,id a47)
{
  void *v47;
  void *v48;
  uint64_t v49;
  void *v51;

  std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer(v49 - 152);

  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t(&a11);
  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t(&a47);

  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t((id *)&STACK[0x248]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v49 - 216);
  v51 = *(void **)(v49 - 200);
  if (v51)
  {
    *(_QWORD *)(v49 - 192) = v51;
    operator delete(v51);
  }
  STACK[0x248] = v49 - 176;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x248]);
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::ane_kernel::add_softmax_exp_units(uint64_t a1, uint64_t a2, id *a3)
{
  __CFString *v5;
  void *v6;
  void *v7;
  std::string *v8;
  std::string *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  std::string *v14;
  std::string *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  __CFString *v21;
  std::string *v22;
  std::string *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  void *v28[2];
  char v29;
  uint64_t v30;
  uint64_t v31;
  void *__p;
  char v33;
  id v34;
  __CFString *v35;
  id v36[2];
  uint64_t v37;
  std::string *v38;
  unint64_t v39;
  void **v40;
  std::string *v41;
  std::string *v42;
  unint64_t v43;
  unint64_t *v44;

  v37 = 0;
  v38 = 0;
  v39 = 0;
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t(v28, a3);
  v5 = v35;
  v35 = CFSTR("NeuronCustom");

  Espresso::ANECompilerEngine::generate_custom_neuron_params(0, (uint64_t)&__block_literal_global_61_4805, -12.201, -5.8186, -25.0, -5.6241, 0.0, 0.0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  Espresso::ANECompilerEngine::generate_custom_neuron_params(0, (uint64_t)&__block_literal_global_61_4805, -5.6241, -0.17043, -5.8186, 0.0, 0.0, 1.0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_storeStrong(v36, v6);
  v8 = v38;
  if ((unint64_t)v38 >= v39)
  {
    v10 = 0x8E38E38E38E38E39 * (((uint64_t)v38 - v37) >> 4);
    if (v10 + 1 > 0x1C71C71C71C71C7)
      goto LABEL_42;
    v11 = 0x1C71C71C71C71C72 * ((uint64_t)(v39 - v37) >> 4);
    if (v11 <= v10 + 1)
      v11 = v10 + 1;
    if (0x8E38E38E38E38E39 * ((uint64_t)(v39 - v37) >> 4) >= 0xE38E38E38E38E3)
      v12 = 0x1C71C71C71C71C7;
    else
      v12 = v11;
    v44 = &v39;
    if (v12)
      v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v12);
    else
      v13 = 0;
    v40 = (void **)v12;
    v41 = (std::string *)(v12 + 144 * v10);
    v42 = v41;
    v43 = v12 + 144 * v13;
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v41, (uint64_t)v28);
    v42 += 6;
    std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v37, &v40);
    v9 = v38;
    std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&v40);
  }
  else
  {
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v38, (uint64_t)v28);
    v9 = v8 + 6;
  }
  v38 = v9;
  objc_storeStrong(v36, v7);
  v14 = v38;
  if ((unint64_t)v38 < v39)
  {
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v38, (uint64_t)v28);
    v15 = v14 + 6;
    goto LABEL_25;
  }
  v16 = 0x8E38E38E38E38E39 * (((uint64_t)v38 - v37) >> 4);
  if (v16 + 1 > 0x1C71C71C71C71C7)
LABEL_42:
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  v17 = 0x1C71C71C71C71C72 * ((uint64_t)(v39 - v37) >> 4);
  if (v17 <= v16 + 1)
    v17 = v16 + 1;
  if (0x8E38E38E38E38E39 * ((uint64_t)(v39 - v37) >> 4) >= 0xE38E38E38E38E3)
    v18 = 0x1C71C71C71C71C7;
  else
    v18 = v17;
  v44 = &v39;
  if (v18)
    v18 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v18);
  else
    v19 = 0;
  v40 = (void **)v18;
  v41 = (std::string *)(v18 + 144 * v16);
  v42 = v41;
  v43 = v18 + 144 * v19;
  std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v41, (uint64_t)v28);
  v42 += 6;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v37, &v40);
  v15 = v38;
  std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&v40);
LABEL_25:
  v38 = v15;
  v20 = (void *)objc_opt_new();
  objc_msgSend(v20, "setObject:forKeyedSubscript:", CFSTR("Add"), CFSTR("Type"));
  v21 = v35;
  v35 = CFSTR("ElementWise");

  objc_storeStrong(v36, v20);
  v22 = v38;
  if ((unint64_t)v38 >= v39)
  {
    v24 = 0x8E38E38E38E38E39 * (((uint64_t)v38 - v37) >> 4);
    if (v24 + 1 > 0x1C71C71C71C71C7)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v25 = 0x1C71C71C71C71C72 * ((uint64_t)(v39 - v37) >> 4);
    if (v25 <= v24 + 1)
      v25 = v24 + 1;
    if (0x8E38E38E38E38E39 * ((uint64_t)(v39 - v37) >> 4) >= 0xE38E38E38E38E3)
      v26 = 0x1C71C71C71C71C7;
    else
      v26 = v25;
    v44 = &v39;
    if (v26)
      v26 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v26);
    else
      v27 = 0;
    v40 = (void **)v26;
    v41 = (std::string *)(v26 + 144 * v24);
    v42 = v41;
    v43 = v26 + 144 * v27;
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v41, (uint64_t)v28);
    v42 += 6;
    std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v37, &v40);
    v23 = v38;
    std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&v40);
  }
  else
  {
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v38, (uint64_t)v28);
    v23 = v22 + 6;
  }
  v38 = v23;
  (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a1 + 40))(a1, a2, &v37, 1);

  if (v33 < 0)
    operator delete(__p);
  v40 = (void **)&v31;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v40);
  v40 = (void **)&v30;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v40);
  if (v29 < 0)
    operator delete(v28[0]);
  v28[0] = &v37;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)v28);
}

void sub_191483050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  void *v27;
  void *v28;
  void *v29;
  uint64_t v30;

  std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer(v30 - 136);

  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t((id *)&a9);
  a9 = (void **)&a27;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::ane_kernel::add_high_precision_rsqrt_units_extended_lut(Espresso::ANECompilerEngine::ane_kernel *this, Espresso::ANECompilerEngine::compiler *a2, id *a3, uint64_t a4, int32x2_t a5)
{
  int i;
  float v10;
  float *v11;
  float *v12;
  float *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  float *v19;
  int v20;
  float v21;
  float *v22;
  float *v23;
  float *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  float *v30;
  int v31;
  uint64_t v32;
  float *v33;
  uint64_t v34;
  const unsigned __int8 *v35;
  uint64_t v41;
  float *v42;
  uint64_t v43;
  std::__shared_weak_count *v45;
  unint64_t *p_shared_owners;
  unint64_t v47;
  uint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  __CFString *v58;
  void *v59;
  void *v60;
  void *v61;
  uint64_t weights_file_index;
  void *v63;
  void *v64;
  uint64_t v65;
  float32x2_t v66;
  uint64x2_t v67;
  int32x2_t v70;
  float32x2_t v71;
  float v72;
  void *v73;
  uint64_t v74;
  id v75;
  __CFString *v76;
  __CFString *v77;
  void *v78;
  void *v79;
  void *v80;
  uint64_t v81;
  void *v82;
  void *v83;
  std::string *v84;
  std::string *v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  std::string *v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  std::string *v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  Espresso::ANECompilerEngine::ane_kernel *v106;
  uint64_t v107;
  int v108;
  int64x2_t v109;
  uint64x2_t v110;
  float v111;
  float v112;
  unsigned __int8 v113;
  int64x2_t v115;
  void *v116[2];
  char v117;
  uint64_t v118;
  uint64_t v119;
  void *__p;
  char v121;
  id v122;
  __CFString *v123;
  id v124;
  int v125;
  int v126;
  _OWORD v127[8];
  int v128;
  void *v129[2];
  char v130;
  uint64_t v131;
  uint64_t v132;
  void *v133;
  char v134;
  id v135;
  __CFString *v136;
  id v137;
  _OWORD v138[8];
  int v139;
  void *v140[2];
  char v141;
  uint64_t v142;
  uint64_t v143;
  void *v144;
  char v145;
  id v146;
  __CFString *v147;
  id v148;
  int v149;
  int v150;
  uint64_t v151;
  std::__shared_weak_count *v152;
  uint64_t v153;
  std::__shared_weak_count *v154;
  uint64_t v155;
  std::__shared_weak_count *v156;
  uint64_t v157;
  std::__shared_weak_count *v158;
  float *v159;
  float *v160;
  unint64_t v161;
  float *v162;
  float *v163;
  unint64_t v164;
  uint64_t v165;
  std::string *v166;
  unint64_t v167;
  void **v168;
  std::string *v169;
  std::string *v170;
  unint64_t v171;
  unint64_t *v172;

  v108 = *((unsigned __int8 *)a2 + 552);
  v165 = 0;
  v166 = 0;
  v167 = 0;
  v162 = 0;
  v163 = 0;
  v164 = 0;
  v159 = 0;
  v160 = 0;
  v161 = 0;
  std::vector<float>::reserve((void **)&v162, 0xFuLL);
  std::vector<float>::reserve((void **)&v159, 0xFuLL);
  for (i = -7; i != 8; ++i)
  {
    v10 = 1.0 / exp2((double)i + (double)i);
    v11 = v163;
    if ((unint64_t)v163 >= v164)
    {
      v13 = v162;
      v14 = v163 - v162;
      v15 = v14 + 1;
      if ((unint64_t)(v14 + 1) >> 62)
        goto LABEL_131;
      v16 = v164 - (_QWORD)v162;
      if ((uint64_t)(v164 - (_QWORD)v162) >> 1 > v15)
        v15 = v16 >> 1;
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
        v17 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v17 = v15;
      if (v17)
      {
        v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v17);
        v13 = v162;
        v11 = v163;
      }
      else
      {
        v18 = 0;
      }
      v19 = (float *)(v17 + 4 * v14);
      *v19 = v10;
      v12 = v19 + 1;
      while (v11 != v13)
      {
        v20 = *((_DWORD *)v11-- - 1);
        *((_DWORD *)v19-- - 1) = v20;
      }
      v162 = v19;
      v163 = v12;
      v164 = v17 + 4 * v18;
      if (v13)
        operator delete(v13);
    }
    else
    {
      *v163 = v10;
      v12 = v11 + 1;
    }
    v21 = fabsf(sqrtf(v10));
    v163 = v12;
    v22 = v160;
    if ((unint64_t)v160 >= v161)
    {
      v24 = v159;
      v25 = v160 - v159;
      v26 = v25 + 1;
      if ((unint64_t)(v25 + 1) >> 62)
LABEL_131:
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v27 = v161 - (_QWORD)v159;
      if ((uint64_t)(v161 - (_QWORD)v159) >> 1 > v26)
        v26 = v27 >> 1;
      if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFFCLL)
        v28 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v28 = v26;
      if (v28)
      {
        v28 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v28);
        v24 = v159;
        v22 = v160;
      }
      else
      {
        v29 = 0;
      }
      v30 = (float *)(v28 + 4 * v25);
      *v30 = v21;
      v23 = v30 + 1;
      while (v22 != v24)
      {
        v31 = *((_DWORD *)v22-- - 1);
        *((_DWORD *)v30-- - 1) = v31;
      }
      v159 = v30;
      v160 = v23;
      v161 = v28 + 4 * v29;
      if (v24)
        operator delete(v24);
    }
    else
    {
      *v160 = v21;
      v23 = v22 + 1;
    }
    v160 = v23;
  }
  std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v157, 30, 1, 1, 1);
  std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v155, 30, 1, 1, 1);
  v32 = 0;
  v33 = v162;
  v34 = v157;
  v35 = *(const unsigned __int8 **)(v157 + 16);
  do
  {
    _S0 = v33[v32];
    __asm { FCVT            H0, S0 }
    *(_WORD *)&v35[2 * v32++] = LOWORD(_S0);
  }
  while (v32 != 15);
  v41 = 0;
  v42 = v159;
  v43 = *(_QWORD *)(v155 + 16);
  do
  {
    _S0 = v42[v41];
    __asm { FCVT            H0, S0 }
    *(_WORD *)(v43 + 2 * v41++) = LOWORD(_S0);
  }
  while (v41 != 15);
  v45 = v158;
  v153 = v34;
  v154 = v158;
  if (v158)
  {
    p_shared_owners = (unint64_t *)&v158->__shared_owners_;
    do
      v47 = __ldxr(p_shared_owners);
    while (__stxr(v47 + 1, p_shared_owners));
    v35 = *(const unsigned __int8 **)(v34 + 16);
  }
  v106 = this;
  v48 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler *)((char *)a2 + 128), v35, *(int *)(v34 + 8));
  if (v45)
  {
    v49 = (unint64_t *)&v45->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  v51 = v155;
  v52 = v156;
  v151 = v155;
  v152 = v156;
  if (v156)
  {
    v53 = (unint64_t *)&v156->__shared_owners_;
    do
      v54 = __ldxr(v53);
    while (__stxr(v54 + 1, v53));
  }
  v55 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler *)((char *)a2 + 128), *(const unsigned __int8 **)(v51 + 16), *(int *)(v51 + 8));
  if (v52)
  {
    v56 = (unint64_t *)&v52->__shared_owners_;
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t(v140, a3);
  v58 = v147;
  v147 = CFSTR("Conv");

  v59 = (void *)objc_opt_new();
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a4);
  v60 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v59, "setObject:forKeyedSubscript:", v60, CFSTR("Channels"));

  objc_msgSend(v59, "setObject:forKeyedSubscript:", CFSTR("Conv"), CFSTR("Type"));
  objc_msgSend(v59, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], CFSTR("KernelGroupReuse"));
  objc_msgSend(v59, "setObject:forKeyedSubscript:", CFSTR("Float16"), CFSTR("KernelType"));
  objc_msgSend(v59, "setObject:forKeyedSubscript:", &unk_1E2DEDB08, CFSTR("KernelWidth"));
  objc_msgSend(v59, "setObject:forKeyedSubscript:", &unk_1E2DEDB08, CFSTR("KernelHeight"));
  v61 = (void *)MEMORY[0x1E0CB37E8];
  if (v108)
    weights_file_index = 0;
  else
  objc_msgSend(v61, "numberWithUnsignedLong:", weights_file_index, v106);
  v63 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v59, "setObject:forKeyedSubscript:", v63, CFSTR("KernelIndex"));

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v48);
  v64 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v59, "setObject:forKeyedSubscript:", v64, CFSTR("KernelOffset"));

  objc_msgSend(v59, "setObject:forKeyedSubscript:", &unk_1E2DEE070, CFSTR("Step"));
  objc_msgSend(v59, "setObject:forKeyedSubscript:", &unk_1E2DEDB20, CFSTR("PadLeft"));
  objc_msgSend(v59, "setObject:forKeyedSubscript:", &unk_1E2DEDB20, CFSTR("PadRight"));
  objc_msgSend(v59, "setObject:forKeyedSubscript:", &unk_1E2DEDB20, CFSTR("PadTop"));
  objc_msgSend(v59, "setObject:forKeyedSubscript:", &unk_1E2DEDB20, CFSTR("PadBot"));
  objc_msgSend(v59, "setObject:forKeyedSubscript:", CFSTR("Zero"), CFSTR("PaddingMode"));
  v150 = a4;
  v149 = 15 * a4;
  objc_storeStrong(&v148, v59);
  v65 = 0;
  v66 = (float32x2_t)vdup_lane_s32(a5, 0);
  v67 = (uint64x2_t)xmmword_191A82A80;
  __asm
  {
    FMOV            V10.2S, #3.0
    FMOV            V11.2S, #1.0
  }
  v109 = vdupq_n_s64(2uLL);
  v110 = (uint64x2_t)vdupq_n_s64(0x21uLL);
  do
  {
    v113 = vmovn_s64((int64x2_t)vcgtq_u64(v110, v67)).u8[0];
    v115 = (int64x2_t)v67;
    v70.i32[0] = v65;
    v70.i32[1] = v65 + 1;
    v71 = vadd_f32(vmla_f32(_D11, _D10, vmul_f32(vcvt_f32_s32(v70), (float32x2_t)0x3D0000003D000000)), v66);
    v111 = v71.f32[0];
    v112 = powf(v71.f32[1], -0.5);
    v72 = powf(v111, -0.5);
    if ((v113 & 1) != 0)
      *((float *)v138 + v65) = v72;
    if ((vmovn_s64((int64x2_t)vcgtq_u64((uint64x2_t)vdupq_n_s64(0x21uLL), *(uint64x2_t *)&v115)).i32[1] & 1) != 0)
      *((float *)v138 + v65 + 1) = v112;
    v65 += 2;
    v67 = (uint64x2_t)vaddq_s64(v115, v109);
  }
  while (v65 != 34);
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t(v129, a3);
  v127[6] = v138[6];
  v127[7] = v138[7];
  v128 = v139;
  v127[2] = v138[2];
  v127[3] = v138[3];
  v127[4] = v138[4];
  v127[5] = v138[5];
  v127[0] = v138[0];
  v127[1] = v138[1];
  Espresso::ANECompilerEngine::generate_v1_custom_neuron_from_values((float *)v127, 0, 0.99951, 0.0, 4.0, 0.0, 1.0, 4.0, 0.00001);
  v73 = (void *)objc_claimAutoreleasedReturnValue();
  v74 = v55;
  v75 = v137;
  v137 = v73;

  v76 = v136;
  v136 = CFSTR("NeuronCustom");

  Espresso::ANECompilerEngine::compiler::unit_t::unit_t(v116, a3);
  v77 = v123;
  v123 = CFSTR("Conv");

  v78 = (void *)objc_opt_new();
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", (15 * a4));
  v79 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v78, "setObject:forKeyedSubscript:", v79, CFSTR("Channels"));

  objc_msgSend(v78, "setObject:forKeyedSubscript:", CFSTR("Conv"), CFSTR("Type"));
  objc_msgSend(v78, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], CFSTR("KernelGroupReuse"));
  objc_msgSend(v78, "setObject:forKeyedSubscript:", CFSTR("Float16"), CFSTR("KernelType"));
  objc_msgSend(v78, "setObject:forKeyedSubscript:", &unk_1E2DEDB08, CFSTR("KernelWidth"));
  objc_msgSend(v78, "setObject:forKeyedSubscript:", &unk_1E2DEDB08, CFSTR("KernelHeight"));
  v80 = (void *)MEMORY[0x1E0CB37E8];
  if (v108)
    v81 = 0;
  else
  objc_msgSend(v80, "numberWithUnsignedLong:", v81);
  v82 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v78, "setObject:forKeyedSubscript:", v82, CFSTR("KernelIndex"));

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v74);
  v83 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v78, "setObject:forKeyedSubscript:", v83, CFSTR("KernelOffset"));

  objc_msgSend(v78, "setObject:forKeyedSubscript:", &unk_1E2DEE088, CFSTR("Step"));
  objc_msgSend(v78, "setObject:forKeyedSubscript:", &unk_1E2DEDB20, CFSTR("PadLeft"));
  objc_msgSend(v78, "setObject:forKeyedSubscript:", &unk_1E2DEDB20, CFSTR("PadRight"));
  objc_msgSend(v78, "setObject:forKeyedSubscript:", &unk_1E2DEDB20, CFSTR("PadTop"));
  objc_msgSend(v78, "setObject:forKeyedSubscript:", &unk_1E2DEDB20, CFSTR("PadBot"));
  objc_msgSend(v78, "setObject:forKeyedSubscript:", CFSTR("Zero"), CFSTR("PaddingMode"));
  v125 = a4;
  v126 = a4;
  objc_storeStrong(&v124, v78);
  v84 = v166;
  if ((unint64_t)v166 >= v167)
  {
    v86 = 0x8E38E38E38E38E39 * (((uint64_t)v166 - v165) >> 4);
    if (v86 + 1 > 0x1C71C71C71C71C7)
      goto LABEL_132;
    v87 = 0x1C71C71C71C71C72 * ((uint64_t)(v167 - v165) >> 4);
    if (v87 <= v86 + 1)
      v87 = v86 + 1;
    if (0x8E38E38E38E38E39 * ((uint64_t)(v167 - v165) >> 4) >= 0xE38E38E38E38E3)
      v88 = 0x1C71C71C71C71C7;
    else
      v88 = v87;
    v172 = &v167;
    if (v88)
      v88 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v88);
    else
      v89 = 0;
    v168 = (void **)v88;
    v169 = (std::string *)(v88 + 144 * v86);
    v170 = v169;
    v171 = v88 + 144 * v89;
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v169, (uint64_t)v140);
    v170 += 6;
    std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v165, &v168);
    v85 = v166;
    std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&v168);
  }
  else
  {
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v166, (uint64_t)v140);
    v85 = v84 + 6;
  }
  v166 = v85;
  if ((unint64_t)v85 >= v167)
  {
    v91 = 0x8E38E38E38E38E39 * (((uint64_t)v85 - v165) >> 4);
    if (v91 + 1 > 0x1C71C71C71C71C7)
      goto LABEL_132;
    v92 = 0x1C71C71C71C71C72 * ((uint64_t)(v167 - v165) >> 4);
    if (v92 <= v91 + 1)
      v92 = v91 + 1;
    if (0x8E38E38E38E38E39 * ((uint64_t)(v167 - v165) >> 4) >= 0xE38E38E38E38E3)
      v93 = 0x1C71C71C71C71C7;
    else
      v93 = v92;
    v172 = &v167;
    if (v93)
      v93 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v93);
    else
      v94 = 0;
    v168 = (void **)v93;
    v169 = (std::string *)(v93 + 144 * v91);
    v170 = v169;
    v171 = v93 + 144 * v94;
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v169, (uint64_t)v129);
    v170 += 6;
    std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v165, &v168);
    v90 = v166;
    std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&v168);
  }
  else
  {
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v85, (uint64_t)v129);
    v90 = v85 + 6;
  }
  v166 = v90;
  if ((unint64_t)v90 < v167)
  {
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v90, (uint64_t)v116);
    v95 = v90 + 6;
    goto LABEL_104;
  }
  v96 = 0x8E38E38E38E38E39 * (((uint64_t)v90 - v165) >> 4);
  if (v96 + 1 > 0x1C71C71C71C71C7)
LABEL_132:
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  v97 = 0x1C71C71C71C71C72 * ((uint64_t)(v167 - v165) >> 4);
  if (v97 <= v96 + 1)
    v97 = v96 + 1;
  if (0x8E38E38E38E38E39 * ((uint64_t)(v167 - v165) >> 4) >= 0xE38E38E38E38E3)
    v98 = 0x1C71C71C71C71C7;
  else
    v98 = v97;
  v172 = &v167;
  if (v98)
    v98 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v98);
  else
    v99 = 0;
  v168 = (void **)v98;
  v169 = (std::string *)(v98 + 144 * v96);
  v170 = v169;
  v171 = v98 + 144 * v99;
  std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v169, (uint64_t)v116);
  v170 += 6;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v165, &v168);
  v95 = v166;
  std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&v168);
LABEL_104:
  v166 = v95;
  (*(void (**)(uint64_t, Espresso::ANECompilerEngine::compiler *, uint64_t *))(*(_QWORD *)v107 + 32))(v107, a2, &v165);

  if (v121 < 0)
    operator delete(__p);
  v168 = (void **)&v119;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v168);
  v168 = (void **)&v118;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v168);
  if (v117 < 0)
    operator delete(v116[0]);

  if (v134 < 0)
    operator delete(v133);
  v116[0] = &v132;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v116);
  v116[0] = &v131;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v116);
  if (v130 < 0)
    operator delete(v129[0]);

  if (v145 < 0)
    operator delete(v144);
  v129[0] = &v143;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v129);
  v129[0] = &v142;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v129);
  if (v141 < 0)
    operator delete(v140[0]);
  v100 = v156;
  if (v156)
  {
    v101 = (unint64_t *)&v156->__shared_owners_;
    do
      v102 = __ldaxr(v101);
    while (__stlxr(v102 - 1, v101));
    if (!v102)
    {
      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
      std::__shared_weak_count::__release_weak(v100);
    }
  }
  v103 = v158;
  if (v158)
  {
    v104 = (unint64_t *)&v158->__shared_owners_;
    do
      v105 = __ldaxr(v104);
    while (__stlxr(v105 - 1, v104));
    if (!v105)
    {
      ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
      std::__shared_weak_count::__release_weak(v103);
    }
  }
  if (v159)
  {
    v160 = v159;
    operator delete(v159);
  }
  if (v162)
  {
    v163 = v162;
    operator delete(v162);
  }
  v140[0] = &v165;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)v140);
}

void sub_191483E20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,id a58)
{
  void *v58;
  void *v59;
  uint64_t v60;
  void *v62;
  void *v63;

  std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer(v60 - 168);

  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t(&a23);
  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t(&a58);

  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t((id *)&STACK[0x2A0]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x350]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v60 - 256);
  v62 = *(void **)(v60 - 240);
  if (v62)
  {
    *(_QWORD *)(v60 - 232) = v62;
    operator delete(v62);
  }
  v63 = *(void **)(v60 - 216);
  if (v63)
  {
    *(_QWORD *)(v60 - 208) = v63;
    operator delete(v63);
  }
  STACK[0x2A0] = v60 - 192;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x2A0]);
  _Unwind_Resume(a1);
}

uint64_t Espresso::ANECompilerEngine::ane_kernel::get_offset_for_js_key(_BYTE *a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;

  v3 = (std::__shared_weak_count *)a2[1];
  v10 = *a2;
  v11 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t *__return_ptr, _BYTE *, uint64_t *))(*(_QWORD *)a1 + 120))(&v12, a1, &v10);
  v6 = v11;
  if (v11)
  {
    v7 = (unint64_t *)&v11->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (!v14)
    return 0xFFFFFFFFLL;
  if (a1[208])
    return 0;
  return v13;
}

void sub_191484014(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::ane_kernel::get_mmapped_info_for_js_key(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  char v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  void *__p[2];
  char v23;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v4 = *(_QWORD *)(a2 + 224);
  if (v4)
  {
    v9 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 24))(v4, a3);
    v10 = *(_QWORD *)(a2 + 224);
    if (v9)
    {
      v11 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)v10 + 72))(*(_QWORD *)(a2 + 224), a3);
LABEL_4:
      a4[1] = (*(int (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 576) + 32))(*(_QWORD *)(*(_QWORD *)a1 + 576), v11);
      a4[2] = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 576) + 24))(*(_QWORD *)(*(_QWORD *)a1 + 576), v11);
      *a4 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 576) + 80))(*(_QWORD *)(*(_QWORD *)a1 + 576), v11);
      return;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "weights");
    v12 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v10 + 24))(v10, __p);
    v13 = v12;
    if (v23 < 0)
    {
      operator delete(__p[0]);
      if (!v13)
        return;
    }
    else if (!v12)
    {
      return;
    }
    v14 = *(_QWORD *)(a2 + 224);
    std::string::basic_string[abi:ne180100]<0>(__p, "weights");
    (*(void (**)(uint64_t *__return_ptr, uint64_t, void **))(*(_QWORD *)v14 + 120))(&v20, v14, __p);
    if (v23 < 0)
      operator delete(__p[0]);
    v15 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 24))(v20, a3);
    v16 = v15;
    if (v15)
      v11 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 72))(v20, a3);
    else
      v11 = 0;
    v17 = v21;
    if (v21)
    {
      p_shared_owners = (unint64_t *)&v21->__shared_owners_;
      do
        v19 = __ldaxr(p_shared_owners);
      while (__stlxr(v19 - 1, p_shared_owners));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    if ((v16 & 1) != 0)
      goto LABEL_4;
  }
}

void sub_1914841FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

float ___ZN8Espresso17ANECompilerEngine10ane_kernel32add_high_precision_sigmoid_unitsEPNS0_8compilerERKNS2_18layer_graph_info_tEb_block_invoke(float a1)
{
  return (float)(1.0 / (float)(expf(-a1) + 1.0)) + -0.5;
}

float ___ZN8Espresso17ANECompilerEngine10ane_kernel29add_high_precision_tanh_unitsEPNS0_8compilerERKNS2_18layer_graph_info_tE_block_invoke(float a1)
{
  double v2;
  float v3;

  v2 = expf(a1);
  v3 = expf(-a1);
  return (v2 - v3) / (v2 + v3);
}

uint64_t Espresso::ANECompilerEngine::ane_kernel::supports_weight_key(uint64_t *a1)
{
  uint64_t *v1;
  int v2;
  uint64_t v3;

  v1 = a1;
  if ((*((char *)a1 + 23) & 0x80000000) == 0)
  {
    v2 = *((unsigned __int8 *)a1 + 23);
    if (v2 != 8)
    {
      if (v2 != 10)
      {
        if (v2 != 14)
          return strncmp("hx_", (const char *)v1, 3uLL) == 0;
        goto LABEL_9;
      }
LABEL_16:
      if (*v1 != 0x6163735F74736F70 || *((_WORD *)v1 + 4) != 25964)
        return strncmp("hx_", (const char *)v1, 3uLL) == 0;
      return 1;
    }
    goto LABEL_14;
  }
  v1 = (uint64_t *)*a1;
  v3 = a1[1];
  if (v3 == 8)
  {
LABEL_14:
    if (*v1 == 0x736169625F656E61)
      return 1;
    return strncmp("hx_", (const char *)v1, 3uLL) == 0;
  }
  if (v3 == 10)
    goto LABEL_16;
  if (v3 != 14)
    return strncmp("hx_", (const char *)v1, 3uLL) == 0;
LABEL_9:
  if (*v1 != 0x74736F705F656E61 || *(uint64_t *)((char *)v1 + 6) != 0x656C6163735F7473)
    return strncmp("hx_", (const char *)v1, 3uLL) == 0;
  return 1;
}

void Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob(_QWORD *a1, uint64_t *a2, const void *a3, size_t a4)
{
  uint64_t *v6;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;

  v6 = a2;
  v8 = *((unsigned __int8 *)a2 + 23);
  if (*((char *)a2 + 23) < 0)
  {
    v10 = a2[1];
    if (v10 != 10)
      goto LABEL_20;
    v9 = (uint64_t *)*a2;
  }
  else
  {
    v9 = a2;
    if (v8 != 10)
      goto LABEL_11;
  }
  v11 = *v9;
  v12 = *((unsigned __int16 *)v9 + 4);
  if (v11 == 0x6163735F74736F70 && v12 == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v31, (int)a4 / 4, 1, 1, 1);
    v15 = v31;
    memcpy(*(void **)(v31 + 16), a3, a4);
    v16 = v32;
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](a1 + 8, v15, (uint64_t)v32);
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldaxr(p_shared_owners);
      while (__stlxr(v18 - 1, p_shared_owners));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v8 = *((unsigned __int8 *)v6 + 23);
    if ((v8 & 0x80) == 0)
      goto LABEL_11;
  }
  else if ((v8 & 0x80) == 0)
  {
LABEL_11:
    if (v8 != 14)
      goto LABEL_27;
    v14 = v6;
    goto LABEL_22;
  }
  v10 = v6[1];
LABEL_20:
  if (v10 != 14)
    goto LABEL_36;
  v14 = (uint64_t *)*v6;
LABEL_22:
  v19 = *v14;
  v20 = *(uint64_t *)((char *)v14 + 6);
  if (v19 == 0x74736F705F656E61 && v20 == 0x656C6163735F7473)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v31, (int)a4 / 4, 1, 1, 1);
    v22 = v31;
    memcpy(*(void **)(v31 + 16), a3, a4);
    v23 = v32;
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](a1 + 14, v22, (uint64_t)v32);
    if (v23)
    {
      v24 = (unint64_t *)&v23->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    v8 = *((unsigned __int8 *)v6 + 23);
    if ((v8 & 0x80) == 0)
    {
LABEL_27:
      if (v8 != 8)
        return;
      goto LABEL_38;
    }
  }
  else if ((v8 & 0x80) == 0)
  {
    goto LABEL_27;
  }
  v10 = v6[1];
LABEL_36:
  if (v10 != 8)
    return;
  v6 = (uint64_t *)*v6;
LABEL_38:
  if (*v6 == 0x736169625F656E61)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v31, (int)a4 / 4, 1, 1, 1);
    v26 = v31;
    memcpy(*(void **)(v31 + 16), a3, a4);
    v27 = a1 + 12;
    v28 = v32;
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v27, v26, (uint64_t)v32);
    if (v28)
    {
      v29 = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
  }
}

void Espresso::bahdanau_attention_kernel_cpu::~bahdanau_attention_kernel_cpu(Espresso::bahdanau_attention_kernel_cpu *this)
{
  *(_QWORD *)this = &off_1E2D99348;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 448);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 432);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 416);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 400);
  Espresso::composed_kernel_with_named_weights<Espresso::bahdanau_attention_params_t>::~composed_kernel_with_named_weights(this);
}

{
  *(_QWORD *)this = &off_1E2D99348;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 448);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 432);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 416);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 400);
  Espresso::composed_kernel_with_named_weights<Espresso::bahdanau_attention_params_t>::~composed_kernel_with_named_weights(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::bahdanau_attention_kernel_cpu::__launch()
{
  Espresso::throw_exception_selector<Espresso::invalid_state_error>("bahdanau_attention: Layer supposed to be unpacked on CPU engine");
}

void Espresso::bahdanau_attention_kernel_cpu::clear_weights(Espresso::bahdanau_attention_kernel_cpu *this)
{
  std::__shared_weak_count *v2;
  unint64_t *v3;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  __int128 v14;

  v14 = 0uLL;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)this + 400, &v14);
  v2 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1))
  {
    v3 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 - 1, v3));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v14 = 0uLL;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)this + 416, &v14);
  v5 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v14 = 0uLL;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)this + 432, &v14);
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v14 = 0uLL;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)this + 448, &v14);
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void Espresso::composed_kernel_with_named_weights<Espresso::bahdanau_attention_params_t>::on_resized(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  std::string *v10;
  __int128 v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  std::string *v16;
  __int128 v17;
  _QWORD *v18;
  std::string v19;
  void *__p[2];
  std::string::size_type v21;
  void **v22;

  v6 = a1 + 320;
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::clear(a1 + 320);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::layer_data>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::layer_data>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::layer_data>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::layer_data>>>>::clear(a1 + 360);
  v7 = *a3;
  if (a3[1] != *a3)
  {
    v8 = 0;
    v9 = 0;
    do
    {
      std::to_string(&v19, v9);
      v10 = std::string::insert(&v19, 0, "src_");
      v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      v21 = v10->__r_.__value_.__r.__words[2];
      v22 = __p;
      *(_OWORD *)__p = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      v12 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v6, (unsigned __int8 *)__p, (__int128 **)&v22);
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v12 + 5, *(_QWORD *)(v7 + v8), *(_QWORD *)(v7 + v8 + 8));
      if (SHIBYTE(v21) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v19.__r_.__value_.__l.__data_);
      ++v9;
      v7 = *a3;
      v8 += 16;
    }
    while (v9 < (a3[1] - *a3) >> 4);
  }
  v13 = *a2;
  if (a2[1] != *a2)
  {
    v14 = 0;
    v15 = 0;
    do
    {
      std::to_string(&v19, v15);
      v16 = std::string::insert(&v19, 0, "dst_");
      v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
      v21 = v16->__r_.__value_.__r.__words[2];
      v22 = __p;
      *(_OWORD *)__p = v17;
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      v18 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v6, (unsigned __int8 *)__p, (__int128 **)&v22);
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v18 + 5, *(_QWORD *)(v13 + v14), *(_QWORD *)(v13 + v14 + 8));
      if (SHIBYTE(v21) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v19.__r_.__value_.__l.__data_);
      ++v15;
      v13 = *a2;
      v14 += 16;
    }
    while (v15 < (a2[1] - *a2) >> 4);
  }
}

void sub_191484A0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void Espresso::bahdanau_attention_kernel_cpu::__set_weight_raw_blob(uint64_t a1, uint64_t a2, _BYTE *a3, const void *a4, unint64_t a5, uint64_t *a6)
{
  int v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  int v18;
  int v19;
  unint64_t *p_shared_owners;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  int v36;
  _BYTE *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  __int128 v65;
  uint64_t v66;
  std::__shared_weak_count *v67;

  if (!a4)
    return;
  v66 = 0;
  v67 = 0;
  if (a6 && *a6)
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v66, *a6, a6[1]);
  v10 = a3[23];
  v11 = *(_BYTE **)a3;
  v12 = *((_QWORD *)a3 + 1);
  if ((v10 & 0x80u) == 0)
    v13 = a3[23];
  else
    v13 = *((_QWORD *)a3 + 1);
  if ((v10 & 0x80u) == 0)
    v14 = a3;
  else
    v14 = *(char **)a3;
  if (v13 >= 2)
  {
    v15 = &v14[v13];
    v16 = v14;
    while (1)
    {
      v17 = (char *)memchr(v16, 87, v13 - 1);
      if (!v17)
        goto LABEL_61;
      if (*(_WORD *)v17 == 24407)
        break;
      v16 = v17 + 1;
      v13 = v15 - v16;
      if (v15 - v16 < 2)
        goto LABEL_61;
    }
    if (v17 == v15 || v17 != v14)
      goto LABEL_61;
    if ((v10 & 0x80) != 0)
    {
      if (v12 != 5)
      {
        if (v12 != 7)
          goto LABEL_61;
        v18 = *(_DWORD *)v11;
        v19 = *(_DWORD *)(v11 + 3);
LABEL_26:
        if (v18 == 1970364247 && v19 == 2037540213)
        {
          v63 = v66;
          v64 = v67;
          if (v67)
          {
            p_shared_owners = (unint64_t *)&v67->__shared_owners_;
            do
              v22 = __ldxr(p_shared_owners);
            while (__stxr(v22 + 1, p_shared_owners));
          }
          Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<float,2>(&v65, *(_QWORD *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, &v63, *(_DWORD *)(a1 + 308), *(_DWORD *)(a1 + 312), (a4 & 0x3F) == 0);
          std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 400, &v65);
          v23 = (std::__shared_weak_count *)*((_QWORD *)&v65 + 1);
          if (*((_QWORD *)&v65 + 1))
          {
            v24 = (unint64_t *)(*((_QWORD *)&v65 + 1) + 8);
            do
              v25 = __ldaxr(v24);
            while (__stlxr(v25 - 1, v24));
            if (!v25)
            {
              ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
              std::__shared_weak_count::__release_weak(v23);
            }
          }
          v26 = v64;
          if (v64)
          {
            v27 = (unint64_t *)&v64->__shared_owners_;
            do
              v28 = __ldaxr(v27);
            while (__stlxr(v28 - 1, v27));
            goto LABEL_59;
          }
        }
        goto LABEL_61;
      }
    }
    else
    {
      v11 = a3;
      if (v10 != 5)
      {
        if (v10 != 7)
          goto LABEL_61;
        v18 = *(_DWORD *)a3;
        v19 = *(_DWORD *)(a3 + 3);
        goto LABEL_26;
      }
    }
    if (*(_DWORD *)v11 == 1701535575 && v11[4] == 121)
    {
      v61 = v66;
      v62 = v67;
      if (v67)
      {
        v30 = (unint64_t *)&v67->__shared_owners_;
        do
          v31 = __ldxr(v30);
        while (__stxr(v31 + 1, v30));
      }
      Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<float,2>(&v65, *(_QWORD *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, &v61, *(_DWORD *)(a1 + 304), *(_DWORD *)(a1 + 312), (a4 & 0x3F) == 0);
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 416, &v65);
      v32 = (std::__shared_weak_count *)*((_QWORD *)&v65 + 1);
      if (*((_QWORD *)&v65 + 1))
      {
        v33 = (unint64_t *)(*((_QWORD *)&v65 + 1) + 8);
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
      }
      v26 = v62;
      if (v62)
      {
        v35 = (unint64_t *)&v62->__shared_owners_;
        do
          v28 = __ldaxr(v35);
        while (__stlxr(v28 - 1, v35));
LABEL_59:
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
    }
  }
LABEL_61:
  v36 = a3[23];
  if ((char)a3[23] < 0)
  {
    if (*((_QWORD *)a3 + 1) != 1)
      goto LABEL_100;
    v37 = *(_BYTE **)a3;
  }
  else
  {
    v37 = a3;
    if (v36 != 1)
      goto LABEL_82;
  }
  if (*v37 == 86)
  {
    v59 = v66;
    v60 = v67;
    if (v67)
    {
      v38 = (unint64_t *)&v67->__shared_owners_;
      do
        v39 = __ldxr(v38);
      while (__stxr(v39 + 1, v38));
    }
    Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<float,2>(&v65, *(_QWORD *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, &v59, 1, *(_DWORD *)(a1 + 312), (a4 & 0x3F) == 0);
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 432, &v65);
    v40 = (std::__shared_weak_count *)*((_QWORD *)&v65 + 1);
    if (*((_QWORD *)&v65 + 1))
    {
      v41 = (unint64_t *)(*((_QWORD *)&v65 + 1) + 8);
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
    v43 = v60;
    if (v60)
    {
      v44 = (unint64_t *)&v60->__shared_owners_;
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }
    v36 = a3[23];
  }
  if ((v36 & 0x80) != 0)
  {
    if (*((_QWORD *)a3 + 1) != 1)
      goto LABEL_100;
    a3 = *(_BYTE **)a3;
LABEL_86:
    if (*a3 == 98)
    {
      v57 = v66;
      v58 = v67;
      if (v67)
      {
        v46 = (unint64_t *)&v67->__shared_owners_;
        do
          v47 = __ldxr(v46);
        while (__stxr(v47 + 1, v46));
      }
      Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<float,1>(&v65, *(_QWORD *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, &v57, *(_DWORD *)(a1 + 312), (a4 & 0x3F) == 0);
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 448, &v65);
      v48 = (std::__shared_weak_count *)*((_QWORD *)&v65 + 1);
      if (*((_QWORD *)&v65 + 1))
      {
        v49 = (unint64_t *)(*((_QWORD *)&v65 + 1) + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      v51 = v58;
      if (v58)
      {
        v52 = (unint64_t *)&v58->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
    }
    goto LABEL_100;
  }
LABEL_82:
  if (v36 == 1)
    goto LABEL_86;
LABEL_100:
  v54 = v67;
  if (v67)
  {
    v55 = (unint64_t *)&v67->__shared_owners_;
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
}

void sub_191484F3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t Espresso::bahdanau_attention_kernel_cpu::supports_weight_key(uint64_t a1, unsigned __int8 **a2)
{
  int v2;
  int v3;
  BOOL v4;
  int v5;
  unsigned __int8 *v6;
  int v7;
  BOOL v8;
  int v9;
  int v11;

  if (*((char *)a2 + 23) < 0)
  {
    v6 = a2[1];
    if (v6 != (unsigned __int8 *)1)
    {
      if (v6 == (unsigned __int8 *)5)
      {
        v7 = (*a2)[4];
        v8 = *(_DWORD *)*a2 == 1701535575;
        v9 = 121;
      }
      else
      {
        if (v6 != (unsigned __int8 *)7)
          return 0;
        v7 = *(_DWORD *)(*a2 + 3);
        v8 = *(_DWORD *)*a2 == 1970364247;
        v9 = 2037540213;
      }
      return v8 && v7 == v9;
    }
    v11 = **a2;
  }
  else
  {
    v2 = *((unsigned __int8 *)a2 + 23);
    if (v2 != 1)
    {
      if (v2 == 5)
      {
        v3 = *((unsigned __int8 *)a2 + 4);
        v4 = *(_DWORD *)a2 == 1701535575;
        v5 = 121;
        return v4 && v3 == v5;
      }
      if (v2 == 7)
      {
        v3 = *(_DWORD *)((char *)a2 + 3);
        v4 = *(_DWORD *)a2 == 1970364247;
        v5 = 2037540213;
        return v4 && v3 == v5;
      }
      return 0;
    }
    v11 = *(unsigned __int8 *)a2;
  }
  if (v11 == 86)
    return 1;
  return v11 == 98;
}

const char *Espresso::generic_bahdanau_attention_kernel::kernel_type_str(Espresso::generic_bahdanau_attention_kernel *this)
{
  return "bahdanau_attention";
}

void Espresso::bahdanau_attention_kernel_cpu::unpack(Espresso::bahdanau_attention_kernel_cpu *this, Espresso::unpack_options *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  int v7;
  unint64_t *v8;
  unint64_t v9;
  int32x2_t v15;
  __int128 *v16;
  __int128 v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t i;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t j;
  unint64_t *v50;
  uint64_t v51;
  void *v52;
  void *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  uint64_t v71;
  std::string *v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  uint64_t k;
  __int128 *v77;
  __int128 v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  std::runtime_error *exception;
  std::string *v116;
  std::string *v117;
  std::string *v118;
  std::string *v119;
  std::string *v120;
  std::string *v121;
  void *lpsrc;
  std::__shared_weak_count *v123;
  char v124;
  std::string *v125;
  std::string *v126;
  std::string *v127;
  std::string *v128;
  std::string *v129;
  std::string *v130;
  uint64_t v131;
  std::__shared_weak_count *v132;
  __int16 v133;
  char v134;
  std::string *v135;
  std::string *v136;
  std::string *v137;
  std::string *v138;
  std::string *v139;
  std::string *v140;
  std::string *v141;
  std::string *v142;
  std::string *v143;
  std::string *v144;
  std::string *v145;
  std::string *v146;
  uint64_t v147;
  std::__shared_weak_count *v148;
  std::string *v149;
  std::string *v150;
  std::string *v151;
  std::string *v152;
  std::string *v153;
  std::string *v154;
  uint64_t v155;
  std::__shared_weak_count *v156;
  std::string *v157;
  std::string *v158;
  std::string *v159;
  std::string *v160;
  std::string *v161;
  std::string *v162;
  uint64_t v163;
  std::__shared_weak_count *v164;
  __int128 v165;
  int v166;
  uint64_t v167;
  std::__shared_weak_count *v168;
  std::string *v169;
  std::string *v170;
  std::string *v171;
  std::string *v172;
  std::string *v173;
  std::string *v174;
  uint64_t v175;
  std::__shared_weak_count *v176;
  std::string *v177;
  std::string *v178;
  std::string *v179;
  std::string *v180;
  std::string *v181;
  std::string *v182;
  void *v183;
  std::__shared_weak_count *v184;
  std::string *v185;
  std::string *v186;
  std::string *v187;
  std::string *v188;
  std::string *v189;
  std::string *v190;
  std::string *v191;
  std::string *v192;
  std::string *v193;
  std::string *v194;
  std::string *v195;
  std::string *v196;
  uint64_t v197;
  std::__shared_weak_count *v198;
  std::string *v199;
  std::string *v200;
  std::string *v201;
  std::string *v202;
  std::string *v203;
  std::string *v204;
  __int128 v205;
  _BYTE v206[12];
  uint64_t v207;
  int v208;
  char v209;
  uint64_t v210;
  int v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  std::__shared_weak_count *v219;
  uint64_t v220;
  std::__shared_weak_count *v221;
  std::string *v222;
  std::string *v223;
  std::string *v224;
  std::string *v225;
  std::string *v226;
  std::string *v227;
  uint64_t v228;
  std::__shared_weak_count *v229;
  _QWORD v230[2];
  int v231;
  uint64_t v232;
  uint64_t v233;
  int v234;
  char v235;
  uint64_t v236;
  int v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244[2];
  uint64_t v245[2];
  uint64_t v246;
  std::__shared_weak_count *v247;
  _QWORD *v248[7];
  char v249;
  Espresso::net *v250;
  std::__shared_weak_count *v251;
  uint64_t v252;
  std::__shared_weak_count *v253;
  uint64_t v254;
  std::__shared_weak_count *v255;
  uint64_t v256;
  std::string *v257;
  std::__shared_weak_count *v258;
  std::string v259;
  __int128 v260;
  void *v261[2];
  char v262;
  std::string v263;
  void *v264[2];
  char v265;
  _DWORD __p[5];
  _DWORD v267[7];
  std::string v268;
  _QWORD v269[2];
  uint64_t v270;
  __int128 v271;
  char v272;
  std::string v273;
  uint64_t v274;
  std::string v275;
  __int128 v276;

  *(_QWORD *)&v276 = *MEMORY[0x1E0C80C00];
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  v245[0] = *((_QWORD *)this + 1);
  v245[1] = (uint64_t)v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v7 = *((_DWORD *)this + 79);
  v244[1] = 0;
  v244[0] = 0;
  Espresso::sequential_builder::sequential_builder((uint64_t)&v246, v245, v7, v244);
  if (v4)
  {
    v8 = (unint64_t *)&v4->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v235 = 0;
  v237 = -1;
  __asm { FMOV            V9.2S, #1.0 }
  v238 = _D9;
  v243 = 0;
  v232 = _D9;
  v239 = 0;
  v233 = 0;
  v236 = 0;
  v231 = 0;
  v234 = 0;
  v240 = 0;
  v242 = 0;
  v241 = 0;
  v15 = vrev64_s32(*(int32x2_t *)((char *)this + 308));
  v230[1] = 1;
  v230[0] = v15;
  std::string::basic_string[abi:ne180100]<0>(&v205, "inner_product");
  std::string::basic_string[abi:ne180100]<0>(__p, "query_fc");
  (*(void (**)(std::string *__return_ptr, Espresso::bahdanau_attention_kernel_cpu *, Espresso::unpack_options *, _DWORD *))(*(_QWORD *)this + 296))(&v268, this, a2, __p);
  v16 = (__int128 *)*((_QWORD *)a2 + 3);
  if (*((char *)v16 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v259, *(const std::string::value_type **)v16, *((_QWORD *)v16 + 1));
  }
  else
  {
    v17 = *v16;
    v259.__r_.__value_.__r.__words[2] = *((_QWORD *)v16 + 2);
    *(_OWORD *)&v259.__r_.__value_.__l.__data_ = v17;
  }
  v226 = 0;
  v225 = 0;
  v227 = 0;
  v275.__r_.__value_.__r.__words[0] = (std::string::size_type)&v225;
  v275.__r_.__value_.__s.__data_[8] = 0;
  v225 = (std::string *)operator new(0x18uLL);
  v226 = v225;
  v227 = v225 + 1;
  v226 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v227, (__int128 *)&v259, &v260, v225);
  std::string::basic_string[abi:ne180100]<0>(&v273, "query_fc");
  (*(void (**)(std::string *__return_ptr, Espresso::bahdanau_attention_kernel_cpu *, Espresso::unpack_options *, std::string *))(*(_QWORD *)this + 296))(&v275, this, a2, &v273);
  v223 = 0;
  v222 = 0;
  v224 = 0;
  *(_QWORD *)&v271 = &v222;
  BYTE8(v271) = 0;
  v222 = (std::string *)operator new(0x18uLL);
  v223 = v222;
  v224 = v222 + 1;
  v223 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v224, (__int128 *)&v275, &v276, v222);
  Espresso::sequential_builder::add_t<Espresso::generic_inner_product_kernel,Espresso::inner_product_uniforms>(&v228, &v246, (uint64_t)&v205, (uint64_t)&v268, (uint64_t)v230, (uint64_t *)&v225, (uint64_t *)&v222);
  *(_QWORD *)&v271 = &v222;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v271);
  if (SHIBYTE(v275.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v275.__r_.__value_.__l.__data_);
  if (SHIBYTE(v273.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v273.__r_.__value_.__l.__data_);
  v275.__r_.__value_.__r.__words[0] = (std::string::size_type)&v225;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v275);
  if (SHIBYTE(v259.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v259.__r_.__value_.__l.__data_);
  if (SHIBYTE(v268.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v268.__r_.__value_.__l.__data_);
  if (SHIBYTE(v267[0]) < 0)
    operator delete(*(void **)__p);
  if ((v206[7] & 0x80000000) != 0)
    operator delete((void *)v205);
  v18 = v228;
  v19 = (std::__shared_weak_count *)*((_QWORD *)this + 51);
  v220 = *((_QWORD *)this + 50);
  v221 = v19;
  if (v19)
  {
    v20 = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v18 + 400))(v18, &v220);
  v22 = v221;
  if (v221)
  {
    v23 = (unint64_t *)&v221->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = v228;
  v26 = (std::__shared_weak_count *)*((_QWORD *)this + 57);
  v218 = *((_QWORD *)this + 56);
  v219 = v26;
  if (v26)
  {
    v27 = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v25 + 392))(v25, &v218);
  v29 = v219;
  if (v219)
  {
    v30 = (unint64_t *)&v219->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  if (*((_QWORD *)this + 52))
  {
    v209 = 0;
    v211 = -1;
    v212 = _D9;
    v217 = 0;
    *((_QWORD *)&v205 + 1) = 1;
    *(_QWORD *)&v206[4] = _D9;
    v213 = 0;
    v207 = 0;
    v210 = 0;
    *(_DWORD *)v206 = 0;
    v208 = 0;
    v214 = 0;
    v216 = 0;
    v215 = 0;
    v32 = *((_DWORD *)this + 78);
    DWORD1(v205) = *((_DWORD *)this + 76);
    LODWORD(v205) = v32;
    std::string::basic_string[abi:ne180100]<0>(&v268, "inner_product");
    std::string::basic_string[abi:ne180100]<0>(&v259, "key_fc");
    (*(void (**)(_DWORD *__return_ptr, Espresso::bahdanau_attention_kernel_cpu *, Espresso::unpack_options *, std::string *))(*(_QWORD *)this + 296))(__p, this, a2, &v259);
    v33 = *((_QWORD *)a2 + 3);
    if (*(char *)(v33 + 47) < 0)
      std::string::__init_copy_ctor_external(&v275, *(const std::string::value_type **)(v33 + 24), *(_QWORD *)(v33 + 32));
    else
      v275 = *(std::string *)(v33 + 24);
    v203 = 0;
    v202 = 0;
    v204 = 0;
    v273.__r_.__value_.__r.__words[0] = (std::string::size_type)&v202;
    v273.__r_.__value_.__s.__data_[8] = 0;
    v202 = (std::string *)operator new(0x18uLL);
    v203 = v202;
    v204 = v202 + 1;
    v203 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v204, (__int128 *)&v275, &v276, v202);
    std::string::basic_string[abi:ne180100]<0>(&v271, "key_fc");
    (*(void (**)(std::string *__return_ptr, Espresso::bahdanau_attention_kernel_cpu *, Espresso::unpack_options *, __int128 *))(*(_QWORD *)this + 296))(&v273, this, a2, &v271);
    v200 = 0;
    v199 = 0;
    v201 = 0;
    v264[0] = &v199;
    LOBYTE(v264[1]) = 0;
    v199 = (std::string *)operator new(0x18uLL);
    v200 = v199;
    v201 = v199 + 1;
    v200 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v201, (__int128 *)&v273, (__int128 *)&v274, v199);
    Espresso::sequential_builder::add_t<Espresso::generic_inner_product_kernel,Espresso::inner_product_uniforms>(&v165, &v246, (uint64_t)&v268, (uint64_t)__p, (uint64_t)&v205, (uint64_t *)&v202, (uint64_t *)&v199);
    v264[0] = &v199;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v264);
    if (SHIBYTE(v273.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v273.__r_.__value_.__l.__data_);
    if (v272 < 0)
      operator delete((void *)v271);
    v273.__r_.__value_.__r.__words[0] = (std::string::size_type)&v202;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v273);
    if (SHIBYTE(v275.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v275.__r_.__value_.__l.__data_);
    if (SHIBYTE(v267[0]) < 0)
      operator delete(*(void **)__p);
    if (SHIBYTE(v259.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v259.__r_.__value_.__l.__data_);
    if (SHIBYTE(v268.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v268.__r_.__value_.__l.__data_);
    v35 = v165;
    v36 = (std::__shared_weak_count *)*((_QWORD *)this + 53);
    v197 = *((_QWORD *)this + 52);
    v198 = v36;
    if (v36)
    {
      v37 = (unint64_t *)&v36->__shared_owners_;
      do
        v38 = __ldxr(v37);
      while (__stxr(v38 + 1, v37));
    }
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v35 + 400))(v35, &v197);
    v39 = v198;
    if (v198)
    {
      v40 = (unint64_t *)&v198->__shared_owners_;
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }
    v268.__r_.__value_.__r.__words[2] = 897988541;
    LOBYTE(v269[0]) = 0;
    v270 = 0;
    v268.__r_.__value_.__r.__words[0] = 0;
    v268.__r_.__value_.__l.__size_ = 1065353216;
    std::string::basic_string[abi:ne180100]<0>(&v259, "elementwise");
    std::string::basic_string[abi:ne180100]<0>(&v273, "add");
    (*(void (**)(std::string *__return_ptr, Espresso::bahdanau_attention_kernel_cpu *, Espresso::unpack_options *, std::string *))(*(_QWORD *)this + 296))(&v275, this, a2, &v273);
    std::string::basic_string[abi:ne180100]<0>(&v271, "key_fc");
    (*(void (**)(_DWORD *__return_ptr, Espresso::bahdanau_attention_kernel_cpu *, Espresso::unpack_options *, __int128 *))(*(_QWORD *)this + 296))(__p, this, a2, &v271);
    std::string::basic_string[abi:ne180100]<0>(v264, "query_fc");
    (*(void (**)(_DWORD *__return_ptr, Espresso::bahdanau_attention_kernel_cpu *, Espresso::unpack_options *, void **))(*(_QWORD *)this + 296))(&v267[1], this, a2, v264);
    v195 = 0;
    v194 = 0;
    v196 = 0;
    v263.__r_.__value_.__r.__words[0] = (std::string::size_type)&v194;
    v263.__r_.__value_.__s.__data_[8] = 0;
    v194 = (std::string *)operator new(0x30uLL);
    v195 = v194;
    v196 = v194 + 2;
    v195 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v196, (__int128 *)__p, (__int128 *)&v268, v194);
    std::string::basic_string[abi:ne180100]<0>(v261, "add");
    (*(void (**)(std::string *__return_ptr, Espresso::bahdanau_attention_kernel_cpu *, Espresso::unpack_options *, void **))(*(_QWORD *)this + 296))(&v263, this, a2, v261);
    v192 = 0;
    v191 = 0;
    v193 = 0;
    LOBYTE(v123) = 0;
    v191 = (std::string *)operator new(0x18uLL);
    v192 = v191;
    v193 = v191 + 1;
    v192 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v193, (__int128 *)&v263, (__int128 *)v264, v191);
    Espresso::sequential_builder::add_t<Espresso::generic_elementwise_kernel,Espresso::elementwise_params>(&v257, &v246, (uint64_t)&v259, (uint64_t)&v275, (uint64_t)&v268, (uint64_t *)&v194, (uint64_t *)&v191);
    lpsrc = &v191;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&lpsrc);
    if (SHIBYTE(v263.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v263.__r_.__value_.__l.__data_);
    if (v262 < 0)
      operator delete(v261[0]);
    v263.__r_.__value_.__r.__words[0] = (std::string::size_type)&v194;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v263);
    for (i = 0; i != -12; i -= 6)
    {
      if (SHIBYTE(v267[i + 6]) < 0)
        operator delete(*(void **)&v267[i + 1]);
    }
    if (v265 < 0)
      operator delete(v264[0]);
    if (v272 < 0)
      operator delete((void *)v271);
    if (SHIBYTE(v275.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v275.__r_.__value_.__l.__data_);
    if (SHIBYTE(v273.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v273.__r_.__value_.__l.__data_);
    if (SHIBYTE(v259.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v259.__r_.__value_.__l.__data_);
    v43 = v258;
    if (v258)
    {
      v44 = (unint64_t *)&v258->__shared_owners_;
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }
    v46 = (std::__shared_weak_count *)*((_QWORD *)&v165 + 1);
    if (*((_QWORD *)&v165 + 1))
    {
      v47 = (unint64_t *)(*((_QWORD *)&v165 + 1) + 8);
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      goto LABEL_113;
    }
  }
  else
  {
    *(_QWORD *)v206 = 897988541;
    v206[8] = 0;
    v210 = 0;
    *((_QWORD *)&v205 + 1) = 1065353216;
    *(_QWORD *)&v205 = 0;
    std::string::basic_string[abi:ne180100]<0>(__p, "elementwise");
    std::string::basic_string[abi:ne180100]<0>(&v275, "add");
    (*(void (**)(std::string *__return_ptr, Espresso::bahdanau_attention_kernel_cpu *, Espresso::unpack_options *, std::string *))(*(_QWORD *)this + 296))(&v259, this, a2, &v275);
    v34 = *((_QWORD *)a2 + 3);
    if (*(char *)(v34 + 47) < 0)
      std::string::__init_copy_ctor_external(&v268, *(const std::string::value_type **)(v34 + 24), *(_QWORD *)(v34 + 32));
    else
      v268 = *(std::string *)(v34 + 24);
    std::string::basic_string[abi:ne180100]<0>(&v273, "query_fc");
    (*(void (**)(_QWORD *__return_ptr, Espresso::bahdanau_attention_kernel_cpu *, Espresso::unpack_options *, std::string *))(*(_QWORD *)this + 296))(v269, this, a2, &v273);
    v189 = 0;
    v188 = 0;
    v190 = 0;
    *(_QWORD *)&v271 = &v188;
    BYTE8(v271) = 0;
    v188 = (std::string *)operator new(0x30uLL);
    v189 = v188;
    v190 = v188 + 2;
    v189 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v190, (__int128 *)&v268, (__int128 *)((char *)&v270 + 4), v188);
    std::string::basic_string[abi:ne180100]<0>(v264, "add");
    (*(void (**)(__int128 *__return_ptr, Espresso::bahdanau_attention_kernel_cpu *, Espresso::unpack_options *, void **))(*(_QWORD *)this + 296))(&v271, this, a2, v264);
    v186 = 0;
    v185 = 0;
    v187 = 0;
    v263.__r_.__value_.__r.__words[0] = (std::string::size_type)&v185;
    v263.__r_.__value_.__s.__data_[8] = 0;
    v185 = (std::string *)operator new(0x18uLL);
    v186 = v185;
    v187 = v185 + 1;
    v186 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v187, &v271, (__int128 *)&v273, v185);
    Espresso::sequential_builder::add_t<Espresso::generic_elementwise_kernel,Espresso::elementwise_params>(v261, &v246, (uint64_t)__p, (uint64_t)&v259, (uint64_t)&v205, (uint64_t *)&v188, (uint64_t *)&v185);
    v263.__r_.__value_.__r.__words[0] = (std::string::size_type)&v185;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v263);
    if (v272 < 0)
      operator delete((void *)v271);
    if (v265 < 0)
      operator delete(v264[0]);
    *(_QWORD *)&v271 = &v188;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v271);
    for (j = 0; j != -48; j -= 24)
    {
      if (*((char *)&v270 + j + 3) < 0)
        operator delete(*(void **)((char *)&v268 + j + 24));
    }
    if (SHIBYTE(v273.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v273.__r_.__value_.__l.__data_);
    if (SHIBYTE(v259.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v259.__r_.__value_.__l.__data_);
    if (SHIBYTE(v275.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v275.__r_.__value_.__l.__data_);
    if (SHIBYTE(v267[0]) < 0)
      operator delete(*(void **)__p);
    v46 = (std::__shared_weak_count *)v261[1];
    if (v261[1])
    {
      v50 = (unint64_t *)((char *)v261[1] + 8);
      do
        v48 = __ldaxr(v50);
      while (__stlxr(v48 - 1, v50));
LABEL_113:
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }
  }
  *(_QWORD *)&__p[1] = _D9;
  *(_QWORD *)&__p[3] = 0;
  *(_QWORD *)&v267[2] = 0;
  *(_QWORD *)v267 = 0;
  __p[0] = 1;
  std::string::basic_string[abi:ne180100]<0>(&v259, "activation");
  std::string::basic_string[abi:ne180100]<0>(&v273, "tanh");
  (*(void (**)(std::string *__return_ptr, Espresso::bahdanau_attention_kernel_cpu *, Espresso::unpack_options *, std::string *))(*(_QWORD *)this + 296))(&v275, this, a2, &v273);
  std::string::basic_string[abi:ne180100]<0>(v264, "add");
  (*(void (**)(__int128 *__return_ptr, Espresso::bahdanau_attention_kernel_cpu *, Espresso::unpack_options *, void **))(*(_QWORD *)this + 296))(&v271, this, a2, v264);
  v181 = 0;
  v180 = 0;
  v182 = 0;
  *(_QWORD *)&v205 = &v180;
  BYTE8(v205) = 0;
  v180 = (std::string *)operator new(0x18uLL);
  v181 = v180;
  v182 = v180 + 1;
  v181 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v182, &v271, (__int128 *)&v273, v180);
  std::string::basic_string[abi:ne180100]<0>(v261, "tanh");
  (*(void (**)(std::string *__return_ptr, Espresso::bahdanau_attention_kernel_cpu *, Espresso::unpack_options *, void **))(*(_QWORD *)this + 296))(&v263, this, a2, v261);
  v177 = 0;
  v178 = 0;
  v179 = 0;
  *(_QWORD *)&v205 = &v177;
  BYTE8(v205) = 0;
  v177 = (std::string *)operator new(0x18uLL);
  v178 = v177;
  v179 = v177 + 1;
  v178 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v179, (__int128 *)&v263, (__int128 *)v264, v177);
  v51 = v252;
  LODWORD(v205) = (***(uint64_t (****)(_QWORD))(v254 + 8))(*(_QWORD *)(v254 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v51, (uint64_t)&v254, (uint64_t)&v259, (uint64_t)__p, (int *)&v205);
  v52 = lpsrc;
  if (!lpsrc
  {
    v184 = 0;
    v183 = 0;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, (const std::string *)&v205);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v183 = v53;
  v184 = v123;
  if (v123)
  {
    v54 = (unint64_t *)&v123->__shared_owners_;
    do
      v55 = __ldxr(v54);
    while (__stxr(v55 + 1, v54));
    *(_QWORD *)&v165 = v52;
    *((_QWORD *)&v165 + 1) = v123;
    if (v123)
    {
      v56 = (unint64_t *)&v123->__shared_owners_;
      do
        v57 = __ldxr(v56);
      while (__stxr(v57 + 1, v56));
    }
  }
  else
  {
    v165 = (unint64_t)v52;
  }
  v205 = 0uLL;
  *(_QWORD *)v206 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v205, (uint64_t)v180, (uint64_t)v181, 0xAAAAAAAAAAAAAAABLL * (((char *)v181 - (char *)v180) >> 3));
  memset(&v268, 0, sizeof(v268));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v268, (uint64_t)v177, (uint64_t)v178, 0xAAAAAAAAAAAAAAABLL * (((char *)v178 - (char *)v177) >> 3));
  Espresso::sequential_builder::add_kernel((uint64_t)&v246, (uint64_t *)&v165, (uint64_t)&v259, (uint64_t)&v275, (std::string **)&v205, (std::string **)&v268);
  v257 = &v268;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v257);
  v257 = (std::string *)&v205;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v257);
  v58 = (std::__shared_weak_count *)*((_QWORD *)&v165 + 1);
  if (*((_QWORD *)&v165 + 1))
  {
    v59 = (unint64_t *)(*((_QWORD *)&v165 + 1) + 8);
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  if (v246)
    Espresso::sequential_builder::add_shape_from_kernel(&v246, (uint64_t)lpsrc, (__int128 **)&v180, (uint64_t *)&v177);
  v61 = v123;
  if (v123)
  {
    v62 = (unint64_t *)&v123->__shared_owners_;
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  *(_QWORD *)&v205 = &v177;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v205);
  if (SHIBYTE(v263.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v263.__r_.__value_.__l.__data_);
  if (v262 < 0)
    operator delete(v261[0]);
  *(_QWORD *)&v205 = &v180;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v205);
  if (v272 < 0)
    operator delete((void *)v271);
  if (v265 < 0)
    operator delete(v264[0]);
  if (SHIBYTE(v275.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v275.__r_.__value_.__l.__data_);
  if (SHIBYTE(v273.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v273.__r_.__value_.__l.__data_);
  if (SHIBYTE(v259.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v259.__r_.__value_.__l.__data_);
  v209 = 0;
  v211 = -1;
  v212 = _D9;
  v217 = 0;
  *((_QWORD *)&v205 + 1) = 1;
  *(_QWORD *)&v206[4] = _D9;
  v213 = 0;
  v207 = 0;
  v210 = 0;
  *(_DWORD *)v206 = 0;
  v208 = 0;
  v214 = 0;
  v216 = 0;
  v215 = 0;
  DWORD1(v205) = *((_DWORD *)this + 78);
  LODWORD(v205) = 1;
  std::string::basic_string[abi:ne180100]<0>(&v268, "inner_product");
  std::string::basic_string[abi:ne180100]<0>(&v275, "v_fc");
  (*(void (**)(std::string *__return_ptr, Espresso::bahdanau_attention_kernel_cpu *, Espresso::unpack_options *, std::string *))(*(_QWORD *)this + 296))(&v259, this, a2, &v275);
  std::string::basic_string[abi:ne180100]<0>(&v271, "tanh");
  (*(void (**)(std::string *__return_ptr, Espresso::bahdanau_attention_kernel_cpu *, Espresso::unpack_options *, __int128 *))(*(_QWORD *)this + 296))(&v273, this, a2, &v271);
  v172 = 0;
  v173 = 0;
  v174 = 0;
  v264[0] = &v172;
  LOBYTE(v264[1]) = 0;
  v172 = (std::string *)operator new(0x18uLL);
  v173 = v172;
  v174 = v172 + 1;
  v173 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v174, (__int128 *)&v273, (__int128 *)&v274, v172);
  std::string::basic_string[abi:ne180100]<0>(&v263, "v_fc");
  (*(void (**)(void **__return_ptr, Espresso::bahdanau_attention_kernel_cpu *, Espresso::unpack_options *, std::string *))(*(_QWORD *)this + 296))(v264, this, a2, &v263);
  v169 = 0;
  v170 = 0;
  v171 = 0;
  v261[0] = &v169;
  LOBYTE(v261[1]) = 0;
  v169 = (std::string *)operator new(0x18uLL);
  v170 = v169;
  v171 = v169 + 1;
  v170 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v171, (__int128 *)v264, (__int128 *)__p, v169);
  Espresso::sequential_builder::add_t<Espresso::generic_inner_product_kernel,Espresso::inner_product_uniforms>(&v175, &v246, (uint64_t)&v268, (uint64_t)&v259, (uint64_t)&v205, (uint64_t *)&v172, (uint64_t *)&v169);
  v261[0] = &v169;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v261);
  if (v265 < 0)
    operator delete(v264[0]);
  if (SHIBYTE(v263.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v263.__r_.__value_.__l.__data_);
  v264[0] = &v172;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v264);
  if (SHIBYTE(v273.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v273.__r_.__value_.__l.__data_);
  if (v272 < 0)
    operator delete((void *)v271);
  if (SHIBYTE(v259.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v259.__r_.__value_.__l.__data_);
  if (SHIBYTE(v275.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v275.__r_.__value_.__l.__data_);
  if (SHIBYTE(v268.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v268.__r_.__value_.__l.__data_);
  v64 = v175;
  v65 = (std::__shared_weak_count *)*((_QWORD *)this + 55);
  v167 = *((_QWORD *)this + 54);
  v168 = v65;
  if (v65)
  {
    v66 = (unint64_t *)&v65->__shared_owners_;
    do
      v67 = __ldxr(v66);
    while (__stxr(v67 + 1, v66));
  }
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v64 + 400))(v64, &v167);
  v68 = v168;
  if (v168)
  {
    v69 = (unint64_t *)&v168->__shared_owners_;
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
  v165 = xmmword_191A93630;
  v166 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v268, "transpose");
  std::string::basic_string[abi:ne180100]<0>(&v275, "v_fc_t");
  (*(void (**)(std::string *__return_ptr, Espresso::bahdanau_attention_kernel_cpu *, Espresso::unpack_options *, std::string *))(*(_QWORD *)this + 296))(&v259, this, a2, &v275);
  std::string::basic_string[abi:ne180100]<0>(&v271, "v_fc");
  (*(void (**)(std::string *__return_ptr, Espresso::bahdanau_attention_kernel_cpu *, Espresso::unpack_options *, __int128 *))(*(_QWORD *)this + 296))(&v273, this, a2, &v271);
  v160 = 0;
  v161 = 0;
  v162 = 0;
  v264[0] = &v160;
  LOBYTE(v264[1]) = 0;
  v160 = (std::string *)operator new(0x18uLL);
  v161 = v160;
  v162 = v160 + 1;
  v161 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v162, (__int128 *)&v273, (__int128 *)&v274, v160);
  std::string::basic_string[abi:ne180100]<0>(&v263, "v_fc_t");
  (*(void (**)(void **__return_ptr, Espresso::bahdanau_attention_kernel_cpu *, Espresso::unpack_options *, std::string *))(*(_QWORD *)this + 296))(v264, this, a2, &v263);
  v157 = 0;
  v158 = 0;
  v159 = 0;
  v261[0] = &v157;
  LOBYTE(v261[1]) = 0;
  v157 = (std::string *)operator new(0x18uLL);
  v158 = v157;
  v159 = v157 + 1;
  v158 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v159, (__int128 *)v264, (__int128 *)__p, v157);
  Espresso::sequential_builder::add_t<Espresso::generic_transpose_kernel,Espresso::transpose_params_t>(&v163, &v246, (uint64_t)&v268, (uint64_t)&v259, (uint64_t)&v165, (uint64_t *)&v160, (uint64_t *)&v157);
  v261[0] = &v157;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v261);
  if (v265 < 0)
    operator delete(v264[0]);
  if (SHIBYTE(v263.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v263.__r_.__value_.__l.__data_);
  v264[0] = &v160;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v264);
  if (SHIBYTE(v273.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v273.__r_.__value_.__l.__data_);
  if (v272 < 0)
    operator delete((void *)v271);
  if (SHIBYTE(v259.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v259.__r_.__value_.__l.__data_);
  if (SHIBYTE(v275.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v275.__r_.__value_.__l.__data_);
  if (SHIBYTE(v268.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v268.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v268, "transpose");
  std::string::basic_string[abi:ne180100]<0>(&v275, "value_t");
  (*(void (**)(std::string *__return_ptr, Espresso::bahdanau_attention_kernel_cpu *, Espresso::unpack_options *, std::string *))(*(_QWORD *)this + 296))(&v259, this, a2, &v275);
  v71 = *((_QWORD *)a2 + 3);
  if (*(char *)(v71 + 71) < 0)
    std::string::__init_copy_ctor_external(&v273, *(const std::string::value_type **)(v71 + 48), *(_QWORD *)(v71 + 56));
  else
    v273 = *(std::string *)(v71 + 48);
  v152 = 0;
  v153 = 0;
  v154 = 0;
  *(_QWORD *)&v271 = &v152;
  BYTE8(v271) = 0;
  v152 = (std::string *)operator new(0x18uLL);
  v153 = v152;
  v154 = v152 + 1;
  v153 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v154, (__int128 *)&v273, (__int128 *)&v274, v152);
  std::string::basic_string[abi:ne180100]<0>(v264, "value_t");
  (*(void (**)(__int128 *__return_ptr, Espresso::bahdanau_attention_kernel_cpu *, Espresso::unpack_options *, void **))(*(_QWORD *)this + 296))(&v271, this, a2, v264);
  v149 = 0;
  v150 = 0;
  v151 = 0;
  v263.__r_.__value_.__r.__words[0] = (std::string::size_type)&v149;
  v263.__r_.__value_.__s.__data_[8] = 0;
  v149 = (std::string *)operator new(0x18uLL);
  v150 = v149;
  v151 = v149 + 1;
  v150 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v151, &v271, (__int128 *)&v273, v149);
  Espresso::sequential_builder::add_t<Espresso::generic_transpose_kernel,Espresso::transpose_params_t>(&v155, &v246, (uint64_t)&v268, (uint64_t)&v259, (uint64_t)&v165, (uint64_t *)&v152, (uint64_t *)&v149);
  v263.__r_.__value_.__r.__words[0] = (std::string::size_type)&v149;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v263);
  if (v272 < 0)
    operator delete((void *)v271);
  if (v265 < 0)
    operator delete(v264[0]);
  *(_QWORD *)&v271 = &v152;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v271);
  if (SHIBYTE(v273.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v273.__r_.__value_.__l.__data_);
  if (SHIBYTE(v259.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v259.__r_.__value_.__l.__data_);
  if (SHIBYTE(v275.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v275.__r_.__value_.__l.__data_);
  if (SHIBYTE(v268.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v268.__r_.__value_.__l.__data_);
  *(_OWORD *)&v259.__r_.__value_.__l.__data_ = xmmword_191A93370;
  v259.__r_.__value_.__r.__words[2] = 1;
  LODWORD(v260) = 16777472;
  std::string::basic_string[abi:ne180100]<0>(&v268, "softmax");
  std::string::basic_string[abi:ne180100]<0>(&v273, "softmax");
  (*(void (**)(std::string *__return_ptr, Espresso::bahdanau_attention_kernel_cpu *, Espresso::unpack_options *, std::string *))(*(_QWORD *)this + 296))(&v275, this, a2, &v273);
  std::string::basic_string[abi:ne180100]<0>(v264, "v_fc_t");
  (*(void (**)(__int128 *__return_ptr, Espresso::bahdanau_attention_kernel_cpu *, Espresso::unpack_options *, void **))(*(_QWORD *)this + 296))(&v271, this, a2, v264);
  v144 = 0;
  v145 = 0;
  v146 = 0;
  v263.__r_.__value_.__r.__words[0] = (std::string::size_type)&v144;
  v263.__r_.__value_.__s.__data_[8] = 0;
  v144 = (std::string *)operator new(0x18uLL);
  v145 = v144;
  v146 = v144 + 1;
  v145 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v146, &v271, (__int128 *)&v273, v144);
  std::string::basic_string[abi:ne180100]<0>(v261, "softmax");
  (*(void (**)(std::string *__return_ptr, Espresso::bahdanau_attention_kernel_cpu *, Espresso::unpack_options *, void **))(*(_QWORD *)this + 296))(&v263, this, a2, v261);
  v141 = 0;
  v142 = 0;
  v143 = 0;
  lpsrc = &v141;
  LOBYTE(v123) = 0;
  v141 = (std::string *)operator new(0x18uLL);
  v142 = v141;
  v143 = v141 + 1;
  v142 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v143, (__int128 *)&v263, (__int128 *)v264, v141);
  Espresso::sequential_builder::add_t<Espresso::generic_softmax_kernel,Espresso::softmax_params>(&v147, &v246, (uint64_t)&v268, (uint64_t)&v275, (uint64_t)&v259, (uint64_t *)&v144, (uint64_t *)&v141);
  lpsrc = &v141;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&lpsrc);
  if (SHIBYTE(v263.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v263.__r_.__value_.__l.__data_);
  if (v262 < 0)
    operator delete(v261[0]);
  v263.__r_.__value_.__r.__words[0] = (std::string::size_type)&v144;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v263);
  if (v272 < 0)
    operator delete((void *)v271);
  if (v265 < 0)
    operator delete(v264[0]);
  if (SHIBYTE(v275.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v275.__r_.__value_.__l.__data_);
  if (SHIBYTE(v273.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v273.__r_.__value_.__l.__data_);
  if (SHIBYTE(v268.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v268.__r_.__value_.__l.__data_);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 1) - *(_QWORD *)a2) >> 3) >= 2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v268, "transpose");
    std::string::basic_string[abi:ne180100]<0>(&v273, "raw_score");
    (*(void (**)(std::string *__return_ptr, Espresso::bahdanau_attention_kernel_cpu *, Espresso::unpack_options *, std::string *))(*(_QWORD *)this + 296))(&v275, this, a2, &v273);
    std::string::basic_string[abi:ne180100]<0>(v264, "softmax");
    (*(void (**)(__int128 *__return_ptr, Espresso::bahdanau_attention_kernel_cpu *, Espresso::unpack_options *, void **))(*(_QWORD *)this + 296))(&v271, this, a2, v264);
    v138 = 0;
    v139 = 0;
    v140 = 0;
    v263.__r_.__value_.__r.__words[0] = (std::string::size_type)&v138;
    v263.__r_.__value_.__s.__data_[8] = 0;
    v138 = (std::string *)operator new(0x18uLL);
    v139 = v138;
    v140 = v138 + 1;
    v139 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v140, &v271, (__int128 *)&v273, v138);
    v72 = *(std::string **)a2;
    if (*(char *)(*(_QWORD *)a2 + 47) < 0)
      std::string::__init_copy_ctor_external(&v263, v72[1].__r_.__value_.__l.__data_, v72[1].__r_.__value_.__l.__size_);
    else
      v263 = v72[1];
    v135 = 0;
    v136 = 0;
    v137 = 0;
    v261[0] = &v135;
    LOBYTE(v261[1]) = 0;
    v135 = (std::string *)operator new(0x18uLL);
    v136 = v135;
    v137 = v135 + 1;
    v136 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v137, (__int128 *)&v263, (__int128 *)v264, v135);
    Espresso::sequential_builder::add_t<Espresso::generic_transpose_kernel,Espresso::transpose_params_t>(&lpsrc, &v246, (uint64_t)&v268, (uint64_t)&v275, (uint64_t)&v165, (uint64_t *)&v138, (uint64_t *)&v135);
    v261[0] = &v135;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v261);
    if (SHIBYTE(v263.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v263.__r_.__value_.__l.__data_);
    v263.__r_.__value_.__r.__words[0] = (std::string::size_type)&v138;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v263);
    if (v272 < 0)
      operator delete((void *)v271);
    if (v265 < 0)
      operator delete(v264[0]);
    if (SHIBYTE(v275.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v275.__r_.__value_.__l.__data_);
    if (SHIBYTE(v273.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v273.__r_.__value_.__l.__data_);
    if (SHIBYTE(v268.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v268.__r_.__value_.__l.__data_);
    v73 = v123;
    if (v123)
    {
      v74 = (unint64_t *)&v123->__shared_owners_;
      do
        v75 = __ldaxr(v74);
      while (__stlxr(v75 - 1, v74));
      if (!v75)
      {
        ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
        std::__shared_weak_count::__release_weak(v73);
      }
    }
  }
  v133 = 0;
  v134 = 1;
  std::string::basic_string[abi:ne180100]<0>(&v275, "batch_matmul");
  std::string::basic_string[abi:ne180100]<0>(&v271, "weighed_avg");
  (*(void (**)(std::string *__return_ptr, Espresso::bahdanau_attention_kernel_cpu *, Espresso::unpack_options *, __int128 *))(*(_QWORD *)this + 296))(&v273, this, a2, &v271);
  std::string::basic_string[abi:ne180100]<0>(v264, "value_t");
  (*(void (**)(std::string *__return_ptr, Espresso::bahdanau_attention_kernel_cpu *, Espresso::unpack_options *, void **))(*(_QWORD *)this + 296))(&v268, this, a2, v264);
  std::string::basic_string[abi:ne180100]<0>(&v263, "softmax");
  (*(void (**)(_QWORD *__return_ptr, Espresso::bahdanau_attention_kernel_cpu *, Espresso::unpack_options *, std::string *))(*(_QWORD *)this + 296))(v269, this, a2, &v263);
  v128 = 0;
  v129 = 0;
  v130 = 0;
  v261[0] = &v128;
  LOBYTE(v261[1]) = 0;
  v128 = (std::string *)operator new(0x30uLL);
  v129 = v128;
  v130 = v128 + 2;
  v129 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v130, (__int128 *)&v268, (__int128 *)((char *)&v270 + 4), v128);
  std::string::basic_string[abi:ne180100]<0>(&lpsrc, "weighted_avg");
  (*(void (**)(void **__return_ptr, Espresso::bahdanau_attention_kernel_cpu *, Espresso::unpack_options *, void **))(*(_QWORD *)this + 296))(v261, this, a2, &lpsrc);
  v125 = 0;
  v126 = 0;
  v127 = 0;
  v257 = (std::string *)&v125;
  LOBYTE(v258) = 0;
  v125 = (std::string *)operator new(0x18uLL);
  v126 = v125;
  v127 = v125 + 1;
  v126 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v127, (__int128 *)v261, (__int128 *)&v263, v125);
  Espresso::sequential_builder::add_t<Espresso::generic_batch_matmul_kernel,Espresso::batch_matmul_params_t>(&v131, &v246, (uint64_t)&v275, (uint64_t)&v273, (uint64_t)&v133, (uint64_t *)&v128, (uint64_t *)&v125);
  v257 = (std::string *)&v125;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v257);
  if (v262 < 0)
    operator delete(v261[0]);
  if (v124 < 0)
    operator delete(lpsrc);
  v261[0] = &v128;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v261);
  for (k = 0; k != -48; k -= 24)
  {
    if (*((char *)&v270 + k + 3) < 0)
      operator delete(*(void **)((char *)&v268 + k + 24));
  }
  if (SHIBYTE(v263.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v263.__r_.__value_.__l.__data_);
  if (v265 < 0)
    operator delete(v264[0]);
  if (SHIBYTE(v273.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v273.__r_.__value_.__l.__data_);
  if (v272 < 0)
    operator delete((void *)v271);
  if (SHIBYTE(v275.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v275.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v268, "transpose");
  std::string::basic_string[abi:ne180100]<0>(&v273, "weighted_avg_t");
  (*(void (**)(std::string *__return_ptr, Espresso::bahdanau_attention_kernel_cpu *, Espresso::unpack_options *, std::string *))(*(_QWORD *)this + 296))(&v275, this, a2, &v273);
  std::string::basic_string[abi:ne180100]<0>(v264, "weighted_avg");
  (*(void (**)(__int128 *__return_ptr, Espresso::bahdanau_attention_kernel_cpu *, Espresso::unpack_options *, void **))(*(_QWORD *)this + 296))(&v271, this, a2, v264);
  v119 = 0;
  v120 = 0;
  v121 = 0;
  v263.__r_.__value_.__r.__words[0] = (std::string::size_type)&v119;
  v263.__r_.__value_.__s.__data_[8] = 0;
  v119 = (std::string *)operator new(0x18uLL);
  v120 = v119;
  v121 = v119 + 1;
  v120 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v121, &v271, (__int128 *)&v273, v119);
  v77 = *(__int128 **)a2;
  if (*(char *)(*(_QWORD *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v263, *(const std::string::value_type **)v77, *((_QWORD *)v77 + 1));
  }
  else
  {
    v78 = *v77;
    v263.__r_.__value_.__r.__words[2] = *((_QWORD *)v77 + 2);
    *(_OWORD *)&v263.__r_.__value_.__l.__data_ = v78;
  }
  v116 = 0;
  v117 = 0;
  v118 = 0;
  v261[0] = &v116;
  LOBYTE(v261[1]) = 0;
  v116 = (std::string *)operator new(0x18uLL);
  v117 = v116;
  v118 = v116 + 1;
  v117 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v118, (__int128 *)&v263, (__int128 *)v264, v116);
  Espresso::sequential_builder::add_t<Espresso::generic_transpose_kernel,Espresso::transpose_params_t>(&lpsrc, &v246, (uint64_t)&v268, (uint64_t)&v275, (uint64_t)&v165, (uint64_t *)&v119, (uint64_t *)&v116);
  v261[0] = &v116;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v261);
  if (SHIBYTE(v263.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v263.__r_.__value_.__l.__data_);
  v263.__r_.__value_.__r.__words[0] = (std::string::size_type)&v119;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v263);
  if (v272 < 0)
    operator delete((void *)v271);
  if (v265 < 0)
    operator delete(v264[0]);
  if (SHIBYTE(v275.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v275.__r_.__value_.__l.__data_);
  if (SHIBYTE(v273.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v273.__r_.__value_.__l.__data_);
  if (SHIBYTE(v268.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v268.__r_.__value_.__l.__data_);
  insert_network_layers(*((Espresso::net **)a2 + 6), v250, *((_QWORD *)a2 + 8));
  v79 = v123;
  if (v123)
  {
    v80 = (unint64_t *)&v123->__shared_owners_;
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  v82 = v132;
  if (v132)
  {
    v83 = (unint64_t *)&v132->__shared_owners_;
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  v85 = v148;
  if (v148)
  {
    v86 = (unint64_t *)&v148->__shared_owners_;
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
  v88 = v156;
  if (v156)
  {
    v89 = (unint64_t *)&v156->__shared_owners_;
    do
      v90 = __ldaxr(v89);
    while (__stlxr(v90 - 1, v89));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
  v91 = v164;
  if (v164)
  {
    v92 = (unint64_t *)&v164->__shared_owners_;
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }
  v94 = v176;
  if (v176)
  {
    v95 = (unint64_t *)&v176->__shared_owners_;
    do
      v96 = __ldaxr(v95);
    while (__stlxr(v96 - 1, v95));
    if (!v96)
    {
      ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
      std::__shared_weak_count::__release_weak(v94);
    }
  }
  v97 = v184;
  if (v184)
  {
    v98 = (unint64_t *)&v184->__shared_owners_;
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  v100 = v229;
  if (v229)
  {
    v101 = (unint64_t *)&v229->__shared_owners_;
    do
      v102 = __ldaxr(v101);
    while (__stlxr(v102 - 1, v101));
    if (!v102)
    {
      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
      std::__shared_weak_count::__release_weak(v100);
    }
  }
  std::deque<std::pair<std::shared_ptr<Espresso::abstract_context>,Espresso::compute_path>>::~deque[abi:ne180100]((uint64_t)&v256);
  v103 = v255;
  if (v255)
  {
    v104 = (unint64_t *)&v255->__shared_owners_;
    do
      v105 = __ldaxr(v104);
    while (__stlxr(v105 - 1, v104));
    if (!v105)
    {
      ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
      std::__shared_weak_count::__release_weak(v103);
    }
  }
  v106 = v253;
  if (v253)
  {
    v107 = (unint64_t *)&v253->__shared_owners_;
    do
      v108 = __ldaxr(v107);
    while (__stlxr(v108 - 1, v107));
    if (!v108)
    {
      ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
      std::__shared_weak_count::__release_weak(v106);
    }
  }
  v109 = v251;
  if (v251)
  {
    v110 = (unint64_t *)&v251->__shared_owners_;
    do
      v111 = __ldaxr(v110);
    while (__stlxr(v111 - 1, v110));
    if (!v111)
    {
      ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
      std::__shared_weak_count::__release_weak(v109);
    }
  }
  if (v249 < 0)
    operator delete(v248[5]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)v248, v248[1]);
  v112 = v247;
  if (v247)
  {
    v113 = (unint64_t *)&v247->__shared_owners_;
    do
      v114 = __ldaxr(v113);
    while (__stlxr(v114 - 1, v113));
    if (!v114)
    {
      ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
      std::__shared_weak_count::__release_weak(v112);
    }
  }
}

void sub_191487180(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (SLOBYTE(STACK[0x547]) < 0)
    operator delete((void *)STACK[0x530]);
  if (*(char *)(v1 - 89) < 0)
    operator delete(*(void **)(v1 - 112));
  if (SLOBYTE(STACK[0x5B7]) < 0)
    operator delete((void *)STACK[0x5A0]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x3A0]);
  Espresso::sequential_builder::~sequential_builder((void **)&STACK[0x458]);
  _Unwind_Resume(a1);
}

uint64_t Espresso::bahdanau_attention_kernel_cpu::should_unpack()
{
  return 1;
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::bahdanau_attention_params_t,Espresso::abstract_kernel_with_named_weights_>::get_params(uint64_t a1)
{
  return a1 + 304;
}

void Espresso::sequential_builder::add_t<Espresso::generic_elementwise_kernel,Espresso::elementwise_params>(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t *a7)
{
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::runtime_error *exception;
  std::string *v30[3];
  std::string *v31[3];
  void *v32;
  std::__shared_weak_count *v33;
  std::string v34;
  void *lpsrc;
  std::__shared_weak_count *v36;

  v14 = a2[12];
  v15 = (uint64_t)(a2 + 14);
  LODWORD(v34.__r_.__value_.__l.__data_) = (***(uint64_t (****)(_QWORD))(a2[14] + 8))(*(_QWORD *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v14, v15, a3, a5, (int *)&v34);
  v16 = lpsrc;
  if (!lpsrc
  {
    *a1 = 0;
    a1[1] = 0;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, &v34);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v18 = v36;
  *a1 = v17;
  a1[1] = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(p_shared_owners);
    while (__stxr(v20 + 1, p_shared_owners));
    v32 = v16;
    v33 = v36;
    if (v36)
    {
      v21 = (unint64_t *)&v36->__shared_owners_;
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
    }
  }
  else
  {
    v32 = v16;
    v33 = 0;
  }
  memset(v31, 0, sizeof(v31));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v31, *a6, a6[1], 0xAAAAAAAAAAAAAAABLL * ((a6[1] - *a6) >> 3));
  memset(v30, 0, sizeof(v30));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v30, *a7, a7[1], 0xAAAAAAAAAAAAAAABLL * ((a7[1] - *a7) >> 3));
  Espresso::sequential_builder::add_kernel((uint64_t)a2, (uint64_t *)&v32, a3, a4, v31, v30);
  v34.__r_.__value_.__r.__words[0] = (std::string::size_type)v30;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
  v34.__r_.__value_.__r.__words[0] = (std::string::size_type)v31;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
  v23 = v33;
  if (v33)
  {
    v24 = (unint64_t *)&v33->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  if (*a2)
    Espresso::sequential_builder::add_shape_from_kernel(a2, (uint64_t)lpsrc, (__int128 **)a6, a7);
  v26 = v36;
  if (v36)
  {
    v27 = (unint64_t *)&v36->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
}

void sub_191488158(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  uint64_t v24;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v24);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  _Unwind_Resume(a1);
}

void Espresso::sequential_builder::add_t<Espresso::generic_transpose_kernel,Espresso::transpose_params_t>(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t *a7)
{
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::runtime_error *exception;
  std::string *v30[3];
  std::string *v31[3];
  void *v32;
  std::__shared_weak_count *v33;
  std::string v34;
  void *lpsrc;
  std::__shared_weak_count *v36;

  v14 = a2[12];
  v15 = (uint64_t)(a2 + 14);
  LODWORD(v34.__r_.__value_.__l.__data_) = (***(uint64_t (****)(_QWORD))(a2[14] + 8))(*(_QWORD *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v14, v15, a3, a5, (int *)&v34);
  v16 = lpsrc;
  if (!lpsrc
  {
    *a1 = 0;
    a1[1] = 0;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, &v34);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v18 = v36;
  *a1 = v17;
  a1[1] = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(p_shared_owners);
    while (__stxr(v20 + 1, p_shared_owners));
    v32 = v16;
    v33 = v36;
    if (v36)
    {
      v21 = (unint64_t *)&v36->__shared_owners_;
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
    }
  }
  else
  {
    v32 = v16;
    v33 = 0;
  }
  memset(v31, 0, sizeof(v31));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v31, *a6, a6[1], 0xAAAAAAAAAAAAAAABLL * ((a6[1] - *a6) >> 3));
  memset(v30, 0, sizeof(v30));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v30, *a7, a7[1], 0xAAAAAAAAAAAAAAABLL * ((a7[1] - *a7) >> 3));
  Espresso::sequential_builder::add_kernel((uint64_t)a2, (uint64_t *)&v32, a3, a4, v31, v30);
  v34.__r_.__value_.__r.__words[0] = (std::string::size_type)v30;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
  v34.__r_.__value_.__r.__words[0] = (std::string::size_type)v31;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
  v23 = v33;
  if (v33)
  {
    v24 = (unint64_t *)&v33->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  if (*a2)
    Espresso::sequential_builder::add_shape_from_kernel(a2, (uint64_t)lpsrc, (__int128 **)a6, a7);
  v26 = v36;
  if (v36)
  {
    v27 = (unint64_t *)&v36->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
}

void sub_191488454(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  uint64_t v24;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v24);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  _Unwind_Resume(a1);
}

void Espresso::sequential_builder::add_t<Espresso::generic_softmax_kernel,Espresso::softmax_params>(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t *a7)
{
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::runtime_error *exception;
  std::string *v30[3];
  std::string *v31[3];
  void *v32;
  std::__shared_weak_count *v33;
  std::string v34;
  void *lpsrc;
  std::__shared_weak_count *v36;

  v14 = a2[12];
  v15 = (uint64_t)(a2 + 14);
  LODWORD(v34.__r_.__value_.__l.__data_) = (***(uint64_t (****)(_QWORD))(a2[14] + 8))(*(_QWORD *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v14, v15, a3, a5, (int *)&v34);
  v16 = lpsrc;
  if (!lpsrc
  {
    *a1 = 0;
    a1[1] = 0;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, &v34);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v18 = v36;
  *a1 = v17;
  a1[1] = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(p_shared_owners);
    while (__stxr(v20 + 1, p_shared_owners));
    v32 = v16;
    v33 = v36;
    if (v36)
    {
      v21 = (unint64_t *)&v36->__shared_owners_;
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
    }
  }
  else
  {
    v32 = v16;
    v33 = 0;
  }
  memset(v31, 0, sizeof(v31));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v31, *a6, a6[1], 0xAAAAAAAAAAAAAAABLL * ((a6[1] - *a6) >> 3));
  memset(v30, 0, sizeof(v30));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v30, *a7, a7[1], 0xAAAAAAAAAAAAAAABLL * ((a7[1] - *a7) >> 3));
  Espresso::sequential_builder::add_kernel((uint64_t)a2, (uint64_t *)&v32, a3, a4, v31, v30);
  v34.__r_.__value_.__r.__words[0] = (std::string::size_type)v30;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
  v34.__r_.__value_.__r.__words[0] = (std::string::size_type)v31;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
  v23 = v33;
  if (v33)
  {
    v24 = (unint64_t *)&v33->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  if (*a2)
    Espresso::sequential_builder::add_shape_from_kernel(a2, (uint64_t)lpsrc, (__int128 **)a6, a7);
  v26 = v36;
  if (v36)
  {
    v27 = (unint64_t *)&v36->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
}

void sub_191488750(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  uint64_t v24;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v24);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  _Unwind_Resume(a1);
}

void Espresso::sequential_builder::add_t<Espresso::generic_batch_matmul_kernel,Espresso::batch_matmul_params_t>(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t *a7)
{
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::runtime_error *exception;
  std::string *v30[3];
  std::string *v31[3];
  void *v32;
  std::__shared_weak_count *v33;
  std::string v34;
  void *lpsrc;
  std::__shared_weak_count *v36;

  v14 = a2[12];
  v15 = (uint64_t)(a2 + 14);
  LODWORD(v34.__r_.__value_.__l.__data_) = (***(uint64_t (****)(_QWORD))(a2[14] + 8))(*(_QWORD *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v14, v15, a3, a5, (int *)&v34);
  v16 = lpsrc;
  if (!lpsrc
  {
    *a1 = 0;
    a1[1] = 0;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, &v34);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v18 = v36;
  *a1 = v17;
  a1[1] = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(p_shared_owners);
    while (__stxr(v20 + 1, p_shared_owners));
    v32 = v16;
    v33 = v36;
    if (v36)
    {
      v21 = (unint64_t *)&v36->__shared_owners_;
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
    }
  }
  else
  {
    v32 = v16;
    v33 = 0;
  }
  memset(v31, 0, sizeof(v31));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v31, *a6, a6[1], 0xAAAAAAAAAAAAAAABLL * ((a6[1] - *a6) >> 3));
  memset(v30, 0, sizeof(v30));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v30, *a7, a7[1], 0xAAAAAAAAAAAAAAABLL * ((a7[1] - *a7) >> 3));
  Espresso::sequential_builder::add_kernel((uint64_t)a2, (uint64_t *)&v32, a3, a4, v31, v30);
  v34.__r_.__value_.__r.__words[0] = (std::string::size_type)v30;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
  v34.__r_.__value_.__r.__words[0] = (std::string::size_type)v31;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
  v23 = v33;
  if (v33)
  {
    v24 = (unint64_t *)&v33->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  if (*a2)
    Espresso::sequential_builder::add_shape_from_kernel(a2, (uint64_t)lpsrc, (__int128 **)a6, a7);
  v26 = v36;
  if (v36)
  {
    v27 = (unint64_t *)&v36->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
}

void sub_191488A4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  uint64_t v24;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v24);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::layer_data>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::layer_data>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::layer_data>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::layer_data>>>>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::layer_data>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::layer_data>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::layer_data>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::layer_data>>>>::__deallocate_node(*(char **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

void std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::layer_data>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::layer_data>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::layer_data>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::layer_data>>>>::__deallocate_node(char *__p)
{
  char *v1;
  char *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  if (__p)
  {
    v1 = __p;
    do
    {
      v2 = *(char **)v1;
      v3 = (std::__shared_weak_count *)*((_QWORD *)v1 + 6);
      if (v3)
      {
        p_shared_owners = (unint64_t *)&v3->__shared_owners_;
        do
          v5 = __ldaxr(p_shared_owners);
        while (__stlxr(v5 - 1, p_shared_owners));
        if (!v5)
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
      }
      if (v1[39] < 0)
        operator delete(*((void **)v1 + 2));
      operator delete(v1);
      v1 = v2;
    }
    while (v2);
  }
}

void Espresso::composed_kernel_with_named_weights<Espresso::bahdanau_attention_params_t>::~composed_kernel_with_named_weights(Espresso::base_kernel *a1)
{
  *(_QWORD *)a1 = off_1E2D9E058;
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::layer_data>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::layer_data>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::layer_data>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::layer_data>>>>::~__hash_table((uint64_t)a1 + 360);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::~__hash_table((uint64_t)a1 + 320);
  *(_QWORD *)a1 = off_1E2D991B8;
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*((_QWORD **)a1 + 36));
  Espresso::base_kernel::~base_kernel(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::layer_data>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::layer_data>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::layer_data>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::layer_data>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::layer_data>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::layer_data>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::layer_data>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::layer_data>>>>::__deallocate_node(*(char **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void Espresso::abstract_kernel_with_named_weights<Espresso::bahdanau_attention_params_t>::clear_weights(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 288;
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*(_QWORD **)(a1 + 288));
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 280) = v2;
}

void Espresso::self_attention_kernel_cpu::~self_attention_kernel_cpu(Espresso::self_attention_kernel_cpu *this)
{
  *(_QWORD *)this = &off_1E2D92F38;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 480);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 464);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 448);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 432);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 416);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 400);
  Espresso::composed_kernel_with_named_weights<Espresso::self_attention_params_t>::~composed_kernel_with_named_weights(this);
}

{
  *(_QWORD *)this = &off_1E2D92F38;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 480);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 464);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 448);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 432);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 416);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 400);
  Espresso::composed_kernel_with_named_weights<Espresso::self_attention_params_t>::~composed_kernel_with_named_weights(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::self_attention_kernel_cpu::__launch()
{
  Espresso::throw_exception_selector<Espresso::invalid_state_error>("self_attention: Layer supposed to be unpacked on CPU engine");
}

void Espresso::self_attention_kernel_cpu::clear_weights(Espresso::self_attention_kernel_cpu *this)
{
  std::__shared_weak_count *v2;
  unint64_t *v3;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  __int128 v20;

  v20 = 0uLL;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)this + 400, &v20);
  v2 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
  if (*((_QWORD *)&v20 + 1))
  {
    v3 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 - 1, v3));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v20 = 0uLL;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)this + 416, &v20);
  v5 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
  if (*((_QWORD *)&v20 + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v20 = 0uLL;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)this + 432, &v20);
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
  if (*((_QWORD *)&v20 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v20 = 0uLL;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)this + 448, &v20);
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
  if (*((_QWORD *)&v20 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v20 = 0uLL;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)this + 464, &v20);
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
  if (*((_QWORD *)&v20 + 1))
  {
    v15 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v20 = 0uLL;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)this + 480, &v20);
  v17 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
  if (*((_QWORD *)&v20 + 1))
  {
    v18 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void Espresso::composed_kernel_with_named_weights<Espresso::self_attention_params_t>::on_resized(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  std::string *v10;
  __int128 v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  std::string *v16;
  __int128 v17;
  _QWORD *v18;
  std::string v19;
  void *__p[2];
  std::string::size_type v21;
  void **v22;

  v6 = a1 + 320;
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::clear(a1 + 320);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::layer_data>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::layer_data>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::layer_data>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::layer_data>>>>::clear(a1 + 360);
  v7 = *a3;
  if (a3[1] != *a3)
  {
    v8 = 0;
    v9 = 0;
    do
    {
      std::to_string(&v19, v9);
      v10 = std::string::insert(&v19, 0, "src_");
      v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      v21 = v10->__r_.__value_.__r.__words[2];
      v22 = __p;
      *(_OWORD *)__p = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      v12 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v6, (unsigned __int8 *)__p, (__int128 **)&v22);
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v12 + 5, *(_QWORD *)(v7 + v8), *(_QWORD *)(v7 + v8 + 8));
      if (SHIBYTE(v21) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v19.__r_.__value_.__l.__data_);
      ++v9;
      v7 = *a3;
      v8 += 16;
    }
    while (v9 < (a3[1] - *a3) >> 4);
  }
  v13 = *a2;
  if (a2[1] != *a2)
  {
    v14 = 0;
    v15 = 0;
    do
    {
      std::to_string(&v19, v15);
      v16 = std::string::insert(&v19, 0, "dst_");
      v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
      v21 = v16->__r_.__value_.__r.__words[2];
      v22 = __p;
      *(_OWORD *)__p = v17;
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      v18 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v6, (unsigned __int8 *)__p, (__int128 **)&v22);
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v18 + 5, *(_QWORD *)(v13 + v14), *(_QWORD *)(v13 + v14 + 8));
      if (SHIBYTE(v21) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v19.__r_.__value_.__l.__data_);
      ++v15;
      v13 = *a2;
      v14 += 16;
    }
    while (v15 < (a2[1] - *a2) >> 4);
  }
}

void sub_1914890E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void Espresso::self_attention_kernel_cpu::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, unint64_t a5, uint64_t *a6)
{
  int v10;
  uint64_t v11;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *p_shared_owners;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t *v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  __int128 v73;
  uint64_t v74;
  std::__shared_weak_count *v75;

  v74 = 0;
  v75 = 0;
  if (a6 && *a6)
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v74, *a6, a6[1]);
  if ((*((char *)a3 + 23) & 0x80000000) == 0)
  {
    v10 = *((unsigned __int8 *)a3 + 23);
    if (v10 != 5)
    {
      if (v10 != 7)
        goto LABEL_120;
      goto LABEL_11;
    }
    if (*(_DWORD *)a3 != 1701535575 || *((_BYTE *)a3 + 4) != 121)
    {
      if (*(_DWORD *)a3 != 1701535586 || *((_BYTE *)a3 + 4) != 121)
        goto LABEL_120;
      goto LABEL_59;
    }
    goto LABEL_83;
  }
  v11 = a3[1];
  if (v11 == 5)
  {
    if (*(_DWORD *)*a3 != 1701535575 || *(_BYTE *)(*a3 + 4) != 121)
    {
      if (*(_DWORD *)*a3 != 1701535586 || *(_BYTE *)(*a3 + 4) != 121)
        goto LABEL_120;
LABEL_59:
      v63 = v74;
      v64 = v75;
      if (v75)
      {
        p_shared_owners = (unint64_t *)&v75->__shared_owners_;
        do
          v29 = __ldxr(p_shared_owners);
        while (__stxr(v29 + 1, p_shared_owners));
      }
      Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<float,1>(&v73, *(_QWORD *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, &v63, *(_DWORD *)(a1 + 304), (a4 & 0x3F) == 0);
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 464, &v73);
      v30 = (std::__shared_weak_count *)*((_QWORD *)&v73 + 1);
      if (*((_QWORD *)&v73 + 1))
      {
        v31 = (unint64_t *)(*((_QWORD *)&v73 + 1) + 8);
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      v21 = v64;
      if (!v64)
        goto LABEL_120;
      v33 = (unint64_t *)&v64->__shared_owners_;
      do
        v23 = __ldaxr(v33);
      while (__stlxr(v23 - 1, v33));
      goto LABEL_118;
    }
LABEL_83:
    v69 = v74;
    v70 = v75;
    if (v75)
    {
      v40 = (unint64_t *)&v75->__shared_owners_;
      do
        v41 = __ldxr(v40);
      while (__stxr(v41 + 1, v40));
    }
    Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<float,2>(&v73, *(_QWORD *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, &v69, *(_DWORD *)(a1 + 304), *(_DWORD *)(a1 + 304), (a4 & 0x3F) == 0);
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 416, &v73);
    v42 = (std::__shared_weak_count *)*((_QWORD *)&v73 + 1);
    if (*((_QWORD *)&v73 + 1))
    {
      v43 = (unint64_t *)(*((_QWORD *)&v73 + 1) + 8);
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }
    v21 = v70;
    if (!v70)
      goto LABEL_120;
    v45 = (unint64_t *)&v70->__shared_owners_;
    do
      v23 = __ldaxr(v45);
    while (__stlxr(v23 - 1, v45));
LABEL_118:
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
    goto LABEL_120;
  }
  if (v11 != 7)
    goto LABEL_120;
  a3 = (uint64_t *)*a3;
LABEL_11:
  if (*(_DWORD *)a3 == 1970364247 && *(_DWORD *)((char *)a3 + 3) == 2037540213)
  {
    v71 = v74;
    v72 = v75;
    if (v75)
    {
      v34 = (unint64_t *)&v75->__shared_owners_;
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 1, v34));
    }
    Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<float,2>(&v73, *(_QWORD *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, &v71, *(_DWORD *)(a1 + 304), *(_DWORD *)(a1 + 304), (a4 & 0x3F) == 0);
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 400, &v73);
    v36 = (std::__shared_weak_count *)*((_QWORD *)&v73 + 1);
    if (*((_QWORD *)&v73 + 1))
    {
      v37 = (unint64_t *)(*((_QWORD *)&v73 + 1) + 8);
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
    v21 = v72;
    if (!v72)
      goto LABEL_120;
    v39 = (unint64_t *)&v72->__shared_owners_;
    do
      v23 = __ldaxr(v39);
    while (__stlxr(v23 - 1, v39));
    goto LABEL_118;
  }
  if (*(_DWORD *)a3 == 1635147607 && *(_DWORD *)((char *)a3 + 3) == 1702194273)
  {
    v67 = v74;
    v68 = v75;
    if (v75)
    {
      v46 = (unint64_t *)&v75->__shared_owners_;
      do
        v47 = __ldxr(v46);
      while (__stxr(v47 + 1, v46));
    }
    Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<float,2>(&v73, *(_QWORD *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, &v67, *(_DWORD *)(a1 + 304), *(_DWORD *)(a1 + 304), (a4 & 0x3F) == 0);
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 432, &v73);
    v48 = (std::__shared_weak_count *)*((_QWORD *)&v73 + 1);
    if (*((_QWORD *)&v73 + 1))
    {
      v49 = (unint64_t *)(*((_QWORD *)&v73 + 1) + 8);
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v50 - 1, v49));
      if (!v50)
      {
        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
        std::__shared_weak_count::__release_weak(v48);
      }
    }
    v21 = v68;
    if (!v68)
      goto LABEL_120;
    v51 = (unint64_t *)&v68->__shared_owners_;
    do
      v23 = __ldaxr(v51);
    while (__stlxr(v23 - 1, v51));
    goto LABEL_118;
  }
  if (*(_DWORD *)a3 == 1970364258 && *(_DWORD *)((char *)a3 + 3) == 2037540213)
  {
    v65 = v74;
    v66 = v75;
    if (v75)
    {
      v52 = (unint64_t *)&v75->__shared_owners_;
      do
        v53 = __ldxr(v52);
      while (__stxr(v53 + 1, v52));
    }
    Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<float,1>(&v73, *(_QWORD *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, &v65, *(_DWORD *)(a1 + 304), (a4 & 0x3F) == 0);
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 448, &v73);
    v54 = (std::__shared_weak_count *)*((_QWORD *)&v73 + 1);
    if (*((_QWORD *)&v73 + 1))
    {
      v55 = (unint64_t *)(*((_QWORD *)&v73 + 1) + 8);
      do
        v56 = __ldaxr(v55);
      while (__stlxr(v56 - 1, v55));
      if (!v56)
      {
        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
        std::__shared_weak_count::__release_weak(v54);
      }
    }
    v21 = v66;
    if (!v66)
      goto LABEL_120;
    v57 = (unint64_t *)&v66->__shared_owners_;
    do
      v23 = __ldaxr(v57);
    while (__stlxr(v23 - 1, v57));
    goto LABEL_118;
  }
  if (*(_DWORD *)a3 == 1635147618 && *(_DWORD *)((char *)a3 + 3) == 1702194273)
  {
    v61 = v74;
    v62 = v75;
    if (v75)
    {
      v16 = (unint64_t *)&v75->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<float,1>(&v73, *(_QWORD *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, &v61, *(_DWORD *)(a1 + 304), (a4 & 0x3F) == 0);
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 480, &v73);
    v18 = (std::__shared_weak_count *)*((_QWORD *)&v73 + 1);
    if (*((_QWORD *)&v73 + 1))
    {
      v19 = (unint64_t *)(*((_QWORD *)&v73 + 1) + 8);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    v21 = v62;
    if (v62)
    {
      v22 = (unint64_t *)&v62->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      goto LABEL_118;
    }
  }
LABEL_120:
  v58 = v75;
  if (v75)
  {
    v59 = (unint64_t *)&v75->__shared_owners_;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
}

void sub_191489714(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v3 - 48);
  _Unwind_Resume(a1);
}

BOOL Espresso::self_attention_kernel_cpu::supports_weight_key(uint64_t a1, _DWORD *a2)
{
  int v2;
  uint64_t v3;

  if (*((char *)a2 + 23) < 0)
  {
    v3 = *((_QWORD *)a2 + 1);
    if (v3 != 5)
    {
      if (v3 == 7)
      {
        a2 = *(_DWORD **)a2;
        goto LABEL_8;
      }
      return 0;
    }
    if (**(_DWORD **)a2 != 1701535575 || *(_BYTE *)(*(_QWORD *)a2 + 4) != 121)
      return **(_DWORD **)a2 == 1701535586 && *(_BYTE *)(*(_QWORD *)a2 + 4) == 121;
    return 1;
  }
  v2 = *((unsigned __int8 *)a2 + 23);
  if (v2 == 5)
  {
    if (*a2 != 1701535575 || *((_BYTE *)a2 + 4) != 121)
      return *a2 == 1701535586 && *((_BYTE *)a2 + 4) == 121;
    return 1;
  }
  if (v2 != 7)
    return 0;
LABEL_8:
  if (*a2 == 1970364247 && *(_DWORD *)((char *)a2 + 3) == 2037540213)
    return 1;
  if (*a2 == 1635147607 && *(_DWORD *)((char *)a2 + 3) == 1702194273)
    return 1;
  if (*a2 == 1970364258 && *(_DWORD *)((char *)a2 + 3) == 2037540213)
    return 1;
  return *a2 == 1635147618 && *(_DWORD *)((char *)a2 + 3) == 1702194273;
}

uint64_t Espresso::generic_self_attention_kernel::has_dynamic_top_shape(Espresso::generic_self_attention_kernel *this)
{
  return *((unsigned __int8 *)this + 312);
}

const char *Espresso::generic_self_attention_kernel::kernel_type_str(Espresso::generic_self_attention_kernel *this)
{
  return "self_attention";
}

void Espresso::self_attention_kernel_cpu::unpack(Espresso::self_attention_kernel_cpu *this, Espresso::unpack_options *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  int v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 *v15;
  unint64_t v16;
  unint64_t v17;
  __int128 v18;
  __int128 *v19;
  __int128 v20;
  std::string::size_type v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::string::size_type v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *size;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  std::string::size_type v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::string::size_type v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  std::string::size_type v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::string::size_type v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  unsigned int v76;
  __int128 *v77;
  __int128 *v78;
  uint64_t v79;
  uint64_t i;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t j;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  uint64_t k;
  uint64_t v90;
  void *v91;
  void *v92;
  unint64_t *v93;
  unint64_t v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  uint64_t m;
  uint64_t n;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  unsigned int v126;
  float v127;
  char *v128;
  uint64_t ii;
  int v130;
  __int128 *v131;
  __int128 v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  std::__shared_weak_count *v154;
  unint64_t *v155;
  unint64_t v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  std::__shared_weak_count *v178;
  unint64_t *v179;
  unint64_t v180;
  std::runtime_error *exception;
  std::string *v182;
  std::string *v183;
  std::string *v184;
  std::string *v185;
  std::string *v186;
  std::string *v187;
  std::string *v188;
  std::string *v189;
  std::string *v190;
  std::string *v191;
  std::string *v192;
  std::string *v193;
  std::string *v194;
  std::string *v195;
  std::string *v196;
  std::string *v197;
  std::string *v198;
  std::string *v199;
  std::string *v200;
  std::string *v201;
  std::string *v202;
  std::string *v203;
  std::string *v204;
  std::string *v205;
  std::string *v206;
  std::string *v207;
  std::string *v208;
  std::string *v209;
  std::string *v210;
  std::string *v211;
  void *v212;
  std::__shared_weak_count *v213;
  char v214;
  std::string *v215;
  std::string *v216;
  std::string *v217;
  std::string *v218;
  std::string *v219;
  std::string *v220;
  uint64_t v221;
  std::__shared_weak_count *v222;
  std::string *v223;
  std::string *v224;
  std::string *v225;
  std::string *v226;
  std::string *v227;
  std::string *v228;
  uint64_t v229;
  std::__shared_weak_count *v230;
  std::string *v231;
  std::string *v232;
  std::string *v233;
  std::string *v234;
  std::string *v235;
  std::string *v236;
  uint64_t v237;
  std::__shared_weak_count *v238;
  uint64_t v239;
  std::__shared_weak_count *v240;
  int v241;
  std::string *v242;
  std::string *v243;
  std::string *v244;
  std::string *v245;
  std::string *v246;
  std::string *v247;
  uint64_t v248;
  std::__shared_weak_count *v249;
  uint64_t v250;
  std::__shared_weak_count *v251;
  int v252;
  std::string *v253;
  std::string *v254;
  std::string *v255;
  std::string *v256;
  std::string *v257;
  std::string *v258;
  uint64_t v259;
  std::__shared_weak_count *v260;
  std::string *v261;
  std::string *v262;
  std::string *v263;
  std::string *v264;
  std::string *v265;
  std::string *v266;
  uint64_t v267;
  std::__shared_weak_count *v268;
  std::string *v269;
  std::string *v270;
  std::string *v271;
  std::string *v272;
  std::string *v273;
  std::string *v274;
  void *v275;
  std::__shared_weak_count *v276;
  uint64_t v277;
  std::string *v278;
  std::string *v279;
  std::string *v280;
  std::string *v281;
  std::string *v282;
  std::string *v283;
  uint64_t v284;
  std::__shared_weak_count *v285;
  __int16 v286;
  char v287;
  std::string *v288;
  std::string *v289;
  std::string *v290;
  std::string *v291;
  std::string *v292;
  std::string *v293;
  std::string v294;
  std::string *v295;
  std::string *v296;
  std::string *v297;
  std::string *v298;
  std::string *v299;
  std::string *v300;
  std::string *v301;
  std::string *v302;
  std::string *v303;
  std::string *v304;
  std::string *v305;
  std::string *v306;
  uint64_t v307;
  std::__shared_weak_count *v308;
  std::string *v309;
  std::string *v310;
  std::string *v311;
  std::string *v312;
  std::string *v313;
  std::string *v314;
  uint64_t v315;
  std::__shared_weak_count *v316;
  std::string *v317;
  std::string *v318;
  std::string *v319;
  std::string *v320;
  std::string *v321;
  std::string *v322;
  uint64_t v323;
  std::__shared_weak_count *v324;
  __int128 v325;
  int v326;
  std::string *v327;
  std::string *v328;
  std::string *v329;
  std::string *v330;
  std::string *v331;
  std::string *v332;
  uint64_t v333;
  std::__shared_weak_count *v334;
  std::string *v335;
  std::string *v336;
  std::string *v337;
  std::string *v338;
  std::string *v339;
  std::string *v340;
  uint64_t v341;
  std::__shared_weak_count *v342;
  std::string *v343;
  std::string *v344;
  std::string *v345;
  std::string *v346;
  std::string *v347;
  std::string *v348;
  uint64_t v349;
  std::__shared_weak_count *v350;
  uint64_t v351;
  std::__shared_weak_count *v352;
  uint64_t v353;
  std::__shared_weak_count *v354;
  std::string *v355;
  std::string *v356;
  std::string *v357;
  std::string *v358;
  std::string *v359;
  std::string *v360;
  std::string v361;
  uint64_t v362;
  std::__shared_weak_count *v363;
  uint64_t v364;
  std::__shared_weak_count *v365;
  std::string *v366;
  std::string *v367;
  std::string *v368;
  std::string *v369;
  std::string *v370;
  std::string *v371;
  std::string v372;
  uint64_t v373;
  std::__shared_weak_count *v374;
  uint64_t v375;
  std::__shared_weak_count *v376;
  std::string *v377;
  std::string *v378;
  std::string *v379;
  std::string *v380;
  std::string *v381;
  std::string *v382;
  std::string v383;
  int v384;
  int v385;
  uint64_t v386;
  int v387;
  uint64_t v388;
  uint64_t v389;
  int v390;
  char v391;
  uint64_t v392;
  int v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400[2];
  uint64_t v401[2];
  uint64_t v402;
  std::__shared_weak_count *v403;
  _QWORD *v404[7];
  char v405;
  Espresso::net *v406;
  std::__shared_weak_count *v407;
  uint64_t v408;
  std::__shared_weak_count *v409;
  uint64_t v410;
  std::__shared_weak_count *v411;
  uint64_t v412;
  std::string **v413;
  std::__shared_weak_count *v414;
  __int128 v415;
  uint64_t v416;
  _QWORD v417[3];
  __int128 v418;
  _BYTE v419[32];
  _BYTE v420[12];
  void *v421[2];
  char v422;
  void *lpsrc[2];
  char v424;
  std::string v425;
  std::string v426;
  __int128 v427;
  _BYTE v428[28];
  int v429;
  char v430;
  _BYTE v431[28];
  int v432;
  char v433;
  std::string v434;
  void *v435[2];
  char v436;
  void *v437[2];
  char v438;
  void *v439[2];
  char v440;
  std::string v441;
  uint64_t v442;
  std::string v443;
  uint64_t v444;
  std::string v445;
  uint64_t v446;
  _BYTE v447[28];
  int v448;
  __int16 v449;
  int v450;
  uint64_t v451;

  v451 = *MEMORY[0x1E0C80C00];
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  v401[0] = *((_QWORD *)this + 1);
  v401[1] = (uint64_t)v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v7 = *((_DWORD *)this + 79);
  v400[1] = 0;
  v400[0] = 0;
  Espresso::sequential_builder::sequential_builder((uint64_t)&v402, v401, v7, v400);
  if (v4)
  {
    v8 = (unint64_t *)&v4->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v391 = 0;
  v393 = -1;
  __asm { FMOV            V0.2S, #1.0 }
  v394 = _D0;
  v399 = 0;
  v386 = 1;
  v388 = _D0;
  v395 = 0;
  v389 = 0;
  v392 = 0;
  v387 = 0;
  v390 = 0;
  v396 = 0;
  v398 = 0;
  v397 = 0;
  v385 = *((_DWORD *)this + 76);
  v384 = v385;
  v15 = (__int128 *)*((_QWORD *)a2 + 3);
  v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 4) - (_QWORD)v15) >> 3);
  if (v16 <= 2)
    Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &>("self_attention_kernel_cpu: requires atleast 3 bottoms; only %zu given",
      v16);
  v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 1) - *(_QWORD *)a2) >> 3);
  if (v17 != v16 - 2)
    Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long,unsigned long>(v16 - 3, v17 - 1);
  if (*((char *)v15 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v383, *(const std::string::value_type **)v15, *((_QWORD *)v15 + 1));
  }
  else
  {
    v18 = *v15;
    v383.__r_.__value_.__r.__words[2] = *((_QWORD *)v15 + 2);
    *(_OWORD *)&v383.__r_.__value_.__l.__data_ = v18;
  }
  if (*((_QWORD *)this + 50))
  {
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)&v418 + 1, "query_fc");
    (*(void (**)(std::string *__return_ptr, Espresso::self_attention_kernel_cpu *, Espresso::unpack_options *, char *))(*(_QWORD *)this + 296))(&v425, this, a2, (char *)&v418 + 8);
    if (SHIBYTE(v383.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v383.__r_.__value_.__l.__data_);
    v383 = v425;
    *((_BYTE *)&v425.__r_.__value_.__s + 23) = 0;
    v425.__r_.__value_.__s.__data_[0] = 0;
    if ((v419[15] & 0x80000000) != 0)
      operator delete(*((void **)&v418 + 1));
    std::string::basic_string[abi:ne180100]<0>(&v425, "inner_product");
    std::string::basic_string[abi:ne180100]<0>(&v415, "query_fc");
    (*(void (**)(_QWORD *__return_ptr, Espresso::self_attention_kernel_cpu *, Espresso::unpack_options *, __int128 *))(*(_QWORD *)this + 296))((_QWORD *)&v418 + 1, this, a2, &v415);
    v19 = (__int128 *)*((_QWORD *)a2 + 3);
    if (*((char *)v19 + 23) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v447, *(const std::string::value_type **)v19, *((_QWORD *)v19 + 1));
    }
    else
    {
      v20 = *v19;
      *(_QWORD *)&v447[16] = *((_QWORD *)v19 + 2);
      *(_OWORD *)v447 = v20;
    }
    v381 = 0;
    v380 = 0;
    v382 = 0;
    *(_QWORD *)v431 = &v380;
    v431[8] = 0;
    v380 = (std::string *)operator new(0x18uLL);
    v381 = v380;
    v382 = v380 + 1;
    v381 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v382, (__int128 *)v447, (__int128 *)&v447[24], v380);
    if (SHIBYTE(v383.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external((std::string *)v431, v383.__r_.__value_.__l.__data_, v383.__r_.__value_.__l.__size_);
    else
      *(std::string *)v431 = v383;
    v378 = 0;
    v377 = 0;
    v379 = 0;
    *(_QWORD *)v428 = &v377;
    v428[8] = 0;
    v377 = (std::string *)operator new(0x18uLL);
    v378 = v377;
    v379 = v377 + 1;
    v378 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v379, (__int128 *)v431, (__int128 *)&v431[24], v377);
    Espresso::sequential_builder::add_t<Espresso::generic_inner_product_kernel,Espresso::inner_product_uniforms>(&v372, &v402, (uint64_t)&v425, (uint64_t)&v418 + 8, (uint64_t)&v384, (uint64_t *)&v380, (uint64_t *)&v377);
    *(_QWORD *)v428 = &v377;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v428);
    if ((v431[23] & 0x80000000) != 0)
      operator delete(*(void **)v431);
    *(_QWORD *)v431 = &v380;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v431);
    if ((v447[23] & 0x80000000) != 0)
      operator delete(*(void **)v447);
    if ((v419[15] & 0x80000000) != 0)
      operator delete(*((void **)&v418 + 1));
    if (SHIBYTE(v416) < 0)
      operator delete((void *)v415);
    if (SHIBYTE(v425.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v425.__r_.__value_.__l.__data_);
    v21 = v372.__r_.__value_.__r.__words[0];
    v22 = (std::__shared_weak_count *)*((_QWORD *)this + 51);
    v375 = *((_QWORD *)this + 50);
    v376 = v22;
    if (v22)
    {
      v23 = (unint64_t *)&v22->__shared_owners_;
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
    }
    (*(void (**)(std::string::size_type, uint64_t *))(*(_QWORD *)v21 + 400))(v21, &v375);
    v25 = v376;
    if (v376)
    {
      v26 = (unint64_t *)&v376->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    v28 = v372.__r_.__value_.__r.__words[0];
    v29 = (std::__shared_weak_count *)*((_QWORD *)this + 57);
    v373 = *((_QWORD *)this + 56);
    v374 = v29;
    if (v29)
    {
      v30 = (unint64_t *)&v29->__shared_owners_;
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
    }
    (*(void (**)(std::string::size_type, uint64_t *))(*(_QWORD *)v28 + 392))(v28, &v373);
    v32 = v374;
    if (v374)
    {
      v33 = (unint64_t *)&v374->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    size = (std::__shared_weak_count *)v372.__r_.__value_.__l.__size_;
    if (v372.__r_.__value_.__l.__size_)
    {
      v36 = (unint64_t *)(v372.__r_.__value_.__l.__size_ + 8);
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
  }
  v38 = *((_QWORD *)a2 + 3);
  if (*(char *)(v38 + 47) < 0)
    std::string::__init_copy_ctor_external(&v372, *(const std::string::value_type **)(v38 + 24), *(_QWORD *)(v38 + 32));
  else
    v372 = *(std::string *)(v38 + 24);
  if (*((_QWORD *)this + 52))
  {
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)&v418 + 1, "key_fc");
    (*(void (**)(std::string *__return_ptr, Espresso::self_attention_kernel_cpu *, Espresso::unpack_options *, char *))(*(_QWORD *)this + 296))(&v425, this, a2, (char *)&v418 + 8);
    if (SHIBYTE(v372.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v372.__r_.__value_.__l.__data_);
    v372 = v425;
    *((_BYTE *)&v425.__r_.__value_.__s + 23) = 0;
    v425.__r_.__value_.__s.__data_[0] = 0;
    if ((v419[15] & 0x80000000) != 0)
      operator delete(*((void **)&v418 + 1));
    std::string::basic_string[abi:ne180100]<0>(&v425, "inner_product");
    std::string::basic_string[abi:ne180100]<0>(&v415, "key_fc");
    (*(void (**)(_QWORD *__return_ptr, Espresso::self_attention_kernel_cpu *, Espresso::unpack_options *, __int128 *))(*(_QWORD *)this + 296))((_QWORD *)&v418 + 1, this, a2, &v415);
    v39 = *((_QWORD *)a2 + 3);
    if (*(char *)(v39 + 47) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v447, *(const std::string::value_type **)(v39 + 24), *(_QWORD *)(v39 + 32));
    }
    else
    {
      *(_OWORD *)v447 = *(_OWORD *)(v39 + 24);
      *(_QWORD *)&v447[16] = *(_QWORD *)(v39 + 40);
    }
    v370 = 0;
    v369 = 0;
    v371 = 0;
    *(_QWORD *)v431 = &v369;
    v431[8] = 0;
    v369 = (std::string *)operator new(0x18uLL);
    v370 = v369;
    v371 = v369 + 1;
    v370 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v371, (__int128 *)v447, (__int128 *)&v447[24], v369);
    if (SHIBYTE(v372.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external((std::string *)v431, v372.__r_.__value_.__l.__data_, v372.__r_.__value_.__l.__size_);
    else
      *(std::string *)v431 = v372;
    v367 = 0;
    v366 = 0;
    v368 = 0;
    *(_QWORD *)v428 = &v366;
    v428[8] = 0;
    v366 = (std::string *)operator new(0x18uLL);
    v367 = v366;
    v368 = v366 + 1;
    v367 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v368, (__int128 *)v431, (__int128 *)&v431[24], v366);
    Espresso::sequential_builder::add_t<Espresso::generic_inner_product_kernel,Espresso::inner_product_uniforms>(&v361, &v402, (uint64_t)&v425, (uint64_t)&v418 + 8, (uint64_t)&v384, (uint64_t *)&v369, (uint64_t *)&v366);
    *(_QWORD *)v428 = &v366;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v428);
    if ((v431[23] & 0x80000000) != 0)
      operator delete(*(void **)v431);
    *(_QWORD *)v431 = &v369;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v431);
    if ((v447[23] & 0x80000000) != 0)
      operator delete(*(void **)v447);
    if ((v419[15] & 0x80000000) != 0)
      operator delete(*((void **)&v418 + 1));
    if (SHIBYTE(v416) < 0)
      operator delete((void *)v415);
    if (SHIBYTE(v425.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v425.__r_.__value_.__l.__data_);
    v40 = v361.__r_.__value_.__r.__words[0];
    v41 = (std::__shared_weak_count *)*((_QWORD *)this + 53);
    v364 = *((_QWORD *)this + 52);
    v365 = v41;
    if (v41)
    {
      v42 = (unint64_t *)&v41->__shared_owners_;
      do
        v43 = __ldxr(v42);
      while (__stxr(v43 + 1, v42));
    }
    (*(void (**)(std::string::size_type, uint64_t *))(*(_QWORD *)v40 + 400))(v40, &v364);
    v44 = v365;
    if (v365)
    {
      v45 = (unint64_t *)&v365->__shared_owners_;
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
    }
    v47 = v361.__r_.__value_.__r.__words[0];
    v48 = (std::__shared_weak_count *)*((_QWORD *)this + 59);
    v362 = *((_QWORD *)this + 58);
    v363 = v48;
    if (v48)
    {
      v49 = (unint64_t *)&v48->__shared_owners_;
      do
        v50 = __ldxr(v49);
      while (__stxr(v50 + 1, v49));
    }
    (*(void (**)(std::string::size_type, uint64_t *))(*(_QWORD *)v47 + 392))(v47, &v362);
    v51 = v363;
    if (v363)
    {
      v52 = (unint64_t *)&v363->__shared_owners_;
      do
        v53 = __ldaxr(v52);
      while (__stlxr(v53 - 1, v52));
      if (!v53)
      {
        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
        std::__shared_weak_count::__release_weak(v51);
      }
    }
    v54 = (std::__shared_weak_count *)v361.__r_.__value_.__l.__size_;
    if (v361.__r_.__value_.__l.__size_)
    {
      v55 = (unint64_t *)(v361.__r_.__value_.__l.__size_ + 8);
      do
        v56 = __ldaxr(v55);
      while (__stlxr(v56 - 1, v55));
      if (!v56)
      {
        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
        std::__shared_weak_count::__release_weak(v54);
      }
    }
  }
  v57 = *((_QWORD *)a2 + 3);
  if (*(char *)(v57 + 71) < 0)
    std::string::__init_copy_ctor_external(&v361, *(const std::string::value_type **)(v57 + 48), *(_QWORD *)(v57 + 56));
  else
    v361 = *(std::string *)(v57 + 48);
  if (*((_QWORD *)this + 54))
  {
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)&v418 + 1, "value_fc");
    (*(void (**)(std::string *__return_ptr, Espresso::self_attention_kernel_cpu *, Espresso::unpack_options *, char *))(*(_QWORD *)this + 296))(&v425, this, a2, (char *)&v418 + 8);
    if (SHIBYTE(v361.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v361.__r_.__value_.__l.__data_);
    v361 = v425;
    *((_BYTE *)&v425.__r_.__value_.__s + 23) = 0;
    v425.__r_.__value_.__s.__data_[0] = 0;
    if ((v419[15] & 0x80000000) != 0)
      operator delete(*((void **)&v418 + 1));
    std::string::basic_string[abi:ne180100]<0>(&v425, "inner_product");
    std::string::basic_string[abi:ne180100]<0>(&v415, "value_fc");
    (*(void (**)(_QWORD *__return_ptr, Espresso::self_attention_kernel_cpu *, Espresso::unpack_options *, __int128 *))(*(_QWORD *)this + 296))((_QWORD *)&v418 + 1, this, a2, &v415);
    v58 = *((_QWORD *)a2 + 3);
    if (*(char *)(v58 + 71) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v447, *(const std::string::value_type **)(v58 + 48), *(_QWORD *)(v58 + 56));
    }
    else
    {
      *(_OWORD *)v447 = *(_OWORD *)(v58 + 48);
      *(_QWORD *)&v447[16] = *(_QWORD *)(v58 + 64);
    }
    v359 = 0;
    v358 = 0;
    v360 = 0;
    *(_QWORD *)v431 = &v358;
    v431[8] = 0;
    v358 = (std::string *)operator new(0x18uLL);
    v359 = v358;
    v360 = v358 + 1;
    v359 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v360, (__int128 *)v447, (__int128 *)&v447[24], v358);
    if (SHIBYTE(v361.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external((std::string *)v431, v361.__r_.__value_.__l.__data_, v361.__r_.__value_.__l.__size_);
    else
      *(std::string *)v431 = v361;
    v356 = 0;
    v355 = 0;
    v357 = 0;
    *(_QWORD *)v428 = &v355;
    v428[8] = 0;
    v355 = (std::string *)operator new(0x18uLL);
    v356 = v355;
    v357 = v355 + 1;
    v356 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v357, (__int128 *)v431, (__int128 *)&v431[24], v355);
    Espresso::sequential_builder::add_t<Espresso::generic_inner_product_kernel,Espresso::inner_product_uniforms>(&v445, &v402, (uint64_t)&v425, (uint64_t)&v418 + 8, (uint64_t)&v384, (uint64_t *)&v358, (uint64_t *)&v355);
    *(_QWORD *)v428 = &v355;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v428);
    if ((v431[23] & 0x80000000) != 0)
      operator delete(*(void **)v431);
    *(_QWORD *)v431 = &v358;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v431);
    if ((v447[23] & 0x80000000) != 0)
      operator delete(*(void **)v447);
    if ((v419[15] & 0x80000000) != 0)
      operator delete(*((void **)&v418 + 1));
    if (SHIBYTE(v416) < 0)
      operator delete((void *)v415);
    if (SHIBYTE(v425.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v425.__r_.__value_.__l.__data_);
    v59 = v445.__r_.__value_.__r.__words[0];
    v60 = (std::__shared_weak_count *)*((_QWORD *)this + 55);
    v353 = *((_QWORD *)this + 54);
    v354 = v60;
    if (v60)
    {
      v61 = (unint64_t *)&v60->__shared_owners_;
      do
        v62 = __ldxr(v61);
      while (__stxr(v62 + 1, v61));
    }
    (*(void (**)(std::string::size_type, uint64_t *))(*(_QWORD *)v59 + 400))(v59, &v353);
    v63 = v354;
    if (v354)
    {
      v64 = (unint64_t *)&v354->__shared_owners_;
      do
        v65 = __ldaxr(v64);
      while (__stlxr(v65 - 1, v64));
      if (!v65)
      {
        ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
        std::__shared_weak_count::__release_weak(v63);
      }
    }
    v66 = v445.__r_.__value_.__r.__words[0];
    v67 = (std::__shared_weak_count *)*((_QWORD *)this + 61);
    v351 = *((_QWORD *)this + 60);
    v352 = v67;
    if (v67)
    {
      v68 = (unint64_t *)&v67->__shared_owners_;
      do
        v69 = __ldxr(v68);
      while (__stxr(v69 + 1, v68));
    }
    (*(void (**)(std::string::size_type, uint64_t *))(*(_QWORD *)v66 + 392))(v66, &v351);
    v70 = v352;
    if (v352)
    {
      v71 = (unint64_t *)&v352->__shared_owners_;
      do
        v72 = __ldaxr(v71);
      while (__stlxr(v72 - 1, v71));
      if (!v72)
      {
        ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
        std::__shared_weak_count::__release_weak(v70);
      }
    }
    v73 = (std::__shared_weak_count *)v445.__r_.__value_.__l.__size_;
    if (v445.__r_.__value_.__l.__size_)
    {
      v74 = (unint64_t *)(v445.__r_.__value_.__l.__size_ + 8);
      do
        v75 = __ldaxr(v74);
      while (__stlxr(v75 - 1, v74));
      if (!v75)
      {
        ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
        std::__shared_weak_count::__release_weak(v73);
      }
    }
  }
  v449 = 1;
  v450 = 1;
  v76 = *((_DWORD *)this + 77);
  *(_DWORD *)v447 = *((_DWORD *)this + 76) / v76;
  *(_DWORD *)&v447[4] = 1;
  v448 = 0;
  *(_DWORD *)&v447[8] = v76;
  *(_OWORD *)&v447[12] = xmmword_191A93570;
  std::string::basic_string[abi:ne180100]<0>(&v425, "reshape");
  std::string::basic_string[abi:ne180100]<0>(&v415, "query_reshape");
  (*(void (**)(_QWORD *__return_ptr, Espresso::self_attention_kernel_cpu *, Espresso::unpack_options *, __int128 *))(*(_QWORD *)this + 296))((_QWORD *)&v418 + 1, this, a2, &v415);
  if (SHIBYTE(v383.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)v431, v383.__r_.__value_.__l.__data_, v383.__r_.__value_.__l.__size_);
  else
    *(std::string *)v431 = v383;
  v347 = 0;
  v346 = 0;
  v348 = 0;
  *(_QWORD *)v428 = &v346;
  v428[8] = 0;
  v346 = (std::string *)operator new(0x18uLL);
  v347 = v346;
  v348 = v346 + 1;
  v347 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v348, (__int128 *)v431, (__int128 *)&v431[24], v346);
  std::string::basic_string[abi:ne180100]<0>(&v445, "query_reshaped");
  (*(void (**)(_BYTE *__return_ptr, Espresso::self_attention_kernel_cpu *, Espresso::unpack_options *, std::string *))(*(_QWORD *)this + 296))(v428, this, a2, &v445);
  v344 = 0;
  v343 = 0;
  v345 = 0;
  v443.__r_.__value_.__r.__words[0] = (std::string::size_type)&v343;
  v443.__r_.__value_.__s.__data_[8] = 0;
  v343 = (std::string *)operator new(0x18uLL);
  v344 = v343;
  v345 = v343 + 1;
  v344 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v345, (__int128 *)v428, (__int128 *)&v428[24], v343);
  Espresso::sequential_builder::add_t<Espresso::generic_reshape_kernel,Espresso::reshape_params>(&v349, &v402, (uint64_t)&v425, (uint64_t)&v418 + 8, (uint64_t)v447, (uint64_t *)&v346, (uint64_t *)&v343);
  v443.__r_.__value_.__r.__words[0] = (std::string::size_type)&v343;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v443);
  if ((v428[23] & 0x80000000) != 0)
    operator delete(*(void **)v428);
  if (SHIBYTE(v445.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v445.__r_.__value_.__l.__data_);
  *(_QWORD *)v428 = &v346;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v428);
  if ((v431[23] & 0x80000000) != 0)
    operator delete(*(void **)v431);
  if ((v419[15] & 0x80000000) != 0)
    operator delete(*((void **)&v418 + 1));
  if (SHIBYTE(v416) < 0)
    operator delete((void *)v415);
  if (SHIBYTE(v425.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v425.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v425, "reshape");
  std::string::basic_string[abi:ne180100]<0>(&v415, "key_reshape");
  (*(void (**)(_QWORD *__return_ptr, Espresso::self_attention_kernel_cpu *, Espresso::unpack_options *, __int128 *))(*(_QWORD *)this + 296))((_QWORD *)&v418 + 1, this, a2, &v415);
  if (SHIBYTE(v372.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)v431, v372.__r_.__value_.__l.__data_, v372.__r_.__value_.__l.__size_);
  else
    *(std::string *)v431 = v372;
  v339 = 0;
  v338 = 0;
  v340 = 0;
  *(_QWORD *)v428 = &v338;
  v428[8] = 0;
  v338 = (std::string *)operator new(0x18uLL);
  v339 = v338;
  v340 = v338 + 1;
  v339 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v340, (__int128 *)v431, (__int128 *)&v431[24], v338);
  std::string::basic_string[abi:ne180100]<0>(&v445, "key_reshaped");
  (*(void (**)(_BYTE *__return_ptr, Espresso::self_attention_kernel_cpu *, Espresso::unpack_options *, std::string *))(*(_QWORD *)this + 296))(v428, this, a2, &v445);
  v336 = 0;
  v335 = 0;
  v337 = 0;
  v443.__r_.__value_.__r.__words[0] = (std::string::size_type)&v335;
  v443.__r_.__value_.__s.__data_[8] = 0;
  v335 = (std::string *)operator new(0x18uLL);
  v336 = v335;
  v337 = v335 + 1;
  v336 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v337, (__int128 *)v428, (__int128 *)&v428[24], v335);
  Espresso::sequential_builder::add_t<Espresso::generic_reshape_kernel,Espresso::reshape_params>(&v341, &v402, (uint64_t)&v425, (uint64_t)&v418 + 8, (uint64_t)v447, (uint64_t *)&v338, (uint64_t *)&v335);
  v443.__r_.__value_.__r.__words[0] = (std::string::size_type)&v335;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v443);
  if ((v428[23] & 0x80000000) != 0)
    operator delete(*(void **)v428);
  if (SHIBYTE(v445.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v445.__r_.__value_.__l.__data_);
  *(_QWORD *)v428 = &v338;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v428);
  if ((v431[23] & 0x80000000) != 0)
    operator delete(*(void **)v431);
  if ((v419[15] & 0x80000000) != 0)
    operator delete(*((void **)&v418 + 1));
  if (SHIBYTE(v416) < 0)
    operator delete((void *)v415);
  if (SHIBYTE(v425.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v425.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v425, "reshape");
  std::string::basic_string[abi:ne180100]<0>(&v415, "value_reshape");
  (*(void (**)(_QWORD *__return_ptr, Espresso::self_attention_kernel_cpu *, Espresso::unpack_options *, __int128 *))(*(_QWORD *)this + 296))((_QWORD *)&v418 + 1, this, a2, &v415);
  if (SHIBYTE(v361.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)v431, v361.__r_.__value_.__l.__data_, v361.__r_.__value_.__l.__size_);
  else
    *(std::string *)v431 = v361;
  v331 = 0;
  v330 = 0;
  v332 = 0;
  *(_QWORD *)v428 = &v330;
  v428[8] = 0;
  v330 = (std::string *)operator new(0x18uLL);
  v331 = v330;
  v332 = v330 + 1;
  v331 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v332, (__int128 *)v431, (__int128 *)&v431[24], v330);
  std::string::basic_string[abi:ne180100]<0>(&v445, "value_reshaped");
  (*(void (**)(_BYTE *__return_ptr, Espresso::self_attention_kernel_cpu *, Espresso::unpack_options *, std::string *))(*(_QWORD *)this + 296))(v428, this, a2, &v445);
  v328 = 0;
  v327 = 0;
  v329 = 0;
  v443.__r_.__value_.__r.__words[0] = (std::string::size_type)&v327;
  v443.__r_.__value_.__s.__data_[8] = 0;
  v327 = (std::string *)operator new(0x18uLL);
  v328 = v327;
  v329 = v327 + 1;
  v328 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v329, (__int128 *)v428, (__int128 *)&v428[24], v327);
  Espresso::sequential_builder::add_t<Espresso::generic_reshape_kernel,Espresso::reshape_params>(&v333, &v402, (uint64_t)&v425, (uint64_t)&v418 + 8, (uint64_t)v447, (uint64_t *)&v330, (uint64_t *)&v327);
  v443.__r_.__value_.__r.__words[0] = (std::string::size_type)&v327;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v443);
  if ((v428[23] & 0x80000000) != 0)
    operator delete(*(void **)v428);
  if (SHIBYTE(v445.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v445.__r_.__value_.__l.__data_);
  *(_QWORD *)v428 = &v330;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v428);
  if ((v431[23] & 0x80000000) != 0)
    operator delete(*(void **)v431);
  if ((v419[15] & 0x80000000) != 0)
    operator delete(*((void **)&v418 + 1));
  if (SHIBYTE(v416) < 0)
    operator delete((void *)v415);
  if (SHIBYTE(v425.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v425.__r_.__value_.__l.__data_);
  v325 = xmmword_191A93640;
  v326 = 1;
  std::string::basic_string[abi:ne180100]<0>(&v425, "transpose");
  std::string::basic_string[abi:ne180100]<0>(&v415, "query_t");
  (*(void (**)(_QWORD *__return_ptr, Espresso::self_attention_kernel_cpu *, Espresso::unpack_options *, __int128 *))(*(_QWORD *)this + 296))((_QWORD *)&v418 + 1, this, a2, &v415);
  std::string::basic_string[abi:ne180100]<0>(v428, "query_reshaped");
  (*(void (**)(_BYTE *__return_ptr, Espresso::self_attention_kernel_cpu *, Espresso::unpack_options *, _BYTE *))(*(_QWORD *)this + 296))(v431, this, a2, v428);
  v321 = 0;
  v320 = 0;
  v322 = 0;
  v445.__r_.__value_.__r.__words[0] = (std::string::size_type)&v320;
  v445.__r_.__value_.__s.__data_[8] = 0;
  v320 = (std::string *)operator new(0x18uLL);
  v321 = v320;
  v322 = v320 + 1;
  v321 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v322, (__int128 *)v431, (__int128 *)&v431[24], v320);
  std::string::basic_string[abi:ne180100]<0>(&v443, "query_t");
  (*(void (**)(std::string *__return_ptr, Espresso::self_attention_kernel_cpu *, Espresso::unpack_options *, std::string *))(*(_QWORD *)this + 296))(&v445, this, a2, &v443);
  v318 = 0;
  v317 = 0;
  v319 = 0;
  v441.__r_.__value_.__r.__words[0] = (std::string::size_type)&v317;
  v441.__r_.__value_.__s.__data_[8] = 0;
  v317 = (std::string *)operator new(0x18uLL);
  v318 = v317;
  v319 = v317 + 1;
  v318 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v319, (__int128 *)&v445, (__int128 *)&v446, v317);
  Espresso::sequential_builder::add_t<Espresso::generic_transpose_kernel,Espresso::transpose_params_t>(&v323, &v402, (uint64_t)&v425, (uint64_t)&v418 + 8, (uint64_t)&v325, (uint64_t *)&v320, (uint64_t *)&v317);
  v441.__r_.__value_.__r.__words[0] = (std::string::size_type)&v317;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v441);
  if (SHIBYTE(v445.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v445.__r_.__value_.__l.__data_);
  if (SHIBYTE(v443.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v443.__r_.__value_.__l.__data_);
  v445.__r_.__value_.__r.__words[0] = (std::string::size_type)&v320;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v445);
  if ((v431[23] & 0x80000000) != 0)
    operator delete(*(void **)v431);
  if ((v428[23] & 0x80000000) != 0)
    operator delete(*(void **)v428);
  if ((v419[15] & 0x80000000) != 0)
    operator delete(*((void **)&v418 + 1));
  if (SHIBYTE(v416) < 0)
    operator delete((void *)v415);
  if (SHIBYTE(v425.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v425.__r_.__value_.__l.__data_);
  v77 = *(__int128 **)a2;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 1) - *(_QWORD *)a2) >> 3) >= 2)
  {
    if (*((char *)v77 + 47) < 0)
      std::string::__init_copy_ctor_external(&v445, *((const std::string::value_type **)v77 + 3), *((_QWORD *)v77 + 4));
    else
      v445 = *(std::string *)((_BYTE *)v77 + 1);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v425, "key_t");
    (*(void (**)(std::string *__return_ptr, Espresso::self_attention_kernel_cpu *, Espresso::unpack_options *, std::string *))(*(_QWORD *)this + 296))(&v445, this, a2, &v425);
    if (SHIBYTE(v425.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v425.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v425, "transpose");
  std::string::basic_string[abi:ne180100]<0>(&v415, "key_t");
  (*(void (**)(_QWORD *__return_ptr, Espresso::self_attention_kernel_cpu *, Espresso::unpack_options *, __int128 *))(*(_QWORD *)this + 296))((_QWORD *)&v418 + 1, this, a2, &v415);
  std::string::basic_string[abi:ne180100]<0>(v428, "key_reshaped");
  (*(void (**)(_BYTE *__return_ptr, Espresso::self_attention_kernel_cpu *, Espresso::unpack_options *, _BYTE *))(*(_QWORD *)this + 296))(v431, this, a2, v428);
  v313 = 0;
  v312 = 0;
  v314 = 0;
  v443.__r_.__value_.__r.__words[0] = (std::string::size_type)&v312;
  v443.__r_.__value_.__s.__data_[8] = 0;
  v312 = (std::string *)operator new(0x18uLL);
  v313 = v312;
  v314 = v312 + 1;
  v313 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v314, (__int128 *)v431, (__int128 *)&v431[24], v312);
  if (SHIBYTE(v445.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v443, v445.__r_.__value_.__l.__data_, v445.__r_.__value_.__l.__size_);
  else
    v443 = v445;
  v310 = 0;
  v309 = 0;
  v311 = 0;
  v441.__r_.__value_.__r.__words[0] = (std::string::size_type)&v309;
  v441.__r_.__value_.__s.__data_[8] = 0;
  v309 = (std::string *)operator new(0x18uLL);
  v310 = v309;
  v311 = v309 + 1;
  v310 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v311, (__int128 *)&v443, (__int128 *)&v444, v309);
  Espresso::sequential_builder::add_t<Espresso::generic_transpose_kernel,Espresso::transpose_params_t>(&v315, &v402, (uint64_t)&v425, (uint64_t)&v418 + 8, (uint64_t)&v325, (uint64_t *)&v312, (uint64_t *)&v309);
  v441.__r_.__value_.__r.__words[0] = (std::string::size_type)&v309;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v441);
  if (SHIBYTE(v443.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v443.__r_.__value_.__l.__data_);
  v443.__r_.__value_.__r.__words[0] = (std::string::size_type)&v312;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v443);
  if ((v431[23] & 0x80000000) != 0)
    operator delete(*(void **)v431);
  if ((v428[23] & 0x80000000) != 0)
    operator delete(*(void **)v428);
  if ((v419[15] & 0x80000000) != 0)
    operator delete(*((void **)&v418 + 1));
  if (SHIBYTE(v416) < 0)
    operator delete((void *)v415);
  if (SHIBYTE(v425.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v425.__r_.__value_.__l.__data_);
  v78 = *(__int128 **)a2;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 1) - *(_QWORD *)a2) >> 3) >= 3)
  {
    if (*((char *)v78 + 71) < 0)
      std::string::__init_copy_ctor_external(&v443, *((const std::string::value_type **)v78 + 6), *((_QWORD *)v78 + 7));
    else
      v443 = *(std::string *)((_BYTE *)v78 + 2);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v425, "value_t");
    (*(void (**)(std::string *__return_ptr, Espresso::self_attention_kernel_cpu *, Espresso::unpack_options *, std::string *))(*(_QWORD *)this + 296))(&v443, this, a2, &v425);
    if (SHIBYTE(v425.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v425.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v425, "transpose");
  std::string::basic_string[abi:ne180100]<0>(&v415, "value_t");
  (*(void (**)(_QWORD *__return_ptr, Espresso::self_attention_kernel_cpu *, Espresso::unpack_options *, __int128 *))(*(_QWORD *)this + 296))((_QWORD *)&v418 + 1, this, a2, &v415);
  std::string::basic_string[abi:ne180100]<0>(v428, "value_reshaped");
  (*(void (**)(_BYTE *__return_ptr, Espresso::self_attention_kernel_cpu *, Espresso::unpack_options *, _BYTE *))(*(_QWORD *)this + 296))(v431, this, a2, v428);
  v305 = 0;
  v304 = 0;
  v306 = 0;
  v441.__r_.__value_.__r.__words[0] = (std::string::size_type)&v304;
  v441.__r_.__value_.__s.__data_[8] = 0;
  v304 = (std::string *)operator new(0x18uLL);
  v305 = v304;
  v306 = v304 + 1;
  v305 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v306, (__int128 *)v431, (__int128 *)&v431[24], v304);
  if (SHIBYTE(v443.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v441, v443.__r_.__value_.__l.__data_, v443.__r_.__value_.__l.__size_);
  else
    v441 = v443;
  v302 = 0;
  v301 = 0;
  v303 = 0;
  v294.__r_.__value_.__s.__data_[8] = 0;
  v301 = (std::string *)operator new(0x18uLL);
  v302 = v301;
  v303 = v301 + 1;
  v302 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v303, (__int128 *)&v441, (__int128 *)&v442, v301);
  Espresso::sequential_builder::add_t<Espresso::generic_transpose_kernel,Espresso::transpose_params_t>(&v307, &v402, (uint64_t)&v425, (uint64_t)&v418 + 8, (uint64_t)&v325, (uint64_t *)&v304, (uint64_t *)&v301);
  v294.__r_.__value_.__r.__words[0] = (std::string::size_type)&v301;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v294);
  if (SHIBYTE(v441.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v441.__r_.__value_.__l.__data_);
  v441.__r_.__value_.__r.__words[0] = (std::string::size_type)&v304;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v441);
  if ((v431[23] & 0x80000000) != 0)
    operator delete(*(void **)v431);
  if ((v428[23] & 0x80000000) != 0)
    operator delete(*(void **)v428);
  if ((v419[15] & 0x80000000) != 0)
    operator delete(*((void **)&v418 + 1));
  if (SHIBYTE(v416) < 0)
    operator delete((void *)v415);
  if (SHIBYTE(v425.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v425.__r_.__value_.__l.__data_);
  if (SHIBYTE(v445.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v441, v445.__r_.__value_.__l.__data_, v445.__r_.__value_.__l.__size_);
  else
    v441 = v445;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 4) - *((_QWORD *)a2 + 3)) >> 3) >= 4)
  {
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)&v418 + 1, "key_state_concat");
    (*(void (**)(std::string *__return_ptr, Espresso::self_attention_kernel_cpu *, Espresso::unpack_options *, char *))(*(_QWORD *)this + 296))(&v425, this, a2, (char *)&v418 + 8);
    if (SHIBYTE(v441.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v441.__r_.__value_.__l.__data_);
    v441 = v425;
    *((_BYTE *)&v425.__r_.__value_.__s + 23) = 0;
    v425.__r_.__value_.__s.__data_[0] = 0;
    if ((v419[15] & 0x80000000) != 0)
      operator delete(*((void **)&v418 + 1));
    WORD2(v437[0]) = 0;
    LODWORD(v437[0]) = 1;
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)&v418 + 1, "general_concat");
    std::string::basic_string[abi:ne180100]<0>(v431, "key_state_concat");
    (*(void (**)(__int128 *__return_ptr, Espresso::self_attention_kernel_cpu *, Espresso::unpack_options *, _BYTE *))(*(_QWORD *)this + 296))(&v415, this, a2, v431);
    v79 = *((_QWORD *)a2 + 3);
    if (*(char *)(v79 + 95) < 0)
      std::string::__init_copy_ctor_external(&v425, *(const std::string::value_type **)(v79 + 72), *(_QWORD *)(v79 + 80));
    else
      v425 = *(std::string *)(v79 + 72);
    if (SHIBYTE(v445.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v426, v445.__r_.__value_.__l.__data_, v445.__r_.__value_.__l.__size_);
    else
      v426 = v445;
    v299 = 0;
    v298 = 0;
    v300 = 0;
    *(_QWORD *)v428 = &v298;
    v428[8] = 0;
    v298 = (std::string *)operator new(0x30uLL);
    v299 = v298;
    v300 = v298 + 2;
    v299 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v300, (__int128 *)&v425, &v427, v298);
    if (SHIBYTE(v441.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external((std::string *)v428, v441.__r_.__value_.__l.__data_, v441.__r_.__value_.__l.__size_);
    else
      *(std::string *)v428 = v441;
    v296 = 0;
    v295 = 0;
    v297 = 0;
    v294.__r_.__value_.__r.__words[0] = (std::string::size_type)&v295;
    v294.__r_.__value_.__s.__data_[8] = 0;
    v295 = (std::string *)operator new(0x18uLL);
    v296 = v295;
    v297 = v295 + 1;
    v296 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v297, (__int128 *)v428, (__int128 *)&v428[24], v295);
    Espresso::sequential_builder::add_t<Espresso::generic_general_concat_kernel,Espresso::general_concat_params_t>(v439, &v402, (uint64_t)&v418 + 8, (uint64_t)&v415, (uint64_t)v437, (uint64_t *)&v298, (uint64_t *)&v295);
    v294.__r_.__value_.__r.__words[0] = (std::string::size_type)&v295;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v294);
    if ((v428[23] & 0x80000000) != 0)
      operator delete(*(void **)v428);
    *(_QWORD *)v428 = &v298;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v428);
    for (i = 0; i != -6; i -= 3)
    {
      if (SHIBYTE(v426.__r_.__value_.__r.__words[i + 2]) < 0)
        operator delete(*(void **)((char *)&v425 + i * 8 + 24));
    }
    if (SHIBYTE(v416) < 0)
      operator delete((void *)v415);
    if ((v431[23] & 0x80000000) != 0)
      operator delete(*(void **)v431);
    if ((v419[15] & 0x80000000) != 0)
      operator delete(*((void **)&v418 + 1));
    v81 = (std::__shared_weak_count *)v439[1];
    if (v439[1])
    {
      v82 = (unint64_t *)((char *)v439[1] + 8);
      do
        v83 = __ldaxr(v82);
      while (__stlxr(v83 - 1, v82));
      if (!v83)
      {
        ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
        std::__shared_weak_count::__release_weak(v81);
      }
    }
  }
  if (SHIBYTE(v443.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v294, v443.__r_.__value_.__l.__data_, v443.__r_.__value_.__l.__size_);
  else
    v294 = v443;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 4) - *((_QWORD *)a2 + 3)) >> 3) >= 5)
  {
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)&v418 + 1, "value_state_concat");
    (*(void (**)(std::string *__return_ptr, Espresso::self_attention_kernel_cpu *, Espresso::unpack_options *, char *))(*(_QWORD *)this + 296))(&v425, this, a2, (char *)&v418 + 8);
    if (SHIBYTE(v294.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v294.__r_.__value_.__l.__data_);
    v294 = v425;
    *((_BYTE *)&v425.__r_.__value_.__s + 23) = 0;
    v425.__r_.__value_.__s.__data_[0] = 0;
    if ((v419[15] & 0x80000000) != 0)
      operator delete(*((void **)&v418 + 1));
    WORD2(v435[0]) = 0;
    LODWORD(v435[0]) = 1;
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)&v418 + 1, "general_concat");
    std::string::basic_string[abi:ne180100]<0>(v431, "value_state_concat");
    (*(void (**)(__int128 *__return_ptr, Espresso::self_attention_kernel_cpu *, Espresso::unpack_options *, _BYTE *))(*(_QWORD *)this + 296))(&v415, this, a2, v431);
    v84 = *((_QWORD *)a2 + 3);
    if (*(char *)(v84 + 119) < 0)
      std::string::__init_copy_ctor_external(&v425, *(const std::string::value_type **)(v84 + 96), *(_QWORD *)(v84 + 104));
    else
      v425 = *(std::string *)(v84 + 96);
    if (SHIBYTE(v443.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v426, v443.__r_.__value_.__l.__data_, v443.__r_.__value_.__l.__size_);
    else
      v426 = v443;
    v292 = 0;
    v291 = 0;
    v293 = 0;
    *(_QWORD *)v428 = &v291;
    v428[8] = 0;
    v291 = (std::string *)operator new(0x30uLL);
    v292 = v291;
    v293 = v291 + 2;
    v292 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v293, (__int128 *)&v425, &v427, v291);
    if (SHIBYTE(v294.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external((std::string *)v428, v294.__r_.__value_.__l.__data_, v294.__r_.__value_.__l.__size_);
    else
      *(std::string *)v428 = v294;
    v289 = 0;
    v288 = 0;
    v290 = 0;
    v439[0] = &v288;
    LOBYTE(v439[1]) = 0;
    v288 = (std::string *)operator new(0x18uLL);
    v289 = v288;
    v290 = v288 + 1;
    v289 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v290, (__int128 *)v428, (__int128 *)&v428[24], v288);
    Espresso::sequential_builder::add_t<Espresso::generic_general_concat_kernel,Espresso::general_concat_params_t>(v437, &v402, (uint64_t)&v418 + 8, (uint64_t)&v415, (uint64_t)v435, (uint64_t *)&v291, (uint64_t *)&v288);
    v439[0] = &v288;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v439);
    if ((v428[23] & 0x80000000) != 0)
      operator delete(*(void **)v428);
    *(_QWORD *)v428 = &v291;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v428);
    for (j = 0; j != -6; j -= 3)
    {
      if (SHIBYTE(v426.__r_.__value_.__r.__words[j + 2]) < 0)
        operator delete(*(void **)((char *)&v425 + j * 8 + 24));
    }
    if (SHIBYTE(v416) < 0)
      operator delete((void *)v415);
    if ((v431[23] & 0x80000000) != 0)
      operator delete(*(void **)v431);
    if ((v419[15] & 0x80000000) != 0)
      operator delete(*((void **)&v418 + 1));
    v86 = (std::__shared_weak_count *)v437[1];
    if (v437[1])
    {
      v87 = (unint64_t *)((char *)v437[1] + 8);
      do
        v88 = __ldaxr(v87);
      while (__stlxr(v88 - 1, v87));
      if (!v88)
      {
        ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
        std::__shared_weak_count::__release_weak(v86);
      }
    }
  }
  v286 = 0;
  v287 = 1;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)&v418 + 1, "batch_matmul");
  std::string::basic_string[abi:ne180100]<0>(v431, "raw_score");
  (*(void (**)(__int128 *__return_ptr, Espresso::self_attention_kernel_cpu *, Espresso::unpack_options *, _BYTE *))(*(_QWORD *)this + 296))(&v415, this, a2, v431);
  std::string::basic_string[abi:ne180100]<0>(v428, "query_t");
  (*(void (**)(std::string *__return_ptr, Espresso::self_attention_kernel_cpu *, Espresso::unpack_options *, _BYTE *))(*(_QWORD *)this + 296))(&v425, this, a2, v428);
  if (SHIBYTE(v441.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v426, v441.__r_.__value_.__l.__data_, v441.__r_.__value_.__l.__size_);
  else
    v426 = v441;
  v282 = 0;
  v281 = 0;
  v283 = 0;
  v439[0] = &v281;
  LOBYTE(v439[1]) = 0;
  v281 = (std::string *)operator new(0x30uLL);
  v282 = v281;
  v283 = v281 + 2;
  v282 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v283, (__int128 *)&v425, &v427, v281);
  std::string::basic_string[abi:ne180100]<0>(v437, "raw_score");
  (*(void (**)(void **__return_ptr, Espresso::self_attention_kernel_cpu *, Espresso::unpack_options *, void **))(*(_QWORD *)this + 296))(v439, this, a2, v437);
  v279 = 0;
  v278 = 0;
  v280 = 0;
  v435[0] = &v278;
  LOBYTE(v435[1]) = 0;
  v278 = (std::string *)operator new(0x18uLL);
  v279 = v278;
  v280 = v278 + 1;
  v279 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v280, (__int128 *)v439, (__int128 *)&v441, v278);
  Espresso::sequential_builder::add_t<Espresso::generic_batch_matmul_kernel,Espresso::batch_matmul_params_t>(&v284, &v402, (uint64_t)&v418 + 8, (uint64_t)&v415, (uint64_t)&v286, (uint64_t *)&v281, (uint64_t *)&v278);
  v435[0] = &v278;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v435);
  if (v440 < 0)
    operator delete(v439[0]);
  if (v438 < 0)
    operator delete(v437[0]);
  v439[0] = &v281;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v439);
  for (k = 0; k != -6; k -= 3)
  {
    if (SHIBYTE(v426.__r_.__value_.__r.__words[k + 2]) < 0)
      operator delete(*(void **)((char *)&v425 + k * 8 + 24));
  }
  if ((v428[23] & 0x80000000) != 0)
    operator delete(*(void **)v428);
  if (SHIBYTE(v416) < 0)
    operator delete((void *)v415);
  if ((v431[23] & 0x80000000) != 0)
    operator delete(*(void **)v431);
  if ((v419[15] & 0x80000000) != 0)
    operator delete(*((void **)&v418 + 1));
  if (*((_BYTE *)this + 312))
  {
    v277 = 0xFFFFFFFFLL;
    std::string::basic_string[abi:ne180100]<0>(&v415, "get_shape");
    std::string::basic_string[abi:ne180100]<0>(v428, "raw_score_shape");
    (*(void (**)(_BYTE *__return_ptr, Espresso::self_attention_kernel_cpu *, Espresso::unpack_options *, _BYTE *))(*(_QWORD *)this + 296))(v431, this, a2, v428);
    std::string::basic_string[abi:ne180100]<0>(v437, "raw_score");
    (*(void (**)(void **__return_ptr, Espresso::self_attention_kernel_cpu *, Espresso::unpack_options *, void **))(*(_QWORD *)this + 296))(v439, this, a2, v437);
    v273 = 0;
    v272 = 0;
    v274 = 0;
    v425.__r_.__value_.__r.__words[0] = (std::string::size_type)&v272;
    v425.__r_.__value_.__s.__data_[8] = 0;
    v272 = (std::string *)operator new(0x18uLL);
    v273 = v272;
    v274 = v272 + 1;
    v273 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v274, (__int128 *)v439, (__int128 *)&v441, v272);
    std::string::basic_string[abi:ne180100]<0>(&v434, "raw_score_shape");
    (*(void (**)(void **__return_ptr, Espresso::self_attention_kernel_cpu *, Espresso::unpack_options *, std::string *))(*(_QWORD *)this + 296))(v435, this, a2, &v434);
    v270 = 0;
    v269 = 0;
    v271 = 0;
    v425.__r_.__value_.__r.__words[0] = (std::string::size_type)&v269;
    v425.__r_.__value_.__s.__data_[8] = 0;
    v269 = (std::string *)operator new(0x18uLL);
    v270 = v269;
    v271 = v269 + 1;
    v270 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v271, (__int128 *)v435, (__int128 *)v437, v269);
    v90 = v408;
    LODWORD(v425.__r_.__value_.__l.__data_) = (***(uint64_t (****)(_QWORD))(v410 + 8))(*(_QWORD *)(v410 + 8));
    Espresso::abstract_engine_factory::make_kernel_priv(v90, (uint64_t)&v410, (uint64_t)&v415, (uint64_t)&v277, (int *)&v425);
    v91 = lpsrc[0];
    if (!lpsrc[0]
    {
      v276 = 0;
      v275 = 0;
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      std::runtime_error::runtime_error(exception, &v425);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v275 = v92;
    v276 = (std::__shared_weak_count *)lpsrc[1];
    if (lpsrc[1])
    {
      v93 = (unint64_t *)((char *)lpsrc[1] + 8);
      do
        v94 = __ldxr(v93);
      while (__stxr(v94 + 1, v93));
      v421[0] = v91;
      v421[1] = lpsrc[1];
      if (lpsrc[1])
      {
        v95 = (unint64_t *)((char *)lpsrc[1] + 8);
        do
          v96 = __ldxr(v95);
        while (__stxr(v96 + 1, v95));
      }
    }
    else
    {
      v421[0] = v91;
      v421[1] = 0;
    }
    memset(&v425, 0, sizeof(v425));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v425, (uint64_t)v272, (uint64_t)v273, 0xAAAAAAAAAAAAAAABLL * (((char *)v273 - (char *)v272) >> 3));
    *(_QWORD *)v419 = 0;
    *((_QWORD *)&v418 + 1) = 0;
    *(_QWORD *)&v419[8] = 0;
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((_QWORD *)&v418 + 1, (uint64_t)v269, (uint64_t)v270, 0xAAAAAAAAAAAAAAABLL * (((char *)v270 - (char *)v269) >> 3));
    Espresso::sequential_builder::add_kernel((uint64_t)&v402, (uint64_t *)v421, (uint64_t)&v415, (uint64_t)v431, (std::string **)&v425, (std::string **)&v418 + 1);
    v212 = (char *)&v418 + 8;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v212);
    v212 = &v425;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v212);
    v97 = (std::__shared_weak_count *)v421[1];
    if (v421[1])
    {
      v98 = (unint64_t *)((char *)v421[1] + 8);
      do
        v99 = __ldaxr(v98);
      while (__stlxr(v99 - 1, v98));
      if (!v99)
      {
        ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
        std::__shared_weak_count::__release_weak(v97);
      }
    }
    if (v402)
      Espresso::sequential_builder::add_shape_from_kernel(&v402, (uint64_t)lpsrc[0], (__int128 **)&v272, (uint64_t *)&v269);
    v100 = (std::__shared_weak_count *)lpsrc[1];
    if (lpsrc[1])
    {
      v101 = (unint64_t *)((char *)lpsrc[1] + 8);
      do
        v102 = __ldaxr(v101);
      while (__stlxr(v102 - 1, v101));
      if (!v102)
      {
        ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
        std::__shared_weak_count::__release_weak(v100);
      }
    }
    v425.__r_.__value_.__r.__words[0] = (std::string::size_type)&v269;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v425);
    if (v436 < 0)
      operator delete(v435[0]);
    if (SHIBYTE(v434.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v434.__r_.__value_.__l.__data_);
    v425.__r_.__value_.__r.__words[0] = (std::string::size_type)&v272;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v425);
    if (v440 < 0)
      operator delete(v439[0]);
    if (v438 < 0)
      operator delete(v437[0]);
    if ((v431[23] & 0x80000000) != 0)
      operator delete(*(void **)v431);
    if ((v428[23] & 0x80000000) != 0)
      operator delete(*(void **)v428);
    if (SHIBYTE(v416) < 0)
      operator delete((void *)v415);
    *(_OWORD *)&v431[4] = 0uLL;
    *(_QWORD *)&v431[20] = 0xFFFFFFFF00000001;
    v432 = 0;
    *(_DWORD *)v431 = 1065353216;
    v433 = 1;
    std::string::basic_string[abi:ne180100]<0>(&v425, "fill");
    std::string::basic_string[abi:ne180100]<0>(&v415, "mask_fill");
    (*(void (**)(_QWORD *__return_ptr, Espresso::self_attention_kernel_cpu *, Espresso::unpack_options *, __int128 *))(*(_QWORD *)this + 296))((_QWORD *)&v418 + 1, this, a2, &v415);
    std::string::basic_string[abi:ne180100]<0>(v439, "raw_score_shape");
    (*(void (**)(_BYTE *__return_ptr, Espresso::self_attention_kernel_cpu *, Espresso::unpack_options *, void **))(*(_QWORD *)this + 296))(v428, this, a2, v439);
    v265 = 0;
    v264 = 0;
    v266 = 0;
    v437[0] = &v264;
    LOBYTE(v437[1]) = 0;
    v264 = (std::string *)operator new(0x18uLL);
    v265 = v264;
    v266 = v264 + 1;
    v265 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v266, (__int128 *)v428, (__int128 *)&v428[24], v264);
    std::string::basic_string[abi:ne180100]<0>(v435, "mask_fill");
    (*(void (**)(void **__return_ptr, Espresso::self_attention_kernel_cpu *, Espresso::unpack_options *, void **))(*(_QWORD *)this + 296))(v437, this, a2, v435);
    v262 = 0;
    v261 = 0;
    v263 = 0;
    v434.__r_.__value_.__r.__words[0] = (std::string::size_type)&v261;
    v434.__r_.__value_.__s.__data_[8] = 0;
    v261 = (std::string *)operator new(0x18uLL);
    v262 = v261;
    v263 = v261 + 1;
    v262 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v263, (__int128 *)v437, (__int128 *)v439, v261);
    Espresso::sequential_builder::add_t<Espresso::generic_fill_kernel,Espresso::fill_params_t>(&v267, &v402, (uint64_t)&v425, (uint64_t)&v418 + 8, (uint64_t)v431, (uint64_t *)&v264, (uint64_t *)&v261);
    v434.__r_.__value_.__r.__words[0] = (std::string::size_type)&v261;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v434);
    if (v438 < 0)
      operator delete(v437[0]);
    if (v436 < 0)
      operator delete(v435[0]);
    v437[0] = &v264;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v437);
    if ((v428[23] & 0x80000000) != 0)
      operator delete(*(void **)v428);
    if (v440 < 0)
      operator delete(v439[0]);
    if ((v419[15] & 0x80000000) != 0)
      operator delete(*((void **)&v418 + 1));
    if (SHIBYTE(v416) < 0)
      operator delete((void *)v415);
    if (SHIBYTE(v425.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v425.__r_.__value_.__l.__data_);
    *(_OWORD *)&v428[4] = 0uLL;
    *(_QWORD *)&v428[20] = 0xFFFFFFFF00000001;
    v429 = 0;
    *(_DWORD *)v428 = -831624408;
    v430 = 1;
    std::string::basic_string[abi:ne180100]<0>(&v425, "fill");
    std::string::basic_string[abi:ne180100]<0>(&v415, "eps_fill");
    (*(void (**)(_QWORD *__return_ptr, Espresso::self_attention_kernel_cpu *, Espresso::unpack_options *, __int128 *))(*(_QWORD *)this + 296))((_QWORD *)&v418 + 1, this, a2, &v415);
    std::string::basic_string[abi:ne180100]<0>(v437, "raw_score_shape");
    (*(void (**)(void **__return_ptr, Espresso::self_attention_kernel_cpu *, Espresso::unpack_options *, void **))(*(_QWORD *)this + 296))(v439, this, a2, v437);
    v257 = 0;
    v256 = 0;
    v258 = 0;
    v435[0] = &v256;
    LOBYTE(v435[1]) = 0;
    v256 = (std::string *)operator new(0x18uLL);
    v257 = v256;
    v258 = v256 + 1;
    v257 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v258, (__int128 *)v439, (__int128 *)&v441, v256);
    std::string::basic_string[abi:ne180100]<0>(&v434, "eps_fill");
    (*(void (**)(void **__return_ptr, Espresso::self_attention_kernel_cpu *, Espresso::unpack_options *, std::string *))(*(_QWORD *)this + 296))(v435, this, a2, &v434);
    v254 = 0;
    v253 = 0;
    v255 = 0;
    lpsrc[0] = &v253;
    LOBYTE(lpsrc[1]) = 0;
    v253 = (std::string *)operator new(0x18uLL);
    v254 = v253;
    v255 = v253 + 1;
    v254 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v255, (__int128 *)v435, (__int128 *)v437, v253);
    Espresso::sequential_builder::add_t<Espresso::generic_fill_kernel,Espresso::fill_params_t>(&v259, &v402, (uint64_t)&v425, (uint64_t)&v418 + 8, (uint64_t)v428, (uint64_t *)&v256, (uint64_t *)&v253);
    lpsrc[0] = &v253;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)lpsrc);
    if (v436 < 0)
      operator delete(v435[0]);
    if (SHIBYTE(v434.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v434.__r_.__value_.__l.__data_);
    v435[0] = &v256;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v435);
    if (v440 < 0)
      operator delete(v439[0]);
    if (v438 < 0)
      operator delete(v437[0]);
    if ((v419[15] & 0x80000000) != 0)
      operator delete(*((void **)&v418 + 1));
    if (SHIBYTE(v416) < 0)
      operator delete((void *)v415);
    if (SHIBYTE(v425.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v425.__r_.__value_.__l.__data_);
    BYTE4(v251) = 0;
    v250 = 0xFFFFFFFFLL;
    LODWORD(v251) = 1;
    v252 = -1;
    std::string::basic_string[abi:ne180100]<0>(&v425, "matrix_band_part");
    std::string::basic_string[abi:ne180100]<0>(&v415, "mask");
    (*(void (**)(_QWORD *__return_ptr, Espresso::self_attention_kernel_cpu *, Espresso::unpack_options *, __int128 *))(*(_QWORD *)this + 296))((_QWORD *)&v418 + 1, this, a2, &v415);
    std::string::basic_string[abi:ne180100]<0>(v437, "mask_fill");
    (*(void (**)(void **__return_ptr, Espresso::self_attention_kernel_cpu *, Espresso::unpack_options *, void **))(*(_QWORD *)this + 296))(v439, this, a2, v437);
    v246 = 0;
    v245 = 0;
    v247 = 0;
    v435[0] = &v245;
    LOBYTE(v435[1]) = 0;
    v245 = (std::string *)operator new(0x18uLL);
    v246 = v245;
    v247 = v245 + 1;
    v246 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v247, (__int128 *)v439, (__int128 *)&v441, v245);
    std::string::basic_string[abi:ne180100]<0>(&v434, "mask");
    (*(void (**)(void **__return_ptr, Espresso::self_attention_kernel_cpu *, Espresso::unpack_options *, std::string *))(*(_QWORD *)this + 296))(v435, this, a2, &v434);
    v242 = 0;
    v243 = 0;
    v244 = 0;
    lpsrc[0] = &v242;
    LOBYTE(lpsrc[1]) = 0;
    v242 = (std::string *)operator new(0x18uLL);
    v243 = v242;
    v244 = v242 + 1;
    v243 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v244, (__int128 *)v435, (__int128 *)v437, v242);
    Espresso::sequential_builder::add_t<Espresso::generic_matrix_band_part_kernel,Espresso::matrix_band_part_params_t>(&v248, &v402, (uint64_t)&v425, (uint64_t)&v418 + 8, (uint64_t)&v250, (uint64_t *)&v245, (uint64_t *)&v242);
    lpsrc[0] = &v242;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)lpsrc);
    if (v436 < 0)
      operator delete(v435[0]);
    if (SHIBYTE(v434.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v434.__r_.__value_.__l.__data_);
    v435[0] = &v245;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v435);
    if (v440 < 0)
      operator delete(v439[0]);
    if (v438 < 0)
      operator delete(v437[0]);
    if ((v419[15] & 0x80000000) != 0)
      operator delete(*((void **)&v418 + 1));
    if (SHIBYTE(v416) < 0)
      operator delete((void *)v415);
    if (SHIBYTE(v425.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v425.__r_.__value_.__l.__data_);
    v239 = 0xFFFFFFFFLL;
    BYTE4(v240) = 1;
    LODWORD(v240) = 1;
    v241 = -1;
    std::string::basic_string[abi:ne180100]<0>(&v425, "matrix_band_part");
    std::string::basic_string[abi:ne180100]<0>(&v415, "eps");
    (*(void (**)(_QWORD *__return_ptr, Espresso::self_attention_kernel_cpu *, Espresso::unpack_options *, __int128 *))(*(_QWORD *)this + 296))((_QWORD *)&v418 + 1, this, a2, &v415);
    std::string::basic_string[abi:ne180100]<0>(v437, "eps_fill");
    (*(void (**)(void **__return_ptr, Espresso::self_attention_kernel_cpu *, Espresso::unpack_options *, void **))(*(_QWORD *)this + 296))(v439, this, a2, v437);
    v234 = 0;
    v235 = 0;
    v236 = 0;
    v435[0] = &v234;
    LOBYTE(v435[1]) = 0;
    v234 = (std::string *)operator new(0x18uLL);
    v235 = v234;
    v236 = v234 + 1;
    v235 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v236, (__int128 *)v439, (__int128 *)&v441, v234);
    std::string::basic_string[abi:ne180100]<0>(&v434, "eps");
    (*(void (**)(void **__return_ptr, Espresso::self_attention_kernel_cpu *, Espresso::unpack_options *, std::string *))(*(_QWORD *)this + 296))(v435, this, a2, &v434);
    v231 = 0;
    v232 = 0;
    v233 = 0;
    lpsrc[0] = &v231;
    LOBYTE(lpsrc[1]) = 0;
    v231 = (std::string *)operator new(0x18uLL);
    v232 = v231;
    v233 = v231 + 1;
    v232 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v233, (__int128 *)v435, (__int128 *)v437, v231);
    Espresso::sequential_builder::add_t<Espresso::generic_matrix_band_part_kernel,Espresso::matrix_band_part_params_t>(&v237, &v402, (uint64_t)&v425, (uint64_t)&v418 + 8, (uint64_t)&v239, (uint64_t *)&v234, (uint64_t *)&v231);
    lpsrc[0] = &v231;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)lpsrc);
    if (v436 < 0)
      operator delete(v435[0]);
    if (SHIBYTE(v434.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v434.__r_.__value_.__l.__data_);
    v435[0] = &v234;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v435);
    if (v440 < 0)
      operator delete(v439[0]);
    if (v438 < 0)
      operator delete(v437[0]);
    if ((v419[15] & 0x80000000) != 0)
      operator delete(*((void **)&v418 + 1));
    if (SHIBYTE(v416) < 0)
      operator delete((void *)v415);
    if (SHIBYTE(v425.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v425.__r_.__value_.__l.__data_);
    v425.__r_.__value_.__r.__words[2] = 897988541;
    v426.__r_.__value_.__s.__data_[0] = 0;
    LODWORD(v427) = 0;
    HIDWORD(v426.__r_.__value_.__r.__words[2]) = 0;
    v425.__r_.__value_.__l.__size_ = 1065353216;
    v425.__r_.__value_.__r.__words[0] = 1;
    std::string::basic_string[abi:ne180100]<0>(&v415, "elementwise");
    std::string::basic_string[abi:ne180100]<0>(v437, "masking");
    (*(void (**)(void **__return_ptr, Espresso::self_attention_kernel_cpu *, Espresso::unpack_options *, void **))(*(_QWORD *)this + 296))(v439, this, a2, v437);
    std::string::basic_string[abi:ne180100]<0>(v435, "raw_score");
    (*(void (**)(_QWORD *__return_ptr, Espresso::self_attention_kernel_cpu *, Espresso::unpack_options *, void **))(*(_QWORD *)this + 296))((_QWORD *)&v418 + 1, this, a2, v435);
    std::string::basic_string[abi:ne180100]<0>(&v434, "mask");
    (*(void (**)(_BYTE *__return_ptr, Espresso::self_attention_kernel_cpu *, Espresso::unpack_options *, std::string *))(*(_QWORD *)this + 296))(&v419[16], this, a2, &v434);
    v226 = 0;
    v227 = 0;
    v228 = 0;
    lpsrc[0] = &v226;
    LOBYTE(lpsrc[1]) = 0;
    v226 = (std::string *)operator new(0x30uLL);
    v227 = v226;
    v228 = v226 + 2;
    v227 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v228, (__int128 *)((char *)&v418 + 8), (__int128 *)&v420[8], v226);
    std::string::basic_string[abi:ne180100]<0>(v421, "raw_score_for_eps");
    (*(void (**)(void **__return_ptr, Espresso::self_attention_kernel_cpu *, Espresso::unpack_options *, void **))(*(_QWORD *)this + 296))(lpsrc, this, a2, v421);
    v223 = 0;
    v224 = 0;
    v225 = 0;
    v212 = &v223;
    LOBYTE(v213) = 0;
    v223 = (std::string *)operator new(0x18uLL);
    v224 = v223;
    v225 = v223 + 1;
    v224 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v225, (__int128 *)lpsrc, (__int128 *)&v425, v223);
    Espresso::sequential_builder::add_t<Espresso::generic_elementwise_kernel,Espresso::elementwise_params>(&v229, &v402, (uint64_t)&v415, (uint64_t)v439, (uint64_t)&v425, (uint64_t *)&v226, (uint64_t *)&v223);
    v212 = &v223;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v212);
    if (v424 < 0)
      operator delete(lpsrc[0]);
    if (v422 < 0)
      operator delete(v421[0]);
    lpsrc[0] = &v226;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)lpsrc);
    for (m = 0; m != -48; m -= 24)
    {
      if ((char)v420[m + 7] < 0)
        operator delete(*(void **)&v419[m + 16]);
    }
    if (SHIBYTE(v434.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v434.__r_.__value_.__l.__data_);
    if (v436 < 0)
      operator delete(v435[0]);
    if (v440 < 0)
      operator delete(v439[0]);
    if (v438 < 0)
      operator delete(v437[0]);
    if (SHIBYTE(v416) < 0)
      operator delete((void *)v415);
    *(_QWORD *)&v419[8] = 897988541;
    v419[16] = 0;
    *(_QWORD *)&v420[4] = 0;
    *(_QWORD *)v419 = 1065353216;
    *((_QWORD *)&v418 + 1) = 0;
    std::string::basic_string[abi:ne180100]<0>(v439, "elementwise");
    std::string::basic_string[abi:ne180100]<0>(v435, "masking_eps");
    (*(void (**)(void **__return_ptr, Espresso::self_attention_kernel_cpu *, Espresso::unpack_options *, void **))(*(_QWORD *)this + 296))(v437, this, a2, v435);
    std::string::basic_string[abi:ne180100]<0>(&v434, "raw_score_for_eps");
    (*(void (**)(__int128 *__return_ptr, Espresso::self_attention_kernel_cpu *, Espresso::unpack_options *, std::string *))(*(_QWORD *)this + 296))(&v415, this, a2, &v434);
    std::string::basic_string[abi:ne180100]<0>(lpsrc, "eps");
    (*(void (**)(_QWORD *__return_ptr, Espresso::self_attention_kernel_cpu *, Espresso::unpack_options *, void **))(*(_QWORD *)this + 296))(v417, this, a2, lpsrc);
    v218 = 0;
    v219 = 0;
    v220 = 0;
    v421[0] = &v218;
    LOBYTE(v421[1]) = 0;
    v218 = (std::string *)operator new(0x30uLL);
    v219 = v218;
    v220 = v218 + 2;
    v219 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v220, &v415, &v418, v218);
    std::string::basic_string[abi:ne180100]<0>(&v212, "masked_raw_score");
    (*(void (**)(void **__return_ptr, Espresso::self_attention_kernel_cpu *, Espresso::unpack_options *, void **))(*(_QWORD *)this + 296))(v421, this, a2, &v212);
    v215 = 0;
    v216 = 0;
    v217 = 0;
    v413 = &v215;
    LOBYTE(v414) = 0;
    v215 = (std::string *)operator new(0x18uLL);
    v216 = v215;
    v217 = v215 + 1;
    v216 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v217, (__int128 *)v421, (__int128 *)lpsrc, v215);
    Espresso::sequential_builder::add_t<Espresso::generic_elementwise_kernel,Espresso::elementwise_params>(&v221, &v402, (uint64_t)v439, (uint64_t)v437, (uint64_t)&v418 + 8, (uint64_t *)&v218, (uint64_t *)&v215);
    v413 = &v215;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v413);
    if (v422 < 0)
      operator delete(v421[0]);
    if (v214 < 0)
      operator delete(v212);
    v421[0] = &v218;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v421);
    for (n = 0; n != -6; n -= 3)
    {
      if (SHIBYTE(v417[n + 2]) < 0)
        operator delete((void *)v417[n]);
    }
    if (v424 < 0)
      operator delete(lpsrc[0]);
    if (SHIBYTE(v434.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v434.__r_.__value_.__l.__data_);
    if (v438 < 0)
      operator delete(v437[0]);
    if (v436 < 0)
      operator delete(v435[0]);
    if (v440 < 0)
      operator delete(v439[0]);
    v105 = v222;
    if (v222)
    {
      v106 = (unint64_t *)&v222->__shared_owners_;
      do
        v107 = __ldaxr(v106);
      while (__stlxr(v107 - 1, v106));
      if (!v107)
      {
        ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
        std::__shared_weak_count::__release_weak(v105);
      }
    }
    v108 = v230;
    if (v230)
    {
      v109 = (unint64_t *)&v230->__shared_owners_;
      do
        v110 = __ldaxr(v109);
      while (__stlxr(v110 - 1, v109));
      if (!v110)
      {
        ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
        std::__shared_weak_count::__release_weak(v108);
      }
    }
    v111 = v238;
    if (v238)
    {
      v112 = (unint64_t *)&v238->__shared_owners_;
      do
        v113 = __ldaxr(v112);
      while (__stlxr(v113 - 1, v112));
      if (!v113)
      {
        ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
        std::__shared_weak_count::__release_weak(v111);
      }
    }
    v114 = v249;
    if (v249)
    {
      v115 = (unint64_t *)&v249->__shared_owners_;
      do
        v116 = __ldaxr(v115);
      while (__stlxr(v116 - 1, v115));
      if (!v116)
      {
        ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
        std::__shared_weak_count::__release_weak(v114);
      }
    }
    v117 = v260;
    if (v260)
    {
      v118 = (unint64_t *)&v260->__shared_owners_;
      do
        v119 = __ldaxr(v118);
      while (__stlxr(v119 - 1, v118));
      if (!v119)
      {
        ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
        std::__shared_weak_count::__release_weak(v117);
      }
    }
    v120 = v268;
    if (v268)
    {
      v121 = (unint64_t *)&v268->__shared_owners_;
      do
        v122 = __ldaxr(v121);
      while (__stlxr(v122 - 1, v121));
      if (!v122)
      {
        ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
        std::__shared_weak_count::__release_weak(v120);
      }
    }
    v123 = v276;
    if (v276)
    {
      v124 = (unint64_t *)&v276->__shared_owners_;
      do
        v125 = __ldaxr(v124);
      while (__stlxr(v125 - 1, v124));
      if (!v125)
      {
        ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
        std::__shared_weak_count::__release_weak(v123);
      }
    }
  }
  *(std::string::size_type *)((char *)&v425.__r_.__value_.__r.__words[1] + 4) = 0x358637BD00000000;
  HIDWORD(v425.__r_.__value_.__r.__words[2]) = 0;
  v426.__r_.__value_.__s.__data_[0] = 0;
  LODWORD(v427) = 0;
  HIDWORD(v426.__r_.__value_.__r.__words[2]) = 0;
  v126 = *((_DWORD *)this + 76) / *((_DWORD *)this + 77);
  v425.__r_.__value_.__r.__words[0] = 3;
  v127 = 1.0 / sqrt((double)v126);
  *(float *)&v425.__r_.__value_.__r.__words[1] = v127;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)&v418 + 1, "elementwise");
  std::string::basic_string[abi:ne180100]<0>(v431, "scaled_raw_score");
  (*(void (**)(__int128 *__return_ptr, Espresso::self_attention_kernel_cpu *, Espresso::unpack_options *, _BYTE *))(*(_QWORD *)this + 296))(&v415, this, a2, v431);
  if (*((_BYTE *)this + 312))
    v128 = "masked_raw_score";
  else
    v128 = "raw_score";
  std::string::basic_string[abi:ne180100]<0>(v439, v128);
  (*(void (**)(_BYTE *__return_ptr, Espresso::self_attention_kernel_cpu *, Espresso::unpack_options *, void **))(*(_QWORD *)this + 296))(v428, this, a2, v439);
  v209 = 0;
  v210 = 0;
  v211 = 0;
  v437[0] = &v209;
  LOBYTE(v437[1]) = 0;
  v209 = (std::string *)operator new(0x18uLL);
  v210 = v209;
  v211 = v209 + 1;
  v210 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v211, (__int128 *)v428, (__int128 *)&v428[24], v209);
  std::string::basic_string[abi:ne180100]<0>(v435, "scaled_raw_score");
  (*(void (**)(void **__return_ptr, Espresso::self_attention_kernel_cpu *, Espresso::unpack_options *, void **))(*(_QWORD *)this + 296))(v437, this, a2, v435);
  v206 = 0;
  v207 = 0;
  v208 = 0;
  v434.__r_.__value_.__r.__words[0] = (std::string::size_type)&v206;
  v434.__r_.__value_.__s.__data_[8] = 0;
  v206 = (std::string *)operator new(0x18uLL);
  v207 = v206;
  v208 = v206 + 1;
  v207 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v208, (__int128 *)v437, (__int128 *)v439, v206);
  Espresso::sequential_builder::add_t<Espresso::generic_elementwise_kernel,Espresso::elementwise_params>(v421, &v402, (uint64_t)&v418 + 8, (uint64_t)&v415, (uint64_t)&v425, (uint64_t *)&v209, (uint64_t *)&v206);
  v434.__r_.__value_.__r.__words[0] = (std::string::size_type)&v206;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v434);
  if (v438 < 0)
    operator delete(v437[0]);
  if (v436 < 0)
    operator delete(v435[0]);
  v437[0] = &v209;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v437);
  if ((v428[23] & 0x80000000) != 0)
    operator delete(*(void **)v428);
  if (v440 < 0)
    operator delete(v439[0]);
  if (SHIBYTE(v416) < 0)
    operator delete((void *)v415);
  if ((v431[23] & 0x80000000) != 0)
    operator delete(*(void **)v431);
  if ((v419[15] & 0x80000000) != 0)
    operator delete(*((void **)&v418 + 1));
  v415 = xmmword_191A93370;
  v416 = 1;
  LODWORD(v417[0]) = 16777472;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)&v418 + 1, "softmax");
  std::string::basic_string[abi:ne180100]<0>(v428, "softmax");
  (*(void (**)(_BYTE *__return_ptr, Espresso::self_attention_kernel_cpu *, Espresso::unpack_options *, _BYTE *))(*(_QWORD *)this + 296))(v431, this, a2, v428);
  std::string::basic_string[abi:ne180100]<0>(v437, "scaled_raw_score");
  (*(void (**)(void **__return_ptr, Espresso::self_attention_kernel_cpu *, Espresso::unpack_options *, void **))(*(_QWORD *)this + 296))(v439, this, a2, v437);
  v203 = 0;
  v204 = 0;
  v205 = 0;
  v435[0] = &v203;
  LOBYTE(v435[1]) = 0;
  v203 = (std::string *)operator new(0x18uLL);
  v204 = v203;
  v205 = v203 + 1;
  v204 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v205, (__int128 *)v439, (__int128 *)&v441, v203);
  std::string::basic_string[abi:ne180100]<0>(&v434, "softmax");
  (*(void (**)(void **__return_ptr, Espresso::self_attention_kernel_cpu *, Espresso::unpack_options *, std::string *))(*(_QWORD *)this + 296))(v435, this, a2, &v434);
  v200 = 0;
  v201 = 0;
  v202 = 0;
  lpsrc[0] = &v200;
  LOBYTE(lpsrc[1]) = 0;
  v200 = (std::string *)operator new(0x18uLL);
  v201 = v200;
  v202 = v200 + 1;
  v201 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v202, (__int128 *)v435, (__int128 *)v437, v200);
  Espresso::sequential_builder::add_t<Espresso::generic_softmax_kernel,Espresso::softmax_params>(&v212, &v402, (uint64_t)&v418 + 8, (uint64_t)v431, (uint64_t)&v415, (uint64_t *)&v203, (uint64_t *)&v200);
  lpsrc[0] = &v200;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)lpsrc);
  if (v436 < 0)
    operator delete(v435[0]);
  if (SHIBYTE(v434.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v434.__r_.__value_.__l.__data_);
  v435[0] = &v203;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v435);
  if (v440 < 0)
    operator delete(v439[0]);
  if (v438 < 0)
    operator delete(v437[0]);
  if ((v431[23] & 0x80000000) != 0)
    operator delete(*(void **)v431);
  if ((v428[23] & 0x80000000) != 0)
    operator delete(*(void **)v428);
  if ((v419[15] & 0x80000000) != 0)
    operator delete(*((void **)&v418 + 1));
  BYTE2(v275) = 0;
  LOWORD(v275) = 0;
  std::string::basic_string[abi:ne180100]<0>(v431, "batch_matmul");
  std::string::basic_string[abi:ne180100]<0>(v439, "weighted_avg");
  (*(void (**)(_BYTE *__return_ptr, Espresso::self_attention_kernel_cpu *, Espresso::unpack_options *, void **))(*(_QWORD *)this + 296))(v428, this, a2, v439);
  std::string::basic_string[abi:ne180100]<0>(v437, "softmax");
  (*(void (**)(_QWORD *__return_ptr, Espresso::self_attention_kernel_cpu *, Espresso::unpack_options *, void **))(*(_QWORD *)this + 296))((_QWORD *)&v418 + 1, this, a2, v437);
  if (SHIBYTE(v294.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v419[16], v294.__r_.__value_.__l.__data_, v294.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v419[16] = *(_OWORD *)&v294.__r_.__value_.__l.__data_;
    *(_QWORD *)v420 = *((_QWORD *)&v294.__r_.__value_.__l + 2);
  }
  v197 = 0;
  v198 = 0;
  v199 = 0;
  v435[0] = &v197;
  LOBYTE(v435[1]) = 0;
  v197 = (std::string *)operator new(0x30uLL);
  v198 = v197;
  v199 = v197 + 2;
  v198 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v199, (__int128 *)((char *)&v418 + 8), (__int128 *)&v420[8], v197);
  std::string::basic_string[abi:ne180100]<0>(&v434, "weighted_avg");
  (*(void (**)(void **__return_ptr, Espresso::self_attention_kernel_cpu *, Espresso::unpack_options *, std::string *))(*(_QWORD *)this + 296))(v435, this, a2, &v434);
  v194 = 0;
  v195 = 0;
  v196 = 0;
  lpsrc[0] = &v194;
  LOBYTE(lpsrc[1]) = 0;
  v194 = (std::string *)operator new(0x18uLL);
  v195 = v194;
  v196 = v194 + 1;
  v195 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v196, (__int128 *)v435, (__int128 *)v437, v194);
  Espresso::sequential_builder::add_t<Espresso::generic_batch_matmul_kernel,Espresso::batch_matmul_params_t>(&v250, &v402, (uint64_t)v431, (uint64_t)v428, (uint64_t)&v275, (uint64_t *)&v197, (uint64_t *)&v194);
  lpsrc[0] = &v194;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)lpsrc);
  if (v436 < 0)
    operator delete(v435[0]);
  if (SHIBYTE(v434.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v434.__r_.__value_.__l.__data_);
  v435[0] = &v197;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v435);
  for (ii = 0; ii != -48; ii -= 24)
  {
    if ((char)v420[ii + 7] < 0)
      operator delete(*(void **)&v419[ii + 16]);
  }
  if (v438 < 0)
    operator delete(v437[0]);
  if ((v428[23] & 0x80000000) != 0)
    operator delete(*(void **)v428);
  if (v440 < 0)
    operator delete(v439[0]);
  if ((v431[23] & 0x80000000) != 0)
    operator delete(*(void **)v431);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)&v418 + 1, "transpose");
  std::string::basic_string[abi:ne180100]<0>(v428, "context_t");
  (*(void (**)(_BYTE *__return_ptr, Espresso::self_attention_kernel_cpu *, Espresso::unpack_options *, _BYTE *))(*(_QWORD *)this + 296))(v431, this, a2, v428);
  std::string::basic_string[abi:ne180100]<0>(v437, "weighted_avg");
  (*(void (**)(void **__return_ptr, Espresso::self_attention_kernel_cpu *, Espresso::unpack_options *, void **))(*(_QWORD *)this + 296))(v439, this, a2, v437);
  v191 = 0;
  v192 = 0;
  v193 = 0;
  v435[0] = &v191;
  LOBYTE(v435[1]) = 0;
  v191 = (std::string *)operator new(0x18uLL);
  v192 = v191;
  v193 = v191 + 1;
  v192 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v193, (__int128 *)v439, (__int128 *)&v441, v191);
  std::string::basic_string[abi:ne180100]<0>(&v434, "context_t");
  (*(void (**)(void **__return_ptr, Espresso::self_attention_kernel_cpu *, Espresso::unpack_options *, std::string *))(*(_QWORD *)this + 296))(v435, this, a2, &v434);
  v188 = 0;
  v189 = 0;
  v190 = 0;
  lpsrc[0] = &v188;
  LOBYTE(lpsrc[1]) = 0;
  v188 = (std::string *)operator new(0x18uLL);
  v189 = v188;
  v190 = v188 + 1;
  v189 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v190, (__int128 *)v435, (__int128 *)v437, v188);
  Espresso::sequential_builder::add_t<Espresso::generic_transpose_kernel,Espresso::transpose_params_t>(&v239, &v402, (uint64_t)&v418 + 8, (uint64_t)v431, (uint64_t)&v325, (uint64_t *)&v191, (uint64_t *)&v188);
  lpsrc[0] = &v188;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)lpsrc);
  if (v436 < 0)
    operator delete(v435[0]);
  if (SHIBYTE(v434.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v434.__r_.__value_.__l.__data_);
  v435[0] = &v191;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v435);
  if (v440 < 0)
    operator delete(v439[0]);
  if (v438 < 0)
    operator delete(v437[0]);
  if ((v431[23] & 0x80000000) != 0)
    operator delete(*(void **)v431);
  if ((v428[23] & 0x80000000) != 0)
    operator delete(*(void **)v428);
  if ((v419[15] & 0x80000000) != 0)
    operator delete(*((void **)&v418 + 1));
  *(_WORD *)&v419[24] = 1;
  *(_DWORD *)&v419[28] = 1;
  *((_QWORD *)&v418 + 1) = 0x100000001;
  v130 = *((_DWORD *)this + 76);
  *(_DWORD *)&v419[20] = 0;
  *(_DWORD *)v419 = v130;
  *(_OWORD *)&v419[4] = xmmword_191A93650;
  std::string::basic_string[abi:ne180100]<0>(v431, "reshape");
  std::string::basic_string[abi:ne180100]<0>(v439, "context");
  (*(void (**)(_BYTE *__return_ptr, Espresso::self_attention_kernel_cpu *, Espresso::unpack_options *, void **))(*(_QWORD *)this + 296))(v428, this, a2, v439);
  std::string::basic_string[abi:ne180100]<0>(v435, "context_t");
  (*(void (**)(void **__return_ptr, Espresso::self_attention_kernel_cpu *, Espresso::unpack_options *, void **))(*(_QWORD *)this + 296))(v437, this, a2, v435);
  v185 = 0;
  v186 = 0;
  v187 = 0;
  v434.__r_.__value_.__r.__words[0] = (std::string::size_type)&v185;
  v434.__r_.__value_.__s.__data_[8] = 0;
  v185 = (std::string *)operator new(0x18uLL);
  v186 = v185;
  v187 = v185 + 1;
  v186 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v187, (__int128 *)v437, (__int128 *)v439, v185);
  v131 = *(__int128 **)a2;
  if (*(char *)(*(_QWORD *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v434, *(const std::string::value_type **)v131, *((_QWORD *)v131 + 1));
  }
  else
  {
    v132 = *v131;
    v434.__r_.__value_.__r.__words[2] = *((_QWORD *)v131 + 2);
    *(_OWORD *)&v434.__r_.__value_.__l.__data_ = v132;
  }
  v182 = 0;
  v183 = 0;
  v184 = 0;
  lpsrc[0] = &v182;
  LOBYTE(lpsrc[1]) = 0;
  v182 = (std::string *)operator new(0x18uLL);
  v183 = v182;
  v184 = v182 + 1;
  v183 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v184, (__int128 *)&v434, (__int128 *)v435, v182);
  Espresso::sequential_builder::add_t<Espresso::generic_reshape_kernel,Espresso::reshape_params>(&v413, &v402, (uint64_t)v431, (uint64_t)v428, (uint64_t)&v418 + 8, (uint64_t *)&v185, (uint64_t *)&v182);
  lpsrc[0] = &v182;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)lpsrc);
  if (SHIBYTE(v434.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v434.__r_.__value_.__l.__data_);
  v434.__r_.__value_.__r.__words[0] = (std::string::size_type)&v185;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v434);
  if (v438 < 0)
    operator delete(v437[0]);
  if (v436 < 0)
    operator delete(v435[0]);
  if ((v428[23] & 0x80000000) != 0)
    operator delete(*(void **)v428);
  if (v440 < 0)
    operator delete(v439[0]);
  if ((v431[23] & 0x80000000) != 0)
    operator delete(*(void **)v431);
  insert_network_layers(*((Espresso::net **)a2 + 6), v406, *((_QWORD *)a2 + 8));
  v133 = v414;
  if (v414)
  {
    v134 = (unint64_t *)&v414->__shared_owners_;
    do
      v135 = __ldaxr(v134);
    while (__stlxr(v135 - 1, v134));
    if (!v135)
    {
      ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
      std::__shared_weak_count::__release_weak(v133);
    }
  }
  v136 = v240;
  if (v240)
  {
    v137 = (unint64_t *)&v240->__shared_owners_;
    do
      v138 = __ldaxr(v137);
    while (__stlxr(v138 - 1, v137));
    if (!v138)
    {
      ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
      std::__shared_weak_count::__release_weak(v136);
    }
  }
  v139 = v251;
  if (v251)
  {
    v140 = (unint64_t *)&v251->__shared_owners_;
    do
      v141 = __ldaxr(v140);
    while (__stlxr(v141 - 1, v140));
    if (!v141)
    {
      ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
      std::__shared_weak_count::__release_weak(v139);
    }
  }
  v142 = v213;
  if (v213)
  {
    v143 = (unint64_t *)&v213->__shared_owners_;
    do
      v144 = __ldaxr(v143);
    while (__stlxr(v144 - 1, v143));
    if (!v144)
    {
      ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
      std::__shared_weak_count::__release_weak(v142);
    }
  }
  v145 = (std::__shared_weak_count *)v421[1];
  if (v421[1])
  {
    v146 = (unint64_t *)((char *)v421[1] + 8);
    do
      v147 = __ldaxr(v146);
    while (__stlxr(v147 - 1, v146));
    if (!v147)
    {
      ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
      std::__shared_weak_count::__release_weak(v145);
    }
  }
  v148 = v285;
  if (v285)
  {
    v149 = (unint64_t *)&v285->__shared_owners_;
    do
      v150 = __ldaxr(v149);
    while (__stlxr(v150 - 1, v149));
    if (!v150)
    {
      ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
      std::__shared_weak_count::__release_weak(v148);
    }
  }
  if (SHIBYTE(v294.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v294.__r_.__value_.__l.__data_);
  if (SHIBYTE(v441.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v441.__r_.__value_.__l.__data_);
  v151 = v308;
  if (v308)
  {
    v152 = (unint64_t *)&v308->__shared_owners_;
    do
      v153 = __ldaxr(v152);
    while (__stlxr(v153 - 1, v152));
    if (!v153)
    {
      ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
      std::__shared_weak_count::__release_weak(v151);
    }
  }
  if (SHIBYTE(v443.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v443.__r_.__value_.__l.__data_);
  v154 = v316;
  if (v316)
  {
    v155 = (unint64_t *)&v316->__shared_owners_;
    do
      v156 = __ldaxr(v155);
    while (__stlxr(v156 - 1, v155));
    if (!v156)
    {
      ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
      std::__shared_weak_count::__release_weak(v154);
    }
  }
  if (SHIBYTE(v445.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v445.__r_.__value_.__l.__data_);
  v157 = v324;
  if (v324)
  {
    v158 = (unint64_t *)&v324->__shared_owners_;
    do
      v159 = __ldaxr(v158);
    while (__stlxr(v159 - 1, v158));
    if (!v159)
    {
      ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
      std::__shared_weak_count::__release_weak(v157);
    }
  }
  v160 = v334;
  if (v334)
  {
    v161 = (unint64_t *)&v334->__shared_owners_;
    do
      v162 = __ldaxr(v161);
    while (__stlxr(v162 - 1, v161));
    if (!v162)
    {
      ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
      std::__shared_weak_count::__release_weak(v160);
    }
  }
  v163 = v342;
  if (v342)
  {
    v164 = (unint64_t *)&v342->__shared_owners_;
    do
      v165 = __ldaxr(v164);
    while (__stlxr(v165 - 1, v164));
    if (!v165)
    {
      ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
      std::__shared_weak_count::__release_weak(v163);
    }
  }
  v166 = v350;
  if (v350)
  {
    v167 = (unint64_t *)&v350->__shared_owners_;
    do
      v168 = __ldaxr(v167);
    while (__stlxr(v168 - 1, v167));
    if (!v168)
    {
      ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
      std::__shared_weak_count::__release_weak(v166);
    }
  }
  if (SHIBYTE(v361.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v361.__r_.__value_.__l.__data_);
  if (SHIBYTE(v372.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v372.__r_.__value_.__l.__data_);
  if (SHIBYTE(v383.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v383.__r_.__value_.__l.__data_);
  std::deque<std::pair<std::shared_ptr<Espresso::abstract_context>,Espresso::compute_path>>::~deque[abi:ne180100]((uint64_t)&v412);
  v169 = v411;
  if (v411)
  {
    v170 = (unint64_t *)&v411->__shared_owners_;
    do
      v171 = __ldaxr(v170);
    while (__stlxr(v171 - 1, v170));
    if (!v171)
    {
      ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
      std::__shared_weak_count::__release_weak(v169);
    }
  }
  v172 = v409;
  if (v409)
  {
    v173 = (unint64_t *)&v409->__shared_owners_;
    do
      v174 = __ldaxr(v173);
    while (__stlxr(v174 - 1, v173));
    if (!v174)
    {
      ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
      std::__shared_weak_count::__release_weak(v172);
    }
  }
  v175 = v407;
  if (v407)
  {
    v176 = (unint64_t *)&v407->__shared_owners_;
    do
      v177 = __ldaxr(v176);
    while (__stlxr(v177 - 1, v176));
    if (!v177)
    {
      ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
      std::__shared_weak_count::__release_weak(v175);
    }
  }
  if (v405 < 0)
    operator delete(v404[5]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)v404, v404[1]);
  v178 = v403;
  if (v403)
  {
    v179 = (unint64_t *)&v403->__shared_owners_;
    do
      v180 = __ldaxr(v179);
    while (__stlxr(v180 - 1, v179));
    if (!v180)
    {
      ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
      std::__shared_weak_count::__release_weak(v178);
    }
  }
}

void sub_19148D9CC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  STACK[0x920] = (unint64_t)&STACK[0x368];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x920]);
  v3 = 0;
  while (1)
  {
    if (*((char *)&STACK[0x8E0] + v3 + 47) < 0)
      operator delete(*(void **)((char *)&STACK[0x8E0] + v3 + 24));
    v3 -= 24;
    if (v3 == -48)
    {
      if (SLOBYTE(STACK[0x857]) < 0)
        operator delete((void *)STACK[0x840]);
      if (SLOBYTE(STACK[0x967]) < 0)
        operator delete((void *)STACK[0x950]);
      if (SLOBYTE(STACK[0x88F]) < 0)
        operator delete((void *)STACK[0x878]);
      if (SLOBYTE(STACK[0x397]) < 0)
        operator delete((void *)STACK[0x380]);
      if (*(char *)(v1 - 217) < 0)
        operator delete(*(void **)(v1 - 240));
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x400]);
      if (*(char *)(v1 - 185) < 0)
        operator delete(*(void **)(v1 - 208));
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x440]);
      if (*(char *)(v1 - 153) < 0)
        operator delete(*(void **)(v1 - 176));
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x480]);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x4E0]);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x520]);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x560]);
      if (SLOBYTE(STACK[0x5D7]) < 0)
        operator delete((void *)STACK[0x5C0]);
      if (SLOBYTE(STACK[0x647]) < 0)
        operator delete((void *)STACK[0x630]);
      if (SLOBYTE(STACK[0x6B7]) < 0)
        operator delete((void *)STACK[0x6A0]);
      Espresso::sequential_builder::~sequential_builder((void **)&STACK[0x768]);
      _Unwind_Resume(a1);
    }
  }
}

void sub_19148ED8C()
{
  unint64_t v0;
  uint64_t v1;

  STACK[0x380] = v0;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x380]);
  if (*(char *)(v1 - 217) < 0)
    operator delete(*(void **)(v1 - 240));
  *(_QWORD *)(v1 - 240) = &STACK[0x3E8];
  JUMPOUT(0x19148EDDCLL);
}

void sub_19148EDCC()
{
  unint64_t v0;
  uint64_t v1;

  STACK[0x3F0] = v0;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v1 - 240);
  if (SLOBYTE(STACK[0x967]) < 0)
    operator delete((void *)STACK[0x950]);
  JUMPOUT(0x19148EDFCLL);
}

void sub_19148EE50()
{
  JUMPOUT(0x19148EE3CLL);
}

void sub_19148EE58()
{
  JUMPOUT(0x19148E898);
}

void sub_19148EE60()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 240) = v0;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v1 - 240));
  if (*(char *)(v1 - 185) < 0)
    operator delete(*(void **)(v1 - 208));
  *(_QWORD *)(v1 - 208) = &STACK[0x428];
  JUMPOUT(0x19148EEB0);
}

void sub_19148EEA0()
{
  unint64_t v0;
  uint64_t v1;

  STACK[0x430] = v0;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v1 - 208);
  if (SLOBYTE(STACK[0x967]) < 0)
    operator delete((void *)STACK[0x950]);
  JUMPOUT(0x19148EED0);
}

void sub_19148EF24()
{
  JUMPOUT(0x19148EF10);
}

void sub_19148EF2C()
{
  JUMPOUT(0x19148E8B0);
}

void sub_19148EF34()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 240) = v0;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v1 - 240));
  if (*(char *)(v1 - 153) < 0)
    operator delete(*(void **)(v1 - 176));
  if (*(char *)(v1 - 185) < 0)
    operator delete(*(void **)(v1 - 208));
  *(_QWORD *)(v1 - 176) = &STACK[0x468];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v1 - 176));
  if (SLOBYTE(STACK[0x967]) < 0)
    operator delete((void *)STACK[0x950]);
  if (SLOBYTE(STACK[0x937]) < 0)
    operator delete((void *)STACK[0x920]);
  if (SLOBYTE(STACK[0x88F]) < 0)
    operator delete((void *)STACK[0x878]);
  if (SLOBYTE(STACK[0x857]) < 0)
    operator delete((void *)STACK[0x840]);
  if (SLOBYTE(STACK[0x8F7]) < 0)
    operator delete((void *)STACK[0x8E0]);
  JUMPOUT(0x19148E8C8);
}

void sub_19148F010()
{
  JUMPOUT(0x19148EFECLL);
}

void sub_19148F018()
{
  JUMPOUT(0x19148EFFCLL);
}

void sub_19148F020()
{
  JUMPOUT(0x19148E8C8);
}

void sub_19148F028()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 208) = v0;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v1 - 208));
  if (SLOBYTE(STACK[0x937]) < 0)
    operator delete((void *)STACK[0x920]);
  if (*(char *)(v1 - 153) < 0)
    operator delete(*(void **)(v1 - 176));
  STACK[0x920] = (unint64_t)&STACK[0x4C8];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x920]);
  if (SLOBYTE(STACK[0x967]) < 0)
    operator delete((void *)STACK[0x950]);
  if (SLOBYTE(STACK[0x88F]) < 0)
    operator delete((void *)STACK[0x878]);
  JUMPOUT(0x19148F0C8);
}

void sub_19148F0B0()
{
  unint64_t v0;

  STACK[0x4D0] = v0;
  JUMPOUT(0x19148F084);
}

void sub_19148F0BC()
{
  JUMPOUT(0x19148F084);
}

void sub_19148F0EC()
{
  JUMPOUT(0x19148F0D8);
}

void sub_19148F0F4()
{
  JUMPOUT(0x19148E8D0);
}

void sub_19148F0FC()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 208) = v0;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v1 - 208));
  if (SLOBYTE(STACK[0x937]) < 0)
    operator delete((void *)STACK[0x920]);
  if (*(char *)(v1 - 153) < 0)
    operator delete(*(void **)(v1 - 176));
  STACK[0x920] = (unint64_t)&STACK[0x508];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x920]);
  if (SLOBYTE(STACK[0x967]) < 0)
    operator delete((void *)STACK[0x950]);
  if (SLOBYTE(STACK[0x88F]) < 0)
    operator delete((void *)STACK[0x878]);
  JUMPOUT(0x19148F19CLL);
}

void sub_19148F184()
{
  unint64_t v0;

  STACK[0x510] = v0;
  JUMPOUT(0x19148F158);
}

void sub_19148F190()
{
  JUMPOUT(0x19148F158);
}

void sub_19148F1C0()
{
  JUMPOUT(0x19148F1ACLL);
}

void sub_19148F1C8()
{
  JUMPOUT(0x19148E8D8);
}

void sub_19148F1D0()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 208) = v0;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v1 - 208));
  if (SLOBYTE(STACK[0x937]) < 0)
    operator delete((void *)STACK[0x920]);
  if (*(char *)(v1 - 153) < 0)
    operator delete(*(void **)(v1 - 176));
  STACK[0x920] = (unint64_t)&STACK[0x548];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x920]);
  if (SLOBYTE(STACK[0x967]) < 0)
    JUMPOUT(0x19148F240);
  JUMPOUT(0x19148F244);
}

void sub_19148F258()
{
  unint64_t v0;

  STACK[0x550] = v0;
  JUMPOUT(0x19148F22CLL);
}

void sub_19148F264()
{
  JUMPOUT(0x19148F22CLL);
}

void sub_19148F2A4()
{
  JUMPOUT(0x19148E910);
}

void sub_19148F2B0()
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x748]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x758]);
  JUMPOUT(0x19148E918);
}

void sub_19148F360()
{
  JUMPOUT(0x19148E9C8);
}

void sub_19148F36C()
{
  JUMPOUT(0x19148ECE4);
}

uint64_t Espresso::self_attention_kernel_cpu::should_unpack()
{
  return 1;
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::self_attention_params_t,Espresso::abstract_kernel_with_named_weights_>::get_params(uint64_t a1)
{
  return a1 + 304;
}

void Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long,unsigned long>(uint64_t a1, uint64_t a2)
{
  Espresso::throw_exception_with_format<Espresso::invalid_argument_error>("self_attention_kernel_cpu: requires bottom (%zu) and top (%zu) names for all or none of the states", a1, a2);
}

void Espresso::sequential_builder::add_t<Espresso::generic_reshape_kernel,Espresso::reshape_params>(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t *a7)
{
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::runtime_error *exception;
  std::string *v30[3];
  std::string *v31[3];
  void *v32;
  std::__shared_weak_count *v33;
  std::string v34;
  void *lpsrc;
  std::__shared_weak_count *v36;

  v14 = a2[12];
  v15 = (uint64_t)(a2 + 14);
  LODWORD(v34.__r_.__value_.__l.__data_) = (***(uint64_t (****)(_QWORD))(a2[14] + 8))(*(_QWORD *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v14, v15, a3, a5, (int *)&v34);
  v16 = lpsrc;
  if (!lpsrc
  {
    *a1 = 0;
    a1[1] = 0;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, &v34);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v18 = v36;
  *a1 = v17;
  a1[1] = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(p_shared_owners);
    while (__stxr(v20 + 1, p_shared_owners));
    v32 = v16;
    v33 = v36;
    if (v36)
    {
      v21 = (unint64_t *)&v36->__shared_owners_;
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
    }
  }
  else
  {
    v32 = v16;
    v33 = 0;
  }
  memset(v31, 0, sizeof(v31));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v31, *a6, a6[1], 0xAAAAAAAAAAAAAAABLL * ((a6[1] - *a6) >> 3));
  memset(v30, 0, sizeof(v30));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v30, *a7, a7[1], 0xAAAAAAAAAAAAAAABLL * ((a7[1] - *a7) >> 3));
  Espresso::sequential_builder::add_kernel((uint64_t)a2, (uint64_t *)&v32, a3, a4, v31, v30);
  v34.__r_.__value_.__r.__words[0] = (std::string::size_type)v30;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
  v34.__r_.__value_.__r.__words[0] = (std::string::size_type)v31;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
  v23 = v33;
  if (v33)
  {
    v24 = (unint64_t *)&v33->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  if (*a2)
    Espresso::sequential_builder::add_shape_from_kernel(a2, (uint64_t)lpsrc, (__int128 **)a6, a7);
  v26 = v36;
  if (v36)
  {
    v27 = (unint64_t *)&v36->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
}

void sub_19148F614(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  uint64_t v24;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v24);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  _Unwind_Resume(a1);
}

void Espresso::sequential_builder::add_t<Espresso::generic_general_concat_kernel,Espresso::general_concat_params_t>(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t *a7)
{
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::runtime_error *exception;
  std::string *v30[3];
  std::string *v31[3];
  void *v32;
  std::__shared_weak_count *v33;
  std::string v34;
  void *lpsrc;
  std::__shared_weak_count *v36;

  v14 = a2[12];
  v15 = (uint64_t)(a2 + 14);
  LODWORD(v34.__r_.__value_.__l.__data_) = (***(uint64_t (****)(_QWORD))(a2[14] + 8))(*(_QWORD *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v14, v15, a3, a5, (int *)&v34);
  v16 = lpsrc;
  if (!lpsrc
  {
    *a1 = 0;
    a1[1] = 0;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, &v34);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v18 = v36;
  *a1 = v17;
  a1[1] = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(p_shared_owners);
    while (__stxr(v20 + 1, p_shared_owners));
    v32 = v16;
    v33 = v36;
    if (v36)
    {
      v21 = (unint64_t *)&v36->__shared_owners_;
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
    }
  }
  else
  {
    v32 = v16;
    v33 = 0;
  }
  memset(v31, 0, sizeof(v31));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v31, *a6, a6[1], 0xAAAAAAAAAAAAAAABLL * ((a6[1] - *a6) >> 3));
  memset(v30, 0, sizeof(v30));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v30, *a7, a7[1], 0xAAAAAAAAAAAAAAABLL * ((a7[1] - *a7) >> 3));
  Espresso::sequential_builder::add_kernel((uint64_t)a2, (uint64_t *)&v32, a3, a4, v31, v30);
  v34.__r_.__value_.__r.__words[0] = (std::string::size_type)v30;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
  v34.__r_.__value_.__r.__words[0] = (std::string::size_type)v31;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
  v23 = v33;
  if (v33)
  {
    v24 = (unint64_t *)&v33->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  if (*a2)
    Espresso::sequential_builder::add_shape_from_kernel(a2, (uint64_t)lpsrc, (__int128 **)a6, a7);
  v26 = v36;
  if (v36)
  {
    v27 = (unint64_t *)&v36->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
}

void sub_19148F910(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  uint64_t v24;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v24);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  _Unwind_Resume(a1);
}

void Espresso::sequential_builder::add_t<Espresso::generic_matrix_band_part_kernel,Espresso::matrix_band_part_params_t>(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t *a7)
{
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::runtime_error *exception;
  std::string *v30[3];
  std::string *v31[3];
  void *v32;
  std::__shared_weak_count *v33;
  std::string v34;
  void *lpsrc;
  std::__shared_weak_count *v36;

  v14 = a2[12];
  v15 = (uint64_t)(a2 + 14);
  LODWORD(v34.__r_.__value_.__l.__data_) = (***(uint64_t (****)(_QWORD))(a2[14] + 8))(*(_QWORD *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v14, v15, a3, a5, (int *)&v34);
  v16 = lpsrc;
  if (!lpsrc
  {
    *a1 = 0;
    a1[1] = 0;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, &v34);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v18 = v36;
  *a1 = v17;
  a1[1] = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(p_shared_owners);
    while (__stxr(v20 + 1, p_shared_owners));
    v32 = v16;
    v33 = v36;
    if (v36)
    {
      v21 = (unint64_t *)&v36->__shared_owners_;
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
    }
  }
  else
  {
    v32 = v16;
    v33 = 0;
  }
  memset(v31, 0, sizeof(v31));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v31, *a6, a6[1], 0xAAAAAAAAAAAAAAABLL * ((a6[1] - *a6) >> 3));
  memset(v30, 0, sizeof(v30));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v30, *a7, a7[1], 0xAAAAAAAAAAAAAAABLL * ((a7[1] - *a7) >> 3));
  Espresso::sequential_builder::add_kernel((uint64_t)a2, (uint64_t *)&v32, a3, a4, v31, v30);
  v34.__r_.__value_.__r.__words[0] = (std::string::size_type)v30;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
  v34.__r_.__value_.__r.__words[0] = (std::string::size_type)v31;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
  v23 = v33;
  if (v33)
  {
    v24 = (unint64_t *)&v33->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  if (*a2)
    Espresso::sequential_builder::add_shape_from_kernel(a2, (uint64_t)lpsrc, (__int128 **)a6, a7);
  v26 = v36;
  if (v36)
  {
    v27 = (unint64_t *)&v36->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
}

void sub_19148FC0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  uint64_t v24;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v24);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  _Unwind_Resume(a1);
}

void Espresso::composed_kernel_with_named_weights<Espresso::self_attention_params_t>::~composed_kernel_with_named_weights(Espresso::base_kernel *a1)
{
  *(_QWORD *)a1 = off_1E2D9DEC0;
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::layer_data>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::layer_data>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::layer_data>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::layer_data>>>>::~__hash_table((uint64_t)a1 + 360);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::~__hash_table((uint64_t)a1 + 320);
  *(_QWORD *)a1 = off_1E2D991B8;
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*((_QWORD **)a1 + 36));
  Espresso::base_kernel::~base_kernel(a1);
}

void Espresso::abstract_kernel_with_named_weights<Espresso::self_attention_params_t>::clear_weights(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 288;
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*(_QWORD **)(a1 + 288));
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 280) = v2;
}

uint64_t ___ZN8Espresso8hardware17supports_platformENS_8platformE_block_invoke_2()
{
  uint64_t result;

  result = MGIsQuestionValid();
  if ((_DWORD)result)
  {
    result = MGGetBoolAnswer();
    Espresso::hardware::supports_platform(Espresso::platform)::has_metal = result;
  }
  return result;
}

BOOL Espresso::hardware::is_virtual_machine(Espresso::hardware *this)
{
  if (Espresso::hardware::is_virtual_machine(void)::onceToken != -1)
    dispatch_once(&Espresso::hardware::is_virtual_machine(void)::onceToken, &__block_literal_global_24_4921);
  return Espresso::hardware::is_virtual_machine(void)::result != 0;
}

uint64_t Espresso::hardware::enable_mpsgraph_for_hardware(Espresso::hardware *this, void *a2)
{
  if (Espresso::hardware::enable_mpsgraph_for_hardware(void *)::once_token != -1)
    dispatch_once(&Espresso::hardware::enable_mpsgraph_for_hardware(void *)::once_token, &__block_literal_global_21_4928);
  return Espresso::hardware::enable_mpsgraph_for_hardware(void *)::has_ane;
}

uint64_t ___ZN8Espresso8hardware28enable_mpsgraph_for_hardwareEPv_block_invoke()
{
  uint64_t result;

  result = MGIsQuestionValid();
  if ((_DWORD)result)
  {
    result = MGGetBoolAnswer();
    Espresso::hardware::enable_mpsgraph_for_hardware(void *)::has_ane = result;
  }
  return result;
}

void Espresso::abstract_engine_factory::get_registered_kernels(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  std::recursive_mutex *v5;
  int v6;
  std::string *v7;
  __int128 v8;
  std::string *v9;
  uint64_t v10;
  std::string::size_type *v11;
  uint64_t v12;
  uint64_t *v13;
  int v14;
  uint64_t *v15;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  std::string::size_type v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  size_t v27;
  _QWORD *v28;
  std::string::size_type v29;
  size_t v30;
  _QWORD *v31;
  std::string::size_type v32;
  BOOL v33;
  size_t v34;
  char *v35;
  _QWORD *v36;
  unsigned int v37;
  int v38;
  unint64_t v39;
  __int128 v40;
  std::string *v41;
  _QWORD *v42;
  _QWORD *v43;
  BOOL v44;
  std::recursive_mutex *v45;
  std::string *v46;
  void *__p[2];
  std::string::size_type v49;
  std::string v50;
  void *v51;
  char v52;
  uint64_t v53;
  void *v54[2];
  std::string::size_type v55;
  void **v56[11];
  char v57;
  uint64_t v58;
  std::string *v59;
  std::string *v60;
  unint64_t v61;

  v5 = (std::recursive_mutex *)a1[12];
  std::recursive_mutex::lock(v5);
  v6 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a2 + 8))(*(_QWORD *)(*(_QWORD *)a2 + 8));
  v59 = 0;
  v60 = 0;
  v61 = 0;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v56);
  std::ostream::operator<<();
  std::stringbuf::str();
  v7 = v60;
  if ((unint64_t)v60 >= v61)
  {
    v9 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v59, (uint64_t)v54);
  }
  else
  {
    if (SHIBYTE(v55) < 0)
    {
      std::string::__init_copy_ctor_external(v60, (const std::string::value_type *)v54[0], (std::string::size_type)v54[1]);
    }
    else
    {
      v8 = *(_OWORD *)v54;
      v60->__r_.__value_.__r.__words[2] = v55;
      *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
    }
    v9 = v7 + 1;
  }
  v60 = v9;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  v10 = a1[1];
  v11 = (std::string::size_type *)MEMORY[0x1E0DE4F60];
  v12 = MEMORY[0x1E0DE4FB8];
  v45 = v5;
  if (!v10)
    goto LABEL_29;
  v13 = (uint64_t *)a1[1];
  while (1)
  {
    v14 = *((_DWORD *)v13 + 7);
    if (v6 >= v14)
      break;
LABEL_12:
    v13 = (uint64_t *)*v13;
    if (!v13)
      goto LABEL_29;
  }
  if (v14 < v6)
  {
    ++v13;
    goto LABEL_12;
  }
  do
  {
    if (*(_DWORD *)(v10 + 28) >= v6)
      v15 = (uint64_t *)v10;
    else
      v15 = (uint64_t *)(v10 + 8);
    v10 = *v15;
  }
  while (*v15);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v50);
  std::ostream::operator<<();
  std::stringbuf::str();
  v16 = v60;
  if ((unint64_t)v60 >= v61)
  {
    v18 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v59, (uint64_t)__p);
  }
  else
  {
    if (SHIBYTE(v49) < 0)
    {
      std::string::__init_copy_ctor_external(v60, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    }
    else
    {
      v17 = *(_OWORD *)__p;
      v60->__r_.__value_.__r.__words[2] = v49;
      *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v17;
    }
    v18 = v16 + 1;
  }
  v60 = v18;
  if (SHIBYTE(v49) < 0)
    operator delete(__p[0]);
  v50.__r_.__value_.__r.__words[0] = *v11;
  *(std::string::size_type *)((char *)v50.__r_.__value_.__r.__words + *(_QWORD *)(v50.__r_.__value_.__r.__words[0] - 24)) = v11[3];
  v50.__r_.__value_.__l.__size_ = v12 + 16;
  if (v52 < 0)
    operator delete(v51);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x19401CCD0](&v53);
  v9 = v60;
LABEL_29:
  v19 = (char *)v59;
  v46 = v9;
  if (v59 != v9)
  {
    v20 = a1 + 10;
    v21 = MEMORY[0x1E0C80978];
    while (1)
    {
      v22 = (_QWORD *)a1[9];
      if (v22 != v20)
        break;
LABEL_83:
      v19 += 24;
      if (v19 == (char *)v46)
        goto LABEL_84;
    }
    while (2)
    {
      v23 = *((unsigned __int8 *)v22 + 55);
      if (*((char *)v22 + 55) < 0)
        v24 = v22[5];
      else
        v24 = *((unsigned __int8 *)v22 + 55);
      if (v19[23] < 0)
        v25 = *((_QWORD *)v19 + 1);
      else
        v25 = v19[23];
      if (v24 > v25)
      {
        if ((v23 & 0x80) != 0)
        {
          v26 = v22[5];
          if (v19[23] < 0)
            goto LABEL_43;
LABEL_41:
          v27 = v19[23];
        }
        else
        {
          v26 = *((unsigned __int8 *)v22 + 55);
          if ((v19[23] & 0x80) == 0)
            goto LABEL_41;
LABEL_43:
          v27 = *((_QWORD *)v19 + 1);
        }
        v28 = v22 + 4;
        v29 = v26 - v27;
        if ((v23 & 0x80) != 0)
        {
          if (v27 == -1 || (v32 = v22[5], v33 = v32 >= v29, v34 = v32 - v29, !v33))
LABEL_89:
            std::string::__throw_out_of_range[abi:ne180100]();
          if (v34 >= v27)
            v30 = v27;
          else
            v30 = v34;
          v31 = (_QWORD *)*v28;
        }
        else
        {
          if (v23 < v29 || v27 == -1)
            goto LABEL_89;
          if (v23 - v29 >= v27)
            v30 = v27;
          else
            v30 = v23 - v29;
          v31 = v22 + 4;
        }
        if (v19[23] >= 0)
          v35 = v19;
        else
          v35 = *(char **)v19;
        if (!memcmp((char *)v31 + v29, v35, v30) && v30 == v27)
        {
          v36 = v22 + 4;
          if ((v23 & 0x80) != 0)
            v36 = (_QWORD *)*v28;
          v37 = *((char *)v36 + v29 - 1);
          if ((v37 & 0x80000000) != 0)
            v38 = __maskrune(v37, 0x100uLL);
          else
            v38 = *(_DWORD *)(v21 + 4 * v37 + 60) & 0x100;
          if (v38)
          {
            std::string::basic_string(&v50, (const std::string *)(v22 + 4), 0, v29, (std::allocator<char> *)__p);
            v39 = *(_QWORD *)(a3 + 8);
            if (v39 >= *(_QWORD *)(a3 + 16))
            {
              v41 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)a3, (uint64_t)&v50);
            }
            else
            {
              if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
              {
                std::string::__init_copy_ctor_external(*(std::string **)(a3 + 8), v50.__r_.__value_.__l.__data_, v50.__r_.__value_.__l.__size_);
              }
              else
              {
                v40 = *(_OWORD *)&v50.__r_.__value_.__l.__data_;
                *(_QWORD *)(v39 + 16) = *((_QWORD *)&v50.__r_.__value_.__l + 2);
                *(_OWORD *)v39 = v40;
              }
              v41 = (std::string *)(v39 + 24);
              *(_QWORD *)(a3 + 8) = v39 + 24;
            }
            *(_QWORD *)(a3 + 8) = v41;
            if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v50.__r_.__value_.__l.__data_);
          }
        }
      }
      v42 = (_QWORD *)v22[1];
      if (v42)
      {
        do
        {
          v43 = v42;
          v42 = (_QWORD *)*v42;
        }
        while (v42);
      }
      else
      {
        do
        {
          v43 = (_QWORD *)v22[2];
          v44 = *v43 == (_QWORD)v22;
          v22 = v43;
        }
        while (!v44);
      }
      v22 = v43;
      if (v43 == v20)
        goto LABEL_83;
      continue;
    }
  }
LABEL_84:
  if (SHIBYTE(v55) < 0)
    operator delete(v54[0]);
  v56[0] = *(void ***)MEMORY[0x1E0DE4F60];
  *(void ***)((char *)v56 + (unint64_t)*(v56[0] - 3)) = *(void ***)(MEMORY[0x1E0DE4F60] + 24);
  v56[1] = (void **)(MEMORY[0x1E0DE4FB8] + 16);
  if (v57 < 0)
    operator delete(v56[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x19401CCD0](&v58);
  v56[0] = (void **)&v59;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v56);
  std::recursive_mutex::unlock(v45);
}

void sub_1914902E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60,uint64_t a61)
{
  uint64_t v61;
  std::recursive_mutex *v62;
  uint64_t v63;

  *(_QWORD *)(v63 - 104) = v61;
  if (a18 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a19);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  if (a60 < 0)
    operator delete(a55);
  std::ostringstream::~ostringstream((uint64_t)&a61);
  a61 = v63 - 112;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a61);
  std::recursive_mutex::unlock(v62);
  _Unwind_Resume(a1);
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<Espresso::base_kernel>({block_pointer} {__strong})(std::shared_ptr<Espresso::abstract_context> const&,void const*,Espresso::compute_path)>,0>(uint64_t a1)
{

  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

std::recursive_mutex *std::unique_ptr<std::recursive_mutex>::reset[abi:ne180100](std::recursive_mutex **a1, std::recursive_mutex *a2)
{
  std::recursive_mutex *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    std::recursive_mutex::~recursive_mutex(result);
    JUMPOUT(0x19401CD90);
  }
  return result;
}

void std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::base_kernel>({block_pointer} {__strong})(std::shared_ptr<Espresso::abstract_context> const&,void const*,Espresso::compute_path)>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::base_kernel>({block_pointer} {__strong})(std::shared_ptr<Espresso::abstract_context> const&,void const*,Espresso::compute_path)>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::base_kernel>({block_pointer} {__strong})(std::shared_ptr<Espresso::abstract_context> const&,void const*,Espresso::compute_path)>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::base_kernel>({block_pointer} {__strong})(std::shared_ptr<Espresso::abstract_context> const&,void const*,Espresso::compute_path)>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::base_kernel>({block_pointer} {__strong})(std::shared_ptr<Espresso::abstract_context> const&,void const*,Espresso::compute_path)>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::base_kernel>({block_pointer} {__strong})(std::shared_ptr<Espresso::abstract_context> const&,void const*,Espresso::compute_path)>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::base_kernel>({block_pointer} {__strong})(std::shared_ptr<Espresso::abstract_context> const&,void const*,Espresso::compute_path)>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::base_kernel>({block_pointer} {__strong})(std::shared_ptr<Espresso::abstract_context> const&,void const*,Espresso::compute_path)>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::base_kernel>({block_pointer} {__strong})(std::shared_ptr<Espresso::abstract_context> const&,void const*,Espresso::compute_path)>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<Espresso::base_kernel>({block_pointer} {__strong})(std::shared_ptr<Espresso::abstract_context> const&,void const*,Espresso::compute_path)>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__tree<std::__value_type<Espresso::platform,std::shared_ptr<Espresso::abstract_engine>>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,std::shared_ptr<Espresso::abstract_engine>>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,std::shared_ptr<Espresso::abstract_engine>>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<Espresso::platform,std::shared_ptr<Espresso::abstract_engine>>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,std::shared_ptr<Espresso::abstract_engine>>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,std::shared_ptr<Espresso::abstract_engine>>>>::destroy(*a1);
    std::__tree<std::__value_type<Espresso::platform,std::shared_ptr<Espresso::abstract_engine>>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,std::shared_ptr<Espresso::abstract_engine>>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,std::shared_ptr<Espresso::abstract_engine>>>>::destroy(a1[1]);
    std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 5));
    operator delete(a1);
  }
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::engine>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB75A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::engine>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB75A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSGraphEngine::engine>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 48))(a1 + 24);
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::engine>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB99C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::engine>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB99C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::engine>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 48))(a1 + 24);
}

void std::__shared_ptr_emplace<Espresso::MPSEngine::engine>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC2550;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSEngine::engine>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC2550;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSEngine::engine>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 48))(a1 + 24);
}

void std::__shared_ptr_emplace<Espresso::V9Engine::engine>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC17F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::V9Engine::engine>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC17F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::V9Engine::engine>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 48))(a1 + 24);
}

void std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::engine>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBB358;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::engine>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBB358;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::engine>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 48))(a1 + 24);
}

void std::__shared_ptr_emplace<Espresso::IREngine::engine>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC1360;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::IREngine::engine>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC1360;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::IREngine::engine>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 48))(a1 + 24);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphCompilerEngine::engine>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBC938;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphCompilerEngine::engine>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBC938;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSGraphCompilerEngine::engine>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 48))(a1 + 24);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSGraphEngine::engine>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBBCC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSGraphEngine::engine>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBBCC0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::DummyMPSGraphEngine::engine>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 48))(a1 + 24);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSBuffersEngine::engine>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBC6D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSBuffersEngine::engine>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBC6D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::DummyMPSBuffersEngine::engine>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 48))(a1 + 24);
}

void std::__shared_ptr_emplace<Espresso::DummyBNNSEngine::engine>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB8220;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::DummyBNNSEngine::engine>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB8220;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::DummyBNNSEngine::engine>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 48))(a1 + 24);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSEngine::engine>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB7500;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSEngine::engine>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB7500;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::DummyMPSEngine::engine>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 48))(a1 + 24);
}

void std::__shared_ptr_emplace<Espresso::HXSimEngine::engine>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB6A10;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::HXSimEngine::engine>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB6A10;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::HXSimEngine::engine>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 48))(a1 + 24);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::direct_engine>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB86B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::direct_engine>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB86B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::direct_engine>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 48))(a1 + 24);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::engine>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB92F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::engine>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB92F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::engine>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 48))(a1 + 24);
}

void std::__shared_ptr_emplace<Espresso::QuantSimEngine::engine>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB8098;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::QuantSimEngine::engine>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB8098;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::QuantSimEngine::engine>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 48))(a1 + 24);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::engine>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBAA98;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::engine>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBAA98;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::engine>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 48))(a1 + 24);
}

void std::__shared_ptr_emplace<Espresso::CVAEngine::engine>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC1AD0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::CVAEngine::engine>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC1AD0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::CVAEngine::engine>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 48))(a1 + 24);
}

void std::__shared_ptr_emplace<Espresso::HXEngine::engine>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC12B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::HXEngine::engine>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC12B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::HXEngine::engine>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 48))(a1 + 24);
}

void std::__shared_ptr_emplace<Espresso::BNNSEngine::engine>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB66C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::BNNSEngine::engine>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB66C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::BNNSEngine::engine>::__on_zero_shared(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = &unk_1E2D676D0;
  return std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 32);
}

__n128 ___ZN8Espresso23abstract_engine_factory15register_engineENSt3__110shared_ptrINS_15abstract_engineEEE_block_invoke@<Q0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  _QWORD *v7;
  __n128 result;
  int v9;

  v9 = a3;
  v7 = operator new(0x1B8uLL);
  v7[1] = 0;
  v7[2] = 0;
  *v7 = &off_1E2DB6B98;
  result.n128_u64[0] = Espresso::brick_kernel::brick_kernel((uint64_t)(v7 + 3), a1, &v9, a2);
  result.n128_u64[1] = (unint64_t)v7;
  *a4 = result;
  return result;
}

void sub_191490B28(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::brick_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB6B98;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::brick_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB6B98;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::brick_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<Espresso::engine_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB6738;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::engine_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB6738;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::engine_cpu>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 48))(a1 + 24);
}

void Espresso::abstract_engine_factory::engine_with_name(uint64_t a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  std::recursive_mutex *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _BOOL4 v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;

  v6 = *(std::recursive_mutex **)(a1 + 96);
  std::recursive_mutex::lock(v6);
  v9 = *(_QWORD **)(a1 + 56);
  v7 = (_QWORD *)(a1 + 56);
  v8 = v9;
  if (!v9)
    goto LABEL_8;
  v10 = v7;
  do
  {
    v11 = std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v8 + 4, a2);
    v12 = v8 + 1;
    if (!v11)
    {
      v12 = v8;
      v10 = v8;
    }
    v8 = (_QWORD *)*v12;
  }
  while (*v12);
  if (v10 == v7 || std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, v10 + 4))
  {
LABEL_8:
    *a3 = 0;
    a3[1] = 0;
  }
  else
  {
    v13 = v10[8];
    *a3 = v10[7];
    a3[1] = v13;
    if (v13)
    {
      v14 = (unint64_t *)(v13 + 8);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
  }
  std::recursive_mutex::unlock(v6);
}

void std::__shared_ptr_emplace<Espresso::abstract_engine_factory>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBCCF0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::abstract_engine_factory>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBCCF0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::abstract_engine_factory>::__on_zero_shared(uint64_t a1)
{
  std::unique_ptr<std::recursive_mutex>::reset[abi:ne180100]((std::recursive_mutex **)(a1 + 120), 0);
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::base_kernel>({block_pointer} {__strong})(std::shared_ptr<Espresso::abstract_context> const&,void const*,Espresso::compute_path)>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::base_kernel>({block_pointer} {__strong})(std::shared_ptr<Espresso::abstract_context> const&,void const*,Espresso::compute_path)>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::base_kernel>({block_pointer} {__strong})(std::shared_ptr<Espresso::abstract_context> const&,void const*,Espresso::compute_path)>>>::destroy(*(_QWORD **)(a1 + 104));
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*(_QWORD **)(a1 + 80));
  std::__tree<std::__value_type<Espresso::platform,std::shared_ptr<Espresso::abstract_engine>>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,std::shared_ptr<Espresso::abstract_engine>>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,std::shared_ptr<Espresso::abstract_engine>>>>::destroy(*(_QWORD **)(a1 + 56));
  std::__tree<int>::destroy(*(_QWORD **)(a1 + 32));
}

BOOL Espresso::abstract_engine_factory::singleton_exists(Espresso::abstract_engine_factory *this)
{
  return singleton != 0;
}

uint64_t Espresso::abstract_engine_factory::destroy_singleton(Espresso::abstract_engine_factory *this)
{
  uint64_t result;
  uint64_t v2;

  onceToken = 0;
  result = singleton;
  if (singleton)
  {
    v2 = std::shared_ptr<void>::~shared_ptr[abi:ne180100](singleton);
    result = MEMORY[0x19401CD90](v2, 0x20C40A4A59CD2);
  }
  singleton = 0;
  return result;
}

void Espresso::espresso_training_data_source::get_data_for_sample(id *this@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6;
  unint64_t v7;
  id v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t i;
  id v13;
  void *v14;
  const void *v15;
  id v16;
  void *v17;
  unint64_t j;
  void *v19;
  BOOL v20;
  void *v21;
  void *v22;
  int v23;
  int *begin;
  int64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  std::__shared_weak_count *end;
  unint64_t *v30;
  unint64_t v31;
  void *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void **v38;
  std::runtime_error *exception;
  const char *v40;
  uint64_t v41;
  void *context;
  id v43;
  uint64_t v44;
  __int128 *__dst[2];
  uint64_t v46;
  int v47[3];
  unsigned int v48;
  int v49;
  void *__p;
  void *v51;
  void *v52[2];
  char v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  id v58;
  std::vector<int> v59;
  _BYTE v60[128];
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  v6 = objc_msgSend(this[2], "numberOfDataPoints");
  if (!v6)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Size of data source is 0");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v7 = a2 % v6;
  context = (void *)MEMORY[0x19401D4A4]();
  v8 = this[2];
  v58 = 0;
  objc_msgSend(v8, "dataPointAtIndex:error:", (int)v7, &v58);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v41 = v7;
  v43 = v58;
  if (!v9)
  {
    objc_msgSend(v43, "localizedDescription");
    v40 = (const char *)objc_msgSend(objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue()), "UTF8String");
    Espresso::throw_exception_selector<Espresso::io_error>(v40);
  }
  v56 = 0u;
  v57 = 0u;
  v54 = 0u;
  v55 = 0u;
  v10 = v9;
  v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v54, v60, 16);
  if (v11)
  {
    v44 = *(_QWORD *)v55;
    do
    {
      for (i = 0; i != v11; ++i)
      {
        if (*(_QWORD *)v55 != v44)
          objc_enumerationMutation(v10);
        v13 = objc_retainAutorelease(*(id *)(*((_QWORD *)&v54 + 1) + 8 * i));
        std::string::basic_string[abi:ne180100]<0>(v52, (char *)objc_msgSend(v13, "UTF8String"));
        objc_msgSend(v10, "objectForKeyedSubscript:", v13);
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        v15 = (const void *)objc_msgSend(v14, "dataPointer");

        if (!v15)
        {
          if (v53 >= 0)
            v38 = v52;
          else
            v38 = (void **)v52[0];
          Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*,unsigned long &>((const char *)v38, v41);
        }
        objc_msgSend(v10, "objectForKeyedSubscript:", v13);
        v16 = (id)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v16, "shape");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        std::vector<int>::vector(&v59, objc_msgSend(v17, "count"));

        for (j = 0; ; ++j)
        {
          objc_msgSend(v16, "shape");
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          v20 = objc_msgSend(v19, "count") > j;

          if (!v20)
            break;
          objc_msgSend(v16, "shape");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v21, "objectAtIndexedSubscript:", j);
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          v23 = objc_msgSend(v22, "intValue");
          v59.__begin_[j] = v23;

        }
        __dst[0] = 0;
        __dst[1] = 0;
        v46 = 0;
        begin = v59.__begin_;
        v25 = (char *)v59.__end_ - (char *)v59.__begin_;
        if (v59.__end_ == v59.__begin_)
        {
          HIDWORD(v46) = (unint64_t)v25 >> 2;
          if (!v59.__end_)
            goto LABEL_18;
        }
        else
        {
          v26 = v25 >> 2;
          v27 = (unint64_t)v25 >> 2;
          if ((unint64_t)(v25 >> 2) <= 1)
            v26 = 1;
          memcpy(__dst, v59.__begin_, 4 * v26);
          HIDWORD(v46) = v27;
        }
        v59.__end_ = begin;
        operator delete(begin);
LABEL_18:

        Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)__dst, 0, (uint64_t)v47);
        if (v48 != 1)
          Espresso::throw_exception_selector<Espresso::unsupported_configuration_error,int &>("data provider should provide tensor with batch size 1, instead of %d", v48);
        if (v49 != 1)
          Espresso::throw_exception_selector<Espresso::unsupported_configuration_error>("5d tensor not supported yet");
        std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v59, v47[0], v47[1], v47[2], 1);
        __dst[0] = (__int128 *)v52;
        v28 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a3, (unsigned __int8 *)v52, __dst);
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)(v28 + 40), (__int128 *)&v59);
        end = (std::__shared_weak_count *)v59.__end_;
        if (v59.__end_)
        {
          v30 = (unint64_t *)(v59.__end_ + 2);
          do
            v31 = __ldaxr(v30);
          while (__stlxr(v31 - 1, v30));
          if (!v31)
          {
            ((void (*)(std::__shared_weak_count *))end->__on_zero_shared)(end);
            std::__shared_weak_count::__release_weak(end);
          }
        }
        v59.__begin_ = (std::vector<int>::pointer)v52;
        v32 = *(void **)(*((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a3, (unsigned __int8 *)v52, (__int128 **)&v59)+ 5)+ 24);
        v59.__begin_ = (std::vector<int>::pointer)v52;
        v33 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a3, (unsigned __int8 *)v52, (__int128 **)&v59);
        v34 = 0;
        v35 = *((_QWORD *)v33 + 5);
        v36 = *(int *)(v35 + 8);
        v37 = v35 + 12;
        do
        {
          v36 *= *(int *)(v37 + v34);
          v34 += 4;
        }
        while (v34 != 12);
        memcpy(v32, v15, 4 * v36);
        if (__p)
        {
          v51 = __p;
          operator delete(__p);
        }
        if (v53 < 0)
          operator delete(v52[0]);
      }
      v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v54, v60, 16);
    }
    while (v11);
  }

  objc_autoreleasePoolPop(context);
}

void sub_1914911D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42)
{
  uint64_t v42;
  void *v43;

  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::~__hash_table(v42);
  _Unwind_Resume(a1);
}

void Espresso::espresso_training_data_source::~espresso_training_data_source(id *this)
{

}

{

  JUMPOUT(0x19401CD90);
}

uint64_t Espresso::espresso_training_data_source::get_num_samples(id *this)
{
  return objc_msgSend(this[2], "numberOfDataPoints");
}

void Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*,unsigned long &>(const char *a1, uint64_t a2)
{
  Espresso::throw_exception_with_format<Espresso::invalid_state_error>("not getting data for tensor '%s' at index %lu", a1, a2);
}

void Espresso::generic_factory_t::~generic_factory_t(Espresso::generic_factory_t *this)
{
  Espresso::generic_factory_t::~generic_factory_t(this);
  JUMPOUT(0x19401CD90);
}

{
  *(_QWORD *)this = &off_1E2D82258;
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*((_QWORD **)this + 13));
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::base_kernel>({block_pointer} {__strong})(std::shared_ptr<Espresso::abstract_context> const&,void const*,Espresso::compute_path)>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::base_kernel>({block_pointer} {__strong})(std::shared_ptr<Espresso::abstract_context> const&,void const*,Espresso::compute_path)>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::base_kernel>({block_pointer} {__strong})(std::shared_ptr<Espresso::abstract_context> const&,void const*,Espresso::compute_path)>>>::destroy(*((_QWORD **)this + 10));
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
}

void Espresso::factory_object::~factory_object(Espresso::factory_object *this)
{
  JUMPOUT(0x19401CD90);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<Espresso::factory_object>({block_pointer} {__strong})(void)>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<Espresso::factory_object>({block_pointer} {__strong})(void)>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<Espresso::base_kernel>({block_pointer} {__strong})(std::shared_ptr<Espresso::abstract_context> const&,void const*,Espresso::compute_path)>,0>((uint64_t)v1 + 32);
    operator delete(v1);
  }
}

void Espresso::generic_factory_t::get_objects_copy(Espresso::generic_factory_t *this@<X0>, uint64_t a2@<X8>)
{
  std::mutex *v4;
  Espresso::generic_factory_t *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  uint64_t **v11;
  char *v12;
  Espresso::generic_factory_t *v13;
  Espresso::generic_factory_t *v14;
  _QWORD v15[2];
  char v16;
  _QWORD *v17;

  v4 = (std::mutex *)((char *)this + 8);
  std::mutex::lock((std::mutex *)((char *)this + 8));
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = a2 + 8;
  v5 = (Espresso::generic_factory_t *)*((_QWORD *)this + 12);
  if (v5 != (Espresso::generic_factory_t *)((char *)this + 104))
  {
    do
    {
      v6 = *(_QWORD *)(a2 + 8);
      v7 = (_QWORD *)(a2 + 8);
      if (*(_QWORD *)a2 == a2 + 8)
        goto LABEL_8;
      v8 = *(_QWORD **)(a2 + 8);
      v9 = (_QWORD *)(a2 + 8);
      if (v6)
      {
        do
        {
          v7 = v8;
          v8 = (_QWORD *)v8[1];
        }
        while (v8);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v9[2];
          v10 = *v7 == (_QWORD)v9;
          v9 = v7;
        }
        while (v10);
      }
      if (std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v7 + 4, (_QWORD *)v5 + 4))
      {
LABEL_8:
        if (!v6)
        {
          v17 = (_QWORD *)(a2 + 8);
          v11 = (uint64_t **)(a2 + 8);
LABEL_14:
          v12 = (char *)operator new(0x48uLL);
          v15[0] = v12;
          v15[1] = a2 + 8;
          v16 = 0;
          std::pair<std::string const,std::shared_ptr<Espresso::blob<float,4>>>::pair[abi:ne180100]((std::string *)(v12 + 32), (__int128 *)v5 + 2);
          v16 = 1;
          std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at((uint64_t **)a2, (uint64_t)v17, v11, (uint64_t *)v12);
          v15[0] = 0;
          std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>>>>::reset[abi:ne180100]((uint64_t)v15);
          goto LABEL_15;
        }
        v17 = v7;
        v11 = (uint64_t **)(v7 + 1);
      }
      else
      {
        v11 = (uint64_t **)std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__find_equal<std::string>(a2, &v17, (_QWORD *)v5 + 4);
      }
      if (!*v11)
        goto LABEL_14;
LABEL_15:
      v13 = (Espresso::generic_factory_t *)*((_QWORD *)v5 + 1);
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = *(Espresso::generic_factory_t **)v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (Espresso::generic_factory_t *)*((_QWORD *)v5 + 2);
          v10 = *(_QWORD *)v14 == (_QWORD)v5;
          v5 = v14;
        }
        while (!v10);
      }
      v5 = v14;
    }
    while (v14 != (Espresso::generic_factory_t *)((char *)this + 104));
  }
  std::mutex::unlock(v4);
}

void sub_1914915D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::mutex *v9;
  _QWORD **v10;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>>>>::reset[abi:ne180100]((uint64_t)&a9);
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*v10);
  std::mutex::unlock(v9);
  _Unwind_Resume(a1);
}

double Espresso::generic_factory_t::generic_factory_t(Espresso::generic_factory_t *this)
{
  double result;

  *(_QWORD *)this = &off_1E2D82258;
  *((_QWORD *)this + 1) = 850045863;
  result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = (char *)this + 80;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = (char *)this + 104;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_1E2D82258;
  *((_QWORD *)this + 1) = 850045863;
  result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = (char *)this + 80;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = (char *)this + 104;
  return result;
}

void Espresso::generic_factory_t::destroy_singleton(Espresso::generic_factory_t *this)
{
  uint64_t v1;
  void *v2;

  v1 = Espresso::factories;
  if (Espresso::factories)
  {
    std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*(_QWORD **)(Espresso::factories + 8));
    MEMORY[0x19401CD90](v1, 0x1020C4062D53EE8);
  }
  Espresso::factories = 0;
  v2 = (void *)Espresso::factory_queue;
  Espresso::factory_queue = 0;

  Espresso::onceToken = 0;
}

void Espresso::ANECompilerEngine::chop_argsort_kernel::~chop_argsort_kernel(void **this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 36);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 36);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANECompilerEngine::chop_argsort_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob((_QWORD *)(a1 + 288), a3, a4, a5);
}

BOOL Espresso::ANECompilerEngine::chop_argsort_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, Espresso::ANECompilerEngine *a3)
{
  _OWORD *v6;
  std::__shared_weak_count *v7;
  const Espresso::base_kernel::validate_for_engine_args_t *v8;
  void *v9;
  NSString *v10;
  const Espresso::net *v11;
  unsigned int v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _BOOL8 v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  int v27;
  __CFString *v28;
  const __CFString *v29;
  int v30;
  int v31;
  int v32;
  const __CFString *v33;
  const __CFString *vector_dimension;
  std::__shared_weak_count *v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  const __CFString *const *v38;
  uint64_t v39;
  __int128 v40;
  unint64_t *v41;
  unint64_t v42;
  __int128 v43;
  int v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::string *v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t *v64;
  std::string v65;
  std::string v66;
  int64x2_t *v67;
  std::__shared_weak_count *v68;
  _OWORD v69[2];
  uint64_t v70;
  void *v71;
  void *v72;
  uint64_t v73;
  const Espresso::net *v74;
  std::__shared_weak_count *v75;
  void **v76;
  int v77;
  int v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  std::__shared_weak_count *v83;
  void *v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  std::string v88;
  _BYTE v89[24];
  _BYTE v90[32];
  std::__shared_weak_count *v91;
  int64x2_t *v92;
  std::__shared_weak_count *v93;
  std::string __p;
  __int128 v95;
  uint64_t v96;
  std::__shared_weak_count *v97;
  uint64_t v98;
  int64x2_t *v99;
  std::__shared_weak_count *v100;
  const Espresso::base_kernel::validate_for_engine_args_t *v101;
  std::__shared_weak_count *v102;
  void **v103;

  v6 = (_OWORD *)*((_QWORD *)a3 + 6);
  v101 = 0;
  v102 = 0;
  v7 = (std::__shared_weak_count *)*((_QWORD *)v6 + 10);
  if (v7 && (v102 = std::__shared_weak_count::lock(v7)) != 0)
  {
    v8 = (const Espresso::base_kernel::validate_for_engine_args_t *)*((_QWORD *)v6 + 9);
    v101 = v8;
  }
  else
  {
    v8 = 0;
  }
  Espresso::ANECompilerEngine::ane_arch_allow_network_override((uint64_t)v8 + 472);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if ((Espresso::ANECompilerEngine::is_mix_c((Espresso::ANECompilerEngine *)v9, v10) & 1) == 0)
  {
    v11 = v101;
    v12 = Espresso::ANECompilerEngine::bottom_compute_path(a3, v101, 0);
    if (v12 < 8 && ((0x97u >> v12) & 1) != 0)
    {
      v27 = *(_DWORD *)(*(_QWORD *)a3 + 20);
      if (v27 == -1)
      {
        if (*(_DWORD *)(*(_QWORD *)a3 + 16) == 1)
          v27 = 4;
        else
          v27 = 5;
      }
      v28 = off_1E2DD36D8[v12];
      ANECSortLayerDescInitialize();
      if (*(_BYTE *)(a1 + 284))
        v29 = CFSTR("Ascending");
      else
        v29 = CFSTR("Descending");
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v29;
      v30 = (v27 & (*(int *)(a1 + 280) >> 31)) + *(_DWORD *)(a1 + 280);
      if (v30 < 0)
LABEL_103:
        Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Invalid axis or rank specified.");
      v31 = v27 + ~v30;
      v32 = *((unsigned __int8 *)v101 + 1281);
      v33 = CFSTR("Height");
      switch(v31)
      {
        case 0:
          v33 = CFSTR("Width");
          goto LABEL_51;
        case 1:
          goto LABEL_51;
        case 2:
          if (v27 == 5 && *((_BYTE *)v101 + 1281))
            goto LABEL_47;
          goto LABEL_50;
        case 3:
          v33 = CFSTR("Batch");
          if (v27 == 5 && *((_BYTE *)v101 + 1281))
LABEL_50:
            v33 = CFSTR("Channel");
          goto LABEL_51;
        case 4:
          if (v27 == 5 && *((_BYTE *)v101 + 1281))
            v33 = CFSTR("Batch");
          else
LABEL_47:
            v33 = CFSTR("Depth");
LABEL_51:
          __p.__r_.__value_.__l.__size_ = (std::string::size_type)v33;
          if (vector_dimension)
          {
            __p.__r_.__value_.__r.__words[2] = (std::string::size_type)vector_dimension;
            v95 = xmmword_191A92A30;
            v98 = *MEMORY[0x1E0C9AE50];
            ANECTensorDescInitialize();
            Espresso::ANECompilerEngine::ane_kernel::get_ane_validator((Espresso::ANECompilerEngine::ane_kernel *)&v82, (NSString *)(a1 + 288), v9);
            v80 = 0;
            v81 = 0;
            v35 = v102;
            v74 = v11;
            v75 = v102;
            if (v102)
            {
              p_shared_owners = (unint64_t *)&v102->__shared_owners_;
              do
                v37 = __ldxr(p_shared_owners);
              while (__stxr(v37 + 1, p_shared_owners));
            }
            v38 = *(const __CFString *const **)a3;
            v39 = *(_QWORD *)(*(_QWORD *)a3 + 32);
            v40 = *(_OWORD *)(*(_QWORD *)a3 + 16);
            v69[0] = *(_OWORD *)*(_QWORD *)a3;
            v69[1] = v40;
            v70 = v39;
            v71 = 0;
            v72 = 0;
            v73 = 0;
            std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v71, *((const void **)v38 + 5), *((_QWORD *)v38 + 6), (uint64_t)(*((_QWORD *)v38 + 6) - *((_QWORD *)v38 + 5)) >> 2);
            Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)&v76, v11, (const Espresso::layer_shape *)v69, 1);
            if (v71)
            {
              v72 = v71;
              operator delete(v71);
            }
            if (v35)
            {
              v41 = (unint64_t *)&v35->__shared_owners_;
              do
                v42 = __ldaxr(v41);
              while (__stlxr(v42 - 1, v41));
              if (!v42)
              {
                ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
                std::__shared_weak_count::__release_weak(v35);
              }
            }
            *(_QWORD *)&v43 = v78;
            *((_QWORD *)&v43 + 1) = v79;
            v86 = v43;
            v84 = v28;
            v87 = v77;
            *(_QWORD *)&v43 = (int)v76;
            *((_QWORD *)&v43 + 1) = SHIDWORD(v76);
            v85 = v43;
            v44 = ANECValidateSortLayer();
            v22 = v44 == 0;
            if (v44)
            {
              v45 = *(std::__shared_weak_count **)(a2 + 8);
              v67 = *(int64x2_t **)a2;
              v68 = v45;
              if (v45)
              {
                v46 = (unint64_t *)&v45->__shared_owners_;
                do
                  v47 = __ldxr(v46);
                while (__stxr(v47 + 1, v46));
              }
              std::to_string(&v65, v44);
              v48 = std::string::insert(&v65, 0, "argsort_kernel: ANECValidateSortLayer failed with status ");
              v66 = *v48;
              v48->__r_.__value_.__l.__size_ = 0;
              v48->__r_.__value_.__r.__words[2] = 0;
              v48->__r_.__value_.__r.__words[0] = 0;
              Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v88, (__int128 *)&v66, (uint64_t)a3, 0);
              Espresso::emit_kernel_validation_warning(&v67, (Espresso::base_kernel::validate_for_engine_warning_t *)&v88);
              v49 = v91;
              if (v91)
              {
                v50 = (unint64_t *)&v91->__shared_owners_;
                do
                  v51 = __ldaxr(v50);
                while (__stlxr(v51 - 1, v50));
                if (!v51)
                {
                  ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
                  std::__shared_weak_count::__release_weak(v49);
                }
              }
              v103 = (void **)v90;
              std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v103);
              v103 = (void **)v89;
              std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v103);
              if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v88.__r_.__value_.__l.__data_);
              if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v66.__r_.__value_.__l.__data_);
              if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v65.__r_.__value_.__l.__data_);
              v52 = v68;
              if (v68)
              {
                v53 = (unint64_t *)&v68->__shared_owners_;
                do
                  v54 = __ldaxr(v53);
                while (__stlxr(v54 - 1, v53));
                if (!v54)
                {
                  ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
                  std::__shared_weak_count::__release_weak(v52);
                }
              }
            }
            v55 = v83;
            if (v83)
            {
              v56 = (unint64_t *)&v83->__shared_owners_;
              do
                v57 = __ldaxr(v56);
              while (__stlxr(v57 - 1, v56));
              if (!v57)
              {
                ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
                std::__shared_weak_count::__release_weak(v55);
              }
            }
            goto LABEL_26;
          }
          v58 = *(std::__shared_weak_count **)(a2 + 8);
          v92 = *(int64x2_t **)a2;
          v93 = v58;
          if (v58)
          {
            v59 = (unint64_t *)&v58->__shared_owners_;
            do
              v60 = __ldxr(v59);
            while (__stxr(v60 + 1, v59));
          }
          std::string::basic_string[abi:ne180100]<0>(&v84, "argsort_kernel: unsupported input shape: expect one of the non-axis dimension to have size 1.");
          Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v88, (__int128 *)&v84, (uint64_t)a3, 0);
          Espresso::emit_kernel_validation_warning(&v92, (Espresso::base_kernel::validate_for_engine_warning_t *)&v88);
          v61 = v91;
          if (v91)
          {
            v62 = (unint64_t *)&v91->__shared_owners_;
            do
              v63 = __ldaxr(v62);
            while (__stlxr(v63 - 1, v62));
            if (!v63)
            {
              ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
              std::__shared_weak_count::__release_weak(v61);
            }
          }
          v76 = (void **)v90;
          std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v76);
          v76 = (void **)v89;
          std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v76);
          if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v88.__r_.__value_.__l.__data_);
          if (SHIBYTE(v85) < 0)
            operator delete(v84);
          v19 = v93;
          if (v93)
          {
            v64 = (unint64_t *)&v93->__shared_owners_;
            do
              v21 = __ldaxr(v64);
            while (__stlxr(v21 - 1, v64));
            goto LABEL_23;
          }
          break;
        default:
          goto LABEL_103;
      }
    }
    else
    {
      v13 = *(std::__shared_weak_count **)(a2 + 8);
      v99 = *(int64x2_t **)a2;
      v100 = v13;
      if (v13)
      {
        v14 = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
      std::string::basic_string[abi:ne180100]<0>(&v88, "argsort_kernel: invalid compute path for input.");
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)&v88, (uint64_t)a3, 0);
      Espresso::emit_kernel_validation_warning(&v99, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
      v16 = v97;
      if (v97)
      {
        v17 = (unint64_t *)&v97->__shared_owners_;
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      v84 = &v96;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v84);
      v84 = &v95;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v84);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v88.__r_.__value_.__l.__data_);
      v19 = v100;
      if (v100)
      {
        v20 = (unint64_t *)&v100->__shared_owners_;
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
LABEL_23:
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
    }
  }
  v22 = 0;
LABEL_26:

  v23 = v102;
  if (v102)
  {
    v24 = (unint64_t *)&v102->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  return v22;
}

void sub_191491E1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62)
{
  void *v62;
  uint64_t v63;

  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t(&a48);
  if (a42 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a62);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v63 - 88);
  _Unwind_Resume(a1);
}

void sub_191491F40()
{
  JUMPOUT(0x191491F30);
}

const char *Espresso::generic_argsort_kernel::kernel_type_str(Espresso::generic_argsort_kernel *this)
{
  return "argsort";
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::argsort_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

void Espresso::ANECompilerEngine::chop_argsort_kernel::compile(Espresso::ANECompilerEngine::chop_argsort_kernel *this, Espresso::ANECompilerEngine::compiler *a2, void **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  char *v8;
  std::__shared_weak_count *v9;
  void *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  char *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t i;
  __CFString *v19;
  void *v20;
  void *v21;
  const __CFString *v22;
  int v23;
  int v24;
  int v25;
  const __CFString *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  const char *v35;
  void **v36[2];
  int v37;
  int v38;
  void *__p;
  void *v40;
  void *v41[2];
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  char v47;
  id v48;
  __CFString *v49;
  id v50[5];
  std::__shared_weak_count *v51;
  uint64_t v52;
  std::__shared_weak_count *v53;

  v52 = 0;
  v53 = 0;
  v4 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
  if (!v4 || (v53 = std::__shared_weak_count::lock(v4)) == 0 || (v7 = *((_QWORD *)a2 + 1), (v52 = v7) == 0))
  {
    v35 = "Inconsistent state: null network";
    goto LABEL_64;
  }
  if (!*(_QWORD *)(v7 + 576))
  {
    v35 = "Inconsistent state: blob_storage";
LABEL_64:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v35);
  }
  v41[0] = a3[6];
  v8 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7 + 136, (unsigned __int8 *)v41[0], (__int128 **)v41);
  v10 = (void *)*((_QWORD *)v8 + 5);
  v9 = (std::__shared_weak_count *)*((_QWORD *)v8 + 6);
  v50[4] = v10;
  v51 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v41[0] = a3;
  v13 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7 + 136, (unsigned __int8 *)a3, (__int128 **)v41);
  v14 = (std::__shared_weak_count *)*((_QWORD *)v13 + 6);
  v50[2] = *((id *)v13 + 5);
  v50[3] = v14;
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t(v41, a3);
  v17 = v43;
  for (i = v44; i != v17; i -= 24)
  {
    if (*(char *)(i - 1) < 0)
      operator delete(*(void **)(i - 24));
  }
  v19 = v49;
  v44 = v17;
  v49 = CFSTR("Sort");

  v20 = (void *)objc_opt_new();
  v21 = v20;
  if (*((_BYTE *)this + 284))
    v22 = CFSTR("Ascending");
  else
    v22 = CFSTR("Descending");
  objc_msgSend(v20, "setObject:forKeyedSubscript:", v22, CFSTR("Direction"));
  Espresso::abstract_blob_container::shape((char *)v36, (uint64_t)v10);
  if (v37 == 1)
    v23 = 4;
  else
    v23 = 5;
  if (v38 == -1)
    v24 = v23;
  else
    v24 = v38;
  if (__p)
  {
    v40 = __p;
    operator delete(__p);
  }
  v25 = (v24 & (*((int *)this + 70) >> 31)) + *((_DWORD *)this + 70);
  if (v25 >= 0)
  {
    v26 = CFSTR("Height");
    switch(v24 + ~v25)
    {
      case 0:
        v26 = CFSTR("Width");
        goto LABEL_39;
      case 1:
        goto LABEL_39;
      case 2:
        if (v24 == 5 && *(_BYTE *)(v7 + 1281))
          goto LABEL_35;
        goto LABEL_38;
      case 3:
        v26 = CFSTR("Batch");
        if (v24 == 5 && *(_BYTE *)(v7 + 1281))
LABEL_38:
          v26 = CFSTR("Channel");
        goto LABEL_39;
      case 4:
        if (v24 == 5 && *(_BYTE *)(v7 + 1281))
          v26 = CFSTR("Batch");
        else
LABEL_35:
          v26 = CFSTR("Depth");
LABEL_39:
        objc_msgSend(v21, "setObject:forKeyedSubscript:", v26, CFSTR("SortDimension"));
        objc_msgSend(v21, "setObject:forKeyedSubscript:", &unk_1E2DEE0A0, CFSTR("SortIndices"));
        Espresso::abstract_blob_container::shape((char *)v36, (uint64_t)v10);
        if (__p)
        {
          v40 = __p;
          operator delete(__p);
        }
        objc_msgSend(v21, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], CFSTR("Indices"));
        objc_storeStrong(v50, v21);
        Espresso::ANECompilerEngine::compiler::add_unit(a2, (const Espresso::ANECompilerEngine::compiler::unit_t *)v41);

        if (v47 < 0)
          operator delete(v46);
        v36[0] = (void **)&v45;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v36);
        v36[0] = (void **)&v43;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v36);
        if (v42 < 0)
          operator delete(v41[0]);
        if (v14)
        {
          v27 = (unint64_t *)&v14->__shared_owners_;
          do
            v28 = __ldaxr(v27);
          while (__stlxr(v28 - 1, v27));
          if (!v28)
          {
            ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
            std::__shared_weak_count::__release_weak(v14);
          }
        }
        v29 = v51;
        if (v51)
        {
          v30 = (unint64_t *)&v51->__shared_owners_;
          do
            v31 = __ldaxr(v30);
          while (__stlxr(v31 - 1, v30));
          if (!v31)
          {
            ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
            std::__shared_weak_count::__release_weak(v29);
          }
        }
        v32 = v53;
        if (v53)
        {
          v33 = (unint64_t *)&v53->__shared_owners_;
          do
            v34 = __ldaxr(v33);
          while (__stlxr(v34 - 1, v33));
          if (!v34)
          {
            ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
            std::__shared_weak_count::__release_weak(v32);
          }
        }
        return;
      default:
        break;
    }
  }
  Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Invalid axis or rank specified.");
}

void sub_191492374(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, id a17)
{
  void *v17;
  uint64_t v18;

  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t(&a17);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v18 - 128);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v18 - 112);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v18 - 96);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::chop_argsort_kernel::compile(Espresso::ANECompilerEngine::chop_argsort_kernel *this, Espresso::ANECompilerEngine::compiler *a2, void **a3)
{
  Espresso::ANECompilerEngine::chop_argsort_kernel::compile((Espresso::ANECompilerEngine::chop_argsort_kernel *)((char *)this - 288), a2, a3);
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::chop_argsort_kernel::~chop_argsort_kernel(void **this)
{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 36);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
}

{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 36);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
  JUMPOUT(0x19401CD90);
}

uint64_t Espresso::func_argv_name(uint64_t a1, const void **a2, int a3)
{
  size_t v4;
  uint64_t result;
  char *v6;
  const void *v7;
  char *v8;
  char *v9;
  size_t v10;
  char *v11;
  const void *v12;
  char *v13;
  size_t v14;
  char *v15;
  const void *v16;
  char *v17;

  if (a3 == 2)
  {
    if (*((char *)a2 + 23) >= 0)
      v10 = *((unsigned __int8 *)a2 + 23);
    else
      v10 = (size_t)a2[1];
    result = std::string::basic_string[abi:ne180100](a1, v10 + 9);
    if (*(char *)(result + 23) >= 0)
      v11 = (char *)result;
    else
      v11 = *(char **)result;
    if (v10)
    {
      if (*((char *)a2 + 23) >= 0)
        v12 = a2;
      else
        v12 = *a2;
      result = (uint64_t)memmove(v11, v12, v10);
    }
    v13 = &v11[v10];
    *(_QWORD *)v13 = *(_QWORD *)"_dim_argv";
    v13[8] = 118;
    v9 = &v11[v10 + 9];
  }
  else if (a3 == 1)
  {
    if (*((char *)a2 + 23) >= 0)
      v14 = *((unsigned __int8 *)a2 + 23);
    else
      v14 = (size_t)a2[1];
    result = std::string::basic_string[abi:ne180100](a1, v14 + 11);
    if (*(char *)(result + 23) >= 0)
      v15 = (char *)result;
    else
      v15 = *(char **)result;
    if (v14)
    {
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = *a2;
      result = (uint64_t)memmove(v15, v16, v14);
    }
    v17 = &v15[v14];
    *(_QWORD *)v17 = *(_QWORD *)"_shape_argv";
    *(_DWORD *)(v17 + 7) = 1986490977;
    v9 = &v15[v14 + 11];
  }
  else
  {
    if (a3)
      Espresso::throw_exception_selector<Espresso::invalid_argument_error,Espresso::loopkit_func_t &>(a3);
    if (*((char *)a2 + 23) >= 0)
      v4 = *((unsigned __int8 *)a2 + 23);
    else
      v4 = (size_t)a2[1];
    result = std::string::basic_string[abi:ne180100](a1, v4 + 5);
    if (*(char *)(result + 23) >= 0)
      v6 = (char *)result;
    else
      v6 = *(char **)result;
    if (v4)
    {
      if (*((char *)a2 + 23) >= 0)
        v7 = a2;
      else
        v7 = *a2;
      result = (uint64_t)memmove(v6, v7, v4);
    }
    v8 = &v6[v4];
    v8[4] = 118;
    *(_DWORD *)v8 = 1735549279;
    v9 = &v6[v4 + 5];
  }
  *v9 = 0;
  return result;
}

void Espresso::throw_exception_selector<Espresso::invalid_argument_error,Espresso::loopkit_func_t &>(int a1)
{
  Espresso::throw_exception_with_format<Espresso::invalid_argument_error>("loopkit_func_t %d", a1);
}

uint64_t Espresso::lk_buffer_generator::lk_buffer_generator(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  unint64_t v7;
  std::string::size_type size;
  std::string::size_type v10;
  uint64_t v11;
  int *v12;
  int v13;
  int v14;
  void *v15;
  std::string::size_type v16;
  int v17;
  std::string *v19;
  std::string v20;
  std::string *v21;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v7 = *(int *)(a2 + 20);
  memset(&v20, 0, sizeof(v20));
  if ((_DWORD)v7)
  {
    std::vector<loopkit_rt_dimension_t>::__vallocate[abi:ne180100](&v20, v7);
    size = v20.__r_.__value_.__l.__size_;
    bzero((void *)v20.__r_.__value_.__l.__size_, 16 * v7);
    v20.__r_.__value_.__l.__size_ = size + 16 * v7;
    v10 = v20.__r_.__value_.__r.__words[0];
    v11 = a2 - 4;
    v12 = (int *)(v20.__r_.__value_.__r.__words[0] + 8);
    v13 = 1;
    do
    {
      v14 = *(_DWORD *)(v11 + 4 * v7);
      *(v12 - 2) = 0;
      *(v12 - 1) = v14;
      *v12 = v13;
      v12[1] = 0;
      v12 += 4;
      v13 *= *(_DWORD *)(v11 + 4 * v7--);
    }
    while (v7);
    v15 = *(void **)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)(a1 + 8) = v15;
      operator delete(v15);
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
  }
  else
  {
    v10 = 0;
  }
  *(_QWORD *)a1 = v10;
  v16 = v20.__r_.__value_.__l.__size_;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)&v20.__r_.__value_.__r.__words[1];
  if (a4 >= 5)
  {
    Espresso::compute_path_to_string(a4, &v20);
    if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v19 = &v20;
    else
      v19 = (std::string *)v20.__r_.__value_.__r.__words[0];
    v21 = v19;
    Espresso::throw_exception_selector<Espresso::not_implemented_error,unsigned long long &>("compute_path_to_lk_type for compute path %s", &v21);
  }
  v17 = dword_191AA05B8[a4] | dword_191AA05A4[a4];
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = a3;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = v17;
  *(_DWORD *)(a1 + 60) = (v16 - v10) >> 4;
  *(_QWORD *)(a1 + 64) = v10;
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_191492748(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;
  void *v16;

  if (a14 < 0)
    operator delete(__p);
  v16 = *(void **)v14;
  if (*(_QWORD *)v14)
  {
    *(_QWORD *)(v14 + 8) = v16;
    operator delete(v16);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<loopkit_rt_dimension_t>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;

  if (a2 >> 60)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  result = (char *)operator new(16 * a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * a2];
  return result;
}

void Espresso::throw_exception_selector<Espresso::invalid_state_error,Espresso::loopkit_func_t &>(int a1)
{
  int v1;

  Espresso::throw_exception_with_format<Espresso::invalid_state_error>("loopkit func of type %d fail to evaluate. exit code = %d", a1, v1);
}

double Espresso::solver_sgd::solver_sgd(uint64_t a1, _QWORD *a2, uint64_t *a3, __int128 *a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 v11;
  double result;

  v5 = *a3;
  v4 = a3[1];
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = a2[1];
  *(_QWORD *)(a1 + 24) = *a2;
  *(_QWORD *)(a1 + 32) = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11 = *a4;
  *(_QWORD *)(a1 + 56) = *((_QWORD *)a4 + 2);
  *(_OWORD *)(a1 + 40) = v11;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_QWORD *)(a1 + 128) = a1 + 136;
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 v11;
  double result;

  v5 = *a3;
  v4 = a3[1];
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = a2[1];
  *(_QWORD *)(a1 + 24) = *a2;
  *(_QWORD *)(a1 + 32) = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11 = *a4;
  *(_QWORD *)(a1 + 56) = *((_QWORD *)a4 + 2);
  *(_OWORD *)(a1 + 40) = v11;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_QWORD *)(a1 + 128) = a1 + 136;
  return result;
}

uint64_t Espresso::solver_sgd::solver_sgd(uint64_t a1, _QWORD *a2, _QWORD *a3, __int128 *a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  __int128 v14;
  uint64_t v15;

  *(_QWORD *)a1 = 0;
  v8 = a3[1];
  *(_QWORD *)(a1 + 8) = *a3;
  *(_QWORD *)(a1 + 16) = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11 = a2[1];
  *(_QWORD *)(a1 + 24) = *a2;
  *(_QWORD *)(a1 + 32) = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v14 = *a4;
  v15 = *((_QWORD *)a4 + 2);
  *(_OWORD *)(a1 + 80) = 0u;
  *(_QWORD *)(a1 + 56) = v15;
  *(_OWORD *)(a1 + 40) = v14;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_QWORD *)(a1 + 96) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((_QWORD *)(a1 + 80), *a5, a5[1], 0xAAAAAAAAAAAAAAABLL * ((a5[1] - *a5) >> 3));
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((_QWORD *)(a1 + 104), *a6, a6[1], 0xAAAAAAAAAAAAAAABLL * ((a6[1] - *a6) >> 3));
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 128) = a1 + 136;
  return a1;
}

void sub_1914929D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  va_list va;

  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v3);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

void Espresso::solver_sgd::step(Espresso::solver_sgd *this, uint64_t a2)
{
  uint64_t v4;
  void (***v5)(__int128 *__return_ptr, _QWORD);
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *i;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  const void *v30;
  float *v31;
  void *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  float v42;
  float v43;
  unint64_t *v44;
  unint64_t v45;
  std::runtime_error *exception;
  std::__shared_weak_count *v47;
  __int128 __p;
  _QWORD *v49;
  void (***v50)(__int128 *__return_ptr, _QWORD);
  std::__shared_weak_count *v51;
  __int128 v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  __int128 v55;
  __int128 v56;
  __int128 *v57;

  v55 = 0u;
  v56 = 0u;
  v53 = 0;
  v54 = 0;
  v4 = *((_QWORD *)this + 3);
  v5 = *(void (****)(__int128 *__return_ptr, _QWORD))(v4 + 16);
  v6 = *(_QWORD *)(v4 + 24);
  v50 = v5;
  v51 = (std::__shared_weak_count *)v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  Espresso::context_switcher::finish((Espresso::context_switcher *)&v55);
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v55, (uint64_t)v5, v6);
  (**v5)(&__p, v5);
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)&v56, &__p);
  v9 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
  if (*((_QWORD *)&__p + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v52 = v56;
  if (*((_QWORD *)&v56 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v56 + 1) + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v14 = v51;
  if (v51)
  {
    p_shared_owners = (unint64_t *)&v51->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  (*(void (**)(__int128 *__return_ptr, _QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 1) + 8))(&__p, *((_QWORD *)this + 1), *(_QWORD *)this, a2);
  for (i = v49; i; i = (_QWORD *)*i)
  {
    if (std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>((_QWORD *)(*((_QWORD *)this + 3) + 136), (unsigned __int8 *)i + 16))
    {
      v18 = *((_QWORD *)this + 3) + 136;
      v57 = (__int128 *)(i + 2);
      v19 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v18, (unsigned __int8 *)i + 16, &v57);
      v20 = *((_QWORD *)v19 + 5);
      v21 = (std::__shared_weak_count *)*((_QWORD *)v19 + 6);
      v47 = v21;
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldxr(v22);
        while (__stxr(v23 + 1, v22));
      }
      if (!i[5])
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "data error");
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      (*(void (**)(uint64_t, __int128 *, _QWORD *))(*(_QWORD *)v20 + 48))(v20, &v52, i + 5);
      if (v47)
      {
        v24 = (unint64_t *)&v47->__shared_owners_;
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
          std::__shared_weak_count::__release_weak(v47);
        }
      }
    }
  }
  Espresso::net::__forward(*((_QWORD *)this + 3), &v52, 0, 0xFFFFFFFFLL);
  v26 = *((_QWORD *)this + 3);
  v27 = *(uint64_t **)(v26 + 32);
  v28 = *(uint64_t **)(v26 + 40);
  if (v27 != v28)
  {
    while (1)
    {
      v29 = *v27;
      v30 = *(const void **)(*v27 + 64);
      if (v30)
      {
        if (v31)
          break;
      }
      v27 += 2;
      if (v27 == v28)
        goto LABEL_33;
    }
    v39 = *(std::__shared_weak_count **)(v29 + 72);
    if (v39)
    {
      v40 = (unint64_t *)&v39->__shared_owners_;
      do
        v41 = __ldxr(v40);
      while (__stxr(v41 + 1, v40));
    }
    v42 = v31[77];
    *((float *)this + 16) = v42;
    if (*((_QWORD *)this + 9))
    {
      v43 = *((float *)this + 17);
    }
    else
    {
      *((float *)this + 17) = v42;
      v43 = v42;
    }
    *((float *)this + 17) = (float)(v43 * 0.9) + (float)(v42 * 0.1);
    if (v39)
    {
      v44 = (unint64_t *)&v39->__shared_owners_;
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }
  }
LABEL_33:
  ++*((_QWORD *)this + 9);
  Espresso::context_switcher::finish((Espresso::context_switcher *)&v55);
  ++*(_QWORD *)this;
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__deallocate_node(v49);
  v32 = (void *)__p;
  *(_QWORD *)&__p = 0;
  if (v32)
    operator delete(v32);
  v33 = (std::__shared_weak_count *)*((_QWORD *)&v52 + 1);
  if (*((_QWORD *)&v52 + 1))
  {
    v34 = (unint64_t *)(*((_QWORD *)&v52 + 1) + 8);
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  v36 = v54;
  if (v54)
  {
    v37 = (unint64_t *)&v54->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  Espresso::context_switcher::~context_switcher((Espresso::context_switcher *)&v55);
}

void sub_191492DE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  uint64_t v13;
  va_list va;
  uint64_t v15;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v13 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  Espresso::context_switcher::~context_switcher((Espresso::context_switcher *)(v11 - 96));
  _Unwind_Resume(a1);
}

void Espresso::context_switcher::finish(Espresso::context_switcher *this)
{
  uint64_t v1;
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  __int128 v6;

  v2 = (_QWORD *)((char *)this + 16);
  v1 = *((_QWORD *)this + 2);
  if (v1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
    if (*v2)
      (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 24))(*v2);
  }
  v6 = 0uLL;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)v2, &v6);
  v3 = (std::__shared_weak_count *)*((_QWORD *)&v6 + 1);
  if (*((_QWORD *)&v6 + 1))
  {
    v4 = (unint64_t *)(*((_QWORD *)&v6 + 1) + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void Espresso::context_switcher::~context_switcher(Espresso::context_switcher *this)
{
  Espresso::context_switcher::finish(this);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 16);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this);
}

void Espresso::MPSGraphEngine::Kernels::batchnorm_kernel::~batchnorm_kernel(Espresso::MPSGraphEngine::Kernels::batchnorm_kernel *this)
{
  *(_QWORD *)this = &off_1E2D64D18;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 400);
  Espresso::generic_batchnorm_kernel::~generic_batchnorm_kernel(this);
}

{
  *(_QWORD *)this = &off_1E2D64D18;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 400);
  Espresso::generic_batchnorm_kernel::~generic_batchnorm_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::MPSGraphEngine::Kernels::batchnorm_kernel::share_weights(uint64_t a1, const void **a2)
{
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;

  if (*a2)
  {
    if (v3)
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v3 + 408))(&v7);
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 400, &v7);
      v4 = (std::__shared_weak_count *)*((_QWORD *)&v7 + 1);
      if (*((_QWORD *)&v7 + 1))
      {
        v5 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
        do
          v6 = __ldaxr(v5);
        while (__stlxr(v6 - 1, v5));
        if (!v6)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
    }
  }
}

void Espresso::MPSGraphEngine::Kernels::batchnorm_kernel::clear_weights(Espresso::MPSGraphEngine::Kernels::batchnorm_kernel *this)
{
  std::__shared_weak_count *v1;
  unint64_t *v2;
  unint64_t v3;
  __int128 v4;

  v4 = 0uLL;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)this + 400, &v4);
  v1 = (std::__shared_weak_count *)*((_QWORD *)&v4 + 1);
  if (*((_QWORD *)&v4 + 1))
  {
    v2 = (unint64_t *)(*((_QWORD *)&v4 + 1) + 8);
    do
      v3 = __ldaxr(v2);
    while (__stlxr(v3 - 1, v2));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

uint64_t Espresso::MPSGraphEngine::Kernels::batchnorm_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  int64x2_t *v35;
  std::__shared_weak_count *v36;
  int64x2_t *v37;
  std::__shared_weak_count *v38;
  int64x2_t *v39;
  std::__shared_weak_count *v40;
  void *v41[2];
  char v42;
  std::string __p;
  _BYTE v44[24];
  _BYTE v45[32];
  std::__shared_weak_count *v46;
  int64x2_t *v47;
  std::__shared_weak_count *v48;
  void **v49;

  if (*(_DWORD *)(a1 + 368))
  {
    v4 = *(std::__shared_weak_count **)(a2 + 8);
    v47 = *(int64x2_t **)a2;
    v48 = v4;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
    }
    std::string::basic_string[abi:ne180100]<0>(v41, "[Dispatch::MPSGraph::batchnorm_kernel] unsupported: generate_mean_ivar");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)v41, a3, 0);
    Espresso::emit_kernel_validation_warning(&v47, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    v7 = v46;
    if (v46)
    {
      v8 = (unint64_t *)&v46->__shared_owners_;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v49 = (void **)v45;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v49);
    v49 = (void **)v44;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v49);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v42 < 0)
      operator delete(v41[0]);
    v10 = v48;
    if (!v48)
      return 0;
    v11 = (unint64_t *)&v48->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    goto LABEL_70;
  }
  if (fabsf(*(float *)(a1 + 372)) > 0.00000001)
  {
    v13 = *(std::__shared_weak_count **)(a2 + 8);
    v39 = *(int64x2_t **)a2;
    v40 = v13;
    if (v13)
    {
      v14 = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    std::string::basic_string[abi:ne180100]<0>(v41, "[Dispatch::MPSGraph::batchnorm_kernel] unsupported: regularization_eps");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)v41, a3, 0);
    Espresso::emit_kernel_validation_warning(&v39, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    v16 = v46;
    if (v46)
    {
      v17 = (unint64_t *)&v46->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v49 = (void **)v45;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v49);
    v49 = (void **)v44;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v49);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v42 < 0)
      operator delete(v41[0]);
    v10 = v40;
    if (!v40)
      return 0;
    v19 = (unint64_t *)&v40->__shared_owners_;
    do
      v12 = __ldaxr(v19);
    while (__stlxr(v12 - 1, v19));
    goto LABEL_70;
  }
  if (*(_DWORD *)(a1 + 308) && *(_DWORD *)(a1 + 312) != 1)
  {
    v28 = *(std::__shared_weak_count **)(a2 + 8);
    v37 = *(int64x2_t **)a2;
    v38 = v28;
    if (v28)
    {
      v29 = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
    }
    std::string::basic_string[abi:ne180100]<0>(v41, "[Dispatch::MPSGraph::batchnorm_kernel] unsupported: instancenorm training_instancenorm mode");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)v41, a3, 0);
    Espresso::emit_kernel_validation_warning(&v37, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    v31 = v46;
    if (v46)
    {
      v32 = (unint64_t *)&v46->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    v49 = (void **)v45;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v49);
    v49 = (void **)v44;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v49);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v42 < 0)
      operator delete(v41[0]);
    v10 = v38;
    if (!v38)
      return 0;
    v34 = (unint64_t *)&v38->__shared_owners_;
    do
      v12 = __ldaxr(v34);
    while (__stlxr(v12 - 1, v34));
    goto LABEL_70;
  }
  if (*(_DWORD *)(a1 + 376) == 2)
    return 1;
  v21 = *(std::__shared_weak_count **)(a2 + 8);
  v35 = *(int64x2_t **)a2;
  v36 = v21;
  if (v21)
  {
    v22 = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  std::string::basic_string[abi:ne180100]<0>(v41, "[Dispatch::MPSGraph::batchnorm_kernel] unsupported: Only BatchNorm2D is supported");
  Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)v41, a3, 0);
  Espresso::emit_kernel_validation_warning(&v35, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
  v24 = v46;
  if (v46)
  {
    v25 = (unint64_t *)&v46->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v49 = (void **)v45;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v49);
  v49 = (void **)v44;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v49);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v42 < 0)
    operator delete(v41[0]);
  v10 = v36;
  if (v36)
  {
    v27 = (unint64_t *)&v36->__shared_owners_;
    do
      v12 = __ldaxr(v27);
    while (__stlxr(v12 - 1, v27));
LABEL_70:
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  return 0;
}

void sub_191493500(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21)
{
  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t(&a21);
  if (a20 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

_QWORD *Espresso::MPSGraphEngine::Kernels::batchnorm_kernel::set_batchnorm_params(uint64_t a1, uint64_t *a2)
{
  return std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 400), *a2, a2[1]);
}

uint64_t Espresso::MPSGraphEngine::Kernels::batchnorm_kernel::get_batchnorm_params@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 408);
  *a2 = *(_QWORD *)(this + 400);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

void sub_191493E74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,char a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,char a49)
{
  uint64_t v49;
  uint64_t v50;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  void *v55;

  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v50 - 240));
  v52 = 0;
  v53 = v50 - 208;
  while (1)
  {
    v54 = *(void **)(v53 + v52 + 48);
    if (v54)
    {
      *(_QWORD *)(v53 + v52 + 56) = v54;
      operator delete(v54);
    }
    v52 -= 24;
    if (v52 == -72)
    {
      *(_QWORD *)(v50 - 208) = &a43;
      std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v50 - 208));
      *(_QWORD *)(v50 - 208) = &a46;
      std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v50 - 208));
      v55 = *(void **)v49;
      if (*(_QWORD *)v49)
      {
        *(_QWORD *)(v49 + 8) = v55;
        operator delete(v55);
      }
      Espresso::scoped_timer::~scoped_timer((Espresso::scoped_timer *)&a49);
      _Unwind_Resume(a1);
    }
  }
}

void sub_191494224(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_191494A24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,char a33)
{
  uint64_t v33;
  uint64_t v34;
  void *v36;

  v36 = *(void **)v33;
  if (*(_QWORD *)v33)
  {
    *(_QWORD *)(v33 + 8) = v36;
    operator delete(v36);
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v34 - 240);
  Espresso::scoped_timer::~scoped_timer((Espresso::scoped_timer *)(v34 - 192));
  _Unwind_Resume(a1);
}

void sub_191494BEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_191494CFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;
  void *v11;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_191494DCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  va_list va;

  va_start(va, a3);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_191495514(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  void *v28;
  void *v29;
  void *v30;

  _Unwind_Resume(a1);
}

_QWORD *copy_to_blobrgb(_QWORD *result, uint64_t a2, float a3, float a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;

  v4 = result[1];
  if (v4)
  {
    v5 = 0;
    v6 = *(_QWORD *)(a2 + 24);
    v7 = result[2];
    v8 = result[3];
    v9 = v6 + 8 * v4 * v7;
    v10 = v6 + 4 * v4 * v7;
    v11 = *result + 2;
    do
    {
      if (v7)
      {
        v12 = 0;
        v13 = v7;
        do
        {
          result = (_QWORD *)(v11 + v12);
          LOBYTE(a4) = *(_BYTE *)(v11 + v12);
          *(float *)&v14 = (float)LODWORD(a4) + a3;
          *(float *)(v6 + v12) = *(float *)&v14;
          LOBYTE(v14) = *(_BYTE *)(v11 + v12 - 1);
          *(float *)&v15 = (float)v14 + a3;
          *(float *)(v10 + v12) = *(float *)&v15;
          LOBYTE(v15) = *(_BYTE *)(v11 + v12 - 2);
          a4 = (float)v15 + a3;
          *(float *)(v9 + v12) = a4;
          v12 += 4;
          --v13;
        }
        while (v13);
        v6 += v12;
        v9 += v12;
        v10 += v12;
      }
      ++v5;
      v11 += v8;
    }
    while (v5 != v4);
  }
  return result;
}

_QWORD *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v4, *(const void **)v6, *(_QWORD *)(v6 + 8), (uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 2);
      v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::vector<int>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1914958E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::vector<int>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::vector<int>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  if (!*(_BYTE *)(a1 + 24))
  {
    v2 = **(_QWORD **)(a1 + 16);
    v3 = **(_QWORD **)(a1 + 8);
    if (v2 != v3)
    {
      v4 = **(_QWORD **)(a1 + 16);
      do
      {
        v6 = *(void **)(v4 - 24);
        v4 -= 24;
        v5 = v6;
        if (v6)
        {
          *(_QWORD *)(v2 - 16) = v5;
          operator delete(v5);
        }
        v2 = v4;
      }
      while (v4 != v3);
    }
  }
  return a1;
}

float FaceLandmarkDetectorPointMake(const float *a1, const float *a2)
{
  return *a1;
}

void Espresso::ANECompilerEngine::elementwise_kernel::~elementwise_kernel(Espresso::ANECompilerEngine::elementwise_kernel *this)
{
  void **v2;

  *(_QWORD *)this = &off_1E2D780E8;
  v2 = (void **)((char *)this + 336);
  *((_QWORD *)this + 42) = &unk_1E2D78258;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 552);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);
  Espresso::base_kernel::~base_kernel(this);
}

{
  void **v2;

  *(_QWORD *)this = &off_1E2D780E8;
  v2 = (void **)((char *)this + 336);
  *((_QWORD *)this + 42) = &unk_1E2D78258;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 552);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANECompilerEngine::elementwise_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob((_QWORD *)(a1 + 336), a3, a4, a5);
}

void Espresso::ANECompilerEngine::elementwise_kernel::compile(Espresso::ANECompilerEngine::elementwise_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  char *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  char *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  int v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  char *v21;
  char *v22;
  __int128 v23;
  unint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  std::string::size_type v30;
  uint64_t v31;
  __int128 v32;
  unint64_t *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  Espresso::ANECompilerEngine::elementwise_kernel *n;
  int *v38;
  uint64_t v39;
  uint64_t v40;
  Espresso::ANECompilerEngine::compiler *v41;
  __CFString *v42;
  void *v43;
  std::vector<std::string>::pointer begin;
  char *v45;
  float v46;
  __CFString *v47;
  void *v53;
  void *v54;
  __CFString *v55;
  std::vector<std::string>::pointer v56;
  char *v57;
  float v58;
  __CFString *v59;
  void *v60;
  void *v62;
  std::vector<std::string>::pointer v63;
  uint64_t v64;
  std::string::size_type v65;
  std::string::size_type v66;
  int v67;
  std::vector<std::string>::pointer v68;
  __CFString *v69;
  id v70;
  uint64_t *p_size;
  unint64_t *v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  uint64_t **v78;
  char v79;
  char v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  unint64_t *v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  int *v89;
  int v90;
  char i;
  uint64_t v92;
  unint64_t v93;
  int v94;
  __CFString *v95;
  std::vector<std::string>::pointer end;
  std::string *v97;
  std::vector<std::string>::pointer v98;
  std::string *v99;
  char *v100;
  int *v101;
  std::string::size_type v102;
  unint64_t *v103;
  unint64_t v104;
  unint64_t v105;
  std::string::size_type v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  char *v110;
  unint64_t *v111;
  unint64_t v112;
  char *v113;
  void **v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  std::__shared_weak_count *size;
  unint64_t *v122;
  unint64_t v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  float v127;
  __CFString *v128;
  BOOL v129;
  void *v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  unint64_t *v135;
  unint64_t v136;
  std::vector<std::string>::pointer v137;
  std::vector<std::string>::pointer v138;
  std::vector<std::string>::pointer v139;
  std::string *v140;
  uint64_t v141;
  int *v142;
  uint64_t v143;
  uint64_t v144;
  const unsigned __int8 *v145;
  _WORD *v146;
  int v147;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  uint64_t v152;
  unint64_t *v153;
  unint64_t v154;
  int v155;
  void *v156;
  void *v157;
  void *v158;
  uint64_t v159;
  __CFString *v160;
  void *v161;
  void *v162;
  __CFString *v163;
  std::string *v164;
  std::string *ii;
  __CFString *v166;
  std::string *v167;
  std::string *mm;
  __CFString *v169;
  std::string *v170;
  std::string *i3;
  void *v173;
  void *v175;
  __int128 *v176;
  std::string *v177;
  __int128 *v178;
  std::string *v179;
  __int128 *v180;
  std::string *v181;
  std::vector<std::string>::pointer v182;
  std::string *v183;
  std::vector<std::string>::pointer m;
  uint64_t v185;
  uint64_t v186;
  char *v187;
  char *v188;
  uint64_t v189;
  uint64_t v190;
  std::vector<std::string>::pointer v191;
  std::string *v192;
  std::vector<std::string>::pointer v193;
  std::vector<std::string>::pointer v194;
  char *v195;
  void **v196;
  uint64_t v197;
  std::vector<std::string>::pointer v198;
  std::string *v199;
  void *v200;
  void *v201;
  void *v202;
  const __CFString *v203;
  void *v204;
  void *v205;
  std::__shared_weak_count *v206;
  unint64_t *v207;
  unint64_t v208;
  std::__shared_weak_count *v209;
  unint64_t *v210;
  unint64_t v211;
  std::__shared_weak_count *v212;
  unint64_t *v213;
  unint64_t v214;
  void *v216;
  __CFString *v217;
  void *v218;
  id v219;
  void *v220;
  void *v221;
  __CFString *v222;
  size_t v223;
  std::string *p_str;
  const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *v225;
  __CFString *v226;
  __CFString *v227;
  int32x2_t v228;
  void *v229;
  __CFString *v230;
  void *v232;
  __CFString *v233;
  void *v234;
  void *v235;
  __CFString *v236;
  void *v238;
  char v239;
  size_t v240;
  std::string *v241;
  const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *v242;
  void *v243;
  __CFString *v244;
  std::string *v245;
  std::vector<std::string>::pointer jj;
  __int128 *v247;
  std::string *v248;
  size_t v249;
  std::string *v250;
  const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *v251;
  __CFString *v252;
  std::string *v253;
  std::vector<std::string>::pointer nn;
  __int128 *v255;
  std::string *v256;
  size_t v257;
  std::string *v258;
  const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *v259;
  __CFString *v260;
  std::string *v261;
  std::vector<std::string>::pointer i4;
  __int128 *v263;
  std::string *v264;
  size_t v265;
  std::string *v266;
  const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *v267;
  void *v268;
  __CFString *v269;
  std::vector<std::string>::pointer kk;
  std::vector<std::string>::pointer v271;
  __int128 v272;
  size_t v273;
  std::string *v274;
  const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *v275;
  void *v276;
  __CFString *v277;
  std::string *v278;
  std::string *i1;
  const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *v280;
  __int128 v281;
  size_t v282;
  std::string *v283;
  const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *v284;
  void *v285;
  __CFString *v286;
  std::vector<std::string>::pointer i5;
  std::vector<std::string>::pointer v288;
  __int128 v289;
  __CFString *v290;
  void *v291;
  void *v292;
  std::string *v293;
  std::string *v294;
  std::string *v295;
  std::string *v296;
  uint64_t v297;
  std::string *v298;
  std::string *v299;
  unint64_t v300;
  unint64_t v301;
  unint64_t v302;
  uint64_t v303;
  unint64_t *v304;
  unint64_t v305;
  uint64_t v306;
  unint64_t *v307;
  unint64_t v308;
  std::string::size_type v309;
  std::__shared_weak_count *v310;
  unint64_t *v311;
  unint64_t v312;
  float v313;
  unint64_t *v314;
  unint64_t v315;
  __int128 *v316;
  unint64_t *v317;
  unint64_t v318;
  unint64_t *v319;
  unint64_t v320;
  std::__shared_weak_count *v321;
  unint64_t *v322;
  unint64_t v323;
  std::string::size_type v324;
  uint64_t v325;
  uint64_t v326;
  int v327;
  uint64_t v328;
  int *v329;
  _WORD *v330;
  int v331;
  __int128 v333;
  std::__shared_weak_count *v334;
  unint64_t *v335;
  unint64_t v336;
  std::__shared_weak_count *v337;
  unint64_t *v338;
  unint64_t v339;
  uint64_t v340;
  int *v341;
  _WORD *v342;
  int v343;
  int v345;
  Espresso::ANECompilerEngine::compiler::build_state_t *v346;
  uint64_t v347;
  std::__shared_weak_count *v348;
  unint64_t *v349;
  unint64_t v350;
  uint64_t v351;
  unint64_t *v352;
  unint64_t v353;
  void *v354;
  id v355;
  void *v356;
  void *v357;
  void *v358;
  void *v359;
  uint64_t weights_file_index;
  void *v361;
  void *v362;
  __int128 v363;
  unint64_t *v364;
  unint64_t v365;
  uint64_t v366;
  unint64_t *v367;
  unint64_t v368;
  void *v369;
  void *v370;
  void *v371;
  uint64_t v372;
  void *v373;
  void *v374;
  std::string *v375;
  std::string *v376;
  uint64_t v377;
  char v378;
  std::string::size_type v379;
  std::string::size_type v380;
  std::string::size_type v381;
  std::string *v382;
  std::string *v383;
  const std::string::value_type *data;
  __int128 v385;
  __CFString *v386;
  std::string *v387;
  std::string *v388;
  unint64_t v389;
  unint64_t v390;
  unint64_t v391;
  uint64_t v392;
  std::__shared_weak_count *v393;
  unint64_t *v394;
  unint64_t v395;
  std::__shared_weak_count *v396;
  unint64_t *v397;
  unint64_t v398;
  std::__shared_weak_count *v399;
  unint64_t *v400;
  unint64_t v401;
  std::__shared_weak_count *v402;
  unint64_t *v403;
  unint64_t v404;
  unint64_t *v405;
  unint64_t v406;
  unint64_t *v407;
  unint64_t v408;
  unint64_t *v409;
  unint64_t v410;
  std::__shared_weak_count *v411;
  unint64_t *v412;
  unint64_t v413;
  std::__shared_weak_count *v414;
  unint64_t *v415;
  unint64_t v416;
  std::__shared_weak_count *v417;
  unint64_t *v418;
  unint64_t v419;
  void *v420;
  void *v421;
  void *v422;
  uint64_t v423;
  __int128 v425;
  std::string *v426;
  __int128 v427;
  std::string *v428;
  __int128 v429;
  std::string *v430;
  size_t v431;
  std::string *v432;
  const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *v433;
  void *v434;
  __CFString *v435;
  std::vector<std::string>::pointer i2;
  std::vector<std::string>::pointer v437;
  __int128 v438;
  std::string *v439;
  std::string *v440;
  uint64_t v441;
  __CFString *v442;
  _anonymous_namespace_ *v443;
  void *v444;
  uint64_t v445;
  void *v446;
  const __CFString *v447;
  std::__shared_weak_count *v448;
  unint64_t *v449;
  unint64_t v450;
  const char *v451;
  int *v452;
  uint64_t j;
  float v454;
  int v455;
  _WORD *v456;
  int v457;
  std::runtime_error *exception;
  std::runtime_error *v460;
  int *v461;
  uint64_t k;
  int v463;
  int v464;
  int v465;
  int v466;
  int v467;
  Espresso *v468;
  const char *v469;
  float v470;
  NSObject *v472;
  double v473;
  uint64_t v474;
  _WORD *v475;
  int v476;
  int v478;
  Espresso::ANECompilerEngine::elementwise_kernel *v479;
  unsigned int v480;
  Espresso::ANECompilerEngine::compiler *v481;
  const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *v482;
  id obj;
  std::__shared_weak_count *v484;
  std::__shared_weak_count *v485;
  uint64_t v486[4];
  uint64_t v487[2];
  uint64_t v488[2];
  char *v489;
  char *v490;
  unint64_t v491;
  void *v492[2];
  char v493;
  uint64_t v494;
  std::vector<std::string> v495;
  void *v496;
  char v497;
  id v498;
  __CFString *v499;
  id v500[2];
  uint64_t v501;
  std::string *v502;
  unint64_t v503;
  uint64_t v504;
  std::__shared_weak_count *v505;
  uint64_t v506;
  std::__shared_weak_count *v507;
  uint64_t v508;
  uint64_t v509;
  __int128 v510;
  uint64_t v511;
  std::__shared_weak_count *v512;
  __int128 v513;
  uint64_t v514;
  std::__shared_weak_count *v515;
  __int128 *v516[2];
  std::string::size_type v517;
  std::__shared_weak_count *v518;
  __int128 v519;
  __int128 v520;
  unint64_t *v521;
  __int128 __p;
  std::string *v523;
  unint64_t v524;
  void *v525;
  char v526;
  __CFString *v527;
  __CFString *v528;
  id v529[2];
  std::string v530;
  uint64_t v531;
  std::string v532;
  __int128 v533;
  std::string *v534;
  std::string *v535;
  unint64_t v536;
  void *v537;
  char v538;
  id v539;
  __CFString *v540;
  id v541;
  std::string __str;
  __int128 v543;
  void *v544;
  std::vector<std::string> v545;
  void *v546;
  char v547;
  id v548;
  __CFString *v549;
  id v550[2];
  std::string v551;
  __int128 v552;
  uint64_t v553;

  v553 = *MEMORY[0x1E0C80C00];
  v508 = 0;
  v509 = 0;
  v4 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
  if (!v4
    || (v7 = std::__shared_weak_count::lock(v4), (v509 = (uint64_t)v7) == 0)
    || (v8 = *((_QWORD *)a2 + 1), (v508 = v8) == 0))
  {
    v451 = "Inconsistent state: null network";
    goto LABEL_825;
  }
  if (!*(_QWORD *)(v8 + 576))
  {
    v451 = "Inconsistent state: blob_storage";
LABEL_825:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v451);
  }
  v9 = v7;
  *(_QWORD *)&v519 = *((_QWORD *)a3 + 6);
  v10 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8 + 136, (unsigned __int8 *)v519, (__int128 **)&v519);
  v11 = (std::__shared_weak_count *)*((_QWORD *)v10 + 6);
  v506 = *((_QWORD *)v10 + 5);
  v507 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  *(_QWORD *)&v519 = a3;
  v14 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8 + 136, (unsigned __int8 *)a3, (__int128 **)&v519);
  v15 = (std::__shared_weak_count *)*((_QWORD *)v14 + 6);
  v504 = *((_QWORD *)v14 + 5);
  v505 = v15;
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  v18 = *((unsigned __int8 *)a2 + 552);
  v501 = 0;
  v502 = 0;
  v503 = 0;
  obj = (id)objc_opt_new();
  v479 = this;
  v481 = a2;
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t(v492, (id *)a3);
  v478 = v18;
  v489 = 0;
  v490 = 0;
  v491 = 0;
  v19 = (unsigned __int8 *)*((_QWORD *)a3 + 6);
  v20 = (unsigned __int8 *)*((_QWORD *)a3 + 7);
  v482 = a3;
  if (v19 == v20)
  {
    v35 = *((_QWORD *)a3 + 6);
  }
  else
  {
    do
    {
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v19;
      v21 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8 + 136, v19, (__int128 **)&__str);
      Espresso::abstract_blob_container::shape((char *)&v519, *((_QWORD *)v21 + 5));
      v22 = v490;
      if ((unint64_t)v490 >= v491)
      {
        v25 = (v490 - v489) >> 6;
        v26 = v25 + 1;
        if ((unint64_t)(v25 + 1) >> 58)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v27 = v491 - (_QWORD)v489;
        if ((uint64_t)(v491 - (_QWORD)v489) >> 5 > v26)
          v26 = v27 >> 5;
        if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFC0)
          v28 = 0x3FFFFFFFFFFFFFFLL;
        else
          v28 = v26;
        *((_QWORD *)&v543 + 1) = &v491;
        v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::layer_shape>>(v28);
        v30 = (std::string::size_type)&v29[64 * v25];
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v29;
        __str.__r_.__value_.__l.__size_ = v30;
        *(_QWORD *)&v543 = &v29[64 * v31];
        v32 = v520;
        v33 = v521;
        *(_OWORD *)v30 = v519;
        *(_OWORD *)(v30 + 16) = v32;
        *(_QWORD *)(v30 + 32) = v33;
        *(_QWORD *)(v30 + 40) = 0;
        *(_QWORD *)(v30 + 48) = 0;
        *(_QWORD *)(v30 + 56) = 0;
        *(_OWORD *)(v30 + 40) = __p;
        *(_QWORD *)(v30 + 56) = v523;
        __p = 0uLL;
        v523 = 0;
        __str.__r_.__value_.__r.__words[2] = v30 + 64;
        std::vector<Espresso::layer_shape>::__swap_out_circular_buffer((uint64_t *)&v489, &__str);
        v34 = v490;
        std::__split_buffer<Espresso::layer_shape>::~__split_buffer((uint64_t)&__str);
        v490 = v34;
        if ((_QWORD)__p)
        {
          *((_QWORD *)&__p + 1) = __p;
          operator delete((void *)__p);
        }
      }
      else
      {
        v23 = v520;
        v24 = v521;
        *(_OWORD *)v490 = v519;
        *((_OWORD *)v22 + 1) = v23;
        *((_QWORD *)v22 + 4) = v24;
        *((_QWORD *)v22 + 5) = 0;
        *((_QWORD *)v22 + 6) = 0;
        *((_QWORD *)v22 + 7) = 0;
        *(_OWORD *)(v22 + 40) = __p;
        *((_QWORD *)v22 + 7) = v523;
        __p = 0uLL;
        v523 = 0;
        v490 = v22 + 64;
      }
      v19 += 24;
    }
    while (v19 != v20);
    v19 = (unsigned __int8 *)*((_QWORD *)a3 + 6);
    v35 = *((_QWORD *)a3 + 7);
  }
  v36 = v35 - (_QWORD)v19;
  n = this;
  if (0xAAAAAAAAAAAAAAABLL * (v36 >> 3) > 2)
    Espresso::throw_exception_selector<Espresso::not_implemented_error>("Elementwise ops for n_blobs > 2 not implemented");
  if (v36 != 48)
  {
    v40 = *((unsigned int *)this + 70);
    v41 = v481;
    if ((int)v40 <= 12)
    {
      switch((int)v40)
      {
        case 0:
        case 2:
          v42 = v499;
          v499 = CFSTR("GOC");

          v43 = (void *)objc_opt_new();
          objc_msgSend(obj, "setObject:forKeyedSubscript:", v43, CFSTR("BiasScaleGroupData"));
          begin = v495.__begin_;
          if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(_QWORD **)(v8 + 360), v495.__begin_->__r_.__value_.__r.__words))
          {
            __str.__r_.__value_.__r.__words[0] = (std::string::size_type)begin;
            v45 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v8 + 352), begin, (uint64_t)&std::piecewise_construct, (__int128 **)&__str);
            v519 = *(_OWORD *)(v45 + 56);
            v521 = 0;
            v520 = 0uLL;
            std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v520, *((const void **)v45 + 9), *((_QWORD *)v45 + 10), (uint64_t)(*((_QWORD *)v45 + 10) - *((_QWORD *)v45 + 9)) >> 2);
            v46 = *(float *)&v519;
            if ((_QWORD)v520)
            {
              *((_QWORD *)&v520 + 1) = v520;
              operator delete((void *)v520);
            }
          }
          else
          {
            v46 = 1.0;
          }
          _S0 = v46 * *((float *)this + 72);
          __asm { FCVT            H0, S0 }
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithShort:", SLOWORD(_S0));
          v131 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(obj, "setObject:forKeyedSubscript:", v131, CFSTR("BiasScalar"));

          objc_msgSend(obj, "removeObjectForKey:", CFSTR("BiasScaleGroupData"));
          goto LABEL_520;
        case 1:
        case 3:
          v59 = v499;
          v499 = CFSTR("GOC");

          v60 = (void *)objc_opt_new();
          objc_msgSend(obj, "setObject:forKeyedSubscript:", v60, CFSTR("BiasScaleGroupData"));
          _S0 = *((_DWORD *)this + 72);
          __asm { FCVT            H0, S0 }
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithShort:", (__int16)_S0);
          v62 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(obj, "setObject:forKeyedSubscript:", v62, CFSTR("ScaleScalar"));

          objc_msgSend(obj, "removeObjectForKey:", CFSTR("BiasScaleGroupData"));
          goto LABEL_520;
        default:
          goto LABEL_327;
      }
    }
    if ((int)v40 > 116)
    {
      if ((_DWORD)v40 == 117)
      {
        std::string::basic_string[abi:ne180100]<0>(&__str, "experimental.ane.floor");
        std::string::basic_string[abi:ne180100]<0>(&v532, "0");
        Espresso::map_const_get<std::map<std::string,std::string>>(v8 + 472, (uint64_t)&__str, (uint64_t)&v532, (std::string *)&v519);
        if (SBYTE7(v520) < 0)
        {
          v129 = *((_QWORD *)&v519 + 1) == 1 && *(_BYTE *)v519 == 49;
          operator delete((void *)v519);
        }
        else
        {
          v129 = SBYTE7(v520) == 1 && v519 == 49;
        }
        if (SHIBYTE(v532.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v532.__r_.__value_.__l.__data_);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        if (v129)
        {
          Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v519, (id *)a3);
          v217 = v528;
          v528 = CFSTR("GOC");

          v218 = (void *)objc_opt_new();
          v219 = v529[0];
          v529[0] = v218;

          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithShort:", 4294948864);
          v220 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v529[0], "setObject:forKeyedSubscript:", v220, CFSTR("BiasScalar"));

          v221 = (void *)objc_opt_new();
          objc_msgSend(v529[0], "setObject:forKeyedSubscript:", v221, CFSTR("BiasScaleGroupData"));

          v222 = v527;
          v527 = CFSTR("UInt8");

          if (*((char *)a3 + 23) >= 0)
            v223 = *((unsigned __int8 *)a3 + 23);
          else
            v223 = *((_QWORD *)a3 + 1);
          std::string::basic_string[abi:ne180100]((uint64_t)&__str, v223 + 5);
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_str = &__str;
          else
            p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
          if (v223)
          {
            if (*((char *)a3 + 23) >= 0)
              v225 = a3;
            else
              v225 = *(const Espresso::ANECompilerEngine::compiler::layer_graph_info_t **)a3;
            memmove(p_str, v225, v223);
          }
          strcpy((char *)p_str + v223, "__@u8");
          if (SBYTE7(v520) < 0)
            operator delete((void *)v519);
          v519 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
          *(_QWORD *)&v520 = *((_QWORD *)&__str.__r_.__value_.__l + 2);
          Espresso::ANECompilerEngine::compiler::add_unit(v481, (const Espresso::ANECompilerEngine::compiler::unit_t *)&v519);
          if (SBYTE7(v520) < 0)
          {
            std::string::__init_copy_ctor_external(&__str, (const std::string::value_type *)v519, *((std::string::size_type *)&v519 + 1));
          }
          else
          {
            *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v519;
            __str.__r_.__value_.__r.__words[2] = v520;
          }
          std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v495, &__str, &v543, 1uLL);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
          v290 = v499;
          v499 = CFSTR("GOC");

          v291 = (void *)objc_opt_new();
          objc_msgSend(obj, "setObject:forKeyedSubscript:", v291, CFSTR("BiasScaleGroupData"));

          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithShort:", 0);
          v292 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(obj, "setObject:forKeyedSubscript:", v292, CFSTR("BiasScalar"));

          if (v526 < 0)
            operator delete(v525);
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p + 8;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v520 + 8;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
          if (SBYTE7(v520) < 0)
            operator delete((void *)v519);
          goto LABEL_520;
        }
        v40 = *((unsigned int *)v479 + 70);
      }
      else if ((_DWORD)v40 == 119)
      {
        v55 = v499;
        v499 = CFSTR("Neuron");

        objc_msgSend(obj, "setObject:forKeyedSubscript:", CFSTR("ClampedReLU"), CFSTR("Type"));
        v56 = v495.__begin_;
        if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(_QWORD **)(v8 + 360), v495.__begin_->__r_.__value_.__r.__words))
        {
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v56;
          v57 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v8 + 352), v56, (uint64_t)&std::piecewise_construct, (__int128 **)&__str);
          v519 = *(_OWORD *)(v57 + 56);
          v521 = 0;
          v520 = 0uLL;
          std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v520, *((const void **)v57 + 9), *((_QWORD *)v57 + 10), (uint64_t)(*((_QWORD *)v57 + 10) - *((_QWORD *)v57 + 9)) >> 2);
          v58 = *(float *)&v519;
          if ((_QWORD)v520)
          {
            *((_QWORD *)&v520 + 1) = v520;
            operator delete((void *)v520);
          }
        }
        else
        {
          v58 = 1.0;
        }
        _S0 = v58 * *((float *)this + 72);
        __asm { FCVT            H0, S0 }
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithShort:", SLOWORD(_S0));
        v173 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(obj, "setObject:forKeyedSubscript:", v173, CFSTR("ReluMin"));

        _S0 = v58 * *((float *)this + 73);
        __asm { FCVT            H0, S0 }
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithShort:", SLOWORD(_S0));
        v175 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(obj, "setObject:forKeyedSubscript:", v175, CFSTR("ReluMax"));

        goto LABEL_520;
      }
    }
    else
    {
      if ((_DWORD)v40 == 13)
      {
        v127 = *((float *)this + 72);
        if (fabsf(v127 + -2.0) < 0.000001)
        {
          objc_msgSend(obj, "setObject:forKeyedSubscript:", CFSTR("Square"), CFSTR("Type"));
          v128 = v499;
          v499 = CFSTR("ElementWise");

          goto LABEL_520;
        }
        if (fabsf(v127 + -1.0) < 0.000001)
        {
          v160 = v499;
          v499 = CFSTR("GOC");

          v161 = (void *)objc_opt_new();
          objc_msgSend(obj, "setObject:forKeyedSubscript:", v161, CFSTR("BiasScaleGroupData"));
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithShort:", 15360);
          v162 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(obj, "setObject:forKeyedSubscript:", v162, CFSTR("ScaleScalar"));

          objc_msgSend(obj, "removeObjectForKey:", CFSTR("BiasScaleGroupData"));
          goto LABEL_520;
        }
        v40 = 13;
        goto LABEL_855;
      }
      if ((_DWORD)v40 == 25)
      {
        v47 = v499;
        v499 = CFSTR("Neuron");

        objc_msgSend(obj, "setObject:forKeyedSubscript:", CFSTR("ClampedReLU"), CFSTR("Type"));
        _S0 = *((_DWORD *)this + 72);
        __asm { FCVT            H0, S0 }
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithShort:", (__int16)_S0);
        v53 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(obj, "setObject:forKeyedSubscript:", v53, CFSTR("ReluMin"));

        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithShort:", 31743);
        v54 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(obj, "setObject:forKeyedSubscript:", v54, CFSTR("ReluMax"));

        goto LABEL_520;
      }
    }
LABEL_327:
    if ((int)v40 <= 26)
    {
      switch((_DWORD)v40)
      {
        case 0xA:
          std::string::basic_string[abi:ne180100]<0>(&v519, "experimental.ane.enable_scenenet_optimizations");
          std::string::basic_string[abi:ne180100]<0>(&__str, "0");
          Espresso::map_const_get<std::map<std::string,std::string>>(v8 + 472, (uint64_t)&v519, (uint64_t)&__str, &v532);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
          if (SBYTE7(v520) < 0)
            operator delete((void *)v519);
          std::string::basic_string[abi:ne180100]<0>(&v519, "allowSoftmaxApproximation");
          std::string::basic_string[abi:ne180100]<0>(&__str, "0");
          Espresso::map_const_get<std::map<std::string,std::string>>(v8 + 472, (uint64_t)&v519, (uint64_t)&__str, &v551);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
          if (SBYTE7(v520) < 0)
            operator delete((void *)v519);
          if (std::operator!=[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v532, "1")
            && std::operator!=[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v551, "1"))
          {
            Espresso::throw_exception_selector<Espresso::not_implemented_error,int &>("elementwise operation not supported %d", *((unsigned int *)v479 + 70));
          }
          Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v519, (id *)a3);
          if (*((float *)v479 + 74) != 0.0)
          {
            Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&__str.__r_.__value_.__l.__data_, (id *)a3);
            std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("_eps", (const void **)a3, &v530);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__str.__r_.__value_.__l.__data_);
            __str = v530;
            v235 = (void *)objc_opt_new();
            v236 = v549;
            v549 = CFSTR("GOC");

            _S0 = *((_DWORD *)v479 + 74);
            __asm { FCVT            H0, S0 }
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithShort:", (__int16)_S0);
            v238 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v235, "setObject:forKeyedSubscript:", v238, CFSTR("BiasScalar"));

            objc_storeStrong(v550, v235);
            Espresso::ANECompilerEngine::compiler::add_unit(v481, (const Espresso::ANECompilerEngine::compiler::unit_t *)&__str);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v530, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
            else
              v530 = __str;
            std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>((std::vector<std::string> *)((char *)&__p + 8), &v530, (__int128 *)&v531, 1uLL);
            if (SHIBYTE(v530.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v530.__r_.__value_.__l.__data_);

            Espresso::ANECompilerEngine::compiler::unit_t::~unit_t((id *)&__str.__r_.__value_.__l.__data_);
            v41 = v481;
          }
          if (!*((_BYTE *)v479 + 616))
            Espresso::throw_exception_selector<Espresso::invalid_state_error,int &>("elementwise inverse only supported for softmax on this arch", *((unsigned int *)v479 + 70));
          if (v490 == v489)
            std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
          Espresso::ANECompilerEngine::ane_kernel::add_softmax_inverse_units_extended_lut((Espresso::ANECompilerEngine::elementwise_kernel *)((char *)v479 + 336), v41, *((int *)v489 + 2), *((_QWORD *)v479 + 78), (id *)&v519);
          Espresso::ANECompilerEngine::compiler::unit_t::~unit_t((id *)&v519);
          if (SHIBYTE(v551.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v551.__r_.__value_.__l.__data_);
          break;
        case 0xC:
          std::string::basic_string[abi:ne180100]<0>(&v519, "experimental.ane.enable_rsqrt");
          std::string::basic_string[abi:ne180100]<0>(&__str, "0");
          Espresso::map_const_get<std::map<std::string,std::string>>(v8 + 472, (uint64_t)&v519, (uint64_t)&__str, &v532);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
          if (SBYTE7(v520) < 0)
            operator delete((void *)v519);
          if (std::operator!=[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v532, "1"))
            Espresso::throw_exception_selector<Espresso::not_implemented_error,int &>("elementwise operation not supported %d", *((unsigned int *)v479 + 70));
          Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v519, (id *)a3);
          if (*((float *)v479 + 74) != 0.0)
          {
            Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&__str.__r_.__value_.__l.__data_, (id *)a3);
            std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("_eps", (const void **)a3, &v551);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__str.__r_.__value_.__l.__data_);
            __str = v551;
            v229 = (void *)objc_opt_new();
            v230 = v549;
            v549 = CFSTR("GOC");

            _S0 = *((_DWORD *)v479 + 74);
            __asm { FCVT            H0, S0 }
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithShort:", (__int16)_S0);
            v232 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v229, "setObject:forKeyedSubscript:", v232, CFSTR("BiasScalar"));

            objc_storeStrong(v550, v229);
            Espresso::ANECompilerEngine::compiler::add_unit(v481, (const Espresso::ANECompilerEngine::compiler::unit_t *)&__str);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v551, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
            else
              v551 = __str;
            std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>((std::vector<std::string> *)((char *)&__p + 8), &v551, &v552, 1uLL);
            if (SHIBYTE(v551.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v551.__r_.__value_.__l.__data_);

            Espresso::ANECompilerEngine::compiler::unit_t::~unit_t((id *)&__str.__r_.__value_.__l.__data_);
            v41 = v481;
          }
          if (v490 == v489)
            std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
          v228.i32[0] = *((_DWORD *)v479 + 74);
          Espresso::ANECompilerEngine::ane_kernel::add_high_precision_rsqrt_units_extended_lut((Espresso::ANECompilerEngine::elementwise_kernel *)((char *)v479 + 336), v41, (id *)&v519, *((unsigned int *)v489 + 2), v228);
          Espresso::ANECompilerEngine::compiler::unit_t::~unit_t((id *)&v519);
          break;
        case 0x18:
          objc_msgSend(obj, "setObject:forKeyedSubscript:", CFSTR("Abs"), CFSTR("Type"));
          v226 = v499;
          v499 = CFSTR("ElementWise");

          goto LABEL_520;
        default:
          goto LABEL_855;
      }
      if (SHIBYTE(v532.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v532.__r_.__value_.__l.__data_);
      goto LABEL_690;
    }
    switch((_DWORD)v40)
    {
      case 0x1B:
        std::string::basic_string[abi:ne180100]<0>(&__str, "experimental.ane.enable_scenenet_optimizations");
        std::string::basic_string[abi:ne180100]<0>(&v532, "0");
        Espresso::map_const_get<std::map<std::string,std::string>>(v8 + 472, (uint64_t)&__str, (uint64_t)&v532, (std::string *)&v519);
        if (SHIBYTE(v532.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v532.__r_.__value_.__l.__data_);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        std::string::basic_string[abi:ne180100]<0>(&v532, "allowSoftmaxApproximation");
        std::string::basic_string[abi:ne180100]<0>(&v551, "0");
        Espresso::map_const_get<std::map<std::string,std::string>>(v8 + 472, (uint64_t)&v532, (uint64_t)&v551, &__str);
        if (SHIBYTE(v551.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v551.__r_.__value_.__l.__data_);
        if (SHIBYTE(v532.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v532.__r_.__value_.__l.__data_);
        if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v519, "1")
          || std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&__str, "1"))
        {
          Espresso::ANECompilerEngine::ane_kernel::add_softmax_exp_units((uint64_t)v479 + 336, (uint64_t)v481, (id *)a3);
          v239 = 0;
        }
        else
        {
          v442 = v499;
          v499 = CFSTR("NeuronCustom");

          v444 = (void *)objc_claimAutoreleasedReturnValue();
          v445 = objc_msgSend(v444, "mutableCopy");

          v239 = 1;
          obj = (id)v445;
        }
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        if (SBYTE7(v520) < 0)
          operator delete((void *)v519);
        if ((v239 & 1) != 0)
          goto LABEL_520;
        goto LABEL_690;
      case 0x26:
        v233 = v499;
        v499 = CFSTR("NeuronCustom");

        Espresso::ANECompilerEngine::generate_custom_neuron_params(1, (uint64_t)&__block_literal_global_5183, 0.00001, 1.0, 0.0, 1.0, 0.0, 1.0);
        v234 = (void *)objc_claimAutoreleasedReturnValue();

        obj = v234;
        objc_storeStrong(v500, v234);
        goto LABEL_521;
      case 0x70:
        objc_msgSend(obj, "setObject:forKeyedSubscript:", CFSTR("EqualZero"), CFSTR("Type"));
        v227 = v499;
        v499 = CFSTR("ElementWise");

        goto LABEL_520;
    }
LABEL_855:
    Espresso::throw_exception_selector<Espresso::not_implemented_error,int &>("elementwise operation not supported %d", v40);
  }
  v551.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E2DB15B0;
  *(_QWORD *)&v552 = &v551;
  v38 = (int *)((char *)this + 280);
  Espresso::ANECompilerEngine::elementwise_kernel::elementwise_kernel_valid_and_fix_p((uint64_t)this, &v489, (uint64_t)this + 280, (uint64_t)&v551, 0, (uint64_t)&v508);
  v39 = *((unsigned int *)this + 70);
  if ((int)v39 <= 28)
  {
    if ((int)v39 > 7)
    {
      if ((v39 - 22) < 2)
      {
        v76 = 0;
        v77 = 0;
        v78 = (uint64_t **)((char *)v481 + 272);
        v79 = 1;
        do
        {
          v80 = v79;
          v81 = (std::__shared_weak_count *)v509;
          v486[0] = v508;
          v486[1] = v509;
          if (v509)
          {
            v82 = (unint64_t *)(v509 + 8);
            do
              v83 = __ldxr(v82);
            while (__stxr(v83 + 1, v82));
          }
          Espresso::ANECompilerEngine::get_constant_input(&v532, v486, *((_QWORD *)v482 + 6), v76);
          if (v81)
          {
            v84 = (unint64_t *)&v81->__shared_owners_;
            do
              v85 = __ldaxr(v84);
            while (__stlxr(v85 - 1, v84));
            if (!v85)
            {
              ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
              std::__shared_weak_count::__release_weak(v81);
            }
          }
          if (v532.__r_.__value_.__r.__words[0])
          {
            v86 = 0;
            v87 = *(int *)(v532.__r_.__value_.__r.__words[0] + 8);
            do
            {
              v87 *= *(int *)(v532.__r_.__value_.__r.__words[0] + 12 + v86);
              v86 += 4;
            }
            while (v86 != 12);
            if (v87 == 1)
            {
              v88 = 0;
              v89 = *(int **)(v532.__r_.__value_.__r.__words[0] + 24);
              v90 = *v89;
              for (i = *v38 == 23; ; i &= *(float *)&v89[v88++] == 0.0)
              {
                v92 = 0;
                v93 = *(int *)(v532.__r_.__value_.__r.__words[0] + 8);
                do
                {
                  v93 *= *(int *)(v532.__r_.__value_.__r.__words[0] + 12 + v92);
                  v92 += 4;
                }
                while (v92 != 12);
                if (v88 >= v93)
                  break;
              }
              if ((i & 1) != 0)
              {
                v95 = v499;
                v499 = CFSTR("Neuron");

                objc_msgSend(obj, "setObject:forKeyedSubscript:", CFSTR("ReLU"), CFSTR("Type"));
                std::__tree<std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>>>::__erase_unique<std::string>(v78, (_QWORD *)(*((_QWORD *)v482 + 6) + 24 * v76));
                end = v495.__end_;
                v97 = &v495.__begin_[v76];
                v98 = v97 + 1;
                if (&v97[1] != v495.__end_)
                {
                  do
                  {
                    if (SHIBYTE(v97->__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v97->__r_.__value_.__l.__data_);
                    *(_OWORD *)&v97->__r_.__value_.__l.__data_ = *(_OWORD *)&v97[1].__r_.__value_.__l.__data_;
                    v97->__r_.__value_.__r.__words[2] = v97[1].__r_.__value_.__r.__words[2];
                    *((_BYTE *)&v97[1].__r_.__value_.__s + 23) = 0;
                    v99 = v97 + 2;
                    v97[1].__r_.__value_.__s.__data_[0] = 0;
                    ++v97;
                  }
                  while (v99 != end);
                  v98 = v495.__end_;
                }
                while (v98 != v97)
                {
                  if (SHIBYTE(v98[-1].__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v98[-1].__r_.__value_.__l.__data_);
                  --v98;
                }
                v495.__end_ = v97;
                v77 = 1;
                v94 = 4;
                n = this;
              }
              else
              {
                *(_QWORD *)&v519 = *((_QWORD *)v482 + 6) + 24 * (v76 ^ 1);
                v100 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v508 + 136, (unsigned __int8 *)v519, (__int128 **)&v519);
                v102 = *((_QWORD *)v100 + 6);
                v530.__r_.__value_.__r.__words[0] = (std::string::size_type)v101;
                v530.__r_.__value_.__l.__size_ = v102;
                if (v102)
                {
                  v103 = (unint64_t *)(v102 + 8);
                  do
                    v104 = __ldxr(v103);
                  while (__stxr(v104 + 1, v103));
                }
                std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v517, v101[44], v101[43], v101[41], v101[40]);
                v105 = 0;
                v106 = v517;
                v107 = *(int *)(v517 + 8);
                while (1)
                {
                  v108 = 12;
                  v109 = v107;
                  do
                  {
                    v109 *= *(int *)(v106 + v108);
                    v108 += 4;
                  }
                  while (v108 != 24);
                  if (v105 >= v109)
                    break;
                  *(_DWORD *)(*(_QWORD *)(v106 + 24) + 4 * v105++) = v90;
                }
                *(_QWORD *)&v519 = *((_QWORD *)v482 + 6) + 24 * v76;
                v110 = std::__tree<std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v78, (_QWORD *)v519, (__int128 **)&v519);
                if (v110[79] < 0)
                  std::string::__init_copy_ctor_external(&__str, *((const std::string::value_type **)v110 + 7), *((_QWORD *)v110 + 8));
                else
                  __str = *(std::string *)(v110 + 56);
                if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                {
                  std::string::__init_copy_ctor_external((std::string *)&v519, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
                }
                else
                {
                  v519 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
                  *(_QWORD *)&v520 = *((_QWORD *)&__str.__r_.__value_.__l + 2);
                }
                *((_QWORD *)&v520 + 1) = v106;
                v521 = (unint64_t *)v518;
                if (v518)
                {
                  v111 = (unint64_t *)&v518->__shared_owners_;
                  do
                    v112 = __ldxr(v111);
                  while (__stxr(v112 + 1, v111));
                }
                v516[0] = (__int128 *)(*((_QWORD *)v482 + 6) + 24 * v76);
                v113 = std::__tree<std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v78, (_QWORD *)v516[0], v516);
                v114 = (void **)(v113 + 56);
                if (v113[79] < 0)
                  operator delete(*v114);
                *(_OWORD *)v114 = v519;
                *((_QWORD *)v113 + 9) = v520;
                BYTE7(v520) = 0;
                LOBYTE(v519) = 0;
                std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)(v113 + 80), (__int128 *)((char *)&v520 + 8));
                v115 = (std::__shared_weak_count *)v521;
                if (v521)
                {
                  v116 = v521 + 1;
                  do
                    v117 = __ldaxr(v116);
                  while (__stlxr(v117 - 1, v116));
                  if (!v117)
                  {
                    ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
                    std::__shared_weak_count::__release_weak(v115);
                  }
                }
                if (SBYTE7(v520) < 0)
                  operator delete((void *)v519);
                if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__str.__r_.__value_.__l.__data_);
                v118 = v518;
                if (v518)
                {
                  v119 = (unint64_t *)&v518->__shared_owners_;
                  do
                    v120 = __ldaxr(v119);
                  while (__stlxr(v120 - 1, v119));
                  if (!v120)
                  {
                    ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
                    std::__shared_weak_count::__release_weak(v118);
                  }
                }
                size = (std::__shared_weak_count *)v530.__r_.__value_.__l.__size_;
                if (v530.__r_.__value_.__l.__size_)
                {
                  v122 = (unint64_t *)(v530.__r_.__value_.__l.__size_ + 8);
                  do
                    v123 = __ldaxr(v122);
                  while (__stlxr(v123 - 1, v122));
                  if (!v123)
                  {
                    ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
                    std::__shared_weak_count::__release_weak(size);
                  }
                }
                v94 = 4;
              }
            }
            else
            {
              v94 = 0;
            }
          }
          else
          {
            v94 = 6;
          }
          v124 = (std::__shared_weak_count *)v532.__r_.__value_.__l.__size_;
          if (v532.__r_.__value_.__l.__size_)
          {
            v125 = (unint64_t *)(v532.__r_.__value_.__l.__size_ + 8);
            do
              v126 = __ldaxr(v125);
            while (__stlxr(v126 - 1, v125));
            if (!v126)
            {
              ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
              std::__shared_weak_count::__release_weak(v124);
            }
          }
          if (v94 != 6 && v94)
            break;
          v79 = 0;
          v76 = 1;
        }
        while ((v80 & 1) != 0);
        if ((v77 & 1) != 0)
          goto LABEL_515;
        if (*v38 == 22)
        {
          objc_msgSend(obj, "setObject:forKeyedSubscript:", CFSTR("Min"), CFSTR("Type"));
        }
        else
        {
          if (*v38 != 23)
          {
LABEL_515:
            v296 = (std::string *)v552;
            if ((std::string *)v552 == &v551)
            {
              v297 = 4;
              v296 = &v551;
              goto LABEL_519;
            }
            if ((_QWORD)v552)
            {
              v297 = 5;
LABEL_519:
              (*(void (**)(void))(v296->__r_.__value_.__r.__words[0] + 8 * v297))();
            }
LABEL_520:
            objc_storeStrong(v500, obj);
LABEL_521:
            v298 = v502;
            if ((unint64_t)v502 >= v503)
            {
              v300 = 0x8E38E38E38E38E39 * (((uint64_t)v502 - v501) >> 4);
              if (v300 + 1 > 0x1C71C71C71C71C7)
                std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
              v301 = 0x1C71C71C71C71C72 * ((uint64_t)(v503 - v501) >> 4);
              if (v301 <= v300 + 1)
                v301 = v300 + 1;
              if (0x8E38E38E38E38E39 * ((uint64_t)(v503 - v501) >> 4) >= 0xE38E38E38E38E3)
                v302 = 0x1C71C71C71C71C7;
              else
                v302 = v301;
              v521 = &v503;
              if (v302)
                v302 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v302);
              else
                v303 = 0;
              *(_QWORD *)&v519 = v302;
              *((_QWORD *)&v519 + 1) = v302 + 144 * v300;
              *(_QWORD *)&v520 = *((_QWORD *)&v519 + 1);
              *((_QWORD *)&v520 + 1) = v302 + 144 * v303;
              std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(*((std::string **)&v519 + 1), (uint64_t)v492);
              *(_QWORD *)&v520 = v520 + 144;
              std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v501, &v519);
              v299 = v502;
              std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&v519);
            }
            else
            {
              std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v502, (uint64_t)v492);
              v299 = v298 + 6;
            }
            v502 = v299;
            if (*((_DWORD *)n + 71))
              Espresso::throw_exception_selector<Espresso::not_implemented_error>("elementwise with fused relu not supported");
            v485 = (std::__shared_weak_count *)v509;
            if (v509)
            {
              v304 = (unint64_t *)(v509 + 8);
              do
                v305 = __ldxr(v304);
              while (__stxr(v305 + 1, v304));
            }
            v306 = v504;
            v484 = v505;
            if (v505)
            {
              v307 = (unint64_t *)&v505->__shared_owners_;
              do
                v308 = __ldxr(v307);
              while (__stxr(v308 + 1, v307));
            }
            Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t((Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)&v519);
            v529[0] = 0;
            v528 = 0;
            v529[1] = (id)0x100000000;
            v309 = *((_QWORD *)n + 50);
            v310 = (std::__shared_weak_count *)*((_QWORD *)n + 51);
            v530.__r_.__value_.__r.__words[0] = v309;
            v530.__r_.__value_.__l.__size_ = (std::string::size_type)v310;
            if (v310)
            {
              v311 = (unint64_t *)&v310->__shared_owners_;
              do
                v312 = __ldxr(v311);
              while (__stxr(v312 + 1, v311));
            }
            if (!v309
              || *(_BYTE *)((*(uint64_t (**)(Espresso::ANECompilerEngine::elementwise_kernel *))(*(_QWORD *)n + 344))(n)
                          + 40))
            {
              goto LABEL_670;
            }
            v313 = *(float *)(v306 + 112);
            v517 = v309;
            v518 = v310;
            if (v310)
            {
              v314 = (unint64_t *)&v310->__shared_owners_;
              do
                v315 = __ldxr(v314);
              while (__stxr(v315 + 1, v314));
            }
            v316 = (__int128 *)*((_QWORD *)n + 53);
            v516[0] = *((__int128 **)n + 52);
            v516[1] = v316;
            if (v316)
            {
              v317 = (unint64_t *)v316 + 1;
              do
                v318 = __ldxr(v317);
              while (__stxr(v318 + 1, v317));
            }
            Espresso::ane_style_post_scale_bias((uint64_t)&v517, (uint64_t *)v516, (uint64_t)&v551, v313);
            if (v316)
            {
              v319 = (unint64_t *)v316 + 1;
              do
                v320 = __ldaxr(v319);
              while (__stlxr(v320 - 1, v319));
              if (!v320)
              {
                (*(void (**)(__int128 *))(*(_QWORD *)v316 + 16))(v316);
                std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v316);
              }
            }
            v321 = v518;
            if (v518)
            {
              v322 = (unint64_t *)&v518->__shared_owners_;
              do
                v323 = __ldaxr(v322);
              while (__stlxr(v323 - 1, v322));
              if (!v323)
              {
                ((void (*)(std::__shared_weak_count *))v321->__on_zero_shared)(v321);
                std::__shared_weak_count::__release_weak(v321);
              }
            }
            v324 = v530.__r_.__value_.__r.__words[0];
            v325 = *(unsigned int *)(v530.__r_.__value_.__r.__words[0] + 8);
            std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v514, 2 * v325, 1, 1, 1);
            v326 = (int)v325;
            v513 = 0uLL;
            v327 = v325;
            v328 = *((_QWORD *)n + 52);
            if (v328)
              v327 = *(_DWORD *)(v328 + 8);
            if (!*((_BYTE *)v481 + 384))
            {
              Espresso::blob<unsigned char,1>::make(&v532, 4 * v325);
              v452 = *(int **)(v532.__r_.__value_.__r.__words[0] + 16);
              if ((int)v325 >= 1)
              {
                for (j = 0; j != v325; ++j)
                {
                  v454 = *(float *)(*(_QWORD *)(v324 + 16) + j * 4);
                  *(float *)&v455 = ldexp(1.0, -DWORD2(v552)) * v454;
                  v452[j] = v455;
                }
              }
              if ((_DWORD)v325)
              {
                v456 = *(_WORD **)(v514 + 16);
                do
                {
                  v457 = *v452++;
                  _S0 = v457;
                  __asm { FCVT            H0, S0 }
                  *v456++ = _S0;
                  --v326;
                }
                while (v326);
              }
              v511 = 0;
              v512 = 0;
              if (*((_QWORD *)v479 + 52))
              {
                Espresso::blob<unsigned char,1>::make(&__str, 4 * v327);
                std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)&v511, (__int128 *)&__str);
                std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&__str);
                Espresso::blob<unsigned char,1>::make(&__str, 2 * v327);
                std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)&v513, (__int128 *)&__str);
                std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&__str);
                v461 = *(int **)(v511 + 16);
                if (v327 >= 1)
                {
                  for (k = 0; k != v327; ++k)
                  {
                    if ((int)v325 - 1 >= (int)k)
                      v463 = k;
                    else
                      v463 = v325 - 1;
                    *(float *)&v464 = *(float *)(*(_QWORD *)(v551.__r_.__value_.__r.__words[2] + 16) + 4 * k)
                                    * *(float *)(*(_QWORD *)(v551.__r_.__value_.__r.__words[0] + 16) + 4 * v463);
                    v461[k] = v464;
                    v465 = DWORD2(v552);
                    v466 = HIDWORD(v552);
                    *(float *)&v467 = ldexp(1.0, HIDWORD(v552) - DWORD2(v552)) * *(float *)&v464;
                    v461[k] = v467;
                    v470 = ldexp(1.0, v465 - v466) * *(float *)&v467;
                    if (v470 < -127.0 || v470 > 255.0)
                    {
                      Espresso::espresso_os_log_subsystem(v468, v469);
                      v472 = objc_claimAutoreleasedReturnValue();
                      if (os_log_type_enabled(v472, OS_LOG_TYPE_ERROR))
                      {
                        v473 = *(float *)&v461[k];
                        LODWORD(__str.__r_.__value_.__l.__data_) = 134218752;
                        *(double *)((char *)__str.__r_.__value_.__r.__words + 4) = v470;
                        WORD2(__str.__r_.__value_.__r.__words[1]) = 1024;
                        *(_DWORD *)((char *)&__str.__r_.__value_.__r.__words[1] + 6) = HIDWORD(v552);
                        WORD1(__str.__r_.__value_.__r.__words[2]) = 1024;
                        HIDWORD(__str.__r_.__value_.__r.__words[2]) = DWORD2(v552);
                        LOWORD(v543) = 2048;
                        *(double *)((char *)&v543 + 2) = v473;
                        _os_log_error_impl(&dword_190DAF000, v472, OS_LOG_TYPE_ERROR, "[ANEC::add_ane_scale_bias_unit] Shifted bias overflowing shifted_b=%f acc_bias_shift=%d post_right_shift=%d anebias=%f", (uint8_t *)&__str, 0x22u);
                      }

                    }
                  }
                }
                if (v327)
                {
                  v474 = v327;
                  v475 = *(_WORD **)(v513 + 16);
                  do
                  {
                    v476 = *v461++;
                    _S0 = v476;
                    __asm { FCVT            H0, S0 }
                    *v475++ = _S0;
                    --v474;
                  }
                  while (v474);
                }
              }
              exception = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
              Espresso::not_implemented_error::not_implemented_error(exception);
            }
            v480 = HIDWORD(v552);
            if ((_DWORD)v325)
            {
              v329 = *(int **)(v551.__r_.__value_.__r.__words[0] + 16);
              v330 = *(_WORD **)(v514 + 16);
              do
              {
                v331 = *v329++;
                _S0 = v331;
                __asm { FCVT            H0, S0 }
                *v330++ = _S0;
                --v326;
              }
              while (v326);
            }
            if (v328)
            {
              std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&__str, 2 * v327, 1, 1, 1);
              v333 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
              *(_OWORD *)&__str.__r_.__value_.__l.__data_ = 0uLL;
              v334 = (std::__shared_weak_count *)*((_QWORD *)&v513 + 1);
              v513 = v333;
              if (v334)
              {
                v335 = (unint64_t *)&v334->__shared_owners_;
                do
                  v336 = __ldaxr(v335);
                while (__stlxr(v336 - 1, v335));
                if (!v336)
                {
                  ((void (*)(std::__shared_weak_count *))v334->__on_zero_shared)(v334);
                  std::__shared_weak_count::__release_weak(v334);
                }
              }
              v337 = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
              if (__str.__r_.__value_.__l.__size_)
              {
                v338 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
                do
                  v339 = __ldaxr(v338);
                while (__stlxr(v339 - 1, v338));
                if (!v339)
                {
                  ((void (*)(std::__shared_weak_count *))v337->__on_zero_shared)(v337);
                  std::__shared_weak_count::__release_weak(v337);
                }
              }
              if (v327)
              {
                v340 = v327;
                v341 = *(int **)(v551.__r_.__value_.__r.__words[2] + 16);
                v342 = *(_WORD **)(v513 + 16);
                do
                {
                  v343 = *v341++;
                  _S0 = v343;
                  __asm { FCVT            H0, S0 }
                  *v342++ = _S0;
                  --v340;
                }
                while (v340);
              }
            }
            v345 = *((unsigned __int8 *)v481 + 552);
            v346 = (Espresso::ANECompilerEngine::compiler *)((char *)v481 + 128);
            v347 = v514;
            v348 = v515;
            v511 = v514;
            v512 = v515;
            if (v515)
            {
              v349 = (unint64_t *)&v515->__shared_owners_;
              do
                v350 = __ldxr(v349);
              while (__stxr(v350 + 1, v349));
            }
            v351 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v346, *(const unsigned __int8 **)(v347 + 16), *(int *)(v347 + 8));
            if (v348)
            {
              v352 = (unint64_t *)&v348->__shared_owners_;
              do
                v353 = __ldaxr(v352);
              while (__stlxr(v353 - 1, v352));
              if (!v353)
              {
                ((void (*)(std::__shared_weak_count *))v348->__on_zero_shared)(v348);
                std::__shared_weak_count::__release_weak(v348);
              }
            }
            v354 = (void *)objc_opt_new();
            if (*((_BYTE *)v481 + 121))
            {
              v355 = *(id *)(v501 + 128);

              v354 = v355;
            }
            v356 = (void *)objc_opt_new();
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v325);
            v357 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v356, "setObject:forKeyedSubscript:", v357, CFSTR("ScaleCount"));

            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v351);
            v358 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v356, "setObject:forKeyedSubscript:", v358, CFSTR("ScaleOffset"));

            v359 = (void *)MEMORY[0x1E0CB37E8];
            if (v345)
              weights_file_index = 0;
            else
            objc_msgSend(v359, "numberWithUnsignedLong:", weights_file_index);
            v361 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v356, "setObject:forKeyedSubscript:", v361, CFSTR("ScaleIndex"));

            objc_msgSend(v356, "setObject:forKeyedSubscript:", CFSTR("Float16"), CFSTR("ScaleType"));
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", DWORD2(v552));
            v362 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v354, "setObject:forKeyedSubscript:", v362, CFSTR("ScaleShift"));

            if (*((_QWORD *)n + 52))
            {
              v363 = v513;
              v510 = v513;
              if (*((_QWORD *)&v513 + 1))
              {
                v364 = (unint64_t *)(*((_QWORD *)&v513 + 1) + 8);
                do
                  v365 = __ldxr(v364);
                while (__stxr(v365 + 1, v364));
              }
              v366 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v346, *(const unsigned __int8 **)(v363 + 16), *(int *)(v363 + 8));
              if (*((_QWORD *)&v363 + 1))
              {
                v367 = (unint64_t *)(*((_QWORD *)&v363 + 1) + 8);
                do
                  v368 = __ldaxr(v367);
                while (__stlxr(v368 - 1, v367));
                if (!v368)
                {
                  (*(void (**)(_QWORD))(**((_QWORD **)&v363 + 1) + 16))(*((_QWORD *)&v363 + 1));
                  std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v363 + 1));
                }
              }
              objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *(unsigned int *)(*((_QWORD *)n + 52) + 8));
              v369 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v356, "setObject:forKeyedSubscript:", v369, CFSTR("BiasCount"));

              objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v366);
              v370 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v356, "setObject:forKeyedSubscript:", v370, CFSTR("BiasOffset"));

              v371 = (void *)MEMORY[0x1E0CB37E8];
              if (v345)
                v372 = 0;
              else
              objc_msgSend(v371, "numberWithUnsignedLong:", v372);
              v373 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v356, "setObject:forKeyedSubscript:", v373, CFSTR("BiasIndex"));

              objc_msgSend(v356, "setObject:forKeyedSubscript:", CFSTR("Float16"), CFSTR("BiasType"));
              objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v480);
              v374 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v354, "setObject:forKeyedSubscript:", v374, CFSTR("BiasShift"));

            }
            objc_msgSend(v354, "setObject:forKeyedSubscript:", v356, CFSTR("BiasScaleGroupData"));
            Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&__str.__r_.__value_.__l.__data_, (id *)v482);
            v375 = v502;
            if (v502 == (std::string *)v501)
            {
LABEL_631:
              v386 = v549;
              v549 = CFSTR("GOC");

              objc_storeStrong(v550, v354);
              if (!*((_BYTE *)v481 + 121))
              {
                v387 = v502;
                if ((unint64_t)v502 >= v503)
                {
                  v389 = 0x8E38E38E38E38E39 * (((uint64_t)v502 - v501) >> 4);
                  if (v389 + 1 > 0x1C71C71C71C71C7)
                    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                  v390 = 0x1C71C71C71C71C72 * ((uint64_t)(v503 - v501) >> 4);
                  if (v390 <= v389 + 1)
                    v390 = v389 + 1;
                  if (0x8E38E38E38E38E39 * ((uint64_t)(v503 - v501) >> 4) >= 0xE38E38E38E38E3)
                    v391 = 0x1C71C71C71C71C7;
                  else
                    v391 = v390;
                  *((_QWORD *)&v533 + 1) = &v503;
                  if (v391)
                    v391 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v391);
                  else
                    v392 = 0;
                  v532.__r_.__value_.__r.__words[0] = v391;
                  v532.__r_.__value_.__l.__size_ = v391 + 144 * v389;
                  v532.__r_.__value_.__r.__words[2] = v532.__r_.__value_.__l.__size_;
                  *(_QWORD *)&v533 = v391 + 144 * v392;
                  std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)v532.__r_.__value_.__l.__size_, (uint64_t)&__str);
                  v532.__r_.__value_.__r.__words[2] += 144;
                  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v501, &v532);
                  v388 = v502;
                  std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&v532);
                }
                else
                {
                  std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v502, (uint64_t)&__str);
                  v388 = v387 + 6;
                }
                v502 = v388;
              }

              if (v547 < 0)
                operator delete(v546);
              v532.__r_.__value_.__r.__words[0] = (std::string::size_type)&v545;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v532);
              v532.__r_.__value_.__r.__words[0] = (std::string::size_type)&v543;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v532);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__str.__r_.__value_.__l.__data_);

              v393 = (std::__shared_weak_count *)*((_QWORD *)&v513 + 1);
              if (*((_QWORD *)&v513 + 1))
              {
                v394 = (unint64_t *)(*((_QWORD *)&v513 + 1) + 8);
                do
                  v395 = __ldaxr(v394);
                while (__stlxr(v395 - 1, v394));
                if (!v395)
                {
                  ((void (*)(std::__shared_weak_count *))v393->__on_zero_shared)(v393);
                  std::__shared_weak_count::__release_weak(v393);
                }
              }
              v396 = v515;
              if (v515)
              {
                v397 = (unint64_t *)&v515->__shared_owners_;
                do
                  v398 = __ldaxr(v397);
                while (__stlxr(v398 - 1, v397));
                if (!v398)
                {
                  ((void (*)(std::__shared_weak_count *))v396->__on_zero_shared)(v396);
                  std::__shared_weak_count::__release_weak(v396);
                }
              }
              v399 = (std::__shared_weak_count *)v552;
              if ((_QWORD)v552)
              {
                v400 = (unint64_t *)(v552 + 8);
                do
                  v401 = __ldaxr(v400);
                while (__stlxr(v401 - 1, v400));
                if (!v401)
                {
                  ((void (*)(std::__shared_weak_count *))v399->__on_zero_shared)(v399);
                  std::__shared_weak_count::__release_weak(v399);
                }
              }
              v402 = (std::__shared_weak_count *)v551.__r_.__value_.__l.__size_;
              if (v551.__r_.__value_.__l.__size_)
              {
                v403 = (unint64_t *)(v551.__r_.__value_.__l.__size_ + 8);
                do
                  v404 = __ldaxr(v403);
                while (__stlxr(v404 - 1, v403));
                if (!v404)
                {
                  ((void (*)(std::__shared_weak_count *))v402->__on_zero_shared)(v402);
                  std::__shared_weak_count::__release_weak(v402);
                }
              }
              v310 = (std::__shared_weak_count *)v530.__r_.__value_.__l.__size_;
LABEL_670:
              if (v310)
              {
                v405 = (unint64_t *)&v310->__shared_owners_;
                do
                  v406 = __ldaxr(v405);
                while (__stlxr(v406 - 1, v405));
                if (!v406)
                {
                  ((void (*)(std::__shared_weak_count *))v310->__on_zero_shared)(v310);
                  std::__shared_weak_count::__release_weak(v310);
                }
              }

              if (v526 < 0)
                operator delete(v525);
              __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p + 8;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
              __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v520 + 8;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
              if (SBYTE7(v520) < 0)
                operator delete((void *)v519);
              if (v484)
              {
                v407 = (unint64_t *)&v484->__shared_owners_;
                do
                  v408 = __ldaxr(v407);
                while (__stlxr(v408 - 1, v407));
                if (!v408)
                {
                  ((void (*)(std::__shared_weak_count *))v484->__on_zero_shared)(v484);
                  std::__shared_weak_count::__release_weak(v484);
                }
              }
              if (v485)
              {
                v409 = (unint64_t *)&v485->__shared_owners_;
                do
                  v410 = __ldaxr(v409);
                while (__stlxr(v410 - 1, v409));
                if (!v410)
                {
                  ((void (*)(std::__shared_weak_count *))v485->__on_zero_shared)(v485);
                  std::__shared_weak_count::__release_weak(v485);
                }
              }
              (*(void (**)(uint64_t, Espresso::ANECompilerEngine::compiler *, uint64_t *))(*((_QWORD *)n + 42)
                                                                                                  + 32))((uint64_t)n + 336, v481, &v501);
              goto LABEL_690;
            }
            v376 = v502 - 6;
            v377 = HIBYTE(v502[-6].__r_.__value_.__r.__words[2]);
            v378 = v377;
            v379 = v502[-6].__r_.__value_.__l.__size_;
            if ((v377 & 0x80u) == 0)
              v380 = HIBYTE(v502[-6].__r_.__value_.__r.__words[2]);
            else
              v380 = v502[-6].__r_.__value_.__l.__size_;
            v381 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v381 = __str.__r_.__value_.__l.__size_;
            if (v380 != v381)
              goto LABEL_625;
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v382 = &__str;
            else
              v382 = (std::string *)__str.__r_.__value_.__r.__words[0];
            if ((char)v377 < 0)
            {
              data = (const std::string::value_type *)v376->__r_.__value_.__r.__words[0];
              if (memcmp(v376->__r_.__value_.__l.__data_, v382, v502[-6].__r_.__value_.__l.__size_))
                goto LABEL_628;
            }
            else if ((_BYTE)v377)
            {
              v383 = v502 - 6;
              while (v383->__r_.__value_.__s.__data_[0] == v382->__r_.__value_.__s.__data_[0])
              {
                v383 = (std::string *)((char *)v383 + 1);
                v382 = (std::string *)((char *)v382 + 1);
                if (!--v377)
                  goto LABEL_624;
              }
              goto LABEL_625;
            }
LABEL_624:
            std::string::append(v375 - 6, "__@pre_scale_bias");
            v378 = HIBYTE(v375[-6].__r_.__value_.__r.__words[2]);
LABEL_625:
            if ((v378 & 0x80) == 0)
            {
              v385 = *(_OWORD *)&v376->__r_.__value_.__l.__data_;
              v532.__r_.__value_.__r.__words[2] = v375[-6].__r_.__value_.__r.__words[2];
              *(_OWORD *)&v532.__r_.__value_.__l.__data_ = v385;
              goto LABEL_629;
            }
            data = v375[-6].__r_.__value_.__l.__data_;
            v379 = v375[-6].__r_.__value_.__l.__size_;
LABEL_628:
            std::string::__init_copy_ctor_external(&v532, data, v379);
LABEL_629:
            std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v545, &v532, &v533, 1uLL);
            if (SHIBYTE(v532.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v532.__r_.__value_.__l.__data_);
            goto LABEL_631;
          }
          objc_msgSend(obj, "setObject:forKeyedSubscript:", CFSTR("Max"), CFSTR("Type"));
        }
        goto LABEL_513;
      }
      if ((_DWORD)v39 != 8)
      {
        if ((_DWORD)v39 != 9)
LABEL_856:
          Espresso::throw_exception_selector<Espresso::not_implemented_error,int &>("elementwise operation not supported %d", v39);
        goto LABEL_59;
      }
    }
    else
    {
      if ((int)v39 <= 4)
      {
        if (!(_DWORD)v39)
        {
          objc_msgSend(obj, "setObject:forKeyedSubscript:", CFSTR("Add"), CFSTR("Type"));
LABEL_513:
          v70 = v499;
          v499 = CFSTR("ElementWise");
LABEL_514:

          goto LABEL_515;
        }
        if ((_DWORD)v39 != 1)
          goto LABEL_856;
LABEL_59:
        v63 = v495.__begin_;
        v64 = HIBYTE(v495.__begin_->__r_.__value_.__r.__words[2]);
        if ((v64 & 0x80u) == 0)
          v65 = HIBYTE(v495.__begin_->__r_.__value_.__r.__words[2]);
        else
          v65 = v495.__begin_->__r_.__value_.__l.__size_;
        v66 = HIBYTE(v495.__begin_[1].__r_.__value_.__r.__words[2]);
        v67 = (char)v66;
        if ((v66 & 0x80u) != 0)
          v66 = v495.__begin_[1].__r_.__value_.__l.__size_;
        if (v65 == v66)
        {
          if (v67 >= 0)
            v68 = v495.__begin_ + 1;
          else
            v68 = (std::vector<std::string>::pointer)v495.__begin_[1].__r_.__value_.__l.__data_;
          if ((v64 & 0x80) == 0)
          {
            if (*((_BYTE *)&v495.__begin_->__r_.__value_.__s + 23))
            {
              while (v63->__r_.__value_.__s.__data_[0] == v68->__r_.__value_.__s.__data_[0])
              {
                v63 = (std::vector<std::string>::pointer)((char *)v63 + 1);
                v68 = (std::vector<std::string>::pointer)((char *)v68 + 1);
                if (!--v64)
                  goto LABEL_245;
              }
              goto LABEL_244;
            }
LABEL_245:
            v182 = v495.__end_ - 1;
            if (SHIBYTE(v495.__end_[-1].__r_.__value_.__r.__words[2]) < 0)
              operator delete(v182->__r_.__value_.__l.__data_);
            v495.__end_ = v182;
            objc_msgSend(obj, "setObject:forKeyedSubscript:", CFSTR("Square"), CFSTR("Type"));
            goto LABEL_513;
          }
          if (!memcmp(v495.__begin_->__r_.__value_.__l.__data_, v68, v495.__begin_->__r_.__value_.__l.__size_))
            goto LABEL_245;
        }
LABEL_244:
        objc_msgSend(obj, "setObject:forKeyedSubscript:", CFSTR("Mult"), CFSTR("Type"));
        goto LABEL_513;
      }
      if ((_DWORD)v39 != 5)
      {
        if ((_DWORD)v39 != 7)
          goto LABEL_856;
        goto LABEL_59;
      }
    }
LABEL_73:
    v69 = v499;
    v499 = CFSTR("GOC");

    v70 = (id)objc_opt_new();
    objc_msgSend(obj, "setObject:forKeyedSubscript:", v70, CFSTR("BiasScaleGroupData"));
    p_size = (uint64_t *)&v532.__r_.__value_.__l.__size_;
    v488[0] = v8;
    v488[1] = (uint64_t)v9;
    v72 = (unint64_t *)&v9->__shared_owners_;
    do
      v73 = __ldxr(v72);
    while (__stxr(v73 + 1, v72));
    Espresso::ANECompilerEngine::get_constant_input(&v532, v488, *((_QWORD *)a3 + 6), 0);
    do
      v74 = __ldaxr(v72);
    while (__stlxr(v74 - 1, v72));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
    v75 = v532.__r_.__value_.__r.__words[0];
    if (v532.__r_.__value_.__r.__words[0])
    {
      *(_OWORD *)&v530.__r_.__value_.__l.__data_ = 0uLL;
      v517 = 0;
      v518 = 0;
    }
    else
    {
      v132 = (std::__shared_weak_count *)v509;
      v487[0] = v508;
      v487[1] = v509;
      if (v509)
      {
        v133 = (unint64_t *)(v509 + 8);
        do
          v134 = __ldxr(v133);
        while (__stxr(v134 + 1, v133));
      }
      Espresso::ANECompilerEngine::get_constant_input(&v530, v487, *((_QWORD *)a3 + 6), 1u);
      if (v132)
      {
        v135 = (unint64_t *)&v132->__shared_owners_;
        do
          v136 = __ldaxr(v135);
        while (__stlxr(v136 - 1, v135));
        if (!v136)
        {
          ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
          std::__shared_weak_count::__release_weak(v132);
        }
      }
      v75 = v532.__r_.__value_.__r.__words[0];
      v517 = 0;
      v518 = 0;
      if (!v532.__r_.__value_.__r.__words[0])
      {
        v75 = v530.__r_.__value_.__r.__words[0];
        n = v479;
        if (!v530.__r_.__value_.__r.__words[0])
          goto LABEL_255;
        std::__tree<std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>>>::__erase_unique<std::string>((uint64_t **)v481 + 34, (_QWORD *)(*((_QWORD *)a3 + 6) + 24));
        v183 = (std::string *)std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::string *,std::string *,std::string *>((__int128 *)&v495.__begin_[2], (__int128 *)v495.__end_, (uint64_t)&v495.__begin_[1]);
        for (m = v495.__end_; m != v183; --m)
        {
          if (SHIBYTE(m[-1].__r_.__value_.__r.__words[2]) < 0)
            operator delete(m[-1].__r_.__value_.__l.__data_);
        }
        v495.__end_ = v183;
        p_size = (uint64_t *)&v530.__r_.__value_.__l.__size_;
LABEL_189:
        std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v517, v75, *p_size);
        if (v517)
        {
          if (!*((_BYTE *)n + 392))
          {
            v141 = 0;
            v142 = *(int **)(v517 + 24);
            v143 = *(int *)(v517 + 8);
            do
            {
              v143 *= *(int *)(v517 + 12 + v141);
              v141 += 4;
            }
            while (v141 != 12);
            std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v519, 2 * v143, 1, 1, 1);
            v144 = v519;
            v145 = *(const unsigned __int8 **)(v519 + 16);
            if (v143)
            {
              v146 = *(_WORD **)(v519 + 16);
              do
              {
                v147 = *v142++;
                _S0 = v147;
                __asm { FCVT            H0, S0 }
                *v146++ = _S0;
                --v143;
              }
              while (v143);
            }
            v149 = (std::__shared_weak_count *)*((_QWORD *)&v519 + 1);
            v486[2] = v144;
            v486[3] = *((_QWORD *)&v519 + 1);
            if (*((_QWORD *)&v519 + 1))
            {
              v150 = (unint64_t *)(*((_QWORD *)&v519 + 1) + 8);
              do
                v151 = __ldxr(v150);
              while (__stxr(v151 + 1, v150));
              v145 = *(const unsigned __int8 **)(v144 + 16);
            }
            v152 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler *)((char *)v481 + 128), v145, *(int *)(v144 + 8));
            if (v149)
            {
              v153 = (unint64_t *)&v149->__shared_owners_;
              do
                v154 = __ldaxr(v153);
              while (__stlxr(v154 - 1, v153));
              if (!v154)
              {
                ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
                std::__shared_weak_count::__release_weak(v149);
              }
            }
            v155 = *v38;
            if (*v38 <= 28)
            {
              if (v155 == 5)
              {
                objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *(unsigned int *)(v504 + 16));
                v420 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v70, "setObject:forKeyedSubscript:", v420, CFSTR("BiasCount"));

                objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v152);
                v421 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v70, "setObject:forKeyedSubscript:", v421, CFSTR("BiasOffset"));

                v422 = (void *)MEMORY[0x1E0CB37E8];
                if (v478)
                  v423 = 0;
                else
                objc_msgSend(v422, "numberWithUnsignedLong:", v423);
                v446 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v70, "setObject:forKeyedSubscript:", v446, CFSTR("BiasIndex"));
                v447 = CFSTR("BiasType");
                goto LABEL_816;
              }
              if (v155 == 8)
              {
                objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *(unsigned int *)(v504 + 16));
                v156 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v70, "setObject:forKeyedSubscript:", v156, CFSTR("ScaleCount"));

                objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v152);
                v157 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v70, "setObject:forKeyedSubscript:", v157, CFSTR("ScaleOffset"));

                v158 = (void *)MEMORY[0x1E0CB37E8];
                if (v478)
                  v159 = 0;
                else
                objc_msgSend(v158, "numberWithUnsignedLong:", v159);
                v446 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v70, "setObject:forKeyedSubscript:", v446, CFSTR("ScaleIndex"));
                v447 = CFSTR("ScaleType");
LABEL_816:

                objc_msgSend(v70, "setObject:forKeyedSubscript:", CFSTR("Float16"), v447);
              }
LABEL_817:
              v448 = (std::__shared_weak_count *)*((_QWORD *)&v519 + 1);
              if (*((_QWORD *)&v519 + 1))
              {
                v449 = (unint64_t *)(*((_QWORD *)&v519 + 1) + 8);
                do
                  v450 = __ldaxr(v449);
                while (__stlxr(v450 - 1, v449));
                if (!v450)
                {
                  ((void (*)(std::__shared_weak_count *))v448->__on_zero_shared)(v448);
                  std::__shared_weak_count::__release_weak(v448);
                }
              }
LABEL_286:
              v206 = v518;
              if (v518)
              {
                v207 = (unint64_t *)&v518->__shared_owners_;
                do
                  v208 = __ldaxr(v207);
                while (__stlxr(v208 - 1, v207));
                if (!v208)
                {
                  ((void (*)(std::__shared_weak_count *))v206->__on_zero_shared)(v206);
                  std::__shared_weak_count::__release_weak(v206);
                }
              }
              v209 = (std::__shared_weak_count *)v530.__r_.__value_.__l.__size_;
              if (v530.__r_.__value_.__l.__size_)
              {
                v210 = (unint64_t *)(v530.__r_.__value_.__l.__size_ + 8);
                do
                  v211 = __ldaxr(v210);
                while (__stlxr(v211 - 1, v210));
                if (!v211)
                {
                  ((void (*)(std::__shared_weak_count *))v209->__on_zero_shared)(v209);
                  std::__shared_weak_count::__release_weak(v209);
                }
              }
              v212 = (std::__shared_weak_count *)v532.__r_.__value_.__l.__size_;
              if (v532.__r_.__value_.__l.__size_)
              {
                v213 = (unint64_t *)(v532.__r_.__value_.__l.__size_ + 8);
                do
                  v214 = __ldaxr(v213);
                while (__stlxr(v214 - 1, v213));
                if (!v214)
                {
                  ((void (*)(std::__shared_weak_count *))v212->__on_zero_shared)(v212);
                  std::__shared_weak_count::__release_weak(v212);
                }
              }
              goto LABEL_514;
            }
            if (v155 == 29)
            {
              _S0 = **(_DWORD **)(v517 + 24);
              __asm { FCVT            H0, S0 }
              objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithShort:", (__int16)_S0);
              v216 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(obj, "setObject:forKeyedSubscript:", v216, CFSTR("BiasScalar"));
            }
            else
            {
              if (v155 != 30)
                goto LABEL_817;
              _S0 = **(_DWORD **)(v517 + 24);
              __asm { FCVT            H0, S0 }
              objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithShort:", (__int16)_S0);
              v216 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(obj, "setObject:forKeyedSubscript:", v216, CFSTR("ScaleScalar"));
            }

            objc_msgSend(obj, "removeObjectForKey:", CFSTR("BiasScaleGroupData"));
            goto LABEL_817;
          }
LABEL_256:
          v185 = *((unsigned int *)n + 92);
          v186 = v508 + 136;
          __str.__r_.__value_.__r.__words[0] = *((_QWORD *)a3 + 6);
          v187 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v508 + 136, (unsigned __int8 *)__str.__r_.__value_.__l.__data_, (__int128 **)&__str);
          Espresso::abstract_blob_container::shape((char *)&v519, *((_QWORD *)v187 + 5));
          v516[0] = (__int128 *)(*((_QWORD *)a3 + 6) + 24);
          v188 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v186, (unsigned __int8 *)v516[0], v516);
          Espresso::abstract_blob_container::shape((char *)&__str, *((_QWORD *)v188 + 5));
          v189 = Espresso::layer_shape::total_dim((Espresso::layer_shape *)&v519);
          v190 = Espresso::layer_shape::total_dim((Espresso::layer_shape *)&__str);
          v191 = v495.__begin_;
          v192 = v495.__begin_ + 1;
          if (v189 <= v190)
          {
            v198 = v495.__end_;
            if (v192 != v495.__end_)
            {
              do
              {
                if (SHIBYTE(v191->__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v191->__r_.__value_.__l.__data_);
                *(_OWORD *)&v191->__r_.__value_.__l.__data_ = *(_OWORD *)&v191[1].__r_.__value_.__l.__data_;
                v191->__r_.__value_.__r.__words[2] = v191[1].__r_.__value_.__r.__words[2];
                *((_BYTE *)&v191[1].__r_.__value_.__s + 23) = 0;
                v199 = v191 + 2;
                v191[1].__r_.__value_.__s.__data_[0] = 0;
                ++v191;
              }
              while (v199 != v198);
              v192 = v495.__end_;
            }
            for (n = v479; v192 != v191; --v192)
            {
              if (SHIBYTE(v192[-1].__r_.__value_.__r.__words[2]) < 0)
                operator delete(v192[-1].__r_.__value_.__l.__data_);
            }
            v495.__end_ = v191;
          }
          else
          {
            v193 = v495.__begin_ + 2;
            v194 = v495.__end_;
            if (&v495.__begin_[2] != v495.__end_)
            {
              v195 = (char *)&v495.__begin_[1].__r_.__value_.__r.__words[2] + 7;
              do
              {
                v196 = (void **)(v195 - 23);
                if (*v195 < 0)
                  operator delete(*v196);
                *(_OWORD *)v196 = *(_OWORD *)(v195 + 1);
                v197 = *(_QWORD *)(v195 + 17);
                v195[1] = 0;
                *(_QWORD *)(v195 - 7) = v197;
                v192 = (std::string *)(v195 + 1);
                v195[24] = 0;
                v195 += 24;
              }
              while (&v192[1] != v194);
              v193 = v495.__end_;
            }
            while (v193 != v192)
            {
              if (SHIBYTE(v193[-1].__r_.__value_.__r.__words[2]) < 0)
                operator delete(v193[-1].__r_.__value_.__l.__data_);
              --v193;
            }
            v495.__end_ = v192;
            n = v479;
          }
          if (*v38 == 8)
          {
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *(unsigned int *)(v504 + 16));
            v204 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v70, "setObject:forKeyedSubscript:", v204, CFSTR("ScaleCount"));

            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v185);
            v205 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v70, "setObject:forKeyedSubscript:", v205, CFSTR("ScaleOffset"));

            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", *((_QWORD *)n + 47));
            v202 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v70, "setObject:forKeyedSubscript:", v202, CFSTR("ScaleIndex"));
            v203 = CFSTR("ScaleMutable");
          }
          else
          {
            if (*v38 != 5)
            {
              v460 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v460, "Only ADD_K and MUL_K support dynamic weights.");
              __cxa_throw(v460, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
            }
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *(unsigned int *)(v504 + 16));
            v200 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v70, "setObject:forKeyedSubscript:", v200, CFSTR("BiasCount"));

            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v185);
            v201 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v70, "setObject:forKeyedSubscript:", v201, CFSTR("BiasOffset"));

            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", *((_QWORD *)n + 47));
            v202 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v70, "setObject:forKeyedSubscript:", v202, CFSTR("BiasIndex"));
            v203 = CFSTR("BiasMutable");
          }

          objc_msgSend(v70, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], v203);
          if (v544)
          {
            v545.__begin_ = (std::vector<std::string>::pointer)v544;
            operator delete(v544);
          }
          if ((_QWORD)__p)
          {
            *((_QWORD *)&__p + 1) = __p;
            operator delete((void *)__p);
          }
          goto LABEL_286;
        }
LABEL_255:
        if (!*((_BYTE *)n + 392))
          Espresso::throw_exception_selector<Espresso::invalid_state_error>("An input is missing to ADD_K / MUL_K");
        goto LABEL_256;
      }
    }
    std::__tree<std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>>>::__erase_unique<std::string>((uint64_t **)v481 + 34, *((_QWORD **)a3 + 6));
    v137 = v495.__begin_;
    v138 = v495.__end_;
    v139 = v495.__begin_ + 1;
    if (&v495.__begin_[1] != v495.__end_)
    {
      do
      {
        if (SHIBYTE(v137->__r_.__value_.__r.__words[2]) < 0)
          operator delete(v137->__r_.__value_.__l.__data_);
        *(_OWORD *)&v137->__r_.__value_.__l.__data_ = *(_OWORD *)&v137[1].__r_.__value_.__l.__data_;
        v137->__r_.__value_.__r.__words[2] = v137[1].__r_.__value_.__r.__words[2];
        *((_BYTE *)&v137[1].__r_.__value_.__s + 23) = 0;
        v140 = v137 + 2;
        v137[1].__r_.__value_.__s.__data_[0] = 0;
        ++v137;
      }
      while (v140 != v138);
      v139 = v495.__end_;
    }
    for (n = v479; v139 != v137; --v139)
    {
      if (SHIBYTE(v139[-1].__r_.__value_.__r.__words[2]) < 0)
        operator delete(v139[-1].__r_.__value_.__l.__data_);
    }
    v495.__end_ = v137;
    a3 = v482;
    goto LABEL_189;
  }
  switch((int)v39)
  {
    case 'd':
      objc_msgSend(obj, "setObject:forKeyedSubscript:", CFSTR("Equal"), CFSTR("Type"));
      goto LABEL_513;
    case 'e':
    case 'f':
    case 'l':
    case 'm':
    case 'p':
      goto LABEL_856;
    case 'g':
      objc_msgSend(obj, "setObject:forKeyedSubscript:", CFSTR("LessThan"), CFSTR("Type"));
      goto LABEL_513;
    case 'h':
      objc_msgSend(obj, "setObject:forKeyedSubscript:", CFSTR("LessThanEqual"), CFSTR("Type"));
      goto LABEL_513;
    case 'i':
      objc_msgSend(obj, "setObject:forKeyedSubscript:", CFSTR("GreaterThan"), CFSTR("Type"));
      goto LABEL_513;
    case 'j':
      objc_msgSend(obj, "setObject:forKeyedSubscript:", CFSTR("GreaterThanEqual"), CFSTR("Type"));
      goto LABEL_513;
    case 'k':
      objc_msgSend(obj, "setObject:forKeyedSubscript:", CFSTR("NotEqual"), CFSTR("Type"));
      goto LABEL_513;
    case 'n':
      Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v519, (id *)a3);
      v163 = v528;
      v528 = CFSTR("ElementWise");

      v164 = (std::string *)*((_QWORD *)&__p + 1);
      for (ii = v523; ii != v164; --ii)
      {
        if (SHIBYTE(ii[-1].__r_.__value_.__r.__words[2]) < 0)
          operator delete(ii[-1].__r_.__value_.__l.__data_);
      }
      v523 = v164;
      v176 = (__int128 *)*((_QWORD *)v482 + 6);
      if ((unint64_t)v164 >= v524)
      {
        v177 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&__p + 1, (uint64_t)v176);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)&__p + 8, v176);
        v177 = v164 + 1;
      }
      v523 = v177;
      if (*((char *)v482 + 23) >= 0)
        v240 = *((unsigned __int8 *)v482 + 23);
      else
        v240 = *((_QWORD *)v482 + 1);
      std::string::basic_string[abi:ne180100]((uint64_t)&__str, v240 + 18);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v241 = &__str;
      else
        v241 = (std::string *)__str.__r_.__value_.__r.__words[0];
      if (v240)
      {
        if (*((char *)v482 + 23) >= 0)
          v242 = v482;
        else
          v242 = *(const Espresso::ANECompilerEngine::compiler::layer_graph_info_t **)v482;
        memmove(v241, v242, v240);
      }
      strcpy((char *)v241 + v240, "__not_equal_zero_0");
      if (SBYTE7(v520) < 0)
        operator delete((void *)v519);
      v519 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
      *(_QWORD *)&v520 = *((_QWORD *)&__str.__r_.__value_.__l + 2);
      v243 = (void *)objc_opt_new();
      objc_msgSend(v243, "setObject:forKeyedSubscript:", CFSTR("NotEqualZero"), CFSTR("Type"));
      objc_storeStrong(v529, v243);
      Espresso::ANECompilerEngine::compiler::add_unit(v481, (const Espresso::ANECompilerEngine::compiler::unit_t *)&v519);
      Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&__str.__r_.__value_.__l.__data_, (id *)v482);
      v244 = v549;
      v549 = CFSTR("ElementWise");

      v245 = v545.__begin_;
      for (jj = v545.__end_; jj != v245; --jj)
      {
        if (SHIBYTE(jj[-1].__r_.__value_.__r.__words[2]) < 0)
          operator delete(jj[-1].__r_.__value_.__l.__data_);
      }
      v545.__end_ = v245;
      v247 = (__int128 *)(*((_QWORD *)v482 + 6) + 24);
      if (v245 >= v545.__end_cap_.__value_)
      {
        v248 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v545, (uint64_t)v247);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)&v545, v247);
        v248 = v245 + 1;
      }
      v545.__end_ = v248;
      if (*((char *)v482 + 23) >= 0)
        v265 = *((unsigned __int8 *)v482 + 23);
      else
        v265 = *((_QWORD *)v482 + 1);
      std::string::basic_string[abi:ne180100]((uint64_t)&v532, v265 + 18);
      if ((v532.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v266 = &v532;
      else
        v266 = (std::string *)v532.__r_.__value_.__r.__words[0];
      if (v265)
      {
        if (*((char *)v482 + 23) >= 0)
          v267 = v482;
        else
          v267 = *(const Espresso::ANECompilerEngine::compiler::layer_graph_info_t **)v482;
        memmove(v266, v267, v265);
      }
      strcpy((char *)v266 + v265, "__not_equal_zero_1");
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      __str = v532;
      v268 = (void *)objc_opt_new();
      objc_msgSend(v268, "setObject:forKeyedSubscript:", CFSTR("NotEqualZero"), CFSTR("Type"));
      objc_storeStrong(v550, v268);
      Espresso::ANECompilerEngine::compiler::add_unit(v481, (const Espresso::ANECompilerEngine::compiler::unit_t *)&__str);
      v269 = v499;
      v499 = CFSTR("ElementWise");

      v271 = v495.__begin_;
      for (kk = v495.__end_; kk != v271; --kk)
      {
        if (SHIBYTE(kk[-1].__r_.__value_.__r.__words[2]) < 0)
          operator delete(kk[-1].__r_.__value_.__l.__data_);
      }
      v495.__end_ = v271;
      if (v271 >= v495.__end_cap_.__value_)
      {
        v293 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v495, (uint64_t)&v519);
      }
      else
      {
        if (SBYTE7(v520) < 0)
        {
          std::string::__init_copy_ctor_external(v271, (const std::string::value_type *)v519, *((std::string::size_type *)&v519 + 1));
        }
        else
        {
          v272 = v519;
          v271->__r_.__value_.__r.__words[2] = v520;
          *(_OWORD *)&v271->__r_.__value_.__l.__data_ = v272;
        }
        v293 = v271 + 1;
      }
      v495.__end_ = v293;
      if (v293 >= v495.__end_cap_.__value_)
      {
        v426 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v495, (uint64_t)&__str);
      }
      else
      {
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(v293, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
        }
        else
        {
          v425 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
          v293->__r_.__value_.__r.__words[2] = __str.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v293->__r_.__value_.__l.__data_ = v425;
        }
        v426 = v293 + 1;
      }
      v495.__end_ = v426;
      objc_msgSend(obj, "setObject:forKeyedSubscript:", CFSTR("Mult"), CFSTR("Type"));
      objc_storeStrong(v500, obj);
      Espresso::ANECompilerEngine::compiler::add_unit(v481, (const Espresso::ANECompilerEngine::compiler::unit_t *)v492);

      if (v547 < 0)
        operator delete(v546);
      v532.__r_.__value_.__r.__words[0] = (std::string::size_type)&v545;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v532);
      v532.__r_.__value_.__r.__words[0] = (std::string::size_type)&v543;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v532);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      goto LABEL_780;
    case 'o':
      Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v519, (id *)a3);
      v166 = v528;
      v528 = CFSTR("ElementWise");

      v167 = (std::string *)*((_QWORD *)&__p + 1);
      for (mm = v523; mm != v167; --mm)
      {
        if (SHIBYTE(mm[-1].__r_.__value_.__r.__words[2]) < 0)
          operator delete(mm[-1].__r_.__value_.__l.__data_);
      }
      v523 = v167;
      v178 = (__int128 *)*((_QWORD *)v482 + 6);
      if ((unint64_t)v167 >= v524)
      {
        v179 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&__p + 1, (uint64_t)v178);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)&__p + 8, v178);
        v179 = v167 + 1;
      }
      v523 = v179;
      if (*((char *)v482 + 23) >= 0)
        v249 = *((unsigned __int8 *)v482 + 23);
      else
        v249 = *((_QWORD *)v482 + 1);
      std::string::basic_string[abi:ne180100]((uint64_t)&__str, v249 + 14);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v250 = &__str;
      else
        v250 = (std::string *)__str.__r_.__value_.__r.__words[0];
      if (v249)
      {
        if (*((char *)v482 + 23) >= 0)
          v251 = v482;
        else
          v251 = *(const Espresso::ANECompilerEngine::compiler::layer_graph_info_t **)v482;
        memmove(v250, v251, v249);
      }
      strcpy((char *)v250 + v249, "__equal_zero_0");
      if (SBYTE7(v520) < 0)
        operator delete((void *)v519);
      v519 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
      *(_QWORD *)&v520 = *((_QWORD *)&__str.__r_.__value_.__l + 2);
      v243 = (void *)objc_opt_new();
      objc_msgSend(v243, "setObject:forKeyedSubscript:", CFSTR("EqualZero"), CFSTR("Type"));
      objc_storeStrong(v529, v243);
      Espresso::ANECompilerEngine::compiler::add_unit(v481, (const Espresso::ANECompilerEngine::compiler::unit_t *)&v519);
      Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&__str.__r_.__value_.__l.__data_, (id *)v482);
      v252 = v549;
      v549 = CFSTR("ElementWise");

      v253 = v545.__begin_;
      for (nn = v545.__end_; nn != v253; --nn)
      {
        if (SHIBYTE(nn[-1].__r_.__value_.__r.__words[2]) < 0)
          operator delete(nn[-1].__r_.__value_.__l.__data_);
      }
      v545.__end_ = v253;
      v255 = (__int128 *)(*((_QWORD *)v482 + 6) + 24);
      if (v253 >= v545.__end_cap_.__value_)
      {
        v256 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v545, (uint64_t)v255);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)&v545, v255);
        v256 = v253 + 1;
      }
      v545.__end_ = v256;
      if (*((char *)v482 + 23) >= 0)
        v273 = *((unsigned __int8 *)v482 + 23);
      else
        v273 = *((_QWORD *)v482 + 1);
      std::string::basic_string[abi:ne180100]((uint64_t)&v532, v273 + 14);
      if ((v532.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v274 = &v532;
      else
        v274 = (std::string *)v532.__r_.__value_.__r.__words[0];
      if (v273)
      {
        if (*((char *)v482 + 23) >= 0)
          v275 = v482;
        else
          v275 = *(const Espresso::ANECompilerEngine::compiler::layer_graph_info_t **)v482;
        memmove(v274, v275, v273);
      }
      strcpy((char *)v274 + v273, "__equal_zero_1");
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      __str = v532;
      v276 = (void *)objc_opt_new();
      objc_msgSend(v276, "setObject:forKeyedSubscript:", CFSTR("EqualZero"), CFSTR("Type"));
      objc_storeStrong(v550, v276);
      Espresso::ANECompilerEngine::compiler::add_unit(v481, (const Espresso::ANECompilerEngine::compiler::unit_t *)&__str);
      Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v532.__r_.__value_.__l.__data_, (id *)v482);
      v277 = v540;
      v540 = CFSTR("ElementWise");

      v278 = v534;
      for (i1 = v535; i1 != v278; --i1)
      {
        if (SHIBYTE(i1[-1].__r_.__value_.__r.__words[2]) < 0)
          operator delete(i1[-1].__r_.__value_.__l.__data_);
      }
      v535 = v278;
      if ((unint64_t)v278 >= v536)
      {
        v280 = v482;
        v295 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v534, (uint64_t)&v519);
      }
      else
      {
        v280 = v482;
        if (SBYTE7(v520) < 0)
        {
          std::string::__init_copy_ctor_external(v278, (const std::string::value_type *)v519, *((std::string::size_type *)&v519 + 1));
        }
        else
        {
          v281 = v519;
          v278->__r_.__value_.__r.__words[2] = v520;
          *(_OWORD *)&v278->__r_.__value_.__l.__data_ = v281;
        }
        v295 = v278 + 1;
      }
      v535 = v295;
      if ((unint64_t)v295 >= v536)
      {
        v430 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v534, (uint64_t)&__str);
      }
      else
      {
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(v295, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
        }
        else
        {
          v429 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
          v295->__r_.__value_.__r.__words[2] = __str.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v295->__r_.__value_.__l.__data_ = v429;
        }
        v430 = v295 + 1;
      }
      v535 = v430;
      if (*((char *)v280 + 23) >= 0)
        v431 = *((unsigned __int8 *)v280 + 23);
      else
        v431 = *((_QWORD *)v280 + 1);
      std::string::basic_string[abi:ne180100]((uint64_t)&v530, v431 + 26);
      if ((v530.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v432 = &v530;
      else
        v432 = (std::string *)v530.__r_.__value_.__r.__words[0];
      if (v431)
      {
        if (*((char *)v280 + 23) >= 0)
          v433 = v280;
        else
          v433 = *(const Espresso::ANECompilerEngine::compiler::layer_graph_info_t **)v280;
        memmove(v432, v433, v431);
      }
      strcpy((char *)v432 + v431, "__pre_equals_zero_multiply");
      if (SHIBYTE(v532.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v532.__r_.__value_.__l.__data_);
      v532 = v530;
      v434 = (void *)objc_opt_new();
      objc_msgSend(v434, "setObject:forKeyedSubscript:", CFSTR("Mult"), CFSTR("Type"));
      objc_storeStrong(&v541, v434);
      Espresso::ANECompilerEngine::compiler::add_unit(v481, (const Espresso::ANECompilerEngine::compiler::unit_t *)&v532);
      v435 = v499;
      v499 = CFSTR("ElementWise");

      v437 = v495.__begin_;
      for (i2 = v495.__end_; i2 != v437; --i2)
      {
        if (SHIBYTE(i2[-1].__r_.__value_.__r.__words[2]) < 0)
          operator delete(i2[-1].__r_.__value_.__l.__data_);
      }
      v495.__end_ = v437;
      if (v437 >= v495.__end_cap_.__value_)
      {
        v439 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v495, (uint64_t)&v532);
      }
      else
      {
        if (SHIBYTE(v532.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(v437, v532.__r_.__value_.__l.__data_, v532.__r_.__value_.__l.__size_);
        }
        else
        {
          v438 = *(_OWORD *)&v532.__r_.__value_.__l.__data_;
          v437->__r_.__value_.__r.__words[2] = v532.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v437->__r_.__value_.__l.__data_ = v438;
        }
        v439 = v437 + 1;
      }
      v495.__end_ = v439;
      objc_msgSend(obj, "setObject:forKeyedSubscript:", CFSTR("EqualZero"), CFSTR("Type"));
      objc_storeStrong(v500, obj);
      Espresso::ANECompilerEngine::compiler::add_unit(v481, (const Espresso::ANECompilerEngine::compiler::unit_t *)v492);

      if (v538 < 0)
        operator delete(v537);
      v530.__r_.__value_.__r.__words[0] = (std::string::size_type)&v534;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v530);
      v530.__r_.__value_.__r.__words[0] = (std::string::size_type)&v533;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v530);
      if (SHIBYTE(v532.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v532.__r_.__value_.__l.__data_);

      if (v547 < 0)
        operator delete(v546);
      v532.__r_.__value_.__r.__words[0] = (std::string::size_type)&v545;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v532);
      v532.__r_.__value_.__r.__words[0] = (std::string::size_type)&v543;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v532);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      goto LABEL_780;
    case 'q':
      Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v519, (id *)a3);
      v169 = v528;
      v528 = CFSTR("ElementWise");

      v170 = (std::string *)*((_QWORD *)&__p + 1);
      for (i3 = v523; i3 != v170; --i3)
      {
        if (SHIBYTE(i3[-1].__r_.__value_.__r.__words[2]) < 0)
          operator delete(i3[-1].__r_.__value_.__l.__data_);
      }
      v523 = v170;
      v180 = (__int128 *)*((_QWORD *)v482 + 6);
      if ((unint64_t)v170 >= v524)
      {
        v181 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&__p + 1, (uint64_t)v180);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)&__p + 8, v180);
        v181 = v170 + 1;
      }
      v523 = v181;
      if (*((char *)v482 + 23) >= 0)
        v257 = *((unsigned __int8 *)v482 + 23);
      else
        v257 = *((_QWORD *)v482 + 1);
      std::string::basic_string[abi:ne180100]((uint64_t)&__str, v257 + 18);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v258 = &__str;
      else
        v258 = (std::string *)__str.__r_.__value_.__r.__words[0];
      if (v257)
      {
        if (*((char *)v482 + 23) >= 0)
          v259 = v482;
        else
          v259 = *(const Espresso::ANECompilerEngine::compiler::layer_graph_info_t **)v482;
        memmove(v258, v259, v257);
      }
      strcpy((char *)v258 + v257, "__not_equal_zero_0");
      if (SBYTE7(v520) < 0)
        operator delete((void *)v519);
      v519 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
      *(_QWORD *)&v520 = *((_QWORD *)&__str.__r_.__value_.__l + 2);
      v243 = (void *)objc_opt_new();
      objc_msgSend(v243, "setObject:forKeyedSubscript:", CFSTR("NotEqualZero"), CFSTR("Type"));
      objc_storeStrong(v529, v243);
      Espresso::ANECompilerEngine::compiler::add_unit(v481, (const Espresso::ANECompilerEngine::compiler::unit_t *)&v519);
      Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&__str.__r_.__value_.__l.__data_, (id *)v482);
      v260 = v549;
      v549 = CFSTR("ElementWise");

      v261 = v545.__begin_;
      for (i4 = v545.__end_; i4 != v261; --i4)
      {
        if (SHIBYTE(i4[-1].__r_.__value_.__r.__words[2]) < 0)
          operator delete(i4[-1].__r_.__value_.__l.__data_);
      }
      v545.__end_ = v261;
      v263 = (__int128 *)(*((_QWORD *)v482 + 6) + 24);
      if (v261 >= v545.__end_cap_.__value_)
      {
        v264 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v545, (uint64_t)v263);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)&v545, v263);
        v264 = v261 + 1;
      }
      v545.__end_ = v264;
      if (*((char *)v482 + 23) >= 0)
        v282 = *((unsigned __int8 *)v482 + 23);
      else
        v282 = *((_QWORD *)v482 + 1);
      std::string::basic_string[abi:ne180100]((uint64_t)&v532, v282 + 18);
      if ((v532.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v283 = &v532;
      else
        v283 = (std::string *)v532.__r_.__value_.__r.__words[0];
      if (v282)
      {
        if (*((char *)v482 + 23) >= 0)
          v284 = v482;
        else
          v284 = *(const Espresso::ANECompilerEngine::compiler::layer_graph_info_t **)v482;
        memmove(v283, v284, v282);
      }
      strcpy((char *)v283 + v282, "__not_equal_zero_1");
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      __str = v532;
      v285 = (void *)objc_opt_new();
      objc_msgSend(v285, "setObject:forKeyedSubscript:", CFSTR("NotEqualZero"), CFSTR("Type"));
      objc_storeStrong(v550, v285);
      Espresso::ANECompilerEngine::compiler::add_unit(v481, (const Espresso::ANECompilerEngine::compiler::unit_t *)&__str);
      v286 = v499;
      v499 = CFSTR("ElementWise");

      v288 = v495.__begin_;
      for (i5 = v495.__end_; i5 != v288; --i5)
      {
        if (SHIBYTE(i5[-1].__r_.__value_.__r.__words[2]) < 0)
          operator delete(i5[-1].__r_.__value_.__l.__data_);
      }
      v495.__end_ = v288;
      if (v288 >= v495.__end_cap_.__value_)
      {
        v294 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v495, (uint64_t)&v519);
      }
      else
      {
        if (SBYTE7(v520) < 0)
        {
          std::string::__init_copy_ctor_external(v288, (const std::string::value_type *)v519, *((std::string::size_type *)&v519 + 1));
        }
        else
        {
          v289 = v519;
          v288->__r_.__value_.__r.__words[2] = v520;
          *(_OWORD *)&v288->__r_.__value_.__l.__data_ = v289;
        }
        v294 = v288 + 1;
      }
      v495.__end_ = v294;
      if (v294 >= v495.__end_cap_.__value_)
      {
        v428 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v495, (uint64_t)&__str);
      }
      else
      {
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(v294, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
        }
        else
        {
          v427 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
          v294->__r_.__value_.__r.__words[2] = __str.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v294->__r_.__value_.__l.__data_ = v427;
        }
        v428 = v294 + 1;
      }
      v495.__end_ = v428;
      objc_msgSend(obj, "setObject:forKeyedSubscript:", CFSTR("NotEqual"), CFSTR("Type"));
      objc_storeStrong(v500, obj);
      Espresso::ANECompilerEngine::compiler::add_unit(v481, (const Espresso::ANECompilerEngine::compiler::unit_t *)v492);

      if (v547 < 0)
        operator delete(v546);
      v532.__r_.__value_.__r.__words[0] = (std::string::size_type)&v545;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v532);
      v532.__r_.__value_.__r.__words[0] = (std::string::size_type)&v543;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v532);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
LABEL_780:

      if (v526 < 0)
        operator delete(v525);
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p + 8;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v520 + 8;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
      if (SBYTE7(v520) < 0)
        operator delete((void *)v519);
      v440 = (std::string *)v552;
      if ((std::string *)v552 == &v551)
      {
        v441 = 4;
        v440 = &v551;
      }
      else
      {
        if (!(_QWORD)v552)
          break;
        v441 = 5;
      }
      (*(void (**)(void))(v440->__r_.__value_.__r.__words[0] + 8 * v441))();
      break;
    default:
      if ((v39 - 29) < 2)
        goto LABEL_73;
      if ((_DWORD)v39 != 33)
        goto LABEL_856;
      objc_msgSend(obj, "setObject:forKeyedSubscript:", CFSTR("Sub"), CFSTR("Type"));
      goto LABEL_513;
  }
LABEL_690:
  *(_QWORD *)&v519 = &v489;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v519);

  if (v497 < 0)
    operator delete(v496);
  *(_QWORD *)&v519 = &v495;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v519);
  *(_QWORD *)&v519 = &v494;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v519);
  if (v493 < 0)
    operator delete(v492[0]);

  *(_QWORD *)&v519 = &v501;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&v519);
  v411 = v505;
  if (v505)
  {
    v412 = (unint64_t *)&v505->__shared_owners_;
    do
      v413 = __ldaxr(v412);
    while (__stlxr(v413 - 1, v412));
    if (!v413)
    {
      ((void (*)(std::__shared_weak_count *))v411->__on_zero_shared)(v411);
      std::__shared_weak_count::__release_weak(v411);
    }
  }
  v414 = v507;
  if (v507)
  {
    v415 = (unint64_t *)&v507->__shared_owners_;
    do
      v416 = __ldaxr(v415);
    while (__stlxr(v416 - 1, v415));
    if (!v416)
    {
      ((void (*)(std::__shared_weak_count *))v414->__on_zero_shared)(v414);
      std::__shared_weak_count::__release_weak(v414);
    }
  }
  v417 = (std::__shared_weak_count *)v509;
  if (v509)
  {
    v418 = (unint64_t *)(v509 + 8);
    do
      v419 = __ldaxr(v418);
    while (__stlxr(v419 - 1, v418));
    if (!v419)
    {
      ((void (*)(std::__shared_weak_count *))v417->__on_zero_shared)(v417);
      std::__shared_weak_count::__release_weak(v417);
    }
  }
}

void sub_191499B48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,char a52,uint64_t a53,char a54,uint64_t a55,char a56,uint64_t a57,uint64_t a58)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  a58 = (uint64_t)&a28;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&a58);
  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t((id *)&a31);

  a31 = (uint64_t)&a49;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&a31);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a52);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a54);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a56);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::elementwise_kernel::compile(Espresso::ANECompilerEngine::elementwise_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
  Espresso::ANECompilerEngine::elementwise_kernel::compile((Espresso::ANECompilerEngine::elementwise_kernel *)((char *)this - 336), a2, a3);
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::elementwise_kernel::~elementwise_kernel(Espresso::ANECompilerEngine::elementwise_kernel *this)
{
  Espresso::base_kernel *v2;

  v2 = (Espresso::ANECompilerEngine::elementwise_kernel *)((char *)this - 336);
  *((_QWORD *)this - 42) = &off_1E2D780E8;
  *(_QWORD *)this = &unk_1E2D78258;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 216);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((void **)this);
  Espresso::base_kernel::~base_kernel(v2);
}

{
  Espresso::base_kernel *v2;

  v2 = (Espresso::ANECompilerEngine::elementwise_kernel *)((char *)this - 336);
  *((_QWORD *)this - 42) = &off_1E2D780E8;
  *(_QWORD *)this = &unk_1E2D78258;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 216);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((void **)this);
  Espresso::base_kernel::~base_kernel(v2);
  JUMPOUT(0x19401CD90);
}

uint64_t `non-virtual thunk to'Espresso::ANECompilerEngine::elementwise_kernel::get_anec_lowering_hint(Espresso::ANECompilerEngine::elementwise_kernel *this)
{
  return (uint64_t)this + 216;
}

void std::__tree<std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>>>::__erase_unique<std::string>(uint64_t **a1, _QWORD *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v6;
  uint64_t *v7;
  _BOOL4 v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  BOOL v13;

  v3 = (uint64_t *)(a1 + 1);
  v2 = a1[1];
  if (v2)
  {
    v6 = (uint64_t *)(a1 + 1);
    v7 = a1[1];
    do
    {
      v8 = std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v7 + 4, a2);
      v9 = (uint64_t **)(v7 + 1);
      if (!v8)
      {
        v9 = (uint64_t **)v7;
        v6 = v7;
      }
      v7 = *v9;
    }
    while (*v9);
    if (v6 != v3 && !std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, v6 + 4))
    {
      v10 = (uint64_t *)v6[1];
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
      else
      {
        v12 = v6;
        do
        {
          v11 = (uint64_t *)v12[2];
          v13 = *v11 == (_QWORD)v12;
          v12 = v11;
        }
        while (!v13);
      }
      if (*a1 == v6)
        *a1 = v11;
      a1[2] = (uint64_t *)((char *)a1[2] - 1);
      std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v2, v6);
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>,0>((uint64_t)(v6 + 4));
      operator delete(v6);
    }
  }
}

void Espresso::throw_exception_selector<Espresso::not_implemented_error,int &>(char *a1, uint64_t a2)
{
  Espresso::throw_exception_with_format<Espresso::not_implemented_error>(a1, a2);
}

id `anonymous namespace'::h11_exp_lut_params(_anonymous_namespace_ *this)
{
  void *v1;
  void *v2;
  void *v3;
  uint64_t i;
  void *v11;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;

  v1 = (void *)objc_opt_new();
  objc_msgSend(v1, "setObject:forKeyedSubscript:", &unk_1E2DEDB50, CFSTR("Version"));
  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", 33);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  for (i = 0; i != 33; ++i)
  {
    _S8 = flt_191AA066C[i];
    __asm { FCVT            H0, S8 }
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithShort:", _H0);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "setObject:atIndexedSubscript:", v11, i);

    if (i)
    {
      _S0 = _S8 - flt_191AA066C[(i - 1)];
      __asm { FCVT            H0, S0 }
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithShort:", SLOWORD(_S0));
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "setObject:atIndexedSubscript:", v13, (i - 1));

    }
  }
  v14 = (void *)objc_msgSend(v2, "copy");
  v15 = (void *)objc_msgSend(v3, "copy");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithShort:", 4294952117);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "setObject:forKeyedSubscript:", v16, CFSTR("XLeft"));

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithShort:", 4294952192);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "setObject:forKeyedSubscript:", v17, CFSTR("XSatLeft"));

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithShort:", 7901);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "setObject:forKeyedSubscript:", v18, CFSTR("YSatLeft"));

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithShort:", 8187);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "setObject:forKeyedSubscript:", v19, CFSTR("SlopeLeft"));

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithShort:", 17589);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "setObject:forKeyedSubscript:", v20, CFSTR("XRight"));

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithShort:", 17664);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "setObject:forKeyedSubscript:", v21, CFSTR("XSatRight"));

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithShort:", 22685);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "setObject:forKeyedSubscript:", v22, CFSTR("YSatRight"));

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithShort:", 22527);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "setObject:forKeyedSubscript:", v23, CFSTR("SlopeRight"));

  objc_msgSend(v1, "setObject:forKeyedSubscript:", v14, CFSTR("YIntercept"));
  objc_msgSend(v1, "setObject:forKeyedSubscript:", v15, CFSTR("Slope"));
  objc_msgSend(v1, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAA0], CFSTR("AntiSymmetric"));

  return v1;
}

void sub_19149A864(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

float ___ZN8Espresso17ANECompilerEngine18elementwise_kernel7compileEPNS0_8compilerERKNS2_18layer_graph_info_tE_block_invoke(float a1)
{
  float v1;
  BOOL v2;
  float result;

  v1 = fabsf(a1);
  v2 = a1 < 0.0;
  result = 1.0;
  if (v2)
    result = -1.0;
  if (v1 < 0.000001)
    return 0.0;
  return result;
}

uint64_t *std::unordered_map<std::string,unsigned long>::at(_QWORD *a1, uint64_t a2)
{
  uint64_t *v2;

  v2 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>(a1, a2);
  if (!v2)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  return v2 + 5;
}

{
  uint64_t *v2;

  v2 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>(a1, a2);
  if (!v2)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  return v2 + 5;
}

void std::__function::__func<Espresso::ANECompilerEngine::elementwise_kernel::compile(Espresso::ANECompilerEngine::compiler *,Espresso::ANECompilerEngine::compiler::layer_graph_info_t const&)::$_0,std::allocator<Espresso::ANECompilerEngine::elementwise_kernel::compile(Espresso::ANECompilerEngine::compiler *,Espresso::ANECompilerEngine::compiler::layer_graph_info_t const&)::$_0>,void ()(std::string const&)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<Espresso::ANECompilerEngine::elementwise_kernel::compile(Espresso::ANECompilerEngine::compiler *,Espresso::ANECompilerEngine::compiler::layer_graph_info_t const&)::$_0,std::allocator<Espresso::ANECompilerEngine::elementwise_kernel::compile(Espresso::ANECompilerEngine::compiler *,Espresso::ANECompilerEngine::compiler::layer_graph_info_t const&)::$_0>,void ()(std::string const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2DB15B0;
  return result;
}

void std::__function::__func<Espresso::ANECompilerEngine::elementwise_kernel::compile(Espresso::ANECompilerEngine::compiler *,Espresso::ANECompilerEngine::compiler::layer_graph_info_t const&)::$_0,std::allocator<Espresso::ANECompilerEngine::elementwise_kernel::compile(Espresso::ANECompilerEngine::compiler *,Espresso::ANECompilerEngine::compiler::layer_graph_info_t const&)::$_0>,void ()(std::string const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2DB15B0;
}

uint64_t std::__function::__func<Espresso::ANECompilerEngine::elementwise_kernel::compile(Espresso::ANECompilerEngine::compiler *,Espresso::ANECompilerEngine::compiler::layer_graph_info_t const&)::$_0,std::allocator<Espresso::ANECompilerEngine::elementwise_kernel::compile(Espresso::ANECompilerEngine::compiler *,Espresso::ANECompilerEngine::compiler::layer_graph_info_t const&)::$_0>,void ()(std::string const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN8Espresso17ANECompilerEngine18elementwise_kernel7compileEPNS0_8compilerERKNS2_18layer_graph_info_tEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<Espresso::ANECompilerEngine::elementwise_kernel::compile(Espresso::ANECompilerEngine::compiler *,Espresso::ANECompilerEngine::compiler::layer_graph_info_t const&)::$_0,std::allocator<Espresso::ANECompilerEngine::elementwise_kernel::compile(Espresso::ANECompilerEngine::compiler *,Espresso::ANECompilerEngine::compiler::layer_graph_info_t const&)::$_0>,void ()(std::string const&)>::target_type()
{
}

void std::__function::__func<Espresso::ANECompilerEngine::elementwise_kernel::is_valid_for_engine(std::shared_ptr<Espresso::kernels_validation_status_t>,Espresso::base_kernel::validate_for_engine_args_t const&)::$_1,std::allocator<Espresso::ANECompilerEngine::elementwise_kernel::is_valid_for_engine(std::shared_ptr<Espresso::kernels_validation_status_t>,Espresso::base_kernel::validate_for_engine_args_t const&)::$_1>,void ()(std::string const&)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

__n128 std::__function::__func<Espresso::ANECompilerEngine::elementwise_kernel::is_valid_for_engine(std::shared_ptr<Espresso::kernels_validation_status_t>,Espresso::base_kernel::validate_for_engine_args_t const&)::$_1,std::allocator<Espresso::ANECompilerEngine::elementwise_kernel::is_valid_for_engine(std::shared_ptr<Espresso::kernels_validation_status_t>,Espresso::base_kernel::validate_for_engine_args_t const&)::$_1>,void ()(std::string const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DB3708;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<Espresso::ANECompilerEngine::elementwise_kernel::is_valid_for_engine(std::shared_ptr<Espresso::kernels_validation_status_t>,Espresso::base_kernel::validate_for_engine_args_t const&)::$_1,std::allocator<Espresso::ANECompilerEngine::elementwise_kernel::is_valid_for_engine(std::shared_ptr<Espresso::kernels_validation_status_t>,Espresso::base_kernel::validate_for_engine_args_t const&)::$_1>,void ()(std::string const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DB3708;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<Espresso::ANECompilerEngine::elementwise_kernel::is_valid_for_engine(std::shared_ptr<Espresso::kernels_validation_status_t>,Espresso::base_kernel::validate_for_engine_args_t const&)::$_1,std::allocator<Espresso::ANECompilerEngine::elementwise_kernel::is_valid_for_engine(std::shared_ptr<Espresso::kernels_validation_status_t>,Espresso::base_kernel::validate_for_engine_args_t const&)::$_1>,void ()(std::string const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZNK8Espresso17ANECompilerEngine18elementwise_kernel19is_valid_for_engineENSt3__110shared_ptrINS_27kernels_validation_status_tEEERKNS_11base_kernel26validate_for_engine_args_tEE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<Espresso::ANECompilerEngine::elementwise_kernel::is_valid_for_engine(std::shared_ptr<Espresso::kernels_validation_status_t>,Espresso::base_kernel::validate_for_engine_args_t const&)::$_1,std::allocator<Espresso::ANECompilerEngine::elementwise_kernel::is_valid_for_engine(std::shared_ptr<Espresso::kernels_validation_status_t>,Espresso::base_kernel::validate_for_engine_args_t const&)::$_1>,void ()(std::string const&)>::target_type()
{
}

void std::__function::__func<Espresso::ANECompilerEngine::elementwise_kernel::is_valid_for_engine(std::shared_ptr<Espresso::kernels_validation_status_t>,Espresso::base_kernel::validate_for_engine_args_t const&)::$_0,std::allocator<Espresso::ANECompilerEngine::elementwise_kernel::is_valid_for_engine(std::shared_ptr<Espresso::kernels_validation_status_t>,Espresso::base_kernel::validate_for_engine_args_t const&)::$_0>,void ()(std::string const&)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

__n128 std::__function::__func<Espresso::ANECompilerEngine::elementwise_kernel::is_valid_for_engine(std::shared_ptr<Espresso::kernels_validation_status_t>,Espresso::base_kernel::validate_for_engine_args_t const&)::$_0,std::allocator<Espresso::ANECompilerEngine::elementwise_kernel::is_valid_for_engine(std::shared_ptr<Espresso::kernels_validation_status_t>,Espresso::base_kernel::validate_for_engine_args_t const&)::$_0>,void ()(std::string const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DB36B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<Espresso::ANECompilerEngine::elementwise_kernel::is_valid_for_engine(std::shared_ptr<Espresso::kernels_validation_status_t>,Espresso::base_kernel::validate_for_engine_args_t const&)::$_0,std::allocator<Espresso::ANECompilerEngine::elementwise_kernel::is_valid_for_engine(std::shared_ptr<Espresso::kernels_validation_status_t>,Espresso::base_kernel::validate_for_engine_args_t const&)::$_0>,void ()(std::string const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DB36B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<Espresso::ANECompilerEngine::elementwise_kernel::is_valid_for_engine(std::shared_ptr<Espresso::kernels_validation_status_t>,Espresso::base_kernel::validate_for_engine_args_t const&)::$_0,std::allocator<Espresso::ANECompilerEngine::elementwise_kernel::is_valid_for_engine(std::shared_ptr<Espresso::kernels_validation_status_t>,Espresso::base_kernel::validate_for_engine_args_t const&)::$_0>,void ()(std::string const&)>::operator()(uint64_t a1, __int128 *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  int64x2_t *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::string __p;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  int64x2_t *v17;
  std::__shared_weak_count *v18;
  void **v19;

  v2 = *(_QWORD *)(a1 + 8);
  v4 = *(int64x2_t **)v2;
  v3 = *(std::__shared_weak_count **)(v2 + 8);
  v17 = v4;
  v18 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, a2, *(_QWORD *)(a1 + 16), 1);
  Espresso::emit_kernel_validation_warning(&v17, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
  v7 = v16;
  if (v16)
  {
    v8 = (unint64_t *)&v16->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v19 = (void **)&v15;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v19);
  v19 = (void **)&v14;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v19);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v10 = v18;
  if (v18)
  {
    v11 = (unint64_t *)&v18->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_19149AC04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23)
{
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;

  v26 = v23 + 24;
  v27 = a23;
  if (a23)
  {
    p_shared_owners = (unint64_t *)&a23->__shared_owners_;
    do
      v29 = __ldaxr(p_shared_owners);
    while (__stlxr(v29 - 1, p_shared_owners));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  *(_QWORD *)(v24 - 40) = &a19;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)(v24 - 40));
  *(_QWORD *)(v24 - 40) = v26;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)(v24 - 40));
  if (a15 < 0)
    operator delete(__p);
  v30 = *(std::__shared_weak_count **)(v24 - 48);
  if (v30)
  {
    v31 = (unint64_t *)&v30->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<Espresso::ANECompilerEngine::elementwise_kernel::is_valid_for_engine(std::shared_ptr<Espresso::kernels_validation_status_t>,Espresso::base_kernel::validate_for_engine_args_t const&)::$_0,std::allocator<Espresso::ANECompilerEngine::elementwise_kernel::is_valid_for_engine(std::shared_ptr<Espresso::kernels_validation_status_t>,Espresso::base_kernel::validate_for_engine_args_t const&)::$_0>,void ()(std::string const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZNK8Espresso17ANECompilerEngine18elementwise_kernel19is_valid_for_engineENSt3__110shared_ptrINS_27kernels_validation_status_tEEERKNS_11base_kernel26validate_for_engine_args_tEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<Espresso::ANECompilerEngine::elementwise_kernel::is_valid_for_engine(std::shared_ptr<Espresso::kernels_validation_status_t>,Espresso::base_kernel::validate_for_engine_args_t const&)::$_0,std::allocator<Espresso::ANECompilerEngine::elementwise_kernel::is_valid_for_engine(std::shared_ptr<Espresso::kernels_validation_status_t>,Espresso::base_kernel::validate_for_engine_args_t const&)::$_0>,void ()(std::string const&)>::target_type()
{
}

void Espresso::ANECompilerEngine::mix_elementwise_kernel::~mix_elementwise_kernel(Espresso::ANECompilerEngine::mix_elementwise_kernel *this)
{
  void **v2;

  *(_QWORD *)this = &off_1E2D780E8;
  v2 = (void **)((char *)this + 336);
  *((_QWORD *)this + 42) = &unk_1E2D78258;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 552);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);
  Espresso::base_kernel::~base_kernel(this);
}

{
  void **v2;

  *(_QWORD *)this = &off_1E2D780E8;
  v2 = (void **)((char *)this + 336);
  *((_QWORD *)this + 42) = &unk_1E2D78258;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 552);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANECompilerEngine::mix_elementwise_kernel::compile(Espresso::ANECompilerEngine::mix_elementwise_kernel *this, Espresso::ANECompilerEngine::compiler *a2, std::string *a3)
{
  std::__shared_weak_count *v4;
  Espresso::net *v7;
  char *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  char *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  NSString *v16;
  NSString *v17;
  uint64_t v18;
  std::string *v19;
  std::string::pointer v20;
  unint64_t v21;
  char *v22;
  __int128 v23;
  Espresso::net *v24;
  __int128 v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  int v30;
  _QWORD *v31;
  uint64_t v32;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  const void *v37;
  _QWORD **v38;
  _QWORD **v39;
  std::string::size_type v40;
  unint64_t *v41;
  unint64_t v42;
  _QWORD *v43;
  std::string::size_type v44;
  std::string::size_type v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  Espresso::net *v56;
  uint64_t *v57;
  uint64_t v58;
  Espresso::net *v59;
  uint64_t *v60;
  unsigned int v61;
  char *v62;
  void *v63;
  void *v64;
  __CFString *v65;
  uint64_t v66;
  size_t size;
  std::string *v68;
  std::string *p_str;
  std::string *v70;
  std::string *v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  std::string *v76;
  Espresso::net *v77;
  _QWORD *v78;
  char *v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  char *v83;
  __int128 v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  Espresso::ANECompilerEngine::compiler *v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  const std::string *v97;
  unsigned __int8 *data;
  std::string *v99;
  uint64_t v100;
  uint64_t v101;
  std::string::size_type v102;
  int v103;
  std::string *v104;
  unint64_t v105;
  Espresso::ANECompilerEngine::compiler *v106;
  size_t v107;
  std::string *v108;
  std::string *v109;
  __CFString *v110;
  std::vector<std::string>::pointer begin;
  std::vector<std::string>::pointer i;
  unsigned int v113;
  __CFString *v114;
  int v115;
  const __CFString *v116;
  int v117;
  int v118;
  char v119;
  float v120;
  char v121;
  void *v122;
  std::string *v123;
  __int128 v124;
  std::string *v125;
  std::string::size_type v126;
  _OWORD *v127;
  __int128 v128;
  std::string *v129;
  __CFString *v130;
  float v131;
  uint64_t v132;
  float v133;
  float v134;
  float v135;
  float v136;
  void *v137;
  float v138;
  float v139;
  void *v140;
  std::string *v141;
  std::string *v142;
  unint64_t v143;
  unint64_t v144;
  unint64_t v145;
  uint64_t v146;
  __CFString *v147;
  uint64_t v148;
  __int128 v149;
  uint64_t v150;
  uint64_t v151;
  void *v156;
  void *v158;
  __CFString *v159;
  __CFString *v160;
  const __CFString *v161;
  std::string *v162;
  __CFString *v163;
  void *v164;
  void *v165;
  __CFString *v166;
  int v167;
  const __CFString *v168;
  const __CFString *v169;
  float v170;
  std::string *v171;
  std::string *v172;
  void *v175;
  void *v176;
  size_t v177;
  std::string *v178;
  std::string *v179;
  __CFString *v180;
  std::vector<std::string>::pointer v181;
  std::vector<std::string>::pointer j;
  uint64_t v183;
  __int128 v184;
  std::string *v185;
  void *v186;
  size_t v187;
  std::string *v188;
  std::string *v189;
  __CFString *v190;
  std::vector<std::string>::pointer v191;
  std::vector<std::string>::pointer k;
  __int128 v193;
  std::string *v194;
  std::string::pointer v195;
  __int128 *v196;
  __int128 v197;
  std::string *v198;
  void *v199;
  size_t v200;
  std::string *v201;
  std::string *v202;
  __CFString *v203;
  std::vector<std::string>::pointer v204;
  std::vector<std::string>::pointer m;
  __int128 v206;
  std::string *v207;
  std::string::pointer v208;
  __int128 *v209;
  __int128 v210;
  std::string *v211;
  void *v212;
  __CFString *v213;
  std::vector<std::string>::pointer v214;
  std::vector<std::string>::pointer n;
  __int128 v216;
  std::string *v217;
  __int128 v218;
  std::string *v219;
  void *v220;
  void *v221;
  float v222;
  void *v223;
  __CFString *v224;
  void *v225;
  __CFString *v226;
  unint64_t *v227;
  unint64_t v228;
  uint64_t v229;
  unint64_t *v230;
  unint64_t v231;
  void **v232;
  std::__shared_weak_count *v233;
  unint64_t *v234;
  unint64_t v235;
  float v236;
  unint64_t *v237;
  unint64_t v238;
  std::__shared_weak_count *v239;
  unint64_t *v240;
  unint64_t v241;
  unint64_t *v242;
  unint64_t v243;
  std::__shared_weak_count *v244;
  unint64_t *v245;
  unint64_t v246;
  Espresso::ANECompilerEngine::compiler *v247;
  std::string::size_type v248;
  uint64_t v249;
  uint64_t v250;
  int v251;
  uint64_t v252;
  uint64_t v253;
  int *v254;
  _WORD *v255;
  int v256;
  __int128 v258;
  std::__shared_weak_count *v259;
  unint64_t *v260;
  unint64_t v261;
  std::__shared_weak_count *v262;
  unint64_t *v263;
  unint64_t v264;
  uint64_t v265;
  int *v266;
  _WORD *v267;
  int v268;
  uint64_t v270;
  std::__shared_weak_count *v271;
  unint64_t *v272;
  unint64_t v273;
  uint64_t v274;
  unint64_t *v275;
  unint64_t v276;
  void *v277;
  id v278;
  void *v279;
  void *v280;
  void *v281;
  void *v282;
  uint64_t weights_file_index;
  void *v284;
  void *v285;
  __int128 v286;
  unint64_t *v287;
  unint64_t v288;
  uint64_t v289;
  unint64_t *v290;
  unint64_t v291;
  void *v292;
  void *v293;
  void *v294;
  uint64_t v295;
  void *v296;
  void *v297;
  std::string *v298;
  std::string *v299;
  uint64_t v300;
  char v301;
  std::string::size_type v302;
  std::string::size_type v303;
  std::string::size_type v304;
  std::string *v305;
  std::string *v306;
  const std::string::value_type *v307;
  __int128 v308;
  __CFString *v309;
  std::string *v310;
  std::string *v311;
  unint64_t v312;
  unint64_t v313;
  unint64_t v314;
  uint64_t v315;
  std::__shared_weak_count *v316;
  unint64_t *v317;
  unint64_t v318;
  std::__shared_weak_count *v319;
  unint64_t *v320;
  unint64_t v321;
  std::__shared_weak_count *v322;
  unint64_t *v323;
  unint64_t v324;
  std::__shared_weak_count *v325;
  unint64_t *v326;
  unint64_t v327;
  unint64_t *v328;
  unint64_t v329;
  unint64_t *v330;
  unint64_t v331;
  unint64_t *v332;
  unint64_t v333;
  void *v334;
  unint64_t *v335;
  unint64_t v336;
  std::__shared_weak_count *v337;
  unint64_t *v338;
  unint64_t v339;
  std::__shared_weak_count *v340;
  unint64_t *v341;
  unint64_t v342;
  __CFString *v343;
  void *v344;
  __CFString *v345;
  const char *v346;
  int *v347;
  uint64_t ii;
  float v349;
  int v350;
  _WORD *v351;
  int v352;
  std::runtime_error *exception;
  int *v355;
  uint64_t jj;
  int v357;
  int v358;
  unsigned int v359;
  unsigned int v360;
  int v361;
  Espresso *v362;
  const char *v363;
  float v364;
  NSObject *v366;
  double v367;
  uint64_t v368;
  _WORD *v369;
  int v370;
  unint64_t *v372;
  int location;
  Espresso::ANECompilerEngine::mix_elementwise_kernel *v374;
  id obj;
  Espresso::ANECompilerEngine *v376;
  std::__shared_weak_count *v377;
  std::__shared_weak_count *v378;
  std::string v379;
  std::string *v380;
  uint64_t v381;
  std::__shared_weak_count *v382;
  std::string v383;
  void *v384[5];
  void *v385[2];
  char v386;
  uint64_t v387;
  std::string *v388;
  uint64_t v389;
  void *v390;
  char v391;
  id v392;
  __CFString *v393;
  id v394[2];
  uint64_t v395;
  std::string *v396;
  unint64_t v397;
  uint64_t v398;
  std::__shared_weak_count *v399;
  uint64_t v400;
  std::__shared_weak_count *v401;
  Espresso::net *v402;
  std::__shared_weak_count *v403;
  __int128 v404;
  uint64_t v405;
  std::__shared_weak_count *v406;
  __int128 v407;
  uint64_t v408;
  std::__shared_weak_count *v409;
  uint64_t v410[2];
  std::vector<std::string> *v411;
  std::__shared_weak_count *v412;
  std::string v413;
  std::__shared_weak_count *v414;
  unsigned int v415;
  unsigned int v416;
  std::string __str;
  _BYTE v418[16];
  void *__p;
  std::vector<std::string> v420;
  void *v421;
  char v422;
  id v423;
  __CFString *v424;
  id v425[2];
  std::string v426;
  __int128 v427;
  void *v428;
  std::vector<std::string> v429;
  void *v430;
  char v431;
  id v432;
  __CFString *v433;
  id v434;
  std::string v435;
  __int128 v436;
  uint64_t v437;

  v437 = *MEMORY[0x1E0C80C00];
  v402 = 0;
  v403 = 0;
  v4 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
  if (!v4
    || (v403 = std::__shared_weak_count::lock(v4)) == 0
    || (v7 = (Espresso::net *)*((_QWORD *)a2 + 1), (v402 = v7) == 0))
  {
    v346 = "Inconsistent state: null network";
    goto LABEL_627;
  }
  if (!*((_QWORD *)v7 + 72))
  {
    v346 = "Inconsistent state: blob_storage";
LABEL_627:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v346);
  }
  __str.__r_.__value_.__r.__words[0] = a3[2].__r_.__value_.__r.__words[0];
  v8 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v7 + 136, (unsigned __int8 *)__str.__r_.__value_.__l.__data_, (__int128 **)&__str);
  v9 = (std::__shared_weak_count *)*((_QWORD *)v8 + 6);
  v400 = *((_QWORD *)v8 + 5);
  v401 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)a3;
  v12 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v7 + 136, (unsigned __int8 *)a3, (__int128 **)&__str);
  v13 = (std::__shared_weak_count *)*((_QWORD *)v12 + 6);
  v398 = *((_QWORD *)v12 + 5);
  v399 = v13;
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  Espresso::ANECompilerEngine::ane_arch_allow_network_override((uint64_t)v7 + 472);
  v376 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
  if (Espresso::ANECompilerEngine::is_mix(v376, v16))
  {
    Espresso::ANECompilerEngine::elementwise_kernel::compile(this, a2, (const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)a3);
    goto LABEL_602;
  }
  v395 = 0;
  v396 = 0;
  v397 = 0;
  obj = (id)objc_opt_new();
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t(v385, (id *)&a3->__r_.__value_.__l.__data_);
  if (*((_DWORD *)this + 70) == 1 && *((_QWORD *)this + 50))
  {
    Espresso::ANECompilerEngine::elementwise_kernel::compile(this, a2, (const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)a3);
    goto LABEL_597;
  }
  Espresso::net::get_producers_of_blobs(v7, (uint64_t)v384);
  v19 = v388;
  v18 = v389;
  v374 = this;
  if (v389 - (_QWORD)v388 != 48
    || *((_DWORD *)this + 70) != 23
    || (v20 = a3[2].__r_.__value_.__l.__data_, (std::string::pointer)a3[2].__r_.__value_.__l.__size_ == v20))
  {
LABEL_68:
    if (v18 - (_QWORD)v19 == 48 && *((float *)this + 73) != 0.0)
    {
      Espresso::ANECompilerEngine::elementwise_kernel::compile(this, a2, (const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)a3);
      goto LABEL_595;
    }
    if (Espresso::ANECompilerEngine::prefer_ne(v376, v17)
      && v389 - (_QWORD)v388 == 48
      && *((_DWORD *)this + 70) <= 1u)
    {
      if (std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>(v384, (uint64_t)v388))
      {
        v56 = v402;
        v57 = std::unordered_map<std::string,unsigned long>::at(v384, (uint64_t)v388);
        v58 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)(*(_QWORD *)(*((_QWORD *)v56 + 4) + 16 * *v57) + 40), "load_constant")- 1;
      }
      else
      {
        v58 = -1;
      }
      if (std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>(v384, (uint64_t)&v388[1])&& (v59 = v402, v60 = std::unordered_map<std::string,unsigned long>::at(v384, (uint64_t)&v388[1]), std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)(*(_QWORD *)(*((_QWORD *)v59 + 4) + 16 * *v60) + 40), "load_constant")))
      {
        v61 = 1;
      }
      else
      {
        if (v58 == -1)
          goto LABEL_87;
        v61 = 0;
        v59 = v402;
      }
      v426.__r_.__value_.__r.__words[0] = a3[2].__r_.__value_.__r.__words[0] + 24 * v61;
      v62 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v59 + 136, (unsigned __int8 *)v426.__r_.__value_.__l.__data_, (__int128 **)&v426);
      Espresso::abstract_blob_container::shape((char *)&__str, *((_QWORD *)v62 + 5));
      if (__str.__r_.__value_.__r.__words[0] == 0x100000001)
      {
        Espresso::ANECompilerEngine::elementwise_kernel::compile(this, a2, (const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)a3);
        v63 = __p;
        if (__p)
        {
          v420.__begin_ = (std::vector<std::string>::pointer)__p;
          goto LABEL_594;
        }
        goto LABEL_595;
      }
      if (__p)
      {
        v420.__begin_ = (std::vector<std::string>::pointer)__p;
        operator delete(__p);
      }
    }
LABEL_87:
    std::string::basic_string[abi:ne180100]<0>(&v383, "");
    if (*((_DWORD *)this + 70) == 102)
    {
      v64 = (void *)objc_opt_new();
      Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&__str.__r_.__value_.__l.__data_, (id *)&a3->__r_.__value_.__l.__data_);
      objc_msgSend(v64, "setObject:forKeyedSubscript:", CFSTR("Inv"), CFSTR("Type"));
      v65 = v424;
      v424 = CFSTR("Neuron");

      if (SHIBYTE(v420.__begin_[1].__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v426, v420.__begin_[1].__r_.__value_.__l.__data_, v420.__begin_[1].__r_.__value_.__l.__size_);
      else
        v426 = v420.__begin_[1];
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v420, &v426, &v427, 1uLL);
      if (SHIBYTE(v426.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v426.__r_.__value_.__l.__data_);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      else
        size = __str.__r_.__value_.__l.__size_;
      std::string::basic_string[abi:ne180100]((uint64_t)&v426, size + 4);
      if ((v426.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v68 = &v426;
      else
        v68 = (std::string *)v426.__r_.__value_.__r.__words[0];
      if (size)
      {
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_str = &__str;
        else
          p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
        memmove(v68, p_str, size);
      }
      strcpy((char *)v68 + size, "_inv");
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      __str = v426;
      objc_storeStrong(v425, v64);
      v70 = v396;
      if ((unint64_t)v396 >= v397)
      {
        v72 = 0x8E38E38E38E38E39 * (((uint64_t)v396 - v395) >> 4);
        if (v72 + 1 > 0x1C71C71C71C71C7)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v73 = 0x1C71C71C71C71C72 * ((uint64_t)(v397 - v395) >> 4);
        if (v73 <= v72 + 1)
          v73 = v72 + 1;
        if (0x8E38E38E38E38E39 * ((uint64_t)(v397 - v395) >> 4) >= 0xE38E38E38E38E3)
          v74 = 0x1C71C71C71C71C7;
        else
          v74 = v73;
        *((_QWORD *)&v427 + 1) = &v397;
        if (v74)
          v74 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v74);
        else
          v75 = 0;
        v426.__r_.__value_.__r.__words[0] = v74;
        v426.__r_.__value_.__l.__size_ = v74 + 144 * v72;
        v426.__r_.__value_.__r.__words[2] = v426.__r_.__value_.__l.__size_;
        *(_QWORD *)&v427 = v74 + 144 * v75;
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)v426.__r_.__value_.__l.__size_, (uint64_t)&__str);
        v426.__r_.__value_.__r.__words[2] += 144;
        std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v395, &v426);
        v71 = v396;
        std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&v426);
      }
      else
      {
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v396, (uint64_t)&__str);
        v71 = v70 + 6;
      }
      v396 = v71;
      v76 = std::string::operator=(v388 + 1, &__str);
      std::string::operator=(&v383, v76);
      v77 = v402;
      v78 = operator new(0xF0uLL);
      v78[1] = 0;
      v78[2] = 0;
      *v78 = &off_1E2DB9E90;
      Espresso::ANECompilerEngine::blob_container::blob_container((uint64_t)(v78 + 3), (_QWORD *)v77 + 2, 1);
      v435.__r_.__value_.__r.__words[0] = (std::string::size_type)(v78 + 3);
      v435.__r_.__value_.__l.__size_ = (std::string::size_type)v78;
      v413.__r_.__value_.__r.__words[0] = (std::string::size_type)v420.__begin_;
      v79 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v77 + 136, (unsigned __int8 *)v420.__begin_, (__int128 **)&v413);
      Espresso::abstract_blob_container::shape((char *)&v426, *((_QWORD *)v79 + 5));
      v381 = 0;
      v382 = 0;
      (*(void (**)(_QWORD *, std::string *, uint64_t *))(v78[3] + 16))(v78 + 3, &v426, &v381);
      v80 = v382;
      if (v382)
      {
        v81 = (unint64_t *)&v382->__shared_owners_;
        do
          v82 = __ldaxr(v81);
        while (__stlxr(v82 - 1, v81));
        if (!v82)
        {
          ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
          std::__shared_weak_count::__release_weak(v80);
        }
      }
      if (v428)
      {
        v429.__begin_ = (std::vector<std::string>::pointer)v428;
        operator delete(v428);
      }
      v426.__r_.__value_.__r.__words[0] = (std::string::size_type)&v383;
      v83 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v402 + 136, (unsigned __int8 *)&v383, (__int128 **)&v426);
      v84 = *(_OWORD *)&v435.__r_.__value_.__l.__data_;
      if (v435.__r_.__value_.__l.__size_)
      {
        v85 = (unint64_t *)(v435.__r_.__value_.__l.__size_ + 8);
        do
          v86 = __ldxr(v85);
        while (__stxr(v86 + 1, v85));
      }
      v87 = (std::__shared_weak_count *)*((_QWORD *)v83 + 6);
      *(_OWORD *)(v83 + 40) = v84;
      if (v87)
      {
        v88 = (unint64_t *)&v87->__shared_owners_;
        do
          v89 = __ldaxr(v88);
        while (__stlxr(v89 - 1, v88));
        if (!v89)
        {
          ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
          std::__shared_weak_count::__release_weak(v87);
        }
      }
      v90 = (std::__shared_weak_count *)v435.__r_.__value_.__l.__size_;
      if (v435.__r_.__value_.__l.__size_)
      {
        v91 = (unint64_t *)(v435.__r_.__value_.__l.__size_ + 8);
        do
          v92 = __ldaxr(v91);
        while (__stlxr(v92 - 1, v91));
        if (!v92)
        {
          ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
          std::__shared_weak_count::__release_weak(v90);
        }
      }

      if (v422 < 0)
        operator delete(v421);
      v426.__r_.__value_.__r.__words[0] = (std::string::size_type)&v420;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v426);
      v426.__r_.__value_.__r.__words[0] = (std::string::size_type)v418;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v426);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);

      v66 = -1;
      this = v374;
    }
    else
    {
      v66 = 0;
    }
    if (SHIBYTE(v383.__r_.__value_.__r.__words[2]) < 0)
    {
      v93 = a2;
      if (!v383.__r_.__value_.__l.__size_)
      {
LABEL_147:
        v94 = v395;
        v95 = 0x8E38E38E38E38E39 * (((uint64_t)v396 - v395) >> 4);
        if (v95 + v66)
        {
          v96 = 0;
          do
          {
            v97 = (const std::string *)(v94 + 144 * (v95 + ~v96));
            data = (unsigned __int8 *)v97[2].__r_.__value_.__l.__data_;
            v99 = v388;
            v100 = data[23];
            if ((v100 & 0x80u) == 0)
              v101 = data[23];
            else
              v101 = *((_QWORD *)data + 1);
            v102 = HIBYTE(v388->__r_.__value_.__r.__words[2]);
            v103 = (char)v102;
            if ((v102 & 0x80u) != 0)
              v102 = v388->__r_.__value_.__l.__size_;
            if (v101 != v102)
              goto LABEL_164;
            if (v103 >= 0)
              v104 = v388;
            else
              v104 = (std::string *)v388->__r_.__value_.__r.__words[0];
            if ((v100 & 0x80) != 0)
            {
              if (memcmp(*(const void **)data, v104, *((_QWORD *)data + 1)))
                goto LABEL_164;
            }
            else if (data[23])
            {
              while (*data == v104->__r_.__value_.__s.__data_[0])
              {
                ++data;
                v104 = (std::string *)((char *)v104 + 1);
                if (!--v100)
                  goto LABEL_165;
              }
LABEL_164:
              ++v99;
            }
LABEL_165:
            std::string::operator=(v99, v97);
            ++v96;
            v94 = v395;
            v95 = 0x8E38E38E38E38E39 * (((uint64_t)v396 - v395) >> 4);
          }
          while (v96 < v95 + v66);
        }
        v380 = a3;
        v105 = 0xAAAAAAAAAAAAAAABLL * ((v389 - (uint64_t)v388) >> 3);
        if (v105 != 1)
        {
          v106 = v93;
          if (v105 != 2)
          {
            if (v105 == 3 && *((_DWORD *)this + 70) == 101)
            {
              if ((a3->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v107 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
              else
                v107 = a3->__r_.__value_.__l.__size_;
              std::string::basic_string[abi:ne180100]((uint64_t)&v426, v107 + 5);
              if ((v426.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v108 = &v426;
              else
                v108 = (std::string *)v426.__r_.__value_.__r.__words[0];
              if (v107)
              {
                if ((a3->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v109 = a3;
                else
                  v109 = (std::string *)a3->__r_.__value_.__r.__words[0];
                memmove(v108, v109, v107);
              }
              strcpy((char *)v108 + v107, "__ne0");
              Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&__str.__r_.__value_.__l.__data_, (id *)&a3->__r_.__value_.__l.__data_);
              v110 = v424;
              v424 = CFSTR("ElementWise");

              begin = v420.__begin_;
              for (i = v420.__end_; i != begin; --i)
              {
                if (SHIBYTE(i[-1].__r_.__value_.__r.__words[2]) < 0)
                  operator delete(i[-1].__r_.__value_.__l.__data_);
              }
              v420.__end_ = begin;
              v148 = (uint64_t)a3[2].__r_.__value_.__l.__data_;
              if (begin >= v420.__end_cap_.__value_)
              {
                v162 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v420, v148);
              }
              else
              {
                if (*(char *)(v148 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external(begin, *(const std::string::value_type **)v148, *(_QWORD *)(v148 + 8));
                }
                else
                {
                  v149 = *(_OWORD *)v148;
                  begin->__r_.__value_.__r.__words[2] = *(_QWORD *)(v148 + 16);
                  *(_OWORD *)&begin->__r_.__value_.__l.__data_ = v149;
                }
                v162 = begin + 1;
              }
              v420.__end_ = v162;
              std::string::operator=(&__str, &v426);
              v176 = (void *)objc_opt_new();
              objc_msgSend(v176, "setObject:forKeyedSubscript:", CFSTR("NotEqualZero"), CFSTR("Type"));
              objc_storeStrong(v425, v176);
              Espresso::ANECompilerEngine::compiler::add_unit(v106, (const Espresso::ANECompilerEngine::compiler::unit_t *)&__str);

              if (v422 < 0)
                operator delete(v421);
              v435.__r_.__value_.__r.__words[0] = (std::string::size_type)&v420;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v435);
              v435.__r_.__value_.__r.__words[0] = (std::string::size_type)v418;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v435);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__str.__r_.__value_.__l.__data_);
              if ((a3->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v177 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
              else
                v177 = a3->__r_.__value_.__l.__size_;
              std::string::basic_string[abi:ne180100]((uint64_t)&v435, v177 + 5);
              if ((v435.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v178 = &v435;
              else
                v178 = (std::string *)v435.__r_.__value_.__r.__words[0];
              if (v177)
              {
                if ((a3->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v179 = a3;
                else
                  v179 = (std::string *)a3->__r_.__value_.__r.__words[0];
                memmove(v178, v179, v177);
              }
              strcpy((char *)v178 + v177, "__eq0");
              Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&__str.__r_.__value_.__l.__data_, (id *)&a3->__r_.__value_.__l.__data_);
              v180 = v424;
              v424 = CFSTR("ElementWise");

              v181 = v420.__begin_;
              for (j = v420.__end_; j != v181; --j)
              {
                if (SHIBYTE(j[-1].__r_.__value_.__r.__words[2]) < 0)
                  operator delete(j[-1].__r_.__value_.__l.__data_);
              }
              v420.__end_ = v181;
              v183 = (uint64_t)a3[2].__r_.__value_.__l.__data_;
              if (v181 >= v420.__end_cap_.__value_)
              {
                v185 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v420, v183);
              }
              else
              {
                if (*(char *)(v183 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external(v181, *(const std::string::value_type **)v183, *(_QWORD *)(v183 + 8));
                }
                else
                {
                  v184 = *(_OWORD *)v183;
                  v181->__r_.__value_.__r.__words[2] = *(_QWORD *)(v183 + 16);
                  *(_OWORD *)&v181->__r_.__value_.__l.__data_ = v184;
                }
                v185 = v181 + 1;
              }
              v420.__end_ = v185;
              std::string::operator=(&__str, &v435);
              v186 = (void *)objc_opt_new();
              objc_msgSend(v186, "setObject:forKeyedSubscript:", CFSTR("EqualZero"), CFSTR("Type"));
              objc_storeStrong(v425, v186);
              Espresso::ANECompilerEngine::compiler::add_unit(v106, (const Espresso::ANECompilerEngine::compiler::unit_t *)&__str);

              if (v422 < 0)
                operator delete(v421);
              v413.__r_.__value_.__r.__words[0] = (std::string::size_type)&v420;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v413);
              v413.__r_.__value_.__r.__words[0] = (std::string::size_type)v418;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v413);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__str.__r_.__value_.__l.__data_);
              if ((a3->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v187 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
              else
                v187 = a3->__r_.__value_.__l.__size_;
              std::string::basic_string[abi:ne180100]((uint64_t)&v413, v187 + 7);
              if ((v413.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v188 = &v413;
              else
                v188 = (std::string *)v413.__r_.__value_.__r.__words[0];
              if (v187)
              {
                if ((a3->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v189 = a3;
                else
                  v189 = (std::string *)a3->__r_.__value_.__r.__words[0];
                memmove(v188, v189, v187);
              }
              strcpy((char *)v188 + v187, "__mul_0");
              Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&__str.__r_.__value_.__l.__data_, (id *)&a3->__r_.__value_.__l.__data_);
              v190 = v424;
              v424 = CFSTR("ElementWise");

              v191 = v420.__begin_;
              for (k = v420.__end_; k != v191; --k)
              {
                if (SHIBYTE(k[-1].__r_.__value_.__r.__words[2]) < 0)
                  operator delete(k[-1].__r_.__value_.__l.__data_);
              }
              v420.__end_ = v191;
              if (v191 >= v420.__end_cap_.__value_)
              {
                v194 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v420, (uint64_t)&v426);
              }
              else
              {
                if (SHIBYTE(v426.__r_.__value_.__r.__words[2]) < 0)
                {
                  std::string::__init_copy_ctor_external(v191, v426.__r_.__value_.__l.__data_, v426.__r_.__value_.__l.__size_);
                }
                else
                {
                  v193 = *(_OWORD *)&v426.__r_.__value_.__l.__data_;
                  v191->__r_.__value_.__r.__words[2] = v426.__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v191->__r_.__value_.__l.__data_ = v193;
                }
                v194 = v191 + 1;
              }
              v420.__end_ = v194;
              v195 = a3[2].__r_.__value_.__l.__data_;
              v196 = (__int128 *)(v195 + 24);
              if (v194 >= v420.__end_cap_.__value_)
              {
                v198 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v420, (uint64_t)v196);
              }
              else
              {
                if (v195[47] < 0)
                {
                  std::string::__init_copy_ctor_external(v194, *((const std::string::value_type **)v195 + 3), *((_QWORD *)v195 + 4));
                }
                else
                {
                  v197 = *v196;
                  v194->__r_.__value_.__r.__words[2] = *((_QWORD *)v195 + 5);
                  *(_OWORD *)&v194->__r_.__value_.__l.__data_ = v197;
                }
                v198 = v194 + 1;
              }
              v420.__end_ = v198;
              std::string::operator=(&__str, &v413);
              v199 = (void *)objc_opt_new();
              objc_msgSend(v199, "setObject:forKeyedSubscript:", CFSTR("Mult"), CFSTR("Type"));
              objc_storeStrong(v425, v199);
              Espresso::ANECompilerEngine::compiler::add_unit(v106, (const Espresso::ANECompilerEngine::compiler::unit_t *)&__str);

              if (v422 < 0)
                operator delete(v421);
              v379.__r_.__value_.__r.__words[0] = (std::string::size_type)&v420;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v379);
              v379.__r_.__value_.__r.__words[0] = (std::string::size_type)v418;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v379);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__str.__r_.__value_.__l.__data_);
              if ((a3->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v200 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
              else
                v200 = a3->__r_.__value_.__l.__size_;
              std::string::basic_string[abi:ne180100]((uint64_t)&v379, v200 + 7);
              if ((v379.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v201 = &v379;
              else
                v201 = (std::string *)v379.__r_.__value_.__r.__words[0];
              if (v200)
              {
                if ((a3->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v202 = a3;
                else
                  v202 = (std::string *)a3->__r_.__value_.__r.__words[0];
                memmove(v201, v202, v200);
              }
              strcpy((char *)v201 + v200, "__mul_1");
              Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&__str.__r_.__value_.__l.__data_, (id *)&a3->__r_.__value_.__l.__data_);
              v203 = v424;
              v424 = CFSTR("ElementWise");

              v204 = v420.__begin_;
              for (m = v420.__end_; m != v204; --m)
              {
                if (SHIBYTE(m[-1].__r_.__value_.__r.__words[2]) < 0)
                  operator delete(m[-1].__r_.__value_.__l.__data_);
              }
              v420.__end_ = v204;
              if (v204 >= v420.__end_cap_.__value_)
              {
                v207 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v420, (uint64_t)&v435);
              }
              else
              {
                if (SHIBYTE(v435.__r_.__value_.__r.__words[2]) < 0)
                {
                  std::string::__init_copy_ctor_external(v204, v435.__r_.__value_.__l.__data_, v435.__r_.__value_.__l.__size_);
                }
                else
                {
                  v206 = *(_OWORD *)&v435.__r_.__value_.__l.__data_;
                  v204->__r_.__value_.__r.__words[2] = v435.__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v204->__r_.__value_.__l.__data_ = v206;
                }
                v207 = v204 + 1;
              }
              v420.__end_ = v207;
              v208 = a3[2].__r_.__value_.__l.__data_;
              v209 = (__int128 *)(v208 + 48);
              if (v207 >= v420.__end_cap_.__value_)
              {
                v211 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v420, (uint64_t)v209);
              }
              else
              {
                if (v208[71] < 0)
                {
                  std::string::__init_copy_ctor_external(v207, *((const std::string::value_type **)v208 + 6), *((_QWORD *)v208 + 7));
                }
                else
                {
                  v210 = *v209;
                  v207->__r_.__value_.__r.__words[2] = *((_QWORD *)v208 + 8);
                  *(_OWORD *)&v207->__r_.__value_.__l.__data_ = v210;
                }
                v211 = v207 + 1;
              }
              v420.__end_ = v211;
              std::string::operator=(&__str, &v379);
              v212 = (void *)objc_opt_new();
              objc_msgSend(v212, "setObject:forKeyedSubscript:", CFSTR("Mult"), CFSTR("Type"));
              objc_storeStrong(v425, v212);
              Espresso::ANECompilerEngine::compiler::add_unit(v106, (const Espresso::ANECompilerEngine::compiler::unit_t *)&__str);

              if (v422 < 0)
                operator delete(v421);
              v411 = &v420;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v411);
              v411 = (std::vector<std::string> *)v418;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v411);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__str.__r_.__value_.__l.__data_);
              Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&__str.__r_.__value_.__l.__data_, (id *)&a3->__r_.__value_.__l.__data_);
              v213 = v424;
              v424 = CFSTR("ElementWise");

              v214 = v420.__begin_;
              for (n = v420.__end_; n != v214; --n)
              {
                if (SHIBYTE(n[-1].__r_.__value_.__r.__words[2]) < 0)
                  operator delete(n[-1].__r_.__value_.__l.__data_);
              }
              v420.__end_ = v214;
              if (v214 >= v420.__end_cap_.__value_)
              {
                v217 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v420, (uint64_t)&v413);
              }
              else
              {
                if (SHIBYTE(v413.__r_.__value_.__r.__words[2]) < 0)
                {
                  std::string::__init_copy_ctor_external(v214, v413.__r_.__value_.__l.__data_, v413.__r_.__value_.__l.__size_);
                }
                else
                {
                  v216 = *(_OWORD *)&v413.__r_.__value_.__l.__data_;
                  v214->__r_.__value_.__r.__words[2] = v413.__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v214->__r_.__value_.__l.__data_ = v216;
                }
                v217 = v214 + 1;
              }
              v420.__end_ = v217;
              if (v217 >= v420.__end_cap_.__value_)
              {
                v219 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v420, (uint64_t)&v379);
              }
              else
              {
                if (SHIBYTE(v379.__r_.__value_.__r.__words[2]) < 0)
                {
                  std::string::__init_copy_ctor_external(v217, v379.__r_.__value_.__l.__data_, v379.__r_.__value_.__l.__size_);
                }
                else
                {
                  v218 = *(_OWORD *)&v379.__r_.__value_.__l.__data_;
                  v217->__r_.__value_.__r.__words[2] = v379.__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v217->__r_.__value_.__l.__data_ = v218;
                }
                v219 = v217 + 1;
              }
              v420.__end_ = v219;
              std::string::operator=(&__str, a3);
              v220 = (void *)objc_opt_new();
              objc_msgSend(v220, "setObject:forKeyedSubscript:", CFSTR("Add"), CFSTR("Type"));
              objc_storeStrong(v425, v220);
              Espresso::ANECompilerEngine::compiler::add_unit(v106, (const Espresso::ANECompilerEngine::compiler::unit_t *)&__str);

              if (v422 < 0)
                operator delete(v421);
              v411 = &v420;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v411);
              v411 = (std::vector<std::string> *)v418;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v411);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__str.__r_.__value_.__l.__data_);
              if (SHIBYTE(v379.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v379.__r_.__value_.__l.__data_);
              if (SHIBYTE(v413.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v413.__r_.__value_.__l.__data_);
              if (SHIBYTE(v435.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v435.__r_.__value_.__l.__data_);
              if (SHIBYTE(v426.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v426.__r_.__value_.__l.__data_);
              goto LABEL_592;
            }
LABEL_436:
            v378 = v403;
            if (v403)
            {
              v227 = (unint64_t *)&v403->__shared_owners_;
              do
                v228 = __ldxr(v227);
              while (__stxr(v228 + 1, v227));
            }
            v229 = v398;
            v377 = v399;
            if (v399)
            {
              v230 = (unint64_t *)&v399->__shared_owners_;
              do
                v231 = __ldxr(v230);
              while (__stxr(v231 + 1, v230));
            }
            Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t((Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)&__str);
            v425[0] = 0;
            v424 = 0;
            v425[1] = (id)0x100000000;
            v232 = (void **)*((_QWORD *)this + 50);
            v233 = (std::__shared_weak_count *)*((_QWORD *)this + 51);
            v379.__r_.__value_.__r.__words[0] = (std::string::size_type)v232;
            v379.__r_.__value_.__l.__size_ = (std::string::size_type)v233;
            if (v233)
            {
              v234 = (unint64_t *)&v233->__shared_owners_;
              do
                v235 = __ldxr(v234);
              while (__stxr(v235 + 1, v234));
            }
            if (!v232
              || *(_BYTE *)((*(uint64_t (**)(Espresso::ANECompilerEngine::mix_elementwise_kernel *))(*(_QWORD *)this + 344))(this)
                          + 40))
            {
              goto LABEL_572;
            }
            v236 = *(float *)(v229 + 112);
            v411 = (std::vector<std::string> *)v232;
            v412 = v233;
            if (v233)
            {
              v237 = (unint64_t *)&v233->__shared_owners_;
              do
                v238 = __ldxr(v237);
              while (__stxr(v238 + 1, v237));
            }
            v239 = (std::__shared_weak_count *)*((_QWORD *)this + 53);
            v410[0] = *((_QWORD *)this + 52);
            v410[1] = (uint64_t)v239;
            if (v239)
            {
              v240 = (unint64_t *)&v239->__shared_owners_;
              do
                v241 = __ldxr(v240);
              while (__stxr(v241 + 1, v240));
            }
            Espresso::ane_style_post_scale_bias((uint64_t)&v411, v410, (uint64_t)&v413, v236);
            if (v239)
            {
              v242 = (unint64_t *)&v239->__shared_owners_;
              do
                v243 = __ldaxr(v242);
              while (__stlxr(v243 - 1, v242));
              if (!v243)
              {
                ((void (*)(std::__shared_weak_count *))v239->__on_zero_shared)(v239);
                std::__shared_weak_count::__release_weak(v239);
              }
            }
            v244 = v412;
            if (v412)
            {
              v245 = (unint64_t *)&v412->__shared_owners_;
              do
                v246 = __ldaxr(v245);
              while (__stlxr(v246 - 1, v245));
              if (!v246)
              {
                ((void (*)(std::__shared_weak_count *))v244->__on_zero_shared)(v244);
                std::__shared_weak_count::__release_weak(v244);
              }
            }
            v247 = v106;
            v248 = v379.__r_.__value_.__r.__words[0];
            v249 = *(unsigned int *)(v379.__r_.__value_.__r.__words[0] + 8);
            std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v408, 2 * v249, 1, 1, 1);
            v250 = (int)v249;
            v407 = 0uLL;
            v251 = v249;
            v252 = *((_QWORD *)this + 52);
            if (v252)
              v251 = *(_DWORD *)(v252 + 8);
            if (!*((_BYTE *)v247 + 384))
            {
              Espresso::blob<unsigned char,1>::make(&v435, 4 * v249);
              v347 = *(int **)(v435.__r_.__value_.__r.__words[0] + 16);
              if ((int)v249 >= 1)
              {
                for (ii = 0; ii != v249; ++ii)
                {
                  v349 = *(float *)(*(_QWORD *)(v248 + 16) + ii * 4);
                  *(float *)&v350 = ldexp(1.0, -v415) * v349;
                  v347[ii] = v350;
                }
              }
              if ((_DWORD)v249)
              {
                v351 = *(_WORD **)(v408 + 16);
                do
                {
                  v352 = *v347++;
                  _S0 = v352;
                  __asm { FCVT            H0, S0 }
                  *v351++ = _S0;
                  --v250;
                }
                while (v250);
              }
              v405 = 0;
              v406 = 0;
              if (*((_QWORD *)v374 + 52))
              {
                Espresso::blob<unsigned char,1>::make(&v426, 4 * v251);
                std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)&v405, (__int128 *)&v426);
                std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v426);
                Espresso::blob<unsigned char,1>::make(&v426, 2 * v251);
                std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)&v407, (__int128 *)&v426);
                std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v426);
                v355 = *(int **)(v405 + 16);
                if (v251 >= 1)
                {
                  for (jj = 0; jj != v251; ++jj)
                  {
                    if ((int)v249 - 1 >= (int)jj)
                      v357 = jj;
                    else
                      v357 = v249 - 1;
                    *(float *)&v358 = *(float *)(*(_QWORD *)(v413.__r_.__value_.__r.__words[2] + 16) + 4 * jj)
                                    * *(float *)(*(_QWORD *)(v413.__r_.__value_.__r.__words[0] + 16) + 4 * v357);
                    v355[jj] = v358;
                    v359 = v416;
                    v360 = v415;
                    *(float *)&v361 = ldexp(1.0, v416 - v415) * *(float *)&v358;
                    v355[jj] = v361;
                    v364 = ldexp(1.0, v360 - v359) * *(float *)&v361;
                    if (v364 < -127.0 || v364 > 255.0)
                    {
                      Espresso::espresso_os_log_subsystem(v362, v363);
                      v366 = objc_claimAutoreleasedReturnValue();
                      if (os_log_type_enabled(v366, OS_LOG_TYPE_ERROR))
                      {
                        v367 = *(float *)&v355[jj];
                        LODWORD(v426.__r_.__value_.__l.__data_) = 134218752;
                        *(double *)((char *)v426.__r_.__value_.__r.__words + 4) = v364;
                        WORD2(v426.__r_.__value_.__r.__words[1]) = 1024;
                        *(_DWORD *)((char *)&v426.__r_.__value_.__r.__words[1] + 6) = v416;
                        WORD1(v426.__r_.__value_.__r.__words[2]) = 1024;
                        HIDWORD(v426.__r_.__value_.__r.__words[2]) = v415;
                        LOWORD(v427) = 2048;
                        *(double *)((char *)&v427 + 2) = v367;
                        _os_log_error_impl(&dword_190DAF000, v366, OS_LOG_TYPE_ERROR, "[ANEC::add_ane_scale_bias_unit] Shifted bias overflowing shifted_b=%f acc_bias_shift=%d post_right_shift=%d anebias=%f", (uint8_t *)&v426, 0x22u);
                      }

                    }
                  }
                }
                if (v251)
                {
                  v368 = v251;
                  v369 = *(_WORD **)(v407 + 16);
                  do
                  {
                    v370 = *v355++;
                    _S0 = v370;
                    __asm { FCVT            H0, S0 }
                    *v369++ = _S0;
                    --v368;
                  }
                  while (v368);
                }
              }
              exception = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
              Espresso::not_implemented_error::not_implemented_error(exception);
            }
            v253 = v416;
            if ((_DWORD)v249)
            {
              v254 = *(int **)(v413.__r_.__value_.__r.__words[0] + 16);
              v255 = *(_WORD **)(v408 + 16);
              do
              {
                v256 = *v254++;
                _S0 = v256;
                __asm { FCVT            H0, S0 }
                *v255++ = _S0;
                --v250;
              }
              while (v250);
            }
            v106 = v247;
            if (v252)
            {
              std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v426, 2 * v251, 1, 1, 1);
              v258 = *(_OWORD *)&v426.__r_.__value_.__l.__data_;
              *(_OWORD *)&v426.__r_.__value_.__l.__data_ = 0uLL;
              v259 = (std::__shared_weak_count *)*((_QWORD *)&v407 + 1);
              v407 = v258;
              if (v259)
              {
                v260 = (unint64_t *)&v259->__shared_owners_;
                do
                  v261 = __ldaxr(v260);
                while (__stlxr(v261 - 1, v260));
                if (!v261)
                {
                  ((void (*)(std::__shared_weak_count *))v259->__on_zero_shared)(v259);
                  std::__shared_weak_count::__release_weak(v259);
                }
              }
              v262 = (std::__shared_weak_count *)v426.__r_.__value_.__l.__size_;
              if (v426.__r_.__value_.__l.__size_)
              {
                v263 = (unint64_t *)(v426.__r_.__value_.__l.__size_ + 8);
                do
                  v264 = __ldaxr(v263);
                while (__stlxr(v264 - 1, v263));
                if (!v264)
                {
                  ((void (*)(std::__shared_weak_count *))v262->__on_zero_shared)(v262);
                  std::__shared_weak_count::__release_weak(v262);
                }
              }
              if (v251)
              {
                v265 = v251;
                v266 = *(int **)(v413.__r_.__value_.__r.__words[2] + 16);
                v267 = *(_WORD **)(v407 + 16);
                do
                {
                  v268 = *v266++;
                  _S0 = v268;
                  __asm { FCVT            H0, S0 }
                  *v267++ = _S0;
                  --v265;
                }
                while (v265);
              }
            }
            location = *((unsigned __int8 *)v247 + 552);
            v270 = v408;
            v271 = v409;
            v405 = v408;
            v406 = v409;
            if (v409)
            {
              v272 = (unint64_t *)&v409->__shared_owners_;
              do
                v273 = __ldxr(v272);
              while (__stxr(v273 + 1, v272));
            }
            v274 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler *)((char *)v247 + 128), *(const unsigned __int8 **)(v270 + 16), *(int *)(v270 + 8));
            if (v271)
            {
              v275 = (unint64_t *)&v271->__shared_owners_;
              do
                v276 = __ldaxr(v275);
              while (__stlxr(v276 - 1, v275));
              if (!v276)
              {
                ((void (*)(std::__shared_weak_count *))v271->__on_zero_shared)(v271);
                std::__shared_weak_count::__release_weak(v271);
              }
            }
            v277 = (void *)objc_opt_new();
            if (*((_BYTE *)v247 + 121))
            {
              v278 = *(id *)(v395 + 128);

              v277 = v278;
            }
            v279 = (void *)objc_opt_new();
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v249);
            v280 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v279, "setObject:forKeyedSubscript:", v280, CFSTR("ScaleCount"));

            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v274);
            v281 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v279, "setObject:forKeyedSubscript:", v281, CFSTR("ScaleOffset"));

            v282 = (void *)MEMORY[0x1E0CB37E8];
            if (location)
              weights_file_index = 0;
            else
            objc_msgSend(v282, "numberWithUnsignedLong:", weights_file_index, v372);
            v284 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v279, "setObject:forKeyedSubscript:", v284, CFSTR("ScaleIndex"));

            objc_msgSend(v279, "setObject:forKeyedSubscript:", CFSTR("Float16"), CFSTR("ScaleType"));
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v415);
            v285 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v277, "setObject:forKeyedSubscript:", v285, CFSTR("ScaleShift"));

            if (*((_QWORD *)v374 + 52))
            {
              v286 = v407;
              v404 = v407;
              if (*((_QWORD *)&v407 + 1))
              {
                v287 = (unint64_t *)(*((_QWORD *)&v407 + 1) + 8);
                do
                  v288 = __ldxr(v287);
                while (__stxr(v288 + 1, v287));
              }
              v289 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler *)((char *)v247 + 128), *(const unsigned __int8 **)(v286 + 16), *(int *)(v286 + 8));
              if (*((_QWORD *)&v286 + 1))
              {
                v290 = (unint64_t *)(*((_QWORD *)&v286 + 1) + 8);
                do
                  v291 = __ldaxr(v290);
                while (__stlxr(v291 - 1, v290));
                if (!v291)
                {
                  (*(void (**)(_QWORD))(**((_QWORD **)&v286 + 1) + 16))(*((_QWORD *)&v286 + 1));
                  std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v286 + 1));
                }
              }
              objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *(unsigned int *)(*((_QWORD *)v374 + 52) + 8));
              v292 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v279, "setObject:forKeyedSubscript:", v292, CFSTR("BiasCount"));

              objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v289);
              v293 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v279, "setObject:forKeyedSubscript:", v293, CFSTR("BiasOffset"));

              v294 = (void *)MEMORY[0x1E0CB37E8];
              if (location)
                v295 = 0;
              else
              objc_msgSend(v294, "numberWithUnsignedLong:", v295);
              v296 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v279, "setObject:forKeyedSubscript:", v296, CFSTR("BiasIndex"));

              objc_msgSend(v279, "setObject:forKeyedSubscript:", CFSTR("Float16"), CFSTR("BiasType"));
              objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v253);
              v297 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v277, "setObject:forKeyedSubscript:", v297, CFSTR("BiasShift"));

            }
            objc_msgSend(v277, "setObject:forKeyedSubscript:", v279, CFSTR("BiasScaleGroupData"));
            Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v426.__r_.__value_.__l.__data_, (id *)&a3->__r_.__value_.__l.__data_);
            v298 = v396;
            if (v396 == (std::string *)v395)
            {
LABEL_533:
              v309 = v433;
              v433 = CFSTR("GOC");

              objc_storeStrong(&v434, v277);
              if (!*((_BYTE *)v106 + 121))
              {
                v310 = v396;
                if ((unint64_t)v396 >= v397)
                {
                  v312 = 0x8E38E38E38E38E39 * (((uint64_t)v396 - v395) >> 4);
                  if (v312 + 1 > 0x1C71C71C71C71C7)
                    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                  v313 = 0x1C71C71C71C71C72 * ((uint64_t)(v397 - v395) >> 4);
                  if (v313 <= v312 + 1)
                    v313 = v312 + 1;
                  if (0x8E38E38E38E38E39 * ((uint64_t)(v397 - v395) >> 4) >= 0xE38E38E38E38E3)
                    v314 = 0x1C71C71C71C71C7;
                  else
                    v314 = v313;
                  *((_QWORD *)&v436 + 1) = &v397;
                  if (v314)
                    v314 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v314);
                  else
                    v315 = 0;
                  v435.__r_.__value_.__r.__words[0] = v314;
                  v435.__r_.__value_.__l.__size_ = v314 + 144 * v312;
                  v435.__r_.__value_.__r.__words[2] = v435.__r_.__value_.__l.__size_;
                  *(_QWORD *)&v436 = v314 + 144 * v315;
                  std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)v435.__r_.__value_.__l.__size_, (uint64_t)&v426);
                  v435.__r_.__value_.__r.__words[2] += 144;
                  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v395, &v435);
                  v311 = v396;
                  std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&v435);
                }
                else
                {
                  std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v396, (uint64_t)&v426);
                  v311 = v310 + 6;
                }
                v396 = v311;
              }

              if (v431 < 0)
                operator delete(v430);
              v435.__r_.__value_.__r.__words[0] = (std::string::size_type)&v429;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v435);
              v435.__r_.__value_.__r.__words[0] = (std::string::size_type)&v427;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v435);
              if (SHIBYTE(v426.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v426.__r_.__value_.__l.__data_);

              v316 = (std::__shared_weak_count *)*((_QWORD *)&v407 + 1);
              if (*((_QWORD *)&v407 + 1))
              {
                v317 = (unint64_t *)(*((_QWORD *)&v407 + 1) + 8);
                do
                  v318 = __ldaxr(v317);
                while (__stlxr(v318 - 1, v317));
                if (!v318)
                {
                  ((void (*)(std::__shared_weak_count *))v316->__on_zero_shared)(v316);
                  std::__shared_weak_count::__release_weak(v316);
                }
              }
              v319 = v409;
              if (v409)
              {
                v320 = (unint64_t *)&v409->__shared_owners_;
                do
                  v321 = __ldaxr(v320);
                while (__stlxr(v321 - 1, v320));
                if (!v321)
                {
                  ((void (*)(std::__shared_weak_count *))v319->__on_zero_shared)(v319);
                  std::__shared_weak_count::__release_weak(v319);
                }
              }
              v322 = v414;
              if (v414)
              {
                v323 = (unint64_t *)&v414->__shared_owners_;
                do
                  v324 = __ldaxr(v323);
                while (__stlxr(v324 - 1, v323));
                if (!v324)
                {
                  ((void (*)(std::__shared_weak_count *))v322->__on_zero_shared)(v322);
                  std::__shared_weak_count::__release_weak(v322);
                }
              }
              v325 = (std::__shared_weak_count *)v413.__r_.__value_.__l.__size_;
              if (v413.__r_.__value_.__l.__size_)
              {
                v326 = (unint64_t *)(v413.__r_.__value_.__l.__size_ + 8);
                do
                  v327 = __ldaxr(v326);
                while (__stlxr(v327 - 1, v326));
                if (!v327)
                {
                  ((void (*)(std::__shared_weak_count *))v325->__on_zero_shared)(v325);
                  std::__shared_weak_count::__release_weak(v325);
                }
              }
              v233 = (std::__shared_weak_count *)v379.__r_.__value_.__l.__size_;
LABEL_572:
              if (v233)
              {
                v328 = (unint64_t *)&v233->__shared_owners_;
                do
                  v329 = __ldaxr(v328);
                while (__stlxr(v329 - 1, v328));
                if (!v329)
                {
                  ((void (*)(std::__shared_weak_count *))v233->__on_zero_shared)(v233);
                  std::__shared_weak_count::__release_weak(v233);
                }
              }

              if (v422 < 0)
                operator delete(v421);
              v426.__r_.__value_.__r.__words[0] = (std::string::size_type)&v420;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v426);
              v426.__r_.__value_.__r.__words[0] = (std::string::size_type)v418;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v426);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__str.__r_.__value_.__l.__data_);
              if (v377)
              {
                v330 = (unint64_t *)&v377->__shared_owners_;
                do
                  v331 = __ldaxr(v330);
                while (__stlxr(v331 - 1, v330));
                if (!v331)
                {
                  ((void (*)(std::__shared_weak_count *))v377->__on_zero_shared)(v377);
                  std::__shared_weak_count::__release_weak(v377);
                }
              }
              if (v378)
              {
                v332 = (unint64_t *)&v378->__shared_owners_;
                do
                  v333 = __ldaxr(v332);
                while (__stlxr(v333 - 1, v332));
                if (!v333)
                {
                  ((void (*)(std::__shared_weak_count *))v378->__on_zero_shared)(v378);
                  std::__shared_weak_count::__release_weak(v378);
                }
              }
              (*(void (**)(uint64_t, Espresso::ANECompilerEngine::compiler *, uint64_t *))(*((_QWORD *)v374 + 42)
                                                                                                  + 24))((uint64_t)v374 + 336, v106, &v395);
LABEL_592:
              if (SHIBYTE(v383.__r_.__value_.__r.__words[2]) < 0)
              {
                v63 = (void *)v383.__r_.__value_.__r.__words[0];
LABEL_594:
                operator delete(v63);
              }
              goto LABEL_595;
            }
            v299 = v396 - 6;
            v300 = HIBYTE(v396[-6].__r_.__value_.__r.__words[2]);
            v301 = v300;
            v302 = v396[-6].__r_.__value_.__l.__size_;
            if ((v300 & 0x80u) == 0)
              v303 = HIBYTE(v396[-6].__r_.__value_.__r.__words[2]);
            else
              v303 = v396[-6].__r_.__value_.__l.__size_;
            v304 = HIBYTE(v426.__r_.__value_.__r.__words[2]);
            if ((v426.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v304 = v426.__r_.__value_.__l.__size_;
            if (v303 != v304)
              goto LABEL_527;
            if ((v426.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v305 = &v426;
            else
              v305 = (std::string *)v426.__r_.__value_.__r.__words[0];
            if ((char)v300 < 0)
            {
              v307 = (const std::string::value_type *)v299->__r_.__value_.__r.__words[0];
              if (memcmp(v299->__r_.__value_.__l.__data_, v305, v396[-6].__r_.__value_.__l.__size_))
                goto LABEL_530;
            }
            else if ((_BYTE)v300)
            {
              v306 = v396 - 6;
              while (v306->__r_.__value_.__s.__data_[0] == v305->__r_.__value_.__s.__data_[0])
              {
                v306 = (std::string *)((char *)v306 + 1);
                v305 = (std::string *)((char *)v305 + 1);
                if (!--v300)
                  goto LABEL_526;
              }
              goto LABEL_527;
            }
LABEL_526:
            std::string::append(v298 - 6, "__@pre_scale_bias");
            v301 = HIBYTE(v298[-6].__r_.__value_.__r.__words[2]);
LABEL_527:
            if ((v301 & 0x80) == 0)
            {
              v308 = *(_OWORD *)&v299->__r_.__value_.__l.__data_;
              v435.__r_.__value_.__r.__words[2] = v298[-6].__r_.__value_.__r.__words[2];
              *(_OWORD *)&v435.__r_.__value_.__l.__data_ = v308;
              goto LABEL_531;
            }
            v307 = v298[-6].__r_.__value_.__l.__data_;
            v302 = v298[-6].__r_.__value_.__l.__size_;
LABEL_530:
            std::string::__init_copy_ctor_external(&v435, v307, v302);
LABEL_531:
            std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v429, &v435, &v436, 1uLL);
            if (SHIBYTE(v435.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v435.__r_.__value_.__l.__data_);
            goto LABEL_533;
          }
          v113 = *((_DWORD *)this + 70);
          if (v113 <= 0x21)
          {
            if (((1 << v113) & 0xC00002) != 0)
            {
              v114 = v393;
              v393 = CFSTR("ScaledElementWise");

              v115 = *((_DWORD *)v374 + 70);
              switch(v115)
              {
                case 1:
                  v116 = CFSTR("Mult");
                  break;
                case 22:
                  v116 = CFSTR("Min");
                  break;
                case 23:
                  v116 = CFSTR("Max");
                  break;
                default:
LABEL_280:
                  objc_storeStrong(v394, obj);
                  v171 = v396;
                  if ((unint64_t)v396 >= v397)
                  {
                    v172 = (std::string *)std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__push_back_slow_path<Espresso::ANECompilerEngine::compiler::unit_t const&>(&v395, (uint64_t)v385);
                  }
                  else
                  {
                    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v396, (uint64_t)v385);
                    v172 = v171 + 6;
                  }
                  this = v374;
                  v396 = v172;
                  goto LABEL_284;
              }
              objc_msgSend(obj, "setObject:forKeyedSubscript:", v116, CFSTR("Type"));
              goto LABEL_280;
            }
            if (((1 << v113) & 0x200000001) != 0)
            {
              v150 = (*(uint64_t (**)(Espresso::ANECompilerEngine::mix_elementwise_kernel *))(*(_QWORD *)this + 344))(this);
              v151 = v150;
              if (*(_BYTE *)(v150 + 53))
              {
                _S0 = *(_DWORD *)(v150 + 56);
                __asm { FCVT            H0, S0 }
                objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithShort:", (__int16)_S0);
                v156 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(obj, "setObject:forKeyedSubscript:", v156, CFSTR("PreScale"));

                _S0 = *(_DWORD *)(v151 + 60);
                __asm { FCVT            H0, S0 }
                objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithShort:", (__int16)_S0);
                v158 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(obj, "setObject:forKeyedSubscript:", v158, CFSTR("Scale"));

              }
              v159 = v393;
              v393 = CFSTR("ScaledElementWise");

              objc_msgSend(obj, "setObject:forKeyedSubscript:", CFSTR("Add"), CFSTR("Type"));
              if (*((_DWORD *)v374 + 70) == 33)
                objc_msgSend(obj, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], CFSTR("NegateSrc2"));
              objc_storeStrong(v394, obj);
              std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::push_back[abi:ne180100]((uint64_t)&v395, (uint64_t)v385);
              this = v374;
              goto LABEL_284;
            }
          }
          if (v113 == 100)
          {
            v160 = v393;
            v393 = CFSTR("ElementWise");
            v161 = CFSTR("Equal");
            goto LABEL_268;
          }
          if (v113 == 102)
          {
            v160 = v393;
            v393 = CFSTR("ScaledElementWise");
            v161 = CFSTR("Mult");
LABEL_268:

            objc_msgSend(obj, "setObject:forKeyedSubscript:", v161, CFSTR("Type"));
            objc_storeStrong(v394, obj);
            std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::push_back[abi:ne180100]((uint64_t)&v395, (uint64_t)v385);
            this = v374;
LABEL_284:
            _S0 = *((float *)this + 72);
            if (fabsf(_S0 + -1.0) >= 0.000001)
            {
              __asm { FCVT            H0, S0 }
              objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithShort:", _H0);
              v175 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(obj, "setObject:forKeyedSubscript:", v175, CFSTR("Scale"));

              this = v374;
            }
            if (fabsf(*((float *)this + 73)) >= 0.000001)
              Espresso::throw_exception_selector<Espresso::invalid_state_error>("beta with elementwise not supported on ANE. Blocked by rdar://58017698");
            goto LABEL_436;
          }
LABEL_266:
          Espresso::ANECompilerEngine::elementwise_kernel::compile(this, v106, (const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)a3);
          goto LABEL_592;
        }
        v117 = *((_DWORD *)this + 70);
        v106 = v93;
        if (v117 <= 36)
        {
          if (v117 > 25)
          {
            if (v117 == 26)
            {
              v221 = (void *)objc_opt_new();
              Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&__str.__r_.__value_.__l.__data_, (id *)&a3->__r_.__value_.__l.__data_);
              v222 = *((float *)this + 74);
              if (v222 > 0.0)
              {
                Espresso::ANECompilerEngine::mix_elementwise_kernel::compile(Espresso::ANECompilerEngine::compiler *,Espresso::ANECompilerEngine::compiler::layer_graph_info_t const&)::$_0::operator()((uint64_t)&v426, (id **)&v380, v222);
                std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::push_back[abi:ne180100]((uint64_t)&v395, (uint64_t)&v426);
                if (SHIBYTE(v426.__r_.__value_.__r.__words[2]) < 0)
                  std::string::__init_copy_ctor_external(&v435, v426.__r_.__value_.__l.__data_, v426.__r_.__value_.__l.__size_);
                else
                  v435 = v426;
                std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v420, &v435, &v436, 1uLL);
                if (SHIBYTE(v435.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v435.__r_.__value_.__l.__data_);
                Espresso::ANECompilerEngine::compiler::unit_t::~unit_t((id *)&v426.__r_.__value_.__l.__data_);
              }
              v343 = v424;
              v424 = CFSTR("Neuron");

              objc_msgSend(v221, "setObject:forKeyedSubscript:", CFSTR("Log2"), CFSTR("Type"));
              objc_storeStrong(v425, v221);
              std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("_before_scaling", (const void **)&v420.__begin_->__r_.__value_.__l.__data_, &v426);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__str.__r_.__value_.__l.__data_);
              __str = v426;
              std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::push_back[abi:ne180100]((uint64_t)&v395, (uint64_t)&__str);
              objc_msgSend(obj, "setObject:forKeyedSubscript:", CFSTR("GOC"), CFSTR("Type"));
              objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithShort:", 14732);
              v344 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(obj, "setObject:forKeyedSubscript:", v344, CFSTR("ScaleScalar"));

              std::string::operator=(v388, &__str);
              objc_storeStrong(v394, obj);
              v345 = v393;
              v393 = CFSTR("GOC");

              std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::push_back[abi:ne180100]((uint64_t)&v395, (uint64_t)v385);
              Espresso::ANECompilerEngine::compiler::unit_t::~unit_t((id *)&__str.__r_.__value_.__l.__data_);

              goto LABEL_435;
            }
            if (v117 == 27)
            {
              v223 = (void *)objc_opt_new();
              Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&__str.__r_.__value_.__l.__data_, (id *)&a3->__r_.__value_.__l.__data_);
              v224 = v424;
              v424 = CFSTR("GOC");

              objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithShort:", 15813);
              v225 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v223, "setObject:forKeyedSubscript:", v225, CFSTR("ScaleScalar"));

              objc_storeStrong(v425, v223);
              std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("_prescaled", (const void **)&v420.__begin_->__r_.__value_.__l.__data_, &v426);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__str.__r_.__value_.__l.__data_);
              __str = v426;
              std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::push_back[abi:ne180100]((uint64_t)&v395, (uint64_t)&__str);
              objc_msgSend(obj, "setObject:forKeyedSubscript:", CFSTR("Exp2"), CFSTR("Type"));
              std::string::operator=(v388, &__str);
              objc_storeStrong(v394, obj);
              v226 = v393;
              v393 = CFSTR("Neuron");

              std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::push_back[abi:ne180100]((uint64_t)&v395, (uint64_t)v385);
              Espresso::ANECompilerEngine::compiler::unit_t::~unit_t((id *)&__str.__r_.__value_.__l.__data_);

              goto LABEL_435;
            }
            if (v117 != 35)
              goto LABEL_266;
          }
          else if ((v117 - 10) >= 3)
          {
            goto LABEL_266;
          }
        }
        else
        {
          if ((v117 - 114) <= 0xD)
          {
            if (((1 << (v117 - 114)) & 0x1B) != 0)
              goto LABEL_259;
            if (v117 == 127)
            {
              v118 = 0;
              memset(&v435, 0, sizeof(v435));
              v372 = &v397;
              v119 = 1;
              v120 = 2.0;
              do
              {
                v121 = v119;
                v122 = (void *)objc_opt_new();
                Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&__str.__r_.__value_.__l.__data_, (id *)&a3->__r_.__value_.__l.__data_);
                std::to_string(&v413, v118);
                v123 = std::string::insert(&v413, 0, "__@lutpart");
                v124 = *(_OWORD *)&v123->__r_.__value_.__l.__data_;
                v426.__r_.__value_.__r.__words[2] = v123->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v426.__r_.__value_.__l.__data_ = v124;
                v123->__r_.__value_.__l.__size_ = 0;
                v123->__r_.__value_.__r.__words[2] = 0;
                v123->__r_.__value_.__r.__words[0] = 0;
                if ((v426.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v125 = &v426;
                else
                  v125 = (std::string *)v426.__r_.__value_.__r.__words[0];
                if ((v426.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v126 = HIBYTE(v426.__r_.__value_.__r.__words[2]);
                else
                  v126 = v426.__r_.__value_.__l.__size_;
                std::string::append(&__str, (const std::string::value_type *)v125, v126);
                if (SHIBYTE(v426.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v426.__r_.__value_.__l.__data_);
                if (SHIBYTE(v413.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v413.__r_.__value_.__l.__data_);
                v127 = (_OWORD *)v435.__r_.__value_.__l.__size_;
                if (v435.__r_.__value_.__l.__size_ >= v435.__r_.__value_.__r.__words[2])
                {
                  v129 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&v435.__r_.__value_.__l.__data_, (uint64_t)&__str);
                }
                else
                {
                  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                  {
                    std::string::__init_copy_ctor_external((std::string *)v435.__r_.__value_.__l.__size_, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
                  }
                  else
                  {
                    v128 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
                    *(_QWORD *)(v435.__r_.__value_.__l.__size_ + 16) = *((_QWORD *)&__str.__r_.__value_.__l + 2);
                    *v127 = v128;
                  }
                  v129 = (std::string *)((char *)v127 + 24);
                }
                v435.__r_.__value_.__l.__size_ = (std::string::size_type)v129;
                v130 = v424;
                v424 = CFSTR("NeuronCustom");

                v131 = log2f(32.0 / v120);
                v133 = atanf(v120);
                v134 = v133;
                if ((v121 & 1) != 0)
                {
                  v135 = 1.0;
                  v136 = 0.0;
                  v137 = Espresso::ANECompilerEngine::mix_elementwise_kernel::compile(Espresso::ANECompilerEngine::compiler *,Espresso::ANECompilerEngine::compiler::layer_graph_info_t const&)::$_1::__invoke;
                  v138 = 0.0;
                  v139 = v134;
                }
                else
                {
                  v139 = v133 + -1.1071;
                  v138 = (float)((float)(v133 + -1.1071) + -0.46315) / (float)(v120 + -2000.0);
                  v135 = 0.0;
                  v136 = 2.0;
                  v120 = 2000.0;
                  v137 = Espresso::ANECompilerEngine::mix_elementwise_kernel::compile(Espresso::ANECompilerEngine::compiler *,Espresso::ANECompilerEngine::compiler::layer_graph_info_t const&)::$_2::__invoke;
                  v134 = 0.46315;
                }
                LODWORD(v132) = vcvtms_s32_f32(v131);
                Espresso::ANECompilerEngine::generate_mix_custom_neuron_params(v132, 0, 1, 1, (uint64_t)v137, v136, v120, v134, v135, v138, 0.0, v139);
                v140 = (void *)objc_claimAutoreleasedReturnValue();

                objc_storeStrong(v425, v140);
                v141 = v396;
                if ((unint64_t)v396 >= v397)
                {
                  v143 = 0x8E38E38E38E38E39 * (((uint64_t)v396 - v395) >> 4);
                  v144 = v143 + 1;
                  if (v143 + 1 > 0x1C71C71C71C71C7)
                    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                  if (0x1C71C71C71C71C72 * ((uint64_t)(v397 - v395) >> 4) > v144)
                    v144 = 0x1C71C71C71C71C72 * ((uint64_t)(v397 - v395) >> 4);
                  if (0x8E38E38E38E38E39 * ((uint64_t)(v397 - v395) >> 4) >= 0xE38E38E38E38E3)
                    v145 = 0x1C71C71C71C71C7;
                  else
                    v145 = v144;
                  *((_QWORD *)&v427 + 1) = &v397;
                  if (v145)
                    v145 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v145);
                  else
                    v146 = 0;
                  v426.__r_.__value_.__r.__words[0] = v145;
                  v426.__r_.__value_.__l.__size_ = v145 + 144 * v143;
                  v426.__r_.__value_.__r.__words[2] = v426.__r_.__value_.__l.__size_;
                  *(_QWORD *)&v427 = v145 + 144 * v146;
                  std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)v426.__r_.__value_.__l.__size_, (uint64_t)&__str);
                  v426.__r_.__value_.__r.__words[2] += 144;
                  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v395, &v426);
                  v142 = v396;
                  std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&v426);
                }
                else
                {
                  std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v396, (uint64_t)&__str);
                  v142 = v141 + 6;
                }
                v396 = v142;

                if (v422 < 0)
                  operator delete(v421);
                v426.__r_.__value_.__r.__words[0] = (std::string::size_type)&v420;
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v426);
                v426.__r_.__value_.__r.__words[0] = (std::string::size_type)v418;
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v426);
                if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__str.__r_.__value_.__l.__data_);

                v119 = 0;
                v118 = 1;
                v120 = 64.0;
              }
              while ((v121 & 1) != 0);
              objc_msgSend(obj, "setObject:forKeyedSubscript:", CFSTR("Add"), CFSTR("Type"));
              v147 = v393;
              v393 = CFSTR("ElementWise");

              std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v388, (std::string *)v435.__r_.__value_.__l.__data_, (std::string *)v435.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(v435.__r_.__value_.__l.__size_ - v435.__r_.__value_.__r.__words[0]) >> 3));
              objc_storeStrong(v394, obj);
              std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::push_back[abi:ne180100]((uint64_t)&v395, (uint64_t)v385);
              __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v435;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
LABEL_435:
              this = v374;
              goto LABEL_436;
            }
          }
          if (v117 != 37)
          {
            if (v117 == 38)
            {
              v163 = v393;
              v393 = CFSTR("NeuronCustom");

              v164 = (void *)objc_claimAutoreleasedReturnValue();

              objc_storeStrong(v394, v164);
              obj = v164;
              std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::push_back[abi:ne180100]((uint64_t)&v395, (uint64_t)v385);
              this = v374;
              goto LABEL_436;
            }
            goto LABEL_266;
          }
        }
LABEL_259:
        v165 = (void *)objc_opt_new();
        Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&__str.__r_.__value_.__l.__data_, (id *)&a3->__r_.__value_.__l.__data_);
        v166 = v424;
        v424 = CFSTR("Neuron");

        v167 = *((_DWORD *)v374 + 70);
        if (v167 > 34)
        {
          switch(v167)
          {
            case 'r':
              v169 = CFSTR("Cos");
              break;
            case 's':
              v169 = CFSTR("Sin");
              break;
            case 't':
              goto LABEL_653;
            case 'u':
              v169 = CFSTR("Floor");
              break;
            case 'v':
              v169 = CFSTR("Ceil");
              break;
            default:
              if (v167 == 35)
              {
                v169 = CFSTR("Exp2");
              }
              else
              {
                if (v167 != 37)
                  goto LABEL_653;
                v169 = CFSTR("RoundNearest");
              }
              break;
          }
        }
        else
        {
          if (v167 == 10)
          {
            v168 = CFSTR("Inv");
LABEL_270:
            objc_msgSend(v165, "setObject:forKeyedSubscript:", v168, CFSTR("Type"));
            v170 = *((float *)v374 + 74);
            if (v170 > 0.0)
            {
              Espresso::ANECompilerEngine::mix_elementwise_kernel::compile(Espresso::ANECompilerEngine::compiler *,Espresso::ANECompilerEngine::compiler::layer_graph_info_t const&)::$_0::operator()((uint64_t)&v426, (id **)&v380, v170);
              std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::push_back[abi:ne180100]((uint64_t)&v395, (uint64_t)&v426);
              if (SHIBYTE(v426.__r_.__value_.__r.__words[2]) < 0)
                std::string::__init_copy_ctor_external(&v435, v426.__r_.__value_.__l.__data_, v426.__r_.__value_.__l.__size_);
              else
                v435 = v426;
              std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v420, &v435, &v436, 1uLL);
              if (SHIBYTE(v435.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v435.__r_.__value_.__l.__data_);
              Espresso::ANECompilerEngine::compiler::unit_t::~unit_t((id *)&v426.__r_.__value_.__l.__data_);
            }
            goto LABEL_430;
          }
          if (v167 != 11)
          {
            if (v167 == 12)
            {
              v168 = CFSTR("Rsqrt");
              goto LABEL_270;
            }
LABEL_653:
            Espresso::throw_exception_selector<Espresso::invalid_state_error>("Espresso : Elementwise op not supported on ANE. ");
          }
          v169 = CFSTR("Sqrt");
        }
        objc_msgSend(v165, "setObject:forKeyedSubscript:", v169, CFSTR("Type"));
LABEL_430:
        objc_storeStrong(v425, v165);
        std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::push_back[abi:ne180100]((uint64_t)&v395, (uint64_t)&__str);

        if (v422 < 0)
          operator delete(v421);
        v426.__r_.__value_.__r.__words[0] = (std::string::size_type)&v420;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v426);
        v426.__r_.__value_.__r.__words[0] = (std::string::size_type)v418;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v426);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);

        goto LABEL_435;
      }
    }
    else
    {
      v93 = a2;
      if (!*((_BYTE *)&v383.__r_.__value_.__s + 23))
        goto LABEL_147;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__erase_unique<std::string>((_QWORD *)v402 + 17, (unsigned __int8 *)&v383);
    goto LABEL_147;
  }
  v21 = 0;
  while (1)
  {
    v22 = &v20[24 * v21];
    if (v22[23] < 0)
    {
      std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)v22, *((_QWORD *)v22 + 1));
    }
    else
    {
      v23 = *(_OWORD *)v22;
      __str.__r_.__value_.__r.__words[2] = *((_QWORD *)v22 + 2);
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v23;
    }
    v24 = v402;
    v435.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
    v25 = *(_OWORD *)(*((_QWORD *)v24 + 4)
                    + 16
                    * std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v384, (uint64_t)&__str, (uint64_t)&std::piecewise_construct, (__int128 **)&v435)[5]);
    *(_OWORD *)&v426.__r_.__value_.__l.__data_ = v25;
    if (*((_QWORD *)&v25 + 1))
    {
      v26 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
    }
    v28 = v25;
    v29 = (_QWORD *)(v25 + 40);
    v30 = *(char *)(v25 + 63);
    if (v30 < 0)
      break;
    if (v30 == 13)
      goto LABEL_31;
LABEL_35:
    v34 = (std::__shared_weak_count *)v426.__r_.__value_.__l.__size_;
    if (v426.__r_.__value_.__l.__size_)
    {
      v35 = (unint64_t *)(v426.__r_.__value_.__l.__size_ + 8);
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    ++v21;
    v20 = a3[2].__r_.__value_.__l.__data_;
    if (v21 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a3[2].__r_.__value_.__l.__size_ - (_QWORD)v20) >> 3))
    {
      v19 = v388;
      v18 = v389;
      this = v374;
      goto LABEL_68;
    }
  }
  if (*(_QWORD *)(v25 + 48) != 13)
    goto LABEL_35;
  v29 = (_QWORD *)*v29;
LABEL_31:
  v31 = (_QWORD *)*v29;
  v32 = *(_QWORD *)((char *)v29 + 5);
  if (v31 != (_QWORD *)0x6E6F635F64616F6CLL || v32 != 0x746E6174736E6F63)
    goto LABEL_35;
  v37 = *(const void **)(v25 + 64);
  if (v37
  {
    v39 = v38;
    v40 = *(_QWORD *)(v28 + 72);
    v435.__r_.__value_.__r.__words[0] = (std::string::size_type)v38;
    v435.__r_.__value_.__l.__size_ = v40;
    if (v40)
    {
      v41 = (unint64_t *)(v40 + 8);
      do
        v42 = __ldxr(v41);
      while (__stxr(v42 + 1, v41));
    }
  }
  else
  {
    v39 = 0;
    *(_OWORD *)&v435.__r_.__value_.__l.__data_ = 0uLL;
  }
  (*(void (**)(_QWORD *))(*v39[43] + 32))(v39[43]);
  v43 = v39[43];
  v44 = v43[20];
  v45 = v43[21];
  v413.__r_.__value_.__r.__words[0] = v44;
  v413.__r_.__value_.__l.__size_ = v45;
  if (v45)
  {
    v46 = (unint64_t *)(v45 + 8);
    do
      v47 = __ldxr(v46);
    while (__stxr(v47 + 1, v46));
  }
  v48 = 0;
  v49 = *(int *)(v44 + 8);
  do
  {
    v49 *= *(int *)(v44 + 12 + v48);
    v48 += 4;
  }
  while (v48 != 12);
  if (v49 != 1 || **(float **)(v44 + 24) != 0.0)
  {
    v50 = (std::__shared_weak_count *)v413.__r_.__value_.__l.__size_;
    if (v413.__r_.__value_.__l.__size_)
    {
      v51 = (unint64_t *)(v413.__r_.__value_.__l.__size_ + 8);
      do
        v52 = __ldaxr(v51);
      while (__stlxr(v52 - 1, v51));
      if (!v52)
      {
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v50);
      }
    }
    v53 = (std::__shared_weak_count *)v435.__r_.__value_.__l.__size_;
    if (v435.__r_.__value_.__l.__size_)
    {
      v54 = (unint64_t *)(v435.__r_.__value_.__l.__size_ + 8);
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v55 - 1, v54));
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
      }
    }
    goto LABEL_35;
  }
  Espresso::ANECompilerEngine::elementwise_kernel::compile(v374, a2, (const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)a3);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v413);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v435);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v426);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    v63 = (void *)__str.__r_.__value_.__r.__words[0];
    goto LABEL_594;
  }
LABEL_595:
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__deallocate_node((void **)v384[2]);
  v334 = v384[0];
  v384[0] = 0;
  if (v334)
    operator delete(v334);
LABEL_597:

  if (v391 < 0)
    operator delete(v390);
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v388;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v387;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  if (v386 < 0)
    operator delete(v385[0]);

  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v395;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  v13 = v399;
LABEL_602:

  if (v13)
  {
    v335 = (unint64_t *)&v13->__shared_owners_;
    do
      v336 = __ldaxr(v335);
    while (__stlxr(v336 - 1, v335));
    if (!v336)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v337 = v401;
  if (v401)
  {
    v338 = (unint64_t *)&v401->__shared_owners_;
    do
      v339 = __ldaxr(v338);
    while (__stlxr(v339 - 1, v338));
    if (!v339)
    {
      ((void (*)(std::__shared_weak_count *))v337->__on_zero_shared)(v337);
      std::__shared_weak_count::__release_weak(v337);
    }
  }
  v340 = v403;
  if (v403)
  {
    v341 = (unint64_t *)&v403->__shared_owners_;
    do
      v342 = __ldaxr(v341);
    while (__stlxr(v342 - 1, v341));
    if (!v342)
    {
      ((void (*)(std::__shared_weak_count *))v340->__on_zero_shared)(v340);
      std::__shared_weak_count::__release_weak(v340);
    }
  }
}

void sub_19149DDB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, char a16, uint64_t a17, char a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,char a58,uint64_t a59,char a60,uint64_t a61,char a62)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  if (a31 < 0)
    operator delete(__p);
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::~__hash_table((uint64_t)&a32);
  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t((id *)&a37);

  a37 = (uint64_t)&a55;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&a37);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a58);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a60);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a62);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::mix_elementwise_kernel::compile(Espresso::ANECompilerEngine::mix_elementwise_kernel *this, Espresso::ANECompilerEngine::compiler *a2, std::string *a3)
{
  Espresso::ANECompilerEngine::mix_elementwise_kernel::compile((Espresso::ANECompilerEngine::mix_elementwise_kernel *)((char *)this - 336), a2, a3);
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::mix_elementwise_kernel::~mix_elementwise_kernel(Espresso::ANECompilerEngine::mix_elementwise_kernel *this)
{
  Espresso::base_kernel *v2;

  v2 = (Espresso::ANECompilerEngine::mix_elementwise_kernel *)((char *)this - 336);
  *((_QWORD *)this - 42) = &off_1E2D780E8;
  *(_QWORD *)this = &unk_1E2D78258;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 216);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((void **)this);
  Espresso::base_kernel::~base_kernel(v2);
}

{
  Espresso::base_kernel *v2;

  v2 = (Espresso::ANECompilerEngine::mix_elementwise_kernel *)((char *)this - 336);
  *((_QWORD *)this - 42) = &off_1E2D780E8;
  *(_QWORD *)this = &unk_1E2D78258;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 216);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((void **)this);
  Espresso::base_kernel::~base_kernel(v2);
  JUMPOUT(0x19401CD90);
}

uint64_t std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::push_back[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  std::string *v15;
  std::string *v16;
  unint64_t v17;
  uint64_t v18;

  v4 = a1 + 16;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 8);
  if (v6 >= v5)
  {
    v9 = 0x8E38E38E38E38E39 * ((uint64_t)(v6 - *(_QWORD *)a1) >> 4);
    if (v9 + 1 > 0x1C71C71C71C71C7)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v10 = 0x8E38E38E38E38E39 * ((uint64_t)(v5 - *(_QWORD *)a1) >> 4);
    v11 = 2 * v10;
    if (2 * v10 <= v9 + 1)
      v11 = v9 + 1;
    if (v10 >= 0xE38E38E38E38E3)
      v12 = 0x1C71C71C71C71C7;
    else
      v12 = v11;
    v18 = v4;
    if (v12)
      v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v12);
    else
      v13 = 0;
    v14 = v12;
    v15 = (std::string *)(v12 + 144 * v9);
    v17 = v12 + 144 * v13;
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v15, a2);
    v16 = v15 + 6;
    std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer((uint64_t *)a1, &v14);
    v8 = *(_QWORD *)(a1 + 8);
    result = std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&v14);
  }
  else
  {
    result = (uint64_t)std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(*(std::string **)(a1 + 8), a2);
    v8 = v6 + 144;
    *(_QWORD *)(a1 + 8) = v6 + 144;
  }
  *(_QWORD *)(a1 + 8) = v8;
  return result;
}

void sub_19149E5F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::mix_elementwise_kernel::compile(Espresso::ANECompilerEngine::compiler *,Espresso::ANECompilerEngine::compiler::layer_graph_info_t const&)::$_0::operator()(uint64_t a1, id **a2, float a3)
{
  id *v6;
  size_t v7;
  __int128 *v8;
  const void *v9;
  void *v10;
  void *v11;
  void *v17;
  void *v18;
  __int128 v19;
  uint64_t v20;

  _S8 = a3;
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)a1, *a2);
  v6 = *a2;
  if (*((char *)*a2 + 23) >= 0)
    v7 = *((unsigned __int8 *)*a2 + 23);
  else
    v7 = (size_t)(*a2)[1];
  v8 = &v19;
  std::string::basic_string[abi:ne180100]((uint64_t)&v19, v7 + 4);
  if (v20 < 0)
    v8 = (__int128 *)v19;
  if (v7)
  {
    if (*((char *)v6 + 23) >= 0)
      v9 = v6;
    else
      v9 = *v6;
    memmove(v8, v9, v7);
  }
  strcpy((char *)v8 + v7, "_eps");
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  *(_OWORD *)a1 = v19;
  *(_QWORD *)(a1 + 16) = v20;
  v10 = (void *)objc_opt_new();
  v11 = *(void **)(a1 + 120);
  *(_QWORD *)(a1 + 120) = CFSTR("GOC");

  __asm { FCVT            H0, S8 }
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithShort:", _H0);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "setObject:forKeyedSubscript:", v17, CFSTR("BiasScalar"));

  v18 = *(void **)(a1 + 128);
  *(_QWORD *)(a1 + 128) = v10;

}

void sub_19149E750(_Unwind_Exception *a1)
{
  id *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t(v1);
  _Unwind_Resume(a1);
}

float `anonymous namespace'::sign_activation_function(_anonymous_namespace_ *this, float a2)
{
  float v2;
  BOOL v3;
  float result;

  v2 = fabsf(a2);
  v3 = a2 < 0.0;
  result = 1.0;
  if (v3)
    result = -1.0;
  if (v2 < 0.000001)
    return 0.0;
  return result;
}

float Espresso::ANECompilerEngine::mix_elementwise_kernel::compile(Espresso::ANECompilerEngine::compiler *,Espresso::ANECompilerEngine::compiler::layer_graph_info_t const&)::$_2::__invoke(float a1)
{
  return atanf(a1) + -1.1071;
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::blob_container>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB9E90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::blob_container>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB9E90;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::blob_container>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::ANECompilerEngine::stir_spatial_transformer_affine_kernel::~stir_spatial_transformer_affine_kernel(void **this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 38);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 38);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANECompilerEngine::stir_spatial_transformer_affine_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob((_QWORD *)(a1 + 304), a3, a4, a5);
}

BOOL Espresso::ANECompilerEngine::stir_spatial_transformer_affine_kernel::is_valid_for_engine(uint64_t a1, int64x2_t **a2, Espresso::ANECompilerEngine *a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  const Espresso::base_kernel::validate_for_engine_args_t *v8;
  Espresso::ANECompilerEngine *v9;
  NSString *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  _BOOL8 v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v40;
  const Espresso::net *v41;
  unint64_t *v42;
  unint64_t v43;
  __int128 v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  const Espresso::net *v49;
  unint64_t *v50;
  unint64_t v51;
  _QWORD *v52;
  __int128 v53;
  const void *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  const Espresso::net *v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  unint64_t *v64;
  unint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  __int128 *v68;
  __int128 v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  unint64_t *v76;
  uint64_t v77;
  const Espresso::base_kernel::validate_for_engine_args_t *v78;
  unsigned int v79;
  unsigned int v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  int64x2_t *v90;
  unint64_t *v91;
  unint64_t v92;
  int64x2_t **v93;
  int64x2_t *v94;
  unint64_t *v95;
  unint64_t v96;
  __CFString *v97;
  __CFString *v98;
  const __CFString *v99;
  int64x2_t *v100;
  unint64_t *v101;
  unint64_t v102;
  int32x4_t v103;
  int32x4_t v104;
  __int128 v105;
  int v106;
  int64x2_t *v107;
  unint64_t *v108;
  unint64_t v109;
  std::string *v110;
  uint64_t **v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  uint64_t v121;
  int64x2_t *v122;
  std::__shared_weak_count *v123;
  std::string v124;
  std::string v125;
  std::string v126;
  uint64_t v127;
  uint64_t v128;
  std::__shared_weak_count *v129;
  int64x2_t *v130[2];
  _QWORD v131[2];
  uint64_t v132;
  uint64_t v133;
  void *v134;
  __int128 v135;
  __int128 v136;
  uint64_t v137;
  __CFString *v138;
  __int128 v139;
  __int128 v140;
  uint64_t v141;
  std::string __p;
  _QWORD v143[3];
  _QWORD v144[4];
  std::__shared_weak_count *v145;
  const __CFString *v146;
  const __CFString *v147;
  const __CFString *v148;
  int v149;
  int32x4_t v150;
  __CFString *v151;
  int64x2_t *v152[2];
  char v153[8];
  __int128 v154;
  char v155;
  int64x2_t *v156[2];
  int64x2_t *v157[2];
  int64x2_t *v158;
  std::__shared_weak_count *v159;
  std::string v160;
  std::string v161;
  _OWORD v162[2];
  uint64_t v163;
  void *v164;
  void *v165;
  uint64_t v166;
  const Espresso::base_kernel::validate_for_engine_args_t *v167;
  std::__shared_weak_count *v168;
  _DWORD v169[8];
  _OWORD v170[2];
  uint64_t v171;
  void *v172;
  void *v173;
  uint64_t v174;
  const Espresso::base_kernel::validate_for_engine_args_t *v175;
  std::__shared_weak_count *v176;
  _DWORD v177[8];
  _OWORD v178[2];
  uint64_t v179;
  void *v180;
  void *v181;
  uint64_t v182;
  const Espresso::base_kernel::validate_for_engine_args_t *v183;
  std::__shared_weak_count *v184;
  _DWORD v185[3];
  uint64_t v186;
  int64x2_t *v187;
  std::__shared_weak_count *v188;
  int64x2_t *v189;
  std::__shared_weak_count *v190;
  int64x2_t *v191;
  std::__shared_weak_count *v192;
  int64x2_t *v193;
  std::__shared_weak_count *v194;
  const Espresso::base_kernel::validate_for_engine_args_t *v195;
  std::__shared_weak_count *v196;
  void **v197;

  v6 = *((_QWORD *)a3 + 6);
  v195 = 0;
  v196 = 0;
  v7 = *(std::__shared_weak_count **)(v6 + 80);
  if (v7 && (v196 = std::__shared_weak_count::lock(v7)) != 0)
  {
    v8 = *(const Espresso::base_kernel::validate_for_engine_args_t **)(v6 + 72);
    v195 = v8;
  }
  else
  {
    v8 = 0;
  }
  Espresso::ANECompilerEngine::ane_arch_allow_network_override((uint64_t)v8 + 472);
  v9 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
  if (Espresso::ANECompilerEngine::is_mix_e(v9, v10))
  {
    v11 = (std::__shared_weak_count *)a2[1];
    v193 = *a2;
    v194 = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }
    std::string::basic_string[abi:ne180100]<0>(&v134, "spatial_transformer_affine_kernel: not enabled on requested architecture.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)&v134, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v193, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    v14 = v145;
    if (v145)
    {
      v15 = (unint64_t *)&v145->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v126.__r_.__value_.__r.__words[0] = (std::string::size_type)v144;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v126);
    v126.__r_.__value_.__r.__words[0] = (std::string::size_type)v143;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v126);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v135) < 0)
      operator delete(v134);
    v17 = v194;
    if (!v194)
      goto LABEL_58;
    v18 = (unint64_t *)&v194->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
LABEL_56:
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
LABEL_58:
    v35 = 0;
    goto LABEL_59;
  }
  v20 = *(_QWORD **)a3;
  if (*((_QWORD *)a3 + 1) - *(_QWORD *)a3 != 128 || *((_QWORD *)a3 + 3) == *((_QWORD *)a3 + 4))
  {
    v28 = (std::__shared_weak_count *)a2[1];
    v191 = *a2;
    v192 = v28;
    if (v28)
    {
      v29 = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
    }
    std::string::basic_string[abi:ne180100]<0>(&v134, "spatial_transformer_affine_kernel: has to have 2 bottom tensors");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)&v134, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v191, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    v31 = v145;
    if (v145)
    {
      v32 = (unint64_t *)&v145->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    v126.__r_.__value_.__r.__words[0] = (std::string::size_type)v144;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v126);
    v126.__r_.__value_.__r.__words[0] = (std::string::size_type)v143;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v126);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v135) < 0)
      operator delete(v134);
    v17 = v192;
    if (!v192)
      goto LABEL_58;
    v34 = (unint64_t *)&v192->__shared_owners_;
    do
      v19 = __ldaxr(v34);
    while (__stlxr(v19 - 1, v34));
    goto LABEL_56;
  }
  if (*(_BYTE *)(a1 + 296))
  {
    v21 = (std::__shared_weak_count *)a2[1];
    v189 = *a2;
    v190 = v21;
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    std::string::basic_string[abi:ne180100]<0>(&v134, "spatial_transformer_affine_kernel: unnormalized coordinate mode not supported on ANE. This parameter is also ignored on CPU.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)&v134, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v189, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    v24 = v145;
    if (v145)
    {
      v25 = (unint64_t *)&v145->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    v126.__r_.__value_.__r.__words[0] = (std::string::size_type)v144;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v126);
    v126.__r_.__value_.__r.__words[0] = (std::string::size_type)v143;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v126);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v135) < 0)
      operator delete(v134);
    v17 = v190;
    if (!v190)
      goto LABEL_58;
    v27 = (unint64_t *)&v190->__shared_owners_;
    do
      v19 = __ldaxr(v27);
    while (__stlxr(v19 - 1, v27));
    goto LABEL_56;
  }
  if (*(_DWORD *)(a1 + 300) >= 2u)
  {
    v70 = (std::__shared_weak_count *)a2[1];
    v187 = *a2;
    v188 = v70;
    if (v70)
    {
      v71 = (unint64_t *)&v70->__shared_owners_;
      do
        v72 = __ldxr(v71);
      while (__stxr(v72 + 1, v71));
    }
    std::string::basic_string[abi:ne180100]<0>(&v134, "spatial_transformer_affine_kernel: only padding fill modes CONSTANT and CLAMP are supported.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)&v134, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v187, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    v73 = v145;
    if (v145)
    {
      v74 = (unint64_t *)&v145->__shared_owners_;
      do
        v75 = __ldaxr(v74);
      while (__stlxr(v75 - 1, v74));
      if (!v75)
      {
        ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
        std::__shared_weak_count::__release_weak(v73);
      }
    }
    v126.__r_.__value_.__r.__words[0] = (std::string::size_type)v144;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v126);
    v126.__r_.__value_.__r.__words[0] = (std::string::size_type)v143;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v126);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v135) < 0)
      operator delete(v134);
    v17 = v188;
    if (!v188)
      goto LABEL_58;
    v76 = (unint64_t *)&v188->__shared_owners_;
    do
      v19 = __ldaxr(v76);
    while (__stlxr(v19 - 1, v76));
    goto LABEL_56;
  }
  v41 = v195;
  v40 = v196;
  v183 = v195;
  v184 = v196;
  if (v196)
  {
    v42 = (unint64_t *)&v196->__shared_owners_;
    do
      v43 = __ldxr(v42);
    while (__stxr(v43 + 1, v42));
    v20 = *(_QWORD **)a3;
  }
  v44 = *((_OWORD *)v20 + 1);
  v45 = v20[4];
  v178[0] = *(_OWORD *)v20;
  v178[1] = v44;
  v179 = v45;
  v180 = 0;
  v182 = 0;
  v181 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v180, (const void *)v20[5], v20[6], (uint64_t)(v20[6] - v20[5]) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v185, v41, (const Espresso::layer_shape *)v178, 1);
  if (v180)
  {
    v181 = v180;
    operator delete(v180);
  }
  if (v40)
  {
    v46 = (unint64_t *)&v40->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  v49 = v195;
  v48 = v196;
  v175 = v195;
  v176 = v196;
  if (v196)
  {
    v50 = (unint64_t *)&v196->__shared_owners_;
    do
      v51 = __ldxr(v50);
    while (__stxr(v51 + 1, v50));
  }
  v52 = *(_QWORD **)a3;
  v53 = *(_OWORD *)(*(_QWORD *)a3 + 80);
  v170[0] = *(_OWORD *)(*(_QWORD *)a3 + 64);
  v170[1] = v53;
  v54 = (const void *)v52[13];
  v171 = v52[12];
  v172 = 0;
  v174 = 0;
  v173 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v172, v54, v52[14], (uint64_t)(v52[14] - (_QWORD)v54) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v177, v49, (const Espresso::layer_shape *)v170, 1);
  if (v172)
  {
    v173 = v172;
    operator delete(v172);
  }
  if (v48)
  {
    v55 = (unint64_t *)&v48->__shared_owners_;
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  v58 = v195;
  v57 = v196;
  v167 = v195;
  v168 = v196;
  if (v196)
  {
    v59 = (unint64_t *)&v196->__shared_owners_;
    do
      v60 = __ldxr(v59);
    while (__stxr(v60 + 1, v59));
  }
  v61 = *((_QWORD *)a3 + 3);
  v62 = *(_QWORD *)(v61 + 32);
  v63 = *(_OWORD *)(v61 + 16);
  v162[0] = *(_OWORD *)v61;
  v162[1] = v63;
  v163 = v62;
  v164 = 0;
  v166 = 0;
  v165 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v164, *(const void **)(v61 + 40), *(_QWORD *)(v61 + 48), (uint64_t)(*(_QWORD *)(v61 + 48) - *(_QWORD *)(v61 + 40)) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v169, v58, (const Espresso::layer_shape *)v162, 1);
  if (v164)
  {
    v165 = v164;
    operator delete(v164);
  }
  if (v57)
  {
    v64 = (unint64_t *)&v57->__shared_owners_;
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  v66 = (_QWORD *)*((_QWORD *)a3 + 6);
  v67 = *((_QWORD *)a3 + 9);
  v68 = *(__int128 **)(*v66 + 224 * v67 + 136);
  if (*((char *)v68 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v161, *(const std::string::value_type **)v68, *((_QWORD *)v68 + 1));
    v66 = (_QWORD *)*((_QWORD *)a3 + 6);
    v67 = *((_QWORD *)a3 + 9);
  }
  else
  {
    v69 = *v68;
    v161.__r_.__value_.__r.__words[2] = *((_QWORD *)v68 + 2);
    *(_OWORD *)&v161.__r_.__value_.__l.__data_ = v69;
  }
  v77 = *(_QWORD *)(*v66 + 224 * v67 + 136);
  if (*(char *)(v77 + 47) < 0)
    std::string::__init_copy_ctor_external(&v160, *(const std::string::value_type **)(v77 + 24), *(_QWORD *)(v77 + 32));
  else
    v160 = *(std::string *)(v77 + 24);
  v78 = v195;
  v79 = Espresso::ANECompilerEngine::bottom_compute_path(a3, v195, 0);
  v80 = Espresso::ANECompilerEngine::bottom_compute_path(a3, v78, (const Espresso::net *)1);
  if (v79 < 8 && ((0x97u >> v79) & 1) != 0)
  {
    if (v80 < 8 && ((0x97u >> v80) & 1) != 0)
    {
      if (!*((_BYTE *)v78 + 1281))
      {
        v97 = off_1E2DD3780[v79];
        v98 = off_1E2DD3780[v80];
        Espresso::ANECompilerEngine::stir_spatial_transformer_affine_kernel::supported_by_hw((uint64_t)v153, v9, v185, v177, v169, a1 + 280, v79, v80);
        if (v153[0])
        {
          ANECAffineTransformLayerDescInitialize();
          v149 = 0;
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)CFSTR("Width");
          __p.__r_.__value_.__l.__size_ = (std::string::size_type)CFSTR("Linear");
          __p.__r_.__value_.__r.__words[2] = (std::string::size_type)CFSTR("Height");
          v143[0] = CFSTR("Linear");
          v143[1] = CFSTR("Width");
          v143[2] = CFSTR("Background");
          v144[0] = CFSTR("Height");
          v144[1] = CFSTR("Background");
          v144[2] = CFSTR("Width");
          if (*(_BYTE *)(a1 + 296))
          {
            v99 = CFSTR("NonNormalized");
          }
          else
          {
            v144[3] = CFSTR("RangeMinusOneToOne");
            v147 = CFSTR("RangeMinusOneToOne");
            v99 = CFSTR("NormalizedReflect");
          }
          v145 = (std::__shared_weak_count *)v99;
          v146 = CFSTR("Height");
          v103.i64[0] = *(_QWORD *)(a1 + 284);
          v121 = v186;
          v103.i64[1] = v186;
          v104 = vrev64q_s32(v103);
          v104.i64[0] = v103.i64[0];
          v150 = v104;
          v148 = v99;
          v151 = v97;
          ANECTensorDescInitialize();
          ANECTensorDescInitialize();
          *(_QWORD *)&v105 = (int)v121;
          *((_QWORD *)&v105 + 1) = SHIDWORD(v121);
          v136 = v105;
          v133 = 0;
          v134 = v97;
          v137 = v185[2];
          *(_QWORD *)&v105 = v185[0];
          *((_QWORD *)&v105 + 1) = v185[1];
          v135 = v105;
          *(_QWORD *)&v105 = v177[3];
          *((_QWORD *)&v105 + 1) = v177[4];
          v140 = v105;
          v138 = v98;
          v141 = v177[2];
          *(_QWORD *)&v105 = v177[0];
          *((_QWORD *)&v105 + 1) = v177[1];
          v139 = v105;
          v132 = 0;
          Espresso::ANECompilerEngine::ane_kernel::get_ane_validator((Espresso::ANECompilerEngine::ane_kernel *)v131, (NSString *)(a1 + 304), v9);
          v106 = ANECValidateAffineTransformLayer();
          v35 = v106 == 0;
          if (v106)
          {
            v107 = a2[1];
            v130[0] = *a2;
            v130[1] = v107;
            if (v107)
            {
              v108 = &v107->u64[1];
              do
                v109 = __ldxr(v108);
              while (__stxr(v109 + 1, v108));
            }
            std::to_string(&v125, v106);
            v110 = std::string::insert(&v125, 0, "spatial_transformer_affine_kernel: ANECValidateAffineTransformLayer failed with status ");
            v124 = *v110;
            v110->__r_.__value_.__l.__size_ = 0;
            v110->__r_.__value_.__r.__words[2] = 0;
            v110->__r_.__value_.__r.__words[0] = 0;
            Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v126, (__int128 *)&v124, (uint64_t)a3, 0);
            Espresso::emit_kernel_validation_warning(v130, (Espresso::base_kernel::validate_for_engine_warning_t *)&v126);
            Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)&v126.__r_.__value_.__l.__data_);
            if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v124.__r_.__value_.__l.__data_);
            if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v125.__r_.__value_.__l.__data_);
            std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v130);
            Espresso::ANECompilerEngine::violations_from_alternates<ANECAffineTransformLayerDescAlternate>((uint64_t)&v124, v132, v133);
            v111 = (uint64_t **)v124.__r_.__value_.__r.__words[2];
            if (v124.__r_.__value_.__r.__words[2])
            {
              do
              {
                v112 = (std::__shared_weak_count *)a2[1];
                v122 = *a2;
                v123 = v112;
                if (v112)
                {
                  v113 = (unint64_t *)&v112->__shared_owners_;
                  do
                    v114 = __ldxr(v113);
                  while (__stxr(v114 + 1, v113));
                }
                std::string::basic_string[abi:ne180100]<0>(&v125, (char *)objc_msgSend(objc_retainAutorelease(v111[2]), "UTF8String"));
                Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v126, (__int128 *)&v125, (uint64_t)a3, 0);
                Espresso::emit_kernel_validation_warning(&v122, (Espresso::base_kernel::validate_for_engine_warning_t *)&v126);
                v115 = v129;
                if (v129)
                {
                  v116 = (unint64_t *)&v129->__shared_owners_;
                  do
                    v117 = __ldaxr(v116);
                  while (__stlxr(v117 - 1, v116));
                  if (!v117)
                  {
                    ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
                    std::__shared_weak_count::__release_weak(v115);
                  }
                }
                v197 = (void **)&v128;
                std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v197);
                v197 = (void **)&v127;
                std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v197);
                if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v126.__r_.__value_.__l.__data_);
                if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v125.__r_.__value_.__l.__data_);
                v118 = v123;
                if (v123)
                {
                  v119 = (unint64_t *)&v123->__shared_owners_;
                  do
                    v120 = __ldaxr(v119);
                  while (__stlxr(v120 - 1, v119));
                  if (!v120)
                  {
                    ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
                    std::__shared_weak_count::__release_weak(v118);
                  }
                }
                v111 = (uint64_t **)*v111;
              }
              while (v111);
            }
            std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&v124);
          }
          std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v131);
        }
        else
        {
          v100 = a2[1];
          v152[0] = *a2;
          v152[1] = v100;
          if (v100)
          {
            v101 = &v100->u64[1];
            do
              v102 = __ldxr(v101);
            while (__stxr(v102 + 1, v101));
          }
          Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, &v154, (uint64_t)a3, 0);
          Espresso::emit_kernel_validation_warning(v152, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
          Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)&__p.__r_.__value_.__l.__data_);
          std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v152);
          v35 = 0;
        }
        if (v155 < 0)
          operator delete((void *)v154);
        goto LABEL_148;
      }
      v94 = a2[1];
      v156[0] = *a2;
      v156[1] = v94;
      if (v94)
      {
        v95 = &v94->u64[1];
        do
          v96 = __ldxr(v95);
        while (__stxr(v96 + 1, v95));
      }
      std::string::basic_string[abi:ne180100]<0>(&v134, "spatial_transformer_affine_kernel: Unsupported operation with 3d layout conventions");
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)&v134, (uint64_t)a3, 0);
      Espresso::emit_kernel_validation_warning(v156, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
      Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)&__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v135) < 0)
        operator delete(v134);
      v93 = v156;
    }
    else
    {
      v90 = a2[1];
      v157[0] = *a2;
      v157[1] = v90;
      if (v90)
      {
        v91 = &v90->u64[1];
        do
          v92 = __ldxr(v91);
        while (__stxr(v92 + 1, v91));
      }
      std::string::basic_string[abi:ne180100]<0>(&v134, "spatial_transformer_affine_kernel: unsupported coord compute path for ANE.");
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)&v134, (uint64_t)a3, 0);
      Espresso::emit_kernel_validation_warning(v157, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
      Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)&__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v135) < 0)
        operator delete(v134);
      v93 = v157;
    }
    std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v93);
  }
  else
  {
    v81 = (std::__shared_weak_count *)a2[1];
    v158 = *a2;
    v159 = v81;
    if (v81)
    {
      v82 = (unint64_t *)&v81->__shared_owners_;
      do
        v83 = __ldxr(v82);
      while (__stxr(v83 + 1, v82));
    }
    std::string::basic_string[abi:ne180100]<0>(&v134, "spatial_transformer_affine_kernel: unsupported input compute path for ANE.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)&v134, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v158, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    v84 = v145;
    if (v145)
    {
      v85 = (unint64_t *)&v145->__shared_owners_;
      do
        v86 = __ldaxr(v85);
      while (__stlxr(v86 - 1, v85));
      if (!v86)
      {
        ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
        std::__shared_weak_count::__release_weak(v84);
      }
    }
    v126.__r_.__value_.__r.__words[0] = (std::string::size_type)v144;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v126);
    v126.__r_.__value_.__r.__words[0] = (std::string::size_type)v143;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v126);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v135) < 0)
      operator delete(v134);
    v87 = v159;
    if (v159)
    {
      v88 = (unint64_t *)&v159->__shared_owners_;
      do
        v89 = __ldaxr(v88);
      while (__stlxr(v89 - 1, v88));
      if (!v89)
      {
        ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
        std::__shared_weak_count::__release_weak(v87);
      }
    }
  }
  v35 = 0;
LABEL_148:
  if (SHIBYTE(v160.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v160.__r_.__value_.__l.__data_);
  if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v161.__r_.__value_.__l.__data_);
LABEL_59:

  v36 = v196;
  if (v196)
  {
    v37 = (unint64_t *)&v196->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  return v35;
}

void sub_19149F650(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  void *v37;
  uint64_t v38;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a37);
  if (SLOBYTE(STACK[0x26F]) < 0)
    operator delete((void *)STACK[0x258]);
  if (SLOBYTE(STACK[0x2B7]) < 0)
    operator delete((void *)STACK[0x2A0]);
  if (SLOBYTE(STACK[0x2D7]) < 0)
    operator delete((void *)STACK[0x2C0]);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v38 - 104);
  _Unwind_Resume(a1);
}

void sub_19149F96C()
{
  JUMPOUT(0x19149F95CLL);
}

void Espresso::ANECompilerEngine::stir_spatial_transformer_affine_kernel::compile(Espresso::ANECompilerEngine::stir_spatial_transformer_affine_kernel *this, Espresso::ANECompilerEngine::compiler *a2, void **a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  char *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  char *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  Espresso::ANECompilerEngine::compiler *v24;
  const __CFString *v25;
  void *v26;
  const __CFString *v27;
  void *v28;
  void *v29;
  void *v30;
  std::string::pointer data;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  float v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  int *v56;
  _WORD *v57;
  int v58;
  __int128 v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  uint64_t v71;
  int *v72;
  _WORD *v73;
  int v74;
  int v76;
  uint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  id v84;
  void *v85;
  void *v86;
  void *v87;
  void *v88;
  uint64_t weights_file_index;
  void *v90;
  void *v91;
  __int128 v92;
  unint64_t *v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t *v96;
  unint64_t v97;
  void *v98;
  void *v99;
  void *v100;
  uint64_t v101;
  void *v102;
  void *v103;
  std::string *v104;
  std::string *v105;
  uint64_t v106;
  char v107;
  std::string::size_type size;
  std::string::size_type v109;
  uint64_t v110;
  unsigned __int8 *v111;
  std::string *v112;
  const std::string::value_type *v113;
  __int128 v114;
  __CFString *v115;
  std::string *v116;
  std::string *v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  unint64_t *v134;
  unint64_t v135;
  unint64_t *v136;
  unint64_t v137;
  unint64_t *v138;
  unint64_t v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  const char *v149;
  std::runtime_error *exception;
  int *v151;
  uint64_t i;
  float v153;
  int v154;
  _WORD *v155;
  int v156;
  std::runtime_error *v158;
  int *v159;
  uint64_t j;
  int v161;
  int v162;
  unsigned int v163;
  unsigned int v164;
  int v165;
  Espresso *v166;
  const char *v167;
  float v168;
  NSObject *v170;
  double v171;
  uint64_t v172;
  _WORD *v173;
  int v174;
  unsigned int v176;
  void *v177;
  void *v178;
  float *v179;
  id v180;
  id *v181;
  void *v182;
  void *v183;
  void *v184;
  id obj;
  std::__shared_weak_count *v186;
  std::__shared_weak_count *v187;
  std::string *v188;
  std::string *v189;
  _QWORD v190[2];
  std::__shared_weak_count *v191;
  uint64_t v192;
  std::__shared_weak_count *v193;
  uint64_t v194;
  std::__shared_weak_count *v195;
  __int128 v196;
  uint64_t v197;
  std::__shared_weak_count *v198;
  __int128 v199;
  uint64_t v200;
  std::__shared_weak_count *v201;
  uint64_t v202[2];
  uint64_t v203;
  std::__shared_weak_count *v204;
  uint64_t v205;
  std::__shared_weak_count *v206;
  uint64_t v207;
  std::__shared_weak_count *v208;
  unsigned int v209;
  unsigned int v210;
  uint64_t v211;
  std::__shared_weak_count *v212;
  _QWORD v213[2];
  _BYTE buf[18];
  __int16 v215;
  int v216;
  __int16 v217;
  double v218;
  std::vector<std::string> v219;
  void *v220;
  char v221;
  id v222;
  __CFString *v223;
  id v224;
  void *v225[2];
  char v226;
  _BYTE v227[24];
  _BYTE v228[32];
  void *__p;
  char v230;
  id v231;
  id v232;
  id v233;
  uint64_t v234;
  std::string __str;
  __int128 v236;
  uint64_t v237;

  v237 = *MEMORY[0x1E0C80C00];
  v194 = 0;
  v195 = 0;
  v4 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
  if (!v4
    || (v7 = std::__shared_weak_count::lock(v4), (v195 = v7) == 0)
    || (v8 = *((_QWORD *)a2 + 1), (v194 = v8) == 0))
  {
    v149 = "Inconsistent state: null network";
    goto LABEL_193;
  }
  if (!*(_QWORD *)(v8 + 576))
  {
    v149 = "Inconsistent state: blob_storage";
LABEL_193:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v149);
  }
  v9 = v7;
  v225[0] = a3[6];
  v10 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8 + 136, (unsigned __int8 *)v225[0], (__int128 **)v225);
  v11 = (std::__shared_weak_count *)*((_QWORD *)v10 + 6);
  v192 = *((_QWORD *)v10 + 5);
  v193 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  v225[0] = a3;
  v14 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8 + 136, (unsigned __int8 *)a3, (__int128 **)v225);
  v15 = (std::__shared_weak_count *)*((_QWORD *)v14 + 6);
  v179 = (float *)*((_QWORD *)v14 + 5);
  v190[1] = v179;
  v191 = v15;
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  v181 = a3;
  obj = (id)objc_opt_new();
  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", 2);
  v184 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", 2);
  v183 = (void *)objc_claimAutoreleasedReturnValue();
  if (*((_BYTE *)this + 296))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Unsupported coordinate mode");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "setObject:forKeyedSubscript:", CFSTR("Width"), CFSTR("Coordinate"));
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "setObject:forKeyedSubscript:", CFSTR("Height"), CFSTR("Coordinate"));
  objc_msgSend(v184, "setObject:atIndexedSubscript:", v18, 0);
  objc_msgSend(v184, "setObject:atIndexedSubscript:", v19, 1);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "setObject:forKeyedSubscript:", CFSTR("Width"), CFSTR("Coordinate"));
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v21, "setObject:forKeyedSubscript:", CFSTR("Height"), CFSTR("Coordinate"));
  objc_msgSend(v183, "setObject:atIndexedSubscript:", v20, 0);
  objc_msgSend(v183, "setObject:atIndexedSubscript:", v21, 1);

  objc_msgSend(obj, "setObject:forKeyedSubscript:", v184, CFSTR("CoordinateInfo"));
  objc_msgSend(obj, "setObject:forKeyedSubscript:", v183, CFSTR("OutputCoordinateInfo"));
  v182 = (void *)objc_opt_new();
  objc_msgSend(v182, "setObject:forKeyedSubscript:", CFSTR("Width"), CFSTR("Coordinate"));
  objc_msgSend(v182, "setObject:forKeyedSubscript:", CFSTR("Linear"), CFSTR("SamplingMethod"));
  v177 = (void *)objc_opt_new();
  objc_msgSend(v177, "setObject:forKeyedSubscript:", CFSTR("Height"), CFSTR("Coordinate"));
  objc_msgSend(v177, "setObject:forKeyedSubscript:", CFSTR("Linear"), CFSTR("SamplingMethod"));
  v213[0] = v182;
  v213[1] = v177;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v213, 2);
  v178 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(obj, "setObject:forKeyedSubscript:");
  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", 2);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v23 = (void *)objc_opt_new();
  v24 = a2;
  objc_msgSend(v23, "setObject:forKeyedSubscript:", CFSTR("Width"), CFSTR("Coordinate"));
  if (*((_DWORD *)this + 75))
    v25 = CFSTR("Replication");
  else
    v25 = CFSTR("Background");
  objc_msgSend(v23, "setObject:forKeyedSubscript:", v25, CFSTR("PaddingMode"));
  objc_msgSend(v22, "setObject:atIndexedSubscript:", v23, 0);

  v26 = (void *)objc_opt_new();
  objc_msgSend(v26, "setObject:forKeyedSubscript:", CFSTR("Height"), CFSTR("Coordinate"));
  if (*((_DWORD *)this + 75))
    v27 = CFSTR("Replication");
  else
    v27 = CFSTR("Background");
  objc_msgSend(v26, "setObject:forKeyedSubscript:", v27, CFSTR("PaddingMode"));
  objc_msgSend(v22, "setObject:atIndexedSubscript:", v26, 1);

  objc_msgSend(obj, "setObject:forKeyedSubscript:", v22, CFSTR("PaddingInfo"));
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithShort:", 0);
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(obj, "setObject:forKeyedSubscript:", v28, CFSTR("BackgroundValue"));

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *((unsigned int *)this + 71));
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(obj, "setObject:forKeyedSubscript:", v29, CFSTR("OutputWidth"));

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *((unsigned int *)this + 72));
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(obj, "setObject:forKeyedSubscript:", v30, CFSTR("OutputHeight"));

  Espresso::ANECompilerEngine::compiler::unit_t::unit_t(v225, v181);
  v188 = 0;
  v189 = 0;
  v190[0] = 0;
  *(_QWORD *)buf = &v188;
  buf[8] = 0;
  v188 = (std::string *)operator new(0x90uLL);
  v189 = v188;
  v190[0] = v188 + 6;
  v189 = (std::string *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>,Espresso::ANECompilerEngine::compiler::unit_t const*,Espresso::ANECompilerEngine::compiler::unit_t const*,Espresso::ANECompilerEngine::compiler::unit_t*>((uint64_t)v190, (uint64_t)v225, (uint64_t)&__str, (uint64_t)v188);

  if (v230 < 0)
    operator delete(__p);
  *(_QWORD *)buf = v228;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(_QWORD *)buf = v227;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (v226 < 0)
    operator delete(v225[0]);
  data = v188[5].__r_.__value_.__l.__data_;
  v188[5].__r_.__value_.__r.__words[0] = (std::string::size_type)CFSTR("AffineTransform");

  objc_storeStrong((id *)&v188[5].__r_.__value_.__l.__size_, obj);
  v187 = v9;
  v32 = (unint64_t *)&v9->__shared_owners_;
  do
    v33 = __ldxr(v32);
  while (__stxr(v33 + 1, v32));
  v186 = v15;
  if (v15)
  {
    v34 = (unint64_t *)&v15->__shared_owners_;
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
  }
  Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t((Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)v225);
  v233 = 0;
  v232 = 0;
  v234 = 0x100000000;
  v36 = *((_QWORD *)this + 46);
  v37 = (std::__shared_weak_count *)*((_QWORD *)this + 47);
  v211 = v36;
  v212 = v37;
  if (v37)
  {
    v38 = (unint64_t *)&v37->__shared_owners_;
    do
      v39 = __ldxr(v38);
    while (__stxr(v39 + 1, v38));
  }
  if (v36 && !*(_BYTE *)((*(uint64_t (**)(char *))(*((_QWORD *)this + 38) + 104))((char *)this + 304) + 40))
  {
    v40 = v179[28];
    v203 = v36;
    v204 = v37;
    if (v37)
    {
      v41 = (unint64_t *)&v37->__shared_owners_;
      do
        v42 = __ldxr(v41);
      while (__stxr(v42 + 1, v41));
    }
    v43 = (std::__shared_weak_count *)*((_QWORD *)this + 49);
    v202[0] = *((_QWORD *)this + 48);
    v202[1] = (uint64_t)v43;
    if (v43)
    {
      v44 = (unint64_t *)&v43->__shared_owners_;
      do
        v45 = __ldxr(v44);
      while (__stxr(v45 + 1, v44));
    }
    Espresso::ane_style_post_scale_bias((uint64_t)&v203, v202, (uint64_t)&v205, v40);
    if (v43)
    {
      v46 = (unint64_t *)&v43->__shared_owners_;
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }
    v48 = v204;
    if (v204)
    {
      v49 = (unint64_t *)&v204->__shared_owners_;
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v50 - 1, v49));
      if (!v50)
      {
        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
        std::__shared_weak_count::__release_weak(v48);
      }
    }
    v51 = v211;
    v52 = *(unsigned int *)(v211 + 8);
    std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v200, 2 * v52, 1, 1, 1);
    v53 = (int)v52;
    v199 = 0uLL;
    v54 = v52;
    v55 = *((_QWORD *)this + 48);
    if (v55)
      v54 = *(_DWORD *)(v55 + 8);
    if (!*((_BYTE *)a2 + 384))
    {
      Espresso::blob<unsigned char,1>::make(&__str, 4 * v52);
      v151 = *(int **)(__str.__r_.__value_.__r.__words[0] + 16);
      if ((int)v52 >= 1)
      {
        for (i = 0; i != v52; ++i)
        {
          v153 = *(float *)(*(_QWORD *)(v51 + 16) + i * 4);
          *(float *)&v154 = ldexp(1.0, -v209) * v153;
          v151[i] = v154;
        }
      }
      if ((_DWORD)v52)
      {
        v155 = *(_WORD **)(v200 + 16);
        do
        {
          v156 = *v151++;
          _S0 = v156;
          __asm { FCVT            H0, S0 }
          *v155++ = _S0;
          --v53;
        }
        while (v53);
      }
      v197 = 0;
      v198 = 0;
      if (*((_QWORD *)this + 48))
      {
        Espresso::blob<unsigned char,1>::make(buf, 4 * v54);
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)&v197, (__int128 *)buf);
        std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)buf);
        Espresso::blob<unsigned char,1>::make(buf, 2 * v54);
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)&v199, (__int128 *)buf);
        std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)buf);
        v159 = *(int **)(v197 + 16);
        if (v54 >= 1)
        {
          for (j = 0; j != v54; ++j)
          {
            if ((int)v52 - 1 >= (int)j)
              v161 = j;
            else
              v161 = v52 - 1;
            *(float *)&v162 = *(float *)(*(_QWORD *)(v207 + 16) + 4 * j)
                            * *(float *)(*(_QWORD *)(v205 + 16) + 4 * v161);
            v159[j] = v162;
            v163 = v210;
            v164 = v209;
            *(float *)&v165 = ldexp(1.0, v210 - v209) * *(float *)&v162;
            v159[j] = v165;
            v168 = ldexp(1.0, v164 - v163) * *(float *)&v165;
            if (v168 < -127.0 || v168 > 255.0)
            {
              Espresso::espresso_os_log_subsystem(v166, v167);
              v170 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v170, OS_LOG_TYPE_ERROR))
              {
                v171 = *(float *)&v159[j];
                *(_DWORD *)buf = 134218752;
                *(double *)&buf[4] = v168;
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v210;
                v215 = 1024;
                v216 = v209;
                v217 = 2048;
                v218 = v171;
                _os_log_error_impl(&dword_190DAF000, v170, OS_LOG_TYPE_ERROR, "[ANEC::add_ane_scale_bias_unit] Shifted bias overflowing shifted_b=%f acc_bias_shift=%d post_right_shift=%d anebias=%f", buf, 0x22u);
              }

            }
          }
        }
        if (v54)
        {
          v172 = v54;
          v173 = *(_WORD **)(v199 + 16);
          do
          {
            v174 = *v159++;
            _S0 = v174;
            __asm { FCVT            H0, S0 }
            *v173++ = _S0;
            --v172;
          }
          while (v172);
        }
      }
      v158 = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
      Espresso::not_implemented_error::not_implemented_error(v158);
    }
    v176 = v210;
    if ((_DWORD)v52)
    {
      v56 = *(int **)(v205 + 16);
      v57 = *(_WORD **)(v200 + 16);
      do
      {
        v58 = *v56++;
        _S0 = v58;
        __asm { FCVT            H0, S0 }
        *v57++ = _S0;
        --v53;
      }
      while (v53);
    }
    if (v55)
    {
      std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(buf, 2 * v54, 1, 1, 1);
      v64 = *(_OWORD *)buf;
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = 0;
      v65 = (std::__shared_weak_count *)*((_QWORD *)&v199 + 1);
      v199 = v64;
      if (v65)
      {
        v66 = (unint64_t *)&v65->__shared_owners_;
        do
          v67 = __ldaxr(v66);
        while (__stlxr(v67 - 1, v66));
        if (!v67)
        {
          ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
          std::__shared_weak_count::__release_weak(v65);
        }
      }
      v68 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v69 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v70 = __ldaxr(v69);
        while (__stlxr(v70 - 1, v69));
        if (!v70)
        {
          ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
          std::__shared_weak_count::__release_weak(v68);
        }
      }
      if (v54)
      {
        v71 = v54;
        v72 = *(int **)(v207 + 16);
        v73 = *(_WORD **)(v199 + 16);
        do
        {
          v74 = *v72++;
          _S0 = v74;
          __asm { FCVT            H0, S0 }
          *v73++ = _S0;
          --v71;
        }
        while (v71);
      }
    }
    v76 = *((unsigned __int8 *)a2 + 552);
    v77 = v200;
    v78 = v201;
    v197 = v200;
    v198 = v201;
    if (v201)
    {
      v79 = (unint64_t *)&v201->__shared_owners_;
      do
        v80 = __ldxr(v79);
      while (__stxr(v80 + 1, v79));
    }
    v81 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler *)((char *)a2 + 128), *(const unsigned __int8 **)(v77 + 16), *(int *)(v77 + 8));
    if (v78)
    {
      v82 = (unint64_t *)&v78->__shared_owners_;
      do
        v83 = __ldaxr(v82);
      while (__stlxr(v83 - 1, v82));
      if (!v83)
      {
        ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
        std::__shared_weak_count::__release_weak(v78);
      }
    }
    v180 = (id)objc_opt_new();
    if (*((_BYTE *)v24 + 121))
    {
      v84 = (id)v188[5].__r_.__value_.__l.__size_;

      v180 = v84;
    }
    v85 = (void *)objc_opt_new();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v52);
    v86 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v85, "setObject:forKeyedSubscript:", v86, CFSTR("ScaleCount"));

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v81);
    v87 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v85, "setObject:forKeyedSubscript:", v87, CFSTR("ScaleOffset"));

    v88 = (void *)MEMORY[0x1E0CB37E8];
    if (v76)
      weights_file_index = 0;
    else
    objc_msgSend(v88, "numberWithUnsignedLong:", weights_file_index);
    v90 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v85, "setObject:forKeyedSubscript:", v90, CFSTR("ScaleIndex"));

    objc_msgSend(v85, "setObject:forKeyedSubscript:", CFSTR("Float16"), CFSTR("ScaleType"));
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v209);
    v91 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v180, "setObject:forKeyedSubscript:", v91, CFSTR("ScaleShift"));

    if (*((_QWORD *)this + 48))
    {
      v92 = v199;
      v196 = v199;
      if (*((_QWORD *)&v199 + 1))
      {
        v93 = (unint64_t *)(*((_QWORD *)&v199 + 1) + 8);
        do
          v94 = __ldxr(v93);
        while (__stxr(v94 + 1, v93));
      }
      v95 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler *)((char *)v24 + 128), *(const unsigned __int8 **)(v92 + 16), *(int *)(v92 + 8));
      if (*((_QWORD *)&v92 + 1))
      {
        v96 = (unint64_t *)(*((_QWORD *)&v92 + 1) + 8);
        do
          v97 = __ldaxr(v96);
        while (__stlxr(v97 - 1, v96));
        if (!v97)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v92 + 1) + 16))(*((_QWORD *)&v92 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v92 + 1));
        }
      }
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *(unsigned int *)(*((_QWORD *)this + 48) + 8));
      v98 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v85, "setObject:forKeyedSubscript:", v98, CFSTR("BiasCount"));

      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v95);
      v99 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v85, "setObject:forKeyedSubscript:", v99, CFSTR("BiasOffset"));

      v100 = (void *)MEMORY[0x1E0CB37E8];
      if (v76)
        v101 = 0;
      else
      objc_msgSend(v100, "numberWithUnsignedLong:", v101);
      v102 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v85, "setObject:forKeyedSubscript:", v102, CFSTR("BiasIndex"));

      objc_msgSend(v85, "setObject:forKeyedSubscript:", CFSTR("Float16"), CFSTR("BiasType"));
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v176);
      v103 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v180, "setObject:forKeyedSubscript:", v103, CFSTR("BiasShift"));

    }
    objc_msgSend(v180, "setObject:forKeyedSubscript:", v85, CFSTR("BiasScaleGroupData"));
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)buf, v181);
    v104 = v189;
    if (v189 == v188)
      goto LABEL_118;
    v105 = v189 - 6;
    v106 = HIBYTE(v189[-6].__r_.__value_.__r.__words[2]);
    v107 = v106;
    size = v189[-6].__r_.__value_.__l.__size_;
    if ((v106 & 0x80u) == 0)
      v109 = HIBYTE(v189[-6].__r_.__value_.__r.__words[2]);
    else
      v109 = v189[-6].__r_.__value_.__l.__size_;
    v110 = HIBYTE(v216);
    if (v216 < 0)
      v110 = *(_QWORD *)&buf[8];
    if (v109 != v110)
      goto LABEL_112;
    if (v216 >= 0)
      v111 = buf;
    else
      v111 = *(unsigned __int8 **)buf;
    if ((char)v106 < 0)
    {
      v113 = (const std::string::value_type *)v105->__r_.__value_.__r.__words[0];
      if (memcmp(v105->__r_.__value_.__l.__data_, v111, v189[-6].__r_.__value_.__l.__size_))
        goto LABEL_115;
    }
    else if ((_BYTE)v106)
    {
      v112 = v189 - 6;
      while (v112->__r_.__value_.__s.__data_[0] == *v111)
      {
        v112 = (std::string *)((char *)v112 + 1);
        ++v111;
        if (!--v106)
          goto LABEL_111;
      }
      goto LABEL_112;
    }
LABEL_111:
    std::string::append(v104 - 6, "__@pre_scale_bias");
    v107 = HIBYTE(v104[-6].__r_.__value_.__r.__words[2]);
LABEL_112:
    if ((v107 & 0x80) == 0)
    {
      v114 = *(_OWORD *)&v105->__r_.__value_.__l.__data_;
      __str.__r_.__value_.__r.__words[2] = v104[-6].__r_.__value_.__r.__words[2];
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v114;
      goto LABEL_116;
    }
    v113 = v104[-6].__r_.__value_.__l.__data_;
    size = v104[-6].__r_.__value_.__l.__size_;
LABEL_115:
    std::string::__init_copy_ctor_external(&__str, v113, size);
LABEL_116:
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v219, &__str, &v236, 1uLL);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
LABEL_118:
    v115 = v223;
    v223 = CFSTR("GOC");

    objc_storeStrong(&v224, v180);
    if (!*((_BYTE *)v24 + 121))
    {
      v116 = v189;
      if ((unint64_t)v189 >= v190[0])
      {
        v118 = 0x8E38E38E38E38E39 * (((char *)v189 - (char *)v188) >> 4);
        if (v118 + 1 > 0x1C71C71C71C71C7)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v119 = 0x1C71C71C71C71C72 * ((uint64_t)(v190[0] - (_QWORD)v188) >> 4);
        if (v119 <= v118 + 1)
          v119 = v118 + 1;
        if (0x8E38E38E38E38E39 * ((uint64_t)(v190[0] - (_QWORD)v188) >> 4) >= 0xE38E38E38E38E3)
          v120 = 0x1C71C71C71C71C7;
        else
          v120 = v119;
        *((_QWORD *)&v236 + 1) = v190;
        if (v120)
          v120 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v120);
        else
          v121 = 0;
        __str.__r_.__value_.__r.__words[0] = v120;
        __str.__r_.__value_.__l.__size_ = v120 + 144 * v118;
        __str.__r_.__value_.__r.__words[2] = __str.__r_.__value_.__l.__size_;
        *(_QWORD *)&v236 = v120 + 144 * v121;
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)__str.__r_.__value_.__l.__size_, (uint64_t)buf);
        __str.__r_.__value_.__r.__words[2] += 144;
        std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer((uint64_t *)&v188, &__str);
        v117 = v189;
        std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&__str);
      }
      else
      {
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v189, (uint64_t)buf);
        v117 = v116 + 6;
      }
      v189 = v117;
    }

    if (v221 < 0)
      operator delete(v220);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v219;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v217;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
    if (SHIBYTE(v216) < 0)
      operator delete(*(void **)buf);

    v122 = (std::__shared_weak_count *)*((_QWORD *)&v199 + 1);
    if (*((_QWORD *)&v199 + 1))
    {
      v123 = (unint64_t *)(*((_QWORD *)&v199 + 1) + 8);
      do
        v124 = __ldaxr(v123);
      while (__stlxr(v124 - 1, v123));
      if (!v124)
      {
        ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
        std::__shared_weak_count::__release_weak(v122);
      }
    }
    v125 = v201;
    if (v201)
    {
      v126 = (unint64_t *)&v201->__shared_owners_;
      do
        v127 = __ldaxr(v126);
      while (__stlxr(v127 - 1, v126));
      if (!v127)
      {
        ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
        std::__shared_weak_count::__release_weak(v125);
      }
    }
    v128 = v208;
    if (v208)
    {
      v129 = (unint64_t *)&v208->__shared_owners_;
      do
        v130 = __ldaxr(v129);
      while (__stlxr(v130 - 1, v129));
      if (!v130)
      {
        ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
        std::__shared_weak_count::__release_weak(v128);
      }
    }
    v131 = v206;
    if (v206)
    {
      v132 = (unint64_t *)&v206->__shared_owners_;
      do
        v133 = __ldaxr(v132);
      while (__stlxr(v133 - 1, v132));
      if (!v133)
      {
        ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
        std::__shared_weak_count::__release_weak(v131);
      }
    }
    v37 = v212;
  }
  if (v37)
  {
    v134 = (unint64_t *)&v37->__shared_owners_;
    do
      v135 = __ldaxr(v134);
    while (__stlxr(v135 - 1, v134));
    if (!v135)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }

  if (v230 < 0)
    operator delete(__p);
  *(_QWORD *)buf = v228;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(_QWORD *)buf = v227;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (v226 < 0)
    operator delete(v225[0]);
  if (v186)
  {
    v136 = (unint64_t *)&v186->__shared_owners_;
    do
      v137 = __ldaxr(v136);
    while (__stlxr(v137 - 1, v136));
    if (!v137)
    {
      ((void (*)(std::__shared_weak_count *))v186->__on_zero_shared)(v186);
      std::__shared_weak_count::__release_weak(v186);
    }
  }
  v138 = (unint64_t *)&v187->__shared_owners_;
  do
    v139 = __ldaxr(v138);
  while (__stlxr(v139 - 1, v138));
  if (!v139)
  {
    ((void (*)(std::__shared_weak_count *))v187->__on_zero_shared)(v187);
    std::__shared_weak_count::__release_weak(v187);
  }
  (*(void (**)(char *, Espresso::ANECompilerEngine::compiler *, std::string **))(*((_QWORD *)this + 38) + 32))((char *)this + 304, v24, &v188);
  v225[0] = &v188;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)v225);

  v140 = v191;
  if (v191)
  {
    v141 = (unint64_t *)&v191->__shared_owners_;
    do
      v142 = __ldaxr(v141);
    while (__stlxr(v142 - 1, v141));
    if (!v142)
    {
      ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
      std::__shared_weak_count::__release_weak(v140);
    }
  }
  v143 = v193;
  if (v193)
  {
    v144 = (unint64_t *)&v193->__shared_owners_;
    do
      v145 = __ldaxr(v144);
    while (__stlxr(v145 - 1, v144));
    if (!v145)
    {
      ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
      std::__shared_weak_count::__release_weak(v143);
    }
  }
  v146 = v195;
  if (v195)
  {
    v147 = (unint64_t *)&v195->__shared_owners_;
    do
      v148 = __ldaxr(v147);
    while (__stlxr(v148 - 1, v147));
    if (!v148)
    {
      ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
      std::__shared_weak_count::__release_weak(v146);
    }
  }
}

void sub_1914A0C88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19, void *a20,void *a21,char a22,uint64_t a23,char a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,char a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void **a57)
{
  void *v57;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  a57 = (void **)&a26;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100](&a57);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a31);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::stir_spatial_transformer_affine_kernel::compile(Espresso::ANECompilerEngine::stir_spatial_transformer_affine_kernel *this, Espresso::ANECompilerEngine::compiler *a2, void **a3)
{
  Espresso::ANECompilerEngine::stir_spatial_transformer_affine_kernel::compile((Espresso::ANECompilerEngine::stir_spatial_transformer_affine_kernel *)((char *)this - 304), a2, a3);
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::stir_spatial_transformer_affine_kernel::~stir_spatial_transformer_affine_kernel(void **this)
{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 38);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
}

{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 38);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
  JUMPOUT(0x19401CD90);
}

id Espresso::ANECompilerEngine::`anonymous namespace'::CreateAnonymousNormalizedCoordinateInfo()
{
  void *v0;

  v0 = (void *)objc_opt_new();
  objc_msgSend(v0, "setObject:forKeyedSubscript:", CFSTR("NormalizedReflect"), CFSTR("CoordinateMode"));
  objc_msgSend(v0, "setObject:forKeyedSubscript:", CFSTR("RangeMinusOneToOne"), CFSTR("CoordinateRange"));
  return v0;
}

void sub_1914A1074(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::stir_spatial_transformer_affine_kernel::supported_by_hw(uint64_t a1, void *a2, _DWORD *a3, _DWORD *a4, _DWORD *a5, uint64_t a6, unsigned int a7, unsigned int a8)
{
  id v15;
  _QWORD *v16;
  id v17;

  v15 = a2;
  v17 = v15;
  if (a7 > 4 || a7 == 3 || a8 > 4 || a8 == 3)
  {
    *(_BYTE *)a1 = 0;
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 8), "spatial_transformer_affine_kernel: Unsupported compute path for ANE.");
  }
  else if (*(_DWORD *)a6 == 1)
  {
    if (Espresso::ANECompilerEngine::blob_shape_ane_compatible(a3, v15))
    {
      if (Espresso::ANECompilerEngine::blob_shape_ane_compatible(a4, v17))
      {
        if (a4[2] == 1 && a4[4] == 1 && a4[3] == 1)
        {
          if (a4[1] == 6)
          {
            if (*a4 == *a3 || *a3 == 1)
            {
              if (Espresso::ANECompilerEngine::blob_shape_ane_compatible(a5, v17))
              {
                if (*(_DWORD *)(a6 + 12) == 3)
                {
                  v16 = (_QWORD *)(a1 + 8);
                  if (*(_BYTE *)(a6 + 16))
                  {
                    *(_BYTE *)a1 = 0;
                    std::string::basic_string[abi:ne180100]<0>(v16, "spatial_transformer_affine_kernel: Behavior for unnormalized coordinates not clear from CPU implementation, which ignored the parameter.");
                  }
                  else
                  {
                    *(_BYTE *)a1 = 1;
                    std::string::basic_string[abi:ne180100]<0>(v16, "Supported.");
                  }
                }
                else
                {
                  *(_BYTE *)a1 = 0;
                  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 8), "spatial_transformer_affine_kernel: Affine transform only supported with output concatenation along batch dimension.");
                }
              }
              else
              {
                *(_BYTE *)a1 = 0;
                std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 8), "spatial_transformer_affine_kernel: Output blob dimensions exceed ANE limit.");
              }
            }
            else
            {
              *(_BYTE *)a1 = 0;
              std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 8), "spatial_transformer_affine_kernel: Number of batches in coordinate tensor must match batches in input tensor, otherwise input tensor must have a batch dimension of size one.");
            }
          }
          else
          {
            *(_BYTE *)a1 = 0;
            std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 8), "spatial_transformer_affine_kernel: Coordinate tensor must use channels to define exactly 6 affine parameters. Batch index mode with 7 parameters not supported.");
          }
        }
        else
        {
          *(_BYTE *)a1 = 0;
          std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 8), "spatial_transformer_affine_kernel: Coordinate tensor can only have multiple elements in batch and channels.");
        }
      }
      else
      {
        *(_BYTE *)a1 = 0;
        std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 8), "spatial_transformer_affine_kernel: Coordinate tensor dimensions exceed ANE limit.");
      }
    }
    else
    {
      *(_BYTE *)a1 = 0;
      std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 8), "spatial_transformer_affine_kernel: Input tensor dimensions exceed ANE limit.");
    }
  }
  else
  {
    *(_BYTE *)a1 = 0;
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 8), "spatial_transformer_affine_kernel: ANECompiler operation is explicitly for affine transforms.");
  }

}

void sub_1914A12A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::violations_from_alternates<ANECAffineTransformLayerDescAlternate>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  CFTypeRef *v7;
  unint64_t *v8;
  unint64_t v9;
  CFTypeRef *v10;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a2)
  {
    v6 = 0;
    v7 = (CFTypeRef *)(a3 + 8);
    do
    {
      v8 = (unint64_t *)(a3 + 728 * v6);
      if (*v8)
      {
        v9 = 0;
        v10 = v7;
        do
        {
          std::__hash_table<__CFString const*,Espresso::ANECompilerEngine::CFStringHasher,Espresso::ANECompilerEngine::CFStringEqualWrapper,std::allocator<__CFString const*>>::__emplace_unique_key_args<__CFString const*,__CFString const* const&>((float *)a1, v10, v10);
          ++v9;
          ++v10;
        }
        while (v9 < *v8);
      }
      ++v6;
      v7 += 91;
    }
    while (v6 != a2);
  }
}

void sub_1914A138C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

__n128 Espresso::ANECompilerEngine::stir_spatial_transformer_affine_kernel::stir_spatial_transformer_affine_kernel(uint64_t a1, _QWORD *a2, __n128 *a3)
{
  uint64_t v5;
  uint64_t v6;
  char v7;
  __n128 result;

  v5 = a1 + 280;
  v6 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_OWORD *)v5 = xmmword_191A93680;
  *(_BYTE *)(v6 + 296) = 0;
  *(_DWORD *)(v6 + 300) = 0;
  v7 = *(_BYTE *)(*a2 + 123);
  *(_OWORD *)(v6 + 440) = 0u;
  *(_OWORD *)(v6 + 456) = 0u;
  *(_OWORD *)(v6 + 312) = 0u;
  *(_OWORD *)(v6 + 328) = 0u;
  *(_OWORD *)(v6 + 344) = 0u;
  *(_BYTE *)(v6 + 360) = 0;
  *(_OWORD *)(v6 + 368) = 0u;
  *(_OWORD *)(v6 + 384) = 0u;
  *(_OWORD *)(v6 + 400) = 0u;
  *(_OWORD *)(v6 + 416) = 0u;
  *(_BYTE *)(v6 + 432) = 0;
  *(_DWORD *)(v6 + 472) = 1065353216;
  *(_WORD *)(v6 + 480) = 0;
  *(_BYTE *)(v6 + 482) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *(_QWORD *)(v5 + 204) = _D0;
  *(_BYTE *)(v6 + 492) = 0;
  *(_QWORD *)(v6 + 496) = 0;
  *(_QWORD *)(v6 + 504) = 0;
  *(_BYTE *)(v6 + 512) = v7;
  *(_QWORD *)v6 = &off_1E2D7D318;
  *(_QWORD *)(v6 + 304) = &unk_1E2D7D478;
  result = *a3;
  *(_QWORD *)(v6 + 296) = a3[1].n128_u64[0];
  *(__n128 *)v5 = result;
  return result;
}

void H12ANEHeuristics::~H12ANEHeuristics(H12ANEHeuristics *this)
{
  H12ANEHeuristics::~H12ANEHeuristics(this);
  JUMPOUT(0x19401CD90);
}

{
  char *v2;

  *(_QWORD *)this = &off_1E2D55C70;
  v2 = (char *)this + 8;
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)this + 128);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)this + 88);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)this + 48);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)v2);
}

float H12ANEHeuristics::get_af_read_bw(uint64_t a1, int a2)
{
  uint64_t *v2;

  v2 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((_QWORD *)(a1 + 8), a2);
  if (!v2)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  return *((float *)v2 + 5) * 0.5;
}

float H12ANEHeuristics::get_af_write_bw(uint64_t a1, int a2)
{
  uint64_t *v2;

  v2 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((_QWORD *)(a1 + 8), a2);
  if (!v2)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  return *((float *)v2 + 5) * 0.5;
}

float H12ANEHeuristics::get_af_aggregate_bw(uint64_t a1, int a2)
{
  uint64_t *v2;

  v2 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((_QWORD *)(a1 + 8), a2);
  if (!v2)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  return *((float *)v2 + 5);
}

float H12ANEHeuristics::get_aggregate_local_cache_read_bw(uint64_t a1, int a2)
{
  uint64_t *v2;

  v2 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((_QWORD *)(a1 + 128), a2);
  if (!v2)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  return (float)(*((float *)v2 + 5) * 128.0) * 9.3132e-10;
}

float H12ANEHeuristics::get_aggregate_local_cache_write_bw(uint64_t a1, int a2)
{
  uint64_t *v2;

  v2 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((_QWORD *)(a1 + 128), a2);
  if (!v2)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  return (float)(*((float *)v2 + 5) * 256.0) * 9.3132e-10;
}

float H12ANEHeuristics::get_aggregate_read_bw(uint64_t a1, uint64_t a2)
{
  double v4;

  v4 = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 2);
  return v4 + (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(a1, a2) * 0.0;
}

float H12ANEHeuristics::get_aggregate_write_bw(uint64_t a1, uint64_t a2)
{
  double v4;

  v4 = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 2);
  return v4 + (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 48))(a1, a2) * 0.0;
}

float H12ANEHeuristics::get_flops_per_sec(uint64_t a1, int a2)
{
  uint64_t *v2;

  v2 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((_QWORD *)(a1 + 88), a2);
  if (!v2)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  return *((float *)v2 + 5) * 2048.0;
}

uint64_t H12ANEHeuristics::get_highest_device_pstate(H12ANEHeuristics *this)
{
  return 2;
}

float H12ANEHeuristics::get_dram_bw(uint64_t a1, int a2)
{
  uint64_t *v2;

  v2 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((_QWORD *)(a1 + 48), a2);
  if (!v2)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  return *((float *)v2 + 5);
}

uint64_t H12ANEHeuristics::get_l2_cache_size(H12ANEHeuristics *this)
{
  return 0x200000;
}

uint64_t H12ANEHeuristics::get_num_nes(H12ANEHeuristics *this)
{
  return 8;
}

uint64_t H12ANEHeuristics::get_macs_per_ne(H12ANEHeuristics *this)
{
  return 256;
}

unint64_t H12ANEHeuristics::get_core_clock_freq(uint64_t a1, int a2)
{
  uint64_t *v2;

  v2 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((_QWORD *)(a1 + 88), a2);
  if (!v2)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  return (unint64_t)*((float *)v2 + 5);
}

unint64_t H12ANEHeuristics::get_l2_system_freq(uint64_t a1, int a2)
{
  uint64_t *v2;

  v2 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((_QWORD *)(a1 + 128), a2);
  if (!v2)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  return (unint64_t)*((float *)v2 + 5);
}

uint64_t H12ANEHeuristics::get_l2_bcast_througput(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 128))(a1) << 7;
}

uint64_t H12ANEHeuristics::get_l2_wb_bw(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 128))(a1) << 8;
}

uint64_t ANEPerfHeuristics::get_ne_task_execution_time(ANEPerfHeuristics *this)
{
  return 0x7FFFFFFFLL;
}

void newpANEHeuristics::~newpANEHeuristics(newpANEHeuristics *this)
{
  newpANEHeuristics::~newpANEHeuristics(this);
  JUMPOUT(0x19401CD90);
}

{
  char *v2;

  *(_QWORD *)this = &off_1E2D564D0;
  v2 = (char *)this + 8;
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)this + 128);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)this + 88);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)this + 48);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)v2);
}

float newpANEHeuristics::get_af_read_bw(uint64_t a1, int a2)
{
  uint64_t *v2;

  v2 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((_QWORD *)(a1 + 8), a2);
  if (!v2)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  return *((float *)v2 + 5) * 0.5;
}

float newpANEHeuristics::get_af_write_bw(uint64_t a1, int a2)
{
  uint64_t *v2;

  v2 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((_QWORD *)(a1 + 8), a2);
  if (!v2)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  return *((float *)v2 + 5) * 0.5;
}

float newpANEHeuristics::get_aggregate_local_cache_write_bw(uint64_t a1, int a2)
{
  uint64_t *v2;

  v2 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((_QWORD *)(a1 + 128), a2);
  if (!v2)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  return (float)(*((float *)v2 + 5) * 256.0) * 9.3132e-10;
}

float newpANEHeuristics::get_aggregate_write_bw(uint64_t a1, uint64_t a2)
{
  double v4;

  v4 = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 2);
  return v4 + (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 48))(a1, a2) * 0.0;
}

float newpANEHeuristics::get_dram_bw(uint64_t a1, int a2)
{
  uint64_t *v2;

  v2 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((_QWORD *)(a1 + 48), a2);
  if (!v2)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  return *((float *)v2 + 5);
}

uint64_t newpANEHeuristics::get_l2_cache_size(newpANEHeuristics *this)
{
  return 0x200000;
}

unint64_t newpANEHeuristics::get_core_clock_freq(uint64_t a1, int a2)
{
  uint64_t *v2;

  v2 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((_QWORD *)(a1 + 88), a2);
  if (!v2)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  return (unint64_t)*((float *)v2 + 5);
}

unint64_t newpANEHeuristics::get_l2_system_freq(uint64_t a1, int a2)
{
  uint64_t *v2;

  v2 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((_QWORD *)(a1 + 128), a2);
  if (!v2)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  return (unint64_t)*((float *)v2 + 5);
}

uint64_t newpANEHeuristics::get_l2_bcast_througput(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 128))(a1) << 7;
}

uint64_t newpANEHeuristics::get_l2_wb_bw(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 128))(a1) << 8;
}

void Espresso::HXEngine::HXCompiler::~HXCompiler(std::__shared_weak_count **this)
{
  Espresso::HXEngine::HXCompiler::~HXCompiler(this);
  JUMPOUT(0x19401CD90);
}

{
  std::__shared_weak_count *v2;
  void **v3;

  *this = (std::__shared_weak_count *)&off_1E2DA41E0;
  Espresso::HXEngine::HXCompiler::reset((Espresso::HXEngine::HXCompiler *)this);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 27));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 25));
  v3 = (void **)(this + 22);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::__tree<std::__value_type<std::shared_ptr<Espresso::HXEngine::blob_container>,unsigned int>,std::__map_value_compare<std::shared_ptr<Espresso::HXEngine::blob_container>,std::__value_type<std::shared_ptr<Espresso::HXEngine::blob_container>,unsigned int>,std::less<std::shared_ptr<Espresso::HXEngine::blob_container>>,true>,std::allocator<std::__value_type<std::shared_ptr<Espresso::HXEngine::blob_container>,unsigned int>>>::destroy(this[20]);
  v3 = (void **)(this + 16);
  std::vector<Espresso::HXEngine::HXCompiler::op_t>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 4));
  *this = (std::__shared_weak_count *)off_1E2D5FD08;
  v2 = this[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

void Espresso::HXEngine::HXCompiler::build(Espresso::HXEngine::HXCompiler *this, uint64_t a2, int a3, int a4)
{
  uint64_t v4;
  uint64_t i;
  _QWORD *v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  BOOL v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  unint64_t v19;
  __int128 v20;
  unint64_t *v21;
  unint64_t v22;
  _OWORD *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  __int128 v33;
  unint64_t *v34;
  unint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  char *v38;
  __int128 v39;
  int64x2_t v40;
  int j;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *size;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  __int128 v54;
  unint64_t *v55;
  unint64_t v56;
  unsigned __int8 *v57;
  uint64_t v58;
  _QWORD *v59;
  unsigned __int8 *v60;
  unsigned __int8 **v61;
  uint64_t v62;
  size_t v63;
  unsigned __int8 *v64;
  unsigned __int8 *v65;
  int v66;
  uint64_t v67;
  int v68;
  int v69;
  int v70;
  int v71;
  BOOL v73;
  BOOL v74;
  _BOOL4 v75;
  int v76;
  _BOOL4 v77;
  _BOOL4 v78;
  const char *v79;
  uint64_t v80;
  _QWORD *v81;
  _QWORD *v82;
  uint64_t v83;
  CVPixelBufferRef *v84;
  CVPixelBufferRef *v85;
  int v86;
  uint64_t v87;
  int v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *p_shared_owners;
  unint64_t v97;
  uint64_t v98;
  unint64_t *v99;
  unint64_t v100;
  _QWORD *v101;
  _QWORD *v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  unsigned int v106;
  unsigned int v107;
  int v108;
  BOOL v109;
  unsigned int v110;
  int v111;
  uint64_t v112;
  unint64_t v113;
  __int128 v114;
  unint64_t *v115;
  unint64_t v116;
  uint64_t **v117;
  int v118;
  int v119;
  int v120;
  int v121;
  int v122;
  uint64_t **v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  __CVBuffer *v127;
  unsigned int v128;
  unsigned int v129;
  int v130;
  BOOL v131;
  unsigned int v132;
  uint64_t v133;
  unint64_t v134;
  unsigned int v135;
  unsigned int v136;
  uint64_t v137;
  _DWORD *v138;
  __CVBuffer *v139;
  _DWORD *BaseAddress;
  int v141;
  uint64_t v142;
  unsigned int v143;
  uint64_t v144;
  unsigned int *v145;
  unsigned int v146;
  int *v147;
  uint64_t v148;
  int v149;
  const void *v150;
  unsigned int v151;
  int v152;
  unint64_t v153;
  unsigned int v154;
  unsigned int v155;
  int v156;
  BOOL v157;
  unsigned int v158;
  CVPixelBufferRef v159;
  unsigned int v160;
  unsigned int v161;
  int v162;
  BOOL v163;
  unsigned int v164;
  CVPixelBufferRef v165;
  unsigned int v166;
  unsigned int v167;
  int v168;
  BOOL v169;
  unsigned int v170;
  CVPixelBufferRef v171;
  unsigned int v172;
  unsigned int v173;
  int v174;
  BOOL v175;
  unsigned int v176;
  __CVBuffer *v177;
  char *v178;
  uint64_t v179;
  char *v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t **v183;
  uint64_t v184;
  uint64_t **v185;
  uint64_t v186;
  _DWORD *v187;
  uint64_t v188;
  int v189;
  uint64_t v190;
  _DWORD *v191;
  unsigned int v192;
  int *v193;
  char *v194;
  uint64_t k;
  uint64_t v196;
  _QWORD *v197;
  _QWORD *v198;
  int v199;
  int v200;
  int v201;
  int v202;
  int v203;
  int v204;
  int v205;
  char *v206;
  unsigned int v207;
  _QWORD *v208;
  _QWORD *v209;
  uint64_t m;
  uint64_t v211;
  std::__shared_weak_count *v212;
  unint64_t *v213;
  unint64_t v214;
  std::runtime_error *exception;
  std::string *v216;
  __int128 v217;
  std::runtime_error *v218;
  std::string *v219;
  __int128 v220;
  std::string *v221;
  __int128 v222;
  std::runtime_error *v223;
  std::string *v224;
  __int128 v225;
  std::string *v226;
  __int128 v227;
  unsigned int v228[2];
  unsigned int v229;
  unsigned int v230[2];
  unsigned int v231[2];
  unsigned int v232[2];
  unsigned int v233[2];
  unsigned int v234[2];
  unsigned int v235;
  _BOOL8 v236;
  BOOL v237;
  BOOL v238;
  BOOL v239;
  BOOL v240;
  BOOL v241;
  BOOL v242;
  unsigned int v243;
  unsigned int v244;
  unsigned int v245;
  unsigned int v246;
  unsigned int v247;
  unsigned int v248;
  uint64_t v249;
  unint64_t v250;
  uint64_t v251;
  std::__shared_weak_count **v252;
  int v253;
  std::__shared_weak_count **v254;
  unint64_t v255[2];
  unint64_t v256[2];
  __int128 v257;
  std::string v258;
  uint64_t v259;
  char *v260;
  std::string v261;
  std::string v262;

  if (*((_DWORD *)this + 20))
    return;
  LODWORD(v4) = a4;
  LODWORD(i) = a3;
  if (*((int *)this + 14) >= 1)
    printf("[HXCompiler::build] %d %d\n", a3, a4);
  Espresso::HXEngine::HXCompiler::reset(this);
  if ((v4 & 0x80000000) != 0)
    v4 = (*(_QWORD *)(*((_QWORD *)this + 6) + 40) - *(_QWORD *)(*((_QWORD *)this + 6) + 32)) >> 4;
  *((_DWORD *)this + 23) = i;
  *((_DWORD *)this + 24) = v4;
  *((_DWORD *)this + 25) = 0;
  v249 = a2;
  v14 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)&v257 = v8;
  *((_QWORD *)&v257 + 1) = v14;
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v8[16] = this;
  if ((int)v4 > (int)i)
  {
    for (i = (int)i; (_DWORD)v4 != (_DWORD)i; ++i)
    {
      *((_DWORD *)this + 22) = i;
      if (*((_QWORD *)this + 27))
      {
        v17 = *(_QWORD *)(*((_QWORD *)this + 6) + 32);
        v18 = (_OWORD *)*((_QWORD *)this + 23);
        v19 = *((_QWORD *)this + 24);
        if ((unint64_t)v18 >= v19)
        {
          v25 = *((_QWORD *)this + 22);
          v26 = ((uint64_t)v18 - v25) >> 4;
          v27 = v26 + 1;
          if ((unint64_t)(v26 + 1) >> 60)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v28 = v19 - v25;
          if (v28 >> 3 > v27)
            v27 = v28 >> 3;
          if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF0)
            v29 = 0xFFFFFFFFFFFFFFFLL;
          else
            v29 = v27;
          v260 = (char *)this + 192;
          v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v29);
          v32 = &v30[16 * v26];
          v33 = *(_OWORD *)(v17 + 16 * i);
          *(_OWORD *)v32 = v33;
          if (*((_QWORD *)&v33 + 1))
          {
            v34 = (unint64_t *)(*((_QWORD *)&v33 + 1) + 8);
            do
              v35 = __ldxr(v34);
            while (__stxr(v35 + 1, v34));
          }
          v37 = (_QWORD *)*((_QWORD *)this + 22);
          v36 = (_QWORD *)*((_QWORD *)this + 23);
          if (v36 == v37)
          {
            v40 = vdupq_n_s64((unint64_t)v36);
            v38 = &v30[16 * v26];
          }
          else
          {
            v38 = &v30[16 * v26];
            do
            {
              v39 = *((_OWORD *)v36 - 1);
              v36 -= 2;
              *((_OWORD *)v38 - 1) = v39;
              v38 -= 16;
              *v36 = 0;
              v36[1] = 0;
            }
            while (v36 != v37);
            v40 = *((int64x2_t *)this + 11);
          }
          v23 = v32 + 16;
          *((_QWORD *)this + 22) = v38;
          *((_QWORD *)this + 23) = v32 + 16;
          *(int64x2_t *)&v258.__r_.__value_.__r.__words[1] = v40;
          v48 = *((_QWORD *)this + 24);
          *((_QWORD *)this + 24) = &v30[16 * v31];
          v259 = v48;
          v258.__r_.__value_.__r.__words[0] = v40.i64[0];
          std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v258);
        }
        else
        {
          v20 = *(_OWORD *)(v17 + 16 * i);
          *v18 = v20;
          if (*((_QWORD *)&v20 + 1))
          {
            v21 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
            do
              v22 = __ldxr(v21);
            while (__stxr(v22 + 1, v21));
          }
          v23 = v18 + 1;
        }
        *((_QWORD *)this + 23) = v23;
      }
      else
      {
        v24 = *((_DWORD *)this + 18);
        if (v24 < 1)
        {
          v24 = 1;
LABEL_35:
          for (j = 0; j != v24; ++j)
          {
            v42 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 6) + 32) + 16 * i);
            *(_OWORD *)&v258.__r_.__value_.__l.__data_ = v257;
            if (*((_QWORD *)&v257 + 1))
            {
              v43 = (unint64_t *)(*((_QWORD *)&v257 + 1) + 8);
              do
                v44 = __ldxr(v43);
              while (__stxr(v44 + 1, v43));
            }
            (*(void (**)(uint64_t, std::string *, uint64_t))(*(_QWORD *)v42 + 8))(v42, &v258, i);
            size = (std::__shared_weak_count *)v258.__r_.__value_.__l.__size_;
            if (v258.__r_.__value_.__l.__size_)
            {
              v46 = (unint64_t *)(v258.__r_.__value_.__l.__size_ + 8);
              do
                v47 = __ldaxr(v46);
              while (__stlxr(v47 - 1, v46));
              if (!v47)
              {
                ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
                std::__shared_weak_count::__release_weak(size);
              }
            }
          }
          continue;
        }
        if (*((_DWORD *)this + 17) == (_DWORD)i)
          goto LABEL_35;
      }
    }
  }
  v50 = *((_QWORD *)this + 16);
  v49 = *((_QWORD *)this + 17);
  if (v49 != v50)
  {
    v51 = 0;
    v250 = *(int *)(v49 - 132);
    do
    {
      v52 = *(int *)(v50 + 136 * v51 + 4);
      v53 = *((_QWORD *)this + 6);
      v54 = *(_OWORD *)(*(_QWORD *)(v53 + 32) + 16 * v52);
      *(_OWORD *)&v261.__r_.__value_.__l.__data_ = v54;
      if (*((_QWORD *)&v54 + 1))
      {
        v55 = (unint64_t *)(*((_QWORD *)&v54 + 1) + 8);
        do
          v56 = __ldxr(v55);
        while (__stxr(v56 + 1, v55));
        v53 = *((_QWORD *)this + 6);
      }
      v258.__r_.__value_.__r.__words[0] = v52;
      v57 = (unsigned __int8 *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v53 + 96, v52, &v258)[3];
      v58 = *((_QWORD *)this + 6) + 96;
      v262.__r_.__value_.__r.__words[0] = v250;
      v59 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v58, v250, &v262);
      v61 = (unsigned __int8 **)v59[3];
      v62 = v57[23];
      v63 = *((_QWORD *)v57 + 1);
      if ((v62 & 0x80u) == 0)
        v64 = (unsigned __int8 *)v57[23];
      else
        v64 = (unsigned __int8 *)*((_QWORD *)v57 + 1);
      v65 = (unsigned __int8 *)*((unsigned __int8 *)v61 + 23);
      v66 = (char)v65;
      if ((char)v65 < 0)
        v65 = v61[1];
      if (v64 == v65)
      {
        if (v66 >= 0)
          v60 = (unsigned __int8 *)v59[3];
        else
          v60 = *v61;
        if ((v62 & 0x80) != 0)
        {
          v75 = memcmp(*(const void **)v57, v60, v63) == 0;
        }
        else if (v57[23])
        {
          v67 = v62 - 1;
          do
          {
            v69 = *v57++;
            v68 = v69;
            v71 = *v60++;
            v70 = v71;
            v73 = v67-- != 0;
            v74 = v68 == v70;
            v75 = v68 == v70;
          }
          while (v74 && v73);
        }
        else
        {
          v75 = 1;
        }
      }
      else
      {
        v75 = 0;
      }
      v76 = *((_DWORD *)this + 18);
      v77 = v76 < 1 && v51 == 0;
      v78 = v76 < 1 && v75;
      if (*((int *)this + 14) > 1)
      {
        v79 = (const char *)(v261.__r_.__value_.__r.__words[0] + 16);
        if (*(char *)(v261.__r_.__value_.__r.__words[0] + 39) < 0)
          v79 = *(const char **)v79;
        printf("\n[HXCompiler buffer mgmt] iop=%d ilayer=%d layer=%s in=%d out=%d\n", v51, v52, v79, v77, v78);
      }
      v251 = v51;
      v80 = v50 + 136 * v51;
      v81 = *(_QWORD **)(v80 + 80);
      v82 = (_QWORD *)(v80 + 88);
      if (v81 != (_QWORD *)(v80 + 88))
      {
        v83 = v50 + 136 * v51;
        v84 = (CVPixelBufferRef *)(v83 + 120);
        v85 = (CVPixelBufferRef *)(v83 + 104);
        v252 = (std::__shared_weak_count **)(v83 + 128);
        v254 = (std::__shared_weak_count **)(v83 + 112);
        do
        {
          v86 = *((_DWORD *)v81 + 7);
          v87 = (*((_DWORD *)v81 + 10) * *((_DWORD *)v81 + 13));
          if ((v86 & 0xFFFFFFFD) != 0)
          {
            if ((v86 - 12) > 2)
            {
              if ((v86 & 0xFFFFFFFE) != 4)
              {
                exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::to_string(&v262, v86);
                v216 = std::string::insert(&v262, 0, "Unknown buffer code emitted ");
                v217 = *(_OWORD *)&v216->__r_.__value_.__l.__data_;
                v258.__r_.__value_.__r.__words[2] = v216->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v258.__r_.__value_.__l.__data_ = v217;
                v216->__r_.__value_.__l.__size_ = 0;
                v216->__r_.__value_.__r.__words[2] = 0;
                v216->__r_.__value_.__r.__words[0] = 0;
                std::runtime_error::runtime_error(exception, &v258);
                __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
              }
              v88 = *((_DWORD *)this + 26);
              *((_DWORD *)v81 + 12) += v88;
              *((_DWORD *)this + 26) = v88 + v87;
              if (*((int *)this + 14) >= 2)
              {
                v236 = v87;
                printf("\t[HXCompiler] weight: offs=%d size=%d\n");
              }
            }
            else if (v78)
            {
              Espresso::HXEngine::blob_container::force_allocate(*v84, (uint64_t)v60, v63, v9, v10, v11, v12, v13);
              *((_QWORD *)this + 15) = *((_QWORD *)*v84 + 21);
              if (*((int *)this + 14) >= 2)
              {
                v236 = v87;
                printf("\t[HXCompiler] output: offs=%d size=%d\n");
              }
            }
            else
            {
              *((_DWORD *)v81 + 8) = 1;
              v255[0] = (unint64_t)*v84;
              v95 = *v252;
              v255[1] = (unint64_t)v95;
              if (v95)
              {
                p_shared_owners = (unint64_t *)&v95->__shared_owners_;
                do
                  v97 = __ldxr(p_shared_owners);
                while (__stxr(v97 + 1, p_shared_owners));
              }
              v98 = Espresso::HXEngine::HXCompiler::build(std::shared_ptr<Espresso::abstract_batch> const&,int,int)::$_0::operator()((uint64_t)this, v255);
              if (v95)
              {
                v99 = (unint64_t *)&v95->__shared_owners_;
                do
                  v100 = __ldaxr(v99);
                while (__stlxr(v100 - 1, v99));
                if (!v100)
                {
                  ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
                  std::__shared_weak_count::__release_weak(v95);
                }
              }
              *((_DWORD *)v81 + 12) += v98;
              if (*((int *)this + 14) >= 2)
              {
                v236 = v98;
                printf("\t[HXCompiler] intermediate output: offs=%d (%d) size=%d\n");
              }
            }
          }
          else if (v77)
          {
            Espresso::HXEngine::blob_container::force_allocate(*v85, (uint64_t)v60, v63, v9, v10, v11, v12, v13);
            *((_QWORD *)this + 14) = *((_QWORD *)*v85 + 21);
            if (*((int *)this + 14) >= 2)
            {
              v236 = v87;
              printf("\t[HXCompiler] input: offs=%d size=%d\n");
            }
          }
          else
          {
            *((_DWORD *)v81 + 8) = 1;
            v256[0] = (unint64_t)*v85;
            v89 = *v254;
            v256[1] = (unint64_t)v89;
            if (v89)
            {
              v90 = (unint64_t *)&v89->__shared_owners_;
              do
                v91 = __ldxr(v90);
              while (__stxr(v91 + 1, v90));
            }
            v92 = Espresso::HXEngine::HXCompiler::build(std::shared_ptr<Espresso::abstract_batch> const&,int,int)::$_0::operator()((uint64_t)this, v256);
            if (v89)
            {
              v93 = (unint64_t *)&v89->__shared_owners_;
              do
                v94 = __ldaxr(v93);
              while (__stlxr(v94 - 1, v93));
              if (!v94)
              {
                ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
                std::__shared_weak_count::__release_weak(v89);
              }
            }
            *((_DWORD *)v81 + 12) += v92;
            if (*((int *)this + 14) >= 2)
            {
              v236 = v92;
              printf("\t[HXCompiler] intermediate input: offs=%d (%d) size=%d\n");
            }
          }
          v101 = (_QWORD *)v81[1];
          if (v101)
          {
            do
            {
              v102 = v101;
              v101 = (_QWORD *)*v101;
            }
            while (v101);
          }
          else
          {
            do
            {
              v102 = (_QWORD *)v81[2];
              v74 = *v102 == (_QWORD)v81;
              v81 = v102;
            }
            while (!v74);
          }
          v81 = v102;
        }
        while (v102 != v82);
      }
      v103 = (std::__shared_weak_count *)v261.__r_.__value_.__l.__size_;
      if (v261.__r_.__value_.__l.__size_)
      {
        v104 = (unint64_t *)(v261.__r_.__value_.__l.__size_ + 8);
        do
          v105 = __ldaxr(v104);
        while (__stlxr(v105 - 1, v104));
        if (!v105)
        {
          ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
          std::__shared_weak_count::__release_weak(v103);
        }
      }
      v51 = v251 + 1;
      v50 = *((_QWORD *)this + 16);
    }
    while (0xF0F0F0F0F0F0F0F1 * ((*((_QWORD *)this + 17) - v50) >> 3) > v251 + 1);
  }
  if (*((int *)this + 18) > 0)
  {
    *((_QWORD *)this + 15) = Espresso::HXEngine::H10ISPCreateCVBuffer((Espresso::HXEngine *)1, 8u, 1, v9, v10, v11, v12, v13, v228[0], v228[1], v236, HIDWORD(v236));
    *((_QWORD *)this + 14) = Espresso::HXEngine::H10ISPCreateCVBuffer((Espresso::HXEngine *)1, 8u, 1, v106, v107, v108, v109, v110, v229, v235, v237, v243);
  }
  v111 = *((_DWORD *)this + 14);
  if (v111 > 1)
  {
    v112 = *((_QWORD *)this + 16);
    if (*((_QWORD *)this + 17) == v112)
    {
LABEL_149:
      printf("[HXCompiler size (MB)] n_buffs=%d intermediate=%.2f weights=%.2f total=%.2f\n", *((_QWORD *)this + 21), (float)((float)*((unsigned int *)this + 25) * 0.00000095367), (float)((float)*((unsigned int *)this + 26) * 0.00000095367), (float)((float)(*((_DWORD *)this + 26) + *((_DWORD *)this + 25)) * 0.00000095367));
      goto LABEL_150;
    }
    v113 = 0;
    do
    {
      v114 = *(_OWORD *)(*(_QWORD *)(*((_QWORD *)this + 6) + 32) + 16 * *(int *)(v112 + 136 * v113 + 4));
      *(_OWORD *)&v258.__r_.__value_.__l.__data_ = v114;
      if (*((_QWORD *)&v114 + 1))
      {
        v115 = (unint64_t *)(*((_QWORD *)&v114 + 1) + 8);
        do
          v116 = __ldxr(v115);
        while (__stxr(v116 + 1, v115));
      }
      v117 = (uint64_t **)(v112 + 136 * v113 + 80);
      LODWORD(v262.__r_.__value_.__l.__data_) = 0;
      v118 = *((_DWORD *)std::__tree<std::__value_type<int,Espresso::HXEngine::HXCompiler::buffer_info_t>,std::__map_value_compare<int,std::__value_type<int,Espresso::HXEngine::HXCompiler::buffer_info_t>,std::less<int>,true>,std::allocator<std::__value_type<int,Espresso::HXEngine::HXCompiler::buffer_info_t>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(v117, 0, &v262)+ 12);
      LODWORD(v262.__r_.__value_.__l.__data_) = 12;
      v119 = *((_DWORD *)std::__tree<std::__value_type<int,Espresso::HXEngine::HXCompiler::buffer_info_t>,std::__map_value_compare<int,std::__value_type<int,Espresso::HXEngine::HXCompiler::buffer_info_t>,std::less<int>,true>,std::allocator<std::__value_type<int,Espresso::HXEngine::HXCompiler::buffer_info_t>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(v117, 12, &v262)+ 12);
      LODWORD(v262.__r_.__value_.__l.__data_) = 0;
      v120 = *((_DWORD *)std::__tree<std::__value_type<int,Espresso::HXEngine::HXCompiler::buffer_info_t>,std::__map_value_compare<int,std::__value_type<int,Espresso::HXEngine::HXCompiler::buffer_info_t>,std::less<int>,true>,std::allocator<std::__value_type<int,Espresso::HXEngine::HXCompiler::buffer_info_t>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(v117, 0, &v262)+ 10);
      LODWORD(v261.__r_.__value_.__l.__data_) = 0;
      v121 = *((_DWORD *)std::__tree<std::__value_type<int,Espresso::HXEngine::HXCompiler::buffer_info_t>,std::__map_value_compare<int,std::__value_type<int,Espresso::HXEngine::HXCompiler::buffer_info_t>,std::less<int>,true>,std::allocator<std::__value_type<int,Espresso::HXEngine::HXCompiler::buffer_info_t>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(v117, 0, &v261)+ 13);
      LODWORD(v262.__r_.__value_.__l.__data_) = 12;
      v122 = *((_DWORD *)std::__tree<std::__value_type<int,Espresso::HXEngine::HXCompiler::buffer_info_t>,std::__map_value_compare<int,std::__value_type<int,Espresso::HXEngine::HXCompiler::buffer_info_t>,std::less<int>,true>,std::allocator<std::__value_type<int,Espresso::HXEngine::HXCompiler::buffer_info_t>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(v117, 12, &v262)+ 10);
      LODWORD(v261.__r_.__value_.__l.__data_) = 12;
      v123 = std::__tree<std::__value_type<int,Espresso::HXEngine::HXCompiler::buffer_info_t>,std::__map_value_compare<int,std::__value_type<int,Espresso::HXEngine::HXCompiler::buffer_info_t>,std::less<int>,true>,std::allocator<std::__value_type<int,Espresso::HXEngine::HXCompiler::buffer_info_t>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(v117, 12, &v261);
      printf("[%d, %d, %d, %d, %d],\n", v113, v118, v121 * v120, v119, *((_DWORD *)v123 + 13) * v122);
      v124 = (std::__shared_weak_count *)v258.__r_.__value_.__l.__size_;
      if (v258.__r_.__value_.__l.__size_)
      {
        v125 = (unint64_t *)(v258.__r_.__value_.__l.__size_ + 8);
        do
          v126 = __ldaxr(v125);
        while (__stlxr(v126 - 1, v125));
        if (!v126)
        {
          ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
          std::__shared_weak_count::__release_weak(v124);
        }
      }
      ++v113;
      v112 = *((_QWORD *)this + 16);
    }
    while (0xF0F0F0F0F0F0F0F1 * ((*((_QWORD *)this + 17) - v112) >> 3) > v113);
    v111 = *((_DWORD *)this + 14);
  }
  if (v111 >= 1)
    goto LABEL_149;
LABEL_150:
  v127 = Espresso::HXEngine::H10ISPCreateCVBuffer((Espresso::HXEngine *)1, 8u, 1, v9, v10, v11, v12, v13, v228[0], v228[1], v236, HIDWORD(v236));
  *((_QWORD *)this + 32) = v127;
  if (!v127)
  {
    std::string::basic_string[abi:ne180100]<0>(&v258, "error");
    std::string::basic_string[abi:ne180100]<0>(&v262, "Could not allocate operations buffer");
    Espresso::HXEngine::HXCompiler::error((uint64_t)&v258, (uint64_t)&v262);
  }
  CVPixelBufferLockBaseAddress(v127, 0);
  *(_DWORD *)CVPixelBufferGetBaseAddress(*((CVPixelBufferRef *)this + 32)) = 0;
  CVPixelBufferUnlockBaseAddress(*((CVPixelBufferRef *)this + 32), 0);
  v133 = *((_QWORD *)this + 16);
  v134 = 0xF0F0F0F0F0F0F0F1 * ((*((_QWORD *)this + 17) - v133) >> 3);
  v135 = -1010580540 * ((*((_QWORD *)this + 17) - v133) >> 3) + 4;
  v136 = v135;
  if ((_DWORD)v134)
  {
    v137 = -252645135 * ((*((_QWORD *)this + 17) - v133) >> 3);
    v138 = (_DWORD *)(v133 + 16);
    v136 = v135;
    do
    {
      v136 += *v138 - *(v138 - 2) + 16;
      v138 += 34;
      --v137;
    }
    while (v137);
  }
  v139 = Espresso::HXEngine::H10ISPCreateCVBuffer((Espresso::HXEngine *)((v136 >> 4) + 1), 8u, 1, v128, v129, v130, v131, v132, v230[0], v230[1], v238, v244);
  *((_QWORD *)this + 31) = v139;
  if (!v139)
  {
    std::string::basic_string[abi:ne180100]<0>(&v258, "error");
    std::string::basic_string[abi:ne180100]<0>(&v262, "Could not allocate operations buffer");
    Espresso::HXEngine::HXCompiler::error((uint64_t)&v258, (uint64_t)&v262);
  }
  CVPixelBufferLockBaseAddress(v139, 0);
  BaseAddress = CVPixelBufferGetBaseAddress(*((CVPixelBufferRef *)this + 31));
  if (*((int *)this + 14) >= 2)
    printf("[HXCompiler::build_operations] n_ops=%d\n", v134);
  *BaseAddress = v134;
  if ((_DWORD)v134)
  {
    v141 = 0;
    v142 = 0;
    v143 = 0;
    v144 = 136 * v134;
    v145 = BaseAddress + 1;
    do
    {
      if (v142)
      {
        v146 = *(v145 - 1) + v143;
        *v145 = v146;
      }
      else
      {
        BaseAddress[1] = v135;
        v146 = v135;
      }
      v147 = (_DWORD *)((char *)BaseAddress + v146);
      v148 = *((_QWORD *)this + 16) + v142;
      v149 = *(_DWORD *)v148;
      v147[1] = *(_DWORD *)v148;
      v150 = *(const void **)(v148 + 8);
      v151 = *(_QWORD *)(v148 + 16) - (_DWORD)v150;
      v147[3] = v151;
      if (*((_DWORD *)this + 15))
        v152 = v141;
      else
        v152 = -1;
      *v147 = v152;
      if (v151)
        memcpy(v147 + 4, v150, v151);
      if (v149 != 4)
      {
        v218 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::to_string(&v261, v147[1]);
        v219 = std::string::insert(&v261, 0, "Id ");
        v220 = *(_OWORD *)&v219->__r_.__value_.__l.__data_;
        v262.__r_.__value_.__r.__words[2] = v219->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v262.__r_.__value_.__l.__data_ = v220;
        v219->__r_.__value_.__l.__size_ = 0;
        v219->__r_.__value_.__r.__words[2] = 0;
        v219->__r_.__value_.__r.__words[0] = 0;
        v221 = std::string::append(&v262, " Not supported");
        v222 = *(_OWORD *)&v221->__r_.__value_.__l.__data_;
        v258.__r_.__value_.__r.__words[2] = v221->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v258.__r_.__value_.__l.__data_ = v222;
        v221->__r_.__value_.__l.__size_ = 0;
        v221->__r_.__value_.__r.__words[2] = 0;
        v221->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v218, &v258);
        __cxa_throw(v218, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      if (*((int *)this + 14) >= 3)
      {
        printf("************************Operation %d ***************************\n", v141);
        printf("primitiveId = %d\n", *(_DWORD *)(*((_QWORD *)this + 16) + v142));
        printf("sizeOfConfig = %d\n", v147[3]);
        printf("offset = %d\n", *v145);
        puts("*****************************************************************");
      }
      v143 = v151 + 16;
      v142 += 136;
      ++v141;
      ++v145;
    }
    while (v144 != v142);
  }
  CVPixelBufferUnlockBaseAddress(*((CVPixelBufferRef *)this + 31), 0);
  v153 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*((_QWORD *)this + 17) - *((_QWORD *)this + 16)) >> 3);
  v159 = Espresso::HXEngine::H10ISPCreateCVBuffer((Espresso::HXEngine *)(((-1263225592* ((uint64_t)(*((_QWORD *)this + 17) - *((_QWORD *)this + 16)) >> 3)) >> 4)+ 1), 8u, 1, v154, v155, v156, v157, v158, v231[0], v231[1], v239, v245);
  *((_QWORD *)this + 30) = v159;
  if (!v159)
  {
    std::string::basic_string[abi:ne180100]<0>(&v258, "error");
    std::string::basic_string[abi:ne180100]<0>(&v262, "Could not allocate actions buffer");
    Espresso::HXEngine::HXCompiler::error((uint64_t)&v258, (uint64_t)&v262);
  }
  v165 = Espresso::HXEngine::H10ISPCreateCVBuffer((Espresso::HXEngine *)0x41, 8u, 1, v160, v161, v162, v163, v164, v232[0], v232[1], v240, v246);
  *((_QWORD *)this + 34) = v165;
  if (!v165)
  {
    std::string::basic_string[abi:ne180100]<0>(&v258, "error");
    std::string::basic_string[abi:ne180100]<0>(&v262, "Could not allocate metadata buffer");
    Espresso::HXEngine::HXCompiler::error((uint64_t)&v258, (uint64_t)&v262);
  }
  v171 = Espresso::HXEngine::H10ISPCreateCVBuffer((Espresso::HXEngine *)((*((_DWORD *)this + 25) >> 4) + 1), 8u, 1, v166, v167, v168, v169, v170, v233[0], v233[1], v241, v247);
  *((_QWORD *)this + 33) = v171;
  if (!v171)
  {
    std::string::basic_string[abi:ne180100]<0>(&v258, "error");
    std::string::basic_string[abi:ne180100]<0>(&v262, "Could not allocate intemediate buffer");
    Espresso::HXEngine::HXCompiler::error((uint64_t)&v258, (uint64_t)&v262);
  }
  v177 = Espresso::HXEngine::H10ISPCreateCVBuffer((Espresso::HXEngine *)((*((_DWORD *)this + 26) >> 4) + 1), 8u, 1, v172, v173, v174, v175, v176, v234[0], v234[1], v242, v248);
  *((_QWORD *)this + 35) = v177;
  CVPixelBufferLockBaseAddress(v177, 0);
  v178 = (char *)CVPixelBufferGetBaseAddress(*((CVPixelBufferRef *)this + 35));
  v253 = v153;
  v179 = *((_QWORD *)this + 16);
  if (*((_QWORD *)this + 17) != v179)
  {
    v180 = v178;
    v181 = 0;
    v182 = 40;
    do
    {
      if (*(_QWORD *)(v179 + v182) != *(_QWORD *)(v179 + v182 - 8))
      {
        LODWORD(v258.__r_.__value_.__l.__data_) = 4;
        v183 = std::__tree<std::__value_type<int,Espresso::HXEngine::HXCompiler::buffer_info_t>,std::__map_value_compare<int,std::__value_type<int,Espresso::HXEngine::HXCompiler::buffer_info_t>,std::less<int>,true>,std::allocator<std::__value_type<int,Espresso::HXEngine::HXCompiler::buffer_info_t>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t **)(v179 + v182 + 40), 4, &v258);
        v184 = *((unsigned int *)v183 + 12);
        if (*((int *)this + 14) >= 2)
          printf("[HXCompiler] copying kernel0 %d %d\n", *((_DWORD *)v183 + 12), *(_DWORD *)(*((_QWORD *)this + 16) + v182) - *(_DWORD *)(*((_QWORD *)this + 16) + v182 - 8));
        memcpy(&v180[v184], *(const void **)(*((_QWORD *)this + 16) + v182 - 8), *(_QWORD *)(*((_QWORD *)this + 16) + v182) - *(_QWORD *)(*((_QWORD *)this + 16) + v182 - 8));
        v179 = *((_QWORD *)this + 16);
      }
      if (*(_QWORD *)(v179 + v182 + 24) != *(_QWORD *)(v179 + v182 + 16))
      {
        LODWORD(v258.__r_.__value_.__l.__data_) = 5;
        v185 = std::__tree<std::__value_type<int,Espresso::HXEngine::HXCompiler::buffer_info_t>,std::__map_value_compare<int,std::__value_type<int,Espresso::HXEngine::HXCompiler::buffer_info_t>,std::less<int>,true>,std::allocator<std::__value_type<int,Espresso::HXEngine::HXCompiler::buffer_info_t>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t **)(v179 + v182 + 40), 5, &v258);
        v186 = *((unsigned int *)v185 + 12);
        if (*((int *)this + 14) >= 2)
          printf("[HXCompiler] copying kernel1 %d %d\n", *((_DWORD *)v185 + 12), *(_DWORD *)(*((_QWORD *)this + 16) + v182) - *(_DWORD *)(*((_QWORD *)this + 16) + v182 - 8));
        memcpy(&v180[v186], *(const void **)(*((_QWORD *)this + 16) + v182 + 16), *(_QWORD *)(*((_QWORD *)this + 16) + v182 + 24) - *(_QWORD *)(*((_QWORD *)this + 16) + v182 + 16));
        v179 = *((_QWORD *)this + 16);
      }
      ++v181;
      v182 += 136;
    }
    while (0xF0F0F0F0F0F0F0F1 * ((*((_QWORD *)this + 17) - v179) >> 3) > v181);
  }
  CVPixelBufferUnlockBaseAddress(*((CVPixelBufferRef *)this + 35), 0);
  CVPixelBufferLockBaseAddress(*((CVPixelBufferRef *)this + 30), 0);
  v187 = CVPixelBufferGetBaseAddress(*((CVPixelBufferRef *)this + 30));
  *v187 = v253;
  if (v253)
  {
    v188 = 0;
    v189 = 0;
    do
    {
      v190 = *((_QWORD *)this + 16);
      if (v188)
      {
        v191 = &v187[v188];
        v192 = *v191 + v189;
        v191[1] = v192;
      }
      else
      {
        v187[1] = 4 * v253 + 4;
        v192 = v187[1];
      }
      v193 = (int *)(v190 + 136 * v188);
      v194 = (char *)v187 + v192;
      *((_QWORD *)v194 + 18) = 0;
      *((_OWORD *)v194 + 7) = 0u;
      *((_OWORD *)v194 + 8) = 0u;
      *((_OWORD *)v194 + 5) = 0u;
      *((_OWORD *)v194 + 6) = 0u;
      *((_OWORD *)v194 + 3) = 0u;
      *((_OWORD *)v194 + 4) = 0u;
      *((_OWORD *)v194 + 1) = 0u;
      *((_OWORD *)v194 + 2) = 0u;
      *(_OWORD *)v194 = 0u;
      if (*v193 != 4)
      {
        v223 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::to_string(&v261, *v193);
        v224 = std::string::insert(&v261, 0, "Id ");
        v225 = *(_OWORD *)&v224->__r_.__value_.__l.__data_;
        v262.__r_.__value_.__r.__words[2] = v224->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v262.__r_.__value_.__l.__data_ = v225;
        v224->__r_.__value_.__l.__size_ = 0;
        v224->__r_.__value_.__r.__words[2] = 0;
        v224->__r_.__value_.__r.__words[0] = 0;
        v226 = std::string::append(&v262, " Not supported");
        v227 = *(_OWORD *)&v226->__r_.__value_.__l.__data_;
        v258.__r_.__value_.__r.__words[2] = v226->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v258.__r_.__value_.__l.__data_ = v227;
        v226->__r_.__value_.__l.__size_ = 0;
        v226->__r_.__value_.__r.__words[2] = 0;
        v226->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v223, &v258);
        __cxa_throw(v223, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      *((_DWORD *)v194 + 36) = 15;
      for (k = 152; k != 1412; k += 84)
        *(_DWORD *)&v194[k] |= 0x7FFFFFFFu;
      *((_DWORD *)v194 + 37) = 0;
      *(_DWORD *)v194 = -1;
      *((_DWORD *)v194 + 1) = v188 & 0x7FFFFFFF;
      *((_DWORD *)v194 + 1) = v188 & 0x7FFFFFFF | ((*((_DWORD *)this + 15) == 0) << 31);
      *((_DWORD *)v194 + 3) = 0;
      if (*((int *)this + 14) > 1)
        printf("[HXCompiler action] #=%d offset=%d, n_buffers=%d\n", v188, v187[v188 + 1], *(_QWORD *)(v190 + 136 * v188 + 96));
      v196 = v190 + 136 * v188;
      v197 = *(_QWORD **)(v196 + 80);
      v198 = (_QWORD *)(v196 + 88);
      if (v197 != (_QWORD *)(v196 + 88))
      {
        do
        {
          v199 = *((_DWORD *)v197 + 8);
          v200 = *((_DWORD *)v197 + 7);
          v201 = *((_DWORD *)v197 + 9);
          v202 = *((_DWORD *)v197 + 10);
          v203 = *((_DWORD *)v197 + 12);
          v204 = *((_DWORD *)v197 + 13);
          v205 = *((_DWORD *)v197 + 14);
          v206 = &v194[84 * v200];
          v207 = *((_DWORD *)v206 + 38) & 0x80000000 | v199 & 0x7FFFFFFF;
          *((_WORD *)v206 + 83) = v205;
          *((_WORD *)v206 + 81) = v202;
          *((_WORD *)v206 + 82) = v201;
          *((_WORD *)v206 + 80) = v204;
          *((_DWORD *)v206 + 38) = v207;
          *((_DWORD *)v206 + 39) = v203;
          *((_DWORD *)v206 + 42) = 0;
          if (*((int *)this + 14) >= 2)
            printf("\tdst=%d buff_id=%d format=%d h=%d w=%d s=%d o=%d\n", v200, v199 & 0x7FFFFFFF, (unsigned __int16)v205, (unsigned __int16)v202, (unsigned __int16)v201, (unsigned __int16)v204, v203);
          v208 = (_QWORD *)v197[1];
          if (v208)
          {
            do
            {
              v209 = v208;
              v208 = (_QWORD *)*v208;
            }
            while (v208);
          }
          else
          {
            do
            {
              v209 = (_QWORD *)v197[2];
              v74 = *v209 == (_QWORD)v197;
              v197 = v209;
            }
            while (!v74);
          }
          v197 = v209;
        }
        while (v209 != v198);
      }
      ++v188;
      v189 = 1412;
    }
    while (v188 != v253);
  }
  CVPixelBufferUnlockBaseAddress(*((CVPixelBufferRef *)this + 30), 0);
  *((_QWORD *)this + 10) = 1;
  v211 = *((_QWORD *)this + 16);
  for (m = *((_QWORD *)this + 17);
        m != v211;
        std::allocator<Espresso::HXEngine::HXCompiler::op_t>::destroy[abi:ne180100](m))
  {
    m -= 136;
  }
  *((_QWORD *)this + 17) = v211;
  (*(void (**)(Espresso::HXEngine::HXCompiler *, uint64_t))(*(_QWORD *)this + 24))(this, v249);
  v212 = (std::__shared_weak_count *)*((_QWORD *)&v257 + 1);
  if (*((_QWORD *)&v257 + 1))
  {
    v213 = (unint64_t *)(*((_QWORD *)&v257 + 1) + 8);
    do
      v214 = __ldaxr(v213);
    while (__stlxr(v214 - 1, v213));
    if (!v214)
    {
      ((void (*)(std::__shared_weak_count *))v212->__on_zero_shared)(v212);
      std::__shared_weak_count::__release_weak(v212);
    }
  }
}

void sub_1914A2EF4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  void *v32;

  __cxa_free_exception(v32);
  if (a32 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x1914A2F54);
}

void Espresso::HXEngine::HXCompiler::__forward(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  __CVBuffer *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, _QWORD, _QWORD, uint64_t, const __CFString **, _QWORD);
  int v16;
  uint64_t (*v17)(uint64_t);
  int v18;
  uint64_t v19;
  uint64_t v20;
  void (***v21)(uint64_t *__return_ptr, _QWORD);
  std::string::size_type v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  __int128 v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  __int128 v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *size;
  unint64_t *v37;
  unint64_t v38;
  unint64_t *p_shared_owners;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::runtime_error *exception;
  int *v51;
  std::runtime_error *v52;
  std::string *v53;
  __int128 v54;
  std::runtime_error *v55;
  int v56;
  std::runtime_error *v57;
  std::string *v58;
  __int128 v59;
  _QWORD v60[5];
  __int128 v61;
  __int128 v62;
  __int128 v63;
  std::string v64;
  std::string v65;
  const __CFString *v66;
  uint64_t v67;
  const __CFString *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  const __CFString *v78;
  uint64_t v79;
  uint64_t v80;

  v80 = *MEMORY[0x1E0C80C00];
  if (!*(_DWORD *)(a1 + 80))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Network not built");
    goto LABEL_61;
  }
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 144);
  if (!v2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "HX context not setup");
LABEL_61:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v3 = *(_QWORD *)(a1 + 256);
  v66 = CFSTR("OperationsList");
  v67 = v3;
  if (*(_DWORD *)(a1 + 84) && *(_DWORD *)(a1 + 60))
  {
    v4 = *(__CVBuffer **)(a1 + 248);
    if (v4)
    {
      CVPixelBufferRelease(v4);
      *(_QWORD *)(a1 + 248) = 0;
    }
  }
  else
  {
    v67 = *(_QWORD *)(a1 + 248);
    *(_DWORD *)(a1 + 84) = 1;
  }
  v5 = *(_QWORD *)(a1 + 240);
  v68 = CFSTR("ActionsList");
  v69 = v5;
  v6 = getkFigCaptureISPProcessingSessionOutputID_Vision();
  v7 = *(_QWORD *)(a1 + 112);
  v70 = v6;
  v71 = v7;
  v8 = getkFigCaptureISPProcessingSessionOutputID_Vision();
  v9 = *(_QWORD *)(a1 + 264);
  v72 = v8;
  v73 = v9;
  v10 = getkFigCaptureISPProcessingSessionOutputID_Vision();
  v11 = *(_QWORD *)(a1 + 120);
  v74 = v10;
  v75 = v11;
  v12 = getkFigCaptureISPProcessingSessionOutputID_Vision();
  v14 = *(_QWORD *)(a1 + 272);
  v13 = *(_QWORD *)(a1 + 280);
  v76 = v12;
  v77 = v13;
  v78 = CFSTR("StatsBuffer");
  v79 = v14;
  v15 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t, const __CFString **, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                                + 16);
  if (!v15)
  {
    *(_DWORD *)(a1 + 236) = -12782;
    v51 = (int *)(a1 + 236);
    goto LABEL_64;
  }
  v16 = v15(v2, 0, 0, 7, &v66, 0);
  *(_DWORD *)(a1 + 236) = v16;
  if (v16)
  {
    v51 = (int *)(a1 + 236);
LABEL_64:
    v52 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v64, *v51);
    v53 = std::string::insert(&v64, 0, "FigCaptureISPProcessingSessionProcessBuffer Error: ");
    v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
    v65.__r_.__value_.__r.__words[2] = v53->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v54;
    v53->__r_.__value_.__l.__size_ = 0;
    v53->__r_.__value_.__r.__words[2] = 0;
    v53->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v52, &v65);
    __cxa_throw(v52, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (*(_DWORD *)(a1 + 64))
  {
    if (*(_QWORD *)(a1 + 184) != *(_QWORD *)(a1 + 176))
    {
      v55 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v55, "hx async mode not compatible with context transfer");
      __cxa_throw(v55, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    goto LABEL_12;
  }
  v17 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
  if (!v17)
  {
    v18 = -12782;
LABEL_67:
    v56 = v18;
    v57 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v64, v56);
    v58 = std::string::insert(&v64, 0, "FigCaptureISPProcessingSessionCompleteBuffers Error : ");
    v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
    v65.__r_.__value_.__r.__words[2] = v58->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v59;
    v58->__r_.__value_.__l.__size_ = 0;
    v58->__r_.__value_.__r.__words[2] = 0;
    v58->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v57, &v65);
    __cxa_throw(v57, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v18 = v17(v2);
  if (v18)
    goto LABEL_67;
  v19 = *(_QWORD *)(a1 + 176);
  if (*(_QWORD *)(a1 + 184) != v19)
  {
    v20 = *(_QWORD *)(*(_QWORD *)v19 + 64);
    v21 = *(void (****)(uint64_t *__return_ptr, _QWORD))(v20 + 8);
    v22 = *(_QWORD *)(v20 + 16);
    v65.__r_.__value_.__r.__words[0] = (std::string::size_type)v21;
    v65.__r_.__value_.__l.__size_ = v22;
    if (v22)
    {
      v23 = (unint64_t *)(v22 + 8);
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
    }
    v25 = *(_QWORD *)(*(_QWORD *)(a1 + 200) + 80);
    if (*(_QWORD *)(*(_QWORD *)(a1 + 200) + 88) != v25)
    {
      v26 = 0;
      do
      {
        v27 = *(_OWORD *)(v25 + 16 * v26);
        v63 = v27;
        if (*((_QWORD *)&v27 + 1))
        {
          v28 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
          do
            v29 = __ldxr(v28);
          while (__stxr(v29 + 1, v28));
        }
        Espresso::sync_copy_to_host(&v64, &v63);
        v30 = (std::__shared_weak_count *)*((_QWORD *)&v63 + 1);
        if (*((_QWORD *)&v63 + 1))
        {
          v31 = (unint64_t *)(*((_QWORD *)&v63 + 1) + 8);
          do
            v32 = __ldaxr(v31);
          while (__stlxr(v32 - 1, v31));
          if (!v32)
          {
            ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
            std::__shared_weak_count::__release_weak(v30);
          }
        }
        v33 = *(_OWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 200) + 104) + 16 * v26);
        v62 = v33;
        if (*((_QWORD *)&v33 + 1))
        {
          v34 = (unint64_t *)(*((_QWORD *)&v33 + 1) + 8);
          do
            v35 = __ldxr(v34);
          while (__stxr(v35 + 1, v34));
        }
        size = (std::__shared_weak_count *)v64.__r_.__value_.__l.__size_;
        v61 = *(_OWORD *)&v64.__r_.__value_.__l.__data_;
        if (v64.__r_.__value_.__l.__size_)
        {
          v37 = (unint64_t *)(v64.__r_.__value_.__l.__size_ + 8);
          do
            v38 = __ldxr(v37);
          while (__stxr(v38 + 1, v37));
        }
        Espresso::sync_copy_from_host(v33, *((std::__shared_weak_count **)&v62 + 1), (uint64_t *)&v61);
        if (size)
        {
          p_shared_owners = (unint64_t *)&size->__shared_owners_;
          do
            v40 = __ldaxr(p_shared_owners);
          while (__stlxr(v40 - 1, p_shared_owners));
          if (!v40)
          {
            ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
            std::__shared_weak_count::__release_weak(size);
          }
        }
        v41 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
        if (*((_QWORD *)&v62 + 1))
        {
          v42 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
          do
            v43 = __ldaxr(v42);
          while (__stlxr(v43 - 1, v42));
          if (!v43)
          {
            ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
            std::__shared_weak_count::__release_weak(v41);
          }
        }
        v44 = (std::__shared_weak_count *)v64.__r_.__value_.__l.__size_;
        if (v64.__r_.__value_.__l.__size_)
        {
          v45 = (unint64_t *)(v64.__r_.__value_.__l.__size_ + 8);
          do
            v46 = __ldaxr(v45);
          while (__stlxr(v46 - 1, v45));
          if (!v46)
          {
            ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
            std::__shared_weak_count::__release_weak(v44);
          }
        }
        ++v26;
        v25 = *(_QWORD *)(*(_QWORD *)(a1 + 200) + 80);
      }
      while (v26 < (*(_QWORD *)(*(_QWORD *)(a1 + 200) + 88) - v25) >> 4);
      v21 = (void (***)(uint64_t *__return_ptr, _QWORD))v65.__r_.__value_.__r.__words[0];
    }
    v60[0] = MEMORY[0x1E0C809B0];
    v60[1] = 3221225472;
    v60[2] = ___ZN8Espresso8HXEngine10HXCompiler9__forwardERKNSt3__110shared_ptrINS_14abstract_batchEEE_block_invoke;
    v60[3] = &__block_descriptor_40_e10_v16__0r_v8l;
    v60[4] = a1;
    Espresso::abstract_context::compute_batch_sync(v21, v60);
    v47 = (std::__shared_weak_count *)v65.__r_.__value_.__l.__size_;
    if (v65.__r_.__value_.__l.__size_)
    {
      v48 = (unint64_t *)(v65.__r_.__value_.__l.__size_ + 8);
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
    }
  }
LABEL_12:
  if (*(int *)(a1 + 56) >= 1)
    puts("[HXCompiler __forward]");
}

void sub_1914A34BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  void *v33;
  int v34;

  if (a33 < 0)
    operator delete(__p);
  if (a27 < 0)
  {
    operator delete(a22);
    if ((v34 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v34)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v33);
  goto LABEL_8;
}

uint64_t initValkFigCaptureISPProcessingSessionOutputID_Vision(void)
{
  uint64_t *v0;
  uint64_t result;

  if (CMCaptureLibrary(void)::sOnce != -1)
    dispatch_once(&CMCaptureLibrary(void)::sOnce, &__block_literal_global_5431);
  v0 = (uint64_t *)dlsym((void *)CMCaptureLibrary(void)::sLib, "kFigCaptureISPProcessingSessionOutputID_Vision");
  if (v0)
  {
    result = *v0;
    constantValkFigCaptureISPProcessingSessionOutputID_Vision = result;
  }
  else
  {
    result = constantValkFigCaptureISPProcessingSessionOutputID_Vision;
  }
  getkFigCaptureISPProcessingSessionOutputID_Vision = kFigCaptureISPProcessingSessionOutputID_VisionFunction;
  return result;
}

uint64_t kFigCaptureISPProcessingSessionOutputID_VisionFunction(void)
{
  return constantValkFigCaptureISPProcessingSessionOutputID_Vision;
}

uint64_t ___ZN8Espresso8HXEngine10HXCompiler9__forwardERKNSt3__110shared_ptrINS_14abstract_batchEEE_block_invoke(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;

  v2 = *(_QWORD *)(result + 32);
  v3 = *(_QWORD *)(v2 + 176);
  if (*(_QWORD *)(v2 + 184) != v3)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      *(_QWORD *)(*(_QWORD *)a2 + 48) = v6;
      result = (*(uint64_t (**)(_QWORD, uint64_t, unint64_t))(**(_QWORD **)(v3 + v5) + 8))(*(_QWORD *)(v3 + v5), a2, v6++);
      v3 = *(_QWORD *)(v2 + 176);
      v5 += 16;
    }
    while (v6 < (*(_QWORD *)(v2 + 184) - v3) >> 4);
  }
  return result;
}

double Espresso::HXEngine::HXCompiler::reset(Espresso::HXEngine::HXCompiler *this)
{
  __int128 v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  __CVBuffer *v17;
  __CVBuffer *v18;
  __CVBuffer *v19;
  __CVBuffer *v20;
  __CVBuffer *v21;
  __CVBuffer *v22;
  double result;
  __int128 v24;
  uint64_t v25;
  __int128 *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  std::__shared_weak_count *v31;
  void **v32;

  v2 = 0uLL;
  v25 = 0;
  v27 = 0u;
  v24 = 0u;
  v26 = &v27;
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v31 = 0;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  v3 = *((_QWORD *)this + 16);
  if (v3)
  {
    v4 = *((_QWORD *)this + 17);
    v5 = (void *)*((_QWORD *)this + 16);
    if (v4 != v3)
    {
      do
      {
        v4 -= 136;
        std::allocator<Espresso::HXEngine::HXCompiler::op_t>::destroy[abi:ne180100](v4);
      }
      while (v4 != v3);
      v5 = (void *)*((_QWORD *)this + 16);
    }
    *((_QWORD *)this + 17) = v3;
    operator delete(v5);
    v2 = v24;
    v6 = v25;
  }
  else
  {
    v6 = 0;
  }
  v8 = (char *)this + 160;
  v7 = (_QWORD *)*((_QWORD *)this + 20);
  *((_OWORD *)this + 8) = v2;
  *((_QWORD *)this + 18) = v6;
  v25 = 0;
  v24 = 0uLL;
  std::__tree<std::__value_type<std::shared_ptr<Espresso::HXEngine::blob_container>,unsigned int>,std::__map_value_compare<std::shared_ptr<Espresso::HXEngine::blob_container>,std::__value_type<std::shared_ptr<Espresso::HXEngine::blob_container>,unsigned int>,std::less<std::shared_ptr<Espresso::HXEngine::blob_container>>,true>,std::allocator<std::__value_type<std::shared_ptr<Espresso::HXEngine::blob_container>,unsigned int>>>::destroy(v7);
  v9 = v27;
  *((_QWORD *)this + 19) = v26;
  *((_QWORD *)this + 20) = v9;
  v10 = *((_QWORD *)&v27 + 1);
  *((_QWORD *)this + 21) = *((_QWORD *)&v27 + 1);
  if (v10)
  {
    *(_QWORD *)(v9 + 16) = v8;
    v26 = &v27;
    v27 = 0uLL;
  }
  else
  {
    *((_QWORD *)this + 19) = v8;
  }
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__vdeallocate((void **)this + 22);
  *((_OWORD *)this + 11) = v28;
  *((_QWORD *)this + 24) = v29;
  *(_QWORD *)&v29 = 0;
  v28 = 0uLL;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)this + 200, (__int128 *)((char *)&v29 + 8));
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)this + 216, (__int128 *)((char *)&v30 + 8));
  v11 = v31;
  if (v31)
  {
    p_shared_owners = (unint64_t *)&v31->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = (std::__shared_weak_count *)v30;
  if ((_QWORD)v30)
  {
    v15 = (unint64_t *)(v30 + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v32 = (void **)&v28;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v32);
  std::__tree<std::__value_type<std::shared_ptr<Espresso::HXEngine::blob_container>,unsigned int>,std::__map_value_compare<std::shared_ptr<Espresso::HXEngine::blob_container>,std::__value_type<std::shared_ptr<Espresso::HXEngine::blob_container>,unsigned int>,std::less<std::shared_ptr<Espresso::HXEngine::blob_container>>,true>,std::allocator<std::__value_type<std::shared_ptr<Espresso::HXEngine::blob_container>,unsigned int>>>::destroy((_QWORD *)v27);
  v32 = (void **)&v24;
  std::vector<Espresso::HXEngine::HXCompiler::op_t>::__destroy_vector::operator()[abi:ne180100](&v32);
  v17 = (__CVBuffer *)*((_QWORD *)this + 30);
  if (v17)
    CVPixelBufferRelease(v17);
  v18 = (__CVBuffer *)*((_QWORD *)this + 31);
  if (v18)
    CVPixelBufferRelease(v18);
  v19 = (__CVBuffer *)*((_QWORD *)this + 32);
  if (v19)
    CVPixelBufferRelease(v19);
  v20 = (__CVBuffer *)*((_QWORD *)this + 33);
  if (v20)
    CVPixelBufferRelease(v20);
  v21 = (__CVBuffer *)*((_QWORD *)this + 34);
  if (v21)
    CVPixelBufferRelease(v21);
  v22 = (__CVBuffer *)*((_QWORD *)this + 35);
  if (v22)
    CVPixelBufferRelease(v22);
  result = 0.0;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 15) = 0u;
  return result;
}

uint64_t Espresso::HXEngine::HXCompiler::build(std::shared_ptr<Espresso::abstract_batch> const&,int,int)::$_0::operator()(uint64_t a1, unint64_t *a2)
{
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  const void *v10;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *i;
  unint64_t v19;
  int v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::runtime_error *exception;
  _QWORD *v27;
  std::__shared_weak_count *v28;

  v4 = *a2;
  v5 = (std::__shared_weak_count *)a2[1];
  v6 = *(_QWORD *)(*a2 + 192);
  v27 = (_QWORD *)v4;
  v28 = v5;
  v7 = v4;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    v7 = *a2;
  }
  v10 = *(const void **)(v7 + 176);
  if (v10)
  {
    if (v11)
    {
      v12 = *(std::__shared_weak_count **)(v7 + 184);
      if (v12)
      {
        v13 = (unint64_t *)&v12->__shared_owners_;
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
      }
    }
    else
    {
      v12 = 0;
    }
    v27 = v11;
    v28 = v12;
    if (v5)
    {
      v15 = (unint64_t *)&v5->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v17 = v6;
    v4 = (unint64_t)v27;
    if (*(int *)(a1 + 56) >= 2)
      printf("\t\t*[HXCompiler] aliasing %d -> %d; (%lld -> %lld)\n", v6, v27[24], *a2, v27);
    v6 = v27[24];
    if (v6 < v17)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Unexpected size");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
  }
  else if (*(int *)(a1 + 56) >= 2)
  {
    printf("\t\t*[HXCompiler] non-aliasing %d -> %d; (%lld -> %lld)\n", v6, *(_QWORD *)(v4 + 192), v7, v4);
  }
  for (i = *(_QWORD **)(a1 + 160); i; i = (_QWORD *)*i)
  {
    v19 = i[4];
    if (v4 >= v19)
    {
      if (v19 >= v4)
        goto LABEL_30;
      ++i;
    }
  }
  if (*(int *)(a1 + 56) >= 2)
    printf("\t[HXCompiler alloc intermediate] offs=%d size=%d\n", *(_DWORD *)(a1 + 100), v6);
  v20 = *(_DWORD *)(a1 + 100);
  *((_DWORD *)std::__tree<std::__value_type<std::shared_ptr<Espresso::HXEngine::blob_container>,unsigned int>,std::__map_value_compare<std::shared_ptr<Espresso::HXEngine::blob_container>,std::__value_type<std::shared_ptr<Espresso::HXEngine::blob_container>,unsigned int>,std::less<std::shared_ptr<Espresso::HXEngine::blob_container>>,true>,std::allocator<std::__value_type<std::shared_ptr<Espresso::HXEngine::blob_container>,unsigned int>>>::__emplace_unique_key_args<std::shared_ptr<Espresso::HXEngine::blob_container>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<Espresso::HXEngine::blob_container> const&>,std::tuple<>>((uint64_t **)(a1 + 152), v4, &v27)+ 12) = v20;
  *(_DWORD *)(a1 + 100) += v6;
LABEL_30:
  v21 = *((unsigned int *)std::__tree<std::__value_type<std::shared_ptr<Espresso::HXEngine::blob_container>,unsigned int>,std::__map_value_compare<std::shared_ptr<Espresso::HXEngine::blob_container>,std::__value_type<std::shared_ptr<Espresso::HXEngine::blob_container>,unsigned int>,std::less<std::shared_ptr<Espresso::HXEngine::blob_container>>,true>,std::allocator<std::__value_type<std::shared_ptr<Espresso::HXEngine::blob_container>,unsigned int>>>::__emplace_unique_key_args<std::shared_ptr<Espresso::HXEngine::blob_container>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<Espresso::HXEngine::blob_container> const&>,std::tuple<>>((uint64_t **)(a1 + 152), v4, &v27)+ 12);
  v22 = v28;
  if (v28)
  {
    v23 = (unint64_t *)&v28->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  return v21;
}

void sub_1914A3C58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

CVPixelBufferRef Espresso::HXEngine::H10ISPCreateCVBuffer(Espresso::HXEngine *this, unsigned int a2, int a3, unsigned int a4, unsigned int a5, int a6, BOOL a7, unsigned int a8, unsigned int a9, unsigned int a10, BOOL a11, unsigned int a12)
{
  OSType v12;
  const __CFAllocator *v13;
  CVPixelBufferRef result;
  __CFDictionary *v15;
  CFNumberRef v16;
  CFNumberRef v17;
  CFNumberRef v18;
  CFNumberRef v19;
  CFNumberRef v20;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v22;
  CFNumberRef v23;
  int v24;
  int v25;
  int v26;
  OSType pixelFormatType;
  CVPixelBufferRef pixelBufferOut;
  unsigned int v29;
  unsigned int valuePtr;

  v29 = a2;
  valuePtr = this;
  pixelBufferOut = 0;
  if (a3 == 10)
    v12 = 1278226488;
  else
    v12 = 2037741171;
  pixelFormatType = v12;
  v13 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  result = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (result)
  {
    v15 = result;
    v16 = CFNumberCreate(v13, kCFNumberIntType, &valuePtr);
    CFDictionarySetValue(v15, (const void *)*MEMORY[0x1E0CA90E0], v16);
    CFRelease(v16);
    v26 = 64;
    v17 = CFNumberCreate(v13, kCFNumberIntType, &v26);
    CFDictionarySetValue(v15, (const void *)*MEMORY[0x1E0CA8F68], v17);
    CFRelease(v17);
    v18 = CFNumberCreate(v13, kCFNumberIntType, &v29);
    CFDictionarySetValue(v15, (const void *)*MEMORY[0x1E0CA8FD8], v18);
    CFRelease(v18);
    v19 = CFNumberCreate(v13, kCFNumberIntType, &pixelFormatType);
    CFDictionarySetValue(v15, (const void *)*MEMORY[0x1E0CA9040], v19);
    CFRelease(v19);
    v25 = 64;
    v20 = CFNumberCreate(v13, kCFNumberIntType, &v25);
    CFDictionarySetValue(v15, (const void *)*MEMORY[0x1E0CA9048], v20);
    CFRelease(v20);
    Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
    {
      v22 = Mutable;
      v24 = 0;
      v23 = CFNumberCreate(0, kCFNumberIntType, &v24);
      CFDictionarySetValue(v22, (const void *)*MEMORY[0x1E0CBBF10], v23);
      CFRelease(v23);
      CFDictionaryAddValue(v15, (const void *)*MEMORY[0x1E0CA8FF0], v22);
      CFRelease(v22);
      CVPixelBufferCreate(v13, valuePtr, v29, pixelFormatType, v15, &pixelBufferOut);
      CFRelease(v15);
      return pixelBufferOut;
    }
    else
    {
      CFRelease(v15);
      return 0;
    }
  }
  return result;
}

uint64_t **std::__tree<std::__value_type<int,Espresso::HXEngine::HXCompiler::buffer_info_t>,std::__map_value_compare<int,std::__value_type<int,Espresso::HXEngine::HXCompiler::buffer_info_t>,std::less<int>,true>,std::allocator<std::__value_type<int,Espresso::HXEngine::HXCompiler::buffer_info_t>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(uint64_t **a1, int a2, _DWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  int v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = *((_DWORD *)v5 + 7);
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = (uint64_t *)v7;
    v7 = (uint64_t **)operator new(0x40uLL);
    *((_DWORD *)v7 + 7) = *a3;
    v7[5] = 0;
    v7[6] = 0;
    v7[4] = 0;
    *((_DWORD *)v7 + 14) = 0;
    *v7 = 0;
    v7[1] = 0;
    v7[2] = v9;
    *v6 = (uint64_t *)v7;
    v10 = (uint64_t *)**a1;
    v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      v11 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

void std::allocator<Espresso::HXEngine::HXCompiler::op_t>::destroy[abi:ne180100](uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 120);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 104);
  std::__tree<int>::destroy(*(_QWORD **)(a1 + 88));
  v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(_QWORD *)(a1 + 64) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 32);
  if (v3)
  {
    *(_QWORD *)(a1 + 40) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 8);
  if (v4)
  {
    *(_QWORD *)(a1 + 16) = v4;
    operator delete(v4);
  }
}

void Espresso::HXEngine::HXCompiler::error(uint64_t a1, uint64_t a2)
{
  std::string v3;
  std::string v4;

  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v4, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v4 = *(std::string *)a1;
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v3, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v3 = *(std::string *)a2;
  Espresso::HXEngine::context::error((uint64_t)&v4, 0, (uint64_t)&v3);
}

void sub_1914A4074(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t **std::__tree<std::__value_type<std::shared_ptr<Espresso::HXEngine::blob_container>,unsigned int>,std::__map_value_compare<std::shared_ptr<Espresso::HXEngine::blob_container>,std::__value_type<std::shared_ptr<Espresso::HXEngine::blob_container>,unsigned int>,std::less<std::shared_ptr<Espresso::HXEngine::blob_container>>,true>,std::allocator<std::__value_type<std::shared_ptr<Espresso::HXEngine::blob_container>,unsigned int>>>::__emplace_unique_key_args<std::shared_ptr<Espresso::HXEngine::blob_container>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<Espresso::HXEngine::blob_container> const&>,std::tuple<>>(uint64_t **a1, unint64_t a2, _QWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t *v15;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = v5[4];
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        return v7;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = operator new(0x38uLL);
    v10 = v9;
    v11 = a3[1];
    v9[4] = *a3;
    v9[5] = v11;
    if (v11)
    {
      v12 = (unint64_t *)(v11 + 8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    *((_DWORD *)v9 + 12) = 0;
    *v9 = 0;
    v9[1] = 0;
    v9[2] = v7;
    *v6 = v9;
    v14 = (uint64_t *)**a1;
    v15 = v9;
    if (v14)
    {
      *a1 = v14;
      v15 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v15);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return (uint64_t **)v10;
}

void std::__tree<std::__value_type<std::shared_ptr<Espresso::HXEngine::blob_container>,unsigned int>,std::__map_value_compare<std::shared_ptr<Espresso::HXEngine::blob_container>,std::__value_type<std::shared_ptr<Espresso::HXEngine::blob_container>,unsigned int>,std::less<std::shared_ptr<Espresso::HXEngine::blob_container>>,true>,std::allocator<std::__value_type<std::shared_ptr<Espresso::HXEngine::blob_container>,unsigned int>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::shared_ptr<Espresso::HXEngine::blob_container>,unsigned int>,std::__map_value_compare<std::shared_ptr<Espresso::HXEngine::blob_container>,std::__value_type<std::shared_ptr<Espresso::HXEngine::blob_container>,unsigned int>,std::less<std::shared_ptr<Espresso::HXEngine::blob_container>>,true>,std::allocator<std::__value_type<std::shared_ptr<Espresso::HXEngine::blob_container>,unsigned int>>>::destroy(*a1);
    std::__tree<std::__value_type<std::shared_ptr<Espresso::HXEngine::blob_container>,unsigned int>,std::__map_value_compare<std::shared_ptr<Espresso::HXEngine::blob_container>,std::__value_type<std::shared_ptr<Espresso::HXEngine::blob_container>,unsigned int>,std::less<std::shared_ptr<Espresso::HXEngine::blob_container>>,true>,std::allocator<std::__value_type<std::shared_ptr<Espresso::HXEngine::blob_container>,unsigned int>>>::destroy(a1[1]);
    std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::vector<Espresso::HXEngine::HXCompiler::op_t>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 136;
        std::allocator<Espresso::HXEngine::HXCompiler::op_t>::destroy[abi:ne180100](v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void Espresso::HXEngine::HXCompiler::add_operation(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;

  *(_DWORD *)(a2 + 4) = *(_DWORD *)(a1 + 88);
  v4 = *(_QWORD *)(a1 + 136);
  v5 = *(_QWORD *)(a1 + 144);
  if (v4 < v5)
  {
    v6 = Espresso::HXEngine::HXCompiler::op_t::op_t(v4, a2) + 136;
    goto LABEL_20;
  }
  v7 = *(_QWORD *)(a1 + 128);
  v8 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v4 - v7) >> 3);
  if (v8 + 1 > 0x1E1E1E1E1E1E1E1)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  v9 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v5 - v7) >> 3);
  v10 = 2 * v9;
  if (2 * v9 <= v8 + 1)
    v10 = v8 + 1;
  if (v9 >= 0xF0F0F0F0F0F0F0)
    v11 = 0x1E1E1E1E1E1E1E1;
  else
    v11 = v10;
  if (v11)
  {
    if (v11 > 0x1E1E1E1E1E1E1E1)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v12 = (char *)operator new(136 * v11);
  }
  else
  {
    v12 = 0;
  }
  v13 = &v12[136 * v11];
  v14 = Espresso::HXEngine::HXCompiler::op_t::op_t((uint64_t)&v12[136 * v8], a2);
  v6 = v14 + 136;
  v16 = *(char **)(a1 + 128);
  v15 = *(char **)(a1 + 136);
  if (v15 == v16)
  {
    *(_QWORD *)(a1 + 128) = v14;
    *(_QWORD *)(a1 + 136) = v6;
    *(_QWORD *)(a1 + 144) = v13;
    if (!v15)
      goto LABEL_20;
    goto LABEL_19;
  }
  do
  {
    v15 -= 136;
    v14 = Espresso::HXEngine::HXCompiler::op_t::op_t(v14 - 136, (uint64_t)v15);
  }
  while (v15 != v16);
  v17 = *(char **)(a1 + 128);
  v15 = *(char **)(a1 + 136);
  *(_QWORD *)(a1 + 128) = v14;
  *(_QWORD *)(a1 + 136) = v6;
  *(_QWORD *)(a1 + 144) = v13;
  if (v15 != v17)
  {
    do
    {
      v15 -= 136;
      std::allocator<Espresso::HXEngine::HXCompiler::op_t>::destroy[abi:ne180100]((uint64_t)v15);
    }
    while (v15 != v17);
    v15 = v17;
  }
  if (v15)
LABEL_19:
    operator delete(v15);
LABEL_20:
  *(_QWORD *)(a1 + 136) = v6;
}

uint64_t Espresso::HXEngine::HXCompiler::op_t::op_t(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  *(_DWORD *)a1 = -1;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  v4 = a1 + 88;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 20) = 0u;
  *(_OWORD *)(a1 + 4) = 0u;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  v5 = a1 + 104;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v7 = (_QWORD *)(a1 + 32);
  v6 = *(void **)(a1 + 32);
  v8 = (_QWORD *)(a2 + 32);
  if (v6)
  {
    *(_QWORD *)(a1 + 40) = v6;
    operator delete(v6);
    *v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
  }
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *v8 = 0;
  v8[1] = 0;
  v8[2] = 0;
  v9 = *(void **)(a1 + 56);
  if (v9)
  {
    *(_QWORD *)(a1 + 64) = v9;
    operator delete(v9);
    v7[3] = 0;
    v7[4] = 0;
    v7[5] = 0;
  }
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  std::__tree<int>::destroy(*(_QWORD **)(a1 + 88));
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v10 = (_QWORD *)(a2 + 88);
  v11 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 88) = v11;
  v12 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 96) = v12;
  if (v12)
  {
    *(_QWORD *)(v11 + 16) = v4;
    *(_QWORD *)(a2 + 80) = v10;
    *v10 = 0;
    *(_QWORD *)(a2 + 96) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 80) = v4;
  }
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v5, (__int128 *)(a2 + 104));
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 120, (__int128 *)(a2 + 120));
  return a1;
}

void Espresso::SerDes::generic_serdes_object::~generic_serdes_object(Espresso::SerDes::generic_serdes_object *this)
{
  std::__shared_weak_count *v1;

  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

const char *Espresso::SerDes::generic_serdes_object::try_serialize_special_float_val(Espresso::SerDes::generic_serdes_object *this, float a2)
{
  const char *v2;

  v2 = "-inf";
  if (a2 != -INFINITY)
    v2 = 0;
  if (a2 == INFINITY)
    return "inf";
  else
    return v2;
}

const char *Espresso::SerDes::generic_serdes_object::try_serialize_special_double_val(Espresso::SerDes::generic_serdes_object *this, double a2)
{
  const char *v2;

  v2 = "-inf";
  if (a2 != -INFINITY)
    v2 = 0;
  if (a2 == INFINITY)
    return "inf";
  else
    return v2;
}

float Espresso::SerDes::generic_serdes_object::try_parse_special_float_val(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::logic_error *exception;
  std::string *v8;
  __int128 v9;
  std::string v10;
  std::string v11;

  if (a3 == 4)
  {
    if (*(_DWORD *)a2 != 1718511917)
      goto LABEL_17;
    return -INFINITY;
  }
  else
  {
    if (a3 != 3)
      goto LABEL_17;
    if (*(_WORD *)a2 == 28265 && *(_BYTE *)(a2 + 2) == 102)
    {
      return INFINITY;
    }
    else
    {
      if (*(_WORD *)a2 != 24942 || *(_BYTE *)(a2 + 2) != 110)
      {
LABEL_17:
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        v8 = std::string::append(&v10, "\" has unknown string value");
        v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
        v11.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v11.__r_.__value_.__l.__data_ = v9;
        v8->__r_.__value_.__l.__size_ = 0;
        v8->__r_.__value_.__r.__words[2] = 0;
        v8->__r_.__value_.__r.__words[0] = 0;
        std::logic_error::logic_error(exception, &v11);
        exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
        __cxa_throw(exception, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
      }
      return NAN;
    }
  }
}

void sub_1914A479C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

double Espresso::SerDes::generic_serdes_object::try_parse_special_double_val(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::logic_error *exception;
  std::string *v8;
  __int128 v9;
  std::string v10;
  std::string v11;

  if (a3 == 4)
  {
    if (*(_DWORD *)a2 != 1718511917)
      goto LABEL_17;
    return -INFINITY;
  }
  else
  {
    if (a3 != 3)
      goto LABEL_17;
    if (*(_WORD *)a2 == 28265 && *(_BYTE *)(a2 + 2) == 102)
    {
      return INFINITY;
    }
    else
    {
      if (*(_WORD *)a2 != 24942 || *(_BYTE *)(a2 + 2) != 110)
      {
LABEL_17:
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        v8 = std::string::append(&v10, "\" has unknown string value");
        v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
        v11.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v11.__r_.__value_.__l.__data_ = v9;
        v8->__r_.__value_.__l.__size_ = 0;
        v8->__r_.__value_.__r.__words[2] = 0;
        v8->__r_.__value_.__r.__words[0] = 0;
        std::logic_error::logic_error(exception, &v11);
        exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
        __cxa_throw(exception, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
      }
      return NAN;
    }
  }
}

void sub_1914A4924(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

BOOL Espresso::ANECompilerEngine::sparsity_options::scan_for_compress_sparse(uint64_t a1, void *a2)
{
  _QWORD *v4;
  unsigned __int8 *v5;
  int v6;
  uint64_t v7;
  void *v8;
  void *v9;
  char *v10;
  void *__p[2];
  char v13;

  std::string::basic_string[abi:ne180100]<0>(__p, "compress_sparse");
  v4 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(a1, __p);
  if (v13 < 0)
    operator delete(__p[0]);
  if ((_QWORD *)(a1 + 8) == v4)
    goto LABEL_10;
  v5 = (unsigned __int8 *)(v4 + 7);
  v6 = *((char *)v4 + 79);
  if ((v6 & 0x80000000) == 0)
  {
    if (v6 != 1)
      goto LABEL_10;
LABEL_9:
    v7 = *v5 == 49;
    goto LABEL_11;
  }
  if (v4[8] == 1)
  {
    v5 = *(unsigned __int8 **)v5;
    goto LABEL_9;
  }
LABEL_10:
  v7 = 0;
LABEL_11:
  objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("espresso.anecompiler.compress_sparse"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = v8;
  if (v8)
    v7 = objc_msgSend(v8, "BOOLValue");

  v10 = getenv("ESPRESSO_ANEC_COMPRESS_SPARSE");
  if (v10)
  {
    __p[0] = 0;
    return strtol(v10, (char **)__p, 10) != 0;
  }
  return v7;
}

void sub_1914A4A84(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::sparsity_options::required_sparsity_for_compression(Espresso::ANECompilerEngine::sparsity_options *this, const NSDictionary *a2)
{
  void *v3;
  void *v4;
  char *v5;

  -[Espresso::ANECompilerEngine::sparsity_options objectForKeyedSubscript:](this, "objectForKeyedSubscript:", CFSTR("espresso.anecompiler.required_sparsity_for_compression"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
  {
    -[Espresso::ANECompilerEngine::sparsity_options objectForKeyedSubscript:](this, "objectForKeyedSubscript:", CFSTR("espresso.anecompiler.required_sparsity_for_compression"));
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "floatValue");

  }
  v5 = getenv("ESPRESSO_ANEC_REQUIRED_SPARSITY_FOR_COMPRESSION");
  if (v5)
    strtof(v5, 0);
}

void sub_1914A4B38(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t Espresso::ANECompilerEngine::sparsity_options::read_sparse_lut_config(uint64_t a1, Espresso::ANECompilerEngine::sparsity_options *this)
{
  float v4;
  float v5;
  void *v6;
  void *v7;
  float v8;
  char *v9;
  int v10;
  void *v11;
  void *v12;
  char *v13;
  void *v14;
  void *v15;
  int v16;
  char *v17;
  const NSDictionary *v18;
  float v19;
  float v20;
  uint64_t v21;
  uint64_t v22;
  char *__endptr;

  Espresso::ANECompilerEngine::sparsity_options::required_sparsity_for_compression(this, (const NSDictionary *)this);
  v5 = v4;
  -[Espresso::ANECompilerEngine::sparsity_options objectForKeyedSubscript:](this, "objectForKeyedSubscript:", CFSTR("espresso.anecompiler.required_sparsity_for_compression_lut_override"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = v6;
  if (v6)
  {
    objc_msgSend(v6, "floatValue");
    v5 = v8;
  }

  v9 = getenv("ESPRESSO_ANEC_REQUIRED_SPARSITY_FOR_COMPRESSION_LUT_OVERRIDE");
  if (v9)
    v5 = strtof(v9, 0);
  v10 = Espresso::ANECompilerEngine::sparsity_options::scan_for_compress_sparse(a1, this);
  -[Espresso::ANECompilerEngine::sparsity_options objectForKeyedSubscript:](this, "objectForKeyedSubscript:", CFSTR("espresso.anecompiler.compress_sparse_lut_override"));
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = v11;
  if (v11)
    v10 = objc_msgSend(v11, "BOOLValue");

  v13 = getenv("ESPRESSO_ANEC_COMPRESS_SPARSE_LUT_OVERRIDE");
  if (v13)
  {
    __endptr = 0;
    v10 = strtol(v13, &__endptr, 10) != 0;
  }
  -[Espresso::ANECompilerEngine::sparsity_options objectForKeyedSubscript:](this, "objectForKeyedSubscript:", CFSTR("espresso.anecompiler.ignore_zero_fraction_for_ternary_lut_kernels"));
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = v14;
  if (v14)
    v16 = objc_msgSend(v14, "BOOLValue");
  else
    v16 = 1;

  v17 = getenv("ESPRESSO_ANEC_IGNORE_ZERO_FRACTION_FOR_TERNARY_LUT_KERNELS");
  if (v17)
  {
    __endptr = 0;
    v16 = strtol(v17, &__endptr, 10) != 0;
  }
  v19 = 0.0;
  if (v5 >= 0.0)
    v19 = v5;
  if (v19 <= 1.0)
    v20 = v19;
  else
    v20 = 1.0;
  Espresso::ANECompilerEngine::sparsity_options::required_sparsity_for_compression(this, v18);
  Espresso::ANECompilerEngine::sparsity_options::scan_for_compress_sparse(a1, this);
  v21 = 0x100000000;
  v22 = 0x10000000000;
  if (!v16)
    v22 = 0;
  if (!v10)
    v21 = 0;
  return v21 | v22 | LODWORD(v20);
}

void sub_1914A4D00(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *std::vector<unsigned char>::vector(_QWORD *a1, size_t a2)
{
  char *v4;
  char *v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned char>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    v5 = &v4[a2];
    bzero(v4, a2);
    a1[1] = v5;
  }
  return a1;
}

void sub_1914A4D6C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::bit_packer::anec_bit_at(unint64_t this, uint64_t a2, const unsigned __int8 *a3)
{
  return (*(unsigned __int8 *)(a2 + (this >> 3)) >> (this & 7)) & 1;
}

uint64_t Espresso::bit_packer::anec_uint2_at(unint64_t this, uint64_t a2, const unsigned __int8 *a3)
{
  return (*(unsigned __int8 *)(a2 + (this >> 2)) >> (2 * (this & 3))) & 3;
}

uint64_t Espresso::bit_packer::anec_uint4_at(unint64_t this, uint64_t a2, const unsigned __int8 *a3)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;

  v3 = *(unsigned __int8 *)(a2 + (this >> 1));
  v4 = v3 >> 4;
  v5 = v3 & 0xF;
  if ((this & 1) != 0)
    return v4;
  else
    return v5;
}

uint64_t Espresso::bit_packer::anec_uint6_at(Espresso::bit_packer *this, uint64_t a2, const unsigned __int8 *a3)
{
  unint64_t v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;

  v3 = (unint64_t)(3 * (_QWORD)this) >> 2;
  v4 = *(unsigned __int8 *)(a2 + v3);
  if ((this & 3) == 2)
    return (v4 >> 4) & 0xFFFFFFCF | (16 * (*(_BYTE *)(v3 + a2 + 1) & 3));
  if ((this & 3) == 1)
    return (v4 >> 6) & 0xFFFFFFC3 | (4 * (*(_BYTE *)(v3 + a2 + 1) & 0xF));
  v5 = v4 >> 2;
  v6 = v4 & 0x3F;
  if ((this & 3) != 0)
    return v5;
  else
    return v6;
}

uint64_t Espresso::bit_packer::anec_uint8_at(Espresso::bit_packer *this, uint64_t a2, const unsigned __int8 *a3)
{
  return *((unsigned __int8 *)this + a2);
}

uint64_t Espresso::bit_packer::anec_value_at(Espresso::bit_packer *this, uint64_t a2, uint64_t a3, const unsigned __int8 *a4)
{
  unint64_t v4;
  unsigned int v5;
  char v6;
  unint64_t v7;
  unsigned int v8;

  v4 = this * a2;
  v5 = 8 - (v4 & 7);
  if (v5 >= this)
    v6 = (char)this;
  else
    v6 = 8 - (v4 & 7);
  v7 = v4 >> 3;
  v8 = ((0xFFu >> (8 - v6) << (v4 & 7)) & *(unsigned __int8 *)(a3 + (v4 >> 3))) >> (v4 & 7);
  if (v5 < this)
    v8 |= ((0xFFu >> (8 - ((_BYTE)this - v6))) & *(unsigned __int8 *)(v7 + a3 + 1)) << v6;
  return v8;
}

uint64_t Espresso::bit_packer::set_pack_starts_from_lsb_val(uint64_t this, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if ((_BYTE)a4)
  {
    v4 = a4 * a3;
    do
    {
      LODWORD(v5) = 8 - (v4 & 7);
      if (v5 >= a4)
        v5 = a4;
      else
        v5 = v5;
      *(_BYTE *)(this + (v4 >> 3)) = *(_BYTE *)(this + (v4 >> 3)) & ~(0xFFu >> (8 - v5) << (v4 & 7)) | (((0xFFu >> (8 - v5)) & a2) << (v4 & 7));
      LOBYTE(a4) = a4 - v5;
      LODWORD(a2) = (a2 >> v5);
      v4 += v5;
    }
    while ((_BYTE)a4);
  }
  return this;
}

void std::__function::__func<std::__bind<unsigned char (&)(unsigned char,unsigned long,unsigned char const*),unsigned char &,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,std::allocator<std::__bind<unsigned char (&)(unsigned char,unsigned long,unsigned char const*),unsigned char &,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>>,unsigned char ()(unsigned long,unsigned char const*)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

__n128 std::__function::__func<std::__bind<unsigned char (&)(unsigned char,unsigned long,unsigned char const*),unsigned char &,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,std::allocator<std::__bind<unsigned char (&)(unsigned char,unsigned long,unsigned char const*),unsigned char &,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>>,unsigned char ()(unsigned long,unsigned char const*)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DAC9B8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<std::__bind<unsigned char (&)(unsigned char,unsigned long,unsigned char const*),unsigned char &,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,std::allocator<std::__bind<unsigned char (&)(unsigned char,unsigned long,unsigned char const*),unsigned char &,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>>,unsigned char ()(unsigned long,unsigned char const*)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DAC9B8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::__bind<unsigned char (&)(unsigned char,unsigned long,unsigned char const*),unsigned char &,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,std::allocator<std::__bind<unsigned char (&)(unsigned char,unsigned long,unsigned char const*),unsigned char &,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>>,unsigned char ()(unsigned long,unsigned char const*)>::operator()(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1 + 8))(*(unsigned __int8 *)(a1 + 16), *a2, *a3);
}

uint64_t std::__function::__func<std::__bind<unsigned char (&)(unsigned char,unsigned long,unsigned char const*),unsigned char &,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,std::allocator<std::__bind<unsigned char (&)(unsigned char,unsigned long,unsigned char const*),unsigned char &,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>>,unsigned char ()(unsigned long,unsigned char const*)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), 0x8000000191AA124BLL))
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<std::__bind<unsigned char (&)(unsigned char,unsigned long,unsigned char const*),unsigned char &,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,std::allocator<std::__bind<unsigned char (&)(unsigned char,unsigned long,unsigned char const*),unsigned char &,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>>,unsigned char ()(unsigned long,unsigned char const*)>::target_type()
{
}

void std::__function::__func<unsigned char (*)(unsigned long,unsigned char const*),std::allocator<unsigned char (*)(unsigned long,unsigned char const*)>,unsigned char ()(unsigned long,unsigned char const*)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<unsigned char (*)(unsigned long,unsigned char const*),std::allocator<unsigned char (*)(unsigned long,unsigned char const*)>,unsigned char ()(unsigned long,unsigned char const*)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DAD2A8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<unsigned char (*)(unsigned long,unsigned char const*),std::allocator<unsigned char (*)(unsigned long,unsigned char const*)>,unsigned char ()(unsigned long,unsigned char const*)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DAD2A8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<unsigned char (*)(unsigned long,unsigned char const*),std::allocator<unsigned char (*)(unsigned long,unsigned char const*)>,unsigned char ()(unsigned long,unsigned char const*)>::operator()(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(a1 + 8))(*a2, *a3);
}

uint64_t std::__function::__func<unsigned char (*)(unsigned long,unsigned char const*),std::allocator<unsigned char (*)(unsigned long,unsigned char const*)>,unsigned char ()(unsigned long,unsigned char const*)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), 0x8000000191AA11BCLL))
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<unsigned char (*)(unsigned long,unsigned char const*),std::allocator<unsigned char (*)(unsigned long,unsigned char const*)>,unsigned char ()(unsigned long,unsigned char const*)>::target_type()
{
}

uint64_t Espresso::ANECompilerEngine::try_write_sparsified_lut_kernel(uint64_t a1, unsigned int a2, unint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, unsigned __int8 *a7, uint64_t a8, void *a9, uint64_t a10)
{
  id v18;
  id v19;
  __n128 v20;
  BOOL v21;
  int v22;
  uint64_t v23;
  char *v24;
  const void *v25;
  uint64_t v26;
  float v27;
  unint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t (*v31)(Espresso::bit_packer *, uint64_t, uint64_t, const unsigned __int8 *);
  unint64_t v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  BOOL v36;
  unint64_t v37;
  void *v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  size_t v45;
  unint64_t v46;
  size_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  char v51;
  uint64_t (***v52)();
  uint64_t v53;
  const __CFString *v54;
  void *v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  void *v71;
  void *v72;
  std::runtime_error *exception;
  const void *v75;
  const void **v76;
  unint64_t v77;
  id v78;
  uint64_t v79;
  unsigned int v80;
  void *v81;
  void *v82;
  unint64_t v83;
  void *v84;
  char v85;
  unint64_t v86;
  uint64_t v87;
  __int16 v88;
  unint64_t v89;
  void *v90[3];
  uint64_t v91;
  uint64_t v92;
  uint64_t (**v93)();
  uint64_t (*v94)(Espresso::bit_packer *, uint64_t, uint64_t, const unsigned __int8 *);
  uint64_t v95;
  void **v96;
  uint64_t v97;

  v97 = *MEMORY[0x1E0C80C00];
  v18 = a9;
  v19 = v18;
  v20.n128_u32[0] = *(_DWORD *)a8;
  if (*(_BYTE *)(a8 + 4))
    v21 = v20.n128_f32[0] < 1.0;
  else
    v21 = 0;
  if (!v21 || (v22 = *a7, (v22 & 0x1F) == 0))
  {
    v26 = 0;
    goto LABEL_91;
  }
  v80 = a2;
  v79 = a6;
  if ((~v22 & 0xF) != 0 || (((a5 < 2) ^ ((v22 & 0x10) >> 4)) & 1) == 0)
  {
    v78 = v18;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Implementation expects all sparse bitwidths if any are supported unless 8 bit doesn't compress.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  MEMORY[0x1E0C80A78](v20);
  v24 = (char *)&v75 - v23;
  bzero((char *)&v75 - v23, a5);
  v25 = *(const void **)(a4 + 16);
  if (memcmp(v24, v25, a5))
  {
    v26 = 1;
    goto LABEL_91;
  }
  v27 = *(float *)a8 * (float)a3;
  if ((unint64_t)v27 <= 1)
    v28 = 1;
  else
    v28 = (unint64_t)v27;
  v29 = *(_QWORD *)(a1 + 16);
  v30 = *(unsigned __int8 *)(a8 + 5);
  v78 = v19;
  std::vector<unsigned char>::vector(v90, a5);
  switch(v80)
  {
    case 1u:
      v31 = (uint64_t (*)(Espresso::bit_packer *, uint64_t, uint64_t, const unsigned __int8 *))Espresso::bit_packer::anec_bit_at;
      goto LABEL_22;
    case 2u:
      v31 = (uint64_t (*)(Espresso::bit_packer *, uint64_t, uint64_t, const unsigned __int8 *))Espresso::bit_packer::anec_uint2_at;
      goto LABEL_22;
    case 4u:
      v31 = (uint64_t (*)(Espresso::bit_packer *, uint64_t, uint64_t, const unsigned __int8 *))Espresso::bit_packer::anec_uint4_at;
      goto LABEL_22;
    case 6u:
      v31 = (uint64_t (*)(Espresso::bit_packer *, uint64_t, uint64_t, const unsigned __int8 *))Espresso::bit_packer::anec_uint6_at;
      goto LABEL_22;
    case 8u:
      v31 = (uint64_t (*)(Espresso::bit_packer *, uint64_t, uint64_t, const unsigned __int8 *))Espresso::bit_packer::anec_uint8_at;
LABEL_22:
      v93 = &off_1E2DAD2A8;
      v94 = v31;
      break;
    default:
      v93 = &off_1E2DAC9B8;
      v94 = Espresso::bit_packer::anec_value_at;
      v95 = v80;
      break;
  }
  v76 = &v75;
  v96 = (void **)&v93;
  v32 = 0;
  if (!a3)
    goto LABEL_40;
  v33 = 0;
  LOBYTE(v34) = 0;
  do
  {
    v91 = v29;
    v92 = v33;
    if (!v96)
      std::__throw_bad_function_call[abi:ne180100]();
    v35 = (*((uint64_t (**)(void **, uint64_t *, uint64_t *))*v96 + 6))(v96, &v92, &v91);
    if (v34 <= v35)
      v34 = v35;
    else
      v34 = v34;
    if (!v35)
      ++v32;
    ++v33;
  }
  while (a3 != v33);
  if (v30)
    v36 = v34 >= 3;
  else
    v36 = 1;
  if (v36)
    v37 = v28;
  else
    v37 = 1;
  if (v32 < v37)
  {
    v19 = v78;
LABEL_40:
    v38 = 0;
    LOBYTE(v39) = 0;
    a5 = 0;
    v40 = 0;
    v77 = 0;
    v81 = 0;
    v82 = 0;
    LODWORD(v41) = 0;
    a3 = 0;
    v83 = 0;
    v84 = 0;
    v85 = 0;
    v86 = 0;
    v87 = 0;
    v88 = 0;
    goto LABEL_71;
  }
  v42 = (v34 - 1);
  if (v42 >= 2)
  {
    if (v42 >= 4)
    {
      if ((v34 - 1) >= 0x10u)
      {
        if ((((_BYTE)v34 - 1) & 0xC0) != 0)
          v43 = 8;
        else
          v43 = 6;
        if ((v34 - 1) >= 0x40u && a5 <= 1)
        {
          v38 = 0;
          LOBYTE(v39) = 0;
          a5 = 0;
          v40 = 0;
          v77 = 0;
          v81 = 0;
          v82 = 0;
          LODWORD(v41) = 0;
          a3 = 0;
          v83 = 0;
          v84 = 0;
          v85 = 0;
          v86 = 0;
          v87 = 0;
          v88 = 0;
          v19 = v78;
          goto LABEL_71;
        }
      }
      else
      {
        v43 = 4;
      }
    }
    else
    {
      v43 = 2;
    }
  }
  else
  {
    v43 = 1;
  }
  v75 = v25;
  if ((a3 & 7) != 0)
    v45 = (a3 >> 3) + 1;
  else
    v45 = a3 >> 3;
  v41 = v43;
  v77 = a3 - v32;
  v46 = (a3 - v32) * v43;
  if ((v46 & 7) != 0)
    v47 = (v46 >> 3) + 1;
  else
    v47 = v46 >> 3;
  v38 = (void *)operator new[]();
  bzero(v38, v45);
  v81 = (void *)operator new[]();
  bzero(v81, v47);
  v48 = 0;
  v49 = 0;
  do
  {
    v91 = v29;
    v92 = v48;
    if (!v96)
      std::__throw_bad_function_call[abi:ne180100]();
    v50 = (*((uint64_t (**)(void **, uint64_t *, uint64_t *))*v96 + 6))(v96, &v92, &v91);
    v51 = v50;
    if (v50)
    {
      Espresso::bit_packer::set_pack_starts_from_lsb_val((uint64_t)v38, (unsigned __int8 *)1, v48, 1);
      Espresso::bit_packer::set_pack_starts_from_lsb_val((uint64_t)v81, (unsigned __int8 *)(v51 - 1), v49++, v41);
    }
    else
    {
      Espresso::bit_packer::set_pack_starts_from_lsb_val((uint64_t)v38, 0, v48, 1);
    }
    ++v48;
  }
  while (a3 != v48);
  if (v41 >= v80)
    v39 = a5 + a5 * ((-1 << v80) + (1 << v41));
  else
    LOBYTE(v39) = 0;
  v19 = v78;
  v40 = (uint64_t)v75 + a5;
  v82 = v38;
  v83 = a3;
  v84 = v81;
  v85 = v41;
  v86 = v77;
  v87 = v40;
  LOBYTE(v88) = a5;
  HIBYTE(v88) = v39;
LABEL_71:
  v89 = v32;
  v52 = (uint64_t (***)())v96;
  if (v96 == (void **)&v93)
  {
    v53 = 4;
    v52 = &v93;
    goto LABEL_75;
  }
  if (v96)
  {
    v53 = 5;
LABEL_75:
    (*v52)[v53]();
  }
  if (v90[0])
  {
    v90[1] = v90[0];
    operator delete(v90[0]);
  }
  if (a3)
  {
    if ((v41 - 1) > 5)
      v54 = CFSTR("Palette256Sparse");
    else
      v54 = off_1E2DD37E0[(v41 - 1)];
    v56 = v38;
    objc_msgSend(v19, "setObject:forKeyedSubscript:", v54, CFSTR("KernelMode"), v75, v76);
    objc_msgSend(v19, "setObject:forKeyedSubscript:", v79, CFSTR("KernelType"));
    v57 = std::function<std::pair<int,unsigned long> ()(unsigned char const*,unsigned long)>::operator()(*(_QWORD *)(a10 + 24), (uint64_t)v81, ((v77 * v41 - 1) >> 3) + 1);
    v59 = v58;
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v57);
    v60 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v78, "setObject:forKeyedSubscript:", v60, CFSTR("KernelOffset"));

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", v59);
    v61 = (void *)objc_claimAutoreleasedReturnValue();
    v19 = v78;
    objc_msgSend(v78, "setObject:forKeyedSubscript:", v61, CFSTR("KernelIndex"));

    v62 = std::function<std::pair<int,unsigned long> ()(unsigned char const*,unsigned long)>::operator()(*(_QWORD *)(a10 + 24), v40, (a5 << v41) - (unint64_t)v39);
    v64 = v63;
    v38 = v56;
    if ((_BYTE)v39)
    {
      LOBYTE(v90[0]) = -1;
      std::vector<unsigned char>::vector(&v93, v39, v90);
      std::function<std::pair<int,unsigned long> ()(unsigned char const*,unsigned long)>::operator()(*(_QWORD *)(a10 + 24), (uint64_t)v93, (char *)v94 - (char *)v93);
      if (v93)
      {
        v94 = (uint64_t (*)(Espresso::bit_packer *, uint64_t, uint64_t, const unsigned __int8 *))v93;
        operator delete(v93);
      }
    }
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v62);
    v65 = objc_claimAutoreleasedReturnValue();
    v55 = v81;
    v66 = (void *)v65;
    objc_msgSend(v19, "setObject:forKeyedSubscript:", v65, CFSTR("KernelPaletteLUTOffset"));

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", v64);
    v67 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "setObject:forKeyedSubscript:", v67, CFSTR("KernelPaletteLUTIndex"));

    v68 = std::function<std::pair<int,unsigned long> ()(unsigned char const*,unsigned long)>::operator()(*(_QWORD *)(a10 + 24), (uint64_t)v38, ((a3 - 1) >> 3) + 1);
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", v69);
    v70 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "setObject:forKeyedSubscript:", v70, CFSTR("KernelMaskIndex"));

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v68);
    v71 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "setObject:forKeyedSubscript:", v71, CFSTR("KernelMaskByteOffset"));

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", v77);
    v72 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "setObject:forKeyedSubscript:", v72, CFSTR("KernelCoeffCount"));

    v26 = 2;
  }
  else
  {
    v26 = 1;
    v55 = v81;
  }
  if (v55)
    MEMORY[0x19401CD78](v55, 0x1000C8077774924);
  if (v38)
    MEMORY[0x19401CD78](v38, 0x1000C8077774924);
LABEL_91:

  return v26;
}

void sub_1914A58D0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  void *v6;

  MEMORY[0x19401CD78](v1, 0x1000C8077774924);
  v4 = *(_QWORD **)(v2 - 104);
  if (v4 == (_QWORD *)(v2 - 128))
  {
    v5 = 4;
    v4 = (_QWORD *)(v2 - 128);
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = *(void **)(v2 - 168);
  if (v6)
  {
    *(_QWORD *)(v2 - 160) = v6;
    operator delete(v6);
  }

  _Unwind_Resume(a1);
}

uint64_t std::function<std::pair<int,unsigned long> ()(unsigned char const*,unsigned long)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a3;
  v5 = a2;
  if (!a1)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)a1 + 48))(a1, &v5, &v4);
}

_QWORD *std::vector<unsigned char>::vector(_QWORD *a1, size_t a2, _BYTE *a3)
{
  size_t v5;
  _BYTE *v6;
  _BYTE *v7;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    v5 = a2;
    std::vector<unsigned char>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_BYTE *)a1[1];
    v7 = &v6[v5];
    do
    {
      *v6++ = *a3;
      --v5;
    }
    while (v5);
    a1[1] = v7;
  }
  return a1;
}

void sub_1914A5AC8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::ANECompilerEngine::sparse_palettized_kernel::~sparse_palettized_kernel(Espresso::ANECompilerEngine::sparse_palettized_kernel *this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    MEMORY[0x19401CD78](v2, 0x1000C8077774924);
  v3 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v3)
    MEMORY[0x19401CD78](v3, 0x1000C8077774924);
}

void rule_remove_fused_conv_ip_activation::status_t::~status_t(void **this)
{
  rule_remove_fused_conv_ip_activation::status_t::~status_t(this);
  JUMPOUT(0x19401CD90);
}

{
  *this = &off_1E2D59858;
  if (*((char *)this + 167) < 0)
    operator delete(this[18]);
  if (*((char *)this + 143) < 0)
    operator delete(this[15]);
  if (*((char *)this + 119) < 0)
    operator delete(this[12]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 10));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 8));
  *this = &off_1E2D9B1A8;
  std::__tree<std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>>>::destroy(this[6]);
  std::__tree<int>::destroy(this[3]);
}

void rule_bake_batchnorm::status_t::~status_t(void **this)
{
  rule_bake_batchnorm::status_t::~status_t(this);
  JUMPOUT(0x19401CD90);
}

{
  *this = &off_1E2D59838;
  if (*((char *)this + 151) < 0)
    operator delete(this[16]);
  if (*((char *)this + 127) < 0)
    operator delete(this[13]);
  if (*((char *)this + 103) < 0)
    operator delete(this[10]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 8));
  *this = &off_1E2D9B1A8;
  std::__tree<std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>>>::destroy(this[6]);
  std::__tree<int>::destroy(this[3]);
}

void rule_remove_fused_conv_ip_activation::~rule_remove_fused_conv_ip_activation(rule_remove_fused_conv_ip_activation *this)
{
  char *v1;

  *(_QWORD *)this = off_1E2D901E0;
  v1 = (char *)this + 8;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v1);
}

{
  char *v1;

  *(_QWORD *)this = off_1E2D901E0;
  v1 = (char *)this + 8;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v1);
  JUMPOUT(0x19401CD90);
}

void rule_remove_fused_conv_ip_activation::match_at_layer(rule_remove_fused_conv_ip_activation *this@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  const void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v23;
  int v24;
  int v26;
  uint64_t v28;
  char *v29;
  int v31;
  uint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  std::__shared_weak_count *v37;
  unint64_t *p_shared_owners;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  _QWORD v44[3];
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  int v51;

  v51 = a2;
  v6 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 32) + 16 * a2);
  v7 = *(const void **)(v6 + 64);
  if (v7
  {
    v9 = v8;
    v10 = *(_QWORD *)(v6 + 72);
    v49 = (uint64_t)v8;
    v50 = (std::__shared_weak_count *)v10;
    if (v10)
    {
      v11 = (unint64_t *)(v10 + 8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
      v6 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 32) + 16 * a2);
      v7 = *(const void **)(v6 + 64);
      if (!v7)
      {
LABEL_15:
        v47 = 0;
        v48 = 0;
        if (!v9)
        {
          *a3 = 0;
          a3[1] = 0;
          goto LABEL_40;
        }
LABEL_16:
        v45 = 0uLL;
        v46 = 0;
        v23 = (*(uint64_t (**)(void *))(*(_QWORD *)v9 + 384))(v9);
        v24 = *(_DWORD *)(v23 + 24);
        __asm { FMOV            V0.2S, #1.0 }
        v43 = _D0;
        if (v24)
        {
          if (v24 == 2)
          {
            __asm { FMOV            V0.2S, #1.0 }
            LODWORD(_D0) = *(_DWORD *)(v23 + 36);
            v43 = _D0;
            v26 = 2;
          }
          else if (v24 == 1)
          {
            v26 = 0;
          }
          else
          {
            v26 = -1;
          }
        }
        else if (*(_DWORD *)(v23 + 28))
        {
          v26 = 1;
        }
        else
        {
          v26 = *(_DWORD *)(v23 + 60);
          v43 = *(_QWORD *)(v23 + 64);
        }
        v14 = v47;
        if (!v47)
          goto LABEL_33;
        goto LABEL_27;
      }
    }
  }
  else
  {
    v9 = 0;
    v49 = 0;
    v50 = 0;
    if (!v7)
      goto LABEL_15;
  }
  if (!v13)
    goto LABEL_15;
  v14 = (uint64_t)v13;
  v15 = *(_QWORD *)(v6 + 72);
  v47 = (uint64_t)v13;
  v48 = (std::__shared_weak_count *)v15;
  if (v15)
  {
    v16 = (unint64_t *)(v15 + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  if (v9)
    goto LABEL_16;
  v45 = 0uLL;
  __asm { FMOV            V0.2S, #1.0 }
  v43 = _D0;
  v46 = 0;
LABEL_27:
  v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 384))(v14);
  if (*(_DWORD *)(v28 + 12))
  {
    v26 = 0;
    goto LABEL_34;
  }
  if (*(_DWORD *)(v28 + 16))
  {
    v26 = 1;
    goto LABEL_34;
  }
  if (*(_DWORD *)(v28 + 28))
    Espresso::throw_exception_selector<Espresso::not_implemented_error>("unfuse has_prelu is not implemented");
  v26 = *(_DWORD *)(v28 + 52);
  v43 = *(_QWORD *)(v28 + 56);
LABEL_33:
  if (v26 == -1)
  {
    *a3 = 0;
    a3[1] = 0;
    goto LABEL_35;
  }
LABEL_34:
  v29 = (char *)operator new(0xE8uLL);
  *((_QWORD *)v29 + 1) = 0;
  *((_QWORD *)v29 + 2) = 0;
  *(_QWORD *)v29 = &off_1E2DB5A88;
  *((_OWORD *)v29 + 2) = 0u;
  *((_OWORD *)v29 + 4) = 0u;
  *((_OWORD *)v29 + 5) = 0u;
  *((_OWORD *)v29 + 6) = 0u;
  *((_OWORD *)v29 + 7) = 0u;
  *((_OWORD *)v29 + 8) = 0u;
  *((_OWORD *)v29 + 9) = 0u;
  *((_OWORD *)v29 + 10) = 0u;
  *((_OWORD *)v29 + 11) = 0u;
  *((_OWORD *)v29 + 12) = 0u;
  *((_OWORD *)v29 + 13) = 0u;
  *((_QWORD *)v29 + 28) = 0;
  *((_OWORD *)v29 + 3) = 0u;
  *((_QWORD *)v29 + 5) = v29 + 48;
  *((_QWORD *)v29 + 10) = 0;
  *((_QWORD *)v29 + 9) = 0;
  *((_QWORD *)v29 + 3) = &off_1E2D59858;
  *(_OWORD *)(v29 + 88) = 0u;
  *((_QWORD *)v29 + 8) = v29 + 72;
  *(_OWORD *)(v29 + 180) = 0u;
  *(_OWORD *)(v29 + 168) = 0u;
  *(_OWORD *)(v29 + 152) = 0u;
  *(_OWORD *)(v29 + 136) = 0u;
  *(_OWORD *)(v29 + 120) = 0u;
  *(_OWORD *)(v29 + 104) = 0u;
  __asm { FMOV            V0.2S, #1.0 }
  *(_QWORD *)(v29 + 196) = _D0;
  *(_QWORD *)(v29 + 204) = 0;
  *(_QWORD *)(v29 + 212) = 0;
  *(_QWORD *)(v29 + 220) = 0;
  v44[1] = v29 + 24;
  v44[2] = v29;
  v31 = v51;
  *((_DWORD *)v29 + 8) = v51;
  *((_BYTE *)std::__tree<std::__value_type<int,BOOL>,std::__map_value_compare<int,std::__value_type<int,BOOL>,std::less<int>,true>,std::allocator<std::__value_type<int,BOOL>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)v29 + 5, v31, &v51)+ 32) = 1;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v29 + 13, v49, (uint64_t)v50);
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v29 + 11, v14, (uint64_t)v48);
  v32 = *((_QWORD *)this + 3) + 56;
  v33 = v51;
  v44[0] = v51;
  v34 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v32, v51, v44);
  std::string::operator=((std::string *)v29 + 5, (const std::string *)v34[3]);
  v35 = *((_QWORD *)this + 3) + 96;
  v44[0] = v33;
  v36 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v35, v33, v44);
  std::string::operator=((std::string *)v29 + 6, (const std::string *)v36[3]);
  std::string::operator=((std::string *)v29 + 7, (const std::string *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 32) + 16 * v33) + 16));
  *((_DWORD *)v29 + 48) = v26;
  *(_QWORD *)(v29 + 196) = v43;
  *(_OWORD *)(v29 + 204) = v45;
  *(_QWORD *)(v29 + 220) = v46;
  *a3 = v29 + 24;
  a3[1] = v29;
LABEL_35:
  v37 = v48;
  if (v48)
  {
    p_shared_owners = (unint64_t *)&v48->__shared_owners_;
    do
      v39 = __ldaxr(p_shared_owners);
    while (__stlxr(v39 - 1, p_shared_owners));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
LABEL_40:
  v40 = v50;
  if (v50)
  {
    v41 = (unint64_t *)&v50->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
}

void sub_1914A6120(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v11;
  va_list va;
  uint64_t v13;
  va_list va1;

  va_start(va1, a10);
  va_start(va, a10);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void rule_remove_fused_conv_ip_activation::transform_and_return_skip_layers(uint64_t **a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  size_t v11;
  std::string *v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  int v24;
  uint64_t *v25;
  void *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t *v50;
  void *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t *v67;
  unsigned __int8 *v68;
  size_t v69;
  void *p_p;
  const void *v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::string *v78;
  std::string *v79;
  std::string *v80;
  std::string *v81;
  std::string *v82;
  std::string *v83;
  std::string *v84;
  std::string *v85;
  std::string *v86;
  std::string *v87;
  std::string *v88;
  std::string *v89;
  std::string *v90;
  std::string *v91;
  std::string *v92;
  std::string *v93;
  std::string *v94;
  std::string *v95;
  void *__p;
  std::__shared_weak_count *v97;
  char v98;
  void *lpsrc;
  std::__shared_weak_count *v100;
  uint64_t v101;
  std::__shared_weak_count *v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  uint64_t v113;
  std::string v114;
  unsigned __int8 *v115;
  std::__shared_weak_count *v116;
  std::string **v117;
  char v118;
  std::string v119;
  uint64_t v120;
  std::string v121;
  __int128 v122;

  *(_QWORD *)&v122 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)a2
  {
    v7 = v6;
    v8 = *(std::__shared_weak_count **)(a2 + 8);
    v115 = v6;
    v116 = v8;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
    }
  }
  else
  {
    v7 = 0;
    v115 = 0;
    v116 = 0;
  }
  if ((v7[143] & 0x80u) == 0)
    v11 = v7[143];
  else
    v11 = *((_QWORD *)v7 + 16);
  v12 = &v114;
  std::string::basic_string[abi:ne180100]((uint64_t)&v114, v11 + 15);
  if ((v114.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v12 = (std::string *)v114.__r_.__value_.__r.__words[0];
  if (v11)
  {
    if ((v7[143] & 0x80u) == 0)
      v13 = v7 + 120;
    else
      v13 = (const void *)*((_QWORD *)v7 + 15);
    memmove(v12, v13, v11);
  }
  strcpy((char *)v12 + v11, "_pre_activation");
  v14 = *((_QWORD *)v7 + 10);
  if (v14)
  {
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 384))(v14);
    v16 = *(_OWORD *)v15;
    v17 = *(_OWORD *)(v15 + 32);
    v104 = *(_OWORD *)(v15 + 16);
    v105 = v17;
    v103 = v16;
    v18 = *(_OWORD *)(v15 + 48);
    v19 = *(_OWORD *)(v15 + 64);
    v20 = *(_OWORD *)(v15 + 96);
    v108 = *(_OWORD *)(v15 + 80);
    v109 = v20;
    v106 = v18;
    v107 = v19;
    v21 = *(_OWORD *)(v15 + 112);
    v22 = *(_OWORD *)(v15 + 128);
    v23 = *(_OWORD *)(v15 + 144);
    v113 = *(_QWORD *)(v15 + 160);
    v111 = v22;
    v112 = v23;
    v110 = v21;
    v24 = *((_DWORD *)v7 + 42);
    if (v24 != 2)
    {
      if (v24 == 1)
      {
        HIDWORD(v104) = 0;
        goto LABEL_25;
      }
      if (v24)
      {
        HIDWORD(v106) = -1;
        goto LABEL_25;
      }
    }
    DWORD2(v104) = 0;
LABEL_25:
    v25 = *a1;
    std::string::basic_string[abi:ne180100]<0>(&__p, "convolution");
    if ((char)v7[119] < 0)
      std::string::__init_copy_ctor_external(&v121, *((const std::string::value_type **)v7 + 12), *((_QWORD *)v7 + 13));
    else
      v121 = *(std::string *)(v7 + 4);
    v93 = 0;
    v94 = 0;
    v95 = 0;
    v119.__r_.__value_.__r.__words[0] = (std::string::size_type)&v93;
    v119.__r_.__value_.__s.__data_[8] = 0;
    v93 = (std::string *)operator new(0x18uLL);
    v94 = v93;
    v95 = v93 + 1;
    v94 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v95, (__int128 *)&v121, &v122, v93);
    if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v119, v114.__r_.__value_.__l.__data_, v114.__r_.__value_.__l.__size_);
    else
      v119 = v114;
    v90 = 0;
    v91 = 0;
    v92 = 0;
    v117 = &v90;
    v118 = 0;
    v90 = (std::string *)operator new(0x18uLL);
    v91 = v90;
    v92 = v90 + 1;
    v91 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v92, (__int128 *)&v119, (__int128 *)&v120, v90);
    Espresso::sequential_builder::add<Espresso::convolution_uniforms>((uint64_t *)&lpsrc, v25, (uint64_t)&__p, (uint64_t)(v7 + 144), (uint64_t)&v103, (uint64_t)v93, (uint64_t)v94, (uint64_t *)&v90);
    if (lpsrc
    {
      v101 = (uint64_t)v26;
      v102 = v100;
      if (v100)
      {
        v27 = (unint64_t *)&v100->__shared_owners_;
        do
          v28 = __ldxr(v27);
        while (__stxr(v28 + 1, v27));
      }
    }
    else
    {
      v101 = 0;
      v102 = 0;
    }
    v29 = v100;
    if (v100)
    {
      v30 = (unint64_t *)&v100->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    v117 = &v90;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v117);
    if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v119.__r_.__value_.__l.__data_);
    v119.__r_.__value_.__r.__words[0] = (std::string::size_type)&v93;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v119);
    if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v121.__r_.__value_.__l.__data_);
    if (v98 < 0)
      operator delete(__p);
    v32 = v101;
    v33 = (std::__shared_weak_count *)*((_QWORD *)v115 + 11);
    __p = (void *)*((_QWORD *)v115 + 10);
    v97 = v33;
    if (v33)
    {
      v34 = (unint64_t *)&v33->__shared_owners_;
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 1, v34));
    }
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v32 + 48))(v32, &__p);
    v36 = v97;
    if (v97)
    {
      v37 = (unint64_t *)&v97->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
    v39 = v102;
    if (v102)
    {
      v40 = (unint64_t *)&v102->__shared_owners_;
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }
    v7 = v115;
  }
  v42 = *((_QWORD *)v7 + 8);
  if (v42)
  {
    v43 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v42 + 384))(v42);
    v103 = *(_OWORD *)v43;
    v44 = *(_OWORD *)(v43 + 16);
    v45 = *(_OWORD *)(v43 + 32);
    v46 = *(_OWORD *)(v43 + 64);
    v106 = *(_OWORD *)(v43 + 48);
    v107 = v46;
    v104 = v44;
    v105 = v45;
    v47 = *(_OWORD *)(v43 + 80);
    v48 = *(_OWORD *)(v43 + 96);
    v49 = *(_OWORD *)(v43 + 112);
    LODWORD(v111) = *(_DWORD *)(v43 + 128);
    v109 = v48;
    v110 = v49;
    v108 = v47;
    switch(*((_DWORD *)v7 + 42))
    {
      case 0:
      case 2:
        HIDWORD(v103) = 0;
        break;
      case 1:
        LODWORD(v104) = 0;
        break;
      case 4:
        HIDWORD(v104) = 0;
        break;
      default:
        DWORD1(v106) = -1;
        break;
    }
    v50 = *a1;
    std::string::basic_string[abi:ne180100]<0>(&__p, "inner_product");
    if ((char)v7[119] < 0)
      std::string::__init_copy_ctor_external(&v121, *((const std::string::value_type **)v7 + 12), *((_QWORD *)v7 + 13));
    else
      v121 = *(std::string *)(v7 + 4);
    v87 = 0;
    v88 = 0;
    v89 = 0;
    v119.__r_.__value_.__r.__words[0] = (std::string::size_type)&v87;
    v119.__r_.__value_.__s.__data_[8] = 0;
    v87 = (std::string *)operator new(0x18uLL);
    v88 = v87;
    v89 = v87 + 1;
    v88 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v89, (__int128 *)&v121, &v122, v87);
    if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v119, v114.__r_.__value_.__l.__data_, v114.__r_.__value_.__l.__size_);
    else
      v119 = v114;
    v84 = 0;
    v85 = 0;
    v86 = 0;
    v117 = &v84;
    v118 = 0;
    v84 = (std::string *)operator new(0x18uLL);
    v85 = v84;
    v86 = v84 + 1;
    v85 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v86, (__int128 *)&v119, (__int128 *)&v120, v84);
    Espresso::sequential_builder::add<Espresso::inner_product_uniforms>((uint64_t *)&lpsrc, v50, (uint64_t)&__p, (uint64_t)(v7 + 144), (uint64_t)&v103, (uint64_t)v87, (uint64_t)v88, (uint64_t *)&v84);
    if (lpsrc
    {
      v101 = (uint64_t)v51;
      v102 = v100;
      if (v100)
      {
        v52 = (unint64_t *)&v100->__shared_owners_;
        do
          v53 = __ldxr(v52);
        while (__stxr(v53 + 1, v52));
      }
    }
    else
    {
      v101 = 0;
      v102 = 0;
    }
    v54 = v100;
    if (v100)
    {
      v55 = (unint64_t *)&v100->__shared_owners_;
      do
        v56 = __ldaxr(v55);
      while (__stlxr(v56 - 1, v55));
      if (!v56)
      {
        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
        std::__shared_weak_count::__release_weak(v54);
      }
    }
    v117 = &v84;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v117);
    if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v119.__r_.__value_.__l.__data_);
    v119.__r_.__value_.__r.__words[0] = (std::string::size_type)&v87;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v119);
    if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v121.__r_.__value_.__l.__data_);
    if (v98 < 0)
      operator delete(__p);
    v57 = v101;
    v58 = (std::__shared_weak_count *)*((_QWORD *)v115 + 9);
    __p = (void *)*((_QWORD *)v115 + 8);
    v97 = v58;
    if (v58)
    {
      v59 = (unint64_t *)&v58->__shared_owners_;
      do
        v60 = __ldxr(v59);
      while (__stxr(v60 + 1, v59));
    }
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v57 + 48))(v57, &__p);
    v61 = v97;
    if (v97)
    {
      v62 = (unint64_t *)&v97->__shared_owners_;
      do
        v63 = __ldaxr(v62);
      while (__stlxr(v63 - 1, v62));
      if (!v63)
      {
        ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
        std::__shared_weak_count::__release_weak(v61);
      }
    }
    v64 = v102;
    if (v102)
    {
      v65 = (unint64_t *)&v102->__shared_owners_;
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 - 1, v65));
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
        std::__shared_weak_count::__release_weak(v64);
      }
    }
  }
  v67 = *a1;
  std::string::basic_string[abi:ne180100]<0>(&v103, "activation");
  v68 = v115;
  if ((v115[167] & 0x80u) == 0)
    v69 = v115[167];
  else
    v69 = *((_QWORD *)v115 + 19);
  p_p = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v69 + 11);
  if (v98 < 0)
    p_p = __p;
  if (v69)
  {
    if ((v68[167] & 0x80u) == 0)
      v71 = v68 + 144;
    else
      v71 = (const void *)*((_QWORD *)v68 + 18);
    memmove(p_p, v71, v69);
  }
  strcpy((char *)p_p + v69, "_activation");
  if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v121, v114.__r_.__value_.__l.__data_, v114.__r_.__value_.__l.__size_);
  else
    v121 = v114;
  v81 = 0;
  v82 = 0;
  v83 = 0;
  v119.__r_.__value_.__r.__words[0] = (std::string::size_type)&v81;
  v119.__r_.__value_.__s.__data_[8] = 0;
  v81 = (std::string *)operator new(0x18uLL);
  v82 = v81;
  v83 = v81 + 1;
  v82 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v83, (__int128 *)&v121, &v122, v81);
  if ((char)v68[143] < 0)
    std::string::__init_copy_ctor_external(&v119, *((const std::string::value_type **)v68 + 15), *((_QWORD *)v68 + 16));
  else
    v119 = *(std::string *)(v68 + 5);
  v78 = 0;
  v79 = 0;
  v80 = 0;
  v117 = &v78;
  v118 = 0;
  v78 = (std::string *)operator new(0x18uLL);
  v79 = v78;
  v80 = v78 + 1;
  v79 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v80, (__int128 *)&v119, (__int128 *)&v120, v78);
  Espresso::sequential_builder::add<Espresso::activation_params>(&v101, v67, (uint64_t)&v103, (uint64_t)&__p, (uint64_t)(v68 + 168), (uint64_t)v81, (uint64_t)v82, (uint64_t *)&v78);
  v117 = &v78;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v117);
  if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v119.__r_.__value_.__l.__data_);
  v119.__r_.__value_.__r.__words[0] = (std::string::size_type)&v81;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v119);
  if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v121.__r_.__value_.__l.__data_);
  if (v98 < 0)
    operator delete(__p);
  if (SBYTE7(v104) < 0)
    operator delete((void *)v103);
  std::map<int,BOOL>::map[abi:ne180100](a3, (_QWORD *)v68 + 2);
  v72 = v102;
  if (v102)
  {
    v73 = (unint64_t *)&v102->__shared_owners_;
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v114.__r_.__value_.__l.__data_);
  v75 = v116;
  if (v116)
  {
    v76 = (unint64_t *)&v116->__shared_owners_;
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
}

void sub_1914A6B58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  uint64_t v43;

  *(_QWORD *)(v43 - 128) = &a19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v43 - 128));
  if (*(char *)(v43 - 73) < 0)
    operator delete(*(void **)(v43 - 96));
  if (a33 < 0)
    operator delete(__p);
  if (*(char *)(v43 - 161) < 0)
    operator delete(*(void **)(v43 - 184));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v43 - 160);
  _Unwind_Resume(a1);
}

void sub_1914A6D50()
{
  JUMPOUT(0x1914A6D40);
}

void std::__shared_ptr_emplace<rule_remove_fused_conv_ip_activation::status_t>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB5A88;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<rule_remove_fused_conv_ip_activation::status_t>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB5A88;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<rule_remove_fused_conv_ip_activation::status_t>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void rule_bake_batchnorm::~rule_bake_batchnorm(rule_bake_batchnorm *this)
{
  char *v1;

  *(_QWORD *)this = off_1E2D901E0;
  v1 = (char *)this + 8;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v1);
}

{
  char *v1;

  *(_QWORD *)this = off_1E2D901E0;
  v1 = (char *)this + 8;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v1);
  JUMPOUT(0x19401CD90);
}

void rule_bake_batchnorm::match_at_layer(rule_bake_batchnorm *this@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  const void *v7;
  void *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD v20[3];
  void *v21;
  std::__shared_weak_count *v22;
  int v23;

  v23 = a2;
  v6 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 32) + 16 * a2);
  v7 = *(const void **)(v6 + 64);
  if (!v7
  {
    v21 = 0;
    v22 = 0;
    *a3 = 0;
    a3[1] = 0;
    return;
  }
  v9 = (uint64_t)v8;
  v10 = *(std::__shared_weak_count **)(v6 + 72);
  v21 = v8;
  v22 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  if (*(_DWORD *)((*(uint64_t (**)(void *))(*(_QWORD *)v8 + 384))(v8) + 112))
  {
    v13 = (char *)operator new(0xB0uLL);
    *((_QWORD *)v13 + 1) = 0;
    *((_QWORD *)v13 + 2) = 0;
    *(_QWORD *)v13 = &off_1E2DB5A50;
    *((_QWORD *)v13 + 3) = &off_1E2D59838;
    *((_QWORD *)v13 + 4) = 0xFFFFFFFFLL;
    *((_QWORD *)v13 + 6) = 0;
    *((_QWORD *)v13 + 5) = v13 + 48;
    *((_QWORD *)v13 + 10) = 0;
    *((_QWORD *)v13 + 9) = 0;
    *((_QWORD *)v13 + 7) = 0;
    *((_QWORD *)v13 + 8) = v13 + 72;
    *(_OWORD *)(v13 + 88) = 0u;
    *(_OWORD *)(v13 + 104) = 0u;
    *(_OWORD *)(v13 + 120) = 0u;
    *(_OWORD *)(v13 + 136) = 0u;
    *(_OWORD *)(v13 + 152) = 0u;
    *((_QWORD *)v13 + 21) = 0;
    v20[1] = v13 + 24;
    v20[2] = v13;
    *((_DWORD *)v13 + 8) = a2;
    *((_BYTE *)std::__tree<std::__value_type<int,BOOL>,std::__map_value_compare<int,std::__value_type<int,BOOL>,std::less<int>,true>,std::allocator<std::__value_type<int,BOOL>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)v13 + 5, a2, &v23)+ 32) = 1;
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v13 + 11, v9, (uint64_t)v10);
    v14 = *((_QWORD *)this + 3) + 56;
    v20[0] = a2;
    v15 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v14, a2, v20);
    std::string::operator=((std::string *)(v13 + 104), (const std::string *)v15[3]);
    v16 = *((_QWORD *)this + 3) + 96;
    v20[0] = a2;
    v17 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v16, a2, v20);
    std::string::operator=((std::string *)(v13 + 128), (const std::string *)v17[3]);
    std::string::operator=((std::string *)(v13 + 152), (const std::string *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 32) + 16 * a2) + 16));
    *a3 = v13 + 24;
    a3[1] = v13;
    if (!v10)
      return;
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    if (!v10)
      return;
  }
  v18 = (unint64_t *)&v10->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
}

void sub_1914A7044(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void rule_bake_batchnorm::transform_and_return_skip_layers(uint64_t **a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  char *v6;
  char *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t *v21;
  void *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  void *v28;
  std::string::size_type v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *size;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::runtime_error *exception;
  std::string *v48;
  std::string *v49;
  std::string *v50;
  std::string *v51;
  std::string *v52;
  std::string *v53;
  void *__p;
  std::__shared_weak_count *v55;
  char v56;
  void *lpsrc;
  std::__shared_weak_count *v58;
  void *v59;
  std::__shared_weak_count *v60;
  _OWORD v61[2];
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  char *v71;
  std::__shared_weak_count *v72;
  std::string **v73;
  char v74;
  std::string v75;
  uint64_t v76;
  std::string v77;
  __int128 v78;

  *(_QWORD *)&v78 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)a2
  {
    v7 = v6;
    v8 = *(std::__shared_weak_count **)(a2 + 8);
    v71 = v6;
    v72 = v8;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
    }
  }
  else
  {
    v7 = 0;
    v71 = 0;
    v72 = 0;
  }
  v11 = *((_QWORD *)v7 + 8);
  if (v11)
  {
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 384))(v11);
    v14 = *(_OWORD *)(v12 + 128);
    v13 = *(_OWORD *)(v12 + 144);
    v15 = *(_QWORD *)(v12 + 160);
    v67 = *(_OWORD *)(v12 + 112);
    v16 = *(_OWORD *)v12;
    v17 = *(_OWORD *)(v12 + 16);
    v62 = *(_OWORD *)(v12 + 32);
    v61[0] = v16;
    v61[1] = v17;
    v18 = *(_OWORD *)(v12 + 48);
    v19 = *(_OWORD *)(v12 + 64);
    v20 = *(_OWORD *)(v12 + 96);
    v65 = *(_OWORD *)(v12 + 80);
    v66 = v20;
    v63 = v18;
    v64 = v19;
    v70 = v15;
    v68 = v14;
    v69 = v13;
    LODWORD(v67) = 0;
    LODWORD(v62) = 1;
    v21 = *a1;
    std::string::basic_string[abi:ne180100]<0>(&__p, "convolution");
    if (v7[103] < 0)
      std::string::__init_copy_ctor_external(&v77, *((const std::string::value_type **)v7 + 10), *((_QWORD *)v7 + 11));
    else
      v77 = *(std::string *)(v7 + 80);
    v51 = 0;
    v52 = 0;
    v53 = 0;
    v75.__r_.__value_.__r.__words[0] = (std::string::size_type)&v51;
    v75.__r_.__value_.__s.__data_[8] = 0;
    v51 = (std::string *)operator new(0x18uLL);
    v52 = v51;
    v53 = v51 + 1;
    v52 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v53, (__int128 *)&v77, &v78, v51);
    if (v7[127] < 0)
      std::string::__init_copy_ctor_external(&v75, *((const std::string::value_type **)v7 + 13), *((_QWORD *)v7 + 14));
    else
      v75 = *(std::string *)(v7 + 104);
    v48 = 0;
    v49 = 0;
    v50 = 0;
    v73 = &v48;
    v74 = 0;
    v48 = (std::string *)operator new(0x18uLL);
    v49 = v48;
    v50 = v48 + 1;
    v49 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v50, (__int128 *)&v75, (__int128 *)&v76, v48);
    Espresso::sequential_builder::add<Espresso::convolution_uniforms>((uint64_t *)&lpsrc, v21, (uint64_t)&__p, (uint64_t)(v7 + 128), (uint64_t)v61, (uint64_t)v51, (uint64_t)v52, (uint64_t *)&v48);
    if (lpsrc
    {
      v59 = v22;
      v60 = v58;
      if (v58)
      {
        v23 = (unint64_t *)&v58->__shared_owners_;
        do
          v24 = __ldxr(v23);
        while (__stxr(v24 + 1, v23));
      }
    }
    else
    {
      v59 = 0;
      v60 = 0;
    }
    v25 = v58;
    if (v58)
    {
      v26 = (unint64_t *)&v58->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    v73 = &v48;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v73);
    if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v75.__r_.__value_.__l.__data_);
    v75.__r_.__value_.__r.__words[0] = (std::string::size_type)&v51;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v75);
    if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v77.__r_.__value_.__l.__data_);
    if (v56 < 0)
      operator delete(__p);
    v28 = v59;
    (*(void (**)(void **__return_ptr, void *))(*(_QWORD *)v59 + 456))(&__p, v59);
    (*(void (**)(std::string *__return_ptr, void *))(*(_QWORD *)v28 + 448))(&v77, v28);
    if (__p)
    {
      if (v77.__r_.__value_.__r.__words[0])
      {
        v29 = *((_QWORD *)v71 + 9);
        v75.__r_.__value_.__r.__words[0] = *((_QWORD *)v71 + 8);
        v75.__r_.__value_.__l.__size_ = v29;
        if (v29)
        {
          v30 = (unint64_t *)(v29 + 8);
          do
            v31 = __ldxr(v30);
          while (__stxr(v31 + 1, v30));
        }
        (*(void (**)(void *, std::string *))(*(_QWORD *)v28 + 48))(v28, &v75);
        size = (std::__shared_weak_count *)v75.__r_.__value_.__l.__size_;
        if (v75.__r_.__value_.__l.__size_)
        {
          v33 = (unint64_t *)(v75.__r_.__value_.__l.__size_ + 8);
          do
            v34 = __ldaxr(v33);
          while (__stlxr(v34 - 1, v33));
          if (!v34)
          {
            ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
            std::__shared_weak_count::__release_weak(size);
          }
        }
        v35 = (std::__shared_weak_count *)v77.__r_.__value_.__l.__size_;
        if (v77.__r_.__value_.__l.__size_)
        {
          v36 = (unint64_t *)(v77.__r_.__value_.__l.__size_ + 8);
          do
            v37 = __ldaxr(v36);
          while (__stlxr(v37 - 1, v36));
          if (!v37)
          {
            ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
            std::__shared_weak_count::__release_weak(v35);
          }
        }
        v38 = v55;
        if (v55)
        {
          v39 = (unint64_t *)&v55->__shared_owners_;
          do
            v40 = __ldaxr(v39);
          while (__stlxr(v40 - 1, v39));
          if (!v40)
          {
            ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
            std::__shared_weak_count::__release_weak(v38);
          }
        }
        v41 = v60;
        if (v60)
        {
          v42 = (unint64_t *)&v60->__shared_owners_;
          do
            v43 = __ldaxr(v42);
          while (__stlxr(v43 - 1, v42));
          if (!v43)
          {
            ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
            std::__shared_weak_count::__release_weak(v41);
          }
        }
        v7 = v71;
        goto LABEL_59;
      }
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Can't find GPU weights");
    }
    else
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Can't find CPU weights");
    }
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
LABEL_59:
  std::map<int,BOOL>::map[abi:ne180100](a3, (_QWORD *)v7 + 2);
  v44 = v72;
  if (v72)
  {
    v45 = (unint64_t *)&v72->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
}

void sub_1914A7574(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,char a24)
{
  uint64_t v24;

  *(_QWORD *)(v24 - 128) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v24 - 128));
  if (*(char *)(v24 - 73) < 0)
    operator delete(*(void **)(v24 - 96));
  if (a21 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v24 - 160);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<rule_bake_batchnorm::status_t>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB5A50;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<rule_bake_batchnorm::status_t>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB5A50;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<rule_bake_batchnorm::status_t>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t Espresso::gradient_builder::gradient_builder(uint64_t a1, _QWORD *a2, char *a3)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  char v8;
  unsigned int (***v9)(_QWORD);
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  __int128 v14;

  *(_QWORD *)a1 = *a2;
  v5 = a2[1];
  *(_QWORD *)(a1 + 8) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = *a3;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 40) = a1 + 48;
  *(_QWORD *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_DWORD *)(a1 + 96) = 1065353216;
  v9 = *(unsigned int (****)(_QWORD))(*(_QWORD *)(*a2 + 16) + 8);
  if ((**v9)(v9) != 80000)
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("gradient_builder can be created only for networks on IR platform");
  std::allocate_shared[abi:ne180100]<Espresso::network_optimization_graph,std::allocator<Espresso::network_optimization_graph>,std::shared_ptr<Espresso::net> &,void>(&v14, (Espresso::net *)*a2, (std::__shared_weak_count *)a2[1]);
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 24, &v14);
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  return a1;
}

void sub_1914A77EC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(v4);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v3, *(_QWORD *)(v1 + 48));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v2);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<Espresso::network_optimization_graph,std::allocator<Espresso::network_optimization_graph>,std::shared_ptr<Espresso::net> &,void>(_QWORD *a1, Espresso::net *a2, std::__shared_weak_count *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  v6 = operator new(0x58uLL);
  v7 = v6;
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DBD8C0;
  v8 = v6 + 3;
  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)(v6 + 3), a2);
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v8, (uint64_t)a2, (uint64_t)a3);
  if (a3)
  {
    v11 = (unint64_t *)&a3->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
      std::__shared_weak_count::__release_weak(a3);
    }
  }
  *a1 = v8;
  a1[1] = v7;
}

void sub_1914A78EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__shared_weak_count *v9;
  void *v11;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::__shared_weak_count::~__shared_weak_count(v9);
  operator delete(v11);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::network_optimization_graph>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBD8C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::network_optimization_graph>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBD8C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::network_optimization_graph>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 24;
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(*(_QWORD **)(a1 + 72));
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(*(_QWORD **)(a1 + 48));
  return std::shared_ptr<void>::~shared_ptr[abi:ne180100](v2);
}

_QWORD *Espresso::gradient_builder::preprocess_network@<X0>(std::__shared_weak_count **this@<X0>, uint64_t *a2@<X8>)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  int v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  void *__p[2];
  char v21;
  _QWORD v22[2];
  uint64_t shared_weak_owners;
  std::__shared_weak_count *v24;
  void **v25;

  v4 = *this;
  v5 = (std::__shared_weak_count *)(*this)[1].__vftable;
  shared_weak_owners = (*this)->__shared_weak_owners_;
  v24 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v4 = *this;
  }
  v8 = *(_DWORD *)(*(_QWORD *)v4[1].__shared_owners_ + 12);
  v9 = this[1];
  v22[0] = v4;
  v22[1] = v9;
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  Espresso::optimize_network(&shared_weak_owners, v8, (uint64_t)v22, &__block_literal_global_5599, a2);
  if (v9)
  {
    v12 = (unint64_t *)&v9->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v14 = v24;
  if (v24)
  {
    v15 = (unint64_t *)&v24->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "training");
  v25 = __p;
  v18 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(v17 + 472), __p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v25);
  MEMORY[0x19401C808]((char *)v18 + 56, "1");
  if (v21 < 0)
    operator delete(__p[0]);
  return std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](this, v17, a2[1]);
}

void sub_1914A7AF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18)
{
  uint64_t v18;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v18);
  _Unwind_Resume(a1);
}

void ___ZN8Espresso16gradient_builder18preprocess_networkEv_block_invoke(uint64_t a1@<X1>, char **a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  __int128 v32;
  int64x2_t v33;
  char *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  uint64_t v58;
  char *v59;
  char *v60;
  char *v61;
  char *v62;
  __int128 v63;
  int64x2_t v64;
  char *v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  int64x2_t v69;
  char *v70;
  _QWORD *v71;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = operator new(0x40uLL);
  v5 = v4;
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_1E2DB5938;
  v6 = *(_QWORD **)a1;
  v7 = *(std::__shared_weak_count **)(a1 + 8);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    v4[3] = off_1E2D901E0;
    v4[4] = v6;
    v4[5] = v7;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  else
  {
    v4[3] = off_1E2D901E0;
    v4[4] = v6;
    v4[5] = 0;
  }
  v12 = v4 + 3;
  v4[6] = *v6;
  v13 = v6[1];
  v4[7] = v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  if (v7)
  {
    v16 = (unint64_t *)&v7->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    *v12 = &off_1E2D57980;
    do
      v18 = __ldaxr(v16);
    while (__stlxr(v18 - 1, v16));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  else
  {
    *v12 = &off_1E2D57980;
  }
  *(_QWORD *)&v66 = v5 + 3;
  *((_QWORD *)&v66 + 1) = v5;
  v19 = (unint64_t)a2[2];
  v20 = a2[1];
  if ((unint64_t)v20 >= v19)
  {
    v22 = (v20 - *a2) >> 4;
    if ((unint64_t)(v22 + 1) >> 60)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v23 = v19 - (_QWORD)*a2;
    v24 = v23 >> 3;
    if (v23 >> 3 <= (unint64_t)(v22 + 1))
      v24 = v22 + 1;
    if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF0)
      v25 = 0xFFFFFFFFFFFFFFFLL;
    else
      v25 = v24;
    v71 = a2 + 2;
    v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v25);
    v28 = &v26[16 * v22];
    *(_OWORD *)v28 = v66;
    v30 = *a2;
    v29 = a2[1];
    if (v29 == *a2)
    {
      v33 = vdupq_n_s64((unint64_t)v29);
      v31 = &v26[16 * v22];
    }
    else
    {
      v31 = &v26[16 * v22];
      do
      {
        v32 = *((_OWORD *)v29 - 1);
        v29 -= 16;
        *((_OWORD *)v31 - 1) = v32;
        v31 -= 16;
        *(_QWORD *)v29 = 0;
        *((_QWORD *)v29 + 1) = 0;
      }
      while (v29 != v30);
      v33 = *(int64x2_t *)a2;
    }
    v21 = v28 + 16;
    *a2 = v31;
    a2[1] = v28 + 16;
    v69 = v33;
    v34 = a2[2];
    a2[2] = &v26[16 * v27];
    v70 = v34;
    v68 = v33.i64[0];
    std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v68);
  }
  else
  {
    *(_OWORD *)v20 = v66;
    v21 = v20 + 16;
  }
  a2[1] = v21;
  v35 = operator new(0x40uLL);
  v36 = v35;
  v35[1] = 0;
  v35[2] = 0;
  *v35 = &off_1E2DB5740;
  v37 = *(_QWORD **)a1;
  v38 = *(std::__shared_weak_count **)(a1 + 8);
  if (v38)
  {
    v39 = (unint64_t *)&v38->__shared_owners_;
    do
      v40 = __ldxr(v39);
    while (__stxr(v40 + 1, v39));
    do
      v41 = __ldxr(v39);
    while (__stxr(v41 + 1, v39));
    v35[3] = off_1E2D901E0;
    v35[4] = v37;
    v35[5] = v38;
    do
      v42 = __ldxr(v39);
    while (__stxr(v42 + 1, v39));
  }
  else
  {
    v35[3] = off_1E2D901E0;
    v35[4] = v37;
    v35[5] = 0;
  }
  v43 = v35 + 3;
  v35[6] = *v37;
  v44 = v37[1];
  v35[7] = v44;
  if (v44)
  {
    v45 = (unint64_t *)(v44 + 8);
    do
      v46 = __ldxr(v45);
    while (__stxr(v46 + 1, v45));
  }
  if (v38)
  {
    v47 = (unint64_t *)&v38->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
    *v43 = &off_1E2D56CB0;
    do
      v49 = __ldaxr(v47);
    while (__stlxr(v49 - 1, v47));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  else
  {
    *v43 = &off_1E2D56CB0;
  }
  *(_QWORD *)&v67 = v36 + 3;
  *((_QWORD *)&v67 + 1) = v36;
  v51 = a2[1];
  v50 = (unint64_t)a2[2];
  if ((unint64_t)v51 >= v50)
  {
    v53 = (v51 - *a2) >> 4;
    if ((unint64_t)(v53 + 1) >> 60)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v54 = v50 - (_QWORD)*a2;
    v55 = v54 >> 3;
    if (v54 >> 3 <= (unint64_t)(v53 + 1))
      v55 = v53 + 1;
    if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFF0)
      v56 = 0xFFFFFFFFFFFFFFFLL;
    else
      v56 = v55;
    v71 = a2 + 2;
    v57 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v56);
    v59 = &v57[16 * v53];
    *(_OWORD *)v59 = v67;
    v61 = *a2;
    v60 = a2[1];
    if (v60 == *a2)
    {
      v64 = vdupq_n_s64((unint64_t)v60);
      v62 = &v57[16 * v53];
    }
    else
    {
      v62 = &v57[16 * v53];
      do
      {
        v63 = *((_OWORD *)v60 - 1);
        v60 -= 16;
        *((_OWORD *)v62 - 1) = v63;
        v62 -= 16;
        *(_QWORD *)v60 = 0;
        *((_QWORD *)v60 + 1) = 0;
      }
      while (v60 != v61);
      v64 = *(int64x2_t *)a2;
    }
    v52 = v59 + 16;
    *a2 = v62;
    a2[1] = v59 + 16;
    v69 = v64;
    v65 = a2[2];
    a2[2] = &v57[16 * v58];
    v70 = v65;
    v68 = v64.i64[0];
    std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v68);
  }
  else
  {
    *(_OWORD *)v51 = v67;
    v52 = v51 + 16;
  }
  a2[1] = v52;
}

void sub_1914A7F7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)va1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<rule_bake_batchnorm>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB5740;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<rule_bake_batchnorm>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB5740;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<rule_bake_batchnorm>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<rule_remove_fused_conv_ip_activation>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB5938;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<rule_remove_fused_conv_ip_activation>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB5938;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<rule_remove_fused_conv_ip_activation>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t Espresso::gradient_builder::net_training_transform@<X0>(Espresso::gradient_builder *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _OWORD v8[2];
  int v9;
  unsigned __int8 *v10;

  memset(v8, 0, sizeof(v8));
  v9 = 1065353216;
  v4 = *(_QWORD *)(*(_QWORD *)this + 32);
  if (*(_QWORD *)(*(_QWORD *)this + 40) != v4)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      v10 = (unsigned __int8 *)(*(_QWORD *)(v4 + v5) + 16);
      std::__hash_table<std::__hash_value_type<std::string,Espresso::training_transform_options>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::training_transform_options>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v8, v10, (__int128 **)&v10)[40] = 0;
      ++v6;
      v4 = *(_QWORD *)(*(_QWORD *)this + 32);
      v5 += 16;
    }
    while (v6 < (*(_QWORD *)(*(_QWORD *)this + 40) - v4) >> 4);
  }
  Espresso::gradient_builder::net_training_transform((uint64_t)this, v8, a2);
  return std::__hash_table<std::__hash_value_type<std::string,Espresso::training_transform_options>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::training_transform_options>>>::~__hash_table((uint64_t)v8);
}

void sub_1914A8110(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__hash_table<std::__hash_value_type<std::string,Espresso::training_transform_options>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::training_transform_options>>>::~__hash_table((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void Espresso::gradient_builder::net_training_transform(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint8x8_t v14;
  unint64_t v15;
  void ***v16;
  void **v17;
  unint64_t v18;
  char *v19;
  std::string *v20;
  __int128 v21;
  float v22;
  float v23;
  _BOOL8 v24;
  unint64_t v25;
  unint64_t v26;
  int8x8_t prime;
  void *v28;
  void *v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  uint8x8_t v33;
  unint64_t v34;
  uint8x8_t v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  void **v39;
  unint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v45;
  uint64_t v47[3];
  __int128 v48;
  std::string *v49;
  std::string *v50;
  uint64_t v51;
  int v52[2];
  uint64_t v53;
  void **v54[2];
  char v55;

  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  v51 = 0;
  *(_QWORD *)v52 = 0;
  v53 = 0;
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  if (*(_QWORD *)(*(_QWORD *)a1 + 40) == v4)
  {
    v43 = 0;
    v42 = 0;
    goto LABEL_97;
  }
  v5 = (uint64_t *)a1;
  v6 = 0;
  v45 = (_QWORD *)(a3 + 16);
  do
  {
    v7 = *(_QWORD *)(v4 + 16 * v6);
    if (!std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>(a2, (unsigned __int8 *)(v7 + 16)))goto LABEL_85;
    v8 = *v5;
    v9 = *(_QWORD *)(*(_QWORD *)(*v5 + 32) + 16 * v6);
    v10 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>(a2, (unsigned __int8 *)(v7 + 16));
    if (!v10)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    Espresso::layer::layer_training_transform(v9, v8, v6, (uint64_t)(v10 + 40), &v48);
    v11 = std::__string_hash<char>::operator()[abi:ne180100](v7 + 16);
    v12 = v11;
    v13 = *(_QWORD *)(a3 + 8);
    if (v13)
    {
      v14 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
      v14.i16[0] = vaddlv_u8(v14);
      v15 = v14.u32[0];
      if (v14.u32[0] > 1uLL)
      {
        v8 = v11;
        if (v11 >= v13)
          v8 = v11 % v13;
      }
      else
      {
        v8 = (v13 - 1) & v11;
      }
      v16 = *(void ****)(*(_QWORD *)a3 + 8 * v8);
      if (v16)
      {
        v17 = *v16;
        if (*v16)
        {
          while (1)
          {
            v18 = (unint64_t)v17[1];
            if (v18 == v12)
            {
              if (std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)v17 + 16, (unsigned __int8 *)(v7 + 16)))
              {
                v5 = (uint64_t *)a1;
                goto LABEL_82;
              }
            }
            else
            {
              if (v15 > 1)
              {
                if (v18 >= v13)
                  v18 %= v13;
              }
              else
              {
                v18 &= v13 - 1;
              }
              if (v18 != v8)
              {
LABEL_21:
                v5 = (uint64_t *)a1;
                goto LABEL_23;
              }
            }
            v17 = (void **)*v17;
            if (!v17)
              goto LABEL_21;
          }
        }
      }
      v5 = (uint64_t *)a1;
    }
LABEL_23:
    v19 = (char *)operator new(0x58uLL);
    v54[0] = (void **)v19;
    v54[1] = (void **)(a3 + 16);
    v55 = 0;
    *(_QWORD *)v19 = 0;
    *((_QWORD *)v19 + 1) = v12;
    v20 = (std::string *)(v19 + 16);
    if (*(char *)(v7 + 39) < 0)
    {
      std::string::__init_copy_ctor_external(v20, *(const std::string::value_type **)(v7 + 16), *(_QWORD *)(v7 + 24));
    }
    else
    {
      v21 = *(_OWORD *)(v7 + 16);
      *((_QWORD *)v19 + 4) = *(_QWORD *)(v7 + 32);
      *(_OWORD *)&v20->__r_.__value_.__l.__data_ = v21;
    }
    *(_OWORD *)(v19 + 72) = 0u;
    *(_OWORD *)(v19 + 56) = 0u;
    *(_OWORD *)(v19 + 40) = 0u;
    v55 = 1;
    v22 = (float)(unint64_t)(*(_QWORD *)(a3 + 24) + 1);
    v23 = *(float *)(a3 + 32);
    if (!v13 || (float)(v23 * (float)v13) < v22)
    {
      v24 = (v13 & (v13 - 1)) != 0;
      if (v13 < 3)
        v24 = 1;
      v25 = v24 | (2 * v13);
      v26 = vcvtps_u32_f32(v22 / v23);
      if (v25 <= v26)
        prime = (int8x8_t)v26;
      else
        prime = (int8x8_t)v25;
      if (*(_QWORD *)&prime == 1)
      {
        prime = (int8x8_t)2;
      }
      else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
      {
        prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      }
      v13 = *(_QWORD *)(a3 + 8);
      if (*(_QWORD *)&prime > v13)
        goto LABEL_38;
      if (*(_QWORD *)&prime < v13)
      {
        v34 = vcvtps_u32_f32((float)*(unint64_t *)(a3 + 24) / *(float *)(a3 + 32));
        if (v13 < 3 || (v35 = (uint8x8_t)vcnt_s8((int8x8_t)v13), v35.i16[0] = vaddlv_u8(v35), v35.u32[0] > 1uLL))
        {
          v34 = std::__next_prime(v34);
        }
        else
        {
          v36 = 1 << -(char)__clz(v34 - 1);
          if (v34 >= 2)
            v34 = v36;
        }
        if (*(_QWORD *)&prime <= v34)
          prime = (int8x8_t)v34;
        if (*(_QWORD *)&prime >= v13)
        {
          v13 = *(_QWORD *)(a3 + 8);
        }
        else
        {
          if (prime)
          {
LABEL_38:
            if (*(_QWORD *)&prime >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v28 = operator new(8 * *(_QWORD *)&prime);
            v29 = *(void **)a3;
            *(_QWORD *)a3 = v28;
            if (v29)
              operator delete(v29);
            v30 = 0;
            *(int8x8_t *)(a3 + 8) = prime;
            do
              *(_QWORD *)(*(_QWORD *)a3 + 8 * v30++) = 0;
            while (*(_QWORD *)&prime != v30);
            v31 = (_QWORD *)*v45;
            if (*v45)
            {
              v32 = v31[1];
              v33 = (uint8x8_t)vcnt_s8(prime);
              v33.i16[0] = vaddlv_u8(v33);
              if (v33.u32[0] > 1uLL)
              {
                if (v32 >= *(_QWORD *)&prime)
                  v32 %= *(_QWORD *)&prime;
              }
              else
              {
                v32 &= *(_QWORD *)&prime - 1;
              }
              *(_QWORD *)(*(_QWORD *)a3 + 8 * v32) = v45;
              v37 = (_QWORD *)*v31;
              if (*v31)
              {
                do
                {
                  v38 = v37[1];
                  if (v33.u32[0] > 1uLL)
                  {
                    if (v38 >= *(_QWORD *)&prime)
                      v38 %= *(_QWORD *)&prime;
                  }
                  else
                  {
                    v38 &= *(_QWORD *)&prime - 1;
                  }
                  if (v38 != v32)
                  {
                    if (!*(_QWORD *)(*(_QWORD *)a3 + 8 * v38))
                    {
                      *(_QWORD *)(*(_QWORD *)a3 + 8 * v38) = v31;
                      goto LABEL_63;
                    }
                    *v31 = *v37;
                    *v37 = **(_QWORD **)(*(_QWORD *)a3 + 8 * v38);
                    **(_QWORD **)(*(_QWORD *)a3 + 8 * v38) = v37;
                    v37 = v31;
                  }
                  v38 = v32;
LABEL_63:
                  v31 = v37;
                  v37 = (_QWORD *)*v37;
                  v32 = v38;
                }
                while (v37);
              }
            }
            v13 = (unint64_t)prime;
            goto LABEL_67;
          }
          v41 = *(void **)a3;
          *(_QWORD *)a3 = 0;
          if (v41)
            operator delete(v41);
          v13 = 0;
          *(_QWORD *)(a3 + 8) = 0;
        }
      }
LABEL_67:
      if ((v13 & (v13 - 1)) != 0)
      {
        if (v12 >= v13)
          v8 = v12 % v13;
        else
          v8 = v12;
      }
      else
      {
        v8 = (v13 - 1) & v12;
      }
    }
    v39 = *(void ***)(*(_QWORD *)a3 + 8 * v8);
    v17 = v54[0];
    if (v39)
    {
      *v54[0] = *v39;
    }
    else
    {
      *v54[0] = *(void **)(a3 + 16);
      *(_QWORD *)(a3 + 16) = v17;
      *(_QWORD *)(*(_QWORD *)a3 + 8 * v8) = v45;
      if (!*v17)
        goto LABEL_81;
      v40 = *((_QWORD *)*v17 + 1);
      if ((v13 & (v13 - 1)) != 0)
      {
        if (v40 >= v13)
          v40 %= v13;
      }
      else
      {
        v40 &= v13 - 1;
      }
      v39 = (void **)(*(_QWORD *)a3 + 8 * v40);
    }
    *v39 = v17;
LABEL_81:
    v54[0] = 0;
    ++*(_QWORD *)(a3 + 24);
    std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,Espresso::layer_training_transform_info>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,Espresso::layer_training_transform_info>,void *>>>>::reset[abi:ne180100]((uint64_t)v54);
LABEL_82:
    if (v17 + 5 != (void **)&v48)
    {
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)(v17 + 5), (std::string *)v48, *((std::string **)&v48 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v48 + 1) - v48) >> 3));
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)(v17 + 8), v49, v50, 0xAAAAAAAAAAAAAAABLL * (((char *)v50 - (char *)v49) >> 3));
    }
    std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>((void **)&v51, *(uint64_t *)v52, (std::string *)v48, *((std::string **)&v48 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v48 + 1) - v48) >> 3));
    std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>((void **)&v51, *(uint64_t *)v52, v49, v50, 0xAAAAAAAAAAAAAAABLL * (((char *)v50 - (char *)v49) >> 3));
    v54[0] = (void **)&v49;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v54);
    v54[0] = (void **)&v48;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v54);
LABEL_85:
    ++v6;
    v4 = *(_QWORD *)(*v5 + 32);
  }
  while (v6 < (*(_QWORD *)(*v5 + 40) - v4) >> 4);
  v42 = v51;
  v43 = *(_QWORD *)v52;
LABEL_97:
  memset(v47, 0, sizeof(v47));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v47, v42, v43, 0xAAAAAAAAAAAAAAABLL * ((v43 - v42) >> 3));
  Espresso::gradient_builder::transform_parameter_inputs_as_globals(a1, v47);
  *(_QWORD *)&v48 = v47;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v48);
  *(_QWORD *)&v48 = &v51;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v48);
}

void sub_1914A8750(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  uint64_t v22;

  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a16);
  a16 = (void **)&a22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a16);
  std::__hash_table<std::__hash_value_type<std::string,Espresso::layer_training_transform_info>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::layer_training_transform_info>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::layer_training_transform_info>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::layer_training_transform_info>>>::~__hash_table(v22);
  _Unwind_Resume(a1);
}

void Espresso::gradient_builder::transform_parameter_inputs_as_globals(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  int v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  __int128 v37;
  void *v38;
  _QWORD *v39;
  _QWORD *v40;
  BOOL v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  const Espresso::net *v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v69[2];
  __int128 v70;
  uint64_t v71[2];
  _QWORD v72[2];
  const std::string *v73[3];
  uint64_t v74;
  std::__shared_weak_count *v75;
  _BYTE __str[32];
  uint64_t v77;
  __int128 v78;
  uint64_t v79;
  char **v80;
  char *v81[2];
  std::string v82;
  uint64_t *v83;
  char *v84;
  void *__p;
  char v86;
  _QWORD v87[4];
  int v88;
  uint64_t v89[2];
  uint64_t v90[2];
  uint64_t v91;
  std::__shared_weak_count *v92;
  uint64_t v93;
  std::__shared_weak_count *v94;
  _QWORD *v95[7];
  char v96;
  Espresso::net *v97;
  std::__shared_weak_count *v98;
  std::__shared_weak_count *v99;
  std::__shared_weak_count *v100;
  uint64_t v101;
  uint64_t v102;
  std::__shared_weak_count *v103;

  _ZNSt3__115allocate_sharedB8ne180100IN8Espresso3netENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v102);
  v4 = v102;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(v102 + 16), *(_QWORD *)(*(_QWORD *)a1 + 16), *(_QWORD *)(*(_QWORD *)a1 + 24));
  v91 = v4;
  v92 = v103;
  if (v103)
  {
    p_shared_owners = (unint64_t *)&v103->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v7 = *(_QWORD *)a1;
  v8 = *(std::__shared_weak_count **)(*(_QWORD *)a1 + 24);
  v90[0] = *(_QWORD *)(*(_QWORD *)a1 + 16);
  v90[1] = (uint64_t)v8;
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    v7 = *(_QWORD *)a1;
  }
  v11 = *(_DWORD *)(**(_QWORD **)(v7 + 32) + 12);
  v89[0] = 0;
  v89[1] = 0;
  Espresso::sequential_builder::sequential_builder((uint64_t)&v93, &v91, v90, v11, v89);
  if (v8)
  {
    v12 = (unint64_t *)&v8->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v14 = v92;
  if (v92)
  {
    v15 = (unint64_t *)&v92->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  Espresso::net::copy_parameters_from(v97, *(const Espresso::net **)a1);
  memset(v87, 0, sizeof(v87));
  v88 = 1065353216;
  v17 = *a2;
  v18 = a2[1];
  while (v17 != v18)
  {
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v87, v17, v17);
    if (*(char *)(v17 + 23) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)__str, *(const std::string::value_type **)v17, *(_QWORD *)(v17 + 8));
    }
    else
    {
      v19 = *(_OWORD *)v17;
      *(_QWORD *)&__str[16] = *(_QWORD *)(v17 + 16);
      *(_OWORD *)__str = v19;
    }
    v20 = *(_QWORD *)a1 + 136;
    v73[0] = (const std::string *)v17;
    v21 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v20, (unsigned __int8 *)v17, (__int128 **)v73);
    v23 = (uint64_t *)*((_QWORD *)v21 + 5);
    v22 = (char *)*((_QWORD *)v21 + 6);
    v80 = (char **)v23;
    v81[0] = v22;
    if (v22)
    {
      v24 = (unint64_t *)(v22 + 8);
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 1, v24));
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__erase_unique<std::string>((_QWORD *)(*(_QWORD *)a1 + 136), (unsigned __int8 *)v17);
      v83 = v23;
      v84 = v22;
      do
        v26 = __ldxr(v24);
      while (__stxr(v26 + 1, v24));
    }
    else
    {
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__erase_unique<std::string>((_QWORD *)(*(_QWORD *)a1 + 136), (unsigned __int8 *)v17);
      v83 = v23;
      v84 = 0;
    }
    if ((__str[23] & 0x80000000) != 0)
      std::string::__init_copy_ctor_external(&v82, *(const std::string::value_type **)__str, *(std::string::size_type *)&__str[8]);
    else
      v82 = *(std::string *)__str;
    Espresso::sequential_builder::load_global_op((std::string *)__str, &v82, &v93, (uint64_t *)&v83, (uint64_t)&__p);
    if (v86 < 0)
      operator delete(__p);
    if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v82.__r_.__value_.__l.__data_);
      if (!v22)
        goto LABEL_43;
    }
    else if (!v22)
    {
      goto LABEL_43;
    }
    v27 = (unint64_t *)(v22 + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      (*(void (**)(char *))(*(_QWORD *)v22 + 16))(v22);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v22);
    }
LABEL_43:
    v29 = (std::__shared_weak_count *)v81[0];
    if (v81[0])
    {
      v30 = (unint64_t *)(v81[0] + 8);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    if ((__str[23] & 0x80000000) != 0)
      operator delete(*(void **)__str);
    v17 += 24;
  }
  v81[0] = 0;
  v81[1] = 0;
  v80 = v81;
  v32 = *(_QWORD **)(*(_QWORD *)a1 + 232);
  v33 = *(_QWORD *)a1 + 240;
  if (v32 != (_QWORD *)v33)
  {
    do
    {
      if (!std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v87, (uint64_t)(v32 + 4)))
      {
        v34 = *(_QWORD *)a1 + 136;
        v73[0] = (const std::string *)(v32 + 4);
        v35 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v34, (unsigned __int8 *)v32 + 32, (__int128 **)v73);
        Espresso::abstract_blob_container::shape(__str, *((_QWORD *)v35 + 5));
        v73[0] = (const std::string *)(v32 + 4);
        v36 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v80, v32 + 4, (__int128 **)v73);
        v37 = *(_OWORD *)&__str[16];
        *(_OWORD *)(v36 + 56) = *(_OWORD *)__str;
        *(_OWORD *)(v36 + 72) = v37;
        *((_QWORD *)v36 + 11) = v77;
        v38 = (void *)*((_QWORD *)v36 + 12);
        if (v38)
        {
          *((_QWORD *)v36 + 13) = v38;
          operator delete(v38);
          *((_QWORD *)v36 + 12) = 0;
          *((_QWORD *)v36 + 13) = 0;
          *((_QWORD *)v36 + 14) = 0;
        }
        *((_OWORD *)v36 + 6) = v78;
        *((_QWORD *)v36 + 14) = v79;
      }
      v39 = (_QWORD *)v32[1];
      if (v39)
      {
        do
        {
          v40 = v39;
          v39 = (_QWORD *)*v39;
        }
        while (v39);
      }
      else
      {
        do
        {
          v40 = (_QWORD *)v32[2];
          v41 = *v40 == (_QWORD)v32;
          v32 = v40;
        }
        while (!v41);
      }
      v32 = v40;
    }
    while (v40 != (_QWORD *)v33);
  }
  *(_OWORD *)&__str[8] = 0uLL;
  *(_QWORD *)__str = &__str[8];
  Espresso::sequential_builder::build_from_shapes((uint64_t)&v93, (uint64_t)__str, &v74);
  v42 = v75;
  if (v75)
  {
    v43 = (unint64_t *)&v75->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  memset(v73, 0, sizeof(v73));
  v45 = *(std::__shared_weak_count **)(a1 + 8);
  v72[0] = *(_QWORD *)a1;
  v72[1] = v45;
  if (v45)
  {
    v46 = (unint64_t *)&v45->__shared_owners_;
    do
      v47 = __ldxr(v46);
    while (__stxr(v47 + 1, v46));
  }
  Espresso::sequential_builder::add_network((uint64_t)&v93, v72, v73);
  if (v45)
  {
    v48 = (unint64_t *)&v45->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  v71[0] = 0;
  v71[1] = 0;
  Espresso::net::setup_script((uint64_t)v97, v71, 0);
  Espresso::sequential_builder::build_from_shapes((uint64_t)&v93, (uint64_t)&v80, &v70);
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1, &v70);
  v50 = (std::__shared_weak_count *)*((_QWORD *)&v70 + 1);
  if (*((_QWORD *)&v70 + 1))
  {
    v51 = (unint64_t *)(*((_QWORD *)&v70 + 1) + 8);
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  v53 = *(const Espresso::net **)a1;
  v69[0] = 0;
  v69[1] = 0;
  Espresso::net::setup_script((uint64_t)v53, v69, 0);
  *(_QWORD *)&v70 = v73;
  std::vector<Espresso::profiler_t::compiler_analytics_entry_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&v70);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)__str, *(char **)&__str[8]);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v80, v81[0]);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v87);
  std::deque<std::pair<std::shared_ptr<Espresso::abstract_context>,Espresso::compute_path>>::~deque[abi:ne180100]((uint64_t)&v101);
  v54 = v100;
  if (v100)
  {
    v55 = (unint64_t *)&v100->__shared_owners_;
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  v57 = v99;
  if (v99)
  {
    v58 = (unint64_t *)&v99->__shared_owners_;
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  v60 = v98;
  if (v98)
  {
    v61 = (unint64_t *)&v98->__shared_owners_;
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  if (v96 < 0)
    operator delete(v95[5]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)v95, v95[1]);
  v63 = v94;
  if (v94)
  {
    v64 = (unint64_t *)&v94->__shared_owners_;
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  v66 = v103;
  if (v103)
  {
    v67 = (unint64_t *)&v103->__shared_owners_;
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
}

void sub_1914A8E58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char *a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,char *a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,char *a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54,uint64_t a55,char a56,uint64_t a57,char a58,uint64_t a59,void *a60)
{
  uint64_t v60;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  a12 = &a18;
  std::vector<Espresso::profiler_t::compiler_analytics_entry_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&__p, a24);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&a35, a36);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a49);
  Espresso::sequential_builder::~sequential_builder(&a60);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v60 - 80);
  _Unwind_Resume(a1);
}

void Espresso::gradient_builder::build_gradient(Espresso::gradient_builder *this@<X0>, Espresso::net **a2@<X8>)
{
  __int128 *v3;
  char *v4;
  __int128 v5;
  void *v6;
  size_t v7;
  void *p_p;
  _BYTE *v9;
  _OWORD *v10;
  void *v11;
  __int128 v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  char *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  Espresso::net *v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  int v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  Espresso::net *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t **v38;
  _DWORD *v39;
  _QWORD *v40;
  __int128 *i;
  char *v42;
  __int128 v43;
  void *v44;
  size_t v45;
  std::string *v46;
  _BYTE *v47;
  _OWORD *v48;
  void *v49;
  __int128 v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t v61;
  __int128 v62;
  unint64_t *v63;
  unint64_t v64;
  uint64_t v65;
  const void *v66;
  unint64_t *v67;
  unint64_t v68;
  size_t v69;
  void *v70;
  const void *v71;
  uint64_t v72;
  const void **v73;
  size_t v74;
  std::string *p_str;
  const void *v76;
  int64_t size;
  std::string *v78;
  std::string *v79;
  std::string *v80;
  std::string *v81;
  std::string::size_type v83;
  uint64_t v84;
  const void **v85;
  size_t v86;
  std::string *p_s;
  const void *v88;
  uint64_t v89;
  __int128 *v90;
  __int128 v91;
  uint64_t v92;
  __int128 *v93;
  __int128 v94;
  void *v95;
  BOOL v96;
  unint64_t *v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  size_t v101;
  _BYTE *v102;
  std::string *v103;
  char *v104;
  const std::string::value_type *v105;
  std::string::size_type v106;
  std::string *v107;
  std::string::size_type v108;
  char v109;
  Espresso::net *v110;
  uint64_t v111;
  char *v112;
  char *v113;
  __int128 v114;
  void *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t *v119;
  unint64_t v120;
  unint64_t *v121;
  unint64_t v122;
  void **v123;
  void **v124;
  uint64_t v125;
  unint64_t v126;
  int v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  char *v131;
  void *v132;
  uint64_t v133;
  uint64_t v134;
  BOOL v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  const void *v141;
  void **v142;
  uint64_t v143;
  unint64_t v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  __int128 v149;
  void *v150;
  __int128 v151;
  uint64_t v152;
  __int128 v153;
  uint64_t v154;
  unint64_t v155;
  unint64_t v156;
  char *v157;
  uint64_t v158;
  uint64_t *v159;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  uint64_t v163;
  void *v164;
  void *v165;
  unint64_t v166;
  char *v167;
  uint64_t v168;
  uint64_t *v169;
  void **v170;
  uint64_t v171;
  uint64_t v172;
  void **v173;
  void *v174;
  void *v175;
  char *v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  char *v183;
  uint64_t v184;
  void *v185;
  uint64_t v186;
  unint64_t v187;
  char *v188;
  uint64_t v189;
  uint64_t i5;
  _QWORD *v191;
  char *v192;
  _BYTE *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  unint64_t v198;
  char *v199;
  uint64_t v200;
  char *v201;
  uint64_t v202;
  uint64_t v203;
  char *v204;
  uint64_t *v205;
  uint64_t v206;
  uint64_t v207;
  void *v208;
  unint64_t v209;
  std::__shared_weak_count *v210;
  unint64_t *v211;
  unint64_t v212;
  void *v213;
  unint64_t *v214;
  unint64_t v215;
  uint64_t v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  size_t v225;
  std::string::size_type *v226;
  const void *v227;
  size_t v228;
  std::string *v229;
  const void *v230;
  void **v231;
  unint64_t *v232;
  unint64_t v233;
  uint64_t v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  size_t v241;
  std::string::size_type *v242;
  const void *v243;
  size_t v244;
  std::string *v245;
  const void *v246;
  void *v247;
  void *v248;
  unint64_t *v249;
  unint64_t v250;
  unsigned int (***v251)(_QWORD);
  uint64_t v252;
  const void **v253;
  size_t v254;
  _BYTE *v255;
  const void *v256;
  uint64_t v257;
  size_t v258;
  std::string *v259;
  const void *v260;
  void *v261;
  void *v262;
  unint64_t *v263;
  unint64_t v264;
  uint64_t v265;
  unint64_t v266;
  _QWORD *v267;
  uint64_t v268;
  const void **v269;
  size_t v270;
  _BYTE *v271;
  const void *v272;
  size_t v273;
  std::string *v274;
  const void *v275;
  std::__shared_weak_count *v276;
  unint64_t *v277;
  unint64_t v278;
  uint64_t k;
  std::__shared_weak_count *v280;
  unint64_t *v281;
  unint64_t v282;
  uint64_t j;
  size_t v284;
  std::string::size_type *v285;
  const void *v286;
  size_t v287;
  std::string *v288;
  const void *v289;
  size_t v290;
  std::string *v291;
  const void *v292;
  size_t v293;
  std::string::size_type *v294;
  const void *v295;
  std::__shared_weak_count *v296;
  unint64_t *v297;
  unint64_t v298;
  std::__shared_weak_count *v299;
  unint64_t *v300;
  unint64_t v301;
  std::string *v302;
  std::__shared_weak_count *v303;
  unint64_t *v304;
  unint64_t v305;
  std::__shared_weak_count *v306;
  unint64_t *v307;
  unint64_t v308;
  size_t v309;
  std::string *v310;
  const void *v311;
  void *v312;
  unint64_t *v313;
  unint64_t v314;
  std::__shared_weak_count *v315;
  unint64_t *v316;
  unint64_t v317;
  uint64_t m;
  void *v319;
  unint64_t *v320;
  unint64_t v321;
  std::__shared_weak_count *v322;
  unint64_t *v323;
  unint64_t v324;
  void *v325;
  std::__shared_weak_count *v326;
  unint64_t *v327;
  unint64_t v328;
  std::__shared_weak_count *v329;
  unint64_t *v330;
  unint64_t v331;
  std::__shared_weak_count *v332;
  unint64_t *v333;
  unint64_t v334;
  std::__shared_weak_count *v335;
  unint64_t *v336;
  unint64_t v337;
  int v338;
  std::__shared_weak_count *v339;
  unint64_t *v340;
  unint64_t v341;
  char *v342;
  uint64_t v343;
  std::string::size_type v344;
  std::string::size_type v345;
  std::string *v346;
  std::string *v347;
  size_t v348;
  std::string *v349;
  std::string *v350;
  std::string *v351;
  int v352;
  __int128 v353;
  uint64_t v354;
  uint64_t v355;
  unint64_t v356;
  uint64_t v357;
  std::string::size_type v358;
  std::string::size_type v359;
  unint64_t *v360;
  unint64_t v361;
  _QWORD *v362;
  __int128 *v363;
  __int128 *v364;
  unint64_t v365;
  int v366;
  __int128 v367;
  uint64_t v368;
  char v369;
  std::string::size_type v370;
  std::string::size_type v371;
  std::string *v372;
  std::string::size_type *v373;
  void *v374;
  uint64_t *v375;
  std::__shared_weak_count *v376;
  unint64_t *v377;
  unint64_t v378;
  std::string *v379;
  std::string::size_type *v380;
  BOOL v381;
  std::string::size_type v382;
  unint64_t *v383;
  unint64_t v384;
  std::string *v385;
  int v386;
  std::string *v387;
  __int128 v388;
  int64_t v389;
  std::string::size_type *v390;
  char *v391;
  int64_t v392;
  std::string::size_type *v393;
  std::string::size_type *v394;
  std::string *v395;
  std::string::size_type *v396;
  std::string::size_type v397;
  __int128 v398;
  uint64_t v399;
  unint64_t v400;
  char v401;
  _QWORD *v402;
  __int128 *v403;
  __int128 *v404;
  __int128 v405;
  std::string::size_type v406;
  std::string::size_type v407;
  uint64_t v408;
  int v409;
  unsigned __int8 *v410;
  std::string *v411;
  uint64_t v412;
  void *v413;
  std::string *v414;
  _OWORD *v415;
  __int128 v416;
  std::string *v417;
  uint64_t v418;
  _OWORD *v419;
  __int128 v420;
  std::string *v421;
  size_t v422;
  std::string *v423;
  std::string *v424;
  std::string *v425;
  int v426;
  std::string *v427;
  std::string::size_type v428;
  std::string *v429;
  std::string::size_type v430;
  char v431;
  std::string *v432;
  std::string *v433;
  size_t v434;
  __int128 *v435;
  std::string *v436;
  _QWORD *v437;
  _QWORD *v438;
  unint64_t *v439;
  unint64_t v440;
  std::string::size_type v441;
  int v442;
  std::__shared_weak_count *v443;
  unint64_t *v444;
  unint64_t v445;
  std::__shared_weak_count *v446;
  unint64_t *v447;
  unint64_t v448;
  std::__shared_weak_count *v449;
  unint64_t *v450;
  unint64_t v451;
  unint64_t *v452;
  unint64_t v453;
  std::__shared_weak_count *v454;
  unint64_t *v455;
  unint64_t v456;
  std::string::size_type *v457;
  std::string::size_type *v458;
  uint64_t v459;
  unint64_t *v460;
  unint64_t v461;
  std::__shared_weak_count *v462;
  unint64_t *v463;
  unint64_t v464;
  std::__shared_weak_count *v465;
  unint64_t *v466;
  unint64_t v467;
  uint64_t i4;
  _QWORD **v469;
  uint64_t v470;
  uint64_t **v471;
  uint64_t *v472;
  uint64_t *v473;
  uint64_t v474;
  _QWORD *v475;
  int v476;
  int v477;
  uint64_t **v478;
  unsigned int *v479;
  unsigned int *v480;
  int v481;
  _QWORD *v482;
  uint64_t v483;
  int v484;
  int v485;
  _QWORD *v486;
  _DWORD *v487;
  _QWORD *v488;
  unint64_t v489;
  uint64_t v490;
  unint64_t v491;
  uint64_t *v492;
  uint64_t v493;
  std::__shared_weak_count *v494;
  unint64_t *v495;
  unint64_t v496;
  int v497;
  uint64_t v498;
  unint64_t *v499;
  unint64_t v500;
  unint64_t *v501;
  unint64_t *v502;
  unint64_t v503;
  unint64_t *v504;
  unint64_t v505;
  uint64_t v506;
  uint64_t v507;
  void *v508;
  void *v509;
  unint64_t *v510;
  unint64_t v511;
  uint64_t v512;
  uint64_t v513;
  _QWORD *v514;
  uint64_t v515;
  std::__shared_weak_count *v516;
  unint64_t *v517;
  unint64_t v518;
  uint64_t ii;
  std::__shared_weak_count *v520;
  unint64_t *v521;
  unint64_t v522;
  uint64_t n;
  size_t v524;
  std::string *v525;
  const void *v526;
  size_t v527;
  std::string::size_type *v528;
  const void *v529;
  std::__shared_weak_count *v530;
  unint64_t *v531;
  unint64_t v532;
  std::__shared_weak_count *v533;
  unint64_t *v534;
  unint64_t v535;
  Espresso::net *v536;
  unint64_t v537;
  unint64_t v538;
  _QWORD *v539;
  uint64_t v540;
  uint64_t v541;
  size_t v542;
  std::string *v543;
  std::string *v544;
  size_t v545;
  std::string *v546;
  const void *v547;
  std::string *v548;
  unint64_t *v549;
  unint64_t v550;
  std::__shared_weak_count *v551;
  unint64_t *v552;
  unint64_t v553;
  uint64_t jj;
  void **v555;
  std::__shared_weak_count *v556;
  unint64_t *v557;
  unint64_t v558;
  void *v559;
  unint64_t *v560;
  unint64_t v561;
  std::__shared_weak_count *v562;
  unint64_t *v563;
  unint64_t v564;
  uint64_t kk;
  std::__shared_weak_count *v566;
  unint64_t *v567;
  unint64_t v568;
  std::__shared_weak_count *v569;
  unint64_t *v570;
  unint64_t v571;
  std::__shared_weak_count *end;
  unint64_t *p_size;
  unint64_t v574;
  std::__shared_weak_count *v575;
  unint64_t *v576;
  unint64_t v577;
  std::__shared_weak_count *v578;
  unint64_t *v579;
  unint64_t v580;
  uint64_t i2;
  uint64_t v582;
  unint64_t v583;
  _QWORD *v584;
  uint64_t v585;
  char **v586;
  char **v587;
  char *v588;
  __int128 v589;
  std::__shared_weak_count *v590;
  unint64_t *v591;
  unint64_t v592;
  void *v593;
  std::string *v594;
  int v595;
  __int128 v596;
  uint64_t v597;
  uint64_t v598;
  unint64_t v599;
  uint64_t v600;
  std::string::size_type v601;
  std::string::size_type v602;
  unint64_t *v603;
  unint64_t v604;
  _QWORD *v605;
  __int128 *v606;
  __int128 *v607;
  unint64_t v608;
  int v609;
  __int128 v610;
  uint64_t v611;
  char v612;
  std::string::size_type v613;
  uint64_t v614;
  unsigned __int8 *v615;
  std::string *v616;
  void *v617;
  uint64_t *v618;
  std::__shared_weak_count *v619;
  unint64_t *v620;
  unint64_t v621;
  std::string *v622;
  std::string::size_type *v623;
  BOOL v624;
  __int128 v625;
  unint64_t *v626;
  unint64_t v627;
  _BYTE *v628;
  int v629;
  std::string *v630;
  __int128 v631;
  int64_t v632;
  std::string *v633;
  std::string *v634;
  int64_t v635;
  std::string *v636;
  std::string *v637;
  std::string *v638;
  std::string *v639;
  std::string::size_type v640;
  __int128 v641;
  uint64_t v642;
  unint64_t v643;
  char v644;
  _QWORD *v645;
  __int128 *v646;
  __int128 *v647;
  __int128 v648;
  std::string::size_type v649;
  std::string::size_type v650;
  uint64_t v651;
  int v652;
  unsigned __int8 *v653;
  std::string *v654;
  uint64_t v655;
  void *v656;
  std::string *v657;
  _OWORD *v658;
  __int128 v659;
  std::string *v660;
  uint64_t v661;
  _OWORD *v662;
  __int128 v663;
  std::string *v664;
  size_t v665;
  std::string *v666;
  std::string *p_lpsrc;
  std::string *v668;
  int v669;
  std::string *v670;
  std::string::size_type v671;
  std::string *v672;
  std::string::size_type v673;
  char v674;
  _QWORD *v675;
  _BYTE *v676;
  size_t v677;
  std::string *v678;
  std::string *v679;
  _QWORD *v680;
  _QWORD *v681;
  unint64_t *v682;
  unint64_t v683;
  std::string::size_type v684;
  int v685;
  std::__shared_weak_count *v686;
  unint64_t *v687;
  unint64_t v688;
  std::__shared_weak_count *v689;
  unint64_t *v690;
  unint64_t v691;
  std::__shared_weak_count *v692;
  unint64_t *v693;
  unint64_t v694;
  unint64_t *v695;
  unint64_t v696;
  std::__shared_weak_count *v697;
  unint64_t *v698;
  unint64_t v699;
  std::string::size_type *v700;
  std::string::size_type *v701;
  uint64_t v702;
  unint64_t *v703;
  unint64_t v704;
  std::__shared_weak_count *v705;
  unint64_t *v706;
  unint64_t v707;
  std::__shared_weak_count *v708;
  unint64_t *v709;
  unint64_t v710;
  uint64_t mm;
  uint64_t v712;
  unint64_t v713;
  _QWORD *v714;
  uint64_t v715;
  char **v716;
  char **v717;
  char *v718;
  __int128 v719;
  unint64_t v720;
  char *v721;
  uint64_t v722;
  uint64_t *v723;
  uint64_t v724;
  uint64_t v725;
  char *v726;
  uint64_t v727;
  void *v728;
  std::string *v729;
  std::__shared_weak_count *v730;
  unint64_t *v731;
  unint64_t v732;
  uint64_t i3;
  std::string *v734;
  void **v735;
  void **v736;
  unint64_t *v737;
  unint64_t v738;
  uint64_t v739;
  _QWORD *v740;
  __int128 *v741;
  __int128 *v742;
  __int128 v743;
  size_t v744;
  std::string *v745;
  _BYTE *v746;
  std::vector<std::string>::pointer v747;
  __int128 v748;
  unint64_t v749;
  unint64_t v750;
  unint64_t v751;
  uint64_t v752;
  unint64_t v753;
  __int128 v754;
  std::string *v755;
  uint64_t v756;
  uint64_t v757;
  char *v758;
  char *v759;
  __int128 v760;
  __int128 v761;
  std::__shared_weak_count *v762;
  unint64_t *v763;
  unint64_t v764;
  std::__shared_weak_count *v765;
  unint64_t *v766;
  unint64_t v767;
  uint64_t nn;
  uint64_t v769;
  char *v770;
  char *v771;
  __int128 v772;
  __int128 v773;
  std::__shared_weak_count *v774;
  unint64_t *v775;
  unint64_t v776;
  void **v777;
  void **v778;
  unint64_t *v779;
  unint64_t v780;
  uint64_t v781;
  unint64_t v782;
  uint64_t v783;
  std::vector<std::string>::pointer v784;
  __int128 v785;
  std::__shared_weak_count *v786;
  unint64_t *v787;
  unint64_t v788;
  uint64_t i1;
  std::__shared_weak_count *v790;
  unint64_t *v791;
  unint64_t v792;
  std::string *v793;
  int v794;
  __int128 v795;
  uint64_t v796;
  uint64_t v797;
  unint64_t v798;
  uint64_t v799;
  std::string::size_type v800;
  std::string::size_type v801;
  unint64_t *v802;
  unint64_t v803;
  _QWORD *v804;
  __int128 *v805;
  __int128 *v806;
  unint64_t v807;
  int v808;
  __int128 v809;
  uint64_t v810;
  char v811;
  uint64_t v812;
  uint64_t v813;
  unsigned __int8 *v814;
  unsigned __int8 *v815;
  void *v816;
  uint64_t *v817;
  std::__shared_weak_count *v818;
  unint64_t *v819;
  unint64_t v820;
  std::string *v821;
  std::string::size_type *v822;
  BOOL v823;
  __int128 v824;
  unint64_t *v825;
  unint64_t v826;
  _BYTE *v827;
  int v828;
  std::string *v829;
  __int128 v830;
  int64_t v831;
  char *v832;
  char *v833;
  int64_t v834;
  char *v835;
  char *v836;
  std::string *v837;
  _BYTE *v838;
  std::string::size_type v839;
  __int128 v840;
  uint64_t v841;
  unint64_t v842;
  char v843;
  _QWORD *v844;
  __int128 *v845;
  __int128 *v846;
  __int128 v847;
  std::string::size_type v848;
  std::string::size_type v849;
  uint64_t v850;
  int v851;
  unsigned __int8 *v852;
  std::string *v853;
  uint64_t v854;
  void *v855;
  std::string *v856;
  _OWORD *v857;
  __int128 v858;
  std::string *v859;
  uint64_t v860;
  _OWORD *v861;
  __int128 v862;
  std::string *v863;
  size_t v864;
  std::string *v865;
  std::string *v866;
  std::string *v867;
  int v868;
  std::string *v869;
  std::string::size_type v870;
  std::string *v871;
  std::string::size_type v872;
  char v873;
  _QWORD *v874;
  _BYTE *v875;
  size_t v876;
  std::string *v877;
  std::string *v878;
  _QWORD *v879;
  _QWORD *v880;
  unint64_t *v881;
  unint64_t v882;
  std::string::size_type v883;
  int v884;
  std::__shared_weak_count *v885;
  unint64_t *v886;
  unint64_t v887;
  std::__shared_weak_count *v888;
  unint64_t *v889;
  unint64_t v890;
  std::__shared_weak_count *v891;
  unint64_t *v892;
  unint64_t v893;
  unint64_t *v894;
  unint64_t v895;
  std::__shared_weak_count *v896;
  unint64_t *v897;
  unint64_t v898;
  std::string::size_type *v899;
  std::string::size_type *v900;
  std::__shared_weak_count *v901;
  unint64_t *v902;
  unint64_t v903;
  std::__shared_weak_count *v904;
  unint64_t *v905;
  unint64_t v906;
  void **v907;
  void **v908;
  unint64_t *v909;
  unint64_t v910;
  uint64_t v911;
  _QWORD *v912;
  __int128 *v913;
  __int128 *v914;
  __int128 v915;
  size_t v916;
  std::string *v917;
  _BYTE *v918;
  std::vector<std::string>::pointer v919;
  __int128 v920;
  unint64_t v921;
  unint64_t v922;
  unint64_t v923;
  uint64_t v924;
  unint64_t v925;
  __int128 v926;
  std::string *v927;
  std::string *v928;
  void *v929;
  void *v930;
  unint64_t *v931;
  unint64_t v932;
  size_t v933;
  _BYTE *v934;
  const void *v935;
  uint64_t v936;
  std::string *v937;
  unsigned int v938;
  __int128 v939;
  uint64_t v940;
  uint64_t v941;
  unint64_t v942;
  uint64_t v943;
  std::string::size_type v944;
  std::string::size_type v945;
  unint64_t *v946;
  unint64_t v947;
  _QWORD *v948;
  __int128 *v949;
  __int128 *v950;
  unint64_t v951;
  int v952;
  __int128 v953;
  uint64_t v954;
  char v955;
  uint64_t v956;
  uint64_t v957;
  unsigned __int8 *v958;
  unsigned __int8 *v959;
  void *v960;
  uint64_t *v961;
  std::__shared_weak_count *v962;
  unint64_t *v963;
  unint64_t v964;
  std::string *v965;
  std::string::size_type *v966;
  BOOL v967;
  __int128 v968;
  unint64_t *v969;
  unint64_t v970;
  _BYTE *v971;
  int v972;
  std::string *v973;
  __int128 v974;
  int64_t v975;
  char *v976;
  char *v977;
  int64_t v978;
  char *v979;
  char *v980;
  std::string *v981;
  _BYTE *v982;
  std::string::size_type v983;
  __int128 v984;
  uint64_t v985;
  unint64_t v986;
  char v987;
  _QWORD *v988;
  __int128 *v989;
  __int128 *v990;
  __int128 v991;
  std::string::size_type v992;
  std::string::size_type v993;
  uint64_t v994;
  int v995;
  unsigned __int8 *v996;
  std::string *v997;
  uint64_t v998;
  void *v999;
  std::string *v1000;
  _OWORD *v1001;
  __int128 v1002;
  std::string *v1003;
  uint64_t v1004;
  _OWORD *v1005;
  __int128 v1006;
  std::string *v1007;
  size_t v1008;
  std::string *v1009;
  std::string *v1010;
  std::string *v1011;
  int v1012;
  std::string *v1013;
  std::string::size_type v1014;
  std::string *v1015;
  std::string::size_type v1016;
  char v1017;
  _QWORD *v1018;
  _BYTE *v1019;
  size_t v1020;
  std::string *v1021;
  std::string *v1022;
  _QWORD *v1023;
  _QWORD *v1024;
  unint64_t *v1025;
  unint64_t v1026;
  std::string::size_type v1027;
  int v1028;
  std::__shared_weak_count *v1029;
  unint64_t *v1030;
  unint64_t v1031;
  std::__shared_weak_count *v1032;
  unint64_t *v1033;
  unint64_t v1034;
  std::__shared_weak_count *v1035;
  unint64_t *v1036;
  unint64_t v1037;
  unint64_t *v1038;
  unint64_t v1039;
  std::__shared_weak_count *v1040;
  unint64_t *v1041;
  unint64_t v1042;
  std::string::size_type *v1043;
  std::string::size_type *v1044;
  std::__shared_weak_count *v1045;
  unint64_t *v1046;
  unint64_t v1047;
  uint64_t v1048;
  uint64_t v1049;
  __int128 *v1050;
  std::vector<std::string>::pointer v1051;
  __int128 v1052;
  std::string *v1053;
  uint64_t v1054;
  uint64_t v1055;
  int v1056;
  __int128 v1057;
  uint64_t v1058;
  uint64_t v1059;
  unint64_t v1060;
  uint64_t v1061;
  std::string::size_type v1062;
  std::string::size_type v1063;
  unint64_t *v1064;
  unint64_t v1065;
  _QWORD *v1066;
  __int128 *v1067;
  __int128 *v1068;
  unint64_t v1069;
  int v1070;
  __int128 v1071;
  uint64_t v1072;
  char v1073;
  uint64_t v1074;
  uint64_t v1075;
  unsigned __int8 *v1076;
  unsigned __int8 *v1077;
  void *v1078;
  uint64_t *v1079;
  std::__shared_weak_count *v1080;
  unint64_t *v1081;
  unint64_t v1082;
  uint64_t v1083;
  std::string::size_type *v1084;
  BOOL v1085;
  __int128 v1086;
  unint64_t *v1087;
  unint64_t v1088;
  _BYTE *v1089;
  int v1090;
  uint64_t v1091;
  __int128 v1092;
  int64_t v1093;
  char *v1094;
  char *v1095;
  int64_t v1096;
  char *v1097;
  char *v1098;
  std::string *v1099;
  _BYTE *v1100;
  std::string::size_type v1101;
  __int128 v1102;
  uint64_t v1103;
  unint64_t v1104;
  char v1105;
  _QWORD *v1106;
  __int128 *v1107;
  __int128 *v1108;
  __int128 v1109;
  std::string::size_type v1110;
  std::string::size_type v1111;
  uint64_t v1112;
  int v1113;
  unsigned __int8 *v1114;
  std::string *v1115;
  uint64_t v1116;
  void *v1117;
  uint64_t v1118;
  _OWORD *v1119;
  __int128 v1120;
  std::string *v1121;
  uint64_t v1122;
  _OWORD *v1123;
  __int128 v1124;
  std::string *v1125;
  size_t v1126;
  std::string *v1127;
  std::string *v1128;
  uint64_t v1129;
  int v1130;
  const std::string::value_type *v1131;
  std::string::size_type v1132;
  std::string *v1133;
  std::string::size_type v1134;
  char v1135;
  _QWORD *v1136;
  _BYTE *v1137;
  size_t v1138;
  std::string *v1139;
  std::string *v1140;
  _QWORD *v1141;
  _QWORD *v1142;
  unint64_t *v1143;
  unint64_t v1144;
  std::string::size_type v1145;
  int v1146;
  std::__shared_weak_count *v1147;
  unint64_t *v1148;
  unint64_t v1149;
  std::__shared_weak_count *v1150;
  unint64_t *v1151;
  unint64_t v1152;
  std::__shared_weak_count *v1153;
  unint64_t *v1154;
  unint64_t v1155;
  unint64_t *v1156;
  unint64_t v1157;
  std::__shared_weak_count *v1158;
  unint64_t *v1159;
  unint64_t v1160;
  std::string::size_type *v1161;
  std::string::size_type *v1162;
  std::__shared_weak_count *v1163;
  unint64_t *v1164;
  unint64_t v1165;
  std::__shared_weak_count *v1166;
  unint64_t *v1167;
  unint64_t v1168;
  void *v1169;
  void *v1170;
  unint64_t *v1171;
  unint64_t v1172;
  uint64_t v1173;
  size_t v1174;
  std::string::size_type *v1175;
  const void *v1176;
  std::__shared_weak_count *v1177;
  unint64_t *v1178;
  unint64_t v1179;
  std::__shared_weak_count *v1180;
  unint64_t *v1181;
  unint64_t v1182;
  std::__shared_weak_count *v1183;
  unint64_t *v1184;
  unint64_t v1185;
  void *v1186;
  void *v1187;
  unint64_t *v1188;
  unint64_t v1189;
  uint64_t v1190;
  size_t v1191;
  std::string *v1192;
  const void *v1193;
  std::__shared_weak_count *v1194;
  unint64_t *v1195;
  unint64_t v1196;
  void *v1197;
  unint64_t *v1198;
  unint64_t v1199;
  std::__shared_weak_count *v1200;
  unint64_t *v1201;
  unint64_t v1202;
  unint64_t *v1203;
  std::__shared_weak_count *v1204;
  unint64_t *v1205;
  unint64_t v1206;
  Espresso::net *v1207;
  std::__shared_weak_count *v1208;
  unint64_t *v1209;
  unint64_t v1210;
  unint64_t *v1211;
  unint64_t v1212;
  std::__shared_weak_count *v1213;
  unint64_t *v1214;
  unint64_t v1215;
  std::__shared_weak_count *v1216;
  unint64_t *v1217;
  unint64_t v1218;
  std::__shared_weak_count *v1219;
  unint64_t *v1220;
  unint64_t v1221;
  std::__shared_weak_count *v1222;
  unint64_t *v1223;
  unint64_t v1224;
  std::runtime_error *v1225;
  std::runtime_error *v1226;
  std::runtime_error *exception;
  std::runtime_error *v1228;
  std::runtime_error *v1229;
  _QWORD *v1230;
  std::__shared_weak_count *v1232;
  __int128 v1233;
  __int128 v1234;
  uint64_t v1235;
  int v1236;
  uint64_t v1237;
  uint64_t v1238;
  uint64_t v1239;
  uint64_t v1240;
  std::__shared_weak_count *v1241;
  std::__shared_weak_count *v1242;
  const void *v1243;
  uint64_t v1244;
  char *v1245;
  __int128 v1246;
  __int128 v1247;
  uint64_t v1248;
  __int128 v1249;
  std::string *v1250;
  std::__shared_weak_count *v1251;
  std::string *v1252;
  std::string *v1253;
  std::string *v1254;
  uint64_t v1255;
  std::string *v1256;
  std::string *v1257;
  std::string *v1258;
  std::string *v1259;
  std::string *v1260;
  std::string *v1261;
  __int128 v1262;
  uint64_t v1263[3];
  uint64_t v1264[3];
  uint64_t v1265[2];
  std::string *v1266;
  std::string *v1267;
  std::string *v1268;
  std::string *v1269;
  std::string *v1270;
  std::string *v1271;
  std::string *v1272;
  std::string *v1273;
  std::string *v1274;
  std::string *v1275;
  std::string *v1276;
  std::string *v1277;
  uint64_t v1278;
  uint64_t v1279;
  uint64_t v1280;
  std::string *v1281;
  std::string *v1282;
  std::string *v1283;
  uint64_t v1284;
  std::__shared_weak_count *v1285;
  std::string *v1286;
  std::__shared_weak_count *v1287;
  std::string *v1288;
  std::string *v1289;
  std::string *v1290;
  uint64_t v1291;
  uint64_t v1292;
  uint64_t v1293;
  uint64_t v1294;
  std::__shared_weak_count *v1295;
  std::string *v1296;
  std::__shared_weak_count *v1297;
  uint64_t v1298;
  uint64_t v1299;
  uint64_t v1300;
  std::string *v1301;
  std::string *v1302;
  std::string *v1303;
  uint64_t v1304;
  std::__shared_weak_count *v1305;
  std::vector<std::string> *v1306;
  std::__shared_weak_count *v1307;
  std::string *v1308;
  std::string *v1309;
  std::string *v1310;
  std::string *v1311;
  std::string *v1312;
  std::string *v1313;
  uint64_t v1314;
  std::__shared_weak_count *v1315;
  std::string *v1316;
  std::string *v1317;
  std::string *v1318;
  std::string *v1319;
  std::string *v1320;
  std::string *v1321;
  uint64_t v1322;
  std::__shared_weak_count *v1323;
  std::string *v1324;
  std::string *v1325;
  std::string *v1326;
  std::string *v1327;
  std::string *v1328;
  std::string *v1329;
  __int128 v1330;
  void *v1331;
  std::__shared_weak_count *v1332;
  std::string *v1333;
  std::string *v1334;
  std::string *v1335;
  std::string *v1336;
  std::string *v1337;
  std::string *v1338;
  uint64_t v1339;
  std::__shared_weak_count *v1340;
  std::string *v1341;
  std::string *v1342;
  std::string *v1343;
  std::string *v1344;
  std::string *v1345;
  std::string *v1346;
  uint64_t v1347;
  std::__shared_weak_count *v1348;
  std::string *v1349;
  std::string *v1350;
  std::string *v1351;
  std::string *v1352;
  std::string *v1353;
  std::string *v1354;
  uint64_t v1355;
  std::__shared_weak_count *v1356;
  void *v1357;
  std::__shared_weak_count *v1358;
  std::string *v1359;
  std::string *v1360;
  std::string *v1361;
  std::string *v1362;
  std::string *v1363;
  std::string *v1364;
  std::string *v1365;
  std::string *v1366;
  std::string *v1367;
  std::string *v1368;
  std::string *v1369;
  std::string *v1370;
  uint64_t v1371[3];
  std::string *v1372;
  std::string *v1373;
  std::string *v1374;
  std::string *v1375;
  std::string *v1376;
  std::string *v1377;
  std::string *v1378;
  std::string *v1379;
  std::string *v1380;
  uint64_t v1381;
  std::__shared_weak_count *v1382;
  std::string *v1383;
  std::string *v1384;
  std::string *v1385;
  std::string *v1386;
  std::string *v1387;
  std::string *v1388;
  uint64_t v1389;
  std::__shared_weak_count *v1390;
  void **v1391;
  std::__shared_weak_count *v1392;
  std::string *v1393;
  std::string *v1394;
  std::string *v1395;
  std::string *v1396;
  std::string *v1397;
  std::string *v1398;
  uint64_t v1399;
  uint64_t v1400;
  uint64_t v1401;
  std::string *v1402;
  std::string *v1403;
  std::string *v1404;
  uint64_t v1405[3];
  std::string *v1406;
  std::string *v1407;
  std::string *v1408;
  uint64_t v1409[3];
  std::string *v1410;
  std::string *v1411;
  std::string *v1412;
  std::string *v1413;
  std::string *v1414;
  std::string *v1415;
  std::string *v1416;
  std::string *v1417;
  std::string *v1418;
  uint64_t v1419;
  std::__shared_weak_count *v1420;
  std::string *v1421;
  std::string *v1422;
  std::string *v1423;
  std::string *v1424;
  std::string *v1425;
  std::string *v1426;
  uint64_t v1427;
  std::__shared_weak_count *v1428;
  uint64_t v1429;
  std::__shared_weak_count *v1430;
  std::string v1431;
  std::string v1432;
  std::string v1433;
  std::string __s;
  std::string __str;
  void *v1436;
  size_t v1437;
  unsigned __int8 v1438;
  int v1439;
  uint64_t v1440;
  std::__shared_weak_count *v1441;
  uint64_t *v1442;
  _QWORD *v1443[2];
  void *__p;
  char *v1445;
  uint64_t v1446;
  char **v1447;
  char *v1448[2];
  uint64_t *v1449;
  _QWORD *v1450[2];
  _QWORD *v1451;
  void *v1452;
  uint64_t v1453;
  uint64_t v1454[2];
  uint64_t v1455[2];
  Espresso::net *v1456;
  std::__shared_weak_count *v1457;
  __int128 v1458;
  __int128 v1459;
  uint64_t v1460;
  __int128 v1461;
  void *v1462[2];
  char v1463;
  uint64_t v1464;
  std::__shared_weak_count *v1465;
  uint64_t v1466;
  std::__shared_weak_count *v1467;
  __int128 v1468;
  int v1469;
  __int128 v1470;
  __int128 v1471;
  unint64_t v1472;
  uint64_t v1473;
  char v1474;
  unsigned int v1475;
  std::string *v1476;
  std::string v1477;
  std::vector<std::string> v1478;
  void *v1479;
  std::string::size_type v1480;
  std::string lpsrc;
  std::string v1482;
  uint64_t v1483;
  std::string v1484;
  uint64_t v1485;
  std::string v1486;
  uint64_t v1487;
  _BYTE v1488[40];
  __int128 v1489;
  int v1490;
  uint64_t v1491;
  uint64_t v1492;
  _BYTE v1493[64];
  __int128 v1494;
  __int128 v1495;
  __int128 v1496;
  __int128 v1497;
  __int128 v1498;
  __int128 v1499;
  uint64_t v1500;
  __int128 v1501;
  uint64_t v1502;
  std::string::size_type __n[2];
  __int128 v1504;
  std::string v1505;
  uint64_t v1506;
  std::string v1507;
  uint64_t v1508;
  std::string v1509[2];
  std::string v1510;
  uint64_t v1511;
  std::string v1512;
  uint64_t v1513;
  std::string v1514;
  __int128 v1515;

  *(_QWORD *)&v1515 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)&v1493[8] = 0uLL;
  *(_QWORD *)v1493 = &v1493[8];
  *(_QWORD *)&v1493[40] = 0;
  *(_QWORD *)&v1493[32] = 0;
  *(_QWORD *)&v1493[24] = &v1493[32];
  v3 = *(__int128 **)(*(_QWORD *)this + 152);
  if (v3)
  {
    do
    {
      std::pair<std::string const,std::shared_ptr<Espresso::blob<float,4>>>::pair[abi:ne180100]((std::string *)v1488, v3 + 1);
      Espresso::abstract_blob_container::shape((char *)&v1458, *(uint64_t *)&v1488[24]);
      __p = v1488;
      v4 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v1493, v1488, (__int128 **)&__p);
      v5 = v1459;
      *(_OWORD *)(v4 + 56) = v1458;
      *(_OWORD *)(v4 + 72) = v5;
      *((_QWORD *)v4 + 11) = v1460;
      v6 = (void *)*((_QWORD *)v4 + 12);
      if (v6)
      {
        *((_QWORD *)v4 + 13) = v6;
        operator delete(v6);
        *((_QWORD *)v4 + 12) = 0;
        *((_QWORD *)v4 + 13) = 0;
        *((_QWORD *)v4 + 14) = 0;
      }
      *((_OWORD *)v4 + 6) = v1461;
      *((void **)v4 + 14) = v1462[0];
      Espresso::abstract_blob_container::shape((char *)&v1458, *(uint64_t *)&v1488[24]);
      if (v1488[23] >= 0)
        v7 = v1488[23];
      else
        v7 = *(_QWORD *)&v1488[8];
      std::string::basic_string[abi:ne180100]((uint64_t)&__p, v7 + 5);
      if (v1446 >= 0)
        p_p = &__p;
      else
        p_p = __p;
      if (v7)
      {
        if (v1488[23] >= 0)
          v9 = v1488;
        else
          v9 = *(_BYTE **)v1488;
        memmove(p_p, v9, v7);
      }
      strcpy((char *)p_p + v7, "_diff");
      v1509[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
      v10 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v1493, &__p, v1509);
      v11 = (void *)*((_QWORD *)v10 + 12);
      v12 = v1459;
      *(_OWORD *)((char *)v10 + 56) = v1458;
      *(_OWORD *)((char *)v10 + 72) = v12;
      *((_QWORD *)v10 + 11) = v1460;
      if (v11)
      {
        *((_QWORD *)v10 + 13) = v11;
        operator delete(v11);
        *((_QWORD *)v10 + 12) = 0;
        *((_QWORD *)v10 + 13) = 0;
        *((_QWORD *)v10 + 14) = 0;
      }
      v10[6] = v1461;
      *((void **)v10 + 14) = v1462[0];
      v1462[0] = 0;
      v1461 = 0uLL;
      if (SHIBYTE(v1446) < 0)
      {
        operator delete(__p);
        if ((_QWORD)v1461)
        {
          *((_QWORD *)&v1461 + 1) = v1461;
          operator delete((void *)v1461);
        }
      }
      v13 = *(std::__shared_weak_count **)&v1488[32];
      if (*(_QWORD *)&v1488[32])
      {
        v14 = (unint64_t *)(*(_QWORD *)&v1488[32] + 8);
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      if ((v1488[23] & 0x80000000) != 0)
        operator delete(*(void **)v1488);
      v3 = *(__int128 **)v3;
    }
    while (v3);
    v16 = *(char **)&v1493[32];
  }
  else
  {
    v16 = 0;
  }
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v1493[24], v16);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)v1493, *(char **)&v1493[8]);
  std::allocate_shared[abi:ne180100]<Espresso::network_optimization_graph,std::allocator<Espresso::network_optimization_graph>,std::shared_ptr<Espresso::net> &,void>(&v1458, *(Espresso::net **)this, *((std::__shared_weak_count **)this + 1));
  v1245 = (char *)this + 24;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)this + 24, &v1458);
  v17 = (std::__shared_weak_count *)*((_QWORD *)&v1458 + 1);
  if (*((_QWORD *)&v1458 + 1))
  {
    v18 = (unint64_t *)(*((_QWORD *)&v1458 + 1) + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = *(Espresso::net **)this;
  v21 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  v1456 = *(Espresso::net **)this;
  v1457 = v21;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldxr(p_shared_owners);
    while (__stxr(v23 + 1, p_shared_owners));
    v20 = *(Espresso::net **)this;
  }
  v24 = (std::__shared_weak_count *)*((_QWORD *)v20 + 3);
  v1455[0] = *((_QWORD *)v20 + 2);
  v1455[1] = (uint64_t)v24;
  if (v24)
  {
    v25 = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
    v20 = *(Espresso::net **)this;
  }
  v27 = *(_DWORD *)(**((_QWORD **)v20 + 4) + 12);
  v1454[0] = 0;
  v1454[1] = 0;
  Espresso::sequential_builder::sequential_builder((uint64_t)&v1458, (uint64_t *)&v1456, v1455, v27, v1454);
  if (v24)
  {
    v28 = (unint64_t *)&v24->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v30 = v1457;
  if (v1457)
  {
    v31 = (unint64_t *)&v1457->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v33 = *(Espresso::net **)this;
  v34 = *(_QWORD *)(*(_QWORD *)this + 40) - *(_QWORD *)(*(_QWORD *)this + 32);
  v1451 = &v1451;
  v1452 = &v1451;
  v1453 = 0;
  v1450[1] = 0;
  v1450[0] = 0;
  v1449 = (uint64_t *)v1450;
  *(_DWORD *)v1488 = 0;
  if ((int)(v34 >> 4) >= 1)
  {
    v35 = 0;
    v36 = 0;
    v37 = (v34 >> 4);
    do
    {
      v38 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*(_QWORD *)v1245 + 16), v36, v1488);
      if (v38[6] == v38[5])
      {
        v39 = operator new(0x18uLL);
        v39[4] = v36;
        v40 = v1451;
        *(_QWORD *)v39 = v1451;
        *((_QWORD *)v39 + 1) = &v1451;
        v40[1] = v39;
        v1451 = v39;
        ++v1453;
        *(_QWORD *)v1493 = v35 | v36;
        *((_BYTE *)std::__tree<std::__value_type<std::pair<int,int>,BOOL>,std::__map_value_compare<std::pair<int,int>,std::__value_type<std::pair<int,int>,BOOL>,std::less<std::pair<int,int>>,true>,std::allocator<std::__value_type<std::pair<int,int>,BOOL>>>::__emplace_unique_key_args<std::pair<int,int>,std::piecewise_construct_t const&,std::tuple<std::pair<int,int>&&>,std::tuple<>>(&v1449, v36, v36, v1493)+ 36) = 1;
      }
      *(_DWORD *)v1488 = ++v36;
      v35 += 0x100000000;
    }
    while (v37 != v36);
    v33 = *(Espresso::net **)this;
  }
  v1445 = 0;
  __p = &v1445;
  v1448[1] = 0;
  v1448[0] = 0;
  v1446 = 0;
  v1447 = v1448;
  for (i = (__int128 *)*((_QWORD *)v33 + 19); i; i = *(__int128 **)i)
  {
    std::pair<std::string const,std::shared_ptr<Espresso::blob<float,4>>>::pair[abi:ne180100]((std::string *)v1488, i + 1);
    Espresso::abstract_blob_container::shape(v1493, *(uint64_t *)&v1488[24]);
    v1509[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v1488;
    v42 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&__p, v1488, (__int128 **)v1509);
    v43 = *(_OWORD *)&v1493[16];
    *(_OWORD *)(v42 + 56) = *(_OWORD *)v1493;
    *(_OWORD *)(v42 + 72) = v43;
    *((_QWORD *)v42 + 11) = *(_QWORD *)&v1493[32];
    v44 = (void *)*((_QWORD *)v42 + 12);
    if (v44)
    {
      *((_QWORD *)v42 + 13) = v44;
      operator delete(v44);
      *((_QWORD *)v42 + 12) = 0;
      *((_QWORD *)v42 + 13) = 0;
      *((_QWORD *)v42 + 14) = 0;
    }
    *((_OWORD *)v42 + 6) = *(_OWORD *)&v1493[40];
    *((_QWORD *)v42 + 14) = *(_QWORD *)&v1493[56];
    Espresso::abstract_blob_container::shape(v1493, *(uint64_t *)&v1488[24]);
    if (v1488[23] >= 0)
      v45 = v1488[23];
    else
      v45 = *(_QWORD *)&v1488[8];
    std::string::basic_string[abi:ne180100]((uint64_t)v1509, v45 + 5);
    if ((v1509[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v46 = v1509;
    else
      v46 = (std::string *)v1509[0].__r_.__value_.__r.__words[0];
    if (v45)
    {
      if (v1488[23] >= 0)
        v47 = v1488;
      else
        v47 = *(_BYTE **)v1488;
      memmove(v46, v47, v45);
    }
    strcpy((char *)v46 + v45, "_diff");
    __n[0] = (std::string::size_type)v1509;
    v48 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&__p, v1509, (_OWORD **)__n);
    v49 = (void *)*((_QWORD *)v48 + 12);
    v50 = *(_OWORD *)&v1493[16];
    *(_OWORD *)((char *)v48 + 56) = *(_OWORD *)v1493;
    *(_OWORD *)((char *)v48 + 72) = v50;
    *((_QWORD *)v48 + 11) = *(_QWORD *)&v1493[32];
    if (v49)
    {
      *((_QWORD *)v48 + 13) = v49;
      operator delete(v49);
      *((_QWORD *)v48 + 12) = 0;
      *((_QWORD *)v48 + 13) = 0;
      *((_QWORD *)v48 + 14) = 0;
    }
    v48[6] = *(_OWORD *)&v1493[40];
    *((_QWORD *)v48 + 14) = *(_QWORD *)&v1493[56];
    memset(&v1493[40], 0, 24);
    if (SHIBYTE(v1509[0].__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v1509[0].__r_.__value_.__l.__data_);
      if (*(_QWORD *)&v1493[40])
      {
        *(_QWORD *)&v1493[48] = *(_QWORD *)&v1493[40];
        operator delete(*(void **)&v1493[40]);
      }
    }
    v51 = *(std::__shared_weak_count **)&v1488[32];
    if (*(_QWORD *)&v1488[32])
    {
      v52 = (unint64_t *)(*(_QWORD *)&v1488[32] + 8);
      do
        v53 = __ldaxr(v52);
      while (__stlxr(v53 - 1, v52));
      if (!v53)
      {
        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
        std::__shared_weak_count::__release_weak(v51);
      }
    }
    if ((v1488[23] & 0x80000000) != 0)
      operator delete(*(void **)v1488);
  }
  v1443[1] = 0;
  v1443[0] = 0;
  v1442 = (uint64_t *)v1443;
  v54 = (std::__shared_weak_count *)*((_QWORD *)&v1468 + 1);
  if (*((_QWORD *)&v1468 + 1))
  {
    v55 = (unint64_t *)(*((_QWORD *)&v1468 + 1) + 8);
    do
      v56 = __ldxr(v55);
    while (__stxr(v56 + 1, v55));
  }
  *(_DWORD *)v1493 = 0;
  v1232 = v54;
  Espresso::create_context((int *)v1493, &v1440);
  if (v1453)
  {
    __asm { FMOV            V9.2S, #1.0 }
    while (1)
    {
      v1439 = *((_DWORD *)v1452 + 4);
      v61 = v1439;
      v62 = *(_OWORD *)(*(_QWORD *)(*(_QWORD *)this + 32) + 16 * v1439);
      v1241 = *(std::__shared_weak_count **)(*(_QWORD *)(*(_QWORD *)this + 32) + 16 * v1439 + 8);
      if (v1241)
      {
        v63 = (unint64_t *)&v1241->__shared_owners_;
        do
          v64 = __ldxr(v63);
        while (__stxr(v64 + 1, v63));
      }
      v65 = v62;
      v66 = *(const void **)(v62 + 64);
      v1242 = *(std::__shared_weak_count **)(v62 + 72);
      if (v1242)
      {
        v67 = (unint64_t *)&v1242->__shared_owners_;
        do
          v68 = __ldxr(v67);
        while (__stxr(v68 + 1, v67));
      }
      if (*(char *)(v62 + 39) >= 0)
        v69 = *(unsigned __int8 *)(v62 + 39);
      else
        v69 = *(_QWORD *)(v62 + 24);
      std::string::basic_string[abi:ne180100]((uint64_t)&v1436, v69 + 5);
      if ((v1438 & 0x80u) == 0)
        v70 = &v1436;
      else
        v70 = v1436;
      if (v69)
      {
        if (*(char *)(v65 + 39) >= 0)
          v71 = (const void *)(v65 + 16);
        else
          v71 = *(const void **)(v65 + 16);
        memmove(v70, v71, v69);
      }
      strcpy((char *)v70 + v69, "_diff");
      v72 = *(_QWORD *)this + 56;
      *(_QWORD *)v1493 = v61;
      v73 = (const void **)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v72, v61, v1493)[3];
      if (*((char *)v73 + 23) >= 0)
        v74 = *((unsigned __int8 *)v73 + 23);
      else
        v74 = (size_t)v73[1];
      std::string::basic_string[abi:ne180100]((uint64_t)&__str, v74 + 5);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_str = &__str;
      else
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      if (v74)
      {
        if (*((char *)v73 + 23) >= 0)
          v76 = v73;
        else
          v76 = *v73;
        memmove(p_str, v76, v74);
      }
      strcpy((char *)p_str + v74, "_diff");
      size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      {
        v78 = &__str;
      }
      else
      {
        size = __str.__r_.__value_.__l.__size_;
        v78 = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      if (size >= 10)
      {
        v79 = (std::string *)((char *)v78 + size);
        v80 = v78;
        do
        {
          v81 = (std::string *)memchr(v80, 95, size - 9);
          if (!v81)
            break;
          _ZF = v81->__r_.__value_.__r.__words[0] == 0x70635F78745F5F5FLL
             && LOWORD(v81->__r_.__value_.__r.__words[1]) == 24437;
          if (_ZF)
          {
            if (v81 != v79 && v81 == v78)
            {
              std::string::basic_string[abi:ne180100]<0>(v1488, "___tx_cpu_");
              if (v1488[23] >= 0)
                v83 = v1488[23];
              else
                v83 = *(_QWORD *)&v1488[8];
              std::string::basic_string((std::string *)v1493, &__str, v83, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)v1509);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__str.__r_.__value_.__l.__data_);
              __str = *(std::string *)v1493;
              v1493[23] = 0;
              v1493[0] = 0;
              if ((v1488[23] & 0x80000000) != 0)
                operator delete(*(void **)v1488);
            }
            break;
          }
          v80 = (std::string *)((char *)&v81->__r_.__value_.__l.__data_ + 1);
          size = (char *)v79 - (char *)v80;
        }
        while ((char *)v79 - (char *)v80 >= 10);
      }
      v84 = *(_QWORD *)this + 96;
      *(_QWORD *)v1493 = v61;
      v85 = (const void **)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v84, v61, v1493)[3];
      if (*((char *)v85 + 23) >= 0)
        v86 = *((unsigned __int8 *)v85 + 23);
      else
        v86 = (size_t)v85[1];
      std::string::basic_string[abi:ne180100]((uint64_t)&__s, v86 + 5);
      if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_s = &__s;
      else
        p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
      if (v86)
      {
        if (*((char *)v85 + 23) >= 0)
          v88 = v85;
        else
          v88 = *v85;
        memmove(p_s, v88, v86);
      }
      strcpy((char *)p_s + v86, "_diff");
      v89 = *(_QWORD *)this + 56;
      *(_QWORD *)v1493 = v61;
      v90 = (__int128 *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v89, v61, v1493)[3];
      if (*((char *)v90 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v1433, *(const std::string::value_type **)v90, *((_QWORD *)v90 + 1));
      }
      else
      {
        v91 = *v90;
        v1433.__r_.__value_.__r.__words[2] = *((_QWORD *)v90 + 2);
        *(_OWORD *)&v1433.__r_.__value_.__l.__data_ = v91;
      }
      v92 = *(_QWORD *)this + 96;
      *(_QWORD *)v1493 = v61;
      v93 = (__int128 *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v92, v61, v1493)[3];
      if (*((char *)v93 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v1432, *(const std::string::value_type **)v93, *((_QWORD *)v93 + 1));
      }
      else
      {
        v94 = *v93;
        v1432.__r_.__value_.__r.__words[2] = *((_QWORD *)v93 + 2);
        *(_OWORD *)&v1432.__r_.__value_.__l.__data_ = v94;
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v1431, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
      else
        v1431 = __str;
      if (v66)
      {
        v96 = v95 != 0;
        if (v95 && v1242)
        {
          v97 = (unint64_t *)&v1242->__shared_owners_;
          do
            v98 = __ldxr(v97);
          while (__stxr(v98 + 1, v97));
          do
            v99 = __ldaxr(v97);
          while (__stlxr(v99 - 1, v97));
          if (!v99)
          {
            ((void (*)(std::__shared_weak_count *))v1242->__on_zero_shared)(v1242);
            std::__shared_weak_count::__release_weak(v1242);
          }
          v96 = 1;
        }
      }
      else
      {
        v96 = 0;
      }
      v100 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(v1443[0], &__str);
      if (!v96 && v100)
      {
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v101 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        else
          v101 = __str.__r_.__value_.__l.__size_;
        std::string::basic_string[abi:ne180100]((uint64_t)v1493, v101 + 1);
        if (v1493[23] >= 0)
          v102 = v1493;
        else
          v102 = *(_BYTE **)v1493;
        if (v101)
        {
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v103 = &__str;
          else
            v103 = (std::string *)__str.__r_.__value_.__r.__words[0];
          memmove(v102, v103, v101);
        }
        *(_WORD *)&v102[v101] = 64;
        __n[0] = (std::string::size_type)&__str;
        v104 = std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v1442, &__str, (__int128 **)__n);
        std::to_string((std::string *)v1488, *((_DWORD *)v104 + 14) + 1);
        if (v1488[23] >= 0)
          v105 = v1488;
        else
          v105 = *(const std::string::value_type **)v1488;
        if (v1488[23] >= 0)
          v106 = v1488[23];
        else
          v106 = *(_QWORD *)&v1488[8];
        v107 = std::string::append((std::string *)v1493, v105, v106);
        v108 = v107->__r_.__value_.__r.__words[0];
        v1509[0].__r_.__value_.__r.__words[0] = v107->__r_.__value_.__l.__size_;
        *(std::string::size_type *)((char *)v1509[0].__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v107->__r_.__value_.__r.__words[1] + 7);
        v109 = HIBYTE(v107->__r_.__value_.__r.__words[2]);
        v107->__r_.__value_.__l.__size_ = 0;
        v107->__r_.__value_.__r.__words[2] = 0;
        v107->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        __str.__r_.__value_.__r.__words[0] = v108;
        __str.__r_.__value_.__l.__size_ = v1509[0].__r_.__value_.__r.__words[0];
        *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v1509[0].__r_.__value_.__r.__words + 7);
        *((_BYTE *)&__str.__r_.__value_.__s + 23) = v109;
        if ((v1488[23] & 0x80000000) != 0)
          operator delete(*(void **)v1488);
        if ((v1493[23] & 0x80000000) != 0)
          operator delete(*(void **)v1493);
        v110 = *(Espresso::net **)this;
        v111 = *(_QWORD *)this + 56;
        v1509[0].__r_.__value_.__r.__words[0] = v1439;
        *(_QWORD *)v1488 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v111, v1439, v1509)[3];
        v112 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v110 + 136, *(unsigned __int8 **)v1488, (__int128 **)v1488);
        Espresso::abstract_blob_container::shape(v1493, *((_QWORD *)v112 + 5));
        *(_QWORD *)v1488 = &__str;
        v113 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&__p, &__str, (__int128 **)v1488);
        v114 = *(_OWORD *)&v1493[16];
        *(_OWORD *)(v113 + 56) = *(_OWORD *)v1493;
        *(_OWORD *)(v113 + 72) = v114;
        *((_QWORD *)v113 + 11) = *(_QWORD *)&v1493[32];
        v115 = (void *)*((_QWORD *)v113 + 12);
        if (v115)
        {
          *((_QWORD *)v113 + 13) = v115;
          operator delete(v115);
          *((_QWORD *)v113 + 12) = 0;
          *((_QWORD *)v113 + 13) = 0;
          *((_QWORD *)v113 + 14) = 0;
        }
        *((_OWORD *)v113 + 6) = *(_OWORD *)&v1493[40];
        *((_QWORD *)v113 + 14) = *(_QWORD *)&v1493[56];
      }
      v116 = *(_QWORD *)(v65 + 64);
      v118 = *(_QWORD *)(v116 + 8);
      v117 = *(_QWORD *)(v116 + 16);
      v1429 = v118;
      v1430 = (std::__shared_weak_count *)v117;
      if (v117)
      {
        v119 = (unint64_t *)(v117 + 8);
        do
          v120 = __ldxr(v119);
        while (__stxr(v120 + 1, v119));
      }
      v1243 = v66;
      v1236 = *(_DWORD *)(v65 + 12);
      *(_OWORD *)v1493 = v1468;
      if (*((_QWORD *)&v1468 + 1))
      {
        v121 = (unint64_t *)(*((_QWORD *)&v1468 + 1) + 8);
        do
          v122 = __ldxr(v121);
        while (__stxr(v122 + 1, v121));
      }
      v123 = (void **)v1471;
      v124 = (void **)*((_QWORD *)&v1470 + 1);
      v125 = v1471 - *((_QWORD *)&v1470 + 1);
      v126 = (uint64_t)(v1471 - *((_QWORD *)&v1470 + 1)) >> 3;
      v127 = v1469;
      *(_DWORD *)&v1493[16] = v1469;
      v128 = (_QWORD)v1471 == *((_QWORD *)&v1470 + 1) ? 0 : 170 * v126 - 1;
      v129 = v1473;
      v130 = v1473 + v1472;
      if (v128 == v1473 + v1472)
        break;
      v141 = v66;
LABEL_289:
      v209 = (unint64_t)v124[v130 / 0xAA] + 24 * (v130 % 0xAA);
      *(_OWORD *)v209 = *(_OWORD *)v1493;
      *(_OWORD *)v1493 = 0uLL;
      *(_DWORD *)(v209 + 16) = v127;
      v1473 = v129 + 1;
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v1468, v1429, (uint64_t)v1430);
      v1469 = v1236;
      v210 = v1430;
      if (v1430)
      {
        v211 = (unint64_t *)&v1430->__shared_owners_;
        do
          v212 = __ldaxr(v211);
        while (__stlxr(v212 - 1, v211));
        if (!v212)
        {
          ((void (*)(std::__shared_weak_count *))v210->__on_zero_shared)(v210);
          std::__shared_weak_count::__release_weak(v210);
        }
      }
      if (!v141)
      {
        v1480 = 0;
        v1479 = 0;
        v1392 = 0;
        v1391 = 0;
        v1358 = 0;
        v1357 = 0;
        v1332 = 0;
        v1331 = 0;
        *(_OWORD *)&v1482.__r_.__value_.__l.__data_ = 0uLL;
        v1307 = 0;
        v1306 = 0;
        v1297 = 0;
        v1296 = 0;
        v1287 = 0;
        v1286 = 0;
        *(_OWORD *)&v1512.__r_.__value_.__l.__data_ = 0uLL;
        *(_OWORD *)&v1514.__r_.__value_.__l.__data_ = 0uLL;
        __n[1] = 0;
        __n[0] = 0;
LABEL_2518:
        *(_OWORD *)v1493 = 0uLL;
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "not implemented");
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      if (v213)
      {
        v1479 = v213;
        v1480 = (std::string::size_type)v1242;
        if (v1242)
        {
          v214 = (unint64_t *)&v1242->__shared_owners_;
          do
            v215 = __ldxr(v214);
          while (__stxr(v215 + 1, v214));
        }
        v216 = (*(uint64_t (**)(void *))(*(_QWORD *)v213 + 384))(v213);
        v217 = *(_OWORD *)v216;
        v218 = *(_OWORD *)(v216 + 16);
        *(_OWORD *)&v1493[32] = *(_OWORD *)(v216 + 32);
        *(_OWORD *)&v1493[16] = v218;
        *(_OWORD *)v1493 = v217;
        v219 = *(_OWORD *)(v216 + 48);
        v220 = *(_OWORD *)(v216 + 64);
        v221 = *(_OWORD *)(v216 + 80);
        v1496 = *(_OWORD *)(v216 + 96);
        v1495 = v221;
        v1494 = v220;
        *(_OWORD *)&v1493[48] = v219;
        v222 = *(_OWORD *)(v216 + 112);
        v223 = *(_OWORD *)(v216 + 128);
        v224 = *(_OWORD *)(v216 + 144);
        v1500 = *(_QWORD *)(v216 + 160);
        v1499 = v224;
        v1498 = v223;
        v1497 = v222;
        if (*(_QWORD *)&v1493[24])
        {
          LODWORD(v1509[0].__r_.__value_.__l.__data_) = 0;
          *(std::string::size_type *)((char *)v1509[0].__r_.__value_.__r.__words + 4) = _D9;
          *(_OWORD *)((char *)&v1509[0].__r_.__value_.__r.__words[2] + 4) = 0uLL;
          *(std::string::size_type *)((char *)&v1509[0].__r_.__value_.__r.__words[1] + 4) = 0;
          if (!*(_DWORD *)&v1493[24])
            LODWORD(v1509[0].__r_.__value_.__l.__data_) = *(_DWORD *)&v1493[28] != 0;
          if ((v1438 & 0x80u) == 0)
            v225 = v1438;
          else
            v225 = v1437;
          std::string::basic_string[abi:ne180100]((uint64_t)__n, v225 + 12);
          if ((SBYTE7(v1504) & 0x80u) == 0)
            v226 = __n;
          else
            v226 = (std::string::size_type *)__n[0];
          if (v225)
          {
            if ((v1438 & 0x80u) == 0)
              v227 = &v1436;
            else
              v227 = v1436;
            memmove(v226, v227, v225);
          }
          strcpy((char *)v226 + v225, "_nonlin_diff");
          if (LODWORD(v1509[0].__r_.__value_.__l.__data_) == 1)
          {
            std::string::basic_string[abi:ne180100]<0>(&v1514, "activation_grad");
            if ((v1438 & 0x80u) == 0)
              v258 = v1438;
            else
              v258 = v1437;
            std::string::basic_string[abi:ne180100]((uint64_t)&v1512, v258 + 7);
            if ((v1512.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v259 = &v1512;
            else
              v259 = (std::string *)v1512.__r_.__value_.__r.__words[0];
            if (v258)
            {
              if ((v1438 & 0x80u) == 0)
                v260 = &v1436;
              else
                v260 = v1436;
              memmove(v259, v260, v258);
            }
            strcpy((char *)v259 + v258, "_nonlin");
            if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external((std::string *)v1488, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
            else
              *(std::string *)v1488 = __s;
            if (SHIBYTE(v1432.__r_.__value_.__r.__words[2]) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)&v1488[24], v1432.__r_.__value_.__l.__data_, v1432.__r_.__value_.__l.__size_);
            }
            else
            {
              *(_OWORD *)&v1488[24] = *(_OWORD *)&v1432.__r_.__value_.__l.__data_;
              *(_QWORD *)&v1489 = *((_QWORD *)&v1432.__r_.__value_.__l + 2);
            }
            v1417 = 0;
            v1416 = 0;
            v1418 = 0;
            v1510.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1416;
            v1510.__r_.__value_.__s.__data_[8] = 0;
            v1416 = (std::string *)operator new(0x30uLL);
            v1417 = v1416;
            v1418 = v1416 + 2;
            v1417 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v1418, (__int128 *)v1488, (__int128 *)((char *)&v1489 + 8), v1416);
            if (SBYTE7(v1504) < 0)
            {
              std::string::__init_copy_ctor_external(&v1510, (const std::string::value_type *)__n[0], __n[1]);
            }
            else
            {
              *(_OWORD *)&v1510.__r_.__value_.__l.__data_ = *(_OWORD *)__n;
              v1510.__r_.__value_.__r.__words[2] = v1504;
            }
            v1414 = 0;
            v1413 = 0;
            v1415 = 0;
            lpsrc.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1413;
            lpsrc.__r_.__value_.__s.__data_[8] = 0;
            v1413 = (std::string *)operator new(0x18uLL);
            v1414 = v1413;
            v1415 = v1413 + 1;
            v1414 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v1415, (__int128 *)&v1510, (__int128 *)&v1511, v1413);
            add_with_context_transfers_t<Espresso::activation_params>(&v1419, (uint64_t)&v1458, (uint64_t)&v1514, (uint64_t)&v1512, (uint64_t)v1509, (uint64_t *)&v1416, (uint64_t *)&v1413);
            v280 = v1420;
            if (v1420)
            {
              v281 = (unint64_t *)&v1420->__shared_owners_;
              do
                v282 = __ldaxr(v281);
              while (__stlxr(v282 - 1, v281));
              if (!v282)
              {
                ((void (*)(std::__shared_weak_count *))v280->__on_zero_shared)(v280);
                std::__shared_weak_count::__release_weak(v280);
              }
            }
            lpsrc.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1413;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&lpsrc);
            if (SHIBYTE(v1510.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v1510.__r_.__value_.__l.__data_);
            v1510.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1416;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1510);
            for (j = 0; j != -48; j -= 24)
            {
              if (*((char *)&v1489 + j + 7) < 0)
                operator delete(*(void **)&v1488[j + 24]);
            }
LABEL_463:
            if (SHIBYTE(v1512.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v1512.__r_.__value_.__l.__data_);
            if (SHIBYTE(v1514.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v1514.__r_.__value_.__l.__data_);
          }
          else if (!LODWORD(v1509[0].__r_.__value_.__l.__data_))
          {
            std::string::basic_string[abi:ne180100]<0>(&v1514, "activation_grad");
            if ((v1438 & 0x80u) == 0)
              v228 = v1438;
            else
              v228 = v1437;
            std::string::basic_string[abi:ne180100]((uint64_t)&v1512, v228 + 7);
            if ((v1512.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v229 = &v1512;
            else
              v229 = (std::string *)v1512.__r_.__value_.__r.__words[0];
            if (v228)
            {
              if ((v1438 & 0x80u) == 0)
                v230 = &v1436;
              else
                v230 = v1436;
              memmove(v229, v230, v228);
            }
            strcpy((char *)v229 + v228, "_nonlin");
            if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external((std::string *)v1488, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
            else
              *(std::string *)v1488 = __s;
            if (SHIBYTE(v1432.__r_.__value_.__r.__words[2]) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)&v1488[24], v1432.__r_.__value_.__l.__data_, v1432.__r_.__value_.__l.__size_);
            }
            else
            {
              *(_OWORD *)&v1488[24] = *(_OWORD *)&v1432.__r_.__value_.__l.__data_;
              *(_QWORD *)&v1489 = *((_QWORD *)&v1432.__r_.__value_.__l + 2);
            }
            v1425 = 0;
            v1424 = 0;
            v1426 = 0;
            v1510.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1424;
            v1510.__r_.__value_.__s.__data_[8] = 0;
            v1424 = (std::string *)operator new(0x30uLL);
            v1425 = v1424;
            v1426 = v1424 + 2;
            v1425 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v1426, (__int128 *)v1488, (__int128 *)((char *)&v1489 + 8), v1424);
            if (SBYTE7(v1504) < 0)
            {
              std::string::__init_copy_ctor_external(&v1510, (const std::string::value_type *)__n[0], __n[1]);
            }
            else
            {
              *(_OWORD *)&v1510.__r_.__value_.__l.__data_ = *(_OWORD *)__n;
              v1510.__r_.__value_.__r.__words[2] = v1504;
            }
            v1422 = 0;
            v1421 = 0;
            v1423 = 0;
            lpsrc.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1421;
            lpsrc.__r_.__value_.__s.__data_[8] = 0;
            v1421 = (std::string *)operator new(0x18uLL);
            v1422 = v1421;
            v1423 = v1421 + 1;
            v1422 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v1423, (__int128 *)&v1510, (__int128 *)&v1511, v1421);
            add_with_context_transfers_t<Espresso::activation_params>(&v1427, (uint64_t)&v1458, (uint64_t)&v1514, (uint64_t)&v1512, (uint64_t)v1509, (uint64_t *)&v1424, (uint64_t *)&v1421);
            v276 = v1428;
            if (v1428)
            {
              v277 = (unint64_t *)&v1428->__shared_owners_;
              do
                v278 = __ldaxr(v277);
              while (__stlxr(v278 - 1, v277));
              if (!v278)
              {
                ((void (*)(std::__shared_weak_count *))v276->__on_zero_shared)(v276);
                std::__shared_weak_count::__release_weak(v276);
              }
            }
            lpsrc.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1421;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&lpsrc);
            if (SHIBYTE(v1510.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v1510.__r_.__value_.__l.__data_);
            v1510.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1424;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1510);
            for (k = 0; k != -48; k -= 24)
            {
              if (*((char *)&v1489 + k + 7) < 0)
                operator delete(*(void **)&v1488[k + 24]);
            }
            goto LABEL_463;
          }
          std::string::operator=(&__s, (const std::string *)__n);
          if (SBYTE7(v1504) < 0)
            operator delete((void *)__n[0]);
        }
        if ((_DWORD)v1497)
        {
          *(_QWORD *)&v1488[4] = 0;
          *(_QWORD *)&v1488[12] = 0x3F6666663727C5ACLL;
          *(_WORD *)&v1488[20] = 0;
          *(_OWORD *)&v1488[24] = 0u;
          v1489 = 0u;
          v1491 = 0;
          v1492 = 0x200000000;
          *(_DWORD *)v1488 = *(_DWORD *)&v1493[40];
          v1490 = 1065353216;
          *(_DWORD *)&v1488[32] = 1;
          if ((v1438 & 0x80u) == 0)
            v284 = v1438;
          else
            v284 = v1437;
          std::string::basic_string[abi:ne180100]((uint64_t)__n, v284 + 4);
          if ((SBYTE7(v1504) & 0x80u) == 0)
            v285 = __n;
          else
            v285 = (std::string::size_type *)__n[0];
          if (v284)
          {
            if ((v1438 & 0x80u) == 0)
              v286 = &v1436;
            else
              v286 = v1436;
            memmove(v285, v286, v284);
          }
          strcpy((char *)v285 + v284, "_dbn");
          memset(v1509, 0, 24);
          v1514.__r_.__value_.__r.__words[0] = (std::string::size_type)v1509;
          v1514.__r_.__value_.__s.__data_[8] = 0;
          v1509[0].__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
          v1509[0].__r_.__value_.__l.__size_ = v1509[0].__r_.__value_.__r.__words[0];
          v1509[0].__r_.__value_.__r.__words[2] = v1509[0].__r_.__value_.__r.__words[0] + 24;
          v1509[0].__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v1509[0].__r_.__value_.__r.__words[2], (__int128 *)__n, (__int128 *)((char *)&v1504 + 8), (std::string *)v1509[0].__r_.__value_.__l.__data_);
          if (SBYTE7(v1504) < 0)
            operator delete((void *)__n[0]);
          std::string::basic_string[abi:ne180100]<0>(__n, "batchnorm_grad");
          if ((v1438 & 0x80u) == 0)
            v287 = v1438;
          else
            v287 = v1437;
          std::string::basic_string[abi:ne180100]((uint64_t)&v1514, v287 + 3);
          if ((v1514.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v288 = &v1514;
          else
            v288 = (std::string *)v1514.__r_.__value_.__r.__words[0];
          if (v287)
          {
            if ((v1438 & 0x80u) == 0)
              v289 = &v1436;
            else
              v289 = v1436;
            memmove(v288, v289, v287);
          }
          *(_DWORD *)((char *)&v288->__r_.__value_.__l.__data_ + v287) = 7234143;
          if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v1512, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
          else
            v1512 = __s;
          v1411 = 0;
          v1410 = 0;
          v1412 = 0;
          v1510.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1410;
          v1510.__r_.__value_.__s.__data_[8] = 0;
          v1410 = (std::string *)operator new(0x18uLL);
          v1411 = v1410;
          v1412 = v1410 + 1;
          v1411 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v1412, (__int128 *)&v1512, (__int128 *)&v1513, v1410);
          memset(v1409, 0, sizeof(v1409));
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v1409, (uint64_t)v1509[0].__r_.__value_.__l.__data_, v1509[0].__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(v1509[0].__r_.__value_.__l.__size_ - v1509[0].__r_.__value_.__r.__words[0]) >> 3));
          add_with_context_transfers_t<Espresso::generic_batchnorm_grad_kernel,Espresso::batchnorm_params>(&lpsrc, (uint64_t)&v1458, (uint64_t)__n, (uint64_t)&v1514, (uint64_t)v1488, (uint64_t)v1410, (uint64_t)v1411, v1409);
          v1510.__r_.__value_.__r.__words[0] = (std::string::size_type)v1409;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1510);
          v1510.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1410;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1510);
          if (SHIBYTE(v1512.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v1512.__r_.__value_.__l.__data_);
          if (SHIBYTE(v1514.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v1514.__r_.__value_.__l.__data_);
          if (SBYTE7(v1504) < 0)
            operator delete((void *)__n[0]);
          (*(void (**)(std::string::size_type *__return_ptr, void *, uint64_t))(*(_QWORD *)v1479 + 320))(__n, v1479, 1);
          std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__assign_with_size[abi:ne180100]<std::shared_ptr<Espresso::abstract_blob_container> const*,std::shared_ptr<Espresso::abstract_blob_container> const*>(lpsrc.__r_.__value_.__r.__words[0] + 280, (uint64_t *)__n, (uint64_t *)&v1504, 1uLL);
          v296 = (std::__shared_weak_count *)__n[1];
          if (__n[1])
          {
            v297 = (unint64_t *)(__n[1] + 8);
            do
              v298 = __ldaxr(v297);
            while (__stlxr(v298 - 1, v297));
            if (!v298)
            {
              ((void (*)(std::__shared_weak_count *))v296->__on_zero_shared)(v296);
              std::__shared_weak_count::__release_weak(v296);
            }
          }
          std::string::operator=(&__s, (const std::string *)v1509[0].__r_.__value_.__l.__data_);
          v299 = (std::__shared_weak_count *)lpsrc.__r_.__value_.__l.__size_;
          if (lpsrc.__r_.__value_.__l.__size_)
          {
            v300 = (unint64_t *)(lpsrc.__r_.__value_.__l.__size_ + 8);
            do
              v301 = __ldaxr(v300);
            while (__stlxr(v301 - 1, v300));
            if (!v301)
            {
              ((void (*)(std::__shared_weak_count *))v299->__on_zero_shared)(v299);
              std::__shared_weak_count::__release_weak(v299);
            }
          }
          __n[0] = (std::string::size_type)v1509;
          v302 = (std::string *)__n;
          goto LABEL_559;
        }
        if (*(_DWORD *)&v1493[32])
        {
          lpsrc.__r_.__value_.__s.__data_[4] = 0;
          LODWORD(lpsrc.__r_.__value_.__l.__data_) = *(_DWORD *)&v1493[40];
          if ((v1438 & 0x80u) == 0)
            v290 = v1438;
          else
            v290 = v1437;
          std::string::basic_string[abi:ne180100]((uint64_t)v1509, v290 + 6);
          if ((v1509[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v291 = v1509;
          else
            v291 = (std::string *)v1509[0].__r_.__value_.__r.__words[0];
          if (v290)
          {
            if ((v1438 & 0x80u) == 0)
              v292 = &v1436;
            else
              v292 = v1436;
            memmove(v291, v292, v290);
          }
          strcpy((char *)v291 + v290, "_dbias");
          memset(v1488, 0, 24);
          __n[0] = (std::string::size_type)v1488;
          LOBYTE(__n[1]) = 0;
          *(_QWORD *)v1488 = operator new(0x18uLL);
          *(_QWORD *)&v1488[8] = *(_QWORD *)v1488;
          *(_QWORD *)&v1488[16] = *(_QWORD *)v1488 + 24;
          *(_QWORD *)&v1488[8] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v1488[16], (__int128 *)v1509, (__int128 *)&v1509[1], *(std::string **)v1488);
          if (SHIBYTE(v1509[0].__r_.__value_.__r.__words[2]) < 0)
            operator delete(v1509[0].__r_.__value_.__l.__data_);
          std::string::basic_string[abi:ne180100]<0>(v1509, "bias_grad");
          if ((v1438 & 0x80u) == 0)
            v293 = v1438;
          else
            v293 = v1437;
          std::string::basic_string[abi:ne180100]((uint64_t)__n, v293 + 5);
          if ((SBYTE7(v1504) & 0x80u) == 0)
            v294 = __n;
          else
            v294 = (std::string::size_type *)__n[0];
          if (v293)
          {
            if ((v1438 & 0x80u) == 0)
              v295 = &v1436;
            else
              v295 = v1436;
            memmove(v294, v295, v293);
          }
          strcpy((char *)v294 + v293, "_bias");
          if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v1514, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
          else
            v1514 = __s;
          v1407 = 0;
          v1406 = 0;
          v1408 = 0;
          v1512.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1406;
          v1512.__r_.__value_.__s.__data_[8] = 0;
          v1406 = (std::string *)operator new(0x18uLL);
          v1407 = v1406;
          v1408 = v1406 + 1;
          v1407 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v1408, (__int128 *)&v1514, &v1515, v1406);
          memset(v1405, 0, sizeof(v1405));
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v1405, *(uint64_t *)v1488, *(uint64_t *)&v1488[8], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v1488[8] - *(_QWORD *)v1488) >> 3));
          add_with_context_transfers_t<Espresso::generic_bias_grad_kernel,Espresso::bias_params>(&v1510, (uint64_t)&v1458, (uint64_t)v1509, (uint64_t)__n, (uint64_t)&lpsrc, (uint64_t)v1406, (uint64_t)v1407, v1405);
          v1512.__r_.__value_.__r.__words[0] = (std::string::size_type)v1405;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1512);
          v1512.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1406;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1512);
          if (SHIBYTE(v1514.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v1514.__r_.__value_.__l.__data_);
          if (SBYTE7(v1504) < 0)
            operator delete((void *)__n[0]);
          if (SHIBYTE(v1509[0].__r_.__value_.__r.__words[2]) < 0)
            operator delete(v1509[0].__r_.__value_.__l.__data_);
          (*(void (**)(std::string *__return_ptr, void *, uint64_t))(*(_QWORD *)v1479 + 320))(v1509, v1479, 1);
          std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__assign_with_size[abi:ne180100]<std::shared_ptr<Espresso::abstract_blob_container> const*,std::shared_ptr<Espresso::abstract_blob_container> const*>(v1510.__r_.__value_.__r.__words[0] + 280, (uint64_t *)v1509, (uint64_t *)&v1509[0].__r_.__value_.__r.__words[2], 1uLL);
          v303 = (std::__shared_weak_count *)v1509[0].__r_.__value_.__l.__size_;
          if (v1509[0].__r_.__value_.__l.__size_)
          {
            v304 = (unint64_t *)(v1509[0].__r_.__value_.__l.__size_ + 8);
            do
              v305 = __ldaxr(v304);
            while (__stlxr(v305 - 1, v304));
            if (!v305)
            {
              ((void (*)(std::__shared_weak_count *))v303->__on_zero_shared)(v303);
              std::__shared_weak_count::__release_weak(v303);
            }
          }
          v306 = (std::__shared_weak_count *)v1510.__r_.__value_.__l.__size_;
          if (v1510.__r_.__value_.__l.__size_)
          {
            v307 = (unint64_t *)(v1510.__r_.__value_.__l.__size_ + 8);
            do
              v308 = __ldaxr(v307);
            while (__stlxr(v308 - 1, v307));
            if (!v308)
            {
              ((void (*)(std::__shared_weak_count *))v306->__on_zero_shared)(v306);
              std::__shared_weak_count::__release_weak(v306);
            }
          }
          v1509[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v1488;
          v302 = v1509;
LABEL_559:
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v302);
        }
        std::string::basic_string[abi:ne180100]<0>(&v1512, "convolution_weights_grad");
        if ((v1438 & 0x80u) == 0)
          v309 = v1438;
        else
          v309 = v1437;
        std::string::basic_string[abi:ne180100]((uint64_t)&v1510, v309 + 3);
        if ((v1510.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v310 = &v1510;
        else
          v310 = (std::string *)v1510.__r_.__value_.__r.__words[0];
        if (v309)
        {
          if ((v1438 & 0x80u) == 0)
            v311 = &v1436;
          else
            v311 = v1436;
          memmove(v310, v311, v309);
        }
        *(_DWORD *)((char *)&v310->__r_.__value_.__l.__data_ + v309) = 7824479;
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external((std::string *)v1488, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
        else
          *(std::string *)v1488 = __s;
        if (SHIBYTE(v1433.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v1488[24], v1433.__r_.__value_.__l.__data_, v1433.__r_.__value_.__l.__size_);
        }
        else
        {
          *(_OWORD *)&v1488[24] = *(_OWORD *)&v1433.__r_.__value_.__l.__data_;
          *(_QWORD *)&v1489 = *((_QWORD *)&v1433.__r_.__value_.__l + 2);
        }
        v1403 = 0;
        v1402 = 0;
        v1404 = 0;
        v1509[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v1402;
        v1509[0].__r_.__value_.__s.__data_[8] = 0;
        v1402 = (std::string *)operator new(0x30uLL);
        v1403 = v1402;
        v1404 = v1402 + 2;
        v1403 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v1404, (__int128 *)v1488, (__int128 *)((char *)&v1489 + 8), v1402);
        v1401 = 0;
        v1399 = 0;
        v1400 = 0;
        memset(v1509, 0, 24);
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v1509, (uint64_t)v1402, (uint64_t)v1403, 0xAAAAAAAAAAAAAAABLL * (((char *)v1403 - (char *)v1402) >> 3));
        __n[1] = 0;
        __n[0] = 0;
        *(_QWORD *)&v1504 = 0;
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(__n, v1399, v1400, 0xAAAAAAAAAAAAAAABLL * ((v1400 - v1399) >> 3));
        add_with_context_transfers_t<Espresso::convolution_uniforms>((uint64_t *)&lpsrc, (uint64_t)&v1458, (uint64_t)&v1512, (uint64_t)&v1510, (uint64_t)v1493, (uint64_t *)v1509, (uint64_t *)__n);
        v1514.__r_.__value_.__r.__words[0] = (std::string::size_type)__n;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1514);
        v1514.__r_.__value_.__r.__words[0] = (std::string::size_type)v1509;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1514);
        if (!lpsrc.__r_.__value_.__r.__words[0]
        {
          *(_OWORD *)&v1507.__r_.__value_.__l.__data_ = 0uLL;
          v1225 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::operator+<char>();
          std::runtime_error::runtime_error(v1225, &v1514);
          __cxa_throw(v1225, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        v1507.__r_.__value_.__r.__words[0] = (std::string::size_type)v312;
        v1507.__r_.__value_.__l.__size_ = lpsrc.__r_.__value_.__l.__size_;
        if (lpsrc.__r_.__value_.__l.__size_)
        {
          v313 = (unint64_t *)(lpsrc.__r_.__value_.__l.__size_ + 8);
          do
            v314 = __ldxr(v313);
          while (__stxr(v314 + 1, v313));
          v315 = (std::__shared_weak_count *)lpsrc.__r_.__value_.__l.__size_;
          if (lpsrc.__r_.__value_.__l.__size_)
          {
            v316 = (unint64_t *)(lpsrc.__r_.__value_.__l.__size_ + 8);
            do
              v317 = __ldaxr(v316);
            while (__stlxr(v317 - 1, v316));
            if (!v317)
            {
              ((void (*)(std::__shared_weak_count *))v315->__on_zero_shared)(v315);
              std::__shared_weak_count::__release_weak(v315);
            }
          }
        }
        v1509[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v1399;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v1509);
        v1509[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v1402;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v1509);
        for (m = 0; m != -48; m -= 24)
        {
          if (*((char *)&v1489 + m + 7) < 0)
            operator delete(*(void **)&v1488[m + 24]);
        }
        if (SHIBYTE(v1510.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v1510.__r_.__value_.__l.__data_);
        if (SHIBYTE(v1512.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v1512.__r_.__value_.__l.__data_);
        std::string::basic_string[abi:ne180100]<0>(&v1514, "convolution_grad");
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v1512, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
        else
          v1512 = __s;
        v1397 = 0;
        v1396 = 0;
        v1398 = 0;
        *(_QWORD *)v1488 = &v1396;
        v1488[8] = 0;
        v1396 = (std::string *)operator new(0x18uLL);
        v1397 = v1396;
        v1398 = v1396 + 1;
        v1397 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v1398, (__int128 *)&v1512, (__int128 *)&v1513, v1396);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v1510, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
        else
          v1510 = __str;
        v1394 = 0;
        v1393 = 0;
        v1395 = 0;
        *(_QWORD *)v1488 = &v1393;
        v1488[8] = 0;
        v1393 = (std::string *)operator new(0x18uLL);
        v1394 = v1393;
        v1395 = v1393 + 1;
        v1394 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v1395, (__int128 *)&v1510, (__int128 *)&v1511, v1393);
        memset(v1488, 0, 24);
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v1488, (uint64_t)v1396, (uint64_t)v1397, 0xAAAAAAAAAAAAAAABLL * (((char *)v1397 - (char *)v1396) >> 3));
        memset(v1509, 0, 24);
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v1509, (uint64_t)v1393, (uint64_t)v1394, 0xAAAAAAAAAAAAAAABLL * (((char *)v1394 - (char *)v1393) >> 3));
        add_with_context_transfers_t<Espresso::convolution_uniforms>((uint64_t *)&lpsrc, (uint64_t)&v1458, (uint64_t)&v1514, (uint64_t)&v1436, (uint64_t)v1493, (uint64_t *)v1488, (uint64_t *)v1509);
        __n[0] = (std::string::size_type)v1509;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__n);
        __n[0] = (std::string::size_type)v1488;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__n);
        if (!lpsrc.__r_.__value_.__r.__words[0]
        {
          *(_OWORD *)&v1505.__r_.__value_.__l.__data_ = 0uLL;
          v1226 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::operator+<char>();
          std::runtime_error::runtime_error(v1226, (const std::string *)__n);
          __cxa_throw(v1226, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        v1505.__r_.__value_.__r.__words[0] = (std::string::size_type)v319;
        v1505.__r_.__value_.__l.__size_ = lpsrc.__r_.__value_.__l.__size_;
        if (lpsrc.__r_.__value_.__l.__size_)
        {
          v320 = (unint64_t *)(lpsrc.__r_.__value_.__l.__size_ + 8);
          do
            v321 = __ldxr(v320);
          while (__stxr(v321 + 1, v320));
          v322 = (std::__shared_weak_count *)lpsrc.__r_.__value_.__l.__size_;
          if (lpsrc.__r_.__value_.__l.__size_)
          {
            v323 = (unint64_t *)(lpsrc.__r_.__value_.__l.__size_ + 8);
            do
              v324 = __ldaxr(v323);
            while (__stlxr(v324 - 1, v323));
            if (!v324)
            {
              ((void (*)(std::__shared_weak_count *))v322->__on_zero_shared)(v322);
              std::__shared_weak_count::__release_weak(v322);
            }
          }
        }
        *(_QWORD *)v1488 = &v1393;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v1488);
        if (SHIBYTE(v1510.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v1510.__r_.__value_.__l.__data_);
        *(_QWORD *)v1488 = &v1396;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v1488);
        if (SHIBYTE(v1512.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v1512.__r_.__value_.__l.__data_);
        if (SHIBYTE(v1514.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v1514.__r_.__value_.__l.__data_);
        v325 = v1479;
        (*(void (**)(_BYTE *__return_ptr, void *, _QWORD))(*(_QWORD *)v1479 + 320))(v1488, v1479, 0);
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__assign_with_size[abi:ne180100]<std::shared_ptr<Espresso::abstract_blob_container> const*,std::shared_ptr<Espresso::abstract_blob_container> const*>(v1505.__r_.__value_.__r.__words[0] + 280, (uint64_t *)v1488, (uint64_t *)&v1488[16], 1uLL);
        v326 = *(std::__shared_weak_count **)&v1488[8];
        if (*(_QWORD *)&v1488[8])
        {
          v327 = (unint64_t *)(*(_QWORD *)&v1488[8] + 8);
          do
            v328 = __ldaxr(v327);
          while (__stlxr(v328 - 1, v327));
          if (!v328)
          {
            ((void (*)(std::__shared_weak_count *))v326->__on_zero_shared)(v326);
            std::__shared_weak_count::__release_weak(v326);
          }
        }
        (*(void (**)(_BYTE *__return_ptr, void *, _QWORD))(*(_QWORD *)v325 + 320))(v1488, v325, 0);
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__assign_with_size[abi:ne180100]<std::shared_ptr<Espresso::abstract_blob_container> const*,std::shared_ptr<Espresso::abstract_blob_container> const*>(v1507.__r_.__value_.__r.__words[0] + 280, (uint64_t *)v1488, (uint64_t *)&v1488[16], 1uLL);
        v329 = *(std::__shared_weak_count **)&v1488[8];
        if (*(_QWORD *)&v1488[8])
        {
          v330 = (unint64_t *)(*(_QWORD *)&v1488[8] + 8);
          do
            v331 = __ldaxr(v330);
          while (__stlxr(v331 - 1, v330));
          if (!v331)
          {
            ((void (*)(std::__shared_weak_count *))v329->__on_zero_shared)(v329);
            std::__shared_weak_count::__release_weak(v329);
          }
        }
        v332 = (std::__shared_weak_count *)v1505.__r_.__value_.__l.__size_;
        if (v1505.__r_.__value_.__l.__size_)
        {
          v333 = (unint64_t *)(v1505.__r_.__value_.__l.__size_ + 8);
          do
            v334 = __ldaxr(v333);
          while (__stlxr(v334 - 1, v333));
          if (!v334)
          {
            ((void (*)(std::__shared_weak_count *))v332->__on_zero_shared)(v332);
            std::__shared_weak_count::__release_weak(v332);
          }
        }
        v335 = (std::__shared_weak_count *)v1507.__r_.__value_.__l.__size_;
        if (v1507.__r_.__value_.__l.__size_)
        {
          v336 = (unint64_t *)(v1507.__r_.__value_.__l.__size_ + 8);
          do
            v337 = __ldaxr(v336);
          while (__stlxr(v337 - 1, v336));
          if (!v337)
          {
            ((void (*)(std::__shared_weak_count *))v335->__on_zero_shared)(v335);
            std::__shared_weak_count::__release_weak(v335);
          }
        }
        v338 = 0;
        goto LABEL_638;
      }
      v1480 = 0;
      v1479 = 0;
      if (v231)
      {
        v1391 = v231;
        v1392 = v1242;
        if (v1242)
        {
          v232 = (unint64_t *)&v1242->__shared_owners_;
          do
            v233 = __ldxr(v232);
          while (__stxr(v233 + 1, v232));
        }
        v234 = (*((uint64_t (**)(void **))*v231 + 48))(v231);
        *(_OWORD *)v1493 = *(_OWORD *)v234;
        v235 = *(_OWORD *)(v234 + 16);
        v236 = *(_OWORD *)(v234 + 32);
        v237 = *(_OWORD *)(v234 + 48);
        v1494 = *(_OWORD *)(v234 + 64);
        *(_OWORD *)&v1493[48] = v237;
        *(_OWORD *)&v1493[32] = v236;
        *(_OWORD *)&v1493[16] = v235;
        v238 = *(_OWORD *)(v234 + 80);
        v239 = *(_OWORD *)(v234 + 96);
        v240 = *(_OWORD *)(v234 + 112);
        LODWORD(v1498) = *(_DWORD *)(v234 + 128);
        v1497 = v240;
        v1496 = v239;
        v1495 = v238;
        if (*(_QWORD *)&v1493[12])
        {
          LODWORD(v1509[0].__r_.__value_.__l.__data_) = 0;
          *(std::string::size_type *)((char *)v1509[0].__r_.__value_.__r.__words + 4) = _D9;
          *(std::string::size_type *)((char *)&v1509[0].__r_.__value_.__r.__words[2] + 4) = 0;
          *(std::string::size_type *)((char *)v1509[1].__r_.__value_.__r.__words + 4) = 0;
          *(std::string::size_type *)((char *)&v1509[0].__r_.__value_.__r.__words[1] + 4) = 0;
          if (!*(_DWORD *)&v1493[12] && *(_DWORD *)&v1493[16])
          {
            LODWORD(v1509[0].__r_.__value_.__l.__data_) = 1;
            *(std::string::size_type *)((char *)v1509[0].__r_.__value_.__r.__words + 4) = *(_QWORD *)&v1493[20];
          }
          if ((v1438 & 0x80u) == 0)
            v241 = v1438;
          else
            v241 = v1437;
          std::string::basic_string[abi:ne180100]((uint64_t)__n, v241 + 12);
          if ((SBYTE7(v1504) & 0x80u) == 0)
            v242 = __n;
          else
            v242 = (std::string::size_type *)__n[0];
          if (v241)
          {
            if ((v1438 & 0x80u) == 0)
              v243 = &v1436;
            else
              v243 = v1436;
            memmove(v242, v243, v241);
          }
          strcpy((char *)v242 + v241, "_nonlin_diff");
          if (LODWORD(v1509[0].__r_.__value_.__l.__data_) == 1)
          {
            std::string::basic_string[abi:ne180100]<0>(&v1514, "activation_grad");
            if ((v1438 & 0x80u) == 0)
              v273 = v1438;
            else
              v273 = v1437;
            std::string::basic_string[abi:ne180100]((uint64_t)&v1512, v273 + 7);
            if ((v1512.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v274 = &v1512;
            else
              v274 = (std::string *)v1512.__r_.__value_.__r.__words[0];
            if (v273)
            {
              if ((v1438 & 0x80u) == 0)
                v275 = &v1436;
              else
                v275 = v1436;
              memmove(v274, v275, v273);
            }
            strcpy((char *)v274 + v273, "_nonlin");
            if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external((std::string *)v1488, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
            else
              *(std::string *)v1488 = __s;
            if (SHIBYTE(v1432.__r_.__value_.__r.__words[2]) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)&v1488[24], v1432.__r_.__value_.__l.__data_, v1432.__r_.__value_.__l.__size_);
            }
            else
            {
              *(_OWORD *)&v1488[24] = *(_OWORD *)&v1432.__r_.__value_.__l.__data_;
              *(_QWORD *)&v1489 = *((_QWORD *)&v1432.__r_.__value_.__l + 2);
            }
            v1379 = 0;
            v1378 = 0;
            v1380 = 0;
            v1510.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1378;
            v1510.__r_.__value_.__s.__data_[8] = 0;
            v1378 = (std::string *)operator new(0x30uLL);
            v1379 = v1378;
            v1380 = v1378 + 2;
            v1379 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v1380, (__int128 *)v1488, (__int128 *)((char *)&v1489 + 8), v1378);
            if (SBYTE7(v1504) < 0)
            {
              std::string::__init_copy_ctor_external(&v1510, (const std::string::value_type *)__n[0], __n[1]);
            }
            else
            {
              *(_OWORD *)&v1510.__r_.__value_.__l.__data_ = *(_OWORD *)__n;
              v1510.__r_.__value_.__r.__words[2] = v1504;
            }
            v1376 = 0;
            v1375 = 0;
            v1377 = 0;
            lpsrc.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1375;
            lpsrc.__r_.__value_.__s.__data_[8] = 0;
            v1375 = (std::string *)operator new(0x18uLL);
            v1376 = v1375;
            v1377 = v1375 + 1;
            v1376 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v1377, (__int128 *)&v1510, (__int128 *)&v1511, v1375);
            add_with_context_transfers_t<Espresso::activation_params>(&v1381, (uint64_t)&v1458, (uint64_t)&v1514, (uint64_t)&v1512, (uint64_t)v1509, (uint64_t *)&v1378, (uint64_t *)&v1375);
            v520 = v1382;
            if (v1382)
            {
              v521 = (unint64_t *)&v1382->__shared_owners_;
              do
                v522 = __ldaxr(v521);
              while (__stlxr(v522 - 1, v521));
              if (!v522)
              {
                ((void (*)(std::__shared_weak_count *))v520->__on_zero_shared)(v520);
                std::__shared_weak_count::__release_weak(v520);
              }
            }
            lpsrc.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1375;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&lpsrc);
            if (SHIBYTE(v1510.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v1510.__r_.__value_.__l.__data_);
            v1510.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1378;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1510);
            for (n = 0; n != -48; n -= 24)
            {
              if (*((char *)&v1489 + n + 7) < 0)
                operator delete(*(void **)&v1488[n + 24]);
            }
LABEL_1035:
            if (SHIBYTE(v1512.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v1512.__r_.__value_.__l.__data_);
            if (SHIBYTE(v1514.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v1514.__r_.__value_.__l.__data_);
          }
          else if (!LODWORD(v1509[0].__r_.__value_.__l.__data_))
          {
            std::string::basic_string[abi:ne180100]<0>(&v1514, "activation_grad");
            if ((v1438 & 0x80u) == 0)
              v244 = v1438;
            else
              v244 = v1437;
            std::string::basic_string[abi:ne180100]((uint64_t)&v1512, v244 + 7);
            if ((v1512.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v245 = &v1512;
            else
              v245 = (std::string *)v1512.__r_.__value_.__r.__words[0];
            if (v244)
            {
              if ((v1438 & 0x80u) == 0)
                v246 = &v1436;
              else
                v246 = v1436;
              memmove(v245, v246, v244);
            }
            strcpy((char *)v245 + v244, "_nonlin");
            if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external((std::string *)v1488, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
            else
              *(std::string *)v1488 = __s;
            if (SHIBYTE(v1432.__r_.__value_.__r.__words[2]) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)&v1488[24], v1432.__r_.__value_.__l.__data_, v1432.__r_.__value_.__l.__size_);
            }
            else
            {
              *(_OWORD *)&v1488[24] = *(_OWORD *)&v1432.__r_.__value_.__l.__data_;
              *(_QWORD *)&v1489 = *((_QWORD *)&v1432.__r_.__value_.__l + 2);
            }
            v1387 = 0;
            v1386 = 0;
            v1388 = 0;
            v1510.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1386;
            v1510.__r_.__value_.__s.__data_[8] = 0;
            v1386 = (std::string *)operator new(0x30uLL);
            v1387 = v1386;
            v1388 = v1386 + 2;
            v1387 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v1388, (__int128 *)v1488, (__int128 *)((char *)&v1489 + 8), v1386);
            if (SBYTE7(v1504) < 0)
            {
              std::string::__init_copy_ctor_external(&v1510, (const std::string::value_type *)__n[0], __n[1]);
            }
            else
            {
              *(_OWORD *)&v1510.__r_.__value_.__l.__data_ = *(_OWORD *)__n;
              v1510.__r_.__value_.__r.__words[2] = v1504;
            }
            v1384 = 0;
            v1383 = 0;
            v1385 = 0;
            lpsrc.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1383;
            lpsrc.__r_.__value_.__s.__data_[8] = 0;
            v1383 = (std::string *)operator new(0x18uLL);
            v1384 = v1383;
            v1385 = v1383 + 1;
            v1384 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v1385, (__int128 *)&v1510, (__int128 *)&v1511, v1383);
            add_with_context_transfers_t<Espresso::activation_params>(&v1389, (uint64_t)&v1458, (uint64_t)&v1514, (uint64_t)&v1512, (uint64_t)v1509, (uint64_t *)&v1386, (uint64_t *)&v1383);
            v516 = v1390;
            if (v1390)
            {
              v517 = (unint64_t *)&v1390->__shared_owners_;
              do
                v518 = __ldaxr(v517);
              while (__stlxr(v518 - 1, v517));
              if (!v518)
              {
                ((void (*)(std::__shared_weak_count *))v516->__on_zero_shared)(v516);
                std::__shared_weak_count::__release_weak(v516);
              }
            }
            lpsrc.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1383;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&lpsrc);
            if (SHIBYTE(v1510.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v1510.__r_.__value_.__l.__data_);
            v1510.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1386;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1510);
            for (ii = 0; ii != -48; ii -= 24)
            {
              if (*((char *)&v1489 + ii + 7) < 0)
                operator delete(*(void **)&v1488[ii + 24]);
            }
            goto LABEL_1035;
          }
          std::string::operator=(&__s, (const std::string *)__n);
          if (SBYTE7(v1504) < 0)
            operator delete((void *)__n[0]);
        }
        if (*(_DWORD *)&v1493[8])
        {
          lpsrc.__r_.__value_.__s.__data_[4] = 0;
          LODWORD(lpsrc.__r_.__value_.__l.__data_) = *(_DWORD *)v1493;
          if ((v1438 & 0x80u) == 0)
            v524 = v1438;
          else
            v524 = v1437;
          std::string::basic_string[abi:ne180100]((uint64_t)v1509, v524 + 6);
          if ((v1509[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v525 = v1509;
          else
            v525 = (std::string *)v1509[0].__r_.__value_.__r.__words[0];
          if (v524)
          {
            if ((v1438 & 0x80u) == 0)
              v526 = &v1436;
            else
              v526 = v1436;
            memmove(v525, v526, v524);
          }
          strcpy((char *)v525 + v524, "_dbias");
          memset(v1488, 0, 24);
          __n[0] = (std::string::size_type)v1488;
          LOBYTE(__n[1]) = 0;
          *(_QWORD *)v1488 = operator new(0x18uLL);
          *(_QWORD *)&v1488[8] = *(_QWORD *)v1488;
          *(_QWORD *)&v1488[16] = *(_QWORD *)v1488 + 24;
          *(_QWORD *)&v1488[8] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v1488[16], (__int128 *)v1509, (__int128 *)&v1509[1], *(std::string **)v1488);
          if (SHIBYTE(v1509[0].__r_.__value_.__r.__words[2]) < 0)
            operator delete(v1509[0].__r_.__value_.__l.__data_);
          std::string::basic_string[abi:ne180100]<0>(v1509, "bias_grad");
          if ((v1438 & 0x80u) == 0)
            v527 = v1438;
          else
            v527 = v1437;
          std::string::basic_string[abi:ne180100]((uint64_t)__n, v527 + 5);
          if ((SBYTE7(v1504) & 0x80u) == 0)
            v528 = __n;
          else
            v528 = (std::string::size_type *)__n[0];
          if (v527)
          {
            if ((v1438 & 0x80u) == 0)
              v529 = &v1436;
            else
              v529 = v1436;
            memmove(v528, v529, v527);
          }
          strcpy((char *)v528 + v527, "_bias");
          if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v1514, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
          else
            v1514 = __s;
          v1373 = 0;
          v1372 = 0;
          v1374 = 0;
          v1512.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1372;
          v1512.__r_.__value_.__s.__data_[8] = 0;
          v1372 = (std::string *)operator new(0x18uLL);
          v1373 = v1372;
          v1374 = v1372 + 1;
          v1373 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v1374, (__int128 *)&v1514, &v1515, v1372);
          memset(v1371, 0, sizeof(v1371));
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v1371, *(uint64_t *)v1488, *(uint64_t *)&v1488[8], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v1488[8] - *(_QWORD *)v1488) >> 3));
          add_with_context_transfers_t<Espresso::generic_bias_grad_kernel,Espresso::bias_params>(&v1510, (uint64_t)&v1458, (uint64_t)v1509, (uint64_t)__n, (uint64_t)&lpsrc, (uint64_t)v1372, (uint64_t)v1373, v1371);
          v1512.__r_.__value_.__r.__words[0] = (std::string::size_type)v1371;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1512);
          v1512.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1372;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1512);
          if (SHIBYTE(v1514.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v1514.__r_.__value_.__l.__data_);
          if (SBYTE7(v1504) < 0)
            operator delete((void *)__n[0]);
          if (SHIBYTE(v1509[0].__r_.__value_.__r.__words[2]) < 0)
            operator delete(v1509[0].__r_.__value_.__l.__data_);
          (*((void (**)(std::string *__return_ptr, void **, uint64_t))*v1391 + 40))(v1509, v1391, 1);
          std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__assign_with_size[abi:ne180100]<std::shared_ptr<Espresso::abstract_blob_container> const*,std::shared_ptr<Espresso::abstract_blob_container> const*>(v1510.__r_.__value_.__r.__words[0] + 280, (uint64_t *)v1509, (uint64_t *)&v1509[0].__r_.__value_.__r.__words[2], 1uLL);
          v530 = (std::__shared_weak_count *)v1509[0].__r_.__value_.__l.__size_;
          if (v1509[0].__r_.__value_.__l.__size_)
          {
            v531 = (unint64_t *)(v1509[0].__r_.__value_.__l.__size_ + 8);
            do
              v532 = __ldaxr(v531);
            while (__stlxr(v532 - 1, v531));
            if (!v532)
            {
              ((void (*)(std::__shared_weak_count *))v530->__on_zero_shared)(v530);
              std::__shared_weak_count::__release_weak(v530);
            }
          }
          v533 = (std::__shared_weak_count *)v1510.__r_.__value_.__l.__size_;
          if (v1510.__r_.__value_.__l.__size_)
          {
            v534 = (unint64_t *)(v1510.__r_.__value_.__l.__size_ + 8);
            do
              v535 = __ldaxr(v534);
            while (__stlxr(v535 - 1, v534));
            if (!v535)
            {
              ((void (*)(std::__shared_weak_count *))v533->__on_zero_shared)(v533);
              std::__shared_weak_count::__release_weak(v533);
            }
          }
          v1509[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v1488;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v1509);
        }
        v536 = *(Espresso::net **)this;
        v537 = *(_QWORD *)(*(_QWORD *)this + 80);
        v538 = v1439;
        if (v537 <= v1439)
          goto LABEL_2522;
        *(_QWORD *)v1488 = v1439;
        v539 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)v536 + 56, v1439, v1488);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v539[4] - v539[3]) >> 3) < 2)
        {
          v536 = *(Espresso::net **)this;
          v537 = *(_QWORD *)(*(_QWORD *)this + 80);
LABEL_2522:
          *(_QWORD *)v1488 = v538;
          v1230 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)v536 + 56, v538, v1488);
          Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long,int &,unsigned long>(v537, v1439, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1230[4] - v1230[3]) >> 3));
        }
        v540 = *(_QWORD *)this + 56;
        *(_QWORD *)v1488 = v538;
        v541 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v540, v538, v1488)[3];
        if (*(char *)(v541 + 47) < 0)
          std::string::__init_copy_ctor_external(&v1512, *(const std::string::value_type **)(v541 + 24), *(_QWORD *)(v541 + 32));
        else
          v1512 = *(std::string *)(v541 + 24);
        if ((v1512.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v542 = HIBYTE(v1512.__r_.__value_.__r.__words[2]);
        else
          v542 = v1512.__r_.__value_.__l.__size_;
        std::string::basic_string[abi:ne180100]((uint64_t)&v1510, v542 + 5);
        if ((v1510.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v543 = &v1510;
        else
          v543 = (std::string *)v1510.__r_.__value_.__r.__words[0];
        if (v542)
        {
          if ((v1512.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v544 = &v1512;
          else
            v544 = (std::string *)v1512.__r_.__value_.__r.__words[0];
          memmove(v543, v544, v542);
        }
        strcpy((char *)v543 + v542, "/grad");
        std::string::basic_string[abi:ne180100]<0>(&lpsrc, "inner_product_weights_grad");
        if ((v1438 & 0x80u) == 0)
          v545 = v1438;
        else
          v545 = v1437;
        std::string::basic_string[abi:ne180100]((uint64_t)&v1507, v545 + 3);
        if ((v1507.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v546 = &v1507;
        else
          v546 = (std::string *)v1507.__r_.__value_.__r.__words[0];
        if (v545)
        {
          if ((v1438 & 0x80u) == 0)
            v547 = &v1436;
          else
            v547 = v1436;
          memmove(v546, v547, v545);
        }
        *(_DWORD *)((char *)&v546->__r_.__value_.__l.__data_ + v545) = 7824479;
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external((std::string *)v1488, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
        else
          *(std::string *)v1488 = __s;
        if (SHIBYTE(v1433.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v1488[24], v1433.__r_.__value_.__l.__data_, v1433.__r_.__value_.__l.__size_);
        }
        else
        {
          *(_OWORD *)&v1488[24] = *(_OWORD *)&v1433.__r_.__value_.__l.__data_;
          *(_QWORD *)&v1489 = *((_QWORD *)&v1433.__r_.__value_.__l + 2);
        }
        v1369 = 0;
        v1368 = 0;
        v1370 = 0;
        v1509[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v1368;
        v1509[0].__r_.__value_.__s.__data_[8] = 0;
        v1368 = (std::string *)operator new(0x30uLL);
        v1369 = v1368;
        v1370 = v1368 + 2;
        v1369 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v1370, (__int128 *)v1488, (__int128 *)((char *)&v1489 + 8), v1368);
        if (SHIBYTE(v1510.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v1505, v1510.__r_.__value_.__l.__data_, v1510.__r_.__value_.__l.__size_);
        else
          v1505 = v1510;
        v1366 = 0;
        v1365 = 0;
        v1367 = 0;
        v1509[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v1365;
        v1509[0].__r_.__value_.__s.__data_[8] = 0;
        v1365 = (std::string *)operator new(0x18uLL);
        v1366 = v1365;
        v1367 = v1365 + 1;
        v1366 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v1367, (__int128 *)&v1505, (__int128 *)&v1506, v1365);
        memset(v1509, 0, 24);
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v1509, (uint64_t)v1368, (uint64_t)v1369, 0xAAAAAAAAAAAAAAABLL * (((char *)v1369 - (char *)v1368) >> 3));
        __n[1] = 0;
        __n[0] = 0;
        *(_QWORD *)&v1504 = 0;
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(__n, (uint64_t)v1365, (uint64_t)v1366, 0xAAAAAAAAAAAAAAABLL * (((char *)v1366 - (char *)v1365) >> 3));
        add_with_context_transfers_t<Espresso::inner_product_uniforms>((uint64_t *)&v1501, (uint64_t)&v1458, (uint64_t)&lpsrc, (uint64_t)&v1507, (uint64_t)v1493, (uint64_t *)v1509, (uint64_t *)__n);
        v1514.__r_.__value_.__r.__words[0] = (std::string::size_type)__n;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1514);
        v1514.__r_.__value_.__r.__words[0] = (std::string::size_type)v1509;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1514);
        if (!(_QWORD)v1501
        {
          v1478.__end_ = 0;
          v1478.__begin_ = 0;
          v1228 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::operator+<char>();
          std::runtime_error::runtime_error(v1228, &v1514);
          __cxa_throw(v1228, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        v1478.__begin_ = v548;
        v1478.__end_ = (std::vector<std::string>::pointer)*((_QWORD *)&v1501 + 1);
        if (*((_QWORD *)&v1501 + 1))
        {
          v549 = (unint64_t *)(*((_QWORD *)&v1501 + 1) + 8);
          do
            v550 = __ldxr(v549);
          while (__stxr(v550 + 1, v549));
          v551 = (std::__shared_weak_count *)*((_QWORD *)&v1501 + 1);
          if (*((_QWORD *)&v1501 + 1))
          {
            v552 = (unint64_t *)(*((_QWORD *)&v1501 + 1) + 8);
            do
              v553 = __ldaxr(v552);
            while (__stlxr(v553 - 1, v552));
            if (!v553)
            {
              ((void (*)(std::__shared_weak_count *))v551->__on_zero_shared)(v551);
              std::__shared_weak_count::__release_weak(v551);
            }
          }
        }
        v1509[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v1365;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v1509);
        if (SHIBYTE(v1505.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v1505.__r_.__value_.__l.__data_);
        v1509[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v1368;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v1509);
        for (jj = 0; jj != -48; jj -= 24)
        {
          if (*((char *)&v1489 + jj + 7) < 0)
            operator delete(*(void **)&v1488[jj + 24]);
        }
        if (SHIBYTE(v1507.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v1507.__r_.__value_.__l.__data_);
        if (SHIBYTE(lpsrc.__r_.__value_.__r.__words[2]) < 0)
          operator delete(lpsrc.__r_.__value_.__l.__data_);
        v555 = v1391;
        (*((void (**)(_BYTE *__return_ptr, void **, _QWORD))*v1391 + 40))(v1488, v1391, 0);
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__assign_with_size[abi:ne180100]<std::shared_ptr<Espresso::abstract_blob_container> const*,std::shared_ptr<Espresso::abstract_blob_container> const*>((uint64_t)&v1478.__begin_[11].__r_.__value_.__r.__words[2], (uint64_t *)v1488, (uint64_t *)&v1488[16], 1uLL);
        v556 = *(std::__shared_weak_count **)&v1488[8];
        if (*(_QWORD *)&v1488[8])
        {
          v557 = (unint64_t *)(*(_QWORD *)&v1488[8] + 8);
          do
            v558 = __ldaxr(v557);
          while (__stlxr(v558 - 1, v557));
          if (!v558)
          {
            ((void (*)(std::__shared_weak_count *))v556->__on_zero_shared)(v556);
            std::__shared_weak_count::__release_weak(v556);
          }
        }
        std::string::basic_string[abi:ne180100]<0>(&lpsrc, "inner_product_grad");
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external((std::string *)v1488, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
        else
          *(std::string *)v1488 = __s;
        if (SHIBYTE(v1512.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v1488[24], v1512.__r_.__value_.__l.__data_, v1512.__r_.__value_.__l.__size_);
        }
        else
        {
          *(_OWORD *)&v1488[24] = *(_OWORD *)&v1512.__r_.__value_.__l.__data_;
          *(_QWORD *)&v1489 = *((_QWORD *)&v1512.__r_.__value_.__l + 2);
        }
        v1363 = 0;
        v1362 = 0;
        v1364 = 0;
        v1509[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v1362;
        v1509[0].__r_.__value_.__s.__data_[8] = 0;
        v1362 = (std::string *)operator new(0x30uLL);
        v1363 = v1362;
        v1364 = v1362 + 2;
        v1363 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v1364, (__int128 *)v1488, (__int128 *)((char *)&v1489 + 8), v1362);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v1507, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
        else
          v1507 = __str;
        v1360 = 0;
        v1359 = 0;
        v1361 = 0;
        v1509[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v1359;
        v1509[0].__r_.__value_.__s.__data_[8] = 0;
        v1359 = (std::string *)operator new(0x18uLL);
        v1360 = v1359;
        v1361 = v1359 + 1;
        v1360 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v1361, (__int128 *)&v1507, (__int128 *)&v1508, v1359);
        memset(v1509, 0, 24);
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v1509, (uint64_t)v1362, (uint64_t)v1363, 0xAAAAAAAAAAAAAAABLL * (((char *)v1363 - (char *)v1362) >> 3));
        __n[1] = 0;
        __n[0] = 0;
        *(_QWORD *)&v1504 = 0;
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(__n, (uint64_t)v1359, (uint64_t)v1360, 0xAAAAAAAAAAAAAAABLL * (((char *)v1360 - (char *)v1359) >> 3));
        add_with_context_transfers_t<Espresso::inner_product_uniforms>((uint64_t *)&v1505, (uint64_t)&v1458, (uint64_t)&lpsrc, (uint64_t)&v1436, (uint64_t)v1493, (uint64_t *)v1509, (uint64_t *)__n);
        v1514.__r_.__value_.__r.__words[0] = (std::string::size_type)__n;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1514);
        v1514.__r_.__value_.__r.__words[0] = (std::string::size_type)v1509;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1514);
        if (!v1505.__r_.__value_.__r.__words[0]
        {
          v1501 = 0uLL;
          v1229 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::operator+<char>();
          std::runtime_error::runtime_error(v1229, &v1514);
          __cxa_throw(v1229, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        *(_QWORD *)&v1501 = v559;
        *((_QWORD *)&v1501 + 1) = v1505.__r_.__value_.__l.__size_;
        if (v1505.__r_.__value_.__l.__size_)
        {
          v560 = (unint64_t *)(v1505.__r_.__value_.__l.__size_ + 8);
          do
            v561 = __ldxr(v560);
          while (__stxr(v561 + 1, v560));
          v562 = (std::__shared_weak_count *)v1505.__r_.__value_.__l.__size_;
          if (v1505.__r_.__value_.__l.__size_)
          {
            v563 = (unint64_t *)(v1505.__r_.__value_.__l.__size_ + 8);
            do
              v564 = __ldaxr(v563);
            while (__stlxr(v564 - 1, v563));
            if (!v564)
            {
              ((void (*)(std::__shared_weak_count *))v562->__on_zero_shared)(v562);
              std::__shared_weak_count::__release_weak(v562);
            }
          }
        }
        v1509[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v1359;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v1509);
        if (SHIBYTE(v1507.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v1507.__r_.__value_.__l.__data_);
        v1509[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v1362;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v1509);
        for (kk = 0; kk != -48; kk -= 24)
        {
          if (*((char *)&v1489 + kk + 7) < 0)
            operator delete(*(void **)&v1488[kk + 24]);
        }
        if (SHIBYTE(lpsrc.__r_.__value_.__r.__words[2]) < 0)
          operator delete(lpsrc.__r_.__value_.__l.__data_);
        (*((void (**)(_BYTE *__return_ptr, void **, _QWORD))*v555 + 40))(v1488, v555, 0);
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__assign_with_size[abi:ne180100]<std::shared_ptr<Espresso::abstract_blob_container> const*,std::shared_ptr<Espresso::abstract_blob_container> const*>(v1501 + 280, (uint64_t *)v1488, (uint64_t *)&v1488[16], 1uLL);
        v566 = *(std::__shared_weak_count **)&v1488[8];
        if (*(_QWORD *)&v1488[8])
        {
          v567 = (unint64_t *)(*(_QWORD *)&v1488[8] + 8);
          do
            v568 = __ldaxr(v567);
          while (__stlxr(v568 - 1, v567));
          if (!v568)
          {
            ((void (*)(std::__shared_weak_count *))v566->__on_zero_shared)(v566);
            std::__shared_weak_count::__release_weak(v566);
          }
        }
        v569 = (std::__shared_weak_count *)*((_QWORD *)&v1501 + 1);
        if (*((_QWORD *)&v1501 + 1))
        {
          v570 = (unint64_t *)(*((_QWORD *)&v1501 + 1) + 8);
          do
            v571 = __ldaxr(v570);
          while (__stlxr(v571 - 1, v570));
          if (!v571)
          {
            ((void (*)(std::__shared_weak_count *))v569->__on_zero_shared)(v569);
            std::__shared_weak_count::__release_weak(v569);
          }
        }
        end = (std::__shared_weak_count *)v1478.__end_;
        if (v1478.__end_)
        {
          p_size = &v1478.__end_->__r_.__value_.__l.__size_;
          do
            v574 = __ldaxr(p_size);
          while (__stlxr(v574 - 1, p_size));
          if (!v574)
          {
            ((void (*)(std::__shared_weak_count *))end->__on_zero_shared)(end);
            std::__shared_weak_count::__release_weak(end);
          }
        }
        if (SHIBYTE(v1510.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v1510.__r_.__value_.__l.__data_);
        if (SHIBYTE(v1512.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v1512.__r_.__value_.__l.__data_);
        v338 = 0;
        goto LABEL_1194;
      }
      v1392 = 0;
      v1391 = 0;
      if (!v247)
      {
        v1358 = 0;
        v1357 = 0;
        if (v261)
        {
          v262 = v261;
          v1331 = v261;
          v1332 = v1242;
          if (v1242)
          {
            v263 = (unint64_t *)&v1242->__shared_owners_;
            do
              v264 = __ldxr(v263);
            while (__stxr(v264 + 1, v263));
          }
          memset(&v1477, 0, sizeof(v1477));
          v265 = *(_QWORD *)this + 96;
          v266 = v1439;
          *(_QWORD *)v1493 = v1439;
          v267 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v265, v1439, v1493);
          if (v267[4] - v267[3] == 24)
          {
            v268 = *(_QWORD *)this + 96;
            *(_QWORD *)v1488 = v266;
            v269 = (const void **)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v268, v266, v1488)[3];
            if (*((char *)v269 + 23) >= 0)
              v270 = *((unsigned __int8 *)v269 + 23);
            else
              v270 = (size_t)v269[1];
            std::string::basic_string[abi:ne180100]((uint64_t)v1493, v270 + 9);
            if (v1493[23] >= 0)
              v271 = v1493;
            else
              v271 = *(_BYTE **)v1493;
            if (v270)
            {
              if (*((char *)v269 + 23) >= 0)
                v272 = v269;
              else
                v272 = *v269;
              memmove(v271, v272, v270);
            }
            strcpy(&v271[v270], "_mask_f32");
            if (SHIBYTE(v1477.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v1477.__r_.__value_.__l.__data_);
            v1477 = *(std::string *)v1493;
          }
          else
          {
            v513 = *(_QWORD *)this + 96;
            *(_QWORD *)v1493 = v266;
            v514 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v513, v266, v1493);
            std::string::operator=(&v1477, (const std::string *)(v514[3] + 24));
          }
          std::string::basic_string[abi:ne180100]<0>(&v1486, "dropout_grad");
          v515 = (*(uint64_t (**)(void *))(*(_QWORD *)v262 + 320))(v262);
          if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external((std::string *)v1493, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
          else
            *(std::string *)v1493 = __s;
          if (SHIBYTE(v1477.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external((std::string *)&v1493[24], v1477.__r_.__value_.__l.__data_, v1477.__r_.__value_.__l.__size_);
          else
            *(std::string *)&v1493[24] = v1477;
          v1328 = 0;
          v1327 = 0;
          v1329 = 0;
          *(_QWORD *)v1488 = &v1327;
          v1488[8] = 0;
          v1327 = (std::string *)operator new(0x30uLL);
          v1328 = v1327;
          v1329 = v1327 + 2;
          v1328 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v1329, (__int128 *)v1493, (__int128 *)&v1493[48], v1327);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v1484, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
          else
            v1484 = __str;
          v1325 = 0;
          v1324 = 0;
          v1326 = 0;
          *(_QWORD *)v1488 = &v1324;
          v1488[8] = 0;
          v1237 = v515;
          v1324 = (std::string *)operator new(0x18uLL);
          v1325 = v1324;
          v1326 = v1324 + 1;
          v1325 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v1326, (__int128 *)&v1484, (__int128 *)&v1485, v1324);
          *(_OWORD *)&v1512.__r_.__value_.__r.__words[1] = 0uLL;
          v1512.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1512.__r_.__value_.__l.__size_;
          LODWORD(v1296) = 0;
          v594 = v1327;
          v1252 = v1328;
          if (v1327 != v1328)
          {
            v595 = 0;
            while (1)
            {
              if (SHIBYTE(v594->__r_.__value_.__r.__words[2]) < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)v1488, v594->__r_.__value_.__l.__data_, v594->__r_.__value_.__l.__size_);
              }
              else
              {
                v596 = *(_OWORD *)&v594->__r_.__value_.__l.__data_;
                *(_QWORD *)&v1488[16] = *((_QWORD *)&v594->__r_.__value_.__l + 2);
                *(_OWORD *)v1488 = v596;
              }
              v597 = v1464;
              v598 = *(_QWORD *)(v1464 + 32);
              if (*(_QWORD *)(v1464 + 40) != v598)
                break;
LABEL_1290:
              LODWORD(v1296) = ++v595;
              if ((v1488[23] & 0x80000000) != 0)
                operator delete(*(void **)v1488);
              if (++v594 == v1252)
              {
                v622 = v1327;
                v594 = v1328;
                goto LABEL_1295;
              }
            }
            v599 = 0;
            while (1)
            {
              v600 = *(_QWORD *)(*(_QWORD *)(v598 + 16 * v599) + 64);
              v602 = *(_QWORD *)(v600 + 8);
              v601 = *(_QWORD *)(v600 + 16);
              __n[0] = v602;
              __n[1] = v601;
              if (v601)
              {
                v603 = (unint64_t *)(v601 + 8);
                do
                  v604 = __ldxr(v603);
                while (__stxr(v604 + 1, v603));
                v597 = v1464;
              }
              v1509[0].__r_.__value_.__r.__words[0] = v599;
              v605 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v597 + 96, v599, v1509);
              v607 = (__int128 *)v605[3];
              v606 = (__int128 *)v605[4];
              if (v607 != v606)
                break;
LABEL_1283:
              v619 = (std::__shared_weak_count *)__n[1];
              if (__n[1])
              {
                v620 = (unint64_t *)(__n[1] + 8);
                do
                  v621 = __ldaxr(v620);
                while (__stlxr(v621 - 1, v620));
                if (!v621)
                {
                  ((void (*)(std::__shared_weak_count *))v619->__on_zero_shared)(v619);
                  std::__shared_weak_count::__release_weak(v619);
                }
              }
              ++v599;
              v597 = v1464;
              v598 = *(_QWORD *)(v1464 + 32);
              if (v599 >= (*(_QWORD *)(v1464 + 40) - v598) >> 4)
              {
                v595 = (int)v1296;
                goto LABEL_1290;
              }
            }
            v608 = __n[0];
            v609 = (int)v1296;
            while (2)
            {
              if (*((char *)v607 + 23) < 0)
              {
                std::string::__init_copy_ctor_external(v1509, *(const std::string::value_type **)v607, *((_QWORD *)v607 + 1));
              }
              else
              {
                v610 = *v607;
                v1509[0].__r_.__value_.__r.__words[2] = *((_QWORD *)v607 + 2);
                *(_OWORD *)&v1509[0].__r_.__value_.__l.__data_ = v610;
              }
              v611 = HIBYTE(v1509[0].__r_.__value_.__r.__words[2]);
              v612 = HIBYTE(v1509[0].__r_.__value_.__r.__words[2]);
              if ((v1509[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v613 = HIBYTE(v1509[0].__r_.__value_.__r.__words[2]);
              else
                v613 = v1509[0].__r_.__value_.__l.__size_;
              v614 = v1488[23];
              if (v1488[23] < 0)
                v614 = *(_QWORD *)&v1488[8];
              if (v613 == v614)
              {
                if (v1488[23] >= 0)
                  v615 = v1488;
                else
                  v615 = *(unsigned __int8 **)v1488;
                if ((SHIBYTE(v1509[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
                  if (*((_BYTE *)&v1509[0].__r_.__value_.__s + 23))
                  {
                    v616 = v1509;
                    while (v616->__r_.__value_.__s.__data_[0] == *v615)
                    {
                      v616 = (std::string *)((char *)v616 + 1);
                      ++v615;
                      if (!--v611)
                        goto LABEL_1277;
                    }
                    goto LABEL_1279;
                  }
LABEL_1277:
                  if (v608 != (_QWORD)v1468)
                  {
                    v618 = std::__tree<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::__map_value_compare<std::shared_ptr<Espresso::abstract_context>,std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::less<std::shared_ptr<Espresso::abstract_context>>,true>,std::allocator<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>>>::__emplace_unique_key_args<std::shared_ptr<Espresso::abstract_context>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<Espresso::abstract_context> const&>,std::tuple<>>((uint64_t **)&v1512, v608, (uint64_t *)__n);
                    *((_DWORD *)std::__tree<std::__value_type<Espresso::platform,int>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,int>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,int>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform const&>,std::tuple<>>((uint64_t **)v618 + 6, v609, (unsigned int *)&v1296)+ 8) = 1;
                    v612 = HIBYTE(v1509[0].__r_.__value_.__r.__words[2]);
                  }
                  goto LABEL_1279;
                }
                v617 = (void *)v1509[0].__r_.__value_.__r.__words[0];
                if (!memcmp(v1509[0].__r_.__value_.__l.__data_, v615, v1509[0].__r_.__value_.__l.__size_))
                  goto LABEL_1277;
LABEL_1281:
                operator delete(v617);
              }
              else
              {
LABEL_1279:
                if (v612 < 0)
                {
                  v617 = (void *)v1509[0].__r_.__value_.__r.__words[0];
                  goto LABEL_1281;
                }
              }
              v607 = (__int128 *)((char *)v607 + 24);
              if (v607 == v606)
                goto LABEL_1283;
              continue;
            }
          }
          v622 = v1327;
LABEL_1295:
          memset(&v1510, 0, sizeof(v1510));
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v1510, (uint64_t)v622, (uint64_t)v594, 0xAAAAAAAAAAAAAAABLL * (((char *)v594 - (char *)v622) >> 3));
          v623 = (std::string::size_type *)v1512.__r_.__value_.__r.__words[0];
          v624 = v1512.__r_.__value_.__r.__words[0] == (_QWORD)&v1512.__r_.__value_.__l.__size_;
          while (2)
          {
            if (v624)
            {
              v1474 = 1;
              memset(&lpsrc, 0, sizeof(lpsrc));
              std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&lpsrc, (uint64_t)v1510.__r_.__value_.__l.__data_, v1510.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(v1510.__r_.__value_.__l.__size_ - v1510.__r_.__value_.__r.__words[0]) >> 3));
              memset(&v1507, 0, sizeof(v1507));
              std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v1507, (uint64_t)v1324, (uint64_t)v1325, 0xAAAAAAAAAAAAAAABLL * (((char *)v1325 - (char *)v1324) >> 3));
              *(_QWORD *)&v1504 = 0;
              __n[0] = 0;
              __n[1] = 0;
              std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(__n, (uint64_t)lpsrc.__r_.__value_.__l.__data_, lpsrc.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(lpsrc.__r_.__value_.__l.__size_ - lpsrc.__r_.__value_.__r.__words[0]) >> 3));
              memset(&v1514, 0, sizeof(v1514));
              std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v1514, (uint64_t)v1507.__r_.__value_.__l.__data_, v1507.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(v1507.__r_.__value_.__l.__size_ - v1507.__r_.__value_.__r.__words[0]) >> 3));
              v702 = v1466;
              *(_DWORD *)v1488 = (***(uint64_t (****)(_QWORD))(v1468 + 8))(*(_QWORD *)(v1468 + 8));
              Espresso::abstract_engine_factory::make_kernel_priv(v702, (uint64_t)&v1468, (uint64_t)&v1486, v1237, (int *)v1488);
              *(_OWORD *)&v1505.__r_.__value_.__l.__data_ = v1330;
              if (*((_QWORD *)&v1330 + 1))
              {
                v703 = (unint64_t *)(*((_QWORD *)&v1330 + 1) + 8);
                do
                  v704 = __ldxr(v703);
                while (__stxr(v704 + 1, v703));
              }
              memset(v1488, 0, 24);
              std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v1488, __n[0], __n[1], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(__n[1] - __n[0]) >> 3));
              memset(v1509, 0, 24);
              std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v1509, (uint64_t)v1514.__r_.__value_.__l.__data_, v1514.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(v1514.__r_.__value_.__l.__size_ - v1514.__r_.__value_.__r.__words[0]) >> 3));
              Espresso::sequential_builder::add_kernel_dbg((uint64_t)&v1458, (uint64_t *)&v1505, (uint64_t)&v1486, (uint64_t)&v1436, (uint64_t)v1462, (std::string **)v1488, (std::string **)v1509);
              v1482.__r_.__value_.__r.__words[0] = (std::string::size_type)v1509;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1482);
              v1482.__r_.__value_.__r.__words[0] = (std::string::size_type)v1488;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1482);
              v705 = (std::__shared_weak_count *)v1505.__r_.__value_.__l.__size_;
              if (v1505.__r_.__value_.__l.__size_)
              {
                v706 = (unint64_t *)(v1505.__r_.__value_.__l.__size_ + 8);
                do
                  v707 = __ldaxr(v706);
                while (__stlxr(v707 - 1, v706));
                if (!v707)
                {
                  ((void (*)(std::__shared_weak_count *))v705->__on_zero_shared)(v705);
                  std::__shared_weak_count::__release_weak(v705);
                }
              }
              if ((_QWORD)v1458)
                Espresso::sequential_builder::add_shape_from_kernel((uint64_t *)&v1458, v1330, (__int128 **)__n, (uint64_t *)&v1514);
              *(_QWORD *)v1488 = &v1514;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v1488);
              *(_QWORD *)v1488 = __n;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v1488);
              *(_QWORD *)v1488 = &v1507;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v1488);
              *(_QWORD *)v1488 = &lpsrc;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v1488);
              *(_QWORD *)v1488 = &v1510;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v1488);
              std::__tree<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::__map_value_compare<std::shared_ptr<Espresso::abstract_context>,std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::less<std::shared_ptr<Espresso::abstract_context>>,true>,std::allocator<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>>>::destroy((_QWORD *)v1512.__r_.__value_.__l.__size_);
              v708 = (std::__shared_weak_count *)*((_QWORD *)&v1330 + 1);
              if (*((_QWORD *)&v1330 + 1))
              {
                v709 = (unint64_t *)(*((_QWORD *)&v1330 + 1) + 8);
                do
                  v710 = __ldaxr(v709);
                while (__stlxr(v710 - 1, v709));
                if (!v710)
                {
                  ((void (*)(std::__shared_weak_count *))v708->__on_zero_shared)(v708);
                  std::__shared_weak_count::__release_weak(v708);
                }
              }
              *(_QWORD *)v1488 = &v1324;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v1488);
              if (SHIBYTE(v1484.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v1484.__r_.__value_.__l.__data_);
              *(_QWORD *)v1488 = &v1327;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v1488);
              for (mm = 0; mm != -48; mm -= 24)
              {
                if ((char)v1493[mm + 47] < 0)
                  operator delete(*(void **)&v1493[mm + 24]);
              }
              if (SHIBYTE(v1486.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v1486.__r_.__value_.__l.__data_);
              v712 = *(_QWORD *)this + 96;
              v713 = v1439;
              *(_QWORD *)v1493 = v1439;
              v714 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v712, v1439, v1493);
              if (v714[4] - v714[3] == 24)
              {
                v715 = *(_QWORD *)this + 96;
                *(_QWORD *)v1493 = v713;
                v716 = (char **)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v715, v713, v1493);
                v717 = v716;
                v718 = v716[4];
                if (v718 >= v716[5])
                {
                  v734 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v716 + 3, (uint64_t)&v1477);
                }
                else
                {
                  if (SHIBYTE(v1477.__r_.__value_.__r.__words[2]) < 0)
                  {
                    std::string::__init_copy_ctor_external((std::string *)v716[4], v1477.__r_.__value_.__l.__data_, v1477.__r_.__value_.__l.__size_);
                  }
                  else
                  {
                    v719 = *(_OWORD *)&v1477.__r_.__value_.__l.__data_;
                    *((_QWORD *)v718 + 2) = *((_QWORD *)&v1477.__r_.__value_.__l + 2);
                    *(_OWORD *)v718 = v719;
                  }
                  v734 = (std::string *)(v718 + 24);
                  v717[4] = v718 + 24;
                }
                v717[4] = (char *)v734;
                v769 = *(_QWORD *)this + 96;
                *(_QWORD *)v1488 = v713;
                *(_QWORD *)v1493 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v769, v713, v1488)[3];
                v770 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&__p, *(_QWORD **)v1493, (__int128 **)v1493);
                *(_QWORD *)v1493 = &v1477;
                v771 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&__p, &v1477, (__int128 **)v1493);
                v772 = *(_OWORD *)(v770 + 56);
                v773 = *(_OWORD *)(v770 + 72);
                *((_QWORD *)v771 + 11) = *((_QWORD *)v770 + 11);
                *(_OWORD *)(v771 + 72) = v773;
                *(_OWORD *)(v771 + 56) = v772;
                if (v771 != v770)
                  std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v771 + 96, *((char **)v770 + 12), *((_QWORD *)v770 + 13), (uint64_t)(*((_QWORD *)v770 + 13) - *((_QWORD *)v770 + 12)) >> 2);
              }
              if (SHIBYTE(v1477.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v1477.__r_.__value_.__l.__data_);
              v338 = 0;
              goto LABEL_1596;
            }
            std::pair<std::shared_ptr<Espresso::abstract_context> const,std::map<int,int>>::pair[abi:ne180100](v1488, v623 + 4);
            v625 = *(_OWORD *)v1488;
            if (*(_QWORD *)&v1488[8])
            {
              v626 = (unint64_t *)(*(_QWORD *)&v1488[8] + 8);
              do
                v627 = __ldxr(v626);
              while (__stxr(v627 + 1, v626));
            }
            __n[1] = 0;
            __n[0] = 0;
            *(_QWORD *)&v1504 = 0;
            memset(&v1514, 0, sizeof(v1514));
            std::string::basic_string[abi:ne180100]<0>(&lpsrc, "");
            v628 = *(_BYTE **)&v1488[16];
            if (*(_BYTE **)&v1488[16] == &v1488[24])
              goto LABEL_1401;
LABEL_1301:
            v629 = *((_DWORD *)v628 + 7);
            v630 = &v1327[v629];
            if (SHIBYTE(v630->__r_.__value_.__r.__words[2]) < 0)
            {
              std::string::__init_copy_ctor_external(v1509, v630->__r_.__value_.__l.__data_, v630->__r_.__value_.__l.__size_);
            }
            else
            {
              v631 = *(_OWORD *)&v630->__r_.__value_.__l.__data_;
              v1509[0].__r_.__value_.__r.__words[2] = v630->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v1509[0].__r_.__value_.__l.__data_ = v631;
            }
            if ((v1509[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v632 = HIBYTE(v1509[0].__r_.__value_.__r.__words[2]);
            else
              v632 = v1509[0].__r_.__value_.__l.__size_;
            if ((v1509[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v633 = v1509;
            else
              v633 = (std::string *)v1509[0].__r_.__value_.__r.__words[0];
            if (v632 >= 4)
            {
              v634 = (std::string *)((char *)v633 + v632);
              v635 = v632;
              v636 = v633;
              do
              {
                v637 = (std::string *)memchr(v636, 99, v635 - 3);
                if (!v637)
                  break;
                if (LODWORD(v637->__r_.__value_.__l.__data_) == 1601532003)
                {
                  if (v637 != v634 && v637 == v633)
                  {
                    std::string::basic_string(&v1507, v1509, 4uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v1505);
                    goto LABEL_1328;
                  }
                  break;
                }
                v636 = (std::string *)((char *)&v637->__r_.__value_.__l.__data_ + 1);
                v635 = (char *)v634 - (char *)v636;
              }
              while ((char *)v634 - (char *)v636 >= 4);
            }
            std::string::basic_string[abi:ne180100]((uint64_t)&v1507, v632 + 3);
            if ((v1507.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v638 = &v1507;
            else
              v638 = (std::string *)v1507.__r_.__value_.__r.__words[0];
            if (v632)
            {
              if ((v1509[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v639 = v1509;
              else
                v639 = (std::string *)v1509[0].__r_.__value_.__r.__words[0];
              memmove(v638, v639, v632);
            }
            *(_DWORD *)((char *)&v638->__r_.__value_.__l.__data_ + v632) = 7894111;
LABEL_1328:
            v640 = v1510.__r_.__value_.__r.__words[0] + 24 * v629;
            if (*(char *)(v640 + 23) < 0)
              operator delete(*(void **)v640);
            v641 = *(_OWORD *)&v1507.__r_.__value_.__l.__data_;
            *(_QWORD *)(v640 + 16) = *((_QWORD *)&v1507.__r_.__value_.__l + 2);
            *(_OWORD *)v640 = v641;
            v642 = v1464;
            if (*(_QWORD *)(v1464 + 40) == *(_QWORD *)(v1464 + 32))
            {
LABEL_1360:
              v657 = &v1327[v629];
              v658 = (_OWORD *)__n[1];
              if (__n[1] >= (unint64_t)v1504)
              {
                v660 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)__n, (uint64_t)v657);
              }
              else
              {
                if (SHIBYTE(v657->__r_.__value_.__r.__words[2]) < 0)
                {
                  std::string::__init_copy_ctor_external((std::string *)__n[1], v657->__r_.__value_.__l.__data_, v657->__r_.__value_.__l.__size_);
                }
                else
                {
                  v659 = *(_OWORD *)&v657->__r_.__value_.__l.__data_;
                  *(_QWORD *)(__n[1] + 16) = *((_QWORD *)&v657->__r_.__value_.__l + 2);
                  *v658 = v659;
                }
                v660 = (std::string *)((char *)v658 + 24);
              }
              __n[1] = (std::string::size_type)v660;
              v661 = v1510.__r_.__value_.__r.__words[0] + 24 * v629;
              v662 = (_OWORD *)v1514.__r_.__value_.__l.__size_;
              if (v1514.__r_.__value_.__l.__size_ >= v1514.__r_.__value_.__r.__words[2])
              {
                v664 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&v1514.__r_.__value_.__l.__data_, v661);
              }
              else
              {
                if (*(char *)(v661 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external((std::string *)v1514.__r_.__value_.__l.__size_, *(const std::string::value_type **)v661, *(_QWORD *)(v661 + 8));
                }
                else
                {
                  v663 = *(_OWORD *)v661;
                  *(_QWORD *)(v1514.__r_.__value_.__l.__size_ + 16) = *(_QWORD *)(v661 + 16);
                  *v662 = v663;
                }
                v664 = (std::string *)((char *)v662 + 24);
              }
              v1514.__r_.__value_.__l.__size_ = (std::string::size_type)v664;
              if ((lpsrc.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v665 = HIBYTE(lpsrc.__r_.__value_.__r.__words[2]);
              else
                v665 = lpsrc.__r_.__value_.__l.__size_;
              std::string::basic_string[abi:ne180100]((uint64_t)&v1507, v665 + 1);
              if ((v1507.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v666 = &v1507;
              else
                v666 = (std::string *)v1507.__r_.__value_.__r.__words[0];
              if (v665)
              {
                if ((lpsrc.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  p_lpsrc = &lpsrc;
                else
                  p_lpsrc = (std::string *)lpsrc.__r_.__value_.__r.__words[0];
                memmove(v666, p_lpsrc, v665);
              }
              *(_WORD *)((char *)&v666->__r_.__value_.__l.__data_ + v665) = 95;
              v668 = &v1327[v629];
              v669 = SHIBYTE(v668->__r_.__value_.__r.__words[2]);
              if (v669 >= 0)
                v670 = &v1327[v629];
              else
                v670 = (std::string *)v668->__r_.__value_.__r.__words[0];
              if (v669 >= 0)
                v671 = HIBYTE(v668->__r_.__value_.__r.__words[2]);
              else
                v671 = v668->__r_.__value_.__l.__size_;
              v672 = std::string::append(&v1507, (const std::string::value_type *)v670, v671);
              v673 = v672->__r_.__value_.__r.__words[0];
              v1505.__r_.__value_.__r.__words[0] = v672->__r_.__value_.__l.__size_;
              *(std::string::size_type *)((char *)v1505.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v672->__r_.__value_.__r.__words[1] + 7);
              v674 = HIBYTE(v672->__r_.__value_.__r.__words[2]);
              v672->__r_.__value_.__l.__size_ = 0;
              v672->__r_.__value_.__r.__words[2] = 0;
              v672->__r_.__value_.__r.__words[0] = 0;
              if (SHIBYTE(lpsrc.__r_.__value_.__r.__words[2]) < 0)
                operator delete(lpsrc.__r_.__value_.__l.__data_);
              lpsrc.__r_.__value_.__r.__words[0] = v673;
              lpsrc.__r_.__value_.__l.__size_ = v1505.__r_.__value_.__r.__words[0];
              *(std::string::size_type *)((char *)&lpsrc.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v1505.__r_.__value_.__r.__words + 7);
              *((_BYTE *)&lpsrc.__r_.__value_.__s + 23) = v674;
              if (SHIBYTE(v1507.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v1507.__r_.__value_.__l.__data_);
              goto LABEL_1393;
            }
            v643 = 0;
            v644 = 0;
LABEL_1332:
            v1507.__r_.__value_.__r.__words[0] = v643;
            v645 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v642 + 96, v643, &v1507);
            v646 = (__int128 *)v645[3];
            v647 = (__int128 *)v645[4];
LABEL_1333:
            if (v646 == v647)
            {
              ++v643;
              v642 = v1464;
              if (v643 >= (uint64_t)(*(_QWORD *)(v1464 + 40) - *(_QWORD *)(v1464 + 32)) >> 4)
              {
                if ((v644 & 1) == 0)
                  goto LABEL_1360;
LABEL_1393:
                if (SHIBYTE(v1509[0].__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v1509[0].__r_.__value_.__l.__data_);
                v675 = (_QWORD *)*((_QWORD *)v628 + 1);
                if (v675)
                {
                  do
                  {
                    v676 = v675;
                    v675 = (_QWORD *)*v675;
                  }
                  while (v675);
                }
                else
                {
                  do
                  {
                    v676 = (_BYTE *)*((_QWORD *)v628 + 2);
                    _ZF = *(_QWORD *)v676 == (_QWORD)v628;
                    v628 = v676;
                  }
                  while (!_ZF);
                }
                v628 = v676;
                if (v676 == &v1488[24])
                {
LABEL_1401:
                  if (v1514.__r_.__value_.__l.__size_ != v1514.__r_.__value_.__r.__words[0])
                  {
                    memset(v1509, 0, 32);
                    std::string::basic_string[abi:ne180100]<0>(&v1507, "context_transfer");
                    if ((lpsrc.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v677 = HIBYTE(lpsrc.__r_.__value_.__r.__words[2]);
                    else
                      v677 = lpsrc.__r_.__value_.__l.__size_;
                    std::string::basic_string[abi:ne180100]((uint64_t)&v1505, v677 + 3);
                    if ((v1505.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v678 = &v1505;
                    else
                      v678 = (std::string *)v1505.__r_.__value_.__r.__words[0];
                    if (v677)
                    {
                      if ((lpsrc.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                        v679 = &lpsrc;
                      else
                        v679 = (std::string *)lpsrc.__r_.__value_.__r.__words[0];
                      memmove(v678, v679, v677);
                    }
                    *(_DWORD *)((char *)&v678->__r_.__value_.__l.__data_ + v677) = 7894111;
                    v1501 = 0uLL;
                    v1502 = 0;
                    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v1501, __n[0], __n[1], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(__n[1] - __n[0]) >> 3));
                    memset(&v1478, 0, sizeof(v1478));
                    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v1478, (uint64_t)v1514.__r_.__value_.__l.__data_, v1514.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(v1514.__r_.__value_.__l.__size_ - v1514.__r_.__value_.__r.__words[0]) >> 3));
                    Espresso::sequential_builder::add<Espresso::context_transfer_params>((uint64_t *)&v1482, (uint64_t *)&v1458, (uint64_t)&v1507, (uint64_t)&v1505, (uint64_t)v1509, v1501, *((uint64_t *)&v1501 + 1), (uint64_t *)&v1478);
                    v1306 = &v1478;
                    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1306);
                    v1306 = (std::vector<std::string> *)&v1501;
                    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1306);
                    if (SHIBYTE(v1505.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v1505.__r_.__value_.__l.__data_);
                    if (SHIBYTE(v1507.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v1507.__r_.__value_.__l.__data_);
                    if (v1482.__r_.__value_.__r.__words[0]
                    {
                      v681 = v680;
                      v1507.__r_.__value_.__r.__words[0] = (std::string::size_type)v680;
                      v1507.__r_.__value_.__l.__size_ = v1482.__r_.__value_.__l.__size_;
                      if (v1482.__r_.__value_.__l.__size_)
                      {
                        v682 = (unint64_t *)(v1482.__r_.__value_.__l.__size_ + 8);
                        do
                          v683 = __ldxr(v682);
                        while (__stxr(v683 + 1, v682));
                      }
                    }
                    else
                    {
                      v681 = 0;
                      *(_OWORD *)&v1507.__r_.__value_.__l.__data_ = 0uLL;
                    }
                    LODWORD(v1306) = 0;
                    Espresso::create_context((int *)&v1306, &v1505);
                    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v681 + 39, v1468, *((uint64_t *)&v1468 + 1));
                    v684 = v1507.__r_.__value_.__r.__words[0];
                    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(v1507.__r_.__value_.__r.__words[0] + 328), v625, *((uint64_t *)&v625 + 1));
                    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(v684 + 8), v1468, *((uint64_t *)&v1468 + 1));
                    v685 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)(v684 + 312) + 8))(*(_QWORD *)(*(_QWORD *)(v684 + 312) + 8));
                    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v1464 + 40) - 16) + 8) = v685;
                    v686 = (std::__shared_weak_count *)v1505.__r_.__value_.__l.__size_;
                    if (v1505.__r_.__value_.__l.__size_)
                    {
                      v687 = (unint64_t *)(v1505.__r_.__value_.__l.__size_ + 8);
                      do
                        v688 = __ldaxr(v687);
                      while (__stlxr(v688 - 1, v687));
                      if (!v688)
                      {
                        ((void (*)(std::__shared_weak_count *))v686->__on_zero_shared)(v686);
                        std::__shared_weak_count::__release_weak(v686);
                      }
                    }
                    v689 = (std::__shared_weak_count *)v1507.__r_.__value_.__l.__size_;
                    if (v1507.__r_.__value_.__l.__size_)
                    {
                      v690 = (unint64_t *)(v1507.__r_.__value_.__l.__size_ + 8);
                      do
                        v691 = __ldaxr(v690);
                      while (__stlxr(v691 - 1, v690));
                      if (!v691)
                      {
                        ((void (*)(std::__shared_weak_count *))v689->__on_zero_shared)(v689);
                        std::__shared_weak_count::__release_weak(v689);
                      }
                    }
                    v692 = (std::__shared_weak_count *)v1482.__r_.__value_.__l.__size_;
                    if (v1482.__r_.__value_.__l.__size_)
                    {
                      v693 = (unint64_t *)(v1482.__r_.__value_.__l.__size_ + 8);
                      do
                        v694 = __ldaxr(v693);
                      while (__stlxr(v694 - 1, v693));
                      if (!v694)
                      {
                        ((void (*)(std::__shared_weak_count *))v692->__on_zero_shared)(v692);
                        std::__shared_weak_count::__release_weak(v692);
                      }
                    }
                  }
                  if (SHIBYTE(lpsrc.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(lpsrc.__r_.__value_.__l.__data_);
                  v1509[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v1514;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v1509);
                  v1509[0].__r_.__value_.__r.__words[0] = (std::string::size_type)__n;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v1509);
                  if (*((_QWORD *)&v625 + 1))
                  {
                    v695 = (unint64_t *)(*((_QWORD *)&v625 + 1) + 8);
                    do
                      v696 = __ldaxr(v695);
                    while (__stlxr(v696 - 1, v695));
                    if (!v696)
                    {
                      (*(void (**)(_QWORD))(**((_QWORD **)&v625 + 1) + 16))(*((_QWORD *)&v625 + 1));
                      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v625 + 1));
                    }
                  }
                  std::__tree<int>::destroy(*(_QWORD **)&v1488[24]);
                  v697 = *(std::__shared_weak_count **)&v1488[8];
                  if (*(_QWORD *)&v1488[8])
                  {
                    v698 = (unint64_t *)(*(_QWORD *)&v1488[8] + 8);
                    do
                      v699 = __ldaxr(v698);
                    while (__stlxr(v699 - 1, v698));
                    if (!v699)
                    {
                      ((void (*)(std::__shared_weak_count *))v697->__on_zero_shared)(v697);
                      std::__shared_weak_count::__release_weak(v697);
                    }
                  }
                  v700 = (std::string::size_type *)v623[1];
                  if (v700)
                  {
                    do
                    {
                      v701 = v700;
                      v700 = (std::string::size_type *)*v700;
                    }
                    while (v700);
                  }
                  else
                  {
                    do
                    {
                      v701 = (std::string::size_type *)v623[2];
                      _ZF = *v701 == (_QWORD)v623;
                      v623 = v701;
                    }
                    while (!_ZF);
                  }
                  v623 = v701;
                  v624 = v701 == &v1512.__r_.__value_.__r.__words[1];
                  continue;
                }
                goto LABEL_1301;
              }
              goto LABEL_1332;
            }
            break;
          }
          if (*((char *)v646 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v1507, *(const std::string::value_type **)v646, *((_QWORD *)v646 + 1));
          }
          else
          {
            v648 = *v646;
            v1507.__r_.__value_.__r.__words[2] = *((_QWORD *)v646 + 2);
            *(_OWORD *)&v1507.__r_.__value_.__l.__data_ = v648;
          }
          v649 = v1510.__r_.__value_.__r.__words[0] + 24 * v629;
          if ((v1507.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v650 = HIBYTE(v1507.__r_.__value_.__r.__words[2]);
          else
            v650 = v1507.__r_.__value_.__l.__size_;
          v651 = *(unsigned __int8 *)(v649 + 23);
          v652 = (char)v651;
          if ((v651 & 0x80u) != 0)
            v651 = *(_QWORD *)(v649 + 8);
          if (v650 == v651)
          {
            if (v652 >= 0)
              v653 = (unsigned __int8 *)(v1510.__r_.__value_.__r.__words[0] + 24 * v629);
            else
              v653 = *(unsigned __int8 **)v649;
            if ((*((_BYTE *)&v1507.__r_.__value_.__s + 23) & 0x80) == 0)
            {
              if (*((_BYTE *)&v1507.__r_.__value_.__s + 23))
              {
                v654 = &v1507;
                v655 = HIBYTE(v1507.__r_.__value_.__r.__words[2]);
                while (v654->__r_.__value_.__s.__data_[0] == *v653)
                {
                  v654 = (std::string *)((char *)v654 + 1);
                  ++v653;
                  if (!--v655)
                  {
                    v644 = 1;
                    goto LABEL_1352;
                  }
                }
                goto LABEL_1352;
              }
              v644 = 1;
LABEL_1357:
              v646 = (__int128 *)((char *)v646 + 24);
              goto LABEL_1333;
            }
            v656 = (void *)v1507.__r_.__value_.__r.__words[0];
            v644 |= memcmp(v1507.__r_.__value_.__l.__data_, v653, v1507.__r_.__value_.__l.__size_) == 0;
          }
          else
          {
LABEL_1352:
            if ((*((_BYTE *)&v1507.__r_.__value_.__s + 23) & 0x80) == 0)
              goto LABEL_1357;
            v656 = (void *)v1507.__r_.__value_.__r.__words[0];
          }
          operator delete(v656);
          goto LABEL_1357;
        }
        v1332 = 0;
        v1331 = 0;
        if (v508)
        {
          v509 = v508;
          v1482.__r_.__value_.__r.__words[0] = (std::string::size_type)v508;
          v1482.__r_.__value_.__l.__size_ = (std::string::size_type)v1242;
          if (v1242)
          {
            v510 = (unint64_t *)&v1242->__shared_owners_;
            do
              v511 = __ldxr(v510);
            while (__stxr(v511 + 1, v510));
          }
          if (*(_DWORD *)(*(uint64_t (**)(void *))(*(_QWORD *)v508 + 384))(v508))
          {
            std::string::basic_string[abi:ne180100]<0>(v1488, "activation_grad");
            v512 = (*(uint64_t (**)(void *))(*(_QWORD *)v509 + 384))(v509);
            if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external((std::string *)v1493, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
            else
              *(std::string *)v1493 = __s;
            if (SHIBYTE(v1433.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external((std::string *)&v1493[24], v1433.__r_.__value_.__l.__data_, v1433.__r_.__value_.__l.__size_);
            else
              *(std::string *)&v1493[24] = v1433;
            if (SHIBYTE(v1432.__r_.__value_.__r.__words[2]) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)&v1493[48], v1432.__r_.__value_.__l.__data_, v1432.__r_.__value_.__l.__size_);
            }
            else
            {
              *(_OWORD *)&v1493[48] = *(_OWORD *)&v1432.__r_.__value_.__l.__data_;
              *(_QWORD *)&v1494 = *((_QWORD *)&v1432.__r_.__value_.__l + 2);
            }
            v1312 = 0;
            v1311 = 0;
            v1313 = 0;
            v1509[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v1311;
            v1509[0].__r_.__value_.__s.__data_[8] = 0;
            v1311 = (std::string *)operator new(0x48uLL);
            v1312 = v1311;
            v1313 = v1311 + 3;
            v1312 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v1313, (__int128 *)v1493, (__int128 *)((char *)&v1494 + 8), v1311);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(v1509, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
            else
              v1509[0] = __str;
            v1309 = 0;
            v1308 = 0;
            v1310 = 0;
            __n[0] = (std::string::size_type)&v1308;
            LOBYTE(__n[1]) = 0;
            v1308 = (std::string *)operator new(0x18uLL);
            v1309 = v1308;
            v1310 = v1308 + 1;
            v1309 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v1310, (__int128 *)v1509, (__int128 *)&v1509[1], v1308);
            add_with_context_transfers_t<Espresso::activation_params>(&v1314, (uint64_t)&v1458, (uint64_t)v1488, (uint64_t)&v1436, v512, (uint64_t *)&v1311, (uint64_t *)&v1308);
            v765 = v1315;
            if (v1315)
            {
              v766 = (unint64_t *)&v1315->__shared_owners_;
              do
                v767 = __ldaxr(v766);
              while (__stlxr(v767 - 1, v766));
              if (!v767)
              {
                ((void (*)(std::__shared_weak_count *))v765->__on_zero_shared)(v765);
                std::__shared_weak_count::__release_weak(v765);
              }
            }
            __n[0] = (std::string::size_type)&v1308;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__n);
            if (SHIBYTE(v1509[0].__r_.__value_.__r.__words[2]) < 0)
              operator delete(v1509[0].__r_.__value_.__l.__data_);
            v1509[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v1311;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v1509);
            for (nn = 0; nn != -72; nn -= 24)
            {
              if (*((char *)&v1494 + nn + 7) < 0)
                operator delete(*(void **)&v1493[nn + 48]);
            }
          }
          else
          {
            std::string::basic_string[abi:ne180100]<0>(v1488, "activation_grad");
            v756 = (*(uint64_t (**)(void *))(*(_QWORD *)v509 + 384))(v509);
            if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external((std::string *)v1493, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
            else
              *(std::string *)v1493 = __s;
            if (SHIBYTE(v1433.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external((std::string *)&v1493[24], v1433.__r_.__value_.__l.__data_, v1433.__r_.__value_.__l.__size_);
            else
              *(std::string *)&v1493[24] = v1433;
            v1320 = 0;
            v1319 = 0;
            v1321 = 0;
            v1509[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v1319;
            v1509[0].__r_.__value_.__s.__data_[8] = 0;
            v1319 = (std::string *)operator new(0x30uLL);
            v1320 = v1319;
            v1321 = v1319 + 2;
            v1320 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v1321, (__int128 *)v1493, (__int128 *)&v1493[48], v1319);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(v1509, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
            else
              v1509[0] = __str;
            v1317 = 0;
            v1316 = 0;
            v1318 = 0;
            __n[0] = (std::string::size_type)&v1316;
            LOBYTE(__n[1]) = 0;
            v1316 = (std::string *)operator new(0x18uLL);
            v1317 = v1316;
            v1318 = v1316 + 1;
            v1317 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v1318, (__int128 *)v1509, (__int128 *)&v1509[1], v1316);
            add_with_context_transfers_t<Espresso::activation_params>(&v1322, (uint64_t)&v1458, (uint64_t)v1488, (uint64_t)&v1436, v756, (uint64_t *)&v1319, (uint64_t *)&v1316);
            v786 = v1323;
            if (v1323)
            {
              v787 = (unint64_t *)&v1323->__shared_owners_;
              do
                v788 = __ldaxr(v787);
              while (__stlxr(v788 - 1, v787));
              if (!v788)
              {
                ((void (*)(std::__shared_weak_count *))v786->__on_zero_shared)(v786);
                std::__shared_weak_count::__release_weak(v786);
              }
            }
            __n[0] = (std::string::size_type)&v1316;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__n);
            if (SHIBYTE(v1509[0].__r_.__value_.__r.__words[2]) < 0)
              operator delete(v1509[0].__r_.__value_.__l.__data_);
            v1509[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v1319;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v1509);
            for (i1 = 0; i1 != -48; i1 -= 24)
            {
              if ((char)v1493[i1 + 47] < 0)
                operator delete(*(void **)&v1493[i1 + 24]);
            }
          }
          if ((v1488[23] & 0x80000000) != 0)
            operator delete(*(void **)v1488);
          v338 = 0;
LABEL_1630:
          v790 = (std::__shared_weak_count *)v1482.__r_.__value_.__l.__size_;
          if (v1482.__r_.__value_.__l.__size_)
          {
            v791 = (unint64_t *)(v1482.__r_.__value_.__l.__size_ + 8);
            do
              v792 = __ldaxr(v791);
            while (__stlxr(v792 - 1, v791));
            if (!v792)
            {
              ((void (*)(std::__shared_weak_count *))v790->__on_zero_shared)(v790);
              std::__shared_weak_count::__release_weak(v790);
            }
          }
LABEL_1596:
          v774 = v1332;
          if (v1332)
          {
            v775 = (unint64_t *)&v1332->__shared_owners_;
            do
              v776 = __ldaxr(v775);
            while (__stlxr(v776 - 1, v775));
            if (!v776)
            {
              ((void (*)(std::__shared_weak_count *))v774->__on_zero_shared)(v774);
              std::__shared_weak_count::__release_weak(v774);
            }
          }
          goto LABEL_1562;
        }
        *(_OWORD *)&v1482.__r_.__value_.__l.__data_ = 0uLL;
        if (v735)
        {
          v736 = v735;
          v1306 = (std::vector<std::string> *)v735;
          v1307 = v1242;
          if (v1242)
          {
            v737 = (unint64_t *)&v1242->__shared_owners_;
            do
              v738 = __ldxr(v737);
            while (__stxr(v738 + 1, v737));
          }
          memset(&v1478, 0, sizeof(v1478));
          v739 = *(_QWORD *)this + 56;
          *(_QWORD *)v1493 = v1439;
          v740 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v739, v1439, v1493);
          v741 = (__int128 *)v740[3];
          v742 = (__int128 *)v740[4];
          while (v741 != v742)
          {
            if (*((char *)v741 + 23) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)v1488, *(const std::string::value_type **)v741, *((_QWORD *)v741 + 1));
            }
            else
            {
              v743 = *v741;
              *(_QWORD *)&v1488[16] = *((_QWORD *)v741 + 2);
              *(_OWORD *)v1488 = v743;
            }
            if (v1488[23] >= 0)
              v744 = v1488[23];
            else
              v744 = *(_QWORD *)&v1488[8];
            std::string::basic_string[abi:ne180100]((uint64_t)v1509, v744 + 5);
            if ((v1509[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v745 = v1509;
            else
              v745 = (std::string *)v1509[0].__r_.__value_.__r.__words[0];
            if (v744)
            {
              if (v1488[23] >= 0)
                v746 = v1488;
              else
                v746 = *(_BYTE **)v1488;
              memmove(v745, v746, v744);
            }
            strcpy((char *)v745 + v744, "_diff");
            v747 = v1478.__end_;
            if (v1478.__end_ >= v1478.__end_cap_.__value_)
            {
              v749 = 0xAAAAAAAAAAAAAAABLL * (((char *)v1478.__end_ - (char *)v1478.__begin_) >> 3);
              v750 = v749 + 1;
              if (v749 + 1 > 0xAAAAAAAAAAAAAAALL)
                std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
              if (0x5555555555555556 * (((char *)v1478.__end_cap_.__value_ - (char *)v1478.__begin_) >> 3) > v750)
                v750 = 0x5555555555555556 * (((char *)v1478.__end_cap_.__value_ - (char *)v1478.__begin_) >> 3);
              if (0xAAAAAAAAAAAAAAABLL * (((char *)v1478.__end_cap_.__value_ - (char *)v1478.__begin_) >> 3) >= 0x555555555555555)
                v751 = 0xAAAAAAAAAAAAAAALL;
              else
                v751 = v750;
              *(_QWORD *)&v1493[32] = &v1478.__end_cap_;
              if (v751)
                v751 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v751);
              else
                v752 = 0;
              v753 = v751 + 24 * v749;
              *(_QWORD *)v1493 = v751;
              *(_QWORD *)&v1493[8] = v753;
              *(_QWORD *)&v1493[24] = v751 + 24 * v752;
              v754 = *(_OWORD *)&v1509[0].__r_.__value_.__l.__data_;
              *(_QWORD *)(v753 + 16) = *((_QWORD *)&v1509[0].__r_.__value_.__l + 2);
              *(_OWORD *)v753 = v754;
              memset(v1509, 0, 24);
              *(_QWORD *)&v1493[16] = v753 + 24;
              std::vector<std::string>::__swap_out_circular_buffer(&v1478, (std::__split_buffer<std::string> *)v1493);
              v755 = v1478.__end_;
              std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)v1493);
              v1478.__end_ = v755;
              if (SHIBYTE(v1509[0].__r_.__value_.__r.__words[2]) < 0)
                operator delete(v1509[0].__r_.__value_.__l.__data_);
            }
            else
            {
              v748 = *(_OWORD *)&v1509[0].__r_.__value_.__l.__data_;
              v1478.__end_->__r_.__value_.__r.__words[2] = v1509[0].__r_.__value_.__r.__words[2];
              *(_OWORD *)&v747->__r_.__value_.__l.__data_ = v748;
              v1478.__end_ = v747 + 1;
            }
            if ((v1488[23] & 0x80000000) != 0)
              operator delete(*(void **)v1488);
            v741 = (__int128 *)((char *)v741 + 24);
          }
          std::string::basic_string[abi:ne180100]<0>(&v1477, "concat_grad");
          v1238 = (*((uint64_t (**)(void **))*v736 + 40))(v736);
          if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v1486, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
          else
            v1486 = __s;
          v1302 = 0;
          v1301 = 0;
          v1303 = 0;
          *(_QWORD *)v1493 = &v1301;
          v1493[8] = 0;
          v1301 = (std::string *)operator new(0x18uLL);
          v1302 = v1301;
          v1303 = v1301 + 1;
          v1302 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v1303, (__int128 *)&v1486, (__int128 *)&v1487, v1301);
          v1300 = 0;
          v1298 = 0;
          v1299 = 0;
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v1298, (uint64_t)v1478.__begin_, (uint64_t)v1478.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v1478.__end_ - (char *)v1478.__begin_) >> 3));
          *(_OWORD *)&v1509[0].__r_.__value_.__r.__words[1] = 0uLL;
          v1509[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v1509[0].__r_.__value_.__l.__size_;
          LODWORD(v1286) = 0;
          v793 = v1301;
          v1253 = v1302;
          if (v1301 != v1302)
          {
            v794 = 0;
            while (1)
            {
              if (SHIBYTE(v793->__r_.__value_.__r.__words[2]) < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)v1493, v793->__r_.__value_.__l.__data_, v793->__r_.__value_.__l.__size_);
              }
              else
              {
                v795 = *(_OWORD *)&v793->__r_.__value_.__l.__data_;
                *(_QWORD *)&v1493[16] = *((_QWORD *)&v793->__r_.__value_.__l + 2);
                *(_OWORD *)v1493 = v795;
              }
              v796 = v1464;
              v797 = *(_QWORD *)(v1464 + 32);
              if (*(_QWORD *)(v1464 + 40) != v797)
                break;
LABEL_1681:
              LODWORD(v1286) = ++v794;
              if ((v1493[23] & 0x80000000) != 0)
                operator delete(*(void **)v1493);
              if (++v793 == v1253)
              {
                v821 = v1301;
                v793 = v1302;
                goto LABEL_1686;
              }
            }
            v798 = 0;
            while (1)
            {
              v799 = *(_QWORD *)(*(_QWORD *)(v797 + 16 * v798) + 64);
              v801 = *(_QWORD *)(v799 + 8);
              v800 = *(_QWORD *)(v799 + 16);
              __n[0] = v801;
              __n[1] = v800;
              if (v800)
              {
                v802 = (unint64_t *)(v800 + 8);
                do
                  v803 = __ldxr(v802);
                while (__stxr(v803 + 1, v802));
                v796 = v1464;
              }
              *(_QWORD *)v1488 = v798;
              v804 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v796 + 96, v798, v1488);
              v806 = (__int128 *)v804[3];
              v805 = (__int128 *)v804[4];
              if (v806 != v805)
                break;
LABEL_1674:
              v818 = (std::__shared_weak_count *)__n[1];
              if (__n[1])
              {
                v819 = (unint64_t *)(__n[1] + 8);
                do
                  v820 = __ldaxr(v819);
                while (__stlxr(v820 - 1, v819));
                if (!v820)
                {
                  ((void (*)(std::__shared_weak_count *))v818->__on_zero_shared)(v818);
                  std::__shared_weak_count::__release_weak(v818);
                }
              }
              ++v798;
              v796 = v1464;
              v797 = *(_QWORD *)(v1464 + 32);
              if (v798 >= (*(_QWORD *)(v1464 + 40) - v797) >> 4)
              {
                v794 = (int)v1286;
                goto LABEL_1681;
              }
            }
            v807 = __n[0];
            v808 = (int)v1286;
            while (2)
            {
              if (*((char *)v806 + 23) < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)v1488, *(const std::string::value_type **)v806, *((_QWORD *)v806 + 1));
              }
              else
              {
                v809 = *v806;
                *(_QWORD *)&v1488[16] = *((_QWORD *)v806 + 2);
                *(_OWORD *)v1488 = v809;
              }
              v810 = v1488[23];
              v811 = v1488[23];
              if (v1488[23] >= 0)
                v812 = v1488[23];
              else
                v812 = *(_QWORD *)&v1488[8];
              v813 = v1493[23];
              if (v1493[23] < 0)
                v813 = *(_QWORD *)&v1493[8];
              if (v812 == v813)
              {
                if (v1493[23] >= 0)
                  v814 = v1493;
                else
                  v814 = *(unsigned __int8 **)v1493;
                if ((v1488[23] & 0x80000000) == 0)
                {
                  if (v1488[23])
                  {
                    v815 = v1488;
                    while (*v815 == *v814)
                    {
                      ++v815;
                      ++v814;
                      if (!--v810)
                        goto LABEL_1668;
                    }
                    goto LABEL_1670;
                  }
LABEL_1668:
                  if (v807 != (_QWORD)v1468)
                  {
                    v817 = std::__tree<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::__map_value_compare<std::shared_ptr<Espresso::abstract_context>,std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::less<std::shared_ptr<Espresso::abstract_context>>,true>,std::allocator<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>>>::__emplace_unique_key_args<std::shared_ptr<Espresso::abstract_context>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<Espresso::abstract_context> const&>,std::tuple<>>((uint64_t **)v1509, v807, (uint64_t *)__n);
                    *((_DWORD *)std::__tree<std::__value_type<Espresso::platform,int>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,int>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,int>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform const&>,std::tuple<>>((uint64_t **)v817 + 6, v808, (unsigned int *)&v1286)+ 8) = 1;
                    v811 = v1488[23];
                  }
                  goto LABEL_1670;
                }
                v816 = *(void **)v1488;
                if (!memcmp(*(const void **)v1488, v814, *(size_t *)&v1488[8]))
                  goto LABEL_1668;
LABEL_1672:
                operator delete(v816);
              }
              else
              {
LABEL_1670:
                if (v811 < 0)
                {
                  v816 = *(void **)v1488;
                  goto LABEL_1672;
                }
              }
              v806 = (__int128 *)((char *)v806 + 24);
              if (v806 == v805)
                goto LABEL_1674;
              continue;
            }
          }
          v821 = v1301;
LABEL_1686:
          __n[1] = 0;
          __n[0] = 0;
          *(_QWORD *)&v1504 = 0;
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(__n, (uint64_t)v821, (uint64_t)v793, 0xAAAAAAAAAAAAAAABLL * (((char *)v793 - (char *)v821) >> 3));
          v822 = (std::string::size_type *)v1509[0].__r_.__value_.__r.__words[0];
          v823 = v1509[0].__r_.__value_.__r.__words[0] == (_QWORD)&v1509[0].__r_.__value_.__l.__size_;
          while (2)
          {
            if (v823)
            {
              v1474 = 1;
              memset(v1493, 0, 24);
              std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v1493, __n[0], __n[1], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(__n[1] - __n[0]) >> 3));
              memset(v1488, 0, 24);
              std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v1488, v1298, v1299, 0xAAAAAAAAAAAAAAABLL * ((v1299 - v1298) >> 3));
              Espresso::sequential_builder::add<Espresso::concat_params>(&v1304, (uint64_t *)&v1458, (uint64_t)&v1477, (uint64_t)&v1436, v1238, *(uint64_t *)v1493, *(uint64_t *)&v1493[8], (uint64_t *)v1488);
              v1514.__r_.__value_.__r.__words[0] = (std::string::size_type)v1488;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1514);
              v1514.__r_.__value_.__r.__words[0] = (std::string::size_type)v1493;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1514);
              v1514.__r_.__value_.__r.__words[0] = (std::string::size_type)__n;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1514);
              std::__tree<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::__map_value_compare<std::shared_ptr<Espresso::abstract_context>,std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::less<std::shared_ptr<Espresso::abstract_context>>,true>,std::allocator<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>>>::destroy((_QWORD *)v1509[0].__r_.__value_.__l.__size_);
              v901 = v1305;
              if (v1305)
              {
                v902 = (unint64_t *)&v1305->__shared_owners_;
                do
                  v903 = __ldaxr(v902);
                while (__stlxr(v903 - 1, v902));
                if (!v903)
                {
                  ((void (*)(std::__shared_weak_count *))v901->__on_zero_shared)(v901);
                  std::__shared_weak_count::__release_weak(v901);
                }
              }
              *(_QWORD *)v1493 = &v1298;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v1493);
              *(_QWORD *)v1493 = &v1301;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v1493);
              if (SHIBYTE(v1486.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v1486.__r_.__value_.__l.__data_);
              if (SHIBYTE(v1477.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v1477.__r_.__value_.__l.__data_);
              *(_QWORD *)v1493 = &v1478;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v1493);
              v338 = 0;
              goto LABEL_1858;
            }
            std::pair<std::shared_ptr<Espresso::abstract_context> const,std::map<int,int>>::pair[abi:ne180100](v1493, v822 + 4);
            v824 = *(_OWORD *)v1493;
            if (*(_QWORD *)&v1493[8])
            {
              v825 = (unint64_t *)(*(_QWORD *)&v1493[8] + 8);
              do
                v826 = __ldxr(v825);
              while (__stxr(v826 + 1, v825));
            }
            memset(&v1514, 0, sizeof(v1514));
            memset(&v1512, 0, sizeof(v1512));
            std::string::basic_string[abi:ne180100]<0>(&v1510, "");
            v827 = *(_BYTE **)&v1493[16];
            if (*(_BYTE **)&v1493[16] == &v1493[24])
              goto LABEL_1792;
LABEL_1692:
            v828 = *((_DWORD *)v827 + 7);
            v829 = &v1301[v828];
            if (SHIBYTE(v829->__r_.__value_.__r.__words[2]) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)v1488, v829->__r_.__value_.__l.__data_, v829->__r_.__value_.__l.__size_);
            }
            else
            {
              v830 = *(_OWORD *)&v829->__r_.__value_.__l.__data_;
              *(_QWORD *)&v1488[16] = *((_QWORD *)&v829->__r_.__value_.__l + 2);
              *(_OWORD *)v1488 = v830;
            }
            if (v1488[23] >= 0)
              v831 = v1488[23];
            else
              v831 = *(_QWORD *)&v1488[8];
            if (v1488[23] >= 0)
              v832 = v1488;
            else
              v832 = *(char **)v1488;
            if (v831 >= 4)
            {
              v833 = &v832[v831];
              v834 = v831;
              v835 = v832;
              do
              {
                v836 = (char *)memchr(v835, 99, v834 - 3);
                if (!v836)
                  break;
                if (*(_DWORD *)v836 == 1601532003)
                {
                  if (v836 != v833 && v836 == v832)
                  {
                    std::string::basic_string(&lpsrc, (const std::string *)v1488, 4uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v1507);
                    goto LABEL_1719;
                  }
                  break;
                }
                v835 = v836 + 1;
                v834 = v833 - v835;
              }
              while (v833 - v835 >= 4);
            }
            std::string::basic_string[abi:ne180100]((uint64_t)&lpsrc, v831 + 3);
            if ((lpsrc.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v837 = &lpsrc;
            else
              v837 = (std::string *)lpsrc.__r_.__value_.__r.__words[0];
            if (v831)
            {
              if (v1488[23] >= 0)
                v838 = v1488;
              else
                v838 = *(_BYTE **)v1488;
              memmove(v837, v838, v831);
            }
            *(_DWORD *)((char *)&v837->__r_.__value_.__l.__data_ + v831) = 7894111;
LABEL_1719:
            v839 = __n[0] + 24 * v828;
            if (*(char *)(v839 + 23) < 0)
              operator delete(*(void **)v839);
            v840 = *(_OWORD *)&lpsrc.__r_.__value_.__l.__data_;
            *(_QWORD *)(v839 + 16) = *((_QWORD *)&lpsrc.__r_.__value_.__l + 2);
            *(_OWORD *)v839 = v840;
            v841 = v1464;
            if (*(_QWORD *)(v1464 + 40) == *(_QWORD *)(v1464 + 32))
            {
LABEL_1751:
              v856 = &v1301[v828];
              v857 = (_OWORD *)v1514.__r_.__value_.__l.__size_;
              if (v1514.__r_.__value_.__l.__size_ >= v1514.__r_.__value_.__r.__words[2])
              {
                v859 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&v1514.__r_.__value_.__l.__data_, (uint64_t)v856);
              }
              else
              {
                if (SHIBYTE(v856->__r_.__value_.__r.__words[2]) < 0)
                {
                  std::string::__init_copy_ctor_external((std::string *)v1514.__r_.__value_.__l.__size_, v856->__r_.__value_.__l.__data_, v856->__r_.__value_.__l.__size_);
                }
                else
                {
                  v858 = *(_OWORD *)&v856->__r_.__value_.__l.__data_;
                  *(_QWORD *)(v1514.__r_.__value_.__l.__size_ + 16) = *((_QWORD *)&v856->__r_.__value_.__l + 2);
                  *v857 = v858;
                }
                v859 = (std::string *)((char *)v857 + 24);
              }
              v1514.__r_.__value_.__l.__size_ = (std::string::size_type)v859;
              v860 = __n[0] + 24 * v828;
              v861 = (_OWORD *)v1512.__r_.__value_.__l.__size_;
              if (v1512.__r_.__value_.__l.__size_ >= v1512.__r_.__value_.__r.__words[2])
              {
                v863 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&v1512.__r_.__value_.__l.__data_, v860);
              }
              else
              {
                if (*(char *)(v860 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external((std::string *)v1512.__r_.__value_.__l.__size_, *(const std::string::value_type **)v860, *(_QWORD *)(v860 + 8));
                }
                else
                {
                  v862 = *(_OWORD *)v860;
                  *(_QWORD *)(v1512.__r_.__value_.__l.__size_ + 16) = *(_QWORD *)(v860 + 16);
                  *v861 = v862;
                }
                v863 = (std::string *)((char *)v861 + 24);
              }
              v1512.__r_.__value_.__l.__size_ = (std::string::size_type)v863;
              if ((v1510.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v864 = HIBYTE(v1510.__r_.__value_.__r.__words[2]);
              else
                v864 = v1510.__r_.__value_.__l.__size_;
              std::string::basic_string[abi:ne180100]((uint64_t)&lpsrc, v864 + 1);
              if ((lpsrc.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v865 = &lpsrc;
              else
                v865 = (std::string *)lpsrc.__r_.__value_.__r.__words[0];
              if (v864)
              {
                if ((v1510.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v866 = &v1510;
                else
                  v866 = (std::string *)v1510.__r_.__value_.__r.__words[0];
                memmove(v865, v866, v864);
              }
              *(_WORD *)((char *)&v865->__r_.__value_.__l.__data_ + v864) = 95;
              v867 = &v1301[v828];
              v868 = SHIBYTE(v867->__r_.__value_.__r.__words[2]);
              if (v868 >= 0)
                v869 = &v1301[v828];
              else
                v869 = (std::string *)v867->__r_.__value_.__r.__words[0];
              if (v868 >= 0)
                v870 = HIBYTE(v867->__r_.__value_.__r.__words[2]);
              else
                v870 = v867->__r_.__value_.__l.__size_;
              v871 = std::string::append(&lpsrc, (const std::string::value_type *)v869, v870);
              v872 = v871->__r_.__value_.__r.__words[0];
              v1507.__r_.__value_.__r.__words[0] = v871->__r_.__value_.__l.__size_;
              *(std::string::size_type *)((char *)v1507.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v871->__r_.__value_.__r.__words[1] + 7);
              v873 = HIBYTE(v871->__r_.__value_.__r.__words[2]);
              v871->__r_.__value_.__l.__size_ = 0;
              v871->__r_.__value_.__r.__words[2] = 0;
              v871->__r_.__value_.__r.__words[0] = 0;
              if (SHIBYTE(v1510.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v1510.__r_.__value_.__l.__data_);
              v1510.__r_.__value_.__r.__words[0] = v872;
              v1510.__r_.__value_.__l.__size_ = v1507.__r_.__value_.__r.__words[0];
              *(std::string::size_type *)((char *)&v1510.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v1507.__r_.__value_.__r.__words + 7);
              *((_BYTE *)&v1510.__r_.__value_.__s + 23) = v873;
              if (SHIBYTE(lpsrc.__r_.__value_.__r.__words[2]) < 0)
                operator delete(lpsrc.__r_.__value_.__l.__data_);
              goto LABEL_1784;
            }
            v842 = 0;
            v843 = 0;
LABEL_1723:
            lpsrc.__r_.__value_.__r.__words[0] = v842;
            v844 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v841 + 96, v842, &lpsrc);
            v845 = (__int128 *)v844[3];
            v846 = (__int128 *)v844[4];
LABEL_1724:
            if (v845 == v846)
            {
              ++v842;
              v841 = v1464;
              if (v842 >= (uint64_t)(*(_QWORD *)(v1464 + 40) - *(_QWORD *)(v1464 + 32)) >> 4)
              {
                if ((v843 & 1) == 0)
                  goto LABEL_1751;
LABEL_1784:
                if ((v1488[23] & 0x80000000) != 0)
                  operator delete(*(void **)v1488);
                v874 = (_QWORD *)*((_QWORD *)v827 + 1);
                if (v874)
                {
                  do
                  {
                    v875 = v874;
                    v874 = (_QWORD *)*v874;
                  }
                  while (v874);
                }
                else
                {
                  do
                  {
                    v875 = (_BYTE *)*((_QWORD *)v827 + 2);
                    _ZF = *(_QWORD *)v875 == (_QWORD)v827;
                    v827 = v875;
                  }
                  while (!_ZF);
                }
                v827 = v875;
                if (v875 == &v1493[24])
                {
LABEL_1792:
                  if (v1512.__r_.__value_.__l.__size_ != v1512.__r_.__value_.__r.__words[0])
                  {
                    memset(v1488, 0, 32);
                    std::string::basic_string[abi:ne180100]<0>(&lpsrc, "context_transfer");
                    if ((v1510.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v876 = HIBYTE(v1510.__r_.__value_.__r.__words[2]);
                    else
                      v876 = v1510.__r_.__value_.__l.__size_;
                    std::string::basic_string[abi:ne180100]((uint64_t)&v1507, v876 + 3);
                    if ((v1507.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v877 = &v1507;
                    else
                      v877 = (std::string *)v1507.__r_.__value_.__r.__words[0];
                    if (v876)
                    {
                      if ((v1510.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                        v878 = &v1510;
                      else
                        v878 = (std::string *)v1510.__r_.__value_.__r.__words[0];
                      memmove(v877, v878, v876);
                    }
                    *(_DWORD *)((char *)&v877->__r_.__value_.__l.__data_ + v876) = 7894111;
                    memset(&v1505, 0, sizeof(v1505));
                    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v1505, (uint64_t)v1514.__r_.__value_.__l.__data_, v1514.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(v1514.__r_.__value_.__l.__size_ - v1514.__r_.__value_.__r.__words[0]) >> 3));
                    v1501 = 0uLL;
                    v1502 = 0;
                    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v1501, (uint64_t)v1512.__r_.__value_.__l.__data_, v1512.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(v1512.__r_.__value_.__l.__size_ - v1512.__r_.__value_.__r.__words[0]) >> 3));
                    Espresso::sequential_builder::add<Espresso::context_transfer_params>((uint64_t *)&v1484, (uint64_t *)&v1458, (uint64_t)&lpsrc, (uint64_t)&v1507, (uint64_t)v1488, (uint64_t)v1505.__r_.__value_.__l.__data_, v1505.__r_.__value_.__l.__size_, (uint64_t *)&v1501);
                    v1296 = (std::string *)&v1501;
                    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1296);
                    v1296 = &v1505;
                    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1296);
                    if (SHIBYTE(v1507.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v1507.__r_.__value_.__l.__data_);
                    if (SHIBYTE(lpsrc.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(lpsrc.__r_.__value_.__l.__data_);
                    if (v1484.__r_.__value_.__r.__words[0]
                    {
                      v880 = v879;
                      lpsrc.__r_.__value_.__r.__words[0] = (std::string::size_type)v879;
                      lpsrc.__r_.__value_.__l.__size_ = v1484.__r_.__value_.__l.__size_;
                      if (v1484.__r_.__value_.__l.__size_)
                      {
                        v881 = (unint64_t *)(v1484.__r_.__value_.__l.__size_ + 8);
                        do
                          v882 = __ldxr(v881);
                        while (__stxr(v882 + 1, v881));
                      }
                    }
                    else
                    {
                      v880 = 0;
                      *(_OWORD *)&lpsrc.__r_.__value_.__l.__data_ = 0uLL;
                    }
                    LODWORD(v1296) = 0;
                    Espresso::create_context((int *)&v1296, &v1507);
                    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v880 + 39, v1468, *((uint64_t *)&v1468 + 1));
                    v883 = lpsrc.__r_.__value_.__r.__words[0];
                    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(lpsrc.__r_.__value_.__r.__words[0] + 328), v824, *((uint64_t *)&v824 + 1));
                    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(v883 + 8), v1468, *((uint64_t *)&v1468 + 1));
                    v884 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)(v883 + 312) + 8))(*(_QWORD *)(*(_QWORD *)(v883 + 312) + 8));
                    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v1464 + 40) - 16) + 8) = v884;
                    v885 = (std::__shared_weak_count *)v1507.__r_.__value_.__l.__size_;
                    if (v1507.__r_.__value_.__l.__size_)
                    {
                      v886 = (unint64_t *)(v1507.__r_.__value_.__l.__size_ + 8);
                      do
                        v887 = __ldaxr(v886);
                      while (__stlxr(v887 - 1, v886));
                      if (!v887)
                      {
                        ((void (*)(std::__shared_weak_count *))v885->__on_zero_shared)(v885);
                        std::__shared_weak_count::__release_weak(v885);
                      }
                    }
                    v888 = (std::__shared_weak_count *)lpsrc.__r_.__value_.__l.__size_;
                    if (lpsrc.__r_.__value_.__l.__size_)
                    {
                      v889 = (unint64_t *)(lpsrc.__r_.__value_.__l.__size_ + 8);
                      do
                        v890 = __ldaxr(v889);
                      while (__stlxr(v890 - 1, v889));
                      if (!v890)
                      {
                        ((void (*)(std::__shared_weak_count *))v888->__on_zero_shared)(v888);
                        std::__shared_weak_count::__release_weak(v888);
                      }
                    }
                    v891 = (std::__shared_weak_count *)v1484.__r_.__value_.__l.__size_;
                    if (v1484.__r_.__value_.__l.__size_)
                    {
                      v892 = (unint64_t *)(v1484.__r_.__value_.__l.__size_ + 8);
                      do
                        v893 = __ldaxr(v892);
                      while (__stlxr(v893 - 1, v892));
                      if (!v893)
                      {
                        ((void (*)(std::__shared_weak_count *))v891->__on_zero_shared)(v891);
                        std::__shared_weak_count::__release_weak(v891);
                      }
                    }
                  }
                  if (SHIBYTE(v1510.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v1510.__r_.__value_.__l.__data_);
                  *(_QWORD *)v1488 = &v1512;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v1488);
                  *(_QWORD *)v1488 = &v1514;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v1488);
                  if (*((_QWORD *)&v824 + 1))
                  {
                    v894 = (unint64_t *)(*((_QWORD *)&v824 + 1) + 8);
                    do
                      v895 = __ldaxr(v894);
                    while (__stlxr(v895 - 1, v894));
                    if (!v895)
                    {
                      (*(void (**)(_QWORD))(**((_QWORD **)&v824 + 1) + 16))(*((_QWORD *)&v824 + 1));
                      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v824 + 1));
                    }
                  }
                  std::__tree<int>::destroy(*(_QWORD **)&v1493[24]);
                  v896 = *(std::__shared_weak_count **)&v1493[8];
                  if (*(_QWORD *)&v1493[8])
                  {
                    v897 = (unint64_t *)(*(_QWORD *)&v1493[8] + 8);
                    do
                      v898 = __ldaxr(v897);
                    while (__stlxr(v898 - 1, v897));
                    if (!v898)
                    {
                      ((void (*)(std::__shared_weak_count *))v896->__on_zero_shared)(v896);
                      std::__shared_weak_count::__release_weak(v896);
                    }
                  }
                  v899 = (std::string::size_type *)v822[1];
                  if (v899)
                  {
                    do
                    {
                      v900 = v899;
                      v899 = (std::string::size_type *)*v899;
                    }
                    while (v899);
                  }
                  else
                  {
                    do
                    {
                      v900 = (std::string::size_type *)v822[2];
                      _ZF = *v900 == (_QWORD)v822;
                      v822 = v900;
                    }
                    while (!_ZF);
                  }
                  v822 = v900;
                  v823 = v900 == &v1509[0].__r_.__value_.__r.__words[1];
                  continue;
                }
                goto LABEL_1692;
              }
              goto LABEL_1723;
            }
            break;
          }
          if (*((char *)v845 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&lpsrc, *(const std::string::value_type **)v845, *((_QWORD *)v845 + 1));
          }
          else
          {
            v847 = *v845;
            lpsrc.__r_.__value_.__r.__words[2] = *((_QWORD *)v845 + 2);
            *(_OWORD *)&lpsrc.__r_.__value_.__l.__data_ = v847;
          }
          v848 = __n[0] + 24 * v828;
          if ((lpsrc.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v849 = HIBYTE(lpsrc.__r_.__value_.__r.__words[2]);
          else
            v849 = lpsrc.__r_.__value_.__l.__size_;
          v850 = *(unsigned __int8 *)(v848 + 23);
          v851 = (char)v850;
          if ((v850 & 0x80u) != 0)
            v850 = *(_QWORD *)(v848 + 8);
          if (v849 == v850)
          {
            if (v851 >= 0)
              v852 = (unsigned __int8 *)(__n[0] + 24 * v828);
            else
              v852 = *(unsigned __int8 **)v848;
            if ((*((_BYTE *)&lpsrc.__r_.__value_.__s + 23) & 0x80) == 0)
            {
              if (*((_BYTE *)&lpsrc.__r_.__value_.__s + 23))
              {
                v853 = &lpsrc;
                v854 = HIBYTE(lpsrc.__r_.__value_.__r.__words[2]);
                while (v853->__r_.__value_.__s.__data_[0] == *v852)
                {
                  v853 = (std::string *)((char *)v853 + 1);
                  ++v852;
                  if (!--v854)
                  {
                    v843 = 1;
                    goto LABEL_1743;
                  }
                }
                goto LABEL_1743;
              }
              v843 = 1;
LABEL_1748:
              v845 = (__int128 *)((char *)v845 + 24);
              goto LABEL_1724;
            }
            v855 = (void *)lpsrc.__r_.__value_.__r.__words[0];
            v843 |= memcmp(lpsrc.__r_.__value_.__l.__data_, v852, lpsrc.__r_.__value_.__l.__size_) == 0;
          }
          else
          {
LABEL_1743:
            if ((*((_BYTE *)&lpsrc.__r_.__value_.__s + 23) & 0x80) == 0)
              goto LABEL_1748;
            v855 = (void *)lpsrc.__r_.__value_.__r.__words[0];
          }
          operator delete(v855);
          goto LABEL_1748;
        }
        v1307 = 0;
        v1306 = 0;
        if (v777)
        {
          v778 = v777;
          v1296 = (std::string *)v777;
          v1297 = v1242;
          if (v1242)
          {
            v779 = (unint64_t *)&v1242->__shared_owners_;
            do
              v780 = __ldxr(v779);
            while (__stxr(v780 + 1, v779));
          }
          if (*(_QWORD *)(v65 + 88) - *(_QWORD *)(v65 + 80) >= 0x11uLL)
          {
            memset(&v1478, 0, sizeof(v1478));
            v781 = *(_QWORD *)this + 96;
            v782 = v1439;
            *(_QWORD *)v1493 = v1439;
            v783 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v781, v1439, v1493)[3];
            v784 = v1478.__end_;
            if (v1478.__end_ >= v1478.__end_cap_.__value_)
            {
              v928 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v1478, v783);
            }
            else
            {
              if (*(char *)(v783 + 23) < 0)
              {
                std::string::__init_copy_ctor_external(v1478.__end_, *(const std::string::value_type **)v783, *(_QWORD *)(v783 + 8));
              }
              else
              {
                v785 = *(_OWORD *)v783;
                v1478.__end_->__r_.__value_.__r.__words[2] = *(_QWORD *)(v783 + 16);
                *(_OWORD *)&v784->__r_.__value_.__l.__data_ = v785;
              }
              v928 = v784 + 1;
            }
            v1478.__end_ = v928;
            v1048 = *(_QWORD *)this + 56;
            *(_QWORD *)v1493 = v782;
            v1049 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v1048, v782, v1493)[3];
            v1050 = (__int128 *)(v1049 + 24);
            v1051 = v1478.__end_;
            if (v1478.__end_ >= v1478.__end_cap_.__value_)
            {
              v1053 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v1478, (uint64_t)v1050);
            }
            else
            {
              if (*(char *)(v1049 + 47) < 0)
              {
                std::string::__init_copy_ctor_external(v1478.__end_, *(const std::string::value_type **)(v1049 + 24), *(_QWORD *)(v1049 + 32));
              }
              else
              {
                v1052 = *v1050;
                v1478.__end_->__r_.__value_.__r.__words[2] = *(_QWORD *)(v1049 + 40);
                *(_OWORD *)&v1051->__r_.__value_.__l.__data_ = v1052;
              }
              v1053 = v1051 + 1;
            }
            v1478.__end_ = v1053;
            std::string::basic_string[abi:ne180100]<0>(&v1477, "softmax_loss_grad");
            v1054 = (*((uint64_t (**)(void **))*v778 + 40))(v778);
            v1292 = 0;
            v1291 = 0;
            v1293 = 0;
            std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v1291, (uint64_t)v1478.__begin_, (uint64_t)v1478.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v1478.__end_ - (char *)v1478.__begin_) >> 3));
            v1240 = v1054;
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v1486, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
            else
              v1486 = __str;
            v1289 = 0;
            v1288 = 0;
            v1290 = 0;
            *(_QWORD *)v1493 = &v1288;
            v1493[8] = 0;
            v1288 = (std::string *)operator new(0x18uLL);
            v1289 = v1288;
            v1290 = v1288 + 1;
            v1289 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v1290, (__int128 *)&v1486, (__int128 *)&v1487, v1288);
            *(_OWORD *)&v1509[0].__r_.__value_.__r.__words[1] = 0uLL;
            v1509[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v1509[0].__r_.__value_.__l.__size_;
            LODWORD(v1476) = 0;
            v1055 = v1291;
            v1255 = v1292;
            if (v1291 != v1292)
            {
              v1056 = 0;
              while (1)
              {
                if (*(char *)(v1055 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external((std::string *)v1493, *(const std::string::value_type **)v1055, *(_QWORD *)(v1055 + 8));
                }
                else
                {
                  v1057 = *(_OWORD *)v1055;
                  *(_QWORD *)&v1493[16] = *(_QWORD *)(v1055 + 16);
                  *(_OWORD *)v1493 = v1057;
                }
                v1058 = v1464;
                v1059 = *(_QWORD *)(v1464 + 32);
                if (*(_QWORD *)(v1464 + 40) != v1059)
                  break;
LABEL_2200:
                LODWORD(v1476) = ++v1056;
                if ((v1493[23] & 0x80000000) != 0)
                  operator delete(*(void **)v1493);
                v1055 += 24;
                if (v1055 == v1255)
                {
                  v1083 = v1291;
                  v1055 = v1292;
                  goto LABEL_2205;
                }
              }
              v1060 = 0;
              while (1)
              {
                v1061 = *(_QWORD *)(*(_QWORD *)(v1059 + 16 * v1060) + 64);
                v1063 = *(_QWORD *)(v1061 + 8);
                v1062 = *(_QWORD *)(v1061 + 16);
                __n[0] = v1063;
                __n[1] = v1062;
                if (v1062)
                {
                  v1064 = (unint64_t *)(v1062 + 8);
                  do
                    v1065 = __ldxr(v1064);
                  while (__stxr(v1065 + 1, v1064));
                  v1058 = v1464;
                }
                *(_QWORD *)v1488 = v1060;
                v1066 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v1058 + 96, v1060, v1488);
                v1068 = (__int128 *)v1066[3];
                v1067 = (__int128 *)v1066[4];
                if (v1068 != v1067)
                  break;
LABEL_2193:
                v1080 = (std::__shared_weak_count *)__n[1];
                if (__n[1])
                {
                  v1081 = (unint64_t *)(__n[1] + 8);
                  do
                    v1082 = __ldaxr(v1081);
                  while (__stlxr(v1082 - 1, v1081));
                  if (!v1082)
                  {
                    ((void (*)(std::__shared_weak_count *))v1080->__on_zero_shared)(v1080);
                    std::__shared_weak_count::__release_weak(v1080);
                  }
                }
                ++v1060;
                v1058 = v1464;
                v1059 = *(_QWORD *)(v1464 + 32);
                if (v1060 >= (*(_QWORD *)(v1464 + 40) - v1059) >> 4)
                {
                  v1056 = (int)v1476;
                  goto LABEL_2200;
                }
              }
              v1069 = __n[0];
              v1070 = (int)v1476;
              while (2)
              {
                if (*((char *)v1068 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external((std::string *)v1488, *(const std::string::value_type **)v1068, *((_QWORD *)v1068 + 1));
                }
                else
                {
                  v1071 = *v1068;
                  *(_QWORD *)&v1488[16] = *((_QWORD *)v1068 + 2);
                  *(_OWORD *)v1488 = v1071;
                }
                v1072 = v1488[23];
                v1073 = v1488[23];
                if (v1488[23] >= 0)
                  v1074 = v1488[23];
                else
                  v1074 = *(_QWORD *)&v1488[8];
                v1075 = v1493[23];
                if (v1493[23] < 0)
                  v1075 = *(_QWORD *)&v1493[8];
                if (v1074 == v1075)
                {
                  if (v1493[23] >= 0)
                    v1076 = v1493;
                  else
                    v1076 = *(unsigned __int8 **)v1493;
                  if ((v1488[23] & 0x80000000) == 0)
                  {
                    if (v1488[23])
                    {
                      v1077 = v1488;
                      while (*v1077 == *v1076)
                      {
                        ++v1077;
                        ++v1076;
                        if (!--v1072)
                          goto LABEL_2187;
                      }
                      goto LABEL_2189;
                    }
LABEL_2187:
                    if (v1069 != (_QWORD)v1468)
                    {
                      v1079 = std::__tree<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::__map_value_compare<std::shared_ptr<Espresso::abstract_context>,std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::less<std::shared_ptr<Espresso::abstract_context>>,true>,std::allocator<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>>>::__emplace_unique_key_args<std::shared_ptr<Espresso::abstract_context>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<Espresso::abstract_context> const&>,std::tuple<>>((uint64_t **)v1509, v1069, (uint64_t *)__n);
                      *((_DWORD *)std::__tree<std::__value_type<Espresso::platform,int>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,int>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,int>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform const&>,std::tuple<>>((uint64_t **)v1079 + 6, v1070, (unsigned int *)&v1476)+ 8) = 1;
                      v1073 = v1488[23];
                    }
                    goto LABEL_2189;
                  }
                  v1078 = *(void **)v1488;
                  if (!memcmp(*(const void **)v1488, v1076, *(size_t *)&v1488[8]))
                    goto LABEL_2187;
LABEL_2191:
                  operator delete(v1078);
                }
                else
                {
LABEL_2189:
                  if (v1073 < 0)
                  {
                    v1078 = *(void **)v1488;
                    goto LABEL_2191;
                  }
                }
                v1068 = (__int128 *)((char *)v1068 + 24);
                if (v1068 == v1067)
                  goto LABEL_2193;
                continue;
              }
            }
            v1083 = v1291;
LABEL_2205:
            __n[1] = 0;
            __n[0] = 0;
            *(_QWORD *)&v1504 = 0;
            std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(__n, v1083, v1055, 0xAAAAAAAAAAAAAAABLL * ((v1055 - v1083) >> 3));
            v1084 = (std::string::size_type *)v1509[0].__r_.__value_.__r.__words[0];
            v1085 = v1509[0].__r_.__value_.__r.__words[0] == (_QWORD)&v1509[0].__r_.__value_.__l.__size_;
            while (2)
            {
              if (v1085)
              {
                v1474 = 1;
                memset(v1493, 0, 24);
                std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v1493, __n[0], __n[1], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(__n[1] - __n[0]) >> 3));
                memset(v1488, 0, 24);
                std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v1488, (uint64_t)v1288, (uint64_t)v1289, 0xAAAAAAAAAAAAAAABLL * (((char *)v1289 - (char *)v1288) >> 3));
                Espresso::sequential_builder::add<Espresso::softmax_params>(&v1294, (uint64_t *)&v1458, (uint64_t)&v1477, (uint64_t)&v1436, v1240, *(uint64_t *)v1493, *(uint64_t *)&v1493[8], (uint64_t *)v1488);
                v1514.__r_.__value_.__r.__words[0] = (std::string::size_type)v1488;
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1514);
                v1514.__r_.__value_.__r.__words[0] = (std::string::size_type)v1493;
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1514);
                v1514.__r_.__value_.__r.__words[0] = (std::string::size_type)__n;
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1514);
                std::__tree<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::__map_value_compare<std::shared_ptr<Espresso::abstract_context>,std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::less<std::shared_ptr<Espresso::abstract_context>>,true>,std::allocator<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>>>::destroy((_QWORD *)v1509[0].__r_.__value_.__l.__size_);
                v1163 = v1295;
                if (v1295)
                {
                  v1164 = (unint64_t *)&v1295->__shared_owners_;
                  do
                    v1165 = __ldaxr(v1164);
                  while (__stlxr(v1165 - 1, v1164));
                  if (!v1165)
                  {
                    ((void (*)(std::__shared_weak_count *))v1163->__on_zero_shared)(v1163);
                    std::__shared_weak_count::__release_weak(v1163);
                  }
                }
                *(_QWORD *)v1493 = &v1288;
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v1493);
                if (SHIBYTE(v1486.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v1486.__r_.__value_.__l.__data_);
                *(_QWORD *)v1493 = &v1291;
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v1493);
                if (SHIBYTE(v1477.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v1477.__r_.__value_.__l.__data_);
                *(_QWORD *)v1493 = &v1478;
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v1493);
                goto LABEL_2377;
              }
              std::pair<std::shared_ptr<Espresso::abstract_context> const,std::map<int,int>>::pair[abi:ne180100](v1493, v1084 + 4);
              v1086 = *(_OWORD *)v1493;
              if (*(_QWORD *)&v1493[8])
              {
                v1087 = (unint64_t *)(*(_QWORD *)&v1493[8] + 8);
                do
                  v1088 = __ldxr(v1087);
                while (__stxr(v1088 + 1, v1087));
              }
              memset(&v1514, 0, sizeof(v1514));
              memset(&v1512, 0, sizeof(v1512));
              std::string::basic_string[abi:ne180100]<0>(&v1510, "");
              v1089 = *(_BYTE **)&v1493[16];
              if (*(_BYTE **)&v1493[16] == &v1493[24])
                goto LABEL_2311;
LABEL_2211:
              v1090 = *((_DWORD *)v1089 + 7);
              v1091 = v1291 + 24 * v1090;
              if (*(char *)(v1091 + 23) < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)v1488, *(const std::string::value_type **)v1091, *(_QWORD *)(v1091 + 8));
              }
              else
              {
                v1092 = *(_OWORD *)v1091;
                *(_QWORD *)&v1488[16] = *(_QWORD *)(v1091 + 16);
                *(_OWORD *)v1488 = v1092;
              }
              if (v1488[23] >= 0)
                v1093 = v1488[23];
              else
                v1093 = *(_QWORD *)&v1488[8];
              if (v1488[23] >= 0)
                v1094 = v1488;
              else
                v1094 = *(char **)v1488;
              if (v1093 >= 4)
              {
                v1095 = &v1094[v1093];
                v1096 = v1093;
                v1097 = v1094;
                do
                {
                  v1098 = (char *)memchr(v1097, 99, v1096 - 3);
                  if (!v1098)
                    break;
                  if (*(_DWORD *)v1098 == 1601532003)
                  {
                    if (v1098 != v1095 && v1098 == v1094)
                    {
                      std::string::basic_string(&lpsrc, (const std::string *)v1488, 4uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v1507);
                      goto LABEL_2238;
                    }
                    break;
                  }
                  v1097 = v1098 + 1;
                  v1096 = v1095 - v1097;
                }
                while (v1095 - v1097 >= 4);
              }
              std::string::basic_string[abi:ne180100]((uint64_t)&lpsrc, v1093 + 3);
              if ((lpsrc.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v1099 = &lpsrc;
              else
                v1099 = (std::string *)lpsrc.__r_.__value_.__r.__words[0];
              if (v1093)
              {
                if (v1488[23] >= 0)
                  v1100 = v1488;
                else
                  v1100 = *(_BYTE **)v1488;
                memmove(v1099, v1100, v1093);
              }
              *(_DWORD *)((char *)&v1099->__r_.__value_.__l.__data_ + v1093) = 7894111;
LABEL_2238:
              v1101 = __n[0] + 24 * v1090;
              if (*(char *)(v1101 + 23) < 0)
                operator delete(*(void **)v1101);
              v1102 = *(_OWORD *)&lpsrc.__r_.__value_.__l.__data_;
              *(_QWORD *)(v1101 + 16) = *((_QWORD *)&lpsrc.__r_.__value_.__l + 2);
              *(_OWORD *)v1101 = v1102;
              v1103 = v1464;
              if (*(_QWORD *)(v1464 + 40) == *(_QWORD *)(v1464 + 32))
              {
LABEL_2270:
                v1118 = v1291 + 24 * v1090;
                v1119 = (_OWORD *)v1514.__r_.__value_.__l.__size_;
                if (v1514.__r_.__value_.__l.__size_ >= v1514.__r_.__value_.__r.__words[2])
                {
                  v1121 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&v1514.__r_.__value_.__l.__data_, v1118);
                }
                else
                {
                  if (*(char *)(v1118 + 23) < 0)
                  {
                    std::string::__init_copy_ctor_external((std::string *)v1514.__r_.__value_.__l.__size_, *(const std::string::value_type **)v1118, *(_QWORD *)(v1118 + 8));
                  }
                  else
                  {
                    v1120 = *(_OWORD *)v1118;
                    *(_QWORD *)(v1514.__r_.__value_.__l.__size_ + 16) = *(_QWORD *)(v1118 + 16);
                    *v1119 = v1120;
                  }
                  v1121 = (std::string *)((char *)v1119 + 24);
                }
                v1514.__r_.__value_.__l.__size_ = (std::string::size_type)v1121;
                v1122 = __n[0] + 24 * v1090;
                v1123 = (_OWORD *)v1512.__r_.__value_.__l.__size_;
                if (v1512.__r_.__value_.__l.__size_ >= v1512.__r_.__value_.__r.__words[2])
                {
                  v1125 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&v1512.__r_.__value_.__l.__data_, v1122);
                }
                else
                {
                  if (*(char *)(v1122 + 23) < 0)
                  {
                    std::string::__init_copy_ctor_external((std::string *)v1512.__r_.__value_.__l.__size_, *(const std::string::value_type **)v1122, *(_QWORD *)(v1122 + 8));
                  }
                  else
                  {
                    v1124 = *(_OWORD *)v1122;
                    *(_QWORD *)(v1512.__r_.__value_.__l.__size_ + 16) = *(_QWORD *)(v1122 + 16);
                    *v1123 = v1124;
                  }
                  v1125 = (std::string *)((char *)v1123 + 24);
                }
                v1512.__r_.__value_.__l.__size_ = (std::string::size_type)v1125;
                if ((v1510.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v1126 = HIBYTE(v1510.__r_.__value_.__r.__words[2]);
                else
                  v1126 = v1510.__r_.__value_.__l.__size_;
                std::string::basic_string[abi:ne180100]((uint64_t)&lpsrc, v1126 + 1);
                if ((lpsrc.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v1127 = &lpsrc;
                else
                  v1127 = (std::string *)lpsrc.__r_.__value_.__r.__words[0];
                if (v1126)
                {
                  if ((v1510.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v1128 = &v1510;
                  else
                    v1128 = (std::string *)v1510.__r_.__value_.__r.__words[0];
                  memmove(v1127, v1128, v1126);
                }
                *(_WORD *)((char *)&v1127->__r_.__value_.__l.__data_ + v1126) = 95;
                v1129 = v1291 + 24 * v1090;
                v1130 = *(char *)(v1129 + 23);
                if (v1130 >= 0)
                  v1131 = (const std::string::value_type *)(v1291 + 24 * v1090);
                else
                  v1131 = *(const std::string::value_type **)v1129;
                if (v1130 >= 0)
                  v1132 = *(unsigned __int8 *)(v1129 + 23);
                else
                  v1132 = *(_QWORD *)(v1129 + 8);
                v1133 = std::string::append(&lpsrc, v1131, v1132);
                v1134 = v1133->__r_.__value_.__r.__words[0];
                v1507.__r_.__value_.__r.__words[0] = v1133->__r_.__value_.__l.__size_;
                *(std::string::size_type *)((char *)v1507.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v1133->__r_.__value_.__r.__words[1] + 7);
                v1135 = HIBYTE(v1133->__r_.__value_.__r.__words[2]);
                v1133->__r_.__value_.__l.__size_ = 0;
                v1133->__r_.__value_.__r.__words[2] = 0;
                v1133->__r_.__value_.__r.__words[0] = 0;
                if (SHIBYTE(v1510.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v1510.__r_.__value_.__l.__data_);
                v1510.__r_.__value_.__r.__words[0] = v1134;
                v1510.__r_.__value_.__l.__size_ = v1507.__r_.__value_.__r.__words[0];
                *(std::string::size_type *)((char *)&v1510.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v1507.__r_.__value_.__r.__words + 7);
                *((_BYTE *)&v1510.__r_.__value_.__s + 23) = v1135;
                if (SHIBYTE(lpsrc.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(lpsrc.__r_.__value_.__l.__data_);
                goto LABEL_2303;
              }
              v1104 = 0;
              v1105 = 0;
LABEL_2242:
              lpsrc.__r_.__value_.__r.__words[0] = v1104;
              v1106 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v1103 + 96, v1104, &lpsrc);
              v1107 = (__int128 *)v1106[3];
              v1108 = (__int128 *)v1106[4];
LABEL_2243:
              if (v1107 == v1108)
              {
                ++v1104;
                v1103 = v1464;
                if (v1104 >= (uint64_t)(*(_QWORD *)(v1464 + 40) - *(_QWORD *)(v1464 + 32)) >> 4)
                {
                  if ((v1105 & 1) == 0)
                    goto LABEL_2270;
LABEL_2303:
                  if ((v1488[23] & 0x80000000) != 0)
                    operator delete(*(void **)v1488);
                  v1136 = (_QWORD *)*((_QWORD *)v1089 + 1);
                  if (v1136)
                  {
                    do
                    {
                      v1137 = v1136;
                      v1136 = (_QWORD *)*v1136;
                    }
                    while (v1136);
                  }
                  else
                  {
                    do
                    {
                      v1137 = (_BYTE *)*((_QWORD *)v1089 + 2);
                      _ZF = *(_QWORD *)v1137 == (_QWORD)v1089;
                      v1089 = v1137;
                    }
                    while (!_ZF);
                  }
                  v1089 = v1137;
                  if (v1137 == &v1493[24])
                  {
LABEL_2311:
                    if (v1512.__r_.__value_.__l.__size_ != v1512.__r_.__value_.__r.__words[0])
                    {
                      memset(v1488, 0, 32);
                      std::string::basic_string[abi:ne180100]<0>(&lpsrc, "context_transfer");
                      if ((v1510.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                        v1138 = HIBYTE(v1510.__r_.__value_.__r.__words[2]);
                      else
                        v1138 = v1510.__r_.__value_.__l.__size_;
                      std::string::basic_string[abi:ne180100]((uint64_t)&v1507, v1138 + 3);
                      if ((v1507.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                        v1139 = &v1507;
                      else
                        v1139 = (std::string *)v1507.__r_.__value_.__r.__words[0];
                      if (v1138)
                      {
                        if ((v1510.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                          v1140 = &v1510;
                        else
                          v1140 = (std::string *)v1510.__r_.__value_.__r.__words[0];
                        memmove(v1139, v1140, v1138);
                      }
                      *(_DWORD *)((char *)&v1139->__r_.__value_.__l.__data_ + v1138) = 7894111;
                      memset(&v1505, 0, sizeof(v1505));
                      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v1505, (uint64_t)v1514.__r_.__value_.__l.__data_, v1514.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(v1514.__r_.__value_.__l.__size_ - v1514.__r_.__value_.__r.__words[0]) >> 3));
                      v1501 = 0uLL;
                      v1502 = 0;
                      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v1501, (uint64_t)v1512.__r_.__value_.__l.__data_, v1512.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(v1512.__r_.__value_.__l.__size_ - v1512.__r_.__value_.__r.__words[0]) >> 3));
                      Espresso::sequential_builder::add<Espresso::context_transfer_params>((uint64_t *)&v1484, (uint64_t *)&v1458, (uint64_t)&lpsrc, (uint64_t)&v1507, (uint64_t)v1488, (uint64_t)v1505.__r_.__value_.__l.__data_, v1505.__r_.__value_.__l.__size_, (uint64_t *)&v1501);
                      v1286 = (std::string *)&v1501;
                      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1286);
                      v1286 = &v1505;
                      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1286);
                      if (SHIBYTE(v1507.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(v1507.__r_.__value_.__l.__data_);
                      if (SHIBYTE(lpsrc.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(lpsrc.__r_.__value_.__l.__data_);
                      if (v1484.__r_.__value_.__r.__words[0]
                      {
                        v1142 = v1141;
                        lpsrc.__r_.__value_.__r.__words[0] = (std::string::size_type)v1141;
                        lpsrc.__r_.__value_.__l.__size_ = v1484.__r_.__value_.__l.__size_;
                        if (v1484.__r_.__value_.__l.__size_)
                        {
                          v1143 = (unint64_t *)(v1484.__r_.__value_.__l.__size_ + 8);
                          do
                            v1144 = __ldxr(v1143);
                          while (__stxr(v1144 + 1, v1143));
                        }
                      }
                      else
                      {
                        v1142 = 0;
                        *(_OWORD *)&lpsrc.__r_.__value_.__l.__data_ = 0uLL;
                      }
                      LODWORD(v1286) = 0;
                      Espresso::create_context((int *)&v1286, &v1507);
                      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v1142 + 39, v1468, *((uint64_t *)&v1468 + 1));
                      v1145 = lpsrc.__r_.__value_.__r.__words[0];
                      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(lpsrc.__r_.__value_.__r.__words[0] + 328), v1086, *((uint64_t *)&v1086 + 1));
                      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(v1145 + 8), v1468, *((uint64_t *)&v1468 + 1));
                      v1146 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)(v1145 + 312) + 8))(*(_QWORD *)(*(_QWORD *)(v1145 + 312) + 8));
                      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v1464 + 40) - 16) + 8) = v1146;
                      v1147 = (std::__shared_weak_count *)v1507.__r_.__value_.__l.__size_;
                      if (v1507.__r_.__value_.__l.__size_)
                      {
                        v1148 = (unint64_t *)(v1507.__r_.__value_.__l.__size_ + 8);
                        do
                          v1149 = __ldaxr(v1148);
                        while (__stlxr(v1149 - 1, v1148));
                        if (!v1149)
                        {
                          ((void (*)(std::__shared_weak_count *))v1147->__on_zero_shared)(v1147);
                          std::__shared_weak_count::__release_weak(v1147);
                        }
                      }
                      v1150 = (std::__shared_weak_count *)lpsrc.__r_.__value_.__l.__size_;
                      if (lpsrc.__r_.__value_.__l.__size_)
                      {
                        v1151 = (unint64_t *)(lpsrc.__r_.__value_.__l.__size_ + 8);
                        do
                          v1152 = __ldaxr(v1151);
                        while (__stlxr(v1152 - 1, v1151));
                        if (!v1152)
                        {
                          ((void (*)(std::__shared_weak_count *))v1150->__on_zero_shared)(v1150);
                          std::__shared_weak_count::__release_weak(v1150);
                        }
                      }
                      v1153 = (std::__shared_weak_count *)v1484.__r_.__value_.__l.__size_;
                      if (v1484.__r_.__value_.__l.__size_)
                      {
                        v1154 = (unint64_t *)(v1484.__r_.__value_.__l.__size_ + 8);
                        do
                          v1155 = __ldaxr(v1154);
                        while (__stlxr(v1155 - 1, v1154));
                        if (!v1155)
                        {
                          ((void (*)(std::__shared_weak_count *))v1153->__on_zero_shared)(v1153);
                          std::__shared_weak_count::__release_weak(v1153);
                        }
                      }
                    }
                    if (SHIBYTE(v1510.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v1510.__r_.__value_.__l.__data_);
                    *(_QWORD *)v1488 = &v1512;
                    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v1488);
                    *(_QWORD *)v1488 = &v1514;
                    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v1488);
                    if (*((_QWORD *)&v1086 + 1))
                    {
                      v1156 = (unint64_t *)(*((_QWORD *)&v1086 + 1) + 8);
                      do
                        v1157 = __ldaxr(v1156);
                      while (__stlxr(v1157 - 1, v1156));
                      if (!v1157)
                      {
                        (*(void (**)(_QWORD))(**((_QWORD **)&v1086 + 1) + 16))(*((_QWORD *)&v1086 + 1));
                        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v1086 + 1));
                      }
                    }
                    std::__tree<int>::destroy(*(_QWORD **)&v1493[24]);
                    v1158 = *(std::__shared_weak_count **)&v1493[8];
                    if (*(_QWORD *)&v1493[8])
                    {
                      v1159 = (unint64_t *)(*(_QWORD *)&v1493[8] + 8);
                      do
                        v1160 = __ldaxr(v1159);
                      while (__stlxr(v1160 - 1, v1159));
                      if (!v1160)
                      {
                        ((void (*)(std::__shared_weak_count *))v1158->__on_zero_shared)(v1158);
                        std::__shared_weak_count::__release_weak(v1158);
                      }
                    }
                    v1161 = (std::string::size_type *)v1084[1];
                    if (v1161)
                    {
                      do
                      {
                        v1162 = v1161;
                        v1161 = (std::string::size_type *)*v1161;
                      }
                      while (v1161);
                    }
                    else
                    {
                      do
                      {
                        v1162 = (std::string::size_type *)v1084[2];
                        _ZF = *v1162 == (_QWORD)v1084;
                        v1084 = v1162;
                      }
                      while (!_ZF);
                    }
                    v1084 = v1162;
                    v1085 = v1162 == &v1509[0].__r_.__value_.__r.__words[1];
                    continue;
                  }
                  goto LABEL_2211;
                }
                goto LABEL_2242;
              }
              break;
            }
            if (*((char *)v1107 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&lpsrc, *(const std::string::value_type **)v1107, *((_QWORD *)v1107 + 1));
            }
            else
            {
              v1109 = *v1107;
              lpsrc.__r_.__value_.__r.__words[2] = *((_QWORD *)v1107 + 2);
              *(_OWORD *)&lpsrc.__r_.__value_.__l.__data_ = v1109;
            }
            v1110 = __n[0] + 24 * v1090;
            if ((lpsrc.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v1111 = HIBYTE(lpsrc.__r_.__value_.__r.__words[2]);
            else
              v1111 = lpsrc.__r_.__value_.__l.__size_;
            v1112 = *(unsigned __int8 *)(v1110 + 23);
            v1113 = (char)v1112;
            if ((v1112 & 0x80u) != 0)
              v1112 = *(_QWORD *)(v1110 + 8);
            if (v1111 == v1112)
            {
              if (v1113 >= 0)
                v1114 = (unsigned __int8 *)(__n[0] + 24 * v1090);
              else
                v1114 = *(unsigned __int8 **)v1110;
              if ((*((_BYTE *)&lpsrc.__r_.__value_.__s + 23) & 0x80) == 0)
              {
                if (*((_BYTE *)&lpsrc.__r_.__value_.__s + 23))
                {
                  v1115 = &lpsrc;
                  v1116 = HIBYTE(lpsrc.__r_.__value_.__r.__words[2]);
                  while (v1115->__r_.__value_.__s.__data_[0] == *v1114)
                  {
                    v1115 = (std::string *)((char *)v1115 + 1);
                    ++v1114;
                    if (!--v1116)
                    {
                      v1105 = 1;
                      goto LABEL_2262;
                    }
                  }
                  goto LABEL_2262;
                }
                v1105 = 1;
LABEL_2267:
                v1107 = (__int128 *)((char *)v1107 + 24);
                goto LABEL_2243;
              }
              v1117 = (void *)lpsrc.__r_.__value_.__r.__words[0];
              v1105 |= memcmp(lpsrc.__r_.__value_.__l.__data_, v1114, lpsrc.__r_.__value_.__l.__size_) == 0;
            }
            else
            {
LABEL_2262:
              if ((*((_BYTE *)&lpsrc.__r_.__value_.__s + 23) & 0x80) == 0)
                goto LABEL_2267;
              v1117 = (void *)lpsrc.__r_.__value_.__r.__words[0];
            }
            operator delete(v1117);
            goto LABEL_2267;
          }
LABEL_2377:
          v338 = 0;
          goto LABEL_2378;
        }
        v1297 = 0;
        v1296 = 0;
        if (v907)
        {
          v908 = v907;
          v1286 = (std::string *)v907;
          v1287 = v1242;
          if (v1242)
          {
            v909 = (unint64_t *)&v1242->__shared_owners_;
            do
              v910 = __ldxr(v909);
            while (__stxr(v910 + 1, v909));
          }
          memset(&v1478, 0, sizeof(v1478));
          v911 = *(_QWORD *)this + 56;
          *(_QWORD *)v1493 = v1439;
          v912 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v911, v1439, v1493);
          v913 = (__int128 *)v912[3];
          v914 = (__int128 *)v912[4];
          while (v913 != v914)
          {
            if (*((char *)v913 + 23) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)v1488, *(const std::string::value_type **)v913, *((_QWORD *)v913 + 1));
            }
            else
            {
              v915 = *v913;
              *(_QWORD *)&v1488[16] = *((_QWORD *)v913 + 2);
              *(_OWORD *)v1488 = v915;
            }
            if (v1488[23] >= 0)
              v916 = v1488[23];
            else
              v916 = *(_QWORD *)&v1488[8];
            std::string::basic_string[abi:ne180100]((uint64_t)v1509, v916 + 5);
            if ((v1509[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v917 = v1509;
            else
              v917 = (std::string *)v1509[0].__r_.__value_.__r.__words[0];
            if (v916)
            {
              if (v1488[23] >= 0)
                v918 = v1488;
              else
                v918 = *(_BYTE **)v1488;
              memmove(v917, v918, v916);
            }
            strcpy((char *)v917 + v916, "_diff");
            v919 = v1478.__end_;
            if (v1478.__end_ >= v1478.__end_cap_.__value_)
            {
              v921 = 0xAAAAAAAAAAAAAAABLL * (((char *)v1478.__end_ - (char *)v1478.__begin_) >> 3);
              v922 = v921 + 1;
              if (v921 + 1 > 0xAAAAAAAAAAAAAAALL)
                std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
              if (0x5555555555555556 * (((char *)v1478.__end_cap_.__value_ - (char *)v1478.__begin_) >> 3) > v922)
                v922 = 0x5555555555555556 * (((char *)v1478.__end_cap_.__value_ - (char *)v1478.__begin_) >> 3);
              if (0xAAAAAAAAAAAAAAABLL * (((char *)v1478.__end_cap_.__value_ - (char *)v1478.__begin_) >> 3) >= 0x555555555555555)
                v923 = 0xAAAAAAAAAAAAAAALL;
              else
                v923 = v922;
              *(_QWORD *)&v1493[32] = &v1478.__end_cap_;
              if (v923)
                v923 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v923);
              else
                v924 = 0;
              v925 = v923 + 24 * v921;
              *(_QWORD *)v1493 = v923;
              *(_QWORD *)&v1493[8] = v925;
              *(_QWORD *)&v1493[24] = v923 + 24 * v924;
              v926 = *(_OWORD *)&v1509[0].__r_.__value_.__l.__data_;
              *(_QWORD *)(v925 + 16) = *((_QWORD *)&v1509[0].__r_.__value_.__l + 2);
              *(_OWORD *)v925 = v926;
              memset(v1509, 0, 24);
              *(_QWORD *)&v1493[16] = v925 + 24;
              std::vector<std::string>::__swap_out_circular_buffer(&v1478, (std::__split_buffer<std::string> *)v1493);
              v927 = v1478.__end_;
              std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)v1493);
              v1478.__end_ = v927;
              if (SHIBYTE(v1509[0].__r_.__value_.__r.__words[2]) < 0)
                operator delete(v1509[0].__r_.__value_.__l.__data_);
            }
            else
            {
              v920 = *(_OWORD *)&v1509[0].__r_.__value_.__l.__data_;
              v1478.__end_->__r_.__value_.__r.__words[2] = v1509[0].__r_.__value_.__r.__words[2];
              *(_OWORD *)&v919->__r_.__value_.__l.__data_ = v920;
              v1478.__end_ = v919 + 1;
            }
            if ((v1488[23] & 0x80000000) != 0)
              operator delete(*(void **)v1488);
            v913 = (__int128 *)((char *)v913 + 24);
          }
          std::string::basic_string[abi:ne180100]<0>(&v1477, "elementwise_grad");
          v1239 = (*((uint64_t (**)(void **))*v908 + 40))(v908);
          if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v1486, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
          else
            v1486 = __s;
          v1282 = 0;
          v1281 = 0;
          v1283 = 0;
          *(_QWORD *)v1493 = &v1281;
          v1493[8] = 0;
          v1281 = (std::string *)operator new(0x18uLL);
          v1282 = v1281;
          v1283 = v1281 + 1;
          v1282 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v1283, (__int128 *)&v1486, (__int128 *)&v1487, v1281);
          v1280 = 0;
          v1278 = 0;
          v1279 = 0;
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v1278, (uint64_t)v1478.__begin_, (uint64_t)v1478.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v1478.__end_ - (char *)v1478.__begin_) >> 3));
          *(_OWORD *)&v1509[0].__r_.__value_.__r.__words[1] = 0uLL;
          v1509[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v1509[0].__r_.__value_.__l.__size_;
          v1475 = 0;
          v937 = v1281;
          v1254 = v1282;
          if (v1281 != v1282)
          {
            v938 = 0;
            while (1)
            {
              if (SHIBYTE(v937->__r_.__value_.__r.__words[2]) < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)v1493, v937->__r_.__value_.__l.__data_, v937->__r_.__value_.__l.__size_);
              }
              else
              {
                v939 = *(_OWORD *)&v937->__r_.__value_.__l.__data_;
                *(_QWORD *)&v1493[16] = *((_QWORD *)&v937->__r_.__value_.__l + 2);
                *(_OWORD *)v1493 = v939;
              }
              v940 = v1464;
              v941 = *(_QWORD *)(v1464 + 32);
              if (*(_QWORD *)(v1464 + 40) != v941)
                break;
LABEL_1967:
              v1475 = ++v938;
              if ((v1493[23] & 0x80000000) != 0)
                operator delete(*(void **)v1493);
              if (++v937 == v1254)
              {
                v965 = v1281;
                v937 = v1282;
                goto LABEL_1972;
              }
            }
            v942 = 0;
            while (1)
            {
              v943 = *(_QWORD *)(*(_QWORD *)(v941 + 16 * v942) + 64);
              v945 = *(_QWORD *)(v943 + 8);
              v944 = *(_QWORD *)(v943 + 16);
              __n[0] = v945;
              __n[1] = v944;
              if (v944)
              {
                v946 = (unint64_t *)(v944 + 8);
                do
                  v947 = __ldxr(v946);
                while (__stxr(v947 + 1, v946));
                v940 = v1464;
              }
              *(_QWORD *)v1488 = v942;
              v948 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v940 + 96, v942, v1488);
              v950 = (__int128 *)v948[3];
              v949 = (__int128 *)v948[4];
              if (v950 != v949)
                break;
LABEL_1960:
              v962 = (std::__shared_weak_count *)__n[1];
              if (__n[1])
              {
                v963 = (unint64_t *)(__n[1] + 8);
                do
                  v964 = __ldaxr(v963);
                while (__stlxr(v964 - 1, v963));
                if (!v964)
                {
                  ((void (*)(std::__shared_weak_count *))v962->__on_zero_shared)(v962);
                  std::__shared_weak_count::__release_weak(v962);
                }
              }
              ++v942;
              v940 = v1464;
              v941 = *(_QWORD *)(v1464 + 32);
              if (v942 >= (*(_QWORD *)(v1464 + 40) - v941) >> 4)
              {
                v938 = v1475;
                goto LABEL_1967;
              }
            }
            v951 = __n[0];
            v952 = v1475;
            while (2)
            {
              if (*((char *)v950 + 23) < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)v1488, *(const std::string::value_type **)v950, *((_QWORD *)v950 + 1));
              }
              else
              {
                v953 = *v950;
                *(_QWORD *)&v1488[16] = *((_QWORD *)v950 + 2);
                *(_OWORD *)v1488 = v953;
              }
              v954 = v1488[23];
              v955 = v1488[23];
              if (v1488[23] >= 0)
                v956 = v1488[23];
              else
                v956 = *(_QWORD *)&v1488[8];
              v957 = v1493[23];
              if (v1493[23] < 0)
                v957 = *(_QWORD *)&v1493[8];
              if (v956 == v957)
              {
                if (v1493[23] >= 0)
                  v958 = v1493;
                else
                  v958 = *(unsigned __int8 **)v1493;
                if ((v1488[23] & 0x80000000) == 0)
                {
                  if (v1488[23])
                  {
                    v959 = v1488;
                    while (*v959 == *v958)
                    {
                      ++v959;
                      ++v958;
                      if (!--v954)
                        goto LABEL_1954;
                    }
                    goto LABEL_1956;
                  }
LABEL_1954:
                  if (v951 != (_QWORD)v1468)
                  {
                    v961 = std::__tree<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::__map_value_compare<std::shared_ptr<Espresso::abstract_context>,std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::less<std::shared_ptr<Espresso::abstract_context>>,true>,std::allocator<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>>>::__emplace_unique_key_args<std::shared_ptr<Espresso::abstract_context>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<Espresso::abstract_context> const&>,std::tuple<>>((uint64_t **)v1509, v951, (uint64_t *)__n);
                    *((_DWORD *)std::__tree<std::__value_type<Espresso::platform,int>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,int>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,int>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform const&>,std::tuple<>>((uint64_t **)v961 + 6, v952, &v1475)+ 8) = 1;
                    v955 = v1488[23];
                  }
                  goto LABEL_1956;
                }
                v960 = *(void **)v1488;
                if (!memcmp(*(const void **)v1488, v958, *(size_t *)&v1488[8]))
                  goto LABEL_1954;
LABEL_1958:
                operator delete(v960);
              }
              else
              {
LABEL_1956:
                if (v955 < 0)
                {
                  v960 = *(void **)v1488;
                  goto LABEL_1958;
                }
              }
              v950 = (__int128 *)((char *)v950 + 24);
              if (v950 == v949)
                goto LABEL_1960;
              continue;
            }
          }
          v965 = v1281;
LABEL_1972:
          __n[1] = 0;
          __n[0] = 0;
          *(_QWORD *)&v1504 = 0;
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(__n, (uint64_t)v965, (uint64_t)v937, 0xAAAAAAAAAAAAAAABLL * (((char *)v937 - (char *)v965) >> 3));
          v966 = (std::string::size_type *)v1509[0].__r_.__value_.__r.__words[0];
          v967 = v1509[0].__r_.__value_.__r.__words[0] == (_QWORD)&v1509[0].__r_.__value_.__l.__size_;
          while (2)
          {
            if (v967)
            {
              v1474 = 1;
              memset(v1493, 0, 24);
              std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v1493, __n[0], __n[1], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(__n[1] - __n[0]) >> 3));
              memset(v1488, 0, 24);
              std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v1488, v1278, v1279, 0xAAAAAAAAAAAAAAABLL * ((v1279 - v1278) >> 3));
              Espresso::sequential_builder::add<Espresso::elementwise_params>(&v1284, (uint64_t *)&v1458, (uint64_t)&v1477, (uint64_t)&v1436, v1239, *(uint64_t *)v1493, *(uint64_t *)&v1493[8], (uint64_t *)v1488);
              v1514.__r_.__value_.__r.__words[0] = (std::string::size_type)v1488;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1514);
              v1514.__r_.__value_.__r.__words[0] = (std::string::size_type)v1493;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1514);
              v1514.__r_.__value_.__r.__words[0] = (std::string::size_type)__n;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1514);
              std::__tree<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::__map_value_compare<std::shared_ptr<Espresso::abstract_context>,std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::less<std::shared_ptr<Espresso::abstract_context>>,true>,std::allocator<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>>>::destroy((_QWORD *)v1509[0].__r_.__value_.__l.__size_);
              v1045 = v1285;
              if (v1285)
              {
                v1046 = (unint64_t *)&v1285->__shared_owners_;
                do
                  v1047 = __ldaxr(v1046);
                while (__stlxr(v1047 - 1, v1046));
                if (!v1047)
                {
                  ((void (*)(std::__shared_weak_count *))v1045->__on_zero_shared)(v1045);
                  std::__shared_weak_count::__release_weak(v1045);
                }
              }
              *(_QWORD *)v1493 = &v1278;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v1493);
              *(_QWORD *)v1493 = &v1281;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v1493);
              if (SHIBYTE(v1486.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v1486.__r_.__value_.__l.__data_);
              if (SHIBYTE(v1477.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v1477.__r_.__value_.__l.__data_);
              *(_QWORD *)v1493 = &v1478;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v1493);
              v338 = 0;
              goto LABEL_2418;
            }
            std::pair<std::shared_ptr<Espresso::abstract_context> const,std::map<int,int>>::pair[abi:ne180100](v1493, v966 + 4);
            v968 = *(_OWORD *)v1493;
            if (*(_QWORD *)&v1493[8])
            {
              v969 = (unint64_t *)(*(_QWORD *)&v1493[8] + 8);
              do
                v970 = __ldxr(v969);
              while (__stxr(v970 + 1, v969));
            }
            memset(&v1514, 0, sizeof(v1514));
            memset(&v1512, 0, sizeof(v1512));
            std::string::basic_string[abi:ne180100]<0>(&v1510, "");
            v971 = *(_BYTE **)&v1493[16];
            if (*(_BYTE **)&v1493[16] == &v1493[24])
              goto LABEL_2078;
LABEL_1978:
            v972 = *((_DWORD *)v971 + 7);
            v973 = &v1281[v972];
            if (SHIBYTE(v973->__r_.__value_.__r.__words[2]) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)v1488, v973->__r_.__value_.__l.__data_, v973->__r_.__value_.__l.__size_);
            }
            else
            {
              v974 = *(_OWORD *)&v973->__r_.__value_.__l.__data_;
              *(_QWORD *)&v1488[16] = *((_QWORD *)&v973->__r_.__value_.__l + 2);
              *(_OWORD *)v1488 = v974;
            }
            if (v1488[23] >= 0)
              v975 = v1488[23];
            else
              v975 = *(_QWORD *)&v1488[8];
            if (v1488[23] >= 0)
              v976 = v1488;
            else
              v976 = *(char **)v1488;
            if (v975 >= 4)
            {
              v977 = &v976[v975];
              v978 = v975;
              v979 = v976;
              do
              {
                v980 = (char *)memchr(v979, 99, v978 - 3);
                if (!v980)
                  break;
                if (*(_DWORD *)v980 == 1601532003)
                {
                  if (v980 != v977 && v980 == v976)
                  {
                    std::string::basic_string(&lpsrc, (const std::string *)v1488, 4uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v1507);
                    goto LABEL_2005;
                  }
                  break;
                }
                v979 = v980 + 1;
                v978 = v977 - v979;
              }
              while (v977 - v979 >= 4);
            }
            std::string::basic_string[abi:ne180100]((uint64_t)&lpsrc, v975 + 3);
            if ((lpsrc.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v981 = &lpsrc;
            else
              v981 = (std::string *)lpsrc.__r_.__value_.__r.__words[0];
            if (v975)
            {
              if (v1488[23] >= 0)
                v982 = v1488;
              else
                v982 = *(_BYTE **)v1488;
              memmove(v981, v982, v975);
            }
            *(_DWORD *)((char *)&v981->__r_.__value_.__l.__data_ + v975) = 7894111;
LABEL_2005:
            v983 = __n[0] + 24 * v972;
            if (*(char *)(v983 + 23) < 0)
              operator delete(*(void **)v983);
            v984 = *(_OWORD *)&lpsrc.__r_.__value_.__l.__data_;
            *(_QWORD *)(v983 + 16) = *((_QWORD *)&lpsrc.__r_.__value_.__l + 2);
            *(_OWORD *)v983 = v984;
            v985 = v1464;
            if (*(_QWORD *)(v1464 + 40) == *(_QWORD *)(v1464 + 32))
            {
LABEL_2037:
              v1000 = &v1281[v972];
              v1001 = (_OWORD *)v1514.__r_.__value_.__l.__size_;
              if (v1514.__r_.__value_.__l.__size_ >= v1514.__r_.__value_.__r.__words[2])
              {
                v1003 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&v1514.__r_.__value_.__l.__data_, (uint64_t)v1000);
              }
              else
              {
                if (SHIBYTE(v1000->__r_.__value_.__r.__words[2]) < 0)
                {
                  std::string::__init_copy_ctor_external((std::string *)v1514.__r_.__value_.__l.__size_, v1000->__r_.__value_.__l.__data_, v1000->__r_.__value_.__l.__size_);
                }
                else
                {
                  v1002 = *(_OWORD *)&v1000->__r_.__value_.__l.__data_;
                  *(_QWORD *)(v1514.__r_.__value_.__l.__size_ + 16) = *((_QWORD *)&v1000->__r_.__value_.__l + 2);
                  *v1001 = v1002;
                }
                v1003 = (std::string *)((char *)v1001 + 24);
              }
              v1514.__r_.__value_.__l.__size_ = (std::string::size_type)v1003;
              v1004 = __n[0] + 24 * v972;
              v1005 = (_OWORD *)v1512.__r_.__value_.__l.__size_;
              if (v1512.__r_.__value_.__l.__size_ >= v1512.__r_.__value_.__r.__words[2])
              {
                v1007 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&v1512.__r_.__value_.__l.__data_, v1004);
              }
              else
              {
                if (*(char *)(v1004 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external((std::string *)v1512.__r_.__value_.__l.__size_, *(const std::string::value_type **)v1004, *(_QWORD *)(v1004 + 8));
                }
                else
                {
                  v1006 = *(_OWORD *)v1004;
                  *(_QWORD *)(v1512.__r_.__value_.__l.__size_ + 16) = *(_QWORD *)(v1004 + 16);
                  *v1005 = v1006;
                }
                v1007 = (std::string *)((char *)v1005 + 24);
              }
              v1512.__r_.__value_.__l.__size_ = (std::string::size_type)v1007;
              if ((v1510.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v1008 = HIBYTE(v1510.__r_.__value_.__r.__words[2]);
              else
                v1008 = v1510.__r_.__value_.__l.__size_;
              std::string::basic_string[abi:ne180100]((uint64_t)&lpsrc, v1008 + 1);
              if ((lpsrc.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v1009 = &lpsrc;
              else
                v1009 = (std::string *)lpsrc.__r_.__value_.__r.__words[0];
              if (v1008)
              {
                if ((v1510.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v1010 = &v1510;
                else
                  v1010 = (std::string *)v1510.__r_.__value_.__r.__words[0];
                memmove(v1009, v1010, v1008);
              }
              *(_WORD *)((char *)&v1009->__r_.__value_.__l.__data_ + v1008) = 95;
              v1011 = &v1281[v972];
              v1012 = SHIBYTE(v1011->__r_.__value_.__r.__words[2]);
              if (v1012 >= 0)
                v1013 = &v1281[v972];
              else
                v1013 = (std::string *)v1011->__r_.__value_.__r.__words[0];
              if (v1012 >= 0)
                v1014 = HIBYTE(v1011->__r_.__value_.__r.__words[2]);
              else
                v1014 = v1011->__r_.__value_.__l.__size_;
              v1015 = std::string::append(&lpsrc, (const std::string::value_type *)v1013, v1014);
              v1016 = v1015->__r_.__value_.__r.__words[0];
              v1507.__r_.__value_.__r.__words[0] = v1015->__r_.__value_.__l.__size_;
              *(std::string::size_type *)((char *)v1507.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v1015->__r_.__value_.__r.__words[1] + 7);
              v1017 = HIBYTE(v1015->__r_.__value_.__r.__words[2]);
              v1015->__r_.__value_.__l.__size_ = 0;
              v1015->__r_.__value_.__r.__words[2] = 0;
              v1015->__r_.__value_.__r.__words[0] = 0;
              if (SHIBYTE(v1510.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v1510.__r_.__value_.__l.__data_);
              v1510.__r_.__value_.__r.__words[0] = v1016;
              v1510.__r_.__value_.__l.__size_ = v1507.__r_.__value_.__r.__words[0];
              *(std::string::size_type *)((char *)&v1510.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v1507.__r_.__value_.__r.__words + 7);
              *((_BYTE *)&v1510.__r_.__value_.__s + 23) = v1017;
              if (SHIBYTE(lpsrc.__r_.__value_.__r.__words[2]) < 0)
                operator delete(lpsrc.__r_.__value_.__l.__data_);
              goto LABEL_2070;
            }
            v986 = 0;
            v987 = 0;
LABEL_2009:
            lpsrc.__r_.__value_.__r.__words[0] = v986;
            v988 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v985 + 96, v986, &lpsrc);
            v989 = (__int128 *)v988[3];
            v990 = (__int128 *)v988[4];
LABEL_2010:
            if (v989 == v990)
            {
              ++v986;
              v985 = v1464;
              if (v986 >= (uint64_t)(*(_QWORD *)(v1464 + 40) - *(_QWORD *)(v1464 + 32)) >> 4)
              {
                if ((v987 & 1) == 0)
                  goto LABEL_2037;
LABEL_2070:
                if ((v1488[23] & 0x80000000) != 0)
                  operator delete(*(void **)v1488);
                v1018 = (_QWORD *)*((_QWORD *)v971 + 1);
                if (v1018)
                {
                  do
                  {
                    v1019 = v1018;
                    v1018 = (_QWORD *)*v1018;
                  }
                  while (v1018);
                }
                else
                {
                  do
                  {
                    v1019 = (_BYTE *)*((_QWORD *)v971 + 2);
                    _ZF = *(_QWORD *)v1019 == (_QWORD)v971;
                    v971 = v1019;
                  }
                  while (!_ZF);
                }
                v971 = v1019;
                if (v1019 == &v1493[24])
                {
LABEL_2078:
                  if (v1512.__r_.__value_.__l.__size_ != v1512.__r_.__value_.__r.__words[0])
                  {
                    memset(v1488, 0, 32);
                    std::string::basic_string[abi:ne180100]<0>(&lpsrc, "context_transfer");
                    if ((v1510.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v1020 = HIBYTE(v1510.__r_.__value_.__r.__words[2]);
                    else
                      v1020 = v1510.__r_.__value_.__l.__size_;
                    std::string::basic_string[abi:ne180100]((uint64_t)&v1507, v1020 + 3);
                    if ((v1507.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v1021 = &v1507;
                    else
                      v1021 = (std::string *)v1507.__r_.__value_.__r.__words[0];
                    if (v1020)
                    {
                      if ((v1510.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                        v1022 = &v1510;
                      else
                        v1022 = (std::string *)v1510.__r_.__value_.__r.__words[0];
                      memmove(v1021, v1022, v1020);
                    }
                    *(_DWORD *)((char *)&v1021->__r_.__value_.__l.__data_ + v1020) = 7894111;
                    memset(&v1505, 0, sizeof(v1505));
                    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v1505, (uint64_t)v1514.__r_.__value_.__l.__data_, v1514.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(v1514.__r_.__value_.__l.__size_ - v1514.__r_.__value_.__r.__words[0]) >> 3));
                    v1501 = 0uLL;
                    v1502 = 0;
                    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v1501, (uint64_t)v1512.__r_.__value_.__l.__data_, v1512.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(v1512.__r_.__value_.__l.__size_ - v1512.__r_.__value_.__r.__words[0]) >> 3));
                    Espresso::sequential_builder::add<Espresso::context_transfer_params>((uint64_t *)&v1484, (uint64_t *)&v1458, (uint64_t)&lpsrc, (uint64_t)&v1507, (uint64_t)v1488, (uint64_t)v1505.__r_.__value_.__l.__data_, v1505.__r_.__value_.__l.__size_, (uint64_t *)&v1501);
                    v1476 = (std::string *)&v1501;
                    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1476);
                    v1476 = &v1505;
                    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1476);
                    if (SHIBYTE(v1507.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v1507.__r_.__value_.__l.__data_);
                    if (SHIBYTE(lpsrc.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(lpsrc.__r_.__value_.__l.__data_);
                    if (v1484.__r_.__value_.__r.__words[0]
                    {
                      v1024 = v1023;
                      lpsrc.__r_.__value_.__r.__words[0] = (std::string::size_type)v1023;
                      lpsrc.__r_.__value_.__l.__size_ = v1484.__r_.__value_.__l.__size_;
                      if (v1484.__r_.__value_.__l.__size_)
                      {
                        v1025 = (unint64_t *)(v1484.__r_.__value_.__l.__size_ + 8);
                        do
                          v1026 = __ldxr(v1025);
                        while (__stxr(v1026 + 1, v1025));
                      }
                    }
                    else
                    {
                      v1024 = 0;
                      *(_OWORD *)&lpsrc.__r_.__value_.__l.__data_ = 0uLL;
                    }
                    LODWORD(v1476) = 0;
                    Espresso::create_context((int *)&v1476, &v1507);
                    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v1024 + 39, v1468, *((uint64_t *)&v1468 + 1));
                    v1027 = lpsrc.__r_.__value_.__r.__words[0];
                    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(lpsrc.__r_.__value_.__r.__words[0] + 328), v968, *((uint64_t *)&v968 + 1));
                    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(v1027 + 8), v1468, *((uint64_t *)&v1468 + 1));
                    v1028 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)(v1027 + 312) + 8))(*(_QWORD *)(*(_QWORD *)(v1027 + 312) + 8));
                    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v1464 + 40) - 16) + 8) = v1028;
                    v1029 = (std::__shared_weak_count *)v1507.__r_.__value_.__l.__size_;
                    if (v1507.__r_.__value_.__l.__size_)
                    {
                      v1030 = (unint64_t *)(v1507.__r_.__value_.__l.__size_ + 8);
                      do
                        v1031 = __ldaxr(v1030);
                      while (__stlxr(v1031 - 1, v1030));
                      if (!v1031)
                      {
                        ((void (*)(std::__shared_weak_count *))v1029->__on_zero_shared)(v1029);
                        std::__shared_weak_count::__release_weak(v1029);
                      }
                    }
                    v1032 = (std::__shared_weak_count *)lpsrc.__r_.__value_.__l.__size_;
                    if (lpsrc.__r_.__value_.__l.__size_)
                    {
                      v1033 = (unint64_t *)(lpsrc.__r_.__value_.__l.__size_ + 8);
                      do
                        v1034 = __ldaxr(v1033);
                      while (__stlxr(v1034 - 1, v1033));
                      if (!v1034)
                      {
                        ((void (*)(std::__shared_weak_count *))v1032->__on_zero_shared)(v1032);
                        std::__shared_weak_count::__release_weak(v1032);
                      }
                    }
                    v1035 = (std::__shared_weak_count *)v1484.__r_.__value_.__l.__size_;
                    if (v1484.__r_.__value_.__l.__size_)
                    {
                      v1036 = (unint64_t *)(v1484.__r_.__value_.__l.__size_ + 8);
                      do
                        v1037 = __ldaxr(v1036);
                      while (__stlxr(v1037 - 1, v1036));
                      if (!v1037)
                      {
                        ((void (*)(std::__shared_weak_count *))v1035->__on_zero_shared)(v1035);
                        std::__shared_weak_count::__release_weak(v1035);
                      }
                    }
                  }
                  if (SHIBYTE(v1510.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v1510.__r_.__value_.__l.__data_);
                  *(_QWORD *)v1488 = &v1512;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v1488);
                  *(_QWORD *)v1488 = &v1514;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v1488);
                  if (*((_QWORD *)&v968 + 1))
                  {
                    v1038 = (unint64_t *)(*((_QWORD *)&v968 + 1) + 8);
                    do
                      v1039 = __ldaxr(v1038);
                    while (__stlxr(v1039 - 1, v1038));
                    if (!v1039)
                    {
                      (*(void (**)(_QWORD))(**((_QWORD **)&v968 + 1) + 16))(*((_QWORD *)&v968 + 1));
                      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v968 + 1));
                    }
                  }
                  std::__tree<int>::destroy(*(_QWORD **)&v1493[24]);
                  v1040 = *(std::__shared_weak_count **)&v1493[8];
                  if (*(_QWORD *)&v1493[8])
                  {
                    v1041 = (unint64_t *)(*(_QWORD *)&v1493[8] + 8);
                    do
                      v1042 = __ldaxr(v1041);
                    while (__stlxr(v1042 - 1, v1041));
                    if (!v1042)
                    {
                      ((void (*)(std::__shared_weak_count *))v1040->__on_zero_shared)(v1040);
                      std::__shared_weak_count::__release_weak(v1040);
                    }
                  }
                  v1043 = (std::string::size_type *)v966[1];
                  if (v1043)
                  {
                    do
                    {
                      v1044 = v1043;
                      v1043 = (std::string::size_type *)*v1043;
                    }
                    while (v1043);
                  }
                  else
                  {
                    do
                    {
                      v1044 = (std::string::size_type *)v966[2];
                      _ZF = *v1044 == (_QWORD)v966;
                      v966 = v1044;
                    }
                    while (!_ZF);
                  }
                  v966 = v1044;
                  v967 = v1044 == &v1509[0].__r_.__value_.__r.__words[1];
                  continue;
                }
                goto LABEL_1978;
              }
              goto LABEL_2009;
            }
            break;
          }
          if (*((char *)v989 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&lpsrc, *(const std::string::value_type **)v989, *((_QWORD *)v989 + 1));
          }
          else
          {
            v991 = *v989;
            lpsrc.__r_.__value_.__r.__words[2] = *((_QWORD *)v989 + 2);
            *(_OWORD *)&lpsrc.__r_.__value_.__l.__data_ = v991;
          }
          v992 = __n[0] + 24 * v972;
          if ((lpsrc.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v993 = HIBYTE(lpsrc.__r_.__value_.__r.__words[2]);
          else
            v993 = lpsrc.__r_.__value_.__l.__size_;
          v994 = *(unsigned __int8 *)(v992 + 23);
          v995 = (char)v994;
          if ((v994 & 0x80u) != 0)
            v994 = *(_QWORD *)(v992 + 8);
          if (v993 == v994)
          {
            if (v995 >= 0)
              v996 = (unsigned __int8 *)(__n[0] + 24 * v972);
            else
              v996 = *(unsigned __int8 **)v992;
            if ((*((_BYTE *)&lpsrc.__r_.__value_.__s + 23) & 0x80) == 0)
            {
              if (*((_BYTE *)&lpsrc.__r_.__value_.__s + 23))
              {
                v997 = &lpsrc;
                v998 = HIBYTE(lpsrc.__r_.__value_.__r.__words[2]);
                while (v997->__r_.__value_.__s.__data_[0] == *v996)
                {
                  v997 = (std::string *)((char *)v997 + 1);
                  ++v996;
                  if (!--v998)
                  {
                    v987 = 1;
                    goto LABEL_2029;
                  }
                }
                goto LABEL_2029;
              }
              v987 = 1;
LABEL_2034:
              v989 = (__int128 *)((char *)v989 + 24);
              goto LABEL_2010;
            }
            v999 = (void *)lpsrc.__r_.__value_.__r.__words[0];
            v987 |= memcmp(lpsrc.__r_.__value_.__l.__data_, v996, lpsrc.__r_.__value_.__l.__size_) == 0;
          }
          else
          {
LABEL_2029:
            if ((*((_BYTE *)&lpsrc.__r_.__value_.__s + 23) & 0x80) == 0)
              goto LABEL_2034;
            v999 = (void *)lpsrc.__r_.__value_.__r.__words[0];
          }
          operator delete(v999);
          goto LABEL_2034;
        }
        v1287 = 0;
        v1286 = 0;
        if (v929)
        {
          v930 = v929;
          v1512.__r_.__value_.__r.__words[0] = (std::string::size_type)v929;
          v1512.__r_.__value_.__l.__size_ = (std::string::size_type)v1242;
          if (v1242)
          {
            v931 = (unint64_t *)&v1242->__shared_owners_;
            do
              v932 = __ldxr(v931);
            while (__stxr(v932 + 1, v931));
          }
          if ((v1438 & 0x80u) == 0)
            v933 = v1438;
          else
            v933 = v1437;
          std::string::basic_string[abi:ne180100]((uint64_t)v1488, v933 + 6);
          if (v1488[23] >= 0)
            v934 = v1488;
          else
            v934 = *(_BYTE **)v1488;
          if (v933)
          {
            if ((v1438 & 0x80u) == 0)
              v935 = &v1436;
            else
              v935 = v1436;
            memmove(v934, v935, v933);
          }
          strcpy(&v934[v933], "_dbias");
          memset(v1493, 0, 24);
          v1509[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v1493;
          v1509[0].__r_.__value_.__s.__data_[8] = 0;
          *(_QWORD *)v1493 = operator new(0x18uLL);
          *(_QWORD *)&v1493[8] = *(_QWORD *)v1493;
          *(_QWORD *)&v1493[16] = *(_QWORD *)v1493 + 24;
          *(_QWORD *)&v1493[8] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v1493[16], (__int128 *)v1488, (__int128 *)&v1488[24], *(std::string **)v1493);
          if ((v1488[23] & 0x80000000) != 0)
            operator delete(*(void **)v1488);
          std::string::basic_string[abi:ne180100]<0>(v1488, "bias_grad");
          v936 = (*(uint64_t (**)(void *))(*(_QWORD *)v930 + 384))(v930);
          if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(v1509, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
          else
            v1509[0] = __s;
          v1276 = 0;
          v1275 = 0;
          v1277 = 0;
          __n[0] = (std::string::size_type)&v1275;
          LOBYTE(__n[1]) = 0;
          v1275 = (std::string *)operator new(0x18uLL);
          v1276 = v1275;
          v1277 = v1275 + 1;
          v1276 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v1277, (__int128 *)v1509, (__int128 *)&v1509[1], v1275);
          if ((v1438 & 0x80u) == 0)
            v1174 = v1438;
          else
            v1174 = v1437;
          std::string::basic_string[abi:ne180100]((uint64_t)__n, v1174 + 6);
          if ((SBYTE7(v1504) & 0x80u) == 0)
            v1175 = __n;
          else
            v1175 = (std::string::size_type *)__n[0];
          if (v1174)
          {
            if ((v1438 & 0x80u) == 0)
              v1176 = &v1436;
            else
              v1176 = v1436;
            memmove(v1175, v1176, v1174);
          }
          strcpy((char *)v1175 + v1174, "_dbias");
          v1273 = 0;
          v1272 = 0;
          v1274 = 0;
          v1514.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1272;
          v1514.__r_.__value_.__s.__data_[8] = 0;
          v1272 = (std::string *)operator new(0x18uLL);
          v1273 = v1272;
          v1274 = v1272 + 1;
          v1273 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v1274, (__int128 *)__n, (__int128 *)((char *)&v1504 + 8), v1272);
          add_with_context_transfers_t<Espresso::generic_bias_grad_kernel,Espresso::bias_params>(&v1510, (uint64_t)&v1458, (uint64_t)v1488, (uint64_t)&v1436, v936, (uint64_t)v1275, (uint64_t)v1276, (uint64_t *)&v1272);
          v1514.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1272;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1514);
          if (SBYTE7(v1504) < 0)
            operator delete((void *)__n[0]);
          __n[0] = (std::string::size_type)&v1275;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__n);
          if (SHIBYTE(v1509[0].__r_.__value_.__r.__words[2]) < 0)
            operator delete(v1509[0].__r_.__value_.__l.__data_);
          if ((v1488[23] & 0x80000000) != 0)
            operator delete(*(void **)v1488);
          (*(void (**)(_BYTE *__return_ptr, std::string::size_type, _QWORD))(*(_QWORD *)v1512.__r_.__value_.__l.__data_
                                                                                      + 320))(v1488, v1512.__r_.__value_.__r.__words[0], 0);
          std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__assign_with_size[abi:ne180100]<std::shared_ptr<Espresso::abstract_blob_container> const*,std::shared_ptr<Espresso::abstract_blob_container> const*>(v1510.__r_.__value_.__r.__words[0] + 280, (uint64_t *)v1488, (uint64_t *)&v1488[16], 1uLL);
          std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v1488);
          v1177 = (std::__shared_weak_count *)v1510.__r_.__value_.__l.__size_;
          if (v1510.__r_.__value_.__l.__size_)
          {
            v1178 = (unint64_t *)(v1510.__r_.__value_.__l.__size_ + 8);
            do
              v1179 = __ldaxr(v1178);
            while (__stlxr(v1179 - 1, v1178));
            if (!v1179)
            {
              ((void (*)(std::__shared_weak_count *))v1177->__on_zero_shared)(v1177);
              std::__shared_weak_count::__release_weak(v1177);
            }
          }
          *(_QWORD *)v1488 = v1493;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v1488);
          v338 = 0;
          goto LABEL_2413;
        }
        *(_OWORD *)&v1512.__r_.__value_.__l.__data_ = 0uLL;
        if (v1169)
        {
          v1170 = v1169;
          v1514.__r_.__value_.__r.__words[0] = (std::string::size_type)v1169;
          v1514.__r_.__value_.__l.__size_ = (std::string::size_type)v1242;
          if (v1242)
          {
            v1171 = (unint64_t *)&v1242->__shared_owners_;
            do
              v1172 = __ldxr(v1171);
            while (__stxr(v1172 + 1, v1171));
          }
          std::string::basic_string[abi:ne180100]<0>(v1493, "batchnorm_grad");
          v1173 = (*(uint64_t (**)(void *))(*(_QWORD *)v1170 + 384))(v1170);
          if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external((std::string *)v1488, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
          else
            *(std::string *)v1488 = __s;
          v1270 = 0;
          v1269 = 0;
          v1271 = 0;
          v1509[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v1269;
          v1509[0].__r_.__value_.__s.__data_[8] = 0;
          v1269 = (std::string *)operator new(0x18uLL);
          v1270 = v1269;
          v1271 = v1269 + 1;
          v1270 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v1271, (__int128 *)v1488, (__int128 *)&v1488[24], v1269);
          if ((v1438 & 0x80u) == 0)
            v1191 = v1438;
          else
            v1191 = v1437;
          std::string::basic_string[abi:ne180100]((uint64_t)v1509, v1191 + 4);
          if ((v1509[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v1192 = v1509;
          else
            v1192 = (std::string *)v1509[0].__r_.__value_.__r.__words[0];
          if (v1191)
          {
            if ((v1438 & 0x80u) == 0)
              v1193 = &v1436;
            else
              v1193 = v1436;
            memmove(v1192, v1193, v1191);
          }
          strcpy((char *)v1192 + v1191, "_dbn");
          v1267 = 0;
          v1266 = 0;
          v1268 = 0;
          __n[0] = (std::string::size_type)&v1266;
          LOBYTE(__n[1]) = 0;
          v1266 = (std::string *)operator new(0x18uLL);
          v1267 = v1266;
          v1268 = v1266 + 1;
          v1267 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v1268, (__int128 *)v1509, (__int128 *)&v1509[1], v1266);
          add_with_context_transfers_t<Espresso::generic_batchnorm_grad_kernel,Espresso::batchnorm_params>(&v1510, (uint64_t)&v1458, (uint64_t)v1493, (uint64_t)&v1436, v1173, (uint64_t)v1269, (uint64_t)v1270, (uint64_t *)&v1266);
          __n[0] = (std::string::size_type)&v1266;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__n);
          if (SHIBYTE(v1509[0].__r_.__value_.__r.__words[2]) < 0)
            operator delete(v1509[0].__r_.__value_.__l.__data_);
          v1509[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v1269;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v1509);
          if ((v1488[23] & 0x80000000) != 0)
            operator delete(*(void **)v1488);
          if ((v1493[23] & 0x80000000) != 0)
            operator delete(*(void **)v1493);
          (*(void (**)(_BYTE *__return_ptr, std::string::size_type, _QWORD))(*(_QWORD *)v1514.__r_.__value_.__l.__data_
                                                                                      + 320))(v1493, v1514.__r_.__value_.__r.__words[0], 0);
          std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__assign_with_size[abi:ne180100]<std::shared_ptr<Espresso::abstract_blob_container> const*,std::shared_ptr<Espresso::abstract_blob_container> const*>(v1510.__r_.__value_.__r.__words[0] + 280, (uint64_t *)v1493, (uint64_t *)&v1493[16], 1uLL);
          std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v1493);
          v1194 = (std::__shared_weak_count *)v1510.__r_.__value_.__l.__size_;
          if (v1510.__r_.__value_.__l.__size_)
          {
            v1195 = (unint64_t *)(v1510.__r_.__value_.__l.__size_ + 8);
            do
              v1196 = __ldaxr(v1195);
            while (__stlxr(v1196 - 1, v1195));
LABEL_2474:
            if (!v1196)
            {
              ((void (*)(std::__shared_weak_count *))v1194->__on_zero_shared)(v1194);
              std::__shared_weak_count::__release_weak(v1194);
            }
          }
          goto LABEL_2476;
        }
        *(_OWORD *)&v1514.__r_.__value_.__l.__data_ = 0uLL;
        if (v1186)
        {
          v1187 = v1186;
          __n[0] = (std::string::size_type)v1186;
          __n[1] = (std::string::size_type)v1242;
          if (v1242)
          {
            v1188 = (unint64_t *)&v1242->__shared_owners_;
            do
              v1189 = __ldxr(v1188);
            while (__stxr(v1189 + 1, v1188));
          }
          std::string::basic_string[abi:ne180100]<0>(v1493, "l2_normalize_grad");
          v1190 = (*(uint64_t (**)(void *))(*(_QWORD *)v1187 + 320))(v1187);
          if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external((std::string *)v1488, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
          else
            *(std::string *)v1488 = __s;
          std::vector<std::string>::vector[abi:ne180100]((uint64_t)v1264, (__int128 *)v1488, 1uLL);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(v1509, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
          else
            v1509[0] = __str;
          std::vector<std::string>::vector[abi:ne180100]((uint64_t)v1263, (__int128 *)v1509, 1uLL);
          add_with_context_transfers_t<Espresso::l2_norm_params>(v1265, (uint64_t)&v1458, (uint64_t)v1493, (uint64_t)&v1436, v1190, v1264, v1263);
          std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v1265);
          v1510.__r_.__value_.__r.__words[0] = (std::string::size_type)v1263;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1510);
          if (SHIBYTE(v1509[0].__r_.__value_.__r.__words[2]) < 0)
            operator delete(v1509[0].__r_.__value_.__l.__data_);
          v1509[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v1264;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v1509);
          if ((v1488[23] & 0x80000000) != 0)
            operator delete(*(void **)v1488);
          if ((v1493[23] & 0x80000000) != 0)
            operator delete(*(void **)v1493);
          v1194 = (std::__shared_weak_count *)__n[1];
          if (__n[1])
          {
            v1203 = (unint64_t *)(__n[1] + 8);
            do
              v1196 = __ldaxr(v1203);
            while (__stlxr(v1196 - 1, v1203));
            goto LABEL_2474;
          }
LABEL_2476:
          v338 = 0;
        }
        else
        {
          __n[1] = 0;
          __n[0] = 0;
          if (!v1197)
            goto LABEL_2518;
          *(_QWORD *)v1493 = v1197;
          *(_QWORD *)&v1493[8] = v1242;
          if (v1242)
          {
            v1198 = (unint64_t *)&v1242->__shared_owners_;
            do
              v1199 = __ldxr(v1198);
            while (__stxr(v1199 + 1, v1198));
            v1200 = *(std::__shared_weak_count **)&v1493[8];
            if (*(_QWORD *)&v1493[8])
            {
              v1201 = (unint64_t *)(*(_QWORD *)&v1493[8] + 8);
              do
                v1202 = __ldaxr(v1201);
              while (__stlxr(v1202 - 1, v1201));
              if (!v1202)
              {
                ((void (*)(std::__shared_weak_count *))v1200->__on_zero_shared)(v1200);
                std::__shared_weak_count::__release_weak(v1200);
              }
            }
          }
          v338 = 1;
        }
        v1204 = (std::__shared_weak_count *)v1514.__r_.__value_.__l.__size_;
        if (v1514.__r_.__value_.__l.__size_)
        {
          v1205 = (unint64_t *)(v1514.__r_.__value_.__l.__size_ + 8);
          do
            v1206 = __ldaxr(v1205);
          while (__stlxr(v1206 - 1, v1205));
          if (!v1206)
          {
            ((void (*)(std::__shared_weak_count *))v1204->__on_zero_shared)(v1204);
            std::__shared_weak_count::__release_weak(v1204);
          }
        }
LABEL_2413:
        v1180 = (std::__shared_weak_count *)v1512.__r_.__value_.__l.__size_;
        if (v1512.__r_.__value_.__l.__size_)
        {
          v1181 = (unint64_t *)(v1512.__r_.__value_.__l.__size_ + 8);
          do
            v1182 = __ldaxr(v1181);
          while (__stlxr(v1182 - 1, v1181));
          if (!v1182)
          {
            ((void (*)(std::__shared_weak_count *))v1180->__on_zero_shared)(v1180);
            std::__shared_weak_count::__release_weak(v1180);
          }
        }
LABEL_2418:
        v1183 = v1287;
        if (v1287)
        {
          v1184 = (unint64_t *)&v1287->__shared_owners_;
          do
            v1185 = __ldaxr(v1184);
          while (__stlxr(v1185 - 1, v1184));
          if (!v1185)
          {
            ((void (*)(std::__shared_weak_count *))v1183->__on_zero_shared)(v1183);
            std::__shared_weak_count::__release_weak(v1183);
          }
        }
LABEL_2378:
        v1166 = v1297;
        if (v1297)
        {
          v1167 = (unint64_t *)&v1297->__shared_owners_;
          do
            v1168 = __ldaxr(v1167);
          while (__stlxr(v1168 - 1, v1167));
          if (!v1168)
          {
            ((void (*)(std::__shared_weak_count *))v1166->__on_zero_shared)(v1166);
            std::__shared_weak_count::__release_weak(v1166);
          }
        }
LABEL_1858:
        v904 = v1307;
        if (v1307)
        {
          v905 = (unint64_t *)&v1307->__shared_owners_;
          do
            v906 = __ldaxr(v905);
          while (__stlxr(v906 - 1, v905));
          if (!v906)
          {
            ((void (*)(std::__shared_weak_count *))v904->__on_zero_shared)(v904);
            std::__shared_weak_count::__release_weak(v904);
          }
        }
        goto LABEL_1630;
      }
      v248 = v247;
      v1357 = v247;
      v1358 = v1242;
      if (v1242)
      {
        v249 = (unint64_t *)&v1242->__shared_owners_;
        do
          v250 = __ldxr(v249);
        while (__stxr(v250 + 1, v249));
      }
      if (*(_DWORD *)(*(uint64_t (**)(void *))(*(_QWORD *)v247 + 384))(v247))
      {
        v251 = *(unsigned int (****)(_QWORD))(*(_QWORD *)(*(_QWORD *)this + 16) + 8);
        if ((**v251)(v251))
        {
          v252 = *(_QWORD *)this + 96;
          *(_QWORD *)v1493 = v1439;
          v253 = (const void **)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v252, v1439, v1493)[3];
          if (*((char *)v253 + 23) >= 0)
            v254 = *((unsigned __int8 *)v253 + 23);
          else
            v254 = (size_t)v253[1];
          std::string::basic_string[abi:ne180100]((uint64_t)v1488, v254 + 9);
          if (v1488[23] >= 0)
            v255 = v1488;
          else
            v255 = *(_BYTE **)v1488;
          if (v254)
          {
            if (*((char *)v253 + 23) >= 0)
              v256 = v253;
            else
              v256 = *v253;
            memmove(v255, v256, v254);
          }
          strcpy(&v255[v254], "_mask_i32");
          std::string::basic_string[abi:ne180100]<0>(v1509, "pool_grad");
          v257 = (*(uint64_t (**)(void *))(*(_QWORD *)v248 + 384))(v248);
          if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external((std::string *)v1493, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
          else
            *(std::string *)v1493 = __s;
          if ((v1488[23] & 0x80000000) != 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&v1493[24], *(const std::string::value_type **)v1488, *(std::string::size_type *)&v1488[8]);
          }
          else
          {
            *(_OWORD *)&v1493[24] = *(_OWORD *)v1488;
            *(_QWORD *)&v1493[40] = *(_QWORD *)&v1488[16];
          }
          v1337 = 0;
          v1336 = 0;
          v1338 = 0;
          __n[0] = (std::string::size_type)&v1336;
          LOBYTE(__n[1]) = 0;
          v1336 = (std::string *)operator new(0x30uLL);
          v1337 = v1336;
          v1338 = v1336 + 2;
          v1337 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v1338, (__int128 *)v1493, (__int128 *)&v1493[48], v1336);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)__n, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
          }
          else
          {
            *(_OWORD *)__n = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
            *(_QWORD *)&v1504 = *((_QWORD *)&__str.__r_.__value_.__l + 2);
          }
          v1334 = 0;
          v1333 = 0;
          v1335 = 0;
          v1514.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1333;
          v1514.__r_.__value_.__s.__data_[8] = 0;
          v1333 = (std::string *)operator new(0x18uLL);
          v1334 = v1333;
          v1335 = v1333 + 1;
          v1334 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v1335, (__int128 *)__n, (__int128 *)((char *)&v1504 + 8), v1333);
          add_with_context_transfers_t<Espresso::pool_params>(&v1339, (uint64_t)&v1458, (uint64_t)v1509, (uint64_t)&v1436, v257, (uint64_t *)&v1336, (uint64_t *)&v1333);
          v578 = v1340;
          if (v1340)
          {
            v579 = (unint64_t *)&v1340->__shared_owners_;
            do
              v580 = __ldaxr(v579);
            while (__stlxr(v580 - 1, v579));
            if (!v580)
            {
              ((void (*)(std::__shared_weak_count *))v578->__on_zero_shared)(v578);
              std::__shared_weak_count::__release_weak(v578);
            }
          }
          v1514.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1333;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1514);
          if (SBYTE7(v1504) < 0)
            operator delete((void *)__n[0]);
          __n[0] = (std::string::size_type)&v1336;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__n);
          for (i2 = 0; i2 != -48; i2 -= 24)
          {
            if ((char)v1493[i2 + 47] < 0)
              operator delete(*(void **)&v1493[i2 + 24]);
          }
          if (SHIBYTE(v1509[0].__r_.__value_.__r.__words[2]) < 0)
            operator delete(v1509[0].__r_.__value_.__l.__data_);
          v582 = *(_QWORD *)this + 96;
          v583 = v1439;
          *(_QWORD *)v1493 = v1439;
          v584 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v582, v1439, v1493);
          if (v584[4] - v584[3] == 24)
          {
            v585 = *(_QWORD *)this + 96;
            *(_QWORD *)v1493 = v583;
            v586 = (char **)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v585, v583, v1493);
            v587 = v586;
            v588 = v586[4];
            if (v588 >= v586[5])
            {
              v729 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v586 + 3, (uint64_t)v1488);
            }
            else
            {
              if ((v1488[23] & 0x80000000) != 0)
              {
                std::string::__init_copy_ctor_external((std::string *)v586[4], *(const std::string::value_type **)v1488, *(std::string::size_type *)&v1488[8]);
              }
              else
              {
                v589 = *(_OWORD *)v1488;
                *((_QWORD *)v588 + 2) = *(_QWORD *)&v1488[16];
                *(_OWORD *)v588 = v589;
              }
              v729 = (std::string *)(v588 + 24);
              v587[4] = v588 + 24;
            }
            v587[4] = (char *)v729;
            v757 = *(_QWORD *)this + 96;
            v1509[0].__r_.__value_.__r.__words[0] = v583;
            *(_QWORD *)v1493 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v757, v583, v1509)[3];
            v758 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&__p, *(_QWORD **)v1493, (__int128 **)v1493);
            *(_QWORD *)v1493 = v1488;
            v759 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&__p, v1488, (__int128 **)v1493);
            v760 = *(_OWORD *)(v758 + 56);
            v761 = *(_OWORD *)(v758 + 72);
            *((_QWORD *)v759 + 11) = *((_QWORD *)v758 + 11);
            *(_OWORD *)(v759 + 72) = v761;
            *(_OWORD *)(v759 + 56) = v760;
            if (v759 != v758)
              std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v759 + 96, *((char **)v758 + 12), *((_QWORD *)v758 + 13), (uint64_t)(*((_QWORD *)v758 + 13) - *((_QWORD *)v758 + 12)) >> 2);
          }
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(v1488, "pool_grad");
          v507 = (*(uint64_t (**)(void *))(*(_QWORD *)v248 + 384))(v248);
          if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external((std::string *)v1493, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
          else
            *(std::string *)v1493 = __s;
          if (SHIBYTE(v1433.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external((std::string *)&v1493[24], v1433.__r_.__value_.__l.__data_, v1433.__r_.__value_.__l.__size_);
          else
            *(std::string *)&v1493[24] = v1433;
          v1345 = 0;
          v1344 = 0;
          v1346 = 0;
          v1509[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v1344;
          v1509[0].__r_.__value_.__s.__data_[8] = 0;
          v1344 = (std::string *)operator new(0x30uLL);
          v1345 = v1344;
          v1346 = v1344 + 2;
          v1345 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v1346, (__int128 *)v1493, (__int128 *)&v1493[48], v1344);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(v1509, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
          else
            v1509[0] = __str;
          v1342 = 0;
          v1341 = 0;
          v1343 = 0;
          __n[0] = (std::string::size_type)&v1341;
          LOBYTE(__n[1]) = 0;
          v1341 = (std::string *)operator new(0x18uLL);
          v1342 = v1341;
          v1343 = v1341 + 1;
          v1342 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v1343, (__int128 *)v1509, (__int128 *)&v1509[1], v1341);
          add_with_context_transfers_t<Espresso::pool_params>(&v1347, (uint64_t)&v1458, (uint64_t)v1488, (uint64_t)&v1436, v507, (uint64_t *)&v1344, (uint64_t *)&v1341);
          v730 = v1348;
          if (v1348)
          {
            v731 = (unint64_t *)&v1348->__shared_owners_;
            do
              v732 = __ldaxr(v731);
            while (__stlxr(v732 - 1, v731));
            if (!v732)
            {
              ((void (*)(std::__shared_weak_count *))v730->__on_zero_shared)(v730);
              std::__shared_weak_count::__release_weak(v730);
            }
          }
          __n[0] = (std::string::size_type)&v1341;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__n);
          if (SHIBYTE(v1509[0].__r_.__value_.__r.__words[2]) < 0)
            operator delete(v1509[0].__r_.__value_.__l.__data_);
          v1509[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v1344;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v1509);
          for (i3 = 0; i3 != -48; i3 -= 24)
          {
            if ((char)v1493[i3 + 47] < 0)
              operator delete(*(void **)&v1493[i3 + 24]);
          }
        }
        if ((v1488[23] & 0x80000000) == 0)
          goto LABEL_1561;
        v593 = *(void **)v1488;
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(v1493, "pool_grad");
        v506 = (*(uint64_t (**)(void *))(*(_QWORD *)v248 + 384))(v248);
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external((std::string *)v1488, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
        else
          *(std::string *)v1488 = __s;
        v1353 = 0;
        v1352 = 0;
        v1354 = 0;
        v1509[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v1352;
        v1509[0].__r_.__value_.__s.__data_[8] = 0;
        v1352 = (std::string *)operator new(0x18uLL);
        v1353 = v1352;
        v1354 = v1352 + 1;
        v1353 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v1354, (__int128 *)v1488, (__int128 *)&v1488[24], v1352);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(v1509, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
        else
          v1509[0] = __str;
        v1350 = 0;
        v1349 = 0;
        v1351 = 0;
        __n[0] = (std::string::size_type)&v1349;
        LOBYTE(__n[1]) = 0;
        v1349 = (std::string *)operator new(0x18uLL);
        v1350 = v1349;
        v1351 = v1349 + 1;
        v1350 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v1351, (__int128 *)v1509, (__int128 *)&v1509[1], v1349);
        add_with_context_transfers_t<Espresso::pool_params>(&v1355, (uint64_t)&v1458, (uint64_t)v1493, (uint64_t)&v1436, v506, (uint64_t *)&v1352, (uint64_t *)&v1349);
        v590 = v1356;
        if (v1356)
        {
          v591 = (unint64_t *)&v1356->__shared_owners_;
          do
            v592 = __ldaxr(v591);
          while (__stlxr(v592 - 1, v591));
          if (!v592)
          {
            ((void (*)(std::__shared_weak_count *))v590->__on_zero_shared)(v590);
            std::__shared_weak_count::__release_weak(v590);
          }
        }
        __n[0] = (std::string::size_type)&v1349;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__n);
        if (SHIBYTE(v1509[0].__r_.__value_.__r.__words[2]) < 0)
          operator delete(v1509[0].__r_.__value_.__l.__data_);
        v1509[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v1352;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v1509);
        if ((v1488[23] & 0x80000000) != 0)
          operator delete(*(void **)v1488);
        if ((v1493[23] & 0x80000000) == 0)
          goto LABEL_1561;
        v593 = *(void **)v1493;
      }
      operator delete(v593);
LABEL_1561:
      v338 = 0;
LABEL_1562:
      v762 = v1358;
      if (v1358)
      {
        v763 = (unint64_t *)&v1358->__shared_owners_;
        do
          v764 = __ldaxr(v763);
        while (__stlxr(v764 - 1, v763));
        if (!v764)
        {
          ((void (*)(std::__shared_weak_count *))v762->__on_zero_shared)(v762);
          std::__shared_weak_count::__release_weak(v762);
        }
      }
LABEL_1194:
      v575 = v1392;
      if (v1392)
      {
        v576 = (unint64_t *)&v1392->__shared_owners_;
        do
          v577 = __ldaxr(v576);
        while (__stlxr(v577 - 1, v576));
        if (!v577)
        {
          ((void (*)(std::__shared_weak_count *))v575->__on_zero_shared)(v575);
          std::__shared_weak_count::__release_weak(v575);
        }
      }
LABEL_638:
      v339 = (std::__shared_weak_count *)v1480;
      if (!v1480)
        goto LABEL_642;
      v340 = (unint64_t *)(v1480 + 8);
      do
        v341 = __ldaxr(v340);
      while (__stlxr(v341 - 1, v340));
      if (v341)
      {
LABEL_642:
        if (v338)
          goto LABEL_645;
LABEL_643:
        *(_QWORD *)v1493 = &__str;
        v342 = std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v1442, &__str, (__int128 **)v1493);
        ++*((_DWORD *)v342 + 14);
        goto LABEL_645;
      }
      ((void (*)(std::__shared_weak_count *))v339->__on_zero_shared)(v339);
      std::__shared_weak_count::__release_weak(v339);
      if (!v338)
        goto LABEL_643;
LABEL_645:
      v343 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v344 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      else
        v344 = __str.__r_.__value_.__l.__size_;
      v345 = HIBYTE(v1431.__r_.__value_.__r.__words[2]);
      if ((v1431.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v345 = v1431.__r_.__value_.__l.__size_;
      if (v344 == v345)
      {
        if ((v1431.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v346 = &v1431;
        else
          v346 = (std::string *)v1431.__r_.__value_.__r.__words[0];
        if ((*((_BYTE *)&__str.__r_.__value_.__s + 23) & 0x80) != 0)
        {
          if (!memcmp(__str.__r_.__value_.__l.__data_, v346, __str.__r_.__value_.__l.__size_))
            goto LABEL_918;
        }
        else
        {
          if (!*((_BYTE *)&__str.__r_.__value_.__s + 23))
            goto LABEL_918;
          v347 = &__str;
          while (v347->__r_.__value_.__s.__data_[0] == v346->__r_.__value_.__s.__data_[0])
          {
            v347 = (std::string *)((char *)v347 + 1);
            v346 = (std::string *)((char *)v346 + 1);
            if (!--v343)
              goto LABEL_918;
          }
        }
      }
      memset(&v1493[8], 0, 44);
      *(_QWORD *)v1493 = _D9;
      std::string::basic_string[abi:ne180100]<0>(&v1486, "axpby");
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v348 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      else
        v348 = __str.__r_.__value_.__l.__size_;
      std::string::basic_string[abi:ne180100]((uint64_t)&v1484, v348 + 6);
      if ((v1484.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v349 = &v1484;
      else
        v349 = (std::string *)v1484.__r_.__value_.__r.__words[0];
      if (v348)
      {
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v350 = &__str;
        else
          v350 = (std::string *)__str.__r_.__value_.__r.__words[0];
        memmove(v349, v350, v348);
      }
      strcpy((char *)v349 + v348, "_split");
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external((std::string *)v1488, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
      else
        *(std::string *)v1488 = __str;
      if (SHIBYTE(v1431.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v1488[24], v1431.__r_.__value_.__l.__data_, v1431.__r_.__value_.__l.__size_);
      }
      else
      {
        *(_OWORD *)&v1488[24] = *(_OWORD *)&v1431.__r_.__value_.__l.__data_;
        *(_QWORD *)&v1489 = *((_QWORD *)&v1431.__r_.__value_.__l + 2);
      }
      v1260 = 0;
      v1259 = 0;
      v1261 = 0;
      v1509[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v1259;
      v1509[0].__r_.__value_.__s.__data_[8] = 0;
      v1259 = (std::string *)operator new(0x30uLL);
      v1260 = v1259;
      v1261 = v1259 + 2;
      v1260 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v1261, (__int128 *)v1488, (__int128 *)((char *)&v1489 + 8), v1259);
      if (SHIBYTE(v1431.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v1482, v1431.__r_.__value_.__l.__data_, v1431.__r_.__value_.__l.__size_);
      else
        v1482 = v1431;
      v1257 = 0;
      v1256 = 0;
      v1258 = 0;
      v1509[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v1256;
      v1509[0].__r_.__value_.__s.__data_[8] = 0;
      v1256 = (std::string *)operator new(0x18uLL);
      v1257 = v1256;
      v1258 = v1256 + 1;
      v1257 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v1258, (__int128 *)&v1482, (__int128 *)&v1483, v1256);
      *(_OWORD *)&v1510.__r_.__value_.__r.__words[1] = 0uLL;
      v1510.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1510.__r_.__value_.__l.__size_;
      LODWORD(v1357) = 0;
      v351 = v1259;
      v1250 = v1260;
      if (v1259 != v1260)
      {
        v352 = 0;
        while (1)
        {
          if (SHIBYTE(v351->__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(v1509, v351->__r_.__value_.__l.__data_, v351->__r_.__value_.__l.__size_);
          }
          else
          {
            v353 = *(_OWORD *)&v351->__r_.__value_.__l.__data_;
            v1509[0].__r_.__value_.__r.__words[2] = v351->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v1509[0].__r_.__value_.__l.__data_ = v353;
          }
          v354 = v1464;
          v355 = *(_QWORD *)(v1464 + 32);
          if (*(_QWORD *)(v1464 + 40) != v355)
            break;
LABEL_726:
          LODWORD(v1357) = ++v352;
          if (SHIBYTE(v1509[0].__r_.__value_.__r.__words[2]) < 0)
            operator delete(v1509[0].__r_.__value_.__l.__data_);
          if (++v351 == v1250)
          {
            v379 = v1259;
            v351 = v1260;
            goto LABEL_731;
          }
        }
        v356 = 0;
        while (1)
        {
          v357 = *(_QWORD *)(*(_QWORD *)(v355 + 16 * v356) + 64);
          v359 = *(_QWORD *)(v357 + 8);
          v358 = *(_QWORD *)(v357 + 16);
          v1514.__r_.__value_.__r.__words[0] = v359;
          v1514.__r_.__value_.__l.__size_ = v358;
          if (v358)
          {
            v360 = (unint64_t *)(v358 + 8);
            do
              v361 = __ldxr(v360);
            while (__stxr(v361 + 1, v360));
            v354 = v1464;
          }
          __n[0] = v356;
          v362 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v354 + 96, v356, __n);
          v364 = (__int128 *)v362[3];
          v363 = (__int128 *)v362[4];
          if (v364 != v363)
            break;
LABEL_719:
          v376 = (std::__shared_weak_count *)v1514.__r_.__value_.__l.__size_;
          if (v1514.__r_.__value_.__l.__size_)
          {
            v377 = (unint64_t *)(v1514.__r_.__value_.__l.__size_ + 8);
            do
              v378 = __ldaxr(v377);
            while (__stlxr(v378 - 1, v377));
            if (!v378)
            {
              ((void (*)(std::__shared_weak_count *))v376->__on_zero_shared)(v376);
              std::__shared_weak_count::__release_weak(v376);
            }
          }
          ++v356;
          v354 = v1464;
          v355 = *(_QWORD *)(v1464 + 32);
          if (v356 >= (*(_QWORD *)(v1464 + 40) - v355) >> 4)
          {
            v352 = (int)v1357;
            goto LABEL_726;
          }
        }
        v365 = v1514.__r_.__value_.__r.__words[0];
        v366 = (int)v1357;
        while (1)
        {
          if (*((char *)v364 + 23) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)__n, *(const std::string::value_type **)v364, *((_QWORD *)v364 + 1));
          }
          else
          {
            v367 = *v364;
            *(_QWORD *)&v1504 = *((_QWORD *)v364 + 2);
            *(_OWORD *)__n = v367;
          }
          v368 = BYTE7(v1504);
          v369 = BYTE7(v1504);
          if ((SBYTE7(v1504) & 0x80u) == 0)
            v370 = BYTE7(v1504);
          else
            v370 = __n[1];
          v371 = HIBYTE(v1509[0].__r_.__value_.__r.__words[2]);
          if ((v1509[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v371 = v1509[0].__r_.__value_.__l.__size_;
          if (v370 == v371)
          {
            if ((v1509[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v372 = v1509;
            else
              v372 = (std::string *)v1509[0].__r_.__value_.__r.__words[0];
            if (SBYTE7(v1504) < 0)
            {
              v374 = (void *)__n[0];
              if (memcmp((const void *)__n[0], v372, __n[1]))
                goto LABEL_717;
LABEL_713:
              if (v365 != (_QWORD)v1468)
              {
                v375 = std::__tree<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::__map_value_compare<std::shared_ptr<Espresso::abstract_context>,std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::less<std::shared_ptr<Espresso::abstract_context>>,true>,std::allocator<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>>>::__emplace_unique_key_args<std::shared_ptr<Espresso::abstract_context>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<Espresso::abstract_context> const&>,std::tuple<>>((uint64_t **)&v1510, v365, (uint64_t *)&v1514);
                *((_DWORD *)std::__tree<std::__value_type<Espresso::platform,int>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,int>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,int>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform const&>,std::tuple<>>((uint64_t **)v375 + 6, v366, (unsigned int *)&v1357)+ 8) = 1;
                v369 = BYTE7(v1504);
              }
              goto LABEL_715;
            }
            if (!BYTE7(v1504))
              goto LABEL_713;
            v373 = __n;
            while (*(unsigned __int8 *)v373 == v372->__r_.__value_.__s.__data_[0])
            {
              v373 = (std::string::size_type *)((char *)v373 + 1);
              v372 = (std::string *)((char *)v372 + 1);
              if (!--v368)
                goto LABEL_713;
            }
          }
LABEL_715:
          if (v369 < 0)
          {
            v374 = (void *)__n[0];
LABEL_717:
            operator delete(v374);
          }
          v364 = (__int128 *)((char *)v364 + 24);
          if (v364 == v363)
            goto LABEL_719;
        }
      }
      v379 = v1259;
LABEL_731:
      memset(&lpsrc, 0, sizeof(lpsrc));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&lpsrc, (uint64_t)v379, (uint64_t)v351, 0xAAAAAAAAAAAAAAABLL * (((char *)v351 - (char *)v379) >> 3));
      v380 = (std::string::size_type *)v1510.__r_.__value_.__r.__words[0];
      v381 = v1510.__r_.__value_.__r.__words[0] == (_QWORD)&v1510.__r_.__value_.__l.__size_;
LABEL_732:
      if (!v381)
      {
        std::pair<std::shared_ptr<Espresso::abstract_context> const,std::map<int,int>>::pair[abi:ne180100](v1509, v380 + 4);
        v382 = v1509[0].__r_.__value_.__l.__size_;
        v1244 = v1509[0].__r_.__value_.__r.__words[0];
        if (v1509[0].__r_.__value_.__l.__size_)
        {
          v383 = (unint64_t *)(v1509[0].__r_.__value_.__l.__size_ + 8);
          do
            v384 = __ldxr(v383);
          while (__stxr(v384 + 1, v383));
        }
        v1251 = (std::__shared_weak_count *)v382;
        memset(&v1514, 0, sizeof(v1514));
        memset(&v1512, 0, sizeof(v1512));
        std::string::basic_string[abi:ne180100]<0>(&v1507, "");
        v385 = (std::string *)v1509[0].__r_.__value_.__r.__words[2];
        if ((std::string *)v1509[0].__r_.__value_.__r.__words[2] == &v1509[1])
          goto LABEL_837;
        while (1)
        {
          v386 = HIDWORD(v385[1].__r_.__value_.__r.__words[0]);
          v387 = &v1259[v386];
          if (SHIBYTE(v387->__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)__n, v387->__r_.__value_.__l.__data_, v387->__r_.__value_.__l.__size_);
          }
          else
          {
            v388 = *(_OWORD *)&v387->__r_.__value_.__l.__data_;
            *(_QWORD *)&v1504 = *((_QWORD *)&v387->__r_.__value_.__l + 2);
            *(_OWORD *)__n = v388;
          }
          if ((SBYTE7(v1504) & 0x80u) == 0)
            v389 = BYTE7(v1504);
          else
            v389 = __n[1];
          if ((SBYTE7(v1504) & 0x80u) == 0)
            v390 = __n;
          else
            v390 = (std::string::size_type *)__n[0];
          if (v389 >= 4)
          {
            v391 = (char *)v390 + v389;
            v392 = v389;
            v393 = v390;
            do
            {
              v394 = (std::string::size_type *)memchr(v393, 99, v392 - 3);
              if (!v394)
                break;
              if (*(_DWORD *)v394 == 1601532003)
              {
                if (v394 != (std::string::size_type *)v391 && v394 == v390)
                {
                  std::string::basic_string(&v1505, (const std::string *)__n, 4uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v1501);
                  goto LABEL_764;
                }
                break;
              }
              v393 = (std::string::size_type *)((char *)v394 + 1);
              v392 = v391 - (char *)v393;
            }
            while (v391 - (char *)v393 >= 4);
          }
          std::string::basic_string[abi:ne180100]((uint64_t)&v1505, v389 + 3);
          if ((v1505.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v395 = &v1505;
          else
            v395 = (std::string *)v1505.__r_.__value_.__r.__words[0];
          if (v389)
          {
            if ((SBYTE7(v1504) & 0x80u) == 0)
              v396 = __n;
            else
              v396 = (std::string::size_type *)__n[0];
            memmove(v395, v396, v389);
          }
          *(_DWORD *)((char *)&v395->__r_.__value_.__l.__data_ + v389) = 7894111;
LABEL_764:
          v397 = lpsrc.__r_.__value_.__r.__words[0] + 24 * v386;
          if (*(char *)(v397 + 23) < 0)
            operator delete(*(void **)v397);
          v398 = *(_OWORD *)&v1505.__r_.__value_.__l.__data_;
          *(_QWORD *)(v397 + 16) = *((_QWORD *)&v1505.__r_.__value_.__l + 2);
          *(_OWORD *)v397 = v398;
          v399 = v1464;
          if (*(_QWORD *)(v1464 + 40) == *(_QWORD *)(v1464 + 32))
          {
LABEL_796:
            v414 = &v1259[v386];
            v415 = (_OWORD *)v1514.__r_.__value_.__l.__size_;
            if (v1514.__r_.__value_.__l.__size_ >= v1514.__r_.__value_.__r.__words[2])
            {
              v417 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&v1514.__r_.__value_.__l.__data_, (uint64_t)v414);
            }
            else
            {
              if (SHIBYTE(v414->__r_.__value_.__r.__words[2]) < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)v1514.__r_.__value_.__l.__size_, v414->__r_.__value_.__l.__data_, v414->__r_.__value_.__l.__size_);
              }
              else
              {
                v416 = *(_OWORD *)&v414->__r_.__value_.__l.__data_;
                *(_QWORD *)(v1514.__r_.__value_.__l.__size_ + 16) = *((_QWORD *)&v414->__r_.__value_.__l + 2);
                *v415 = v416;
              }
              v417 = (std::string *)((char *)v415 + 24);
            }
            v1514.__r_.__value_.__l.__size_ = (std::string::size_type)v417;
            v418 = lpsrc.__r_.__value_.__r.__words[0] + 24 * v386;
            v419 = (_OWORD *)v1512.__r_.__value_.__l.__size_;
            if (v1512.__r_.__value_.__l.__size_ >= v1512.__r_.__value_.__r.__words[2])
            {
              v421 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&v1512.__r_.__value_.__l.__data_, v418);
            }
            else
            {
              if (*(char *)(v418 + 23) < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)v1512.__r_.__value_.__l.__size_, *(const std::string::value_type **)v418, *(_QWORD *)(v418 + 8));
              }
              else
              {
                v420 = *(_OWORD *)v418;
                *(_QWORD *)(v1512.__r_.__value_.__l.__size_ + 16) = *(_QWORD *)(v418 + 16);
                *v419 = v420;
              }
              v421 = (std::string *)((char *)v419 + 24);
            }
            v1512.__r_.__value_.__l.__size_ = (std::string::size_type)v421;
            if ((v1507.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v422 = HIBYTE(v1507.__r_.__value_.__r.__words[2]);
            else
              v422 = v1507.__r_.__value_.__l.__size_;
            std::string::basic_string[abi:ne180100]((uint64_t)&v1505, v422 + 1);
            if ((v1505.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v423 = &v1505;
            else
              v423 = (std::string *)v1505.__r_.__value_.__r.__words[0];
            if (v422)
            {
              if ((v1507.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v424 = &v1507;
              else
                v424 = (std::string *)v1507.__r_.__value_.__r.__words[0];
              memmove(v423, v424, v422);
            }
            *(_WORD *)((char *)&v423->__r_.__value_.__l.__data_ + v422) = 95;
            v425 = &v1259[v386];
            v426 = SHIBYTE(v425->__r_.__value_.__r.__words[2]);
            if (v426 >= 0)
              v427 = &v1259[v386];
            else
              v427 = (std::string *)v425->__r_.__value_.__r.__words[0];
            if (v426 >= 0)
              v428 = HIBYTE(v425->__r_.__value_.__r.__words[2]);
            else
              v428 = v425->__r_.__value_.__l.__size_;
            v429 = std::string::append(&v1505, (const std::string::value_type *)v427, v428);
            v430 = v429->__r_.__value_.__r.__words[0];
            *(_QWORD *)&v1501 = v429->__r_.__value_.__l.__size_;
            *(_QWORD *)((char *)&v1501 + 7) = *(std::string::size_type *)((char *)&v429->__r_.__value_.__r.__words[1] + 7);
            v431 = HIBYTE(v429->__r_.__value_.__r.__words[2]);
            v429->__r_.__value_.__l.__size_ = 0;
            v429->__r_.__value_.__r.__words[2] = 0;
            v429->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v1507.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v1507.__r_.__value_.__l.__data_);
            v1507.__r_.__value_.__r.__words[0] = v430;
            v1507.__r_.__value_.__l.__size_ = v1501;
            *(std::string::size_type *)((char *)&v1507.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)&v1501 + 7);
            *((_BYTE *)&v1507.__r_.__value_.__s + 23) = v431;
            if (SHIBYTE(v1505.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v1505.__r_.__value_.__l.__data_);
            goto LABEL_829;
          }
          v400 = 0;
          v401 = 0;
          do
          {
            v1505.__r_.__value_.__r.__words[0] = v400;
            v402 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v399 + 96, v400, &v1505);
            v404 = (__int128 *)v402[3];
            v403 = (__int128 *)v402[4];
            while (v404 != v403)
            {
              if (*((char *)v404 + 23) < 0)
              {
                std::string::__init_copy_ctor_external(&v1505, *(const std::string::value_type **)v404, *((_QWORD *)v404 + 1));
              }
              else
              {
                v405 = *v404;
                v1505.__r_.__value_.__r.__words[2] = *((_QWORD *)v404 + 2);
                *(_OWORD *)&v1505.__r_.__value_.__l.__data_ = v405;
              }
              v406 = lpsrc.__r_.__value_.__r.__words[0] + 24 * v386;
              if ((v1505.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v407 = HIBYTE(v1505.__r_.__value_.__r.__words[2]);
              else
                v407 = v1505.__r_.__value_.__l.__size_;
              v408 = *(unsigned __int8 *)(v406 + 23);
              v409 = (char)v408;
              if ((v408 & 0x80u) != 0)
                v408 = *(_QWORD *)(v406 + 8);
              if (v407 != v408)
                goto LABEL_788;
              if (v409 >= 0)
                v410 = (unsigned __int8 *)(lpsrc.__r_.__value_.__r.__words[0] + 24 * v386);
              else
                v410 = *(unsigned __int8 **)v406;
              if ((*((_BYTE *)&v1505.__r_.__value_.__s + 23) & 0x80) != 0)
              {
                v413 = (void *)v1505.__r_.__value_.__r.__words[0];
                v401 |= memcmp(v1505.__r_.__value_.__l.__data_, v410, v1505.__r_.__value_.__l.__size_) == 0;
                goto LABEL_791;
              }
              if (*((_BYTE *)&v1505.__r_.__value_.__s + 23))
              {
                v411 = &v1505;
                v412 = HIBYTE(v1505.__r_.__value_.__r.__words[2]);
                while (v411->__r_.__value_.__s.__data_[0] == *v410)
                {
                  v411 = (std::string *)((char *)v411 + 1);
                  ++v410;
                  if (!--v412)
                  {
                    v401 = 1;
                    break;
                  }
                }
LABEL_788:
                if ((*((_BYTE *)&v1505.__r_.__value_.__s + 23) & 0x80) == 0)
                  goto LABEL_793;
                v413 = (void *)v1505.__r_.__value_.__r.__words[0];
LABEL_791:
                operator delete(v413);
                goto LABEL_793;
              }
              v401 = 1;
LABEL_793:
              v404 = (__int128 *)((char *)v404 + 24);
            }
            ++v400;
            v399 = v1464;
          }
          while (v400 < (uint64_t)(*(_QWORD *)(v1464 + 40) - *(_QWORD *)(v1464 + 32)) >> 4);
          if ((v401 & 1) == 0)
            goto LABEL_796;
LABEL_829:
          if (SBYTE7(v1504) < 0)
            operator delete((void *)__n[0]);
          v432 = (std::string *)v385->__r_.__value_.__l.__size_;
          if (v432)
          {
            do
            {
              v433 = v432;
              v432 = (std::string *)v432->__r_.__value_.__r.__words[0];
            }
            while (v432);
          }
          else
          {
            do
            {
              v433 = (std::string *)v385->__r_.__value_.__r.__words[2];
              _ZF = v433->__r_.__value_.__r.__words[0] == (_QWORD)v385;
              v385 = v433;
            }
            while (!_ZF);
          }
          v385 = v433;
          if (v433 == &v1509[1])
          {
LABEL_837:
            if (v1512.__r_.__value_.__l.__size_ != v1512.__r_.__value_.__r.__words[0])
            {
              v1504 = 0u;
              *(_OWORD *)__n = 0u;
              std::string::basic_string[abi:ne180100]<0>(&v1505, "context_transfer");
              if ((v1507.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v434 = HIBYTE(v1507.__r_.__value_.__r.__words[2]);
              else
                v434 = v1507.__r_.__value_.__l.__size_;
              std::string::basic_string[abi:ne180100]((uint64_t)&v1501, v434 + 3);
              if (v1502 >= 0)
                v435 = &v1501;
              else
                v435 = (__int128 *)v1501;
              if (v434)
              {
                if ((v1507.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v436 = &v1507;
                else
                  v436 = (std::string *)v1507.__r_.__value_.__r.__words[0];
                memmove(v435, v436, v434);
              }
              *(_DWORD *)((char *)v435 + v434) = 7894111;
              memset(&v1478, 0, sizeof(v1478));
              std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v1478, (uint64_t)v1514.__r_.__value_.__l.__data_, v1514.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(v1514.__r_.__value_.__l.__size_ - v1514.__r_.__value_.__r.__words[0]) >> 3));
              memset(&v1477, 0, sizeof(v1477));
              std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v1477, (uint64_t)v1512.__r_.__value_.__l.__data_, v1512.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(v1512.__r_.__value_.__l.__size_ - v1512.__r_.__value_.__r.__words[0]) >> 3));
              Espresso::sequential_builder::add<Espresso::context_transfer_params>((uint64_t *)&v1479, (uint64_t *)&v1458, (uint64_t)&v1505, (uint64_t)&v1501, (uint64_t)__n, (uint64_t)v1478.__begin_, (uint64_t)v1478.__end_, (uint64_t *)&v1477);
              v1391 = (void **)&v1477;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v1391);
              v1391 = (void **)&v1478;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v1391);
              if (SHIBYTE(v1502) < 0)
                operator delete((void *)v1501);
              if (SHIBYTE(v1505.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v1505.__r_.__value_.__l.__data_);
              if (v1479
              {
                v438 = v437;
                v1505.__r_.__value_.__r.__words[0] = (std::string::size_type)v437;
                v1505.__r_.__value_.__l.__size_ = v1480;
                if (v1480)
                {
                  v439 = (unint64_t *)(v1480 + 8);
                  do
                    v440 = __ldxr(v439);
                  while (__stxr(v440 + 1, v439));
                }
              }
              else
              {
                v438 = 0;
                *(_OWORD *)&v1505.__r_.__value_.__l.__data_ = 0uLL;
              }
              LODWORD(v1391) = 0;
              Espresso::create_context((int *)&v1391, &v1501);
              std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v438 + 39, v1468, *((uint64_t *)&v1468 + 1));
              v441 = v1505.__r_.__value_.__r.__words[0];
              std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(v1505.__r_.__value_.__r.__words[0] + 328), v1244, (uint64_t)v1251);
              std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(v441 + 8), v1468, *((uint64_t *)&v1468 + 1));
              v442 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)(v441 + 312) + 8))(*(_QWORD *)(*(_QWORD *)(v441 + 312) + 8));
              *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v1464 + 40) - 16) + 8) = v442;
              v443 = (std::__shared_weak_count *)*((_QWORD *)&v1501 + 1);
              if (*((_QWORD *)&v1501 + 1))
              {
                v444 = (unint64_t *)(*((_QWORD *)&v1501 + 1) + 8);
                do
                  v445 = __ldaxr(v444);
                while (__stlxr(v445 - 1, v444));
                if (!v445)
                {
                  ((void (*)(std::__shared_weak_count *))v443->__on_zero_shared)(v443);
                  std::__shared_weak_count::__release_weak(v443);
                }
              }
              v446 = (std::__shared_weak_count *)v1505.__r_.__value_.__l.__size_;
              if (v1505.__r_.__value_.__l.__size_)
              {
                v447 = (unint64_t *)(v1505.__r_.__value_.__l.__size_ + 8);
                do
                  v448 = __ldaxr(v447);
                while (__stlxr(v448 - 1, v447));
                if (!v448)
                {
                  ((void (*)(std::__shared_weak_count *))v446->__on_zero_shared)(v446);
                  std::__shared_weak_count::__release_weak(v446);
                }
              }
              v449 = (std::__shared_weak_count *)v1480;
              if (v1480)
              {
                v450 = (unint64_t *)(v1480 + 8);
                do
                  v451 = __ldaxr(v450);
                while (__stlxr(v451 - 1, v450));
                if (!v451)
                {
                  ((void (*)(std::__shared_weak_count *))v449->__on_zero_shared)(v449);
                  std::__shared_weak_count::__release_weak(v449);
                }
              }
            }
            if (SHIBYTE(v1507.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v1507.__r_.__value_.__l.__data_);
            __n[0] = (std::string::size_type)&v1512;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__n);
            __n[0] = (std::string::size_type)&v1514;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__n);
            if (v1251)
            {
              v452 = (unint64_t *)&v1251->__shared_owners_;
              do
                v453 = __ldaxr(v452);
              while (__stlxr(v453 - 1, v452));
              if (!v453)
              {
                ((void (*)(std::__shared_weak_count *))v1251->__on_zero_shared)(v1251);
                std::__shared_weak_count::__release_weak(v1251);
              }
            }
            std::__tree<int>::destroy((_QWORD *)v1509[1].__r_.__value_.__l.__data_);
            v454 = (std::__shared_weak_count *)v1509[0].__r_.__value_.__l.__size_;
            if (v1509[0].__r_.__value_.__l.__size_)
            {
              v455 = (unint64_t *)(v1509[0].__r_.__value_.__l.__size_ + 8);
              do
                v456 = __ldaxr(v455);
              while (__stlxr(v456 - 1, v455));
              if (!v456)
              {
                ((void (*)(std::__shared_weak_count *))v454->__on_zero_shared)(v454);
                std::__shared_weak_count::__release_weak(v454);
              }
            }
            v457 = (std::string::size_type *)v380[1];
            if (v457)
            {
              do
              {
                v458 = v457;
                v457 = (std::string::size_type *)*v457;
              }
              while (v457);
            }
            else
            {
              do
              {
                v458 = (std::string::size_type *)v380[2];
                _ZF = *v458 == (_QWORD)v380;
                v380 = v458;
              }
              while (!_ZF);
            }
            v380 = v458;
            v381 = v458 == &v1510.__r_.__value_.__r.__words[1];
            goto LABEL_732;
          }
        }
      }
      v1474 = 1;
      memset(&v1507, 0, sizeof(v1507));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v1507, (uint64_t)lpsrc.__r_.__value_.__l.__data_, lpsrc.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(lpsrc.__r_.__value_.__l.__size_ - lpsrc.__r_.__value_.__r.__words[0]) >> 3));
      memset(&v1505, 0, sizeof(v1505));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v1505, (uint64_t)v1256, (uint64_t)v1257, 0xAAAAAAAAAAAAAAABLL * (((char *)v1257 - (char *)v1256) >> 3));
      memset(&v1514, 0, sizeof(v1514));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v1514, (uint64_t)v1507.__r_.__value_.__l.__data_, v1507.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1507.__r_.__value_.__l.__size_ - v1507.__r_.__value_.__r.__words[0]) >> 3));
      memset(&v1512, 0, sizeof(v1512));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v1512, (uint64_t)v1505.__r_.__value_.__l.__data_, v1505.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1505.__r_.__value_.__l.__size_ - v1505.__r_.__value_.__r.__words[0]) >> 3));
      v459 = v1466;
      LODWORD(v1509[0].__r_.__value_.__l.__data_) = (***(uint64_t (****)(_QWORD))(v1468 + 8))(*(_QWORD *)(v1468 + 8));
      Espresso::abstract_engine_factory::make_kernel_priv(v459, (uint64_t)&v1468, (uint64_t)&v1486, (uint64_t)v1493, (int *)v1509);
      v1501 = v1262;
      if (*((_QWORD *)&v1262 + 1))
      {
        v460 = (unint64_t *)(*((_QWORD *)&v1262 + 1) + 8);
        do
          v461 = __ldxr(v460);
        while (__stxr(v461 + 1, v460));
      }
      memset(v1509, 0, 24);
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v1509, (uint64_t)v1514.__r_.__value_.__l.__data_, v1514.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1514.__r_.__value_.__l.__size_ - v1514.__r_.__value_.__r.__words[0]) >> 3));
      __n[1] = 0;
      __n[0] = 0;
      *(_QWORD *)&v1504 = 0;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(__n, (uint64_t)v1512.__r_.__value_.__l.__data_, v1512.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1512.__r_.__value_.__l.__size_ - v1512.__r_.__value_.__r.__words[0]) >> 3));
      Espresso::sequential_builder::add_kernel_dbg((uint64_t)&v1458, (uint64_t *)&v1501, (uint64_t)&v1486, (uint64_t)&v1484, (uint64_t)v1462, (std::string **)v1509, (std::string **)__n);
      v1479 = __n;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1479);
      v1479 = v1509;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1479);
      v462 = (std::__shared_weak_count *)*((_QWORD *)&v1501 + 1);
      if (*((_QWORD *)&v1501 + 1))
      {
        v463 = (unint64_t *)(*((_QWORD *)&v1501 + 1) + 8);
        do
          v464 = __ldaxr(v463);
        while (__stlxr(v464 - 1, v463));
        if (!v464)
        {
          ((void (*)(std::__shared_weak_count *))v462->__on_zero_shared)(v462);
          std::__shared_weak_count::__release_weak(v462);
        }
      }
      if ((_QWORD)v1458)
        Espresso::sequential_builder::add_shape_from_kernel((uint64_t *)&v1458, v1262, (__int128 **)&v1514, (uint64_t *)&v1512);
      v1509[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v1512;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v1509);
      v1509[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v1514;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v1509);
      v1509[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v1505;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v1509);
      v1509[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v1507;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v1509);
      v1509[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&lpsrc;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v1509);
      std::__tree<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::__map_value_compare<std::shared_ptr<Espresso::abstract_context>,std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>,std::less<std::shared_ptr<Espresso::abstract_context>>,true>,std::allocator<std::__value_type<std::shared_ptr<Espresso::abstract_context>,std::map<int,int>>>>::destroy((_QWORD *)v1510.__r_.__value_.__l.__size_);
      v465 = (std::__shared_weak_count *)*((_QWORD *)&v1262 + 1);
      if (*((_QWORD *)&v1262 + 1))
      {
        v466 = (unint64_t *)(*((_QWORD *)&v1262 + 1) + 8);
        do
          v467 = __ldaxr(v466);
        while (__stlxr(v467 - 1, v466));
        if (!v467)
        {
          ((void (*)(std::__shared_weak_count *))v465->__on_zero_shared)(v465);
          std::__shared_weak_count::__release_weak(v465);
        }
      }
      v1509[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v1256;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v1509);
      if (SHIBYTE(v1482.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1482.__r_.__value_.__l.__data_);
      v1509[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v1259;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v1509);
      for (i4 = 0; i4 != -48; i4 -= 24)
      {
        if (*((char *)&v1489 + i4 + 7) < 0)
          operator delete(*(void **)&v1488[i4 + 24]);
      }
      if (SHIBYTE(v1484.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1484.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1486.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1486.__r_.__value_.__l.__data_);
LABEL_918:
      v469 = (_QWORD **)v1452;
      v470 = *(_QWORD *)v1452;
      *(_QWORD *)(v470 + 8) = *((_QWORD *)v1452 + 1);
      *v469[1] = v470;
      --v1453;
      operator delete(v469);
      v471 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*(_QWORD *)v1245 + 40), v1439, &v1439);
      v472 = v471[5];
      v473 = v471[6];
      while (2)
      {
        if (v472 != v473)
        {
          v474 = *(unsigned int *)v472;
          *(_DWORD *)v1488 = *(_DWORD *)v472;
          v475 = v1450[0];
          if (v1450[0])
          {
            while (1)
            {
              v476 = *((_DWORD *)v475 + 7);
              if ((int)v474 >= v476)
              {
                if (v476 < (int)v474)
                  goto LABEL_925;
                v477 = *((_DWORD *)v475 + 8);
                if ((int)v474 >= v477)
                  break;
              }
LABEL_926:
              v475 = (_QWORD *)*v475;
              if (!v475)
                goto LABEL_927;
            }
            if (v477 >= (int)v474)
              goto LABEL_942;
LABEL_925:
            ++v475;
            goto LABEL_926;
          }
LABEL_927:
          v478 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*(_QWORD *)v1245 + 16), v474, v1488);
          v479 = (unsigned int *)v478[5];
          v480 = (unsigned int *)v478[6];
          if (v479 == v480)
            goto LABEL_941;
          LOBYTE(v481) = 1;
LABEL_929:
          v482 = v1450[0];
          if (!v1450[0])
            goto LABEL_942;
          v483 = *v479;
LABEL_931:
          v484 = *((_DWORD *)v482 + 7);
          if ((int)v483 >= v484)
          {
            if (v484 < (int)v483)
              goto LABEL_935;
            v485 = *((_DWORD *)v482 + 8);
            if ((int)v483 >= v485)
            {
              if (v485 >= (int)v483)
              {
                *(_QWORD *)v1493 = v483 | (v483 << 32);
                v486 = std::__tree<std::__value_type<std::pair<int,int>,BOOL>,std::__map_value_compare<std::pair<int,int>,std::__value_type<std::pair<int,int>,BOOL>,std::less<std::pair<int,int>>,true>,std::allocator<std::__value_type<std::pair<int,int>,BOOL>>>::__emplace_unique_key_args<std::pair<int,int>,std::piecewise_construct_t const&,std::tuple<std::pair<int,int>&&>,std::tuple<>>(&v1449, v483, v483, v1493);
                v481 = (*((_BYTE *)v486 + 36) != 0) & v481;
                if (!*((_BYTE *)v486 + 36) || (++v479, v479 == v480))
                {
                  if (v481)
                  {
LABEL_941:
                    v487 = operator new(0x18uLL);
                    v487[4] = v474;
                    v488 = v1451;
                    *(_QWORD *)v487 = v1451;
                    *((_QWORD *)v487 + 1) = &v1451;
                    v488[1] = v487;
                    v1451 = v487;
                    ++v1453;
                    *(_QWORD *)v1493 = v474 | (v474 << 32);
                    *((_BYTE *)std::__tree<std::__value_type<std::pair<int,int>,BOOL>,std::__map_value_compare<std::pair<int,int>,std::__value_type<std::pair<int,int>,BOOL>,std::less<std::pair<int,int>>,true>,std::allocator<std::__value_type<std::pair<int,int>,BOOL>>>::__emplace_unique_key_args<std::pair<int,int>,std::piecewise_construct_t const&,std::tuple<std::pair<int,int>&&>,std::tuple<>>(&v1449, v474, v474, v1493)+ 36) = 1;
                  }
LABEL_942:
                  v472 = (uint64_t *)((char *)v472 + 4);
                  continue;
                }
                goto LABEL_929;
              }
LABEL_935:
              ++v482;
            }
          }
          v482 = (_QWORD *)*v482;
          if (!v482)
            goto LABEL_942;
          goto LABEL_931;
        }
        break;
      }
      if (!v1473)
      {
        v494 = (std::__shared_weak_count *)*((_QWORD *)&v1468 + 1);
        v1468 = 0uLL;
        v54 = v1232;
        if (!v494)
          goto LABEL_960;
        v501 = (unint64_t *)&v494->__shared_owners_;
        do
          v500 = __ldaxr(v501);
        while (__stlxr(v500 - 1, v501));
        goto LABEL_958;
      }
      v489 = v1473 + v1472 - 1;
      v490 = *(_QWORD *)(*((_QWORD *)&v1470 + 1) + 8 * (v489 / 0xAA));
      v491 = v489 % 0xAA;
      v492 = (uint64_t *)(v490 + 24 * v491);
      v493 = *v492;
      v494 = (std::__shared_weak_count *)v492[1];
      if (v494)
      {
        v495 = (unint64_t *)&v494->__shared_owners_;
        do
          v496 = __ldxr(v495);
        while (__stxr(v496 + 1, v495));
      }
      v497 = *(_DWORD *)(v490 + 24 * v491 + 16);
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v1468, v493, (uint64_t)v494);
      v1469 = v497;
      std::shared_ptr<void>::~shared_ptr[abi:ne180100](*(_QWORD *)(*((_QWORD *)&v1470 + 1)
                                                                 + 8 * ((v1473 + v1472 - 1) / 0xAA)) + 24 * ((v1473 + v1472 - 1) % 0xAA));
      v498 = 170 * ((uint64_t)(v1471 - *((_QWORD *)&v1470 + 1)) >> 3) - 1;
      if ((_QWORD)v1471 == *((_QWORD *)&v1470 + 1))
        v498 = 0;
      if (v498 - (--v1473 + v1472) >= 0x154)
      {
        operator delete(*(void **)(v1471 - 8));
        *(_QWORD *)&v1471 = v1471 - 8;
      }
      v54 = v1232;
      if (v494)
      {
        v499 = (unint64_t *)&v494->__shared_owners_;
        do
          v500 = __ldaxr(v499);
        while (__stlxr(v500 - 1, v499));
LABEL_958:
        if (!v500)
        {
          ((void (*)(std::__shared_weak_count *))v494->__on_zero_shared)(v494);
          std::__shared_weak_count::__release_weak(v494);
        }
      }
LABEL_960:
      if (SHIBYTE(v1431.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1431.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1432.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1432.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1433.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1433.__r_.__value_.__l.__data_);
      if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__s.__r_.__value_.__l.__data_);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      if ((char)v1438 < 0)
        operator delete(v1436);
      if (!v1242)
        goto LABEL_976;
      v502 = (unint64_t *)&v1242->__shared_owners_;
      do
        v503 = __ldaxr(v502);
      while (__stlxr(v503 - 1, v502));
      if (!v503)
      {
        ((void (*)(std::__shared_weak_count *))v1242->__on_zero_shared)(v1242);
        std::__shared_weak_count::__release_weak(v1242);
        if (v1241)
        {
LABEL_977:
          v504 = (unint64_t *)&v1241->__shared_owners_;
          do
            v505 = __ldaxr(v504);
          while (__stlxr(v505 - 1, v504));
          if (!v505)
          {
            ((void (*)(std::__shared_weak_count *))v1241->__on_zero_shared)(v1241);
            std::__shared_weak_count::__release_weak(v1241);
          }
        }
      }
      else
      {
LABEL_976:
        if (v1241)
          goto LABEL_977;
      }
      if (!v1453)
        goto LABEL_2482;
    }
    if (v1472 < 0xAA)
    {
      v142 = (void **)v1470;
      v143 = *((_QWORD *)&v1471 + 1) - v1470;
      if (v126 >= (uint64_t)(*((_QWORD *)&v1471 + 1) - v1470) >> 3)
      {
        if (*((_QWORD *)&v1471 + 1) == (_QWORD)v1470)
          v144 = 1;
        else
          v144 = v143 >> 2;
        v145 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v144);
        v147 = v146;
        v148 = &v145[8 * v126];
        *(_QWORD *)&v149 = v145;
        *((_QWORD *)&v149 + 1) = v148;
        v1246 = v149;
        v150 = operator new(0xFF0uLL);
        *(_QWORD *)&v151 = v148;
        *((_QWORD *)&v151 + 1) = &v145[8 * v147];
        if (v126 == v147)
        {
          v152 = 8 * v126;
          *(_QWORD *)&v153 = v1246;
          if (v125 < 1)
          {
            v185 = v150;
            v186 = v152 >> 2;
            if (v123 == v124)
              v187 = 1;
            else
              v187 = v186;
            v188 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v187);
            v141 = v1243;
            v148 = &v188[8 * (v187 >> 2)];
            *(_QWORD *)&v153 = v188;
            *((_QWORD *)&v153 + 1) = v148;
            *(_QWORD *)&v151 = v148;
            *((_QWORD *)&v151 + 1) = &v188[8 * v189];
            if (v145)
            {
              v1247 = v153;
              v1233 = v151;
              operator delete(v145);
              v151 = v1233;
              v153 = v1247;
            }
            v150 = v185;
          }
          else
          {
            v154 = v152 >> 3;
            if (v154 >= -1)
              v155 = v154 + 1;
            else
              v155 = v154 + 2;
            v148 -= 8 * (v155 >> 1);
            *(_QWORD *)&v151 = v148;
            *((_QWORD *)&v153 + 1) = v148;
            v141 = v1243;
          }
        }
        else
        {
          v141 = v1243;
          v153 = v1246;
        }
        *(_QWORD *)v148 = v150;
        *(_QWORD *)&v151 = v151 + 8;
        for (i5 = v1471; i5 != *((_QWORD *)&v1470 + 1); i5 -= 8)
        {
          v191 = (_QWORD *)*((_QWORD *)&v153 + 1);
          if (*((_QWORD *)&v153 + 1) == (_QWORD)v153)
          {
            v193 = (_BYTE *)v151;
            if ((unint64_t)v151 >= *((_QWORD *)&v151 + 1))
            {
              if (*((_QWORD *)&v151 + 1) == *((_QWORD *)&v153 + 1))
                v198 = 1;
              else
                v198 = (uint64_t)(*((_QWORD *)&v151 + 1) - *((_QWORD *)&v153 + 1)) >> 2;
              v199 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v198);
              v192 = &v199[(2 * v198 + 6) & 0xFFFFFFFFFFFFFFF8];
              v201 = v192;
              v202 = v193 - (_BYTE *)v191;
              if (v193 != (_BYTE *)v191)
              {
                v201 = &v192[v202 & 0xFFFFFFFFFFFFFFF8];
                v203 = 8 * (v202 >> 3);
                v204 = &v199[(2 * v198 + 6) & 0xFFFFFFFFFFFFFFF8];
                v205 = v191;
                do
                {
                  v206 = *v205++;
                  *(_QWORD *)v204 = v206;
                  v204 += 8;
                  v203 -= 8;
                }
                while (v203);
              }
              *(_QWORD *)&v153 = v199;
              *((_QWORD *)&v153 + 1) = &v199[(2 * v198 + 6) & 0xFFFFFFFFFFFFFFF8];
              *(_QWORD *)&v151 = v201;
              *((_QWORD *)&v151 + 1) = &v199[8 * v200];
              if (v191)
              {
                v1249 = v153;
                v1234 = v151;
                operator delete(v191);
                v151 = v1234;
                v153 = v1249;
              }
            }
            else
            {
              v194 = (uint64_t)(*((_QWORD *)&v151 + 1) - v151) >> 3;
              if (v194 >= -1)
                v195 = v194 + 1;
              else
                v195 = v194 + 2;
              v196 = v195 >> 1;
              v197 = v151 + 8 * (v195 >> 1);
              v192 = (char *)(v197 - (v151 - *((_QWORD *)&v153 + 1)));
              if ((_QWORD)v151 == *((_QWORD *)&v153 + 1))
              {
                v193 = (_BYTE *)*((_QWORD *)&v153 + 1);
              }
              else
              {
                v1248 = v153;
                v1235 = *((_QWORD *)&v151 + 1);
                memmove((void *)(v197 - (v151 - *((_QWORD *)&v153 + 1))), *((const void **)&v153 + 1), v151 - *((_QWORD *)&v153 + 1));
                *((_QWORD *)&v151 + 1) = v1235;
                *(_QWORD *)&v153 = v1248;
              }
              *((_QWORD *)&v153 + 1) = v192;
              *(_QWORD *)&v151 = &v193[8 * v196];
            }
          }
          else
          {
            v192 = (char *)*((_QWORD *)&v153 + 1);
          }
          v207 = *(_QWORD *)(i5 - 8);
          *((_QWORD *)v192 - 1) = v207;
          *((_QWORD *)&v153 + 1) -= 8;
        }
        v208 = (void *)v1470;
        v1470 = v153;
        v1471 = v151;
        if (v208)
          operator delete(v208);
        goto LABEL_288;
      }
      if (*((_QWORD *)&v1471 + 1) == (_QWORD)v1471)
      {
        v165 = operator new(0xFF0uLL);
        if (v142 == v124)
        {
          if (v123 == v124)
            v166 = 1;
          else
            v166 = v143 >> 2;
          v167 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v166);
          v124 = (void **)&v167[(2 * v166 + 6) & 0xFFFFFFFFFFFFFFF8];
          v169 = (uint64_t *)*((_QWORD *)&v1470 + 1);
          v170 = v124;
          v171 = v1471 - *((_QWORD *)&v1470 + 1);
          if ((_QWORD)v1471 != *((_QWORD *)&v1470 + 1))
          {
            v170 = (void **)((char *)v124 + (v171 & 0xFFFFFFFFFFFFFFF8));
            v172 = 8 * (v171 >> 3);
            v173 = v124;
            do
            {
              v174 = (void *)*v169++;
              *v173++ = v174;
              v172 -= 8;
            }
            while (v172);
          }
          v175 = (void *)v1470;
          *(_QWORD *)&v1470 = v167;
          *((_QWORD *)&v1470 + 1) = v124;
          *(_QWORD *)&v1471 = v170;
          *((_QWORD *)&v1471 + 1) = &v167[8 * v168];
          if (v175)
          {
            operator delete(v175);
            v124 = (void **)*((_QWORD *)&v1470 + 1);
          }
        }
        *(v124 - 1) = v165;
        v176 = (char *)*((_QWORD *)&v1470 + 1);
        v177 = (char *)v1471;
        *((_QWORD *)&v1470 + 1) -= 8;
        v178 = **((_QWORD **)&v1470 + 1);
        *((_QWORD *)&v1470 + 1) = v176;
        v141 = v1243;
        if ((_QWORD)v1471 == *((_QWORD *)&v1471 + 1))
        {
          v179 = (uint64_t)&v176[-v1470];
          if ((unint64_t)v176 <= (unint64_t)v1470)
          {
            if ((_QWORD)v1471 == (_QWORD)v1470)
              v720 = 1;
            else
              v720 = (uint64_t)(v1471 - v1470) >> 2;
            v721 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v720);
            v723 = (uint64_t *)*((_QWORD *)&v1470 + 1);
            v177 = &v721[8 * (v720 >> 2)];
            v724 = v1471 - *((_QWORD *)&v1470 + 1);
            if ((_QWORD)v1471 != *((_QWORD *)&v1470 + 1))
            {
              v177 = &v721[8 * (v720 >> 2) + (v724 & 0xFFFFFFFFFFFFFFF8)];
              v725 = 8 * (v724 >> 3);
              v726 = &v721[8 * (v720 >> 2)];
              do
              {
                v727 = *v723++;
                *(_QWORD *)v726 = v727;
                v726 += 8;
                v725 -= 8;
              }
              while (v725);
            }
            v728 = (void *)v1470;
            *(_QWORD *)&v1470 = v721;
            *((_QWORD *)&v1470 + 1) = &v721[8 * (v720 >> 2)];
            *(_QWORD *)&v1471 = v177;
            *((_QWORD *)&v1471 + 1) = &v721[8 * v722];
            v141 = v1243;
            if (v728)
            {
              operator delete(v728);
              v177 = (char *)v1471;
            }
          }
          else
          {
            v180 = v179 >> 3;
            v135 = v179 >> 3 < -1;
            v181 = (v179 >> 3) + 2;
            if (v135)
              v182 = v181;
            else
              v182 = v180 + 1;
            v183 = &v176[-8 * (v182 >> 1)];
            v184 = v1471 - (_QWORD)v176;
            if ((char *)v1471 != v176)
            {
              memmove(&v176[-8 * (v182 >> 1)], v176, v1471 - (_QWORD)v176);
              v176 = (char *)*((_QWORD *)&v1470 + 1);
            }
            v177 = &v183[v184];
            *(_QWORD *)&v1471 = &v183[v184];
            *((_QWORD *)&v1470 + 1) = &v176[-8 * (v182 >> 1)];
          }
        }
        *(_QWORD *)v177 = v178;
        *(_QWORD *)&v1471 = v1471 + 8;
        goto LABEL_288;
      }
      *v123 = operator new(0xFF0uLL);
      *(_QWORD *)&v1471 = v1471 + 8;
    }
    else
    {
      v1472 -= 170;
      v131 = (char *)(*((_QWORD *)&v1470 + 1) + 8);
      v132 = (void *)**((_QWORD **)&v1470 + 1);
      *((_QWORD *)&v1470 + 1) += 8;
      if (*((_QWORD *)&v1471 + 1) == (_QWORD)v1471)
      {
        v133 = (uint64_t)&v131[-v1470];
        if ((unint64_t)v131 <= (unint64_t)v1470)
        {
          if ((_QWORD)v1471 == (_QWORD)v1470)
            v156 = 1;
          else
            v156 = (uint64_t)(v1471 - v1470) >> 2;
          v157 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v156);
          v159 = (uint64_t *)*((_QWORD *)&v1470 + 1);
          v123 = (void **)&v157[8 * (v156 >> 2)];
          v160 = v1471 - *((_QWORD *)&v1470 + 1);
          if ((_QWORD)v1471 != *((_QWORD *)&v1470 + 1))
          {
            v123 = (void **)&v157[8 * (v156 >> 2) + (v160 & 0xFFFFFFFFFFFFFFF8)];
            v161 = 8 * (v160 >> 3);
            v162 = &v157[8 * (v156 >> 2)];
            do
            {
              v163 = *v159++;
              *(_QWORD *)v162 = v163;
              v162 += 8;
              v161 -= 8;
            }
            while (v161);
          }
          v164 = (void *)v1470;
          *(_QWORD *)&v1470 = v157;
          *((_QWORD *)&v1470 + 1) = &v157[8 * (v156 >> 2)];
          *(_QWORD *)&v1471 = v123;
          *((_QWORD *)&v1471 + 1) = &v157[8 * v158];
          if (v164)
          {
            operator delete(v164);
            v123 = (void **)v1471;
          }
        }
        else
        {
          v134 = v133 >> 3;
          v135 = v133 >> 3 < -1;
          v136 = (v133 >> 3) + 2;
          if (v135)
            v137 = v136;
          else
            v137 = v134 + 1;
          v138 = &v131[-8 * (v137 >> 1)];
          v139 = v1471 - (_QWORD)v131;
          if ((char *)v1471 == v131)
          {
            v140 = v1471;
          }
          else
          {
            memmove(&v131[-8 * (v137 >> 1)], v131, v1471 - (_QWORD)v131);
            v140 = *((_QWORD *)&v1470 + 1);
          }
          v123 = (void **)&v138[v139];
          *(_QWORD *)&v1471 = &v138[v139];
          *((_QWORD *)&v1470 + 1) = v140 - 8 * (v137 >> 1);
        }
      }
      *v123 = v132;
      *(_QWORD *)&v1471 = v1471 + 8;
    }
    v141 = v1243;
LABEL_288:
    v124 = (void **)*((_QWORD *)&v1470 + 1);
    v129 = v1473;
    v130 = v1473 + v1472;
    v127 = *(_DWORD *)&v1493[16];
    goto LABEL_289;
  }
LABEL_2482:
  Espresso::sequential_builder::build_from_shapes((uint64_t)&v1458, (uint64_t)&__p, 1, a2);
  v1207 = *a2;
  Espresso::net::_allocate_temporary_buffer(*a2);
  Espresso::net::_tag_inputs_and_outputs(v1207);
  Espresso::net::_assign_streams(v1207);
  v1208 = v1441;
  if (v1441)
  {
    v1209 = (unint64_t *)&v1441->__shared_owners_;
    do
      v1210 = __ldaxr(v1209);
    while (__stlxr(v1210 - 1, v1209));
    if (!v1210)
    {
      ((void (*)(std::__shared_weak_count *))v1208->__on_zero_shared)(v1208);
      std::__shared_weak_count::__release_weak(v1208);
    }
  }
  if (v54)
  {
    v1211 = (unint64_t *)&v54->__shared_owners_;
    do
      v1212 = __ldaxr(v1211);
    while (__stlxr(v1212 - 1, v1211));
    if (!v1212)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  std::__tree<std::string>::destroy((uint64_t)&v1442, (char *)v1443[0]);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v1447, v1448[0]);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&__p, v1445);
  std::__tree<int>::destroy(v1450[0]);
  std::__list_imp<int>::clear(&v1451);
  std::deque<std::pair<std::shared_ptr<Espresso::abstract_context>,Espresso::compute_path>>::~deque[abi:ne180100]((uint64_t)&v1470);
  v1213 = (std::__shared_weak_count *)*((_QWORD *)&v1468 + 1);
  if (*((_QWORD *)&v1468 + 1))
  {
    v1214 = (unint64_t *)(*((_QWORD *)&v1468 + 1) + 8);
    do
      v1215 = __ldaxr(v1214);
    while (__stlxr(v1215 - 1, v1214));
    if (!v1215)
    {
      ((void (*)(std::__shared_weak_count *))v1213->__on_zero_shared)(v1213);
      std::__shared_weak_count::__release_weak(v1213);
    }
  }
  v1216 = v1467;
  if (v1467)
  {
    v1217 = (unint64_t *)&v1467->__shared_owners_;
    do
      v1218 = __ldaxr(v1217);
    while (__stlxr(v1218 - 1, v1217));
    if (!v1218)
    {
      ((void (*)(std::__shared_weak_count *))v1216->__on_zero_shared)(v1216);
      std::__shared_weak_count::__release_weak(v1216);
    }
  }
  v1219 = v1465;
  if (v1465)
  {
    v1220 = (unint64_t *)&v1465->__shared_owners_;
    do
      v1221 = __ldaxr(v1220);
    while (__stlxr(v1221 - 1, v1220));
    if (!v1221)
    {
      ((void (*)(std::__shared_weak_count *))v1219->__on_zero_shared)(v1219);
      std::__shared_weak_count::__release_weak(v1219);
    }
  }
  if (v1463 < 0)
    operator delete(v1462[0]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v1459, *((_QWORD **)&v1459 + 1));
  v1222 = (std::__shared_weak_count *)*((_QWORD *)&v1458 + 1);
  if (*((_QWORD *)&v1458 + 1))
  {
    v1223 = (unint64_t *)(*((_QWORD *)&v1458 + 1) + 8);
    do
      v1224 = __ldaxr(v1223);
    while (__stlxr(v1224 - 1, v1223));
    if (!v1224)
    {
      ((void (*)(std::__shared_weak_count *))v1222->__on_zero_shared)(v1222);
      std::__shared_weak_count::__release_weak(v1222);
    }
  }
}

