void sub_191365E58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,char a23)
{
  Espresso::net_strides_configuration *v23;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  __p = &a20;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  Espresso::net_strides_configuration::~net_strides_configuration(v23);
  _Unwind_Resume(a1);
}

void Espresso::net_strides_configuration::~net_strides_configuration(Espresso::net_strides_configuration *this)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)*((_QWORD *)this + 7);
  if (v2)
  {
    *((_QWORD *)this + 8) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 4);
  if (v3)
  {
    *((_QWORD *)this + 5) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 1);
  if (v4)
  {
    *((_QWORD *)this + 2) = v4;
    operator delete(v4);
  }
}

uint64_t Espresso::net::share_weights(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v2 = *(_QWORD *)(result + 32);
  v3 = *(_QWORD *)(*(_QWORD *)a2 + 32);
  if ((*(_QWORD *)(*(_QWORD *)a2 + 40) - v3) >> 4 >= (unint64_t)((*(_QWORD *)(result + 40) - v2) >> 4))
    v4 = (*(_QWORD *)(result + 40) - v2) >> 4;
  else
    v4 = (*(_QWORD *)(*(_QWORD *)a2 + 40) - v3) >> 4;
  if (v4)
  {
    v6 = result;
    v7 = 0;
    v8 = 0;
    do
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v2 + v7) + 16))(*(_QWORD *)(v2 + v7), v3 + v7);
      ++v8;
      v2 = *(_QWORD *)(v6 + 32);
      v9 = *(_QWORD *)(v6 + 40) - v2;
      v3 = *(_QWORD *)(*(_QWORD *)a2 + 32);
      if ((*(_QWORD *)(*(_QWORD *)a2 + 40) - v3) >> 4 >= (unint64_t)(v9 >> 4))
        v10 = v9 >> 4;
      else
        v10 = (*(_QWORD *)(*(_QWORD *)a2 + 40) - v3) >> 4;
      v7 += 16;
    }
    while (v10 > v8);
  }
  return result;
}

float Espresso::net::get_estimated_compute_resources(Espresso::net *this, unint64_t a2, unint64_t a3)
{
  float v3;
  float v4;
  float v5;
  float v6;
  char *v7;
  char *v8;
  __int128 v9;
  __int128 v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD *v13;
  __int128 **v14;
  char *v15;
  char *v16;
  uint64_t v17;
  __int128 *v18;
  __int128 *v19;
  char *v20;
  _OWORD *v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  __int128 *v28;
  __int128 *v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  char *v33;
  char *v34;
  float v35;
  float v36;
  float v37;
  unint64_t *v38;
  unint64_t v39;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  void *__p[2];
  uint64_t v47;
  char *v48;
  char *v49;
  unint64_t v50;
  __int128 v51;
  unint64_t v52;
  __int128 *v53[6];

  v52 = a2;
  v3 = 0.0;
  v4 = 0.0;
  v5 = 0.0;
  v6 = 0.0;
  if (a2 < a3)
  {
    v7 = (char *)this + 56;
    v8 = (char *)this + 136;
    do
    {
      v9 = *(_OWORD *)(*((_QWORD *)this + 4) + 16 * a2);
      v51 = v9;
      v10 = v9;
      if (*((_QWORD *)&v9 + 1))
      {
        v11 = (unint64_t *)(*((_QWORD *)&v9 + 1) + 8);
        do
          v12 = __ldxr(v11);
        while (__stxr(v12 + 1, v11));
      }
      *(_QWORD *)&v43 = &v52;
      v13 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v7, &v52, (uint64_t)&std::piecewise_construct, (uint64_t **)&v43);
      if (v13[4] != v13[3])
      {
        *(_QWORD *)&v43 = &v52;
        v14 = (__int128 **)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v7, &v52, (uint64_t)&std::piecewise_construct, (uint64_t **)&v43);
        v48 = 0;
        v49 = 0;
        v50 = 0;
        std::vector<Espresso::layer_shape>::reserve((uint64_t *)&v48, 0xAAAAAAAAAAAAAAABLL * (((char *)v14[4] - (char *)v14[3]) >> 3));
        v15 = v7;
        v53[0] = v14[3];
        v16 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v8, (unsigned __int8 *)v53[0], v53);
        v17 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v16 + 5) + 32))(*((_QWORD *)v16 + 5));
        v18 = v14[3];
        v19 = v14[4];
        while (v18 != v19)
        {
          v53[0] = v18;
          v20 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v8, (unsigned __int8 *)v18, v53);
          Espresso::abstract_blob_container::shape((char *)&v43, *((_QWORD *)v20 + 5));
          v21 = v49;
          if ((unint64_t)v49 >= v50)
          {
            v24 = (v49 - v48) >> 6;
            v25 = v24 + 1;
            if ((unint64_t)(v24 + 1) >> 58)
              std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
            v26 = v50 - (_QWORD)v48;
            if ((uint64_t)(v50 - (_QWORD)v48) >> 5 > v25)
              v25 = v26 >> 5;
            if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFC0)
              v27 = 0x3FFFFFFFFFFFFFFLL;
            else
              v27 = v25;
            v53[4] = (__int128 *)&v50;
            v28 = (__int128 *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::layer_shape>>(v27);
            v29 = &v28[4 * v24];
            v53[0] = v28;
            v53[1] = v29;
            v53[3] = &v28[4 * v30];
            v31 = v44;
            v32 = v45;
            *v29 = v43;
            v29[1] = v31;
            *((_QWORD *)v29 + 4) = v32;
            *((_QWORD *)v29 + 5) = 0;
            *((_QWORD *)v29 + 6) = 0;
            *((_QWORD *)v29 + 7) = 0;
            *(__int128 *)((char *)v29 + 40) = *(_OWORD *)__p;
            *((_QWORD *)v29 + 7) = v47;
            __p[0] = 0;
            __p[1] = 0;
            v47 = 0;
            v53[2] = v29 + 4;
            std::vector<Espresso::layer_shape>::__swap_out_circular_buffer((uint64_t *)&v48, v53);
            v33 = v49;
            std::__split_buffer<Espresso::layer_shape>::~__split_buffer((uint64_t)v53);
            v49 = v33;
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
          }
          else
          {
            v22 = v44;
            v23 = v45;
            *(_OWORD *)v49 = v43;
            v21[1] = v22;
            *((_QWORD *)v21 + 4) = v23;
            *((_QWORD *)v21 + 5) = 0;
            *((_QWORD *)v21 + 6) = 0;
            *((_QWORD *)v21 + 7) = 0;
            *(_OWORD *)((char *)v21 + 40) = *(_OWORD *)__p;
            *((_QWORD *)v21 + 7) = v47;
            __p[0] = 0;
            __p[1] = 0;
            v47 = 0;
            v49 = (char *)(v21 + 4);
          }
          v53[0] = v18;
          v34 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v8, (unsigned __int8 *)v18, v53);
          (*(void (**)(_QWORD))(**((_QWORD **)v34 + 5) + 32))(*((_QWORD *)v34 + 5));
          v18 = (__int128 *)((char *)v18 + 24);
        }
        v7 = v15;
        if (v48 != v49)
        {
          v6 = v6
             + (*(float (**)(_QWORD, char **, uint64_t))(**(_QWORD **)(v10 + 64) + 128))(*(_QWORD *)(v10 + 64), &v48, v17);
          v3 = v3 + v35;
          v4 = v4 + v36;
          v5 = v5 + v37;
        }
        *(_QWORD *)&v43 = &v48;
        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v43);
      }
      if (*((_QWORD *)&v10 + 1))
      {
        v38 = (unint64_t *)(*((_QWORD *)&v10 + 1) + 8);
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v10 + 1) + 16))(*((_QWORD *)&v10 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v10 + 1));
        }
      }
      a2 = v52 + 1;
      v52 = a2;
    }
    while (a2 < a3);
  }
  return v6;
}

void sub_191366348(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,char a25)
{
  a14 = &a22;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  _Unwind_Resume(a1);
}

double Espresso::net::get_gflop(Espresso::net *this, int a2, uint64_t a3)
{
  if ((int)a3 <= 0)
    a3 = (*((_QWORD *)this + 5) - *((_QWORD *)this + 4)) >> 4;
  return Espresso::net::get_estimated_compute_resources(this, a2, (int)a3);
}

void Espresso::net::__build_network_two_compilers(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  unsigned int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t *v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  _QWORD v27[9];
  uint64_t v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;

  v8 = (_QWORD *)(a1 + 528);
  v9 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)(a1 + 16) + 8))(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8));
  v10 = std::__hash_table<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::__unordered_map_hasher<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::hash<Espresso::platform>,std::equal_to<Espresso::platform>,true>,std::__unordered_map_equal<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::equal_to<Espresso::platform>,std::hash<Espresso::platform>,true>,std::allocator<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>>>::find<Espresso::platform>(v8, v9);
  if (v10)
  {
    v12 = v10[3];
    v11 = v10[4];
    v30 = v12;
    v31 = (std::__shared_weak_count *)v11;
    if (v11)
    {
      v13 = (unint64_t *)(v11 + 8);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
  }
  else
  {
    v12 = 0;
    v30 = 0;
    v31 = 0;
  }
  v15 = *(_QWORD *)(a1 + 1256);
  if (!v15
    || (v16 = (***(uint64_t (****)(_QWORD))(v15 + 8))(*(_QWORD *)(v15 + 8)),
        (v17 = std::__hash_table<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::__unordered_map_hasher<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::hash<Espresso::platform>,std::equal_to<Espresso::platform>,true>,std::__unordered_map_equal<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::equal_to<Espresso::platform>,std::hash<Espresso::platform>,true>,std::allocator<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>>>::find<Espresso::platform>(v8, v16)) == 0))
  {
    v28 = 0;
    v29 = 0;
    goto LABEL_28;
  }
  v19 = v17[3];
  v18 = (std::__shared_weak_count *)v17[4];
  v28 = v19;
  v29 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v21 = __ldxr(p_shared_owners);
    while (__stxr(v21 + 1, p_shared_owners));
  }
  if (!v12 || !v19)
LABEL_28:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("One or more compilers is missing.");
  LOBYTE(v27[0]) = *(_BYTE *)(a1 + 1352);
  memset((char *)v27 + 4, 0, 68);
  if (LOBYTE(v27[0]))
  {
    v27[1] = a1;
    memset(&v27[2], 0, 24);
    v27[5] = a1;
    memset(&v27[6], 0, 24);
    HIDWORD(v27[0]) = 723714104;
    kdebug_trace();
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v12 + 16))(v12, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v19 + 16))(v19, a2, a3, a4);
  Espresso_scoped_signpost::~Espresso_scoped_signpost((Espresso_scoped_signpost *)v27);
  if (v18)
  {
    v22 = (unint64_t *)&v18->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v24 = v31;
  if (v31)
  {
    v25 = (unint64_t *)&v31->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
}

void sub_1913665E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v11 - 80);
  _Unwind_Resume(a1);
}

void Espresso::net::__forward_network_two_compilers(uint64_t a1, uint64_t a2)
{
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t *v10;
  const void *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unsigned int v20;
  uint64_t *v21;
  uint64_t *v22;
  const void *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  _QWORD *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v43;
  uint64_t v44;
  const void *v45;
  _BYTE *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  _BOOL4 v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  __int128 v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  const void *v74;
  void *v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  _QWORD v109[21];
  _BYTE v110[68];
  int v111;
  uint64_t v112;
  std::__shared_weak_count *v113;
  _BYTE *v114;
  std::__shared_weak_count *v115;
  __int128 v116;
  _QWORD *v117;
  std::__shared_weak_count *v118;
  _QWORD *v119;
  std::__shared_weak_count *v120;
  uint64_t v121;
  std::__shared_weak_count *v122;

  if (*(_QWORD *)a2
  {
    v5 = *(std::__shared_weak_count **)(a2 + 8);
    v121 = (uint64_t)v4;
    v122 = v5;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
    }
  }
  else
  {
    v121 = 0;
    v122 = 0;
  }
  v8 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)(a1 + 16) + 8))(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8));
  v9 = std::__hash_table<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::__unordered_map_hasher<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::hash<Espresso::platform>,std::equal_to<Espresso::platform>,true>,std::__unordered_map_equal<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::equal_to<Espresso::platform>,std::hash<Espresso::platform>,true>,std::allocator<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>>>::find<Espresso::platform>((_QWORD *)(a1 + 528), v8);
  if (v9)
  {
    v10 = v9;
    v11 = (const void *)v9[3];
    v12 = (std::__shared_weak_count *)v10[4];
    if (v12)
    {
      v13 = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    if (v11
    {
      v119 = v15;
      v120 = v12;
      if (!v12)
        goto LABEL_24;
      v16 = (unint64_t *)&v12->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    else
    {
      v119 = 0;
      v120 = 0;
      if (!v12)
        goto LABEL_24;
    }
    v18 = (unint64_t *)&v12->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  else
  {
    v119 = 0;
    v120 = 0;
  }
LABEL_24:
  v20 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)(a1 + 1256) + 8))(*(_QWORD *)(*(_QWORD *)(a1 + 1256) + 8));
  v21 = std::__hash_table<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::__unordered_map_hasher<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::hash<Espresso::platform>,std::equal_to<Espresso::platform>,true>,std::__unordered_map_equal<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::equal_to<Espresso::platform>,std::hash<Espresso::platform>,true>,std::allocator<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>>>::find<Espresso::platform>((_QWORD *)(a1 + 528), v20);
  if (!v21)
  {
    v117 = 0;
    v118 = 0;
    goto LABEL_40;
  }
  v22 = v21;
  v23 = (const void *)v21[3];
  v24 = (std::__shared_weak_count *)v22[4];
  if (v24)
  {
    v25 = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  if (v23
  {
    v117 = v27;
    v118 = v24;
    if (!v24)
      goto LABEL_40;
    v28 = (unint64_t *)&v24->__shared_owners_;
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  else
  {
    v117 = 0;
    v118 = 0;
    if (!v24)
      goto LABEL_40;
  }
  v30 = (unint64_t *)&v24->__shared_owners_;
  do
    v31 = __ldaxr(v30);
  while (__stlxr(v31 - 1, v30));
  if (!v31)
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
LABEL_40:
  if (!v119 || !v117)
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Missing a compiler in __forward_network_two_compilers");
  v32 = v119[5] - v119[4];
  if (v32 != -120)
  {
    v33 = 0;
    v34 = 0;
    v35 = 0;
    v36 = 0xEEEEEEEEEEEEEEEFLL * (v32 >> 3);
    v37 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v117[5] - v117[4]) >> 3);
    v107 = v37;
    do
    {
      if (v35 >= v36)
        v38 = (uint64_t)(*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32)) >> 4;
      else
        v38 = *(_QWORD *)(v119[4] + 120 * (int)v35);
      v39 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)&v116 = *(_QWORD *)a2;
      *((_QWORD *)&v116 + 1) = v39;
      if (v39)
      {
        v40 = (unint64_t *)(v39 + 8);
        do
          v41 = __ldxr(v40);
        while (__stxr(v41 + 1, v40));
      }
      if (v33 < v38 && *(_BYTE *)(*(_QWORD *)a2 + 97) && v34 < v37)
      {
        v108 = v34;
        v43 = v117[4];
        v44 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16 * v33);
        v45 = *(const void **)(v44 + 64);
        if (v45
        {
          v47 = *(std::__shared_weak_count **)(v44 + 72);
          v114 = v46;
          v115 = v47;
          if (v47)
          {
            v48 = (unint64_t *)&v47->__shared_owners_;
            do
              v49 = __ldxr(v48);
            while (__stxr(v49 + 1, v48));
          }
          v50 = v46[345] != 0;
        }
        else
        {
          v50 = 0;
          v114 = 0;
          v115 = 0;
        }
        v51 = v121;
        v52 = *(std::__shared_weak_count **)(a1 + 1264);
        v112 = *(_QWORD *)(a1 + 1256);
        v113 = v52;
        if (v52)
        {
          v53 = (unint64_t *)&v52->__shared_owners_;
          do
            v54 = __ldxr(v53);
          while (__stxr(v54 + 1, v53));
        }
        Espresso::switch_engine_batch::switch_to_engine(v51, (uint64_t)&v112, v50, v110);
        v55 = *(_OWORD *)v110;
        *(_QWORD *)v110 = 0;
        *(_QWORD *)&v110[8] = 0;
        v56 = (std::__shared_weak_count *)*((_QWORD *)&v116 + 1);
        v116 = v55;
        if (v56)
        {
          v57 = (unint64_t *)&v56->__shared_owners_;
          do
            v58 = __ldaxr(v57);
          while (__stlxr(v58 - 1, v57));
          if (!v58)
          {
            ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
            std::__shared_weak_count::__release_weak(v56);
          }
        }
        v59 = *(std::__shared_weak_count **)&v110[8];
        if (*(_QWORD *)&v110[8])
        {
          v60 = (unint64_t *)(*(_QWORD *)&v110[8] + 8);
          do
            v61 = __ldaxr(v60);
          while (__stlxr(v61 - 1, v60));
          if (!v61)
          {
            ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
            std::__shared_weak_count::__release_weak(v59);
          }
        }
        v62 = v113;
        if (v113)
        {
          v63 = (unint64_t *)&v113->__shared_owners_;
          do
            v64 = __ldaxr(v63);
          while (__stlxr(v64 - 1, v63));
          if (!v64)
          {
            ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
            std::__shared_weak_count::__release_weak(v62);
          }
        }
        v65 = (uint64_t *)(v43 + 120 * (int)v108);
        v66 = *v65;
        v68 = v65 + 1;
        v67 = v65[1];
        v110[0] = *(_BYTE *)(a1 + 1352);
        memset(&v110[4], 0, 64);
        v111 = 0;
        if (v110[0])
        {
          *(_QWORD *)&v110[8] = v66;
          *(_QWORD *)&v110[16] = v67;
          memset(&v110[32], 0, 24);
          *(_QWORD *)&v110[24] = a1;
          *(_QWORD *)&v110[56] = a1;
          *(_DWORD *)&v110[4] = 723714152;
          kdebug_trace();
        }
        if (v114)
        {
          v69 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16 * v33);
          (*(void (**)(uint64_t, __int128 *, unint64_t))(*(_QWORD *)v69 + 8))(v69, &v116, v33);
        }
        v70 = v108;
        (*(void (**)(_QWORD *, __int128 *, unint64_t, uint64_t *))(*v117 + 80))(v117, &v116, v108, v65);
        v71 = *v68;
        v72 = *(_QWORD *)(a1 + 32);
        if (*v68 < (unint64_t)((*(_QWORD *)(a1 + 40) - v72) >> 4))
        {
          v73 = *(_QWORD **)(v72 + 16 * v71);
          v74 = (const void *)v73[8];
          if (v74)
          {
            if (v75)
            {
              v76 = (std::__shared_weak_count *)v73[9];
              v109[17] = v75;
              v109[18] = v76;
              if (v76)
              {
                v77 = (unint64_t *)&v76->__shared_owners_;
                do
                  v78 = __ldxr(v77);
                while (__stxr(v78 + 1, v77));
                v71 = *v68;
                v73 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 16 * *v68);
              }
              (*(void (**)(_QWORD *, __int128 *, uint64_t))(*v73 + 8))(v73, &v116, v71);
              if (v76)
              {
                v79 = (unint64_t *)&v76->__shared_owners_;
                do
                  v80 = __ldaxr(v79);
                while (__stlxr(v80 - 1, v79));
                if (!v80)
                {
                  ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
                  std::__shared_weak_count::__release_weak(v76);
                }
              }
            }
          }
          v70 = v108;
        }
        Espresso_scoped_signpost::~Espresso_scoped_signpost((Espresso_scoped_signpost *)v110);
        v81 = v115;
        v37 = v107;
        if (v115)
        {
          v82 = (unint64_t *)&v115->__shared_owners_;
          do
            v83 = __ldaxr(v82);
          while (__stlxr(v83 - 1, v82));
          if (!v83)
          {
            ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
            std::__shared_weak_count::__release_weak(v81);
          }
        }
        v34 = v70 + 1;
      }
      if (v35 < v36)
      {
        v84 = v119[4];
        v85 = v121;
        if (v121 && *(_BYTE *)(*(_QWORD *)a2 + 97))
        {
          v86 = *(std::__shared_weak_count **)(a1 + 24);
          v109[0] = *(_QWORD *)(a1 + 16);
          v109[1] = v86;
          if (v86)
          {
            v87 = (unint64_t *)&v86->__shared_owners_;
            do
              v88 = __ldxr(v87);
            while (__stxr(v88 + 1, v87));
          }
          Espresso::switch_engine_batch::switch_to_engine(v85, (uint64_t)v109, 0, v110);
          if (v86)
          {
            v89 = (unint64_t *)&v86->__shared_owners_;
            do
              v90 = __ldaxr(v89);
            while (__stlxr(v90 - 1, v89));
            if (!v90)
            {
              ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
              std::__shared_weak_count::__release_weak(v86);
            }
          }
          v91 = *(std::__shared_weak_count **)&v110[8];
          if (*(_QWORD *)&v110[8])
          {
            v92 = (unint64_t *)(*(_QWORD *)&v110[8] + 8);
            do
              v93 = __ldaxr(v92);
            while (__stlxr(v93 - 1, v92));
            if (!v93)
            {
              ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
              std::__shared_weak_count::__release_weak(v91);
            }
          }
        }
        v110[0] = *(_BYTE *)(a1 + 1352);
        memset(&v110[4], 0, 64);
        v111 = 0;
        if (v110[0])
        {
          *(_DWORD *)&v110[4] = 723714096;
          kdebug_trace();
        }
        (*(void (**)(_QWORD *, uint64_t, unint64_t, uint64_t))(*v119 + 80))(v119, a2, v35, v84 + 120 * (int)v35);
        Espresso_scoped_signpost::~Espresso_scoped_signpost((Espresso_scoped_signpost *)v110);
        v33 = *(_QWORD *)(v84 + 120 * (int)v35 + 8);
      }
      v94 = (std::__shared_weak_count *)*((_QWORD *)&v116 + 1);
      if (*((_QWORD *)&v116 + 1))
      {
        v95 = (unint64_t *)(*((_QWORD *)&v116 + 1) + 8);
        do
          v96 = __ldaxr(v95);
        while (__stlxr(v96 - 1, v95));
        if (!v96)
        {
          ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
          std::__shared_weak_count::__release_weak(v94);
        }
      }
    }
    while (v35++ != v36);
  }
  if (v121
    && *(_BYTE *)(*(_QWORD *)a2 + 97)
    && *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) - 16) + 64) + 8) == *(_QWORD *)(a1 + 16))
  {
    (*(void (**)(void))(*(_QWORD *)v121 + 24))();
  }
  v98 = v118;
  if (v118)
  {
    v99 = (unint64_t *)&v118->__shared_owners_;
    do
      v100 = __ldaxr(v99);
    while (__stlxr(v100 - 1, v99));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
      std::__shared_weak_count::__release_weak(v98);
    }
  }
  v101 = v120;
  if (v120)
  {
    v102 = (unint64_t *)&v120->__shared_owners_;
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  v104 = v122;
  if (v122)
  {
    v105 = (unint64_t *)&v122->__shared_owners_;
    do
      v106 = __ldaxr(v105);
    while (__stlxr(v106 - 1, v105));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
  }
}

void sub_191366EA0(uint64_t a1, uint64_t a2, unint64_t __val, char a4, uint64_t a5, std::string *a6, std::string *a7, uint64_t a8, std::string *a9, uint64_t a10, std::string *__vala, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  __break(1u);
}

void sub_191366FE4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  if (a46 < 0)
    operator delete(__p);
  if (a39 < 0)
    operator delete(a34);
  if (a32 < 0)
    operator delete(a27);
  if (a25 < 0)
    operator delete(a20);
  if (a19 < 0)
    operator delete(a14);
  __cxa_end_catch();
  JUMPOUT(0x191367064);
}

void sub_191367074()
{
  uint64_t v0;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v0 - 192);
  JUMPOUT(0x191367080);
}

void sub_19136708C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1 - 160);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1 - 144);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1 - 128);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1 - 112);
  _Unwind_Resume(a1);
}

void sub_191367094(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  Espresso_scoped_signpost::~Espresso_scoped_signpost((Espresso_scoped_signpost *)&a33);
  JUMPOUT(0x1913670A0);
}

BOOL Espresso::net::restore_layers_if_wiped(Espresso::net *this)
{
  int v1;

  v1 = *((unsigned __int8 *)this + 180);
  if (*((_BYTE *)this + 180))
  {
    *((_BYTE *)this + 180) = 0;
    Espresso::shape_network_recursive(this, (Espresso::net *)((char *)this + 184), 0, 0);
    *((_BYTE *)this + 180) = 0;
  }
  return v1 != 0;
}

void Espresso::net::shape_network(Espresso::net *this, const Espresso::network_shape *a2)
{
  *((_BYTE *)this + 180) = 0;
  Espresso::shape_network_recursive(this, a2, 0, 0);
}

uint64_t *std::__hash_table<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::base_kernel>>,std::__unordered_map_hasher<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::base_kernel>>,std::hash<Espresso::platform>,std::equal_to<Espresso::platform>,true>,std::__unordered_map_equal<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::base_kernel>>,std::equal_to<Espresso::platform>,std::hash<Espresso::platform>,true>,std::allocator<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::base_kernel>>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform const&>,std::tuple<>>(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t **v9;
  uint64_t *i;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  int8x8_t prime;
  void *v20;
  void *v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  uint8x8_t v25;
  unint64_t v26;
  uint8x8_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  void *v34;
  _QWORD v35[2];
  char v36;

  v6 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & a2;
    }
    v9 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (uint64_t *)*i)
      {
        v11 = i[1];
        if (v11 == a2)
        {
          if (*((_DWORD *)i + 4) == a2)
            return i;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  v12 = (_QWORD *)(a1 + 16);
  v13 = operator new(0x28uLL);
  v35[0] = v13;
  v35[1] = a1 + 16;
  *v13 = 0;
  v13[1] = v6;
  *((_DWORD *)v13 + 4) = *a3;
  v13[3] = 0;
  v13[4] = 0;
  v36 = 1;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (v7 && (float)(v15 * (float)v7) >= v14)
  {
    v6 = v3;
    goto LABEL_64;
  }
  v16 = 1;
  if (v7 >= 3)
    v16 = (v7 & (v7 - 1)) != 0;
  v17 = v16 | (2 * v7);
  v18 = vcvtps_u32_f32(v14 / v15);
  if (v17 <= v18)
    prime = (int8x8_t)v18;
  else
    prime = (int8x8_t)v17;
  if (*(_QWORD *)&prime == 1)
  {
    prime = (int8x8_t)2;
  }
  else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
  {
    prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    v7 = *(_QWORD *)(a1 + 8);
  }
  if (*(_QWORD *)&prime <= v7)
  {
    if (*(_QWORD *)&prime >= v7)
      goto LABEL_60;
    v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v7 < 3 || (v27 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
    {
      v26 = std::__next_prime(v26);
    }
    else
    {
      v28 = 1 << -(char)__clz(v26 - 1);
      if (v26 >= 2)
        v26 = v28;
    }
    if (*(_QWORD *)&prime <= v26)
      prime = (int8x8_t)v26;
    if (*(_QWORD *)&prime >= v7)
    {
      v7 = *(_QWORD *)(a1 + 8);
      goto LABEL_60;
    }
    if (!*(_QWORD *)&prime)
    {
      v34 = *(void **)a1;
      *(_QWORD *)a1 = 0;
      if (v34)
        operator delete(v34);
      v7 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      goto LABEL_60;
    }
  }
  if (*(_QWORD *)&prime >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v20 = operator new(8 * *(_QWORD *)&prime);
  v21 = *(void **)a1;
  *(_QWORD *)a1 = v20;
  if (v21)
    operator delete(v21);
  v22 = 0;
  *(int8x8_t *)(a1 + 8) = prime;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v22++) = 0;
  while (*(_QWORD *)&prime != v22);
  v23 = (_QWORD *)*v12;
  if (*v12)
  {
    v24 = v23[1];
    v25 = (uint8x8_t)vcnt_s8(prime);
    v25.i16[0] = vaddlv_u8(v25);
    if (v25.u32[0] > 1uLL)
    {
      if (v24 >= *(_QWORD *)&prime)
        v24 %= *(_QWORD *)&prime;
    }
    else
    {
      v24 &= *(_QWORD *)&prime - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v12;
    v29 = (_QWORD *)*v23;
    if (*v23)
    {
      do
      {
        v30 = v29[1];
        if (v25.u32[0] > 1uLL)
        {
          if (v30 >= *(_QWORD *)&prime)
            v30 %= *(_QWORD *)&prime;
        }
        else
        {
          v30 &= *(_QWORD *)&prime - 1;
        }
        if (v30 != v24)
        {
          if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v30))
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v30) = v23;
            goto LABEL_56;
          }
          *v23 = *v29;
          *v29 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v30);
          **(_QWORD **)(*(_QWORD *)a1 + 8 * v30) = v29;
          v29 = v23;
        }
        v30 = v24;
LABEL_56:
        v23 = v29;
        v29 = (_QWORD *)*v29;
        v24 = v30;
      }
      while (v29);
    }
  }
  v7 = (unint64_t)prime;
LABEL_60:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v6)
      v6 %= v7;
  }
  else
  {
    v6 = ((_DWORD)v7 - 1) & v6;
  }
LABEL_64:
  v31 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v6);
  i = (uint64_t *)v35[0];
  if (v31)
  {
    *(_QWORD *)v35[0] = *v31;
LABEL_72:
    *v31 = i;
    goto LABEL_73;
  }
  *(_QWORD *)v35[0] = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v6) = v12;
  if (*i)
  {
    v32 = *(_QWORD *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v32 >= v7)
        v32 %= v7;
    }
    else
    {
      v32 &= v7 - 1;
    }
    v31 = (_QWORD *)(*(_QWORD *)a1 + 8 * v32);
    goto LABEL_72;
  }
LABEL_73:
  v35[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,void *>>>>::reset[abi:ne180100]((uint64_t)v35);
  return i;
}

void sub_191367520(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::deque<int>::~deque[abi:ne180100](uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  *(_QWORD *)(a1 + 40) = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 512;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    v6 = 1024;
LABEL_7:
    *(_QWORD *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    v9 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    if (v8 != v9)
      *(_QWORD *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::deque<int>::push_back(_QWORD *a1, _DWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  __int128 v35;
  void *v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  int64_t v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t i;
  _QWORD *v79;
  char *v80;
  _BYTE *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  char *v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  unint64_t v97;
  char *v98;
  uint64_t v99;
  char *v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  char *v106;
  __int128 v107;
  __int128 v108;
  uint64_t v109;
  __int128 v110;
  uint64_t v111;
  __int128 v112;

  v4 = (char *)a1[2];
  v5 = (char *)a1[1];
  v6 = v4 - v5;
  if (v4 == v5)
    v7 = 0;
  else
    v7 = ((v4 - v5) << 7) - 1;
  v9 = a1[4];
  v8 = a1[5];
  v10 = v8 + v9;
  if (v7 == v8 + v9)
  {
    if (v9 >= 0x400)
    {
      a1[4] = v9 - 1024;
      v13 = *(_QWORD *)v5;
      v11 = v5 + 8;
      v12 = v13;
      a1[1] = v11;
      if ((char *)a1[3] == v4)
      {
        v14 = (uint64_t)&v11[-*a1];
        if ((unint64_t)v11 <= *a1)
        {
          if (v4 == (char *)*a1)
            v42 = 1;
          else
            v42 = (uint64_t)&v4[-*a1] >> 2;
          v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v42);
          v45 = &v43[8 * (v42 >> 2)];
          v46 = (uint64_t *)a1[1];
          v4 = v45;
          v47 = a1[2] - (_QWORD)v46;
          if (v47)
          {
            v4 = &v45[v47 & 0xFFFFFFFFFFFFFFF8];
            v48 = 8 * (v47 >> 3);
            v49 = &v43[8 * (v42 >> 2)];
            do
            {
              v50 = *v46++;
              *(_QWORD *)v49 = v50;
              v49 += 8;
              v48 -= 8;
            }
            while (v48);
          }
          v51 = (char *)*a1;
          *a1 = v43;
          a1[1] = v45;
          a1[2] = v4;
          a1[3] = &v43[8 * v44];
          if (v51)
          {
            operator delete(v51);
            v4 = (char *)a1[2];
          }
        }
        else
        {
          v15 = v14 >> 3;
          v16 = v14 >> 3 < -1;
          v17 = (v14 >> 3) + 2;
          if (v16)
            v18 = v17;
          else
            v18 = v15 + 1;
          v19 = -(v18 >> 1);
          v20 = v18 >> 1;
          v21 = &v11[-8 * v20];
          v22 = v4 - v11;
          if (v4 == v11)
          {
            v23 = v4;
          }
          else
          {
            memmove(&v11[-8 * v20], v11, v4 - v11);
            v23 = (char *)a1[1];
          }
          v4 = &v21[v22];
          a1[1] = &v23[8 * v19];
          a1[2] = &v21[v22];
        }
      }
      *(_QWORD *)v4 = v12;
LABEL_82:
      a1[2] += 8;
LABEL_83:
      v5 = (char *)a1[1];
      v8 = a1[5];
      v10 = a1[4] + v8;
      goto LABEL_84;
    }
    v24 = v6 >> 3;
    v25 = (char *)a1[3];
    v26 = (char *)*a1;
    v27 = (uint64_t)&v25[-*a1];
    if (v6 >> 3 < (unint64_t)(v27 >> 3))
    {
      v28 = operator new(0x1000uLL);
      v29 = v28;
      if (v25 == v4)
      {
        if (v26 == v5)
        {
          if (v4 == v5)
            v52 = 1;
          else
            v52 = v27 >> 2;
          v53 = 2 * v52;
          v54 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v52);
          v5 = &v54[(v53 + 6) & 0xFFFFFFFFFFFFFFF8];
          v56 = (uint64_t *)a1[1];
          v57 = v5;
          v58 = a1[2] - (_QWORD)v56;
          if (v58)
          {
            v57 = &v5[v58 & 0xFFFFFFFFFFFFFFF8];
            v59 = 8 * (v58 >> 3);
            v60 = v5;
            do
            {
              v61 = *v56++;
              *(_QWORD *)v60 = v61;
              v60 += 8;
              v59 -= 8;
            }
            while (v59);
          }
          v62 = (char *)*a1;
          *a1 = v54;
          a1[1] = v5;
          a1[2] = v57;
          a1[3] = &v54[8 * v55];
          if (v62)
          {
            operator delete(v62);
            v5 = (char *)a1[1];
          }
        }
        *((_QWORD *)v5 - 1) = v29;
        v63 = (char *)a1[1];
        v64 = (char *)a1[2];
        a1[1] = v63 - 8;
        v65 = *((_QWORD *)v63 - 1);
        a1[1] = v63;
        if (v64 == (char *)a1[3])
        {
          v66 = (uint64_t)&v63[-*a1];
          if ((unint64_t)v63 <= *a1)
          {
            if (v64 == (char *)*a1)
              v97 = 1;
            else
              v97 = (uint64_t)&v64[-*a1] >> 2;
            v98 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v97);
            v100 = &v98[8 * (v97 >> 2)];
            v101 = (uint64_t *)a1[1];
            v64 = v100;
            v102 = a1[2] - (_QWORD)v101;
            if (v102)
            {
              v64 = &v100[v102 & 0xFFFFFFFFFFFFFFF8];
              v103 = 8 * (v102 >> 3);
              v104 = &v98[8 * (v97 >> 2)];
              do
              {
                v105 = *v101++;
                *(_QWORD *)v104 = v105;
                v104 += 8;
                v103 -= 8;
              }
              while (v103);
            }
            v106 = (char *)*a1;
            *a1 = v98;
            a1[1] = v100;
            a1[2] = v64;
            a1[3] = &v98[8 * v99];
            if (v106)
            {
              operator delete(v106);
              v64 = (char *)a1[2];
            }
          }
          else
          {
            v67 = v66 >> 3;
            v16 = v66 >> 3 < -1;
            v68 = (v66 >> 3) + 2;
            if (v16)
              v69 = v68;
            else
              v69 = v67 + 1;
            v70 = -(v69 >> 1);
            v71 = v69 >> 1;
            v72 = &v63[-8 * v71];
            v73 = v64 - v63;
            if (v64 != v63)
            {
              memmove(&v63[-8 * v71], v63, v64 - v63);
              v63 = (char *)a1[1];
            }
            v64 = &v72[v73];
            a1[1] = &v63[8 * v70];
            a1[2] = &v72[v73];
          }
        }
        *(_QWORD *)v64 = v65;
      }
      else
      {
        *(_QWORD *)v4 = v28;
      }
      goto LABEL_82;
    }
    if (v25 == v26)
      v30 = 1;
    else
      v30 = v27 >> 2;
    v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v30);
    v33 = v32;
    v34 = &v31[8 * v24];
    *(_QWORD *)&v35 = v31;
    *((_QWORD *)&v35 + 1) = v34;
    v110 = v35;
    v36 = operator new(0x1000uLL);
    *(_QWORD *)&v37 = v34;
    *((_QWORD *)&v37 + 1) = &v31[8 * v33];
    if (v24 == v33)
    {
      v38 = 8 * v24;
      *(_QWORD *)&v39 = v110;
      if (v6 >= 1)
      {
        v40 = v38 >> 3;
        if (v40 >= -1)
          v41 = v40 + 1;
        else
          v41 = v40 + 2;
        v34 -= 8 * (v41 >> 1);
        *(_QWORD *)&v37 = v34;
        *((_QWORD *)&v39 + 1) = v34;
        goto LABEL_56;
      }
      v74 = v38 >> 2;
      if (v4 == v5)
        v75 = 1;
      else
        v75 = v74;
      v76 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v75);
      v34 = &v76[8 * (v75 >> 2)];
      *(_QWORD *)&v39 = v76;
      *((_QWORD *)&v39 + 1) = v34;
      *(_QWORD *)&v37 = v34;
      *((_QWORD *)&v37 + 1) = &v76[8 * v77];
      if (!v31)
        goto LABEL_56;
      v107 = v37;
      v110 = v39;
      operator delete(v31);
      v37 = v107;
    }
    v39 = v110;
LABEL_56:
    *(_QWORD *)v34 = v36;
    *(_QWORD *)&v37 = v37 + 8;
    for (i = a1[2]; i != a1[1]; i -= 8)
    {
      v79 = (_QWORD *)*((_QWORD *)&v39 + 1);
      if (*((_QWORD *)&v39 + 1) == (_QWORD)v39)
      {
        v81 = (_BYTE *)v37;
        if ((unint64_t)v37 >= *((_QWORD *)&v37 + 1))
        {
          if (*((_QWORD *)&v37 + 1) == *((_QWORD *)&v39 + 1))
            v86 = 1;
          else
            v86 = (uint64_t)(*((_QWORD *)&v37 + 1) - *((_QWORD *)&v39 + 1)) >> 2;
          v87 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v86);
          v80 = &v87[(2 * v86 + 6) & 0xFFFFFFFFFFFFFFF8];
          v89 = v80;
          v90 = v81 - (_BYTE *)v79;
          if (v81 != (_BYTE *)v79)
          {
            v89 = &v80[v90 & 0xFFFFFFFFFFFFFFF8];
            v91 = 8 * (v90 >> 3);
            v92 = v80;
            v93 = v79;
            do
            {
              v94 = *v93++;
              *(_QWORD *)v92 = v94;
              v92 += 8;
              v91 -= 8;
            }
            while (v91);
          }
          *(_QWORD *)&v39 = v87;
          *((_QWORD *)&v39 + 1) = v80;
          *(_QWORD *)&v37 = v89;
          *((_QWORD *)&v37 + 1) = &v87[8 * v88];
          if (v79)
          {
            v108 = v37;
            v112 = v39;
            operator delete(v79);
            v37 = v108;
            v39 = v112;
          }
        }
        else
        {
          v82 = (uint64_t)(*((_QWORD *)&v37 + 1) - v37) >> 3;
          if (v82 >= -1)
            v83 = v82 + 1;
          else
            v83 = v82 + 2;
          v84 = v83 >> 1;
          v85 = v37 + 8 * (v83 >> 1);
          v80 = (char *)(v85 - (v37 - *((_QWORD *)&v39 + 1)));
          if ((_QWORD)v37 == *((_QWORD *)&v39 + 1))
          {
            v81 = (_BYTE *)*((_QWORD *)&v39 + 1);
          }
          else
          {
            v109 = *((_QWORD *)&v37 + 1);
            v111 = v39;
            memmove((void *)(v85 - (v37 - *((_QWORD *)&v39 + 1))), *((const void **)&v39 + 1), v37 - *((_QWORD *)&v39 + 1));
            *((_QWORD *)&v37 + 1) = v109;
            *(_QWORD *)&v39 = v111;
          }
          *((_QWORD *)&v39 + 1) = v80;
          *(_QWORD *)&v37 = &v81[8 * v84];
        }
      }
      else
      {
        v80 = (char *)*((_QWORD *)&v39 + 1);
      }
      v95 = *(_QWORD *)(i - 8);
      *((_QWORD *)v80 - 1) = v95;
      *((_QWORD *)&v39 + 1) -= 8;
    }
    v96 = (char *)*a1;
    *(_OWORD *)a1 = v39;
    *((_OWORD *)a1 + 1) = v37;
    if (v96)
      operator delete(v96);
    goto LABEL_83;
  }
LABEL_84:
  *(_DWORD *)(*(_QWORD *)&v5[(v10 >> 7) & 0x1FFFFFFFFFFFFF8] + 4 * (v10 & 0x3FF)) = *a2;
  a1[5] = v8 + 1;
}

void sub_191367B48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 a11)
{
  void *v11;

  operator delete(v11);
  if ((_QWORD)a11)
    operator delete((void *)a11);
  _Unwind_Resume(a1);
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,int>,void *>>>::operator()[abi:ne180100](char a1, void **__p)
{
  if (a1)
  {
    if (*((char *)__p + 55) < 0)
      operator delete(__p[4]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

__int128 *Espresso::net::remove_layer(Espresso::net *this, int a2)
{
  int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  std::vector<std::string> *v9;
  _QWORD *v10;
  std::vector<std::string> *v11;
  __int128 *v12;
  __int128 *v13;
  __int128 *result;
  uint64_t v15;
  unint64_t v16;
  __int128 v17;
  std::string *v18;
  void **v19;

  v3 = ((*((_QWORD *)this + 5) - *((_QWORD *)this + 4)) >> 4) - 1;
  if (v3 <= a2)
  {
    v5 = v3;
    v4 = a2;
  }
  else
  {
    v4 = a2;
    v5 = v3;
    v6 = a2;
    do
    {
      v7 = v6 + 1;
      v16 = v6 + 1;
      v8 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)this + 56, v6 + 1, &v16);
      v17 = *(_OWORD *)(v8 + 3);
      v18 = (std::string *)v8[5];
      v19 = (void **)v6;
      v8[3] = 0;
      v8[4] = 0;
      v8[5] = 0;
      v9 = (std::vector<std::string> *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)this + 56, v6, &v19);
      std::vector<std::string>::__vdeallocate(v9 + 1);
      *(_OWORD *)&v9[1].__begin_ = v17;
      v9[1].__end_cap_.__value_ = v18;
      v18 = 0;
      v17 = 0uLL;
      v19 = (void **)&v17;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v19);
      v16 = v6 + 1;
      v10 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)this + 96, v6 + 1, &v16);
      v17 = *(_OWORD *)(v10 + 3);
      v18 = (std::string *)v10[5];
      v19 = (void **)v6;
      v10[3] = 0;
      v10[4] = 0;
      v10[5] = 0;
      v11 = (std::vector<std::string> *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)this + 96, v6, &v19);
      std::vector<std::string>::__vdeallocate(v11 + 1);
      *(_OWORD *)&v11[1].__begin_ = v17;
      v11[1].__end_cap_.__value_ = v18;
      v18 = 0;
      v17 = 0uLL;
      v19 = (void **)&v17;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v19);
      v6 = v7;
    }
    while (v5 != v7);
  }
  std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__erase_unique<unsigned long>((_QWORD *)this + 7, v5);
  std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__erase_unique<unsigned long>((_QWORD *)this + 12, v5);
  v12 = (__int128 *)*((_QWORD *)this + 5);
  v13 = (__int128 *)(*((_QWORD *)this + 4) + 16 * v4);
  result = v13 + 1;
  if (v13 + 1 != v12)
  {
    do
      v15 = (uint64_t)v13++;
    while ((__int128 *)(std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v15, v13) + 32) != v12);
    result = (__int128 *)*((_QWORD *)this + 5);
  }
  while (result != v13)
    result = (__int128 *)std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(result - 1));
  *((_QWORD *)this + 5) = v13;
  return result;
}

void sub_191367D94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void **a14)
{
  a14 = (void **)&a11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<Espresso::platform,int>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<Espresso::platform,int>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::map<Espresso::platform,int>>,0>((uint64_t)v1 + 32);
    operator delete(v1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::map<Espresso::platform,int>>,0>(uint64_t a1)
{
  std::__tree<int>::destroy(*(_QWORD **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::swap[abi:ne180100]<Espresso::net::new_layer_info>(int *a1, int *a2)
{
  int v4;
  _QWORD *v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  void **v17;

  v4 = *a1;
  v6 = *(_OWORD *)(a1 + 2);
  v5 = a1 + 2;
  v12 = v6;
  *v5 = 0;
  *((_QWORD *)a1 + 2) = 0;
  v13 = *(_OWORD *)(a1 + 6);
  v14 = *((_QWORD *)a1 + 5);
  *((_QWORD *)a1 + 3) = 0;
  *((_QWORD *)a1 + 4) = 0;
  *((_QWORD *)a1 + 5) = 0;
  v7 = *((_OWORD *)a1 + 3);
  v16 = *((_QWORD *)a1 + 8);
  *((_QWORD *)a1 + 6) = 0;
  *((_QWORD *)a1 + 7) = 0;
  *((_QWORD *)a1 + 8) = 0;
  *a1 = *a2;
  v8 = (uint64_t)(a2 + 2);
  v15 = v7;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)v5, (__int128 *)(a2 + 2));
  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)a1 + 1);
  *(_OWORD *)(a1 + 6) = *(_OWORD *)(a2 + 6);
  *((_QWORD *)a1 + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 3) = 0;
  *((_QWORD *)a2 + 4) = 0;
  *((_QWORD *)a2 + 5) = 0;
  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)a1 + 2);
  *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
  *((_QWORD *)a1 + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 6) = 0;
  *((_QWORD *)a2 + 7) = 0;
  *((_QWORD *)a2 + 8) = 0;
  *a2 = v4;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v8, &v12);
  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)a2 + 1);
  *(_OWORD *)(a2 + 6) = v13;
  *((_QWORD *)a2 + 5) = v14;
  v14 = 0;
  v13 = 0uLL;
  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)a2 + 2);
  *((_OWORD *)a2 + 3) = v15;
  *((_QWORD *)a2 + 8) = v16;
  v16 = 0;
  v15 = 0uLL;
  v17 = (void **)&v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v17);
  v17 = (void **)&v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v17);
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v12 + 1);
  if (*((_QWORD *)&v12 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::net::insert_layers(std::vector<Espresso::net::new_layer_info> const&)::$_0 &,Espresso::net::new_layer_info*>(int *a1, int *a2, int *a3)
{
  int *v5;
  int v6;
  int v7;
  int *v8;

  v5 = a1;
  v6 = *a2;
  v7 = *a3;
  if (*a2 > *a1)
  {
    if (v7 <= v6)
    {
      std::swap[abi:ne180100]<Espresso::net::new_layer_info>(a1, a2);
      if (*a3 <= *a2)
        return;
      a1 = a2;
    }
    v8 = a3;
    goto LABEL_9;
  }
  if (v7 > v6)
  {
    std::swap[abi:ne180100]<Espresso::net::new_layer_info>(a2, a3);
    if (*a2 > *v5)
    {
      a1 = v5;
      v8 = a2;
LABEL_9:
      std::swap[abi:ne180100]<Espresso::net::new_layer_info>(a1, v8);
    }
  }
}

void std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::net::insert_layers(std::vector<Espresso::net::new_layer_info> const&)::$_0 &,Espresso::net::new_layer_info*>(int *a1, int *a2, int *a3, int *a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::net::insert_layers(std::vector<Espresso::net::new_layer_info> const&)::$_0 &,Espresso::net::new_layer_info*>(a1, a2, a3);
  if (*a4 > *a3)
  {
    std::swap[abi:ne180100]<Espresso::net::new_layer_info>(a3, a4);
    if (*a3 > *a2)
    {
      std::swap[abi:ne180100]<Espresso::net::new_layer_info>(a2, a3);
      if (*a2 > *a1)
        std::swap[abi:ne180100]<Espresso::net::new_layer_info>(a1, a2);
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::net::insert_layers(std::vector<Espresso::net::new_layer_info> const&)::$_0 &,Espresso::net::new_layer_info*>(int *a1, int *a2)
{
  unint64_t v4;
  _BOOL8 result;
  int *v6;
  int *v7;
  int *v8;
  int *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  char *v15;
  __int128 *v16;
  uint64_t v17;
  std::vector<std::string> *v18;
  std::vector<std::string> *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  _DWORD *v27;
  int *v28;
  int v29;
  int v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  void **v36;

  v4 = 0x8E38E38E38E38E39 * (((char *)a2 - (char *)a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(a2 - 18) > *a1)
      {
        v6 = a1;
        v7 = a2 - 18;
        goto LABEL_4;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::net::insert_layers(std::vector<Espresso::net::new_layer_info> const&)::$_0 &,Espresso::net::new_layer_info*>(a1, a1 + 18, a2 - 18);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::net::insert_layers(std::vector<Espresso::net::new_layer_info> const&)::$_0 &,Espresso::net::new_layer_info*>(a1, a1 + 18, a1 + 36, a2 - 18);
      return 1;
    case 5uLL:
      v27 = a1 + 36;
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::net::insert_layers(std::vector<Espresso::net::new_layer_info> const&)::$_0 &,Espresso::net::new_layer_info*>(a1, a1 + 18, a1 + 36, a1 + 54);
      v29 = *(a2 - 18);
      v28 = a2 - 18;
      if (v29 > a1[54])
      {
        std::swap[abi:ne180100]<Espresso::net::new_layer_info>(a1 + 54, v28);
        if (a1[54] > *v27)
        {
          std::swap[abi:ne180100]<Espresso::net::new_layer_info>(a1 + 36, a1 + 54);
          if (*v27 > a1[18])
          {
            std::swap[abi:ne180100]<Espresso::net::new_layer_info>(a1 + 18, a1 + 36);
            if (a1[18] > *a1)
            {
              v6 = a1;
              v7 = a1 + 18;
LABEL_4:
              std::swap[abi:ne180100]<Espresso::net::new_layer_info>(v6, v7);
            }
          }
        }
      }
      return 1;
    default:
      v8 = a1 + 36;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::net::insert_layers(std::vector<Espresso::net::new_layer_info> const&)::$_0 &,Espresso::net::new_layer_info*>(a1, a1 + 18, a1 + 36);
      v9 = a1 + 54;
      if (a1 + 54 == a2)
        return 1;
      v10 = 0;
      v11 = 0;
      break;
  }
  while (1)
  {
    if (*v9 > *v8)
    {
      v30 = *v9;
      v31 = *(_OWORD *)(v9 + 2);
      *((_QWORD *)v9 + 1) = 0;
      *((_QWORD *)v9 + 2) = 0;
      v32 = *(_OWORD *)(v9 + 6);
      v33 = *((_QWORD *)v9 + 5);
      *((_QWORD *)v9 + 3) = 0;
      *((_QWORD *)v9 + 4) = 0;
      v34 = *((_OWORD *)v9 + 3);
      v35 = *((_QWORD *)v9 + 8);
      *((_QWORD *)v9 + 5) = 0;
      *((_QWORD *)v9 + 6) = 0;
      *((_QWORD *)v9 + 7) = 0;
      *((_QWORD *)v9 + 8) = 0;
      v12 = v10;
      v13 = *v8;
      while (1)
      {
        v14 = v12;
        v15 = (char *)a1 + v12;
        *(int *)((char *)a1 + v12 + 216) = v13;
        v16 = (__int128 *)((char *)a1 + v12 + 152);
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)a1 + v12 + 224, v16);
        std::vector<std::string>::__vdeallocate((std::vector<std::string> *)v15 + 10);
        *((_OWORD *)v15 + 15) = *(_OWORD *)(v15 + 168);
        *((_QWORD *)v15 + 32) = *((_QWORD *)v15 + 23);
        *((_QWORD *)v15 + 22) = 0;
        *((_QWORD *)v15 + 23) = 0;
        *((_QWORD *)v15 + 21) = 0;
        std::vector<std::string>::__vdeallocate((std::vector<std::string> *)v15 + 11);
        *(_OWORD *)(v15 + 264) = *((_OWORD *)v15 + 12);
        *((_QWORD *)v15 + 35) = *((_QWORD *)v15 + 26);
        *((_QWORD *)v15 + 25) = 0;
        *((_QWORD *)v15 + 26) = 0;
        *((_QWORD *)v15 + 24) = 0;
        if (v14 == -144)
          break;
        v13 = *((_DWORD *)v15 + 18);
        v12 = v14 - 72;
        if (v30 <= v13)
        {
          v17 = (uint64_t)a1 + v12 + 216;
          v16 = (__int128 *)((char *)a1 + v14 + 152);
          v18 = (std::vector<std::string> *)((char *)a1 + v14 + 192);
          v19 = (std::vector<std::string> *)((char *)a1 + v14 + 168);
          goto LABEL_14;
        }
      }
      v18 = (std::vector<std::string> *)(v15 + 192);
      v19 = (std::vector<std::string> *)(v15 + 168);
      v17 = (uint64_t)a1;
LABEL_14:
      *(_DWORD *)v17 = v30;
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)v16, &v31);
      std::vector<std::string>::__vdeallocate(v19);
      v20 = *((_QWORD *)&v32 + 1);
      v19->__begin_ = (std::vector<std::string>::pointer)v32;
      v21 = v33;
      *(_QWORD *)(v17 + 32) = v20;
      *(_QWORD *)(v17 + 40) = v21;
      v33 = 0;
      v32 = 0uLL;
      std::vector<std::string>::__vdeallocate(v18);
      v22 = *((_QWORD *)&v34 + 1);
      v18->__begin_ = (std::vector<std::string>::pointer)v34;
      v23 = v35;
      *(_QWORD *)(v17 + 56) = v22;
      *(_QWORD *)(v17 + 64) = v23;
      v35 = 0;
      v34 = 0uLL;
      v36 = (void **)&v34;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v36);
      v36 = (void **)&v32;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v36);
      v24 = (std::__shared_weak_count *)*((_QWORD *)&v31 + 1);
      if (*((_QWORD *)&v31 + 1))
      {
        v25 = (unint64_t *)(*((_QWORD *)&v31 + 1) + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
      if (++v11 == 8)
        return v9 + 18 == a2;
    }
    v8 = v9;
    v10 += 72;
    v9 += 18;
    if (v9 == a2)
      return 1;
  }
}

uint64_t Espresso::net::position_of_kernel(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40) - v2;
  if (!v3)
    return 0xFFFFFFFFLL;
  result = 0;
  v5 = v3 >> 4;
  if ((unint64_t)(v3 >> 4) <= 1)
    v5 = 1;
  while (*(_QWORD *)(*(_QWORD *)v2 + 64) != *a2)
  {
    ++result;
    v2 += 16;
    if (v5 == result)
      return 0xFFFFFFFFLL;
  }
  return result;
}

void Espresso::net::insert_layers(uint64_t a1, int *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  const Espresso::layer *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  unint64_t v22;
  int64_t v23;
  void *__p[5];
  void *v25[5];

  if (a3[1] != *a3)
  {
    v6 = a1 + 96;
    std::unordered_map<unsigned long,std::vector<std::string>>::unordered_map((uint64_t)v25, a1 + 96);
    std::unordered_map<unsigned long,std::vector<std::string>>::unordered_map((uint64_t)__p, a1 + 56);
    v7 = *a3;
    v21 = a3[1];
    if (*a3 != v21)
    {
      v8 = *a2;
      do
      {
        v9 = *(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32);
        if (v8 < (int)((unint64_t)v9 >> 4))
        {
          v10 = (int)(v9 >> 4);
          do
          {
            v11 = v10 - 1;
            v23 = v10 - 1;
            v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(a1 + 56, v10 - 1, &v23);
            v22 = v10;
            v13 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(a1 + 56, v10, &v22);
            if (v13 != v12)
              std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)(v13 + 3), (std::string *)v12[3], (std::string *)v12[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12[4] - v12[3]) >> 3));
            v23 = v10 - 1;
            v14 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v6, v10 - 1, &v23);
            v22 = v10;
            v15 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v6, v10, &v22);
            if (v15 != v14)
              std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)(v15 + 3), (std::string *)v14[3], (std::string *)v14[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14[4] - v14[3]) >> 3));
            --v10;
          }
          while (v11 > v8);
        }
        v23 = v8;
        v16 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(a1 + 56, v8, &v23);
        if (v16 != (_QWORD *)v7)
          std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)(v16 + 3), *(std::string **)(v7 + 24), *(std::string **)(v7 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v7 + 32) - *(_QWORD *)(v7 + 24)) >> 3));
        v23 = v8;
        v17 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v6, v8, &v23)+ 3;
        if (v17 != (_QWORD *)(v7 + 48))
          std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)v17, *(std::string **)(v7 + 48), *(std::string **)(v7 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v7 + 56) - *(_QWORD *)(v7 + 48)) >> 3));
        std::vector<std::shared_ptr<Espresso::layer>>::insert((_QWORD *)(a1 + 32), (uint64_t *)(*(_QWORD *)(a1 + 32) + 16 * v8), (uint64_t *)(v7 + 8));
        ++v8;
        v7 += 72;
      }
      while (v7 != v21);
    }
    std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__deallocate_node((char *)__p[2]);
    v19 = __p[0];
    __p[0] = 0;
    if (v19)
      operator delete(v19);
    std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__deallocate_node((char *)v25[2]);
    v20 = v25[0];
    v25[0] = 0;
    if (v20)
      operator delete(v20);
  }
}

void sub_191368704(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<unsigned long,std::vector<std::string>>::unordered_map(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD *v10;
  _QWORD *i;
  unint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  v5 = *(_QWORD **)(a2 + 16);
  if (v5)
  {
    v6 = (_QWORD *)(a1 + 16);
    do
    {
      v7 = v5[2];
      v8 = *(_QWORD *)(a1 + 8);
      if (v8)
      {
        v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
        v9.i16[0] = vaddlv_u8(v9);
        if (v9.u32[0] > 1uLL)
        {
          v2 = v5[2];
          if (v7 >= v8)
            v2 = v7 % v8;
        }
        else
        {
          v2 = (v8 - 1) & v7;
        }
        v10 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v2);
        if (v10)
        {
          for (i = (_QWORD *)*v10; i; i = (_QWORD *)*i)
          {
            v12 = i[1];
            if (v12 == v7)
            {
              if (i[2] == v7)
                goto LABEL_41;
            }
            else
            {
              if (v9.u32[0] > 1uLL)
              {
                if (v12 >= v8)
                  v12 %= v8;
              }
              else
              {
                v12 &= v8 - 1;
              }
              if (v12 != v2)
                break;
            }
          }
        }
      }
      v13 = operator new(0x30uLL);
      *v13 = 0;
      v13[1] = v7;
      v13[2] = v5[2];
      v13[3] = 0;
      v13[4] = 0;
      v13[5] = 0;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v13 + 3, v5[3], v5[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5[4] - v5[3]) >> 3));
      v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
      v15 = *(float *)(a1 + 32);
      if (!v8 || (float)(v15 * (float)v8) < v14)
      {
        v16 = (v8 & (v8 - 1)) != 0;
        if (v8 < 3)
          v16 = 1;
        v17 = v16 | (2 * v8);
        v18 = vcvtps_u32_f32(v14 / v15);
        if (v17 <= v18)
          v19 = v18;
        else
          v19 = v17;
        std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__rehash<true>(a1, v19);
        v8 = *(_QWORD *)(a1 + 8);
        if ((v8 & (v8 - 1)) != 0)
        {
          if (v7 >= v8)
            v2 = v7 % v8;
          else
            v2 = v7;
        }
        else
        {
          v2 = (v8 - 1) & v7;
        }
      }
      v20 = *(_QWORD *)a1;
      v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v2);
      if (v21)
      {
        *v13 = *v21;
      }
      else
      {
        *v13 = *v6;
        *v6 = v13;
        *(_QWORD *)(v20 + 8 * v2) = v6;
        if (!*v13)
          goto LABEL_40;
        v22 = *(_QWORD *)(*v13 + 8);
        if ((v8 & (v8 - 1)) != 0)
        {
          if (v22 >= v8)
            v22 %= v8;
        }
        else
        {
          v22 &= v8 - 1;
        }
        v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
      }
      *v21 = v13;
LABEL_40:
      ++*(_QWORD *)(a1 + 24);
LABEL_41:
      v5 = (_QWORD *)*v5;
    }
    while (v5);
  }
  return a1;
}

void sub_191368994(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__deallocate_node(*(char **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__deallocate_node(char *a1)
{
  char *v1;
  char *v2;
  void **v3;

  if (a1)
  {
    v1 = a1;
    do
    {
      v2 = *(char **)v1;
      v3 = (void **)(v1 + 24);
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
      operator delete(v1);
      v1 = v2;
    }
    while (v2);
  }
}

float Espresso::net::_bench(Espresso::net *this, int a2)
{
  int v2;
  std::__shared_weak_count *v4;
  void (***v5)(uint64_t *__return_ptr, _QWORD);
  unint64_t *p_shared_owners;
  unint64_t v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  double v12;
  double v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD v17[5];
  uint64_t v18;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  double v20;
  char v21;
  _QWORD v22[7];

  v2 = a2;
  v5 = (void (***)(uint64_t *__return_ptr, _QWORD))*((_QWORD *)this + 2);
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  v22[5] = v5;
  v22[6] = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  if (a2 >= 0)
    v8 = a2;
  else
    v8 = a2 + 1;
  v9 = v8 >> 1;
  if (v9 <= 1)
    v10 = 1;
  else
    v10 = v9;
  v11 = MEMORY[0x1E0C809B0];
  do
  {
    v22[0] = v11;
    v22[1] = 3221225472;
    v22[2] = ___ZN8Espresso3net6_benchEi_block_invoke;
    v22[3] = &__block_descriptor_40_e10_v16__0r_v8l;
    v22[4] = this;
    Espresso::abstract_context::compute_batch_sync(v5, v22);
    --v10;
  }
  while (v10);
  Espresso::scoped_timer::scoped_timer((Espresso::scoped_timer *)&v18, "5x", v12);
  if (v2 >= 1)
  {
    do
    {
      v17[0] = v11;
      v17[1] = 3221225472;
      v17[2] = ___ZN8Espresso3net6_benchEi_block_invoke_2;
      v17[3] = &__block_descriptor_40_e10_v16__0r_v8l;
      v17[4] = this;
      Espresso::abstract_context::compute_batch_sync(v5, v17);
      --v2;
    }
    while (v2);
  }
  v21 = 1;
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v13 = (double)(rep - v18) * 0.000001;
  v20 = v13;
  Espresso::scoped_timer::~scoped_timer((Espresso::scoped_timer *)&v18);
  if (v4)
  {
    v14 = (unint64_t *)&v4->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return v13;
}

void sub_191368BC8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1 - 112);
  _Unwind_Resume(a1);
}

Espresso::scoped_timer *Espresso::scoped_timer::scoped_timer(Espresso::scoped_timer *this, const char *a2, double a3)
{
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *(_OWORD *)((char *)this + 40) = 0u;
  MEMORY[0x19401C808]((char *)this + 24, a2);
  *(std::chrono::steady_clock::time_point *)this = std::chrono::steady_clock::now();
  *((_QWORD *)this + 2) = 0;
  *((_BYTE *)this + 56) = 0;
  return this;
}

void sub_191368C44(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void ___ZN8Espresso3net6_benchEi_block_invoke(uint64_t a1, _QWORD *a2)
{
  Espresso::net::__forward(*(_QWORD *)(a1 + 32), a2, 0, 0xFFFFFFFFLL);
}

void ___ZN8Espresso3net6_benchEi_block_invoke_2(uint64_t a1, _QWORD *a2)
{
  Espresso::net::__forward(*(_QWORD *)(a1 + 32), a2, 0, 0xFFFFFFFFLL);
}

void Espresso::scoped_timer::~scoped_timer(Espresso::scoped_timer *this)
{
  std::chrono::steady_clock::time_point v2;

  if (!*((_BYTE *)this + 56))
  {
    *((_BYTE *)this + 56) = 1;
    v2.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *((std::chrono::steady_clock::time_point *)this + 1) = v2;
    *((double *)this + 2) = (double)(v2.__d_.__rep_ - *(_QWORD *)this) * 0.000001;
  }
  if (*((char *)this + 47) < 0)
    operator delete(*((void **)this + 3));
}

float Espresso::net::_bench_layer_and_children(std::__shared_weak_count **this, int a2, int a3)
{
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  double v11;
  double v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD v19[6];
  int v20;
  int v21;
  uint64_t v22;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  double v24;
  char v25;
  _QWORD v26[6];
  int v27;
  int v28;
  std::__shared_weak_count *v29;
  std::__shared_weak_count *v30;
  _QWORD v31[6];
  uint64_t v32;
  std::__shared_weak_count *v33;
  _QWORD *v34;
  _QWORD *v35;

  v31[0] = 0;
  v31[1] = v31;
  v31[2] = 0x7012000000;
  v31[3] = __Block_byref_object_copy__1262;
  v31[4] = __Block_byref_object_dispose__1263;
  v31[5] = "";
  Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)&v32, (Espresso::net *)this);
  v7 = this[2];
  v6 = this[3];
  v29 = v7;
  v30 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v10 = MEMORY[0x1E0C809B0];
  v26[0] = MEMORY[0x1E0C809B0];
  v26[1] = 3221225472;
  v26[2] = ___ZN8Espresso3net25_bench_layer_and_childrenEii_block_invoke;
  v26[3] = &unk_1E2DD1FE8;
  v27 = a3;
  v28 = a2;
  v26[4] = v31;
  v26[5] = this;
  Espresso::abstract_context::compute_batch_sync(v7, v26);
  Espresso::scoped_timer::scoped_timer((Espresso::scoped_timer *)&v22, "5x", v11);
  v19[0] = v10;
  v19[1] = 3221225472;
  v19[2] = ___ZN8Espresso3net25_bench_layer_and_childrenEii_block_invoke_2;
  v19[3] = &unk_1E2DD1FE8;
  v20 = a3;
  v21 = a2;
  v19[4] = v31;
  v19[5] = this;
  Espresso::abstract_context::compute_batch_sync(v7, v19);
  v25 = 1;
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v12 = (double)(rep - v22) * 0.000001;
  v24 = v12;
  Espresso::scoped_timer::~scoped_timer((Espresso::scoped_timer *)&v22);
  if (v6)
  {
    v13 = (unint64_t *)&v6->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  _Block_object_dispose(v31, 8);
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v35);
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v34);
  v15 = v33;
  if (v33)
  {
    v16 = (unint64_t *)&v33->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  return v12;
}

void sub_191368ED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,char a33)
{
  Espresso::network_optimization_graph *v33;

  Espresso::scoped_timer::~scoped_timer((Espresso::scoped_timer *)&a16);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a31);
  _Block_object_dispose(&a33, 8);
  Espresso::network_optimization_graph::~network_optimization_graph(v33);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__1262(uint64_t result, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_OWORD *)(result + 48) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(result + 64) = *(_QWORD *)(a2 + 64);
  v2 = (_QWORD *)(a2 + 72);
  v3 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(result + 72) = v3;
  v4 = result + 72;
  v5 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(result + 80) = v5;
  if (v5)
  {
    *(_QWORD *)(v3 + 16) = v4;
    *(_QWORD *)(a2 + 64) = v2;
    *v2 = 0;
    *(_QWORD *)(a2 + 80) = 0;
  }
  else
  {
    *(_QWORD *)(result + 64) = v4;
  }
  *(_QWORD *)(result + 88) = *(_QWORD *)(a2 + 88);
  v6 = (_QWORD *)(a2 + 96);
  v7 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(result + 96) = v7;
  v8 = result + 96;
  v9 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(result + 104) = v9;
  if (v9)
  {
    *(_QWORD *)(v7 + 16) = v8;
    *(_QWORD *)(a2 + 88) = v6;
    *v6 = 0;
    *(_QWORD *)(a2 + 104) = 0;
  }
  else
  {
    *(_QWORD *)(result + 88) = v8;
  }
  return result;
}

uint64_t __Block_byref_object_dispose__1263(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 48;
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(*(_QWORD **)(a1 + 96));
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(*(_QWORD **)(a1 + 72));
  return std::shared_ptr<void>::~shared_ptr[abi:ne180100](v2);
}

void Espresso::net::_tune_concurrency(Espresso::net *this, int a2, int a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  float v10;
  Espresso::net *v11;
  float v12;
  double v13;
  uint64_t v14;
  float v15;
  float v16;
  double v17;
  BOOL v18;
  double v19;
  double v20;
  const char *v21;
  Espresso::net *v22;
  Espresso::net *v23;
  BOOL v24;
  unint64_t *v25;
  unint64_t v26;
  _QWORD v27[3];

  v6 = *((_QWORD *)this + 2);
  v7 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  v27[1] = v6;
  v27[2] = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  if (*(_BYTE *)(v6 + 52))
  {
    v10 = Espresso::net::_bench(this, a2);
    v11 = (Espresso::net *)*((_QWORD *)this + 63);
    if (v11 != (Espresso::net *)((char *)this + 512))
    {
      v12 = (float)a2;
      v13 = (float)(v10 / (float)a2);
      do
      {
        v14 = *(_QWORD *)((char *)v11 + 28);
        v27[0] = v14;
        Espresso::net::_bench_layer_and_children((std::__shared_weak_count **)this, v14, a2);
        *((_BYTE *)std::__tree<std::__value_type<int,BOOL>,std::__map_value_compare<int,std::__value_type<int,BOOL>,std::less<int>,true>,std::allocator<std::__value_type<int,BOOL>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)this + 63, v14, v27)+ 32) = 0;
        Espresso::net::_assign_streams(this);
        v15 = Espresso::net::_bench_layer_and_children((std::__shared_weak_count **)this, v14, a2);
        *((_BYTE *)std::__tree<std::__value_type<int,BOOL>,std::__map_value_compare<int,std::__value_type<int,BOOL>,std::less<int>,true>,std::allocator<std::__value_type<int,BOOL>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)this + 63, v14, v27)+ 32) = 1;
        Espresso::net::_assign_streams(this);
        v16 = Espresso::net::_bench_layer_and_children((std::__shared_weak_count **)this, v14, a2);
        v17 = v16 * 1.01;
        v18 = v17 < v15;
        if (a3)
        {
          v19 = (float)(v16 / v12);
          v20 = (float)((float)(v16 - v15) / v12);
          v21 = "";
          if (v17 < v15)
            v21 = "async";
          printf("%.3f \t %.3f \t %.3f %s\n", v19, v20, v13, v21);
        }
        *((_BYTE *)std::__tree<std::__value_type<int,BOOL>,std::__map_value_compare<int,std::__value_type<int,BOOL>,std::less<int>,true>,std::allocator<std::__value_type<int,BOOL>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)this + 63, v14, v27)+ 32) = v18;
        v22 = (Espresso::net *)*((_QWORD *)v11 + 1);
        if (v22)
        {
          do
          {
            v23 = v22;
            v22 = *(Espresso::net **)v22;
          }
          while (v22);
        }
        else
        {
          do
          {
            v23 = (Espresso::net *)*((_QWORD *)v11 + 2);
            v24 = *(_QWORD *)v23 == (_QWORD)v11;
            v11 = v23;
          }
          while (!v24);
        }
        v11 = v23;
      }
      while (v23 != (Espresso::net *)((char *)this + 512));
    }
  }
  if (v7)
  {
    v25 = (unint64_t *)&v7->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_191369370(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void Espresso::net::__reset_temporal_state(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v2 = *(uint64_t **)(a1 + 32);
  for (i = *(uint64_t **)(a1 + 40); v2 != i; v2 += 2)
  {
    v5 = *v2;
    v6 = (std::__shared_weak_count *)v2[1];
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    v9 = *(_QWORD *)(v5 + 64);
    if (v9)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 192))(v9, a2);
    if (v6)
    {
      v10 = (unint64_t *)&v6->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_191369444(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t **Espresso::net::copy_parameters_from(Espresso::net *this, const Espresso::net *a2)
{
  _QWORD *v4;
  char *v5;
  uint64_t **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t *v13;
  uint64_t **v14;
  uint64_t **v15;
  char *v16;
  char *v17;
  uint64_t **v18;
  char *v19;
  char *v20;
  _QWORD *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t *v26;
  uint64_t **v27;
  uint64_t **v28;
  char *v29;
  char *v30;
  uint64_t *v31;
  char *v32;
  uint64_t **v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t **v38;
  uint64_t **v39;
  char *v40;
  char *v41;
  uint64_t **v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t **v45;
  uint64_t **v46;
  char *v47;
  char *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t i;
  uint64_t *v52;
  unint64_t v53;
  __int128 v54;
  uint64_t *v55;
  _QWORD *inserted;
  _QWORD *v57;
  __int128 v58;
  unint64_t v59;
  _QWORD *v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t j;
  uint64_t v64;
  BOOL v65;
  _QWORD *v66;
  char *v67;
  std::string *v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t k;
  uint64_t v77;
  BOOL v78;
  _QWORD *v79;
  char *v80;
  char *v81;
  _OWORD *v82;
  __int128 v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t m;
  uint64_t v89;
  BOOL v90;
  _QWORD *v91;
  char *v92;
  std::string *v93;
  uint64_t *v95;
  char *v96;
  uint64_t *v97;
  uint64_t *v98;

  if (this == a2)
  {
    std::string::operator=((std::string *)((char *)this + 424), (const std::string *)((char *)this + 424));
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)this + 121, *((_QWORD *)this + 121), *((_QWORD *)this + 122));
  }
  else
  {
    v4 = (_QWORD *)*((_QWORD *)a2 + 41);
    v5 = (char *)a2 + 336;
    if (*((_QWORD *)this + 43))
    {
      v6 = (uint64_t **)((char *)this + 336);
      v7 = *((_QWORD *)this + 41);
      v8 = *((_QWORD *)this + 42);
      *((_QWORD *)this + 41) = (char *)this + 336;
      *(_QWORD *)(v8 + 16) = 0;
      *((_QWORD *)this + 42) = 0;
      *((_QWORD *)this + 43) = 0;
      if (*(_QWORD *)(v7 + 8))
        v9 = *(uint64_t **)(v7 + 8);
      else
        v9 = (uint64_t *)v7;
      v96 = (char *)this + 328;
      v97 = v9;
      v98 = v9;
      if (!v9
        || (v97 = std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::_DetachedTreeCache::__detach_next((uint64_t)v9),
            v4 == (_QWORD *)v5))
      {
        v17 = (char *)v4;
      }
      else
      {
        do
        {
          std::string::operator=((std::string *)(v9 + 4), (const std::string *)(v4 + 4));
          *(_OWORD *)(v9 + 7) = *(_OWORD *)(v4 + 7);
          v10 = *(_OWORD *)(v4 + 9);
          v11 = *(_OWORD *)(v4 + 11);
          v12 = *(_OWORD *)(v4 + 13);
          *(_OWORD *)((char *)v9 + 116) = *(_OWORD *)((char *)v4 + 116);
          *(_OWORD *)(v9 + 13) = v12;
          *(_OWORD *)(v9 + 11) = v11;
          *(_OWORD *)(v9 + 9) = v10;
          v13 = *v6;
          v14 = (uint64_t **)((char *)this + 336);
          v15 = (uint64_t **)((char *)this + 336);
          if (*v6)
          {
            do
            {
              while (1)
              {
                v14 = (uint64_t **)v13;
                if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v98 + 4, v13 + 4))
                  break;
                v13 = *v14;
                v15 = v14;
                if (!*v14)
                  goto LABEL_14;
              }
              v13 = v14[1];
            }
            while (v13);
            v15 = v14 + 1;
          }
LABEL_14:
          std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at((uint64_t **)this + 41, (uint64_t)v14, v15, v98);
          v9 = v97;
          v98 = v97;
          if (v97)
            v97 = std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::_DetachedTreeCache::__detach_next((uint64_t)v97);
          v16 = (char *)v4[1];
          if (v16)
          {
            do
            {
              v17 = v16;
              v16 = *(char **)v16;
            }
            while (v16);
          }
          else
          {
            do
            {
              v17 = (char *)v4[2];
              v65 = *(_QWORD *)v17 == (_QWORD)v4;
              v4 = v17;
            }
            while (!v65);
          }
          if (!v9)
            break;
          v4 = v17;
        }
        while (v17 != v5);
      }
      std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v96);
      v4 = v17;
    }
    if (v4 != (_QWORD *)v5)
    {
      v18 = (uint64_t **)((char *)this + 336);
      do
      {
        v19 = (char *)operator new(0x88uLL);
        v20 = v19;
        v21 = v19 + 32;
        if (*((char *)v4 + 55) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)(v19 + 32), (const std::string::value_type *)v4[4], v4[5]);
        }
        else
        {
          v22 = *((_OWORD *)v4 + 2);
          *((_QWORD *)v19 + 6) = v4[6];
          *(_OWORD *)v21 = v22;
        }
        *(_OWORD *)(v20 + 56) = *(_OWORD *)(v4 + 7);
        v23 = *(_OWORD *)(v4 + 9);
        v24 = *(_OWORD *)(v4 + 11);
        v25 = *(_OWORD *)(v4 + 13);
        *(_OWORD *)(v20 + 120) = *(_OWORD *)(v4 + 15);
        *(_OWORD *)(v20 + 104) = v25;
        *(_OWORD *)(v20 + 88) = v24;
        *(_OWORD *)(v20 + 72) = v23;
        v26 = *v18;
        v27 = (uint64_t **)((char *)this + 336);
        v28 = (uint64_t **)((char *)this + 336);
        if (*v18)
        {
          do
          {
            while (1)
            {
              v27 = (uint64_t **)v26;
              if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v21, v26 + 4))
                break;
              v26 = *v27;
              v28 = v27;
              if (!*v27)
                goto LABEL_38;
            }
            v26 = v27[1];
          }
          while (v26);
          v28 = v27 + 1;
        }
LABEL_38:
        std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at((uint64_t **)this + 41, (uint64_t)v27, v28, (uint64_t *)v20);
        v29 = (char *)v4[1];
        if (v29)
        {
          do
          {
            v30 = v29;
            v29 = *(char **)v29;
          }
          while (v29);
        }
        else
        {
          do
          {
            v30 = (char *)v4[2];
            v65 = *(_QWORD *)v30 == (_QWORD)v4;
            v4 = v30;
          }
          while (!v65);
        }
        v4 = v30;
      }
      while (v30 != v5);
    }
    std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__tree_node<std::__value_type<std::string,Espresso::blob_numerical_properties>,void *> *,long>>((uint64_t)this + 352, *((uint64_t **)a2 + 44), (uint64_t *)a2 + 45);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t **)this + 59, *((__int128 **)a2 + 59), (__int128 *)a2 + 30);
    std::string::operator=((std::string *)((char *)this + 424), (const std::string *)((char *)a2 + 424));
    v31 = (uint64_t *)*((_QWORD *)a2 + 50);
    v32 = (char *)a2 + 408;
    if (*((_QWORD *)this + 52))
    {
      v33 = (uint64_t **)((char *)this + 408);
      v34 = *((_QWORD *)this + 50);
      v35 = *((_QWORD *)this + 51);
      *((_QWORD *)this + 50) = (char *)this + 408;
      *(_QWORD *)(v35 + 16) = 0;
      *((_QWORD *)this + 51) = 0;
      *((_QWORD *)this + 52) = 0;
      if (*(_QWORD *)(v34 + 8))
        v36 = *(uint64_t **)(v34 + 8);
      else
        v36 = (uint64_t *)v34;
      v96 = (char *)this + 400;
      v97 = v36;
      v98 = v36;
      if (!v36
        || (v97 = std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::_DetachedTreeCache::__detach_next((uint64_t)v36),
            v31 == (uint64_t *)v32))
      {
        v41 = (char *)v31;
      }
      else
      {
        do
        {
          *((_DWORD *)v36 + 8) = *((_DWORD *)v31 + 8);
          if (v36 != v31)
          {
            std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__tree_node<std::__value_type<std::string,Espresso::blob_numerical_properties>,void *> *,long>>((uint64_t)(v36 + 5), (uint64_t *)v31[5], v31 + 6);
            v36 = v98;
          }
          v37 = *v33;
          v38 = (uint64_t **)((char *)this + 408);
          v39 = (uint64_t **)((char *)this + 408);
          if (*v33)
          {
            do
            {
              while (1)
              {
                v38 = (uint64_t **)v37;
                if (*((_DWORD *)v36 + 8) >= *((_DWORD *)v37 + 8))
                  break;
                v37 = (uint64_t *)*v37;
                v39 = v38;
                if (!*v38)
                  goto LABEL_58;
              }
              v37 = (uint64_t *)v37[1];
            }
            while (v37);
            v39 = v38 + 1;
          }
LABEL_58:
          std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at((uint64_t **)this + 50, (uint64_t)v38, v39, v36);
          v36 = v97;
          v98 = v97;
          if (v97)
            v97 = std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::_DetachedTreeCache::__detach_next((uint64_t)v97);
          v40 = (char *)v31[1];
          if (v40)
          {
            do
            {
              v41 = v40;
              v40 = *(char **)v40;
            }
            while (v40);
          }
          else
          {
            do
            {
              v41 = (char *)v31[2];
              v65 = *(_QWORD *)v41 == (_QWORD)v31;
              v31 = (uint64_t *)v41;
            }
            while (!v65);
          }
          if (!v36)
            break;
          v31 = (uint64_t *)v41;
        }
        while (v41 != v32);
      }
      std::__tree<std::__value_type<Espresso::platform,std::map<std::string,Espresso::blob_numerical_properties>>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,std::map<std::string,Espresso::blob_numerical_properties>>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,std::map<std::string,Espresso::blob_numerical_properties>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v96);
      v31 = (uint64_t *)v41;
    }
    if (v31 != (uint64_t *)v32)
    {
      v42 = (uint64_t **)((char *)this + 408);
      do
      {
        v43 = (uint64_t *)operator new(0x40uLL);
        *((_DWORD *)v43 + 8) = *((_DWORD *)v31 + 8);
        std::map<std::string,Espresso::blob_numerical_properties>::map[abi:ne180100]((uint64_t)(v43 + 5), v31 + 5);
        v44 = *v42;
        v45 = (uint64_t **)((char *)this + 408);
        v46 = (uint64_t **)((char *)this + 408);
        if (*v42)
        {
          do
          {
            while (1)
            {
              v45 = (uint64_t **)v44;
              if (*((_DWORD *)v43 + 8) >= *((_DWORD *)v44 + 8))
                break;
              v44 = (uint64_t *)*v44;
              v46 = v45;
              if (!*v45)
                goto LABEL_78;
            }
            v44 = (uint64_t *)v44[1];
          }
          while (v44);
          v46 = v45 + 1;
        }
LABEL_78:
        std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at((uint64_t **)this + 50, (uint64_t)v45, v46, v43);
        v47 = (char *)v31[1];
        if (v47)
        {
          do
          {
            v48 = v47;
            v47 = *(char **)v47;
          }
          while (v47);
        }
        else
        {
          do
          {
            v48 = (char *)v31[2];
            v65 = *(_QWORD *)v48 == (_QWORD)v31;
            v31 = (uint64_t *)v48;
          }
          while (!v65);
        }
        v31 = (uint64_t *)v48;
      }
      while (v48 != v32);
    }
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)this + 121, *((_QWORD *)a2 + 121), *((_QWORD *)a2 + 122));
    *((_DWORD *)this + 230) = *((_DWORD *)a2 + 230);
    v49 = (uint64_t *)*((_QWORD *)a2 + 113);
    v50 = *((_QWORD *)this + 112);
    if (!v50)
      goto LABEL_92;
    for (i = 0; i != v50; *(_QWORD *)(*((_QWORD *)this + 111) + 8 * i++) = 0)
      ;
    v52 = (uint64_t *)*((_QWORD *)this + 113);
    *((_QWORD *)this + 114) = 0;
    *((_QWORD *)this + 113) = 0;
    if (v52)
    {
      while (v49)
      {
        v53 = v49[2];
        v52[2] = v53;
        v54 = *(_OWORD *)(v49 + 3);
        *((_BYTE *)v52 + 40) = *((_BYTE *)v49 + 40);
        *(_OWORD *)(v52 + 3) = v54;
        v55 = (uint64_t *)*v52;
        v52[1] = v53;
        inserted = std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__node_insert_multi_prepare((uint64_t)this + 888, v53, v52 + 2);
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__node_insert_multi_perform((_QWORD *)this + 111, v52, inserted);
        v49 = (uint64_t *)*v49;
        v52 = v55;
        if (!v55)
          goto LABEL_92;
      }
      do
      {
        v95 = (uint64_t *)*v52;
        operator delete(v52);
        v52 = v95;
      }
      while (v95);
    }
    else
    {
LABEL_92:
      while (v49)
      {
        v57 = operator new(0x30uLL);
        *v57 = 0;
        v58 = *((_OWORD *)v49 + 2);
        *((_OWORD *)v57 + 1) = *((_OWORD *)v49 + 1);
        *((_OWORD *)v57 + 2) = v58;
        v59 = v57[2];
        v57[1] = v59;
        v60 = std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__node_insert_multi_prepare((uint64_t)this + 888, v59, v57 + 2);
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__node_insert_multi_perform((_QWORD *)this + 111, v57, v60);
        v49 = (uint64_t *)*v49;
      }
    }
    *((_DWORD *)this + 288) = *((_DWORD *)a2 + 288);
    std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,void *> *>>((_QWORD *)this + 140, *((_QWORD **)a2 + 142), 0);
    *((_DWORD *)this + 368) = *((_DWORD *)a2 + 368);
    v61 = (uint64_t *)*((_QWORD *)a2 + 182);
    v62 = *((_QWORD *)this + 181);
    if (v62)
    {
      for (j = 0; j != v62; ++j)
        *(_QWORD *)(*((_QWORD *)this + 180) + 8 * j) = 0;
      v64 = *((_QWORD *)this + 182);
      *((_QWORD *)this + 183) = 0;
      *((_QWORD *)this + 182) = 0;
      if (v64)
        v65 = v61 == 0;
      else
        v65 = 1;
      if (v65)
      {
        v66 = (_QWORD *)v64;
      }
      else
      {
        do
        {
          std::string::operator=((std::string *)(v64 + 16), (const std::string *)(v61 + 2));
          std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(v64 + 40), v61[5], v61[6]);
          v66 = *(_QWORD **)v64;
          std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__node_insert_multi((uint64_t)this + 1440, v64);
          v61 = (uint64_t *)*v61;
          if (!v66)
            break;
          v64 = (uint64_t)v66;
        }
        while (v61);
      }
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__deallocate_node(v66);
    }
    for (; v61; v61 = (uint64_t *)*v61)
    {
      v67 = (char *)operator new(0x38uLL);
      v96 = v67;
      v97 = (uint64_t *)((char *)this + 1456);
      LOBYTE(v98) = 0;
      *(_QWORD *)v67 = 0;
      *((_QWORD *)v67 + 1) = 0;
      v68 = std::pair<std::string const,std::shared_ptr<Espresso::blob<float,4>>>::pair[abi:ne180100]((std::string *)(v67 + 16), (__int128 *)v61 + 1);
      LOBYTE(v98) = 1;
      *((_QWORD *)v67 + 1) = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)v68);
      std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__node_insert_multi((uint64_t)this + 1440, (uint64_t)v67);
      v96 = 0;
      std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v96);
    }
  }
  v69 = *((_QWORD *)a2 + 136);
  v70 = *((_QWORD *)a2 + 137);
  if (v70)
  {
    v71 = (unint64_t *)(v70 + 16);
    do
      v72 = __ldxr(v71);
    while (__stxr(v72 + 1, v71));
  }
  *((_QWORD *)this + 136) = v69;
  v73 = (std::__shared_weak_count *)*((_QWORD *)this + 137);
  *((_QWORD *)this + 137) = v70;
  if (v73)
    std::__shared_weak_count::__release_weak(v73);
  if (this == a2)
    return (uint64_t **)std::string::operator=((std::string *)((char *)this + 1024), (const std::string *)((char *)this + 1024));
  *((_DWORD *)this + 270) = *((_DWORD *)a2 + 270);
  v74 = (uint64_t *)*((_QWORD *)a2 + 133);
  v75 = *((_QWORD *)this + 132);
  if (v75)
  {
    for (k = 0; k != v75; ++k)
      *(_QWORD *)(*((_QWORD *)this + 131) + 8 * k) = 0;
    v77 = *((_QWORD *)this + 133);
    *((_QWORD *)this + 134) = 0;
    *((_QWORD *)this + 133) = 0;
    if (v77)
      v78 = v74 == 0;
    else
      v78 = 1;
    if (v78)
    {
      v79 = (_QWORD *)v77;
    }
    else
    {
      do
      {
        std::string::operator=((std::string *)(v77 + 16), (const std::string *)(v74 + 2));
        if ((uint64_t *)v77 != v74)
        {
          *(_DWORD *)(v77 + 72) = *((_DWORD *)v74 + 18);
          std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<unsigned long,void *> *>>((_QWORD *)(v77 + 40), (_QWORD *)v74[7]);
        }
        v79 = *(_QWORD **)v77;
        std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__node_insert_multi((uint64_t)this + 1048, v77);
        v74 = (uint64_t *)*v74;
        if (!v79)
          break;
        v77 = (uint64_t)v79;
      }
      while (v74);
    }
    std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<unsigned long>>>>::__deallocate_node(v79);
  }
  for (; v74; v74 = (uint64_t *)*v74)
  {
    v80 = (char *)operator new(0x50uLL);
    v81 = v80;
    v96 = v80;
    v97 = (uint64_t *)((char *)this + 1064);
    LOBYTE(v98) = 0;
    v82 = v80 + 16;
    *(_QWORD *)v80 = 0;
    *((_QWORD *)v80 + 1) = 0;
    if (*((char *)v74 + 39) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)(v80 + 16), (const std::string::value_type *)v74[2], v74[3]);
    }
    else
    {
      v83 = *((_OWORD *)v74 + 1);
      *((_QWORD *)v80 + 4) = v74[4];
      *v82 = v83;
    }
    *(_OWORD *)(v81 + 40) = 0u;
    *(_OWORD *)(v81 + 56) = 0u;
    *((_DWORD *)v81 + 18) = *((_DWORD *)v74 + 18);
    std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__rehash<true>((uint64_t)(v81 + 40), v74[6]);
    v84 = (_QWORD *)v74[7];
    v85 = (uint64_t)v81;
    if (v84)
    {
      do
      {
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)(v81 + 40), v84 + 2, v84 + 2);
        v84 = (_QWORD *)*v84;
      }
      while (v84);
      v85 = (uint64_t)v96;
    }
    LOBYTE(v98) = 1;
    *((_QWORD *)v81 + 1) = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)v82);
    std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__node_insert_multi((uint64_t)this + 1048, v85);
    v96 = 0;
    std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<unsigned long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<unsigned long>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v96);
  }
  std::string::operator=((std::string *)((char *)this + 1024), (const std::string *)((char *)a2 + 1024));
  *((_DWORD *)this + 254) = *((_DWORD *)a2 + 254);
  v86 = (uint64_t *)*((_QWORD *)a2 + 125);
  v87 = *((_QWORD *)this + 124);
  if (v87)
  {
    for (m = 0; m != v87; ++m)
      *(_QWORD *)(*((_QWORD *)this + 123) + 8 * m) = 0;
    v89 = *((_QWORD *)this + 125);
    *((_QWORD *)this + 126) = 0;
    *((_QWORD *)this + 125) = 0;
    if (v89)
      v90 = v86 == 0;
    else
      v90 = 1;
    if (v90)
    {
      v91 = (_QWORD *)v89;
    }
    else
    {
      do
      {
        std::string::operator=((std::string *)(v89 + 16), (const std::string *)(v86 + 2));
        std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(v89 + 40), v86[5], v86[6]);
        v91 = *(_QWORD **)v89;
        std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__node_insert_multi((uint64_t)this + 984, v89);
        v86 = (uint64_t *)*v86;
        if (!v91)
          break;
        v89 = (uint64_t)v91;
      }
      while (v86);
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__deallocate_node(v91);
  }
  for (; v86; v86 = (uint64_t *)*v86)
  {
    v92 = (char *)operator new(0x38uLL);
    v96 = v92;
    v97 = (uint64_t *)((char *)this + 1000);
    LOBYTE(v98) = 0;
    *(_QWORD *)v92 = 0;
    *((_QWORD *)v92 + 1) = 0;
    v93 = std::pair<std::string const,std::shared_ptr<Espresso::blob<float,4>>>::pair[abi:ne180100]((std::string *)(v92 + 16), (__int128 *)v86 + 1);
    LOBYTE(v98) = 1;
    *((_QWORD *)v92 + 1) = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)v93);
    std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__node_insert_multi((uint64_t)this + 984, (uint64_t)v92);
    v96 = 0;
    std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v96);
  }
  std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)this + 800, *((std::string **)a2 + 100), *((std::string **)a2 + 101), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 101) - *((_QWORD *)a2 + 100)) >> 3));
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,Espresso::layer_shape>,std::__tree_node<std::__value_type<std::string,Espresso::layer_shape>,void *> *,long>>((uint64_t **)this + 103, *((__int128 **)a2 + 103), (__int128 *)a2 + 52);
  return std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,Espresso::net_configuration>,std::__tree_node<std::__value_type<std::string,Espresso::net_configuration>,void *> *,long>>((uint64_t **)this + 97, *((uint64_t **)a2 + 97), (uint64_t *)a2 + 98);
}

void sub_191369E2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__tree<std::__value_type<Espresso::platform,std::map<std::string,Espresso::blob_numerical_properties>>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,std::map<std::string,Espresso::blob_numerical_properties>>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,std::map<std::string,Espresso::blob_numerical_properties>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__tree_node<std::__value_type<std::string,Espresso::blob_numerical_properties>,void *> *,long>>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t **v12;
  uint64_t **v13;
  uint64_t *v14;
  BOOL v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t **v18;
  uint64_t **v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;

  if (*(_QWORD *)(a1 + 16))
  {
    v6 = *(uint64_t **)a1;
    v8 = (uint64_t **)(a1 + 8);
    v7 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)a1 = a1 + 8;
    *(_QWORD *)(v7 + 16) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    if (v6[1])
      v9 = (uint64_t *)v6[1];
    else
      v9 = v6;
    v22 = (uint64_t *)a1;
    v23 = v9;
    v24 = v9;
    if (v9)
    {
      v23 = std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::_DetachedTreeCache::__detach_next((uint64_t)v9);
      if (a2 != a3)
      {
        v10 = a2;
        do
        {
          std::string::operator=((std::string *)(v9 + 4), (const std::string *)(v10 + 4));
          *(_OWORD *)(v9 + 7) = *(_OWORD *)(v10 + 7);
          if (v9 != v10)
            std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)v9 + 72, (char *)v10[9], v10[10], (v10[10] - v10[9]) >> 2);
          v11 = *v8;
          v12 = (uint64_t **)(a1 + 8);
          v13 = (uint64_t **)(a1 + 8);
          if (*v8)
          {
            do
            {
              while (1)
              {
                v12 = (uint64_t **)v11;
                if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v24 + 4, v11 + 4))
                  break;
                v11 = *v12;
                v13 = v12;
                if (!*v12)
                  goto LABEL_16;
              }
              v11 = v12[1];
            }
            while (v11);
            v13 = v12 + 1;
          }
LABEL_16:
          std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v12, v13, v24);
          v9 = v23;
          v24 = v23;
          if (v23)
            v23 = std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::_DetachedTreeCache::__detach_next((uint64_t)v23);
          v14 = (uint64_t *)v10[1];
          if (v14)
          {
            do
            {
              a2 = v14;
              v14 = (uint64_t *)*v14;
            }
            while (v14);
          }
          else
          {
            do
            {
              a2 = (uint64_t *)v10[2];
              v15 = *a2 == (_QWORD)v10;
              v10 = a2;
            }
            while (!v15);
          }
          if (!v9)
            break;
          v10 = a2;
        }
        while (a2 != a3);
      }
    }
    std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v22);
  }
  if (a2 != a3)
  {
    do
    {
      std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__construct_node<std::pair<std::string const,Espresso::blob_numerical_properties> const&>((uint64_t)&v22, a1, (uint64_t)(a2 + 4));
      v16 = v22;
      v17 = *(uint64_t **)(a1 + 8);
      v18 = (uint64_t **)(a1 + 8);
      v19 = (uint64_t **)(a1 + 8);
      if (v17)
      {
        do
        {
          while (1)
          {
            v18 = (uint64_t **)v17;
            if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v16 + 4, v17 + 4))
              break;
            v17 = *v18;
            v19 = v18;
            if (!*v18)
              goto LABEL_33;
          }
          v17 = v18[1];
        }
        while (v17);
        v19 = v18 + 1;
      }
LABEL_33:
      std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v18, v19, v16);
      v22 = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<std::string,Espresso::blob_numerical_properties>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,Espresso::blob_numerical_properties>,void *>>>>::reset[abi:ne180100]((uint64_t)&v22);
      v20 = (uint64_t *)a2[1];
      if (v20)
      {
        do
        {
          v21 = v20;
          v20 = (uint64_t *)*v20;
        }
        while (v20);
      }
      else
      {
        do
        {
          v21 = (uint64_t *)a2[2];
          v15 = *v21 == (_QWORD)a2;
          a2 = v21;
        }
        while (!v15);
      }
      a2 = v21;
    }
    while (v21 != a3);
  }
}

void sub_19136A1B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>(uint64_t **result, __int128 *a2, __int128 *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v9;
  __int128 *v10;
  uint64_t *v11;
  uint64_t **v12;
  uint64_t **v13;
  __int128 *v14;
  BOOL v15;
  __int128 *v16;
  __int128 *v17;
  uint64_t **v18;
  uint64_t *v19;
  uint64_t *v20;

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v8 = result + 1;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v9 = (uint64_t *)v6[1];
    else
      v9 = v6;
    v18 = result;
    v19 = v9;
    v20 = v9;
    if (v9)
    {
      v19 = std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::_DetachedTreeCache::__detach_next((uint64_t)v9);
      if (a2 != a3)
      {
        v10 = a2;
        do
        {
          std::string::operator=((std::string *)(v9 + 4), (const std::string *)(v10 + 2));
          std::string::operator=((std::string *)(v9 + 7), (const std::string *)((char *)v10 + 56));
          v11 = *v8;
          v12 = v5 + 1;
          v13 = v5 + 1;
          if (*v8)
          {
            do
            {
              while (1)
              {
                v12 = (uint64_t **)v11;
                if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v20 + 4, v11 + 4))
                  break;
                v11 = *v12;
                v13 = v12;
                if (!*v12)
                  goto LABEL_14;
              }
              v11 = v12[1];
            }
            while (v11);
            v13 = v12 + 1;
          }
LABEL_14:
          std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at(v5, (uint64_t)v12, v13, v20);
          v9 = v19;
          v20 = v19;
          if (v19)
            v19 = std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::_DetachedTreeCache::__detach_next((uint64_t)v19);
          v14 = (__int128 *)*((_QWORD *)v10 + 1);
          if (v14)
          {
            do
            {
              a2 = v14;
              v14 = *(__int128 **)v14;
            }
            while (v14);
          }
          else
          {
            do
            {
              a2 = (__int128 *)*((_QWORD *)v10 + 2);
              v15 = *(_QWORD *)a2 == (_QWORD)v10;
              v10 = a2;
            }
            while (!v15);
          }
          if (!v9)
            break;
          v10 = a2;
        }
        while (a2 != a3);
      }
    }
    result = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t *)&v18);
  }
  if (a2 != a3)
  {
    do
    {
      result = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_multi<std::pair<std::string const,std::string> const&>((uint64_t)v5, a2 + 2);
      v16 = (__int128 *)*((_QWORD *)a2 + 1);
      if (v16)
      {
        do
        {
          v17 = v16;
          v16 = *(__int128 **)v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          v17 = (__int128 *)*((_QWORD *)a2 + 2);
          v15 = *(_QWORD *)v17 == (_QWORD)a2;
          a2 = v17;
        }
        while (!v15);
      }
      a2 = v17;
    }
    while (v17 != a3);
  }
  return result;
}

void sub_19136A378(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,void *> *>>(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t i;
  uint64_t *v8;
  BOOL v9;
  uint64_t *v10;
  BOOL v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  unsigned int v20;
  _QWORD v21[2];
  char v22;

  v4 = a2;
  v6 = a1[1];
  if (v6)
  {
    for (i = 0; i != v6; ++i)
      *(_QWORD *)(*a1 + 8 * i) = 0;
    v8 = (uint64_t *)a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v8)
      v9 = a2 == a3;
    else
      v9 = 1;
    if (v9)
    {
      v10 = v8;
    }
    else
    {
      do
      {
        v8[2] = v4[2];
        std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v8 + 3, v4[3], v4[4]);
        v10 = (uint64_t *)*v8;
        std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::__node_insert_multi(a1, v8);
        v4 = (_QWORD *)*v4;
        if (v10)
          v11 = v4 == a3;
        else
          v11 = 1;
        v8 = v10;
      }
      while (!v11);
    }
    std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::__deallocate_node((int)a1, v10);
  }
  for (; v4 != a3; v4 = (_QWORD *)*v4)
  {
    v12 = (uint64_t *)operator new(0x28uLL);
    v21[0] = v12;
    v21[1] = a1 + 2;
    *v12 = 0;
    v12[1] = 0;
    v13 = v4[2];
    v12[2] = v13;
    v12[3] = v4[3];
    v14 = v4[4];
    v12[4] = v14;
    if (v14)
    {
      v15 = (unint64_t *)(v14 + 8);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
      v13 = v12[2];
    }
    v22 = 1;
    v17 = *(_QWORD *)(v13 + 8);
    if (v17 < 0)
    {
      v18 = (unsigned __int8 *)(v17 & 0x7FFFFFFFFFFFFFFFLL);
      v19 = 5381;
      do
      {
        v17 = v19;
        v20 = *v18++;
        v19 = (33 * v19) ^ v20;
      }
      while (v20);
    }
    v12[1] = v17;
    std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::__node_insert_multi(a1, v12);
    v21[0] = 0;
    std::unique_ptr<std::__hash_node<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,void *>>>>::reset[abi:ne180100]((uint64_t)v21);
  }
}

void sub_19136A4EC(void *a1)
{
  int v1;
  _QWORD *v2;

  __cxa_begin_catch(a1);
  std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::__deallocate_node(v1, v2);
  __cxa_rethrow();
}

void sub_19136A504(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,Espresso::net_configuration>,std::__tree_node<std::__value_type<std::string,Espresso::net_configuration>,void *> *,long>>(uint64_t **result, uint64_t *a2, uint64_t *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t **v12;
  uint64_t **v13;
  uint64_t *v14;
  BOOL v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t **v18;
  uint64_t *v19;
  uint64_t *v20;

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v8 = result + 1;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v9 = (uint64_t *)v6[1];
    else
      v9 = v6;
    v18 = result;
    v19 = v9;
    v20 = v9;
    if (v9)
    {
      v19 = std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::_DetachedTreeCache::__detach_next((uint64_t)v9);
      if (a2 != a3)
      {
        v10 = a2;
        do
        {
          std::string::operator=((std::string *)(v9 + 4), (const std::string *)(v10 + 4));
          if (v9 != v10)
          {
            std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)(v9 + 7), (std::string *)v10[7], (std::string *)v10[8], 0xAAAAAAAAAAAAAAABLL * ((v10[8] - v10[7]) >> 3));
            std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,Espresso::layer_shape>,std::__tree_node<std::__value_type<std::string,Espresso::layer_shape>,void *> *,long>>((uint64_t **)v9 + 10, (__int128 *)v10[10], (__int128 *)(v10 + 11));
          }
          v11 = *v8;
          v12 = v5 + 1;
          v13 = v5 + 1;
          if (*v8)
          {
            do
            {
              while (1)
              {
                v12 = (uint64_t **)v11;
                if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v20 + 4, v11 + 4))
                  break;
                v11 = *v12;
                v13 = v12;
                if (!*v12)
                  goto LABEL_16;
              }
              v11 = v12[1];
            }
            while (v11);
            v13 = v12 + 1;
          }
LABEL_16:
          std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at(v5, (uint64_t)v12, v13, v20);
          v9 = v19;
          v20 = v19;
          if (v19)
            v19 = std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::_DetachedTreeCache::__detach_next((uint64_t)v19);
          v14 = (uint64_t *)v10[1];
          if (v14)
          {
            do
            {
              a2 = v14;
              v14 = (uint64_t *)*v14;
            }
            while (v14);
          }
          else
          {
            do
            {
              a2 = (uint64_t *)v10[2];
              v15 = *a2 == (_QWORD)v10;
              v10 = a2;
            }
            while (!v15);
          }
          if (!v9)
            break;
          v10 = a2;
        }
        while (a2 != a3);
      }
    }
    result = (uint64_t **)std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v18);
  }
  if (a2 != a3)
  {
    do
    {
      result = (uint64_t **)std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::__emplace_multi<std::pair<std::string const,Espresso::net_configuration> const&>((uint64_t)v5, (uint64_t)(a2 + 4));
      v16 = (uint64_t *)a2[1];
      if (v16)
      {
        do
        {
          v17 = v16;
          v16 = (uint64_t *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          v17 = (uint64_t *)a2[2];
          v15 = *v17 == (_QWORD)a2;
          a2 = v17;
        }
        while (!v15);
      }
      a2 = v17;
    }
    while (v17 != a3);
  }
  return result;
}

void sub_19136A704(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::destroy(*(_QWORD *)a1, *(char **)(a1 + 16));
  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 16);
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = *(_QWORD *)(v3 + 16);
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::destroy(*(_QWORD *)a1, (char *)v2);
  }
  return a1;
}

uint64_t *std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::__emplace_multi<std::pair<std::string const,Espresso::net_configuration> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t **v5;
  uint64_t **v6;
  _QWORD v8[3];

  std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::__construct_node<std::pair<std::string const,Espresso::net_configuration> const&>((uint64_t)v8, a1, a2);
  v3 = (uint64_t *)v8[0];
  v5 = (uint64_t **)(a1 + 8);
  v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v5 = (uint64_t **)v4;
        if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3 + 4, v4 + 4))
          break;
        v4 = *v5;
        v6 = v5;
        if (!*v5)
          goto LABEL_8;
      }
      v4 = v5[1];
    }
    while (v4);
    v6 = v5 + 1;
  }
  else
  {
    v6 = (uint64_t **)(a1 + 8);
  }
LABEL_8:
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v5, v6, v3);
  v8[0] = 0;
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,Espresso::net_configuration>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,Espresso::net_configuration>,void *>>>>::reset[abi:ne180100]((uint64_t)v8);
  return v3;
}

uint64_t std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::__construct_node<std::pair<std::string const,Espresso::net_configuration> const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  uint64_t result;

  v5 = a2 + 8;
  v6 = (char *)operator new(0x68uLL);
  v7 = v6;
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = 0;
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v6 + 32), *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *((_OWORD *)v6 + 2) = *(_OWORD *)a3;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a3 + 16);
  }
  v7[7] = 0;
  v7[8] = 0;
  v7[9] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v7 + 7, *(_QWORD *)(a3 + 24), *(_QWORD *)(a3 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 32) - *(_QWORD *)(a3 + 24)) >> 3));
  result = std::map<std::string,Espresso::layer_shape>::map[abi:ne180100]((uint64_t)(v7 + 10), (__int128 **)(a3 + 48));
  *(_BYTE *)(a1 + 16) = 1;
  return result;
}

void sub_19136A8D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,Espresso::net_configuration>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,Espresso::net_configuration>,void *>>>>::reset[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,Espresso::net_configuration>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,Espresso::net_configuration>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,Espresso::net_configuration>,0>((uint64_t)v1 + 32);
    operator delete(v1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,Espresso::net_configuration>,0>(uint64_t a1)
{
  void **v2;
  void **v3;

  v2 = (void **)(a1 + 24);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy(a1 + 48, *(char **)(a1 + 56));
  v3 = v2;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t std::pair<std::string &,Espresso::layer_shape &>::operator=[abi:ne180100]<std::string const,Espresso::layer_shape,(void *)0>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;

  std::string::operator=(*(std::string **)a1, (const std::string *)a2);
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_OWORD *)(a2 + 40);
  v6 = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(v4 + 32) = *(_QWORD *)(a2 + 56);
  *(_OWORD *)v4 = v6;
  *(_OWORD *)(v4 + 16) = v5;
  if (v4 != a2 + 24)
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)(v4 + 40), *(char **)(a2 + 64), *(_QWORD *)(a2 + 72), (uint64_t)(*(_QWORD *)(a2 + 72) - *(_QWORD *)(a2 + 64)) >> 2);
  return a1;
}

uint64_t std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy(*(_QWORD *)a1, *(char **)(a1 + 16));
  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 16);
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = *(_QWORD *)(v3 + 16);
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy(*(_QWORD *)a1, (char *)v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<unsigned long>>>>::__deallocate_node(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  if (a1)
  {
    v1 = a1;
    do
    {
      v2 = (_QWORD *)*v1;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_set<unsigned long>>,0>((uint64_t)(v1 + 2));
      operator delete(v1);
      v1 = v2;
    }
    while (v2);
  }
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<unsigned long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<unsigned long>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_set<unsigned long>>,0>((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_set<unsigned long>>,0>(uint64_t a1)
{
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](a1 + 24);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<unsigned long,void *> *>>(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t i;
  _QWORD *v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *inserted;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;

  v4 = a1[1];
  if (!v4)
    goto LABEL_9;
  for (i = 0; i != v4; *(_QWORD *)(*a1 + 8 * i++) = 0)
    ;
  v6 = (_QWORD *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v6)
  {
    while (a2)
    {
      v7 = a2[2];
      v6[2] = v7;
      v8 = (_QWORD *)*v6;
      v6[1] = v7;
      inserted = std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__node_insert_multi_prepare((uint64_t)a1, v7, v6 + 2);
      std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__node_insert_multi_perform(a1, v6, inserted);
      a2 = (_QWORD *)*a2;
      v6 = v8;
      if (!v8)
        goto LABEL_9;
    }
    do
    {
      v13 = (_QWORD *)*v6;
      operator delete(v6);
      v6 = v13;
    }
    while (v13);
  }
  else
  {
LABEL_9:
    while (a2)
    {
      v10 = operator new(0x18uLL);
      *v10 = 0;
      v11 = a2[2];
      v10[2] = v11;
      v10[1] = v11;
      v12 = std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__node_insert_multi_prepare((uint64_t)a1, v11, v10 + 2);
      std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__node_insert_multi_perform(a1, v10, v12);
      a2 = (_QWORD *)*a2;
    }
  }
}

void sub_19136AC10(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  __cxa_begin_catch(a1);
  do
  {
    v2 = (_QWORD *)*v1;
    operator delete(v1);
    v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_19136AC30(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__node_insert_multi_prepare(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v6;
  float v7;
  float v8;
  _BOOL8 v9;
  unint64_t v10;
  unint64_t v11;
  int8x8_t prime;
  void *v13;
  void *v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  uint8x8_t v18;
  unint64_t v19;
  uint8x8_t v20;
  uint64_t v21;
  _QWORD *i;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint8x8_t v26;
  unint64_t v27;
  _QWORD *v28;
  int v29;
  _QWORD *result;
  unint64_t v31;
  unint64_t v32;
  _BOOL4 v33;
  int v34;
  void *v35;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v8 = *(float *)(a1 + 32);
  if (!v6 || (float)(v8 * (float)v6) < v7)
  {
    v9 = 1;
    if (v6 >= 3)
      v9 = (v6 & (v6 - 1)) != 0;
    v10 = v9 | (2 * v6);
    v11 = vcvtps_u32_f32(v7 / v8);
    if (v10 <= v11)
      prime = (int8x8_t)v11;
    else
      prime = (int8x8_t)v10;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v6 = *(_QWORD *)(a1 + 8);
    }
    if (*(_QWORD *)&prime > v6)
      goto LABEL_74;
    if (*(_QWORD *)&prime >= v6)
      goto LABEL_43;
    v19 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v6 < 3 || (v20 = (uint8x8_t)vcnt_s8((int8x8_t)v6), v20.i16[0] = vaddlv_u8(v20), v20.u32[0] > 1uLL))
    {
      v19 = std::__next_prime(v19);
    }
    else
    {
      v21 = 1 << -(char)__clz(v19 - 1);
      if (v19 >= 2)
        v19 = v21;
    }
    if (*(_QWORD *)&prime <= v19)
      prime = (int8x8_t)v19;
    if (*(_QWORD *)&prime >= v6)
    {
      v6 = *(_QWORD *)(a1 + 8);
      goto LABEL_43;
    }
    if (prime)
    {
LABEL_74:
      if (*(_QWORD *)&prime >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v13 = operator new(8 * *(_QWORD *)&prime);
      v14 = *(void **)a1;
      *(_QWORD *)a1 = v13;
      if (v14)
        operator delete(v14);
      v15 = 0;
      *(int8x8_t *)(a1 + 8) = prime;
      do
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v15++) = 0;
      while (*(_QWORD *)&prime != v15);
      v16 = *(_QWORD **)(a1 + 16);
      if (v16)
      {
        v17 = v16[1];
        v18 = (uint8x8_t)vcnt_s8(prime);
        v18.i16[0] = vaddlv_u8(v18);
        if (v18.u32[0] > 1uLL)
        {
          if (v17 >= *(_QWORD *)&prime)
            v17 %= *(_QWORD *)&prime;
        }
        else
        {
          v17 &= *(_QWORD *)&prime - 1;
        }
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v17) = a1 + 16;
        for (i = (_QWORD *)*v16; *v16; i = (_QWORD *)*v16)
        {
          v23 = i[1];
          if (v18.u32[0] > 1uLL)
          {
            if (v23 >= *(_QWORD *)&prime)
              v23 %= *(_QWORD *)&prime;
          }
          else
          {
            v23 &= *(_QWORD *)&prime - 1;
          }
          if (v23 == v17)
          {
            v16 = i;
          }
          else
          {
            v24 = i;
            if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v23))
            {
              do
              {
                v25 = v24;
                v24 = (_QWORD *)*v24;
              }
              while (v24 && i[2] == v24[2]);
              *v16 = v24;
              *v25 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v23);
              **(_QWORD **)(*(_QWORD *)a1 + 8 * v23) = i;
            }
            else
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v16;
              v16 = i;
              v17 = v23;
            }
          }
        }
      }
      v6 = (unint64_t)prime;
    }
    else
    {
      v35 = *(void **)a1;
      *(_QWORD *)a1 = 0;
      if (v35)
        operator delete(v35);
      v6 = 0;
      *(_QWORD *)(a1 + 8) = 0;
    }
  }
LABEL_43:
  v26 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v26.i16[0] = vaddlv_u8(v26);
  if (v26.u32[0] > 1uLL)
  {
    v27 = a2;
    if (v6 <= a2)
      v27 = a2 % v6;
  }
  else
  {
    v27 = (v6 - 1) & a2;
  }
  v28 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v27);
  if (!v28)
    return 0;
  v29 = 0;
  do
  {
    result = v28;
    v28 = (_QWORD *)*v28;
    if (!v28)
      break;
    v31 = v28[1];
    if (v26.u32[0] > 1uLL)
    {
      v32 = v28[1];
      if (v31 >= v6)
        v32 = v31 % v6;
    }
    else
    {
      v32 = v31 & (v6 - 1);
    }
    if (v32 != v27)
      break;
    v33 = v31 == a2 && v28[2] == *a3;
    v34 = v29 & !v33;
    v29 |= v33;
  }
  while (v34 != 1);
  return result;
}

_QWORD *std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__node_insert_multi_perform(_QWORD *result, _QWORD *a2, _QWORD *a3)
{
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  unint64_t v6;

  v3 = (int8x8_t)result[1];
  v4 = a2[1];
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(_QWORD *)&v3)
      v4 %= *(_QWORD *)&v3;
  }
  else
  {
    v4 &= *(_QWORD *)&v3 - 1;
  }
  if (!a3)
  {
    *a2 = result[2];
    result[2] = a2;
    *(_QWORD *)(*result + 8 * v4) = result + 2;
    if (!*a2)
      goto LABEL_19;
    v6 = *(_QWORD *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(_QWORD *)&v3)
        v6 %= *(_QWORD *)&v3;
    }
    else
    {
      v6 &= *(_QWORD *)&v3 - 1;
    }
LABEL_18:
    *(_QWORD *)(*result + 8 * v6) = a2;
    goto LABEL_19;
  }
  *a2 = *a3;
  *a3 = a2;
  if (*a2)
  {
    v6 = *(_QWORD *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(_QWORD *)&v3)
        v6 %= *(_QWORD *)&v3;
    }
    else
    {
      v6 &= *(_QWORD *)&v3 - 1;
    }
    if (v6 != v4)
      goto LABEL_18;
  }
LABEL_19:
  ++result[3];
  return result;
}

void std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::__do_rehash<false>(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  void *v11;
  _QWORD *v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;

  if (a2)
  {
    if (a2 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(_QWORD **)(a1 + 16);
    if (v7)
    {
      v8 = v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      v10 = v9.u32[0];
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
      v12 = (_QWORD *)*v7;
      if (*v7)
      {
        v18 = v9.u32[0];
        do
        {
          v13 = v12[1];
          if (v10 > 1)
          {
            if (v13 >= a2)
              v13 %= a2;
          }
          else
          {
            v13 &= a2 - 1;
          }
          if (v13 == v8)
          {
            v7 = v12;
          }
          else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v13))
          {
            v14 = (_QWORD *)*v12;
            if (*v12)
            {
              v15 = *(_QWORD *)(v12[2] + 8);
              v16 = v12;
              while (1)
              {
                v17 = v14;
                if (!std::type_info::operator==[abi:ne180100](v15, *(_QWORD *)(v14[2] + 8)))
                  break;
                v14 = (_QWORD *)*v17;
                v16 = v17;
                if (!*v17)
                  goto LABEL_32;
              }
              v14 = v17;
              v17 = v16;
LABEL_32:
              v10 = v18;
            }
            else
            {
              v17 = v12;
            }
            *v7 = v14;
            *v17 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v13);
            **(_QWORD **)(*(_QWORD *)a1 + 8 * v13) = v12;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v13) = v7;
            v7 = v12;
            v8 = v13;
          }
          v12 = (_QWORD *)*v7;
        }
        while (*v7);
      }
    }
  }
  else
  {
    v11 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v11)
      operator delete(v11);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

uint64_t std::__tree<std::__value_type<Espresso::platform,std::map<std::string,Espresso::blob_numerical_properties>>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,std::map<std::string,Espresso::blob_numerical_properties>>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,std::map<std::string,Espresso::blob_numerical_properties>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  std::__tree<std::__value_type<Espresso::platform,std::map<std::string,Espresso::blob_numerical_properties>>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,std::map<std::string,Espresso::blob_numerical_properties>>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,std::map<std::string,Espresso::blob_numerical_properties>>>>::destroy(*(_QWORD **)(a1 + 16));
  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v3 = (_QWORD *)v2[2];
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = (_QWORD *)v3[2];
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<Espresso::platform,std::map<std::string,Espresso::blob_numerical_properties>>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,std::map<std::string,Espresso::blob_numerical_properties>>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,std::map<std::string,Espresso::blob_numerical_properties>>>>::destroy(v2);
  }
  return a1;
}

void std::__tree<std::__value_type<Espresso::platform,std::map<std::string,Espresso::blob_numerical_properties>>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,std::map<std::string,Espresso::blob_numerical_properties>>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,std::map<std::string,Espresso::blob_numerical_properties>>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<Espresso::platform,std::map<std::string,Espresso::blob_numerical_properties>>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,std::map<std::string,Espresso::blob_numerical_properties>>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,std::map<std::string,Espresso::blob_numerical_properties>>>>::destroy(*a1);
    std::__tree<std::__value_type<Espresso::platform,std::map<std::string,Espresso::blob_numerical_properties>>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,std::map<std::string,Espresso::blob_numerical_properties>>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,std::map<std::string,Espresso::blob_numerical_properties>>>>::destroy(a1[1]);
    std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::destroy((_QWORD *)a1[6]);
    operator delete(a1);
  }
}

uint64_t *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*a1, a1[2]);
  v2 = a1[1];
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 16);
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = *(_QWORD *)(v3 + 16);
      }
      while (v3);
      a1[1] = v2;
    }
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*a1, v2);
  }
  return a1;
}

uint64_t std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_multi<std::pair<std::string const,std::string> const&>(uint64_t a1, __int128 *a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t **v5;
  uint64_t **v6;
  uint64_t v7;
  _QWORD v9[3];

  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::pair<std::string const,std::string> const&>(a1, a2, (uint64_t)v9);
  v3 = (uint64_t *)v9[0];
  v5 = (uint64_t **)(a1 + 8);
  v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v5 = (uint64_t **)v4;
        if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3 + 4, v4 + 4))
          break;
        v4 = *v5;
        v6 = v5;
        if (!*v5)
          goto LABEL_8;
      }
      v4 = v5[1];
    }
    while (v4);
    v6 = v5 + 1;
  }
  else
  {
    v6 = (uint64_t **)(a1 + 8);
  }
LABEL_8:
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v5, v6, v3);
  v7 = v9[0];
  v9[0] = 0;
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v9);
  return v7;
}

std::string *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::pair<std::string const,std::string> const&>@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x50uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = std::pair<std::string const,std::string>::pair[abi:ne180100]((std::string *)(v6 + 32), a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_19136B428(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::destroy(*(_QWORD **)(a1 + 16));
  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v3 = (_QWORD *)v2[2];
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = (_QWORD *)v3[2];
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::destroy(v2);
  }
  return a1;
}

uint64_t std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::destroy(*(char **)(a1 + 16));
  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 16);
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = *(_QWORD *)(v3 + 16);
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::destroy((char *)v2);
  }
  return a1;
}

void Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(void **this)
{
  if (*((char *)this + 39) < 0)
    operator delete(this[2]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this);
}

void Espresso::kernels_validation_status_t::save(Espresso::kernels_validation_status_t *this@<X0>, uint64_t *a2@<X8>)
{
  _DWORD *v2;
  _DWORD *i;
  void *v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _OWORD *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  char *v26;
  __int128 v27;
  int64x2_t v28;
  char *v29;
  unint64_t *v30;
  unint64_t v31;
  _DWORD *v32;
  _DWORD *j;
  void *v34;
  void *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  _OWORD *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  unint64_t *v52;
  unint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  char *v56;
  __int128 v57;
  int64x2_t v58;
  char *v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  _QWORD *v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  void *v73;
  int64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  char *v86;
  __int128 v87;
  int64x2_t v88;
  char *v89;
  unint64_t *v90;
  unint64_t v91;
  void *v92;
  uint64_t v93;
  int v96;
  void *v97[2];
  char v98;
  __int128 v99;
  void *__p[2];
  char *v101;
  int64x2_t v102;
  char *v103;
  int64x2_t v104;
  char *v105;
  void **v106;
  int64x2_t v107;
  char *v108;
  void **v109;

  v104 = 0uLL;
  v105 = 0;
  v102 = 0uLL;
  v103 = 0;
  v2 = (_DWORD *)*((_QWORD *)this + 3);
  for (i = (_DWORD *)*((_QWORD *)this + 4); v2 != i; ++v2)
  {
    LODWORD(v99) = *v2;
    v4 = Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::shared();
    std::string::basic_string[abi:ne180100]<0>(&v106, "json");
    Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::make(v97, (uint64_t)v4, &v106);
    if (v107.i8[15] < 0)
      operator delete(v106);
    v5 = v97[0];
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    Espresso::SerDes::generic_serdes_object::operator[]((uint64_t)v5, (uint64_t)__p, &v106);
    (*((void (**)(void **, __int8 *, __int128 *))*v106 + 20))(v106, &v107.i8[8], &v99);
    if (SHIBYTE(v109) < 0)
      operator delete((void *)v107.i64[1]);
    v6 = (std::__shared_weak_count *)v107.i64[0];
    if (v107.i64[0])
    {
      v7 = (unint64_t *)(v107.i64[0] + 8);
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    if (SHIBYTE(v101) < 0)
      operator delete(__p[0]);
    v9 = v104.i64[1];
    if (v104.i64[1] >= (unint64_t)v105)
    {
      v14 = (v104.i64[1] - v104.i64[0]) >> 4;
      v15 = v14 + 1;
      if ((unint64_t)(v14 + 1) >> 60)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v16 = (uint64_t)&v105[-v104.i64[0]];
      if ((uint64_t)&v105[-v104.i64[0]] >> 3 > v15)
        v15 = v16 >> 3;
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0)
        v17 = 0xFFFFFFFFFFFFFFFLL;
      else
        v17 = v15;
      v109 = (void **)&v105;
      v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v17);
      v20 = &v18[16 * v14];
      v21 = (char *)v97[1];
      *(_OWORD *)v20 = *(_OWORD *)v97;
      if (v21)
      {
        v22 = (unint64_t *)(v21 + 8);
        do
          v23 = __ldxr(v22);
        while (__stxr(v23 + 1, v22));
      }
      v24 = (_QWORD *)v104.i64[1];
      v25 = (_QWORD *)v104.i64[0];
      if (v104.i64[1] == v104.i64[0])
      {
        v28 = vdupq_n_s64(v104.u64[1]);
        v26 = &v18[16 * v14];
      }
      else
      {
        v26 = &v18[16 * v14];
        do
        {
          v27 = *((_OWORD *)v24 - 1);
          v24 -= 2;
          *((_OWORD *)v26 - 1) = v27;
          v26 -= 16;
          *v24 = 0;
          v24[1] = 0;
        }
        while (v24 != v25);
        v28 = v104;
      }
      v13 = v20 + 16;
      v104.i64[0] = (uint64_t)v26;
      v104.i64[1] = (uint64_t)(v20 + 16);
      v107 = v28;
      v29 = v105;
      v105 = &v18[16 * v19];
      v108 = v29;
      v106 = (void **)v28.i64[0];
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v106);
      v10 = (std::__shared_weak_count *)v97[1];
    }
    else
    {
      *(_QWORD *)v104.i64[1] = v97[0];
      v10 = (std::__shared_weak_count *)v97[1];
      *(void **)(v9 + 8) = v97[1];
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldxr(p_shared_owners);
        while (__stxr(v12 + 1, p_shared_owners));
      }
      v13 = (_OWORD *)(v9 + 16);
    }
    v104.i64[1] = (uint64_t)v13;
    if (v10)
    {
      v30 = (unint64_t *)&v10->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
  v32 = (_DWORD *)*((_QWORD *)this + 6);
  for (j = (_DWORD *)*((_QWORD *)this + 7); v32 != j; ++v32)
  {
    LODWORD(v99) = 0;
    LODWORD(v99) = *v32;
    v34 = Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::shared();
    std::string::basic_string[abi:ne180100]<0>(&v106, "json");
    Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::make(v97, (uint64_t)v34, &v106);
    if (v107.i8[15] < 0)
      operator delete(v106);
    v35 = v97[0];
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    Espresso::SerDes::generic_serdes_object::operator[]((uint64_t)v35, (uint64_t)__p, &v106);
    (*((void (**)(void **, __int8 *, __int128 *))*v106 + 20))(v106, &v107.i8[8], &v99);
    if (SHIBYTE(v109) < 0)
      operator delete((void *)v107.i64[1]);
    v36 = (std::__shared_weak_count *)v107.i64[0];
    if (v107.i64[0])
    {
      v37 = (unint64_t *)(v107.i64[0] + 8);
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
    if (SHIBYTE(v101) < 0)
      operator delete(__p[0]);
    v39 = v102.i64[1];
    if (v102.i64[1] >= (unint64_t)v103)
    {
      v44 = (v102.i64[1] - v102.i64[0]) >> 4;
      v45 = v44 + 1;
      if ((unint64_t)(v44 + 1) >> 60)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v46 = (uint64_t)&v103[-v102.i64[0]];
      if ((uint64_t)&v103[-v102.i64[0]] >> 3 > v45)
        v45 = v46 >> 3;
      if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF0)
        v47 = 0xFFFFFFFFFFFFFFFLL;
      else
        v47 = v45;
      v109 = (void **)&v103;
      v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v47);
      v50 = &v48[16 * v44];
      v51 = (char *)v97[1];
      *(_OWORD *)v50 = *(_OWORD *)v97;
      if (v51)
      {
        v52 = (unint64_t *)(v51 + 8);
        do
          v53 = __ldxr(v52);
        while (__stxr(v53 + 1, v52));
      }
      v54 = (_QWORD *)v102.i64[1];
      v55 = (_QWORD *)v102.i64[0];
      if (v102.i64[1] == v102.i64[0])
      {
        v58 = vdupq_n_s64(v102.u64[1]);
        v56 = &v48[16 * v44];
      }
      else
      {
        v56 = &v48[16 * v44];
        do
        {
          v57 = *((_OWORD *)v54 - 1);
          v54 -= 2;
          *((_OWORD *)v56 - 1) = v57;
          v56 -= 16;
          *v54 = 0;
          v54[1] = 0;
        }
        while (v54 != v55);
        v58 = v102;
      }
      v43 = v50 + 16;
      v102.i64[0] = (uint64_t)v56;
      v102.i64[1] = (uint64_t)(v50 + 16);
      v107 = v58;
      v59 = v103;
      v103 = &v48[16 * v49];
      v108 = v59;
      v106 = (void **)v58.i64[0];
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v106);
      v40 = (std::__shared_weak_count *)v97[1];
    }
    else
    {
      *(_QWORD *)v102.i64[1] = v97[0];
      v40 = (std::__shared_weak_count *)v97[1];
      *(void **)(v39 + 8) = v97[1];
      if (v40)
      {
        v41 = (unint64_t *)&v40->__shared_owners_;
        do
          v42 = __ldxr(v41);
        while (__stxr(v42 + 1, v41));
      }
      v43 = (_OWORD *)(v39 + 16);
    }
    v102.i64[1] = (uint64_t)v43;
    if (v40)
    {
      v60 = (unint64_t *)&v40->__shared_owners_;
      do
        v61 = __ldaxr(v60);
      while (__stlxr(v61 - 1, v60));
      if (!v61)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
  }
  __p[0] = 0;
  __p[1] = 0;
  v101 = 0;
  v62 = *(_QWORD *)this;
  v63 = *((_QWORD *)this + 1);
  if (*(_QWORD *)this != v63)
  {
    do
    {
      if (!*(_BYTE *)(v62 + 104))
      {
        v64 = Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::shared();
        std::string::basic_string[abi:ne180100]<0>(&v106, "json");
        Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::make(&v99, (uint64_t)v64, &v106);
        if (v107.i8[15] < 0)
          operator delete(v106);
        v65 = v99;
        std::string::basic_string[abi:ne180100]<0>(v97, "");
        Espresso::SerDes::generic_serdes_object::operator[](v65, (uint64_t)v97, &v106);
        v96 = *(_QWORD *)(v62 + 96);
        (*((void (**)(void **, __int8 *, int *))*v106 + 20))(v106, &v107.i8[8], &v96);
        if (SHIBYTE(v109) < 0)
          operator delete((void *)v107.i64[1]);
        v66 = (std::__shared_weak_count *)v107.i64[0];
        if (v107.i64[0])
        {
          v67 = (unint64_t *)(v107.i64[0] + 8);
          do
            v68 = __ldaxr(v67);
          while (__stlxr(v68 - 1, v67));
          if (!v68)
          {
            ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
            std::__shared_weak_count::__release_weak(v66);
          }
        }
        if (v98 < 0)
          operator delete(v97[0]);
        v69 = __p[1];
        if (__p[1] >= v101)
        {
          v74 = ((char *)__p[1] - (char *)__p[0]) >> 4;
          v75 = v74 + 1;
          if ((unint64_t)(v74 + 1) >> 60)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v76 = v101 - (char *)__p[0];
          if ((v101 - (char *)__p[0]) >> 3 > v75)
            v75 = v76 >> 3;
          if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFF0)
            v77 = 0xFFFFFFFFFFFFFFFLL;
          else
            v77 = v75;
          v109 = (void **)&v101;
          v78 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v77);
          v80 = &v78[16 * v74];
          v81 = *((_QWORD *)&v99 + 1);
          *(_OWORD *)v80 = v99;
          if (v81)
          {
            v82 = (unint64_t *)(v81 + 8);
            do
              v83 = __ldxr(v82);
            while (__stxr(v83 + 1, v82));
          }
          v85 = __p[0];
          v84 = __p[1];
          if (__p[1] == __p[0])
          {
            v88 = vdupq_n_s64((unint64_t)__p[1]);
            v86 = &v78[16 * v74];
          }
          else
          {
            v86 = &v78[16 * v74];
            do
            {
              v87 = *((_OWORD *)v84 - 1);
              v84 -= 2;
              *((_OWORD *)v86 - 1) = v87;
              v86 -= 16;
              *v84 = 0;
              v84[1] = 0;
            }
            while (v84 != v85);
            v88 = *(int64x2_t *)__p;
          }
          v73 = v80 + 16;
          __p[0] = v86;
          __p[1] = v80 + 16;
          v107 = v88;
          v89 = v101;
          v101 = &v78[16 * v79];
          v108 = v89;
          v106 = (void **)v88.i64[0];
          std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v106);
          v70 = (std::__shared_weak_count *)*((_QWORD *)&v99 + 1);
        }
        else
        {
          *(_QWORD *)__p[1] = v99;
          v70 = (std::__shared_weak_count *)*((_QWORD *)&v99 + 1);
          v69[1] = *((_QWORD *)&v99 + 1);
          if (v70)
          {
            v71 = (unint64_t *)&v70->__shared_owners_;
            do
              v72 = __ldxr(v71);
            while (__stxr(v72 + 1, v71));
          }
          v73 = v69 + 2;
        }
        __p[1] = v73;
        if (v70)
        {
          v90 = (unint64_t *)&v70->__shared_owners_;
          do
            v91 = __ldaxr(v90);
          while (__stlxr(v91 - 1, v90));
          if (!v91)
          {
            ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
            std::__shared_weak_count::__release_weak(v70);
          }
        }
      }
      v62 += 112;
    }
    while (v62 != v63);
  }
  v92 = Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::shared();
  std::string::basic_string[abi:ne180100]<0>(&v106, "json");
  Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::make(a2, (uint64_t)v92, &v106);
  if (v107.i8[15] < 0)
    operator delete(v106);
  v93 = *a2;
  std::string::basic_string[abi:ne180100]<0>(&v106, "unsupported");
  (*(void (**)(uint64_t, void ***, void **))(*(_QWORD *)v93 + 248))(v93, &v106, __p);
  if (v107.i8[15] < 0)
    operator delete(v106);
  std::string::basic_string[abi:ne180100]<0>(&v106, "to_fallback");
  (*(void (**)(uint64_t, void ***, int64x2_t *))(*(_QWORD *)v93 + 248))(v93, &v106, &v102);
  if (v107.i8[15] < 0)
    operator delete(v106);
  std::string::basic_string[abi:ne180100]<0>(&v106, "visit_order");
  (*(void (**)(uint64_t, void ***, int64x2_t *))(*(_QWORD *)v93 + 248))(v93, &v106, &v104);
  if (v107.i8[15] < 0)
    operator delete(v106);
  std::string::basic_string[abi:ne180100]<0>(&v106, "any_fallback");
  LODWORD(v97[0]) = *((unsigned __int8 *)this + 120);
  (*(void (**)(uint64_t, void ***, void **))(*(_QWORD *)v93 + 160))(v93, &v106, v97);
  if (v107.i8[15] < 0)
    operator delete(v106);
  v106 = __p;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v106);
  v106 = (void **)&v102;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v106);
  v106 = (void **)&v104;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v106);
}

void sub_19136BDB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char ***__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,char **a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,char *a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33;
  uint64_t v34;

  if (*(char *)(v34 - 113) < 0)
    operator delete(*(void **)(v33 + 24));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a10);
  __p = &a22;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  a22 = &a29;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
  a29 = &a33;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a29);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::kernels_validation_status_t>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBDC08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::kernels_validation_status_t>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBDC08;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::vector<Espresso::base_kernel::validate_for_engine_warning_t>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 112;
        std::allocator<Espresso::base_kernel::validate_for_engine_warning_t>::destroy[abi:ne180100](v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<Espresso::base_kernel::validate_for_engine_warning_t>::destroy[abi:ne180100](uint64_t a1)
{
  void **v2;
  void **v3;

  v2 = (void **)(a1 + 24);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 72);
  v3 = (void **)(a1 + 48);
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = v2;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void Espresso::net::save_precompilation_info(Espresso::net *this@<X0>, uint64_t *a2@<X8>)
{
  void *v4;
  Espresso::kernels_validation_status_t *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  char *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  void *__p[2];
  char v19;
  uint64_t v20;
  std::__shared_weak_count *v21;

  v4 = Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::shared();
  std::string::basic_string[abi:ne180100]<0>(__p, "json");
  Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::make(&v20, (uint64_t)v4, __p);
  if (v19 < 0)
    operator delete(__p[0]);
  v5 = (Espresso::kernels_validation_status_t *)*((_QWORD *)this + 89);
  if (v5)
  {
    Espresso::kernels_validation_status_t::save(v5, &v16);
    v6 = v20;
    std::string::basic_string[abi:ne180100]<0>(__p, "kernel_validation_status");
    (*(void (**)(uint64_t, void **, uint64_t *))(*(_QWORD *)v6 + 240))(v6, __p, &v16);
    if (v19 < 0)
      operator delete(__p[0]);
    v7 = v17;
    if (v17)
    {
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  v10 = Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::shared();
  std::string::basic_string[abi:ne180100]<0>(__p, "json");
  Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::make(a2, (uint64_t)v10, __p);
  if (v19 < 0)
    operator delete(__p[0]);
  v11 = *a2;
  v12 = (char *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 2) + 8) + 16))(*(_QWORD *)(*((_QWORD *)this + 2) + 8));
  std::string::basic_string[abi:ne180100]<0>(__p, v12);
  (*(void (**)(uint64_t, void **, uint64_t *))(*(_QWORD *)v11 + 240))(v11, __p, &v20);
  if (v19 < 0)
    operator delete(__p[0]);
  v13 = v21;
  if (v21)
  {
    v14 = (unint64_t *)&v21->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_19136C1D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  if (a17 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void Espresso::net_configuration::~net_configuration(char **this)
{
  char **v2;

  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)(this + 3), this[4]);
  v2 = this;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v2);
}

void Espresso::net::infer_current_configuration(Espresso::net *this@<X0>, uint64_t a2@<X8>)
{
  Espresso::net::infer_configuration_for_shapes(this, (Espresso::net *)((char *)this + 184), a2);
}

void Espresso::net::save_additional_configurations(Espresso::net *this@<X0>, uint64_t *a2@<X8>)
{
  void *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  void *v16;
  char *v17;
  void *v18;
  __int128 v19;
  const void *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  char *v24;
  char *v25;
  BOOL v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  char *v33;
  char *v34;
  void *__p[2];
  __int128 v36;
  uint64_t v37;
  void *v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  void *v47[2];
  char v48;

  std::string::basic_string[abi:ne180100]<0>(v47, "json");
  v4 = Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::shared();
  Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::make(a2, (uint64_t)v4, v47);
  v5 = (char *)*((_QWORD *)this + 97);
  v6 = (char *)this + 784;
  if (v5 != (char *)this + 784)
  {
    v7 = *a2;
    do
    {
      v8 = Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::shared();
      Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::make(&v45, (uint64_t)v8, v47);
      v9 = v45;
      if (*((_QWORD *)v5 + 8) != *((_QWORD *)v5 + 7))
      {
        v10 = Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::shared();
        Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::make(&v43, (uint64_t)v10, v47);
        v12 = *((_QWORD *)v5 + 7);
        v11 = *((_QWORD *)v5 + 8);
        while (v12 != v11)
        {
          LODWORD(__p[0]) = 1;
          (*(void (**)(uint64_t, uint64_t, void **))(*(_QWORD *)v43 + 160))(v43, v12, __p);
          v12 += 24;
        }
        std::string::basic_string[abi:ne180100]<0>(__p, "outputs");
        (*(void (**)(uint64_t, void **, uint64_t *))(*(_QWORD *)v9 + 240))(v9, __p, &v43);
        if (SBYTE7(v36) < 0)
          operator delete(__p[0]);
        v13 = v44;
        if (v44)
        {
          p_shared_owners = (unint64_t *)&v44->__shared_owners_;
          do
            v15 = __ldaxr(p_shared_owners);
          while (__stlxr(v15 - 1, p_shared_owners));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
      }
      if (*((_QWORD *)v5 + 12))
      {
        v16 = Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::shared();
        Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::make(&v43, (uint64_t)v16, v47);
        v17 = (char *)*((_QWORD *)v5 + 10);
        if (v17 != v5 + 88)
        {
          do
          {
            v18 = Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::shared();
            Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::make(&v41, (uint64_t)v18, v47);
            v19 = *(_OWORD *)(v17 + 72);
            *(_OWORD *)__p = *(_OWORD *)(v17 + 56);
            v36 = v19;
            v20 = (const void *)*((_QWORD *)v17 + 12);
            v37 = *((_QWORD *)v17 + 11);
            v38 = 0;
            v39 = 0;
            v40 = 0;
            std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v38, v20, *((_QWORD *)v17 + 13), (uint64_t)(*((_QWORD *)v17 + 13) - (_QWORD)v20) >> 2);
            Espresso::SerDes::params_io<Espresso::layer_shape>(v41, (uint64_t)__p, 1);
            (*(void (**)(uint64_t, _QWORD *, uint64_t *))(*(_QWORD *)v43 + 240))(v43, (_QWORD *)v17 + 4, &v41);
            if (v38)
            {
              v39 = v38;
              operator delete(v38);
            }
            v21 = v42;
            if (v42)
            {
              v22 = (unint64_t *)&v42->__shared_owners_;
              do
                v23 = __ldaxr(v22);
              while (__stlxr(v23 - 1, v22));
              if (!v23)
              {
                ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
                std::__shared_weak_count::__release_weak(v21);
              }
            }
            v24 = (char *)*((_QWORD *)v17 + 1);
            if (v24)
            {
              do
              {
                v25 = v24;
                v24 = *(char **)v24;
              }
              while (v24);
            }
            else
            {
              do
              {
                v25 = (char *)*((_QWORD *)v17 + 2);
                v26 = *(_QWORD *)v25 == (_QWORD)v17;
                v17 = v25;
              }
              while (!v26);
            }
            v17 = v25;
          }
          while (v25 != v5 + 88);
        }
        std::string::basic_string[abi:ne180100]<0>(__p, "input_shapes");
        (*(void (**)(uint64_t, void **, uint64_t *))(*(_QWORD *)v9 + 240))(v9, __p, &v43);
        if (SBYTE7(v36) < 0)
          operator delete(__p[0]);
        v27 = v44;
        if (v44)
        {
          v28 = (unint64_t *)&v44->__shared_owners_;
          do
            v29 = __ldaxr(v28);
          while (__stlxr(v29 - 1, v28));
          if (!v29)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
      }
      (*(void (**)(uint64_t, _QWORD *, uint64_t *))(*(_QWORD *)v7 + 240))(v7, (_QWORD *)v5 + 4, &v45);
      v30 = v46;
      if (v46)
      {
        v31 = (unint64_t *)&v46->__shared_owners_;
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      v33 = (char *)*((_QWORD *)v5 + 1);
      if (v33)
      {
        do
        {
          v34 = v33;
          v33 = *(char **)v33;
        }
        while (v33);
      }
      else
      {
        do
        {
          v34 = (char *)*((_QWORD *)v5 + 2);
          v26 = *(_QWORD *)v34 == (_QWORD)v5;
          v5 = v34;
        }
        while (!v26);
      }
      v5 = v34;
    }
    while (v34 != v6);
  }
  if (v48 < 0)
    operator delete(v47[0]);
}

void sub_19136C648(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,char a25)
{
  uint64_t v25;

  if (*(char *)(v25 - 81) < 0)
    operator delete(*(void **)(v25 - 104));
  _Unwind_Resume(exception_object);
}

void Espresso::net::setup_script(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  Espresso *v7;
  const char *v8;
  NSObject *v9;
  void **v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  uint64_t v13;
  __int128 v14;
  std::__shared_weak_count *shared_owners;
  unint64_t v16;
  unint64_t *p_shared_weak_owners;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  void **v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  void *v46[2];
  char v47;
  __int128 __p;
  char v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v6 = *a2;
  if (*a2)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "engine");
    v7 = (Espresso *)(*(_QWORD *(**)(void **__return_ptr, uint64_t, __int128 *))(*(_QWORD *)v6 + 112))(v46, v6, &__p);
    if (v49 < 0)
      operator delete((void *)__p);
  }
  else
  {
    v7 = (Espresso *)std::string::basic_string[abi:ne180100]<0>(v46, "espresso");
  }
  Espresso::espresso_os_log_subsystem(v7, v8);
  v9 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    v39 = v46;
    if (v47 < 0)
      v39 = (void **)v46[0];
    LODWORD(__p) = 136315138;
    *(_QWORD *)((char *)&__p + 4) = v39;
    _os_log_debug_impl(&dword_190DAF000, v9, OS_LOG_TYPE_DEBUG, "[net::setup_script] %s", (uint8_t *)&__p, 0xCu);
  }

  if (*(_QWORD *)(a1 + 968))
    Espresso::run_pass_on_network<Espresso::pass_reset_pre_ssa>(a1);
  if (v47 < 0)
  {
    if (v46[1] == (void *)8)
    {
      v10 = (void **)v46[0];
      if (*(_QWORD *)v46[0] == 0x6F73736572707365)
        goto LABEL_14;
    }
    else
    {
      v10 = (void **)v46[0];
    }
LABEL_57:
    *(_QWORD *)&__p = v10;
    Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long long &>("Unsupported scripting engine ", &__p);
  }
  if (v47 != 8 || v46[0] != (void *)0x6F73736572707365)
  {
    v10 = v46;
    goto LABEL_57;
  }
LABEL_14:
  std::shared_ptr<Espresso::net>::shared_ptr[abi:ne180100]<Espresso::net,void>(&__p, *(_QWORD *)a1, *(std::__shared_weak_count **)(a1 + 8));
  v11 = (std::__shared_weak_count *)operator new(0xF8uLL);
  v11->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  v11->__shared_weak_owners_ = 0;
  v11->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB6FF8;
  v13 = Espresso::interpreter_t::interpreter_t((uint64_t)&v11[1], (uint64_t *)&__p);
  *(_QWORD *)&v14 = v13;
  *((_QWORD *)&v14 + 1) = v11;
  shared_owners = (std::__shared_weak_count *)v11[5].__shared_owners_;
  if (shared_owners)
  {
    if (shared_owners->__shared_owners_ != -1)
      goto LABEL_27;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
    v40 = v14;
    p_shared_weak_owners = (unint64_t *)&v11->__shared_weak_owners_;
    do
      v18 = __ldxr(p_shared_weak_owners);
    while (__stxr(v18 + 1, p_shared_weak_owners));
    v11[5].__vftable = (std::__shared_weak_count_vtbl *)v13;
    v11[5].__shared_owners_ = (uint64_t)v11;
    std::__shared_weak_count::__release_weak(shared_owners);
    v14 = v40;
  }
  else
  {
    do
      v19 = __ldxr(p_shared_owners);
    while (__stxr(v19 + 1, p_shared_owners));
    v20 = (unint64_t *)&v11->__shared_weak_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
    v11[5].__vftable = (std::__shared_weak_count_vtbl *)v13;
    v11[5].__shared_owners_ = (uint64_t)v11;
  }
  do
    v22 = __ldaxr(p_shared_owners);
  while (__stlxr(v22 - 1, p_shared_owners));
  if (!v22)
  {
    v41 = v14;
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    v14 = v41;
  }
LABEL_27:
  v23 = *(std::__shared_weak_count **)(a1 + 976);
  *(_OWORD *)(a1 + 968) = v14;
  if (v23)
  {
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v26 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
  if (*((_QWORD *)&__p + 1))
  {
    v27 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = *(_QWORD *)(a1 + 968);
  std::shared_ptr<Espresso::net>::shared_ptr[abi:ne180100]<Espresso::net,void>(&v44, *(_QWORD *)a1, *(std::__shared_weak_count **)(a1 + 8));
  v30 = (std::__shared_weak_count *)a2[1];
  v42 = *a2;
  v43 = v30;
  if (v30)
  {
    v31 = (unint64_t *)&v30->__shared_owners_;
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
  }
  (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t *))(*(_QWORD *)v29 + 24))(v29, &v44, a3, &v42);
  v33 = v43;
  if (v43)
  {
    v34 = (unint64_t *)&v43->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  v36 = v45;
  if (v45)
  {
    v37 = (unint64_t *)&v45->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  if (v47 < 0)
    operator delete(v46[0]);
}

void sub_19136CAFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<Espresso::interpreter_t>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB6FF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::interpreter_t>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB6FF8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::interpreter_t>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::net::transform_parameters_as_input(Espresso::net *this)
{
  Espresso::throw_exception_selector<Espresso::generic_error>("Deprecated. Use the corresponding function in gradient_builder");
}

void Espresso::net::transform_transfer_global_parameters(Espresso::net *this)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  BOOL v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  unint64_t v22;
  std::string::size_type v24;
  uint64_t v25;
  const void *v26;
  char *v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  std::string *v31;
  uint64_t *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  __int128 *v37;
  __int128 *v38;
  __int128 v39;
  uint64_t *v40;
  __int128 *v41;
  _OWORD *v42;
  __int128 v43;
  std::string *v44;
  uint64_t **v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  char **v49;
  char *v50;
  char **v51;
  unint64_t v52;
  uint64_t **v53;
  unsigned __int8 *v54;
  unsigned __int8 *v55;
  unsigned __int8 *v56;
  unsigned __int8 *v57;
  uint64_t *v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  unint64_t v63;
  __int128 *v64;
  __int128 v65;
  char *v66;
  uint64_t v67[2];
  __int128 v68;
  __int128 v69;
  int v70;
  std::string v71;
  unint64_t v72;
  std::string *v73;
  char *v74;
  uint64_t v75;
  char **v76;
  char *v77[2];
  uint64_t *v78;
  uint64_t v79[2];
  uint64_t *v80[2];

  v2 = *((_QWORD *)this + 4);
  v3 = *((_QWORD *)this + 5);
  v4 = (v3 - v2) >> 4;
  if (v3 != v2)
  {
    v5 = 0;
    if (v4 <= 1)
      v6 = 1;
    else
      v6 = (v3 - v2) >> 4;
    v7 = *((_QWORD *)this + 4);
    v8 = (v3 - v2) >> 4;
    v9 = v8;
    while (1)
    {
      v10 = (unint64_t *)(*(_QWORD *)v7 + 16);
      if (*(char *)(*(_QWORD *)v7 + 39) < 0)
      {
        v14 = *(_QWORD *)(*(_QWORD *)v7 + 24);
        if (v14 == 11)
        {
          v18 = (unint64_t *)*v10;
          v19 = bswap64(*(_QWORD *)*v10);
          v20 = 0x69735F747261696ELL;
          if (v19 != 0x69735F747261696ELL
            || (v19 = bswap64(*(unint64_t *)((char *)v18 + 3)),
                v20 = 0x747261696E696E67,
                v19 != 0x747261696E696E67))
          {
            v13 = v19 >= v20;
            goto LABEL_28;
          }
          goto LABEL_26;
        }
        if (v14 == 12)
        {
          v10 = (unint64_t *)*v10;
LABEL_15:
          v15 = bswap64(*v10);
          v16 = 0x656E645F74726169;
          if (v15 == 0x656E645F74726169
            && (v15 = bswap32(*((_DWORD *)v10 + 2)), v16 = 1852403303, v15 == 1852403303))
          {
            v17 = 0;
          }
          else if (v15 < v16)
          {
            v17 = -1;
          }
          else
          {
            v17 = 1;
          }
          if (!v17)
            v9 = v5;
        }
      }
      else
      {
        if (*(_BYTE *)(*(_QWORD *)v7 + 39) == 12)
          goto LABEL_15;
        if (*(_BYTE *)(*(_QWORD *)v7 + 39) == 11)
        {
          v11 = bswap64(*v10);
          v12 = 0x69735F747261696ELL;
          if (v11 != 0x69735F747261696ELL
            || (v11 = bswap64(*(_QWORD *)(*(_QWORD *)v7 + 19)), v12 = 0x747261696E696E67,
                                                                  v11 != 0x747261696E696E67))
          {
            v13 = v11 >= v12;
LABEL_28:
            if (v13)
              v21 = 1;
            else
              v21 = -1;
LABEL_31:
            if (!v21)
              v8 = v5;
            goto LABEL_33;
          }
LABEL_26:
          v21 = 0;
          goto LABEL_31;
        }
      }
LABEL_33:
      ++v5;
      v7 += 16;
      if (v6 == v5)
        goto LABEL_36;
    }
  }
  v9 = (v3 - v2) >> 4;
  v8 = v9;
LABEL_36:
  v22 = (int)v9;
  if (v4 > (v8 < v9) && v8 <= (int)v9)
  {
    do
      Espresso::net::remove_layer(this, v22--);
    while (v8 <= v22);
    v2 = *((_QWORD *)this + 4);
    v3 = *((_QWORD *)this + 5);
  }
  v79[0] = 0;
  v79[1] = 0;
  v78 = v79;
  v77[0] = 0;
  v77[1] = 0;
  v76 = v77;
  v71.__r_.__value_.__r.__words[0] = 0;
  if (v3 == v2)
  {
    v74 = 0;
    v75 = 0;
    v73 = (std::string *)&v74;
LABEL_98:
    v68 = 0u;
    v69 = 0u;
    v70 = 1065353216;
    goto LABEL_110;
  }
  v24 = 0;
  v66 = (char *)this + 96;
  do
  {
    v25 = *(_QWORD *)(v2 + 16 * v24);
    v26 = *(const void **)(v25 + 64);
    if (v26)
    {
      if (v27)
      {
        v28 = *(std::__shared_weak_count **)(v25 + 72);
        *(_QWORD *)&v68 = v27;
        *((_QWORD *)&v68 + 1) = v28;
        if (v28)
        {
          p_shared_owners = (unint64_t *)&v28->__shared_owners_;
          do
            v30 = __ldxr(p_shared_owners);
          while (__stxr(v30 + 1, p_shared_owners));
        }
        v31 = (std::string *)(v27 + 280);
        if (v77 != std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>((uint64_t)&v76, (_QWORD *)v27 + 35))Espresso::throw_exception_selector<Espresso::generic_error>("A global can be loaded by at most one load constant kernel");
        v73 = v31;
        std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v76, v31, (__int128 **)&v73)[7] = v24;
        v73 = &v71;
        v73 = (std::string *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v66, (unint64_t *)&v71, (uint64_t)&std::piecewise_construct, (uint64_t **)&v73)[3];
        v32 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v78, v73, (uint64_t)&std::piecewise_construct, (__int128 **)&v73);
        std::string::operator=((std::string *)(v32 + 7), v31);
        if (v28)
        {
          v33 = (unint64_t *)&v28->__shared_owners_;
          do
            v34 = __ldaxr(v33);
          while (__stlxr(v34 - 1, v33));
          if (!v34)
          {
            ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
            std::__shared_weak_count::__release_weak(v28);
          }
        }
      }
    }
    v24 = v71.__r_.__value_.__r.__words[0] + 1;
    v71.__r_.__value_.__r.__words[0] = v24;
    v2 = *((_QWORD *)this + 4);
    v35 = *((_QWORD *)this + 5);
  }
  while (v24 < (v35 - v2) >> 4);
  v74 = 0;
  v75 = 0;
  v72 = 0;
  v73 = (std::string *)&v74;
  if (v35 == v2)
  {
    v2 = v35;
    goto LABEL_98;
  }
  do
  {
    v68 = 0uLL;
    *(_QWORD *)&v69 = 0;
    v80[0] = (uint64_t *)&v72;
    v36 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)this + 56, &v72, (uint64_t)&std::piecewise_construct, v80);
    v37 = (__int128 *)v36[3];
    v38 = (__int128 *)v36[4];
    while (v37 != v38)
    {
      if (*((char *)v37 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v71, *(const std::string::value_type **)v37, *((_QWORD *)v37 + 1));
      }
      else
      {
        v39 = *v37;
        v71.__r_.__value_.__r.__words[2] = *((_QWORD *)v37 + 2);
        *(_OWORD *)&v71.__r_.__value_.__l.__data_ = v39;
      }
      if (v79 != std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>((uint64_t)&v78, &v71))
      {
        v80[0] = (uint64_t *)&v71;
        v40 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v78, &v71, (uint64_t)&std::piecewise_construct, (__int128 **)v80);
        v41 = (__int128 *)(v40 + 7);
        v42 = (_OWORD *)*((_QWORD *)&v68 + 1);
        if (*((_QWORD *)&v68 + 1) >= (unint64_t)v69)
        {
          v44 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v68, (uint64_t)v41);
        }
        else
        {
          if (*((char *)v40 + 79) < 0)
          {
            std::string::__init_copy_ctor_external(*((std::string **)&v68 + 1), (const std::string::value_type *)v40[7], v40[8]);
          }
          else
          {
            v43 = *v41;
            *(_QWORD *)(*((_QWORD *)&v68 + 1) + 16) = v40[9];
            *v42 = v43;
          }
          v44 = (std::string *)((char *)v42 + 24);
        }
        *((_QWORD *)&v68 + 1) = v44;
      }
      if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v71.__r_.__value_.__l.__data_);
      v37 = (__int128 *)((char *)v37 + 24);
    }
    if (*((_QWORD *)&v68 + 1) != (_QWORD)v68)
    {
      v45 = std::__tree<std::__value_type<unsigned long,std::vector<std::string>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::vector<std::string>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t **)&v73, v72, (uint64_t **)&v72)+ 5;
      if (v45 != (uint64_t **)&v68)
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)v45, (std::string *)v68, *((std::string **)&v68 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v68 + 1) - v68) >> 3));
    }
    v71.__r_.__value_.__r.__words[0] = (std::string::size_type)&v68;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v71);
    ++v72;
    v46 = *((_QWORD *)this + 4);
    v2 = *((_QWORD *)this + 5);
  }
  while (v72 < (v2 - v46) >> 4);
  v68 = 0u;
  v69 = 0u;
  v70 = 1065353216;
  v72 = 0;
  if (v2 == v46)
  {
    v61 = (v2 - v46) >> 4;
  }
  else
  {
    v47 = 0;
    do
    {
      v48 = v74;
      if (v74)
      {
        v49 = &v74;
        do
        {
          v50 = v48;
          v51 = v49;
          v52 = *((_QWORD *)v48 + 4);
          if (v52 >= v47)
            v49 = (char **)v48;
          else
            v48 += 8;
          v48 = *(char **)v48;
        }
        while (v48);
        if (v49 != &v74)
        {
          if (v52 < v47)
            v50 = (char *)v51;
          if (v47 >= *((_QWORD *)v50 + 4))
          {
            *(_OWORD *)&v71.__r_.__value_.__r.__words[1] = 0uLL;
            v71.__r_.__value_.__r.__words[0] = (std::string::size_type)&v71.__r_.__value_.__l.__size_;
            v53 = std::__tree<std::__value_type<unsigned long,std::vector<std::string>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::vector<std::string>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t **)&v73, v47, (uint64_t **)&v72);
            v55 = (unsigned __int8 *)v53[5];
            v54 = (unsigned __int8 *)v53[6];
            while (v55 != v54)
            {
              v56 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>((_QWORD *)this + 180, v55);
              if (!v56)
                std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
              v57 = v56;
              v80[0] = (uint64_t *)v55;
              v58 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v71, v55, (__int128 **)v80);
              std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v58 + 7, *((_QWORD *)v57 + 5), *((_QWORD *)v57 + 6));
              v80[0] = (uint64_t *)v55;
              v59 = std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v76, v55, (__int128 **)v80);
              std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)&v68, v59 + 7, v59 + 7);
              std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__erase_unique<std::string>((_QWORD *)this + 180, v55);
              v55 += 24;
            }
            v60 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 4) + 16 * v47) + 64);
            (*(void (**)(uint64_t, std::string *, Espresso::net *, unint64_t))(*(_QWORD *)v60 + 240))(v60, &v71, this, v47);
            std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy((_QWORD *)v71.__r_.__value_.__l.__size_);
            v46 = *((_QWORD *)this + 4);
            v2 = *((_QWORD *)this + 5);
          }
        }
      }
      v72 = ++v47;
    }
    while (v47 < (v2 - v46) >> 4);
    v61 = (v2 - v46) >> 4;
    v2 = v46;
  }
  v62 = v61 - 1;
  if ((int)v61 >= 1)
  {
    v63 = v61 + 1;
    do
    {
      if (std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::find<unsigned long>(&v68, (v63 - 2)))
      {
        v80[0] = (uint64_t *)(v63 - 2);
        v64 = (__int128 *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)v66, (unint64_t)v80[0], v80)[3];
        if (*((char *)v64 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v71, *(const std::string::value_type **)v64, *((_QWORD *)v64 + 1));
        }
        else
        {
          v65 = *v64;
          v71.__r_.__value_.__r.__words[2] = *((_QWORD *)v64 + 2);
          *(_OWORD *)&v71.__r_.__value_.__l.__data_ = v65;
        }
        Espresso::net::remove_layer(this, v62);
        std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__erase_unique<std::string>((_QWORD *)this + 17, (unsigned __int8 *)&v71);
        std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__erase_unique<std::string>((uint64_t **)this + 23, &v71);
        if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v71.__r_.__value_.__l.__data_);
      }
      --v63;
      --v62;
    }
    while (v63 > 1);
    v2 = *((_QWORD *)this + 4);
  }
LABEL_110:
  v67[0] = 0;
  v67[1] = 0;
  Espresso::net::setup_script((uint64_t)this, v67, *(unsigned int *)(*(_QWORD *)v2 + 12));
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&v68);
  std::__tree<std::__value_type<unsigned long,std::vector<std::string>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::vector<std::string>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::vector<std::string>>>>::destroy(v74);
  std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::destroy(v77[0]);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v78, v79[0]);
}

void sub_19136D378(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,char *a27,uint64_t a28,uint64_t a29,char *a30)
{
  uint64_t v30;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&a13);
  std::__tree<std::__value_type<unsigned long,std::vector<std::string>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::vector<std::string>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::vector<std::string>>>>::destroy(a27);
  std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::destroy(a30);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v30 - 128, *(_QWORD *)(v30 - 120));
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__erase_unique<std::string>(_QWORD *a1, unsigned __int8 *a2)
{
  unsigned __int8 *v3;
  _BYTE v4[24];

  v3 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>(a1, a2);
  if (v3)
  {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::remove((uint64_t)v4, a1, v3);
    std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>>>>::reset[abi:ne180100]((uint64_t)v4);
  }
}

void std::__tree<std::__value_type<unsigned long,std::vector<std::string>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::vector<std::string>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::vector<std::string>>>>::destroy(char *a1)
{
  void **v2;

  if (a1)
  {
    std::__tree<std::__value_type<unsigned long,std::vector<std::string>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::vector<std::string>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::vector<std::string>>>>::destroy(*(_QWORD *)a1);
    std::__tree<std::__value_type<unsigned long,std::vector<std::string>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::vector<std::string>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::vector<std::string>>>>::destroy(*((_QWORD *)a1 + 1));
    v2 = (void **)(a1 + 40);
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
    operator delete(a1);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::remove(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v3 = (int8x8_t)a2[1];
  v4 = a3[1];
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(_QWORD *)&v3)
      v4 %= *(_QWORD *)&v3;
  }
  else
  {
    v4 &= *(_QWORD *)&v3 - 1;
  }
  v6 = *(_QWORD **)(*a2 + 8 * v4);
  do
  {
    v7 = v6;
    v6 = (_QWORD *)*v6;
  }
  while (v6 != a3);
  if (v7 == a2 + 2)
    goto LABEL_18;
  v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(_QWORD *)&v3)
      v8 %= *(_QWORD *)&v3;
  }
  else
  {
    v8 &= *(_QWORD *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a3)
      goto LABEL_19;
    v9 = *(_QWORD *)(*a3 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(_QWORD *)&v3)
        v9 %= *(_QWORD *)&v3;
    }
    else
    {
      v9 &= *(_QWORD *)&v3 - 1;
    }
    if (v9 != v4)
LABEL_19:
      *(_QWORD *)(*a2 + 8 * v4) = 0;
  }
  v10 = *a3;
  if (*a3)
  {
    v11 = *(_QWORD *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(_QWORD *)&v3)
        v11 %= *(_QWORD *)&v3;
    }
    else
    {
      v11 &= *(_QWORD *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(_QWORD *)(*a2 + 8 * v11) = v7;
      v10 = *a3;
    }
  }
  *v7 = v10;
  *a3 = 0;
  --a2[3];
  *(_QWORD *)result = a3;
  *(_QWORD *)(result + 8) = a2 + 2;
  *(_BYTE *)(result + 16) = 1;
  return result;
}

void Espresso::net::rewire_layer_input(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 *a4)
{
  uint64_t v4;
  char *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  char *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  __int128 v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  const void **v26;
  unsigned __int8 *v27;
  unint64_t i;
  _QWORD *v29;
  unsigned __int8 *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  unsigned __int8 *v35;
  _QWORD *v36;
  _QWORD *v37;
  char *v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  __int128 v48;
  unint64_t v49;
  __int128 *v50;
  std::__shared_weak_count *v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;

  v4 = (uint64_t)a4;
  v50 = a4;
  v46 = a1 + 136;
  v7 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 136, (unsigned __int8 *)a4, &v50);
  v8 = (std::__shared_weak_count *)*((_QWORD *)v7 + 6);
  v52 = *((_QWORD *)v7 + 5);
  v53 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  *(_QWORD *)&v48 = a3;
  v11 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v46, (unsigned __int8 *)a3, (__int128 **)&v48);
  v12 = (std::__shared_weak_count *)*((_QWORD *)v11 + 6);
  v50 = (__int128 *)*((_QWORD *)v11 + 5);
  v51 = v12;
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v49 = 0;
  v15 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(a1 + 40) != v15)
  {
    v16 = 0;
    while (1)
    {
      v17 = *(_OWORD *)(v15 + 16 * v16);
      v48 = v17;
      v18 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
      if (*((_QWORD *)&v17 + 1))
      {
        v19 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
        do
          v20 = __ldxr(v19);
        while (__stxr(v20 + 1, v19));
      }
      v21 = v17;
      v22 = *(unsigned __int8 *)(v17 + 39);
      if ((v22 & 0x80u) == 0)
        v23 = *(unsigned __int8 *)(v17 + 39);
      else
        v23 = *(_QWORD *)(v17 + 24);
      v24 = a2[23];
      v25 = (char)v24;
      if ((v24 & 0x80u) != 0)
        v24 = *((_QWORD *)a2 + 1);
      if (v23 == v24)
      {
        v26 = (const void **)(v17 + 16);
        if (v25 >= 0)
          v27 = a2;
        else
          v27 = *(unsigned __int8 **)a2;
        if ((v22 & 0x80) == 0)
        {
          if (*(_BYTE *)(v17 + 39))
          {
            while (*(unsigned __int8 *)v26 == *v27)
            {
              v26 = (const void **)((char *)v26 + 1);
              ++v27;
              if (!--v22)
                goto LABEL_27;
            }
            goto LABEL_47;
          }
LABEL_27:
          for (i = 0; ; ++i)
          {
            v54 = &v49;
            v29 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(a1 + 56, &v49, (uint64_t)&std::piecewise_construct, (uint64_t **)&v54);
            if (i >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v29[4] - v29[3]) >> 3))
              break;
            v54 = &v49;
            v30 = (unsigned __int8 *)(std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(a1 + 56, &v49, (uint64_t)&std::piecewise_construct, (uint64_t **)&v54)[3]+ 24 * i);
            v31 = v30[23];
            if ((v31 & 0x80u) == 0)
              v32 = v30[23];
            else
              v32 = *((_QWORD *)v30 + 1);
            v33 = *(unsigned __int8 *)(v4 + 23);
            v34 = (char)v33;
            if ((v33 & 0x80u) != 0)
              v33 = *(_QWORD *)(v4 + 8);
            if (v32 == v33)
            {
              if (v34 >= 0)
                v35 = (unsigned __int8 *)v4;
              else
                v35 = *(unsigned __int8 **)v4;
              if ((v31 & 0x80) != 0)
              {
                if (!memcmp(*(const void **)v30, v35, *((_QWORD *)v30 + 1)))
                  break;
              }
              else
              {
                if (!v30[23])
                  break;
                while (*v30 == *v35)
                {
                  ++v30;
                  ++v35;
                  if (!--v31)
                    goto LABEL_45;
                }
              }
            }
          }
LABEL_45:
          v54 = &v49;
          v36 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(a1 + 56, &v49, (uint64_t)&std::piecewise_construct, (uint64_t **)&v54);
          if (i == 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v36[4] - v36[3]) >> 3))
          {
            if (*(char *)(v4 + 23) < 0)
              v4 = *(_QWORD *)v4;
            if (*(char *)(a3 + 23) < 0)
              a3 = *(_QWORD *)a3;
            Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,unsigned long>("blob %s is not input of layer %s", v4, a3);
          }
          v54 = &v49;
          v37 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(a1 + 56, &v49, (uint64_t)&std::piecewise_construct, (uint64_t **)&v54);
          std::string::operator=((std::string *)(v37[3] + 24 * i), (const std::string *)a3);
          v54 = (unint64_t *)a3;
          v38 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v46, (unsigned __int8 *)a3, (__int128 **)&v54);
          std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(*(_QWORD *)(v21 + 80) + 16 * i), *((_QWORD *)v38 + 5), *((_QWORD *)v38 + 6));
          goto LABEL_47;
        }
        if (!memcmp(*v26, v27, *(_QWORD *)(v17 + 24)))
          goto LABEL_27;
      }
LABEL_47:
      if (v18)
      {
        v39 = (unint64_t *)&v18->__shared_owners_;
        do
          v40 = __ldaxr(v39);
        while (__stlxr(v40 - 1, v39));
        if (!v40)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v16 = v49 + 1;
      v49 = v16;
      v15 = *(_QWORD *)(a1 + 32);
      if (v16 >= (*(_QWORD *)(a1 + 40) - v15) >> 4)
      {
        v12 = v51;
        break;
      }
    }
  }
  if (v12)
  {
    v41 = (unint64_t *)&v12->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v43 = v53;
  if (v53)
  {
    v44 = (unint64_t *)&v53->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
}

void sub_19136D9F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void Espresso::net::set_metadata_for_key(uint64_t a1, uint64_t a2, __int128 *a3, _QWORD *a4)
{
  unint64_t v4;
  const void *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint8x8_t v15;
  unint64_t v16;
  uint64_t **v17;
  uint64_t *i;
  unint64_t v19;
  char *v20;
  _QWORD *v21;
  std::string *v22;
  float v23;
  float v24;
  _BOOL8 v25;
  unint64_t v26;
  unint64_t v27;
  int8x8_t prime;
  void *v29;
  void *v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  uint8x8_t v34;
  unint64_t v35;
  uint8x8_t v36;
  uint64_t v37;
  _QWORD *v38;
  unint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  unint64_t v42;
  void *v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  void *v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  void *__p[2];
  uint64_t v52;
  __int128 v53;
  _QWORD v54[2];
  char v55;

  v48 = *a3;
  v49 = a3[1];
  v8 = (const void *)*((_QWORD *)a3 + 5);
  v50 = *((_QWORD *)a3 + 4);
  __p[0] = 0;
  __p[1] = 0;
  v52 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(__p, v8, *((_QWORD *)a3 + 6), (uint64_t)(*((_QWORD *)a3 + 6) - (_QWORD)v8) >> 2);
  v9 = a4[1];
  *(_QWORD *)&v53 = *a4;
  *((_QWORD *)&v53 + 1) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  v12 = std::__string_hash<char>::operator()[abi:ne180100](a2);
  v13 = v12;
  v14 = *(_QWORD *)(a1 + 1312);
  if (v14)
  {
    v15 = (uint8x8_t)vcnt_s8((int8x8_t)v14);
    v15.i16[0] = vaddlv_u8(v15);
    v16 = v15.u32[0];
    if (v15.u32[0] > 1uLL)
    {
      v4 = v12;
      if (v12 >= v14)
        v4 = v12 % v14;
    }
    else
    {
      v4 = (v14 - 1) & v12;
    }
    v17 = *(uint64_t ***)(*(_QWORD *)(a1 + 1304) + 8 * v4);
    if (v17)
    {
      for (i = *v17; i; i = (uint64_t *)*i)
      {
        v19 = i[1];
        if (v19 == v13)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)i + 16, (unsigned __int8 *)a2))
            goto LABEL_80;
        }
        else
        {
          if (v16 > 1)
          {
            if (v19 >= v14)
              v19 %= v14;
          }
          else
          {
            v19 &= v14 - 1;
          }
          if (v19 != v4)
            break;
        }
      }
    }
  }
  v20 = (char *)operator new(0x78uLL);
  v21 = (_QWORD *)(a1 + 1320);
  v54[0] = v20;
  v54[1] = a1 + 1320;
  v55 = 0;
  *(_QWORD *)v20 = 0;
  *((_QWORD *)v20 + 1) = v13;
  v22 = (std::string *)(v20 + 16);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v22, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v22->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    *((_QWORD *)v20 + 4) = *(_QWORD *)(a2 + 16);
  }
  *((_QWORD *)v20 + 12) = 0;
  *((_QWORD *)v20 + 13) = 0;
  *((_OWORD *)v20 + 4) = 0u;
  *((_OWORD *)v20 + 5) = 0u;
  *(_OWORD *)(v20 + 40) = xmmword_191A8AA80;
  *((_QWORD *)v20 + 7) = 0xFFFFFFFF00000001;
  *((_QWORD *)v20 + 14) = 0;
  v55 = 1;
  v23 = (float)(unint64_t)(*(_QWORD *)(a1 + 1328) + 1);
  v24 = *(float *)(a1 + 1336);
  if (!v14 || (float)(v24 * (float)v14) < v23)
  {
    v25 = 1;
    if (v14 >= 3)
      v25 = (v14 & (v14 - 1)) != 0;
    v26 = v25 | (2 * v14);
    v27 = vcvtps_u32_f32(v23 / v24);
    if (v26 <= v27)
      prime = (int8x8_t)v27;
    else
      prime = (int8x8_t)v26;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v14 = *(_QWORD *)(a1 + 1312);
    if (*(_QWORD *)&prime > v14)
      goto LABEL_36;
    if (*(_QWORD *)&prime < v14)
    {
      v35 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 1328) / *(float *)(a1 + 1336));
      if (v14 < 3 || (v36 = (uint8x8_t)vcnt_s8((int8x8_t)v14), v36.i16[0] = vaddlv_u8(v36), v36.u32[0] > 1uLL))
      {
        v35 = std::__next_prime(v35);
      }
      else
      {
        v37 = 1 << -(char)__clz(v35 - 1);
        if (v35 >= 2)
          v35 = v37;
      }
      if (*(_QWORD *)&prime <= v35)
        prime = (int8x8_t)v35;
      if (*(_QWORD *)&prime >= v14)
      {
        v14 = *(_QWORD *)(a1 + 1312);
      }
      else
      {
        if (prime)
        {
LABEL_36:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v29 = operator new(8 * *(_QWORD *)&prime);
          v30 = *(void **)(a1 + 1304);
          *(_QWORD *)(a1 + 1304) = v29;
          if (v30)
            operator delete(v30);
          v31 = 0;
          *(int8x8_t *)(a1 + 1312) = prime;
          do
            *(_QWORD *)(*(_QWORD *)(a1 + 1304) + 8 * v31++) = 0;
          while (*(_QWORD *)&prime != v31);
          v32 = (_QWORD *)*v21;
          if (*v21)
          {
            v33 = v32[1];
            v34 = (uint8x8_t)vcnt_s8(prime);
            v34.i16[0] = vaddlv_u8(v34);
            if (v34.u32[0] > 1uLL)
            {
              if (v33 >= *(_QWORD *)&prime)
                v33 %= *(_QWORD *)&prime;
            }
            else
            {
              v33 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)(a1 + 1304) + 8 * v33) = v21;
            v38 = (_QWORD *)*v32;
            if (*v32)
            {
              do
              {
                v39 = v38[1];
                if (v34.u32[0] > 1uLL)
                {
                  if (v39 >= *(_QWORD *)&prime)
                    v39 %= *(_QWORD *)&prime;
                }
                else
                {
                  v39 &= *(_QWORD *)&prime - 1;
                }
                if (v39 != v33)
                {
                  v40 = *(_QWORD *)(a1 + 1304);
                  if (!*(_QWORD *)(v40 + 8 * v39))
                  {
                    *(_QWORD *)(v40 + 8 * v39) = v32;
                    goto LABEL_61;
                  }
                  *v32 = *v38;
                  *v38 = **(_QWORD **)(*(_QWORD *)(a1 + 1304) + 8 * v39);
                  **(_QWORD **)(*(_QWORD *)(a1 + 1304) + 8 * v39) = v38;
                  v38 = v32;
                }
                v39 = v33;
LABEL_61:
                v32 = v38;
                v38 = (_QWORD *)*v38;
                v33 = v39;
              }
              while (v38);
            }
          }
          v14 = (unint64_t)prime;
          goto LABEL_65;
        }
        v47 = *(void **)(a1 + 1304);
        *(_QWORD *)(a1 + 1304) = 0;
        if (v47)
          operator delete(v47);
        v14 = 0;
        *(_QWORD *)(a1 + 1312) = 0;
      }
    }
LABEL_65:
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v13 >= v14)
        v4 = v13 % v14;
      else
        v4 = v13;
    }
    else
    {
      v4 = (v14 - 1) & v13;
    }
  }
  v41 = *(_QWORD **)(*(_QWORD *)(a1 + 1304) + 8 * v4);
  i = (uint64_t *)v54[0];
  if (v41)
  {
    *(_QWORD *)v54[0] = *v41;
LABEL_78:
    *v41 = i;
    goto LABEL_79;
  }
  *(_QWORD *)v54[0] = *(_QWORD *)(a1 + 1320);
  *(_QWORD *)(a1 + 1320) = i;
  *(_QWORD *)(*(_QWORD *)(a1 + 1304) + 8 * v4) = v21;
  if (*i)
  {
    v42 = *(_QWORD *)(*i + 8);
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v42 >= v14)
        v42 %= v14;
    }
    else
    {
      v42 &= v14 - 1;
    }
    v41 = (_QWORD *)(*(_QWORD *)(a1 + 1304) + 8 * v42);
    goto LABEL_78;
  }
LABEL_79:
  v54[0] = 0;
  ++*(_QWORD *)(a1 + 1328);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::pair<Espresso::layer_shape,std::shared_ptr<Espresso::blob<float,5>>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::pair<Espresso::layer_shape,std::shared_ptr<Espresso::blob<float,5>>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v54);
LABEL_80:
  v43 = (void *)i[10];
  *(_OWORD *)(i + 5) = v48;
  *(_OWORD *)(i + 7) = v49;
  i[9] = v50;
  if (v43)
  {
    i[11] = (uint64_t)v43;
    operator delete(v43);
    i[10] = 0;
    i[11] = 0;
    i[12] = 0;
  }
  *((_OWORD *)i + 5) = *(_OWORD *)__p;
  i[12] = v52;
  __p[1] = 0;
  v52 = 0;
  __p[0] = 0;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)(i + 13), &v53);
  v44 = (std::__shared_weak_count *)*((_QWORD *)&v53 + 1);
  if (*((_QWORD *)&v53 + 1))
  {
    v45 = (unint64_t *)(*((_QWORD *)&v53 + 1) + 8);
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_19136DF70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::pair<Espresso::layer_shape,std::shared_ptr<Espresso::blob<float,5>>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::pair<Espresso::layer_shape,std::shared_ptr<Espresso::blob<float,5>>>>,void *>>>>::reset[abi:ne180100]((uint64_t)&a20);
  std::pair<Espresso::layer_shape,std::shared_ptr<Espresso::blob<float,5>>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::pair<Espresso::layer_shape,std::shared_ptr<Espresso::blob<float,5>>>::~pair(uint64_t a1)
{
  void *v2;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 64);
  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
  return a1;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::pair<Espresso::layer_shape,std::shared_ptr<Espresso::blob<float,5>>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::pair<Espresso::layer_shape,std::shared_ptr<Espresso::blob<float,5>>>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::pair<Espresso::layer_shape,std::shared_ptr<Espresso::blob<float,5>>>>,0>((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::pair<Espresso::layer_shape,std::shared_ptr<Espresso::blob<float,5>>>>,0>(uint64_t a1)
{
  void *v2;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 88);
  v2 = *(void **)(a1 + 64);
  if (v2)
  {
    *(_QWORD *)(a1 + 72) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

_QWORD *Espresso::network_optimization_graph::network_optimization_graph(Espresso::network_optimization_graph *a1, uint64_t a2)
{
  Espresso::network_optimization_graph *v3;

  v3 = Espresso::network_optimization_graph::network_optimization_graph(a1, *(Espresso::net **)a2);
  return std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v3, *(_QWORD *)a2, *(_QWORD *)(a2 + 8));
}

{
  Espresso::network_optimization_graph *v3;

  v3 = Espresso::network_optimization_graph::network_optimization_graph(a1, *(Espresso::net **)a2);
  return std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v3, *(_QWORD *)a2, *(_QWORD *)(a2 + 8));
}

void Espresso::net::sync_copy_global(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t *a3@<X8>)
{
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37[3];
  std::__shared_weak_count *v38;
  _QWORD v39[2];
  uint64_t v40;
  std::__shared_weak_count *v41;
  uint64_t v42;
  uint64_t v43;
  void *__p;
  void *v45;

  v4 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>((_QWORD *)(a1 + 1440), a2);
  if (!v4)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v5 = v4;
  v6 = (_QWORD *)*((_QWORD *)v4 + 5);
  v7 = v6 + 9;
  v8 = *(_QWORD *)(v6[9] + 8);
  v9 = (*(uint64_t (**)(_QWORD *))(*v6 + 32))(v6);
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v8 + 24))(v8, v7, v9);
  v10 = *((_QWORD *)v5 + 5);
  v11 = *a3;
  *(_OWORD *)(v11 + 112) = *(_OWORD *)(v10 + 112);
  if (v11 != v10)
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)(v11 + 128), *(char **)(v10 + 128), *(_QWORD *)(v10 + 136), (uint64_t)(*(_QWORD *)(v10 + 136) - *(_QWORD *)(v10 + 128)) >> 2);
  v12 = *a3;
  Espresso::abstract_blob_container::shape((char *)&v42, *((_QWORD *)v5 + 5));
  v40 = 0;
  v41 = 0;
  (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v12 + 16))(v12, &v42, &v40);
  v13 = v41;
  if (v41)
  {
    p_shared_owners = (unint64_t *)&v41->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (__p)
  {
    v45 = __p;
    operator delete(__p);
  }
  v16 = *((_QWORD *)v5 + 5);
  v17 = (std::__shared_weak_count *)*((_QWORD *)v5 + 6);
  v39[0] = v16;
  v39[1] = v17;
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  Espresso::sync_copy_to_host(&v42, v39);
  if (v17)
  {
    v20 = (unint64_t *)&v17->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v22 = *a3;
  v23 = (std::__shared_weak_count *)a3[1];
  v37[2] = *a3;
  v38 = v23;
  if (v23)
  {
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  v26 = (std::__shared_weak_count *)v43;
  v37[0] = v42;
  v37[1] = v43;
  if (v43)
  {
    v27 = (unint64_t *)(v43 + 8);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  Espresso::sync_copy_from_host(v22, v23, v37);
  if (v26)
  {
    v29 = (unint64_t *)&v26->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v31 = v38;
  if (v38)
  {
    v32 = (unint64_t *)&v38->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v34 = (std::__shared_weak_count *)v43;
  if (v43)
  {
    v35 = (unint64_t *)(v43 + 8);
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
}

void sub_19136E31C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  uint64_t v23;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v23);
  _Unwind_Resume(a1);
}

_QWORD *Espresso::net::swap_global@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  char *v12;
  __int128 *v14;

  v7 = a1 + 1440;
  v14 = a2;
  v8 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 1440, (unsigned __int8 *)a2, &v14);
  *a4 = *((_QWORD *)v8 + 5);
  v9 = *((_QWORD *)v8 + 6);
  a4[1] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  v14 = a2;
  v12 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7, (unsigned __int8 *)a2, &v14);
  return std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v12 + 5, *a3, a3[1]);
}

void sub_19136E410(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void Espresso::net::blobs_summary(Espresso::net *this)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t i;
  unint64_t v19;
  uint64_t j;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  uint64_t v24;
  uint64_t k;
  uint64_t v26;
  uint64_t m;
  char v28;
  unint64_t v29;
  unint64_t v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  std::string *v69;
  const char *v70;
  uint64_t v71;
  unint64_t __val;
  int v73;
  uint64_t v74;
  _BYTE v75[32];
  uint64_t v76;
  void *v77[2];
  uint64_t v78;
  std::string v79;
  std::string::size_type v80;
  unint64_t v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  void *__p[2];
  uint64_t v86;
  uint64_t v87;
  std::__shared_weak_count *v88;
  uint64_t v89;
  std::__shared_weak_count *v90;
  uint64_t v91;
  std::__shared_weak_count *v92;
  uint64_t v93;
  std::__shared_weak_count *v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  _QWORD v98[6];

  v95 = 0;
  v96 = 0;
  v97 = 0;
  v2 = *((_QWORD *)this + 20);
  if (v2)
  {
    if (v2 > 0x276276276276276)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v81 = (unint64_t)&v97;
    v79.__r_.__value_.__r.__words[0] = (std::string::size_type)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<std::string,BOOL,unsigned long,Espresso::layer_shape>>>(v2);
    v79.__r_.__value_.__l.__size_ = v79.__r_.__value_.__r.__words[0];
    v79.__r_.__value_.__r.__words[2] = v79.__r_.__value_.__r.__words[0];
    v80 = v79.__r_.__value_.__r.__words[0] + 104 * v3;
    std::vector<std::tuple<std::string,BOOL,unsigned long,Espresso::layer_shape>>::__swap_out_circular_buffer(&v95, &v79);
    std::__split_buffer<std::tuple<std::string,BOOL,unsigned long,Espresso::layer_shape>>::~__split_buffer((uint64_t)&v79);
  }
  __val = v2;
  v4 = (uint64_t *)*((_QWORD *)this + 19);
  if (v4)
  {
    v74 = 0;
    v5 = 0;
    while (1)
    {
      v7 = v4 + 5;
      v6 = v4[5];
      if (v6 && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6))
      {
        v8 = *(_QWORD *)(*v7 + 160);
        v21 = *(std::__shared_weak_count **)(*v7 + 168);
        v93 = v8;
        v94 = v21;
        if (v21)
        {
          p_shared_owners = (unint64_t *)&v21->__shared_owners_;
          do
            v23 = __ldxr(p_shared_owners);
          while (__stxr(v23 + 1, p_shared_owners));
        }
      }
      else
      {
        v8 = 0;
        v93 = 0;
        v94 = 0;
      }
      Espresso::inline_get_cpu_blob<Espresso::blob<unsigned char,4>,false>(&v91, v4 + 5);
      if (*v7 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)*v7 + 32))(*v7) == 3)
      {
        v10 = *(_QWORD *)(*v7 + 208);
        v9 = *(std::__shared_weak_count **)(*v7 + 216);
        v89 = v10;
        v90 = v9;
        if (v9)
        {
          v11 = (unint64_t *)&v9->__shared_owners_;
          do
            v12 = __ldxr(v11);
          while (__stxr(v12 + 1, v11));
        }
      }
      else
      {
        v10 = 0;
        v89 = 0;
        v90 = 0;
      }
      if (*v7 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)*v7 + 32))(*v7) == 1)
      {
        v13 = *(_QWORD *)(*v7 + 176);
        v14 = *(std::__shared_weak_count **)(*v7 + 184);
        v87 = v13;
        v88 = v14;
        if (v14)
        {
          v15 = (unint64_t *)&v14->__shared_owners_;
          do
            v16 = __ldxr(v15);
          while (__stxr(v16 + 1, v15));
        }
        if (v8)
        {
LABEL_22:
          v17 = *(int *)(v8 + 8);
          for (i = 12; i != 24; i += 4)
            v17 *= *(int *)(v8 + i);
          v19 = 4 * v17;
          goto LABEL_42;
        }
      }
      else
      {
        v14 = 0;
        v13 = 0;
        v87 = 0;
        v88 = 0;
        if (v8)
          goto LABEL_22;
      }
      v8 = v91;
      if (v91)
      {
        v19 = *(int *)(v91 + 8);
        for (j = 12; j != 24; j += 4)
          v19 *= *(int *)(v91 + j);
      }
      else if (v10)
      {
        v24 = *(int *)(v10 + 8);
        for (k = 12; k != 24; k += 4)
          v24 *= *(int *)(v10 + k);
        v19 = 4 * v24;
        v8 = v10;
      }
      else
      {
        if (!v13)
        {
          v28 = 0;
          v19 = 0;
LABEL_45:
          v29 = v19;
          goto LABEL_46;
        }
        v26 = *(int *)(v13 + 8);
        for (m = 12; m != 24; m += 4)
          v26 *= *(int *)(v13 + m);
        v19 = 2 * v26;
        v8 = v13;
      }
LABEL_42:
      v28 = *(_BYTE *)(v8 + 32) ^ 1;
      v74 += v19;
      if (*(_BYTE *)(v8 + 32))
        goto LABEL_45;
      v29 = 0;
LABEL_46:
      Espresso::abstract_blob_container::shape(v75, *v7);
      if (*((char *)v4 + 39) < 0)
        std::string::__init_copy_ctor_external(&v79, (const std::string::value_type *)v4[2], v4[3]);
      else
        v79 = *(std::string *)(v4 + 2);
      LOBYTE(v80) = v28;
      v81 = v19;
      v82 = *(_OWORD *)v75;
      v83 = *(_OWORD *)&v75[16];
      v84 = v76;
      *(_OWORD *)__p = *(_OWORD *)v77;
      v86 = v78;
      v77[1] = 0;
      v78 = 0;
      v77[0] = 0;
      v30 = v96;
      if (v96 >= v97)
      {
        v34 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v96 - v95) >> 3);
        v35 = v34 + 1;
        if ((unint64_t)(v34 + 1) > 0x276276276276276)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        if (0x9D89D89D89D89D8ALL * ((uint64_t)(v97 - v95) >> 3) > v35)
          v35 = 0x9D89D89D89D89D8ALL * ((uint64_t)(v97 - v95) >> 3);
        if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v97 - v95) >> 3)) >= 0x13B13B13B13B13BLL)
          v36 = 0x276276276276276;
        else
          v36 = v35;
        v98[4] = &v97;
        if (v36)
          v36 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<std::string,BOOL,unsigned long,Espresso::layer_shape>>>(v36);
        else
          v37 = 0;
        v38 = v36 + 104 * v34;
        v98[0] = v36;
        v98[1] = v38;
        v98[3] = v36 + 104 * v37;
        v39 = *(_OWORD *)&v79.__r_.__value_.__l.__data_;
        *(_QWORD *)(v38 + 16) = *((_QWORD *)&v79.__r_.__value_.__l + 2);
        *(_OWORD *)v38 = v39;
        memset(&v79, 0, sizeof(v79));
        *(_BYTE *)(v38 + 24) = v80;
        *(_QWORD *)(v38 + 32) = v81;
        v40 = v82;
        v41 = v84;
        *(_OWORD *)(v38 + 56) = v83;
        *(_OWORD *)(v38 + 40) = v40;
        *(_QWORD *)(v38 + 72) = v41;
        *(_QWORD *)(v38 + 80) = 0;
        *(_QWORD *)(v38 + 88) = 0;
        *(_QWORD *)(v38 + 96) = 0;
        *(_OWORD *)(v38 + 80) = *(_OWORD *)__p;
        *(_QWORD *)(v38 + 96) = v86;
        __p[0] = 0;
        __p[1] = 0;
        v86 = 0;
        v98[2] = v38 + 104;
        std::vector<std::tuple<std::string,BOOL,unsigned long,Espresso::layer_shape>>::__swap_out_circular_buffer(&v95, v98);
        v42 = v96;
        std::__split_buffer<std::tuple<std::string,BOOL,unsigned long,Espresso::layer_shape>>::~__split_buffer((uint64_t)v98);
        v96 = v42;
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
      }
      else
      {
        v31 = *(_OWORD *)&v79.__r_.__value_.__l.__data_;
        *(_QWORD *)(v96 + 16) = *((_QWORD *)&v79.__r_.__value_.__l + 2);
        *(_OWORD *)v30 = v31;
        memset(&v79, 0, sizeof(v79));
        *(_BYTE *)(v30 + 24) = v80;
        *(_QWORD *)(v30 + 32) = v81;
        v32 = v84;
        v33 = v83;
        *(_OWORD *)(v30 + 40) = v82;
        *(_OWORD *)(v30 + 56) = v33;
        *(_QWORD *)(v30 + 72) = v32;
        *(_QWORD *)(v30 + 80) = 0;
        *(_QWORD *)(v30 + 88) = 0;
        *(_QWORD *)(v30 + 96) = 0;
        *(_OWORD *)(v30 + 80) = *(_OWORD *)__p;
        *(_QWORD *)(v30 + 96) = v86;
        __p[0] = 0;
        __p[1] = 0;
        v86 = 0;
        v96 = v30 + 104;
      }
      if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v79.__r_.__value_.__l.__data_);
      if (v77[0])
      {
        v77[1] = v77[0];
        operator delete(v77[0]);
      }
      if (v14)
      {
        v43 = (unint64_t *)&v14->__shared_owners_;
        do
          v44 = __ldaxr(v43);
        while (__stlxr(v44 - 1, v43));
        if (!v44)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      v45 = v90;
      if (v90)
      {
        v46 = (unint64_t *)&v90->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
          std::__shared_weak_count::__release_weak(v45);
        }
      }
      v48 = v92;
      if (v92)
      {
        v49 = (unint64_t *)&v92->__shared_owners_;
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      v51 = v94;
      if (v94)
      {
        v52 = (unint64_t *)&v94->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v5 += v29;
      v4 = (uint64_t *)*v4;
      if (!v4)
        goto LABEL_89;
    }
  }
  v5 = 0;
  v74 = 0;
LABEL_89:
  std::to_string(&v79, v2);
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
  {
    v73 = v79.__r_.__value_.__r.__words[1];
    operator delete(v79.__r_.__value_.__l.__data_);
  }
  else
  {
    v73 = HIBYTE(v79.__r_.__value_.__r.__words[2]);
  }
  v71 = v5;
  v54 = v95;
  if (v96 == v95)
  {
    v59 = 12;
    v61 = 4;
    v58 = 3;
    v64 = 1;
    v63 = 1;
    v62 = 1;
    v57 = 1;
    v60 = 4;
  }
  else
  {
    v55 = 0;
    v56 = 0;
    v57 = 1;
    v58 = 3;
    v59 = 12;
    v60 = 4;
    v61 = 4;
    v62 = 1;
    v63 = 1;
    v64 = 1;
    do
    {
      std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul>,std::string,BOOL,unsigned long,Espresso::layer_shape>::__tuple_impl(&v79, (__int128 *)(v54 + v55));
      v65 = HIBYTE(v79.__r_.__value_.__r.__words[2]);
      if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v65 = v79.__r_.__value_.__r.__words[1];
      if (v60 <= v65)
        v60 = v65;
      std::to_string((std::string *)v75, v81);
      if ((v75[23] & 0x80000000) != 0)
      {
        if (v59 <= *(int *)&v75[8])
          v59 = *(_DWORD *)&v75[8];
        operator delete(*(void **)v75);
      }
      else if (v59 <= v75[23])
      {
        v59 = v75[23];
      }
      std::to_string((std::string *)v75, v82);
      if ((v75[23] & 0x80000000) != 0)
      {
        if (v63 <= *(int *)&v75[8])
          v63 = *(_DWORD *)&v75[8];
        operator delete(*(void **)v75);
      }
      else if (v63 <= v75[23])
      {
        v63 = v75[23];
      }
      std::to_string((std::string *)v75, SDWORD1(v82));
      if ((v75[23] & 0x80000000) != 0)
      {
        if (v64 <= *(int *)&v75[8])
          v64 = *(_DWORD *)&v75[8];
        operator delete(*(void **)v75);
      }
      else if (v64 <= v75[23])
      {
        v64 = v75[23];
      }
      std::to_string((std::string *)v75, SDWORD2(v82));
      if ((v75[23] & 0x80000000) != 0)
      {
        if (v62 <= *(int *)&v75[8])
          v62 = *(_DWORD *)&v75[8];
        operator delete(*(void **)v75);
      }
      else if (v62 <= v75[23])
      {
        v62 = v75[23];
      }
      std::to_string((std::string *)v75, SHIDWORD(v82));
      if ((v75[23] & 0x80000000) != 0)
      {
        if (v57 <= *(int *)&v75[8])
          v57 = *(_DWORD *)&v75[8];
        operator delete(*(void **)v75);
      }
      else if (v57 <= v75[23])
      {
        v57 = v75[23];
      }
      std::to_string((std::string *)v75, v83);
      if ((v75[23] & 0x80000000) != 0)
      {
        if (v58 <= *(int *)&v75[8])
          v58 = *(_DWORD *)&v75[8];
        operator delete(*(void **)v75);
      }
      else if (v58 <= v75[23])
      {
        v58 = v75[23];
      }
      std::to_string((std::string *)v75, SDWORD1(v83));
      if ((v75[23] & 0x80000000) != 0)
      {
        if (v61 <= *(int *)&v75[8])
          v61 = *(_DWORD *)&v75[8];
        operator delete(*(void **)v75);
      }
      else if (v61 <= v75[23])
      {
        v61 = v75[23];
      }
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v79.__r_.__value_.__l.__data_);
      ++v56;
      v54 = v95;
      v55 += 104;
    }
    while (v56 < 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v96 - v95) >> 3));
  }
  printf("%*s %*s %*s %*s %*s %*s %*s %*s %-*s Aliased\n", v73, "", v59, "Size (Bytes)", v63, "W", v64, "H", v62, "K", v57, "N", v58, "Seq", v61, "Rank", v60, "Name");
  v66 = v95;
  if (v96 != v95)
  {
    v67 = 0;
    v68 = 0;
    do
    {
      std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul>,std::string,BOOL,unsigned long,Espresso::layer_shape>::__tuple_impl(&v79, (__int128 *)(v66 + v67));
      v69 = &v79;
      if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v69 = (std::string *)v79.__r_.__value_.__r.__words[0];
      v70 = "*";
      if (!(_BYTE)v80)
        v70 = "-";
      printf("%*zu %*zu %*d %*d %*d %*d %*d %*d %-*s %-*s\n", v73, v68, v59, v81, v63, (_DWORD)v82, v64, DWORD1(v82), v62, DWORD2(v82), v57, HIDWORD(v82), v58, (_DWORD)v83, v61, DWORD1(v83), v60, (const char *)v69,
        7,
        v70);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v79.__r_.__value_.__l.__data_);
      ++v68;
      v66 = v95;
      v67 += 104;
    }
    while (v68 < 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v96 - v95) >> 3));
  }
  printf("[Blobs Summary] %zu Bytes of Max Memory for %zu Blobs\n", v74, __val);
  printf("[Blobs Summary] %zu Bytes of Memory with Aliasing for %zu Blobs\n", v71, __val);
  v79.__r_.__value_.__r.__words[0] = (std::string::size_type)&v95;
  std::vector<std::tuple<std::string,BOOL,unsigned long,Espresso::layer_shape>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v79);
}

void sub_19136EE3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,uint64_t a40,char a41)
{
  uint64_t v41;

  a33 = v41 - 152;
  std::vector<std::tuple<std::string,BOOL,unsigned long,Espresso::layer_shape>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a33);
  _Unwind_Resume(a1);
}

uint64_t std::tuple<std::string,BOOL,unsigned long,Espresso::layer_shape>::~tuple(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 80);
  if (v2)
  {
    *(_QWORD *)(a1 + 88) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

std::string *std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul>,std::string,BOOL,unsigned long,Espresso::layer_shape>::__tuple_impl(std::string *this, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  std::string::size_type v7;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  this[1].__r_.__value_.__s.__data_[0] = *((_BYTE *)a2 + 24);
  this[1].__r_.__value_.__l.__size_ = *((_QWORD *)a2 + 4);
  v5 = *(__int128 *)((char *)a2 + 40);
  v6 = *(__int128 *)((char *)a2 + 56);
  v7 = *((_QWORD *)a2 + 9);
  this[3].__r_.__value_.__l.__size_ = 0;
  this[3].__r_.__value_.__r.__words[0] = v7;
  *(_OWORD *)&this[2].__r_.__value_.__r.__words[1] = v6;
  *(_OWORD *)&this[1].__r_.__value_.__r.__words[2] = v5;
  this[3].__r_.__value_.__r.__words[2] = 0;
  this[4].__r_.__value_.__r.__words[0] = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&this[3].__r_.__value_.__l.__size_, *((const void **)a2 + 10), *((_QWORD *)a2 + 11), (uint64_t)(*((_QWORD *)a2 + 11) - *((_QWORD *)a2 + 10)) >> 2);
  return this;
}

void sub_19136EFCC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::vector<std::tuple<std::string,BOOL,unsigned long,Espresso::layer_shape>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 104;
        std::allocator<std::tuple<std::string,BOOL,unsigned long,Espresso::layer_shape>>::destroy[abi:ne180100](v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<std::tuple<std::string,BOOL,unsigned long,Espresso::layer_shape>>::destroy[abi:ne180100](uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 80);
  if (v2)
  {
    *(_QWORD *)(a1 + 88) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<std::string,BOOL,unsigned long,Espresso::layer_shape>>>(unint64_t a1)
{
  if (a1 >= 0x276276276276277)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(104 * a1);
}

uint64_t *std::vector<std::tuple<std::string,BOOL,unsigned long,Espresso::layer_shape>>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  if (v2 != *result)
  {
    v5 = 0;
    do
    {
      v6 = v4 + v5;
      v7 = v2 + v5;
      v8 = *(_OWORD *)(v2 + v5 - 104);
      *(_QWORD *)(v6 - 88) = *(_QWORD *)(v2 + v5 - 88);
      *(_OWORD *)(v6 - 104) = v8;
      *(_QWORD *)(v7 - 96) = 0;
      *(_QWORD *)(v7 - 88) = 0;
      *(_QWORD *)(v7 - 104) = 0;
      *(_BYTE *)(v6 - 80) = *(_BYTE *)(v2 + v5 - 80);
      *(_QWORD *)(v6 - 72) = *(_QWORD *)(v2 + v5 - 72);
      v9 = *(_OWORD *)(v2 + v5 - 48);
      v10 = *(_QWORD *)(v2 + v5 - 32);
      *(_OWORD *)(v6 - 64) = *(_OWORD *)(v2 + v5 - 64);
      *(_OWORD *)(v6 - 48) = v9;
      *(_QWORD *)(v6 - 32) = v10;
      *(_QWORD *)(v6 - 24) = 0;
      *(_QWORD *)(v6 - 16) = 0;
      *(_QWORD *)(v6 - 8) = 0;
      *(_OWORD *)(v6 - 24) = *(_OWORD *)(v2 + v5 - 24);
      *(_QWORD *)(v6 - 8) = *(_QWORD *)(v2 + v5 - 8);
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v5 -= 104;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  v11 = *result;
  *result = v4;
  a2[1] = v11;
  v12 = result[1];
  result[1] = a2[2];
  a2[2] = v12;
  v13 = result[2];
  result[2] = a2[3];
  a2[3] = v13;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<std::tuple<std::string,BOOL,unsigned long,Espresso::layer_shape>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 104;
    std::allocator<std::tuple<std::string,BOOL,unsigned long,Espresso::layer_shape>>::destroy[abi:ne180100](i - 104);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void Espresso::net::pprint(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const char *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  const char *v14;
  unint64_t v15;
  unsigned int v16;
  uint64_t *v17;
  uint64_t *v18;
  const void *v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  _QWORD *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  __int128 v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  size_t v37;
  std::string *v38;
  const void *v39;
  int v40;
  const std::string::value_type *v41;
  std::string::size_type v42;
  std::string *v43;
  __int128 v44;
  std::string *v45;
  __int128 v46;
  uint64_t v47;
  char *v48;
  unint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  __int128 *v62;
  __int128 v63;
  std::string *p_p;
  std::string::size_type size;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  __int128 *v71;
  __int128 v72;
  std::string *v73;
  std::string::size_type v74;
  uint64_t v75;
  unsigned __int8 *v76;
  unsigned __int8 *v77;
  _QWORD *v78;
  unint64_t v79;
  uint64_t v80;
  std::string *v81;
  __int128 v82;
  std::string *v83;
  __int128 v84;
  std::string *v85;
  std::string::size_type v86;
  uint64_t v87;
  int v88;
  unint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  const void *v92;
  _QWORD *v93;
  _QWORD *v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::string *v98;
  __int128 v99;
  std::string *v100;
  __int128 v101;
  const std::string::value_type *v102;
  const std::string::value_type *v103;
  const std::string::value_type *v104;
  int v105;
  const std::string::value_type *v106;
  std::string::size_type v107;
  std::string *v108;
  __int128 v109;
  std::string *v110;
  __int128 v111;
  std::string *v112;
  std::string::size_type v113;
  unint64_t *v114;
  unint64_t v115;
  uint64_t v116;
  const void *v117;
  _QWORD *v118;
  _QWORD *v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  std::string *v123;
  __int128 v124;
  std::string *v125;
  __int128 v126;
  int v127;
  const std::string::value_type *v128;
  std::string::size_type v129;
  std::string *v130;
  __int128 v131;
  std::string *v132;
  __int128 v133;
  std::string *v134;
  std::string::size_type v135;
  unint64_t *v136;
  unint64_t v137;
  int *v138;
  int v139;
  int v140;
  BOOL v141;
  int v142;
  int v145;
  uint64_t v146;
  std::string::size_type v147;
  char v148;
  std::string *v149;
  __int128 v150;
  std::string *v151;
  std::string::size_type v152;
  std::string *v153;
  std::string *v154;
  int v155;
  const char *v156;
  int v157;
  std::string::size_type v158;
  int v159;
  std::string::size_type v160;
  std::string *v161;
  std::string *v162;
  const char *v163;
  std::string *v164;
  std::string *v165;
  int *v167;
  int v169;
  int v170;
  BOOL v171;
  int v172;
  int v173;
  BOOL v174;
  int v175;
  std::__shared_weak_count *v178;
  unint64_t *v179;
  unint64_t v180;
  const char *v181;
  std::__shared_weak_count *v182;
  unint64_t *v183;
  unint64_t v184;
  int __val;
  __int128 v187;
  int v188;
  std::string v189;
  std::string v190;
  _QWORD *v191;
  std::__shared_weak_count *v192;
  std::string v193;
  std::string v194;
  std::string __p;
  std::string v196;
  std::string v197;
  std::string *v198;
  std::string v199;
  std::string v200;
  std::string v201;
  __int128 v202;
  std::string::size_type v203;
  __int128 v204;
  unint64_t v205;
  _QWORD v206[4];
  int v207;
  _QWORD *v208;
  std::__shared_weak_count *v209;

  *((_QWORD *)&v187 + 1) = a3;
  if (*(char *)(a2 + 23) >= 0)
    v4 = (const char *)a2;
  else
    v4 = *(const char **)a2;
  v5 = (const char *)(a1 + 424);
  if (*(char *)(a1 + 447) < 0)
    v5 = *(const char **)v5;
  printf("def %s %s (", v4, v5);
  v6 = *(_QWORD *)(a1 + 640);
  if (*(_QWORD *)(a1 + 648) != v6)
  {
    v7 = 0;
    v8 = 0;
    do
    {
      v9 = (const char *)(v6 + v7);
      if (v9[23] < 0)
        v9 = *(const char **)v9;
      printf("%s", v9);
      v6 = *(_QWORD *)(a1 + 640);
      v10 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 648) - v6) >> 3);
      if (v8 < v10 - 1)
      {
        printf(", ");
        v6 = *(_QWORD *)(a1 + 640);
        v10 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 648) - v6) >> 3);
      }
      ++v8;
      v7 += 24;
    }
    while (v8 < v10);
  }
  printf("): -> ");
  v11 = *(_QWORD *)(a1 + 664);
  if (*(_QWORD *)(a1 + 672) != v11)
  {
    v12 = 0;
    v13 = 0;
    do
    {
      v14 = (const char *)(v11 + v12);
      if (v14[23] < 0)
        v14 = *(const char **)v14;
      printf("%s", v14);
      v11 = *(_QWORD *)(a1 + 664);
      v15 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 672) - v11) >> 3);
      if (v13 < v15 - 1)
      {
        printf(", ");
        v11 = *(_QWORD *)(a1 + 664);
        v15 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 672) - v11) >> 3);
      }
      ++v13;
      v12 += 24;
    }
    while (v13 < v15);
  }
  putchar(10);
  v16 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)(a1 + 16) + 8))(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8));
  v17 = std::__hash_table<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::__unordered_map_hasher<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::hash<Espresso::platform>,std::equal_to<Espresso::platform>,true>,std::__unordered_map_equal<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::equal_to<Espresso::platform>,std::hash<Espresso::platform>,true>,std::allocator<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>>>::find<Espresso::platform>((_QWORD *)(a1 + 528), v16);
  if (v17)
  {
    v18 = v17;
    v19 = (const void *)v17[3];
    v20 = (std::__shared_weak_count *)v18[4];
    if (v20)
    {
      p_shared_owners = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldxr(p_shared_owners);
      while (__stxr(v22 + 1, p_shared_owners));
    }
    if (v19
    {
      v208 = v23;
      v209 = v20;
      if (!v20)
        goto LABEL_36;
      v24 = (unint64_t *)&v20->__shared_owners_;
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 1, v24));
    }
    else
    {
      v208 = 0;
      v209 = 0;
      if (!v20)
        goto LABEL_36;
    }
    v26 = (unint64_t *)&v20->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  else
  {
    v208 = 0;
    v209 = 0;
  }
LABEL_36:
  v28 = *(_QWORD *)(a1 + 32);
  v29 = *(_QWORD *)(a1 + 40);
  memset(v206, 0, sizeof(v206));
  v207 = 1065353216;
  v205 = 0;
  if (v29 != v28)
  {
    v188 = 0;
    __val = 0;
    v30 = 0;
    v31 = (_QWORD *)(a1 + 96);
    v32 = (_QWORD *)(a1 + 56);
    *(_QWORD *)&v187 = a1;
    while (1)
    {
      v33 = *(_OWORD *)(v28 + 16 * v30);
      v204 = v33;
      if (*((_QWORD *)&v33 + 1))
      {
        v34 = (unint64_t *)(*((_QWORD *)&v33 + 1) + 8);
        do
          v35 = __ldxr(v34);
        while (__stxr(v35 + 1, v34));
      }
      v36 = v33;
      if (*(char *)(v33 + 63) >= 0)
        v37 = *(unsigned __int8 *)(v33 + 63);
      else
        v37 = *(_QWORD *)(v33 + 48);
      std::string::basic_string[abi:ne180100]((uint64_t)&v201, v37 + 1);
      if ((v201.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v38 = &v201;
      else
        v38 = (std::string *)v201.__r_.__value_.__r.__words[0];
      if (v37)
      {
        if (*(char *)(v36 + 63) >= 0)
          v39 = (const void *)(v36 + 40);
        else
          v39 = *(const void **)(v36 + 40);
        memmove(v38, v39, v37);
      }
      *(_WORD *)((char *)&v38->__r_.__value_.__l.__data_ + v37) = 60;
      v40 = *(char *)(v204 + 39);
      if (v40 >= 0)
        v41 = (const std::string::value_type *)(v204 + 16);
      else
        v41 = *(const std::string::value_type **)(v204 + 16);
      if (v40 >= 0)
        v42 = *(unsigned __int8 *)(v204 + 39);
      else
        v42 = *(_QWORD *)(v204 + 24);
      v43 = std::string::append(&v201, v41, v42);
      v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
      v197.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v197.__r_.__value_.__l.__data_ = v44;
      v43->__r_.__value_.__l.__size_ = 0;
      v43->__r_.__value_.__r.__words[2] = 0;
      v43->__r_.__value_.__r.__words[0] = 0;
      v45 = std::string::append(&v197, ">");
      v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
      v203 = v45->__r_.__value_.__r.__words[2];
      v202 = v46;
      v45->__r_.__value_.__l.__size_ = 0;
      v45->__r_.__value_.__r.__words[2] = 0;
      v45->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v197.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v197.__r_.__value_.__l.__data_);
      if (SHIBYTE(v201.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v201.__r_.__value_.__l.__data_);
      v47 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v204 + 64) + 8) + 8);
      v48 = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v47 + 16))(v47);
      std::string::basic_string[abi:ne180100]<0>(&v201, v48);
      memset(&v200, 0, sizeof(v200));
      memset(&v199, 0, sizeof(v199));
      v49 = v205;
      v50 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::find<unsigned long>(v31, v205);
      if (!v50)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      v52 = v50[3];
      v51 = v50[4];
      v53 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::find<unsigned long>(v32, v49);
      if (!v53)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      v55 = v53[3];
      v54 = v53[4];
      *(_OWORD *)&v197.__r_.__value_.__l.__data_ = v187;
      v197.__r_.__value_.__r.__words[2] = (std::string::size_type)&v204;
      v198 = &v201;
      if (v51 != v52)
      {
        v56 = 0;
        v57 = 0;
        v58 = (v51 - v52) / 24;
        v59 = v58 - 1;
        if (v58 <= 1)
          v60 = 1;
        else
          v60 = v58;
        do
        {
          v61 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::find<unsigned long>(v31, v205);
          if (!v61)
            std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
          v62 = (__int128 *)(v61[3] + v56);
          if (*((char *)v62 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v196, *(const std::string::value_type **)v62, *((_QWORD *)v62 + 1));
          }
          else
          {
            v63 = *v62;
            v196.__r_.__value_.__r.__words[2] = *((_QWORD *)v62 + 2);
            *(_OWORD *)&v196.__r_.__value_.__l.__data_ = v63;
          }
          Espresso::net::pprint(std::string const&,std::function<std::string ()(unsigned long const*,std::string const*)>)const::$_0::operator()(&__p, (uint64_t)&v197, (uint64_t)&v196);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_p = &__p;
          else
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          else
            size = __p.__r_.__value_.__l.__size_;
          std::string::append(&v200, (const std::string::value_type *)p_p, size);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (v57 < v59)
            std::string::append(&v200, ", ");
          if (SHIBYTE(v196.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v196.__r_.__value_.__l.__data_);
          ++v57;
          v56 += 24;
        }
        while (v60 != v57);
      }
      v66 = (v54 - v55) / 24;
      if (v54 != v55)
      {
        v67 = 0;
        v68 = 0;
        if (v66 <= 1)
          v69 = 1;
        else
          v69 = v66;
        do
        {
          v70 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::find<unsigned long>(v32, v205);
          if (!v70)
            std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
          v71 = (__int128 *)(v70[3] + v67);
          if (*((char *)v71 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v196, *(const std::string::value_type **)v71, *((_QWORD *)v71 + 1));
          }
          else
          {
            v72 = *v71;
            v196.__r_.__value_.__r.__words[2] = *((_QWORD *)v71 + 2);
            *(_OWORD *)&v196.__r_.__value_.__l.__data_ = v72;
          }
          Espresso::net::pprint(std::string const&,std::function<std::string ()(unsigned long const*,std::string const*)>)const::$_0::operator()(&__p, (uint64_t)&v197, (uint64_t)&v196);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v73 = &__p;
          else
            v73 = (std::string *)__p.__r_.__value_.__r.__words[0];
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v74 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          else
            v74 = __p.__r_.__value_.__l.__size_;
          std::string::append(&v199, (const std::string::value_type *)v73, v74);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (v68 < v66 - 1)
            std::string::append(&v199, ", ");
          if (SHIBYTE(v196.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v196.__r_.__value_.__l.__data_);
          ++v68;
          v67 += 24;
        }
        while (v69 != v68);
      }
      memset(&v196, 0, sizeof(v196));
      v75 = *(_QWORD *)(v204 + 64);
      std::string::basic_string[abi:ne180100]<0>(&__p, "basic_block_head");
      v76 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>((_QWORD *)(v75 + 240), (unsigned __int8 *)&__p);
      v77 = v76;
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        break;
      operator delete(__p.__r_.__value_.__l.__data_);
      if (v77)
        goto LABEL_110;
LABEL_111:
      v78 = v208;
      v79 = v205;
      if (v208)
      {
        v80 = v208[10];
        if (v205 < (v208[11] - v80) >> 2 && *(_DWORD *)(v80 + 4 * v205) != -1)
        {
          std::to_string(&v193, __val);
          v81 = std::string::insert(&v193, 0, "<segment_head ");
          v82 = *(_OWORD *)&v81->__r_.__value_.__l.__data_;
          v194.__r_.__value_.__r.__words[2] = v81->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v194.__r_.__value_.__l.__data_ = v82;
          v81->__r_.__value_.__l.__size_ = 0;
          v81->__r_.__value_.__r.__words[2] = 0;
          v81->__r_.__value_.__r.__words[0] = 0;
          v83 = std::string::append(&v194, ">");
          v84 = *(_OWORD *)&v83->__r_.__value_.__l.__data_;
          __p.__r_.__value_.__r.__words[2] = v83->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v84;
          v83->__r_.__value_.__l.__size_ = 0;
          v83->__r_.__value_.__r.__words[2] = 0;
          v83->__r_.__value_.__r.__words[0] = 0;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v85 = &__p;
          else
            v85 = (std::string *)__p.__r_.__value_.__r.__words[0];
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v86 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          else
            v86 = __p.__r_.__value_.__l.__size_;
          std::string::append(&v196, (const std::string::value_type *)v85, v86);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (SHIBYTE(v194.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v194.__r_.__value_.__l.__data_);
          if (SHIBYTE(v193.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v193.__r_.__value_.__l.__data_);
          v87 = v78[10];
          if (v205 >= (v78[11] - v87) >> 2)
            v88 = -1;
          else
            v88 = *(_DWORD *)(v87 + 4 * v205);
          v89 = (unint64_t *)(v78[4] + 120 * v88 + 8);
          std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)v206, v89, v89);
          ++__val;
          v79 = v205;
        }
      }
      if (std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::find<unsigned long>(v206, v79))
      {
        std::string::append(&v196, "<segment_end>");
      }
      v90 = *(_QWORD *)(v204 + 64);
      if (v90 && (*(unsigned int (**)(uint64_t, unint64_t))(*(_QWORD *)v90 + 264))(v90, v66))
        std::string::append(&v196, "<dyn>");
      v91 = v204;
      v92 = *(const void **)(v204 + 64);
      if (v92)
      {
        if (v93)
        {
          v94 = v93;
          v95 = *(std::__shared_weak_count **)(v91 + 72);
          v191 = v93;
          v192 = v95;
          if (v95)
          {
            v96 = (unint64_t *)&v95->__shared_owners_;
            do
              v97 = __ldxr(v96);
            while (__stxr(v97 + 1, v96));
          }
          std::to_string(&v189, v93[4]);
          v98 = std::string::insert(&v189, 0, "<label ");
          v99 = *(_OWORD *)&v98->__r_.__value_.__l.__data_;
          v190.__r_.__value_.__r.__words[2] = v98->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v190.__r_.__value_.__l.__data_ = v99;
          v98->__r_.__value_.__l.__size_ = 0;
          v98->__r_.__value_.__r.__words[2] = 0;
          v98->__r_.__value_.__r.__words[0] = 0;
          v100 = std::string::append(&v190, ":");
          v101 = *(_OWORD *)&v100->__r_.__value_.__l.__data_;
          v193.__r_.__value_.__r.__words[2] = v100->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v193.__r_.__value_.__l.__data_ = v101;
          v100->__r_.__value_.__l.__size_ = 0;
          v100->__r_.__value_.__r.__words[2] = 0;
          v100->__r_.__value_.__r.__words[0] = 0;
          v104 = (const std::string::value_type *)v94[1];
          v103 = (const std::string::value_type *)(v94 + 1);
          v102 = v104;
          v105 = v103[23];
          if (v105 >= 0)
            v106 = v103;
          else
            v106 = v102;
          if (v105 >= 0)
            v107 = *((unsigned __int8 *)v103 + 23);
          else
            v107 = *((_QWORD *)v103 + 1);
          v108 = std::string::append(&v193, v106, v107);
          v109 = *(_OWORD *)&v108->__r_.__value_.__l.__data_;
          v194.__r_.__value_.__r.__words[2] = v108->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v194.__r_.__value_.__l.__data_ = v109;
          v108->__r_.__value_.__l.__size_ = 0;
          v108->__r_.__value_.__r.__words[2] = 0;
          v108->__r_.__value_.__r.__words[0] = 0;
          v110 = std::string::append(&v194, ">");
          v111 = *(_OWORD *)&v110->__r_.__value_.__l.__data_;
          __p.__r_.__value_.__r.__words[2] = v110->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v111;
          v110->__r_.__value_.__l.__size_ = 0;
          v110->__r_.__value_.__r.__words[2] = 0;
          v110->__r_.__value_.__r.__words[0] = 0;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v112 = &__p;
          else
            v112 = (std::string *)__p.__r_.__value_.__r.__words[0];
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v113 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          else
            v113 = __p.__r_.__value_.__l.__size_;
          std::string::append(&v196, (const std::string::value_type *)v112, v113);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (SHIBYTE(v194.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v194.__r_.__value_.__l.__data_);
          if (SHIBYTE(v193.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v193.__r_.__value_.__l.__data_);
          if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v190.__r_.__value_.__l.__data_);
          if (SHIBYTE(v189.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v189.__r_.__value_.__l.__data_);
            if (!v95)
              goto LABEL_168;
          }
          else if (!v95)
          {
            goto LABEL_168;
          }
          v114 = (unint64_t *)&v95->__shared_owners_;
          do
            v115 = __ldaxr(v114);
          while (__stlxr(v115 - 1, v114));
          if (!v115)
          {
            ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
            std::__shared_weak_count::__release_weak(v95);
          }
        }
      }
LABEL_168:
      v116 = v204;
      v117 = *(const void **)(v204 + 64);
      if (v117)
      {
        if (v118)
        {
          v119 = v118;
          v120 = *(std::__shared_weak_count **)(v116 + 72);
          v191 = v118;
          v192 = v120;
          if (v120)
          {
            v121 = (unint64_t *)&v120->__shared_owners_;
            do
              v122 = __ldxr(v121);
            while (__stxr(v122 + 1, v121));
          }
          std::to_string(&v189, v118[44]);
          v123 = std::string::insert(&v189, 0, "<self_label ");
          v124 = *(_OWORD *)&v123->__r_.__value_.__l.__data_;
          v190.__r_.__value_.__r.__words[2] = v123->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v190.__r_.__value_.__l.__data_ = v124;
          v123->__r_.__value_.__l.__size_ = 0;
          v123->__r_.__value_.__r.__words[2] = 0;
          v123->__r_.__value_.__r.__words[0] = 0;
          v125 = std::string::append(&v190, ":");
          v126 = *(_OWORD *)&v125->__r_.__value_.__l.__data_;
          v193.__r_.__value_.__r.__words[2] = v125->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v193.__r_.__value_.__l.__data_ = v126;
          v125->__r_.__value_.__l.__size_ = 0;
          v125->__r_.__value_.__r.__words[2] = 0;
          v125->__r_.__value_.__r.__words[0] = 0;
          v127 = *((char *)v119 + 351);
          if (v127 >= 0)
            v128 = (const std::string::value_type *)(v119 + 41);
          else
            v128 = (const std::string::value_type *)v119[41];
          if (v127 >= 0)
            v129 = *((unsigned __int8 *)v119 + 351);
          else
            v129 = v119[42];
          v130 = std::string::append(&v193, v128, v129);
          v131 = *(_OWORD *)&v130->__r_.__value_.__l.__data_;
          v194.__r_.__value_.__r.__words[2] = v130->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v194.__r_.__value_.__l.__data_ = v131;
          v130->__r_.__value_.__l.__size_ = 0;
          v130->__r_.__value_.__r.__words[2] = 0;
          v130->__r_.__value_.__r.__words[0] = 0;
          v132 = std::string::append(&v194, ">");
          v133 = *(_OWORD *)&v132->__r_.__value_.__l.__data_;
          __p.__r_.__value_.__r.__words[2] = v132->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v133;
          v132->__r_.__value_.__l.__size_ = 0;
          v132->__r_.__value_.__r.__words[2] = 0;
          v132->__r_.__value_.__r.__words[0] = 0;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v134 = &__p;
          else
            v134 = (std::string *)__p.__r_.__value_.__r.__words[0];
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v135 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          else
            v135 = __p.__r_.__value_.__l.__size_;
          std::string::append(&v196, (const std::string::value_type *)v134, v135);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (SHIBYTE(v194.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v194.__r_.__value_.__l.__data_);
          if (SHIBYTE(v193.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v193.__r_.__value_.__l.__data_);
          if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v190.__r_.__value_.__l.__data_);
          if (SHIBYTE(v189.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v189.__r_.__value_.__l.__data_);
            if (!v120)
              goto LABEL_201;
          }
          else if (!v120)
          {
            goto LABEL_201;
          }
          v136 = (unint64_t *)&v120->__shared_owners_;
          do
            v137 = __ldaxr(v136);
          while (__stlxr(v137 - 1, v136));
          if (!v137)
          {
            ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
            std::__shared_weak_count::__release_weak(v120);
          }
        }
      }
LABEL_201:
      if ((v203 & 0x8000000000000000) != 0)
      {
        if (*((_QWORD *)&v202 + 1) == 6)
        {
          v140 = *(unsigned __int16 *)(v202 + 4);
          v141 = *(_DWORD *)v202 == 1700750947;
          v142 = 25710;
        }
        else
        {
          if (*((_QWORD *)&v202 + 1) != 7)
            goto LABEL_222;
          v138 = (int *)v202;
LABEL_208:
          v139 = *v138;
          v140 = *(int *)((char *)v138 + 3);
          v141 = v139 == 1700750947;
          v142 = 1702063205;
        }
        if (v141 && v140 == v142)
          goto LABEL_221;
        goto LABEL_222;
      }
      if (HIBYTE(v203) != 6)
      {
        if (HIBYTE(v203) != 7)
          goto LABEL_222;
        v138 = (int *)&v202;
        goto LABEL_208;
      }
      if ((_DWORD)v202 == 1700750947 && WORD2(v202) == 25710)
LABEL_221:
        --v188;
LABEL_222:
      memset(&__p, 0, sizeof(__p));
      v145 = v188;
      if (v188 >= 1)
      {
        do
        {
          std::string::append(&__p, "  ");
          --v145;
        }
        while (v145);
      }
      v146 = *(_QWORD *)(*((_QWORD *)&v187 + 1) + 24);
      if (v146)
      {
        std::function<std::string ()(unsigned long const*,std::string const*)>::operator()((uint64_t)&v194, v146, (uint64_t)&v205, 0);
        v147 = HIBYTE(v194.__r_.__value_.__r.__words[2]);
        v148 = HIBYTE(v194.__r_.__value_.__r.__words[2]);
        if ((v194.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v147 = v194.__r_.__value_.__l.__size_;
        if (v147)
        {
          std::operator+<char>();
          v149 = std::string::append(&v190, "}");
          v150 = *(_OWORD *)&v149->__r_.__value_.__l.__data_;
          v193.__r_.__value_.__r.__words[2] = v149->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v193.__r_.__value_.__l.__data_ = v150;
          v149->__r_.__value_.__l.__size_ = 0;
          v149->__r_.__value_.__r.__words[2] = 0;
          v149->__r_.__value_.__r.__words[0] = 0;
          if ((v193.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v151 = &v193;
          else
            v151 = (std::string *)v193.__r_.__value_.__r.__words[0];
          if ((v193.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v152 = HIBYTE(v193.__r_.__value_.__r.__words[2]);
          else
            v152 = v193.__r_.__value_.__l.__size_;
          std::string::append(&v196, (const std::string::value_type *)v151, v152);
          if (SHIBYTE(v193.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v193.__r_.__value_.__l.__data_);
          if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v190.__r_.__value_.__l.__data_);
          v148 = HIBYTE(v194.__r_.__value_.__r.__words[2]);
        }
        if (v148 < 0)
          operator delete(v194.__r_.__value_.__l.__data_);
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v153 = &__p;
      else
        v153 = (std::string *)__p.__r_.__value_.__r.__words[0];
      printf("%.4zu: %s", v205, (const char *)v153);
      if (SHIBYTE(v200.__r_.__value_.__r.__words[2]) < 0)
      {
        if (!v200.__r_.__value_.__l.__size_)
          goto LABEL_250;
        v154 = (std::string *)v200.__r_.__value_.__r.__words[0];
      }
      else
      {
        if (!*((_BYTE *)&v200.__r_.__value_.__s + 23))
          goto LABEL_250;
        v154 = &v200;
      }
      printf("%%%s = ", (const char *)v154);
LABEL_250:
      v155 = SHIBYTE(v203);
      v156 = (const char *)v202;
      v157 = SHIBYTE(v199.__r_.__value_.__r.__words[2]);
      v158 = v199.__r_.__value_.__r.__words[0];
      v159 = SHIBYTE(v201.__r_.__value_.__r.__words[2]);
      v160 = v201.__r_.__value_.__r.__words[0];
      Espresso::compute_path_to_string(*(_DWORD *)(v204 + 12), &v194);
      v161 = &v201;
      if (v159 < 0)
        v161 = (std::string *)v160;
      v162 = &v199;
      if (v157 < 0)
        v162 = (std::string *)v158;
      v163 = (const char *)&v202;
      if (v155 < 0)
        v163 = v156;
      v164 = &v194;
      if ((v194.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v164 = (std::string *)v194.__r_.__value_.__r.__words[0];
      v165 = &v196;
      if ((v196.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v165 = (std::string *)v196.__r_.__value_.__r.__words[0];
      printf("%s(%s) @%s,%s %s\n", v163, (const char *)v162, (const char *)v161, (const char *)v164, (const char *)v165);
      if (SHIBYTE(v194.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v194.__r_.__value_.__l.__data_);
      if ((v203 & 0x8000000000000000) != 0)
      {
        switch(*((_QWORD *)&v202 + 1))
        {
          case 5:
            v170 = *(unsigned __int8 *)(v202 + 4);
            v171 = *(_DWORD *)v202 == 1767859811;
            v172 = 102;
            goto LABEL_289;
          case 6:
            v170 = *(unsigned __int16 *)(v202 + 4);
            v171 = *(_DWORD *)v202 == 1717528163;
            v172 = 29295;
            goto LABEL_289;
          case 7:
            v167 = (int *)v202;
            if (*(_DWORD *)v202 != 1818191459 || *(_DWORD *)(v202 + 3) != 1886351212)
            {
LABEL_278:
              v169 = *v167;
              v170 = *(int *)((char *)v167 + 3);
              v171 = v169 == 1700750947;
              v172 = 1702063205;
LABEL_289:
              if (!v171 || v170 != v172)
                break;
            }
LABEL_294:
            ++v188;
            break;
        }
      }
      else
      {
        switch(HIBYTE(v203))
        {
          case 5u:
            v173 = BYTE4(v202);
            v174 = (_DWORD)v202 == 1767859811;
            v175 = 102;
LABEL_281:
            if (!v174 || v173 != v175)
              break;
            goto LABEL_294;
          case 6u:
            v173 = WORD2(v202);
            v174 = (_DWORD)v202 == 1717528163;
            v175 = 29295;
            goto LABEL_281;
          case 7u:
            if ((_DWORD)v202 != 1818191459 || *(_DWORD *)((char *)&v202 + 3) != 1886351212)
            {
              v167 = (int *)&v202;
              goto LABEL_278;
            }
            goto LABEL_294;
        }
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v196.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v196.__r_.__value_.__l.__data_);
      if (SHIBYTE(v199.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v199.__r_.__value_.__l.__data_);
      if (SHIBYTE(v200.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v200.__r_.__value_.__l.__data_);
      if (SHIBYTE(v201.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v201.__r_.__value_.__l.__data_);
      if (SHIBYTE(v203) < 0)
        operator delete((void *)v202);
      v178 = (std::__shared_weak_count *)*((_QWORD *)&v204 + 1);
      if (*((_QWORD *)&v204 + 1))
      {
        v179 = (unint64_t *)(*((_QWORD *)&v204 + 1) + 8);
        do
          v180 = __ldaxr(v179);
        while (__stlxr(v180 - 1, v179));
        if (!v180)
        {
          ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
          std::__shared_weak_count::__release_weak(v178);
        }
      }
      v30 = v205 + 1;
      v205 = v30;
      v28 = *(_QWORD *)(v187 + 32);
      if (v30 >= (*(_QWORD *)(v187 + 40) - v28) >> 4)
        goto LABEL_313;
    }
    if (!v76)
      goto LABEL_111;
LABEL_110:
    MEMORY[0x19401C808](&v196, "<basic_block_head>");
    goto LABEL_111;
  }
LABEL_313:
  if (*(char *)(a2 + 23) >= 0)
    v181 = (const char *)a2;
  else
    v181 = *(const char **)a2;
  printf("end %s\n\n", v181);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)v206);
  v182 = v209;
  if (v209)
  {
    v183 = (unint64_t *)&v209->__shared_owners_;
    do
      v184 = __ldaxr(v183);
    while (__stlxr(v184 - 1, v183));
    if (!v184)
    {
      ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
      std::__shared_weak_count::__release_weak(v182);
    }
  }
}

void sub_191370298(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  char a67;
  void *a68;
  char a72;
  uint64_t v72;

  if (a48 < 0)
    operator delete(__p);
  if (a41 < 0)
    operator delete(a36);
  if (a34 < 0)
    operator delete(a29);
  if (a55 < 0)
    operator delete(a50);
  if (a67 < 0)
    operator delete(a62);
  if (a72 < 0)
    operator delete(a68);
  if (*(char *)(v72 - 225) < 0)
    operator delete(*(void **)(v72 - 248));
  if (*(char *)(v72 - 201) < 0)
    operator delete(*(void **)(v72 - 224));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v72 - 192);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](v72 - 160);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v72 - 112);
  _Unwind_Resume(a1);
}

void Espresso::net::pprint(std::string const&,std::function<std::string ()(unsigned long const*,std::string const*)>)const::$_0::operator()(std::string *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unsigned __int8 *v7;
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  int v11;
  std::string *v12;
  void *v13;
  unsigned __int8 v14;
  void *v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  std::string *v20;
  void *v21;
  unsigned __int8 v22;
  uint64_t v23;
  std::string::size_type size;
  char v25;
  std::string *v26;
  std::string::size_type v27;
  char v28;
  void *v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  uint64_t v32;
  char *v33;
  std::string *v34;
  std::string::size_type v35;
  char v36;
  int v37;
  std::string *v38;
  __int128 v39;
  std::string *v40;
  __int128 v41;
  std::string *v42;
  std::string::size_type v43;
  uint64_t (***v44)(_QWORD);
  std::string *v45;
  __int128 v46;
  std::string *v47;
  __int128 v48;
  std::string *v49;
  std::string::size_type v50;
  size_t v51;
  std::string *v52;
  const void *v53;
  std::string *p_p;
  std::string::size_type v55;
  std::string *v56;
  __int128 v57;
  const std::string::value_type *v58;
  std::string::size_type v59;
  std::string *v60;
  __int128 v61;
  std::string *v62;
  __int128 v63;
  std::string *v64;
  std::string::size_type v65;
  std::string *v66;
  std::string v67;
  std::string v68;
  std::string::size_type v69;
  void *v70;
  void *v71;
  void *v72;
  _BYTE v73[15];
  unsigned __int8 v74;
  std::string __p;
  std::string v76;
  std::string v77;
  std::string v78;
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)a2;
  std::string::basic_string[abi:ne180100]<0>(&__p, "?");
  std::string::basic_string[abi:ne180100]<0>(&v72, "");
  v7 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>((_QWORD *)(v6 + 136), (unsigned __int8 *)a3);
  v8 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(v6 + 184, (_QWORD *)a3);
  if ((_QWORD *)(v6 + 192) == v8)
  {
    if (v7)
    {
      v16 = *((_QWORD *)v7 + 5);
      if (v16)
      {
        Espresso::abstract_blob_container::shape((char *)&v68, v16);
        v17 = Espresso::layer_shape::total_dim((Espresso::layer_shape *)&v68);
        std::to_string(&v78, v17);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        __p = v78;
        *((_BYTE *)&v78.__r_.__value_.__s + 23) = 0;
        v78.__r_.__value_.__s.__data_[0] = 0;
        if (v70)
        {
          v71 = v70;
          operator delete(v70);
        }
        Espresso::abstract_blob_container::shape((char *)&v68, *((_QWORD *)v7 + 5));
        if (LODWORD(v68.__r_.__value_.__r.__words[2]) == 1)
          v18 = 4;
        else
          v18 = 5;
        if (HIDWORD(v68.__r_.__value_.__r.__words[2]) == -1)
          v19 = v18;
        else
          v19 = HIDWORD(v68.__r_.__value_.__r.__words[2]);
        std::to_string(&v78, v19);
        v20 = std::string::insert(&v78, 0, "r");
        v21 = (void *)v20->__r_.__value_.__r.__words[0];
        v77.__r_.__value_.__r.__words[0] = v20->__r_.__value_.__l.__size_;
        *(std::string::size_type *)((char *)v77.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v20->__r_.__value_.__r.__words[1] + 7);
        v22 = HIBYTE(v20->__r_.__value_.__r.__words[2]);
        v20->__r_.__value_.__l.__size_ = 0;
        v20->__r_.__value_.__r.__words[2] = 0;
        v20->__r_.__value_.__r.__words[0] = 0;
        if ((char)v74 < 0)
          operator delete(v72);
        v72 = v21;
        *(_QWORD *)v73 = v77.__r_.__value_.__r.__words[0];
        *(_QWORD *)&v73[7] = *(std::string::size_type *)((char *)v77.__r_.__value_.__r.__words + 7);
        v74 = v22;
        if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v78.__r_.__value_.__l.__data_);
        v15 = v70;
        if (v70)
        {
          v71 = v70;
          goto LABEL_30;
        }
      }
    }
  }
  else
  {
    v9 = v8;
    v10 = Espresso::layer_shape::total_dim((Espresso::layer_shape *)(v8 + 7));
    std::to_string(&v68, v10);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p = v68;
    v11 = *((_DWORD *)v9 + 19);
    if (v11 == -1)
    {
      if (*((_DWORD *)v9 + 18) == 1)
        v11 = 4;
      else
        v11 = 5;
    }
    std::to_string(&v68, v11);
    v12 = std::string::insert(&v68, 0, "r");
    v13 = (void *)v12->__r_.__value_.__r.__words[0];
    v78.__r_.__value_.__r.__words[0] = v12->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v78.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v12->__r_.__value_.__r.__words[1] + 7);
    v14 = HIBYTE(v12->__r_.__value_.__r.__words[2]);
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    if ((char)v74 < 0)
      operator delete(v72);
    v72 = v13;
    *(_QWORD *)v73 = v78.__r_.__value_.__r.__words[0];
    *(_QWORD *)&v73[7] = *(std::string::size_type *)((char *)v78.__r_.__value_.__r.__words + 7);
    v74 = v14;
    if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
    {
      v15 = (void *)v68.__r_.__value_.__r.__words[0];
LABEL_30:
      operator delete(v15);
    }
  }
  memset(&v78, 0, sizeof(v78));
  v23 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 24);
  if (v23)
  {
    std::function<std::string ()(unsigned long const*,std::string const*)>::operator()((uint64_t)&v68, v23, 0, a3);
    size = HIBYTE(v68.__r_.__value_.__r.__words[2]);
    v25 = HIBYTE(v68.__r_.__value_.__r.__words[2]);
    if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = v68.__r_.__value_.__l.__size_;
    if (size)
    {
      std::operator+<char>();
      v26 = std::string::append(&v77, "}");
      v27 = v26->__r_.__value_.__r.__words[0];
      v76.__r_.__value_.__r.__words[0] = v26->__r_.__value_.__l.__size_;
      *(std::string::size_type *)((char *)v76.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v26->__r_.__value_.__r.__words[1] + 7);
      v28 = HIBYTE(v26->__r_.__value_.__r.__words[2]);
      v26->__r_.__value_.__l.__size_ = 0;
      v26->__r_.__value_.__r.__words[2] = 0;
      v26->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v78.__r_.__value_.__l.__data_);
      v78.__r_.__value_.__r.__words[0] = v27;
      v78.__r_.__value_.__l.__size_ = v76.__r_.__value_.__r.__words[0];
      *(std::string::size_type *)((char *)&v78.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v76.__r_.__value_.__r.__words + 7);
      *((_BYTE *)&v78.__r_.__value_.__s + 23) = v28;
      if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v77.__r_.__value_.__l.__data_);
      v25 = HIBYTE(v68.__r_.__value_.__r.__words[2]);
    }
    if (v25 < 0)
    {
      v29 = (void *)v68.__r_.__value_.__r.__words[0];
LABEL_76:
      operator delete(v29);
    }
  }
  else
  {
    v30 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>((_QWORD *)(v6 + 136), (unsigned __int8 *)a3);
    v31 = v30;
    if (v30 && (v32 = *((_QWORD *)v30 + 5)) != 0)
    {
      v33 = (char *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v32 + 72) + 8) + 16))(*(_QWORD *)(*(_QWORD *)(v32 + 72) + 8));
      std::string::basic_string[abi:ne180100]<0>(&v68, v33);
      v34 = std::string::insert(&v68, 0, "{");
      v35 = v34->__r_.__value_.__r.__words[0];
      v77.__r_.__value_.__r.__words[0] = v34->__r_.__value_.__l.__size_;
      *(std::string::size_type *)((char *)v77.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v34->__r_.__value_.__r.__words[1] + 7);
      v36 = HIBYTE(v34->__r_.__value_.__r.__words[2]);
      v34->__r_.__value_.__l.__size_ = 0;
      v34->__r_.__value_.__r.__words[2] = 0;
      v34->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v78.__r_.__value_.__l.__data_);
      v78.__r_.__value_.__r.__words[0] = v35;
      v78.__r_.__value_.__l.__size_ = v77.__r_.__value_.__r.__words[0];
      *(std::string::size_type *)((char *)&v78.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v77.__r_.__value_.__r.__words + 7);
      *((_BYTE *)&v78.__r_.__value_.__s + 23) = v36;
      if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v68.__r_.__value_.__l.__data_);
      v37 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v31 + 5) + 32))(*((_QWORD *)v31 + 5));
      Espresso::compute_path_to_string(v37, &v76);
      v38 = std::string::insert(&v76, 0, ",");
      v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
      v77.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v39;
      v38->__r_.__value_.__l.__size_ = 0;
      v38->__r_.__value_.__r.__words[2] = 0;
      v38->__r_.__value_.__r.__words[0] = 0;
      v40 = std::string::append(&v77, "}");
      v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
      v68.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v41;
      v40->__r_.__value_.__l.__size_ = 0;
      v40->__r_.__value_.__r.__words[2] = 0;
      v40->__r_.__value_.__r.__words[0] = 0;
      if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v42 = &v68;
      else
        v42 = (std::string *)v68.__r_.__value_.__r.__words[0];
      if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v43 = HIBYTE(v68.__r_.__value_.__r.__words[2]);
      else
        v43 = v68.__r_.__value_.__l.__size_;
      std::string::append(&v78, (const std::string::value_type *)v42, v43);
      if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v68.__r_.__value_.__l.__data_);
      if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v77.__r_.__value_.__l.__data_);
      if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
      {
        v29 = (void *)v76.__r_.__value_.__r.__words[0];
        goto LABEL_76;
      }
    }
    else
    {
      v44 = *(uint64_t (****)(_QWORD))(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(a2 + 16) + 64) + 8) + 8);
      LODWORD(v77.__r_.__value_.__l.__data_) = (**v44)(v44);
      Espresso::net::resolve_blob_numerical_properties(v6, (_QWORD *)a3, (int *)&v77, (_DWORD *)(**(_QWORD **)(a2 + 16) + 12), (uint64_t)&v68);
      std::operator+<char>();
      if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v78.__r_.__value_.__l.__data_);
      v78 = v77;
      Espresso::compute_path_to_string(v68.__r_.__value_.__r.__words[1], &v67);
      v45 = std::string::insert(&v67, 0, ",");
      v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
      v76.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v76.__r_.__value_.__l.__data_ = v46;
      v45->__r_.__value_.__l.__size_ = 0;
      v45->__r_.__value_.__r.__words[2] = 0;
      v45->__r_.__value_.__r.__words[0] = 0;
      v47 = std::string::append(&v76, "}");
      v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
      v77.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v48;
      v47->__r_.__value_.__l.__size_ = 0;
      v47->__r_.__value_.__r.__words[2] = 0;
      v47->__r_.__value_.__r.__words[0] = 0;
      if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v49 = &v77;
      else
        v49 = (std::string *)v77.__r_.__value_.__r.__words[0];
      if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v50 = HIBYTE(v77.__r_.__value_.__r.__words[2]);
      else
        v50 = v77.__r_.__value_.__l.__size_;
      std::string::append(&v78, (const std::string::value_type *)v49, v50);
      if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v77.__r_.__value_.__l.__data_);
      if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v76.__r_.__value_.__l.__data_);
      if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v67.__r_.__value_.__l.__data_);
      v29 = (void *)v68.__r_.__value_.__r.__words[2];
      if (v68.__r_.__value_.__r.__words[2])
      {
        v69 = v68.__r_.__value_.__r.__words[2];
        goto LABEL_76;
      }
    }
  }
  if (*(char *)(a3 + 23) >= 0)
    v51 = *(unsigned __int8 *)(a3 + 23);
  else
    v51 = *(_QWORD *)(a3 + 8);
  v52 = &v67;
  std::string::basic_string[abi:ne180100]((uint64_t)&v67, v51 + 1);
  if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v52 = (std::string *)v67.__r_.__value_.__r.__words[0];
  if (v51)
  {
    if (*(char *)(a3 + 23) >= 0)
      v53 = (const void *)a3;
    else
      v53 = *(const void **)a3;
    memmove(v52, v53, v51);
  }
  *(_WORD *)((char *)&v52->__r_.__value_.__l.__data_ + v51) = 40;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v55 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v55 = __p.__r_.__value_.__l.__size_;
  v56 = std::string::append(&v67, (const std::string::value_type *)p_p, v55);
  v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
  v76.__r_.__value_.__r.__words[2] = v56->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v76.__r_.__value_.__l.__data_ = v57;
  v56->__r_.__value_.__l.__size_ = 0;
  v56->__r_.__value_.__r.__words[2] = 0;
  v56->__r_.__value_.__r.__words[0] = 0;
  if ((v74 & 0x80u) == 0)
    v58 = (const std::string::value_type *)&v72;
  else
    v58 = (const std::string::value_type *)v72;
  if ((v74 & 0x80u) == 0)
    v59 = v74;
  else
    v59 = *(_QWORD *)v73;
  v60 = std::string::append(&v76, v58, v59);
  v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
  v77.__r_.__value_.__r.__words[2] = v60->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v61;
  v60->__r_.__value_.__l.__size_ = 0;
  v60->__r_.__value_.__r.__words[2] = 0;
  v60->__r_.__value_.__r.__words[0] = 0;
  v62 = std::string::append(&v77, ")");
  v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
  v68.__r_.__value_.__r.__words[2] = v62->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v63;
  v62->__r_.__value_.__l.__size_ = 0;
  v62->__r_.__value_.__r.__words[2] = 0;
  v62->__r_.__value_.__r.__words[0] = 0;
  if ((v78.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v64 = &v78;
  else
    v64 = (std::string *)v78.__r_.__value_.__r.__words[0];
  if ((v78.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v65 = HIBYTE(v78.__r_.__value_.__r.__words[2]);
  else
    v65 = v78.__r_.__value_.__l.__size_;
  v66 = std::string::append(&v68, (const std::string::value_type *)v64, v65);
  *a1 = *v66;
  v66->__r_.__value_.__l.__size_ = 0;
  v66->__r_.__value_.__r.__words[2] = 0;
  v66->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v68.__r_.__value_.__l.__data_);
  if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v77.__r_.__value_.__l.__data_);
  if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v76.__r_.__value_.__l.__data_);
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v67.__r_.__value_.__l.__data_);
  if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v78.__r_.__value_.__l.__data_);
  if ((char)v74 < 0)
    operator delete(v72);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_191370CCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  uint64_t v46;

  if (a21 < 0)
    operator delete(__p);
  if (*(char *)(v46 - 121) < 0)
    operator delete(*(void **)(v46 - 144));
  if (a46 < 0)
    operator delete(a41);
  if (*(char *)(v46 - 89) < 0)
    operator delete(*(void **)(v46 - 112));
  if (a33 < 0)
    operator delete(a28);
  if (a39 < 0)
    operator delete(a34);
  _Unwind_Resume(exception_object);
}

void sub_191370EAC()
{
  JUMPOUT(0x191370E94);
}

void sub_191370EB4()
{
  JUMPOUT(0x191370EA4);
}

uint64_t std::function<std::string ()(unsigned long const*,std::string const*)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a4;
  v6 = a3;
  if (!a2)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)a2 + 48))(a2, &v6, &v5);
}

void Espresso::pass_constant_if_conditions::hint_fallback_constant_ifs_from_metal(Espresso::pass_constant_if_conditions *this, Espresso::net *a2)
{
  uint64_t *v3;
  uint64_t *i;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  void *__p[2];
  char v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  void **v18;

  Espresso::run_pass_on_network<Espresso::pass_constant_if_conditions>((uint64_t)this);
  v3 = (uint64_t *)*((_QWORD *)this + 4);
  for (i = (uint64_t *)*((_QWORD *)this + 5); v3 != i; v3 += 2)
  {
    v6 = *v3;
    v5 = (std::__shared_weak_count *)v3[1];
    v16 = *v3;
    v17 = v5;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    v9 = *(_QWORD *)(v6 + 64);
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)Espresso::pass_constant_if_conditions::kernel_attribute_name);
    v18 = __p;
    v10 = *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v9 + 240, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v18)+ 10);
    if (v15 < 0)
      operator delete(__p[0]);
    v11 = *(_QWORD *)(v6 + 64);
    if (v10)
      *(_DWORD *)(v11 + 136) = 1;
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)Espresso::pass_constant_if_conditions::kernel_attribute_name);
    std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__erase_unique<std::string>((_QWORD *)(v11 + 240), (unsigned __int8 *)__p);
    if (v15 < 0)
    {
      operator delete(__p[0]);
      if (v5)
      {
LABEL_13:
        v12 = (unint64_t *)&v5->__shared_owners_;
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 - 1, v12));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
    }
    else if (v5)
    {
      goto LABEL_13;
    }
  }
}

void sub_191371044(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t Espresso::net::loaded_global_name(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  unsigned __int8 *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const void *v9;
  void *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v18;
  void *v19;
  char *v20;
  void *v21;
  _QWORD *v22;
  void *v23;
  std::__shared_weak_count *v24;

  if (!a1[121])
    Espresso::throw_exception_selector<Espresso::generic_error>("interpreter is needed by load_global layers");
  v4 = Espresso::net::get_analysis<Espresso::pass_blob_name_indexing_result>((uint64_t)a1);
  v5 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>(v4 + 2, (unsigned __int8 *)a2);
  if (!v5)
  {
    if (*(char *)(a2 + 23) >= 0)
      v19 = (void *)a2;
    else
      v19 = *(void **)a2;
    v23 = v19;
    v20 = "Blob %s does not exist";
LABEL_27:
    Espresso::throw_exception_selector<Espresso::generic_error,char const*&>(v20, &v23);
  }
  v6 = *(_QWORD *)(v4[19] + 8 * *((int *)v5 + 10));
  v7 = a1[4];
  if (v6 >= (a1[5] - v7) >> 4)
  {
    if (*(char *)(a2 + 23) >= 0)
      v21 = (void *)a2;
    else
      v21 = *(void **)a2;
    v23 = v21;
    v20 = "Blob %s is not loaded from global";
    goto LABEL_27;
  }
  v8 = *(_QWORD *)(v7 + 16 * v6);
  v9 = *(const void **)(v8 + 64);
  if (!v9
  {
    v23 = 0;
    v24 = 0;
    v18 = (_QWORD *)(v8 + 16);
    if (*(char *)(v8 + 39) < 0)
      v18 = (_QWORD *)*v18;
    v22 = v18;
    Espresso::throw_exception_selector<Espresso::generic_error,char const*&>("layer %s is not a load_global layer", &v22);
  }
  v11 = *(std::__shared_weak_count **)(v8 + 72);
  v23 = v10;
  v24 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  v14 = (*(uint64_t (**)(void *))(*(_QWORD *)v10 + 320))(v10);
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  return v14;
}

void sub_1913711F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::net_fast_reshaper>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBB6D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::net_fast_reshaper>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBB6D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::net_fast_reshaper>::__on_zero_shared(uint64_t a1)
{
  void *v2;
  void *v3;
  void **v4;

  v2 = *(void **)(a1 + 104);
  if (v2)
    operator delete(v2);
  v3 = *(void **)(a1 + 80);
  if (v3)
  {
    *(_QWORD *)(a1 + 88) = v3;
    operator delete(v3);
  }
  v4 = (void **)(a1 + 56);
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = (void **)(a1 + 32);
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v4);
}

void Espresso::net::set_analysis_model_metadata(Espresso::net *this, const std::string *a2)
{
  Espresso::analysis_debug_metadata *v4;
  _QWORD *v5;
  __int128 v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  Espresso::analysis_debug_metadata *v13[2];

  Espresso::net::get_analysis_if_existing<Espresso::analysis_debug_metadata>((uint64_t)this, v13);
  v4 = v13[0];
  if (!v13[0])
  {
    v5 = operator new(0xF0uLL);
    v5[1] = 0;
    v5[2] = 0;
    *v5 = &off_1E2DBCD60;
    v5[3] = &off_1E2D8F218;
    *((_OWORD *)v5 + 2) = 0u;
    *((_OWORD *)v5 + 3) = 0u;
    *((_OWORD *)v5 + 4) = 0u;
    *((_OWORD *)v5 + 5) = 0u;
    *((_OWORD *)v5 + 6) = 0u;
    *((_OWORD *)v5 + 7) = 0u;
    *((_OWORD *)v5 + 8) = 0u;
    *((_OWORD *)v5 + 9) = 0u;
    *((_OWORD *)v5 + 10) = 0u;
    *((_OWORD *)v5 + 11) = 0u;
    *((_OWORD *)v5 + 12) = 0u;
    *((_OWORD *)v5 + 13) = 0u;
    v5[28] = 0;
    *((_DWORD *)v5 + 58) = 1065353216;
    *(_QWORD *)&v6 = v5 + 3;
    *((_QWORD *)&v6 + 1) = v5;
    v7 = (std::__shared_weak_count *)v13[1];
    *(_OWORD *)v13 = v6;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v4 = v13[0];
  }
  Espresso::analysis_debug_metadata::set_model_metadata(v4, a2);
  Espresso::net::set_analysis<Espresso::analysis_debug_metadata>((uint64_t)this, v13);
  v10 = (std::__shared_weak_count *)v13[1];
  if (v13[1])
  {
    v11 = (unint64_t *)((char *)v13[1] + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_1913713D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void Espresso::net::get_analysis_if_existing<Espresso::analysis_debug_metadata>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;
  _QWORD *v4;
  const void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  void *v14;

  v3 = std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::find<std::type_index>((_QWORD *)(a1 + 1120), (uint64_t)&v14);
  if (!v3)
  {
    *a2 = 0;
    a2[1] = 0;
    return;
  }
  v4 = v3;
  v5 = (const void *)v3[3];
  v6 = (std::__shared_weak_count *)v4[4];
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  if (v5
  {
    *a2 = v9;
    a2[1] = v6;
    if (!v6)
      return;
    v10 = (unint64_t *)&v6->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    if (!v6)
      return;
  }
  v12 = (unint64_t *)&v6->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
}

void std::__shared_ptr_emplace<Espresso::analysis_debug_metadata>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBCD60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::analysis_debug_metadata>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBCD60;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void Espresso::net::get_analysis_model_metadata(Espresso::net *this@<X0>, std::string *a2@<X8>)
{
  char v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  Espresso::net::get_analysis_if_existing<Espresso::analysis_debug_metadata>((uint64_t)this, &v7);
  v3 = v7;
  if (v7)
  {
    Espresso::model_metadata_t::model_metadata_t(a2, (__int128 *)(v7 + 8));
    v3 = 1;
  }
  else
  {
    a2->__r_.__value_.__s.__data_[0] = 0;
  }
  a2[7].__r_.__value_.__s.__data_[0] = v3;
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_19137159C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

std::string *Espresso::model_metadata_t::model_metadata_t(std::string *this, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  std::string *v10;
  __int128 v11;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v5 = *(__int128 *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  }
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(this + 2, *((const std::string::value_type **)a2 + 6), *((_QWORD *)a2 + 7));
  }
  else
  {
    v6 = a2[3];
    this[2].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 8);
    *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v6;
  }
  if (*((char *)a2 + 95) < 0)
  {
    std::string::__init_copy_ctor_external(this + 3, *((const std::string::value_type **)a2 + 9), *((_QWORD *)a2 + 10));
  }
  else
  {
    v7 = *(__int128 *)((char *)a2 + 72);
    this[3].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 11);
    *(_OWORD *)&this[3].__r_.__value_.__l.__data_ = v7;
  }
  if (*((char *)a2 + 119) < 0)
  {
    std::string::__init_copy_ctor_external(this + 4, *((const std::string::value_type **)a2 + 12), *((_QWORD *)a2 + 13));
  }
  else
  {
    v8 = a2[6];
    this[4].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 14);
    *(_OWORD *)&this[4].__r_.__value_.__l.__data_ = v8;
  }
  if (*((char *)a2 + 143) < 0)
  {
    std::string::__init_copy_ctor_external(this + 5, *((const std::string::value_type **)a2 + 15), *((_QWORD *)a2 + 16));
  }
  else
  {
    v9 = *(__int128 *)((char *)a2 + 120);
    this[5].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 17);
    *(_OWORD *)&this[5].__r_.__value_.__l.__data_ = v9;
  }
  v10 = this + 6;
  if (*((char *)a2 + 167) < 0)
  {
    std::string::__init_copy_ctor_external(v10, *((const std::string::value_type **)a2 + 18), *((_QWORD *)a2 + 19));
  }
  else
  {
    v11 = a2[9];
    this[6].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 20);
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
  }
  return this;
}

void sub_191371730(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void **v4;
  void **v5;
  void **v6;

  if (*(char *)(v1 + 143) < 0)
    operator delete(*v6);
  if (*(char *)(v1 + 119) < 0)
    operator delete(*v5);
  if (*(char *)(v1 + 95) < 0)
    operator delete(*v4);
  if (*(char *)(v1 + 71) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void Espresso::interpreter_t::~interpreter_t(Espresso::interpreter_t *this)
{
  Espresso::interpreter_t::~interpreter_t(this);
  JUMPOUT(0x19401CD90);
}

{
  Espresso::interpreter_t *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  *(_QWORD *)this = &off_1E2D60F10;
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)this + 184);
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::~__hash_table((uint64_t)this + 144);
  v2 = (Espresso::interpreter_t *)*((_QWORD *)this + 17);
  if (v2 == (Espresso::interpreter_t *)((char *)this + 112))
  {
    v3 = 4;
    v2 = (Espresso::interpreter_t *)((char *)this + 112);
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v2 + 8 * v3))();
LABEL_6:
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 13);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  Espresso::abstract_executor_t::~abstract_executor_t(this);
}

void Espresso::interpreter_t::setup(Espresso::interpreter_t *a1, uint64_t *a2)
{
  uint64_t **i;
  uint64_t **v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  _QWORD *v9;
  const char *v10;
  NSObject *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t *v17;
  _QWORD *v18;
  const char *v19;
  NSObject *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t *v26;
  _QWORD *v27;
  const char *v28;
  NSObject *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t *v36;
  _QWORD *v37;
  const char *v38;
  NSObject *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t *v45;
  _QWORD *v46;
  const char *v47;
  NSObject *v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t *v54;
  _QWORD *v55;
  const char *v56;
  NSObject *v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t *v62;
  unint64_t *v63;
  _QWORD *v64;
  const char *v65;
  NSObject *v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t *v71;
  unint64_t *v72;
  _QWORD *v73;
  const char *v74;
  NSObject *v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  __int128 v83;
  unint64_t *v84;
  unint64_t v85;
  uint64_t v87;
  std::__shared_weak_count *v88;
  char v89;
  __int128 buf;
  std::__shared_weak_count *v91;
  uint64_t v92;

  v92 = *MEMORY[0x1E0C80C00];
  (*(void (**)(Espresso::interpreter_t *))(*(_QWORD *)a1 + 40))(a1);
  v4 = (uint64_t **)*((_QWORD *)a1 + 2);
  for (i = (uint64_t **)*((_QWORD *)a1 + 3); v4 != i; ++v4)
  {
    v5 = *v4;
    std::shared_ptr<Espresso::net>::shared_ptr[abi:ne180100]<Espresso::net,void>(&v87, **v4, (std::__shared_weak_count *)(*v4)[1]);
    v6 = v87;
    if ((uint64_t *)v87 != v5)
    {
      std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,Espresso::layer_shape>,std::__tree_node<std::__value_type<std::string,Espresso::layer_shape>,void *> *,long>>((uint64_t **)(v87 + 184), (__int128 *)v5[23], (__int128 *)v5 + 12);
      std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,Espresso::layer_shape>,std::__tree_node<std::__value_type<std::string,Espresso::layer_shape>,void *> *,long>>((uint64_t **)(v6 + 208), (__int128 *)v5[26], (__int128 *)(v5 + 27));
    }
    v7 = (unint64_t *)operator new(0x30uLL);
    v7[1] = 0;
    v8 = v7 + 1;
    v7[2] = 0;
    *v7 = (unint64_t)&off_1E2DB9B80;
    v7[3] = (unint64_t)&off_1E2D73248;
    v9 = v7 + 3;
    v7[4] = 0;
    v7[5] = 0;
    Espresso::espresso_os_log_subsystem((Espresso *)v7, v10);
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = (unint64_t)"N8Espresso16pass_bind_labelsE" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_debug_impl(&dword_190DAF000, v11, OS_LOG_TYPE_DEBUG, "run_pass_on_network %s", (uint8_t *)&buf, 0xCu);
    }

    (*(void (**)(__int128 *__return_ptr, _QWORD *, uint64_t))(*v9 + 24))(&buf, v9, v6);
    v89 = 0;
    (*(void (**)(_QWORD *, char *))(*v9 + 16))(v9, &v89);
    if (v89)
    {
      if ((_BYTE)buf)
        Espresso::net::set_analysis<Espresso::analysis_result>(v6, (uint64_t *)&buf + 1);
      else
        std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::__erase_unique<std::type_index>((uint64_t *)(v6 + 1120), *(_QWORD *)(MEMORY[0x1E0DE4F20] + 8));
    }
    v12 = v91;
    if (v91)
    {
      p_shared_owners = (unint64_t *)&v91->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    do
      v15 = __ldaxr(v8);
    while (__stlxr(v15 - 1, v8));
    if (!v15)
    {
      (*(void (**)(unint64_t *))(*v7 + 16))(v7);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v7);
    }
    v16 = (unint64_t *)operator new(0x30uLL);
    v16[1] = 0;
    v17 = v16 + 1;
    v16[2] = 0;
    *v16 = (unint64_t)&off_1E2DBCF58;
    v16[3] = (unint64_t)&off_1E2D903D8;
    v18 = v16 + 3;
    v16[4] = 0;
    v16[5] = 0;
    Espresso::espresso_os_log_subsystem((Espresso *)v16, v19);
    v20 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = (unint64_t)"N8Espresso23pass_control_flow_graphE" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_debug_impl(&dword_190DAF000, v20, OS_LOG_TYPE_DEBUG, "run_pass_on_network %s", (uint8_t *)&buf, 0xCu);
    }

    (*(void (**)(__int128 *__return_ptr, _QWORD *, uint64_t))(*v18 + 24))(&buf, v18, v6);
    v89 = 0;
    (*(void (**)(_QWORD *, char *))(*v18 + 16))(v18, &v89);
    if (v89)
    {
      if ((_BYTE)buf)
        Espresso::net::set_analysis<Espresso::analysis_result>(v6, (uint64_t *)&buf + 1);
      else
        std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::__erase_unique<std::type_index>((uint64_t *)(v6 + 1120), (uint64_t)"N8Espresso18control_flow_graphE");
    }
    v21 = v91;
    if (v91)
    {
      v22 = (unint64_t *)&v91->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    do
      v24 = __ldaxr(v17);
    while (__stlxr(v24 - 1, v17));
    if (!v24)
    {
      (*(void (**)(unint64_t *))(*v16 + 16))(v16);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v16);
    }
    v25 = (unint64_t *)operator new(0x30uLL);
    v25[1] = 0;
    v26 = v25 + 1;
    v25[2] = 0;
    *v25 = (unint64_t)&off_1E2DB70D8;
    v25[3] = (unint64_t)&off_1E2D60F80;
    v27 = v25 + 3;
    v25[4] = 0;
    v25[5] = 0;
    Espresso::espresso_os_log_subsystem((Espresso *)v25, v28);
    v29 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = (unint64_t)"N8Espresso13pass_make_ssaE" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_debug_impl(&dword_190DAF000, v29, OS_LOG_TYPE_DEBUG, "run_pass_on_network %s", (uint8_t *)&buf, 0xCu);
    }

    (*(void (**)(__int128 *__return_ptr, _QWORD *, uint64_t))(*v27 + 24))(&buf, v27, v6);
    v89 = 0;
    (*(void (**)(_QWORD *, char *))(*v27 + 16))(v27, &v89);
    if (v89)
    {
      if ((_BYTE)buf)
        Espresso::net::set_analysis<Espresso::analysis_result>(v6, (uint64_t *)&buf + 1);
      else
        std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::__erase_unique<std::type_index>((uint64_t *)(v6 + 1120), (uint64_t)"N8Espresso17analysis_make_ssaE");
    }
    v30 = v91;
    if (v91)
    {
      v31 = (unint64_t *)&v91->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    do
      v33 = __ldaxr(v26);
    while (__stlxr(v33 - 1, v26));
    if (!v33)
    {
      (*(void (**)(unint64_t *))(*v25 + 16))(v25);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v25);
    }
    v34 = v87;
    v35 = (unint64_t *)operator new(0x30uLL);
    v35[1] = 0;
    v36 = v35 + 1;
    v35[2] = 0;
    *v35 = (unint64_t)&off_1E2DBCC48;
    v35[3] = (unint64_t)&off_1E2D8EF30;
    v37 = v35 + 3;
    v35[4] = 0;
    v35[5] = 0;
    Espresso::espresso_os_log_subsystem((Espresso *)v35, v38);
    v39 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = (unint64_t)"N8Espresso22pass_tag_dynamic_blobsE" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_debug_impl(&dword_190DAF000, v39, OS_LOG_TYPE_DEBUG, "run_pass_on_network %s", (uint8_t *)&buf, 0xCu);
    }

    (*(void (**)(__int128 *__return_ptr, _QWORD *, uint64_t))(*v37 + 24))(&buf, v37, v34);
    v89 = 0;
    (*(void (**)(_QWORD *, char *))(*v37 + 16))(v37, &v89);
    if (v89)
    {
      if ((_BYTE)buf)
        Espresso::net::set_analysis<Espresso::analysis_result>(v34, (uint64_t *)&buf + 1);
      else
        std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::__erase_unique<std::type_index>((uint64_t *)(v34 + 1120), (uint64_t)"N8Espresso26analysis_tag_dynamic_blobsE");
    }
    v40 = v91;
    if (v91)
    {
      v41 = (unint64_t *)&v91->__shared_owners_;
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
    do
      v43 = __ldaxr(v36);
    while (__stlxr(v43 - 1, v36));
    if (!v43)
    {
      (*(void (**)(unint64_t *))(*v35 + 16))(v35);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v35);
    }
    v44 = (unint64_t *)operator new(0x30uLL);
    v44[1] = 0;
    v45 = v44 + 1;
    v44[2] = 0;
    *v44 = (unint64_t)&off_1E2DBC200;
    v44[3] = (unint64_t)&off_1E2D87770;
    v46 = v44 + 3;
    v44[4] = 0;
    v44[5] = 0;
    Espresso::espresso_os_log_subsystem((Espresso *)v44, v47);
    v48 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v48, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = (unint64_t)"N8Espresso20pass_block_transformE" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_debug_impl(&dword_190DAF000, v48, OS_LOG_TYPE_DEBUG, "run_pass_on_network %s", (uint8_t *)&buf, 0xCu);
    }

    (*(void (**)(__int128 *__return_ptr, _QWORD *, uint64_t))(*v46 + 24))(&buf, v46, v6);
    v89 = 0;
    (*(void (**)(_QWORD *, char *))(*v46 + 16))(v46, &v89);
    if (v89)
    {
      if ((_BYTE)buf)
        Espresso::net::set_analysis<Espresso::analysis_result>(v6, (uint64_t *)&buf + 1);
      else
        std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::__erase_unique<std::type_index>((uint64_t *)(v6 + 1120), (uint64_t)"N8Espresso24analysis_block_transformE");
    }
    v49 = v91;
    if (v91)
    {
      v50 = (unint64_t *)&v91->__shared_owners_;
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
    }
    do
      v52 = __ldaxr(v45);
    while (__stlxr(v52 - 1, v45));
    if (!v52)
    {
      (*(void (**)(unint64_t *))(*v44 + 16))(v44);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v44);
    }
    v53 = (unint64_t *)operator new(0x30uLL);
    v53[1] = 0;
    v54 = v53 + 1;
    v53[2] = 0;
    *v53 = (unint64_t)&off_1E2DBD3B8;
    v53[3] = (unint64_t)&off_1E2D92050;
    v55 = v53 + 3;
    v53[4] = 0;
    v53[5] = 0;
    Espresso::espresso_os_log_subsystem((Espresso *)v53, v56);
    v57 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v57, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = (unint64_t)"N8Espresso24pass_re_lower_to_networkE" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_debug_impl(&dword_190DAF000, v57, OS_LOG_TYPE_DEBUG, "run_pass_on_network %s", (uint8_t *)&buf, 0xCu);
    }

    (*(void (**)(__int128 *__return_ptr, _QWORD *, uint64_t))(*v55 + 24))(&buf, v55, v6);
    v89 = 0;
    (*(void (**)(_QWORD *, char *))(*v55 + 16))(v55, &v89);
    if (v89)
    {
      if ((_BYTE)buf)
        Espresso::net::set_analysis<Espresso::analysis_result>(v6, (uint64_t *)&buf + 1);
      else
        std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::__erase_unique<std::type_index>((uint64_t *)(v6 + 1120), (uint64_t)"N8Espresso28analysis_re_lower_to_networkE");
    }
    v58 = v91;
    if (v91)
    {
      v59 = (unint64_t *)&v91->__shared_owners_;
      do
        v60 = __ldaxr(v59);
      while (__stlxr(v60 - 1, v59));
      if (!v60)
      {
        ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
        std::__shared_weak_count::__release_weak(v58);
      }
    }
    do
      v61 = __ldaxr(v54);
    while (__stlxr(v61 - 1, v54));
    if (!v61)
    {
      (*(void (**)(unint64_t *))(*v53 + 16))(v53);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v53);
    }
    v62 = (unint64_t *)operator new(0x30uLL);
    v62[1] = 0;
    v63 = v62 + 1;
    v62[2] = 0;
    *v62 = (unint64_t)&off_1E2DB70A0;
    v62[3] = (unint64_t)&off_1E2D60F50;
    v64 = v62 + 3;
    v62[4] = 0;
    v62[5] = 0;
    Espresso::espresso_os_log_subsystem((Espresso *)v62, v65);
    v66 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v66, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = (unint64_t)"N8Espresso13pass_livenessE" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_debug_impl(&dword_190DAF000, v66, OS_LOG_TYPE_DEBUG, "run_pass_on_network %s", (uint8_t *)&buf, 0xCu);
    }

    (*(void (**)(__int128 *__return_ptr, _QWORD *, uint64_t))(*v64 + 24))(&buf, v64, v6);
    v89 = 0;
    (*(void (**)(_QWORD *, char *))(*v64 + 16))(v64, &v89);
    if (v89)
    {
      if ((_BYTE)buf)
        Espresso::net::set_analysis<Espresso::analysis_result>(v6, (uint64_t *)&buf + 1);
      else
        std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::__erase_unique<std::type_index>((uint64_t *)(v6 + 1120), (uint64_t)"N8Espresso17analysis_livenessE");
    }
    v67 = v91;
    if (v91)
    {
      v68 = (unint64_t *)&v91->__shared_owners_;
      do
        v69 = __ldaxr(v68);
      while (__stlxr(v69 - 1, v68));
      if (!v69)
      {
        ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
        std::__shared_weak_count::__release_weak(v67);
      }
    }
    do
      v70 = __ldaxr(v63);
    while (__stlxr(v70 - 1, v63));
    if (!v70)
    {
      (*(void (**)(unint64_t *))(*v62 + 16))(v62);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v62);
    }
    v71 = (unint64_t *)operator new(0x30uLL);
    v71[1] = 0;
    v72 = v71 + 1;
    v71[2] = 0;
    *v71 = (unint64_t)&off_1E2DB83A8;
    v71[3] = (unint64_t)&off_1E2D67FA8;
    v73 = v71 + 3;
    v71[4] = 0;
    v71[5] = 0;
    Espresso::espresso_os_log_subsystem((Espresso *)v71, v74);
    v75 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v75, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = (unint64_t)"N8Espresso15pass_allocationE" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_debug_impl(&dword_190DAF000, v75, OS_LOG_TYPE_DEBUG, "run_pass_on_network %s", (uint8_t *)&buf, 0xCu);
    }

    (*(void (**)(__int128 *__return_ptr, _QWORD *, uint64_t))(*v73 + 24))(&buf, v73, v6);
    v89 = 0;
    (*(void (**)(_QWORD *, char *))(*v73 + 16))(v73, &v89);
    if (v89)
    {
      if ((_BYTE)buf)
        Espresso::net::set_analysis<Espresso::analysis_result>(v6, (uint64_t *)&buf + 1);
      else
        std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::__erase_unique<std::type_index>((uint64_t *)(v6 + 1120), (uint64_t)"N8Espresso19analysis_allocationE");
    }
    v76 = v91;
    if (v91)
    {
      v77 = (unint64_t *)&v91->__shared_owners_;
      do
        v78 = __ldaxr(v77);
      while (__stlxr(v78 - 1, v77));
      if (!v78)
      {
        ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
        std::__shared_weak_count::__release_weak(v76);
      }
    }
    do
      v79 = __ldaxr(v72);
    while (__stlxr(v79 - 1, v72));
    if (!v79)
    {
      (*(void (**)(unint64_t *))(*v71 + 16))(v71);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v71);
    }
    Espresso::run_pass_on_network<Espresso::pass_blob_name_indexing>(v6);
    Espresso::run_pass_on_network<Espresso::pass_update_absolute_indexes_after_transform>(v6);
    v80 = v88;
    if (v88)
    {
      v81 = (unint64_t *)&v88->__shared_owners_;
      do
        v82 = __ldaxr(v81);
      while (__stlxr(v82 - 1, v81));
      if (!v82)
      {
        ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
        std::__shared_weak_count::__release_weak(v80);
      }
    }
  }
  Espresso::net::get_analysis_if_existing<Espresso::analysis_multi_head_program_gen>(&buf, *a2);
  v83 = buf;
  if (!*((_QWORD *)&buf + 1))
    goto LABEL_126;
  v84 = (unint64_t *)(*((_QWORD *)&buf + 1) + 8);
  do
    v85 = __ldaxr(v84);
  while (__stlxr(v85 - 1, v84));
  if (v85)
  {
LABEL_126:
    if ((_QWORD)v83)
      goto LABEL_128;
    goto LABEL_127;
  }
  (*(void (**)(_QWORD))(**((_QWORD **)&v83 + 1) + 16))(*((_QWORD *)&v83 + 1));
  std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v83 + 1));
  if (!(_QWORD)v83)
LABEL_127:
    Espresso::interpreter_t::setup_fix_context_transfer_races(a1);
LABEL_128:
  if (Espresso::interpreter_t::setup(std::shared_ptr<Espresso::net>,Espresso::compute_path,std::shared_ptr<Espresso::SerDes::generic_serdes_object>)::onceToken != -1)
    dispatch_once(&Espresso::interpreter_t::setup(std::shared_ptr<Espresso::net>,Espresso::compute_path,std::shared_ptr<Espresso::SerDes::generic_serdes_object>)::onceToken, &__block_literal_global_1356);
}

void sub_1913724A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  unint64_t *v14;
  std::__shared_weak_count *v15;
  unint64_t v17;
  va_list va;

  va_start(va, a14);
  do
    v17 = __ldaxr(v14);
  while (__stlxr(v17 - 1, v14));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void Espresso::interpreter_t::setup_fix_context_transfer_races(Espresso::interpreter_t *this)
{
  uint64_t *v1;
  uint64_t *i;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  const void *v7;
  _BYTE *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;

  v1 = (uint64_t *)*((_QWORD *)this + 2);
  for (i = (uint64_t *)*((_QWORD *)this + 3); v1 != i; ++v1)
  {
    v3 = *v1;
    v4 = *(_QWORD *)(*v1 + 32);
    if (*(_QWORD *)(*v1 + 40) != v4)
    {
      v5 = 0;
      do
      {
        v6 = *(_QWORD *)(v4 + 16 * v5);
        v7 = *(const void **)(v6 + 64);
        if (v7)
        {
          if (v8)
          {
            v9 = *(std::__shared_weak_count **)(v6 + 72);
            if (v9)
            {
              p_shared_owners = (unint64_t *)&v9->__shared_owners_;
              do
                v11 = __ldxr(p_shared_owners);
              while (__stxr(v11 + 1, p_shared_owners));
              v8[344] = 1;
              do
                v12 = __ldaxr(p_shared_owners);
              while (__stlxr(v12 - 1, p_shared_owners));
              if (!v12)
              {
                ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
                std::__shared_weak_count::__release_weak(v9);
              }
            }
            else
            {
              v8[344] = 1;
            }
          }
        }
        ++v5;
        v4 = *(_QWORD *)(v3 + 32);
      }
      while (v5 < (*(_QWORD *)(v3 + 40) - v4) >> 4);
    }
  }
}

void ___ZN8Espresso13interpreter_t5setupENSt3__110shared_ptrINS_3netEEENS_12compute_pathENS2_INS_6SerDes21generic_serdes_objectEEE_block_invoke()
{
  void *v0;
  void *v1;
  id v2;

  objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "persistentDomainForName:", *MEMORY[0x1E0CB2B58]);
  v2 = (id)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v2, "objectForKeyedSubscript:", CFSTR("espresso.interpreter.verbose"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  super_verbose = objc_msgSend(v1, "BOOLValue");

}

void sub_191372940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void Espresso::throw_exception_selector<Espresso::invalid_state_error,unsigned long &,unsigned long>(char *a1, uint64_t a2, uint64_t a3)
{
  Espresso::throw_exception_with_format<Espresso::invalid_state_error>(a1, a2, a3);
}

uint64_t *resolve_virtual_phi(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  float v12;
  const char *v13;
  uint64_t v14;
  Espresso *v15;
  __int128 v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  NSObject *v25;
  __int128 v27;
  _BYTE buf[22];
  __int16 v29;
  double v30;
  void *__p;
  void *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v3 = *a1;
  v2 = a1[1];
  v4 = *(_QWORD *)(**a1 + 152);
  v5 = 0;
  v6 = (char *)v2 - (char *)*a1;
  if (v2 != *a1)
  {
    v7 = 0;
    v8 = v6 >> 4;
    if (v8 <= 1)
      v8 = 1;
    v9 = *a1;
    do
    {
      v10 = *v9;
      v9 += 2;
      v11 = *(_QWORD *)(v10 + 152);
      if (v11 > v4)
      {
        v4 = v11;
        v5 = v7;
      }
      ++v7;
    }
    while (v8 != v7);
  }
  if (super_verbose)
  {
    v12 = nanf("nan");
    Espresso::abstract_blob_container::shape(buf, v3[2 * v5]);
    v14 = Espresso::layer_shape::total_dim((Espresso::layer_shape *)buf);
    v15 = (Espresso *)__p;
    if (__p)
    {
      v32 = __p;
      operator delete(__p);
    }
    if (v14 >= 1)
    {
      v16 = *(_OWORD *)&(*a1)[2 * v5];
      v27 = v16;
      if (*((_QWORD *)&v16 + 1))
      {
        v17 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
        do
          v18 = __ldxr(v17);
        while (__stxr(v18 + 1, v17));
      }
      Espresso::sync_copy_to_host(buf, &v27);
      v19 = (std::__shared_weak_count *)*((_QWORD *)&v27 + 1);
      if (*((_QWORD *)&v27 + 1))
      {
        v20 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      v22 = *(std::__shared_weak_count **)&buf[8];
      v12 = **(float **)(*(_QWORD *)buf + 24);
      if (*(_QWORD *)&buf[8])
      {
        v23 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
    }
    Espresso::espresso_os_log_subsystem(v15, v13);
    v25 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134218496;
      *(_QWORD *)&buf[4] = v5;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v4;
      v29 = 2048;
      v30 = v12;
      _os_log_debug_impl(&dword_190DAF000, v25, OS_LOG_TYPE_DEBUG, "resolve_virtual_phi: idx=%zu ts=%zu v=%.2f X\n", buf, 0x20u);
    }

    v3 = *a1;
  }
  return &v3[2 * v5];
}

void sub_191372B98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::resize(int64x2_t *a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  _QWORD *v16;
  _QWORD *v17;
  __int128 v18;
  int64x2_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64x2_t v23;
  char *v24;
  int64x2_t *v25;

  v3 = a1->i64[0];
  v4 = a1->i64[1];
  v5 = (v4 - a1->i64[0]) >> 4;
  if (a2 <= v5)
  {
    if (a2 < v5)
    {
      v20 = v3 + 16 * a2;
      while (v4 != v20)
      {
        v4 -= 16;
        std::shared_ptr<void>::~shared_ptr[abi:ne180100](v4);
      }
      a1->i64[1] = v20;
    }
  }
  else
  {
    v6 = a2 - v5;
    v7 = a1[1].i64[0];
    if (a2 - v5 <= (v7 - v4) >> 4)
    {
      bzero((void *)a1->i64[1], 16 * v6);
      a1->i64[1] = v4 + 16 * v6;
    }
    else
    {
      if (a2 >> 60)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v25 = a1 + 1;
      v8 = v7 - v3;
      v9 = v8 >> 3;
      if (v8 >> 3 <= a2)
        v9 = a2;
      if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
        v10 = 0xFFFFFFFFFFFFFFFLL;
      else
        v10 = v9;
      v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      v12 = &v11[16 * v5];
      v14 = &v11[16 * v13];
      v24 = v14;
      bzero(v12, 16 * v6);
      v15 = &v12[16 * v6];
      v23.i64[1] = (uint64_t)v15;
      v17 = (_QWORD *)a1->i64[0];
      v16 = (_QWORD *)a1->i64[1];
      if (v16 == (_QWORD *)a1->i64[0])
      {
        v19 = vdupq_n_s64((unint64_t)v16);
      }
      else
      {
        do
        {
          v18 = *((_OWORD *)v16 - 1);
          v16 -= 2;
          *((_OWORD *)v12 - 1) = v18;
          v12 -= 16;
          *v16 = 0;
          v16[1] = 0;
        }
        while (v16 != v17);
        v19 = *a1;
        v15 = (char *)v23.i64[1];
        v14 = v24;
      }
      a1->i64[0] = (uint64_t)v12;
      a1->i64[1] = (uint64_t)v15;
      v23 = v19;
      v21 = a1[1].i64[0];
      a1[1].i64[0] = (uint64_t)v14;
      v24 = (char *)v21;
      v22 = v19.i64[0];
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v22);
    }
  }
}

_QWORD *std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(_QWORD *result, unint64_t a2)
{
  char **v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  __int128 v9;
  int64x2_t v10;
  char *v11;
  uint64_t v12;
  int64x2_t v13;
  char *v14;
  _QWORD *v15;

  if (a2 > (uint64_t)(result[2] - *result) >> 4)
  {
    if (a2 >> 60)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v2 = (char **)result;
    v3 = result[1] - *result;
    v15 = result + 2;
    v4 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(a2);
    v7 = *v2;
    v6 = v2[1];
    if (v6 == *v2)
    {
      v10 = vdupq_n_s64((unint64_t)v6);
      v8 = &v4[v3];
    }
    else
    {
      v8 = &v4[v3];
      do
      {
        v9 = *((_OWORD *)v6 - 1);
        v6 -= 16;
        *((_OWORD *)v8 - 1) = v9;
        v8 -= 16;
        *(_QWORD *)v6 = 0;
        *((_QWORD *)v6 + 1) = 0;
      }
      while (v6 != v7);
      v10 = *(int64x2_t *)v2;
    }
    *v2 = v8;
    v2[1] = &v4[v3];
    v13 = v10;
    v11 = v2[2];
    v2[2] = &v4[16 * v5];
    v14 = v11;
    v12 = v10.i64[0];
    return (_QWORD *)std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v12);
  }
  return result;
}

void std::__shared_ptr_emplace<Espresso::return_status_t>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB8488;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::return_status_t>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB8488;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::return_status_t>::__on_zero_shared(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 24);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void std::__shared_ptr_emplace<Espresso::abstract_blob_container_options_aliasing>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBE998;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::abstract_blob_container_options_aliasing>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBE998;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::per_network_phi_state_t>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBD000;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::per_network_phi_state_t>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBD000;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::per_network_phi_state_t>::__on_zero_shared(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 64);
  if (v2)
    operator delete(v2);
  return std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](a1 + 24);
}

void std::__shared_ptr_emplace<Espresso::interpreter_state_t>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBBD68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::interpreter_state_t>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBBD68;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t Espresso::ssa_blob_name::ssa_blob_name(uint64_t a1, uint64_t a2)
{
  void **v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE *v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;
  int v11;
  int v12;
  std::string::size_type v13;
  std::string::size_type size;
  std::string::size_type v15;
  unint64_t v16;
  std::string::size_type v17;
  std::string::size_type v18;
  std::string v20;
  std::string __str;
  char v22;

  *(_OWORD *)(a1 + 8) = 0u;
  v4 = (void **)(a1 + 8);
  *(_BYTE *)a1 = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  std::string::operator=((std::string *)(a1 + 8), (const std::string *)a2);
  v5 = *(unsigned __int8 *)(a2 + 23);
  if ((v5 & 0x80u) == 0)
    v6 = (_BYTE *)a2;
  else
    v6 = *(_BYTE **)a2;
  if ((v5 & 0x80u) != 0)
    v5 = *(_QWORD *)(a2 + 8);
  if (v5)
  {
    v7 = &v6[v5];
    v8 = v6;
    v9 = v7;
    do
    {
      if (*v8 == 95)
      {
        v10 = 1u;
        while (v10 != 14)
        {
          if (&v8[v10] == v7)
            goto LABEL_17;
          v11 = v8[v10];
          v12 = aSsaVersion[v10++];
          if (v11 != v12)
            goto LABEL_9;
        }
        v9 = v8;
      }
LABEL_9:
      ++v8;
    }
    while (v8 != v7);
LABEL_17:
    if (v9 != v7)
    {
      v13 = v9 - v6;
      if (v9 - v6 != -1)
      {
        std::string::basic_string[abi:ne180100]<0>(&__str, "_@ssa_version_");
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        {
          size = __str.__r_.__value_.__l.__size_;
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        else
        {
          size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        }
        if (*(char *)(a2 + 23) >= 0)
          v15 = *(unsigned __int8 *)(a2 + 23);
        else
          v15 = *(_QWORD *)(a2 + 8);
        std::string::basic_string(&__str, (const std::string *)a2, size + v13, v15, (std::allocator<char> *)&v20);
        v16 = std::stoul(&__str, 0, 10);
        *(_QWORD *)(a1 + 32) = v16;
        std::to_string(&v20, v16);
        if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v17 = HIBYTE(v20.__r_.__value_.__r.__words[2]);
        else
          v17 = v20.__r_.__value_.__l.__size_;
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v18 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        else
          v18 = __str.__r_.__value_.__l.__size_;
        if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v20.__r_.__value_.__l.__data_);
        if (v17 == v18)
        {
          *(_BYTE *)a1 = 1;
          std::string::basic_string(&v20, (const std::string *)a2, 0, v13, (std::allocator<char> *)&v22);
          if (*(char *)(a1 + 31) < 0)
            operator delete(*v4);
          *(std::string *)v4 = v20;
        }
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
      }
    }
  }
  return a1;
}

void sub_191373164(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::logic_error __p, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;
  void **v18;
  const std::logic_error *exception_ptr;

  if (a17 < 0)
    operator delete(__p.__vftable);
  if (a2 == 1)
  {
    exception_ptr = (const std::logic_error *)__cxa_get_exception_ptr(exception_object);
    std::logic_error::logic_error(&__p, exception_ptr);
    __p.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_begin_catch(exception_object);
    MEMORY[0x19401C790](&__p);
    __cxa_end_catch();
    JUMPOUT(0x191373148);
  }
  if (*(char *)(v17 + 31) < 0)
    operator delete(*v18);
  _Unwind_Resume(exception_object);
}

void Espresso::ssa_blob_name::repr(std::string *this, uint64_t a2)
{
  size_t v4;
  std::string *v5;
  const void *v6;
  std::string *p_p;
  std::string::size_type size;
  std::string *v9;
  __int128 v10;
  std::string __p;
  std::string v12;

  if (*(_BYTE *)a2)
  {
    if (*(char *)(a2 + 31) >= 0)
      v4 = *(unsigned __int8 *)(a2 + 31);
    else
      v4 = *(_QWORD *)(a2 + 16);
    v5 = &v12;
    std::string::basic_string[abi:ne180100]((uint64_t)&v12, v4 + 14);
    if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v5 = (std::string *)v12.__r_.__value_.__r.__words[0];
    if (v4)
    {
      if (*(char *)(a2 + 31) >= 0)
        v6 = (const void *)(a2 + 8);
      else
        v6 = *(const void **)(a2 + 8);
      memmove(v5, v6, v4);
    }
    strcpy((char *)v5 + v4, "_@ssa_version_");
    std::to_string(&__p, *(_QWORD *)(a2 + 32));
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    v9 = std::string::append(&v12, (const std::string::value_type *)p_p, size);
    v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    this->__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v12.__r_.__value_.__l.__data_);
  }
  else if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    *this = *(std::string *)(a2 + 8);
  }
}

void sub_19137334C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::interpreter_t::interpreter_t(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v2 = *a2;
  *(_QWORD *)result = off_1E2D84530;
  *(_QWORD *)(result + 8) = v2;
  *(_QWORD *)(result + 64) = 0;
  *(_OWORD *)(result + 32) = 0u;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 16) = 0u;
  *(_DWORD *)(result + 72) = 1065353216;
  v3 = *(_QWORD *)(*a2 + 24);
  *(_QWORD *)(result + 80) = *(_QWORD *)(*a2 + 16);
  *(_QWORD *)(result + 88) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_QWORD *)(result + 96) = 0;
  *(_QWORD *)(result + 104) = 0;
  *(_QWORD *)result = &off_1E2D60F10;
  *(_OWORD *)(result + 136) = 0uLL;
  *(_OWORD *)(result + 152) = 0uLL;
  *(_QWORD *)(result + 168) = 0;
  *(_DWORD *)(result + 176) = 1065353216;
  *(_OWORD *)(result + 184) = 0uLL;
  *(_OWORD *)(result + 200) = 0uLL;
  *(_DWORD *)(result + 216) = 1065353216;
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v2 = *a2;
  *(_QWORD *)result = off_1E2D84530;
  *(_QWORD *)(result + 8) = v2;
  *(_QWORD *)(result + 64) = 0;
  *(_OWORD *)(result + 32) = 0u;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 16) = 0u;
  *(_DWORD *)(result + 72) = 1065353216;
  v3 = *(_QWORD *)(*a2 + 24);
  *(_QWORD *)(result + 80) = *(_QWORD *)(*a2 + 16);
  *(_QWORD *)(result + 88) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_QWORD *)(result + 96) = 0;
  *(_QWORD *)(result + 104) = 0;
  *(_QWORD *)result = &off_1E2D60F10;
  *(_OWORD *)(result + 136) = 0uLL;
  *(_OWORD *)(result + 152) = 0uLL;
  *(_QWORD *)(result + 168) = 0;
  *(_DWORD *)(result + 176) = 1065353216;
  *(_OWORD *)(result + 184) = 0uLL;
  *(_OWORD *)(result + 200) = 0uLL;
  *(_DWORD *)(result + 216) = 1065353216;
  return result;
}

void Espresso::generic_phi_virtual_kernel::top_shapes_for_bottom_shapes(__int128 **a1@<X1>, _QWORD *a2@<X8>)
{
  __int128 *v3;
  uint64_t v4;
  __int128 v5;
  char *v6;
  __int128 v7[2];
  uint64_t v8;
  void *__p;
  void *v10;
  uint64_t v11;
  __int128 v12;

  *((_QWORD *)&v12 + 1) = *MEMORY[0x1E0C80C00];
  v3 = *a1;
  v4 = *((_QWORD *)*a1 + 4);
  v5 = (*a1)[1];
  v7[0] = **a1;
  v7[1] = v5;
  v8 = v4;
  __p = 0;
  v10 = 0;
  v11 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *((const void **)v3 + 5), *((_QWORD *)v3 + 6), (uint64_t)(*((_QWORD *)v3 + 6) - *((_QWORD *)v3 + 5)) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v6 = (char *)operator new(0x40uLL);
  *a2 = v6;
  a2[1] = v6;
  a2[2] = v6 + 64;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a2 + 2), v7, &v12, (uint64_t)v6);
  if (__p)
  {
    v10 = __p;
    operator delete(__p);
  }
}

void sub_19137354C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v19 = v18;
  *(_QWORD *)(v17 + 8) = v19;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a17 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::generic_phi_virtual_kernel::get_runtime_type_config(uint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  _OWORD *v4;
  char *v5;
  uint64_t v6;
  _QWORD v7[2];
  char v8;
  __int128 v9;
  void *__p;
  void *v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v4 = (_OWORD *)*a1;
  v9 = *(_OWORD *)*a1;
  v11 = 0;
  v12 = 0;
  __p = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *((const void **)v4 + 2), *((_QWORD *)v4 + 3), (uint64_t)(*((_QWORD *)v4 + 3) - *((_QWORD *)v4 + 2)) >> 2);
  v5 = 0;
  v6 = 0;
  v7[0] = 0;
  v7[1] = &v5;
  v8 = 0;
  v5 = (char *)operator new(0x28uLL);
  v6 = (uint64_t)v5;
  v7[0] = v5 + 40;
  v6 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::blob_numerical_properties>,Espresso::blob_numerical_properties const*,Espresso::blob_numerical_properties const*,Espresso::blob_numerical_properties*>((uint64_t)v7, (uint64_t)&v9, (uint64_t)&v13, (uint64_t)v5);
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
  std::pair<std::vector<Espresso::blob_numerical_properties>,std::vector<Espresso::blob_numerical_properties>>::pair[abi:ne180100]<std::vector<Espresso::blob_numerical_properties> const&,std::vector<Espresso::blob_numerical_properties>&,0>(a2, a1, (uint64_t *)&v5);
  *(_QWORD *)&v9 = &v5;
  std::vector<Espresso::blob_numerical_properties>::__destroy_vector::operator()[abi:ne180100]((void ***)&v9);
}

void sub_191373684(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  std::vector<Espresso::blob_numerical_properties>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::blob_numerical_properties>,Espresso::blob_numerical_properties const*,Espresso::blob_numerical_properties const*,Espresso::blob_numerical_properties*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *(_OWORD *)v4 = *(_OWORD *)v6;
      *(_QWORD *)(v4 + 24) = 0;
      *(_QWORD *)(v4 + 32) = 0;
      *(_QWORD *)(v4 + 16) = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((_QWORD *)(v4 + 16), *(const void **)(v6 + 16), *(_QWORD *)(v6 + 24), (uint64_t)(*(_QWORD *)(v6 + 24) - *(_QWORD *)(v6 + 16)) >> 2);
      v4 = v11 + 40;
      v11 += 40;
      v6 += 40;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<Espresso::blob_numerical_properties>,Espresso::blob_numerical_properties*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_191373774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<Espresso::blob_numerical_properties>,Espresso::blob_numerical_properties*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::vector<Espresso::blob_numerical_properties>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<Espresso::blob_numerical_properties>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

_QWORD *std::pair<std::vector<Espresso::blob_numerical_properties>,std::vector<Espresso::blob_numerical_properties>>::pair[abi:ne180100]<std::vector<Espresso::blob_numerical_properties> const&,std::vector<Espresso::blob_numerical_properties>&,0>(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  std::vector<Espresso::blob_numerical_properties>::__init_with_size[abi:ne180100]<Espresso::blob_numerical_properties*,Espresso::blob_numerical_properties*>((uint64_t)a1, *a2, a2[1], 0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 3));
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  std::vector<Espresso::blob_numerical_properties>::__init_with_size[abi:ne180100]<Espresso::blob_numerical_properties*,Espresso::blob_numerical_properties*>((uint64_t)(a1 + 3), *a3, a3[1], 0xCCCCCCCCCCCCCCCDLL * ((a3[1] - *a3) >> 3));
  return a1;
}

void sub_191373844(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<Espresso::blob_numerical_properties>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<Espresso::blob_numerical_properties>::__init_with_size[abi:ne180100]<Espresso::blob_numerical_properties*,Espresso::blob_numerical_properties*>(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD v10[3];
  char v11;
  _QWORD *v12;
  _QWORD *v13;

  if (a4)
  {
    if (a4 >= 0x666666666666667)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v6 = (_QWORD *)result;
    v7 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::unordered_set<std::string>>>(a4);
    v8 = v7;
    *v6 = v7;
    v6[1] = v7;
    v6[2] = &v7[5 * v9];
    v13 = v7;
    v12 = v7;
    v10[0] = v6 + 2;
    v10[1] = &v12;
    v10[2] = &v13;
    v11 = 0;
    if (a2 != a3)
    {
      do
      {
        *(_OWORD *)v7 = *(_OWORD *)a2;
        v7[3] = 0;
        v7[4] = 0;
        v7[2] = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v7 + 2, *(const void **)(a2 + 16), *(_QWORD *)(a2 + 24), (uint64_t)(*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 2);
        v7 = v13 + 5;
        v13 += 5;
        a2 += 40;
      }
      while (a2 != a3);
      v8 = v7;
    }
    v11 = 1;
    result = std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<Espresso::blob_numerical_properties>,Espresso::blob_numerical_properties*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v10);
    v6[1] = v8;
  }
  return result;
}

void sub_191373950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<Espresso::blob_numerical_properties>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<Espresso::blob_numerical_properties>,Espresso::blob_numerical_properties*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 16);
    v4 = **(_QWORD **)(a1 + 8);
    while (v3 != v4)
    {
      v5 = *(void **)(v3 - 24);
      if (v5)
      {
        *(_QWORD *)(v3 - 16) = v5;
        operator delete(v5);
      }
      v3 -= 40;
    }
  }
  return a1;
}

void std::vector<Espresso::blob_numerical_properties>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;
  void *v4;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 40)
  {
    v4 = *(void **)(i - 24);
    if (v4)
    {
      *(_QWORD *)(i - 16) = v4;
      operator delete(v4);
    }
  }
  a1[1] = v2;
}

uint64_t Espresso::generic_phi_virtual_kernel::__launch(uint64_t result, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v4;
  char *v5;
  _QWORD *v6;
  _QWORD *v7;

  if (*a4 == a4[1])
  {
    v4 = (_QWORD *)(result + 288);
    if (*(char *)(result + 311) < 0)
      v4 = (_QWORD *)*v4;
    v7 = v4;
    v5 = "missing src %s";
LABEL_10:
    Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*>(v5, &v7);
  }
  if (*a3 == a3[1])
  {
    v6 = (_QWORD *)(result + 288);
    if (*(char *)(result + 311) < 0)
      v6 = (_QWORD *)*v6;
    v7 = v6;
    v5 = "missing dst %s";
    goto LABEL_10;
  }
  return result;
}

_QWORD *Espresso::interpreter_t::net_return(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  _QWORD *result;
  uint64_t v5;

  result = std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(*a2 + 8), *a3, a3[1]);
  v5 = *a2;
  *(_QWORD *)(v5 + 112) = 0;
  *(_QWORD *)(v5 + 120) = 0;
  *(_WORD *)(v5 + 128) = 0;
  *(_BYTE *)(*a2 + 129) = 1;
  return result;
}

void Espresso::interpreter_t::net_goto(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  *(_QWORD *)(*(_QWORD *)a2 + 120) = *a3;
}

uint64_t *Espresso::interpreter_t::net_call(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t *result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *a2;
  *(_QWORD *)(v5 + 112) = 0;
  *(_QWORD *)(v5 + 120) = 0;
  *(_WORD *)(v5 + 128) = 0;
  result = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>((_QWORD *)(a1 + 40), a3);
  if (!result)
  {
    if (*(char *)(a3 + 23) >= 0)
      v8 = a3;
    else
      v8 = *(_QWORD *)a3;
    v9 = v8;
    Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*>("Cannot find network %s", &v9);
  }
  v7 = *a2;
  *(_QWORD *)(v7 + 112) = result[5];
  *(_QWORD *)(v7 + 120) = 0;
  *(_BYTE *)(v7 + 128) = 1;
  return result;
}

void Espresso::interpreter_t::iterate_all_ssa_versions(uint64_t a1, uint64_t a2, void *a3)
{
  void (**v5)(id, uint64_t);
  uint64_t *v6;
  unint64_t v7;
  uint64_t i;
  char v9[8];
  std::string v10;
  uint64_t v11;
  std::string __p;
  std::string v13;

  v5 = a3;
  Espresso::map_const_get<std::unordered_map<std::string,std::string>>(&v13, (_QWORD *)(a1 + 184), a2, a2);
  v6 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>((_QWORD *)(a1 + 144), (uint64_t)&v13);
  if (v6)
    v7 = v6[5];
  else
    v7 = 1;
  v5[2](v5, a2);
  if (v7 >= 2)
  {
    for (i = 1; i != v7; ++i)
    {
      v9[0] = 1;
      if (*(char *)(a2 + 23) < 0)
        std::string::__init_copy_ctor_external(&v10, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
      else
        v10 = *(std::string *)a2;
      v11 = i;
      Espresso::ssa_blob_name::repr(&__p, (uint64_t)v9);
      v5[2](v5, (uint64_t)&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v10.__r_.__value_.__l.__data_);
    }
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);

}

void sub_191373C88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;

  if (a29 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void Espresso::pass_params_graph_coloring::~pass_params_graph_coloring(Espresso::pass_params_graph_coloring *this)
{
  JUMPOUT(0x19401CD90);
}

void Espresso::pass_graph_coloring::~pass_graph_coloring(Espresso::pass_graph_coloring *this)
{
  Espresso::net_pass::~net_pass(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::pass_graph_coloring::get_analysis_usage(uint64_t a1, _BYTE *a2)
{
  *a2 = 0;
}

void Espresso::run_pass_on_network<Espresso::pass_global_name_indexing>(uint64_t a1)
{
  Espresso *v2;
  _QWORD *v3;
  const char *v4;
  NSObject *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  char v12;
  _QWORD *v13;
  std::__shared_weak_count *v14;
  uint8_t buf[4];
  unint64_t v16;
  std::__shared_weak_count *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v2 = (Espresso *)operator new(0x30uLL);
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_1E2DBD620;
  *((_QWORD *)v2 + 4) = 0;
  *((_QWORD *)v2 + 5) = 0;
  *((_QWORD *)v2 + 3) = &off_1E2D92EE8;
  v3 = (_QWORD *)((char *)v2 + 24);
  v13 = (_QWORD *)((char *)v2 + 24);
  v14 = (std::__shared_weak_count *)v2;
  Espresso::espresso_os_log_subsystem(v2, v4);
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315138;
    v16 = (unint64_t)"N8Espresso25pass_global_name_indexingE" & 0x7FFFFFFFFFFFFFFFLL;
    _os_log_debug_impl(&dword_190DAF000, v5, OS_LOG_TYPE_DEBUG, "run_pass_on_network %s", buf, 0xCu);
  }

  (*(void (**)(uint8_t *__return_ptr, _QWORD *, uint64_t))(*v3 + 24))(buf, v3, a1);
  v12 = 0;
  (*(void (**)(_QWORD *, char *))(*v3 + 16))(v3, &v12);
  if (v12)
  {
    if (buf[0])
      Espresso::net::set_analysis<Espresso::analysis_result>(a1, (uint64_t *)((char *)&v16 + 4));
    else
      std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::__erase_unique<std::type_index>((uint64_t *)(a1 + 1120), (uint64_t)"N8Espresso32pass_global_name_indexing_resultE");
  }
  v6 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = v14;
  if (v14)
  {
    v10 = (unint64_t *)&v14->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_191373F14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void *Espresso::net::get_analysis<Espresso::pass_global_name_indexing_result>(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  const void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7;
  void *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::runtime_error *exception;
  std::string *v17;
  __int128 v18;
  std::runtime_error *v19;
  std::string *v20;
  __int128 v21;
  std::string v22;
  std::string v23;
  const void *v24;
  std::__shared_weak_count *v25;

  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = 0uLL;
  v1 = std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::find<std::type_index>((_QWORD *)(a1 + 1120), (uint64_t)&v22);
  v2 = v1;
  if (!v1)
  {
    v24 = 0;
    v25 = 0;
    goto LABEL_20;
  }
  v3 = (const void *)v1[3];
  v4 = (std::__shared_weak_count *)v2[4];
  v24 = v3;
  v25 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  if (!v3)
  {
LABEL_20:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v22, "Analysis missing: ");
    v17 = std::string::append(&v22, (const std::string::value_type *)((unint64_t)"N8Espresso32pass_global_name_indexing_resultE" & 0x7FFFFFFFFFFFFFFFLL));
    v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v23.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v23);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (!v7)
  {
    v19 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v22, "Analysis mismatch: ");
    v20 = std::string::append(&v22, (const std::string::value_type *)((unint64_t)"N8Espresso32pass_global_name_indexing_resultE" & 0x7FFFFFFFFFFFFFFFLL));
    v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v23.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v19, &v23);
    __cxa_throw(v19, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v8 = v7;
  if (v4)
  {
    v9 = (unint64_t *)&v4->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    do
      v11 = __ldaxr(v9);
    while (__stlxr(v11 - 1, v9));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v12 = v25;
  if (v25)
  {
    v13 = (unint64_t *)&v25->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  return v8;
}

void sub_191374150(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v23;
  int v24;
  uint64_t v25;

  if (a23 < 0)
    operator delete(__p);
  if (a17 < 0)
  {
    operator delete(a12);
    if ((v24 & 1) == 0)
    {
LABEL_8:
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 48);
      _Unwind_Resume(a1);
    }
  }
  else if (!v24)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v23);
  goto LABEL_8;
}

void Espresso::interference_graph::analysis_result(Espresso::interference_graph *this, uint64_t a2)
{
  unint64_t v4;
  std::vector<int>::size_type v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  void *v14;
  void *__p[2];
  void *v16[2];
  int v17;
  std::vector<int> v18;
  void *v19[3];
  __int128 *v20;

  v4 = *(int *)(a2 + 136);
  __p[0] = (void *)-1;
  std::vector<unsigned long>::vector(v19, v4, __p);
  v5 = *(int *)(a2 + 136);
  LODWORD(__p[0]) = -1;
  std::vector<int>::vector(&v18, v5, (const std::vector<int>::value_type *)__p);
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v16 = 0u;
  v17 = 1065353216;
  if (*(_DWORD *)(a2 + 24))
  {
    v6 = 0;
    v7 = 0;
    v8 = 0;
    do
    {
      v9 = *(_QWORD *)(a2 + 8);
      v10 = *(_QWORD *)(v9 + 56);
      if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v9 + 64) - v10) >> 3) <= v8)
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      v11 = *(int *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) + 24) + (v6 >> 30));
      v12 = *(_DWORD *)(*(_QWORD *)(a2 + 184) + 4 * v11);
      v20 = (__int128 *)(v10 + v7);
      *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)__p, (unsigned __int8 *)(v10 + v7), (uint64_t)&std::piecewise_construct, &v20)+ 10) = v12;
      v13 = *(_DWORD *)(*(_QWORD *)(a2 + 208) + 4 * v11);
      if (v13 > v18.__begin_[v12])
      {
        v18.__begin_[v12] = v13;
        *((_QWORD *)v19[0] + v12) = v8;
      }
      ++v8;
      v7 += 24;
      v6 += 0x100000000;
    }
    while (v8 < *(int *)(a2 + 24));
  }
  std::allocate_shared[abi:ne180100]<Espresso::analysis_pass_graph_coloring,std::allocator<Espresso::analysis_pass_graph_coloring>,std::unordered_map<std::string,int>,std::vector<unsigned long>,void>(this, (uint64_t)__p, (uint64_t)v19);
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__deallocate_node((void **)v16[0]);
  v14 = __p[0];
  __p[0] = 0;
  if (v14)
    operator delete(v14);
  if (v18.__begin_)
  {
    v18.__end_ = v18.__begin_;
    operator delete(v18.__begin_);
  }
  if (v19[0])
  {
    v19[1] = v19[0];
    operator delete(v19[0]);
  }
}

void sub_1913743C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::~__hash_table((uint64_t)&a9);
  if (__p)
  {
    a16 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a18)
  {
    a19 = (uint64_t)a18;
    operator delete(a18);
  }
  _Unwind_Resume(a1);
}

void std::vector<std::unordered_set<int>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](v4 - 40);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<int,std::unordered_set<int>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_set<int>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_set<int>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_set<int>>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)(v2 + 3));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void Espresso::interference_graph::~interference_graph(Espresso::interference_graph *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void **v7;

  v2 = (void *)*((_QWORD *)this + 26);
  if (v2)
  {
    *((_QWORD *)this + 27) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 23);
  if (v3)
  {
    *((_QWORD *)this + 24) = v3;
    operator delete(v3);
  }
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)this + 144);
  v4 = (void *)*((_QWORD *)this + 14);
  if (v4)
  {
    *((_QWORD *)this + 15) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 11);
  if (v5)
  {
    *((_QWORD *)this + 12) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 8);
  if (v6)
  {
    *((_QWORD *)this + 9) = v6;
    operator delete(v6);
  }
  v7 = (void **)((char *)this + 40);
  std::vector<std::unordered_set<int>>::__destroy_vector::operator()[abi:ne180100](&v7);
}

void Espresso::force_aliased_blob_index::~force_aliased_blob_index(Espresso::force_aliased_blob_index *this)
{
  void *v2;
  void *v3;

  std::__hash_table<std::__hash_value_type<int,std::unordered_set<int>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_set<int>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_set<int>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_set<int>>>>::~__hash_table((uint64_t)this + 80);
  v2 = (void *)*((_QWORD *)this + 7);
  if (v2)
    operator delete(v2);
  v3 = (void *)*((_QWORD *)this + 3);
  if (v3)
  {
    *((_QWORD *)this + 4) = v3;
    operator delete(v3);
  }
}

std::vector<int> *__cdecl std::vector<int>::vector(std::vector<int> *this, std::vector<int>::size_type __n, const std::vector<int>::value_type *__x)
{
  std::vector<int>::pointer end;
  int *v7;
  std::vector<int>::size_type v8;

  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<unsigned int>::__vallocate[abi:ne180100](this, __n);
    end = this->__end_;
    v7 = &end[__n];
    v8 = 4 * __n;
    do
    {
      *end++ = *__x;
      v8 -= 4;
    }
    while (v8);
    this->__end_ = v7;
  }
  return this;
}

void sub_191374608(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::allocate_shared[abi:ne180100]<Espresso::analysis_pass_graph_coloring,std::allocator<Espresso::analysis_pass_graph_coloring>,std::unordered_map<std::string,int>,std::vector<unsigned long>,void>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x60uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DBDD58;
  v6[3] = &off_1E2D97B28;
  std::unordered_map<std::string,int>::unordered_map((uint64_t)(v6 + 4), a2);
  v6[9] = 0;
  v6[10] = 0;
  v6[11] = 0;
  result = std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v6 + 9, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3);
  *a1 = v6 + 3;
  a1[1] = v6;
  return result;
}

void sub_1913746B4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;
  void *v4;

  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::~__hash_table(v2);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::analysis_pass_graph_coloring>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBDD58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::analysis_pass_graph_coloring>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBDD58;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::__function::__func<Espresso::alias_blob_loaded_from_or_stored_to_to_global(Espresso::net &,Espresso::pass_blob_name_indexing_result const&,Espresso::pass_global_name_indexing_result const&,std::unordered_map<int,std::unordered_set<int>> const&)::$_0,std::allocator<Espresso::alias_blob_loaded_from_or_stored_to_to_global(Espresso::net &,Espresso::pass_blob_name_indexing_result const&,Espresso::pass_global_name_indexing_result const&,std::unordered_map<int,std::unordered_set<int>> const&)::$_0>,void ()(std::pair<std::string,std::shared_ptr<Espresso::abstract_blob_container>> &)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

__n128 std::__function::__func<Espresso::alias_blob_loaded_from_or_stored_to_to_global(Espresso::net &,Espresso::pass_blob_name_indexing_result const&,Espresso::pass_global_name_indexing_result const&,std::unordered_map<int,std::unordered_set<int>> const&)::$_0,std::allocator<Espresso::alias_blob_loaded_from_or_stored_to_to_global(Espresso::net &,Espresso::pass_blob_name_indexing_result const&,Espresso::pass_global_name_indexing_result const&,std::unordered_map<int,std::unordered_set<int>> const&)::$_0>,void ()(std::pair<std::string,std::shared_ptr<Espresso::abstract_blob_container>> &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E2DB33F0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<Espresso::alias_blob_loaded_from_or_stored_to_to_global(Espresso::net &,Espresso::pass_blob_name_indexing_result const&,Espresso::pass_global_name_indexing_result const&,std::unordered_map<int,std::unordered_set<int>> const&)::$_0,std::allocator<Espresso::alias_blob_loaded_from_or_stored_to_to_global(Espresso::net &,Espresso::pass_blob_name_indexing_result const&,Espresso::pass_global_name_indexing_result const&,std::unordered_map<int,std::unordered_set<int>> const&)::$_0>,void ()(std::pair<std::string,std::shared_ptr<Espresso::abstract_blob_container>> &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DB33F0;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<Espresso::alias_blob_loaded_from_or_stored_to_to_global(Espresso::net &,Espresso::pass_blob_name_indexing_result const&,Espresso::pass_global_name_indexing_result const&,std::unordered_map<int,std::unordered_set<int>> const&)::$_0,std::allocator<Espresso::alias_blob_loaded_from_or_stored_to_to_global(Espresso::net &,Espresso::pass_blob_name_indexing_result const&,Espresso::pass_global_name_indexing_result const&,std::unordered_map<int,std::unordered_set<int>> const&)::$_0>,void ()(std::pair<std::string,std::shared_ptr<Espresso::abstract_blob_container>> &)>::operator()(_QWORD *a1, uint64_t a2)
{
  unsigned __int8 *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  _QWORD *v8;
  int8x8_t v9;
  uint8x8_t v10;
  unint64_t v11;
  uint64_t **v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t **i;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  std::__shared_weak_count *v33;
  char v34[40];
  void *__p;
  void *v36;
  unsigned __int8 *v37;

  v4 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>((_QWORD *)(a1[1] + 16), (unsigned __int8 *)a2);
  if (!v4)
    return;
  v5 = *((int *)v4 + 10);
  v6 = (std::__shared_weak_count *)operator new(0x98uLL);
  v6->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  v6->__shared_weak_owners_ = 0;
  v6->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBE998;
  *(_OWORD *)&v6[2].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v6[3].__shared_owners_ = 0u;
  *(_OWORD *)&v6[1].__shared_owners_ = 0u;
  v6[2].std::__shared_count = 0u;
  *(_OWORD *)&v6[5].__shared_owners_ = 0u;
  v6[4].std::__shared_count = 0u;
  *(_OWORD *)&v6[4].__shared_weak_owners_ = 0u;
  LODWORD(v6[2].__vftable) = 1065353216;
  v6[2].__shared_owners_ = 0x1FFFFFFFFLL;
  v6[4].__vftable = 0;
  v6[4].__shared_owners_ = 0;
  v6[2].__shared_weak_owners_ = 0;
  v6[3].__vftable = 0;
  LOBYTE(v6[3].__shared_weak_owners_) = 0;
  v6[3].__shared_owners_ = 0;
  v6[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA0BF0;
  v6[5].__shared_weak_owners_ = 0;
  v6[6].__vftable = 0;
  v6[5].__shared_owners_ = 0;
  v6[5].__vftable = 0;
  LOBYTE(v6[6].__vftable) = 0;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v6[5].__shared_owners_, *(_QWORD *)(a2 + 24), *(_QWORD *)(a2 + 32));
  v8 = (_QWORD *)a1[2];
  v9 = (int8x8_t)v8[1];
  if (!*(_QWORD *)&v9)
    goto LABEL_18;
  v10 = (uint8x8_t)vcnt_s8(v9);
  v10.i16[0] = vaddlv_u8(v10);
  if (v10.u32[0] > 1uLL)
  {
    v11 = v5;
    if (*(_QWORD *)&v9 <= v5)
      v11 = v5 % *(_QWORD *)&v9;
  }
  else
  {
    v11 = (*(_QWORD *)&v9 - 1) & v5;
  }
  v12 = *(uint64_t ***)(*v8 + 8 * v11);
  if (!v12 || (v13 = *v12) == 0)
LABEL_18:
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  while (1)
  {
    v14 = v13[1];
    if (v14 == v5)
      break;
    if (v10.u32[0] > 1uLL)
    {
      if (v14 >= *(_QWORD *)&v9)
        v14 %= *(_QWORD *)&v9;
    }
    else
    {
      v14 &= *(_QWORD *)&v9 - 1;
    }
    if (v14 != v11)
      goto LABEL_18;
LABEL_17:
    v13 = (uint64_t *)*v13;
    if (!v13)
      goto LABEL_18;
  }
  if (*((_DWORD *)v13 + 4) != (_DWORD)v5)
    goto LABEL_17;
  Espresso::abstract_blob_container::shape(v34, *(_QWORD *)(a2 + 24));
  for (i = (uint64_t **)v13[5]; i; i = (uint64_t **)*i)
  {
    v16 = a1[3];
    v17 = *((int *)i + 4);
    v18 = *(_QWORD *)(v16 + 56);
    if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v16 + 64) - v18) >> 3) <= v17)
      std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
    v19 = a1[4] + 136;
    v37 = (unsigned __int8 *)(v18 + 24 * (int)v17);
    v20 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v19, v37, (__int128 **)&v37);
    v21 = *((_QWORD *)v20 + 5);
    v22 = (std::__shared_weak_count *)*((_QWORD *)v20 + 6);
    if (v22)
    {
      v23 = (unint64_t *)&v22->__shared_owners_;
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
    }
    v32 = v6 + 1;
    v33 = v6;
    do
      v25 = __ldxr(p_shared_owners);
    while (__stxr(v25 + 1, p_shared_owners));
    (*(void (**)(uint64_t, char *, std::__shared_weak_count **))(*(_QWORD *)v21 + 16))(v21, v34, &v32);
    v26 = v33;
    if (!v33)
      goto LABEL_30;
    v27 = (unint64_t *)&v33->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
      if (v22)
      {
LABEL_31:
        v29 = (unint64_t *)&v22->__shared_owners_;
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
    }
    else
    {
LABEL_30:
      if (v22)
        goto LABEL_31;
    }
  }
  if (__p)
  {
    v36 = __p;
    operator delete(__p);
  }
  do
    v31 = __ldaxr(p_shared_owners);
  while (__stlxr(v31 - 1, p_shared_owners));
  if (!v31)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
}

void sub_191374A9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v21;

  do
    v21 = __ldaxr(v19);
  while (__stlxr(v21 - 1, v19));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<Espresso::alias_blob_loaded_from_or_stored_to_to_global(Espresso::net &,Espresso::pass_blob_name_indexing_result const&,Espresso::pass_global_name_indexing_result const&,std::unordered_map<int,std::unordered_set<int>> const&)::$_0,std::allocator<Espresso::alias_blob_loaded_from_or_stored_to_to_global(Espresso::net &,Espresso::pass_blob_name_indexing_result const&,Espresso::pass_global_name_indexing_result const&,std::unordered_map<int,std::unordered_set<int>> const&)::$_0>,void ()(std::pair<std::string,std::shared_ptr<Espresso::abstract_blob_container>> &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN8EspressoL45alias_blob_loaded_from_or_stored_to_to_globalERNS_3netERKNS_30pass_blob_name_indexing_resultERKNS_32pass_global_name_indexing_resultERKNSt3__113unordered_mapIiNS8_13unordered_setIiNS8_4hashIiEENS8_8equal_toIiEENS8_9allocatorIiEEEESC_SE_NSF_INS8_4pairIKiSH_EEEEEEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<Espresso::alias_blob_loaded_from_or_stored_to_to_global(Espresso::net &,Espresso::pass_blob_name_indexing_result const&,Espresso::pass_global_name_indexing_result const&,std::unordered_map<int,std::unordered_set<int>> const&)::$_0,std::allocator<Espresso::alias_blob_loaded_from_or_stored_to_to_global(Espresso::net &,Espresso::pass_blob_name_indexing_result const&,Espresso::pass_global_name_indexing_result const&,std::unordered_map<int,std::unordered_set<int>> const&)::$_0>,void ()(std::pair<std::string,std::shared_ptr<Espresso::abstract_blob_container>> &)>::target_type()
{
}

void std::vector<int>::resize(std::vector<int> *this, std::vector<int>::size_type __sz, std::vector<int>::const_reference __x)
{
  std::vector<int>::pointer end;
  std::vector<int>::pointer begin;
  std::vector<int>::size_type v7;
  int *value;
  unint64_t v10;
  std::vector<int>::size_type v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  int *v15;
  int *v16;
  std::vector<int>::size_type v17;
  int *v18;
  int *v19;
  std::vector<int>::pointer v20;
  std::vector<int>::pointer i;
  int v22;
  int *v23;
  std::vector<int>::size_type v24;

  begin = this->__begin_;
  end = this->__end_;
  v7 = end - this->__begin_;
  if (__sz <= v7)
  {
    if (__sz < v7)
      this->__end_ = &begin[__sz];
  }
  else
  {
    value = this->__end_cap_.__value_;
    if (__sz - v7 <= value - end)
    {
      v23 = &end[__sz - v7];
      v24 = 4 * __sz - 4 * v7;
      do
      {
        *end++ = *__x;
        v24 -= 4;
      }
      while (v24);
      this->__end_ = v23;
    }
    else
    {
      if (__sz >> 62)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v10 = (char *)value - (char *)begin;
      v11 = ((char *)value - (char *)begin) >> 1;
      if (v11 <= __sz)
        v11 = __sz;
      if (v10 >= 0x7FFFFFFFFFFFFFFCLL)
        v12 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v12 = v11;
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v12);
      v15 = (int *)&v13[4 * v7];
      v16 = (int *)&v13[4 * __sz];
      v17 = 4 * __sz - 4 * v7;
      v18 = v15;
      do
      {
        *v18++ = *__x;
        v17 -= 4;
      }
      while (v17);
      v19 = (int *)&v13[4 * v14];
      v20 = this->__begin_;
      for (i = this->__end_; i != v20; --i)
      {
        v22 = *(i - 1);
        *--v15 = v22;
      }
      this->__begin_ = v15;
      this->__end_ = v16;
      this->__end_cap_.__value_ = v19;
      if (v20)
        operator delete(v20);
    }
  }
}

uint64_t std::unordered_set<int>::unordered_set(uint64_t a1, uint64_t a2)
{
  uint64_t *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  for (i = *(uint64_t **)(a2 + 16); i; i = (uint64_t *)*i)
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>(a1, *((_DWORD *)i + 4), *((_DWORD *)i + 4));
  return a1;
}

void sub_191374D28(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

unint64_t std::__introsort<std::_ClassicAlgPolicy,Espresso::interference_graph::populate_force_aliased_blob_in_visit_order(void)::$_0 &,int *,false>(unint64_t result, int *a2, uint64_t a3, uint64_t a4, char a5)
{
  int *v9;
  int *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int *v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int *v22;
  int *v23;
  int v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  int *v31;
  int *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  int *v38;
  int *v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  int *v46;
  uint64_t v47;
  uint64_t v48;
  int *v49;
  int *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _DWORD *v56;
  uint64_t v57;
  uint64_t v58;
  int *v59;
  uint64_t v60;
  uint64_t v61;
  int *v62;
  uint64_t v63;
  uint64_t v64;
  _DWORD *v65;
  uint64_t v66;
  uint64_t v67;
  int *v68;
  int64_t v69;
  uint64_t v70;
  int64_t v71;
  int64_t v72;
  uint64_t v73;
  int *v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  int v78;
  int *v79;
  uint64_t v80;
  _DWORD *v81;
  int *v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  int *v91;
  int *v92;
  int *v93;
  int v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  int *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _DWORD *v103;
  int *v104;
  int *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _DWORD *v110;
  int *v111;

  v9 = (int *)result;
LABEL_2:
  v10 = a2 - 1;
  v11 = v9;
  while (2)
  {
    v9 = v11;
    v12 = (char *)a2 - (char *)v11;
    v13 = a2 - v11;
    switch(v13)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v47 = *v10;
        v48 = *v11;
        if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 64) + 8 * v47) < *(_DWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 64)
                                                                                  + 8 * v48))
        {
          *v11 = v47;
          *v10 = v48;
        }
        return result;
      case 3:
        return (unint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::interference_graph::populate_force_aliased_blob_in_visit_order(void)::$_0 &,int *>(v11, v11 + 1, a2 - 1, *(_QWORD *)(*(_QWORD *)a3 + 64));
      case 4:
        return (unint64_t)std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::interference_graph::populate_force_aliased_blob_in_visit_order(void)::$_0 &,int *>(v11, v11 + 1, v11 + 2, a2 - 1, a3);
      case 5:
        v49 = v11 + 2;
        v50 = v11 + 3;
        result = (unint64_t)std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::interference_graph::populate_force_aliased_blob_in_visit_order(void)::$_0 &,int *>(v11, v11 + 1, v11 + 2, v11 + 3, a3);
        v51 = *v10;
        v52 = v11[3];
        v53 = *(_QWORD *)(*(_QWORD *)a3 + 64);
        if (*(_DWORD *)(v53 + 8 * v51) < *(_DWORD *)(v53 + 8 * v52))
        {
          *v50 = v51;
          *v10 = v52;
          v54 = *v50;
          v55 = *v49;
          v56 = (_DWORD *)(v53 + 8 * v54);
          if (*v56 < *(_DWORD *)(v53 + 8 * v55))
          {
            *v49 = v54;
            *v50 = v55;
            v57 = v11[1];
            if (*v56 < *(_DWORD *)(v53 + 8 * v57))
            {
              v11[1] = v54;
              v11[2] = v57;
              v58 = *v11;
              if (*v56 < *(_DWORD *)(v53 + 8 * v58))
              {
                *v11 = v54;
                v11[1] = v58;
              }
            }
          }
        }
        return result;
      default:
        if (v12 <= 95)
        {
          if ((a5 & 1) != 0)
          {
            if (v11 != a2)
            {
              v59 = v11 + 1;
              if (v11 + 1 != a2)
              {
                v60 = *(_QWORD *)(*(_QWORD *)a3 + 64);
                v61 = 4;
                v62 = v11;
                do
                {
                  v64 = *v62;
                  v63 = v62[1];
                  v62 = v59;
                  v65 = (_DWORD *)(v60 + 8 * v63);
                  if (*v65 < *(_DWORD *)(v60 + 8 * v64))
                  {
                    v66 = v61;
                    while (1)
                    {
                      *(int *)((char *)v11 + v66) = v64;
                      v67 = v66 - 4;
                      if (v66 == 4)
                        break;
                      v64 = *(int *)((char *)v11 + v66 - 8);
                      v66 -= 4;
                      if (*v65 >= *(_DWORD *)(v60 + 8 * v64))
                      {
                        v68 = (int *)((char *)v11 + v67);
                        goto LABEL_73;
                      }
                    }
                    v68 = v11;
LABEL_73:
                    *v68 = v63;
                  }
                  v59 = v62 + 1;
                  v61 += 4;
                }
                while (v62 + 1 != a2);
              }
            }
          }
          else if (v11 != a2)
          {
            v106 = v11 + 1;
            if (v11 + 1 != a2)
            {
              v107 = *(_QWORD *)(*(_QWORD *)a3 + 64);
              do
              {
                v109 = *v9;
                v108 = v9[1];
                v9 = v106;
                v110 = (_DWORD *)(v107 + 8 * v108);
                if (*v110 < *(_DWORD *)(v107 + 8 * v109))
                {
                  v111 = v9;
                  do
                  {
                    *v111 = v109;
                    v109 = *(v111 - 2);
                    --v111;
                  }
                  while (*v110 < *(_DWORD *)(v107 + 8 * v109));
                  *v111 = v108;
                }
                v106 = v9 + 1;
              }
              while (v9 + 1 != a2);
            }
          }
          return result;
        }
        if (!a4)
        {
          if (v11 != a2)
          {
            v69 = (unint64_t)(v13 - 2) >> 1;
            v70 = *(_QWORD *)a3;
            v71 = v69;
            do
            {
              v72 = v71;
              if (v69 >= v71)
              {
                v73 = (2 * v71) | 1;
                v74 = &v11[v73];
                result = *v74;
                if (2 * v72 + 2 >= v13)
                {
                  v76 = *(_QWORD *)(v70 + 64);
                }
                else
                {
                  v75 = v74[1];
                  v76 = *(_QWORD *)(v70 + 64);
                  v77 = *(_DWORD *)(v76 + 8 * (int)result);
                  v78 = *(_DWORD *)(v76 + 8 * v75);
                  if (v77 >= v78)
                    result = result;
                  else
                    result = v75;
                  if (v77 < v78)
                  {
                    ++v74;
                    v73 = 2 * v72 + 2;
                  }
                }
                v79 = &v11[v72];
                v80 = *v79;
                v81 = (_DWORD *)(v76 + 8 * v80);
                if (*(_DWORD *)(v76 + 8 * (int)result) >= *v81)
                {
                  do
                  {
                    v82 = v74;
                    *v79 = result;
                    if (v69 < v73)
                      break;
                    v83 = (2 * v73) | 1;
                    v74 = &v11[v83];
                    v73 = 2 * v73 + 2;
                    result = *v74;
                    if (v73 >= v13)
                    {
                      v73 = v83;
                    }
                    else
                    {
                      v84 = v74[1];
                      v85 = *(_DWORD *)(v76 + 8 * (int)result);
                      v86 = *(_DWORD *)(v76 + 8 * v84);
                      result = v85 >= v86 ? result : v84;
                      if (v85 >= v86)
                        v73 = v83;
                      else
                        ++v74;
                    }
                    v79 = v82;
                  }
                  while (*(_DWORD *)(v76 + 8 * (int)result) >= *v81);
                  *v82 = v80;
                }
              }
              v71 = v72 - 1;
            }
            while (v72);
            v87 = (unint64_t)v12 >> 2;
            do
            {
              v88 = 0;
              v89 = *v11;
              v90 = *(_QWORD *)a3;
              v91 = v11;
              do
              {
                v92 = &v91[v88];
                v95 = v92[1];
                v93 = v92 + 1;
                v94 = v95;
                v96 = (2 * v88) | 1;
                v88 = 2 * v88 + 2;
                if (v88 >= v87)
                {
                  v88 = v96;
                }
                else
                {
                  result = v93[1];
                  if (*(_DWORD *)(*(_QWORD *)(v90 + 64) + 8 * v94) >= *(_DWORD *)(*(_QWORD *)(v90 + 64) + 8 * result))
                  {
                    v88 = v96;
                  }
                  else
                  {
                    v94 = v93[1];
                    ++v93;
                  }
                }
                *v91 = v94;
                v91 = v93;
              }
              while (v88 <= (uint64_t)((unint64_t)(v87 - 2) >> 1));
              if (v93 == --a2)
              {
                *v93 = v89;
              }
              else
              {
                *v93 = *a2;
                *a2 = v89;
                v97 = (char *)v93 - (char *)v11 + 4;
                if (v97 >= 5)
                {
                  v98 = (((unint64_t)v97 >> 2) - 2) >> 1;
                  v99 = &v11[v98];
                  v100 = *v99;
                  v101 = *v93;
                  v102 = *(_QWORD *)(v90 + 64);
                  v103 = (_DWORD *)(v102 + 8 * v101);
                  if (*(_DWORD *)(v102 + 8 * v100) < *v103)
                  {
                    do
                    {
                      v104 = v99;
                      *v93 = v100;
                      if (!v98)
                        break;
                      v98 = (v98 - 1) >> 1;
                      v99 = &v11[v98];
                      v100 = *v99;
                      result = *v103;
                      v93 = v104;
                    }
                    while (*(_DWORD *)(v102 + 8 * v100) < (int)result);
                    *v104 = v101;
                  }
                }
              }
            }
            while (v87-- > 2);
          }
          return result;
        }
        v14 = (unint64_t)v13 >> 1;
        v15 = &v11[(unint64_t)v13 >> 1];
        v16 = *(_QWORD *)(*(_QWORD *)a3 + 64);
        if ((unint64_t)v12 < 0x201)
        {
          result = (unint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::interference_graph::populate_force_aliased_blob_in_visit_order(void)::$_0 &,int *>(v15, v9, a2 - 1, v16);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::interference_graph::populate_force_aliased_blob_in_visit_order(void)::$_0 &,int *>(v9, v15, a2 - 1, v16);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::interference_graph::populate_force_aliased_blob_in_visit_order(void)::$_0 &,int *>(v9 + 1, v15 - 1, a2 - 2, *(_QWORD *)(*(_QWORD *)a3 + 64));
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::interference_graph::populate_force_aliased_blob_in_visit_order(void)::$_0 &,int *>(v9 + 2, &v9[v14 + 1], a2 - 3, *(_QWORD *)(*(_QWORD *)a3 + 64));
          result = (unint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::interference_graph::populate_force_aliased_blob_in_visit_order(void)::$_0 &,int *>(v15 - 1, v15, &v9[v14 + 1], *(_QWORD *)(*(_QWORD *)a3 + 64));
          v17 = *v9;
          *v9 = *v15;
          *v15 = v17;
        }
        --a4;
        v18 = *v9;
        v19 = *(_QWORD *)a3;
        if ((a5 & 1) == 0)
        {
          v20 = *(_QWORD *)(v19 + 64);
          v21 = *(_DWORD *)(v20 + 8 * v18);
          if (*(_DWORD *)(v20 + 8 * *(v9 - 1)) < v21)
            goto LABEL_12;
          if (v21 >= *(_DWORD *)(v20 + 8 * *v10))
          {
            v38 = v9 + 1;
            do
            {
              v11 = v38;
              if (v38 >= a2)
                break;
              ++v38;
            }
            while (v21 >= *(_DWORD *)(v20 + 8 * *v11));
          }
          else
          {
            v11 = v9;
            do
            {
              v37 = v11[1];
              ++v11;
            }
            while (v21 >= *(_DWORD *)(v20 + 8 * v37));
          }
          v39 = a2;
          if (v11 < a2)
          {
            v39 = a2;
            do
              v40 = *--v39;
            while (v21 < *(_DWORD *)(v20 + 8 * v40));
          }
          if (v11 < v39)
          {
            v41 = *v11;
            v42 = *v39;
            do
            {
              *v11 = v42;
              *v39 = v41;
              v43 = *(_DWORD *)(v20 + 8 * v18);
              do
              {
                v44 = v11[1];
                ++v11;
                v41 = v44;
              }
              while (v43 >= *(_DWORD *)(v20 + 8 * v44));
              do
              {
                v45 = *--v39;
                v42 = v45;
              }
              while (v43 < *(_DWORD *)(v20 + 8 * v45));
            }
            while (v11 < v39);
          }
          v46 = v11 - 1;
          if (v11 - 1 != v9)
            *v9 = *v46;
          a5 = 0;
          *v46 = v18;
          continue;
        }
        v20 = *(_QWORD *)(v19 + 64);
        v21 = *(_DWORD *)(v20 + 8 * v18);
LABEL_12:
        v22 = v9;
        do
        {
          v23 = v22;
          v25 = v22[1];
          ++v22;
          v24 = v25;
        }
        while (*(_DWORD *)(v20 + 8 * v25) < v21);
        v26 = a2;
        if (v23 == v9)
        {
          v26 = a2;
          do
          {
            if (v22 >= v26)
              break;
            v28 = *--v26;
          }
          while (*(_DWORD *)(v20 + 8 * v28) >= v21);
        }
        else
        {
          do
            v27 = *--v26;
          while (*(_DWORD *)(v20 + 8 * v27) >= v21);
        }
        if (v22 < v26)
        {
          v29 = *v26;
          v30 = v24;
          v31 = v22;
          v32 = v26;
          do
          {
            *v31 = v29;
            *v32 = v30;
            v33 = *(_DWORD *)(v20 + 8 * v18);
            do
            {
              v23 = v31;
              v34 = v31[1];
              ++v31;
              v30 = v34;
            }
            while (*(_DWORD *)(v20 + 8 * v34) < v33);
            do
            {
              v35 = *--v32;
              v29 = v35;
            }
            while (*(_DWORD *)(v20 + 8 * v35) >= v33);
          }
          while (v31 < v32);
        }
        if (v23 != v9)
          *v9 = *v23;
        *v23 = v18;
        if (v22 < v26)
        {
LABEL_31:
          result = std::__introsort<std::_ClassicAlgPolicy,Espresso::interference_graph::populate_force_aliased_blob_in_visit_order(void)::$_0 &,int *,false>(v9, v23, a3, a4, a5 & 1);
          a5 = 0;
          v11 = v23 + 1;
          continue;
        }
        v36 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::interference_graph::populate_force_aliased_blob_in_visit_order(void)::$_0 &,int *>(v9, v23, a3);
        v11 = v23 + 1;
        result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::interference_graph::populate_force_aliased_blob_in_visit_order(void)::$_0 &,int *>(v23 + 1, a2, a3);
        if (!(_DWORD)result)
        {
          if (v36)
            continue;
          goto LABEL_31;
        }
        a2 = v23;
        if (!v36)
          goto LABEL_2;
        return result;
    }
  }
}

int *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::interference_graph::populate_force_aliased_blob_in_visit_order(void)::$_0 &,int *>(int *result, int *a2, int *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  _DWORD *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *a2;
  v5 = *result;
  v6 = *(_DWORD *)(a4 + 8 * v4);
  v7 = (_DWORD *)(a4 + 8 * v5);
  v8 = *a3;
  v9 = *(_DWORD *)(a4 + 8 * v8);
  if (v6 >= *v7)
  {
    if (v9 < v6)
    {
      *a2 = v8;
      *a3 = v4;
      v10 = *a2;
      v11 = *result;
      if (*(_DWORD *)(a4 + 8 * v10) < *(_DWORD *)(a4 + 8 * v11))
      {
        *result = v10;
        *a2 = v11;
      }
    }
  }
  else
  {
    if (v9 >= v6)
    {
      *result = v4;
      *a2 = v5;
      v12 = *a3;
      if (*(_DWORD *)(a4 + 8 * v12) >= *v7)
        return result;
      *a2 = v12;
    }
    else
    {
      *result = v8;
    }
    *a3 = v5;
  }
  return result;
}

int *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::interference_graph::populate_force_aliased_blob_in_visit_order(void)::$_0 &,int *>(int *a1, int *a2, int *a3, int *a4, uint64_t a5)
{
  int *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::interference_graph::populate_force_aliased_blob_in_visit_order(void)::$_0 &,int *>(a1, a2, a3, *(_QWORD *)(*(_QWORD *)a5 + 64));
  v11 = *a4;
  v12 = *a3;
  v13 = *(_QWORD *)(*(_QWORD *)a5 + 64);
  if (*(_DWORD *)(v13 + 8 * v11) < *(_DWORD *)(v13 + 8 * v12))
  {
    *a3 = v11;
    *a4 = v12;
    v14 = *a3;
    v15 = *a2;
    if (*(_DWORD *)(v13 + 8 * v14) < *(_DWORD *)(v13 + 8 * v15))
    {
      *a2 = v14;
      *a3 = v15;
      v16 = *a2;
      v17 = *a1;
      if (*(_DWORD *)(v13 + 8 * v16) < *(_DWORD *)(v13 + 8 * v17))
      {
        *a1 = v16;
        *a2 = v17;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::interference_graph::populate_force_aliased_blob_in_visit_order(void)::$_0 &,int *>(int *a1, int *a2, uint64_t a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  int *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  int *v21;
  int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  uint64_t v29;
  uint64_t v30;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      v9 = *a1;
      if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 64) + 8 * v8) < *(_DWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 64)
                                                                               + 8 * v9))
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::interference_graph::populate_force_aliased_blob_in_visit_order(void)::$_0 &,int *>(a1, a1 + 1, a2 - 1, *(_QWORD *)(*(_QWORD *)a3 + 64));
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::interference_graph::populate_force_aliased_blob_in_visit_order(void)::$_0 &,int *>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      v21 = a1 + 2;
      v22 = a1 + 3;
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::interference_graph::populate_force_aliased_blob_in_visit_order(void)::$_0 &,int *>(a1, a1 + 1, a1 + 2, a1 + 3, a3);
      v23 = *(a2 - 1);
      v24 = a1[3];
      v25 = *(_QWORD *)(*(_QWORD *)a3 + 64);
      if (*(_DWORD *)(v25 + 8 * v23) < *(_DWORD *)(v25 + 8 * v24))
      {
        *v22 = v23;
        *(a2 - 1) = v24;
        v26 = *v22;
        v27 = *v21;
        v28 = (_DWORD *)(v25 + 8 * v26);
        if (*v28 < *(_DWORD *)(v25 + 8 * v27))
        {
          *v21 = v26;
          *v22 = v27;
          v29 = a1[1];
          if (*v28 < *(_DWORD *)(v25 + 8 * v29))
          {
            a1[1] = v26;
            a1[2] = v29;
            v30 = *a1;
            if (*v28 < *(_DWORD *)(v25 + 8 * v30))
            {
              *a1 = v26;
              a1[1] = v30;
            }
          }
        }
      }
      return 1;
    default:
      v10 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::interference_graph::populate_force_aliased_blob_in_visit_order(void)::$_0 &,int *>(a1, a1 + 1, a1 + 2, *(_QWORD *)(*(_QWORD *)a3 + 64));
      v11 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v12 = 0;
      v13 = *(_QWORD *)(*(_QWORD *)a3 + 64);
      v14 = 12;
      break;
  }
  while (1)
  {
    v15 = *v11;
    v16 = *v10;
    v17 = (_DWORD *)(v13 + 8 * v15);
    if (*v17 < *(_DWORD *)(v13 + 8 * v16))
    {
      v18 = v14;
      while (1)
      {
        *(int *)((char *)a1 + v18) = v16;
        v19 = v18 - 4;
        if (v18 == 4)
          break;
        v16 = *(int *)((char *)a1 + v18 - 8);
        v18 -= 4;
        if (*v17 >= *(_DWORD *)(v13 + 8 * v16))
        {
          v20 = (int *)((char *)a1 + v19);
          goto LABEL_13;
        }
      }
      v20 = a1;
LABEL_13:
      *v20 = v15;
      if (++v12 == 8)
        return v11 + 1 == a2;
    }
    v10 = v11;
    v14 += 4;
    if (++v11 == a2)
      return 1;
  }
}

void Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*,char const*>(char *a1, _QWORD *a2, _QWORD *a3)
{
  Espresso::throw_exception_with_format<Espresso::invalid_state_error>(a1, *a2, *a3);
}

void std::__function::__func<Espresso::force_aliased_blob_index::map_global_to_blob_loaded_from_or_store_to_it(std::unordered_map<int,int> &)::$_0,std::allocator<Espresso::force_aliased_blob_index::map_global_to_blob_loaded_from_or_store_to_it(std::unordered_map<int,int> &)::$_0>,void ()(std::pair<std::string,std::shared_ptr<Espresso::abstract_blob_container>> &)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

__n128 std::__function::__func<Espresso::force_aliased_blob_index::map_global_to_blob_loaded_from_or_store_to_it(std::unordered_map<int,int> &)::$_0,std::allocator<Espresso::force_aliased_blob_index::map_global_to_blob_loaded_from_or_store_to_it(std::unordered_map<int,int> &)::$_0>,void ()(std::pair<std::string,std::shared_ptr<Espresso::abstract_blob_container>> &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DB1978;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<Espresso::force_aliased_blob_index::map_global_to_blob_loaded_from_or_store_to_it(std::unordered_map<int,int> &)::$_0,std::allocator<Espresso::force_aliased_blob_index::map_global_to_blob_loaded_from_or_store_to_it(std::unordered_map<int,int> &)::$_0>,void ()(std::pair<std::string,std::shared_ptr<Espresso::abstract_blob_container>> &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DB1978;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<Espresso::force_aliased_blob_index::map_global_to_blob_loaded_from_or_store_to_it(std::unordered_map<int,int> &)::$_0,std::allocator<Espresso::force_aliased_blob_index::map_global_to_blob_loaded_from_or_store_to_it(std::unordered_map<int,int> &)::$_0>,void ()(std::pair<std::string,std::shared_ptr<Espresso::abstract_blob_container>> &)>::operator()(uint64_t a1, unsigned __int8 *a2)
{
  _QWORD *v3;
  unsigned __int8 *v4;
  int v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t **v9;
  unint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  int v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t **v22;
  unint64_t *v23;
  uint64_t v24;
  _QWORD *v25;
  unsigned __int8 *v26;
  unsigned __int8 *v27;
  unsigned __int8 *v28;
  int v29;
  uint64_t v30;
  uint64_t *v31;
  unint64_t *v32;
  unint64_t *v33;
  unint64_t *v34;
  unint64_t *v35;
  unint64_t v36;
  _OWORD v37[2];
  int v38;
  int v39;

  v3 = *(_QWORD **)(a1 + 8);
  v4 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>((_QWORD *)(v3[2] + 16), a2);
  if (v4)
  {
    v39 = *((_DWORD *)v4 + 10);
    v5 = v39;
    memset(v37, 0, sizeof(v37));
    v38 = 1065353216;
    v6 = std::__hash_table<std::__hash_value_type<int,std::unordered_set<int>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_set<int>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_set<int>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_set<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)(v3 + 10), v39, &v39);
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__move_assign((uint64_t)(v6 + 3), (uint64_t *)v37);
    std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)v37);
    v7 = (_QWORD *)v3[2];
    v8 = v7[7];
    if (0xAAAAAAAAAAAAAAABLL * ((v7[8] - v8) >> 3) <= v5)
      goto LABEL_23;
    v9 = (unint64_t **)(v8 + 24 * v5);
    v10 = *v9;
    v32 = v9[1];
    v11 = 0xFFFFFFFFLL;
    if (*v9 != v32)
    {
      do
      {
        v34 = v10;
        v36 = *v10;
        v12 = *v3 + 96;
        *(_QWORD *)&v37[0] = &v36;
        v13 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v12, &v36, (uint64_t)&std::piecewise_construct, (uint64_t **)v37);
        v14 = (unsigned __int8 *)v13[3];
        v15 = (unsigned __int8 *)v13[4];
        while (v14 != v15)
        {
          v16 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>((_QWORD *)(v3[1] + 16), v14);
          if (!v16)
LABEL_22:
            std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
          LODWORD(v37[0]) = *((_DWORD *)v16 + 10);
          v17 = v37[0];
          v18 = LODWORD(v37[0]);
          if ((_DWORD)v11 != -1)
          {
            *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(*(_QWORD *)(a1 + 16), v37[0], v37)+ 5) = v11;
            v18 = v11;
          }
          v19 = std::__hash_table<std::__hash_value_type<int,std::unordered_set<int>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_set<int>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_set<int>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_set<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)(v3 + 10), v5, &v39);
          std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>((uint64_t)(v19 + 3), v17, v17);
          *(_QWORD *)(v3[7] + (((unint64_t)v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
          v14 += 24;
          v11 = v18;
        }
        v10 = v34 + 1;
      }
      while (v34 + 1 != v32);
      v7 = (_QWORD *)v3[2];
    }
    v21 = v7 + 10;
    v20 = v7[10];
    if (0xAAAAAAAAAAAAAAABLL * ((v21[1] - v20) >> 3) <= v5)
LABEL_23:
      std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
    v22 = (unint64_t **)(v20 + 24 * v5);
    v23 = *v22;
    v33 = v22[1];
    if (*v22 != v33)
    {
      do
      {
        v35 = v23;
        v36 = *v23;
        v24 = *v3 + 56;
        *(_QWORD *)&v37[0] = &v36;
        v25 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v24, &v36, (uint64_t)&std::piecewise_construct, (uint64_t **)v37);
        v26 = (unsigned __int8 *)v25[3];
        v27 = (unsigned __int8 *)v25[4];
        while (v26 != v27)
        {
          v28 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>((_QWORD *)(v3[1] + 16), v26);
          if (!v28)
            goto LABEL_22;
          LODWORD(v37[0]) = *((_DWORD *)v28 + 10);
          v29 = v37[0];
          v30 = LODWORD(v37[0]);
          if ((_DWORD)v11 != -1)
          {
            *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(*(_QWORD *)(a1 + 16), v37[0], v37)+ 5) = v11;
            v30 = v11;
          }
          v31 = std::__hash_table<std::__hash_value_type<int,std::unordered_set<int>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_set<int>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_set<int>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_set<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)(v3 + 10), v5, &v39);
          std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>((uint64_t)(v31 + 3), v29, v29);
          *(_QWORD *)(v3[7] + (((unint64_t)v29 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v29;
          v26 += 24;
          v11 = v30;
        }
        v23 = v35 + 1;
      }
      while (v35 + 1 != v33);
    }
  }
}

void sub_191375CCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<Espresso::force_aliased_blob_index::map_global_to_blob_loaded_from_or_store_to_it(std::unordered_map<int,int> &)::$_0,std::allocator<Espresso::force_aliased_blob_index::map_global_to_blob_loaded_from_or_store_to_it(std::unordered_map<int,int> &)::$_0>,void ()(std::pair<std::string,std::shared_ptr<Espresso::abstract_blob_container>> &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN8Espresso24force_aliased_blob_index45map_global_to_blob_loaded_from_or_store_to_itERNSt3__113unordered_mapIiiNS1_4hashIiEENS1_8equal_toIiEENS1_9allocatorINS1_4pairIKiiEEEEEEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<Espresso::force_aliased_blob_index::map_global_to_blob_loaded_from_or_store_to_it(std::unordered_map<int,int> &)::$_0,std::allocator<Espresso::force_aliased_blob_index::map_global_to_blob_loaded_from_or_store_to_it(std::unordered_map<int,int> &)::$_0>,void ()(std::pair<std::string,std::shared_ptr<Espresso::abstract_blob_container>> &)>::target_type()
{
}

uint64_t *std::__hash_table<std::__hash_value_type<int,std::unordered_set<int>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_set<int>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_set<int>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_set<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t a1, int a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t **v9;
  uint64_t *i;
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  int8x8_t prime;
  void *v20;
  void *v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  uint8x8_t v25;
  unint64_t v26;
  uint8x8_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  void *v34;
  _QWORD v35[2];
  char v36;

  v6 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (uint64_t *)*i)
      {
        v11 = i[1];
        if (v11 == a2)
        {
          if (*((_DWORD *)i + 4) == a2)
            return i;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  v12 = (_QWORD *)(a1 + 16);
  v13 = (char *)operator new(0x40uLL);
  v35[0] = v13;
  v35[1] = a1 + 16;
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = v6;
  *((_DWORD *)v13 + 4) = *a3;
  *(_OWORD *)(v13 + 24) = 0u;
  *(_OWORD *)(v13 + 40) = 0u;
  *((_DWORD *)v13 + 14) = 1065353216;
  v36 = 1;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v7 || (float)(v15 * (float)v7) < v14)
  {
    v16 = 1;
    if (v7 >= 3)
      v16 = (v7 & (v7 - 1)) != 0;
    v17 = v16 | (2 * v7);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      prime = (int8x8_t)v18;
    else
      prime = (int8x8_t)v17;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (*(_QWORD *)&prime > v7)
      goto LABEL_30;
    if (*(_QWORD *)&prime < v7)
    {
      v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v27 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        v26 = std::__next_prime(v26);
      }
      else
      {
        v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2)
          v26 = v28;
      }
      if (*(_QWORD *)&prime <= v26)
        prime = (int8x8_t)v26;
      if (*(_QWORD *)&prime >= v7)
      {
        v7 = *(_QWORD *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v20 = operator new(8 * *(_QWORD *)&prime);
          v21 = *(void **)a1;
          *(_QWORD *)a1 = v20;
          if (v21)
            operator delete(v21);
          v22 = 0;
          *(int8x8_t *)(a1 + 8) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v22++) = 0;
          while (*(_QWORD *)&prime != v22);
          v23 = (_QWORD *)*v12;
          if (*v12)
          {
            v24 = v23[1];
            v25 = (uint8x8_t)vcnt_s8(prime);
            v25.i16[0] = vaddlv_u8(v25);
            if (v25.u32[0] > 1uLL)
            {
              if (v24 >= *(_QWORD *)&prime)
                v24 %= *(_QWORD *)&prime;
            }
            else
            {
              v24 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v12;
            v29 = (_QWORD *)*v23;
            if (*v23)
            {
              do
              {
                v30 = v29[1];
                if (v25.u32[0] > 1uLL)
                {
                  if (v30 >= *(_QWORD *)&prime)
                    v30 %= *(_QWORD *)&prime;
                }
                else
                {
                  v30 &= *(_QWORD *)&prime - 1;
                }
                if (v30 != v24)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v30))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v30) = v23;
                    goto LABEL_55;
                  }
                  *v23 = *v29;
                  *v29 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v30);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v30) = v29;
                  v29 = v23;
                }
                v30 = v24;
LABEL_55:
                v23 = v29;
                v29 = (_QWORD *)*v29;
                v24 = v30;
              }
              while (v29);
            }
          }
          v7 = (unint64_t)prime;
          goto LABEL_59;
        }
        v34 = *(void **)a1;
        *(_QWORD *)a1 = 0;
        if (v34)
          operator delete(v34);
        v7 = 0;
        *(_QWORD *)(a1 + 8) = 0;
      }
    }
LABEL_59:
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v31 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  i = (uint64_t *)v35[0];
  if (v31)
  {
    *(_QWORD *)v35[0] = *v31;
LABEL_72:
    *v31 = i;
    goto LABEL_73;
  }
  *(_QWORD *)v35[0] = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = v12;
  if (*i)
  {
    v32 = *(_QWORD *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v32 >= v7)
        v32 %= v7;
    }
    else
    {
      v32 &= v7 - 1;
    }
    v31 = (_QWORD *)(*(_QWORD *)a1 + 8 * v32);
    goto LABEL_72;
  }
LABEL_73:
  v35[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<int,std::unordered_set<int>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,std::unordered_set<int>>,void *>>>>::reset[abi:ne180100]((uint64_t)v35);
  return i;
}

void sub_191376134(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<int,std::unordered_set<int>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,std::unordered_set<int>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;

  if (*(_QWORD *)(a1 + 24))
  {
    v4 = *(_QWORD **)(a1 + 16);
    if (v4)
    {
      do
      {
        v5 = (_QWORD *)*v4;
        operator delete(v4);
        v4 = v5;
      }
      while (v5);
    }
    *(_QWORD *)(a1 + 16) = 0;
    v6 = *(_QWORD *)(a1 + 8);
    if (v6)
    {
      for (i = 0; i != v6; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
  v8 = *a2;
  *a2 = 0;
  v9 = *(void **)a1;
  *(_QWORD *)a1 = v8;
  if (v9)
    operator delete(v9);
  v12 = a2[2];
  v11 = a2 + 2;
  v10 = v12;
  v13 = *(v11 - 1);
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(a1 + 8) = v13;
  *(v11 - 1) = 0;
  v14 = v11[1];
  *(_QWORD *)(a1 + 24) = v14;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v11 + 4);
  if (v14)
  {
    v15 = *(_QWORD *)(v10 + 8);
    v16 = *(_QWORD *)(a1 + 8);
    if ((v16 & (v16 - 1)) != 0)
    {
      if (v15 >= v16)
        v15 %= v16;
    }
    else
    {
      v15 &= v16 - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v15) = a1 + 16;
    *v11 = 0;
    v11[1] = 0;
  }
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<int,std::unordered_set<int>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,std::unordered_set<int>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)v1 + 24);
    operator delete(v1);
  }
}

void std::__shared_ptr_emplace<Espresso::pass_global_name_indexing>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBD620;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::pass_global_name_indexing>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBD620;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::pass_global_name_indexing>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::vector<Espresso::net *>::reserve(void **a1, unint64_t a2)
{
  int64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;

  if (a2 > ((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v3 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v4 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a2);
    v5 = &v4[v3 & 0xFFFFFFFFFFFFFFF8];
    v7 = &v4[8 * v6];
    v9 = (char *)*a1;
    v8 = (char *)a1[1];
    v10 = v5;
    if (v8 != *a1)
    {
      do
      {
        v11 = *((_QWORD *)v8 - 1);
        v8 -= 8;
        *((_QWORD *)v10 - 1) = v11;
        v10 -= 8;
      }
      while (v8 != v9);
      v8 = (char *)*a1;
    }
    *a1 = v10;
    a1[1] = v5;
    a1[2] = v7;
    if (v8)
      operator delete(v8);
  }
}

uint64_t std::__destroy_at[abi:ne180100]<std::pair<std::shared_ptr<Espresso::abstract_blob_container> const,Espresso::layer_shape>,0>(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(_QWORD *)(a1 + 64) = v2;
    operator delete(v2);
  }
  return std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1);
}

void std::unique_ptr<std::__hash_node<std::shared_ptr<Espresso::abstract_blob_container>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::shared_ptr<Espresso::abstract_blob_container>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,std::string>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void **v1;

  v1 = *(void ***)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(v1 + 2);
    operator delete(v1);
  }
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,Espresso::layer_shape>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,Espresso::layer_shape>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::shared_ptr<Espresso::abstract_blob_container> const,Espresso::layer_shape>,0>((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

void Espresso::throw_exception_selector<Espresso::unsupported_configuration_error,int &>(char *a1, uint64_t a2)
{
  Espresso::throw_exception_with_format<Espresso::unsupported_configuration_error>(a1, a2);
}

void Espresso::ANECompilerEngine::convolution_kernel::~convolution_kernel(Espresso::ANECompilerEngine::convolution_kernel *this)
{
  void **v2;

  *(_QWORD *)this = &off_1E2D77DB8;
  v2 = (void **)((char *)this + 560);
  *((_QWORD *)this + 70) = &unk_1E2D78048;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 792);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 776);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);
  Espresso::generic_convolution_kernel::~generic_convolution_kernel((void **)this);
}

{
  void **v2;

  *(_QWORD *)this = &off_1E2D77DB8;
  v2 = (void **)((char *)this + 560);
  *((_QWORD *)this + 70) = &unk_1E2D78048;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 792);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 776);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);
  Espresso::generic_convolution_kernel::~generic_convolution_kernel((void **)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANECompilerEngine::convolution_kernel::clear_weights(Espresso::ANECompilerEngine::convolution_kernel *this)
{
  _QWORD *v1;

  v1 = (_QWORD *)((char *)this + 160);
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*((_QWORD **)this + 20));
  *(v1 - 1) = v1;
  *v1 = 0;
  v1[1] = 0;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::reset[abi:ne180100](v1 + 45);
  std::shared_ptr<Espresso::blob<unsigned short,4>>::reset[abi:ne180100](v1 + 77);
}

uint64_t Espresso::ANECompilerEngine::convolution_kernel::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  if (Espresso::generic_convolution_kernel::supports_weight_key(a1, a2)
    || Espresso::weight_key_supported_by_conv_quantized_weights_helper(a2, 1))
  {
    return 1;
  }
  else
  {
    return Espresso::ANECompilerEngine::ane_kernel::supports_weight_key(a2);
  }
}

_QWORD *Espresso::ANECompilerEngine::convolution_kernel::set_weights(uint64_t a1, uint64_t *a2)
{
  return std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 776), *a2, a2[1]);
}

void Espresso::ANECompilerEngine::convolution_kernel::set_weights()
{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "use set_weights(blob<float,4>::ptr blob");
  __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
}

void sub_1913765F4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t Espresso::ANECompilerEngine::convolution_kernel::get_biases@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 648);
  *a2 = *(_QWORD *)(this + 640);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

uint64_t Espresso::ANECompilerEngine::convolution_kernel::get_weights@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 784);
  *a2 = *(_QWORD *)(this + 776);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

uint64_t Espresso::ANECompilerEngine::convolution_kernel::get_f16_weights@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 800);
  *a2 = *(_QWORD *)(this + 792);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

_QWORD *Espresso::generic_convolution_kernel::set_quantized_weights_blob(uint64_t a1, uint64_t *a2)
{
  return std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 520), *a2, a2[1]);
}

_QWORD *Espresso::generic_convolution_kernel::set_quantization_ranges_blob(uint64_t a1, uint64_t *a2)
{
  return std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 504), *a2, a2[1]);
}

void Espresso::ANECompilerEngine::convolution_kernel::compile(Espresso::ANECompilerEngine::convolution_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v7;
  const Espresso::net *v8;
  std::__shared_weak_count *v9;
  char *v10;
  const void *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  char *v15;
  std::__shared_weak_count *v16;
  const void *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  void *v34;
  unint64_t *v35;
  unint64_t v36;
  _DWORD *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  void *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  size_t size;
  std::string *p_str;
  std::string *v56;
  std::string *v57;
  std::string *i;
  __int128 v59;
  std::string *v60;
  __CFString *v61;
  id v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __CFString *v66;
  int v67;
  int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  void *v82;
  std::string *v83;
  std::string *v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  __CFString *v89;
  void *v90;
  void **p_data;
  std::string *v92;
  __CFString *v93;
  void **v94;
  std::string *v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t *v101;
  unint64_t v102;
  uint64_t *v103;
  unint64_t v104;
  unint64_t *v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  const char *v115;
  int v116;
  int v117;
  char *v118;
  int v119;
  int v120;
  unsigned int v121;
  unsigned int v122;
  unsigned int v123;
  int v124;
  unsigned int v125;
  Espresso::ANECompilerEngine::compiler *v126;
  void *v127;
  std::__shared_weak_count *v128;
  void *v129;
  std::__shared_weak_count *v130;
  _OWORD v131[10];
  uint64_t v132;
  const Espresso::net *v133;
  std::__shared_weak_count *v134;
  _DWORD *v135;
  std::__shared_weak_count *v136;
  _DWORD *v137;
  std::__shared_weak_count *v138;
  const Espresso::net *v139;
  std::__shared_weak_count *v140;
  const void *v141;
  std::__shared_weak_count *v142;
  const void *v143;
  std::__shared_weak_count *v144;
  const Espresso::net *v145;
  std::__shared_weak_count *v146;
  const Espresso::net *v147;
  std::__shared_weak_count *v148;
  std::string __str;
  void *v150;
  std::string *v151;
  std::string *v152;
  unint64_t v153;
  unint64_t *v154;
  _QWORD v155[6];
  char v156;
  id v157;
  __CFString *v158;
  id v159;
  int v160;
  int v161;
  uint64_t v162;
  std::string *v163;
  unint64_t v164;
  std::string v165;
  _QWORD v166[3];
  std::string *v167;
  std::string *v168;
  unint64_t v169;
  void *__p;
  char v171;
  id v172;
  __CFString *v173;
  id v174;
  int v175;
  int v176;
  std::string v177;
  void **v178[2];

  v145 = 0;
  v146 = 0;
  v4 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
  if (!v4
    || (v7 = std::__shared_weak_count::lock(v4), (v146 = v7) == 0)
    || (v8 = (const Espresso::net *)*((_QWORD *)a2 + 1), (v145 = v8) == 0))
  {
    v115 = "Inconsistent state: null network";
    goto LABEL_196;
  }
  if (!*((_QWORD *)v8 + 72))
  {
    v115 = "Inconsistent state: blob_storage";
LABEL_196:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v115);
  }
  v9 = v7;
  v165.__r_.__value_.__r.__words[0] = *((_QWORD *)a3 + 6);
  v10 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v8 + 136, (unsigned __int8 *)v165.__r_.__value_.__l.__data_, (__int128 **)&v165);
  v11 = (const void *)*((_QWORD *)v10 + 5);
  v12 = (std::__shared_weak_count *)*((_QWORD *)v10 + 6);
  v143 = v11;
  v144 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  v165.__r_.__value_.__r.__words[0] = (std::string::size_type)a3;
  v15 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v8 + 136, (unsigned __int8 *)a3, (__int128 **)&v165);
  v17 = (const void *)*((_QWORD *)v15 + 5);
  v16 = (std::__shared_weak_count *)*((_QWORD *)v15 + 6);
  v141 = v17;
  v142 = v16;
  if (v16)
  {
    v18 = (unint64_t *)&v16->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  if (*((_QWORD *)a3 + 7) - *((_QWORD *)a3 + 6) == 48)
  {
    v126 = a2;
    v118 = (char *)this + 560;
    v139 = v8;
    v140 = v9;
    v20 = (unint64_t *)&v9->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
    v22 = *((unsigned int *)this + 88);
    v121 = *((_DWORD *)this + 89);
    v116 = *((_DWORD *)this + 91);
    v117 = *((_DWORD *)this + 83);
    v119 = *((_DWORD *)this + 82);
    v120 = *((__int16 *)this + 188);
    v122 = *((__int16 *)this + 192);
    v123 = *((__int16 *)this + 193);
    v124 = *((_DWORD *)this + 86);
    v125 = *((__int16 *)this + 194);
    v23 = *((__int16 *)this + 195);
    if (v11
    {
      v137 = v24;
      v138 = v12;
      if (v12)
      {
        v25 = (unint64_t *)&v12->__shared_owners_;
        do
          v26 = __ldxr(v25);
        while (__stxr(v26 + 1, v25));
      }
      if (!v17)
        goto LABEL_42;
    }
    else
    {
      v137 = 0;
      v138 = 0;
      if (!v17)
        goto LABEL_42;
    }
    if (v37)
    {
      v135 = v37;
      v136 = v16;
      v38 = v22;
      if (v16)
      {
        v39 = (unint64_t *)&v16->__shared_owners_;
        do
          v40 = __ldxr(v39);
        while (__stxr(v40 + 1, v39));
      }
LABEL_43:
      v163 = 0;
      v162 = 0;
      v164 = 0;
      Espresso::ANECompilerEngine::compiler::unit_t::unit_t(&v150, (id *)a3);
      v147 = v8;
      v148 = v9;
      do
        v44 = __ldxr(v20);
      while (__stxr(v44 + 1, v20));
      v45 = *((_QWORD *)a3 + 6);
      if (*(char *)(v45 + 47) < 0)
        std::string::__init_copy_ctor_external(&v177, *(const std::string::value_type **)(v45 + 24), *(_QWORD *)(v45 + 32));
      else
        v177 = *(std::string *)(v45 + 24);
      if ((v177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v177.__r_.__value_.__r.__words[2]);
      else
        size = v177.__r_.__value_.__l.__size_;
      std::string::basic_string[abi:ne180100]((uint64_t)&__str, size + 11);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_str = &__str;
      else
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      if (size)
      {
        if ((v177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v56 = &v177;
        else
          v56 = (std::string *)v177.__r_.__value_.__r.__words[0];
        memmove(p_str, v56, size);
      }
      strcpy((char *)p_str + size, "_rasterizer");
      Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v165.__r_.__value_.__l.__data_, (id *)a3);
      std::string::operator=(&v165, &__str);
      v57 = v167;
      for (i = v168; i != v57; --i)
      {
        if (SHIBYTE(i[-1].__r_.__value_.__r.__words[2]) < 0)
          operator delete(i[-1].__r_.__value_.__l.__data_);
      }
      v168 = v57;
      if ((unint64_t)v57 >= v169)
      {
        v60 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v167, (uint64_t)&v177);
      }
      else
      {
        if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(v57, v177.__r_.__value_.__l.__data_, v177.__r_.__value_.__l.__size_);
        }
        else
        {
          v59 = *(_OWORD *)&v177.__r_.__value_.__l.__data_;
          v57->__r_.__value_.__r.__words[2] = v177.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v57->__r_.__value_.__l.__data_ = v59;
        }
        v60 = v57 + 1;
      }
      v61 = v173;
      v168 = v60;
      v173 = CFSTR("KernelRasterizer");

      v176 = 1;
      v175 = v124;
      v62 = v174;
      v174 = 0;

      Espresso::ANECompilerEngine::compiler::add_unit(v126, (const Espresso::ANECompilerEngine::compiler::unit_t *)&v165);
      if (v171 < 0)
        operator delete(__p);
      v178[0] = (void **)&v167;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v178);
      v178[0] = (void **)v166;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v178);
      if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v165.__r_.__value_.__l.__data_);
      if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v177.__r_.__value_.__l.__data_);
      do
        v63 = __ldaxr(v20);
      while (__stlxr(v63 - 1, v20));
      if (!v63)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
      std::string::operator=((std::string *)(v155[0] + 24), &__str);
      v65 = v122;
      v64 = v123;
      v66 = v158;
      v158 = CFSTR("CrossCorrelation");

      v161 = 1;
      v160 = v124;
      if (v120 != 4)
      {
        if (v120 == 2)
        {
          v65 = 0;
          v64 = 0;
          v125 = 0;
          v23 = 0;
          goto LABEL_110;
        }
        if (v120 != 1)
          goto LABEL_110;
      }
      v67 = v135[3] + v121 + ~v137[3];
      v68 = v135[2] + v38 + ~v137[2];
      v69 = v67 & ~(v67 >> 31);
      v70 = v68 & ~(v68 >> 31);
      v71 = v70 >> 1;
      v72 = v70 - (v70 >> 1);
      v73 = v69 >> 1;
      v74 = v69 - (v69 >> 1);
      if (v120 == 1)
        v65 = v71;
      else
        v65 = v72;
      if (v120 == 1)
        v64 = v72;
      else
        v64 = v71;
      if (v120 == 1)
        v75 = v73;
      else
        v75 = v74;
      v125 = v75;
      if (v120 == 1)
        v23 = v74;
      else
        v23 = v73;
LABEL_110:
      v76 = (void *)objc_opt_new();
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v121);
      v77 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v76, "setObject:forKeyedSubscript:", v77, CFSTR("TemplateHeight"));

      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v38);
      v78 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v76, "setObject:forKeyedSubscript:", v78, CFSTR("TemplateWidth"));

      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v125);
      v79 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v76, "setObject:forKeyedSubscript:", v79, CFSTR("PadTop"));

      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v23);
      v80 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v76, "setObject:forKeyedSubscript:", v80, CFSTR("PadBot"));

      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v65);
      v81 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v76, "setObject:forKeyedSubscript:", v81, CFSTR("PadLeft"));

      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v64);
      v82 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v76, "setObject:forKeyedSubscript:", v82, CFSTR("PadRight"));

      objc_storeStrong(&v159, v76);
      v83 = v163;
      if ((unint64_t)v163 >= v164)
      {
        v85 = 0x8E38E38E38E38E39 * (((uint64_t)v163 - v162) >> 4);
        if (v85 + 1 > 0x1C71C71C71C71C7)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v86 = 0x1C71C71C71C71C72 * ((uint64_t)(v164 - v162) >> 4);
        if (v86 <= v85 + 1)
          v86 = v85 + 1;
        if (0x8E38E38E38E38E39 * ((uint64_t)(v164 - v162) >> 4) >= 0xE38E38E38E38E3)
          v87 = 0x1C71C71C71C71C7;
        else
          v87 = v86;
        v166[1] = &v164;
        if (v87)
          v87 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v87);
        else
          v88 = 0;
        v165.__r_.__value_.__r.__words[0] = v87;
        v165.__r_.__value_.__l.__size_ = v87 + 144 * v85;
        v165.__r_.__value_.__r.__words[2] = v165.__r_.__value_.__l.__size_;
        v166[0] = v87 + 144 * v88;
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)v165.__r_.__value_.__l.__size_, (uint64_t)&v150);
        v165.__r_.__value_.__r.__words[2] += 144;
        std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v162, &v165);
        v84 = v163;
        std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&v165);
      }
      else
      {
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v163, (uint64_t)&v150);
        v84 = v83 + 6;
      }
      v163 = v84;

      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);

      if (v156 < 0)
        operator delete((void *)v155[4]);
      v165.__r_.__value_.__r.__words[0] = (std::string::size_type)v155;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v165);
      v165.__r_.__value_.__r.__words[0] = (std::string::size_type)&v153;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v165);
      if (SHIBYTE(v152) < 0)
        operator delete(v150);
      if (v119)
      {
        Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v165.__r_.__value_.__l.__data_, (id *)a3);
        v89 = v173;
        v173 = CFSTR("Neuron");

        v90 = (void *)objc_opt_new();
        objc_msgSend(v90, "setObject:forKeyedSubscript:", CFSTR("ReLU"), CFSTR("Type"));
        objc_storeStrong(&v174, v90);
        p_data = (void **)&v168[-1].__r_.__value_.__l.__data_;
        if (SHIBYTE(v168[-1].__r_.__value_.__r.__words[2]) < 0)
          operator delete(*p_data);
        v168 = (std::string *)p_data;
        v92 = v163;
        if ((unint64_t)v163 < v164)
        {
LABEL_137:
          std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v163, (uint64_t)&v165);
          v95 = v92 + 6;
LABEL_159:
          v163 = v95;

          if (v171 < 0)
            operator delete(__p);
          v150 = &v167;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v150);
          v150 = v166;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v150);
          if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v165.__r_.__value_.__l.__data_);
          goto LABEL_163;
        }
        v96 = 0x8E38E38E38E38E39 * (((uint64_t)v163 - v162) >> 4);
        if (v96 + 1 > 0x1C71C71C71C71C7)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v97 = 0x1C71C71C71C71C72 * ((uint64_t)(v164 - v162) >> 4);
        if (v97 <= v96 + 1)
          v97 = v96 + 1;
        if (0x8E38E38E38E38E39 * ((uint64_t)(v164 - v162) >> 4) >= 0xE38E38E38E38E3)
          v98 = 0x1C71C71C71C71C7;
        else
          v98 = v97;
        v154 = &v164;
        if (!v98)
        {
          v100 = 0;
          goto LABEL_158;
        }
      }
      else
      {
        if (!v117)
        {
          if (v116 != -1)
            Espresso::throw_exception_selector<Espresso::not_implemented_error>("Custom activation not implemented");
LABEL_163:
          (*(void (**)(char *, Espresso::ANECompilerEngine::compiler *, uint64_t *))(*(_QWORD *)v118 + 32))(v118, v126, &v162);
          v165.__r_.__value_.__r.__words[0] = (std::string::size_type)&v162;
          std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&v165);
          if (v136)
          {
            v101 = &v136->__shared_owners_;
            do
              v102 = __ldaxr((unint64_t *)v101);
            while (__stlxr(v102 - 1, (unint64_t *)v101));
            if (!v102)
            {
              ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
              std::__shared_weak_count::__release_weak(v136);
            }
          }
          if (v138)
          {
            v103 = &v138->__shared_owners_;
            do
              v104 = __ldaxr((unint64_t *)v103);
            while (__stlxr(v104 - 1, (unint64_t *)v103));
            if (!v104)
            {
              ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
              std::__shared_weak_count::__release_weak(v138);
            }
          }
          v51 = v140;
          if (v140)
          {
            v105 = (unint64_t *)&v140->__shared_owners_;
            do
              v53 = __ldaxr(v105);
            while (__stlxr(v53 - 1, v105));
            goto LABEL_176;
          }
          goto LABEL_178;
        }
        Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v165.__r_.__value_.__l.__data_, (id *)a3);
        v93 = v173;
        v173 = CFSTR("Neuron");

        v90 = (void *)objc_opt_new();
        objc_msgSend(v90, "setObject:forKeyedSubscript:", CFSTR("Tanh"), CFSTR("Type"));
        objc_storeStrong(&v174, v90);
        v94 = (void **)&v168[-1].__r_.__value_.__l.__data_;
        if (SHIBYTE(v168[-1].__r_.__value_.__r.__words[2]) < 0)
          operator delete(*v94);
        v168 = (std::string *)v94;
        v92 = v163;
        if ((unint64_t)v163 < v164)
          goto LABEL_137;
        v96 = 0x8E38E38E38E38E39 * (((uint64_t)v163 - v162) >> 4);
        if (v96 + 1 > 0x1C71C71C71C71C7)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v99 = 0x1C71C71C71C71C72 * ((uint64_t)(v164 - v162) >> 4);
        if (v99 <= v96 + 1)
          v99 = v96 + 1;
        if (0x8E38E38E38E38E39 * ((uint64_t)(v164 - v162) >> 4) >= 0xE38E38E38E38E3)
          v98 = 0x1C71C71C71C71C7;
        else
          v98 = v99;
        v154 = &v164;
        if (!v98)
        {
          v100 = 0;
          goto LABEL_158;
        }
      }
      v98 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v98);
LABEL_158:
      v150 = (void *)v98;
      v151 = (std::string *)(v98 + 144 * v96);
      v152 = v151;
      v153 = v98 + 144 * v100;
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v151, (uint64_t)&v165);
      v152 += 6;
      std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v162, &v150);
      v95 = v163;
      std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&v150);
      goto LABEL_159;
    }
LABEL_42:
    v135 = 0;
    v136 = 0;
    v38 = v22;
    goto LABEL_43;
  }
  v133 = v8;
  v134 = v9;
  v27 = (unint64_t *)&v9->__shared_owners_;
  do
    v28 = __ldxr(v27);
  while (__stxr(v28 + 1, v27));
  v29 = *((_OWORD *)this + 28);
  v131[8] = *((_OWORD *)this + 27);
  v131[9] = v29;
  v132 = *((_QWORD *)this + 58);
  v30 = *((_OWORD *)this + 24);
  v131[4] = *((_OWORD *)this + 23);
  v131[5] = v30;
  v31 = *((_OWORD *)this + 26);
  v131[6] = *((_OWORD *)this + 25);
  v131[7] = v31;
  v32 = *((_OWORD *)this + 20);
  v131[0] = *((_OWORD *)this + 19);
  v131[1] = v32;
  v33 = *((_OWORD *)this + 22);
  v131[2] = *((_OWORD *)this + 21);
  v131[3] = v33;
  if (v11
  {
    v129 = v34;
    v130 = v12;
    if (v12)
    {
      v35 = (unint64_t *)&v12->__shared_owners_;
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
    }
    if (!v17)
      goto LABEL_47;
  }
  else
  {
    v129 = 0;
    v130 = 0;
    if (!v17)
    {
LABEL_47:
      v16 = 0;
      v127 = 0;
      v128 = 0;
      goto LABEL_48;
    }
  }
  if (!v41)
    goto LABEL_47;
  v127 = v41;
  v128 = v16;
  if (v16)
  {
    v42 = (unint64_t *)&v16->__shared_owners_;
    do
      v43 = __ldxr(v42);
    while (__stxr(v43 + 1, v42));
  }
LABEL_48:
  Espresso::ANECompilerEngine::add_conv<Espresso::ANECompilerEngine::convolution_kernel *>(this, a2, &v133, (uint64_t)v131, (id *)a3, (uint64_t *)&v129, (uint64_t *)&v127);
  if (v16)
  {
    v46 = (unint64_t *)&v16->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v48 = v130;
  if (v130)
  {
    v49 = (unint64_t *)&v130->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  v51 = v134;
  if (v134)
  {
    v52 = (unint64_t *)&v134->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
LABEL_176:
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
LABEL_178:
  v106 = v142;
  if (v142)
  {
    v107 = (unint64_t *)&v142->__shared_owners_;
    do
      v108 = __ldaxr(v107);
    while (__stlxr(v108 - 1, v107));
    if (!v108)
    {
      ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
      std::__shared_weak_count::__release_weak(v106);
    }
  }
  v109 = v144;
  if (v144)
  {
    v110 = (unint64_t *)&v144->__shared_owners_;
    do
      v111 = __ldaxr(v110);
    while (__stlxr(v111 - 1, v110));
    if (!v111)
    {
      ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
      std::__shared_weak_count::__release_weak(v109);
    }
  }
  v112 = v146;
  if (v146)
  {
    v113 = (unint64_t *)&v146->__shared_owners_;
    do
      v114 = __ldaxr(v113);
    while (__stlxr(v114 - 1, v113));
    if (!v114)
    {
      ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
      std::__shared_weak_count::__release_weak(v112);
    }
  }
}

void sub_191377484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,char a47,uint64_t a48,char a49,uint64_t a50,char a51,uint64_t a52,char a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,void *__p,uint64_t a60,uint64_t a61,char a62)
{
  void *v62;

  std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&a62);

  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t((id *)&STACK[0x250]);
  __p = &STACK[0x238];
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a45);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a47);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a49);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a51);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a53);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a55);
  _Unwind_Resume(a1);
}

uint64_t Espresso::ANECompilerEngine::convolution_kernel::weights_helper_weights_shape(Espresso::ANECompilerEngine::convolution_kernel *this)
{
  return (*(uint64_t (**)(Espresso::ANECompilerEngine::convolution_kernel *))(*(_QWORD *)this + 464))(this);
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::convolution_kernel::compile(Espresso::ANECompilerEngine::convolution_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
  Espresso::ANECompilerEngine::convolution_kernel::compile((Espresso::ANECompilerEngine::convolution_kernel *)((char *)this - 560), a2, a3);
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::convolution_kernel::~convolution_kernel(Espresso::ANECompilerEngine::convolution_kernel *this)
{
  void **v2;
  char *v3;

  v2 = (void **)((char *)this - 560);
  *((_QWORD *)this - 70) = &off_1E2D77DB8;
  *(_QWORD *)this = &unk_1E2D78048;
  v3 = (char *)this + 216;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 232);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v3);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((void **)this);
  Espresso::generic_convolution_kernel::~generic_convolution_kernel(v2);
}

{
  void **v2;
  char *v3;

  v2 = (void **)((char *)this - 560);
  *((_QWORD *)this - 70) = &off_1E2D77DB8;
  *(_QWORD *)this = &unk_1E2D78048;
  v3 = (char *)this + 216;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 232);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v3);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((void **)this);
  Espresso::generic_convolution_kernel::~generic_convolution_kernel(v2);
  JUMPOUT(0x19401CD90);
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::convolution_kernel::clear_weights(Espresso::ANECompilerEngine::convolution_kernel *this)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)((char *)this - 408);
  v3 = (_QWORD *)((char *)this - 400);
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*((_QWORD **)this - 50));
  *v2 = v3;
  *((_QWORD *)this - 49) = 0;
  *v3 = 0;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::reset[abi:ne180100]((_QWORD *)this - 5);
  std::shared_ptr<Espresso::blob<unsigned short,4>>::reset[abi:ne180100]((_QWORD *)this + 27);
}

uint64_t `non-virtual thunk to'Espresso::ANECompilerEngine::convolution_kernel::weights_helper_weights_shape(Espresso::ANECompilerEngine::convolution_kernel *this)
{
  return (*(uint64_t (**)(char *))(*((_QWORD *)this - 70) + 464))((char *)this - 560);
}

void Espresso::ANECompilerEngine::add_conv<Espresso::ANECompilerEngine::convolution_kernel *>(_BYTE *a1, _BYTE *a2, const Espresso::net **a3, uint64_t a4, id *a5, uint64_t *a6, uint64_t *a7)
{
  uint64_t *v7;
  std::__shared_weak_count *v10;
  const Espresso::net *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  const Espresso::net *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  const Espresso::net *v22;
  _QWORD *v23;
  char *v24;
  int v25;
  int v26;
  int v27;
  int v28;
  _BOOL4 v29;
  int v30;
  _BOOL4 v31;
  int v32;
  int v33;
  _BOOL4 v34;
  void *v36;
  _BYTE *v37;
  _BOOL4 v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  void *v42;
  __CFString *v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  std::string *v48;
  void *v49;
  void *v50;
  void *v51;
  int v52;
  _BYTE *v53;
  const __CFString *v54;
  const NSDictionary *v55;
  float v56;
  float v57;
  _BOOL4 v58;
  id v59;
  void *v60;
  void *v62;
  std::__shared_weak_count *v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  int v67;
  uint64_t i;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t j;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  Espresso::ANECompilerEngine::ane_kernel *v78;
  _BOOL4 v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  id v84;
  void *v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  uint64_t v89;
  _BOOL4 v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  void *v100;
  void *v101;
  Espresso::ANECompilerEngine::ane_kernel *v102;
  uint64_t v103;
  unint64_t *v104;
  unint64_t v105;
  int v106;
  uint64_t k;
  char *v108;
  uint64_t v109;
  uint64_t m;
  unint64_t *v111;
  std::string::size_type v112;
  std::string::size_type v113;
  unint64_t *v114;
  unint64_t v115;
  __int128 v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  uint64_t v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  int v127;
  uint64_t v128;
  void *v129;
  std::string::size_type v130;
  uint64_t v131;
  int v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  const unsigned __int8 *v135;
  int v136;
  unint64_t v137;
  uint64_t v138;
  unint64_t v139;
  void *v140;
  void *v141;
  uint64_t v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  uint64_t v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  void *v156;
  void *v157;
  Espresso::ANECompilerEngine::ane_kernel *v158;
  uint64_t v159;
  unint64_t *v160;
  unint64_t v161;
  int v162;
  uint64_t n;
  char *v164;
  uint64_t v165;
  uint64_t ii;
  unint64_t *v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  uint64_t v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  std::__shared_weak_count *v178;
  unint64_t *v179;
  unint64_t v180;
  void *v181;
  void *v182;
  Espresso::ANECompilerEngine::ane_kernel *v183;
  __int128 v184;
  unint64_t *v185;
  unint64_t v186;
  unint64_t *v187;
  unint64_t v188;
  uint64_t v189;
  std::string::size_type v190;
  int v191;
  char *v192;
  int v193;
  unint64_t *v194;
  void *v195;
  unint64_t v196;
  uint64_t v197;
  unint64_t v198;
  void *v199;
  void *v200;
  uint64_t v201;
  uint64_t v202;
  unint64_t *v203;
  unint64_t v204;
  int v205;
  uint64_t jj;
  char *v207;
  uint64_t v208;
  uint64_t kk;
  unint64_t *v210;
  int v211;
  void *v212;
  uint64_t v213;
  void *v214;
  uint64_t v215;
  uint64_t *v216;
  void *v217;
  Espresso::ANECompilerEngine::compiler::build_state_t *v218;
  uint64_t v219;
  std::__shared_weak_count *v220;
  unint64_t *v221;
  unint64_t v222;
  void *v223;
  unint64_t *v224;
  unint64_t v225;
  __int128 v226;
  unint64_t *v227;
  unint64_t v228;
  uint64_t v229;
  unint64_t *v230;
  unint64_t v231;
  void *v232;
  void *v233;
  uint64_t v234;
  void *v235;
  void *v236;
  std::__shared_weak_count *v237;
  unint64_t *v238;
  unint64_t v239;
  std::__shared_weak_count *v240;
  unint64_t *v241;
  unint64_t v242;
  id v243;
  std::__shared_weak_count *v244;
  unint64_t *v245;
  unint64_t v246;
  uint64_t v247;
  unint64_t *v248;
  unint64_t v249;
  unint64_t *v250;
  unint64_t v251;
  unint64_t *v252;
  unint64_t *v253;
  unint64_t v254;
  unint64_t *v255;
  unint64_t *v256;
  unint64_t v257;
  unint64_t *v258;
  std::string::size_type v259;
  BOOL v260;
  int v261;
  Espresso::ANECompilerEngine::compiler::build_state_t *v262;
  std::__shared_weak_count *v263;
  unint64_t *v264;
  unint64_t v265;
  uint64_t v266;
  unint64_t *v267;
  unint64_t v268;
  void *v269;
  uint64_t v270;
  void *v271;
  void *v272;
  uint64_t v273;
  std::__shared_weak_count *v274;
  unint64_t *v275;
  unint64_t v276;
  uint64_t v277;
  unint64_t *v278;
  unint64_t v279;
  void *v280;
  void *v281;
  uint64_t v282;
  void *v283;
  void *v284;
  std::__shared_weak_count *v285;
  unint64_t *v286;
  unint64_t v287;
  std::__shared_weak_count *v288;
  unint64_t *v289;
  unint64_t v290;
  void *v291;
  void *v292;
  void *v293;
  _BOOL4 v294;
  int v295;
  int v296;
  int v297;
  unsigned int v298;
  unsigned int v299;
  int v300;
  unsigned int v301;
  unsigned int v302;
  unsigned int v303;
  unsigned int v304;
  uint64_t v305;
  unsigned int v306;
  uint64_t v307;
  uint64_t v308;
  BOOL v309;
  int v311;
  void *v312;
  void *v313;
  void *v314;
  void *v315;
  const __CFString *v316;
  void *v317;
  void *v318;
  __CFString *v319;
  uint64_t v320;
  char *v321;
  _DWORD *v322;
  std::__shared_weak_count *v323;
  unint64_t *v324;
  unint64_t v325;
  std::string *v326;
  std::string *v327;
  unint64_t v328;
  unint64_t v329;
  unint64_t v330;
  uint64_t v331;
  unint64_t *v332;
  unint64_t v333;
  std::__shared_weak_count *v334;
  unint64_t *v335;
  unint64_t v336;
  std::__shared_weak_count *v337;
  uint64_t v338;
  unint64_t *v339;
  unint64_t v340;
  char *v341;
  std::__shared_weak_count *v342;
  unint64_t *v343;
  unint64_t v344;
  char v345;
  float v346;
  unint64_t *v347;
  unint64_t v348;
  std::__shared_weak_count *v349;
  unint64_t *v350;
  unint64_t v351;
  unint64_t *v352;
  unint64_t v353;
  std::__shared_weak_count *v354;
  unint64_t *v355;
  unint64_t v356;
  char *v357;
  uint64_t v358;
  uint64_t v359;
  int v360;
  uint64_t v361;
  uint64_t v362;
  int *v363;
  _WORD *v364;
  int v365;
  __int128 v370;
  std::__shared_weak_count *v371;
  unint64_t *v372;
  unint64_t v373;
  std::__shared_weak_count *v374;
  unint64_t *v375;
  unint64_t v376;
  uint64_t v377;
  int *v378;
  _WORD *v379;
  int v380;
  int v382;
  Espresso::ANECompilerEngine::compiler::build_state_t *v383;
  __int128 v384;
  unint64_t *v385;
  unint64_t v386;
  uint64_t v387;
  unint64_t *v388;
  unint64_t v389;
  void *v390;
  id v391;
  void *v392;
  void *v393;
  void *v394;
  void *v395;
  uint64_t v396;
  void *v397;
  void *v398;
  __int128 v399;
  unint64_t *v400;
  unint64_t v401;
  uint64_t v402;
  unint64_t *v403;
  unint64_t v404;
  void *v405;
  void *v406;
  void *v407;
  uint64_t v408;
  void *v409;
  void *v410;
  std::string *v411;
  std::string *v412;
  uint64_t v413;
  char v414;
  std::string::size_type v415;
  std::string::size_type v416;
  uint64_t v417;
  unsigned __int8 *v418;
  std::string *v419;
  const std::string::value_type *data;
  __int128 v421;
  __CFString *v422;
  std::string *v423;
  std::string *v424;
  unint64_t v425;
  unint64_t v426;
  unint64_t v427;
  uint64_t v428;
  void *v429;
  std::__shared_weak_count *v430;
  unint64_t *v431;
  unint64_t v432;
  std::__shared_weak_count *v433;
  unint64_t *v434;
  unint64_t v435;
  const Espresso::net *v436;
  unint64_t *v437;
  unint64_t v438;
  uint64_t v439;
  const Espresso::net *v440;
  unint64_t *v441;
  unint64_t v442;
  void *v443;
  void *v444;
  Espresso::ANECompilerEngine::ane_kernel *v445;
  std::__shared_weak_count *v446;
  unint64_t *v447;
  unint64_t v448;
  std::__shared_weak_count *v449;
  unint64_t *v450;
  unint64_t v451;
  std::__shared_weak_count *v452;
  unint64_t *v453;
  unint64_t v454;
  std::__shared_weak_count *v455;
  unint64_t *v456;
  unint64_t v457;
  unint64_t *v458;
  unint64_t v459;
  _QWORD *v460;
  uint64_t *v461;
  unint64_t v462;
  uint64_t *v463;
  unint64_t v464;
  _QWORD *v465;
  uint64_t v466;
  uint64_t v467;
  __int128 v468;
  const unsigned __int8 *v469;
  int *v470;
  _WORD *v471;
  uint64_t v472;
  int v473;
  Espresso::ANECompilerEngine::compiler::build_state_t *v475;
  unint64_t *v476;
  unint64_t v477;
  uint64_t v478;
  unint64_t *v479;
  unint64_t v480;
  void *v481;
  void *v482;
  void *v483;
  void *v484;
  uint64_t v485;
  std::__shared_weak_count *v486;
  unint64_t *v487;
  unint64_t v488;
  __int128 v489;
  unint64_t *v490;
  unint64_t v491;
  unint64_t *v492;
  unint64_t v493;
  Espresso::ANECompilerEngine::compiler::build_state_t *v494;
  unint64_t *v495;
  unint64_t v496;
  uint64_t v497;
  unint64_t *v498;
  unint64_t v499;
  const unsigned __int8 **v500;
  std::__shared_weak_count *v501;
  unint64_t *v502;
  unint64_t v503;
  uint64_t v504;
  unint64_t *v505;
  unint64_t v506;
  void *v507;
  void *v508;
  void *v509;
  void *v510;
  uint64_t v511;
  __int128 v512;
  unint64_t *v513;
  unint64_t v514;
  id v515;
  void *v516;
  void *v517;
  void *v518;
  void *v519;
  uint64_t v520;
  void *v521;
  void *v522;
  __CFString *v523;
  std::string *v524;
  std::string *v525;
  unint64_t v526;
  unint64_t v527;
  unint64_t v528;
  uint64_t v529;
  void *v530;
  std::__shared_weak_count *v531;
  unint64_t *v532;
  unint64_t v533;
  std::__shared_weak_count *v534;
  unint64_t *v535;
  unint64_t v536;
  unint64_t v537;
  char *v538;
  std::string::size_type v539;
  __int128 v540;
  std::__shared_weak_count *v541;
  unint64_t *v542;
  unint64_t v543;
  std::string::size_type v544;
  float *v545;
  float *v546;
  float *v547;
  uint64_t v548;
  float v549;
  float v550;
  float v551;
  uint64_t v552;
  const unsigned __int8 *v553;
  int *v554;
  _WORD *v555;
  uint64_t v556;
  int v557;
  std::__shared_weak_count *v559;
  unint64_t *v560;
  unint64_t v561;
  uint64_t v562;
  unint64_t *v563;
  unint64_t v564;
  void *v565;
  void *v566;
  void *v567;
  uint64_t v568;
  std::__shared_weak_count *v569;
  unint64_t *v570;
  unint64_t v571;
  std::__shared_weak_count *v572;
  unint64_t *v573;
  unint64_t v574;
  std::__shared_weak_count *v575;
  unint64_t *v576;
  unint64_t v577;
  std::__shared_weak_count *v578;
  unint64_t *v579;
  unint64_t v580;
  void *v581;
  std::__shared_weak_count *v582;
  unint64_t *v583;
  unint64_t v584;
  std::__shared_weak_count *v585;
  unint64_t *v586;
  unint64_t v587;
  std::__shared_weak_count *v588;
  unint64_t *v589;
  unint64_t v590;
  void *v591;
  __CFString *v592;
  std::string *v593;
  std::string *v594;
  unint64_t v595;
  unint64_t v596;
  unint64_t v597;
  uint64_t v598;
  std::__shared_weak_count *v599;
  unint64_t *v600;
  unint64_t v601;
  void *v602;
  void *v603;
  std::__shared_weak_count *v604;
  unint64_t *v605;
  unint64_t v606;
  _QWORD *v607;
  int v608;
  std::__shared_weak_count *v609;
  unint64_t *v610;
  unint64_t v611;
  std::__shared_weak_count *v612;
  unint64_t *v613;
  unint64_t v614;
  uint64_t v615;
  std::__shared_weak_count *v616;
  unint64_t *v617;
  unint64_t v618;
  std::__shared_weak_count *v619;
  unint64_t *v620;
  unint64_t v621;
  Espresso::ANECompilerEngine::compiler *v622;
  unint64_t v623;
  std::__shared_weak_count *v624;
  unint64_t *v625;
  unint64_t v626;
  std::__shared_weak_count *v627;
  unint64_t *v628;
  unint64_t v629;
  std::__shared_weak_count *v630;
  unint64_t *v631;
  unint64_t v632;
  std::__shared_weak_count *v633;
  unint64_t *v634;
  unint64_t v635;
  unint64_t *v636;
  char *v637;
  std::__shared_weak_count *v638;
  unint64_t *v639;
  unint64_t v640;
  std::__shared_weak_count *v641;
  unint64_t *v642;
  unint64_t v643;
  int v644;
  std::__shared_weak_count *v645;
  unint64_t *v646;
  unint64_t v647;
  void *v648;
  void *v649;
  __CFString *v650;
  std::string *v651;
  std::string *v652;
  int *v653;
  uint64_t v654;
  std::string::size_type v655;
  const unsigned __int8 *v656;
  _WORD *v657;
  int v658;
  std::__shared_weak_count *v660;
  unint64_t *v661;
  unint64_t v662;
  unint64_t *v663;
  unint64_t v664;
  void *v665;
  uint64_t v666;
  std::__shared_weak_count *v667;
  unint64_t *v668;
  unint64_t v669;
  id v670;
  __CFString *v671;
  std::string *v672;
  std::string *v673;
  unint64_t v674;
  unint64_t v675;
  char *v676;
  uint64_t v677;
  const Espresso::net *v678;
  Espresso::ANECompilerEngine *v679;
  NSString *v680;
  Espresso::ANECompilerEngine *v681;
  std::string *p_str;
  void *v683;
  __int128 *v684;
  char *v685;
  char *i1;
  __CFString *v687;
  std::string *v688;
  std::string *v689;
  std::string *v690;
  unint64_t v691;
  unint64_t v692;
  unint64_t v693;
  uint64_t v694;
  std::__shared_weak_count *v695;
  unint64_t *v696;
  unint64_t v697;
  std::__shared_weak_count *v698;
  unint64_t *v699;
  unint64_t v700;
  std::__shared_weak_count *v701;
  unint64_t *v702;
  unint64_t v703;
  std::__shared_weak_count *v704;
  unint64_t *v705;
  unint64_t v706;
  std::__shared_weak_count *v707;
  unint64_t *v708;
  unint64_t v709;
  std::__shared_weak_count *v710;
  unint64_t *v711;
  unint64_t v712;
  std::__shared_weak_count *v713;
  unint64_t *v714;
  unint64_t v715;
  std::__shared_weak_count *v716;
  unint64_t *v717;
  unint64_t v718;
  std::__shared_weak_count *v719;
  unint64_t *v720;
  unint64_t v721;
  std::__shared_weak_count *v722;
  unint64_t *v723;
  unint64_t v724;
  std::__shared_weak_count *v725;
  unint64_t *v726;
  unint64_t v727;
  std::__shared_weak_count *v728;
  unint64_t *v729;
  unint64_t v730;
  void *v731;
  std::__shared_weak_count *v732;
  unint64_t *v733;
  unint64_t v734;
  unint64_t *v735;
  void *v736;
  std::__shared_weak_count *v737;
  unint64_t *v738;
  unint64_t v739;
  uint64_t v740;
  Espresso::ANECompilerEngine::ane_kernel *v741;
  unint64_t *v742;
  unint64_t v743;
  uint64_t v744;
  uint64_t v745;
  int v746;
  char *v747;
  unint64_t *v748;
  const unsigned __int8 *v749;
  unint64_t v750;
  uint64_t v751;
  void *v752;
  void *v753;
  uint64_t weights_file_index;
  uint64_t v755;
  _QWORD *v756;
  uint64_t v757;
  std::__shared_weak_count *v758;
  unint64_t *v759;
  unint64_t v760;
  unint64_t *v761;
  unint64_t v762;
  uint64_t v763;
  uint64_t v764;
  int shared_owners;
  std::__shared_weak_count *v766;
  int v767;
  unint64_t *v768;
  void *v769;
  unint64_t v770;
  uint64_t v771;
  unint64_t v772;
  void *v773;
  void *v774;
  uint64_t v775;
  void *v776;
  std::__shared_weak_count *v777;
  unint64_t *v778;
  unint64_t v779;
  std::__shared_weak_count *v780;
  unint64_t *v781;
  unint64_t v782;
  std::__shared_weak_count *v783;
  unint64_t *v784;
  unint64_t v785;
  std::__shared_weak_count *v786;
  unint64_t *v787;
  unint64_t v788;
  unint64_t *v789;
  std::__shared_weak_count *v790;
  unint64_t *v791;
  unint64_t v792;
  std::__shared_weak_count *v793;
  unint64_t *v794;
  unint64_t v795;
  std::string::size_type v796;
  Espresso::ANECompilerEngine::ane_kernel *v797;
  uint64_t v798;
  std::string::size_type v799;
  int v800;
  char *v801;
  unint64_t *v802;
  const unsigned __int8 *v803;
  unint64_t v804;
  uint64_t v805;
  void *v806;
  void *v807;
  uint64_t v808;
  void *v809;
  Espresso::quantized_weights_helper *v810;
  const Espresso::net *v811;
  unint64_t *v812;
  unint64_t v813;
  Espresso::quantized_weights_helper *v814;
  unint64_t *v815;
  unint64_t v816;
  void *v817;
  std::string::size_type v818;
  _BYTE *v819;
  int v820;
  _DWORD *v821;
  uint64_t v823;
  _QWORD *v824;
  uint64_t v825;
  std::__shared_weak_count *v826;
  unint64_t *v827;
  unint64_t v828;
  unint64_t *v829;
  unint64_t v830;
  void *v831;
  uint64_t v832;
  char *v833;
  int v834;
  std::__shared_weak_count *v835;
  unint64_t *v836;
  const unsigned __int8 *v837;
  unint64_t v838;
  uint64_t v839;
  unint64_t v840;
  void *v841;
  void *v842;
  uint64_t v843;
  void *v844;
  std::__shared_weak_count *v845;
  unint64_t *v846;
  unint64_t v847;
  std::__shared_weak_count *v848;
  unint64_t *v849;
  unint64_t v850;
  std::__shared_weak_count *v851;
  unint64_t *v852;
  unint64_t v853;
  uint64_t v854;
  uint64_t v856;
  int v857;
  std::__shared_weak_count *v858;
  unint64_t *v859;
  const unsigned __int8 *v860;
  unint64_t v861;
  uint64_t v862;
  unint64_t v863;
  void *v864;
  void *v865;
  uint64_t v866;
  char v867;
  std::__shared_weak_count *size;
  unint64_t *v869;
  unint64_t v870;
  void *v871;
  unsigned int *v872;
  uint64_t v873;
  std::__shared_weak_count *v874;
  unint64_t *v875;
  unint64_t v876;
  std::__shared_weak_count *v877;
  unint64_t *v878;
  unint64_t v879;
  std::__shared_weak_count *v880;
  unint64_t *v881;
  unint64_t v882;
  std::__shared_weak_count *v883;
  unint64_t *v884;
  unint64_t v885;
  std::__shared_weak_count *v886;
  unint64_t *v887;
  unint64_t v888;
  std::__shared_weak_count *v889;
  unint64_t *v890;
  unint64_t v891;
  std::string::size_type v892;
  uint64_t v893;
  std::string::size_type v894;
  BOOL v895;
  char *v897;
  uint64_t v898;
  char *v899;
  char *v900;
  char *v901;
  uint64_t v902;
  vDSP_Length v903;
  unsigned int v904;
  uint64_t v905;
  uint64_t v906;
  uint64_t v907;
  float *v908;
  vDSP_Length v909;
  std::__shared_weak_count *v910;
  unint64_t *v911;
  unint64_t v912;
  uint64_t v913;
  unint64_t *v914;
  unint64_t v915;
  void *v916;
  void *v917;
  uint64_t v918;
  void *v919;
  int v920;
  uint64_t v922;
  const __CFString *v924;
  void *v925;
  std::__shared_weak_count *v926;
  unint64_t *v927;
  unint64_t v928;
  std::__shared_weak_count *v929;
  unint64_t *v930;
  unint64_t v931;
  std::__shared_weak_count *v932;
  unint64_t *v933;
  unint64_t v934;
  std::__shared_weak_count *v935;
  unint64_t *v936;
  unint64_t v937;
  std::__shared_weak_count *v938;
  unint64_t *v939;
  unint64_t v940;
  std::runtime_error *exception;
  uint64_t v942;
  int *v943;
  uint64_t mm;
  float v945;
  int v946;
  _WORD *v947;
  int v948;
  std::runtime_error *v950;
  int *v951;
  uint64_t nn;
  int v953;
  int v954;
  unsigned int v955;
  unsigned int v956;
  int v957;
  Espresso *v958;
  const char *v959;
  float v960;
  NSObject *v962;
  double v963;
  const char *v964;
  uint64_t v965;
  _WORD *v966;
  int v967;
  uint64_t *v969;
  uint64_t v970;
  vDSP_Length __N;
  void *v972;
  std::string::size_type v973;
  char *v974;
  void *v975;
  void *v976;
  const __CFString *v977;
  int v978;
  void *v979;
  int v980;
  _BOOL4 v981;
  unsigned int v982;
  unsigned int v983;
  _BOOL4 v984;
  Espresso::ANECompilerEngine::sparsity_options *v985;
  _QWORD *lpsrc;
  const Espresso::net *v991;
  std::__shared_weak_count *v992;
  const Espresso::net *v993;
  std::__shared_weak_count *v994;
  const Espresso::net *v995;
  std::__shared_weak_count *v996;
  const Espresso::net *v997;
  std::__shared_weak_count *v998;
  const Espresso::net *v999;
  std::__shared_weak_count *v1000;
  const Espresso::net *v1001;
  std::__shared_weak_count *v1002;
  char *v1003;
  std::__shared_weak_count *v1004;
  __int128 v1005;
  uint64_t v1006;
  std::__shared_weak_count *v1007;
  uint64_t v1008;
  uint64_t v1009;
  const Espresso::net *v1010;
  std::__shared_weak_count *v1011;
  __int128 v1012;
  uint64_t v1013;
  std::__shared_weak_count *v1014;
  const Espresso::net *v1015;
  std::__shared_weak_count *v1016;
  uint64_t v1017;
  std::__shared_weak_count *v1018;
  const Espresso::net *v1019;
  std::__shared_weak_count *v1020;
  const Espresso::net *v1021;
  std::__shared_weak_count *v1022;
  const Espresso::net *v1023;
  std::__shared_weak_count *v1024;
  std::__shared_weak_count *v1025;
  std::__shared_weak_count *v1026;
  Espresso::quantized_weights_helper *v1027[2];
  _QWORD v1028[2];
  _QWORD v1029[2];
  _QWORD v1030[2];
  uint64_t v1031[2];
  _QWORD v1032[2];
  _QWORD v1033[2];
  const Espresso::net *v1034;
  std::__shared_weak_count *v1035;
  const Espresso::net *v1036;
  std::__shared_weak_count *v1037;
  const Espresso::net *v1038;
  std::__shared_weak_count *v1039;
  const Espresso::net *v1040;
  std::__shared_weak_count *v1041;
  const Espresso::net *v1042;
  std::__shared_weak_count *v1043;
  const Espresso::net *v1044;
  std::__shared_weak_count *v1045;
  const Espresso::net *v1046;
  std::__shared_weak_count *v1047;
  uint64_t v1048;
  std::string *v1049;
  unint64_t v1050;
  __int16 v1051;
  char v1052[40];
  void *v1053;
  void *v1054;
  const Espresso::net *v1055;
  std::__shared_weak_count *v1056;
  char v1057[32];
  char v1058[40];
  void *__p;
  void *v1060;
  const Espresso::net *v1061;
  std::__shared_weak_count *v1062;
  char v1063[32];
  __int128 v1064;
  __int128 v1065;
  __int128 v1066;
  __int128 v1067;
  __int128 v1068;
  __int128 v1069;
  __int128 v1070;
  __int128 v1071;
  __int128 v1072;
  __int128 v1073;
  __int128 v1074;
  __int128 v1075;
  __int128 v1076;
  std::__shared_weak_count *v1077;
  std::__shared_weak_count *v1078;
  std::__shared_weak_count *v1079;
  std::__shared_weak_count *v1080;
  uint64_t v1081;
  std::__shared_weak_count *v1082;
  __int128 v1083;
  __int128 v1084;
  __int128 v1085;
  __int128 v1086;
  std::__shared_weak_count *v1087;
  std::__shared_weak_count *v1088;
  char *v1089;
  std::__shared_weak_count *v1090;
  void *v1091[2];
  uint64_t v1092;
  std::__shared_weak_count *v1093;
  unsigned int v1094;
  unsigned int v1095;
  char *v1096;
  std::__shared_weak_count *v1097;
  std::string v1098;
  _QWORD v1099[2];
  void *v1100;
  char *v1101;
  std::string *v1102;
  unint64_t v1103;
  void *v1104;
  char v1105;
  id v1106;
  __CFString *v1107;
  id v1108;
  uint64_t v1109;
  _QWORD v1110[2];
  _BYTE buf[24];
  __int128 v1112;
  std::vector<std::string> v1113;
  void *v1114;
  char v1115;
  id v1116;
  __CFString *v1117;
  id v1118;
  std::string __str;
  __int128 v1120;
  uint64_t v1121;

  v7 = a6;
  v1121 = *MEMORY[0x1E0C80C00];
  v978 = a2[552];
  v1075 = 0u;
  v1074 = 0u;
  v1073 = 0u;
  v1072 = 0u;
  v1071 = 0u;
  v1070 = 0u;
  v1069 = 0u;
  v1067 = 0u;
  v1068 = 0u;
  v1065 = 0u;
  v1066 = 0u;
  v1064 = 0u;
  v11 = *a3;
  v10 = (std::__shared_weak_count *)a3[1];
  v1061 = *a3;
  v1062 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  Espresso::abstract_blob_container::shape(v1058, *a6);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v1063, v11, (const Espresso::layer_shape *)v1058, 1);
  if (__p)
  {
    v1060 = __p;
    operator delete(__p);
  }
  if (v10)
  {
    v14 = (unint64_t *)&v10->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v17 = *a3;
  v16 = (std::__shared_weak_count *)a3[1];
  v1055 = *a3;
  v1056 = v16;
  if (v16)
  {
    v18 = (unint64_t *)&v16->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  Espresso::abstract_blob_container::shape(v1052, *a7);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v1057, v17, (const Espresso::layer_shape *)v1052, 1);
  if (v1053)
  {
    v1054 = v1053;
    operator delete(v1053);
  }
  if (v16)
  {
    v20 = (unint64_t *)&v16->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v22 = *a3;
  v23 = a5[6];
  if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*((_QWORD **)*a3 + 45), v23))
  {
    *(_QWORD *)buf = v23;
    v24 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v22 + 44, v23, (uint64_t)&std::piecewise_construct, (__int128 **)buf);
    *(_OWORD *)&v1098.__r_.__value_.__l.__data_ = *(_OWORD *)(v24 + 56);
    v1099[1] = 0;
    v1098.__r_.__value_.__r.__words[2] = 0;
    v1099[0] = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v1098.__r_.__value_.__r.__words[2], *((const void **)v24 + 9), *((_QWORD *)v24 + 10), (uint64_t)(*((_QWORD *)v24 + 10) - *((_QWORD *)v24 + 9)) >> 2);
    if (LODWORD(v1098.__r_.__value_.__r.__words[1]) == -1)
      v25 = 1;
    else
      v25 = v1098.__r_.__value_.__r.__words[1];
    if (v1098.__r_.__value_.__r.__words[2])
    {
      v1099[0] = *((_QWORD *)&v1098.__r_.__value_.__l + 2);
      operator delete((void *)v1098.__r_.__value_.__r.__words[2]);
    }
    v22 = *a3;
  }
  else
  {
    v25 = 1;
  }
  Espresso::ANECompilerEngine::ane_arch_allow_network_override((uint64_t)v22 + 472);
  v1051 = 0;
  v979 = (void *)objc_claimAutoreleasedReturnValue();
  Espresso::ANECompilerEngine::query_dilation_options(a4, 0, v25, (char *)&v1051 + 1, &v1051, v979);
  v27 = *(_DWORD *)(a4 + 48);
  v26 = *(_DWORD *)(a4 + 52);
  v28 = *(__int16 *)(a4 + 96);
  v29 = v28 < 2;
  v30 = *(__int16 *)(a4 + 98);
  if (HIBYTE(v1051))
  {
    v31 = v30 < 2;
  }
  else
  {
    v29 = 1;
    v31 = 1;
  }
  if (v29)
    v32 = *(_DWORD *)(a4 + 48);
  else
    v32 = (v27 - 1) * v28 + 1;
  if (v31)
    v33 = *(_DWORD *)(a4 + 52);
  else
    v33 = (v26 - 1) * v30 + 1;
  v982 = v33;
  v983 = v32;
  v34 = v28 >= 2 && v27 > 1 || v30 > 1 && v26 > 1;
  v984 = v34;
  lpsrc = a1;
  objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults");
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v36, "persistentDomainForName:", *MEMORY[0x1E0CB2B58]);
  v985 = (Espresso::ANECompilerEngine::sparsity_options *)objc_claimAutoreleasedReturnValue();

  v37 = a1;
  v38 = Espresso::ANECompilerEngine::sparsity_options::scan_for_compress_sparse((uint64_t)*a3 + 472, v985)
     || a1[688] != 0;
  v981 = v38;
  v39 = (uint64_t)a5[6];
  if ((char *)a5[7] - v39 != (_BYTE *)24)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Inconsistent number of blobs");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v40 = *v7;
  if (!*v7)
  {
    if (*(char *)(v39 + 23) < 0)
      v39 = *(_QWORD *)v39;
    Espresso::throw_exception_selector<Espresso::unsupported_configuration_error,int &>("ANEC conv: cannot find input blobs. bottom=%s", v39);
  }
  if (!*a7)
  {
    if (*((char *)a5 + 23) >= 0)
      v942 = (uint64_t)a5;
    else
      v942 = (uint64_t)*a5;
    Espresso::throw_exception_selector<Espresso::unsupported_configuration_error,int &>("ANEC conv: cannot find output blobs. top=%s", v942);
  }
  v1049 = 0;
  v1048 = 0;
  v1050 = 0;
  if (a1)
  {
    if (v41)
    {
      if (v41[840] && (*(int *)(v40 + 8) > 1 || *(int *)(v40 + 12) >= 2))
      {
        v42 = (void *)objc_opt_new();
        objc_msgSend(v42, "setObject:forKeyedSubscript:", CFSTR("NCHW"), CFSTR("Mode"));
        Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v1098.__r_.__value_.__l.__data_, a5);
        v43 = v1107;
        v1107 = CFSTR("Flatten");

        objc_storeStrong(&v1108, v42);
        v44 = 0x8E38E38E38E38E39 * (((uint64_t)v1049 - v1048) >> 4);
        if (v44 + 1 > 0x1C71C71C71C71C7)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v45 = 0x1C71C71C71C71C72 * ((uint64_t)(v1050 - v1048) >> 4);
        if (v45 <= v44 + 1)
          v45 = v44 + 1;
        if (0x8E38E38E38E38E39 * ((uint64_t)(v1050 - v1048) >> 4) >= 0xE38E38E38E38E3)
          v46 = 0x1C71C71C71C71C7;
        else
          v46 = v45;
        *((_QWORD *)&v1112 + 1) = &v1050;
        if (v46)
          v46 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v46);
        else
          v47 = 0;
        *(_QWORD *)buf = v46;
        *(_QWORD *)&buf[8] = v46 + 16 * (((uint64_t)v1049 - v1048) >> 4);
        *(_QWORD *)&buf[16] = *(_QWORD *)&buf[8];
        *(_QWORD *)&v1112 = v46 + 144 * v47;
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(*(std::string **)&buf[8], (uint64_t)&v1098);
        *(_QWORD *)&buf[16] += 144;
        std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v1048, buf);
        v48 = v1049;
        std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)buf);
        v1049 = v48;

        if (v1105 < 0)
          operator delete(v1104);
        *(_QWORD *)buf = &v1101;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
        *(_QWORD *)buf = v1099;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
        if (SHIBYTE(v1098.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v1098.__r_.__value_.__l.__data_);

        v37 = a1;
      }
    }
  }
  v49 = (void *)objc_opt_new();
  objc_msgSend(v49, "setObject:forKeyedSubscript:", CFSTR("Dense"), CFSTR("KernelMode"));
  if (v37[809])
  {
    objc_msgSend(v49, "setObject:forKeyedSubscript:", CFSTR("Unity"), CFSTR("KernelMode"));
    objc_msgSend(v49, "setObject:forKeyedSubscript:", CFSTR("Float16"), CFSTR("KernelType"));
  }
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v983);
  v50 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v49, "setObject:forKeyedSubscript:", v50, CFSTR("KernelWidth"));

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v982);
  v51 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v49, "setObject:forKeyedSubscript:", v51, CFSTR("KernelHeight"));

  v52 = *(_DWORD *)(a4 + 116);
  if (v52 >= 2 && v52 == *(_DWORD *)(a4 + 44) && v52 == *(_DWORD *)(a4 + 40))
  {
    objc_msgSend(v49, "setObject:forKeyedSubscript:", CFSTR("ChannelWiseConv"), CFSTR("Type"));
    v53 = a1;
    v54 = CFSTR("ChannelWiseDilatedConv");
  }
  else
  {
    objc_msgSend(v49, "setObject:forKeyedSubscript:", CFSTR("Conv"), CFSTR("Type"));
    v53 = a1;
    v54 = CFSTR("DilatedConv");
  }
  v977 = v54;
  v980 = *(_DWORD *)(a4 + 116);
  objc_msgSend(v49, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAA0], CFSTR("KernelGroupReuse"));
  if (v53[808])
    objc_msgSend(v49, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], CFSTR("KernelGroupReuse"));
  if (!v53[809])
  {
    v75 = (std::__shared_weak_count *)a3[1];
    v1046 = *a3;
    v1047 = v75;
    if (v75)
    {
      v76 = (unint64_t *)&v75->__shared_owners_;
      do
        v77 = __ldxr(v76);
      while (__stxr(v77 + 1, v76));
    }
    std::string::basic_string[abi:ne180100]<0>(&v1098, "post_scale");
    v78 = (Espresso::ANECompilerEngine::ane_kernel *)(v53 + 560);
    v79 = ((*(uint64_t (**)(_BYTE *, const Espresso::net **, _BYTE *, std::string *))(*((_QWORD *)v53 + 70)
                                                                                              + 88))(v53 + 560, &v1046, v53, &v1098) & 0x80000000) == 0|| *((_QWORD *)v53 + 78) != 0;
    if (SHIBYTE(v1098.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1098.__r_.__value_.__l.__data_);
    v80 = v1047;
    if (v1047)
    {
      v81 = (unint64_t *)&v1047->__shared_owners_;
      do
        v82 = __ldaxr(v81);
      while (__stlxr(v82 - 1, v81));
      if (!v82)
      {
        ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
        std::__shared_weak_count::__release_weak(v80);
      }
    }
    if ((_BYTE)v1051)
      _ZF = 1;
    else
      _ZF = HIBYTE(v1051) == 0;
    if (_ZF)
    {
LABEL_125:
      v86 = (std::__shared_weak_count *)a3[1];
      v1044 = *a3;
      v1045 = v86;
      if (v86)
      {
        v87 = (unint64_t *)&v86->__shared_owners_;
        do
          v88 = __ldxr(v87);
        while (__stxr(v88 + 1, v87));
      }
      std::string::basic_string[abi:ne180100]<0>(&v1098, "W_S8");
      v89 = (*(uint64_t (**)(Espresso::ANECompilerEngine::ane_kernel *, const Espresso::net **, _BYTE *, std::string *))(*((_QWORD *)v53 + 70) + 88))(v78, &v1044, v53, &v1098);
      v90 = (int)v89 >= 0 && v79;
      if (SHIBYTE(v1098.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1098.__r_.__value_.__l.__data_);
      v91 = v1045;
      if (!v1045)
        goto LABEL_137;
      v92 = (unint64_t *)&v1045->__shared_owners_;
      do
        v93 = __ldaxr(v92);
      while (__stlxr(v93 - 1, v92));
      if (!v93)
      {
        ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
        std::__shared_weak_count::__release_weak(v91);
        if (v90)
          goto LABEL_138;
      }
      else
      {
LABEL_137:
        if (v90)
        {
LABEL_138:
          v94 = (std::__shared_weak_count *)a3[1];
          v1042 = *a3;
          v1043 = v94;
          if (v94)
          {
            v95 = (unint64_t *)&v94->__shared_owners_;
            do
              v96 = __ldxr(v95);
            while (__stxr(v96 + 1, v95));
          }
          std::string::basic_string[abi:ne180100]<0>(buf, "W_S8");
          (*(void (**)(std::string *__return_ptr, Espresso::ANECompilerEngine::ane_kernel *, const Espresso::net **, _BYTE *, _BYTE *))(*((_QWORD *)v53 + 70) + 120))(&v1098, v78, &v1042, v53, buf);
          if ((buf[23] & 0x80000000) != 0)
            operator delete(*(void **)buf);
          v97 = v1043;
          if (v1043)
          {
            v98 = (unint64_t *)&v1043->__shared_owners_;
            do
              v99 = __ldaxr(v98);
            while (__stlxr(v99 - 1, v98));
            if (!v99)
            {
              ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
              std::__shared_weak_count::__release_weak(v97);
            }
          }
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v89);
          v100 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v49, "setObject:forKeyedSubscript:", v100, CFSTR("KernelOffset"));

          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", Espresso::ANECompilerEngine::get_primary_weights_file_index((Espresso::ANECompilerEngine *)a2, (Espresso::ANECompilerEngine::compiler *)v1098.__r_.__value_.__l.__data_, (const void *)v1098.__r_.__value_.__r.__words[2]));
          v101 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v49, "setObject:forKeyedSubscript:", v101, CFSTR("KernelIndex"));

          objc_msgSend(v49, "setObject:forKeyedSubscript:", CFSTR("Int8"), CFSTR("KernelType"));
          if (lpsrc)
            v102 = v78;
          else
            v102 = 0;
          Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_s8((Espresso::ANECompilerEngine::final_anec_weights_t *)&v1064, v102, v1098.__r_.__value_.__l.__data_);
          goto LABEL_82;
        }
      }
      v143 = (std::__shared_weak_count *)a3[1];
      v1040 = *a3;
      v1041 = v143;
      if (v143)
      {
        v144 = (unint64_t *)&v143->__shared_owners_;
        do
          v145 = __ldxr(v144);
        while (__stxr(v145 + 1, v144));
      }
      std::string::basic_string[abi:ne180100]<0>(&v1098, "W_int8");
      v146 = (*(uint64_t (**)(Espresso::ANECompilerEngine::ane_kernel *, const Espresso::net **, _BYTE *, std::string *))(*((_QWORD *)v53 + 70) + 88))(v78, &v1040, v53, &v1098);
      if (SHIBYTE(v1098.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1098.__r_.__value_.__l.__data_);
      v147 = v1041;
      if (v1041)
      {
        v148 = (unint64_t *)&v1041->__shared_owners_;
        do
          v149 = __ldaxr(v148);
        while (__stlxr(v149 - 1, v148));
        if (!v149)
        {
          ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
          std::__shared_weak_count::__release_weak(v147);
        }
      }
      if ((v146 & 0x80000000) == 0)
      {
        v150 = (std::__shared_weak_count *)a3[1];
        v1038 = *a3;
        v1039 = v150;
        if (v150)
        {
          v151 = (unint64_t *)&v150->__shared_owners_;
          do
            v152 = __ldxr(v151);
          while (__stxr(v152 + 1, v151));
        }
        std::string::basic_string[abi:ne180100]<0>(buf, "W_int8");
        (*(void (**)(std::string *__return_ptr, Espresso::ANECompilerEngine::ane_kernel *, const Espresso::net **, _BYTE *, _BYTE *))(*((_QWORD *)v53 + 70) + 120))(&v1098, v78, &v1038, v53, buf);
        if ((buf[23] & 0x80000000) != 0)
          operator delete(*(void **)buf);
        v153 = v1039;
        if (v1039)
        {
          v154 = (unint64_t *)&v1039->__shared_owners_;
          do
            v155 = __ldaxr(v154);
          while (__stlxr(v155 - 1, v154));
          if (!v155)
          {
            ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
            std::__shared_weak_count::__release_weak(v153);
          }
        }
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v146);
        v156 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v49, "setObject:forKeyedSubscript:", v156, CFSTR("KernelOffset"));

        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", Espresso::ANECompilerEngine::get_primary_weights_file_index((Espresso::ANECompilerEngine *)a2, (Espresso::ANECompilerEngine::compiler *)v1098.__r_.__value_.__l.__data_, (const void *)v1098.__r_.__value_.__r.__words[2]));
        v157 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v49, "setObject:forKeyedSubscript:", v157, CFSTR("KernelIndex"));

        objc_msgSend(v49, "setObject:forKeyedSubscript:", CFSTR("Int8"), CFSTR("KernelType"));
        if (lpsrc)
          v158 = v78;
        else
          v158 = 0;
        Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_s8((Espresso::ANECompilerEngine::final_anec_weights_t *)&v1064, v158, v1098.__r_.__value_.__l.__data_);
        goto LABEL_82;
      }
      v168 = (std::__shared_weak_count *)a3[1];
      v1036 = *a3;
      v1037 = v168;
      if (v168)
      {
        v169 = (unint64_t *)&v168->__shared_owners_;
        do
          v170 = __ldxr(v169);
        while (__stxr(v170 + 1, v169));
      }
      std::string::basic_string[abi:ne180100]<0>(&v1098, "blob_weights");
      v171 = (*(uint64_t (**)(Espresso::ANECompilerEngine::ane_kernel *, const Espresso::net **, _BYTE *, std::string *))(*((_QWORD *)v53 + 70) + 88))(v78, &v1036, v53, &v1098);
      if (SHIBYTE(v1098.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1098.__r_.__value_.__l.__data_);
      v172 = v1037;
      if (v1037)
      {
        v173 = (unint64_t *)&v1037->__shared_owners_;
        do
          v174 = __ldaxr(v173);
        while (__stlxr(v174 - 1, v173));
        if (!v174)
        {
          ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
          std::__shared_weak_count::__release_weak(v172);
        }
      }
      if ((v171 & 0x80000000) == 0)
      {
        v175 = (std::__shared_weak_count *)a3[1];
        v1034 = *a3;
        v1035 = v175;
        if (v175)
        {
          v176 = (unint64_t *)&v175->__shared_owners_;
          do
            v177 = __ldxr(v176);
          while (__stxr(v177 + 1, v176));
        }
        std::string::basic_string[abi:ne180100]<0>(buf, "blob_weights");
        (*(void (**)(std::string *__return_ptr, Espresso::ANECompilerEngine::ane_kernel *, const Espresso::net **, _BYTE *, _BYTE *))(*((_QWORD *)v53 + 70) + 120))(&v1098, v78, &v1034, v53, buf);
        if ((buf[23] & 0x80000000) != 0)
          operator delete(*(void **)buf);
        v178 = v1035;
        if (v1035)
        {
          v179 = (unint64_t *)&v1035->__shared_owners_;
          do
            v180 = __ldaxr(v179);
          while (__stlxr(v180 - 1, v179));
          if (!v180)
          {
            ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
            std::__shared_weak_count::__release_weak(v178);
          }
        }
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v171);
        v181 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v49, "setObject:forKeyedSubscript:", v181, CFSTR("KernelOffset"));

        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", Espresso::ANECompilerEngine::get_primary_weights_file_index((Espresso::ANECompilerEngine *)a2, (Espresso::ANECompilerEngine::compiler *)v1098.__r_.__value_.__l.__data_, (const void *)v1098.__r_.__value_.__r.__words[2]));
        v182 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v49, "setObject:forKeyedSubscript:", v182, CFSTR("KernelIndex"));

        objc_msgSend(v49, "setObject:forKeyedSubscript:", CFSTR("Float32"), CFSTR("KernelType"));
        if (lpsrc)
          v183 = v78;
        else
          v183 = 0;
        Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_f32((Espresso::ANECompilerEngine::final_anec_weights_t *)&v1064, v183, v1098.__r_.__value_.__l.__data_);
        goto LABEL_82;
      }
      v436 = a3[1];
      v1033[0] = *a3;
      v1033[1] = v436;
      if (v436)
      {
        v437 = (unint64_t *)((char *)v436 + 8);
        do
          v438 = __ldxr(v437);
        while (__stxr(v438 + 1, v437));
      }
      std::string::basic_string[abi:ne180100]<0>(&v1098, "blob_weights_f16");
      v439 = (*(uint64_t (**)(Espresso::ANECompilerEngine::ane_kernel *, _QWORD *, _BYTE *, std::string *))(*((_QWORD *)v53 + 70) + 88))(v78, v1033, v53, &v1098);
      if (SHIBYTE(v1098.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1098.__r_.__value_.__l.__data_);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v1033);
      if ((v439 & 0x80000000) == 0)
      {
        v440 = a3[1];
        v1032[0] = *a3;
        v1032[1] = v440;
        if (v440)
        {
          v441 = (unint64_t *)((char *)v440 + 8);
          do
            v442 = __ldxr(v441);
          while (__stxr(v442 + 1, v441));
        }
        std::string::basic_string[abi:ne180100]<0>(buf, "blob_weights_f16");
        (*(void (**)(std::string *__return_ptr, Espresso::ANECompilerEngine::ane_kernel *, _QWORD *, _BYTE *, _BYTE *))(*((_QWORD *)v53 + 70) + 120))(&v1098, v78, v1032, v53, buf);
        if ((buf[23] & 0x80000000) != 0)
          operator delete(*(void **)buf);
        std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v1032);
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v439);
        v443 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v49, "setObject:forKeyedSubscript:", v443, CFSTR("KernelOffset"));

        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", Espresso::ANECompilerEngine::get_primary_weights_file_index((Espresso::ANECompilerEngine *)a2, (Espresso::ANECompilerEngine::compiler *)v1098.__r_.__value_.__l.__data_, (const void *)v1098.__r_.__value_.__r.__words[2]));
        v444 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v49, "setObject:forKeyedSubscript:", v444, CFSTR("KernelIndex"));

        objc_msgSend(v49, "setObject:forKeyedSubscript:", CFSTR("Float16"), CFSTR("KernelType"));
        if (lpsrc)
          v445 = v78;
        else
          v445 = 0;
        Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_f16((Espresso::ANECompilerEngine::final_anec_weights_t *)&v1064, v445, v1098.__r_.__value_.__l.__data_);
        goto LABEL_82;
      }
      if (*((_QWORD *)v53 + 99))
      {
        v740 = *((_QWORD *)v53 + 100);
        if (v53)
          v741 = v78;
        else
          v741 = 0;
        v1031[0] = *((_QWORD *)v53 + 99);
        v1031[1] = v740;
        if (v740)
        {
          v742 = (unint64_t *)(v740 + 8);
          do
            v743 = __ldxr(v742);
          while (__stxr(v743 + 1, v742));
        }
        Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_f16((Espresso::ANECompilerEngine::final_anec_weights_t *)&v1064, v741, v1031);
        std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v1031);
        v744 = 0;
        v745 = *((_QWORD *)v53 + 99);
        v746 = *(_DWORD *)(v745 + 8);
        do
        {
          v746 *= *(_DWORD *)(v745 + 12 + v744);
          v744 += 4;
        }
        while (v744 != 12);
        v747 = (char *)operator new(0x58uLL);
        *((_QWORD *)v747 + 1) = 0;
        v748 = (unint64_t *)(v747 + 8);
        *((_QWORD *)v747 + 2) = 0;
        *(_QWORD *)v747 = &off_1E2DBED50;
        v749 = *(const unsigned __int8 **)(v745 + 24);
        *((_QWORD *)v747 + 3) = &off_1E2DA1250;
        *(_OWORD *)(v747 + 72) = 0u;
        *(_OWORD *)(v747 + 56) = 0u;
        *((_DWORD *)v747 + 8) = 2 * v746;
        *((_QWORD *)v747 + 5) = v749;
        v747[48] = 0;
        v1098.__r_.__value_.__r.__words[0] = (std::string::size_type)(v747 + 24);
        v1098.__r_.__value_.__l.__size_ = (std::string::size_type)v747;
        v1030[0] = v747 + 24;
        v1030[1] = v747;
        do
          v750 = __ldxr(v748);
        while (__stxr(v750 + 1, v748));
        v751 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128), v749, 2 * v746);
        std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v1030);
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v751);
        v752 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v49, "setObject:forKeyedSubscript:", v752, CFSTR("KernelOffset"));

        v753 = (void *)MEMORY[0x1E0CB37E8];
        if (v978)
          weights_file_index = 0;
        else
        objc_msgSend(v753, "numberWithUnsignedLong:", weights_file_index);
        v809 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v49, "setObject:forKeyedSubscript:", v809, CFSTR("KernelIndex"));

        objc_msgSend(v49, "setObject:forKeyedSubscript:", CFSTR("Float16"), CFSTR("KernelType"));
        std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v1098);
        goto LABEL_82;
      }
      (*(void (**)(std::string *__return_ptr, _BYTE *))(*(_QWORD *)v53 + 456))(&v1098, v53);
      v796 = v1098.__r_.__value_.__r.__words[0];
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v1098);
      if (v796)
      {
        (*(void (**)(std::string *__return_ptr, _BYTE *))(*(_QWORD *)v53 + 456))(&v1098, v53);
        if (v53)
          v797 = v78;
        else
          v797 = 0;
        Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_f32((Espresso::ANECompilerEngine::final_anec_weights_t *)&v1064, v797, (uint64_t *)&v1098);
        v798 = 0;
        v799 = v1098.__r_.__value_.__r.__words[0];
        v800 = *(_DWORD *)(v1098.__r_.__value_.__r.__words[0] + 8);
        do
        {
          v800 *= *(_DWORD *)(v1098.__r_.__value_.__r.__words[0] + 12 + v798);
          v798 += 4;
        }
        while (v798 != 12);
        v801 = (char *)operator new(0x58uLL);
        *((_QWORD *)v801 + 1) = 0;
        v802 = (unint64_t *)(v801 + 8);
        *((_QWORD *)v801 + 2) = 0;
        *(_QWORD *)v801 = &off_1E2DBED50;
        v803 = *(const unsigned __int8 **)(v799 + 24);
        *((_QWORD *)v801 + 3) = &off_1E2DA1250;
        *(_OWORD *)(v801 + 72) = 0u;
        *(_OWORD *)(v801 + 56) = 0u;
        *((_DWORD *)v801 + 8) = 4 * v800;
        *((_QWORD *)v801 + 5) = v803;
        v801[48] = 0;
        *(_QWORD *)buf = v801 + 24;
        *(_QWORD *)&buf[8] = v801;
        v1029[0] = v801 + 24;
        v1029[1] = v801;
        do
          v804 = __ldxr(v802);
        while (__stxr(v804 + 1, v802));
        v805 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128), v803, 4 * v800);
        std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v1029);
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v805);
        v806 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v49, "setObject:forKeyedSubscript:", v806, CFSTR("KernelOffset"));

        v807 = (void *)MEMORY[0x1E0CB37E8];
        if (v978)
          v808 = 0;
        else
        objc_msgSend(v807, "numberWithUnsignedLong:", v808);
        v817 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v49, "setObject:forKeyedSubscript:", v817, CFSTR("KernelIndex"));

        objc_msgSend(v49, "setObject:forKeyedSubscript:", CFSTR("Float32"), CFSTR("KernelType"));
        std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)buf);
        std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v1098);
        goto LABEL_82;
      }
      v810 = (Espresso::quantized_weights_helper *)*((_QWORD *)v53 + 59);
      if (v810
        && *(_QWORD *)v810
        && (*((_QWORD *)v810 + 4) || *((_QWORD *)v810 + 6) || *((_QWORD *)v810 + 8) || *((_QWORD *)v810 + 10)))
      {
        v811 = a3[1];
        v1028[0] = *a3;
        v1028[1] = v811;
        if (v811)
        {
          v812 = (unint64_t *)((char *)v811 + 8);
          do
            v813 = __ldxr(v812);
          while (__stxr(v813 + 1, v812));
          v810 = (Espresso::quantized_weights_helper *)*((_QWORD *)v53 + 59);
        }
        v814 = (Espresso::quantized_weights_helper *)*((_QWORD *)v53 + 60);
        v1027[0] = v810;
        v1027[1] = v814;
        if (v814)
        {
          v815 = (unint64_t *)((char *)v814 + 8);
          do
            v816 = __ldxr(v815);
          while (__stxr(v816 + 1, v815));
        }
        Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::convolution_kernel *>(v53, (Espresso::ANECompilerEngine *)a2, v1028, v1027, v49, (const void **)&v1064);
        std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v1027);
        std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v1028);
        goto LABEL_82;
      }
      (*(void (**)(std::string *__return_ptr, _BYTE *))(*(_QWORD *)v53 + 568))(&v1098, v53);
      v818 = v1098.__r_.__value_.__r.__words[0];
      if (!v1098.__r_.__value_.__r.__words[0])
        goto LABEL_1270;
      v819 = v53 + 536;
      if ((char)v53[559] < 0)
      {
        v854 = *((_QWORD *)v53 + 68);
        if (v854 != 4)
        {
          if (v854 != 6)
            goto LABEL_1270;
          if (**(_DWORD **)v819 != 1852399447 || *(_WORD *)(*(_QWORD *)v819 + 4) != 14452)
            goto LABEL_1270;
          goto LABEL_1258;
        }
        v821 = *(_DWORD **)v819;
      }
      else
      {
        v820 = v53[559];
        v821 = v53 + 536;
        if (v820 != 4)
        {
          if (v820 != 6)
            goto LABEL_1270;
          if (*(_DWORD *)v819 != 1852399447 || *((_WORD *)v53 + 270) != 14452)
            goto LABEL_1270;
          goto LABEL_1258;
        }
      }
      if (*v821 != 947216215)
      {
LABEL_1270:
        v867 = 0;
LABEL_1271:
        size = (std::__shared_weak_count *)v1098.__r_.__value_.__l.__size_;
        if (v1098.__r_.__value_.__l.__size_)
        {
          v869 = (unint64_t *)(v1098.__r_.__value_.__l.__size_ + 8);
          do
            v870 = __ldaxr(v869);
          while (__stlxr(v870 - 1, v869));
          if (!v870)
          {
            ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
            std::__shared_weak_count::__release_weak(size);
          }
        }
        if (!v871)
          goto LABEL_1316;
        v872 = (unsigned int *)(*(uint64_t (**)(void *))(*(_QWORD *)v871 + 384))(v871);
        if (v872[9] != 1)
          goto LABEL_1316;
        v873 = *v872;
        __N = v872[1];
        v874 = (std::__shared_weak_count *)a3[1];
        v1023 = *a3;
        v1024 = v874;
        if (v874)
        {
          v875 = (unint64_t *)&v874->__shared_owners_;
          do
            v876 = __ldxr(v875);
          while (__stxr(v876 + 1, v875));
        }
        std::string::basic_string[abi:ne180100]<0>(buf, "W_8bit");
        (*(void (**)(std::string *__return_ptr, Espresso::ANECompilerEngine::ane_kernel *, const Espresso::net **, _BYTE *, _BYTE *))(*((_QWORD *)v53 + 70) + 120))(&v1098, v78, &v1023, v53, buf);
        if ((buf[23] & 0x80000000) != 0)
          operator delete(*(void **)buf);
        v877 = v1024;
        if (v1024)
        {
          v878 = (unint64_t *)&v1024->__shared_owners_;
          do
            v879 = __ldaxr(v878);
          while (__stlxr(v879 - 1, v878));
          if (!v879)
          {
            ((void (*)(std::__shared_weak_count *))v877->__on_zero_shared)(v877);
            std::__shared_weak_count::__release_weak(v877);
          }
        }
        v880 = (std::__shared_weak_count *)a3[1];
        v1021 = *a3;
        v1022 = v880;
        if (v880)
        {
          v881 = (unint64_t *)&v880->__shared_owners_;
          do
            v882 = __ldxr(v881);
          while (__stxr(v882 + 1, v881));
        }
        std::string::basic_string[abi:ne180100]<0>(&__str, "Qscale");
        (*(void (**)(_BYTE *__return_ptr, Espresso::ANECompilerEngine::ane_kernel *, const Espresso::net **, _BYTE *, std::string *))(*((_QWORD *)v53 + 70) + 120))(buf, v78, &v1021, v53, &__str);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        v883 = v1022;
        if (v1022)
        {
          v884 = (unint64_t *)&v1022->__shared_owners_;
          do
            v885 = __ldaxr(v884);
          while (__stlxr(v885 - 1, v884));
          if (!v885)
          {
            ((void (*)(std::__shared_weak_count *))v883->__on_zero_shared)(v883);
            std::__shared_weak_count::__release_weak(v883);
          }
        }
        v886 = (std::__shared_weak_count *)a3[1];
        v1019 = *a3;
        v1020 = v886;
        if (v886)
        {
          v887 = (unint64_t *)&v886->__shared_owners_;
          do
            v888 = __ldxr(v887);
          while (__stxr(v888 + 1, v887));
        }
        std::string::basic_string[abi:ne180100]<0>(v1091, "Qbias");
        (*(void (**)(std::string *__return_ptr, Espresso::ANECompilerEngine::ane_kernel *, const Espresso::net **, _BYTE *, void **))(*((_QWORD *)v53 + 70) + 120))(&__str, v78, &v1019, v53, v1091);
        if (SHIBYTE(v1092) < 0)
          operator delete(v1091[0]);
        v889 = v1020;
        if (v1020)
        {
          v890 = (unint64_t *)&v1020->__shared_owners_;
          do
            v891 = __ldaxr(v890);
          while (__stlxr(v891 - 1, v890));
          if (!v891)
          {
            ((void (*)(std::__shared_weak_count *))v889->__on_zero_shared)(v889);
            std::__shared_weak_count::__release_weak(v889);
          }
        }
        v892 = v1098.__r_.__value_.__r.__words[0];
        v893 = *(_QWORD *)buf;
        v894 = __str.__r_.__value_.__r.__words[0];
        v895 = !v1098.__r_.__value_.__r.__words[0] || *(_QWORD *)buf == 0;
        if (!v895 && __str.__r_.__value_.__r.__words[0] != 0)
        {
          v976 = v49;
          v969 = v7;
          v970 = a4;
          v897 = (char *)operator new(0x58uLL);
          *((_QWORD *)v897 + 1) = 0;
          *((_QWORD *)v897 + 2) = 0;
          *(_QWORD *)v897 = &off_1E2DBED88;
          *((_QWORD *)v897 + 3) = &off_1E2DA1270;
          *(_OWORD *)(v897 + 56) = 0u;
          *(_OWORD *)(v897 + 72) = 0u;
          v898 = v873;
          *((_DWORD *)v897 + 8) = v873;
          *((_DWORD *)v897 + 9) = __N;
          *((_QWORD *)v897 + 5) = v892;
          v897[48] = 0;
          v1091[0] = v897 + 24;
          v974 = v897;
          v1091[1] = v897;
          v899 = (char *)operator new(0x58uLL);
          *((_QWORD *)v899 + 1) = 0;
          *((_QWORD *)v899 + 2) = 0;
          *(_QWORD *)v899 = &off_1E2DBEC00;
          *((_QWORD *)v899 + 3) = &off_1E2DA1190;
          *(_OWORD *)(v899 + 56) = 0u;
          *(_OWORD *)(v899 + 72) = 0u;
          *((_DWORD *)v899 + 8) = v873;
          *((_QWORD *)v899 + 5) = v893;
          v899[48] = 0;
          v1096 = v899 + 24;
          v900 = v899;
          v1097 = (std::__shared_weak_count *)v899;
          v901 = (char *)operator new(0x58uLL);
          *((_QWORD *)v901 + 1) = 0;
          *((_QWORD *)v901 + 2) = 0;
          *(_QWORD *)v901 = &off_1E2DBEC00;
          *((_QWORD *)v901 + 3) = &off_1E2DA1190;
          *(_OWORD *)(v901 + 56) = 0u;
          *(_OWORD *)(v901 + 72) = 0u;
          *((_DWORD *)v901 + 8) = v873;
          *((_QWORD *)v901 + 5) = v894;
          v901[48] = 0;
          v1089 = v901 + 24;
          v1090 = (std::__shared_weak_count *)v901;
          std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v1087, 4 * v873 * __N, 1, 1, 1);
          v902 = (uint64_t)v1087;
          v903 = __N;
          if ((_DWORD)v873)
          {
            v904 = 0;
            v905 = 0;
            v906 = 0;
            v907 = 4 * v898;
            do
            {
              v908 = (float *)(*(_QWORD *)(v902 + 16) + v905);
              v909 = v903;
              vDSP_vfltu8((const unsigned __int8 *)(*((_QWORD *)v974 + 5) + v904), 1, v908, 1, v903);
              vDSP_vsmul(v908, 1, (const float *)(*((_QWORD *)v900 + 5) + v906), v908, 1, v909);
              vDSP_vsadd(v908, 1, (const float *)(*((_QWORD *)v901 + 5) + v906), v908, 1, v909);
              v906 += 4;
              v905 += 4 * __N;
              v904 += v909;
              v903 = v909;
            }
            while (v907 != v906);
          }
          v910 = v1088;
          v1017 = v902;
          v1018 = v1088;
          if (v1088)
          {
            v911 = (unint64_t *)&v1088->__shared_owners_;
            do
              v912 = __ldxr(v911);
            while (__stxr(v912 + 1, v911));
          }
          v913 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128), *(const unsigned __int8 **)(v902 + 16), *(int *)(v902 + 8));
          if (v910)
          {
            v914 = (unint64_t *)&v910->__shared_owners_;
            do
              v915 = __ldaxr(v914);
            while (__stlxr(v915 - 1, v914));
            if (!v915)
            {
              ((void (*)(std::__shared_weak_count *))v910->__on_zero_shared)(v910);
              std::__shared_weak_count::__release_weak(v910);
            }
          }
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v913);
          v916 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v976, "setObject:forKeyedSubscript:", v916, CFSTR("KernelOffset"));

          v917 = (void *)MEMORY[0x1E0CB37E8];
          if (v978)
            v918 = 0;
          else
          objc_msgSend(v917, "numberWithUnsignedLong:", v918);
          v925 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v976, "setObject:forKeyedSubscript:", v925, CFSTR("KernelIndex"));

          objc_msgSend(v976, "setObject:forKeyedSubscript:", CFSTR("Float32"), CFSTR("KernelType"));
          v926 = v1088;
          if (v1088)
          {
            v927 = (unint64_t *)&v1088->__shared_owners_;
            do
              v928 = __ldaxr(v927);
            while (__stlxr(v928 - 1, v927));
            if (!v928)
            {
              ((void (*)(std::__shared_weak_count *))v926->__on_zero_shared)(v926);
              std::__shared_weak_count::__release_weak(v926);
            }
          }
          v929 = v1090;
          if (v1090)
          {
            v930 = (unint64_t *)&v1090->__shared_owners_;
            do
              v931 = __ldaxr(v930);
            while (__stlxr(v931 - 1, v930));
            if (!v931)
            {
              ((void (*)(std::__shared_weak_count *))v929->__on_zero_shared)(v929);
              std::__shared_weak_count::__release_weak(v929);
            }
          }
          v932 = v1097;
          if (v1097)
          {
            v933 = (unint64_t *)&v1097->__shared_owners_;
            do
              v934 = __ldaxr(v933);
            while (__stlxr(v934 - 1, v933));
            if (!v934)
            {
              ((void (*)(std::__shared_weak_count *))v932->__on_zero_shared)(v932);
              std::__shared_weak_count::__release_weak(v932);
            }
          }
          v935 = (std::__shared_weak_count *)v1091[1];
          if (v1091[1])
          {
            v936 = (unint64_t *)((char *)v1091[1] + 8);
            do
              v937 = __ldaxr(v936);
            while (__stlxr(v937 - 1, v936));
            if (!v937)
            {
              ((void (*)(std::__shared_weak_count *))v935->__on_zero_shared)(v935);
              std::__shared_weak_count::__release_weak(v935);
            }
          }
          v7 = v969;
          a4 = v970;
          v49 = v976;
        }
        else
        {
LABEL_1316:
          if ((v867 & 1) == 0)
            Espresso::throw_exception_selector<Espresso::invalid_state_error>("Cannot find the weights");
        }
        goto LABEL_82;
      }
LABEL_1258:
      v856 = 0;
      v857 = *(_DWORD *)(v1098.__r_.__value_.__r.__words[0] + 8);
      do
      {
        v857 *= *(_DWORD *)(v1098.__r_.__value_.__r.__words[0] + 12 + v856);
        v856 += 4;
      }
      while (v856 != 12);
      v858 = (std::__shared_weak_count *)operator new(0x58uLL);
      v858->__shared_owners_ = 0;
      v859 = (unint64_t *)&v858->__shared_owners_;
      v858->__shared_weak_owners_ = 0;
      v858->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBED50;
      v860 = *(const unsigned __int8 **)(v818 + 24);
      v858[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA1250;
      v858[3].std::__shared_count = 0u;
      *(_OWORD *)&v858[2].__shared_owners_ = 0u;
      LODWORD(v858[1].__shared_owners_) = v857;
      v858[1].__shared_weak_owners_ = (uint64_t)v860;
      LOBYTE(v858[2].__vftable) = 0;
      *(_QWORD *)buf = v858 + 1;
      *(_QWORD *)&buf[8] = v858;
      v1025 = v858 + 1;
      v1026 = v858;
      do
        v861 = __ldxr(v859);
      while (__stxr(v861 + 1, v859));
      v862 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128), v860, v857);
      do
        v863 = __ldaxr(v859);
      while (__stlxr(v863 - 1, v859));
      if (!v863)
      {
        ((void (*)(std::__shared_weak_count *))v858->__on_zero_shared)(v858);
        std::__shared_weak_count::__release_weak(v858);
      }
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v862);
      v864 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v49, "setObject:forKeyedSubscript:", v864, CFSTR("KernelOffset"));

      v865 = (void *)MEMORY[0x1E0CB37E8];
      if (v978)
        v866 = 0;
      else
      objc_msgSend(v865, "numberWithUnsignedLong:", v866);
      v919 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v49, "setObject:forKeyedSubscript:", v919, CFSTR("KernelIndex"));

      if (*((char *)lpsrc + 559) < 0)
      {
        v922 = lpsrc[68];
        if (v922 != 4)
        {
          if (v922 != 6)
            goto LABEL_1373;
          if (**(_DWORD **)v819 != 1852399447 || *(_WORD *)(*(_QWORD *)v819 + 4) != 14452)
            goto LABEL_1373;
LABEL_1348:
          v924 = CFSTR("Int8");
          goto LABEL_1375;
        }
        v819 = *(_BYTE **)v819;
      }
      else
      {
        v920 = *((unsigned __int8 *)lpsrc + 559);
        if (v920 != 4)
        {
          if (v920 != 6)
            goto LABEL_1373;
          if (*(_DWORD *)v819 != 1852399447 || *((_WORD *)v53 + 270) != 14452)
            goto LABEL_1373;
          goto LABEL_1348;
        }
      }
      if (*(_DWORD *)v819 != 947216215)
      {
LABEL_1373:
        v867 = 0;
        goto LABEL_1376;
      }
      v924 = CFSTR("UInt8");
LABEL_1375:
      objc_msgSend(v49, "setObject:forKeyedSubscript:", v924, CFSTR("KernelType"));
      v867 = 1;
LABEL_1376:
      v938 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v939 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v940 = __ldaxr(v939);
        while (__stlxr(v940 - 1, v939));
        if (!v940)
        {
          ((void (*)(std::__shared_weak_count *))v938->__on_zero_shared)(v938);
          std::__shared_weak_count::__release_weak(v938);
        }
      }
      v53 = lpsrc;
      goto LABEL_1271;
    }
    v84 = v49;
    v85 = v84;
    if (*(__int16 *)(a4 + 96) <= 1 && *(__int16 *)(a4 + 98) <= 1)
    {

      v53 = a1;
      goto LABEL_125;
    }
    (*(void (**)(_BYTE *__return_ptr, _BYTE *))(*(_QWORD *)v53 + 456))(buf, v53);
    v112 = *((_QWORD *)v53 + 99);
    v113 = *((_QWORD *)v53 + 100);
    __str.__r_.__value_.__r.__words[0] = v112;
    __str.__r_.__value_.__l.__size_ = v113;
    if (v113)
    {
      v114 = (unint64_t *)(v113 + 8);
      do
        v115 = __ldxr(v114);
      while (__stxr(v115 + 1, v114));
    }
    if (!(*(_QWORD *)buf | v112))
    {
      (*(void (**)(std::string *__return_ptr, _BYTE *))(*(_QWORD *)v53 + 608))(&v1098, v53);
      v116 = *(_OWORD *)&v1098.__r_.__value_.__l.__data_;
      *(_OWORD *)&v1098.__r_.__value_.__l.__data_ = 0uLL;
      v117 = *(std::__shared_weak_count **)&buf[8];
      *(_OWORD *)buf = v116;
      if (v117)
      {
        v118 = (unint64_t *)&v117->__shared_owners_;
        do
          v119 = __ldaxr(v118);
        while (__stlxr(v119 - 1, v118));
        if (!v119)
        {
          ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
          std::__shared_weak_count::__release_weak(v117);
        }
      }
      v120 = (std::__shared_weak_count *)v1098.__r_.__value_.__l.__size_;
      if (v1098.__r_.__value_.__l.__size_)
      {
        v121 = (unint64_t *)(v1098.__r_.__value_.__l.__size_ + 8);
        do
          v122 = __ldaxr(v121);
        while (__stlxr(v122 - 1, v121));
        if (!v122)
        {
          ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
          std::__shared_weak_count::__release_weak(v120);
        }
      }
      v123 = *((_QWORD *)v53 + 59);
      if (v123)
      {
        *(_OWORD *)&v1098.__r_.__value_.__l.__data_ = 0uLL;
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v123 + 80, (__int128 *)&v1098);
        v124 = (std::__shared_weak_count *)v1098.__r_.__value_.__l.__size_;
        if (v1098.__r_.__value_.__l.__size_)
        {
          v125 = (unint64_t *)(v1098.__r_.__value_.__l.__size_ + 8);
          do
            v126 = __ldaxr(v125);
          while (__stlxr(v126 - 1, v125));
          if (!v126)
          {
            ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
            std::__shared_weak_count::__release_weak(v124);
          }
        }
      }
    }
    v127 = a2[552];
    v128 = *((_QWORD *)v53 + 59);
    if (v128
      && *(_QWORD *)v128
      && *(_DWORD *)(v128 + 156) == 8
      && *(_BYTE *)(v128 + 164)
      && !*(_QWORD *)(v128 + 32)
      && !*(_QWORD *)(v128 + 48)
      && !*(_QWORD *)(v128 + 64))
    {
      (*(void (**)(std::string *__return_ptr, _BYTE *))(*(_QWORD *)v53 + 464))(&v1098, v53);
      v823 = **((_QWORD **)v53 + 59);
      v824 = operator new(0x60uLL);
      v824[1] = 0;
      v824[2] = 0;
      *v824 = &off_1E2DBEB90;
      v825 = *(_QWORD *)(v823 + 16);
      v824[3] = &off_1E2DA1150;
      *((_OWORD *)v824 + 4) = 0u;
      *((_OWORD *)v824 + 5) = 0u;
      *((_OWORD *)v824 + 2) = *(_OWORD *)&v1098.__r_.__value_.__l.__data_;
      v824[6] = v825;
      *((_BYTE *)v824 + 56) = 0;
      v1091[0] = v824 + 3;
      v1091[1] = v824;
      Espresso::dilated_conv_bloated_weights<signed char>(&v1096, (uint64_t)(v824 + 3), v983, v982, a4);
      v826 = v1097;
      v1089 = v1096;
      v1090 = v1097;
      if (v1097)
      {
        v827 = (unint64_t *)&v1097->__shared_owners_;
        do
          v828 = __ldxr(v827);
        while (__stxr(v828 + 1, v827));
      }
      Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_s8((Espresso::ANECompilerEngine::final_anec_weights_t *)&v1064, (Espresso::ANECompilerEngine::ane_kernel *)(v53 + 560), &v1089);
      if (v826)
      {
        v829 = (unint64_t *)&v826->__shared_owners_;
        do
          v830 = __ldaxr(v829);
        while (__stlxr(v830 - 1, v829));
        if (!v830)
        {
          ((void (*)(std::__shared_weak_count *))v826->__on_zero_shared)(v826);
          std::__shared_weak_count::__release_weak(v826);
        }
      }
      v831 = v85;
      v832 = 0;
      v833 = v1096;
      v834 = *((_DWORD *)v1096 + 2);
      do
      {
        v834 *= *(_DWORD *)&v1096[v832 + 12];
        v832 += 4;
      }
      while (v832 != 12);
      v835 = (std::__shared_weak_count *)operator new(0x58uLL);
      v835->__shared_owners_ = 0;
      v836 = (unint64_t *)&v835->__shared_owners_;
      v835->__shared_weak_owners_ = 0;
      v835->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBED50;
      v837 = (const unsigned __int8 *)*((_QWORD *)v833 + 3);
      v835[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA1250;
      v835[3].std::__shared_count = 0u;
      *(_OWORD *)&v835[2].__shared_owners_ = 0u;
      LODWORD(v835[1].__shared_owners_) = v834;
      v835[1].__shared_weak_owners_ = (uint64_t)v837;
      LOBYTE(v835[2].__vftable) = 0;
      v1087 = v835 + 1;
      v1088 = v835;
      *(_QWORD *)&v1086 = v835 + 1;
      *((_QWORD *)&v1086 + 1) = v835;
      do
        v838 = __ldxr(v836);
      while (__stxr(v838 + 1, v836));
      v85 = v831;
      v839 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128), v837, v834);
      do
        v840 = __ldaxr(v836);
      while (__stlxr(v840 - 1, v836));
      if (!v840)
      {
        ((void (*)(std::__shared_weak_count *))v835->__on_zero_shared)(v835);
        std::__shared_weak_count::__release_weak(v835);
      }
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v839);
      v841 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v831, "setObject:forKeyedSubscript:", v841, CFSTR("KernelOffset"));

      v842 = (void *)MEMORY[0x1E0CB37E8];
      if (v127)
        v843 = 0;
      else
      objc_msgSend(v842, "numberWithUnsignedLong:", v843);
      v844 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v831, "setObject:forKeyedSubscript:", v844, CFSTR("KernelIndex"));

      objc_msgSend(v831, "setObject:forKeyedSubscript:", CFSTR("Int8"), CFSTR("KernelType"));
      v845 = v1088;
      if (v1088)
      {
        v846 = (unint64_t *)&v1088->__shared_owners_;
        do
          v847 = __ldaxr(v846);
        while (__stlxr(v847 - 1, v846));
        if (!v847)
        {
          ((void (*)(std::__shared_weak_count *))v845->__on_zero_shared)(v845);
          std::__shared_weak_count::__release_weak(v845);
        }
      }
      v848 = v1097;
      if (v1097)
      {
        v849 = (unint64_t *)&v1097->__shared_owners_;
        do
          v850 = __ldaxr(v849);
        while (__stlxr(v850 - 1, v849));
        if (!v850)
        {
          ((void (*)(std::__shared_weak_count *))v848->__on_zero_shared)(v848);
          std::__shared_weak_count::__release_weak(v848);
        }
      }
      v851 = (std::__shared_weak_count *)v1091[1];
      if (v1091[1])
      {
        v852 = (unint64_t *)((char *)v1091[1] + 8);
        do
          v853 = __ldaxr(v852);
        while (__stlxr(v853 - 1, v852));
        if (!v853)
        {
          ((void (*)(std::__shared_weak_count *))v851->__on_zero_shared)(v851);
          std::__shared_weak_count::__release_weak(v851);
        }
      }
      if (v1100)
      {
        v1101 = (char *)v1100;
        operator delete(v1100);
      }
      goto LABEL_1166;
    }
    if (*(_QWORD *)buf)
    {
      Espresso::dilated_conv_bloated_weights<float>(&v1098, *(uint64_t *)buf, v983, v982, a4);
      v129 = v85;
      v130 = v1098.__r_.__value_.__r.__words[0];
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v1070, (uint64_t)v1098.__r_.__value_.__l.__data_, v1098.__r_.__value_.__l.__size_);
      Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_f32((Espresso::ANECompilerEngine::final_anec_weights_t *)&v1064, v78, *(void **)(v130 + 24));
      v131 = 0;
      v132 = *(_DWORD *)(v130 + 8);
      do
      {
        v132 *= *(_DWORD *)(v130 + 12 + v131);
        v131 += 4;
      }
      while (v131 != 12);
      v133 = (std::__shared_weak_count *)operator new(0x58uLL);
      v133->__shared_owners_ = 0;
      v134 = (unint64_t *)&v133->__shared_owners_;
      v133->__shared_weak_owners_ = 0;
      v133->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBED50;
      v135 = *(const unsigned __int8 **)(v130 + 24);
      v133[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA1250;
      v136 = 4 * v132;
      v133[3].std::__shared_count = 0u;
      *(_OWORD *)&v133[2].__shared_owners_ = 0u;
      LODWORD(v133[1].__shared_owners_) = 4 * v132;
      v133[1].__shared_weak_owners_ = (uint64_t)v135;
      LOBYTE(v133[2].__vftable) = 0;
      v1091[0] = &v133[1];
      v1091[1] = v133;
      *(_QWORD *)&v1085 = v133 + 1;
      *((_QWORD *)&v1085 + 1) = v133;
      do
        v137 = __ldxr(v134);
      while (__stxr(v137 + 1, v134));
      v85 = v129;
      v138 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128), v135, v136);
      do
        v139 = __ldaxr(v134);
      while (__stlxr(v139 - 1, v134));
      if (!v139)
      {
        ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
        std::__shared_weak_count::__release_weak(v133);
      }
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v138);
      v140 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v129, "setObject:forKeyedSubscript:", v140, CFSTR("KernelOffset"));

      v141 = (void *)MEMORY[0x1E0CB37E8];
      if (v127)
        v142 = 0;
      else
      objc_msgSend(v141, "numberWithUnsignedLong:", v142);
      v429 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v129, "setObject:forKeyedSubscript:", v429, CFSTR("KernelIndex"));

      objc_msgSend(v129, "setObject:forKeyedSubscript:", CFSTR("Float32"), CFSTR("KernelType"));
      v430 = (std::__shared_weak_count *)v1091[1];
      if (v1091[1])
      {
        v431 = (unint64_t *)((char *)v1091[1] + 8);
        do
          v432 = __ldaxr(v431);
        while (__stlxr(v432 - 1, v431));
        if (!v432)
        {
          ((void (*)(std::__shared_weak_count *))v430->__on_zero_shared)(v430);
          std::__shared_weak_count::__release_weak(v430);
        }
      }
      v433 = (std::__shared_weak_count *)v1098.__r_.__value_.__l.__size_;
      if (!v1098.__r_.__value_.__l.__size_)
        goto LABEL_1166;
      v434 = (unint64_t *)(v1098.__r_.__value_.__l.__size_ + 8);
      do
        v435 = __ldaxr(v434);
      while (__stlxr(v435 - 1, v434));
    }
    else if (__str.__r_.__value_.__r.__words[0])
    {
      Espresso::dilated_conv_bloated_weights<unsigned short>(&v1098, (uint64_t)__str.__r_.__value_.__l.__data_, v983, v982, a4);
      v184 = *(_OWORD *)&v1098.__r_.__value_.__l.__data_;
      v1084 = *(_OWORD *)&v1098.__r_.__value_.__l.__data_;
      if (v1098.__r_.__value_.__l.__size_)
      {
        v185 = (unint64_t *)(v1098.__r_.__value_.__l.__size_ + 8);
        do
          v186 = __ldxr(v185);
        while (__stxr(v186 + 1, v185));
      }
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v1072, v184, *((uint64_t *)&v184 + 1));
      Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_f16((Espresso::ANECompilerEngine::final_anec_weights_t *)&v1064, (Espresso::ANECompilerEngine::ane_kernel *)(v53 + 560), *(void **)(v184 + 24));
      if (*((_QWORD *)&v184 + 1))
      {
        v187 = (unint64_t *)(*((_QWORD *)&v184 + 1) + 8);
        do
          v188 = __ldaxr(v187);
        while (__stlxr(v188 - 1, v187));
        if (!v188)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v184 + 1) + 16))(*((_QWORD *)&v184 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v184 + 1));
        }
      }
      v189 = 0;
      v190 = v1098.__r_.__value_.__r.__words[0];
      v191 = *(_DWORD *)(v1098.__r_.__value_.__r.__words[0] + 8);
      do
      {
        v191 *= *(_DWORD *)(v1098.__r_.__value_.__r.__words[0] + 12 + v189);
        v189 += 4;
      }
      while (v189 != 12);
      v192 = (char *)operator new(0x58uLL);
      v193 = 2 * v191;
      *((_QWORD *)v192 + 1) = 0;
      v194 = (unint64_t *)(v192 + 8);
      *((_QWORD *)v192 + 2) = 0;
      *(_QWORD *)v192 = &off_1E2DBED50;
      v195 = *(void **)(v190 + 24);
      *((_QWORD *)v192 + 3) = &off_1E2DA1250;
      *(_OWORD *)(v192 + 72) = 0u;
      *(_OWORD *)(v192 + 56) = 0u;
      *((_DWORD *)v192 + 8) = v193;
      *((_QWORD *)v192 + 5) = v195;
      v192[48] = 0;
      v1091[0] = v192 + 24;
      v1091[1] = v192;
      memcpy(v195, *(const void **)(v190 + 24), v193);
      *(_QWORD *)&v1083 = v192 + 24;
      *((_QWORD *)&v1083 + 1) = v192;
      do
        v196 = __ldxr(v194);
      while (__stxr(v196 + 1, v194));
      v197 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128), *((const unsigned __int8 **)v192 + 5), *((int *)v192 + 8));
      do
        v198 = __ldaxr(v194);
      while (__stlxr(v198 - 1, v194));
      if (!v198)
      {
        (*(void (**)(char *))(*(_QWORD *)v192 + 16))(v192);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v192);
      }
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v197);
      v199 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v85, "setObject:forKeyedSubscript:", v199, CFSTR("KernelOffset"));

      v200 = (void *)MEMORY[0x1E0CB37E8];
      if (v127)
        v201 = 0;
      else
      objc_msgSend(v200, "numberWithUnsignedLong:", v201);
      v731 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v85, "setObject:forKeyedSubscript:", v731, CFSTR("KernelIndex"));

      objc_msgSend(v85, "setObject:forKeyedSubscript:", CFSTR("Float16"), CFSTR("KernelType"));
      v732 = (std::__shared_weak_count *)v1091[1];
      if (v1091[1])
      {
        v733 = (unint64_t *)((char *)v1091[1] + 8);
        do
          v734 = __ldaxr(v733);
        while (__stlxr(v734 - 1, v733));
        if (!v734)
        {
          ((void (*)(std::__shared_weak_count *))v732->__on_zero_shared)(v732);
          std::__shared_weak_count::__release_weak(v732);
        }
      }
      v433 = (std::__shared_weak_count *)v1098.__r_.__value_.__l.__size_;
      if (!v1098.__r_.__value_.__l.__size_)
        goto LABEL_1166;
      v735 = (unint64_t *)(v1098.__r_.__value_.__l.__size_ + 8);
      do
        v435 = __ldaxr(v735);
      while (__stlxr(v435 - 1, v735));
    }
    else
    {
      if (!v128
        || !*(_QWORD *)v128
        || !*(_QWORD *)(v128 + 32) && !*(_QWORD *)(v128 + 48) && !*(_QWORD *)(v128 + 64) && !*(_QWORD *)(v128 + 80))
      {
        Espresso::throw_exception_selector<Espresso::not_implemented_error>("<rdar://problem/36840916> Need proper way of expressing dilated conv to ANEC");
      }
      v1091[1] = 0;
      v1091[0] = 0;
      {
        Espresso::quantized_weights_helper::dequantize_to_float16_2d((Espresso::quantized_weights_helper *)v128, &v1098);
      }
      else
      {
        Espresso::quantized_weights_helper::dequantize_to_float16_4d((Espresso::quantized_weights_helper *)v128, &v1098);
      }
      v973 = v1098.__r_.__value_.__r.__words[0];
      *(_OWORD *)v1091 = *(_OWORD *)&v1098.__r_.__value_.__l.__data_;
      (*(void (**)(std::string *__return_ptr, _BYTE *))(*(_QWORD *)v53 + 464))(&v1098, v53);
      v755 = *(_QWORD *)(v973 + 16);
      v756 = operator new(0x60uLL);
      v756[1] = 0;
      v756[2] = 0;
      *v756 = &off_1E2DBF060;
      v756[3] = &off_1E2DA1410;
      *((_OWORD *)v756 + 4) = 0u;
      *((_OWORD *)v756 + 5) = 0u;
      *((_OWORD *)v756 + 2) = *(_OWORD *)&v1098.__r_.__value_.__l.__data_;
      v756[6] = v755;
      *((_BYTE *)v756 + 56) = 0;
      v1096 = (char *)(v756 + 3);
      v1097 = (std::__shared_weak_count *)v756;
      Espresso::dilated_conv_bloated_weights<unsigned short>(&v1087, (uint64_t)(v756 + 3), v983, v982, a4);
      v757 = (uint64_t)v1087;
      v758 = v1088;
      v1081 = (uint64_t)v1087;
      v1082 = v1088;
      if (v1088)
      {
        v759 = (unint64_t *)&v1088->__shared_owners_;
        do
          v760 = __ldxr(v759);
        while (__stxr(v760 + 1, v759));
      }
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v1072, v757, (uint64_t)v758);
      Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_f16((Espresso::ANECompilerEngine::final_anec_weights_t *)&v1064, (Espresso::ANECompilerEngine::ane_kernel *)(v53 + 560), *(void **)(v757 + 24));
      if (v758)
      {
        v761 = (unint64_t *)&v758->__shared_owners_;
        do
          v762 = __ldaxr(v761);
        while (__stlxr(v762 - 1, v761));
        if (!v762)
        {
          ((void (*)(std::__shared_weak_count *))v758->__on_zero_shared)(v758);
          std::__shared_weak_count::__release_weak(v758);
        }
      }
      v763 = 0;
      v764 = (uint64_t)v1087;
      shared_owners = v1087->__shared_owners_;
      do
      {
        shared_owners *= *(_DWORD *)((char *)&v1087->__shared_owners_ + v763 + 4);
        v763 += 4;
      }
      while (v763 != 12);
      v766 = (std::__shared_weak_count *)operator new(0x58uLL);
      v767 = 2 * shared_owners;
      v766->__shared_owners_ = 0;
      v768 = (unint64_t *)&v766->__shared_owners_;
      v766->__shared_weak_owners_ = 0;
      v766->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBED50;
      v769 = *(void **)(v764 + 24);
      v766[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA1250;
      v766[3].std::__shared_count = 0u;
      *(_OWORD *)&v766[2].__shared_owners_ = 0u;
      LODWORD(v766[1].__shared_owners_) = v767;
      v766[1].__shared_weak_owners_ = (uint64_t)v769;
      LOBYTE(v766[2].__vftable) = 0;
      v1079 = v766 + 1;
      v1080 = v766;
      memcpy(v769, *(const void **)(v764 + 24), v767);
      v1077 = v766 + 1;
      v1078 = v766;
      do
        v770 = __ldxr(v768);
      while (__stxr(v770 + 1, v768));
      v771 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128), (const unsigned __int8 *)v766[1].__shared_weak_owners_, SLODWORD(v766[1].__shared_owners_));
      do
        v772 = __ldaxr(v768);
      while (__stlxr(v772 - 1, v768));
      if (!v772)
      {
        ((void (*)(std::__shared_weak_count *))v766->__on_zero_shared)(v766);
        std::__shared_weak_count::__release_weak(v766);
      }
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v771);
      v773 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v85, "setObject:forKeyedSubscript:", v773, CFSTR("KernelOffset"));

      objc_msgSend(v85, "setObject:forKeyedSubscript:", CFSTR("Float16"), CFSTR("KernelType"));
      v774 = (void *)MEMORY[0x1E0CB37E8];
      if (v127)
        v775 = 0;
      else
      objc_msgSend(v774, "numberWithUnsignedLong:", v775);
      v776 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v85, "setObject:forKeyedSubscript:", v776, CFSTR("KernelIndex"));

      v1076 = 0uLL;
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](lpsrc[59] + 80, &v1076);
      v777 = (std::__shared_weak_count *)*((_QWORD *)&v1076 + 1);
      if (*((_QWORD *)&v1076 + 1))
      {
        v778 = (unint64_t *)(*((_QWORD *)&v1076 + 1) + 8);
        do
          v779 = __ldaxr(v778);
        while (__stlxr(v779 - 1, v778));
        if (!v779)
        {
          ((void (*)(std::__shared_weak_count *))v777->__on_zero_shared)(v777);
          std::__shared_weak_count::__release_weak(v777);
        }
      }
      v780 = v1080;
      if (v1080)
      {
        v781 = (unint64_t *)&v1080->__shared_owners_;
        do
          v782 = __ldaxr(v781);
        while (__stlxr(v782 - 1, v781));
        if (!v782)
        {
          ((void (*)(std::__shared_weak_count *))v780->__on_zero_shared)(v780);
          std::__shared_weak_count::__release_weak(v780);
        }
      }
      v783 = v1088;
      if (v1088)
      {
        v784 = (unint64_t *)&v1088->__shared_owners_;
        do
          v785 = __ldaxr(v784);
        while (__stlxr(v785 - 1, v784));
        if (!v785)
        {
          ((void (*)(std::__shared_weak_count *))v783->__on_zero_shared)(v783);
          std::__shared_weak_count::__release_weak(v783);
        }
      }
      v786 = v1097;
      if (v1097)
      {
        v787 = (unint64_t *)&v1097->__shared_owners_;
        do
          v788 = __ldaxr(v787);
        while (__stlxr(v788 - 1, v787));
        if (!v788)
        {
          ((void (*)(std::__shared_weak_count *))v786->__on_zero_shared)(v786);
          std::__shared_weak_count::__release_weak(v786);
        }
      }
      if (v1100)
      {
        v1101 = (char *)v1100;
        operator delete(v1100);
      }
      v433 = (std::__shared_weak_count *)v1091[1];
      if (!v1091[1])
        goto LABEL_1166;
      v789 = (unint64_t *)((char *)v1091[1] + 8);
      do
        v435 = __ldaxr(v789);
      while (__stlxr(v435 - 1, v789));
    }
    if (!v435)
    {
      ((void (*)(std::__shared_weak_count *))v433->__on_zero_shared)(v433);
      std::__shared_weak_count::__release_weak(v433);
    }
LABEL_1166:
    v790 = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
    if (__str.__r_.__value_.__l.__size_)
    {
      v791 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
      do
        v792 = __ldaxr(v791);
      while (__stlxr(v792 - 1, v791));
      if (!v792)
      {
        ((void (*)(std::__shared_weak_count *))v790->__on_zero_shared)(v790);
        std::__shared_weak_count::__release_weak(v790);
      }
    }
    v793 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v794 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v795 = __ldaxr(v794);
      while (__stlxr(v795 - 1, v794));
      if (!v795)
      {
        ((void (*)(std::__shared_weak_count *))v793->__on_zero_shared)(v793);
        std::__shared_weak_count::__release_weak(v793);
      }
    }

  }
LABEL_82:
  Espresso::ANECompilerEngine::sparsity_options::required_sparsity_for_compression(v985, v55);
  v57 = v56;
  v58 = 0;
  if (v984 && HIBYTE(v1051) && (_BYTE)v1051)
  {
    v59 = v49;
    v60 = v59;
    v58 = *(__int16 *)(a4 + 96) > 1 || *(__int16 *)(a4 + 98) > 1;
    if (!v58)
    {
LABEL_333:

      goto LABEL_334;
    }
    v975 = v49;
    objc_msgSend(v59, "objectForKeyedSubscript:", CFSTR("KernelType"));
    v62 = (void *)objc_claimAutoreleasedReturnValue();
    *(_OWORD *)&v1098.__r_.__value_.__l.__data_ = 0uLL;
    *(_QWORD *)&buf[8] = 0;
    *(_QWORD *)buf = 0;
    v972 = v62;
    if (objc_msgSend(v62, "isEqualToString:", CFSTR("Float16")))
    {
      v63 = (std::__shared_weak_count *)*((_QWORD *)&v1066 + 1);
      v64 = v1066;
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v1066;
      if (*((_QWORD *)&v1066 + 1))
      {
        v65 = (unint64_t *)(*((_QWORD *)&v1066 + 1) + 8);
        do
          v66 = __ldxr(v65);
        while (__stxr(v66 + 1, v65));
      }
      if (!v64)
        Espresso::throw_exception_selector<Espresso::invalid_state_error>("Null final fp16 weights");
      v67 = *(_DWORD *)(v64 + 8);
      for (i = 12; i != 24; i += 4)
        v67 *= *(_DWORD *)(v64 + i);
      v69 = (char *)operator new(0x58uLL);
      *((_QWORD *)v69 + 1) = 0;
      *((_QWORD *)v69 + 2) = 0;
      *(_QWORD *)v69 = &off_1E2DBED50;
      v70 = *(_QWORD *)(v64 + 24);
      *((_QWORD *)v69 + 3) = &off_1E2DA1250;
      *(_OWORD *)(v69 + 56) = 0u;
      *(_OWORD *)(v69 + 72) = 0u;
      *((_DWORD *)v69 + 8) = 2 * v67;
      *((_QWORD *)v69 + 5) = v70;
      v69[48] = 0;
      *(_QWORD *)buf = v69 + 24;
      *(_QWORD *)&buf[8] = v69;
      v71 = *(int *)(v64 + 8);
      for (j = 12; j != 24; j += 4)
        v71 *= *(int *)(v64 + j);
      Espresso::compress_dilated_conv_sparse_kernel_mask<unsigned short>((uint64_t *)v1091, (_DWORD *)v64, a4);
      *(_OWORD *)&v1098.__r_.__value_.__l.__data_ = *(_OWORD *)v1091;
      if (!v63)
        goto LABEL_300;
      v73 = (unint64_t *)&v63->__shared_owners_;
      do
        v74 = __ldaxr(v73);
      while (__stlxr(v74 - 1, v73));
    }
    else if (objc_msgSend(v62, "isEqualToString:", CFSTR("Float32")))
    {
      v63 = (std::__shared_weak_count *)*((_QWORD *)&v1065 + 1);
      v103 = v1065;
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v1065;
      if (*((_QWORD *)&v1065 + 1))
      {
        v104 = (unint64_t *)(*((_QWORD *)&v1065 + 1) + 8);
        do
          v105 = __ldxr(v104);
        while (__stxr(v105 + 1, v104));
      }
      if (!v103)
        Espresso::throw_exception_selector<Espresso::invalid_state_error>("Null final fp32 weights");
      v106 = *(_DWORD *)(v103 + 8);
      for (k = 12; k != 24; k += 4)
        v106 *= *(_DWORD *)(v103 + k);
      v108 = (char *)operator new(0x58uLL);
      *((_QWORD *)v108 + 1) = 0;
      *((_QWORD *)v108 + 2) = 0;
      *(_QWORD *)v108 = &off_1E2DBED50;
      v109 = *(_QWORD *)(v103 + 24);
      *((_QWORD *)v108 + 3) = &off_1E2DA1250;
      *(_OWORD *)(v108 + 56) = 0u;
      *(_OWORD *)(v108 + 72) = 0u;
      *((_DWORD *)v108 + 8) = 4 * v106;
      *((_QWORD *)v108 + 5) = v109;
      v108[48] = 0;
      *(_QWORD *)buf = v108 + 24;
      *(_QWORD *)&buf[8] = v108;
      v71 = *(int *)(v103 + 8);
      for (m = 12; m != 24; m += 4)
        v71 *= *(int *)(v103 + m);
      Espresso::compress_dilated_conv_sparse_kernel_mask<unsigned short>((uint64_t *)v1091, (_DWORD *)v103, a4);
      *(_OWORD *)&v1098.__r_.__value_.__l.__data_ = *(_OWORD *)v1091;
      if (!v63)
        goto LABEL_300;
      v111 = (unint64_t *)&v63->__shared_owners_;
      do
        v74 = __ldaxr(v111);
      while (__stlxr(v74 - 1, v111));
    }
    else if (objc_msgSend(v62, "isEqualToString:", CFSTR("UInt8")))
    {
      v63 = (std::__shared_weak_count *)*((_QWORD *)&v1067 + 1);
      v159 = v1067;
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v1067;
      if (*((_QWORD *)&v1067 + 1))
      {
        v160 = (unint64_t *)(*((_QWORD *)&v1067 + 1) + 8);
        do
          v161 = __ldxr(v160);
        while (__stxr(v161 + 1, v160));
      }
      if (!v159)
        Espresso::throw_exception_selector<Espresso::invalid_state_error>("Null final uint8 weights");
      v162 = *(_DWORD *)(v159 + 8);
      for (n = 12; n != 24; n += 4)
        v162 *= *(_DWORD *)(v159 + n);
      v164 = (char *)operator new(0x58uLL);
      *((_QWORD *)v164 + 1) = 0;
      *((_QWORD *)v164 + 2) = 0;
      *(_QWORD *)v164 = &off_1E2DBED50;
      v165 = *(_QWORD *)(v159 + 24);
      *((_QWORD *)v164 + 3) = &off_1E2DA1250;
      *(_OWORD *)(v164 + 56) = 0u;
      *(_OWORD *)(v164 + 72) = 0u;
      *((_DWORD *)v164 + 8) = v162;
      *((_QWORD *)v164 + 5) = v165;
      v164[48] = 0;
      *(_QWORD *)buf = v164 + 24;
      *(_QWORD *)&buf[8] = v164;
      v71 = *(int *)(v159 + 8);
      for (ii = 12; ii != 24; ii += 4)
        v71 *= *(int *)(v159 + ii);
      Espresso::compress_dilated_conv_sparse_kernel_mask<unsigned short>((uint64_t *)v1091, (_DWORD *)v159, a4);
      *(_OWORD *)&v1098.__r_.__value_.__l.__data_ = *(_OWORD *)v1091;
      if (!v63)
        goto LABEL_300;
      v167 = (unint64_t *)&v63->__shared_owners_;
      do
        v74 = __ldaxr(v167);
      while (__stlxr(v74 - 1, v167));
    }
    else
    {
      if (!objc_msgSend(v62, "isEqualToString:", CFSTR("Int8")))
      {
        if (v62)
          v964 = (const char *)objc_msgSend(objc_retainAutorelease(v62), "UTF8String");
        else
          v964 = "";
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v964;
        Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*>("Invalid kernel type %s", &__str);
      }
      v63 = (std::__shared_weak_count *)*((_QWORD *)&v1068 + 1);
      v202 = v1068;
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v1068;
      if (*((_QWORD *)&v1068 + 1))
      {
        v203 = (unint64_t *)(*((_QWORD *)&v1068 + 1) + 8);
        do
          v204 = __ldxr(v203);
        while (__stxr(v204 + 1, v203));
      }
      if (!v202)
        Espresso::throw_exception_selector<Espresso::invalid_state_error>("Null final int8 weights");
      v205 = *(_DWORD *)(v202 + 8);
      for (jj = 12; jj != 24; jj += 4)
        v205 *= *(_DWORD *)(v202 + jj);
      v207 = (char *)operator new(0x58uLL);
      *((_QWORD *)v207 + 1) = 0;
      *((_QWORD *)v207 + 2) = 0;
      *(_QWORD *)v207 = &off_1E2DBED50;
      v208 = *(_QWORD *)(v202 + 24);
      *((_QWORD *)v207 + 3) = &off_1E2DA1250;
      *(_OWORD *)(v207 + 56) = 0u;
      *(_OWORD *)(v207 + 72) = 0u;
      *((_DWORD *)v207 + 8) = v205;
      *((_QWORD *)v207 + 5) = v208;
      v207[48] = 0;
      *(_QWORD *)buf = v207 + 24;
      *(_QWORD *)&buf[8] = v207;
      v71 = *(int *)(v202 + 8);
      for (kk = 12; kk != 24; kk += 4)
        v71 *= *(int *)(v202 + kk);
      Espresso::compress_dilated_conv_sparse_kernel_mask<unsigned short>((uint64_t *)v1091, (_DWORD *)v202, a4);
      *(_OWORD *)&v1098.__r_.__value_.__l.__data_ = *(_OWORD *)v1091;
      if (!v63)
        goto LABEL_300;
      v210 = (unint64_t *)&v63->__shared_owners_;
      do
        v74 = __ldaxr(v210);
      while (__stlxr(v74 - 1, v210));
    }
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
LABEL_300:
    v211 = a2[552];
    v212 = (void *)MEMORY[0x1E0CB37E8];
    if (a2[552])
      v213 = 0;
    else
    objc_msgSend(v212, "numberWithUnsignedLong:", v213);
    v214 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v60, "setObject:forKeyedSubscript:", v214, CFSTR("KernelIndex"));

    v215 = a4;
    v216 = v7;
    v217 = (void *)MEMORY[0x1E0CB37E8];
    v218 = (Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128);
    v219 = *(_QWORD *)buf;
    v220 = *(std::__shared_weak_count **)&buf[8];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *(_OWORD *)buf;
    if (*(_QWORD *)&buf[8])
    {
      v221 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v222 = __ldxr(v221);
      while (__stxr(v222 + 1, v221));
    }
    objc_msgSend(v217, "numberWithInt:", Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v218, *(const unsigned __int8 **)(v219 + 16), *(int *)(v219 + 8)));
    v223 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v60, "setObject:forKeyedSubscript:", v223, CFSTR("KernelOffset"));

    v7 = v216;
    a4 = v215;
    v49 = v975;
    if (v220)
    {
      v224 = (unint64_t *)&v220->__shared_owners_;
      do
        v225 = __ldaxr(v224);
      while (__stlxr(v225 - 1, v224));
      if (!v225)
      {
        ((void (*)(std::__shared_weak_count *))v220->__on_zero_shared)(v220);
        std::__shared_weak_count::__release_weak(v220);
      }
    }
    v226 = *(_OWORD *)&v1098.__r_.__value_.__l.__data_;
    *(_OWORD *)v1091 = *(_OWORD *)&v1098.__r_.__value_.__l.__data_;
    if (v1098.__r_.__value_.__l.__size_)
    {
      v227 = (unint64_t *)(v1098.__r_.__value_.__l.__size_ + 8);
      do
        v228 = __ldxr(v227);
      while (__stxr(v228 + 1, v227));
    }
    v229 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v218, *(const unsigned __int8 **)(v226 + 16), *(int *)(v226 + 8));
    if (*((_QWORD *)&v226 + 1))
    {
      v230 = (unint64_t *)(*((_QWORD *)&v226 + 1) + 8);
      do
        v231 = __ldaxr(v230);
      while (__stlxr(v231 - 1, v230));
      if (!v231)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v226 + 1) + 16))(*((_QWORD *)&v226 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v226 + 1));
      }
    }
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v229);
    v232 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v60, "setObject:forKeyedSubscript:", v232, CFSTR("KernelMaskByteOffset"));

    v233 = (void *)MEMORY[0x1E0CB37E8];
    if (v211)
      v234 = 0;
    else
    objc_msgSend(v233, "numberWithUnsignedLong:", v234);
    v235 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v60, "setObject:forKeyedSubscript:", v235, CFSTR("KernelMaskIndex"));

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", v71);
    v236 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v60, "setObject:forKeyedSubscript:", v236, CFSTR("KernelCoeffCount"));

    objc_msgSend(v60, "setObject:forKeyedSubscript:", CFSTR("Sparse"), CFSTR("KernelMode"));
    v237 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v238 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v239 = __ldaxr(v238);
      while (__stlxr(v239 - 1, v238));
      if (!v239)
      {
        ((void (*)(std::__shared_weak_count *))v237->__on_zero_shared)(v237);
        std::__shared_weak_count::__release_weak(v237);
      }
    }
    v240 = (std::__shared_weak_count *)v1098.__r_.__value_.__l.__size_;
    if (v1098.__r_.__value_.__l.__size_)
    {
      v241 = (unint64_t *)(v1098.__r_.__value_.__l.__size_ + 8);
      do
        v242 = __ldaxr(v241);
      while (__stlxr(v242 - 1, v241));
      if (!v242)
      {
        ((void (*)(std::__shared_weak_count *))v240->__on_zero_shared)(v240);
        std::__shared_weak_count::__release_weak(v240);
      }
    }

    goto LABEL_333;
  }
LABEL_334:
  if (!v58 && !v984 && v981)
  {
    v243 = v49;
    *(_OWORD *)&v1098.__r_.__value_.__l.__data_ = 0uLL;
    *(_QWORD *)&buf[8] = 0;
    *(_QWORD *)buf = 0;
    if ((_QWORD)v1065)
    {
      v244 = (std::__shared_weak_count *)*((_QWORD *)&v1065 + 1);
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v1065;
      if (*((_QWORD *)&v1065 + 1))
      {
        v245 = (unint64_t *)(*((_QWORD *)&v1065 + 1) + 8);
        do
          v246 = __ldxr(v245);
        while (__stxr(v246 + 1, v245));
      }
      v247 = Espresso::ANECompilerEngine::compress_sparse_weights<float,4>((uint64_t)&__str, (uint64_t)&v1098, (uint64_t)buf, v57);
      if (!v244)
        goto LABEL_368;
      v248 = (unint64_t *)&v244->__shared_owners_;
      do
        v249 = __ldaxr(v248);
      while (__stlxr(v249 - 1, v248));
    }
    else if ((_QWORD)v1066)
    {
      v244 = (std::__shared_weak_count *)*((_QWORD *)&v1066 + 1);
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v1066;
      if (*((_QWORD *)&v1066 + 1))
      {
        v250 = (unint64_t *)(*((_QWORD *)&v1066 + 1) + 8);
        do
          v251 = __ldxr(v250);
        while (__stxr(v251 + 1, v250));
      }
      v247 = Espresso::ANECompilerEngine::compress_sparse_weights<unsigned short,4>((uint64_t)&__str, (uint64_t)&v1098, (uint64_t)buf, v57);
      if (!v244)
        goto LABEL_368;
      v252 = (unint64_t *)&v244->__shared_owners_;
      do
        v249 = __ldaxr(v252);
      while (__stlxr(v249 - 1, v252));
    }
    else if ((_QWORD)v1067)
    {
      v244 = (std::__shared_weak_count *)*((_QWORD *)&v1067 + 1);
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v1067;
      if (*((_QWORD *)&v1067 + 1))
      {
        v253 = (unint64_t *)(*((_QWORD *)&v1067 + 1) + 8);
        do
          v254 = __ldxr(v253);
        while (__stxr(v254 + 1, v253));
      }
      v247 = Espresso::ANECompilerEngine::compress_sparse_weights<unsigned char,4>((uint64_t)&__str, (uint64_t)&v1098, (uint64_t)buf, v57);
      if (!v244)
        goto LABEL_368;
      v255 = (unint64_t *)&v244->__shared_owners_;
      do
        v249 = __ldaxr(v255);
      while (__stlxr(v249 - 1, v255));
    }
    else
    {
      if (!(_QWORD)v1068)
      {
        v247 = 0;
LABEL_368:
        v259 = v1098.__r_.__value_.__r.__words[0];
        if (v1098.__r_.__value_.__r.__words[0])
          v260 = *(_QWORD *)buf == 0;
        else
          v260 = 1;
        if (!v260)
        {
          v261 = a2[552];
          v262 = (Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128);
          v263 = (std::__shared_weak_count *)v1098.__r_.__value_.__l.__size_;
          *(_OWORD *)v1091 = *(_OWORD *)&v1098.__r_.__value_.__l.__data_;
          if (v1098.__r_.__value_.__l.__size_)
          {
            v264 = (unint64_t *)(v1098.__r_.__value_.__l.__size_ + 8);
            do
              v265 = __ldxr(v264);
            while (__stxr(v265 + 1, v264));
          }
          v266 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v262, *(const unsigned __int8 **)(v259 + 16), *(int *)(v259 + 8));
          if (v263)
          {
            v267 = (unint64_t *)&v263->__shared_owners_;
            do
              v268 = __ldaxr(v267);
            while (__stlxr(v268 - 1, v267));
            if (!v268)
            {
              ((void (*)(std::__shared_weak_count *))v263->__on_zero_shared)(v263);
              std::__shared_weak_count::__release_weak(v263);
            }
          }
          v269 = (void *)MEMORY[0x1E0CB37E8];
          if (v261)
            v270 = 0;
          else
          objc_msgSend(v269, "numberWithUnsignedLong:", v270);
          v271 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v243, "setObject:forKeyedSubscript:", v271, CFSTR("KernelIndex"));

          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v266);
          v272 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v243, "setObject:forKeyedSubscript:", v272, CFSTR("KernelOffset"));

          v273 = *(_QWORD *)buf;
          v274 = *(std::__shared_weak_count **)&buf[8];
          v1096 = *(char **)buf;
          v1097 = *(std::__shared_weak_count **)&buf[8];
          if (*(_QWORD *)&buf[8])
          {
            v275 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
            do
              v276 = __ldxr(v275);
            while (__stxr(v276 + 1, v275));
          }
          v277 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v262, *(const unsigned __int8 **)(v273 + 16), *(int *)(v273 + 8));
          if (v274)
          {
            v278 = (unint64_t *)&v274->__shared_owners_;
            do
              v279 = __ldaxr(v278);
            while (__stlxr(v279 - 1, v278));
            if (!v279)
            {
              ((void (*)(std::__shared_weak_count *))v274->__on_zero_shared)(v274);
              std::__shared_weak_count::__release_weak(v274);
            }
          }
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v277);
          v280 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v243, "setObject:forKeyedSubscript:", v280, CFSTR("KernelMaskByteOffset"));

          v281 = (void *)MEMORY[0x1E0CB37E8];
          if (v261)
            v282 = 0;
          else
          objc_msgSend(v281, "numberWithUnsignedLong:", v282);
          v283 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v243, "setObject:forKeyedSubscript:", v283, CFSTR("KernelMaskIndex"));

          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", v247);
          v284 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v243, "setObject:forKeyedSubscript:", v284, CFSTR("KernelCoeffCount"));

          objc_msgSend(v243, "setObject:forKeyedSubscript:", CFSTR("Sparse"), CFSTR("KernelMode"));
        }
        v285 = *(std::__shared_weak_count **)&buf[8];
        if (*(_QWORD *)&buf[8])
        {
          v286 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
          do
            v287 = __ldaxr(v286);
          while (__stlxr(v287 - 1, v286));
          if (!v287)
          {
            ((void (*)(std::__shared_weak_count *))v285->__on_zero_shared)(v285);
            std::__shared_weak_count::__release_weak(v285);
          }
        }
        v288 = (std::__shared_weak_count *)v1098.__r_.__value_.__l.__size_;
        if (v1098.__r_.__value_.__l.__size_)
        {
          v289 = (unint64_t *)(v1098.__r_.__value_.__l.__size_ + 8);
          do
            v290 = __ldaxr(v289);
          while (__stlxr(v290 - 1, v289));
          if (!v290)
          {
            ((void (*)(std::__shared_weak_count *))v288->__on_zero_shared)(v288);
            std::__shared_weak_count::__release_weak(v288);
          }
        }

        goto LABEL_406;
      }
      v244 = (std::__shared_weak_count *)*((_QWORD *)&v1068 + 1);
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v1068;
      if (*((_QWORD *)&v1068 + 1))
      {
        v256 = (unint64_t *)(*((_QWORD *)&v1068 + 1) + 8);
        do
          v257 = __ldxr(v256);
        while (__stxr(v257 + 1, v256));
      }
      v247 = Espresso::ANECompilerEngine::compress_sparse_weights<signed char,4>((uint64_t)&__str, (uint64_t)&v1098, (uint64_t)buf, v57);
      if (!v244)
        goto LABEL_368;
      v258 = (unint64_t *)&v244->__shared_owners_;
      do
        v249 = __ldaxr(v258);
      while (__stlxr(v249 - 1, v258));
    }
    if (!v249)
    {
      ((void (*)(std::__shared_weak_count *))v244->__on_zero_shared)(v244);
      std::__shared_weak_count::__release_weak(v244);
    }
    goto LABEL_368;
  }
LABEL_406:
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *(__int16 *)(a4 + 92));
  v291 = (void *)objc_claimAutoreleasedReturnValue();
  v1110[0] = v291;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *(__int16 *)(a4 + 94));
  v292 = (void *)objc_claimAutoreleasedReturnValue();
  v1110[1] = v292;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v1110, 2);
  v293 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v49, "setObject:forKeyedSubscript:", v293, CFSTR("Step"));

  if (HIBYTE(v1051))
    v294 = 0;
  else
    v294 = v984;
  if (v294 && !(_BYTE)v1051)
  {
    v982 = (v982 - 1) * *(__int16 *)(a4 + 98) + 1;
    v983 = (v983 - 1) * *(__int16 *)(a4 + 96) + 1;
  }
  v295 = *(__int16 *)(a4 + 72);
  switch(v295)
  {
    case 4:
      goto LABEL_415;
    case 2:
      goto LABEL_462;
    case 1:
LABEL_415:
      v296 = v982 + (*(_DWORD *)(*a7 + 12) - 1) * *(__int16 *)(a4 + 94) - *(_DWORD *)(*v7 + 12);
      v297 = v983 + (*(_DWORD *)(*a7 + 8) - 1) * *(__int16 *)(a4 + 92) - *(_DWORD *)(*v7 + 8);
      v298 = v296 & ~(v296 >> 31);
      v299 = v297 & ~(v297 >> 31);
      v300 = *(unsigned __int16 *)(a4 + 72);
      v301 = v299 >> 1;
      v302 = v299 - (v299 >> 1);
      v303 = v298 >> 1;
      v304 = v298 - (v298 >> 1);
      if (v300 == 1)
        v305 = v304;
      else
        v305 = v303;
      if (v300 == 1)
        v306 = v303;
      else
        v306 = v304;
      if (v300 == 1)
        v307 = v302;
      else
        v307 = v301;
      if (v300 == 1)
        v308 = v301;
      else
        v308 = v302;
      break;
    default:
      v308 = *(__int16 *)(a4 + 80);
      v307 = *(__int16 *)(a4 + 82);
      v306 = *(__int16 *)(a4 + 84);
      v305 = *(__int16 *)(a4 + 86);
      break;
  }
  if (v306)
    v309 = 0;
  else
    v309 = (_DWORD)v305 == 0;
  if (v309 && (_DWORD)v308 == 0)
  {
    if (!(_DWORD)v307)
      goto LABEL_462;
    v305 = 0;
    v308 = 0;
  }
  else if ((v306 & 0x80000000) != 0)
  {
    v311 = 0;
    v312 = &unk_1E2DEDA90;
    goto LABEL_440;
  }
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:");
  v312 = (void *)objc_claimAutoreleasedReturnValue();
  v311 = 1;
LABEL_440:
  objc_msgSend(v49, "setObject:forKeyedSubscript:", v312, CFSTR("PadTop"));
  if (v311)

  if ((v305 & 0x80000000) != 0)
  {
    v313 = &unk_1E2DEDA90;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v305);
    v313 = (void *)objc_claimAutoreleasedReturnValue();
  }
  objc_msgSend(v49, "setObject:forKeyedSubscript:", v313, CFSTR("PadBot"));
  if ((v305 & 0x80000000) == 0)

  if ((v308 & 0x80000000) != 0)
  {
    v314 = &unk_1E2DEDA90;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v308);
    v314 = (void *)objc_claimAutoreleasedReturnValue();
  }
  objc_msgSend(v49, "setObject:forKeyedSubscript:", v314, CFSTR("PadLeft"));
  if ((v308 & 0x80000000) == 0)

  if ((v307 & 0x80000000) != 0)
  {
    v315 = &unk_1E2DEDA90;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v307);
    v315 = (void *)objc_claimAutoreleasedReturnValue();
  }
  objc_msgSend(v49, "setObject:forKeyedSubscript:", v315, CFSTR("PadRight"));
  if ((v307 & 0x80000000) == 0)

  if (*(_WORD *)(a4 + 74))
  {
    if (*(_WORD *)(a4 + 74) != 1)
      goto LABEL_462;
    v316 = CFSTR("Replication");
  }
  else
  {
    v316 = CFSTR("Zero");
  }
  objc_msgSend(v49, "setObject:forKeyedSubscript:", v316, CFSTR("PaddingMode"));
LABEL_462:
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v1098.__r_.__value_.__l.__data_, a5);
  if (v294)
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithShort:", *(__int16 *)(a4 + 96));
    v317 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v49, "setObject:forKeyedSubscript:", v317, CFSTR("KernelDilationX"));

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithShort:", *(__int16 *)(a4 + 98));
    v318 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v49, "setObject:forKeyedSubscript:", v318, CFSTR("KernelDilationY"));

    objc_msgSend(v49, "setObject:forKeyedSubscript:", v977, CFSTR("Type"));
  }
  v319 = v1107;
  v1107 = CFSTR("Conv");

  objc_storeStrong(&v1108, v49);
  v320 = (uint64_t)*a3 + 136;
  *(_QWORD *)buf = &v1098;
  v321 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v320, (unsigned __int8 *)&v1098, (__int128 **)buf);
  v323 = (std::__shared_weak_count *)*((_QWORD *)v321 + 6);
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v322;
  __str.__r_.__value_.__l.__size_ = (std::string::size_type)v323;
  if (v323)
  {
    v324 = (unint64_t *)&v323->__shared_owners_;
    do
      v325 = __ldxr(v324);
    while (__stxr(v325 + 1, v324));
  }
  LODWORD(v1109) = v322[41];
  HIDWORD(v1109) = v980;
  v326 = v1049;
  if ((unint64_t)v1049 >= v1050)
  {
    v328 = 0x8E38E38E38E38E39 * (((uint64_t)v1049 - v1048) >> 4);
    if (v328 + 1 > 0x1C71C71C71C71C7)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v329 = 0x1C71C71C71C71C72 * ((uint64_t)(v1050 - v1048) >> 4);
    if (v329 <= v328 + 1)
      v329 = v328 + 1;
    if (0x8E38E38E38E38E39 * ((uint64_t)(v1050 - v1048) >> 4) >= 0xE38E38E38E38E3)
      v330 = 0x1C71C71C71C71C7;
    else
      v330 = v329;
    *((_QWORD *)&v1112 + 1) = &v1050;
    if (v330)
      v330 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v330);
    else
      v331 = 0;
    *(_QWORD *)buf = v330;
    *(_QWORD *)&buf[8] = v330 + 144 * v328;
    *(_QWORD *)&buf[16] = *(_QWORD *)&buf[8];
    *(_QWORD *)&v1112 = v330 + 144 * v331;
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(*(std::string **)&buf[8], (uint64_t)&v1098);
    *(_QWORD *)&buf[16] += 144;
    std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v1048, buf);
    v327 = v1049;
    std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)buf);
  }
  else
  {
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v1049, (uint64_t)&v1098);
    v327 = v326 + 6;
  }
  v1049 = v327;
  if (v323)
  {
    v332 = (unint64_t *)&v323->__shared_owners_;
    do
      v333 = __ldaxr(v332);
    while (__stlxr(v333 - 1, v332));
    if (!v333)
    {
      ((void (*)(std::__shared_weak_count *))v323->__on_zero_shared)(v323);
      std::__shared_weak_count::__release_weak(v323);
    }
  }

  if (v1105 < 0)
    operator delete(v1104);
  *(_QWORD *)buf = &v1101;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(_QWORD *)buf = v1099;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (SHIBYTE(v1098.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1098.__r_.__value_.__l.__data_);

  v334 = (std::__shared_weak_count *)a3[1];
  v1015 = *a3;
  v1016 = v334;
  if (v334)
  {
    v335 = (unint64_t *)&v334->__shared_owners_;
    do
      v336 = __ldxr(v335);
    while (__stxr(v336 + 1, v335));
  }
  v338 = *a7;
  v337 = (std::__shared_weak_count *)a7[1];
  v1013 = *a7;
  v1014 = v337;
  if (v337)
  {
    v339 = (unint64_t *)&v337->__shared_owners_;
    do
      v340 = __ldxr(v339);
    while (__stxr(v340 + 1, v339));
  }
  Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t((Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)&v1098);
  v1108 = 0;
  v1107 = 0;
  v1109 = 0x100000000;
  v341 = (char *)lpsrc[78];
  v342 = (std::__shared_weak_count *)lpsrc[79];
  v1096 = v341;
  v1097 = v342;
  if (v342)
  {
    v343 = (unint64_t *)&v342->__shared_owners_;
    do
      v344 = __ldxr(v343);
    while (__stxr(v344 + 1, v343));
  }
  if (!v341 || *(_BYTE *)((*(uint64_t (**)(_QWORD *))(lpsrc[70] + 104))(lpsrc + 70) + 40))
  {
    v345 = 0;
    if (!v342)
      goto LABEL_655;
    goto LABEL_651;
  }
  v346 = *(float *)(v338 + 112);
  v1089 = v341;
  v1090 = v342;
  if (v342)
  {
    v347 = (unint64_t *)&v342->__shared_owners_;
    do
      v348 = __ldxr(v347);
    while (__stxr(v348 + 1, v347));
  }
  v349 = (std::__shared_weak_count *)lpsrc[81];
  v1087 = (std::__shared_weak_count *)lpsrc[80];
  v1088 = v349;
  if (v349)
  {
    v350 = (unint64_t *)&v349->__shared_owners_;
    do
      v351 = __ldxr(v350);
    while (__stxr(v351 + 1, v350));
  }
  Espresso::ane_style_post_scale_bias((uint64_t)&v1089, (uint64_t *)&v1087, (uint64_t)v1091, v346);
  if (v349)
  {
    v352 = (unint64_t *)&v349->__shared_owners_;
    do
      v353 = __ldaxr(v352);
    while (__stlxr(v353 - 1, v352));
    if (!v353)
    {
      ((void (*)(std::__shared_weak_count *))v349->__on_zero_shared)(v349);
      std::__shared_weak_count::__release_weak(v349);
    }
  }
  v354 = v1090;
  if (v1090)
  {
    v355 = (unint64_t *)&v1090->__shared_owners_;
    do
      v356 = __ldaxr(v355);
    while (__stlxr(v356 - 1, v355));
    if (!v356)
    {
      ((void (*)(std::__shared_weak_count *))v354->__on_zero_shared)(v354);
      std::__shared_weak_count::__release_weak(v354);
    }
  }
  v357 = v1096;
  v358 = *((unsigned int *)v1096 + 2);
  std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v1086, 2 * v358, 1, 1, 1);
  v359 = (int)v358;
  v1085 = 0uLL;
  v360 = v358;
  v361 = lpsrc[80];
  if (v361)
    v360 = *(_DWORD *)(v361 + 8);
  if (!a2[384])
  {
    Espresso::blob<unsigned char,1>::make(&__str, 4 * v358);
    v943 = *(int **)(__str.__r_.__value_.__r.__words[0] + 16);
    if ((int)v358 >= 1)
    {
      for (mm = 0; mm != v358; ++mm)
      {
        v945 = *(float *)(*((_QWORD *)v357 + 2) + mm * 4);
        *(float *)&v946 = ldexp(1.0, -v1094) * v945;
        v943[mm] = v946;
      }
    }
    if ((_DWORD)v358)
    {
      v947 = *(_WORD **)(v1086 + 16);
      do
      {
        v948 = *v943++;
        _S0 = v948;
        __asm { FCVT            H0, S0 }
        *v947++ = _S0;
        --v359;
      }
      while (v359);
    }
    v1084 = 0uLL;
    if (lpsrc[80])
    {
      Espresso::blob<unsigned char,1>::make(buf, 4 * v360);
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)&v1084, (__int128 *)buf);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)buf);
      Espresso::blob<unsigned char,1>::make(buf, 2 * v360);
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)&v1085, (__int128 *)buf);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)buf);
      v951 = *(int **)(v1084 + 16);
      if (v360 >= 1)
      {
        for (nn = 0; nn != v360; ++nn)
        {
          if ((int)v358 - 1 >= (int)nn)
            v953 = nn;
          else
            v953 = v358 - 1;
          *(float *)&v954 = *(float *)(*(_QWORD *)(v1092 + 16) + 4 * nn)
                          * *(float *)(*((_QWORD *)v1091[0] + 2) + 4 * v953);
          v951[nn] = v954;
          v955 = v1095;
          v956 = v1094;
          *(float *)&v957 = ldexp(1.0, v1095 - v1094) * *(float *)&v954;
          v951[nn] = v957;
          v960 = ldexp(1.0, v956 - v955) * *(float *)&v957;
          if (v960 < -127.0 || v960 > 255.0)
          {
            Espresso::espresso_os_log_subsystem(v958, v959);
            v962 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v962, OS_LOG_TYPE_ERROR))
            {
              v963 = *(float *)&v951[nn];
              *(_DWORD *)buf = 134218752;
              *(double *)&buf[4] = v960;
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v1095;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v1094;
              LOWORD(v1112) = 2048;
              *(double *)((char *)&v1112 + 2) = v963;
              _os_log_error_impl(&dword_190DAF000, v962, OS_LOG_TYPE_ERROR, "[ANEC::add_ane_scale_bias_unit] Shifted bias overflowing shifted_b=%f acc_bias_shift=%d post_right_shift=%d anebias=%f", buf, 0x22u);
            }

          }
        }
      }
      if (v360)
      {
        v965 = v360;
        v966 = *(_WORD **)(v1085 + 16);
        do
        {
          v967 = *v951++;
          _S0 = v967;
          __asm { FCVT            H0, S0 }
          *v966++ = _S0;
          --v965;
        }
        while (v965);
      }
    }
    v950 = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
    Espresso::not_implemented_error::not_implemented_error(v950);
  }
  v362 = v1095;
  if ((_DWORD)v358)
  {
    v363 = (int *)*((_QWORD *)v1091[0] + 2);
    v364 = *(_WORD **)(v1086 + 16);
    do
    {
      v365 = *v363++;
      _S0 = v365;
      __asm { FCVT            H0, S0 }
      *v364++ = _S0;
      --v359;
    }
    while (v359);
  }
  if (v361)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(buf, 2 * v360, 1, 1, 1);
    v370 = *(_OWORD *)buf;
    *(_QWORD *)&buf[8] = 0;
    *(_QWORD *)buf = 0;
    v371 = (std::__shared_weak_count *)*((_QWORD *)&v1085 + 1);
    v1085 = v370;
    if (v371)
    {
      v372 = (unint64_t *)&v371->__shared_owners_;
      do
        v373 = __ldaxr(v372);
      while (__stlxr(v373 - 1, v372));
      if (!v373)
      {
        ((void (*)(std::__shared_weak_count *))v371->__on_zero_shared)(v371);
        std::__shared_weak_count::__release_weak(v371);
      }
    }
    v374 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v375 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v376 = __ldaxr(v375);
      while (__stlxr(v376 - 1, v375));
      if (!v376)
      {
        ((void (*)(std::__shared_weak_count *))v374->__on_zero_shared)(v374);
        std::__shared_weak_count::__release_weak(v374);
      }
    }
    if (v360)
    {
      v377 = v360;
      v378 = *(int **)(v1092 + 16);
      v379 = *(_WORD **)(v1085 + 16);
      do
      {
        v380 = *v378++;
        _S0 = v380;
        __asm { FCVT            H0, S0 }
        *v379++ = _S0;
        --v377;
      }
      while (v377);
    }
  }
  v382 = a2[552];
  v383 = (Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128);
  v384 = v1086;
  v1084 = v1086;
  if (*((_QWORD *)&v1086 + 1))
  {
    v385 = (unint64_t *)(*((_QWORD *)&v1086 + 1) + 8);
    do
      v386 = __ldxr(v385);
    while (__stxr(v386 + 1, v385));
  }
  v387 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v383, *(const unsigned __int8 **)(v384 + 16), *(int *)(v384 + 8));
  if (*((_QWORD *)&v384 + 1))
  {
    v388 = (unint64_t *)(*((_QWORD *)&v384 + 1) + 8);
    do
      v389 = __ldaxr(v388);
    while (__stlxr(v389 - 1, v388));
    if (!v389)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v384 + 1) + 16))(*((_QWORD *)&v384 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v384 + 1));
    }
  }
  v390 = (void *)objc_opt_new();
  if (a2[121])
  {
    v391 = *(id *)(v1048 + 128);

    v390 = v391;
  }
  v392 = (void *)objc_opt_new();
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v358);
  v393 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v392, "setObject:forKeyedSubscript:", v393, CFSTR("ScaleCount"));

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v387);
  v394 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v392, "setObject:forKeyedSubscript:", v394, CFSTR("ScaleOffset"));

  v395 = (void *)MEMORY[0x1E0CB37E8];
  if (v382)
    v396 = 0;
  else
  objc_msgSend(v395, "numberWithUnsignedLong:", v396);
  v397 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v392, "setObject:forKeyedSubscript:", v397, CFSTR("ScaleIndex"));

  objc_msgSend(v392, "setObject:forKeyedSubscript:", CFSTR("Float16"), CFSTR("ScaleType"));
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v1094);
  v398 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v390, "setObject:forKeyedSubscript:", v398, CFSTR("ScaleShift"));

  if (lpsrc[80])
  {
    v399 = v1085;
    v1083 = v1085;
    if (*((_QWORD *)&v1085 + 1))
    {
      v400 = (unint64_t *)(*((_QWORD *)&v1085 + 1) + 8);
      do
        v401 = __ldxr(v400);
      while (__stxr(v401 + 1, v400));
    }
    v402 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v383, *(const unsigned __int8 **)(v399 + 16), *(int *)(v399 + 8));
    if (*((_QWORD *)&v399 + 1))
    {
      v403 = (unint64_t *)(*((_QWORD *)&v399 + 1) + 8);
      do
        v404 = __ldaxr(v403);
      while (__stlxr(v404 - 1, v403));
      if (!v404)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v399 + 1) + 16))(*((_QWORD *)&v399 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v399 + 1));
      }
    }
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *(unsigned int *)(lpsrc[80] + 8));
    v405 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v392, "setObject:forKeyedSubscript:", v405, CFSTR("BiasCount"));

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v402);
    v406 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v392, "setObject:forKeyedSubscript:", v406, CFSTR("BiasOffset"));

    v407 = (void *)MEMORY[0x1E0CB37E8];
    if (v382)
      v408 = 0;
    else
    objc_msgSend(v407, "numberWithUnsignedLong:", v408);
    v409 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v392, "setObject:forKeyedSubscript:", v409, CFSTR("BiasIndex"));

    objc_msgSend(v392, "setObject:forKeyedSubscript:", CFSTR("Float16"), CFSTR("BiasType"));
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v362);
    v410 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v390, "setObject:forKeyedSubscript:", v410, CFSTR("BiasShift"));

  }
  objc_msgSend(v390, "setObject:forKeyedSubscript:", v392, CFSTR("BiasScaleGroupData"));
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)buf, a5);
  v411 = v1049;
  if (v1049 != (std::string *)v1048)
  {
    v412 = v1049 - 6;
    v413 = HIBYTE(v1049[-6].__r_.__value_.__r.__words[2]);
    v414 = v413;
    v415 = v1049[-6].__r_.__value_.__l.__size_;
    if ((v413 & 0x80u) == 0)
      v416 = HIBYTE(v1049[-6].__r_.__value_.__r.__words[2]);
    else
      v416 = v1049[-6].__r_.__value_.__l.__size_;
    v417 = buf[23];
    if (buf[23] < 0)
      v417 = *(_QWORD *)&buf[8];
    if (v416 == v417)
    {
      if (buf[23] >= 0)
        v418 = buf;
      else
        v418 = *(unsigned __int8 **)buf;
      if ((char)v413 < 0)
      {
        data = (const std::string::value_type *)v412->__r_.__value_.__r.__words[0];
        if (memcmp(v412->__r_.__value_.__l.__data_, v418, v1049[-6].__r_.__value_.__l.__size_))
          goto LABEL_584;
      }
      else if ((_BYTE)v413)
      {
        v419 = v1049 - 6;
        while (v419->__r_.__value_.__s.__data_[0] == *v418)
        {
          v419 = (std::string *)((char *)v419 + 1);
          ++v418;
          if (!--v413)
            goto LABEL_580;
        }
        goto LABEL_581;
      }
LABEL_580:
      std::string::append(v411 - 6, "__@pre_scale_bias");
      v414 = HIBYTE(v411[-6].__r_.__value_.__r.__words[2]);
    }
LABEL_581:
    if ((v414 & 0x80) == 0)
    {
      v421 = *(_OWORD *)&v412->__r_.__value_.__l.__data_;
      __str.__r_.__value_.__r.__words[2] = v411[-6].__r_.__value_.__r.__words[2];
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v421;
      goto LABEL_585;
    }
    data = v411[-6].__r_.__value_.__l.__data_;
    v415 = v411[-6].__r_.__value_.__l.__size_;
LABEL_584:
    std::string::__init_copy_ctor_external(&__str, data, v415);
LABEL_585:
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v1113, &__str, &v1120, 1uLL);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }
  v422 = v1117;
  v1117 = CFSTR("GOC");

  objc_storeStrong(&v1118, v390);
  if (!a2[121])
  {
    v423 = v1049;
    if ((unint64_t)v1049 >= v1050)
    {
      v425 = 0x8E38E38E38E38E39 * (((uint64_t)v1049 - v1048) >> 4);
      if (v425 + 1 > 0x1C71C71C71C71C7)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v426 = 0x1C71C71C71C71C72 * ((uint64_t)(v1050 - v1048) >> 4);
      if (v426 <= v425 + 1)
        v426 = v425 + 1;
      if (0x8E38E38E38E38E39 * ((uint64_t)(v1050 - v1048) >> 4) >= 0xE38E38E38E38E3)
        v427 = 0x1C71C71C71C71C7;
      else
        v427 = v426;
      *((_QWORD *)&v1120 + 1) = &v1050;
      if (v427)
        v427 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v427);
      else
        v428 = 0;
      __str.__r_.__value_.__r.__words[0] = v427;
      __str.__r_.__value_.__l.__size_ = v427 + 144 * v425;
      __str.__r_.__value_.__r.__words[2] = __str.__r_.__value_.__l.__size_;
      *(_QWORD *)&v1120 = v427 + 144 * v428;
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)__str.__r_.__value_.__l.__size_, (uint64_t)buf);
      __str.__r_.__value_.__r.__words[2] += 144;
      std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v1048, &__str);
      v424 = v1049;
      std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&__str);
    }
    else
    {
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v1049, (uint64_t)buf);
      v424 = v423 + 6;
    }
    v1049 = v424;
  }

  if (v1115 < 0)
    operator delete(v1114);
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1113;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1112;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);

  v446 = (std::__shared_weak_count *)*((_QWORD *)&v1085 + 1);
  if (*((_QWORD *)&v1085 + 1))
  {
    v447 = (unint64_t *)(*((_QWORD *)&v1085 + 1) + 8);
    do
      v448 = __ldaxr(v447);
    while (__stlxr(v448 - 1, v447));
    if (!v448)
    {
      ((void (*)(std::__shared_weak_count *))v446->__on_zero_shared)(v446);
      std::__shared_weak_count::__release_weak(v446);
    }
  }
  v449 = (std::__shared_weak_count *)*((_QWORD *)&v1086 + 1);
  if (*((_QWORD *)&v1086 + 1))
  {
    v450 = (unint64_t *)(*((_QWORD *)&v1086 + 1) + 8);
    do
      v451 = __ldaxr(v450);
    while (__stlxr(v451 - 1, v450));
    if (!v451)
    {
      ((void (*)(std::__shared_weak_count *))v449->__on_zero_shared)(v449);
      std::__shared_weak_count::__release_weak(v449);
    }
  }
  v452 = v1093;
  if (v1093)
  {
    v453 = (unint64_t *)&v1093->__shared_owners_;
    do
      v454 = __ldaxr(v453);
    while (__stlxr(v454 - 1, v453));
    if (!v454)
    {
      ((void (*)(std::__shared_weak_count *))v452->__on_zero_shared)(v452);
      std::__shared_weak_count::__release_weak(v452);
    }
  }
  v455 = (std::__shared_weak_count *)v1091[1];
  if (v1091[1])
  {
    v456 = (unint64_t *)((char *)v1091[1] + 8);
    do
      v457 = __ldaxr(v456);
    while (__stlxr(v457 - 1, v456));
    if (!v457)
    {
      ((void (*)(std::__shared_weak_count *))v455->__on_zero_shared)(v455);
      std::__shared_weak_count::__release_weak(v455);
    }
  }
  v345 = 1;
  v342 = v1097;
  if (v1097)
  {
LABEL_651:
    v458 = (unint64_t *)&v342->__shared_owners_;
    do
      v459 = __ldaxr(v458);
    while (__stlxr(v459 - 1, v458));
    if (!v459)
    {
      ((void (*)(std::__shared_weak_count *))v342->__on_zero_shared)(v342);
      std::__shared_weak_count::__release_weak(v342);
    }
  }
LABEL_655:

  if (v1105 < 0)
    operator delete(v1104);
  *(_QWORD *)buf = &v1101;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(_QWORD *)buf = v1099;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (SHIBYTE(v1098.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1098.__r_.__value_.__l.__data_);
  v460 = lpsrc;
  if (v1014)
  {
    v461 = &v1014->__shared_owners_;
    do
      v462 = __ldaxr((unint64_t *)v461);
    while (__stlxr(v462 - 1, (unint64_t *)v461));
    if (!v462)
    {
      ((void (*)(std::__shared_weak_count *))v1014->__on_zero_shared)(v1014);
      std::__shared_weak_count::__release_weak(v1014);
    }
  }
  if (!v1016)
    goto LABEL_668;
  v463 = &v1016->__shared_owners_;
  do
    v464 = __ldaxr((unint64_t *)v463);
  while (__stlxr(v464 - 1, (unint64_t *)v463));
  if (v464)
  {
LABEL_668:
    if ((v345 & 1) != 0)
      goto LABEL_669;
LABEL_672:
    v465 = (_QWORD *)lpsrc[59];
    if (v465 && *v465 && (v465[4] || v465[6] || v465[8] || v465[10]))
    {
      v466 = v465[10];
      if (v466)
      {
        v467 = *(int *)(v466 + 8);
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = 0uLL;
        std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v1098, 2 * v467, 1, 1, 1);
        v468 = *(_OWORD *)&v1098.__r_.__value_.__l.__data_;
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *(_OWORD *)&v1098.__r_.__value_.__l.__data_;
        v469 = *(const unsigned __int8 **)(v1098.__r_.__value_.__r.__words[0] + 16);
        if ((_DWORD)v467)
        {
          v470 = *(int **)(*(_QWORD *)(lpsrc[59] + 80) + 16);
          v471 = *(_WORD **)(v1098.__r_.__value_.__r.__words[0] + 16);
          v472 = v467;
          do
          {
            v473 = *v470++;
            _S0 = v473;
            __asm { FCVT            H0, S0 }
            *v471++ = _S0;
            --v472;
          }
          while (v472);
        }
        v475 = (Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128);
        v1012 = v468;
        if (*((_QWORD *)&v468 + 1))
        {
          v476 = (unint64_t *)(*((_QWORD *)&v468 + 1) + 8);
          do
            v477 = __ldxr(v476);
          while (__stxr(v477 + 1, v476));
          v469 = *(const unsigned __int8 **)(v468 + 16);
        }
        v478 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v475, v469, *(int *)(v468 + 8));
        if (*((_QWORD *)&v468 + 1))
        {
          v479 = (unint64_t *)(*((_QWORD *)&v468 + 1) + 8);
          do
            v480 = __ldaxr(v479);
          while (__stlxr(v480 - 1, v479));
          if (!v480)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v468 + 1) + 16))(*((_QWORD *)&v468 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v468 + 1));
          }
        }
        v481 = (void *)objc_opt_new();
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", v467);
        v482 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v481, "setObject:forKeyedSubscript:", v482, CFSTR("ScaleCount"));

        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v478);
        v483 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v481, "setObject:forKeyedSubscript:", v483, CFSTR("ScaleOffset"));

        v484 = (void *)MEMORY[0x1E0CB37E8];
        if (v978)
          v485 = 0;
        else
        objc_msgSend(v484, "numberWithUnsignedLong:", v485);
        v530 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v481, "setObject:forKeyedSubscript:", v530, CFSTR("ScaleIndex"));

        objc_msgSend(v481, "setObject:forKeyedSubscript:", CFSTR("Float16"), CFSTR("ScaleType"));
        if (*(_DWORD *)((*(uint64_t (**)(_QWORD *))(*lpsrc + 384))(lpsrc) + 32))
        {
          (*(void (**)(void **__return_ptr, _QWORD *))(*lpsrc + 448))(v1091, lpsrc);
          if (!v1091[0])
          {
            v531 = (std::__shared_weak_count *)a3[1];
            v1010 = *a3;
            v1011 = v531;
            if (v531)
            {
              v532 = (unint64_t *)&v531->__shared_owners_;
              do
                v533 = __ldxr(v532);
              while (__stxr(v533 + 1, v532));
            }
            std::string::basic_string[abi:ne180100]<0>(buf, "blob_biases");
            (*(void (**)(std::string *__return_ptr, _QWORD *, const Espresso::net **, _QWORD *, _BYTE *))(lpsrc[70] + 120))(&v1098, lpsrc + 70, &v1010, lpsrc, buf);
            if ((buf[23] & 0x80000000) != 0)
              operator delete(*(void **)buf);
            v534 = v1011;
            if (v1011)
            {
              v535 = (unint64_t *)&v1011->__shared_owners_;
              do
                v536 = __ldaxr(v535);
              while (__stlxr(v536 - 1, v535));
              if (!v536)
              {
                ((void (*)(std::__shared_weak_count *))v534->__on_zero_shared)(v534);
                std::__shared_weak_count::__release_weak(v534);
              }
            }
            v537 = v1098.__r_.__value_.__r.__words[2];
            v538 = (char *)operator new(0x58uLL);
            *((_QWORD *)v538 + 1) = 0;
            *((_QWORD *)v538 + 2) = 0;
            *(_QWORD *)v538 = &off_1E2DBEC00;
            *((_QWORD *)v538 + 3) = &off_1E2DA1190;
            v539 = v1098.__r_.__value_.__r.__words[0];
            *(_OWORD *)(v538 + 56) = 0u;
            *(_OWORD *)(v538 + 72) = 0u;
            *((_DWORD *)v538 + 8) = v537 >> 2;
            *((_QWORD *)v538 + 5) = v539;
            v538[48] = 0;
            *(_QWORD *)&v540 = v538 + 24;
            *((_QWORD *)&v540 + 1) = v538;
            v541 = (std::__shared_weak_count *)v1091[1];
            *(_OWORD *)v1091 = v540;
            if (v541)
            {
              v542 = (unint64_t *)&v541->__shared_owners_;
              do
                v543 = __ldaxr(v542);
              while (__stlxr(v543 - 1, v542));
              if (!v543)
              {
                ((void (*)(std::__shared_weak_count *))v541->__on_zero_shared)(v541);
                std::__shared_weak_count::__release_weak(v541);
              }
            }
            if (!v1091[0])
              Espresso::throw_exception_selector<Espresso::invalid_state_error>("Missing biases");
          }
          std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v1098, 4 * v467, 1, 1, 1);
          v544 = v1098.__r_.__value_.__r.__words[0];
          if ((_DWORD)v467)
          {
            v545 = *(float **)(v1098.__r_.__value_.__r.__words[0] + 16);
            v546 = (float *)*((_QWORD *)v1091[0] + 2);
            v547 = *(float **)(*(_QWORD *)(lpsrc[59] + 80) + 16);
            v548 = v467;
            do
            {
              v549 = *v546++;
              v550 = v549;
              v551 = *v547++;
              *v545++ = v550 / v551;
              --v548;
            }
            while (v548);
          }
          std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(buf, 2 * v467, 1, 1, 1);
          v552 = *(_QWORD *)buf;
          v553 = *(const unsigned __int8 **)(*(_QWORD *)buf + 16);
          if ((_DWORD)v467)
          {
            v554 = *(int **)(v544 + 16);
            v555 = *(_WORD **)(*(_QWORD *)buf + 16);
            v556 = v467;
            do
            {
              v557 = *v554++;
              _S0 = v557;
              __asm { FCVT            H0, S0 }
              *v555++ = _S0;
              --v556;
            }
            while (v556);
          }
          v559 = *(std::__shared_weak_count **)&buf[8];
          v1008 = v552;
          v1009 = *(_QWORD *)&buf[8];
          if (*(_QWORD *)&buf[8])
          {
            v560 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
            do
              v561 = __ldxr(v560);
            while (__stxr(v561 + 1, v560));
            v553 = *(const unsigned __int8 **)(v552 + 16);
          }
          v562 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v475, v553, *(int *)(v552 + 8));
          if (v559)
          {
            v563 = (unint64_t *)&v559->__shared_owners_;
            do
              v564 = __ldaxr(v563);
            while (__stlxr(v564 - 1, v563));
            if (!v564)
            {
              ((void (*)(std::__shared_weak_count *))v559->__on_zero_shared)(v559);
              std::__shared_weak_count::__release_weak(v559);
            }
          }
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", v467);
          v565 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v481, "setObject:forKeyedSubscript:", v565, CFSTR("BiasCount"));

          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v562);
          v566 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v481, "setObject:forKeyedSubscript:", v566, CFSTR("BiasOffset"));

          v567 = (void *)MEMORY[0x1E0CB37E8];
          if (v978)
            v568 = 0;
          else
          objc_msgSend(v567, "numberWithUnsignedLong:", v568);
          v581 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v481, "setObject:forKeyedSubscript:", v581, CFSTR("BiasIndex"));

          objc_msgSend(v481, "setObject:forKeyedSubscript:", CFSTR("Float16"), CFSTR("BiasType"));
          v582 = *(std::__shared_weak_count **)&buf[8];
          if (*(_QWORD *)&buf[8])
          {
            v583 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
            do
              v584 = __ldaxr(v583);
            while (__stlxr(v584 - 1, v583));
            if (!v584)
            {
              ((void (*)(std::__shared_weak_count *))v582->__on_zero_shared)(v582);
              std::__shared_weak_count::__release_weak(v582);
            }
          }
          v585 = (std::__shared_weak_count *)v1098.__r_.__value_.__l.__size_;
          if (v1098.__r_.__value_.__l.__size_)
          {
            v586 = (unint64_t *)(v1098.__r_.__value_.__l.__size_ + 8);
            do
              v587 = __ldaxr(v586);
            while (__stlxr(v587 - 1, v586));
            if (!v587)
            {
              ((void (*)(std::__shared_weak_count *))v585->__on_zero_shared)(v585);
              std::__shared_weak_count::__release_weak(v585);
            }
          }
          v588 = (std::__shared_weak_count *)v1091[1];
          if (v1091[1])
          {
            v589 = (unint64_t *)((char *)v1091[1] + 8);
            do
              v590 = __ldaxr(v589);
            while (__stlxr(v590 - 1, v589));
            if (!v590)
            {
              ((void (*)(std::__shared_weak_count *))v588->__on_zero_shared)(v588);
              std::__shared_weak_count::__release_weak(v588);
            }
          }
        }
        v591 = (void *)objc_opt_new();
        objc_msgSend(v591, "setObject:forKeyedSubscript:", v481, CFSTR("BiasScaleGroupData"));
        Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v1098.__r_.__value_.__l.__data_, a5);
        v592 = v1107;
        v1107 = CFSTR("GOC");

        objc_storeStrong(&v1108, v591);
        v593 = v1049;
        if ((unint64_t)v1049 >= v1050)
        {
          v595 = 0x8E38E38E38E38E39 * (((uint64_t)v1049 - v1048) >> 4);
          if (v595 + 1 > 0x1C71C71C71C71C7)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v596 = 0x1C71C71C71C71C72 * ((uint64_t)(v1050 - v1048) >> 4);
          if (v596 <= v595 + 1)
            v596 = v595 + 1;
          if (0x8E38E38E38E38E39 * ((uint64_t)(v1050 - v1048) >> 4) >= 0xE38E38E38E38E3)
            v597 = 0x1C71C71C71C71C7;
          else
            v597 = v596;
          *((_QWORD *)&v1112 + 1) = &v1050;
          if (v597)
            v597 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v597);
          else
            v598 = 0;
          *(_QWORD *)buf = v597;
          *(_QWORD *)&buf[8] = v597 + 144 * v595;
          *(_QWORD *)&buf[16] = *(_QWORD *)&buf[8];
          *(_QWORD *)&v1112 = v597 + 144 * v598;
          std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(*(std::string **)&buf[8], (uint64_t)&v1098);
          *(_QWORD *)&buf[16] += 144;
          std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v1048, buf);
          v594 = v1049;
          std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)buf);
        }
        else
        {
          std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v1049, (uint64_t)&v1098);
          v594 = v593 + 6;
        }
        v1049 = v594;

        if (v1105 < 0)
          operator delete(v1104);
        *(_QWORD *)buf = &v1101;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
        *(_QWORD *)buf = v1099;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
        if (SHIBYTE(v1098.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v1098.__r_.__value_.__l.__data_);

        v599 = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
        if (__str.__r_.__value_.__l.__size_)
        {
          v600 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
          do
            v601 = __ldaxr(v600);
          while (__stlxr(v601 - 1, v600));
          if (!v601)
          {
            ((void (*)(std::__shared_weak_count *))v599->__on_zero_shared)(v599);
            std::__shared_weak_count::__release_weak(v599);
          }
        }
LABEL_952:
        v460 = lpsrc;
        goto LABEL_953;
      }
    }
    if (*(_DWORD *)(a4 + 112))
    {
      if (a2[121])
        goto LABEL_1390;
      (*(void (**)(uint64_t *__return_ptr, _QWORD *))(*lpsrc + 448))(&v1006, lpsrc);
      Espresso::ANECompilerEngine::batchnorm_kernel::batchnorm_to_scale_bias(&__str, (uint64_t)&v1006, *(_DWORD *)(*a7 + 16), a2[384], 0, 0.0);
      v486 = v1007;
      if (v1007)
      {
        v487 = (unint64_t *)&v1007->__shared_owners_;
        do
          v488 = __ldaxr(v487);
        while (__stlxr(v488 - 1, v487));
        if (!v488)
        {
          ((void (*)(std::__shared_weak_count *))v486->__on_zero_shared)(v486);
          std::__shared_weak_count::__release_weak(v486);
        }
      }
      v489 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
      *(_OWORD *)v1091 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
      if (__str.__r_.__value_.__l.__size_)
      {
        v490 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
        do
          v491 = __ldxr(v490);
        while (__stxr(v491 + 1, v490));
      }
      v1096 = (char *)__str.__r_.__value_.__r.__words[2];
      v1097 = (std::__shared_weak_count *)v1120;
      if ((_QWORD)v1120)
      {
        v492 = (unint64_t *)(v1120 + 8);
        do
          v493 = __ldxr(v492);
        while (__stxr(v493 + 1, v492));
      }
      v494 = (Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128);
      v1005 = v489;
      if (*((_QWORD *)&v489 + 1))
      {
        v495 = (unint64_t *)(*((_QWORD *)&v489 + 1) + 8);
        do
          v496 = __ldxr(v495);
        while (__stxr(v496 + 1, v495));
      }
      v497 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v494, *(const unsigned __int8 **)(v489 + 16), *(int *)(v489 + 8));
      if (*((_QWORD *)&v489 + 1))
      {
        v498 = (unint64_t *)(*((_QWORD *)&v489 + 1) + 8);
        do
          v499 = __ldaxr(v498);
        while (__stlxr(v499 - 1, v498));
        if (!v499)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v489 + 1) + 16))(*((_QWORD *)&v489 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v489 + 1));
        }
      }
      v500 = (const unsigned __int8 **)v1096;
      v501 = v1097;
      v1003 = v1096;
      v1004 = v1097;
      if (v1097)
      {
        v502 = (unint64_t *)&v1097->__shared_owners_;
        do
          v503 = __ldxr(v502);
        while (__stxr(v503 + 1, v502));
      }
      v504 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v494, v500[2], *((int *)v500 + 2));
      if (v501)
      {
        v505 = (unint64_t *)&v501->__shared_owners_;
        do
          v506 = __ldaxr(v505);
        while (__stlxr(v506 - 1, v505));
        if (!v506)
        {
          ((void (*)(std::__shared_weak_count *))v501->__on_zero_shared)(v501);
          std::__shared_weak_count::__release_weak(v501);
        }
      }
      v507 = (void *)objc_opt_new();
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *(unsigned int *)(*a7 + 16));
      v508 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v507, "setObject:forKeyedSubscript:", v508, CFSTR("BiasCount"));

      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v504);
      v509 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v507, "setObject:forKeyedSubscript:", v509, CFSTR("BiasOffset"));

      v510 = (void *)MEMORY[0x1E0CB37E8];
      if (v978)
        v511 = 0;
      else
      objc_msgSend(v510, "numberWithUnsignedLong:", v511);
      v516 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v507, "setObject:forKeyedSubscript:", v516, CFSTR("BiasIndex"));

      objc_msgSend(v507, "setObject:forKeyedSubscript:", CFSTR("Float32"), CFSTR("BiasType"));
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *(unsigned int *)(*a7 + 16));
      v517 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v507, "setObject:forKeyedSubscript:", v517, CFSTR("ScaleCount"));

      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v497);
      v518 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v507, "setObject:forKeyedSubscript:", v518, CFSTR("ScaleOffset"));

      v519 = (void *)MEMORY[0x1E0CB37E8];
      if (v978)
        v520 = 0;
      else
      objc_msgSend(v519, "numberWithUnsignedLong:", v520);
      v521 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v507, "setObject:forKeyedSubscript:", v521, CFSTR("ScaleIndex"));

      objc_msgSend(v507, "setObject:forKeyedSubscript:", CFSTR("Float32"), CFSTR("ScaleType"));
      v522 = (void *)objc_opt_new();
      objc_msgSend(v522, "setObject:forKeyedSubscript:", v507, CFSTR("BiasScaleGroupData"));
      Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v1098.__r_.__value_.__l.__data_, a5);
      v523 = v1107;
      v1107 = CFSTR("GOC");

      objc_storeStrong(&v1108, v522);
      v524 = v1049;
      if ((unint64_t)v1049 >= v1050)
      {
        v526 = 0x8E38E38E38E38E39 * (((uint64_t)v1049 - v1048) >> 4);
        if (v526 + 1 > 0x1C71C71C71C71C7)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v527 = 0x1C71C71C71C71C72 * ((uint64_t)(v1050 - v1048) >> 4);
        if (v527 <= v526 + 1)
          v527 = v526 + 1;
        if (0x8E38E38E38E38E39 * ((uint64_t)(v1050 - v1048) >> 4) >= 0xE38E38E38E38E3)
          v528 = 0x1C71C71C71C71C7;
        else
          v528 = v527;
        *((_QWORD *)&v1112 + 1) = &v1050;
        if (v528)
          v528 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v528);
        else
          v529 = 0;
        *(_QWORD *)buf = v528;
        *(_QWORD *)&buf[8] = v528 + 144 * v526;
        *(_QWORD *)&buf[16] = *(_QWORD *)&buf[8];
        *(_QWORD *)&v1112 = v528 + 144 * v529;
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(*(std::string **)&buf[8], (uint64_t)&v1098);
        *(_QWORD *)&buf[16] += 144;
        std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v1048, buf);
        v525 = v1049;
        std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)buf);
      }
      else
      {
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v1049, (uint64_t)&v1098);
        v525 = v524 + 6;
      }
      v1049 = v525;

      if (v1105 < 0)
        operator delete(v1104);
      *(_QWORD *)buf = &v1101;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      *(_QWORD *)buf = v1099;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      if (SHIBYTE(v1098.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1098.__r_.__value_.__l.__data_);

      v569 = v1097;
      if (v1097)
      {
        v570 = (unint64_t *)&v1097->__shared_owners_;
        do
          v571 = __ldaxr(v570);
        while (__stlxr(v571 - 1, v570));
        if (!v571)
        {
          ((void (*)(std::__shared_weak_count *))v569->__on_zero_shared)(v569);
          std::__shared_weak_count::__release_weak(v569);
        }
      }
      v572 = (std::__shared_weak_count *)v1091[1];
      if (v1091[1])
      {
        v573 = (unint64_t *)((char *)v1091[1] + 8);
        do
          v574 = __ldaxr(v573);
        while (__stlxr(v574 - 1, v573));
        if (!v574)
        {
          ((void (*)(std::__shared_weak_count *))v572->__on_zero_shared)(v572);
          std::__shared_weak_count::__release_weak(v572);
        }
      }
      v575 = (std::__shared_weak_count *)v1120;
      v460 = lpsrc;
      if ((_QWORD)v1120)
      {
        v576 = (unint64_t *)(v1120 + 8);
        do
          v577 = __ldaxr(v576);
        while (__stlxr(v577 - 1, v576));
        if (!v577)
        {
          ((void (*)(std::__shared_weak_count *))v575->__on_zero_shared)(v575);
          std::__shared_weak_count::__release_weak(v575);
        }
      }
      v578 = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
      if (__str.__r_.__value_.__l.__size_)
      {
        v579 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
        do
          v580 = __ldaxr(v579);
        while (__stlxr(v580 - 1, v579));
        if (!v580)
        {
          ((void (*)(std::__shared_weak_count *))v578->__on_zero_shared)(v578);
          std::__shared_weak_count::__release_weak(v578);
        }
      }
      goto LABEL_953;
    }
    if (!*(_DWORD *)(a4 + 32))
      goto LABEL_953;
    (*(void (**)(std::string *__return_ptr, _QWORD *))(*lpsrc + 448))(&v1098, lpsrc);
    v512 = *(_OWORD *)&v1098.__r_.__value_.__l.__data_;
    if (v1098.__r_.__value_.__l.__size_)
    {
      v513 = (unint64_t *)(v1098.__r_.__value_.__l.__size_ + 8);
      do
        v514 = __ldaxr(v513);
      while (__stlxr(v514 - 1, v513));
      if (!v514)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v512 + 1) + 16))(*((_QWORD *)&v512 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v512 + 1));
      }
    }
    if (!(_QWORD)v512)
      goto LABEL_953;
    if (a2[121])
    {
      v515 = *(id *)(v1048 + 128);
    }
    else
    {
      v515 = (id)objc_opt_new();

    }
    v602 = (void *)objc_opt_new();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *(unsigned int *)(*a7 + 16));
    v603 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v602, "setObject:forKeyedSubscript:", v603, CFSTR("BiasCount"));

    v604 = (std::__shared_weak_count *)a3[1];
    v1001 = *a3;
    v1002 = v604;
    if (v604)
    {
      v605 = (unint64_t *)&v604->__shared_owners_;
      do
        v606 = __ldxr(v605);
      while (__stxr(v606 + 1, v605));
    }
    std::string::basic_string[abi:ne180100]<0>(&v1098, "blob_biases_f16");
    v607 = lpsrc + 70;
    v608 = (*(uint64_t (**)(_QWORD *, const Espresso::net **, _QWORD *, std::string *))(lpsrc[70] + 88))(lpsrc + 70, &v1001, lpsrc, &v1098);
    if (SHIBYTE(v1098.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1098.__r_.__value_.__l.__data_);
    v609 = v1002;
    if (v1002)
    {
      v610 = (unint64_t *)&v1002->__shared_owners_;
      do
        v611 = __ldaxr(v610);
      while (__stlxr(v611 - 1, v610));
      if (!v611)
      {
        ((void (*)(std::__shared_weak_count *))v609->__on_zero_shared)(v609);
        std::__shared_weak_count::__release_weak(v609);
      }
    }
    if (v608 < 0)
    {
      v627 = (std::__shared_weak_count *)a3[1];
      v995 = *a3;
      v996 = v627;
      if (v627)
      {
        v628 = (unint64_t *)&v627->__shared_owners_;
        do
          v629 = __ldxr(v628);
        while (__stxr(v629 + 1, v628));
      }
      std::string::basic_string[abi:ne180100]<0>(&v1098, "blob_biases");
      v615 = (*(uint64_t (**)(_QWORD *, const Espresso::net **, _QWORD *, std::string *))(lpsrc[70] + 88))(v607, &v995, lpsrc, &v1098);
      if (SHIBYTE(v1098.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1098.__r_.__value_.__l.__data_);
      v630 = v996;
      if (v996)
      {
        v631 = (unint64_t *)&v996->__shared_owners_;
        do
          v632 = __ldaxr(v631);
        while (__stlxr(v632 - 1, v631));
        if (!v632)
        {
          ((void (*)(std::__shared_weak_count *))v630->__on_zero_shared)(v630);
          std::__shared_weak_count::__release_weak(v630);
        }
      }
      v633 = (std::__shared_weak_count *)a3[1];
      v993 = *a3;
      v994 = v633;
      if (v633)
      {
        v634 = (unint64_t *)&v633->__shared_owners_;
        do
          v635 = __ldxr(v634);
        while (__stxr(v635 + 1, v634));
      }
      std::string::basic_string[abi:ne180100]<0>(buf, "blob_biases");
      (*(void (**)(std::string *__return_ptr, _QWORD *, const Espresso::net **, _QWORD *, _BYTE *))(lpsrc[70] + 120))(&v1098, v607, &v993, lpsrc, buf);
      v622 = (Espresso::ANECompilerEngine::compiler *)v1098.__r_.__value_.__r.__words[0];
      v623 = v1098.__r_.__value_.__r.__words[2];
      if ((buf[23] & 0x80000000) != 0)
        operator delete(*(void **)buf);
      v624 = v994;
      if (!v994)
        goto LABEL_897;
      v636 = (unint64_t *)&v994->__shared_owners_;
      do
        v626 = __ldaxr(v636);
      while (__stlxr(v626 - 1, v636));
    }
    else
    {
      v612 = (std::__shared_weak_count *)a3[1];
      v999 = *a3;
      v1000 = v612;
      if (v612)
      {
        v613 = (unint64_t *)&v612->__shared_owners_;
        do
          v614 = __ldxr(v613);
        while (__stxr(v614 + 1, v613));
      }
      std::string::basic_string[abi:ne180100]<0>(&v1098, "blob_biases_f16");
      v615 = (*(uint64_t (**)(_QWORD *, const Espresso::net **, _QWORD *, std::string *))(lpsrc[70] + 88))(v607, &v999, lpsrc, &v1098);
      if (SHIBYTE(v1098.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1098.__r_.__value_.__l.__data_);
      v616 = v1000;
      if (v1000)
      {
        v617 = (unint64_t *)&v1000->__shared_owners_;
        do
          v618 = __ldaxr(v617);
        while (__stlxr(v618 - 1, v617));
        if (!v618)
        {
          ((void (*)(std::__shared_weak_count *))v616->__on_zero_shared)(v616);
          std::__shared_weak_count::__release_weak(v616);
        }
      }
      v619 = (std::__shared_weak_count *)a3[1];
      v997 = *a3;
      v998 = v619;
      if (v619)
      {
        v620 = (unint64_t *)&v619->__shared_owners_;
        do
          v621 = __ldxr(v620);
        while (__stxr(v621 + 1, v620));
      }
      std::string::basic_string[abi:ne180100]<0>(buf, "blob_biases_f16");
      (*(void (**)(std::string *__return_ptr, _QWORD *, const Espresso::net **, _QWORD *, _BYTE *))(lpsrc[70] + 120))(&v1098, v607, &v997, lpsrc, buf);
      v622 = (Espresso::ANECompilerEngine::compiler *)v1098.__r_.__value_.__r.__words[0];
      v623 = v1098.__r_.__value_.__r.__words[2];
      if ((buf[23] & 0x80000000) != 0)
        operator delete(*(void **)buf);
      v624 = v998;
      if (!v998)
        goto LABEL_897;
      v625 = (unint64_t *)&v998->__shared_owners_;
      do
        v626 = __ldaxr(v625);
      while (__stlxr(v626 - 1, v625));
    }
    if (!v626)
    {
      ((void (*)(std::__shared_weak_count *))v624->__on_zero_shared)(v624);
      std::__shared_weak_count::__release_weak(v624);
    }
LABEL_897:
    (*(void (**)(_BYTE *__return_ptr, _QWORD *))(*lpsrc + 448))(buf, lpsrc);
    if (!*(_QWORD *)buf)
    {
      v637 = (char *)operator new(0x58uLL);
      *((_QWORD *)v637 + 1) = 0;
      *((_QWORD *)v637 + 2) = 0;
      *(_QWORD *)v637 = &off_1E2DBEC00;
      *((_QWORD *)v637 + 3) = &off_1E2DA1190;
      *(_OWORD *)(v637 + 56) = 0u;
      *(_OWORD *)(v637 + 72) = 0u;
      *((_DWORD *)v637 + 8) = v623 >> 2;
      *((_QWORD *)v637 + 5) = v622;
      v637[48] = 0;
      v638 = *(std::__shared_weak_count **)&buf[8];
      *(_QWORD *)buf = v637 + 24;
      *(_QWORD *)&buf[8] = v637;
      if (v638)
      {
        v639 = (unint64_t *)&v638->__shared_owners_;
        do
          v640 = __ldaxr(v639);
        while (__stlxr(v640 - 1, v639));
        if (!v640)
        {
          ((void (*)(std::__shared_weak_count *))v638->__on_zero_shared)(v638);
          std::__shared_weak_count::__release_weak(v638);
        }
        if (!*(_QWORD *)buf)
          Espresso::throw_exception_selector<Espresso::invalid_state_error>("Missing biases");
      }
    }
    v641 = (std::__shared_weak_count *)a3[1];
    v991 = *a3;
    v992 = v641;
    if (v641)
    {
      v642 = (unint64_t *)&v641->__shared_owners_;
      do
        v643 = __ldxr(v642);
      while (__stxr(v643 + 1, v642));
    }
    std::string::basic_string[abi:ne180100]<0>(&v1098, "blob_biases_f16");
    v644 = (*(uint64_t (**)(_QWORD *, const Espresso::net **, _QWORD *, std::string *))(lpsrc[70] + 88))(v607, &v991, lpsrc, &v1098);
    if (SHIBYTE(v1098.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1098.__r_.__value_.__l.__data_);
    v645 = v992;
    if (v992)
    {
      v646 = (unint64_t *)&v992->__shared_owners_;
      do
        v647 = __ldaxr(v646);
      while (__stlxr(v647 - 1, v646));
      if (!v647)
      {
        ((void (*)(std::__shared_weak_count *))v645->__on_zero_shared)(v645);
        std::__shared_weak_count::__release_weak(v645);
      }
    }
    if (v644 < 0)
    {
      v653 = *(int **)(*(_QWORD *)buf + 16);
      v654 = *(int *)(*(_QWORD *)buf + 8);
      std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v1098, 2 * v654, 1, 1, 1);
      v655 = v1098.__r_.__value_.__r.__words[0];
      v656 = *(const unsigned __int8 **)(v1098.__r_.__value_.__r.__words[0] + 16);
      if ((_DWORD)v654)
      {
        v657 = *(_WORD **)(v1098.__r_.__value_.__r.__words[0] + 16);
        do
        {
          v658 = *v653++;
          _S0 = v658;
          __asm { FCVT            H0, S0 }
          *v657++ = _S0;
          --v654;
        }
        while (v654);
      }
      v660 = (std::__shared_weak_count *)v1098.__r_.__value_.__l.__size_;
      if (v1098.__r_.__value_.__l.__size_)
      {
        v661 = (unint64_t *)(v1098.__r_.__value_.__l.__size_ + 8);
        do
          v662 = __ldxr(v661);
        while (__stxr(v662 + 1, v661));
        v656 = *(const unsigned __int8 **)(v655 + 16);
      }
      v615 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128), v656, *(int *)(v655 + 8));
      if (v660)
      {
        v663 = (unint64_t *)&v660->__shared_owners_;
        do
          v664 = __ldaxr(v663);
        while (__stlxr(v664 - 1, v663));
        if (!v664)
        {
          ((void (*)(std::__shared_weak_count *))v660->__on_zero_shared)(v660);
          std::__shared_weak_count::__release_weak(v660);
        }
      }
      v665 = (void *)MEMORY[0x1E0CB37E8];
      if (v978)
        v666 = 0;
      else
      objc_msgSend(v665, "numberWithUnsignedLong:", v666);
      v736 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v602, "setObject:forKeyedSubscript:", v736, CFSTR("BiasIndex"));

      v737 = (std::__shared_weak_count *)v1098.__r_.__value_.__l.__size_;
      if (v1098.__r_.__value_.__l.__size_)
      {
        v738 = (unint64_t *)(v1098.__r_.__value_.__l.__size_ + 8);
        do
          v739 = __ldaxr(v738);
        while (__stlxr(v739 - 1, v738));
        if (!v739)
        {
          ((void (*)(std::__shared_weak_count *))v737->__on_zero_shared)(v737);
          std::__shared_weak_count::__release_weak(v737);
        }
      }
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", Espresso::ANECompilerEngine::get_primary_weights_file_index((Espresso::ANECompilerEngine *)a2, v622, (const void *)v623));
      v648 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v602, "setObject:forKeyedSubscript:", v648, CFSTR("BiasIndex"));

    }
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v615);
    v649 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v602, "setObject:forKeyedSubscript:", v649, CFSTR("BiasOffset"));

    objc_msgSend(v602, "setObject:forKeyedSubscript:", CFSTR("Float16"), CFSTR("BiasType"));
    objc_msgSend(v515, "setObject:forKeyedSubscript:", v602, CFSTR("BiasScaleGroupData"));
    if (!a2[121])
    {
      Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v1098.__r_.__value_.__l.__data_, a5);
      v650 = v1107;
      v1107 = CFSTR("GOC");

      objc_storeStrong(&v1108, v515);
      v651 = v1049;
      if ((unint64_t)v1049 >= v1050)
      {
        v652 = (std::string *)std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__push_back_slow_path<Espresso::ANECompilerEngine::compiler::unit_t const&>(&v1048, (uint64_t)&v1098);
      }
      else
      {
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v1049, (uint64_t)&v1098);
        v652 = v651 + 6;
      }
      v1049 = v652;

      if (v1105 < 0)
        operator delete(v1104);
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1101;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v1099;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
      if (SHIBYTE(v1098.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1098.__r_.__value_.__l.__data_);
    }
    v667 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v668 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v669 = __ldaxr(v668);
      while (__stlxr(v669 - 1, v668));
      if (!v669)
      {
        ((void (*)(std::__shared_weak_count *))v667->__on_zero_shared)(v667);
        std::__shared_weak_count::__release_weak(v667);
      }
    }

    goto LABEL_952;
  }
  ((void (*)(std::__shared_weak_count *))v1016->__on_zero_shared)(v1016);
  std::__shared_weak_count::__release_weak(v1016);
  if ((v345 & 1) == 0)
    goto LABEL_672;
LABEL_669:
  if (*(_DWORD *)(a4 + 112))
LABEL_1390:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Inconsistent fused bn state");
LABEL_953:
  if (*(_DWORD *)(a4 + 24))
  {
    if (a2[121])
    {
      v670 = *(id *)(v1048 + 128);
    }
    else
    {
      v670 = (id)objc_opt_new();

    }
    objc_msgSend(v670, "setObject:forKeyedSubscript:", CFSTR("ReLU"), CFSTR("Type"));
    if (a2[121])
      goto LABEL_1025;
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v1098.__r_.__value_.__l.__data_, a5);
    v671 = v1107;
    v1107 = CFSTR("Neuron");

    objc_storeStrong(&v1108, v670);
    v672 = v1049;
    if ((unint64_t)v1049 >= v1050)
    {
      v674 = 0x8E38E38E38E38E39 * (((uint64_t)v1049 - v1048) >> 4);
      if (v674 + 1 > 0x1C71C71C71C71C7)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v675 = 0x1C71C71C71C71C72 * ((uint64_t)(v1050 - v1048) >> 4);
      if (v675 <= v674 + 1)
        v675 = v674 + 1;
      v676 = (char *)(0x8E38E38E38E38E39 * ((uint64_t)(v1050 - v1048) >> 4) >= 0xE38E38E38E38E3
                    ? 0x1C71C71C71C71C7
                    : v675);
      *((_QWORD *)&v1112 + 1) = &v1050;
      if (v676)
        v676 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>((unint64_t)v676);
      else
        v677 = 0;
      *(_QWORD *)buf = v676;
      *(_QWORD *)&buf[8] = &v676[144 * v674];
      *(_QWORD *)&buf[16] = *(_QWORD *)&buf[8];
      *(_QWORD *)&v1112 = &v676[144 * v677];
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(*(std::string **)&buf[8], (uint64_t)&v1098);
      *(_QWORD *)&buf[16] += 144;
      std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v1048, buf);
      v673 = v1049;
      std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)buf);
    }
    else
    {
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v1049, (uint64_t)&v1098);
      v673 = v672 + 6;
    }
    v1049 = v673;

    if (v1105 < 0)
      operator delete(v1104);
    *(_QWORD *)buf = &v1101;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    *(_QWORD *)buf = v1099;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    if ((SHIBYTE(v1098.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_1025;
    v683 = (void *)v1098.__r_.__value_.__r.__words[0];
    goto LABEL_988;
  }
  if (!*(_DWORD *)(a4 + 28))
  {
    if (*(_DWORD *)(a4 + 60) != -1)
      Espresso::throw_exception_selector<Espresso::not_implemented_error>("Custom activation not implemented");
    goto LABEL_1026;
  }
  if (a2[121])
  {
    v670 = *(id *)(v1048 + 128);
  }
  else
  {
    v670 = (id)objc_opt_new();

  }
  objc_msgSend(v670, "setObject:forKeyedSubscript:", CFSTR("Tanh"), CFSTR("Type"));
  if (a2[121])
  {
LABEL_1025:

    v460 = lpsrc;
LABEL_1026:
    (*(void (**)(_QWORD *, _BYTE *, uint64_t *))(v460[70] + 32))(v460 + 70, a2, &v1048);
    goto LABEL_1027;
  }
  v678 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v1098, "experimental.ane.use_high_precision_activations");
  std::string::basic_string[abi:ne180100]<0>(buf, "1");
  Espresso::map_const_get<std::map<std::string,std::string>>((uint64_t)v678 + 472, (uint64_t)&v1098, (uint64_t)buf, &__str);
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  if (SHIBYTE(v1098.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1098.__r_.__value_.__l.__data_);
  Espresso::ANECompilerEngine::ane_arch_allow_network_override((uint64_t)*a3 + 472);
  v679 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
  v681 = v679;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    if (__str.__r_.__value_.__l.__size_ != 1)
      goto LABEL_992;
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) != 1)
      goto LABEL_992;
    p_str = &__str;
  }
  if (p_str->__r_.__value_.__s.__data_[0] == 48)
  {
LABEL_998:
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v1098.__r_.__value_.__l.__data_, a5);
    v687 = v1107;
    v1107 = CFSTR("Neuron");

    objc_storeStrong(&v1108, v670);
    v688 = v1049;
    if ((unint64_t)v1049 >= v1050)
    {
      v691 = 0x8E38E38E38E38E39 * (((uint64_t)v1049 - v1048) >> 4);
      if (v691 + 1 > 0x1C71C71C71C71C7)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v692 = 0x1C71C71C71C71C72 * ((uint64_t)(v1050 - v1048) >> 4);
      if (v692 <= v691 + 1)
        v692 = v691 + 1;
      if (0x8E38E38E38E38E39 * ((uint64_t)(v1050 - v1048) >> 4) >= 0xE38E38E38E38E3)
        v693 = 0x1C71C71C71C71C7;
      else
        v693 = v692;
      *((_QWORD *)&v1112 + 1) = &v1050;
      if (v693)
        v693 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v693);
      else
        v694 = 0;
      *(_QWORD *)buf = v693;
      *(_QWORD *)&buf[8] = v693 + 144 * v691;
      *(_QWORD *)&buf[16] = *(_QWORD *)&buf[8];
      *(_QWORD *)&v1112 = v693 + 144 * v694;
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(*(std::string **)&buf[8], (uint64_t)&v1098);
      *(_QWORD *)&buf[16] += 144;
      std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v1048, buf);
      v689 = v1049;
      std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)buf);
    }
    else
    {
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v1049, (uint64_t)&v1098);
      v689 = v688 + 6;
    }
    v1049 = v689;

    if (v1105 < 0)
      operator delete(v1104);
    *(_QWORD *)buf = &v1101;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    *(_QWORD *)buf = v1099;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    if (SHIBYTE(v1098.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1098.__r_.__value_.__l.__data_);

    if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_1025;
    v683 = (void *)__str.__r_.__value_.__r.__words[0];
LABEL_988:
    operator delete(v683);
    goto LABEL_1025;
  }
LABEL_992:
  if (!Espresso::ANECompilerEngine::is_mix(v679, v680))
    goto LABEL_998;
  v684 = (__int128 *)&v1049[-6];
  std::string::append(v1049 - 6, "_pre_tanh");
  (*(void (**)(_QWORD *, _BYTE *, uint64_t *))(lpsrc[70] + 32))(lpsrc + 70, a2, &v1048);
  Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t(&v1098, (const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)a5);
  v685 = v1101;
  for (i1 = (char *)v1102; i1 != v685; i1 -= 24)
  {
    if (*(i1 - 1) < 0)
      operator delete(*((void **)i1 - 3));
  }
  v1102 = (std::string *)v685;
  if ((unint64_t)v685 >= v1103)
  {
    v690 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&v1101, (uint64_t)v684);
  }
  else
  {
    std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)&v1101, v684);
    v690 = (std::string *)(v685 + 24);
  }
  v1102 = v690;
  (*(void (**)(_QWORD *, _BYTE *, std::string *))(lpsrc[70] + 48))(lpsrc + 70, a2, &v1098);

  if (v1105 < 0)
    operator delete(v1104);
  *(_QWORD *)buf = &v1101;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(_QWORD *)buf = v1099;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (SHIBYTE(v1098.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1098.__r_.__value_.__l.__data_);

  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);

LABEL_1027:
  v1098.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1048;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1098);

  v695 = (std::__shared_weak_count *)*((_QWORD *)&v1075 + 1);
  if (*((_QWORD *)&v1075 + 1))
  {
    v696 = (unint64_t *)(*((_QWORD *)&v1075 + 1) + 8);
    do
      v697 = __ldaxr(v696);
    while (__stlxr(v697 - 1, v696));
    if (!v697)
    {
      ((void (*)(std::__shared_weak_count *))v695->__on_zero_shared)(v695);
      std::__shared_weak_count::__release_weak(v695);
    }
  }
  v698 = (std::__shared_weak_count *)*((_QWORD *)&v1074 + 1);
  if (*((_QWORD *)&v1074 + 1))
  {
    v699 = (unint64_t *)(*((_QWORD *)&v1074 + 1) + 8);
    do
      v700 = __ldaxr(v699);
    while (__stlxr(v700 - 1, v699));
    if (!v700)
    {
      ((void (*)(std::__shared_weak_count *))v698->__on_zero_shared)(v698);
      std::__shared_weak_count::__release_weak(v698);
    }
  }
  v701 = (std::__shared_weak_count *)*((_QWORD *)&v1073 + 1);
  if (*((_QWORD *)&v1073 + 1))
  {
    v702 = (unint64_t *)(*((_QWORD *)&v1073 + 1) + 8);
    do
      v703 = __ldaxr(v702);
    while (__stlxr(v703 - 1, v702));
    if (!v703)
    {
      ((void (*)(std::__shared_weak_count *))v701->__on_zero_shared)(v701);
      std::__shared_weak_count::__release_weak(v701);
    }
  }
  v704 = (std::__shared_weak_count *)*((_QWORD *)&v1072 + 1);
  if (*((_QWORD *)&v1072 + 1))
  {
    v705 = (unint64_t *)(*((_QWORD *)&v1072 + 1) + 8);
    do
      v706 = __ldaxr(v705);
    while (__stlxr(v706 - 1, v705));
    if (!v706)
    {
      ((void (*)(std::__shared_weak_count *))v704->__on_zero_shared)(v704);
      std::__shared_weak_count::__release_weak(v704);
    }
  }
  v707 = (std::__shared_weak_count *)*((_QWORD *)&v1071 + 1);
  if (*((_QWORD *)&v1071 + 1))
  {
    v708 = (unint64_t *)(*((_QWORD *)&v1071 + 1) + 8);
    do
      v709 = __ldaxr(v708);
    while (__stlxr(v709 - 1, v708));
    if (!v709)
    {
      ((void (*)(std::__shared_weak_count *))v707->__on_zero_shared)(v707);
      std::__shared_weak_count::__release_weak(v707);
    }
  }
  v710 = (std::__shared_weak_count *)*((_QWORD *)&v1070 + 1);
  if (*((_QWORD *)&v1070 + 1))
  {
    v711 = (unint64_t *)(*((_QWORD *)&v1070 + 1) + 8);
    do
      v712 = __ldaxr(v711);
    while (__stlxr(v712 - 1, v711));
    if (!v712)
    {
      ((void (*)(std::__shared_weak_count *))v710->__on_zero_shared)(v710);
      std::__shared_weak_count::__release_weak(v710);
    }
  }
  v713 = (std::__shared_weak_count *)*((_QWORD *)&v1069 + 1);
  if (*((_QWORD *)&v1069 + 1))
  {
    v714 = (unint64_t *)(*((_QWORD *)&v1069 + 1) + 8);
    do
      v715 = __ldaxr(v714);
    while (__stlxr(v715 - 1, v714));
    if (!v715)
    {
      ((void (*)(std::__shared_weak_count *))v713->__on_zero_shared)(v713);
      std::__shared_weak_count::__release_weak(v713);
    }
  }
  v716 = (std::__shared_weak_count *)*((_QWORD *)&v1068 + 1);
  if (*((_QWORD *)&v1068 + 1))
  {
    v717 = (unint64_t *)(*((_QWORD *)&v1068 + 1) + 8);
    do
      v718 = __ldaxr(v717);
    while (__stlxr(v718 - 1, v717));
    if (!v718)
    {
      ((void (*)(std::__shared_weak_count *))v716->__on_zero_shared)(v716);
      std::__shared_weak_count::__release_weak(v716);
    }
  }
  v719 = (std::__shared_weak_count *)*((_QWORD *)&v1067 + 1);
  if (*((_QWORD *)&v1067 + 1))
  {
    v720 = (unint64_t *)(*((_QWORD *)&v1067 + 1) + 8);
    do
      v721 = __ldaxr(v720);
    while (__stlxr(v721 - 1, v720));
    if (!v721)
    {
      ((void (*)(std::__shared_weak_count *))v719->__on_zero_shared)(v719);
      std::__shared_weak_count::__release_weak(v719);
    }
  }
  v722 = (std::__shared_weak_count *)*((_QWORD *)&v1066 + 1);
  if (*((_QWORD *)&v1066 + 1))
  {
    v723 = (unint64_t *)(*((_QWORD *)&v1066 + 1) + 8);
    do
      v724 = __ldaxr(v723);
    while (__stlxr(v724 - 1, v723));
    if (!v724)
    {
      ((void (*)(std::__shared_weak_count *))v722->__on_zero_shared)(v722);
      std::__shared_weak_count::__release_weak(v722);
    }
  }
  v725 = (std::__shared_weak_count *)*((_QWORD *)&v1065 + 1);
  if (*((_QWORD *)&v1065 + 1))
  {
    v726 = (unint64_t *)(*((_QWORD *)&v1065 + 1) + 8);
    do
      v727 = __ldaxr(v726);
    while (__stlxr(v727 - 1, v726));
    if (!v727)
    {
      ((void (*)(std::__shared_weak_count *))v725->__on_zero_shared)(v725);
      std::__shared_weak_count::__release_weak(v725);
    }
  }
  v728 = (std::__shared_weak_count *)*((_QWORD *)&v1064 + 1);
  if (*((_QWORD *)&v1064 + 1))
  {
    v729 = (unint64_t *)(*((_QWORD *)&v1064 + 1) + 8);
    do
      v730 = __ldaxr(v729);
    while (__stlxr(v730 - 1, v729));
    if (!v730)
    {
      ((void (*)(std::__shared_weak_count *))v728->__on_zero_shared)(v728);
      std::__shared_weak_count::__release_weak(v728);
    }
  }
}

void sub_19137DF7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22)
{
  void *v22;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x500]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x510]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x550]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x520]);

  STACK[0x4A0] = (unint64_t)&STACK[0x2C0];
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x4A0]);

  Espresso::ANECompilerEngine::final_anec_weights_t::~final_anec_weights_t((Espresso::ANECompilerEngine::final_anec_weights_t *)&STACK[0x3C0]);
  _Unwind_Resume(a1);
}

id std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(std::string *a1, uint64_t a2)
{
  id result;

  Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t(a1, (const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)a2);
  a1[5].__r_.__value_.__r.__words[0] = (std::string::size_type)*(id *)(a2 + 120);
  result = *(id *)(a2 + 128);
  a1[5].__r_.__value_.__l.__size_ = (std::string::size_type)result;
  a1[5].__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 136);
  return result;
}

uint64_t std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__push_back_slow_path<Espresso::ANECompilerEngine::compiler::unit_t const&>(uint64_t *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v11;
  std::string *v12;
  std::string *v13;
  unint64_t v14;
  uint64_t *v15;

  v2 = 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 4);
  v3 = v2 + 1;
  if (v2 + 1 > 0x1C71C71C71C71C7)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  v6 = a1 + 2;
  if (0x1C71C71C71C71C72 * ((a1[2] - *a1) >> 4) > v3)
    v3 = 0x1C71C71C71C71C72 * ((a1[2] - *a1) >> 4);
  if (0x8E38E38E38E38E39 * ((a1[2] - *a1) >> 4) >= 0xE38E38E38E38E3)
    v7 = 0x1C71C71C71C71C7;
  else
    v7 = v3;
  v15 = v6;
  if (v7)
    v7 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v7);
  else
    v8 = 0;
  v11 = v7;
  v12 = (std::string *)(v7 + 144 * v2);
  v14 = v7 + 144 * v8;
  std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v12, a2);
  v13 = v12 + 6;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(a1, &v11);
  v9 = a1[1];
  std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&v11);
  return v9;
}

void sub_19137F114(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_s8(Espresso::ANECompilerEngine::final_anec_weights_t *this, Espresso::ANECompilerEngine::ane_kernel *a2, void *a3)
{
  _QWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  void *__p;
  void *v12;

  (*(void (**)(__int128 *__return_ptr, Espresso::ANECompilerEngine::ane_kernel *))(*(_QWORD *)a2 + 128))(&v10, a2);
  v5 = operator new(0x60uLL);
  v5[1] = 0;
  v5[2] = 0;
  *v5 = &off_1E2DBEB90;
  v5[3] = &off_1E2DA1150;
  *((_OWORD *)v5 + 4) = 0u;
  *((_OWORD *)v5 + 5) = 0u;
  *((_OWORD *)v5 + 2) = v10;
  v5[6] = a3;
  *((_BYTE *)v5 + 56) = 0;
  *(_QWORD *)&v9 = v5 + 3;
  *((_QWORD *)&v9 + 1) = v5;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)this + 64, &v9);
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v9 + 1);
  if (*((_QWORD *)&v9 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v9 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (__p)
  {
    v12 = __p;
    operator delete(__p);
  }
}

void sub_19137F200(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_f32(Espresso::ANECompilerEngine::final_anec_weights_t *this, Espresso::ANECompilerEngine::ane_kernel *a2, void *a3)
{
  _QWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  void *__p;
  void *v12;

  (*(void (**)(__int128 *__return_ptr, Espresso::ANECompilerEngine::ane_kernel *))(*(_QWORD *)a2 + 128))(&v10, a2);
  v5 = operator new(0x60uLL);
  v5[1] = 0;
  v5[2] = 0;
  *v5 = &off_1E2DBECA8;
  v5[3] = &off_1E2DA11F0;
  *((_OWORD *)v5 + 4) = 0u;
  *((_OWORD *)v5 + 5) = 0u;
  *((_OWORD *)v5 + 2) = v10;
  v5[6] = a3;
  *((_BYTE *)v5 + 56) = 0;
  *(_QWORD *)&v9 = v5 + 3;
  *((_QWORD *)&v9 + 1) = v5;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)this + 16, &v9);
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v9 + 1);
  if (*((_QWORD *)&v9 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v9 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (__p)
  {
    v12 = __p;
    operator delete(__p);
  }
}

void sub_19137F2F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_f16(Espresso::ANECompilerEngine::final_anec_weights_t *this, Espresso::ANECompilerEngine::ane_kernel *a2, void *a3)
{
  _QWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  void *__p;
  void *v12;

  (*(void (**)(__int128 *__return_ptr, Espresso::ANECompilerEngine::ane_kernel *))(*(_QWORD *)a2 + 128))(&v10, a2);
  v5 = operator new(0x60uLL);
  v5[1] = 0;
  v5[2] = 0;
  *v5 = &off_1E2DBF060;
  v5[3] = &off_1E2DA1410;
  *((_OWORD *)v5 + 4) = 0u;
  *((_OWORD *)v5 + 5) = 0u;
  *((_OWORD *)v5 + 2) = v10;
  v5[6] = a3;
  *((_BYTE *)v5 + 56) = 0;
  *(_QWORD *)&v9 = v5 + 3;
  *((_QWORD *)&v9 + 1) = v5;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)this + 32, &v9);
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v9 + 1);
  if (*((_QWORD *)&v9 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v9 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (__p)
  {
    v12 = __p;
    operator delete(__p);
  }
}

void sub_19137F3E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_f16(Espresso::ANECompilerEngine::final_anec_weights_t *a1, Espresso::ANECompilerEngine::ane_kernel *a2, uint64_t *a3)
{
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)a1 + 16, *a3, a3[1]);
  Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_f16(a1, a2, *(void **)(*a3 + 24));
}

{
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)a1 + 18, *a3, a3[1]);
  Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_f16(a1, a2, *(void **)(*a3 + 16));
}

void Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_f32(Espresso::ANECompilerEngine::final_anec_weights_t *a1, Espresso::ANECompilerEngine::ane_kernel *a2, uint64_t *a3)
{
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)a1 + 12, *a3, a3[1]);
  Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_f32(a1, a2, *(void **)(*a3 + 24));
}

{
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)a1 + 10, *a3, a3[1]);
  Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_f32(a1, a2, *(void **)(*a3 + 16));
}

void Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::convolution_kernel *>(_QWORD *a1, Espresso::ANECompilerEngine *a2, _QWORD *a3, Espresso::quantized_weights_helper **a4, void *a5, const void **a6)
{
  void *v10;
  void *v11;
  void *v12;
  int v13;
  Espresso::quantized_weights_helper *v14;
  _QWORD *v15;
  void *v16;
  Espresso::ANECompilerEngine *v17;
  Espresso::ANECompilerEngine *v18;
  NSString *v19;
  char is_mix;
  Espresso::quantized_weights_helper *v21;
  NSString *v22;
  int v23;
  NSString *v24;
  int v25;
  char *v26;
  uint64_t *v27;
  unsigned __int8 *v28;
  _QWORD *v29;
  uint64_t v30;
  NSString *v31;
  int v32;
  NSString *v33;
  int v34;
  char *v35;
  uint64_t *v36;
  unsigned __int8 *v37;
  NSString *v38;
  int v39;
  NSString *v40;
  int v41;
  char *v42;
  uint64_t *v43;
  unsigned __int8 *v44;
  uint64_t v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *p_shared_owners;
  unint64_t v49;
  _BOOL4 v50;
  uint64_t v51;
  std::string *v52;
  _BOOL4 v53;
  uint64_t v54;
  std::string *v55;
  _BOOL4 v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  BOOL is_qbias_zero;
  unint64_t *v61;
  unint64_t v62;
  const float **v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  _BOOL4 v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  unint64_t *v77;
  unint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  unint64_t *v81;
  unint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  uint64_t weights_file_index;
  Espresso::ANECompilerEngine::ane_kernel *v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  Espresso::ANECompilerEngine *v94;
  unint64_t v95;
  unint64_t *v96;
  unint64_t v97;
  Espresso::ANECompilerEngine::compiler::build_state_t *v98;
  const unsigned __int8 **v99;
  unint64_t *v100;
  unint64_t v101;
  uint64_t v102;
  void *v103;
  void *v104;
  uint64_t v105;
  Espresso::ANECompilerEngine::ane_kernel *v106;
  unint64_t *v107;
  unint64_t v108;
  void *v109;
  void *v110;
  void *v111;
  Espresso::ANECompilerEngine::ane_kernel *v112;
  unint64_t *v113;
  unint64_t v114;
  uint64_t v115[2];
  _QWORD v116[4];
  uint64_t v117[2];
  void *__p;
  uint64_t v119;
  void *v120;
  std::__shared_weak_count *v121;
  uint64_t v122;
  uint64_t v123;
  void *v124[2];
  char v125;
  std::string v126;
  std::string v127;
  _QWORD v128[2];
  uint64_t v129[2];
  uint64_t v130;
  uint64_t v131;
  _QWORD v132[4];
  const void **v133[5];
  char v134;
  id v135;
  Espresso::ANECompilerEngine *v136;
  _QWORD *v137;
  _QWORD v138[3];
  _QWORD *v139;
  _QWORD v140[3];
  _QWORD *v141;
  _QWORD v142[3];
  _QWORD *v143;
  uint64_t v144;

  v144 = *MEMORY[0x1E0C80C00];
  v136 = a2;
  v137 = a1;
  v135 = a5;
  v134 = *((_BYTE *)a2 + 552);
  v133[0] = (const void **)&v137;
  v133[1] = a6;
  v133[2] = (const void **)&v136;
  v133[3] = (const void **)&v135;
  v133[4] = (const void **)&v134;
  objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "persistentDomainForName:", *MEMORY[0x1E0CB2B58]);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v11, "objectForKeyedSubscript:", CFSTR("espresso.anecompiler.always_bloat"));
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = objc_msgSend(v12, "BOOLValue");

  if (v13)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "<rdar://problem/39402422> 257a: \"Illegal cog size\" or \"NE kernel blob too large \" assertion when using large convolutions with int8 weights");
    Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::convolution_kernel *>(Espresso::ANECompilerEngine::convolution_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(std::string const&)#1}::operator()(v133, (uint64_t *)&__p);
    goto LABEL_10;
  }
  v14 = *a4;
  if (*((_QWORD *)*a4 + 4) || *((_QWORD *)v14 + 6) || *((_QWORD *)v14 + 8))
  {
    v15 = v137;
    if (v137
      && (*(__int16 *)((*(uint64_t (**)(_QWORD *))(*v137 + 384))(v137) + 96) > 1
       || *(__int16 *)((*(uint64_t (**)(_QWORD *))(*v15 + 384))(v15) + 98) >= 2))
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "Dilated + LUT");
      Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::convolution_kernel *>(Espresso::ANECompilerEngine::convolution_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(std::string const&)#1}::operator()(v133, (uint64_t *)&__p);
      goto LABEL_10;
    }
    v17 = v136;
    Espresso::ANECompilerEngine::ane_arch_allow_network_override(*a3 + 472);
    v18 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
    is_mix = Espresso::ANECompilerEngine::is_mix(v18, v19);
    v21 = *a4;
    if (*((_QWORD *)*a4 + 4))
    {
      __p = (void *)Espresso::ANECompilerEngine::sparsity_options::read_sparse_lut_config(*a3 + 472, (Espresso::ANECompilerEngine::sparsity_options *)v11);
      v119 = (uint64_t)v22;
      v23 = Espresso::ANECompilerEngine::is_mix(v18, v22);
      v25 = Espresso::ANECompilerEngine::is_mix(v18, v24);
      if (v23)
        v26 = (char *)&Espresso::ANECompilerEngine::h12_ane_hw_limits::dense_fp16_palettes;
      else
        v26 = (char *)&Espresso::ANECompilerEngine::mix_limits::dense_fp16_palettes;
      v27 = (uint64_t *)*a4;
      v142[0] = &off_1E2DB1608;
      v142[1] = v17;
      v143 = v142;
      if (v25)
        v28 = (unsigned __int8 *)&Espresso::ANECompilerEngine::h12_ane_hw_limits::sparse_fp16_palettes;
      else
        v28 = (unsigned __int8 *)&Espresso::ANECompilerEngine::mix_limits::sparse_fp16_palettes;
      Espresso::ANECompilerEngine::add_lut_to_f16_weights(v27, v135, (uint64_t)v142, v26, v28, is_mix, (uint64_t)&__p);
      v29 = v143;
      if (v143 == v142)
      {
        v30 = 4;
        v29 = v142;
        goto LABEL_41;
      }
    }
    else if (*((_QWORD *)v21 + 8))
    {
      __p = (void *)Espresso::ANECompilerEngine::sparsity_options::read_sparse_lut_config(*a3 + 472, (Espresso::ANECompilerEngine::sparsity_options *)v11);
      v119 = (uint64_t)v31;
      v32 = Espresso::ANECompilerEngine::is_mix(v18, v31);
      v34 = Espresso::ANECompilerEngine::is_mix(v18, v33);
      if (v32)
        v35 = (char *)&Espresso::ANECompilerEngine::h12_ane_hw_limits::dense_uint8_palettes;
      else
        v35 = (char *)&Espresso::ANECompilerEngine::mix_limits::dense_uint8_palettes;
      v36 = (uint64_t *)*a4;
      v140[0] = &off_1E2DB1608;
      v140[1] = v17;
      v141 = v140;
      if (v34)
        v37 = (unsigned __int8 *)&Espresso::ANECompilerEngine::h12_ane_hw_limits::sparse_uint8_palettes;
      else
        v37 = (unsigned __int8 *)&Espresso::ANECompilerEngine::mix_limits::sparse_uint8_palettes;
      Espresso::ANECompilerEngine::add_lut_to_uint8_weights(v36, v135, (uint64_t)v140, v35, v37, is_mix, (uint64_t)&__p);
      v29 = v141;
      if (v141 == v140)
      {
        v30 = 4;
        v29 = v140;
        goto LABEL_41;
      }
    }
    else
    {
      if (!*((_QWORD *)v21 + 6))
        Espresso::throw_exception_selector<Espresso::unsupported_configuration_error>("Unknown lookup table type.");
      __p = (void *)Espresso::ANECompilerEngine::sparsity_options::read_sparse_lut_config(*a3 + 472, (Espresso::ANECompilerEngine::sparsity_options *)v11);
      v119 = (uint64_t)v38;
      v39 = Espresso::ANECompilerEngine::is_mix(v18, v38);
      v41 = Espresso::ANECompilerEngine::is_mix(v18, v40);
      if (v39)
        v42 = (char *)&Espresso::ANECompilerEngine::h12_ane_hw_limits::dense_int8_palettes;
      else
        v42 = (char *)&Espresso::ANECompilerEngine::mix_limits::dense_int8_palettes;
      v43 = (uint64_t *)*a4;
      v138[0] = &off_1E2DB1608;
      v138[1] = v17;
      v139 = v138;
      if (v41)
        v44 = (unsigned __int8 *)&Espresso::ANECompilerEngine::h12_ane_hw_limits::sparse_int8_palettes;
      else
        v44 = (unsigned __int8 *)&Espresso::ANECompilerEngine::mix_limits::sparse_int8_palettes;
      Espresso::ANECompilerEngine::add_lut_to_int8_weights(v43, v135, (uint64_t)v138, v42, v44, is_mix, (uint64_t)&__p);
      v29 = v139;
      if (v139 == v138)
      {
        v30 = 4;
        v29 = v138;
        goto LABEL_41;
      }
    }
    if (!v29)
    {
LABEL_42:

      goto LABEL_43;
    }
    v30 = 5;
LABEL_41:
    (*(void (**)(void))(*v29 + 8 * v30))();
    goto LABEL_42;
  }
  if (*((_DWORD *)v14 + 39) != 8)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "Not 8 bits");
    Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::convolution_kernel *>(Espresso::ANECompilerEngine::convolution_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(std::string const&)#1}::operator()(v133, (uint64_t *)&__p);
LABEL_10:
    if (SHIBYTE(v120) < 0)
    {
      v16 = __p;
LABEL_12:
      operator delete(v16);
      goto LABEL_43;
    }
    goto LABEL_43;
  }
  if (*((_BYTE *)v14 + 164))
  {
    if (Espresso::quantized_weights_helper::is_quantization_linear_signed_symmetric(v14))
    {
      v45 = v137[59];
      v46 = *(_QWORD *)(v45 + 80);
      v47 = *(std::__shared_weak_count **)(v45 + 88);
      v132[2] = v46;
      v132[3] = v47;
      if (v47)
      {
        p_shared_owners = (unint64_t *)&v47->__shared_owners_;
        do
          v49 = __ldxr(p_shared_owners);
        while (__stxr(v49 + 1, p_shared_owners));
      }
      v50 = 0;
      if (v46)
      {
        LODWORD(__p) = 0;
        vDSP_minmgv(*(const float **)(v46 + 16), 1, (float *)&__p, *(int *)(v46 + 8));
        if (*(float *)&__p < 0.000061035)
          v50 = 1;
      }
      if (v47)
      {
        v77 = (unint64_t *)&v47->__shared_owners_;
        do
          v78 = __ldaxr(v77);
        while (__stlxr(v78 - 1, v77));
        if (!v78)
        {
          ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
          std::__shared_weak_count::__release_weak(v47);
        }
      }
      if (!v50)
      {
        v79 = v137;
        v80 = a3[1];
        v132[0] = *a3;
        v132[1] = v80;
        if (v80)
        {
          v81 = (unint64_t *)(v80 + 8);
          do
            v82 = __ldxr(v81);
          while (__stxr(v82 + 1, v81));
        }
        std::string::basic_string[abi:ne180100]<0>(&__p, "W_S8");
        v83 = (*(uint64_t (**)(_QWORD *, _QWORD *, _QWORD *, void **))(v79[70] + 88))(v79 + 70, v132, v79, &__p);
        if (SHIBYTE(v120) < 0)
          operator delete(__p);
        std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v132);
        if ((v83 & 0x80000000) != 0)
        {
          v90 = *(_QWORD *)*a4;
          v91 = *((_QWORD *)*a4 + 1);
          __p = (void *)v90;
          v119 = v91;
          if (v91)
          {
            v92 = (unint64_t *)(v91 + 8);
            do
              v93 = __ldxr(v92);
            while (__stxr(v93 + 1, v92));
            v94 = v136;
            v131 = v91;
            do
              v95 = __ldxr(v92);
            while (__stxr(v95 + 1, v92));
          }
          else
          {
            v94 = v136;
            v131 = 0;
          }
          v130 = v90;
          v83 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine *)((char *)v94 + 128), *(const unsigned __int8 **)(v90 + 16), *(int *)(v90 + 8));
          std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v130);
          if (v134)
            weights_file_index = 0;
          else
          if (v137)
            v106 = (Espresso::ANECompilerEngine::ane_kernel *)(v137 + 70);
          else
            v106 = 0;
          v129[0] = (uint64_t)__p;
          v129[1] = v119;
          if (v119)
          {
            v107 = (unint64_t *)(v119 + 8);
            do
              v108 = __ldxr(v107);
            while (__stxr(v108 + 1, v107));
          }
          Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_s8((Espresso::ANECompilerEngine::final_anec_weights_t *)a6, v106, v129);
          std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v129);
          std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
        }
        else
        {
          v84 = v137;
          v85 = a3[1];
          v128[0] = *a3;
          v128[1] = v85;
          if (v85)
          {
            v86 = (unint64_t *)(v85 + 8);
            do
              v87 = __ldxr(v86);
            while (__stxr(v87 + 1, v86));
          }
          std::string::basic_string[abi:ne180100]<0>(&v127, "W_S8");
          (*(void (**)(void **__return_ptr, _QWORD *, _QWORD *, _QWORD *, std::string *))(v84[70] + 120))(&__p, v84 + 70, v128, v84, &v127);
          if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v127.__r_.__value_.__l.__data_);
          std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v128);
          weights_file_index = Espresso::ANECompilerEngine::get_primary_weights_file_index(v136, (Espresso::ANECompilerEngine::compiler *)__p, v120);
          if (v137)
            v89 = (Espresso::ANECompilerEngine::ane_kernel *)(v137 + 70);
          else
            v89 = 0;
          Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_s8((Espresso::ANECompilerEngine::final_anec_weights_t *)a6, v89, __p);
        }
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v83);
        v109 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v135, "setObject:forKeyedSubscript:", v109, CFSTR("KernelOffset"));

        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", weights_file_index);
        v110 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v135, "setObject:forKeyedSubscript:", v110, CFSTR("KernelIndex"));

        objc_msgSend(v135, "setObject:forKeyedSubscript:", CFSTR("Int8"), CFSTR("KernelType"));
        goto LABEL_43;
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "Signed / Overflowing");
      Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::convolution_kernel *>(Espresso::ANECompilerEngine::convolution_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(std::string const&)#1}::operator()(v133, (uint64_t *)&__p);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "Signed / Not symmetric");
      Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::convolution_kernel *>(Espresso::ANECompilerEngine::convolution_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(std::string const&)#1}::operator()(v133, (uint64_t *)&__p);
    }
    goto LABEL_10;
  }
  v51 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&__p, "early_arch_conv_w_int8_no_bloat");
  std::string::basic_string[abi:ne180100]<0>(&v126, "0");
  Espresso::map_const_get<std::map<std::string,std::string>>(v51 + 472, (uint64_t)&__p, (uint64_t)&v126, &v127);
  if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v126.__r_.__value_.__l.__data_);
  if (SHIBYTE(v120) < 0)
    operator delete(__p);
  if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v127.__r_.__value_.__l.__size_ == 1)
    {
      v52 = (std::string *)v127.__r_.__value_.__r.__words[0];
      goto LABEL_65;
    }
  }
  else if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) == 1)
  {
    v52 = &v127;
LABEL_65:
    v53 = v52->__r_.__value_.__s.__data_[0] == 49;
    goto LABEL_67;
  }
  v53 = 0;
LABEL_67:
  v54 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&__p, "early_arch_conv_w_int8_no_bloat_v2");
  std::string::basic_string[abi:ne180100]<0>(v124, "0");
  Espresso::map_const_get<std::map<std::string,std::string>>(v54 + 472, (uint64_t)&__p, (uint64_t)v124, &v126);
  if (v125 < 0)
    operator delete(v124[0]);
  if (SHIBYTE(v120) < 0)
    operator delete(__p);
  if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v126.__r_.__value_.__l.__size_ == 1)
    {
      v55 = (std::string *)v126.__r_.__value_.__r.__words[0];
      goto LABEL_76;
    }
LABEL_77:
    v56 = 0;
    goto LABEL_78;
  }
  if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) != 1)
    goto LABEL_77;
  v55 = &v126;
LABEL_76:
  v56 = v55->__r_.__value_.__s.__data_[0] == 49;
LABEL_78:
  Espresso::quantized_weights_helper::cast_uint8_linear_to_int8_linear(*a4, v53, v56, &__p);
  if (!__p)
    goto LABEL_94;
  v57 = (std::__shared_weak_count *)v123;
  v117[0] = v122;
  v117[1] = v123;
  if (v123)
  {
    v58 = (unint64_t *)(v123 + 8);
    do
      v59 = __ldxr(v58);
    while (__stxr(v59 + 1, v58));
  }
  is_qbias_zero = Espresso::quantized_weights_helper::is_qbias_zero(v117);
  if (v57)
  {
    v61 = (unint64_t *)&v57->__shared_owners_;
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  if (!is_qbias_zero)
  {
LABEL_94:
    std::string::basic_string[abi:ne180100]<0>(v124, "Unsigned / Not symmetric");
    Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::convolution_kernel *>(Espresso::ANECompilerEngine::convolution_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(std::string const&)#1}::operator()(v133, (uint64_t *)v124);
LABEL_95:
    if (v125 < 0)
      operator delete(v124[0]);
    v68 = (std::__shared_weak_count *)v123;
    if (v123)
    {
      v69 = (unint64_t *)(v123 + 8);
      do
        v70 = __ldaxr(v69);
      while (__stlxr(v70 - 1, v69));
      if (!v70)
      {
        ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
        std::__shared_weak_count::__release_weak(v68);
      }
    }
    v71 = v121;
    if (v121)
    {
      v72 = (unint64_t *)&v121->__shared_owners_;
      do
        v73 = __ldaxr(v72);
      while (__stlxr(v73 - 1, v72));
      if (!v73)
      {
        ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
        std::__shared_weak_count::__release_weak(v71);
      }
    }
    v74 = (std::__shared_weak_count *)v119;
    if (v119)
    {
      v75 = (unint64_t *)(v119 + 8);
      do
        v76 = __ldaxr(v75);
      while (__stlxr(v76 - 1, v75));
      if (!v76)
      {
        ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
        std::__shared_weak_count::__release_weak(v74);
      }
    }
    goto LABEL_174;
  }
  v63 = (const float **)v120;
  v64 = v121;
  v116[2] = v120;
  v116[3] = v121;
  if (v121)
  {
    v65 = (unint64_t *)&v121->__shared_owners_;
    do
      v66 = __ldxr(v65);
    while (__stxr(v66 + 1, v65));
  }
  v67 = 0;
  if (v63)
  {
    LODWORD(v124[0]) = 0;
    vDSP_minmgv(v63[2], 1, (float *)v124, *((int *)v63 + 2));
    if (*(float *)v124 < 0.000061035)
      v67 = 1;
  }
  if (v64)
  {
    v96 = (unint64_t *)&v64->__shared_owners_;
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  if (v67)
  {
    std::string::basic_string[abi:ne180100]<0>(v124, "Unsigned / Overflowing");
    Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::convolution_kernel *>(Espresso::ANECompilerEngine::convolution_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(std::string const&)#1}::operator()(v133, (uint64_t *)v124);
    goto LABEL_95;
  }
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(v137[59] + 80), (uint64_t)v120, (uint64_t)v121);
  v98 = (Espresso::ANECompilerEngine *)((char *)v136 + 128);
  v99 = (const unsigned __int8 **)__p;
  v116[0] = __p;
  v116[1] = v119;
  if (v119)
  {
    v100 = (unint64_t *)(v119 + 8);
    do
      v101 = __ldxr(v100);
    while (__stxr(v101 + 1, v100));
  }
  v102 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v98, v99[2], *((int *)v99 + 2));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v116);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v102);
  v103 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v135, "setObject:forKeyedSubscript:", v103, CFSTR("KernelOffset"));

  objc_msgSend(v135, "setObject:forKeyedSubscript:", CFSTR("Int8"), CFSTR("KernelType"));
  v104 = (void *)MEMORY[0x1E0CB37E8];
  if (v134)
    v105 = 0;
  else
  objc_msgSend(v104, "numberWithUnsignedLong:", v105);
  v111 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v135, "setObject:forKeyedSubscript:", v111, CFSTR("KernelIndex"));

  if (v137)
    v112 = (Espresso::ANECompilerEngine::ane_kernel *)(v137 + 70);
  else
    v112 = 0;
  v115[0] = (uint64_t)__p;
  v115[1] = v119;
  if (v119)
  {
    v113 = (unint64_t *)(v119 + 8);
    do
      v114 = __ldxr(v113);
    while (__stxr(v114 + 1, v113));
  }
  Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_s8((Espresso::ANECompilerEngine::final_anec_weights_t *)a6, v112, v115);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v115);
  Espresso::quantized_weights_helper::linear_quantization_data::~linear_quantization_data((Espresso::quantized_weights_helper::linear_quantization_data *)&__p);
LABEL_174:
  if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v126.__r_.__value_.__l.__data_);
  if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0)
  {
    v16 = (void *)v127.__r_.__value_.__r.__words[0];
    goto LABEL_12;
  }
LABEL_43:

}

void sub_19138007C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,char a45,uint64_t a46,char a47,uint64_t a48,char a49,uint64_t a50,char a51,uint64_t a52,char a53)
{
  void *v53;
  uint64_t v54;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a18);

  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::batchnorm_kernel::batchnorm_to_scale_bias(_QWORD *a1, uint64_t a2, int a3, int a4, int a5, double a6)
{
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float *v16;
  float *v17;
  float *v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  float v25;
  float v26;
  _QWORD *v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;

  v12 = 4 * a3;
  std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v36, 4 * a3, 1, 1, 1);
  std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v34, v12, 1, 1, 1);
  v13 = v36;
  v14 = v34;
  if (a3 >= 1)
  {
    v15 = a3;
    v16 = *(float **)(v36 + 16);
    v17 = *(float **)(v34 + 16);
    v18 = (float *)(*(_QWORD *)(*(_QWORD *)a2 + 16) + 8);
    do
    {
      v19 = *(v18 - 2);
      if (a5)
        v20 = 0.0;
      else
        v20 = *v18;
      if (a5)
        v21 = 1.0;
      else
        v21 = 1.0 / v18[1];
      v22 = v21 * v19;
      v23 = *(v18 - 1) + -(v20 * v21) * v19;
      if (a4)
      {
        v24 = (a6 + 1.0) / (fabs(v22) + a6);
        if (v22 < 0.0)
          v24 = -v24;
        v23 = v23 * v24;
      }
      v25 = v22;
      *v16++ = v25;
      v26 = v23;
      *v17++ = v26;
      v18 += 4;
      --v15;
    }
    while (v15);
  }
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  v27 = a1 + 2;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](a1, v13, (uint64_t)v37);
  v28 = v35;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v27, v14, (uint64_t)v35);
  if (v28)
  {
    p_shared_owners = (unint64_t *)&v28->__shared_owners_;
    do
      v30 = __ldaxr(p_shared_owners);
    while (__stlxr(v30 - 1, p_shared_owners));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v31 = v37;
  if (v37)
  {
    v32 = (unint64_t *)&v37->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
}

void sub_191380520(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 144;
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::destroy[abi:ne180100](v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void Espresso::ANECompilerEngine::final_anec_weights_t::~final_anec_weights_t(Espresso::ANECompilerEngine::final_anec_weights_t *this)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 176);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 160);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 144);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 128);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 112);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 96);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 80);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 64);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 32);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 16);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this);
}

void std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::destroy[abi:ne180100](uint64_t a1)
{
  void **v2;

  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  v2 = (void **)(a1 + 48);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void Espresso::blob<unsigned char,1>::make(_QWORD *a1, int a2)
{
  std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(a1, a2, 1, 1, 1);
}

uint64_t Espresso::ANECompilerEngine::compress_sparse_weights<float,4>(uint64_t a1, uint64_t a2, uint64_t a3, float a4)
{
  uint64_t v8;
  signed int v9;
  void *v10;
  void *v11;
  unint64_t v12;
  uint64_t v13;
  float v14;
  Espresso *v15;
  const char *v16;
  NSObject *v17;
  Espresso *v18;
  const char *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  NSObject *v26;
  signed int v28;
  void *__p;
  _BYTE *v30;
  uint64_t v31;
  void *__src;
  _BYTE *v33;
  uint64_t v34;
  __int128 buf;
  double v36;
  uint64_t v37;

  v8 = 0;
  v37 = *MEMORY[0x1E0C80C00];
  __src = 0;
  v33 = 0;
  v34 = 0;
  v30 = 0;
  v31 = 0;
  __p = 0;
  v9 = *(_DWORD *)(*(_QWORD *)a1 + 8);
  do
  {
    v9 *= *(_DWORD *)(*(_QWORD *)a1 + 12 + v8);
    v8 += 4;
  }
  while (v8 != 12);
  Espresso::compress_sparse_kernel<float>(*(float **)(*(_QWORD *)a1 + 24), v9, &__p, &__src);
  v11 = __src;
  v10 = v33;
  v12 = v33 - (_BYTE *)__src;
  v13 = (v33 - (_BYTE *)__src) >> 2;
  v14 = 1.0 - (float)((float)(unint64_t)v13 / (float)v9);
  Espresso::espresso_os_log_subsystem(v15, v16);
  v17 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
  {
    if (*(_QWORD *)a1)
      v28 = v9;
    else
      v28 = 0;
    LODWORD(buf) = 67109632;
    DWORD1(buf) = v12 >> 2;
    WORD4(buf) = 1024;
    *(_DWORD *)((char *)&buf + 10) = v28;
    HIWORD(buf) = 2048;
    v36 = v14;
    _os_log_debug_impl(&dword_190DAF000, v17, OS_LOG_TYPE_DEBUG, "[add_sparse_mask_for_sparse_kernel] %d %d %.3f\n", (uint8_t *)&buf, 0x18u);
  }

  if (v14 < a4)
    goto LABEL_20;
  if (v10 == v11)
  {
    Espresso::espresso_os_log_subsystem(v18, v19);
    v26 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf) = 0;
      _os_log_error_impl(&dword_190DAF000, v26, OS_LOG_TYPE_ERROR, "[add_sparse_mask_for_sparse_kernel] WARNING: All weights in this layer are zero. Training issue?", (uint8_t *)&buf, 2u);
    }

LABEL_20:
    v13 = 0;
    goto LABEL_21;
  }
  std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&buf, v12 & 0xFFFFFFFC, 1, 1, 1);
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a2, &buf);
  v20 = (std::__shared_weak_count *)*((_QWORD *)&buf + 1);
  if (*((_QWORD *)&buf + 1))
  {
    v21 = (unint64_t *)(*((_QWORD *)&buf + 1) + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  memcpy(*(void **)(*(_QWORD *)a2 + 16), __src, *(int *)(*(_QWORD *)a2 + 8));
  std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&buf, (_DWORD)v30 - (_DWORD)__p, 1, 1, 1);
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a3, &buf);
  v23 = (std::__shared_weak_count *)*((_QWORD *)&buf + 1);
  if (*((_QWORD *)&buf + 1))
  {
    v24 = (unint64_t *)(*((_QWORD *)&buf + 1) + 8);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  memcpy(*(void **)(*(_QWORD *)a3 + 16), __p, v30 - (_BYTE *)__p);
LABEL_21:
  if (__p)
  {
    v30 = __p;
    operator delete(__p);
  }
  if (__src)
  {
    v33 = __src;
    operator delete(__src);
  }
  return v13;
}

void sub_19138098C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::ANECompilerEngine::compress_sparse_weights<unsigned short,4>(uint64_t a1, uint64_t a2, uint64_t a3, float a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int16 *v12;
  uint64_t v13;
  __int16 v14;
  Espresso *v23;
  const char *v24;
  uint64_t v25;
  unsigned int v26;
  void *v31;
  void *v32;
  unint64_t v33;
  uint64_t v34;
  float v35;
  NSObject *v36;
  Espresso *v37;
  const char *v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  NSObject *v45;
  int v47;
  void *__p;
  _BYTE *v49;
  uint64_t v50;
  void *__src;
  _BYTE *v52;
  uint64_t v53;
  __int128 buf;
  double v55;
  uint64_t v56;

  v8 = 0;
  v56 = *MEMORY[0x1E0C80C00];
  __src = 0;
  v52 = 0;
  v53 = 0;
  v49 = 0;
  v50 = 0;
  __p = 0;
  LODWORD(v9) = *(_DWORD *)(*(_QWORD *)a1 + 8);
  do
  {
    v9 = (*(_DWORD *)(*(_QWORD *)a1 + 12 + v8) * v9);
    v8 += 4;
  }
  while (v8 != 12);
  v10 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  if ((_DWORD)v9)
  {
    LODWORD(v11) = 0;
    v12 = *(__int16 **)(*(_QWORD *)a1 + 24);
    v13 = v9;
    do
    {
      v14 = *v12++;
      _H1 = v14;
      __asm { FCVT            S1, H1 }
      _S1 = fabsf(_S1);
      __asm
      {
        FCVT            H1, S1
        FCVT            S1, H1
      }
      if (_S1 <= 0.00001)
        v11 = v11;
      else
        v11 = (v11 + 1);
      --v13;
    }
    while (v13);
  }
  else
  {
    v11 = 0;
  }
  LOBYTE(buf) = 0;
  std::vector<unsigned char>::__append(&__p, ((v9 - 1) >> 3) + 1, &buf);
  std::vector<unsigned short>::resize((char **)&__src, v11);
  if ((_DWORD)v9)
  {
    v25 = 0;
    v26 = 0;
    do
    {
      _H1 = *(_WORD *)(v10 + 2 * v25);
      __asm { FCVT            S2, H1 }
      _S2 = fabsf(_S2);
      __asm
      {
        FCVT            H2, S2
        FCVT            S2, H2
      }
      if (_S2 > 0.00001)
      {
        *((_WORD *)__src + v26++) = _H1;
        *((_BYTE *)__p + (v25 >> 3)) |= 1 << (v25 & 7);
      }
      ++v25;
    }
    while (v9 != v25);
  }
  v32 = __src;
  v31 = v52;
  v33 = v52 - (_BYTE *)__src;
  v34 = (v52 - (_BYTE *)__src) >> 1;
  v35 = 1.0 - (float)((float)(unint64_t)v34 / (float)(int)v9);
  Espresso::espresso_os_log_subsystem(v23, v24);
  v36 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
  {
    if (*(_QWORD *)a1)
      v47 = v9;
    else
      v47 = 0;
    LODWORD(buf) = 67109632;
    DWORD1(buf) = v33 >> 1;
    WORD4(buf) = 1024;
    *(_DWORD *)((char *)&buf + 10) = v47;
    HIWORD(buf) = 2048;
    v55 = v35;
    _os_log_debug_impl(&dword_190DAF000, v36, OS_LOG_TYPE_DEBUG, "[add_sparse_mask_for_sparse_kernel] %d %d %.3f\n", (uint8_t *)&buf, 0x18u);
  }

  if (v35 < a4)
    goto LABEL_33;
  if (v31 == v32)
  {
    Espresso::espresso_os_log_subsystem(v37, v38);
    v45 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf) = 0;
      _os_log_error_impl(&dword_190DAF000, v45, OS_LOG_TYPE_ERROR, "[add_sparse_mask_for_sparse_kernel] WARNING: All weights in this layer are zero. Training issue?", (uint8_t *)&buf, 2u);
    }

LABEL_33:
    v34 = 0;
    goto LABEL_34;
  }
  std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&buf, v33 & 0xFFFFFFFE, 1, 1, 1);
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a2, &buf);
  v39 = (std::__shared_weak_count *)*((_QWORD *)&buf + 1);
  if (*((_QWORD *)&buf + 1))
  {
    v40 = (unint64_t *)(*((_QWORD *)&buf + 1) + 8);
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  memcpy(*(void **)(*(_QWORD *)a2 + 16), __src, *(int *)(*(_QWORD *)a2 + 8));
  std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&buf, (_DWORD)v49 - (_DWORD)__p, 1, 1, 1);
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a3, &buf);
  v42 = (std::__shared_weak_count *)*((_QWORD *)&buf + 1);
  if (*((_QWORD *)&buf + 1))
  {
    v43 = (unint64_t *)(*((_QWORD *)&buf + 1) + 8);
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  memcpy(*(void **)(*(_QWORD *)a3 + 16), __p, v49 - (_BYTE *)__p);
LABEL_34:
  if (__p)
  {
    v49 = __p;
    operator delete(__p);
  }
  if (__src)
  {
    v52 = __src;
    operator delete(__src);
  }
  return v34;
}

void sub_191380D60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::ANECompilerEngine::compress_sparse_weights<unsigned char,4>(uint64_t a1, uint64_t a2, uint64_t a3, float a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  Espresso *v15;
  const char *v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  float v20;
  NSObject *v21;
  Espresso *v22;
  const char *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  NSObject *v30;
  int v32;
  void *__p;
  _BYTE *v34;
  uint64_t v35;
  void *__src;
  char *v37;
  uint64_t v38;
  __int128 buf;
  double v40;
  uint64_t v41;

  v8 = 0;
  v41 = *MEMORY[0x1E0C80C00];
  __src = 0;
  v37 = 0;
  v38 = 0;
  v34 = 0;
  v35 = 0;
  __p = 0;
  LODWORD(v9) = *(_DWORD *)(*(_QWORD *)a1 + 8);
  do
  {
    v9 = (*(_DWORD *)(*(_QWORD *)a1 + 12 + v8) * v9);
    v8 += 4;
  }
  while (v8 != 12);
  v10 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  if ((_DWORD)v9)
  {
    LODWORD(v11) = 0;
    v12 = *(unsigned __int8 **)(*(_QWORD *)a1 + 24);
    v13 = v9;
    do
    {
      if (*v12++)
        v11 = (v11 + 1);
      else
        v11 = v11;
      --v13;
    }
    while (v13);
  }
  else
  {
    v11 = 0;
  }
  LOBYTE(buf) = 0;
  std::vector<unsigned char>::__append(&__p, ((v9 - 1) >> 3) + 1, &buf);
  v16 = (const char *)(v11 - (v37 - (_BYTE *)__src));
  if (v11 <= v37 - (_BYTE *)__src)
  {
    if (v11 < v37 - (_BYTE *)__src)
      v37 = (char *)__src + v11;
  }
  else
  {
    std::vector<signed char>::__append((unint64_t *)&__src, (size_t)v16);
  }
  if ((_DWORD)v9)
  {
    v17 = 0;
    v18 = 0;
    do
    {
      if (*(_BYTE *)(v10 + v17))
      {
        *((_BYTE *)__src + v18++) = *(_BYTE *)(v10 + v17);
        *((_BYTE *)__p + (v17 >> 3)) |= 1 << (v17 & 7);
      }
      ++v17;
    }
    while (v9 != v17);
  }
  v19 = v37 - (_BYTE *)__src;
  v20 = 1.0 - (float)((float)(unint64_t)(v37 - (_BYTE *)__src) / (float)(int)v9);
  Espresso::espresso_os_log_subsystem(v15, v16);
  v21 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
  {
    if (*(_QWORD *)a1)
      v32 = v9;
    else
      v32 = 0;
    LODWORD(buf) = 67109632;
    DWORD1(buf) = v19;
    WORD4(buf) = 1024;
    *(_DWORD *)((char *)&buf + 10) = v32;
    HIWORD(buf) = 2048;
    v40 = v20;
    _os_log_debug_impl(&dword_190DAF000, v21, OS_LOG_TYPE_DEBUG, "[add_sparse_mask_for_sparse_kernel] %d %d %.3f\n", (uint8_t *)&buf, 0x18u);
  }

  if (v20 < a4)
    goto LABEL_37;
  if (!v19)
  {
    Espresso::espresso_os_log_subsystem(v22, v23);
    v30 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf) = 0;
      _os_log_error_impl(&dword_190DAF000, v30, OS_LOG_TYPE_ERROR, "[add_sparse_mask_for_sparse_kernel] WARNING: All weights in this layer are zero. Training issue?", (uint8_t *)&buf, 2u);
    }

LABEL_37:
    v19 = 0;
    goto LABEL_38;
  }
  std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&buf, v19, 1, 1, 1);
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a2, &buf);
  v24 = (std::__shared_weak_count *)*((_QWORD *)&buf + 1);
  if (*((_QWORD *)&buf + 1))
  {
    v25 = (unint64_t *)(*((_QWORD *)&buf + 1) + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  memcpy(*(void **)(*(_QWORD *)a2 + 16), __src, *(int *)(*(_QWORD *)a2 + 8));
  std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&buf, (_DWORD)v34 - (_DWORD)__p, 1, 1, 1);
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a3, &buf);
  v27 = (std::__shared_weak_count *)*((_QWORD *)&buf + 1);
  if (*((_QWORD *)&buf + 1))
  {
    v28 = (unint64_t *)(*((_QWORD *)&buf + 1) + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  memcpy(*(void **)(*(_QWORD *)a3 + 16), __p, v34 - (_BYTE *)__p);
LABEL_38:
  if (__p)
  {
    v34 = __p;
    operator delete(__p);
  }
  if (__src)
  {
    v37 = (char *)__src;
    operator delete(__src);
  }
  return v19;
}

void sub_191381104(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::ANECompilerEngine::compress_sparse_weights<signed char,4>(uint64_t a1, uint64_t a2, uint64_t a3, float a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  int v14;
  Espresso *v15;
  const char *v16;
  uint64_t v17;
  unsigned int v18;
  char v19;
  uint64_t v20;
  float v21;
  NSObject *v22;
  Espresso *v23;
  const char *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  NSObject *v31;
  int v33;
  void *__p;
  _BYTE *v35;
  uint64_t v36;
  void *__src;
  char *v38;
  uint64_t v39;
  __int128 buf;
  double v41;
  uint64_t v42;

  v8 = 0;
  v42 = *MEMORY[0x1E0C80C00];
  __src = 0;
  v38 = 0;
  v39 = 0;
  v35 = 0;
  v36 = 0;
  __p = 0;
  LODWORD(v9) = *(_DWORD *)(*(_QWORD *)a1 + 8);
  do
  {
    v9 = (*(_DWORD *)(*(_QWORD *)a1 + 12 + v8) * v9);
    v8 += 4;
  }
  while (v8 != 12);
  v10 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  if ((_DWORD)v9)
  {
    LODWORD(v11) = 0;
    v12 = *(char **)(*(_QWORD *)a1 + 24);
    v13 = v9;
    do
    {
      v14 = *v12++;
      if (fabsf((float)v14) <= 0.00001)
        v11 = v11;
      else
        v11 = (v11 + 1);
      --v13;
    }
    while (v13);
  }
  else
  {
    v11 = 0;
  }
  LOBYTE(buf) = 0;
  std::vector<unsigned char>::__append(&__p, ((v9 - 1) >> 3) + 1, &buf);
  v16 = (const char *)(v11 - (v38 - (_BYTE *)__src));
  if (v11 <= v38 - (_BYTE *)__src)
  {
    if (v11 < v38 - (_BYTE *)__src)
      v38 = (char *)__src + v11;
  }
  else
  {
    std::vector<signed char>::__append((unint64_t *)&__src, (size_t)v16);
  }
  if ((_DWORD)v9)
  {
    v17 = 0;
    v18 = 0;
    do
    {
      v19 = *(_BYTE *)(v10 + v17);
      if (fabsf((float)v19) > 0.00001)
      {
        *((_BYTE *)__src + v18++) = v19;
        *((_BYTE *)__p + (v17 >> 3)) |= 1 << (v17 & 7);
      }
      ++v17;
    }
    while (v9 != v17);
  }
  v20 = v38 - (_BYTE *)__src;
  v21 = 1.0 - (float)((float)(unint64_t)(v38 - (_BYTE *)__src) / (float)(int)v9);
  Espresso::espresso_os_log_subsystem(v15, v16);
  v22 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
  {
    if (*(_QWORD *)a1)
      v33 = v9;
    else
      v33 = 0;
    LODWORD(buf) = 67109632;
    DWORD1(buf) = v20;
    WORD4(buf) = 1024;
    *(_DWORD *)((char *)&buf + 10) = v33;
    HIWORD(buf) = 2048;
    v41 = v21;
    _os_log_debug_impl(&dword_190DAF000, v22, OS_LOG_TYPE_DEBUG, "[add_sparse_mask_for_sparse_kernel] %d %d %.3f\n", (uint8_t *)&buf, 0x18u);
  }

  if (v21 < a4)
    goto LABEL_37;
  if (!v20)
  {
    Espresso::espresso_os_log_subsystem(v23, v24);
    v31 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf) = 0;
      _os_log_error_impl(&dword_190DAF000, v31, OS_LOG_TYPE_ERROR, "[add_sparse_mask_for_sparse_kernel] WARNING: All weights in this layer are zero. Training issue?", (uint8_t *)&buf, 2u);
    }

LABEL_37:
    v20 = 0;
    goto LABEL_38;
  }
  std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&buf, v20, 1, 1, 1);
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a2, &buf);
  v25 = (std::__shared_weak_count *)*((_QWORD *)&buf + 1);
  if (*((_QWORD *)&buf + 1))
  {
    v26 = (unint64_t *)(*((_QWORD *)&buf + 1) + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  memcpy(*(void **)(*(_QWORD *)a2 + 16), __src, *(int *)(*(_QWORD *)a2 + 8));
  std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&buf, (_DWORD)v35 - (_DWORD)__p, 1, 1, 1);
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a3, &buf);
  v28 = (std::__shared_weak_count *)*((_QWORD *)&buf + 1);
  if (*((_QWORD *)&buf + 1))
  {
    v29 = (unint64_t *)(*((_QWORD *)&buf + 1) + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  memcpy(*(void **)(*(_QWORD *)a3 + 16), __p, v35 - (_BYTE *)__p);
LABEL_38:
  if (__p)
  {
    v35 = __p;
    operator delete(__p);
  }
  if (__src)
  {
    v38 = (char *)__src;
    operator delete(__src);
  }
  return v20;
}

void sub_1913814D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

void std::vector<unsigned char>::__append(_QWORD *a1, unint64_t a2, _BYTE *a3)
{
  unint64_t v4;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  unint64_t v9;
  unint64_t v10;
  size_t v11;
  void *v12;
  _BYTE *v13;
  char *v14;
  char *v15;
  _BYTE *v16;
  _BYTE *v17;
  char v18;

  v4 = a2;
  v7 = (_BYTE *)a1[1];
  v6 = a1[2];
  if (v6 - (uint64_t)v7 >= a2)
  {
    if (a2)
    {
      v13 = &v7[a2];
      do
      {
        *v7++ = *a3;
        --v4;
      }
      while (v4);
      v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = &v7[-*a1];
    v9 = (unint64_t)&v8[a2];
    if ((uint64_t)&v8[a2] < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v10 = v6 - *a1;
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x3FFFFFFFFFFFFFFFLL)
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
      v12 = operator new(v11);
    else
      v12 = 0;
    v14 = &v8[(_QWORD)v12];
    v15 = &v8[(_QWORD)v12 + v4];
    v16 = &v8[(_QWORD)v12];
    do
    {
      *v16++ = *a3;
      --v4;
    }
    while (v4);
    v17 = (_BYTE *)*a1;
    if (v7 != (_BYTE *)*a1)
    {
      do
      {
        v18 = *--v7;
        *--v14 = v18;
      }
      while (v7 != v17);
      v7 = (_BYTE *)*a1;
    }
    *a1 = v14;
    a1[1] = v15;
    a1[2] = (char *)v12 + v11;
    if (v7)
      operator delete(v7);
  }
}

void std::vector<unsigned short>::resize(char **a1, unint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  __int16 v18;
  char *v19;

  v3 = *a1;
  v4 = a1[1];
  v5 = (v4 - *a1) >> 1;
  if (a2 <= v5)
  {
    if (a2 >= v5)
      return;
    v19 = &v3[2 * a2];
    goto LABEL_16;
  }
  v6 = a2 - v5;
  v7 = a1[2];
  if (a2 - v5 <= (v7 - v4) >> 1)
  {
    bzero(a1[1], 2 * v6);
    v19 = &v4[2 * v6];
LABEL_16:
    a1[1] = v19;
    return;
  }
  if ((a2 & 0x8000000000000000) != 0)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  v8 = v7 - v3;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v8 >= 0x7FFFFFFFFFFFFFFELL)
    v10 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v10 = v9;
  v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v10);
  v12 = *a1;
  v13 = a1[1];
  v14 = &v11[2 * v5];
  v16 = &v11[2 * v15];
  bzero(v14, 2 * v6);
  v17 = &v14[2 * v6];
  while (v13 != v12)
  {
    v18 = *((_WORD *)v13 - 1);
    v13 -= 2;
    *((_WORD *)v14 - 1) = v18;
    v14 -= 2;
  }
  *a1 = v14;
  a1[1] = v17;
  a1[2] = v16;
  if (v12)
    operator delete(v12);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(uint64_t a1)
{
  if (a1 < 0)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(2 * a1);
}

void Espresso::compress_sparse_kernel<float>(float *a1, unsigned int a2, _QWORD *a3, _QWORD *a4)
{
  unint64_t v8;
  uint64_t v9;
  float *v10;
  float v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int v15;
  float v16;
  char v17;

  if (a2)
  {
    LODWORD(v8) = 0;
    v9 = a2;
    v10 = a1;
    do
    {
      v11 = *v10++;
      if (fabsf(v11) <= 0.00001)
        v8 = v8;
      else
        v8 = (v8 + 1);
      --v9;
    }
    while (v9);
  }
  else
  {
    v8 = 0;
  }
  v12 = ((a2 - 1) >> 3) + 1;
  v17 = 0;
  v13 = a3[1] - *a3;
  if (v12 <= v13)
  {
    if (v12 < v13)
      a3[1] = *a3 + v12;
  }
  else
  {
    std::vector<unsigned char>::__append(a3, v12 - v13, &v17);
  }
  std::vector<float>::resize(a4, v8);
  if (a2)
  {
    v14 = 0;
    v15 = 0;
    do
    {
      v16 = a1[v14];
      if (fabsf(v16) > 0.00001)
      {
        *(float *)(*a4 + 4 * v15++) = v16;
        *(_BYTE *)(*a3 + (v14 >> 3)) |= 1 << (v14 & 7);
      }
      ++v14;
    }
    while (a2 != v14);
  }
}

void Espresso::compress_dilated_conv_sparse_kernel_mask<unsigned short>(uint64_t *a1, _DWORD *a2, uint64_t a3)
{
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  unsigned int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  int v22;

  v5 = *(__int16 *)(a3 + 96);
  if (v5 <= 1)
    v6 = 1;
  else
    v6 = *(__int16 *)(a3 + 96);
  if (v5 > 1)
    v7 = (*(_DWORD *)(a3 + 48) - 1) * v5 + 1;
  else
    v7 = *(_DWORD *)(a3 + 48);
  v8 = *(__int16 *)(a3 + 98);
  if (v8 > 1)
    v9 = (*(_DWORD *)(a3 + 52) - 1) * v8 + 1;
  else
    v9 = *(_DWORD *)(a3 + 52);
  v10 = v9 * v7;
  std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(a1, ((a2[5] * a2[4] * v9 * v7 - 1) >> 3) + 1, 1, 1, 1);
  v11 = a2[5] * a2[4];
  if (v11 >= 1)
  {
    v12 = 0;
    v13 = 0;
    v14 = a2[2];
    v15 = a2[3];
    if (v8 <= 1)
      v16 = 1;
    else
      v16 = v8;
    v17 = v7 * v16;
    do
    {
      if (v15 >= 1)
      {
        v18 = 0;
        v19 = v12;
        do
        {
          if (v14 >= 1)
          {
            v20 = *a1;
            v21 = v19;
            v22 = v14;
            do
            {
              *(_BYTE *)(*(_QWORD *)(v20 + 16) + ((unint64_t)v21 >> 3)) |= 1 << (v21 & 7);
              v21 += v6;
              --v22;
            }
            while (v22);
          }
          ++v18;
          v19 += v17;
        }
        while (v18 != v15);
      }
      ++v13;
      v12 += v10;
    }
    while (v13 != v11);
  }
}

uint64_t Espresso::blob<unsigned char,2>::~blob(uint64_t a1, void *a2)
{
  void *v3;

  *(_QWORD *)a1 = &off_1E2DA1270;
  if (*(_BYTE *)(a1 + 24))
  {
    v3 = *(void **)(a1 + 16);
    if (v3)
    {
      Espresso::on_dealloc(*(Espresso **)(a1 + 16), a2);
      free(v3);
    }
  }
  *(_QWORD *)(a1 + 16) = 0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 48);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 32);
  return a1;
}

void Espresso::blob<unsigned char,2>::~blob(uint64_t a1, void *a2)
{
  void *v3;

  *(_QWORD *)a1 = &off_1E2DA1270;
  if (*(_BYTE *)(a1 + 24))
  {
    v3 = *(void **)(a1 + 16);
    if (v3)
    {
      Espresso::on_dealloc(*(Espresso **)(a1 + 16), a2);
      free(v3);
    }
  }
  *(_QWORD *)(a1 + 16) = 0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 48);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 32);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::blob<unsigned char,2>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBED88;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::blob<unsigned char,2>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBED88;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::blob<unsigned char,2>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::convolution_kernel *>(Espresso::ANECompilerEngine::convolution_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(std::string const&)#1}::operator()(const void ***a1, uint64_t *a2)
{
  Espresso::quantized_weights_helper **v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  Espresso::ANECompilerEngine::final_anec_weights_t *v7;
  char *v8;
  Espresso::ANECompilerEngine::ane_kernel *v9;
  unint64_t *v10;
  unint64_t v11;
  Espresso *v12;
  const char *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  NSObject *v16;
  Espresso::ANECompilerEngine::compiler::build_state_t *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  void *v23;
  void *v24;
  uint64_t weights_file_index;
  void *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  _BYTE buf[22];
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v4 = (Espresso::quantized_weights_helper **)**a1;
  if (v4
  {
    Espresso::quantized_weights_helper::dequantize_to_float16_2d(v4[59], buf);
  }
  else
  {
    Espresso::quantized_weights_helper::dequantize_to_float16_4d(v4[59], buf);
  }
  v6 = *(_QWORD *)buf;
  v5 = *(std::__shared_weak_count **)&buf[8];
  v36 = *(_QWORD *)buf;
  v37 = *(std::__shared_weak_count **)&buf[8];
  v7 = (Espresso::ANECompilerEngine::final_anec_weights_t *)a1[1];
  v8 = (char *)**a1;
  if (v8)
    v9 = (Espresso::ANECompilerEngine::ane_kernel *)(v8 + 560);
  else
    v9 = 0;
  v34 = *(_QWORD *)buf;
  v35 = *(_QWORD *)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v10 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v7 + 20, v6, (uint64_t)v5);
  Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_f16(v7, v9, *(void **)(v6 + 16));
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  Espresso::espresso_os_log_subsystem(v12, v13);
  v16 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
  {
    if (*((char *)a2 + 23) >= 0)
      v32 = a2;
    else
      v32 = (uint64_t *)*a2;
    v33 = *(int *)(v36 + 8);
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v32;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v33;
    _os_log_debug_impl(&dword_190DAF000, v16, OS_LOG_TYPE_DEBUG, "[ANEC/handle_quantized_weights] Bloating (%s) W: %zu", buf, 0x16u);
  }

  v17 = (Espresso::ANECompilerEngine::compiler::build_state_t *)((char *)*a1[2] + 128);
  if (v37)
  {
    v18 = (unint64_t *)&v37->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v20 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v17, *(const unsigned __int8 **)(v36 + 16), *(int *)(v36 + 8));
  if (v37)
  {
    v21 = (unint64_t *)&v37->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v20, v36, v37, v34, v35);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend((id)*a1[3], "setObject:forKeyedSubscript:", v23, CFSTR("KernelOffset"));

  objc_msgSend((id)*a1[3], "setObject:forKeyedSubscript:", CFSTR("Float16"), CFSTR("KernelType"));
  v24 = (void *)MEMORY[0x1E0CB37E8];
  if (*(_BYTE *)a1[4])
    weights_file_index = 0;
  else
  objc_msgSend(v24, "numberWithUnsignedLong:", weights_file_index);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend((id)*a1[3], "setObject:forKeyedSubscript:", v26, CFSTR("KernelIndex"));

  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = 0;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](*((_QWORD *)**a1 + 59) + 80, (__int128 *)buf);
  v27 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v28 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  if (v37)
  {
    v30 = (unint64_t *)&v37->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
}

void sub_191381E10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void Espresso::throw_exception_selector<Espresso::unsupported_configuration_error>(const char *a1)
{
  Espresso::throw_exception<Espresso::unsupported_configuration_error>(a1);
}

void Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_s8(Espresso::ANECompilerEngine::final_anec_weights_t *a1, Espresso::ANECompilerEngine::ane_kernel *a2, uint64_t *a3)
{
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)a1 + 20, *a3, a3[1]);
  Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_s8(a1, a2, *(void **)(*a3 + 16));
}

void Espresso::quantized_weights_helper::linear_quantization_data::~linear_quantization_data(Espresso::quantized_weights_helper::linear_quantization_data *this)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 32);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 16);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this);
}

void std::__function::__func<void Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::convolution_kernel *>(Espresso::ANECompilerEngine::convolution_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(unsigned char const*,unsigned long)#1},std::allocator<void Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::convolution_kernel *>(Espresso::ANECompilerEngine::convolution_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(unsigned char const*,unsigned long)#1}>,std::pair<int,unsigned long> ()(unsigned char const*,unsigned long)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<void Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::convolution_kernel *>(Espresso::ANECompilerEngine::convolution_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(unsigned char const*,unsigned long)#1},std::allocator<void Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::convolution_kernel *>(Espresso::ANECompilerEngine::convolution_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(unsigned char const*,unsigned long)#1}>,std::pair<int,unsigned long> ()(unsigned char const*,unsigned long)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DB1608;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::convolution_kernel *>(Espresso::ANECompilerEngine::convolution_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(unsigned char const*,unsigned long)#1},std::allocator<void Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::convolution_kernel *>(Espresso::ANECompilerEngine::convolution_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(unsigned char const*,unsigned long)#1}>,std::pair<int,unsigned long> ()(unsigned char const*,unsigned long)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DB1608;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::convolution_kernel *>(Espresso::ANECompilerEngine::convolution_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(unsigned char const*,unsigned long)#1},std::allocator<void Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::convolution_kernel *>(Espresso::ANECompilerEngine::convolution_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(unsigned char const*,unsigned long)#1}>,std::pair<int,unsigned long> ()(unsigned char const*,unsigned long)>::operator()(uint64_t a1, const unsigned __int8 **a2, size_t *a3)
{
  unsigned int v4;

  v4 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler::build_state_t *)(*(_QWORD *)(a1 + 8) + 128), *a2, *a3);
  if (!*(_BYTE *)(*(_QWORD *)(a1 + 8) + 552))
  return v4;
}

uint64_t std::__function::__func<void Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::convolution_kernel *>(Espresso::ANECompilerEngine::convolution_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(unsigned char const*,unsigned long)#1},std::allocator<void Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::convolution_kernel *>(Espresso::ANECompilerEngine::convolution_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(unsigned char const*,unsigned long)#1}>,std::pair<int,unsigned long> ()(unsigned char const*,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN8Espresso17ANECompilerEngine24handle_quantized_weightsIPNS0_18convolution_kernelEEEvT_PNS0_8compilerENSt3__110shared_ptrINS_3netEEENS8_INS_24quantized_weights_helperEEEP19NSMutableDictionaryRNS0_20final_anec_weights_tEEUlPKhmE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::convolution_kernel *>(Espresso::ANECompilerEngine::convolution_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(unsigned char const*,unsigned long)#1},std::allocator<void Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::convolution_kernel *>(Espresso::ANECompilerEngine::convolution_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(unsigned char const*,unsigned long)#1}>,std::pair<int,unsigned long> ()(unsigned char const*,unsigned long)>::target_type()
{
}

uint64_t Espresso::blob<signed char,4>::~blob(uint64_t a1, void *a2)
{
  void *v3;

  *(_QWORD *)a1 = &off_1E2DA1150;
  if (*(_BYTE *)(a1 + 32))
  {
    v3 = *(void **)(a1 + 24);
    if (v3)
    {
      Espresso::on_dealloc(*(Espresso **)(a1 + 24), a2);
      free(v3);
    }
  }
  *(_QWORD *)(a1 + 24) = 0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 56);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 40);
  return a1;
}

void Espresso::blob<signed char,4>::~blob(uint64_t a1, void *a2)
{
  void *v3;

  *(_QWORD *)a1 = &off_1E2DA1150;
  if (*(_BYTE *)(a1 + 32))
  {
    v3 = *(void **)(a1 + 24);
    if (v3)
    {
      Espresso::on_dealloc(*(Espresso **)(a1 + 24), a2);
      free(v3);
    }
  }
  *(_QWORD *)(a1 + 24) = 0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 56);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 40);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::blob<signed char,4>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBEB90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::blob<signed char,4>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBEB90;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::blob<signed char,4>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::dilated_conv_bloated_weights<signed char>(_QWORD *a1, uint64_t a2, int a3, int a4, uint64_t a5)
{
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  char v25;

  std::allocate_shared[abi:ne180100]<Espresso::blob<signed char,4>,std::allocator<Espresso::blob<signed char,4>>,int &,int &,int &,int &,void>(a1, a3, a4, *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 20));
  if (*(__int16 *)(a5 + 98) <= 1)
    v8 = 1;
  else
    v8 = *(__int16 *)(a5 + 98);
  v9 = *(_DWORD *)(a2 + 20) * *(_DWORD *)(a2 + 16);
  if (v9 >= 1)
  {
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = *a1;
    v14 = *(_DWORD *)(*a1 + 8);
    v16 = *(unsigned int *)(a2 + 8);
    v15 = *(_DWORD *)(a2 + 12);
    v17 = *(__int16 *)(a5 + 96);
    if (v17 <= 1)
      v17 = 1;
    v18 = *(_DWORD *)(*a1 + 12) * v14;
    v19 = v14 * v8;
    do
    {
      if (v15 >= 1)
      {
        v20 = 0;
        v21 = v10;
        do
        {
          if ((int)v16 >= 1)
          {
            v22 = v12;
            v23 = v21;
            v24 = v16;
            do
            {
              v25 = *(_BYTE *)(*(_QWORD *)(a2 + 24) + v22++);
              *(_BYTE *)(*(_QWORD *)(v13 + 24) + v23) = v25;
              v23 += v17;
              --v24;
            }
            while (v24);
            v12 = v22;
          }
          ++v20;
          v21 += v19;
        }
        while (v20 != v15);
      }
      ++v11;
      v10 += v18;
    }
    while (v11 != v9);
  }
}

void Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_s8(Espresso::ANECompilerEngine::final_anec_weights_t *this, Espresso::ANECompilerEngine::ane_kernel *a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;

  v7 = *a3;
  v6 = a3[1];
  if (v6)
  {
    v8 = (unint64_t *)(v6 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = (std::__shared_weak_count *)*((_QWORD *)this + 23);
  *((_QWORD *)this + 22) = v7;
  *((_QWORD *)this + 23) = v6;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_s8(this, a2, *(void **)(*a3 + 24));
}

void Espresso::dilated_conv_bloated_weights<float>(_QWORD *a1, uint64_t a2, int a3, int a4, uint64_t a5)
{
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;

  std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(a1, a3, a4, *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 20));
  if (*(__int16 *)(a5 + 98) <= 1)
    v8 = 1;
  else
    v8 = *(__int16 *)(a5 + 98);
  v9 = *(_DWORD *)(a2 + 20) * *(_DWORD *)(a2 + 16);
  if (v9 >= 1)
  {
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = *a1;
    v14 = *(_DWORD *)(*a1 + 8);
    v16 = *(unsigned int *)(a2 + 8);
    v15 = *(_DWORD *)(a2 + 12);
    v17 = *(__int16 *)(a5 + 96);
    if (v17 <= 1)
      v17 = 1;
    v18 = *(_DWORD *)(*a1 + 12) * v14;
    v19 = v14 * v8;
    do
    {
      if (v15 >= 1)
      {
        v20 = 0;
        v21 = v10;
        do
        {
          if ((int)v16 >= 1)
          {
            v22 = *(_QWORD *)(a2 + 24);
            v23 = *(_QWORD *)(v13 + 24);
            v24 = v12;
            v25 = v21;
            v26 = v16;
            do
            {
              v27 = *(_DWORD *)(v22 + 4 * v24++);
              *(_DWORD *)(v23 + 4 * v25) = v27;
              v25 += v17;
              --v26;
            }
            while (v26);
            v12 = v24;
          }
          ++v20;
          v21 += v19;
        }
        while (v20 != v15);
      }
      ++v11;
      v10 += v18;
    }
    while (v11 != v9);
  }
}

void Espresso::dilated_conv_bloated_weights<unsigned short>(_QWORD *a1, uint64_t a2, int a3, int a4, uint64_t a5)
{
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  __int16 v27;

  std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned short,4>,std::allocator<Espresso::blob<unsigned short,4>>,int &,int &,int &,int &,void>(a1, a3, a4, *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 20));
  if (*(__int16 *)(a5 + 98) <= 1)
    v8 = 1;
  else
    v8 = *(__int16 *)(a5 + 98);
  v9 = *(_DWORD *)(a2 + 20) * *(_DWORD *)(a2 + 16);
  if (v9 >= 1)
  {
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = *a1;
    v14 = *(_DWORD *)(*a1 + 8);
    v16 = *(unsigned int *)(a2 + 8);
    v15 = *(_DWORD *)(a2 + 12);
    v17 = *(__int16 *)(a5 + 96);
    if (v17 <= 1)
      v17 = 1;
    v18 = *(_DWORD *)(*a1 + 12) * v14;
    v19 = v14 * v8;
    do
    {
      if (v15 >= 1)
      {
        v20 = 0;
        v21 = v10;
        do
        {
          if ((int)v16 >= 1)
          {
            v22 = *(_QWORD *)(a2 + 24);
            v23 = *(_QWORD *)(v13 + 24);
            v24 = v12;
            v25 = v21;
            v26 = v16;
            do
            {
              v27 = *(_WORD *)(v22 + 2 * v24++);
              *(_WORD *)(v23 + 2 * v25) = v27;
              v25 += v17;
              --v26;
            }
            while (v26);
            v12 = v24;
          }
          ++v20;
          v21 += v19;
        }
        while (v20 != v15);
      }
      ++v11;
      v10 += v18;
    }
    while (v11 != v9);
  }
}

void std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned short,4>,std::allocator<Espresso::blob<unsigned short,4>>,int &,int &,int &,int &,void>(_QWORD *a1, int a2, int a3, int a4, int a5)
{
  _QWORD *v10;
  Espresso *v11;
  void *v12;

  v10 = operator new(0x60uLL);
  *v10 = &off_1E2DBF060;
  v10[1] = 0;
  v10[3] = &off_1E2DA1410;
  *((_OWORD *)v10 + 4) = 0u;
  v10[2] = 0;
  *((_OWORD *)v10 + 5) = 0u;
  *((_DWORD *)v10 + 8) = a2;
  *((_DWORD *)v10 + 9) = a3;
  *((_DWORD *)v10 + 10) = a4;
  *((_DWORD *)v10 + 11) = a5;
  v11 = (Espresso *)(2 * a2 * (uint64_t)a3 * a4 * a5);
  v12 = Espresso::kern_alloc_uninitialized(v11);
  bzero(v12, (size_t)v11);
  v10[6] = v12;
  *((_BYTE *)v10 + 56) = 1;
  *a1 = v10 + 3;
  a1[1] = v10;
}

void sub_191382538(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;
  void *v4;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v1[3].__shared_owners_);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v2);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<Espresso::blob<signed char,4>,std::allocator<Espresso::blob<signed char,4>>,int &,int &,int &,int &,void>(_QWORD *a1, int a2, int a3, int a4, int a5)
{
  _QWORD *v10;
  size_t v11;
  void *v12;

  v10 = operator new(0x60uLL);
  v10[1] = 0;
  v10[2] = 0;
  *v10 = &off_1E2DBEB90;
  v10[3] = &off_1E2DA1150;
  *((_OWORD *)v10 + 4) = 0u;
  *((_OWORD *)v10 + 5) = 0u;
  *((_DWORD *)v10 + 8) = a2;
  *((_DWORD *)v10 + 9) = a3;
  *((_DWORD *)v10 + 10) = a4;
  *((_DWORD *)v10 + 11) = a5;
  v11 = a3 * (uint64_t)a2 * a4 * a5;
  v12 = Espresso::kern_alloc_uninitialized((Espresso *)v11);
  bzero(v12, v11);
  v10[6] = v12;
  *((_BYTE *)v10 + 56) = 1;
  *a1 = v10 + 3;
  a1[1] = v10;
}

void sub_191382620(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;
  void *v4;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v1[3].__shared_owners_);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v2);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(unint64_t a1)
{
  if (a1 >= 0x1C71C71C71C71C8)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(144 * a1);
}

void std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  __int128 *v4;
  __int128 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = (__int128 *)*a1;
  v4 = (__int128 *)a1[1];
  v6 = a2[1];
  while (v4 != v5)
  {
    v6 -= 144;
    v4 -= 9;
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t>(v6, v4);
  }
  a2[1] = v6;
  v7 = *a1;
  *a1 = v6;
  a2[1] = v7;
  v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
}

uint64_t std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 144;
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::destroy[abi:ne180100](i - 144);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

__n128 std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t>(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  uint64_t v5;

  v2 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v2;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = *(__int128 *)((char *)a2 + 24);
  *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 3) = 0;
  *((_QWORD *)a2 + 4) = 0;
  *((_QWORD *)a2 + 5) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 48) = a2[3];
  *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 6) = 0;
  *((_QWORD *)a2 + 7) = 0;
  *((_QWORD *)a2 + 8) = 0;
  *(_DWORD *)(a1 + 72) = *((_DWORD *)a2 + 18);
  v3 = a2[5];
  *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
  *(_OWORD *)(a1 + 80) = v3;
  *((_QWORD *)a2 + 11) = 0;
  *((_QWORD *)a2 + 12) = 0;
  *((_QWORD *)a2 + 10) = 0;
  *(_DWORD *)(a1 + 104) = *((_DWORD *)a2 + 26);
  result = (__n128)a2[7];
  *((_QWORD *)a2 + 14) = 0;
  *((_QWORD *)a2 + 15) = 0;
  *(__n128 *)(a1 + 112) = result;
  v5 = *((_QWORD *)a2 + 16);
  *((_QWORD *)a2 + 16) = 0;
  *(_QWORD *)(a1 + 128) = v5;
  *(_QWORD *)(a1 + 136) = *((_QWORD *)a2 + 17);
  return result;
}

BOOL Espresso::ANECompilerEngine::validate_size(int a1, int a2, uint64_t a3, uint64_t a4, int64x2_t *a5, std::__shared_weak_count *a6)
{
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::string *v11;
  __int128 v12;
  std::string *v13;
  std::string::size_type size;
  std::string *v15;
  __int128 v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  std::string::size_type v20;
  std::string *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::string v29;
  std::string v30;
  std::string v31;
  std::string v32;
  std::string v33;
  std::string v34;
  std::string __p;
  std::string v36;
  uint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  int64x2_t *v40;
  std::__shared_weak_count *v41;
  void **v42;

  if (a1 > a2)
  {
    v40 = a5;
    v41 = a6;
    if (a6)
    {
      p_shared_owners = (unint64_t *)&a6->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
    }
    std::operator+<char>();
    v11 = std::string::append(&v31, " = ");
    v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v32.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v30, a1);
    if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v13 = &v30;
    else
      v13 = (std::string *)v30.__r_.__value_.__r.__words[0];
    if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v30.__r_.__value_.__r.__words[2]);
    else
      size = v30.__r_.__value_.__l.__size_;
    v15 = std::string::append(&v32, (const std::string::value_type *)v13, size);
    v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v33.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    v17 = std::string::append(&v33, " > ");
    v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v34.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v29, a2);
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v19 = &v29;
    else
      v19 = (std::string *)v29.__r_.__value_.__r.__words[0];
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v20 = HIBYTE(v29.__r_.__value_.__r.__words[2]);
    else
      v20 = v29.__r_.__value_.__l.__size_;
    v21 = std::string::append(&v34, (const std::string::value_type *)v19, v20);
    __p = *v21;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v36, (__int128 *)&__p, a4, 0);
    Espresso::emit_kernel_validation_warning(&v40, (Espresso::base_kernel::validate_for_engine_warning_t *)&v36);
    v22 = v39;
    if (v39)
    {
      v23 = (unint64_t *)&v39->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    v42 = (void **)&v38;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v42);
    v42 = (void **)&v37;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v42);
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v36.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v34.__r_.__value_.__l.__data_);
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v33.__r_.__value_.__l.__data_);
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v30.__r_.__value_.__l.__data_);
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v32.__r_.__value_.__l.__data_);
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v31.__r_.__value_.__l.__data_);
    v25 = v41;
    if (v41)
    {
      v26 = (unint64_t *)&v41->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
  }
  return a1 <= a2;
}

void sub_191382AA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *__p,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  uint64_t v54;

  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)(v54 - 184));
  if (a54 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  if (a47 < 0)
    operator delete(a42);
  if (a40 < 0)
    operator delete(a35);
  if (a21 < 0)
    operator delete(a16);
  if (a33 < 0)
    operator delete(a28);
  if (a27 < 0)
    operator delete(a22);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v54 - 72);
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::violations_from_alternates<ANECCrossCorrelationLayerDescAlternate>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  CFTypeRef *v7;
  unint64_t *v8;
  unint64_t v9;
  CFTypeRef *v10;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a2)
  {
    v6 = 0;
    v7 = (CFTypeRef *)(a3 + 8);
    do
    {
      v8 = (unint64_t *)(a3 + 696 * v6);
      if (*v8)
      {
        v9 = 0;
        v10 = v7;
        do
        {
          std::__hash_table<__CFString const*,Espresso::ANECompilerEngine::CFStringHasher,Espresso::ANECompilerEngine::CFStringEqualWrapper,std::allocator<__CFString const*>>::__emplace_unique_key_args<__CFString const*,__CFString const* const&>((float *)a1, v10, v10);
          ++v9;
          ++v10;
        }
        while (v9 < *v8);
      }
      ++v6;
      v7 += 87;
    }
    while (v6 != a2);
  }
}

void sub_191382C20(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<__CFString const*,Espresso::ANECompilerEngine::CFStringHasher,Espresso::ANECompilerEngine::CFStringEqualWrapper,std::allocator<__CFString const*>>::__emplace_unique_key_args<__CFString const*,__CFString const* const&>(float *a1, CFTypeRef *a2, _QWORD *a3)
{
  CFHashCode v3;
  CFHashCode v7;
  CFHashCode v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  uint64_t ***v12;
  uint64_t **i;
  unint64_t v14;
  _QWORD *v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  int8x8_t prime;
  void *v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  uint8x8_t v27;
  unint64_t v28;
  uint8x8_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  unint64_t v35;
  _QWORD *v36;

  v7 = CFHash(*a2);
  v8 = v7;
  v9 = *((_QWORD *)a1 + 1);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v12 = *(uint64_t ****)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      for (i = *v12; i; i = (uint64_t **)*i)
      {
        v14 = (unint64_t)i[1];
        if (v14 == v8)
        {
          if (CFEqual(i[2], *a2) == 1)
            return;
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9)
              v14 %= v9;
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3)
            break;
        }
      }
    }
  }
  v15 = operator new(0x18uLL);
  *v15 = 0;
  v15[1] = v8;
  v15[2] = *a3;
  v16 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v17 = a1[8];
  if (!v9 || (float)(v17 * (float)v9) < v16)
  {
    v18 = 1;
    if (v9 >= 3)
      v18 = (v9 & (v9 - 1)) != 0;
    v19 = v18 | (2 * v9);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      prime = (int8x8_t)v20;
    else
      prime = (int8x8_t)v19;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v9 = *((_QWORD *)a1 + 1);
    if (*(_QWORD *)&prime > v9)
      goto LABEL_30;
    if (*(_QWORD *)&prime < v9)
    {
      v28 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v9 < 3 || (v29 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
      {
        v28 = std::__next_prime(v28);
      }
      else
      {
        v30 = 1 << -(char)__clz(v28 - 1);
        if (v28 >= 2)
          v28 = v30;
      }
      if (*(_QWORD *)&prime <= v28)
        prime = (int8x8_t)v28;
      if (*(_QWORD *)&prime >= v9)
      {
        v9 = *((_QWORD *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v22 = operator new(8 * *(_QWORD *)&prime);
          v23 = *(_QWORD **)a1;
          *(_QWORD *)a1 = v22;
          if (v23)
            operator delete(v23);
          v24 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v24++) = 0;
          while (*(_QWORD *)&prime != v24);
          v25 = (_QWORD *)*((_QWORD *)a1 + 2);
          if (v25)
          {
            v26 = v25[1];
            v27 = (uint8x8_t)vcnt_s8(prime);
            v27.i16[0] = vaddlv_u8(v27);
            if (v27.u32[0] > 1uLL)
            {
              if (v26 >= *(_QWORD *)&prime)
                v26 %= *(_QWORD *)&prime;
            }
            else
            {
              v26 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v26) = a1 + 4;
            v31 = (_QWORD *)*v25;
            if (*v25)
            {
              do
              {
                v32 = v31[1];
                if (v27.u32[0] > 1uLL)
                {
                  if (v32 >= *(_QWORD *)&prime)
                    v32 %= *(_QWORD *)&prime;
                }
                else
                {
                  v32 &= *(_QWORD *)&prime - 1;
                }
                if (v32 != v26)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v32))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v32) = v25;
                    goto LABEL_55;
                  }
                  *v25 = *v31;
                  *v31 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v32);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v32) = v31;
                  v31 = v25;
                }
                v32 = v26;
LABEL_55:
                v25 = v31;
                v31 = (_QWORD *)*v31;
                v26 = v32;
              }
              while (v31);
            }
          }
          v9 = (unint64_t)prime;
          goto LABEL_59;
        }
        v36 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v36)
          operator delete(v36);
        v9 = 0;
        *((_QWORD *)a1 + 1) = 0;
      }
    }
LABEL_59:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v33 = *(_QWORD **)a1;
  v34 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v34)
  {
    *v15 = *v34;
LABEL_72:
    *v34 = v15;
    goto LABEL_73;
  }
  *v15 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v15;
  v33[v3] = a1 + 4;
  if (*v15)
  {
    v35 = *(_QWORD *)(*v15 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v35 >= v9)
        v35 %= v9;
    }
    else
    {
      v35 &= v9 - 1;
    }
    v34 = (_QWORD *)(*(_QWORD *)a1 + 8 * v35);
    goto LABEL_72;
  }
LABEL_73:
  ++*((_QWORD *)a1 + 3);
}

void sub_191383028(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::deconvolution_kernel::~deconvolution_kernel(Espresso::ANECompilerEngine::deconvolution_kernel *this)
{
  void **v2;

  *(_QWORD *)this = &off_1E2D79180;
  v2 = (void **)((char *)this + 560);
  *((_QWORD *)this + 70) = &unk_1E2D79418;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 792);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 776);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);
  Espresso::generic_convolution_kernel::~generic_convolution_kernel((void **)this);
}

{
  void **v2;

  *(_QWORD *)this = &off_1E2D79180;
  v2 = (void **)((char *)this + 560);
  *((_QWORD *)this + 70) = &unk_1E2D79418;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 792);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 776);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);
  Espresso::generic_convolution_kernel::~generic_convolution_kernel((void **)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANECompilerEngine::deconvolution_kernel::__set_weight_raw_blob(_QWORD *a1, uint64_t *a2, unsigned __int8 *a3, void *a4, unint64_t a5, uint64_t *a6)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  double v15;
  double v16;
  int32x2_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20[2];
  __int128 v21[2];
  void *__p;
  void *v23;

  Espresso::generic_convolution_kernel::__set_weight_raw_blob((uint64_t)a1, a2, a3, a4, a5, a6);
  (*(void (**)(__int128 *__return_ptr, _QWORD *))(*a1 + 632))(v21, a1);
  v11 = (std::__shared_weak_count *)a1[2];
  v20[0] = a1[1];
  v20[1] = (uint64_t)v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  v14 = (*(uint64_t (**)(_QWORD *))(*a1 + 640))(a1);
  Espresso::set_conv_quantized_weight_helper(v15, v16, v17, v14, (unsigned __int8 **)a3, (char *)a4, a5, a6, (uint64_t)(a1 + 59), v21, v20, v14, 1);
  if (v11)
  {
    v18 = (unint64_t *)&v11->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
  {
    v23 = __p;
    operator delete(__p);
  }
  Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob(a1 + 70, (uint64_t *)a3, a4, a5);
}

void sub_191383214(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t Espresso::ANECompilerEngine::deconvolution_kernel::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  if (Espresso::generic_convolution_kernel::supports_weight_key(a1, a2)
    || Espresso::weight_key_supported_by_conv_quantized_weights_helper(a2, 1))
  {
    return 1;
  }
  else
  {
    return Espresso::ANECompilerEngine::ane_kernel::supports_weight_key(a2);
  }
}

const char *Espresso::generic_deconvolution_kernel::kernel_type_str(Espresso::generic_deconvolution_kernel *this)
{
  return "deconvolution";
}

_QWORD *Espresso::ANECompilerEngine::deconvolution_kernel::set_biases(uint64_t a1, uint64_t *a2)
{
  return std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 640), *a2, a2[1]);
}

_QWORD *Espresso::ANECompilerEngine::deconvolution_kernel::set_weights(uint64_t a1, uint64_t *a2)
{
  return std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 776), *a2, a2[1]);
}

void Espresso::ANECompilerEngine::deconvolution_kernel::set_weights()
{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "use set_weights(blob<float,4>::ptr blob");
  __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
}

void sub_1913832E8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t Espresso::ANECompilerEngine::deconvolution_kernel::get_biases@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 648);
  *a2 = *(_QWORD *)(this + 640);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

uint64_t Espresso::ANECompilerEngine::deconvolution_kernel::get_weights@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 784);
  *a2 = *(_QWORD *)(this + 776);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

_QWORD *Espresso::ANECompilerEngine::deconvolution_kernel::set_f16_weights(uint64_t a1, uint64_t *a2)
{
  return std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 792), *a2, a2[1]);
}

uint64_t Espresso::ANECompilerEngine::deconvolution_kernel::get_f16_weights@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 800);
  *a2 = *(_QWORD *)(this + 792);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

void Espresso::ANECompilerEngine::deconvolution_kernel::compile(Espresso::ANECompilerEngine::deconvolution_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v7;
  const Espresso::net *v8;
  std::__shared_weak_count *v9;
  char *v10;
  const void *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  char *v15;
  std::__shared_weak_count *v16;
  __int128 *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  void *v27;
  unint64_t *v28;
  unint64_t v29;
  void *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  const char *v50;
  void *v51;
  std::__shared_weak_count *v52;
  void *v53;
  std::__shared_weak_count *v54;
  _OWORD v55[10];
  uint64_t v56;
  const Espresso::net *v57;
  std::__shared_weak_count *v58;
  unsigned __int8 *v59;
  std::__shared_weak_count *v60;
  const void *v61;
  std::__shared_weak_count *v62;
  const Espresso::net *v63;
  std::__shared_weak_count *v64;
  __int128 *v65;

  v63 = 0;
  v64 = 0;
  v4 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
  if (!v4
    || (v7 = std::__shared_weak_count::lock(v4), (v64 = v7) == 0)
    || (v8 = (const Espresso::net *)*((_QWORD *)a2 + 1), (v63 = v8) == 0))
  {
    v50 = "Inconsistent state: null network";
    goto LABEL_60;
  }
  if (!*((_QWORD *)v8 + 72))
  {
    v50 = "Inconsistent state: blob_storage";
LABEL_60:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v50);
  }
  v9 = v7;
  v59 = (unsigned __int8 *)*((_QWORD *)a3 + 6);
  v10 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v8 + 136, v59, (__int128 **)&v59);
  v11 = (const void *)*((_QWORD *)v10 + 5);
  v12 = (std::__shared_weak_count *)*((_QWORD *)v10 + 6);
  v61 = v11;
  v62 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  v65 = (__int128 *)a3;
  v15 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v8 + 136, (unsigned __int8 *)a3, &v65);
  v17 = (__int128 *)*((_QWORD *)v15 + 5);
  v16 = (std::__shared_weak_count *)*((_QWORD *)v15 + 6);
  v59 = (unsigned __int8 *)v17;
  v60 = v16;
  if (v16)
  {
    v18 = (unint64_t *)&v16->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v57 = v8;
  v58 = v9;
  v20 = (unint64_t *)&v9->__shared_owners_;
  do
    v21 = __ldxr(v20);
  while (__stxr(v21 + 1, v20));
  v22 = *((_OWORD *)this + 28);
  v55[8] = *((_OWORD *)this + 27);
  v55[9] = v22;
  v56 = *((_QWORD *)this + 58);
  v23 = *((_OWORD *)this + 24);
  v55[4] = *((_OWORD *)this + 23);
  v55[5] = v23;
  v24 = *((_OWORD *)this + 26);
  v55[6] = *((_OWORD *)this + 25);
  v55[7] = v24;
  v25 = *((_OWORD *)this + 20);
  v55[0] = *((_OWORD *)this + 19);
  v55[1] = v25;
  v26 = *((_OWORD *)this + 22);
  v55[2] = *((_OWORD *)this + 21);
  v55[3] = v26;
  if (v11
  {
    v53 = v27;
    v54 = v12;
    if (v12)
    {
      v28 = (unint64_t *)&v12->__shared_owners_;
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
    }
    if (!v17)
      goto LABEL_26;
  }
  else
  {
    v53 = 0;
    v54 = 0;
    if (!v17)
    {
LABEL_26:
      v16 = 0;
      v51 = 0;
      v52 = 0;
      goto LABEL_27;
    }
  }
  if (!v30)
    goto LABEL_26;
  v51 = v30;
  v52 = v16;
  if (v16)
  {
    v31 = (unint64_t *)&v16->__shared_owners_;
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
  }
LABEL_27:
  Espresso::ANECompilerEngine::add_conv<Espresso::ANECompilerEngine::deconvolution_kernel *>(this, a2, &v57, (uint64_t)v55, (id *)a3, (uint64_t *)&v53, (uint64_t *)&v51);
  if (v16)
  {
    v33 = (unint64_t *)&v16->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v35 = v54;
  if (v54)
  {
    v36 = (unint64_t *)&v54->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  v38 = v58;
  if (v58)
  {
    v39 = (unint64_t *)&v58->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  v41 = v60;
  if (v60)
  {
    v42 = (unint64_t *)&v60->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  v44 = v62;
  if (v62)
  {
    v45 = (unint64_t *)&v62->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  v47 = v64;
  if (v64)
  {
    v48 = (unint64_t *)&v64->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
}

void sub_1913836F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v11 - 152);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v11 - 136);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v11 - 120);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v11 - 104);
  _Unwind_Resume(a1);
}

uint64_t Espresso::ANECompilerEngine::deconvolution_kernel::weights_helper_weights_shape(Espresso::ANECompilerEngine::deconvolution_kernel *this)
{
  return (*(uint64_t (**)(Espresso::ANECompilerEngine::deconvolution_kernel *))(*(_QWORD *)this + 464))(this);
}

uint64_t Espresso::ANECompilerEngine::deconvolution_kernel::weights_helper_quantization_axis(Espresso::ANECompilerEngine::deconvolution_kernel *this)
{
  return 1;
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::deconvolution_kernel::compile(Espresso::ANECompilerEngine::deconvolution_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
  Espresso::ANECompilerEngine::deconvolution_kernel::compile((Espresso::ANECompilerEngine::deconvolution_kernel *)((char *)this - 560), a2, a3);
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::deconvolution_kernel::~deconvolution_kernel(Espresso::ANECompilerEngine::deconvolution_kernel *this)
{
  void **v2;
  char *v3;

  v2 = (void **)((char *)this - 560);
  *((_QWORD *)this - 70) = &off_1E2D79180;
  *(_QWORD *)this = &unk_1E2D79418;
  v3 = (char *)this + 216;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 232);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v3);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((void **)this);
  Espresso::generic_convolution_kernel::~generic_convolution_kernel(v2);
}

{
  void **v2;
  char *v3;

  v2 = (void **)((char *)this - 560);
  *((_QWORD *)this - 70) = &off_1E2D79180;
  *(_QWORD *)this = &unk_1E2D79418;
  v3 = (char *)this + 216;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 232);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v3);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((void **)this);
  Espresso::generic_convolution_kernel::~generic_convolution_kernel(v2);
  JUMPOUT(0x19401CD90);
}

uint64_t `non-virtual thunk to'Espresso::ANECompilerEngine::deconvolution_kernel::weights_helper_weights_shape(Espresso::ANECompilerEngine::deconvolution_kernel *this)
{
  return (*(uint64_t (**)(char *))(*((_QWORD *)this - 70) + 464))((char *)this - 560);
}

uint64_t `non-virtual thunk to'Espresso::ANECompilerEngine::deconvolution_kernel::weights_helper_quantization_axis(Espresso::ANECompilerEngine::deconvolution_kernel *this)
{
  return 1;
}

void Espresso::ANECompilerEngine::add_conv<Espresso::ANECompilerEngine::deconvolution_kernel *>(_BYTE *a1, _BYTE *a2, const Espresso::net **a3, uint64_t a4, id *a5, uint64_t *a6, uint64_t *a7)
{
  std::__shared_weak_count *v9;
  const Espresso::net *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  const Espresso::net *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  const Espresso::net *v21;
  _QWORD *v22;
  char *v23;
  int v24;
  void *v25;
  int v26;
  int v27;
  int v28;
  _BOOL4 v29;
  int v30;
  _BOOL4 v31;
  int v32;
  int v33;
  _BOOL4 v34;
  void *v36;
  _BYTE *v37;
  _BOOL4 v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  void *v42;
  void *v43;
  std::string *v44;
  std::string *v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  void *v50;
  void *v51;
  void *v52;
  int v53;
  _BYTE *v54;
  const __CFString *v55;
  const NSDictionary *v56;
  float v57;
  float v58;
  _BOOL4 v59;
  id v60;
  void *v61;
  void *v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  int v68;
  uint64_t i;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t j;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  Espresso::ANECompilerEngine::ane_kernel *v79;
  _BOOL4 v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  id v85;
  void *v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  uint64_t v90;
  _BOOL4 v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  void *v101;
  void *v102;
  Espresso::ANECompilerEngine::ane_kernel *v103;
  uint64_t v104;
  unint64_t *v105;
  unint64_t v106;
  int v107;
  uint64_t k;
  char *v109;
  uint64_t v110;
  uint64_t m;
  unint64_t *v112;
  std::string::size_type v113;
  std::string::size_type v114;
  unint64_t *v115;
  unint64_t v116;
  __int128 v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  uint64_t v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  const unsigned __int8 *v135;
  unint64_t v136;
  uint64_t v137;
  unint64_t v138;
  void *v139;
  void *v140;
  uint64_t v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  uint64_t v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  void *v155;
  void *v156;
  uint64_t v157;
  unint64_t *v158;
  unint64_t v159;
  int v160;
  uint64_t n;
  char *v162;
  uint64_t v163;
  uint64_t ii;
  unint64_t *v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  uint64_t v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  std::__shared_weak_count *v173;
  unint64_t *v174;
  unint64_t v175;
  std::__shared_weak_count *v176;
  unint64_t *v177;
  unint64_t v178;
  void *v179;
  void *v180;
  Espresso::ANECompilerEngine::ane_kernel *v181;
  __int128 v182;
  unint64_t *v183;
  unint64_t v184;
  unint64_t *v185;
  unint64_t v186;
  uint64_t v187;
  uint64_t v188;
  int v189;
  char *v190;
  int v191;
  unint64_t *v192;
  void *v193;
  unint64_t v194;
  uint64_t v195;
  unint64_t v196;
  void *v197;
  void *v198;
  uint64_t v199;
  uint64_t v200;
  unint64_t *v201;
  unint64_t v202;
  int v203;
  uint64_t jj;
  char *v205;
  uint64_t v206;
  uint64_t kk;
  unint64_t *v208;
  int v209;
  void *v210;
  uint64_t v211;
  void *v212;
  _BOOL4 v213;
  void *v214;
  Espresso::ANECompilerEngine::compiler::build_state_t *v215;
  uint64_t v216;
  std::__shared_weak_count *v217;
  unint64_t *v218;
  unint64_t v219;
  void *v220;
  unint64_t *v221;
  unint64_t v222;
  __int128 v223;
  unint64_t *v224;
  unint64_t v225;
  uint64_t v226;
  unint64_t *v227;
  unint64_t v228;
  void *v229;
  void *v230;
  uint64_t v231;
  void *v232;
  void *v233;
  std::__shared_weak_count *v234;
  unint64_t *v235;
  unint64_t v236;
  std::__shared_weak_count *v237;
  unint64_t *v238;
  unint64_t v239;
  id v240;
  std::__shared_weak_count *v241;
  unint64_t *v242;
  unint64_t v243;
  uint64_t v244;
  unint64_t *v245;
  unint64_t v246;
  unint64_t *v247;
  unint64_t v248;
  unint64_t *v249;
  unint64_t *v250;
  unint64_t v251;
  unint64_t *v252;
  unint64_t *v253;
  unint64_t v254;
  unint64_t *v255;
  uint64_t v256;
  BOOL v257;
  int v258;
  Espresso::ANECompilerEngine::compiler::build_state_t *v259;
  std::__shared_weak_count *v260;
  unint64_t *v261;
  unint64_t v262;
  uint64_t v263;
  unint64_t *v264;
  unint64_t v265;
  void *v266;
  uint64_t v267;
  void *v268;
  void *v269;
  uint64_t v270;
  std::__shared_weak_count *v271;
  unint64_t *v272;
  unint64_t v273;
  uint64_t v274;
  unint64_t *v275;
  unint64_t v276;
  void *v277;
  void *v278;
  uint64_t v279;
  void *v280;
  void *v281;
  std::__shared_weak_count *v282;
  unint64_t *v283;
  unint64_t v284;
  std::__shared_weak_count *v285;
  unint64_t *v286;
  unint64_t v287;
  void *v288;
  void *v289;
  void *v290;
  __int128 v291;
  __int128 v292;
  __int128 v293;
  __int128 v294;
  __int128 v295;
  int v296;
  _BOOL4 v297;
  int v298;
  int v299;
  int v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  void *v305;
  int v306;
  void *v307;
  void *v308;
  void *v309;
  const __CFString *v310;
  _BOOL4 v311;
  void *v312;
  void *v313;
  void *v314;
  uint64_t v315;
  char *v316;
  _DWORD *v317;
  std::__shared_weak_count *v318;
  unint64_t *v319;
  unint64_t v320;
  std::string *v321;
  std::string *v322;
  unint64_t v323;
  unint64_t v324;
  unint64_t v325;
  uint64_t v326;
  unint64_t *v327;
  unint64_t v328;
  __int128 v329;
  __int128 v330;
  __int128 v331;
  __int128 v332;
  __int128 v333;
  _BOOL4 v334;
  int v335;
  int v336;
  int v337;
  int v338;
  void *v339;
  __CFString *v340;
  void *v341;
  std::string *v342;
  std::string *v343;
  unint64_t v344;
  unint64_t v345;
  unint64_t v346;
  uint64_t v347;
  void *v348;
  __CFString *v349;
  void *v350;
  std::string *v351;
  std::string *v352;
  unint64_t v353;
  unint64_t v354;
  unint64_t v355;
  uint64_t v356;
  std::__shared_weak_count *v357;
  unint64_t *v358;
  unint64_t v359;
  std::__shared_weak_count *v360;
  uint64_t v361;
  unint64_t *v362;
  unint64_t v363;
  char *v364;
  std::__shared_weak_count *v365;
  unint64_t *v366;
  unint64_t v367;
  char v368;
  float v369;
  unint64_t *v370;
  unint64_t v371;
  std::__shared_weak_count *v372;
  unint64_t *v373;
  unint64_t v374;
  unint64_t *v375;
  unint64_t v376;
  std::__shared_weak_count *v377;
  unint64_t *v378;
  unint64_t v379;
  char *v380;
  uint64_t v381;
  uint64_t v382;
  int v383;
  uint64_t v384;
  uint64_t v385;
  int *v386;
  _WORD *v387;
  int v388;
  __int128 v393;
  std::__shared_weak_count *v394;
  unint64_t *v395;
  unint64_t v396;
  std::__shared_weak_count *v397;
  unint64_t *v398;
  unint64_t v399;
  uint64_t v400;
  int *v401;
  _WORD *v402;
  int v403;
  int v405;
  Espresso::ANECompilerEngine::compiler::build_state_t *v406;
  __int128 v407;
  unint64_t *v408;
  unint64_t v409;
  uint64_t v410;
  unint64_t *v411;
  unint64_t v412;
  void *v413;
  id v414;
  void *v415;
  void *v416;
  void *v417;
  void *v418;
  uint64_t v419;
  void *v420;
  void *v421;
  __int128 v422;
  unint64_t *v423;
  unint64_t v424;
  uint64_t v425;
  unint64_t *v426;
  unint64_t v427;
  void *v428;
  void *v429;
  void *v430;
  uint64_t v431;
  void *v432;
  void *v433;
  std::string *v434;
  std::string *v435;
  uint64_t v436;
  char v437;
  std::string::size_type v438;
  std::string::size_type v439;
  uint64_t v440;
  unsigned __int8 *v441;
  std::string *v442;
  const std::string::value_type *data;
  __int128 v444;
  __CFString *v445;
  std::string *v446;
  std::string *v447;
  unint64_t v448;
  unint64_t v449;
  unint64_t v450;
  uint64_t v451;
  void *v452;
  unint64_t *v453;
  unint64_t v454;
  std::__shared_weak_count *v455;
  unint64_t *v456;
  unint64_t v457;
  const Espresso::net *v458;
  unint64_t *v459;
  unint64_t v460;
  uint64_t v461;
  const Espresso::net *v462;
  unint64_t *v463;
  unint64_t v464;
  void *v465;
  void *v466;
  Espresso::ANECompilerEngine::ane_kernel *v467;
  std::__shared_weak_count *v468;
  unint64_t *v469;
  unint64_t v470;
  std::__shared_weak_count *v471;
  unint64_t *v472;
  unint64_t v473;
  std::__shared_weak_count *v474;
  unint64_t *v475;
  unint64_t v476;
  std::__shared_weak_count *v477;
  unint64_t *v478;
  unint64_t v479;
  unint64_t *v480;
  unint64_t v481;
  _QWORD *v482;
  uint64_t *v483;
  unint64_t v484;
  uint64_t *v485;
  unint64_t v486;
  _QWORD *v487;
  uint64_t v488;
  uint64_t v489;
  __int128 v490;
  const unsigned __int8 *v491;
  int *v492;
  _WORD *v493;
  uint64_t v494;
  int v495;
  Espresso::ANECompilerEngine::compiler::build_state_t *v497;
  unint64_t *v498;
  unint64_t v499;
  uint64_t v500;
  unint64_t *v501;
  unint64_t v502;
  void *v503;
  void *v504;
  void *v505;
  void *v506;
  uint64_t v507;
  std::__shared_weak_count *v508;
  unint64_t *v509;
  unint64_t v510;
  __int128 v511;
  unint64_t *v512;
  unint64_t v513;
  unint64_t *v514;
  unint64_t v515;
  Espresso::ANECompilerEngine::compiler::build_state_t *v516;
  unint64_t *v517;
  unint64_t v518;
  uint64_t v519;
  unint64_t *v520;
  unint64_t v521;
  char *v522;
  std::__shared_weak_count *v523;
  uint64_t *v524;
  unint64_t v525;
  uint64_t v526;
  unint64_t *v527;
  unint64_t v528;
  void *v529;
  void *v530;
  void *v531;
  void *v532;
  uint64_t v533;
  __int128 v534;
  unint64_t *v535;
  unint64_t v536;
  id v537;
  void *v538;
  void *v539;
  void *v540;
  void *v541;
  uint64_t v542;
  void *v543;
  void *v544;
  void *v545;
  std::string *v546;
  std::string *v547;
  unint64_t v548;
  unint64_t v549;
  unint64_t v550;
  uint64_t v551;
  void *v552;
  std::__shared_weak_count *v553;
  unint64_t *v554;
  unint64_t v555;
  std::__shared_weak_count *v556;
  unint64_t *v557;
  unint64_t v558;
  unint64_t v559;
  char *v560;
  uint64_t v561;
  __int128 v562;
  std::__shared_weak_count *v563;
  unint64_t *v564;
  unint64_t v565;
  uint64_t v566;
  float *v567;
  float *v568;
  float *v569;
  uint64_t v570;
  float v571;
  float v572;
  float v573;
  uint64_t v574;
  const unsigned __int8 *v575;
  int *v576;
  _WORD *v577;
  uint64_t v578;
  int v579;
  std::__shared_weak_count *v581;
  unint64_t *v582;
  unint64_t v583;
  uint64_t v584;
  unint64_t *v585;
  unint64_t v586;
  void *v587;
  void *v588;
  void *v589;
  uint64_t v590;
  std::__shared_weak_count *v591;
  uint64_t *v592;
  unint64_t v593;
  std::__shared_weak_count *v594;
  unint64_t *v595;
  unint64_t v596;
  std::__shared_weak_count *v597;
  unint64_t *v598;
  unint64_t v599;
  std::__shared_weak_count *v600;
  unint64_t *v601;
  unint64_t v602;
  void *v603;
  std::__shared_weak_count *v604;
  unint64_t *v605;
  unint64_t v606;
  std::__shared_weak_count *v607;
  unint64_t *v608;
  unint64_t v609;
  std::__shared_weak_count *v610;
  unint64_t *v611;
  unint64_t v612;
  void *v613;
  void *v614;
  std::string *v615;
  std::string *v616;
  unint64_t v617;
  unint64_t v618;
  unint64_t v619;
  uint64_t v620;
  std::__shared_weak_count *v621;
  unint64_t *v622;
  unint64_t v623;
  void *v624;
  void *v625;
  std::__shared_weak_count *v626;
  unint64_t *v627;
  unint64_t v628;
  _QWORD *v629;
  int v630;
  std::__shared_weak_count *v631;
  unint64_t *v632;
  unint64_t v633;
  std::__shared_weak_count *v634;
  unint64_t *v635;
  unint64_t v636;
  uint64_t v637;
  std::__shared_weak_count *v638;
  unint64_t *v639;
  unint64_t v640;
  std::__shared_weak_count *v641;
  unint64_t *v642;
  unint64_t v643;
  Espresso::ANECompilerEngine::compiler *v644;
  unint64_t v645;
  std::__shared_weak_count *v646;
  unint64_t *v647;
  unint64_t v648;
  std::__shared_weak_count *v649;
  unint64_t *v650;
  unint64_t v651;
  std::__shared_weak_count *v652;
  unint64_t *v653;
  unint64_t v654;
  std::__shared_weak_count *v655;
  unint64_t *v656;
  unint64_t v657;
  unint64_t *v658;
  char *v659;
  std::__shared_weak_count *v660;
  unint64_t *v661;
  unint64_t v662;
  std::__shared_weak_count *v663;
  unint64_t *v664;
  unint64_t v665;
  int v666;
  std::__shared_weak_count *v667;
  unint64_t *v668;
  unint64_t v669;
  void *v670;
  void *v671;
  void *v672;
  std::string *v673;
  std::string *v674;
  int *v675;
  uint64_t v676;
  uint64_t v677;
  const unsigned __int8 *v678;
  _WORD *v679;
  int v680;
  std::__shared_weak_count *v682;
  unint64_t *v683;
  unint64_t v684;
  unint64_t *v685;
  unint64_t v686;
  void *v687;
  uint64_t v688;
  std::__shared_weak_count *v689;
  unint64_t *v690;
  unint64_t v691;
  id v692;
  void *v693;
  std::string *v694;
  std::string *v695;
  unint64_t v696;
  unint64_t v697;
  char *v698;
  uint64_t v699;
  const Espresso::net *v700;
  Espresso::ANECompilerEngine *v701;
  NSString *v702;
  Espresso::ANECompilerEngine *v703;
  std::string *p_str;
  void *v705;
  __int128 *v706;
  unint64_t v707;
  uint64_t v708;
  void *v709;
  std::string *v710;
  std::string *v711;
  std::string *v712;
  unint64_t v713;
  unint64_t v714;
  unint64_t v715;
  uint64_t v716;
  std::__shared_weak_count *v717;
  unint64_t *v718;
  unint64_t v719;
  std::__shared_weak_count *v720;
  unint64_t *v721;
  unint64_t v722;
  std::__shared_weak_count *v723;
  unint64_t *v724;
  unint64_t v725;
  std::__shared_weak_count *v726;
  unint64_t *v727;
  unint64_t v728;
  std::__shared_weak_count *v729;
  unint64_t *v730;
  unint64_t v731;
  std::__shared_weak_count *v732;
  unint64_t *v733;
  unint64_t v734;
  std::__shared_weak_count *v735;
  unint64_t *v736;
  unint64_t v737;
  std::__shared_weak_count *v738;
  unint64_t *v739;
  unint64_t v740;
  std::__shared_weak_count *v741;
  unint64_t *v742;
  unint64_t v743;
  std::__shared_weak_count *v744;
  unint64_t *v745;
  unint64_t v746;
  std::__shared_weak_count *v747;
  unint64_t *v748;
  unint64_t v749;
  std::__shared_weak_count *v750;
  unint64_t *v751;
  unint64_t v752;
  void *v753;
  unint64_t *v754;
  unint64_t v755;
  unint64_t *v756;
  void *v757;
  std::__shared_weak_count *v758;
  unint64_t *v759;
  unint64_t v760;
  uint64_t v761;
  Espresso::ANECompilerEngine::ane_kernel *v762;
  unint64_t *v763;
  unint64_t v764;
  uint64_t v765;
  uint64_t v766;
  int v767;
  char *v768;
  unint64_t *v769;
  const unsigned __int8 *v770;
  unint64_t v771;
  uint64_t v772;
  void *v773;
  void *v774;
  uint64_t weights_file_index;
  std::__shared_weak_count_vtbl *v776;
  std::__shared_weak_count *v777;
  uint64_t v778;
  std::__shared_weak_count *v779;
  unint64_t *v780;
  unint64_t v781;
  unint64_t *v782;
  unint64_t v783;
  uint64_t v784;
  uint64_t v785;
  int shared_owners;
  std::__shared_weak_count *v787;
  int v788;
  unint64_t *v789;
  void *v790;
  unint64_t v791;
  uint64_t v792;
  unint64_t v793;
  void *v794;
  void *v795;
  uint64_t v796;
  void *v797;
  std::__shared_weak_count *v798;
  unint64_t *v799;
  unint64_t v800;
  std::__shared_weak_count *v801;
  unint64_t *v802;
  unint64_t v803;
  std::__shared_weak_count *v804;
  unint64_t *v805;
  unint64_t v806;
  uint64_t *v807;
  unint64_t v808;
  unint64_t *v809;
  std::__shared_weak_count *size;
  unint64_t *v811;
  unint64_t v812;
  std::__shared_weak_count *v813;
  unint64_t *v814;
  unint64_t v815;
  uint64_t v816;
  Espresso::ANECompilerEngine::ane_kernel *v817;
  uint64_t v818;
  uint64_t v819;
  int v820;
  char *v821;
  unint64_t *v822;
  const unsigned __int8 *v823;
  unint64_t v824;
  uint64_t v825;
  void *v826;
  void *v827;
  uint64_t v828;
  void *v829;
  Espresso::quantized_weights_helper *v830;
  const Espresso::net *v831;
  unint64_t *v832;
  unint64_t v833;
  Espresso::quantized_weights_helper *v834;
  unint64_t *v835;
  unint64_t v836;
  void *v837;
  char *v838;
  char *v839;
  uint64_t v840;
  char *v841;
  int v842;
  _DWORD *v843;
  uint64_t v845;
  _QWORD *v846;
  uint64_t v847;
  std::__shared_weak_count *v848;
  uint64_t *v849;
  unint64_t v850;
  unint64_t *v851;
  unint64_t v852;
  uint64_t v853;
  char *v854;
  int v855;
  std::__shared_weak_count *v856;
  unint64_t *v857;
  const unsigned __int8 *v858;
  unint64_t v859;
  uint64_t v860;
  unint64_t v861;
  void *v862;
  void *v863;
  uint64_t v864;
  void *v865;
  void *v866;
  std::__shared_weak_count *v867;
  unint64_t *v868;
  unint64_t v869;
  std::__shared_weak_count *v870;
  uint64_t *v871;
  unint64_t v872;
  std::__shared_weak_count *v873;
  unint64_t *v874;
  unint64_t v875;
  uint64_t v876;
  uint64_t v878;
  int v879;
  std::__shared_weak_count *v880;
  unint64_t *v881;
  const unsigned __int8 *v882;
  unint64_t v883;
  uint64_t v884;
  unint64_t v885;
  void *v886;
  void *v887;
  uint64_t v888;
  void *v889;
  int v890;
  uint64_t v892;
  const __CFString *v894;
  std::__shared_weak_count *v895;
  unint64_t *v896;
  unint64_t v897;
  std::__shared_weak_count *v898;
  unint64_t *v899;
  unint64_t v900;
  unsigned int *v901;
  vDSP_Length v902;
  uint64_t v903;
  std::__shared_weak_count *v904;
  unint64_t *v905;
  unint64_t v906;
  std::__shared_weak_count *v907;
  unint64_t *v908;
  unint64_t v909;
  std::__shared_weak_count *v910;
  unint64_t *v911;
  unint64_t v912;
  std::__shared_weak_count *v913;
  unint64_t *v914;
  unint64_t v915;
  std::__shared_weak_count *v916;
  unint64_t *v917;
  unint64_t v918;
  std::__shared_weak_count *v919;
  unint64_t *v920;
  unint64_t v921;
  uint64_t v922;
  uint64_t v923;
  std::string::size_type v924;
  BOOL v925;
  char *v927;
  char *v928;
  char *v929;
  vDSP_Length v930;
  uint64_t v931;
  unsigned int v932;
  uint64_t v933;
  uint64_t v934;
  uint64_t v935;
  float *v936;
  std::__shared_weak_count *v937;
  unint64_t *v938;
  unint64_t v939;
  uint64_t v940;
  unint64_t *v941;
  unint64_t v942;
  void *v943;
  void *v944;
  uint64_t v945;
  void *v946;
  std::__shared_weak_count *v947;
  unint64_t *v948;
  unint64_t v949;
  std::__shared_weak_count *v950;
  unint64_t *v951;
  unint64_t v952;
  uint64_t *v953;
  unint64_t v954;
  std::__shared_weak_count *v955;
  unint64_t *v956;
  unint64_t v957;
  std::runtime_error *exception;
  uint64_t v959;
  int *v960;
  int v961;
  uint64_t mm;
  float v963;
  int v964;
  _WORD *v965;
  int v966;
  std::runtime_error *v968;
  int *v969;
  uint64_t nn;
  int v971;
  int v972;
  unsigned int v973;
  unsigned int v974;
  int v975;
  Espresso *v976;
  const char *v977;
  float v978;
  NSObject *v980;
  double v981;
  const char *v982;
  uint64_t v983;
  _WORD *v984;
  int v985;
  _BOOL4 v987;
  _BOOL4 v988;
  char *v989;
  void *v990;
  uint64_t v991;
  char *v992;
  void *v993;
  void *v994;
  const __CFString *v995;
  int v996;
  void *v997;
  int v998;
  unsigned int v999;
  unsigned int v1000;
  Espresso::ANECompilerEngine::sparsity_options *v1001;
  _BOOL4 v1004;
  _QWORD *lpsrc;
  const Espresso::net *v1009;
  std::__shared_weak_count *v1010;
  const Espresso::net *v1011;
  std::__shared_weak_count *v1012;
  const Espresso::net *v1013;
  std::__shared_weak_count *v1014;
  const Espresso::net *v1015;
  std::__shared_weak_count *v1016;
  const Espresso::net *v1017;
  std::__shared_weak_count *v1018;
  const Espresso::net *v1019;
  std::__shared_weak_count *v1020;
  char *v1021;
  std::__shared_weak_count *v1022;
  __int128 v1023;
  uint64_t v1024;
  std::__shared_weak_count *v1025;
  uint64_t v1026;
  uint64_t v1027;
  const Espresso::net *v1028;
  std::__shared_weak_count *v1029;
  __int128 v1030;
  uint64_t v1031;
  std::__shared_weak_count *v1032;
  const Espresso::net *v1033;
  std::__shared_weak_count *v1034;
  int v1035[2];
  std::__shared_weak_count *v1036;
  void *v1037;
  void *v1038;
  void *v1039[2];
  uint64_t v1040;
  std::__shared_weak_count *v1041;
  unsigned int v1042;
  unsigned int v1043;
  void *v1044;
  void *v1045;
  char *v1046;
  std::__shared_weak_count *v1047;
  _BYTE v1048[32];
  void *v1049[2];
  __int128 v1050;
  __int128 v1051;
  void *v1052[2];
  __int128 v1053;
  __int128 v1054;
  __int128 v1055;
  __int128 v1056;
  uint64_t v1057;
  uint64_t v1058;
  std::__shared_weak_count *v1059;
  const Espresso::net *v1060;
  std::__shared_weak_count *v1061;
  const Espresso::net *v1062;
  std::__shared_weak_count *v1063;
  const Espresso::net *v1064;
  std::__shared_weak_count *v1065;
  std::__shared_weak_count *v1066;
  std::__shared_weak_count *v1067;
  Espresso::quantized_weights_helper *v1068[2];
  _QWORD v1069[2];
  _QWORD v1070[2];
  _QWORD v1071[2];
  uint64_t v1072[2];
  _QWORD v1073[2];
  _QWORD v1074[2];
  const Espresso::net *v1075;
  std::__shared_weak_count *v1076;
  const Espresso::net *v1077;
  std::__shared_weak_count *v1078;
  const Espresso::net *v1079;
  std::__shared_weak_count *v1080;
  const Espresso::net *v1081;
  std::__shared_weak_count *v1082;
  const Espresso::net *v1083;
  std::__shared_weak_count *v1084;
  const Espresso::net *v1085;
  std::__shared_weak_count *v1086;
  const Espresso::net *v1087;
  std::__shared_weak_count *v1088;
  uint64_t v1089;
  std::string *v1090;
  unint64_t v1091;
  __int16 v1092;
  char v1093[40];
  void *v1094;
  void *v1095;
  const Espresso::net *v1096;
  std::__shared_weak_count *v1097;
  char v1098[32];
  char v1099[40];
  void *__p;
  void *v1101;
  const Espresso::net *v1102;
  std::__shared_weak_count *v1103;
  char v1104[32];
  __int128 v1105;
  __int128 v1106;
  __int128 v1107;
  __int128 v1108;
  __int128 v1109;
  __int128 v1110;
  __int128 v1111;
  __int128 v1112;
  __int128 v1113;
  __int128 v1114;
  __int128 v1115;
  __int128 v1116;
  __int128 v1117;
  std::__shared_weak_count *v1118;
  std::__shared_weak_count *v1119;
  std::__shared_weak_count *v1120;
  std::__shared_weak_count *v1121;
  uint64_t v1122;
  std::__shared_weak_count *v1123;
  __int128 v1124;
  __int128 v1125;
  __int128 v1126;
  __int128 v1127;
  std::__shared_weak_count *v1128;
  std::__shared_weak_count *v1129;
  std::string __str;
  __int128 v1131;
  void *v1132;
  void *v1133;
  _QWORD v1134[2];
  _BYTE buf[24];
  __int128 v1136;
  void *v1137;
  std::vector<std::string> v1138;
  void *v1139;
  char v1140;
  id v1141;
  __CFString *v1142;
  id v1143[6];

  v1143[3] = *(id *)MEMORY[0x1E0C80C00];
  v996 = a2[552];
  v1116 = 0u;
  v1115 = 0u;
  v1114 = 0u;
  v1113 = 0u;
  v1112 = 0u;
  v1111 = 0u;
  v1110 = 0u;
  v1109 = 0u;
  v1108 = 0u;
  v1107 = 0u;
  v1106 = 0u;
  v1105 = 0u;
  v10 = *a3;
  v9 = (std::__shared_weak_count *)a3[1];
  v1102 = *a3;
  v1103 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  Espresso::abstract_blob_container::shape(v1099, *a6);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v1104, v10, (const Espresso::layer_shape *)v1099, 1);
  if (__p)
  {
    v1101 = __p;
    operator delete(__p);
  }
  if (v9)
  {
    v13 = (unint64_t *)&v9->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v16 = *a3;
  v15 = (std::__shared_weak_count *)a3[1];
  v1096 = *a3;
  v1097 = v15;
  if (v15)
  {
    v17 = (unint64_t *)&v15->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  Espresso::abstract_blob_container::shape(v1093, *a7);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v1098, v16, (const Espresso::layer_shape *)v1093, 1);
  if (v1094)
  {
    v1095 = v1094;
    operator delete(v1094);
  }
  if (v15)
  {
    v19 = (unint64_t *)&v15->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v21 = *a3;
  v22 = a5[6];
  if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*((_QWORD **)*a3 + 45), v22))
  {
    *(_QWORD *)buf = v22;
    v23 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v21 + 44, v22, (uint64_t)&std::piecewise_construct, (__int128 **)buf);
    *(_OWORD *)v1048 = *(_OWORD *)(v23 + 56);
    v1049[0] = 0;
    *(_OWORD *)&v1048[16] = 0uLL;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v1048[16], *((const void **)v23 + 9), *((_QWORD *)v23 + 10), (uint64_t)(*((_QWORD *)v23 + 10) - *((_QWORD *)v23 + 9)) >> 2);
    if (*(_DWORD *)&v1048[8] == -1)
      v24 = 1;
    else
      v24 = *(_DWORD *)&v1048[8];
    if (*(_QWORD *)&v1048[16])
    {
      *(_QWORD *)&v1048[24] = *(_QWORD *)&v1048[16];
      operator delete(*(void **)&v1048[16]);
    }
    v21 = *a3;
  }
  else
  {
    v24 = 1;
  }
  Espresso::ANECompilerEngine::ane_arch_allow_network_override((uint64_t)v21 + 472);
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  v1092 = 0;
  v997 = v25;
  Espresso::ANECompilerEngine::query_dilation_options(a4, 1, v24, (char *)&v1092 + 1, &v1092, v25);
  v27 = *(_DWORD *)(a4 + 48);
  v26 = *(_DWORD *)(a4 + 52);
  v28 = *(__int16 *)(a4 + 96);
  v29 = v28 < 2;
  v30 = *(__int16 *)(a4 + 98);
  if (HIBYTE(v1092))
  {
    v31 = v30 < 2;
  }
  else
  {
    v29 = 1;
    v31 = 1;
  }
  if (v29)
    v32 = *(_DWORD *)(a4 + 48);
  else
    v32 = (v27 - 1) * v28 + 1;
  if (v31)
    v33 = *(_DWORD *)(a4 + 52);
  else
    v33 = (v26 - 1) * v30 + 1;
  v999 = v33;
  v1000 = v32;
  v34 = v28 >= 2 && v27 > 1 || v30 > 1 && v26 > 1;
  v1004 = v34;
  lpsrc = a1;
  objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults");
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v36, "persistentDomainForName:", *MEMORY[0x1E0CB2B58]);
  v1001 = (Espresso::ANECompilerEngine::sparsity_options *)objc_claimAutoreleasedReturnValue();

  v37 = a1;
  v38 = Espresso::ANECompilerEngine::sparsity_options::scan_for_compress_sparse((uint64_t)*a3 + 472, v1001)
     || a1[688] != 0;
  v39 = (uint64_t)a5[6];
  if ((char *)a5[7] - v39 != (_BYTE *)24)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Inconsistent number of blobs");
    goto LABEL_1431;
  }
  if (*(unsigned __int16 *)(a4 + 92) - 5 <= 0xFFFFFFFB
    || *(unsigned __int16 *)(a4 + 94) - 5 <= 0xFFFFFFFB)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Unsupported configuration");
LABEL_1431:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v40 = *a6;
  if (!*a6)
  {
    if (*(char *)(v39 + 23) < 0)
      v39 = *(_QWORD *)v39;
    Espresso::throw_exception_selector<Espresso::unsupported_configuration_error,int &>("ANEC conv: cannot find input blobs. bottom=%s", v39);
  }
  if (!*a7)
  {
    if (*((char *)a5 + 23) >= 0)
      v959 = (uint64_t)a5;
    else
      v959 = (uint64_t)*a5;
    Espresso::throw_exception_selector<Espresso::unsupported_configuration_error,int &>("ANEC conv: cannot find output blobs. top=%s", v959);
  }
  v1090 = 0;
  v1089 = 0;
  v1091 = 0;
  if (a1)
  {
    if (v41)
    {
      if (v41[840] && (*(int *)(v40 + 8) > 1 || *(int *)(v40 + 12) >= 2))
      {
        v42 = (void *)objc_opt_new();
        objc_msgSend(v42, "setObject:forKeyedSubscript:", CFSTR("NCHW"), CFSTR("Mode"));
        Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)v1048, a5);
        v43 = (void *)*((_QWORD *)&v1054 + 1);
        *((_QWORD *)&v1054 + 1) = CFSTR("Flatten");

        objc_storeStrong((id *)&v1055, v42);
        v44 = v1090;
        if ((unint64_t)v1090 >= v1091)
        {
          v46 = 0x8E38E38E38E38E39 * (((uint64_t)v1090 - v1089) >> 4);
          if (v46 + 1 > 0x1C71C71C71C71C7)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v47 = 0x1C71C71C71C71C72 * ((uint64_t)(v1091 - v1089) >> 4);
          if (v47 <= v46 + 1)
            v47 = v46 + 1;
          if (0x8E38E38E38E38E39 * ((uint64_t)(v1091 - v1089) >> 4) >= 0xE38E38E38E38E3)
            v48 = 0x1C71C71C71C71C7;
          else
            v48 = v47;
          *((_QWORD *)&v1136 + 1) = &v1091;
          if (v48)
            v48 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v48);
          else
            v49 = 0;
          *(_QWORD *)buf = v48;
          *(_QWORD *)&buf[8] = v48 + 144 * v46;
          *(_QWORD *)&buf[16] = *(_QWORD *)&buf[8];
          *(_QWORD *)&v1136 = v48 + 144 * v49;
          std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(*(std::string **)&buf[8], (uint64_t)v1048);
          *(_QWORD *)&buf[16] += 144;
          std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v1089, buf);
          v45 = v1090;
          std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)buf);
        }
        else
        {
          std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v1090, (uint64_t)v1048);
          v45 = v44 + 6;
        }
        v1090 = v45;

        if (SBYTE7(v1053) < 0)
          operator delete(v1052[0]);
        *(_QWORD *)buf = &v1050;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
        *(_QWORD *)buf = &v1048[24];
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
        if ((v1048[23] & 0x80000000) != 0)
          operator delete(*(void **)v1048);

        v37 = a1;
      }
    }
  }
  v50 = (void *)objc_opt_new();
  objc_msgSend(v50, "setObject:forKeyedSubscript:", CFSTR("Dense"), CFSTR("KernelMode"));
  if (v37[809])
  {
    objc_msgSend(v50, "setObject:forKeyedSubscript:", CFSTR("Unity"), CFSTR("KernelMode"));
    objc_msgSend(v50, "setObject:forKeyedSubscript:", CFSTR("Float16"), CFSTR("KernelType"));
  }
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v1000);
  v51 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v50, "setObject:forKeyedSubscript:", v51, CFSTR("KernelWidth"));

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v999);
  v52 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v50, "setObject:forKeyedSubscript:", v52, CFSTR("KernelHeight"));

  v53 = *(_DWORD *)(a4 + 116);
  if (v53 >= 2 && v53 == *(_DWORD *)(a4 + 44) && v53 == *(_DWORD *)(a4 + 40))
  {
    objc_msgSend(v50, "setObject:forKeyedSubscript:", CFSTR("ChannelWiseDeConv"), CFSTR("Type"));
    v54 = a1;
    v55 = CFSTR("ChannelWiseDilatedConv");
  }
  else
  {
    objc_msgSend(v50, "setObject:forKeyedSubscript:", CFSTR("DeConv"), CFSTR("Type"));
    v54 = a1;
    v55 = CFSTR("DilatedConv");
  }
  v995 = v55;
  v998 = *(_DWORD *)(a4 + 116);
  objc_msgSend(v50, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAA0], CFSTR("KernelGroupReuse"));
  if (v54[808])
    objc_msgSend(v50, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], CFSTR("KernelGroupReuse"));
  if (!v54[809])
  {
    v76 = (std::__shared_weak_count *)a3[1];
    v1087 = *a3;
    v1088 = v76;
    if (v76)
    {
      v77 = (unint64_t *)&v76->__shared_owners_;
      do
        v78 = __ldxr(v77);
      while (__stxr(v78 + 1, v77));
    }
    std::string::basic_string[abi:ne180100]<0>(v1048, "post_scale");
    v79 = (Espresso::ANECompilerEngine::ane_kernel *)(v54 + 560);
    v80 = ((*(uint64_t (**)(_BYTE *, const Espresso::net **, _BYTE *, _BYTE *))(*((_QWORD *)v54 + 70) + 88))(v54 + 560, &v1087, v54, v1048) & 0x80000000) == 0|| *((_QWORD *)v54 + 78) != 0;
    if ((v1048[23] & 0x80000000) != 0)
      operator delete(*(void **)v1048);
    v81 = v1088;
    if (v1088)
    {
      v82 = (unint64_t *)&v1088->__shared_owners_;
      do
        v83 = __ldaxr(v82);
      while (__stlxr(v83 - 1, v82));
      if (!v83)
      {
        ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
        std::__shared_weak_count::__release_weak(v81);
      }
    }
    if ((_BYTE)v1092)
      _ZF = 1;
    else
      _ZF = HIBYTE(v1092) == 0;
    if (_ZF)
    {
LABEL_130:
      v87 = (std::__shared_weak_count *)a3[1];
      v1085 = *a3;
      v1086 = v87;
      if (v87)
      {
        v88 = (unint64_t *)&v87->__shared_owners_;
        do
          v89 = __ldxr(v88);
        while (__stxr(v89 + 1, v88));
      }
      std::string::basic_string[abi:ne180100]<0>(v1048, "W_S8");
      v90 = (*(uint64_t (**)(Espresso::ANECompilerEngine::ane_kernel *, const Espresso::net **, _BYTE *, _BYTE *))(*((_QWORD *)v54 + 70) + 88))(v79, &v1085, v54, v1048);
      v91 = (int)v90 >= 0 && v80;
      if ((v1048[23] & 0x80000000) != 0)
        operator delete(*(void **)v1048);
      v92 = v1086;
      if (!v1086)
        goto LABEL_142;
      v93 = (unint64_t *)&v1086->__shared_owners_;
      do
        v94 = __ldaxr(v93);
      while (__stlxr(v94 - 1, v93));
      if (!v94)
      {
        ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
        std::__shared_weak_count::__release_weak(v92);
        if (v91)
          goto LABEL_143;
      }
      else
      {
LABEL_142:
        if (v91)
        {
LABEL_143:
          v95 = (std::__shared_weak_count *)a3[1];
          v1083 = *a3;
          v1084 = v95;
          if (v95)
          {
            v96 = (unint64_t *)&v95->__shared_owners_;
            do
              v97 = __ldxr(v96);
            while (__stxr(v97 + 1, v96));
          }
          std::string::basic_string[abi:ne180100]<0>(buf, "W_S8");
          (*(void (**)(_BYTE *__return_ptr, Espresso::ANECompilerEngine::ane_kernel *, const Espresso::net **, _BYTE *, _BYTE *))(*((_QWORD *)v54 + 70) + 120))(v1048, v79, &v1083, v54, buf);
          if ((buf[23] & 0x80000000) != 0)
            operator delete(*(void **)buf);
          v98 = v1084;
          if (v1084)
          {
            v99 = (unint64_t *)&v1084->__shared_owners_;
            do
              v100 = __ldaxr(v99);
            while (__stlxr(v100 - 1, v99));
            if (!v100)
            {
              ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
              std::__shared_weak_count::__release_weak(v98);
            }
          }
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v90);
          v101 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v50, "setObject:forKeyedSubscript:", v101, CFSTR("KernelOffset"));

          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", Espresso::ANECompilerEngine::get_primary_weights_file_index((Espresso::ANECompilerEngine *)a2, *(Espresso::ANECompilerEngine::compiler **)v1048, *(const void **)&v1048[16]));
          v102 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v50, "setObject:forKeyedSubscript:", v102, CFSTR("KernelIndex"));

          objc_msgSend(v50, "setObject:forKeyedSubscript:", CFSTR("Int8"), CFSTR("KernelType"));
          if (lpsrc)
            v103 = v79;
          else
            v103 = 0;
LABEL_156:
          Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_s8((Espresso::ANECompilerEngine::final_anec_weights_t *)&v1105, v103, *(void **)v1048);
          goto LABEL_87;
        }
      }
      v142 = (std::__shared_weak_count *)a3[1];
      v1081 = *a3;
      v1082 = v142;
      if (v142)
      {
        v143 = (unint64_t *)&v142->__shared_owners_;
        do
          v144 = __ldxr(v143);
        while (__stxr(v144 + 1, v143));
      }
      std::string::basic_string[abi:ne180100]<0>(v1048, "W_int8");
      v145 = (*(uint64_t (**)(Espresso::ANECompilerEngine::ane_kernel *, const Espresso::net **, _BYTE *, _BYTE *))(*((_QWORD *)v54 + 70) + 88))(v79, &v1081, v54, v1048);
      if ((v1048[23] & 0x80000000) != 0)
        operator delete(*(void **)v1048);
      v146 = v1082;
      if (v1082)
      {
        v147 = (unint64_t *)&v1082->__shared_owners_;
        do
          v148 = __ldaxr(v147);
        while (__stlxr(v148 - 1, v147));
        if (!v148)
        {
          ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
          std::__shared_weak_count::__release_weak(v146);
        }
      }
      if ((v145 & 0x80000000) == 0)
      {
        v149 = (std::__shared_weak_count *)a3[1];
        v1079 = *a3;
        v1080 = v149;
        if (v149)
        {
          v150 = (unint64_t *)&v149->__shared_owners_;
          do
            v151 = __ldxr(v150);
          while (__stxr(v151 + 1, v150));
        }
        std::string::basic_string[abi:ne180100]<0>(buf, "W_int8");
        (*(void (**)(_BYTE *__return_ptr, Espresso::ANECompilerEngine::ane_kernel *, const Espresso::net **, _BYTE *, _BYTE *))(*((_QWORD *)v54 + 70) + 120))(v1048, v79, &v1079, v54, buf);
        if ((buf[23] & 0x80000000) != 0)
          operator delete(*(void **)buf);
        v152 = v1080;
        if (v1080)
        {
          v153 = (unint64_t *)&v1080->__shared_owners_;
          do
            v154 = __ldaxr(v153);
          while (__stlxr(v154 - 1, v153));
          if (!v154)
          {
            ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
            std::__shared_weak_count::__release_weak(v152);
          }
        }
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v145);
        v155 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v50, "setObject:forKeyedSubscript:", v155, CFSTR("KernelOffset"));

        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", Espresso::ANECompilerEngine::get_primary_weights_file_index((Espresso::ANECompilerEngine *)a2, *(Espresso::ANECompilerEngine::compiler **)v1048, *(const void **)&v1048[16]));
        v156 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v50, "setObject:forKeyedSubscript:", v156, CFSTR("KernelIndex"));

        objc_msgSend(v50, "setObject:forKeyedSubscript:", CFSTR("Int8"), CFSTR("KernelType"));
        if (lpsrc)
          v103 = v79;
        else
          v103 = 0;
        goto LABEL_156;
      }
      v166 = (std::__shared_weak_count *)a3[1];
      v1077 = *a3;
      v1078 = v166;
      if (v166)
      {
        v167 = (unint64_t *)&v166->__shared_owners_;
        do
          v168 = __ldxr(v167);
        while (__stxr(v168 + 1, v167));
      }
      std::string::basic_string[abi:ne180100]<0>(v1048, "blob_weights");
      v169 = (*(uint64_t (**)(Espresso::ANECompilerEngine::ane_kernel *, const Espresso::net **, _BYTE *, _BYTE *))(*((_QWORD *)v54 + 70) + 88))(v79, &v1077, v54, v1048);
      if ((v1048[23] & 0x80000000) != 0)
        operator delete(*(void **)v1048);
      v170 = v1078;
      if (v1078)
      {
        v171 = (unint64_t *)&v1078->__shared_owners_;
        do
          v172 = __ldaxr(v171);
        while (__stlxr(v172 - 1, v171));
        if (!v172)
        {
          ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
          std::__shared_weak_count::__release_weak(v170);
        }
      }
      if ((v169 & 0x80000000) == 0)
      {
        v173 = (std::__shared_weak_count *)a3[1];
        v1075 = *a3;
        v1076 = v173;
        if (v173)
        {
          v174 = (unint64_t *)&v173->__shared_owners_;
          do
            v175 = __ldxr(v174);
          while (__stxr(v175 + 1, v174));
        }
        std::string::basic_string[abi:ne180100]<0>(buf, "blob_weights");
        (*(void (**)(_BYTE *__return_ptr, Espresso::ANECompilerEngine::ane_kernel *, const Espresso::net **, _BYTE *, _BYTE *))(*((_QWORD *)v54 + 70) + 120))(v1048, v79, &v1075, v54, buf);
        if ((buf[23] & 0x80000000) != 0)
          operator delete(*(void **)buf);
        v176 = v1076;
        if (v1076)
        {
          v177 = (unint64_t *)&v1076->__shared_owners_;
          do
            v178 = __ldaxr(v177);
          while (__stlxr(v178 - 1, v177));
          if (!v178)
          {
            ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
            std::__shared_weak_count::__release_weak(v176);
          }
        }
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v169);
        v179 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v50, "setObject:forKeyedSubscript:", v179, CFSTR("KernelOffset"));

        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", Espresso::ANECompilerEngine::get_primary_weights_file_index((Espresso::ANECompilerEngine *)a2, *(Espresso::ANECompilerEngine::compiler **)v1048, *(const void **)&v1048[16]));
        v180 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v50, "setObject:forKeyedSubscript:", v180, CFSTR("KernelIndex"));

        objc_msgSend(v50, "setObject:forKeyedSubscript:", CFSTR("Float32"), CFSTR("KernelType"));
        if (lpsrc)
          v181 = v79;
        else
          v181 = 0;
        Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_f32((Espresso::ANECompilerEngine::final_anec_weights_t *)&v1105, v181, *(void **)v1048);
        goto LABEL_87;
      }
      v458 = a3[1];
      v1074[0] = *a3;
      v1074[1] = v458;
      if (v458)
      {
        v459 = (unint64_t *)((char *)v458 + 8);
        do
          v460 = __ldxr(v459);
        while (__stxr(v460 + 1, v459));
      }
      std::string::basic_string[abi:ne180100]<0>(v1048, "blob_weights_f16");
      v461 = (*(uint64_t (**)(Espresso::ANECompilerEngine::ane_kernel *, _QWORD *, _BYTE *, _BYTE *))(*((_QWORD *)v54 + 70) + 88))(v79, v1074, v54, v1048);
      if ((v1048[23] & 0x80000000) != 0)
        operator delete(*(void **)v1048);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v1074);
      if ((v461 & 0x80000000) == 0)
      {
        v462 = a3[1];
        v1073[0] = *a3;
        v1073[1] = v462;
        if (v462)
        {
          v463 = (unint64_t *)((char *)v462 + 8);
          do
            v464 = __ldxr(v463);
          while (__stxr(v464 + 1, v463));
        }
        std::string::basic_string[abi:ne180100]<0>(buf, "blob_weights_f16");
        (*(void (**)(_BYTE *__return_ptr, Espresso::ANECompilerEngine::ane_kernel *, _QWORD *, _BYTE *, _BYTE *))(*((_QWORD *)v54 + 70) + 120))(v1048, v79, v1073, v54, buf);
        if ((buf[23] & 0x80000000) != 0)
          operator delete(*(void **)buf);
        std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v1073);
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v461);
        v465 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v50, "setObject:forKeyedSubscript:", v465, CFSTR("KernelOffset"));

        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", Espresso::ANECompilerEngine::get_primary_weights_file_index((Espresso::ANECompilerEngine *)a2, *(Espresso::ANECompilerEngine::compiler **)v1048, *(const void **)&v1048[16]));
        v466 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v50, "setObject:forKeyedSubscript:", v466, CFSTR("KernelIndex"));

        objc_msgSend(v50, "setObject:forKeyedSubscript:", CFSTR("Float16"), CFSTR("KernelType"));
        if (lpsrc)
          v467 = v79;
        else
          v467 = 0;
        Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_f16((Espresso::ANECompilerEngine::final_anec_weights_t *)&v1105, v467, *(void **)v1048);
        goto LABEL_87;
      }
      if (*((_QWORD *)v54 + 99))
      {
        v761 = *((_QWORD *)v54 + 100);
        if (v54)
          v762 = v79;
        else
          v762 = 0;
        v1072[0] = *((_QWORD *)v54 + 99);
        v1072[1] = v761;
        if (v761)
        {
          v763 = (unint64_t *)(v761 + 8);
          do
            v764 = __ldxr(v763);
          while (__stxr(v764 + 1, v763));
        }
        Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_f16((Espresso::ANECompilerEngine::final_anec_weights_t *)&v1105, v762, v1072);
        std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v1072);
        v765 = 0;
        v766 = *((_QWORD *)v54 + 99);
        v767 = *(_DWORD *)(v766 + 8);
        do
        {
          v767 *= *(_DWORD *)(v766 + 12 + v765);
          v765 += 4;
        }
        while (v765 != 12);
        v768 = (char *)operator new(0x58uLL);
        *((_QWORD *)v768 + 1) = 0;
        v769 = (unint64_t *)(v768 + 8);
        *((_QWORD *)v768 + 2) = 0;
        *(_QWORD *)v768 = &off_1E2DBED50;
        v770 = *(const unsigned __int8 **)(v766 + 24);
        *((_QWORD *)v768 + 3) = &off_1E2DA1250;
        *(_OWORD *)(v768 + 72) = 0u;
        *(_OWORD *)(v768 + 56) = 0u;
        *((_DWORD *)v768 + 8) = 2 * v767;
        *((_QWORD *)v768 + 5) = v770;
        v768[48] = 0;
        *(_QWORD *)v1048 = v768 + 24;
        *(_QWORD *)&v1048[8] = v768;
        v1071[0] = v768 + 24;
        v1071[1] = v768;
        do
          v771 = __ldxr(v769);
        while (__stxr(v771 + 1, v769));
        v772 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128), v770, 2 * v767);
        std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v1071);
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v772);
        v773 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v50, "setObject:forKeyedSubscript:", v773, CFSTR("KernelOffset"));

        v774 = (void *)MEMORY[0x1E0CB37E8];
        if (v996)
          weights_file_index = 0;
        else
        objc_msgSend(v774, "numberWithUnsignedLong:", weights_file_index);
        v829 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v50, "setObject:forKeyedSubscript:", v829, CFSTR("KernelIndex"));

        objc_msgSend(v50, "setObject:forKeyedSubscript:", CFSTR("Float16"), CFSTR("KernelType"));
        std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v1048);
        goto LABEL_87;
      }
      (*(void (**)(_BYTE *__return_ptr, _BYTE *))(*(_QWORD *)v54 + 456))(v1048, v54);
      v816 = *(_QWORD *)v1048;
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v1048);
      if (v816)
      {
        (*(void (**)(_BYTE *__return_ptr, _BYTE *))(*(_QWORD *)v54 + 456))(v1048, v54);
        if (v54)
          v817 = v79;
        else
          v817 = 0;
        Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_f32((Espresso::ANECompilerEngine::final_anec_weights_t *)&v1105, v817, (uint64_t *)v1048);
        v818 = 0;
        v819 = *(_QWORD *)v1048;
        v820 = *(_DWORD *)(*(_QWORD *)v1048 + 8);
        do
        {
          v820 *= *(_DWORD *)(*(_QWORD *)v1048 + 12 + v818);
          v818 += 4;
        }
        while (v818 != 12);
        v821 = (char *)operator new(0x58uLL);
        *((_QWORD *)v821 + 1) = 0;
        v822 = (unint64_t *)(v821 + 8);
        *((_QWORD *)v821 + 2) = 0;
        *(_QWORD *)v821 = &off_1E2DBED50;
        v823 = *(const unsigned __int8 **)(v819 + 24);
        *((_QWORD *)v821 + 3) = &off_1E2DA1250;
        *(_OWORD *)(v821 + 72) = 0u;
        *(_OWORD *)(v821 + 56) = 0u;
        *((_DWORD *)v821 + 8) = 4 * v820;
        *((_QWORD *)v821 + 5) = v823;
        v821[48] = 0;
        *(_QWORD *)buf = v821 + 24;
        *(_QWORD *)&buf[8] = v821;
        v1070[0] = v821 + 24;
        v1070[1] = v821;
        do
          v824 = __ldxr(v822);
        while (__stxr(v824 + 1, v822));
        v825 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128), v823, 4 * v820);
        std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v1070);
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v825);
        v826 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v50, "setObject:forKeyedSubscript:", v826, CFSTR("KernelOffset"));

        v827 = (void *)MEMORY[0x1E0CB37E8];
        if (v996)
          v828 = 0;
        else
        objc_msgSend(v827, "numberWithUnsignedLong:", v828);
        v837 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v50, "setObject:forKeyedSubscript:", v837, CFSTR("KernelIndex"));

        objc_msgSend(v50, "setObject:forKeyedSubscript:", CFSTR("Float32"), CFSTR("KernelType"));
        std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)buf);
        std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v1048);
        goto LABEL_87;
      }
      v830 = (Espresso::quantized_weights_helper *)*((_QWORD *)v54 + 59);
      if (v830
        && *(_QWORD *)v830
        && (*((_QWORD *)v830 + 4) || *((_QWORD *)v830 + 6) || *((_QWORD *)v830 + 8) || *((_QWORD *)v830 + 10)))
      {
        v831 = a3[1];
        v1069[0] = *a3;
        v1069[1] = v831;
        if (v831)
        {
          v832 = (unint64_t *)((char *)v831 + 8);
          do
            v833 = __ldxr(v832);
          while (__stxr(v833 + 1, v832));
          v830 = (Espresso::quantized_weights_helper *)*((_QWORD *)v54 + 59);
        }
        v834 = (Espresso::quantized_weights_helper *)*((_QWORD *)v54 + 60);
        v1068[0] = v830;
        v1068[1] = v834;
        if (v834)
        {
          v835 = (unint64_t *)((char *)v834 + 8);
          do
            v836 = __ldxr(v835);
          while (__stxr(v836 + 1, v835));
        }
        Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::deconvolution_kernel *>(v54, (Espresso::ANECompilerEngine *)a2, v1069, v1068, v50, (const void **)&v1105);
        std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v1068);
        std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v1069);
        goto LABEL_87;
      }
      if (!v838)
      {
        if (!v865)
          goto LABEL_1393;
        LOBYTE(v840) = 0;
        goto LABEL_1352;
      }
      v839 = v838;
      (*(void (**)(_BYTE *__return_ptr))(*(_QWORD *)v838 + 568))(v1048);
      v840 = *(_QWORD *)v1048;
      if (!*(_QWORD *)v1048)
      {
LABEL_1345:
        v898 = *(std::__shared_weak_count **)&v1048[8];
        if (*(_QWORD *)&v1048[8])
        {
          v899 = (unint64_t *)(*(_QWORD *)&v1048[8] + 8);
          do
            v900 = __ldaxr(v899);
          while (__stlxr(v900 - 1, v899));
          if (!v900)
          {
            ((void (*)(std::__shared_weak_count *))v898->__on_zero_shared)(v898);
            std::__shared_weak_count::__release_weak(v898);
          }
        }
        if (!v54
        {
LABEL_1392:
          if ((v840 & 1) != 0)
            goto LABEL_87;
LABEL_1393:
          Espresso::throw_exception_selector<Espresso::invalid_state_error>("Cannot find the weights");
        }
LABEL_1352:
        v901 = (unsigned int *)(*(uint64_t (**)(void *))(*(_QWORD *)v865 + 384))(v865);
        if (v901[9] == 1)
        {
          v988 = v38;
          v903 = *v901;
          v902 = v901[1];
          v904 = (std::__shared_weak_count *)a3[1];
          v1064 = *a3;
          v1065 = v904;
          if (v904)
          {
            v905 = (unint64_t *)&v904->__shared_owners_;
            do
              v906 = __ldxr(v905);
            while (__stxr(v906 + 1, v905));
          }
          std::string::basic_string[abi:ne180100]<0>(buf, "W_8bit");
          (*(void (**)(_BYTE *__return_ptr, Espresso::ANECompilerEngine::ane_kernel *, const Espresso::net **, _BYTE *, _BYTE *))(*((_QWORD *)v54 + 70) + 120))(v1048, v79, &v1064, v54, buf);
          if ((buf[23] & 0x80000000) != 0)
            operator delete(*(void **)buf);
          v907 = v1065;
          if (v1065)
          {
            v908 = (unint64_t *)&v1065->__shared_owners_;
            do
              v909 = __ldaxr(v908);
            while (__stlxr(v909 - 1, v908));
            if (!v909)
            {
              ((void (*)(std::__shared_weak_count *))v907->__on_zero_shared)(v907);
              std::__shared_weak_count::__release_weak(v907);
            }
          }
          v910 = (std::__shared_weak_count *)a3[1];
          v1062 = *a3;
          v1063 = v910;
          if (v910)
          {
            v911 = (unint64_t *)&v910->__shared_owners_;
            do
              v912 = __ldxr(v911);
            while (__stxr(v912 + 1, v911));
          }
          std::string::basic_string[abi:ne180100]<0>(&__str, "Qscale");
          (*(void (**)(_BYTE *__return_ptr, Espresso::ANECompilerEngine::ane_kernel *, const Espresso::net **, _BYTE *, std::string *))(*((_QWORD *)v54 + 70) + 120))(buf, v79, &v1062, v54, &__str);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
          v913 = v1063;
          if (v1063)
          {
            v914 = (unint64_t *)&v1063->__shared_owners_;
            do
              v915 = __ldaxr(v914);
            while (__stlxr(v915 - 1, v914));
            if (!v915)
            {
              ((void (*)(std::__shared_weak_count *))v913->__on_zero_shared)(v913);
              std::__shared_weak_count::__release_weak(v913);
            }
          }
          v916 = (std::__shared_weak_count *)a3[1];
          v1060 = *a3;
          v1061 = v916;
          if (v916)
          {
            v917 = (unint64_t *)&v916->__shared_owners_;
            do
              v918 = __ldxr(v917);
            while (__stxr(v918 + 1, v917));
          }
          std::string::basic_string[abi:ne180100]<0>(v1039, "Qbias");
          (*(void (**)(std::string *__return_ptr, Espresso::ANECompilerEngine::ane_kernel *, const Espresso::net **, _BYTE *, void **))(*((_QWORD *)v54 + 70) + 120))(&__str, v79, &v1060, v54, v1039);
          if (SHIBYTE(v1040) < 0)
            operator delete(v1039[0]);
          v919 = v1061;
          if (v1061)
          {
            v920 = (unint64_t *)&v1061->__shared_owners_;
            do
              v921 = __ldaxr(v920);
            while (__stlxr(v921 - 1, v920));
            if (!v921)
            {
              ((void (*)(std::__shared_weak_count *))v919->__on_zero_shared)(v919);
              std::__shared_weak_count::__release_weak(v919);
            }
          }
          v922 = *(_QWORD *)v1048;
          v923 = *(_QWORD *)buf;
          v924 = __str.__r_.__value_.__r.__words[0];
          if (*(_QWORD *)v1048)
            v925 = *(_QWORD *)buf == 0;
          else
            v925 = 1;
          if (!v925 && __str.__r_.__value_.__r.__words[0] != 0)
          {
            v994 = v50;
            v927 = (char *)operator new(0x58uLL);
            *((_QWORD *)v927 + 1) = 0;
            *((_QWORD *)v927 + 2) = 0;
            *(_QWORD *)v927 = &off_1E2DBED88;
            *((_QWORD *)v927 + 3) = &off_1E2DA1270;
            *(_OWORD *)(v927 + 56) = 0u;
            *(_OWORD *)(v927 + 72) = 0u;
            *((_DWORD *)v927 + 8) = v903;
            *((_DWORD *)v927 + 9) = v902;
            *((_QWORD *)v927 + 5) = v922;
            v927[48] = 0;
            v1039[0] = v927 + 24;
            v1039[1] = v927;
            v992 = v927;
            v928 = (char *)operator new(0x58uLL);
            *((_QWORD *)v928 + 1) = 0;
            *((_QWORD *)v928 + 2) = 0;
            *(_QWORD *)v928 = &off_1E2DBEC00;
            *((_QWORD *)v928 + 3) = &off_1E2DA1190;
            *(_OWORD *)(v928 + 56) = 0u;
            *(_OWORD *)(v928 + 72) = 0u;
            *((_DWORD *)v928 + 8) = v903;
            *((_QWORD *)v928 + 5) = v923;
            v928[48] = 0;
            *(_QWORD *)v1035 = v928 + 24;
            v1036 = (std::__shared_weak_count *)v928;
            v989 = v928;
            v929 = (char *)operator new(0x58uLL);
            *((_QWORD *)v929 + 1) = 0;
            *((_QWORD *)v929 + 2) = 0;
            *(_QWORD *)v929 = &off_1E2DBEC00;
            *((_QWORD *)v929 + 3) = &off_1E2DA1190;
            *(_OWORD *)(v929 + 56) = 0u;
            *(_OWORD *)(v929 + 72) = 0u;
            *((_DWORD *)v929 + 8) = v903;
            *((_QWORD *)v929 + 5) = v924;
            v929[48] = 0;
            v930 = v902;
            v1046 = v929 + 24;
            v1047 = (std::__shared_weak_count *)v929;
            std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v1128, 4 * v903 * v902, 1, 1, 1);
            v931 = (uint64_t)v1128;
            if ((_DWORD)v903)
            {
              v932 = 0;
              v933 = 0;
              v934 = 0;
              v935 = 4 * v903;
              do
              {
                v936 = (float *)(*(_QWORD *)(v931 + 16) + v933);
                vDSP_vfltu8((const unsigned __int8 *)(*((_QWORD *)v992 + 5) + v932), 1, v936, 1, v930);
                vDSP_vsmul(v936, 1, (const float *)(*((_QWORD *)v989 + 5) + v934), v936, 1, v930);
                vDSP_vsadd(v936, 1, (const float *)(*((_QWORD *)v929 + 5) + v934), v936, 1, v930);
                v934 += 4;
                v933 += 4 * v930;
                v932 += v930;
              }
              while (v935 != v934);
            }
            v937 = v1129;
            v1058 = v931;
            v1059 = v1129;
            if (v1129)
            {
              v938 = (unint64_t *)&v1129->__shared_owners_;
              do
                v939 = __ldxr(v938);
              while (__stxr(v939 + 1, v938));
            }
            v940 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128), *(const unsigned __int8 **)(v931 + 16), *(int *)(v931 + 8));
            if (v937)
            {
              v941 = (unint64_t *)&v937->__shared_owners_;
              do
                v942 = __ldaxr(v941);
              while (__stlxr(v942 - 1, v941));
              if (!v942)
              {
                ((void (*)(std::__shared_weak_count *))v937->__on_zero_shared)(v937);
                std::__shared_weak_count::__release_weak(v937);
              }
            }
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v940);
            v943 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v994, "setObject:forKeyedSubscript:", v943, CFSTR("KernelOffset"));

            v944 = (void *)MEMORY[0x1E0CB37E8];
            if (v996)
              v945 = 0;
            else
            objc_msgSend(v944, "numberWithUnsignedLong:", v945);
            v946 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v994, "setObject:forKeyedSubscript:", v946, CFSTR("KernelIndex"));

            objc_msgSend(v994, "setObject:forKeyedSubscript:", CFSTR("Float32"), CFSTR("KernelType"));
            v947 = v1129;
            if (v1129)
            {
              v948 = (unint64_t *)&v1129->__shared_owners_;
              do
                v949 = __ldaxr(v948);
              while (__stlxr(v949 - 1, v948));
              if (!v949)
              {
                ((void (*)(std::__shared_weak_count *))v947->__on_zero_shared)(v947);
                std::__shared_weak_count::__release_weak(v947);
              }
            }
            v950 = v1047;
            if (v1047)
            {
              v951 = (unint64_t *)&v1047->__shared_owners_;
              do
                v952 = __ldaxr(v951);
              while (__stlxr(v952 - 1, v951));
              if (!v952)
              {
                ((void (*)(std::__shared_weak_count *))v950->__on_zero_shared)(v950);
                std::__shared_weak_count::__release_weak(v950);
              }
            }
            if (v1036)
            {
              v953 = &v1036->__shared_owners_;
              do
                v954 = __ldaxr((unint64_t *)v953);
              while (__stlxr(v954 - 1, (unint64_t *)v953));
              if (!v954)
              {
                ((void (*)(std::__shared_weak_count *))v1036->__on_zero_shared)(v1036);
                std::__shared_weak_count::__release_weak(v1036);
              }
            }
            v955 = (std::__shared_weak_count *)v1039[1];
            if (v1039[1])
            {
              v956 = (unint64_t *)((char *)v1039[1] + 8);
              do
                v957 = __ldaxr(v956);
              while (__stlxr(v957 - 1, v956));
              if (!v957)
              {
                ((void (*)(std::__shared_weak_count *))v955->__on_zero_shared)(v955);
                std::__shared_weak_count::__release_weak(v955);
              }
            }
            v38 = v988;
            v50 = v994;
            goto LABEL_87;
          }
          v38 = v988;
        }
        goto LABEL_1392;
      }
      v841 = v839 + 536;
      if (v839[559] < 0)
      {
        v876 = *((_QWORD *)v839 + 68);
        if (v876 != 4)
        {
          if (v876 != 6)
            goto LABEL_1315;
          if (**(_DWORD **)v841 != 1852399447 || *(_WORD *)(*(_QWORD *)v841 + 4) != 14452)
            goto LABEL_1315;
          goto LABEL_1303;
        }
        v843 = *(_DWORD **)v841;
      }
      else
      {
        v842 = v839[559];
        v843 = v839 + 536;
        if (v842 != 4)
        {
          if (v842 != 6)
            goto LABEL_1315;
          if (*(_DWORD *)v841 != 1852399447 || *((_WORD *)v839 + 270) != 14452)
            goto LABEL_1315;
          goto LABEL_1303;
        }
      }
      if (*v843 != 947216215)
      {
LABEL_1315:
        LOBYTE(v840) = 0;
        goto LABEL_1345;
      }
LABEL_1303:
      v987 = v38;
      v878 = 0;
      v879 = *(_DWORD *)(*(_QWORD *)v1048 + 8);
      do
      {
        v879 *= *(_DWORD *)(*(_QWORD *)v1048 + 12 + v878);
        v878 += 4;
      }
      while (v878 != 12);
      v880 = (std::__shared_weak_count *)operator new(0x58uLL);
      v880->__shared_owners_ = 0;
      v881 = (unint64_t *)&v880->__shared_owners_;
      v880->__shared_weak_owners_ = 0;
      v880->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBED50;
      v882 = *(const unsigned __int8 **)(v840 + 24);
      v880[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA1250;
      v880[3].std::__shared_count = 0u;
      *(_OWORD *)&v880[2].__shared_owners_ = 0u;
      LODWORD(v880[1].__shared_owners_) = v879;
      v880[1].__shared_weak_owners_ = (uint64_t)v882;
      LOBYTE(v880[2].__vftable) = 0;
      *(_QWORD *)buf = v880 + 1;
      *(_QWORD *)&buf[8] = v880;
      v1066 = v880 + 1;
      v1067 = v880;
      do
        v883 = __ldxr(v881);
      while (__stxr(v883 + 1, v881));
      v884 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128), v882, v879);
      do
        v885 = __ldaxr(v881);
      while (__stlxr(v885 - 1, v881));
      if (!v885)
      {
        ((void (*)(std::__shared_weak_count *))v880->__on_zero_shared)(v880);
        std::__shared_weak_count::__release_weak(v880);
      }
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v884);
      v886 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v50, "setObject:forKeyedSubscript:", v886, CFSTR("KernelOffset"));

      v887 = (void *)MEMORY[0x1E0CB37E8];
      if (v996)
        v888 = 0;
      else
      objc_msgSend(v887, "numberWithUnsignedLong:", v888);
      v889 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v50, "setObject:forKeyedSubscript:", v889, CFSTR("KernelIndex"));

      if (v839[559] < 0)
      {
        v892 = *((_QWORD *)v839 + 68);
        if (v892 != 4)
        {
          if (v892 != 6)
            goto LABEL_1336;
          if (**(_DWORD **)v841 != 1852399447 || *(_WORD *)(*(_QWORD *)v841 + 4) != 14452)
            goto LABEL_1336;
LABEL_1333:
          v894 = CFSTR("Int8");
          goto LABEL_1338;
        }
        v841 = *(char **)v841;
      }
      else
      {
        v890 = v839[559];
        if (v890 != 4)
        {
          if (v890 != 6)
            goto LABEL_1336;
          if (*(_DWORD *)v841 != 1852399447 || *((_WORD *)v839 + 270) != 14452)
            goto LABEL_1336;
          goto LABEL_1333;
        }
      }
      if (*(_DWORD *)v841 != 947216215)
      {
LABEL_1336:
        LOBYTE(v840) = 0;
        goto LABEL_1339;
      }
      v894 = CFSTR("UInt8");
LABEL_1338:
      objc_msgSend(v50, "setObject:forKeyedSubscript:", v894, CFSTR("KernelType"));
      LOBYTE(v840) = 1;
LABEL_1339:
      v895 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v896 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v897 = __ldaxr(v896);
        while (__stlxr(v897 - 1, v896));
        if (!v897)
        {
          ((void (*)(std::__shared_weak_count *))v895->__on_zero_shared)(v895);
          std::__shared_weak_count::__release_weak(v895);
        }
      }
      v54 = lpsrc;
      v38 = v987;
      goto LABEL_1345;
    }
    v85 = v50;
    v86 = v85;
    if (*(__int16 *)(a4 + 96) <= 1 && *(__int16 *)(a4 + 98) <= 1)
    {

      v54 = lpsrc;
      goto LABEL_130;
    }
    (*(void (**)(_BYTE *__return_ptr, _BYTE *))(*(_QWORD *)v54 + 456))(buf, v54);
    v113 = *((_QWORD *)v54 + 99);
    v114 = *((_QWORD *)v54 + 100);
    __str.__r_.__value_.__r.__words[0] = v113;
    __str.__r_.__value_.__l.__size_ = v114;
    if (v114)
    {
      v115 = (unint64_t *)(v114 + 8);
      do
        v116 = __ldxr(v115);
      while (__stxr(v116 + 1, v115));
    }
    if (!(*(_QWORD *)buf | v113))
    {
      (*(void (**)(_BYTE *__return_ptr, _BYTE *))(*(_QWORD *)v54 + 608))(v1048, v54);
      v117 = *(_OWORD *)v1048;
      *(_OWORD *)v1048 = 0uLL;
      v118 = *(std::__shared_weak_count **)&buf[8];
      *(_OWORD *)buf = v117;
      if (v118)
      {
        v119 = (unint64_t *)&v118->__shared_owners_;
        do
          v120 = __ldaxr(v119);
        while (__stlxr(v120 - 1, v119));
        if (!v120)
        {
          ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
          std::__shared_weak_count::__release_weak(v118);
        }
      }
      v121 = *(std::__shared_weak_count **)&v1048[8];
      if (*(_QWORD *)&v1048[8])
      {
        v122 = (unint64_t *)(*(_QWORD *)&v1048[8] + 8);
        do
          v123 = __ldaxr(v122);
        while (__stlxr(v123 - 1, v122));
        if (!v123)
        {
          ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
          std::__shared_weak_count::__release_weak(v121);
        }
      }
      v124 = *((_QWORD *)v54 + 59);
      if (v124)
      {
        *(_OWORD *)v1048 = 0uLL;
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v124 + 80, (__int128 *)v1048);
        v125 = *(std::__shared_weak_count **)&v1048[8];
        if (*(_QWORD *)&v1048[8])
        {
          v126 = (unint64_t *)(*(_QWORD *)&v1048[8] + 8);
          do
            v127 = __ldaxr(v126);
          while (__stlxr(v127 - 1, v126));
          if (!v127)
          {
            ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
            std::__shared_weak_count::__release_weak(v125);
          }
        }
      }
    }
    v128 = a2[552];
    v129 = *((_QWORD *)v54 + 59);
    if (v129
      && *(_QWORD *)v129
      && *(_DWORD *)(v129 + 156) == 8
      && *(_BYTE *)(v129 + 164)
      && !*(_QWORD *)(v129 + 32)
      && !*(_QWORD *)(v129 + 48)
      && !*(_QWORD *)(v129 + 64))
    {
      (*(void (**)(_BYTE *__return_ptr, _BYTE *))(*(_QWORD *)v54 + 464))(v1048, v54);
      v845 = **((_QWORD **)v54 + 59);
      v846 = operator new(0x60uLL);
      v846[1] = 0;
      v846[2] = 0;
      *v846 = &off_1E2DBEB90;
      v847 = *(_QWORD *)(v845 + 16);
      v846[3] = &off_1E2DA1150;
      *((_OWORD *)v846 + 4) = 0u;
      *((_OWORD *)v846 + 5) = 0u;
      *((_OWORD *)v846 + 2) = *(_OWORD *)v1048;
      v846[6] = v847;
      *((_BYTE *)v846 + 56) = 0;
      v1039[0] = v846 + 3;
      v1039[1] = v846;
      Espresso::dilated_conv_bloated_weights<signed char>(v1035, (uint64_t)(v846 + 3), v1000, v999, a4);
      v848 = v1036;
      v1046 = *(char **)v1035;
      v1047 = v1036;
      if (v1036)
      {
        v849 = &v1036->__shared_owners_;
        do
          v850 = __ldxr((unint64_t *)v849);
        while (__stxr(v850 + 1, (unint64_t *)v849));
      }
      Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_s8((Espresso::ANECompilerEngine::final_anec_weights_t *)&v1105, (Espresso::ANECompilerEngine::ane_kernel *)(v54 + 560), &v1046);
      if (v848)
      {
        v851 = (unint64_t *)&v848->__shared_owners_;
        do
          v852 = __ldaxr(v851);
        while (__stlxr(v852 - 1, v851));
        if (!v852)
        {
          ((void (*)(std::__shared_weak_count *))v848->__on_zero_shared)(v848);
          std::__shared_weak_count::__release_weak(v848);
        }
      }
      v853 = 0;
      v854 = *(char **)v1035;
      v855 = *(_DWORD *)(*(_QWORD *)v1035 + 8);
      do
      {
        v855 *= *(_DWORD *)(*(_QWORD *)v1035 + 12 + v853);
        v853 += 4;
      }
      while (v853 != 12);
      v856 = (std::__shared_weak_count *)operator new(0x58uLL);
      v856->__shared_owners_ = 0;
      v857 = (unint64_t *)&v856->__shared_owners_;
      v856->__shared_weak_owners_ = 0;
      v856->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBED50;
      v858 = (const unsigned __int8 *)*((_QWORD *)v854 + 3);
      v856[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA1250;
      v856[3].std::__shared_count = 0u;
      *(_OWORD *)&v856[2].__shared_owners_ = 0u;
      LODWORD(v856[1].__shared_owners_) = v855;
      v856[1].__shared_weak_owners_ = (uint64_t)v858;
      LOBYTE(v856[2].__vftable) = 0;
      v1128 = v856 + 1;
      v1129 = v856;
      *(_QWORD *)&v1127 = v856 + 1;
      *((_QWORD *)&v1127 + 1) = v856;
      do
        v859 = __ldxr(v857);
      while (__stxr(v859 + 1, v857));
      v860 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128), v858, v855);
      do
        v861 = __ldaxr(v857);
      while (__stlxr(v861 - 1, v857));
      if (!v861)
      {
        ((void (*)(std::__shared_weak_count *))v856->__on_zero_shared)(v856);
        std::__shared_weak_count::__release_weak(v856);
      }
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v860);
      v862 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v86, "setObject:forKeyedSubscript:", v862, CFSTR("KernelOffset"));

      v863 = (void *)MEMORY[0x1E0CB37E8];
      if (v128)
        v864 = 0;
      else
      objc_msgSend(v863, "numberWithUnsignedLong:", v864);
      v866 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v86, "setObject:forKeyedSubscript:", v866, CFSTR("KernelIndex"));

      objc_msgSend(v86, "setObject:forKeyedSubscript:", CFSTR("Int8"), CFSTR("KernelType"));
      v867 = v1129;
      if (v1129)
      {
        v868 = (unint64_t *)&v1129->__shared_owners_;
        do
          v869 = __ldaxr(v868);
        while (__stlxr(v869 - 1, v868));
        if (!v869)
        {
          ((void (*)(std::__shared_weak_count *))v867->__on_zero_shared)(v867);
          std::__shared_weak_count::__release_weak(v867);
        }
      }
      v870 = v1036;
      if (v1036)
      {
        v871 = &v1036->__shared_owners_;
        do
          v872 = __ldaxr((unint64_t *)v871);
        while (__stlxr(v872 - 1, (unint64_t *)v871));
        if (!v872)
        {
          ((void (*)(std::__shared_weak_count *))v870->__on_zero_shared)(v870);
          std::__shared_weak_count::__release_weak(v870);
        }
      }
      v873 = (std::__shared_weak_count *)v1039[1];
      if (v1039[1])
      {
        v874 = (unint64_t *)((char *)v1039[1] + 8);
        do
          v875 = __ldaxr(v874);
        while (__stlxr(v875 - 1, v874));
        if (!v875)
        {
          ((void (*)(std::__shared_weak_count *))v873->__on_zero_shared)(v873);
          std::__shared_weak_count::__release_weak(v873);
        }
      }
      if (v1049[1])
      {
        *(void **)&v1050 = v1049[1];
        operator delete(v1049[1]);
      }
      goto LABEL_1208;
    }
    if (*(_QWORD *)buf)
    {
      Espresso::dilated_conv_bloated_weights<float>(v1048, *(uint64_t *)buf, v1000, v999, a4);
      v130 = *(_QWORD *)v1048;
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v1111, *(uint64_t *)v1048, *(uint64_t *)&v1048[8]);
      Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_f32((Espresso::ANECompilerEngine::final_anec_weights_t *)&v1105, (Espresso::ANECompilerEngine::ane_kernel *)(v54 + 560), *(void **)(v130 + 24));
      v131 = 0;
      v132 = *(_DWORD *)(v130 + 8);
      do
      {
        v132 *= *(_DWORD *)(v130 + 12 + v131);
        v131 += 4;
      }
      while (v131 != 12);
      v133 = (std::__shared_weak_count *)operator new(0x58uLL);
      v133->__shared_owners_ = 0;
      v134 = (unint64_t *)&v133->__shared_owners_;
      v133->__shared_weak_owners_ = 0;
      v133->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBED50;
      v135 = *(const unsigned __int8 **)(v130 + 24);
      v133[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA1250;
      v133[3].std::__shared_count = 0u;
      *(_OWORD *)&v133[2].__shared_owners_ = 0u;
      LODWORD(v133[1].__shared_owners_) = 4 * v132;
      v133[1].__shared_weak_owners_ = (uint64_t)v135;
      LOBYTE(v133[2].__vftable) = 0;
      v1039[0] = &v133[1];
      v1039[1] = v133;
      *(_QWORD *)&v1126 = v133 + 1;
      *((_QWORD *)&v1126 + 1) = v133;
      do
        v136 = __ldxr(v134);
      while (__stxr(v136 + 1, v134));
      v137 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128), v135, 4 * v132);
      do
        v138 = __ldaxr(v134);
      while (__stlxr(v138 - 1, v134));
      if (!v138)
      {
        ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
        std::__shared_weak_count::__release_weak(v133);
      }
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v137);
      v139 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v86, "setObject:forKeyedSubscript:", v139, CFSTR("KernelOffset"));

      v140 = (void *)MEMORY[0x1E0CB37E8];
      if (v128)
        v141 = 0;
      else
      objc_msgSend(v140, "numberWithUnsignedLong:", v141);
      v452 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v86, "setObject:forKeyedSubscript:", v452, CFSTR("KernelIndex"));

      objc_msgSend(v86, "setObject:forKeyedSubscript:", CFSTR("Float32"), CFSTR("KernelType"));
      if (v1039[1])
      {
        v453 = (unint64_t *)((char *)v1039[1] + 8);
        do
          v454 = __ldaxr(v453);
        while (__stlxr(v454 - 1, v453));
        if (!v454)
        {
          (*(void (**)(void *))(*(_QWORD *)v1039[1] + 16))(v1039[1]);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v1039[1]);
        }
      }
      v455 = *(std::__shared_weak_count **)&v1048[8];
      if (!*(_QWORD *)&v1048[8])
        goto LABEL_1208;
      v456 = (unint64_t *)(*(_QWORD *)&v1048[8] + 8);
      do
        v457 = __ldaxr(v456);
      while (__stlxr(v457 - 1, v456));
    }
    else if (__str.__r_.__value_.__r.__words[0])
    {
      Espresso::dilated_conv_bloated_weights<unsigned short>(v1048, (uint64_t)__str.__r_.__value_.__l.__data_, v1000, v999, a4);
      v182 = *(_OWORD *)v1048;
      v1125 = *(_OWORD *)v1048;
      if (*(_QWORD *)&v1048[8])
      {
        v183 = (unint64_t *)(*(_QWORD *)&v1048[8] + 8);
        do
          v184 = __ldxr(v183);
        while (__stxr(v184 + 1, v183));
      }
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v1113, v182, *((uint64_t *)&v182 + 1));
      Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_f16((Espresso::ANECompilerEngine::final_anec_weights_t *)&v1105, (Espresso::ANECompilerEngine::ane_kernel *)(v54 + 560), *(void **)(v182 + 24));
      if (*((_QWORD *)&v182 + 1))
      {
        v185 = (unint64_t *)(*((_QWORD *)&v182 + 1) + 8);
        do
          v186 = __ldaxr(v185);
        while (__stlxr(v186 - 1, v185));
        if (!v186)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v182 + 1) + 16))(*((_QWORD *)&v182 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v182 + 1));
        }
      }
      v187 = 0;
      v188 = *(_QWORD *)v1048;
      v189 = *(_DWORD *)(*(_QWORD *)v1048 + 8);
      do
      {
        v189 *= *(_DWORD *)(*(_QWORD *)v1048 + 12 + v187);
        v187 += 4;
      }
      while (v187 != 12);
      v190 = (char *)operator new(0x58uLL);
      v191 = 2 * v189;
      *((_QWORD *)v190 + 1) = 0;
      v192 = (unint64_t *)(v190 + 8);
      *((_QWORD *)v190 + 2) = 0;
      *(_QWORD *)v190 = &off_1E2DBED50;
      v193 = *(void **)(v188 + 24);
      *((_QWORD *)v190 + 3) = &off_1E2DA1250;
      *(_OWORD *)(v190 + 72) = 0u;
      *(_OWORD *)(v190 + 56) = 0u;
      *((_DWORD *)v190 + 8) = v191;
      *((_QWORD *)v190 + 5) = v193;
      v190[48] = 0;
      v1039[0] = v190 + 24;
      v1039[1] = v190;
      memcpy(v193, *(const void **)(v188 + 24), v191);
      *(_QWORD *)&v1124 = v190 + 24;
      *((_QWORD *)&v1124 + 1) = v190;
      do
        v194 = __ldxr(v192);
      while (__stxr(v194 + 1, v192));
      v195 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128), *((const unsigned __int8 **)v190 + 5), *((int *)v190 + 8));
      do
        v196 = __ldaxr(v192);
      while (__stlxr(v196 - 1, v192));
      if (!v196)
      {
        (*(void (**)(char *))(*(_QWORD *)v190 + 16))(v190);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v190);
      }
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v195);
      v197 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v86, "setObject:forKeyedSubscript:", v197, CFSTR("KernelOffset"));

      v198 = (void *)MEMORY[0x1E0CB37E8];
      if (v128)
        v199 = 0;
      else
      objc_msgSend(v198, "numberWithUnsignedLong:", v199);
      v753 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v86, "setObject:forKeyedSubscript:", v753, CFSTR("KernelIndex"));

      objc_msgSend(v86, "setObject:forKeyedSubscript:", CFSTR("Float16"), CFSTR("KernelType"));
      if (v1039[1])
      {
        v754 = (unint64_t *)((char *)v1039[1] + 8);
        do
          v755 = __ldaxr(v754);
        while (__stlxr(v755 - 1, v754));
        if (!v755)
        {
          (*(void (**)(void *))(*(_QWORD *)v1039[1] + 16))(v1039[1]);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v1039[1]);
        }
      }
      v455 = *(std::__shared_weak_count **)&v1048[8];
      if (!*(_QWORD *)&v1048[8])
        goto LABEL_1208;
      v756 = (unint64_t *)(*(_QWORD *)&v1048[8] + 8);
      do
        v457 = __ldaxr(v756);
      while (__stlxr(v457 - 1, v756));
    }
    else
    {
      if (!v129
        || !*(_QWORD *)v129
        || !*(_QWORD *)(v129 + 32) && !*(_QWORD *)(v129 + 48) && !*(_QWORD *)(v129 + 64) && !*(_QWORD *)(v129 + 80))
      {
        Espresso::throw_exception_selector<Espresso::not_implemented_error>("<rdar://problem/36840916> Need proper way of expressing dilated conv to ANEC");
      }
      v1039[0] = 0;
      v1039[1] = 0;
      {
        Espresso::quantized_weights_helper::dequantize_to_float16_2d((Espresso::quantized_weights_helper *)v129, v1048);
      }
      else
      {
        Espresso::quantized_weights_helper::dequantize_to_float16_4d((Espresso::quantized_weights_helper *)v129, v1048);
      }
      v991 = *(_QWORD *)v1048;
      *(_OWORD *)v1039 = *(_OWORD *)v1048;
      (*(void (**)(_BYTE *__return_ptr, _BYTE *))(*(_QWORD *)v54 + 464))(v1048, v54);
      v776 = *(std::__shared_weak_count_vtbl **)(v991 + 16);
      v777 = (std::__shared_weak_count *)operator new(0x60uLL);
      v777->__shared_owners_ = 0;
      v777->__shared_weak_owners_ = 0;
      v777->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF060;
      v777[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA1410;
      *(_OWORD *)&v777[2].__shared_weak_owners_ = 0u;
      *(_OWORD *)&v777[3].__shared_owners_ = 0u;
      *(_OWORD *)&v777[1].__shared_owners_ = *(_OWORD *)v1048;
      v777[2].__vftable = v776;
      LOBYTE(v777[2].__shared_owners_) = 0;
      *(_QWORD *)v1035 = v777 + 1;
      v1036 = v777;
      Espresso::dilated_conv_bloated_weights<unsigned short>(&v1128, (uint64_t)&v777[1], v1000, v999, a4);
      v778 = (uint64_t)v1128;
      v779 = v1129;
      v1122 = (uint64_t)v1128;
      v1123 = v1129;
      if (v1129)
      {
        v780 = (unint64_t *)&v1129->__shared_owners_;
        do
          v781 = __ldxr(v780);
        while (__stxr(v781 + 1, v780));
      }
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v1113, v778, (uint64_t)v779);
      Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_f16((Espresso::ANECompilerEngine::final_anec_weights_t *)&v1105, (Espresso::ANECompilerEngine::ane_kernel *)(v54 + 560), *(void **)(v778 + 24));
      if (v779)
      {
        v782 = (unint64_t *)&v779->__shared_owners_;
        do
          v783 = __ldaxr(v782);
        while (__stlxr(v783 - 1, v782));
        if (!v783)
        {
          ((void (*)(std::__shared_weak_count *))v779->__on_zero_shared)(v779);
          std::__shared_weak_count::__release_weak(v779);
        }
      }
      v784 = 0;
      v785 = (uint64_t)v1128;
      shared_owners = v1128->__shared_owners_;
      do
      {
        shared_owners *= *(_DWORD *)((char *)&v1128->__shared_owners_ + v784 + 4);
        v784 += 4;
      }
      while (v784 != 12);
      v787 = (std::__shared_weak_count *)operator new(0x58uLL);
      v788 = 2 * shared_owners;
      v787->__shared_owners_ = 0;
      v789 = (unint64_t *)&v787->__shared_owners_;
      v787->__shared_weak_owners_ = 0;
      v787->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBED50;
      v790 = *(void **)(v785 + 24);
      v787[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA1250;
      v787[3].std::__shared_count = 0u;
      *(_OWORD *)&v787[2].__shared_owners_ = 0u;
      LODWORD(v787[1].__shared_owners_) = v788;
      v787[1].__shared_weak_owners_ = (uint64_t)v790;
      LOBYTE(v787[2].__vftable) = 0;
      v1120 = v787 + 1;
      v1121 = v787;
      memcpy(v790, *(const void **)(v785 + 24), v788);
      v1118 = v787 + 1;
      v1119 = v787;
      do
        v791 = __ldxr(v789);
      while (__stxr(v791 + 1, v789));
      v792 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128), (const unsigned __int8 *)v787[1].__shared_weak_owners_, SLODWORD(v787[1].__shared_owners_));
      do
        v793 = __ldaxr(v789);
      while (__stlxr(v793 - 1, v789));
      if (!v793)
      {
        ((void (*)(std::__shared_weak_count *))v787->__on_zero_shared)(v787);
        std::__shared_weak_count::__release_weak(v787);
      }
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v792);
      v794 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v86, "setObject:forKeyedSubscript:", v794, CFSTR("KernelOffset"));

      objc_msgSend(v86, "setObject:forKeyedSubscript:", CFSTR("Float16"), CFSTR("KernelType"));
      v795 = (void *)MEMORY[0x1E0CB37E8];
      if (v128)
        v796 = 0;
      else
      objc_msgSend(v795, "numberWithUnsignedLong:", v796);
      v797 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v86, "setObject:forKeyedSubscript:", v797, CFSTR("KernelIndex"));

      v1117 = 0uLL;
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](lpsrc[59] + 80, &v1117);
      v798 = (std::__shared_weak_count *)*((_QWORD *)&v1117 + 1);
      if (*((_QWORD *)&v1117 + 1))
      {
        v799 = (unint64_t *)(*((_QWORD *)&v1117 + 1) + 8);
        do
          v800 = __ldaxr(v799);
        while (__stlxr(v800 - 1, v799));
        if (!v800)
        {
          ((void (*)(std::__shared_weak_count *))v798->__on_zero_shared)(v798);
          std::__shared_weak_count::__release_weak(v798);
        }
      }
      v801 = v1121;
      if (v1121)
      {
        v802 = (unint64_t *)&v1121->__shared_owners_;
        do
          v803 = __ldaxr(v802);
        while (__stlxr(v803 - 1, v802));
        if (!v803)
        {
          ((void (*)(std::__shared_weak_count *))v801->__on_zero_shared)(v801);
          std::__shared_weak_count::__release_weak(v801);
        }
      }
      v804 = v1129;
      if (v1129)
      {
        v805 = (unint64_t *)&v1129->__shared_owners_;
        do
          v806 = __ldaxr(v805);
        while (__stlxr(v806 - 1, v805));
        if (!v806)
        {
          ((void (*)(std::__shared_weak_count *))v804->__on_zero_shared)(v804);
          std::__shared_weak_count::__release_weak(v804);
        }
      }
      if (v1036)
      {
        v807 = &v1036->__shared_owners_;
        do
          v808 = __ldaxr((unint64_t *)v807);
        while (__stlxr(v808 - 1, (unint64_t *)v807));
        if (!v808)
        {
          ((void (*)(std::__shared_weak_count *))v1036->__on_zero_shared)(v1036);
          std::__shared_weak_count::__release_weak(v1036);
        }
      }
      if (v1049[1])
      {
        *(void **)&v1050 = v1049[1];
        operator delete(v1049[1]);
      }
      v455 = (std::__shared_weak_count *)v1039[1];
      if (!v1039[1])
        goto LABEL_1208;
      v809 = (unint64_t *)((char *)v1039[1] + 8);
      do
        v457 = __ldaxr(v809);
      while (__stlxr(v457 - 1, v809));
    }
    if (!v457)
    {
      ((void (*)(std::__shared_weak_count *))v455->__on_zero_shared)(v455);
      std::__shared_weak_count::__release_weak(v455);
    }
LABEL_1208:
    size = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
    if (__str.__r_.__value_.__l.__size_)
    {
      v811 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
      do
        v812 = __ldaxr(v811);
      while (__stlxr(v812 - 1, v811));
      if (!v812)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    v813 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v814 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v815 = __ldaxr(v814);
      while (__stlxr(v815 - 1, v814));
      if (!v815)
      {
        ((void (*)(std::__shared_weak_count *))v813->__on_zero_shared)(v813);
        std::__shared_weak_count::__release_weak(v813);
      }
    }

  }
LABEL_87:
  Espresso::ANECompilerEngine::sparsity_options::required_sparsity_for_compression(v1001, v56);
  v58 = v57;
  v59 = 0;
  if (v1004 && HIBYTE(v1092) && (_BYTE)v1092)
  {
    v60 = v50;
    v61 = v60;
    v59 = *(__int16 *)(a4 + 96) > 1 || *(__int16 *)(a4 + 98) > 1;
    if (!v59)
    {
LABEL_337:

      goto LABEL_338;
    }
    v993 = v50;
    objc_msgSend(v60, "objectForKeyedSubscript:", CFSTR("KernelType"));
    v63 = (void *)objc_claimAutoreleasedReturnValue();
    *(_OWORD *)v1048 = 0uLL;
    *(_QWORD *)&buf[8] = 0;
    *(_QWORD *)buf = 0;
    v990 = v63;
    if (objc_msgSend(v63, "isEqualToString:", CFSTR("Float16")))
    {
      v65 = (std::__shared_weak_count *)*((_QWORD *)&v1107 + 1);
      v64 = v1107;
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v1107;
      if (*((_QWORD *)&v1107 + 1))
      {
        v66 = (unint64_t *)(*((_QWORD *)&v1107 + 1) + 8);
        do
          v67 = __ldxr(v66);
        while (__stxr(v67 + 1, v66));
      }
      if (!v64)
        Espresso::throw_exception_selector<Espresso::invalid_state_error>("Null final fp16 weights");
      v68 = *(_DWORD *)(v64 + 8);
      for (i = 12; i != 24; i += 4)
        v68 *= *(_DWORD *)(v64 + i);
      v70 = (char *)operator new(0x58uLL);
      *((_QWORD *)v70 + 1) = 0;
      *((_QWORD *)v70 + 2) = 0;
      *(_QWORD *)v70 = &off_1E2DBED50;
      v71 = *(_QWORD *)(v64 + 24);
      *((_QWORD *)v70 + 3) = &off_1E2DA1250;
      *(_OWORD *)(v70 + 56) = 0u;
      *(_OWORD *)(v70 + 72) = 0u;
      *((_DWORD *)v70 + 8) = 2 * v68;
      *((_QWORD *)v70 + 5) = v71;
      v70[48] = 0;
      *(_QWORD *)buf = v70 + 24;
      *(_QWORD *)&buf[8] = v70;
      v72 = *(int *)(v64 + 8);
      for (j = 12; j != 24; j += 4)
        v72 *= *(int *)(v64 + j);
      Espresso::compress_dilated_conv_sparse_kernel_mask<unsigned short>((uint64_t *)v1039, (_DWORD *)v64, a4);
      *(_OWORD *)v1048 = *(_OWORD *)v1039;
      if (!v65)
        goto LABEL_304;
      v74 = (unint64_t *)&v65->__shared_owners_;
      do
        v75 = __ldaxr(v74);
      while (__stlxr(v75 - 1, v74));
    }
    else if (objc_msgSend(v63, "isEqualToString:", CFSTR("Float32")))
    {
      v65 = (std::__shared_weak_count *)*((_QWORD *)&v1106 + 1);
      v104 = v1106;
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v1106;
      if (*((_QWORD *)&v1106 + 1))
      {
        v105 = (unint64_t *)(*((_QWORD *)&v1106 + 1) + 8);
        do
          v106 = __ldxr(v105);
        while (__stxr(v106 + 1, v105));
      }
      if (!v104)
        Espresso::throw_exception_selector<Espresso::invalid_state_error>("Null final fp32 weights");
      v107 = *(_DWORD *)(v104 + 8);
      for (k = 12; k != 24; k += 4)
        v107 *= *(_DWORD *)(v104 + k);
      v109 = (char *)operator new(0x58uLL);
      *((_QWORD *)v109 + 1) = 0;
      *((_QWORD *)v109 + 2) = 0;
      *(_QWORD *)v109 = &off_1E2DBED50;
      v110 = *(_QWORD *)(v104 + 24);
      *((_QWORD *)v109 + 3) = &off_1E2DA1250;
      *(_OWORD *)(v109 + 56) = 0u;
      *(_OWORD *)(v109 + 72) = 0u;
      *((_DWORD *)v109 + 8) = 4 * v107;
      *((_QWORD *)v109 + 5) = v110;
      v109[48] = 0;
      *(_QWORD *)buf = v109 + 24;
      *(_QWORD *)&buf[8] = v109;
      v72 = *(int *)(v104 + 8);
      for (m = 12; m != 24; m += 4)
        v72 *= *(int *)(v104 + m);
      Espresso::compress_dilated_conv_sparse_kernel_mask<unsigned short>((uint64_t *)v1039, (_DWORD *)v104, a4);
      *(_OWORD *)v1048 = *(_OWORD *)v1039;
      if (!v65)
        goto LABEL_304;
      v112 = (unint64_t *)&v65->__shared_owners_;
      do
        v75 = __ldaxr(v112);
      while (__stlxr(v75 - 1, v112));
    }
    else if (objc_msgSend(v63, "isEqualToString:", CFSTR("UInt8")))
    {
      v65 = (std::__shared_weak_count *)*((_QWORD *)&v1108 + 1);
      v157 = v1108;
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v1108;
      if (*((_QWORD *)&v1108 + 1))
      {
        v158 = (unint64_t *)(*((_QWORD *)&v1108 + 1) + 8);
        do
          v159 = __ldxr(v158);
        while (__stxr(v159 + 1, v158));
      }
      if (!v157)
        Espresso::throw_exception_selector<Espresso::invalid_state_error>("Null final uint8 weights");
      v160 = *(_DWORD *)(v157 + 8);
      for (n = 12; n != 24; n += 4)
        v160 *= *(_DWORD *)(v157 + n);
      v162 = (char *)operator new(0x58uLL);
      *((_QWORD *)v162 + 1) = 0;
      *((_QWORD *)v162 + 2) = 0;
      *(_QWORD *)v162 = &off_1E2DBED50;
      v163 = *(_QWORD *)(v157 + 24);
      *((_QWORD *)v162 + 3) = &off_1E2DA1250;
      *(_OWORD *)(v162 + 56) = 0u;
      *(_OWORD *)(v162 + 72) = 0u;
      *((_DWORD *)v162 + 8) = v160;
      *((_QWORD *)v162 + 5) = v163;
      v162[48] = 0;
      *(_QWORD *)buf = v162 + 24;
      *(_QWORD *)&buf[8] = v162;
      v72 = *(int *)(v157 + 8);
      for (ii = 12; ii != 24; ii += 4)
        v72 *= *(int *)(v157 + ii);
      Espresso::compress_dilated_conv_sparse_kernel_mask<unsigned short>((uint64_t *)v1039, (_DWORD *)v157, a4);
      *(_OWORD *)v1048 = *(_OWORD *)v1039;
      if (!v65)
        goto LABEL_304;
      v165 = (unint64_t *)&v65->__shared_owners_;
      do
        v75 = __ldaxr(v165);
      while (__stlxr(v75 - 1, v165));
    }
    else
    {
      if (!objc_msgSend(v63, "isEqualToString:", CFSTR("Int8")))
      {
        if (v63)
          v982 = (const char *)objc_msgSend(objc_retainAutorelease(v63), "UTF8String");
        else
          v982 = "";
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v982;
        Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*>("Invalid kernel type %s", &__str);
      }
      v65 = (std::__shared_weak_count *)*((_QWORD *)&v1109 + 1);
      v200 = v1109;
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v1109;
      if (*((_QWORD *)&v1109 + 1))
      {
        v201 = (unint64_t *)(*((_QWORD *)&v1109 + 1) + 8);
        do
          v202 = __ldxr(v201);
        while (__stxr(v202 + 1, v201));
      }
      if (!v200)
        Espresso::throw_exception_selector<Espresso::invalid_state_error>("Null final int8 weights");
      v203 = *(_DWORD *)(v200 + 8);
      for (jj = 12; jj != 24; jj += 4)
        v203 *= *(_DWORD *)(v200 + jj);
      v205 = (char *)operator new(0x58uLL);
      *((_QWORD *)v205 + 1) = 0;
      *((_QWORD *)v205 + 2) = 0;
      *(_QWORD *)v205 = &off_1E2DBED50;
      v206 = *(_QWORD *)(v200 + 24);
      *((_QWORD *)v205 + 3) = &off_1E2DA1250;
      *(_OWORD *)(v205 + 56) = 0u;
      *(_OWORD *)(v205 + 72) = 0u;
      *((_DWORD *)v205 + 8) = v203;
      *((_QWORD *)v205 + 5) = v206;
      v205[48] = 0;
      *(_QWORD *)buf = v205 + 24;
      *(_QWORD *)&buf[8] = v205;
      v72 = *(int *)(v200 + 8);
      for (kk = 12; kk != 24; kk += 4)
        v72 *= *(int *)(v200 + kk);
      Espresso::compress_dilated_conv_sparse_kernel_mask<unsigned short>((uint64_t *)v1039, (_DWORD *)v200, a4);
      *(_OWORD *)v1048 = *(_OWORD *)v1039;
      if (!v65)
        goto LABEL_304;
      v208 = (unint64_t *)&v65->__shared_owners_;
      do
        v75 = __ldaxr(v208);
      while (__stlxr(v75 - 1, v208));
    }
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
LABEL_304:
    v209 = a2[552];
    v210 = (void *)MEMORY[0x1E0CB37E8];
    if (a2[552])
      v211 = 0;
    else
    objc_msgSend(v210, "numberWithUnsignedLong:", v211);
    v212 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v61, "setObject:forKeyedSubscript:", v212, CFSTR("KernelIndex"));

    v213 = v38;
    v214 = (void *)MEMORY[0x1E0CB37E8];
    v215 = (Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128);
    v216 = *(_QWORD *)buf;
    v217 = *(std::__shared_weak_count **)&buf[8];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *(_OWORD *)buf;
    if (*(_QWORD *)&buf[8])
    {
      v218 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v219 = __ldxr(v218);
      while (__stxr(v219 + 1, v218));
    }
    objc_msgSend(v214, "numberWithInt:", Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v215, *(const unsigned __int8 **)(v216 + 16), *(int *)(v216 + 8)));
    v220 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v61, "setObject:forKeyedSubscript:", v220, CFSTR("KernelOffset"));

    v38 = v213;
    v50 = v993;
    if (v217)
    {
      v221 = (unint64_t *)&v217->__shared_owners_;
      do
        v222 = __ldaxr(v221);
      while (__stlxr(v222 - 1, v221));
      if (!v222)
      {
        ((void (*)(std::__shared_weak_count *))v217->__on_zero_shared)(v217);
        std::__shared_weak_count::__release_weak(v217);
      }
    }
    v223 = *(_OWORD *)v1048;
    *(_OWORD *)v1039 = *(_OWORD *)v1048;
    if (*(_QWORD *)&v1048[8])
    {
      v224 = (unint64_t *)(*(_QWORD *)&v1048[8] + 8);
      do
        v225 = __ldxr(v224);
      while (__stxr(v225 + 1, v224));
    }
    v226 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v215, *(const unsigned __int8 **)(v223 + 16), *(int *)(v223 + 8));
    if (*((_QWORD *)&v223 + 1))
    {
      v227 = (unint64_t *)(*((_QWORD *)&v223 + 1) + 8);
      do
        v228 = __ldaxr(v227);
      while (__stlxr(v228 - 1, v227));
      if (!v228)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v223 + 1) + 16))(*((_QWORD *)&v223 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v223 + 1));
      }
    }
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v226);
    v229 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v61, "setObject:forKeyedSubscript:", v229, CFSTR("KernelMaskByteOffset"));

    v230 = (void *)MEMORY[0x1E0CB37E8];
    if (v209)
      v231 = 0;
    else
    objc_msgSend(v230, "numberWithUnsignedLong:", v231);
    v232 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v61, "setObject:forKeyedSubscript:", v232, CFSTR("KernelMaskIndex"));

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", v72);
    v233 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v61, "setObject:forKeyedSubscript:", v233, CFSTR("KernelCoeffCount"));

    objc_msgSend(v61, "setObject:forKeyedSubscript:", CFSTR("Sparse"), CFSTR("KernelMode"));
    v234 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v235 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v236 = __ldaxr(v235);
      while (__stlxr(v236 - 1, v235));
      if (!v236)
      {
        ((void (*)(std::__shared_weak_count *))v234->__on_zero_shared)(v234);
        std::__shared_weak_count::__release_weak(v234);
      }
    }
    v237 = *(std::__shared_weak_count **)&v1048[8];
    if (*(_QWORD *)&v1048[8])
    {
      v238 = (unint64_t *)(*(_QWORD *)&v1048[8] + 8);
      do
        v239 = __ldaxr(v238);
      while (__stlxr(v239 - 1, v238));
      if (!v239)
      {
        ((void (*)(std::__shared_weak_count *))v237->__on_zero_shared)(v237);
        std::__shared_weak_count::__release_weak(v237);
      }
    }

    goto LABEL_337;
  }
LABEL_338:
  if (v59 || v1004 || !v38)
    goto LABEL_410;
  v240 = v50;
  *(_OWORD *)v1048 = 0uLL;
  *(_QWORD *)&buf[8] = 0;
  *(_QWORD *)buf = 0;
  if ((_QWORD)v1106)
  {
    v241 = (std::__shared_weak_count *)*((_QWORD *)&v1106 + 1);
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v1106;
    if (*((_QWORD *)&v1106 + 1))
    {
      v242 = (unint64_t *)(*((_QWORD *)&v1106 + 1) + 8);
      do
        v243 = __ldxr(v242);
      while (__stxr(v243 + 1, v242));
    }
    v244 = Espresso::ANECompilerEngine::compress_sparse_weights<float,4>((uint64_t)&__str, (uint64_t)v1048, (uint64_t)buf, v58);
    if (!v241)
      goto LABEL_372;
    v245 = (unint64_t *)&v241->__shared_owners_;
    do
      v246 = __ldaxr(v245);
    while (__stlxr(v246 - 1, v245));
    goto LABEL_370;
  }
  if ((_QWORD)v1107)
  {
    v241 = (std::__shared_weak_count *)*((_QWORD *)&v1107 + 1);
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v1107;
    if (*((_QWORD *)&v1107 + 1))
    {
      v247 = (unint64_t *)(*((_QWORD *)&v1107 + 1) + 8);
      do
        v248 = __ldxr(v247);
      while (__stxr(v248 + 1, v247));
    }
    v244 = Espresso::ANECompilerEngine::compress_sparse_weights<unsigned short,4>((uint64_t)&__str, (uint64_t)v1048, (uint64_t)buf, v58);
    if (!v241)
      goto LABEL_372;
    v249 = (unint64_t *)&v241->__shared_owners_;
    do
      v246 = __ldaxr(v249);
    while (__stlxr(v246 - 1, v249));
    goto LABEL_370;
  }
  if ((_QWORD)v1108)
  {
    v241 = (std::__shared_weak_count *)*((_QWORD *)&v1108 + 1);
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v1108;
    if (*((_QWORD *)&v1108 + 1))
    {
      v250 = (unint64_t *)(*((_QWORD *)&v1108 + 1) + 8);
      do
        v251 = __ldxr(v250);
      while (__stxr(v251 + 1, v250));
    }
    v244 = Espresso::ANECompilerEngine::compress_sparse_weights<unsigned char,4>((uint64_t)&__str, (uint64_t)v1048, (uint64_t)buf, v58);
    if (!v241)
      goto LABEL_372;
    v252 = (unint64_t *)&v241->__shared_owners_;
    do
      v246 = __ldaxr(v252);
    while (__stlxr(v246 - 1, v252));
    goto LABEL_370;
  }
  if ((_QWORD)v1109)
  {
    v241 = (std::__shared_weak_count *)*((_QWORD *)&v1109 + 1);
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v1109;
    if (*((_QWORD *)&v1109 + 1))
    {
      v253 = (unint64_t *)(*((_QWORD *)&v1109 + 1) + 8);
      do
        v254 = __ldxr(v253);
      while (__stxr(v254 + 1, v253));
    }
    v244 = Espresso::ANECompilerEngine::compress_sparse_weights<signed char,4>((uint64_t)&__str, (uint64_t)v1048, (uint64_t)buf, v58);
    if (!v241)
      goto LABEL_372;
    v255 = (unint64_t *)&v241->__shared_owners_;
    do
      v246 = __ldaxr(v255);
    while (__stlxr(v246 - 1, v255));
LABEL_370:
    if (!v246)
    {
      ((void (*)(std::__shared_weak_count *))v241->__on_zero_shared)(v241);
      std::__shared_weak_count::__release_weak(v241);
    }
    goto LABEL_372;
  }
  v244 = 0;
LABEL_372:
  v256 = *(_QWORD *)v1048;
  if (*(_QWORD *)v1048)
    v257 = *(_QWORD *)buf == 0;
  else
    v257 = 1;
  if (!v257)
  {
    v258 = a2[552];
    v259 = (Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128);
    v260 = *(std::__shared_weak_count **)&v1048[8];
    *(_OWORD *)v1039 = *(_OWORD *)v1048;
    if (*(_QWORD *)&v1048[8])
    {
      v261 = (unint64_t *)(*(_QWORD *)&v1048[8] + 8);
      do
        v262 = __ldxr(v261);
      while (__stxr(v262 + 1, v261));
    }
    v263 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v259, *(const unsigned __int8 **)(v256 + 16), *(int *)(v256 + 8));
    if (v260)
    {
      v264 = (unint64_t *)&v260->__shared_owners_;
      do
        v265 = __ldaxr(v264);
      while (__stlxr(v265 - 1, v264));
      if (!v265)
      {
        ((void (*)(std::__shared_weak_count *))v260->__on_zero_shared)(v260);
        std::__shared_weak_count::__release_weak(v260);
      }
    }
    v266 = (void *)MEMORY[0x1E0CB37E8];
    if (v258)
      v267 = 0;
    else
    objc_msgSend(v266, "numberWithUnsignedLong:", v267);
    v268 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v240, "setObject:forKeyedSubscript:", v268, CFSTR("KernelIndex"));

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v263);
    v269 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v240, "setObject:forKeyedSubscript:", v269, CFSTR("KernelOffset"));

    v270 = *(_QWORD *)buf;
    v271 = *(std::__shared_weak_count **)&buf[8];
    *(_QWORD *)v1035 = *(_QWORD *)buf;
    v1036 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v272 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v273 = __ldxr(v272);
      while (__stxr(v273 + 1, v272));
    }
    v274 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v259, *(const unsigned __int8 **)(v270 + 16), *(int *)(v270 + 8));
    if (v271)
    {
      v275 = (unint64_t *)&v271->__shared_owners_;
      do
        v276 = __ldaxr(v275);
      while (__stlxr(v276 - 1, v275));
      if (!v276)
      {
        ((void (*)(std::__shared_weak_count *))v271->__on_zero_shared)(v271);
        std::__shared_weak_count::__release_weak(v271);
      }
    }
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v274);
    v277 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v240, "setObject:forKeyedSubscript:", v277, CFSTR("KernelMaskByteOffset"));

    v278 = (void *)MEMORY[0x1E0CB37E8];
    if (v258)
      v279 = 0;
    else
    objc_msgSend(v278, "numberWithUnsignedLong:", v279);
    v280 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v240, "setObject:forKeyedSubscript:", v280, CFSTR("KernelMaskIndex"));

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", v244);
    v281 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v240, "setObject:forKeyedSubscript:", v281, CFSTR("KernelCoeffCount"));

    objc_msgSend(v240, "setObject:forKeyedSubscript:", CFSTR("Sparse"), CFSTR("KernelMode"));
  }
  v282 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v283 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v284 = __ldaxr(v283);
    while (__stlxr(v284 - 1, v283));
    if (!v284)
    {
      ((void (*)(std::__shared_weak_count *))v282->__on_zero_shared)(v282);
      std::__shared_weak_count::__release_weak(v282);
    }
  }
  v285 = *(std::__shared_weak_count **)&v1048[8];
  if (*(_QWORD *)&v1048[8])
  {
    v286 = (unint64_t *)(*(_QWORD *)&v1048[8] + 8);
    do
      v287 = __ldaxr(v286);
    while (__stlxr(v287 - 1, v286));
    if (!v287)
    {
      ((void (*)(std::__shared_weak_count *))v285->__on_zero_shared)(v285);
      std::__shared_weak_count::__release_weak(v285);
    }
  }

LABEL_410:
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *(__int16 *)(a4 + 92));
  v288 = (void *)objc_claimAutoreleasedReturnValue();
  v1134[0] = v288;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *(__int16 *)(a4 + 94));
  v289 = (void *)objc_claimAutoreleasedReturnValue();
  v1134[1] = v289;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v1134, 2);
  v290 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v50, "setObject:forKeyedSubscript:", v290, CFSTR("Step"));

  v291 = *(_OWORD *)(a4 + 144);
  v1055 = *(_OWORD *)(a4 + 128);
  v1056 = v291;
  v1057 = *(_QWORD *)(a4 + 160);
  v292 = *(_OWORD *)(a4 + 80);
  v1051 = *(_OWORD *)(a4 + 64);
  *(_OWORD *)v1052 = v292;
  v293 = *(_OWORD *)(a4 + 112);
  v1053 = *(_OWORD *)(a4 + 96);
  v1054 = v293;
  v294 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)v1048 = *(_OWORD *)a4;
  *(_OWORD *)&v1048[16] = v294;
  v295 = *(_OWORD *)(a4 + 48);
  v296 = HIBYTE(v1092);
  v297 = v1004;
  if (!HIBYTE(v1092))
    v297 = 0;
  *(_OWORD *)v1049 = *(_OWORD *)(a4 + 32);
  v1050 = v295;
  if (v297)
  {
    *(_QWORD *)&v1050 = __PAIR64__(v999, v1000);
    LODWORD(v1053) = 65537;
  }
  Espresso::abstract_blob_container::shape(buf, *a6);
  v298 = *(_DWORD *)buf;
  Espresso::abstract_blob_container::shape((char *)&__str, *a6);
  v299 = HIDWORD(__str.__r_.__value_.__r.__words[0]);
  Espresso::abstract_blob_container::shape((char *)v1039, *a7);
  v300 = (int)v1039[0];
  Espresso::abstract_blob_container::shape((char *)v1035, *a7);
  Espresso::ANECompilerEngine::deconvolution_kernel::get_padding((Espresso::ANECompilerEngine::deconvolution_kernel *)&v1046, (const Espresso::convolution_uniforms *)v1048, v298, v299, v300, v1035[1]);
  v301 = v1046;
  v302 = HIDWORD(v1046);
  v303 = v1047;
  v304 = HIDWORD(v1047);
  if (v1037)
  {
    v1038 = v1037;
    operator delete(v1037);
  }
  if (v1044)
  {
    v1045 = v1044;
    operator delete(v1044);
  }
  if (v1132)
  {
    v1133 = v1132;
    operator delete(v1132);
  }
  if (v1137)
  {
    v1138.__begin_ = (std::vector<std::string>::pointer)v1137;
    operator delete(v1137);
  }
  if (!(_DWORD)v303 && !(_DWORD)v304 && !(_DWORD)v301)
  {
    if (!(_DWORD)v302)
      goto LABEL_452;
    v304 = 0;
    v301 = 0;
    goto LABEL_428;
  }
  if ((v303 & 0x80000000) == 0)
  {
LABEL_428:
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v303);
    v305 = (void *)objc_claimAutoreleasedReturnValue();
    v306 = 1;
    goto LABEL_430;
  }
  v306 = 0;
  v305 = &unk_1E2DEDA90;
LABEL_430:
  objc_msgSend(v50, "setObject:forKeyedSubscript:", v305, CFSTR("PadTop"));
  if (v306)

  if ((v304 & 0x80000000) != 0)
  {
    v307 = &unk_1E2DEDA90;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v304);
    v307 = (void *)objc_claimAutoreleasedReturnValue();
  }
  objc_msgSend(v50, "setObject:forKeyedSubscript:", v307, CFSTR("PadBot"));
  if ((v304 & 0x80000000) == 0)

  if ((v301 & 0x80000000) != 0)
  {
    v308 = &unk_1E2DEDA90;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v301);
    v308 = (void *)objc_claimAutoreleasedReturnValue();
  }
  objc_msgSend(v50, "setObject:forKeyedSubscript:", v308, CFSTR("PadLeft"));
  if ((v301 & 0x80000000) == 0)

  if ((v302 & 0x80000000) != 0)
  {
    v309 = &unk_1E2DEDA90;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v302);
    v309 = (void *)objc_claimAutoreleasedReturnValue();
  }
  objc_msgSend(v50, "setObject:forKeyedSubscript:", v309, CFSTR("PadRight"));
  if ((v302 & 0x80000000) == 0)

  if (*(_WORD *)(a4 + 74))
  {
    if (*(_WORD *)(a4 + 74) != 1)
      goto LABEL_452;
    v310 = CFSTR("Replication");
  }
  else
  {
    v310 = CFSTR("Zero");
  }
  objc_msgSend(v50, "setObject:forKeyedSubscript:", v310, CFSTR("PaddingMode"));
LABEL_452:
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)v1048, a5);
  v311 = v1004;
  if (v296)
    v311 = 0;
  if (v311)
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithShort:", *(__int16 *)(a4 + 96));
    v312 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v50, "setObject:forKeyedSubscript:", v312, CFSTR("KernelDilationX"));

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithShort:", *(__int16 *)(a4 + 98));
    v313 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v50, "setObject:forKeyedSubscript:", v313, CFSTR("KernelDilationY"));

    objc_msgSend(v50, "setObject:forKeyedSubscript:", v995, CFSTR("Type"));
  }
  v314 = (void *)*((_QWORD *)&v1054 + 1);
  *((_QWORD *)&v1054 + 1) = CFSTR("Conv");

  objc_storeStrong((id *)&v1055, v50);
  v315 = (uint64_t)*a3 + 136;
  *(_QWORD *)buf = v1048;
  v316 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v315, v1048, (__int128 **)buf);
  v318 = (std::__shared_weak_count *)*((_QWORD *)v316 + 6);
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v317;
  __str.__r_.__value_.__l.__size_ = (std::string::size_type)v318;
  if (v318)
  {
    v319 = (unint64_t *)&v318->__shared_owners_;
    do
      v320 = __ldxr(v319);
    while (__stxr(v320 + 1, v319));
  }
  DWORD2(v1055) = v317[41];
  HIDWORD(v1055) = v998;
  v321 = v1090;
  if ((unint64_t)v1090 >= v1091)
  {
    v323 = 0x8E38E38E38E38E39 * (((uint64_t)v1090 - v1089) >> 4);
    if (v323 + 1 > 0x1C71C71C71C71C7)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v324 = 0x1C71C71C71C71C72 * ((uint64_t)(v1091 - v1089) >> 4);
    if (v324 <= v323 + 1)
      v324 = v323 + 1;
    if (0x8E38E38E38E38E39 * ((uint64_t)(v1091 - v1089) >> 4) >= 0xE38E38E38E38E3)
      v325 = 0x1C71C71C71C71C7;
    else
      v325 = v324;
    *((_QWORD *)&v1136 + 1) = &v1091;
    if (v325)
      v325 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v325);
    else
      v326 = 0;
    *(_QWORD *)buf = v325;
    *(_QWORD *)&buf[8] = v325 + 144 * v323;
    *(_QWORD *)&buf[16] = *(_QWORD *)&buf[8];
    *(_QWORD *)&v1136 = v325 + 144 * v326;
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(*(std::string **)&buf[8], (uint64_t)v1048);
    *(_QWORD *)&buf[16] += 144;
    std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v1089, buf);
    v322 = v1090;
    std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)buf);
  }
  else
  {
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v1090, (uint64_t)v1048);
    v322 = v321 + 6;
  }
  v1090 = v322;
  if (v318)
  {
    v327 = (unint64_t *)&v318->__shared_owners_;
    do
      v328 = __ldaxr(v327);
    while (__stlxr(v328 - 1, v327));
    if (!v328)
    {
      ((void (*)(std::__shared_weak_count *))v318->__on_zero_shared)(v318);
      std::__shared_weak_count::__release_weak(v318);
    }
  }

  if (SBYTE7(v1053) < 0)
    operator delete(v1052[0]);
  *(_QWORD *)buf = &v1050;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(_QWORD *)buf = &v1048[24];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if ((v1048[23] & 0x80000000) != 0)
    operator delete(*(void **)v1048);

  v329 = *(_OWORD *)(a4 + 144);
  v1055 = *(_OWORD *)(a4 + 128);
  v1056 = v329;
  v1057 = *(_QWORD *)(a4 + 160);
  v330 = *(_OWORD *)(a4 + 80);
  v1051 = *(_OWORD *)(a4 + 64);
  *(_OWORD *)v1052 = v330;
  v331 = *(_OWORD *)(a4 + 112);
  v1053 = *(_OWORD *)(a4 + 96);
  v1054 = v331;
  v332 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)v1048 = *(_OWORD *)a4;
  *(_OWORD *)&v1048[16] = v332;
  v333 = *(_OWORD *)(a4 + 48);
  v334 = v1004;
  if (!HIBYTE(v1092))
    v334 = 0;
  *(_OWORD *)v1049 = *(_OWORD *)(a4 + 32);
  v1050 = v333;
  if (v334)
  {
    *(_QWORD *)&v1050 = __PAIR64__(v999, v1000);
    LODWORD(v1053) = 65537;
  }
  Espresso::abstract_blob_container::shape(buf, *a6);
  v335 = *(_DWORD *)buf;
  Espresso::abstract_blob_container::shape((char *)&__str, *a6);
  v336 = HIDWORD(__str.__r_.__value_.__r.__words[0]);
  Espresso::abstract_blob_container::shape((char *)v1039, *a7);
  v337 = (int)v1039[0];
  Espresso::abstract_blob_container::shape((char *)v1035, *a7);
  Espresso::ANECompilerEngine::deconvolution_kernel::get_padding((Espresso::ANECompilerEngine::deconvolution_kernel *)&v1046, (const Espresso::convolution_uniforms *)v1048, v335, v336, v337, v1035[1]);
  if (v1037)
  {
    v1038 = v1037;
    operator delete(v1037);
  }
  if (v1044)
  {
    v1045 = v1044;
    operator delete(v1044);
  }
  if (v1132)
  {
    v1133 = v1132;
    operator delete(v1132);
  }
  if (v1137)
  {
    v1138.__begin_ = (std::vector<std::string>::pointer)v1137;
    operator delete(v1137);
  }
  v338 = HIDWORD(v1046);
  if ((HIDWORD(v1047) & 0x80000000) != 0 || (HIDWORD(v1046) & 0x80000000) != 0)
  {
    if ((HIDWORD(v1047) & 0x80000000) != 0)
    {
      v339 = (void *)objc_opt_new();
      Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)buf, a5);
      v340 = v1142;
      v1142 = CFSTR("InputView");

      objc_msgSend(v339, "setObject:forKeyedSubscript:", CFSTR("Height"), CFSTR("Dimension"));
      objc_msgSend(v339, "setObject:forKeyedSubscript:", &unk_1E2DEDA90, CFSTR("Offset"));
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *(unsigned int *)(*a7 + 12));
      v341 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v339, "setObject:forKeyedSubscript:", v341, CFSTR("Size"));

      objc_storeStrong(v1143, v339);
      v342 = v1090;
      if ((unint64_t)v1090 >= v1091)
      {
        v344 = 0x8E38E38E38E38E39 * (((uint64_t)v1090 - v1089) >> 4);
        if (v344 + 1 > 0x1C71C71C71C71C7)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v345 = 0x1C71C71C71C71C72 * ((uint64_t)(v1091 - v1089) >> 4);
        if (v345 <= v344 + 1)
          v345 = v344 + 1;
        if (0x8E38E38E38E38E39 * ((uint64_t)(v1091 - v1089) >> 4) >= 0xE38E38E38E38E3)
          v346 = 0x1C71C71C71C71C7;
        else
          v346 = v345;
        *((_QWORD *)&v1131 + 1) = &v1091;
        if (v346)
          v346 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v346);
        else
          v347 = 0;
        __str.__r_.__value_.__r.__words[0] = v346;
        __str.__r_.__value_.__l.__size_ = v346 + 144 * v344;
        __str.__r_.__value_.__r.__words[2] = __str.__r_.__value_.__l.__size_;
        *(_QWORD *)&v1131 = v346 + 144 * v347;
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)__str.__r_.__value_.__l.__size_, (uint64_t)buf);
        __str.__r_.__value_.__r.__words[2] += 144;
        std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v1089, &__str);
        v343 = v1090;
        std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&__str);
      }
      else
      {
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v1090, (uint64_t)buf);
        v343 = v342 + 6;
      }
      v1090 = v343;

      if (v1140 < 0)
        operator delete(v1139);
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1138;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1136;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
      if ((buf[23] & 0x80000000) != 0)
        operator delete(*(void **)buf);

    }
    if (v338 < 0)
    {
      v348 = (void *)objc_opt_new();
      Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)buf, a5);
      v349 = v1142;
      v1142 = CFSTR("InputView");

      objc_msgSend(v348, "setObject:forKeyedSubscript:", CFSTR("Width"), CFSTR("Dimension"));
      objc_msgSend(v348, "setObject:forKeyedSubscript:", &unk_1E2DEDA90, CFSTR("Offset"));
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *(unsigned int *)(*a7 + 8));
      v350 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v348, "setObject:forKeyedSubscript:", v350, CFSTR("Size"));

      objc_storeStrong(v1143, v348);
      v351 = v1090;
      if ((unint64_t)v1090 >= v1091)
      {
        v353 = 0x8E38E38E38E38E39 * (((uint64_t)v1090 - v1089) >> 4);
        if (v353 + 1 > 0x1C71C71C71C71C7)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v354 = 0x1C71C71C71C71C72 * ((uint64_t)(v1091 - v1089) >> 4);
        if (v354 <= v353 + 1)
          v354 = v353 + 1;
        if (0x8E38E38E38E38E39 * ((uint64_t)(v1091 - v1089) >> 4) >= 0xE38E38E38E38E3)
          v355 = 0x1C71C71C71C71C7;
        else
          v355 = v354;
        *((_QWORD *)&v1131 + 1) = &v1091;
        if (v355)
          v355 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v355);
        else
          v356 = 0;
        __str.__r_.__value_.__r.__words[0] = v355;
        __str.__r_.__value_.__l.__size_ = v355 + 144 * v353;
        __str.__r_.__value_.__r.__words[2] = __str.__r_.__value_.__l.__size_;
        *(_QWORD *)&v1131 = v355 + 144 * v356;
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)__str.__r_.__value_.__l.__size_, (uint64_t)buf);
        __str.__r_.__value_.__r.__words[2] += 144;
        std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v1089, &__str);
        v352 = v1090;
        std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&__str);
      }
      else
      {
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v1090, (uint64_t)buf);
        v352 = v351 + 6;
      }
      v1090 = v352;

      if (v1140 < 0)
        operator delete(v1139);
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1138;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1136;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
      if ((buf[23] & 0x80000000) != 0)
        operator delete(*(void **)buf);

    }
  }
  v357 = (std::__shared_weak_count *)a3[1];
  v1033 = *a3;
  v1034 = v357;
  if (v357)
  {
    v358 = (unint64_t *)&v357->__shared_owners_;
    do
      v359 = __ldxr(v358);
    while (__stxr(v359 + 1, v358));
  }
  v361 = *a7;
  v360 = (std::__shared_weak_count *)a7[1];
  v1031 = *a7;
  v1032 = v360;
  if (v360)
  {
    v362 = (unint64_t *)&v360->__shared_owners_;
    do
      v363 = __ldxr(v362);
    while (__stxr(v363 + 1, v362));
  }
  Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t((Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)v1048);
  *(_QWORD *)&v1055 = 0;
  *((_QWORD *)&v1054 + 1) = 0;
  *((_QWORD *)&v1055 + 1) = 0x100000000;
  v364 = (char *)lpsrc[78];
  v365 = (std::__shared_weak_count *)lpsrc[79];
  *(_QWORD *)v1035 = v364;
  v1036 = v365;
  if (v365)
  {
    v366 = (unint64_t *)&v365->__shared_owners_;
    do
      v367 = __ldxr(v366);
    while (__stxr(v367 + 1, v366));
  }
  if (!v364 || *(_BYTE *)((*(uint64_t (**)(_QWORD *))(lpsrc[70] + 104))(lpsrc + 70) + 40))
  {
    v368 = 0;
    if (!v365)
      goto LABEL_697;
    goto LABEL_693;
  }
  v369 = *(float *)(v361 + 112);
  v1046 = v364;
  v1047 = v365;
  if (v365)
  {
    v370 = (unint64_t *)&v365->__shared_owners_;
    do
      v371 = __ldxr(v370);
    while (__stxr(v371 + 1, v370));
  }
  v372 = (std::__shared_weak_count *)lpsrc[81];
  v1128 = (std::__shared_weak_count *)lpsrc[80];
  v1129 = v372;
  if (v372)
  {
    v373 = (unint64_t *)&v372->__shared_owners_;
    do
      v374 = __ldxr(v373);
    while (__stxr(v374 + 1, v373));
  }
  Espresso::ane_style_post_scale_bias((uint64_t)&v1046, (uint64_t *)&v1128, (uint64_t)v1039, v369);
  if (v372)
  {
    v375 = (unint64_t *)&v372->__shared_owners_;
    do
      v376 = __ldaxr(v375);
    while (__stlxr(v376 - 1, v375));
    if (!v376)
    {
      ((void (*)(std::__shared_weak_count *))v372->__on_zero_shared)(v372);
      std::__shared_weak_count::__release_weak(v372);
    }
  }
  v377 = v1047;
  if (v1047)
  {
    v378 = (unint64_t *)&v1047->__shared_owners_;
    do
      v379 = __ldaxr(v378);
    while (__stlxr(v379 - 1, v378));
    if (!v379)
    {
      ((void (*)(std::__shared_weak_count *))v377->__on_zero_shared)(v377);
      std::__shared_weak_count::__release_weak(v377);
    }
  }
  v380 = *(char **)v1035;
  v381 = *(unsigned int *)(*(_QWORD *)v1035 + 8);
  std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v1127, 2 * v381, 1, 1, 1);
  v382 = (int)v381;
  v1126 = 0uLL;
  v383 = v381;
  v384 = lpsrc[80];
  if (v384)
    v383 = *(_DWORD *)(v384 + 8);
  if (!a2[384])
  {
    Espresso::blob<unsigned char,1>::make(&__str, 4 * v381);
    v960 = *(int **)(__str.__r_.__value_.__r.__words[0] + 16);
    v961 = v381 - 1;
    if ((int)v381 >= 1)
    {
      for (mm = 0; mm != v381; ++mm)
      {
        v963 = *(float *)(*((_QWORD *)v380 + 2) + mm * 4);
        *(float *)&v964 = ldexp(1.0, -v1042) * v963;
        v960[mm] = v964;
      }
    }
    if ((_DWORD)v381)
    {
      v965 = *(_WORD **)(v1127 + 16);
      do
      {
        v966 = *v960++;
        _S0 = v966;
        __asm { FCVT            H0, S0 }
        *v965++ = _S0;
        --v382;
      }
      while (v382);
    }
    v1125 = 0uLL;
    if (lpsrc[80])
    {
      Espresso::blob<unsigned char,1>::make(buf, 4 * v383);
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)&v1125, (__int128 *)buf);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)buf);
      Espresso::blob<unsigned char,1>::make(buf, 2 * v383);
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)&v1126, (__int128 *)buf);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)buf);
      v969 = *(int **)(v1125 + 16);
      if (v383 >= 1)
      {
        for (nn = 0; nn != v383; ++nn)
        {
          if (v961 >= (int)nn)
            v971 = nn;
          else
            v971 = v961;
          *(float *)&v972 = *(float *)(*(_QWORD *)(v1040 + 16) + 4 * nn)
                          * *(float *)(*((_QWORD *)v1039[0] + 2) + 4 * v971);
          v969[nn] = v972;
          v973 = v1043;
          v974 = v1042;
          *(float *)&v975 = ldexp(1.0, v1043 - v1042) * *(float *)&v972;
          v969[nn] = v975;
          v978 = ldexp(1.0, v974 - v973) * *(float *)&v975;
          if (v978 < -127.0 || v978 > 255.0)
          {
            Espresso::espresso_os_log_subsystem(v976, v977);
            v980 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v980, OS_LOG_TYPE_ERROR))
            {
              v981 = *(float *)&v969[nn];
              *(_DWORD *)buf = 134218752;
              *(double *)&buf[4] = v978;
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v1043;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v1042;
              LOWORD(v1136) = 2048;
              *(double *)((char *)&v1136 + 2) = v981;
              _os_log_error_impl(&dword_190DAF000, v980, OS_LOG_TYPE_ERROR, "[ANEC::add_ane_scale_bias_unit] Shifted bias overflowing shifted_b=%f acc_bias_shift=%d post_right_shift=%d anebias=%f", buf, 0x22u);
            }

          }
        }
      }
      if (v383)
      {
        v983 = v383;
        v984 = *(_WORD **)(v1126 + 16);
        do
        {
          v985 = *v969++;
          _S0 = v985;
          __asm { FCVT            H0, S0 }
          *v984++ = _S0;
          --v983;
        }
        while (v983);
      }
    }
    v968 = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
    Espresso::not_implemented_error::not_implemented_error(v968);
  }
  v385 = v1043;
  if ((_DWORD)v381)
  {
    v386 = (int *)*((_QWORD *)v1039[0] + 2);
    v387 = *(_WORD **)(v1127 + 16);
    do
    {
      v388 = *v386++;
      _S0 = v388;
      __asm { FCVT            H0, S0 }
      *v387++ = _S0;
      --v382;
    }
    while (v382);
  }
  if (v384)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(buf, 2 * v383, 1, 1, 1);
    v393 = *(_OWORD *)buf;
    *(_QWORD *)&buf[8] = 0;
    *(_QWORD *)buf = 0;
    v394 = (std::__shared_weak_count *)*((_QWORD *)&v1126 + 1);
    v1126 = v393;
    if (v394)
    {
      v395 = (unint64_t *)&v394->__shared_owners_;
      do
        v396 = __ldaxr(v395);
      while (__stlxr(v396 - 1, v395));
      if (!v396)
      {
        ((void (*)(std::__shared_weak_count *))v394->__on_zero_shared)(v394);
        std::__shared_weak_count::__release_weak(v394);
      }
    }
    v397 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v398 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v399 = __ldaxr(v398);
      while (__stlxr(v399 - 1, v398));
      if (!v399)
      {
        ((void (*)(std::__shared_weak_count *))v397->__on_zero_shared)(v397);
        std::__shared_weak_count::__release_weak(v397);
      }
    }
    if (v383)
    {
      v400 = v383;
      v401 = *(int **)(v1040 + 16);
      v402 = *(_WORD **)(v1126 + 16);
      do
      {
        v403 = *v401++;
        _S0 = v403;
        __asm { FCVT            H0, S0 }
        *v402++ = _S0;
        --v400;
      }
      while (v400);
    }
  }
  v405 = a2[552];
  v406 = (Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128);
  v407 = v1127;
  v1125 = v1127;
  if (*((_QWORD *)&v1127 + 1))
  {
    v408 = (unint64_t *)(*((_QWORD *)&v1127 + 1) + 8);
    do
      v409 = __ldxr(v408);
    while (__stxr(v409 + 1, v408));
  }
  v410 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v406, *(const unsigned __int8 **)(v407 + 16), *(int *)(v407 + 8));
  if (*((_QWORD *)&v407 + 1))
  {
    v411 = (unint64_t *)(*((_QWORD *)&v407 + 1) + 8);
    do
      v412 = __ldaxr(v411);
    while (__stlxr(v412 - 1, v411));
    if (!v412)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v407 + 1) + 16))(*((_QWORD *)&v407 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v407 + 1));
    }
  }
  v413 = (void *)objc_opt_new();
  if (a2[121])
  {
    v414 = *(id *)(v1089 + 128);

    v413 = v414;
  }
  v415 = (void *)objc_opt_new();
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v381);
  v416 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v415, "setObject:forKeyedSubscript:", v416, CFSTR("ScaleCount"));

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v410);
  v417 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v415, "setObject:forKeyedSubscript:", v417, CFSTR("ScaleOffset"));

  v418 = (void *)MEMORY[0x1E0CB37E8];
  if (v405)
    v419 = 0;
  else
  objc_msgSend(v418, "numberWithUnsignedLong:", v419);
  v420 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v415, "setObject:forKeyedSubscript:", v420, CFSTR("ScaleIndex"));

  objc_msgSend(v415, "setObject:forKeyedSubscript:", CFSTR("Float16"), CFSTR("ScaleType"));
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v1042);
  v421 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v413, "setObject:forKeyedSubscript:", v421, CFSTR("ScaleShift"));

  if (lpsrc[80])
  {
    v422 = v1126;
    v1124 = v1126;
    if (*((_QWORD *)&v1126 + 1))
    {
      v423 = (unint64_t *)(*((_QWORD *)&v1126 + 1) + 8);
      do
        v424 = __ldxr(v423);
      while (__stxr(v424 + 1, v423));
    }
    v425 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v406, *(const unsigned __int8 **)(v422 + 16), *(int *)(v422 + 8));
    if (*((_QWORD *)&v422 + 1))
    {
      v426 = (unint64_t *)(*((_QWORD *)&v422 + 1) + 8);
      do
        v427 = __ldaxr(v426);
      while (__stlxr(v427 - 1, v426));
      if (!v427)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v422 + 1) + 16))(*((_QWORD *)&v422 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v422 + 1));
      }
    }
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *(unsigned int *)(lpsrc[80] + 8));
    v428 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v415, "setObject:forKeyedSubscript:", v428, CFSTR("BiasCount"));

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v425);
    v429 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v415, "setObject:forKeyedSubscript:", v429, CFSTR("BiasOffset"));

    v430 = (void *)MEMORY[0x1E0CB37E8];
    if (v405)
      v431 = 0;
    else
    objc_msgSend(v430, "numberWithUnsignedLong:", v431);
    v432 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v415, "setObject:forKeyedSubscript:", v432, CFSTR("BiasIndex"));

    objc_msgSend(v415, "setObject:forKeyedSubscript:", CFSTR("Float16"), CFSTR("BiasType"));
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v385);
    v433 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v413, "setObject:forKeyedSubscript:", v433, CFSTR("BiasShift"));

  }
  objc_msgSend(v413, "setObject:forKeyedSubscript:", v415, CFSTR("BiasScaleGroupData"));
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)buf, a5);
  v434 = v1090;
  if (v1090 != (std::string *)v1089)
  {
    v435 = v1090 - 6;
    v436 = HIBYTE(v1090[-6].__r_.__value_.__r.__words[2]);
    v437 = v436;
    v438 = v1090[-6].__r_.__value_.__l.__size_;
    if ((v436 & 0x80u) == 0)
      v439 = HIBYTE(v1090[-6].__r_.__value_.__r.__words[2]);
    else
      v439 = v1090[-6].__r_.__value_.__l.__size_;
    v440 = buf[23];
    if (buf[23] < 0)
      v440 = *(_QWORD *)&buf[8];
    if (v439 == v440)
    {
      if (buf[23] >= 0)
        v441 = buf;
      else
        v441 = *(unsigned __int8 **)buf;
      if ((char)v436 < 0)
      {
        data = (const std::string::value_type *)v435->__r_.__value_.__r.__words[0];
        if (memcmp(v435->__r_.__value_.__l.__data_, v441, v1090[-6].__r_.__value_.__l.__size_))
          goto LABEL_626;
      }
      else if ((_BYTE)v436)
      {
        v442 = v1090 - 6;
        while (v442->__r_.__value_.__s.__data_[0] == *v441)
        {
          v442 = (std::string *)((char *)v442 + 1);
          ++v441;
          if (!--v436)
            goto LABEL_622;
        }
        goto LABEL_623;
      }
LABEL_622:
      std::string::append(v434 - 6, "__@pre_scale_bias");
      v437 = HIBYTE(v434[-6].__r_.__value_.__r.__words[2]);
    }
LABEL_623:
    if ((v437 & 0x80) == 0)
    {
      v444 = *(_OWORD *)&v435->__r_.__value_.__l.__data_;
      __str.__r_.__value_.__r.__words[2] = v434[-6].__r_.__value_.__r.__words[2];
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v444;
      goto LABEL_627;
    }
    data = v434[-6].__r_.__value_.__l.__data_;
    v438 = v434[-6].__r_.__value_.__l.__size_;
LABEL_626:
    std::string::__init_copy_ctor_external(&__str, data, v438);
LABEL_627:
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v1138, &__str, &v1131, 1uLL);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }
  v445 = v1142;
  v1142 = CFSTR("GOC");

  objc_storeStrong(v1143, v413);
  if (!a2[121])
  {
    v446 = v1090;
    if ((unint64_t)v1090 >= v1091)
    {
      v448 = 0x8E38E38E38E38E39 * (((uint64_t)v1090 - v1089) >> 4);
      if (v448 + 1 > 0x1C71C71C71C71C7)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v449 = 0x1C71C71C71C71C72 * ((uint64_t)(v1091 - v1089) >> 4);
      if (v449 <= v448 + 1)
        v449 = v448 + 1;
      if (0x8E38E38E38E38E39 * ((uint64_t)(v1091 - v1089) >> 4) >= 0xE38E38E38E38E3)
        v450 = 0x1C71C71C71C71C7;
      else
        v450 = v449;
      *((_QWORD *)&v1131 + 1) = &v1091;
      if (v450)
        v450 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v450);
      else
        v451 = 0;
      __str.__r_.__value_.__r.__words[0] = v450;
      __str.__r_.__value_.__l.__size_ = v450 + 144 * v448;
      __str.__r_.__value_.__r.__words[2] = __str.__r_.__value_.__l.__size_;
      *(_QWORD *)&v1131 = v450 + 144 * v451;
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)__str.__r_.__value_.__l.__size_, (uint64_t)buf);
      __str.__r_.__value_.__r.__words[2] += 144;
      std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v1089, &__str);
      v447 = v1090;
      std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&__str);
    }
    else
    {
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v1090, (uint64_t)buf);
      v447 = v446 + 6;
    }
    v1090 = v447;
  }

  if (v1140 < 0)
    operator delete(v1139);
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1138;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1136;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);

  v468 = (std::__shared_weak_count *)*((_QWORD *)&v1126 + 1);
  if (*((_QWORD *)&v1126 + 1))
  {
    v469 = (unint64_t *)(*((_QWORD *)&v1126 + 1) + 8);
    do
      v470 = __ldaxr(v469);
    while (__stlxr(v470 - 1, v469));
    if (!v470)
    {
      ((void (*)(std::__shared_weak_count *))v468->__on_zero_shared)(v468);
      std::__shared_weak_count::__release_weak(v468);
    }
  }
  v471 = (std::__shared_weak_count *)*((_QWORD *)&v1127 + 1);
  if (*((_QWORD *)&v1127 + 1))
  {
    v472 = (unint64_t *)(*((_QWORD *)&v1127 + 1) + 8);
    do
      v473 = __ldaxr(v472);
    while (__stlxr(v473 - 1, v472));
    if (!v473)
    {
      ((void (*)(std::__shared_weak_count *))v471->__on_zero_shared)(v471);
      std::__shared_weak_count::__release_weak(v471);
    }
  }
  v474 = v1041;
  if (v1041)
  {
    v475 = (unint64_t *)&v1041->__shared_owners_;
    do
      v476 = __ldaxr(v475);
    while (__stlxr(v476 - 1, v475));
    if (!v476)
    {
      ((void (*)(std::__shared_weak_count *))v474->__on_zero_shared)(v474);
      std::__shared_weak_count::__release_weak(v474);
    }
  }
  v477 = (std::__shared_weak_count *)v1039[1];
  if (v1039[1])
  {
    v478 = (unint64_t *)((char *)v1039[1] + 8);
    do
      v479 = __ldaxr(v478);
    while (__stlxr(v479 - 1, v478));
    if (!v479)
    {
      ((void (*)(std::__shared_weak_count *))v477->__on_zero_shared)(v477);
      std::__shared_weak_count::__release_weak(v477);
    }
  }
  v368 = 1;
  v365 = v1036;
  if (v1036)
  {
LABEL_693:
    v480 = (unint64_t *)&v365->__shared_owners_;
    do
      v481 = __ldaxr(v480);
    while (__stlxr(v481 - 1, v480));
    if (!v481)
    {
      ((void (*)(std::__shared_weak_count *))v365->__on_zero_shared)(v365);
      std::__shared_weak_count::__release_weak(v365);
    }
  }
LABEL_697:

  if (SBYTE7(v1053) < 0)
    operator delete(v1052[0]);
  *(_QWORD *)buf = &v1050;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(_QWORD *)buf = &v1048[24];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if ((v1048[23] & 0x80000000) != 0)
    operator delete(*(void **)v1048);
  v482 = lpsrc;
  if (v1032)
  {
    v483 = &v1032->__shared_owners_;
    do
      v484 = __ldaxr((unint64_t *)v483);
    while (__stlxr(v484 - 1, (unint64_t *)v483));
    if (!v484)
    {
      ((void (*)(std::__shared_weak_count *))v1032->__on_zero_shared)(v1032);
      std::__shared_weak_count::__release_weak(v1032);
    }
  }
  if (!v1034)
    goto LABEL_710;
  v485 = &v1034->__shared_owners_;
  do
    v486 = __ldaxr((unint64_t *)v485);
  while (__stlxr(v486 - 1, (unint64_t *)v485));
  if (v486)
  {
LABEL_710:
    if ((v368 & 1) != 0)
      goto LABEL_711;
LABEL_714:
    v487 = (_QWORD *)lpsrc[59];
    if (v487 && *v487 && (v487[4] || v487[6] || v487[8] || v487[10]))
    {
      v488 = v487[10];
      if (v488)
      {
        v489 = *(int *)(v488 + 8);
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = 0uLL;
        std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(v1048, 2 * v489, 1, 1, 1);
        v490 = *(_OWORD *)v1048;
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *(_OWORD *)v1048;
        v491 = *(const unsigned __int8 **)(*(_QWORD *)v1048 + 16);
        if ((_DWORD)v489)
        {
          v492 = *(int **)(*(_QWORD *)(lpsrc[59] + 80) + 16);
          v493 = *(_WORD **)(*(_QWORD *)v1048 + 16);
          v494 = v489;
          do
          {
            v495 = *v492++;
            _S0 = v495;
            __asm { FCVT            H0, S0 }
            *v493++ = _S0;
            --v494;
          }
          while (v494);
        }
        v497 = (Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128);
        v1030 = v490;
        if (*((_QWORD *)&v490 + 1))
        {
          v498 = (unint64_t *)(*((_QWORD *)&v490 + 1) + 8);
          do
            v499 = __ldxr(v498);
          while (__stxr(v499 + 1, v498));
          v491 = *(const unsigned __int8 **)(v490 + 16);
        }
        v500 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v497, v491, *(int *)(v490 + 8));
        if (*((_QWORD *)&v490 + 1))
        {
          v501 = (unint64_t *)(*((_QWORD *)&v490 + 1) + 8);
          do
            v502 = __ldaxr(v501);
          while (__stlxr(v502 - 1, v501));
          if (!v502)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v490 + 1) + 16))(*((_QWORD *)&v490 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v490 + 1));
          }
        }
        v503 = (void *)objc_opt_new();
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", v489);
        v504 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v503, "setObject:forKeyedSubscript:", v504, CFSTR("ScaleCount"));

        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v500);
        v505 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v503, "setObject:forKeyedSubscript:", v505, CFSTR("ScaleOffset"));

        v506 = (void *)MEMORY[0x1E0CB37E8];
        if (v996)
          v507 = 0;
        else
        objc_msgSend(v506, "numberWithUnsignedLong:", v507);
        v552 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v503, "setObject:forKeyedSubscript:", v552, CFSTR("ScaleIndex"));

        objc_msgSend(v503, "setObject:forKeyedSubscript:", CFSTR("Float16"), CFSTR("ScaleType"));
        if (*(_DWORD *)((*(uint64_t (**)(_QWORD *))(*lpsrc + 384))(lpsrc) + 32))
        {
          (*(void (**)(void **__return_ptr, _QWORD *))(*lpsrc + 448))(v1039, lpsrc);
          if (!v1039[0])
          {
            v553 = (std::__shared_weak_count *)a3[1];
            v1028 = *a3;
            v1029 = v553;
            if (v553)
            {
              v554 = (unint64_t *)&v553->__shared_owners_;
              do
                v555 = __ldxr(v554);
              while (__stxr(v555 + 1, v554));
            }
            std::string::basic_string[abi:ne180100]<0>(buf, "blob_biases");
            (*(void (**)(_BYTE *__return_ptr, _QWORD *, const Espresso::net **, _QWORD *, _BYTE *))(lpsrc[70] + 120))(v1048, lpsrc + 70, &v1028, lpsrc, buf);
            if ((buf[23] & 0x80000000) != 0)
              operator delete(*(void **)buf);
            v556 = v1029;
            if (v1029)
            {
              v557 = (unint64_t *)&v1029->__shared_owners_;
              do
                v558 = __ldaxr(v557);
              while (__stlxr(v558 - 1, v557));
              if (!v558)
              {
                ((void (*)(std::__shared_weak_count *))v556->__on_zero_shared)(v556);
                std::__shared_weak_count::__release_weak(v556);
              }
            }
            v559 = *(_QWORD *)&v1048[16];
            v560 = (char *)operator new(0x58uLL);
            *((_QWORD *)v560 + 1) = 0;
            *((_QWORD *)v560 + 2) = 0;
            *(_QWORD *)v560 = &off_1E2DBEC00;
            *((_QWORD *)v560 + 3) = &off_1E2DA1190;
            v561 = *(_QWORD *)v1048;
            *(_OWORD *)(v560 + 56) = 0u;
            *(_OWORD *)(v560 + 72) = 0u;
            *((_DWORD *)v560 + 8) = v559 >> 2;
            *((_QWORD *)v560 + 5) = v561;
            v560[48] = 0;
            *(_QWORD *)&v562 = v560 + 24;
            *((_QWORD *)&v562 + 1) = v560;
            v563 = (std::__shared_weak_count *)v1039[1];
            *(_OWORD *)v1039 = v562;
            if (v563)
            {
              v564 = (unint64_t *)&v563->__shared_owners_;
              do
                v565 = __ldaxr(v564);
              while (__stlxr(v565 - 1, v564));
              if (!v565)
              {
                ((void (*)(std::__shared_weak_count *))v563->__on_zero_shared)(v563);
                std::__shared_weak_count::__release_weak(v563);
              }
            }
            if (!v1039[0])
              Espresso::throw_exception_selector<Espresso::invalid_state_error>("Missing biases");
          }
          std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(v1048, 4 * v489, 1, 1, 1);
          v566 = *(_QWORD *)v1048;
          if ((_DWORD)v489)
          {
            v567 = *(float **)(*(_QWORD *)v1048 + 16);
            v568 = (float *)*((_QWORD *)v1039[0] + 2);
            v569 = *(float **)(*(_QWORD *)(lpsrc[59] + 80) + 16);
            v570 = v489;
            do
            {
              v571 = *v568++;
              v572 = v571;
              v573 = *v569++;
              *v567++ = v572 / v573;
              --v570;
            }
            while (v570);
          }
          std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(buf, 2 * v489, 1, 1, 1);
          v574 = *(_QWORD *)buf;
          v575 = *(const unsigned __int8 **)(*(_QWORD *)buf + 16);
          if ((_DWORD)v489)
          {
            v576 = *(int **)(v566 + 16);
            v577 = *(_WORD **)(*(_QWORD *)buf + 16);
            v578 = v489;
            do
            {
              v579 = *v576++;
              _S0 = v579;
              __asm { FCVT            H0, S0 }
              *v577++ = _S0;
              --v578;
            }
            while (v578);
          }
          v581 = *(std::__shared_weak_count **)&buf[8];
          v1026 = v574;
          v1027 = *(_QWORD *)&buf[8];
          if (*(_QWORD *)&buf[8])
          {
            v582 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
            do
              v583 = __ldxr(v582);
            while (__stxr(v583 + 1, v582));
            v575 = *(const unsigned __int8 **)(v574 + 16);
          }
          v584 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v497, v575, *(int *)(v574 + 8));
          if (v581)
          {
            v585 = (unint64_t *)&v581->__shared_owners_;
            do
              v586 = __ldaxr(v585);
            while (__stlxr(v586 - 1, v585));
            if (!v586)
            {
              ((void (*)(std::__shared_weak_count *))v581->__on_zero_shared)(v581);
              std::__shared_weak_count::__release_weak(v581);
            }
          }
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", v489);
          v587 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v503, "setObject:forKeyedSubscript:", v587, CFSTR("BiasCount"));

          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v584);
          v588 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v503, "setObject:forKeyedSubscript:", v588, CFSTR("BiasOffset"));

          v589 = (void *)MEMORY[0x1E0CB37E8];
          if (v996)
            v590 = 0;
          else
          objc_msgSend(v589, "numberWithUnsignedLong:", v590);
          v603 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v503, "setObject:forKeyedSubscript:", v603, CFSTR("BiasIndex"));

          objc_msgSend(v503, "setObject:forKeyedSubscript:", CFSTR("Float16"), CFSTR("BiasType"));
          v604 = *(std::__shared_weak_count **)&buf[8];
          if (*(_QWORD *)&buf[8])
          {
            v605 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
            do
              v606 = __ldaxr(v605);
            while (__stlxr(v606 - 1, v605));
            if (!v606)
            {
              ((void (*)(std::__shared_weak_count *))v604->__on_zero_shared)(v604);
              std::__shared_weak_count::__release_weak(v604);
            }
          }
          v607 = *(std::__shared_weak_count **)&v1048[8];
          if (*(_QWORD *)&v1048[8])
          {
            v608 = (unint64_t *)(*(_QWORD *)&v1048[8] + 8);
            do
              v609 = __ldaxr(v608);
            while (__stlxr(v609 - 1, v608));
            if (!v609)
            {
              ((void (*)(std::__shared_weak_count *))v607->__on_zero_shared)(v607);
              std::__shared_weak_count::__release_weak(v607);
            }
          }
          v610 = (std::__shared_weak_count *)v1039[1];
          if (v1039[1])
          {
            v611 = (unint64_t *)((char *)v1039[1] + 8);
            do
              v612 = __ldaxr(v611);
            while (__stlxr(v612 - 1, v611));
            if (!v612)
            {
              ((void (*)(std::__shared_weak_count *))v610->__on_zero_shared)(v610);
              std::__shared_weak_count::__release_weak(v610);
            }
          }
        }
        v613 = (void *)objc_opt_new();
        objc_msgSend(v613, "setObject:forKeyedSubscript:", v503, CFSTR("BiasScaleGroupData"));
        Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)v1048, a5);
        v614 = (void *)*((_QWORD *)&v1054 + 1);
        *((_QWORD *)&v1054 + 1) = CFSTR("GOC");

        objc_storeStrong((id *)&v1055, v613);
        v615 = v1090;
        if ((unint64_t)v1090 >= v1091)
        {
          v617 = 0x8E38E38E38E38E39 * (((uint64_t)v1090 - v1089) >> 4);
          if (v617 + 1 > 0x1C71C71C71C71C7)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v618 = 0x1C71C71C71C71C72 * ((uint64_t)(v1091 - v1089) >> 4);
          if (v618 <= v617 + 1)
            v618 = v617 + 1;
          if (0x8E38E38E38E38E39 * ((uint64_t)(v1091 - v1089) >> 4) >= 0xE38E38E38E38E3)
            v619 = 0x1C71C71C71C71C7;
          else
            v619 = v618;
          *((_QWORD *)&v1136 + 1) = &v1091;
          if (v619)
            v619 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v619);
          else
            v620 = 0;
          *(_QWORD *)buf = v619;
          *(_QWORD *)&buf[8] = v619 + 144 * v617;
          *(_QWORD *)&buf[16] = *(_QWORD *)&buf[8];
          *(_QWORD *)&v1136 = v619 + 144 * v620;
          std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(*(std::string **)&buf[8], (uint64_t)v1048);
          *(_QWORD *)&buf[16] += 144;
          std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v1089, buf);
          v616 = v1090;
          std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)buf);
        }
        else
        {
          std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v1090, (uint64_t)v1048);
          v616 = v615 + 6;
        }
        v1090 = v616;

        if (SBYTE7(v1053) < 0)
          operator delete(v1052[0]);
        *(_QWORD *)buf = &v1050;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
        *(_QWORD *)buf = &v1048[24];
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
        if ((v1048[23] & 0x80000000) != 0)
          operator delete(*(void **)v1048);

        v621 = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
        if (__str.__r_.__value_.__l.__size_)
        {
          v622 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
          do
            v623 = __ldaxr(v622);
          while (__stlxr(v623 - 1, v622));
          if (!v623)
          {
            ((void (*)(std::__shared_weak_count *))v621->__on_zero_shared)(v621);
            std::__shared_weak_count::__release_weak(v621);
          }
        }
LABEL_994:
        v482 = lpsrc;
        goto LABEL_995;
      }
    }
    if (*(_DWORD *)(a4 + 112))
    {
      if (a2[121])
        goto LABEL_1439;
      (*(void (**)(uint64_t *__return_ptr, _QWORD *))(*lpsrc + 448))(&v1024, lpsrc);
      Espresso::ANECompilerEngine::batchnorm_kernel::batchnorm_to_scale_bias(&__str, (uint64_t)&v1024, *(_DWORD *)(*a7 + 16), a2[384], 0, 0.0);
      v508 = v1025;
      if (v1025)
      {
        v509 = (unint64_t *)&v1025->__shared_owners_;
        do
          v510 = __ldaxr(v509);
        while (__stlxr(v510 - 1, v509));
        if (!v510)
        {
          ((void (*)(std::__shared_weak_count *))v508->__on_zero_shared)(v508);
          std::__shared_weak_count::__release_weak(v508);
        }
      }
      v511 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
      *(_OWORD *)v1039 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
      if (__str.__r_.__value_.__l.__size_)
      {
        v512 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
        do
          v513 = __ldxr(v512);
        while (__stxr(v513 + 1, v512));
      }
      *(_QWORD *)v1035 = *((_QWORD *)&__str.__r_.__value_.__l + 2);
      v1036 = (std::__shared_weak_count *)v1131;
      if ((_QWORD)v1131)
      {
        v514 = (unint64_t *)(v1131 + 8);
        do
          v515 = __ldxr(v514);
        while (__stxr(v515 + 1, v514));
      }
      v516 = (Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128);
      v1023 = v511;
      if (*((_QWORD *)&v511 + 1))
      {
        v517 = (unint64_t *)(*((_QWORD *)&v511 + 1) + 8);
        do
          v518 = __ldxr(v517);
        while (__stxr(v518 + 1, v517));
      }
      v519 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v516, *(const unsigned __int8 **)(v511 + 16), *(int *)(v511 + 8));
      if (*((_QWORD *)&v511 + 1))
      {
        v520 = (unint64_t *)(*((_QWORD *)&v511 + 1) + 8);
        do
          v521 = __ldaxr(v520);
        while (__stlxr(v521 - 1, v520));
        if (!v521)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v511 + 1) + 16))(*((_QWORD *)&v511 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v511 + 1));
        }
      }
      v522 = *(char **)v1035;
      v523 = v1036;
      v1021 = *(char **)v1035;
      v1022 = v1036;
      if (v1036)
      {
        v524 = &v1036->__shared_owners_;
        do
          v525 = __ldxr((unint64_t *)v524);
        while (__stxr(v525 + 1, (unint64_t *)v524));
      }
      v526 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v516, *((const unsigned __int8 **)v522 + 2), *((int *)v522 + 2));
      if (v523)
      {
        v527 = (unint64_t *)&v523->__shared_owners_;
        do
          v528 = __ldaxr(v527);
        while (__stlxr(v528 - 1, v527));
        if (!v528)
        {
          ((void (*)(std::__shared_weak_count *))v523->__on_zero_shared)(v523);
          std::__shared_weak_count::__release_weak(v523);
        }
      }
      v529 = (void *)objc_opt_new();
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *(unsigned int *)(*a7 + 16));
      v530 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v529, "setObject:forKeyedSubscript:", v530, CFSTR("BiasCount"));

      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v526);
      v531 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v529, "setObject:forKeyedSubscript:", v531, CFSTR("BiasOffset"));

      v532 = (void *)MEMORY[0x1E0CB37E8];
      if (v996)
        v533 = 0;
      else
      objc_msgSend(v532, "numberWithUnsignedLong:", v533);
      v538 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v529, "setObject:forKeyedSubscript:", v538, CFSTR("BiasIndex"));

      objc_msgSend(v529, "setObject:forKeyedSubscript:", CFSTR("Float32"), CFSTR("BiasType"));
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *(unsigned int *)(*a7 + 16));
      v539 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v529, "setObject:forKeyedSubscript:", v539, CFSTR("ScaleCount"));

      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v519);
      v540 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v529, "setObject:forKeyedSubscript:", v540, CFSTR("ScaleOffset"));

      v541 = (void *)MEMORY[0x1E0CB37E8];
      if (v996)
        v542 = 0;
      else
      objc_msgSend(v541, "numberWithUnsignedLong:", v542);
      v543 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v529, "setObject:forKeyedSubscript:", v543, CFSTR("ScaleIndex"));

      objc_msgSend(v529, "setObject:forKeyedSubscript:", CFSTR("Float32"), CFSTR("ScaleType"));
      v544 = (void *)objc_opt_new();
      objc_msgSend(v544, "setObject:forKeyedSubscript:", v529, CFSTR("BiasScaleGroupData"));
      Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)v1048, a5);
      v545 = (void *)*((_QWORD *)&v1054 + 1);
      *((_QWORD *)&v1054 + 1) = CFSTR("GOC");

      objc_storeStrong((id *)&v1055, v544);
      v546 = v1090;
      if ((unint64_t)v1090 >= v1091)
      {
        v548 = 0x8E38E38E38E38E39 * (((uint64_t)v1090 - v1089) >> 4);
        if (v548 + 1 > 0x1C71C71C71C71C7)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v549 = 0x1C71C71C71C71C72 * ((uint64_t)(v1091 - v1089) >> 4);
        if (v549 <= v548 + 1)
          v549 = v548 + 1;
        if (0x8E38E38E38E38E39 * ((uint64_t)(v1091 - v1089) >> 4) >= 0xE38E38E38E38E3)
          v550 = 0x1C71C71C71C71C7;
        else
          v550 = v549;
        *((_QWORD *)&v1136 + 1) = &v1091;
        if (v550)
          v550 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v550);
        else
          v551 = 0;
        *(_QWORD *)buf = v550;
        *(_QWORD *)&buf[8] = v550 + 144 * v548;
        *(_QWORD *)&buf[16] = *(_QWORD *)&buf[8];
        *(_QWORD *)&v1136 = v550 + 144 * v551;
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(*(std::string **)&buf[8], (uint64_t)v1048);
        *(_QWORD *)&buf[16] += 144;
        std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v1089, buf);
        v547 = v1090;
        std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)buf);
      }
      else
      {
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v1090, (uint64_t)v1048);
        v547 = v546 + 6;
      }
      v1090 = v547;

      if (SBYTE7(v1053) < 0)
        operator delete(v1052[0]);
      *(_QWORD *)buf = &v1050;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      *(_QWORD *)buf = &v1048[24];
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      if ((v1048[23] & 0x80000000) != 0)
        operator delete(*(void **)v1048);

      v591 = v1036;
      if (v1036)
      {
        v592 = &v1036->__shared_owners_;
        do
          v593 = __ldaxr((unint64_t *)v592);
        while (__stlxr(v593 - 1, (unint64_t *)v592));
        if (!v593)
        {
          ((void (*)(std::__shared_weak_count *))v591->__on_zero_shared)(v591);
          std::__shared_weak_count::__release_weak(v591);
        }
      }
      v594 = (std::__shared_weak_count *)v1039[1];
      if (v1039[1])
      {
        v595 = (unint64_t *)((char *)v1039[1] + 8);
        do
          v596 = __ldaxr(v595);
        while (__stlxr(v596 - 1, v595));
        if (!v596)
        {
          ((void (*)(std::__shared_weak_count *))v594->__on_zero_shared)(v594);
          std::__shared_weak_count::__release_weak(v594);
        }
      }
      v597 = (std::__shared_weak_count *)v1131;
      v482 = lpsrc;
      if ((_QWORD)v1131)
      {
        v598 = (unint64_t *)(v1131 + 8);
        do
          v599 = __ldaxr(v598);
        while (__stlxr(v599 - 1, v598));
        if (!v599)
        {
          ((void (*)(std::__shared_weak_count *))v597->__on_zero_shared)(v597);
          std::__shared_weak_count::__release_weak(v597);
        }
      }
      v600 = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
      if (__str.__r_.__value_.__l.__size_)
      {
        v601 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
        do
          v602 = __ldaxr(v601);
        while (__stlxr(v602 - 1, v601));
        if (!v602)
        {
          ((void (*)(std::__shared_weak_count *))v600->__on_zero_shared)(v600);
          std::__shared_weak_count::__release_weak(v600);
        }
      }
      goto LABEL_995;
    }
    if (!*(_DWORD *)(a4 + 32))
      goto LABEL_995;
    (*(void (**)(_BYTE *__return_ptr, _QWORD *))(*lpsrc + 448))(v1048, lpsrc);
    v534 = *(_OWORD *)v1048;
    if (*(_QWORD *)&v1048[8])
    {
      v535 = (unint64_t *)(*(_QWORD *)&v1048[8] + 8);
      do
        v536 = __ldaxr(v535);
      while (__stlxr(v536 - 1, v535));
      if (!v536)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v534 + 1) + 16))(*((_QWORD *)&v534 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v534 + 1));
      }
    }
    if (!(_QWORD)v534)
      goto LABEL_995;
    if (a2[121])
    {
      v537 = *(id *)(v1089 + 128);
    }
    else
    {
      v537 = (id)objc_opt_new();

    }
    v624 = (void *)objc_opt_new();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *(unsigned int *)(*a7 + 16));
    v625 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v624, "setObject:forKeyedSubscript:", v625, CFSTR("BiasCount"));

    v626 = (std::__shared_weak_count *)a3[1];
    v1019 = *a3;
    v1020 = v626;
    if (v626)
    {
      v627 = (unint64_t *)&v626->__shared_owners_;
      do
        v628 = __ldxr(v627);
      while (__stxr(v628 + 1, v627));
    }
    std::string::basic_string[abi:ne180100]<0>(v1048, "blob_biases_f16");
    v629 = lpsrc + 70;
    v630 = (*(uint64_t (**)(_QWORD *, const Espresso::net **, _QWORD *, _BYTE *))(lpsrc[70] + 88))(lpsrc + 70, &v1019, lpsrc, v1048);
    if ((v1048[23] & 0x80000000) != 0)
      operator delete(*(void **)v1048);
    v631 = v1020;
    if (v1020)
    {
      v632 = (unint64_t *)&v1020->__shared_owners_;
      do
        v633 = __ldaxr(v632);
      while (__stlxr(v633 - 1, v632));
      if (!v633)
      {
        ((void (*)(std::__shared_weak_count *))v631->__on_zero_shared)(v631);
        std::__shared_weak_count::__release_weak(v631);
      }
    }
    if (v630 < 0)
    {
      v649 = (std::__shared_weak_count *)a3[1];
      v1013 = *a3;
      v1014 = v649;
      if (v649)
      {
        v650 = (unint64_t *)&v649->__shared_owners_;
        do
          v651 = __ldxr(v650);
        while (__stxr(v651 + 1, v650));
      }
      std::string::basic_string[abi:ne180100]<0>(v1048, "blob_biases");
      v637 = (*(uint64_t (**)(_QWORD *, const Espresso::net **, _QWORD *, _BYTE *))(lpsrc[70] + 88))(v629, &v1013, lpsrc, v1048);
      if ((v1048[23] & 0x80000000) != 0)
        operator delete(*(void **)v1048);
      v652 = v1014;
      if (v1014)
      {
        v653 = (unint64_t *)&v1014->__shared_owners_;
        do
          v654 = __ldaxr(v653);
        while (__stlxr(v654 - 1, v653));
        if (!v654)
        {
          ((void (*)(std::__shared_weak_count *))v652->__on_zero_shared)(v652);
          std::__shared_weak_count::__release_weak(v652);
        }
      }
      v655 = (std::__shared_weak_count *)a3[1];
      v1011 = *a3;
      v1012 = v655;
      if (v655)
      {
        v656 = (unint64_t *)&v655->__shared_owners_;
        do
          v657 = __ldxr(v656);
        while (__stxr(v657 + 1, v656));
      }
      std::string::basic_string[abi:ne180100]<0>(buf, "blob_biases");
      (*(void (**)(_BYTE *__return_ptr, _QWORD *, const Espresso::net **, _QWORD *, _BYTE *))(lpsrc[70] + 120))(v1048, v629, &v1011, lpsrc, buf);
      v644 = *(Espresso::ANECompilerEngine::compiler **)v1048;
      v645 = *(_QWORD *)&v1048[16];
      if ((buf[23] & 0x80000000) != 0)
        operator delete(*(void **)buf);
      v646 = v1012;
      if (!v1012)
        goto LABEL_939;
      v658 = (unint64_t *)&v1012->__shared_owners_;
      do
        v648 = __ldaxr(v658);
      while (__stlxr(v648 - 1, v658));
    }
    else
    {
      v634 = (std::__shared_weak_count *)a3[1];
      v1017 = *a3;
      v1018 = v634;
      if (v634)
      {
        v635 = (unint64_t *)&v634->__shared_owners_;
        do
          v636 = __ldxr(v635);
        while (__stxr(v636 + 1, v635));
      }
      std::string::basic_string[abi:ne180100]<0>(v1048, "blob_biases_f16");
      v637 = (*(uint64_t (**)(_QWORD *, const Espresso::net **, _QWORD *, _BYTE *))(lpsrc[70] + 88))(v629, &v1017, lpsrc, v1048);
      if ((v1048[23] & 0x80000000) != 0)
        operator delete(*(void **)v1048);
      v638 = v1018;
      if (v1018)
      {
        v639 = (unint64_t *)&v1018->__shared_owners_;
        do
          v640 = __ldaxr(v639);
        while (__stlxr(v640 - 1, v639));
        if (!v640)
        {
          ((void (*)(std::__shared_weak_count *))v638->__on_zero_shared)(v638);
          std::__shared_weak_count::__release_weak(v638);
        }
      }
      v641 = (std::__shared_weak_count *)a3[1];
      v1015 = *a3;
      v1016 = v641;
      if (v641)
      {
        v642 = (unint64_t *)&v641->__shared_owners_;
        do
          v643 = __ldxr(v642);
        while (__stxr(v643 + 1, v642));
      }
      std::string::basic_string[abi:ne180100]<0>(buf, "blob_biases_f16");
      (*(void (**)(_BYTE *__return_ptr, _QWORD *, const Espresso::net **, _QWORD *, _BYTE *))(lpsrc[70] + 120))(v1048, v629, &v1015, lpsrc, buf);
      v644 = *(Espresso::ANECompilerEngine::compiler **)v1048;
      v645 = *(_QWORD *)&v1048[16];
      if ((buf[23] & 0x80000000) != 0)
        operator delete(*(void **)buf);
      v646 = v1016;
      if (!v1016)
        goto LABEL_939;
      v647 = (unint64_t *)&v1016->__shared_owners_;
      do
        v648 = __ldaxr(v647);
      while (__stlxr(v648 - 1, v647));
    }
    if (!v648)
    {
      ((void (*)(std::__shared_weak_count *))v646->__on_zero_shared)(v646);
      std::__shared_weak_count::__release_weak(v646);
    }
LABEL_939:
    (*(void (**)(_BYTE *__return_ptr, _QWORD *))(*lpsrc + 448))(buf, lpsrc);
    if (!*(_QWORD *)buf)
    {
      v659 = (char *)operator new(0x58uLL);
      *((_QWORD *)v659 + 1) = 0;
      *((_QWORD *)v659 + 2) = 0;
      *(_QWORD *)v659 = &off_1E2DBEC00;
      *((_QWORD *)v659 + 3) = &off_1E2DA1190;
      *(_OWORD *)(v659 + 56) = 0u;
      *(_OWORD *)(v659 + 72) = 0u;
      *((_DWORD *)v659 + 8) = v645 >> 2;
      *((_QWORD *)v659 + 5) = v644;
      v659[48] = 0;
      v660 = *(std::__shared_weak_count **)&buf[8];
      *(_QWORD *)buf = v659 + 24;
      *(_QWORD *)&buf[8] = v659;
      if (v660)
      {
        v661 = (unint64_t *)&v660->__shared_owners_;
        do
          v662 = __ldaxr(v661);
        while (__stlxr(v662 - 1, v661));
        if (!v662)
        {
          ((void (*)(std::__shared_weak_count *))v660->__on_zero_shared)(v660);
          std::__shared_weak_count::__release_weak(v660);
        }
        if (!*(_QWORD *)buf)
          Espresso::throw_exception_selector<Espresso::invalid_state_error>("Missing biases");
      }
    }
    v663 = (std::__shared_weak_count *)a3[1];
    v1009 = *a3;
    v1010 = v663;
    if (v663)
    {
      v664 = (unint64_t *)&v663->__shared_owners_;
      do
        v665 = __ldxr(v664);
      while (__stxr(v665 + 1, v664));
    }
    std::string::basic_string[abi:ne180100]<0>(v1048, "blob_biases_f16");
    v666 = (*(uint64_t (**)(_QWORD *, const Espresso::net **, _QWORD *, _BYTE *))(lpsrc[70] + 88))(v629, &v1009, lpsrc, v1048);
    if ((v1048[23] & 0x80000000) != 0)
      operator delete(*(void **)v1048);
    v667 = v1010;
    if (v1010)
    {
      v668 = (unint64_t *)&v1010->__shared_owners_;
      do
        v669 = __ldaxr(v668);
      while (__stlxr(v669 - 1, v668));
      if (!v669)
      {
        ((void (*)(std::__shared_weak_count *))v667->__on_zero_shared)(v667);
        std::__shared_weak_count::__release_weak(v667);
      }
    }
    if (v666 < 0)
    {
      v675 = *(int **)(*(_QWORD *)buf + 16);
      v676 = *(int *)(*(_QWORD *)buf + 8);
      std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(v1048, 2 * v676, 1, 1, 1);
      v677 = *(_QWORD *)v1048;
      v678 = *(const unsigned __int8 **)(*(_QWORD *)v1048 + 16);
      if ((_DWORD)v676)
      {
        v679 = *(_WORD **)(*(_QWORD *)v1048 + 16);
        do
        {
          v680 = *v675++;
          _S0 = v680;
          __asm { FCVT            H0, S0 }
          *v679++ = _S0;
          --v676;
        }
        while (v676);
      }
      v682 = *(std::__shared_weak_count **)&v1048[8];
      if (*(_QWORD *)&v1048[8])
      {
        v683 = (unint64_t *)(*(_QWORD *)&v1048[8] + 8);
        do
          v684 = __ldxr(v683);
        while (__stxr(v684 + 1, v683));
        v678 = *(const unsigned __int8 **)(v677 + 16);
      }
      v637 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128), v678, *(int *)(v677 + 8));
      if (v682)
      {
        v685 = (unint64_t *)&v682->__shared_owners_;
        do
          v686 = __ldaxr(v685);
        while (__stlxr(v686 - 1, v685));
        if (!v686)
        {
          ((void (*)(std::__shared_weak_count *))v682->__on_zero_shared)(v682);
          std::__shared_weak_count::__release_weak(v682);
        }
      }
      v687 = (void *)MEMORY[0x1E0CB37E8];
      if (v996)
        v688 = 0;
      else
      objc_msgSend(v687, "numberWithUnsignedLong:", v688);
      v757 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v624, "setObject:forKeyedSubscript:", v757, CFSTR("BiasIndex"));

      v758 = *(std::__shared_weak_count **)&v1048[8];
      if (*(_QWORD *)&v1048[8])
      {
        v759 = (unint64_t *)(*(_QWORD *)&v1048[8] + 8);
        do
          v760 = __ldaxr(v759);
        while (__stlxr(v760 - 1, v759));
        if (!v760)
        {
          ((void (*)(std::__shared_weak_count *))v758->__on_zero_shared)(v758);
          std::__shared_weak_count::__release_weak(v758);
        }
      }
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", Espresso::ANECompilerEngine::get_primary_weights_file_index((Espresso::ANECompilerEngine *)a2, v644, (const void *)v645));
      v670 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v624, "setObject:forKeyedSubscript:", v670, CFSTR("BiasIndex"));

    }
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v637);
    v671 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v624, "setObject:forKeyedSubscript:", v671, CFSTR("BiasOffset"));

    objc_msgSend(v624, "setObject:forKeyedSubscript:", CFSTR("Float16"), CFSTR("BiasType"));
    objc_msgSend(v537, "setObject:forKeyedSubscript:", v624, CFSTR("BiasScaleGroupData"));
    if (!a2[121])
    {
      Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)v1048, a5);
      v672 = (void *)*((_QWORD *)&v1054 + 1);
      *((_QWORD *)&v1054 + 1) = CFSTR("GOC");

      objc_storeStrong((id *)&v1055, v537);
      v673 = v1090;
      if ((unint64_t)v1090 >= v1091)
      {
        v674 = (std::string *)std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__push_back_slow_path<Espresso::ANECompilerEngine::compiler::unit_t const&>(&v1089, (uint64_t)v1048);
      }
      else
      {
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v1090, (uint64_t)v1048);
        v674 = v673 + 6;
      }
      v1090 = v674;

      if (SBYTE7(v1053) < 0)
        operator delete(v1052[0]);
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1050;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1048[24];
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
      if ((v1048[23] & 0x80000000) != 0)
        operator delete(*(void **)v1048);
    }
    v689 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v690 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v691 = __ldaxr(v690);
      while (__stlxr(v691 - 1, v690));
      if (!v691)
      {
        ((void (*)(std::__shared_weak_count *))v689->__on_zero_shared)(v689);
        std::__shared_weak_count::__release_weak(v689);
      }
    }

    goto LABEL_994;
  }
  ((void (*)(std::__shared_weak_count *))v1034->__on_zero_shared)(v1034);
  std::__shared_weak_count::__release_weak(v1034);
  if ((v368 & 1) == 0)
    goto LABEL_714;
LABEL_711:
  if (*(_DWORD *)(a4 + 112))
LABEL_1439:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Inconsistent fused bn state");
LABEL_995:
  if (*(_DWORD *)(a4 + 24))
  {
    if (a2[121])
    {
      v692 = *(id *)(v1089 + 128);
    }
    else
    {
      v692 = (id)objc_opt_new();

    }
    objc_msgSend(v692, "setObject:forKeyedSubscript:", CFSTR("ReLU"), CFSTR("Type"));
    if (a2[121])
      goto LABEL_1067;
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)v1048, a5);
    v693 = (void *)*((_QWORD *)&v1054 + 1);
    *((_QWORD *)&v1054 + 1) = CFSTR("Neuron");

    objc_storeStrong((id *)&v1055, v692);
    v694 = v1090;
    if ((unint64_t)v1090 >= v1091)
    {
      v696 = 0x8E38E38E38E38E39 * (((uint64_t)v1090 - v1089) >> 4);
      if (v696 + 1 > 0x1C71C71C71C71C7)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v697 = 0x1C71C71C71C71C72 * ((uint64_t)(v1091 - v1089) >> 4);
      if (v697 <= v696 + 1)
        v697 = v696 + 1;
      v698 = (char *)(0x8E38E38E38E38E39 * ((uint64_t)(v1091 - v1089) >> 4) >= 0xE38E38E38E38E3
                    ? 0x1C71C71C71C71C7
                    : v697);
      *((_QWORD *)&v1136 + 1) = &v1091;
      if (v698)
        v698 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>((unint64_t)v698);
      else
        v699 = 0;
      *(_QWORD *)buf = v698;
      *(_QWORD *)&buf[8] = &v698[144 * v696];
      *(_QWORD *)&buf[16] = *(_QWORD *)&buf[8];
      *(_QWORD *)&v1136 = &v698[144 * v699];
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(*(std::string **)&buf[8], (uint64_t)v1048);
      *(_QWORD *)&buf[16] += 144;
      std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v1089, buf);
      v695 = v1090;
      std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)buf);
    }
    else
    {
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v1090, (uint64_t)v1048);
      v695 = v694 + 6;
    }
    v1090 = v695;

    if (SBYTE7(v1053) < 0)
      operator delete(v1052[0]);
    *(_QWORD *)buf = &v1050;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    *(_QWORD *)buf = &v1048[24];
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    if ((v1048[23] & 0x80000000) == 0)
      goto LABEL_1067;
    v705 = *(void **)v1048;
    goto LABEL_1030;
  }
  if (!*(_DWORD *)(a4 + 28))
  {
    if (*(_DWORD *)(a4 + 60) != -1)
      Espresso::throw_exception_selector<Espresso::not_implemented_error>("Custom activation not implemented");
    goto LABEL_1068;
  }
  if (a2[121])
  {
    v692 = *(id *)(v1089 + 128);
  }
  else
  {
    v692 = (id)objc_opt_new();

  }
  objc_msgSend(v692, "setObject:forKeyedSubscript:", CFSTR("Tanh"), CFSTR("Type"));
  if (a2[121])
  {
LABEL_1067:

    v482 = lpsrc;
LABEL_1068:
    (*(void (**)(_QWORD *, _BYTE *, uint64_t *))(v482[70] + 32))(v482 + 70, a2, &v1089);
    goto LABEL_1069;
  }
  v700 = *a3;
  std::string::basic_string[abi:ne180100]<0>(v1048, "experimental.ane.use_high_precision_activations");
  std::string::basic_string[abi:ne180100]<0>(buf, "1");
  Espresso::map_const_get<std::map<std::string,std::string>>((uint64_t)v700 + 472, (uint64_t)v1048, (uint64_t)buf, &__str);
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  if ((v1048[23] & 0x80000000) != 0)
    operator delete(*(void **)v1048);
  Espresso::ANECompilerEngine::ane_arch_allow_network_override((uint64_t)*a3 + 472);
  v701 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
  v703 = v701;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    if (__str.__r_.__value_.__l.__size_ != 1)
      goto LABEL_1034;
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) != 1)
      goto LABEL_1034;
    p_str = &__str;
  }
  if (p_str->__r_.__value_.__s.__data_[0] == 48)
  {
LABEL_1040:
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)v1048, a5);
    v709 = (void *)*((_QWORD *)&v1054 + 1);
    *((_QWORD *)&v1054 + 1) = CFSTR("Neuron");

    objc_storeStrong((id *)&v1055, v692);
    v710 = v1090;
    if ((unint64_t)v1090 >= v1091)
    {
      v713 = 0x8E38E38E38E38E39 * (((uint64_t)v1090 - v1089) >> 4);
      if (v713 + 1 > 0x1C71C71C71C71C7)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v714 = 0x1C71C71C71C71C72 * ((uint64_t)(v1091 - v1089) >> 4);
      if (v714 <= v713 + 1)
        v714 = v713 + 1;
      if (0x8E38E38E38E38E39 * ((uint64_t)(v1091 - v1089) >> 4) >= 0xE38E38E38E38E3)
        v715 = 0x1C71C71C71C71C7;
      else
        v715 = v714;
      *((_QWORD *)&v1136 + 1) = &v1091;
      if (v715)
        v715 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v715);
      else
        v716 = 0;
      *(_QWORD *)buf = v715;
      *(_QWORD *)&buf[8] = v715 + 144 * v713;
      *(_QWORD *)&buf[16] = *(_QWORD *)&buf[8];
      *(_QWORD *)&v1136 = v715 + 144 * v716;
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(*(std::string **)&buf[8], (uint64_t)v1048);
      *(_QWORD *)&buf[16] += 144;
      std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v1089, buf);
      v711 = v1090;
      std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)buf);
    }
    else
    {
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v1090, (uint64_t)v1048);
      v711 = v710 + 6;
    }
    v1090 = v711;

    if (SBYTE7(v1053) < 0)
      operator delete(v1052[0]);
    *(_QWORD *)buf = &v1050;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    *(_QWORD *)buf = &v1048[24];
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    if ((v1048[23] & 0x80000000) != 0)
      operator delete(*(void **)v1048);

    if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_1067;
    v705 = (void *)__str.__r_.__value_.__r.__words[0];
LABEL_1030:
    operator delete(v705);
    goto LABEL_1067;
  }
LABEL_1034:
  if (!Espresso::ANECompilerEngine::is_mix(v701, v702))
    goto LABEL_1040;
  v706 = (__int128 *)&v1090[-6];
  std::string::append(v1090 - 6, "_pre_tanh");
  (*(void (**)(_QWORD *, _BYTE *, uint64_t *))(lpsrc[70] + 32))(lpsrc + 70, a2, &v1089);
  Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t((std::string *)v1048, (const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)a5);
  v708 = *((_QWORD *)&v1050 + 1);
  v707 = v1050;
  while (v708 != v707)
  {
    if (*(char *)(v708 - 1) < 0)
      operator delete(*(void **)(v708 - 24));
    v708 -= 24;
  }
  *((_QWORD *)&v1050 + 1) = v707;
  if (v707 >= (unint64_t)v1051)
  {
    v712 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v1050, (uint64_t)v706);
  }
  else
  {
    std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)&v1050, v706);
    v712 = (std::string *)(v707 + 24);
  }
  *((_QWORD *)&v1050 + 1) = v712;
  (*(void (**)(_QWORD *, _BYTE *, _BYTE *))(lpsrc[70] + 48))(lpsrc + 70, a2, v1048);

  if (SBYTE7(v1053) < 0)
    operator delete(v1052[0]);
  *(_QWORD *)buf = &v1050;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(_QWORD *)buf = &v1048[24];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if ((v1048[23] & 0x80000000) != 0)
    operator delete(*(void **)v1048);

  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);

LABEL_1069:
  *(_QWORD *)v1048 = &v1089;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)v1048);

  v717 = (std::__shared_weak_count *)*((_QWORD *)&v1116 + 1);
  if (*((_QWORD *)&v1116 + 1))
  {
    v718 = (unint64_t *)(*((_QWORD *)&v1116 + 1) + 8);
    do
      v719 = __ldaxr(v718);
    while (__stlxr(v719 - 1, v718));
    if (!v719)
    {
      ((void (*)(std::__shared_weak_count *))v717->__on_zero_shared)(v717);
      std::__shared_weak_count::__release_weak(v717);
    }
  }
  v720 = (std::__shared_weak_count *)*((_QWORD *)&v1115 + 1);
  if (*((_QWORD *)&v1115 + 1))
  {
    v721 = (unint64_t *)(*((_QWORD *)&v1115 + 1) + 8);
    do
      v722 = __ldaxr(v721);
    while (__stlxr(v722 - 1, v721));
    if (!v722)
    {
      ((void (*)(std::__shared_weak_count *))v720->__on_zero_shared)(v720);
      std::__shared_weak_count::__release_weak(v720);
    }
  }
  v723 = (std::__shared_weak_count *)*((_QWORD *)&v1114 + 1);
  if (*((_QWORD *)&v1114 + 1))
  {
    v724 = (unint64_t *)(*((_QWORD *)&v1114 + 1) + 8);
    do
      v725 = __ldaxr(v724);
    while (__stlxr(v725 - 1, v724));
    if (!v725)
    {
      ((void (*)(std::__shared_weak_count *))v723->__on_zero_shared)(v723);
      std::__shared_weak_count::__release_weak(v723);
    }
  }
  v726 = (std::__shared_weak_count *)*((_QWORD *)&v1113 + 1);
  if (*((_QWORD *)&v1113 + 1))
  {
    v727 = (unint64_t *)(*((_QWORD *)&v1113 + 1) + 8);
    do
      v728 = __ldaxr(v727);
    while (__stlxr(v728 - 1, v727));
    if (!v728)
    {
      ((void (*)(std::__shared_weak_count *))v726->__on_zero_shared)(v726);
      std::__shared_weak_count::__release_weak(v726);
    }
  }
  v729 = (std::__shared_weak_count *)*((_QWORD *)&v1112 + 1);
  if (*((_QWORD *)&v1112 + 1))
  {
    v730 = (unint64_t *)(*((_QWORD *)&v1112 + 1) + 8);
    do
      v731 = __ldaxr(v730);
    while (__stlxr(v731 - 1, v730));
    if (!v731)
    {
      ((void (*)(std::__shared_weak_count *))v729->__on_zero_shared)(v729);
      std::__shared_weak_count::__release_weak(v729);
    }
  }
  v732 = (std::__shared_weak_count *)*((_QWORD *)&v1111 + 1);
  if (*((_QWORD *)&v1111 + 1))
  {
    v733 = (unint64_t *)(*((_QWORD *)&v1111 + 1) + 8);
    do
      v734 = __ldaxr(v733);
    while (__stlxr(v734 - 1, v733));
    if (!v734)
    {
      ((void (*)(std::__shared_weak_count *))v732->__on_zero_shared)(v732);
      std::__shared_weak_count::__release_weak(v732);
    }
  }
  v735 = (std::__shared_weak_count *)*((_QWORD *)&v1110 + 1);
  if (*((_QWORD *)&v1110 + 1))
  {
    v736 = (unint64_t *)(*((_QWORD *)&v1110 + 1) + 8);
    do
      v737 = __ldaxr(v736);
    while (__stlxr(v737 - 1, v736));
    if (!v737)
    {
      ((void (*)(std::__shared_weak_count *))v735->__on_zero_shared)(v735);
      std::__shared_weak_count::__release_weak(v735);
    }
  }
  v738 = (std::__shared_weak_count *)*((_QWORD *)&v1109 + 1);
  if (*((_QWORD *)&v1109 + 1))
  {
    v739 = (unint64_t *)(*((_QWORD *)&v1109 + 1) + 8);
    do
      v740 = __ldaxr(v739);
    while (__stlxr(v740 - 1, v739));
    if (!v740)
    {
      ((void (*)(std::__shared_weak_count *))v738->__on_zero_shared)(v738);
      std::__shared_weak_count::__release_weak(v738);
    }
  }
  v741 = (std::__shared_weak_count *)*((_QWORD *)&v1108 + 1);
  if (*((_QWORD *)&v1108 + 1))
  {
    v742 = (unint64_t *)(*((_QWORD *)&v1108 + 1) + 8);
    do
      v743 = __ldaxr(v742);
    while (__stlxr(v743 - 1, v742));
    if (!v743)
    {
      ((void (*)(std::__shared_weak_count *))v741->__on_zero_shared)(v741);
      std::__shared_weak_count::__release_weak(v741);
    }
  }
  v744 = (std::__shared_weak_count *)*((_QWORD *)&v1107 + 1);
  if (*((_QWORD *)&v1107 + 1))
  {
    v745 = (unint64_t *)(*((_QWORD *)&v1107 + 1) + 8);
    do
      v746 = __ldaxr(v745);
    while (__stlxr(v746 - 1, v745));
    if (!v746)
    {
      ((void (*)(std::__shared_weak_count *))v744->__on_zero_shared)(v744);
      std::__shared_weak_count::__release_weak(v744);
    }
  }
  v747 = (std::__shared_weak_count *)*((_QWORD *)&v1106 + 1);
  if (*((_QWORD *)&v1106 + 1))
  {
    v748 = (unint64_t *)(*((_QWORD *)&v1106 + 1) + 8);
    do
      v749 = __ldaxr(v748);
    while (__stlxr(v749 - 1, v748));
    if (!v749)
    {
      ((void (*)(std::__shared_weak_count *))v747->__on_zero_shared)(v747);
      std::__shared_weak_count::__release_weak(v747);
    }
  }
  v750 = (std::__shared_weak_count *)*((_QWORD *)&v1105 + 1);
  if (*((_QWORD *)&v1105 + 1))
  {
    v751 = (unint64_t *)(*((_QWORD *)&v1105 + 1) + 8);
    do
      v752 = __ldaxr(v751);
    while (__stlxr(v752 - 1, v751));
    if (!v752)
    {
      ((void (*)(std::__shared_weak_count *))v750->__on_zero_shared)(v750);
      std::__shared_weak_count::__release_weak(v750);
    }
  }
}

void sub_19138A678(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20)
{
  void *v20;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x6B0]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x230]);

  STACK[0x5F0] = (unint64_t)&STACK[0x410];
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x5F0]);

  Espresso::ANECompilerEngine::final_anec_weights_t::~final_anec_weights_t((Espresso::ANECompilerEngine::final_anec_weights_t *)&STACK[0x510]);
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::deconvolution_kernel *>(_QWORD *a1, Espresso::ANECompilerEngine *a2, _QWORD *a3, Espresso::quantized_weights_helper **a4, void *a5, const void **a6)
{
  void *v10;
  void *v11;
  void *v12;
  int v13;
  Espresso::quantized_weights_helper *v14;
  _QWORD *v15;
  void *v16;
  Espresso::ANECompilerEngine *v17;
  Espresso::ANECompilerEngine *v18;
  NSString *v19;
  char is_mix;
  Espresso::quantized_weights_helper *v21;
  NSString *v22;
  int v23;
  NSString *v24;
  int v25;
  char *v26;
  uint64_t *v27;
  unsigned __int8 *v28;
  _QWORD *v29;
  uint64_t v30;
  NSString *v31;
  int v32;
  NSString *v33;
  int v34;
  char *v35;
  uint64_t *v36;
  unsigned __int8 *v37;
  NSString *v38;
  int v39;
  NSString *v40;
  int v41;
  char *v42;
  uint64_t *v43;
  unsigned __int8 *v44;
  uint64_t v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *p_shared_owners;
  unint64_t v49;
  _BOOL4 v50;
  uint64_t v51;
  std::string *v52;
  _BOOL4 v53;
  uint64_t v54;
  std::string *v55;
  _BOOL4 v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  BOOL is_qbias_zero;
  unint64_t *v61;
  unint64_t v62;
  const float **v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  _BOOL4 v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  unint64_t *v77;
  unint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  unint64_t *v81;
  unint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  uint64_t weights_file_index;
  Espresso::ANECompilerEngine::ane_kernel *v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  Espresso::ANECompilerEngine *v94;
  unint64_t v95;
  unint64_t *v96;
  unint64_t v97;
  Espresso::ANECompilerEngine::compiler::build_state_t *v98;
  const unsigned __int8 **v99;
  unint64_t *v100;
  unint64_t v101;
  uint64_t v102;
  void *v103;
  void *v104;
  uint64_t v105;
  Espresso::ANECompilerEngine::ane_kernel *v106;
  unint64_t *v107;
  unint64_t v108;
  void *v109;
  void *v110;
  void *v111;
  Espresso::ANECompilerEngine::ane_kernel *v112;
  unint64_t *v113;
  unint64_t v114;
  uint64_t v115[2];
  _QWORD v116[4];
  uint64_t v117[2];
  void *__p;
  uint64_t v119;
  void *v120;
  std::__shared_weak_count *v121;
  uint64_t v122;
  uint64_t v123;
  void *v124[2];
  char v125;
  std::string v126;
  std::string v127;
  _QWORD v128[2];
  uint64_t v129[2];
  uint64_t v130;
  uint64_t v131;
  _QWORD v132[4];
  const void **v133[5];
  char v134;
  id v135;
  Espresso::ANECompilerEngine *v136;
  _QWORD *v137;
  _QWORD v138[3];
  _QWORD *v139;
  _QWORD v140[3];
  _QWORD *v141;
  _QWORD v142[3];
  _QWORD *v143;
  uint64_t v144;

  v144 = *MEMORY[0x1E0C80C00];
  v136 = a2;
  v137 = a1;
  v135 = a5;
  v134 = *((_BYTE *)a2 + 552);
  v133[0] = (const void **)&v137;
  v133[1] = a6;
  v133[2] = (const void **)&v136;
  v133[3] = (const void **)&v135;
  v133[4] = (const void **)&v134;
  objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "persistentDomainForName:", *MEMORY[0x1E0CB2B58]);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v11, "objectForKeyedSubscript:", CFSTR("espresso.anecompiler.always_bloat"));
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = objc_msgSend(v12, "BOOLValue");

  if (v13)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "<rdar://problem/39402422> 257a: \"Illegal cog size\" or \"NE kernel blob too large \" assertion when using large convolutions with int8 weights");
    Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::deconvolution_kernel *>(Espresso::ANECompilerEngine::deconvolution_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(std::string const&)#1}::operator()(v133, (uint64_t *)&__p);
    goto LABEL_10;
  }
  v14 = *a4;
  if (*((_QWORD *)*a4 + 4) || *((_QWORD *)v14 + 6) || *((_QWORD *)v14 + 8))
  {
    v15 = v137;
    if (v137
      && (*(__int16 *)((*(uint64_t (**)(_QWORD *))(*v137 + 384))(v137) + 96) > 1
       || *(__int16 *)((*(uint64_t (**)(_QWORD *))(*v15 + 384))(v15) + 98) >= 2))
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "Dilated + LUT");
      Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::deconvolution_kernel *>(Espresso::ANECompilerEngine::deconvolution_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(std::string const&)#1}::operator()(v133, (uint64_t *)&__p);
      goto LABEL_10;
    }
    v17 = v136;
    Espresso::ANECompilerEngine::ane_arch_allow_network_override(*a3 + 472);
    v18 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
    is_mix = Espresso::ANECompilerEngine::is_mix(v18, v19);
    v21 = *a4;
    if (*((_QWORD *)*a4 + 4))
    {
      __p = (void *)Espresso::ANECompilerEngine::sparsity_options::read_sparse_lut_config(*a3 + 472, (Espresso::ANECompilerEngine::sparsity_options *)v11);
      v119 = (uint64_t)v22;
      v23 = Espresso::ANECompilerEngine::is_mix(v18, v22);
      v25 = Espresso::ANECompilerEngine::is_mix(v18, v24);
      if (v23)
        v26 = (char *)&Espresso::ANECompilerEngine::h12_ane_hw_limits::dense_fp16_palettes;
      else
        v26 = (char *)&Espresso::ANECompilerEngine::mix_limits::dense_fp16_palettes;
      v27 = (uint64_t *)*a4;
      v142[0] = &off_1E2DB1660;
      v142[1] = v17;
      v143 = v142;
      if (v25)
        v28 = (unsigned __int8 *)&Espresso::ANECompilerEngine::h12_ane_hw_limits::sparse_fp16_palettes;
      else
        v28 = (unsigned __int8 *)&Espresso::ANECompilerEngine::mix_limits::sparse_fp16_palettes;
      Espresso::ANECompilerEngine::add_lut_to_f16_weights(v27, v135, (uint64_t)v142, v26, v28, is_mix, (uint64_t)&__p);
      v29 = v143;
      if (v143 == v142)
      {
        v30 = 4;
        v29 = v142;
        goto LABEL_41;
      }
    }
    else if (*((_QWORD *)v21 + 8))
    {
      __p = (void *)Espresso::ANECompilerEngine::sparsity_options::read_sparse_lut_config(*a3 + 472, (Espresso::ANECompilerEngine::sparsity_options *)v11);
      v119 = (uint64_t)v31;
      v32 = Espresso::ANECompilerEngine::is_mix(v18, v31);
      v34 = Espresso::ANECompilerEngine::is_mix(v18, v33);
      if (v32)
        v35 = (char *)&Espresso::ANECompilerEngine::h12_ane_hw_limits::dense_uint8_palettes;
      else
        v35 = (char *)&Espresso::ANECompilerEngine::mix_limits::dense_uint8_palettes;
      v36 = (uint64_t *)*a4;
      v140[0] = &off_1E2DB1660;
      v140[1] = v17;
      v141 = v140;
      if (v34)
        v37 = (unsigned __int8 *)&Espresso::ANECompilerEngine::h12_ane_hw_limits::sparse_uint8_palettes;
      else
        v37 = (unsigned __int8 *)&Espresso::ANECompilerEngine::mix_limits::sparse_uint8_palettes;
      Espresso::ANECompilerEngine::add_lut_to_uint8_weights(v36, v135, (uint64_t)v140, v35, v37, is_mix, (uint64_t)&__p);
      v29 = v141;
      if (v141 == v140)
      {
        v30 = 4;
        v29 = v140;
        goto LABEL_41;
      }
    }
    else
    {
      if (!*((_QWORD *)v21 + 6))
        Espresso::throw_exception_selector<Espresso::unsupported_configuration_error>("Unknown lookup table type.");
      __p = (void *)Espresso::ANECompilerEngine::sparsity_options::read_sparse_lut_config(*a3 + 472, (Espresso::ANECompilerEngine::sparsity_options *)v11);
      v119 = (uint64_t)v38;
      v39 = Espresso::ANECompilerEngine::is_mix(v18, v38);
      v41 = Espresso::ANECompilerEngine::is_mix(v18, v40);
      if (v39)
        v42 = (char *)&Espresso::ANECompilerEngine::h12_ane_hw_limits::dense_int8_palettes;
      else
        v42 = (char *)&Espresso::ANECompilerEngine::mix_limits::dense_int8_palettes;
      v43 = (uint64_t *)*a4;
      v138[0] = &off_1E2DB1660;
      v138[1] = v17;
      v139 = v138;
      if (v41)
        v44 = (unsigned __int8 *)&Espresso::ANECompilerEngine::h12_ane_hw_limits::sparse_int8_palettes;
      else
        v44 = (unsigned __int8 *)&Espresso::ANECompilerEngine::mix_limits::sparse_int8_palettes;
      Espresso::ANECompilerEngine::add_lut_to_int8_weights(v43, v135, (uint64_t)v138, v42, v44, is_mix, (uint64_t)&__p);
      v29 = v139;
      if (v139 == v138)
      {
        v30 = 4;
        v29 = v138;
        goto LABEL_41;
      }
    }
    if (!v29)
    {
LABEL_42:

      goto LABEL_43;
    }
    v30 = 5;
LABEL_41:
    (*(void (**)(void))(*v29 + 8 * v30))();
    goto LABEL_42;
  }
  if (*((_DWORD *)v14 + 39) != 8)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "Not 8 bits");
    Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::deconvolution_kernel *>(Espresso::ANECompilerEngine::deconvolution_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(std::string const&)#1}::operator()(v133, (uint64_t *)&__p);
LABEL_10:
    if (SHIBYTE(v120) < 0)
    {
      v16 = __p;
LABEL_12:
      operator delete(v16);
      goto LABEL_43;
    }
    goto LABEL_43;
  }
  if (*((_BYTE *)v14 + 164))
  {
    if (Espresso::quantized_weights_helper::is_quantization_linear_signed_symmetric(v14))
    {
      v45 = v137[59];
      v46 = *(_QWORD *)(v45 + 80);
      v47 = *(std::__shared_weak_count **)(v45 + 88);
      v132[2] = v46;
      v132[3] = v47;
      if (v47)
      {
        p_shared_owners = (unint64_t *)&v47->__shared_owners_;
        do
          v49 = __ldxr(p_shared_owners);
        while (__stxr(v49 + 1, p_shared_owners));
      }
      v50 = 0;
      if (v46)
      {
        LODWORD(__p) = 0;
        vDSP_minmgv(*(const float **)(v46 + 16), 1, (float *)&__p, *(int *)(v46 + 8));
        if (*(float *)&__p < 0.000061035)
          v50 = 1;
      }
      if (v47)
      {
        v77 = (unint64_t *)&v47->__shared_owners_;
        do
          v78 = __ldaxr(v77);
        while (__stlxr(v78 - 1, v77));
        if (!v78)
        {
          ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
          std::__shared_weak_count::__release_weak(v47);
        }
      }
      if (!v50)
      {
        v79 = v137;
        v80 = a3[1];
        v132[0] = *a3;
        v132[1] = v80;
        if (v80)
        {
          v81 = (unint64_t *)(v80 + 8);
          do
            v82 = __ldxr(v81);
          while (__stxr(v82 + 1, v81));
        }
        std::string::basic_string[abi:ne180100]<0>(&__p, "W_S8");
        v83 = (*(uint64_t (**)(_QWORD *, _QWORD *, _QWORD *, void **))(v79[70] + 88))(v79 + 70, v132, v79, &__p);
        if (SHIBYTE(v120) < 0)
          operator delete(__p);
        std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v132);
        if ((v83 & 0x80000000) != 0)
        {
          v90 = *(_QWORD *)*a4;
          v91 = *((_QWORD *)*a4 + 1);
          __p = (void *)v90;
          v119 = v91;
          if (v91)
          {
            v92 = (unint64_t *)(v91 + 8);
            do
              v93 = __ldxr(v92);
            while (__stxr(v93 + 1, v92));
            v94 = v136;
            v131 = v91;
            do
              v95 = __ldxr(v92);
            while (__stxr(v95 + 1, v92));
          }
          else
          {
            v94 = v136;
            v131 = 0;
          }
          v130 = v90;
          v83 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine *)((char *)v94 + 128), *(const unsigned __int8 **)(v90 + 16), *(int *)(v90 + 8));
          std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v130);
          if (v134)
            weights_file_index = 0;
          else
          if (v137)
            v106 = (Espresso::ANECompilerEngine::ane_kernel *)(v137 + 70);
          else
            v106 = 0;
          v129[0] = (uint64_t)__p;
          v129[1] = v119;
          if (v119)
          {
            v107 = (unint64_t *)(v119 + 8);
            do
              v108 = __ldxr(v107);
            while (__stxr(v108 + 1, v107));
          }
          Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_s8((Espresso::ANECompilerEngine::final_anec_weights_t *)a6, v106, v129);
          std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v129);
          std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
        }
        else
        {
          v84 = v137;
          v85 = a3[1];
          v128[0] = *a3;
          v128[1] = v85;
          if (v85)
          {
            v86 = (unint64_t *)(v85 + 8);
            do
              v87 = __ldxr(v86);
            while (__stxr(v87 + 1, v86));
          }
          std::string::basic_string[abi:ne180100]<0>(&v127, "W_S8");
          (*(void (**)(void **__return_ptr, _QWORD *, _QWORD *, _QWORD *, std::string *))(v84[70] + 120))(&__p, v84 + 70, v128, v84, &v127);
          if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v127.__r_.__value_.__l.__data_);
          std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v128);
          weights_file_index = Espresso::ANECompilerEngine::get_primary_weights_file_index(v136, (Espresso::ANECompilerEngine::compiler *)__p, v120);
          if (v137)
            v89 = (Espresso::ANECompilerEngine::ane_kernel *)(v137 + 70);
          else
            v89 = 0;
          Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_s8((Espresso::ANECompilerEngine::final_anec_weights_t *)a6, v89, __p);
        }
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v83);
        v109 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v135, "setObject:forKeyedSubscript:", v109, CFSTR("KernelOffset"));

        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", weights_file_index);
        v110 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v135, "setObject:forKeyedSubscript:", v110, CFSTR("KernelIndex"));

        objc_msgSend(v135, "setObject:forKeyedSubscript:", CFSTR("Int8"), CFSTR("KernelType"));
        goto LABEL_43;
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "Signed / Overflowing");
      Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::deconvolution_kernel *>(Espresso::ANECompilerEngine::deconvolution_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(std::string const&)#1}::operator()(v133, (uint64_t *)&__p);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "Signed / Not symmetric");
      Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::deconvolution_kernel *>(Espresso::ANECompilerEngine::deconvolution_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(std::string const&)#1}::operator()(v133, (uint64_t *)&__p);
    }
    goto LABEL_10;
  }
  v51 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&__p, "early_arch_conv_w_int8_no_bloat");
  std::string::basic_string[abi:ne180100]<0>(&v126, "0");
  Espresso::map_const_get<std::map<std::string,std::string>>(v51 + 472, (uint64_t)&__p, (uint64_t)&v126, &v127);
  if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v126.__r_.__value_.__l.__data_);
  if (SHIBYTE(v120) < 0)
    operator delete(__p);
  if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v127.__r_.__value_.__l.__size_ == 1)
    {
      v52 = (std::string *)v127.__r_.__value_.__r.__words[0];
      goto LABEL_65;
    }
  }
  else if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) == 1)
  {
    v52 = &v127;
LABEL_65:
    v53 = v52->__r_.__value_.__s.__data_[0] == 49;
    goto LABEL_67;
  }
  v53 = 0;
LABEL_67:
  v54 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&__p, "early_arch_conv_w_int8_no_bloat_v2");
  std::string::basic_string[abi:ne180100]<0>(v124, "0");
  Espresso::map_const_get<std::map<std::string,std::string>>(v54 + 472, (uint64_t)&__p, (uint64_t)v124, &v126);
  if (v125 < 0)
    operator delete(v124[0]);
  if (SHIBYTE(v120) < 0)
    operator delete(__p);
  if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v126.__r_.__value_.__l.__size_ == 1)
    {
      v55 = (std::string *)v126.__r_.__value_.__r.__words[0];
      goto LABEL_76;
    }
LABEL_77:
    v56 = 0;
    goto LABEL_78;
  }
  if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) != 1)
    goto LABEL_77;
  v55 = &v126;
LABEL_76:
  v56 = v55->__r_.__value_.__s.__data_[0] == 49;
LABEL_78:
  Espresso::quantized_weights_helper::cast_uint8_linear_to_int8_linear(*a4, v53, v56, &__p);
  if (!__p)
    goto LABEL_94;
  v57 = (std::__shared_weak_count *)v123;
  v117[0] = v122;
  v117[1] = v123;
  if (v123)
  {
    v58 = (unint64_t *)(v123 + 8);
    do
      v59 = __ldxr(v58);
    while (__stxr(v59 + 1, v58));
  }
  is_qbias_zero = Espresso::quantized_weights_helper::is_qbias_zero(v117);
  if (v57)
  {
    v61 = (unint64_t *)&v57->__shared_owners_;
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  if (!is_qbias_zero)
  {
LABEL_94:
    std::string::basic_string[abi:ne180100]<0>(v124, "Unsigned / Not symmetric");
    Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::deconvolution_kernel *>(Espresso::ANECompilerEngine::deconvolution_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(std::string const&)#1}::operator()(v133, (uint64_t *)v124);
LABEL_95:
    if (v125 < 0)
      operator delete(v124[0]);
    v68 = (std::__shared_weak_count *)v123;
    if (v123)
    {
      v69 = (unint64_t *)(v123 + 8);
      do
        v70 = __ldaxr(v69);
      while (__stlxr(v70 - 1, v69));
      if (!v70)
      {
        ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
        std::__shared_weak_count::__release_weak(v68);
      }
    }
    v71 = v121;
    if (v121)
    {
      v72 = (unint64_t *)&v121->__shared_owners_;
      do
        v73 = __ldaxr(v72);
      while (__stlxr(v73 - 1, v72));
      if (!v73)
      {
        ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
        std::__shared_weak_count::__release_weak(v71);
      }
    }
    v74 = (std::__shared_weak_count *)v119;
    if (v119)
    {
      v75 = (unint64_t *)(v119 + 8);
      do
        v76 = __ldaxr(v75);
      while (__stlxr(v76 - 1, v75));
      if (!v76)
      {
        ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
        std::__shared_weak_count::__release_weak(v74);
      }
    }
    goto LABEL_174;
  }
  v63 = (const float **)v120;
  v64 = v121;
  v116[2] = v120;
  v116[3] = v121;
  if (v121)
  {
    v65 = (unint64_t *)&v121->__shared_owners_;
    do
      v66 = __ldxr(v65);
    while (__stxr(v66 + 1, v65));
  }
  v67 = 0;
  if (v63)
  {
    LODWORD(v124[0]) = 0;
    vDSP_minmgv(v63[2], 1, (float *)v124, *((int *)v63 + 2));
    if (*(float *)v124 < 0.000061035)
      v67 = 1;
  }
  if (v64)
  {
    v96 = (unint64_t *)&v64->__shared_owners_;
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  if (v67)
  {
    std::string::basic_string[abi:ne180100]<0>(v124, "Unsigned / Overflowing");
    Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::deconvolution_kernel *>(Espresso::ANECompilerEngine::deconvolution_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(std::string const&)#1}::operator()(v133, (uint64_t *)v124);
    goto LABEL_95;
  }
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(v137[59] + 80), (uint64_t)v120, (uint64_t)v121);
  v98 = (Espresso::ANECompilerEngine *)((char *)v136 + 128);
  v99 = (const unsigned __int8 **)__p;
  v116[0] = __p;
  v116[1] = v119;
  if (v119)
  {
    v100 = (unint64_t *)(v119 + 8);
    do
      v101 = __ldxr(v100);
    while (__stxr(v101 + 1, v100));
  }
  v102 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v98, v99[2], *((int *)v99 + 2));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v116);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v102);
  v103 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v135, "setObject:forKeyedSubscript:", v103, CFSTR("KernelOffset"));

  objc_msgSend(v135, "setObject:forKeyedSubscript:", CFSTR("Int8"), CFSTR("KernelType"));
  v104 = (void *)MEMORY[0x1E0CB37E8];
  if (v134)
    v105 = 0;
  else
  objc_msgSend(v104, "numberWithUnsignedLong:", v105);
  v111 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v135, "setObject:forKeyedSubscript:", v111, CFSTR("KernelIndex"));

  if (v137)
    v112 = (Espresso::ANECompilerEngine::ane_kernel *)(v137 + 70);
  else
    v112 = 0;
  v115[0] = (uint64_t)__p;
  v115[1] = v119;
  if (v119)
  {
    v113 = (unint64_t *)(v119 + 8);
    do
      v114 = __ldxr(v113);
    while (__stxr(v114 + 1, v113));
  }
  Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_s8((Espresso::ANECompilerEngine::final_anec_weights_t *)a6, v112, v115);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v115);
  Espresso::quantized_weights_helper::linear_quantization_data::~linear_quantization_data((Espresso::quantized_weights_helper::linear_quantization_data *)&__p);
LABEL_174:
  if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v126.__r_.__value_.__l.__data_);
  if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0)
  {
    v16 = (void *)v127.__r_.__value_.__r.__words[0];
    goto LABEL_12;
  }
LABEL_43:

}

void sub_19138C3DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,char a45,uint64_t a46,char a47,uint64_t a48,char a49,uint64_t a50,char a51,uint64_t a52,char a53)
{
  void *v53;
  uint64_t v54;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a18);

  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::deconvolution_kernel *>(Espresso::ANECompilerEngine::deconvolution_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(std::string const&)#1}::operator()(const void ***a1, uint64_t *a2)
{
  Espresso::quantized_weights_helper **v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  Espresso::ANECompilerEngine::final_anec_weights_t *v7;
  char *v8;
  Espresso::ANECompilerEngine::ane_kernel *v9;
  unint64_t *v10;
  unint64_t v11;
  Espresso *v12;
  const char *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  NSObject *v16;
  Espresso::ANECompilerEngine::compiler::build_state_t *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  void *v23;
  void *v24;
  uint64_t weights_file_index;
  void *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  _BYTE buf[22];
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v4 = (Espresso::quantized_weights_helper **)**a1;
  if (v4
  {
    Espresso::quantized_weights_helper::dequantize_to_float16_2d(v4[59], buf);
  }
  else
  {
    Espresso::quantized_weights_helper::dequantize_to_float16_4d(v4[59], buf);
  }
  v6 = *(_QWORD *)buf;
  v5 = *(std::__shared_weak_count **)&buf[8];
  v36 = *(_QWORD *)buf;
  v37 = *(std::__shared_weak_count **)&buf[8];
  v7 = (Espresso::ANECompilerEngine::final_anec_weights_t *)a1[1];
  v8 = (char *)**a1;
  if (v8)
    v9 = (Espresso::ANECompilerEngine::ane_kernel *)(v8 + 560);
  else
    v9 = 0;
  v34 = *(_QWORD *)buf;
  v35 = *(_QWORD *)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v10 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v7 + 20, v6, (uint64_t)v5);
  Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_f16(v7, v9, *(void **)(v6 + 16));
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  Espresso::espresso_os_log_subsystem(v12, v13);
  v16 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
  {
    if (*((char *)a2 + 23) >= 0)
      v32 = a2;
    else
      v32 = (uint64_t *)*a2;
    v33 = *(int *)(v36 + 8);
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v32;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v33;
    _os_log_debug_impl(&dword_190DAF000, v16, OS_LOG_TYPE_DEBUG, "[ANEC/handle_quantized_weights] Bloating (%s) W: %zu", buf, 0x16u);
  }

  v17 = (Espresso::ANECompilerEngine::compiler::build_state_t *)((char *)*a1[2] + 128);
  if (v37)
  {
    v18 = (unint64_t *)&v37->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v20 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v17, *(const unsigned __int8 **)(v36 + 16), *(int *)(v36 + 8));
  if (v37)
  {
    v21 = (unint64_t *)&v37->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v20, v36, v37, v34, v35);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend((id)*a1[3], "setObject:forKeyedSubscript:", v23, CFSTR("KernelOffset"));

  objc_msgSend((id)*a1[3], "setObject:forKeyedSubscript:", CFSTR("Float16"), CFSTR("KernelType"));
  v24 = (void *)MEMORY[0x1E0CB37E8];
  if (*(_BYTE *)a1[4])
    weights_file_index = 0;
  else
  objc_msgSend(v24, "numberWithUnsignedLong:", weights_file_index);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend((id)*a1[3], "setObject:forKeyedSubscript:", v26, CFSTR("KernelIndex"));

  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = 0;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](*((_QWORD *)**a1 + 59) + 80, (__int128 *)buf);
  v27 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v28 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  if (v37)
  {
    v30 = (unint64_t *)&v37->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
}

void sub_19138C9F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__function::__func<void Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::deconvolution_kernel *>(Espresso::ANECompilerEngine::deconvolution_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(unsigned char const*,unsigned long)#1},std::allocator<void Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::deconvolution_kernel *>(Espresso::ANECompilerEngine::deconvolution_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(unsigned char const*,unsigned long)#1}>,std::pair<int,unsigned long> ()(unsigned char const*,unsigned long)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<void Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::deconvolution_kernel *>(Espresso::ANECompilerEngine::deconvolution_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(unsigned char const*,unsigned long)#1},std::allocator<void Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::deconvolution_kernel *>(Espresso::ANECompilerEngine::deconvolution_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(unsigned char const*,unsigned long)#1}>,std::pair<int,unsigned long> ()(unsigned char const*,unsigned long)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DB1660;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::deconvolution_kernel *>(Espresso::ANECompilerEngine::deconvolution_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(unsigned char const*,unsigned long)#1},std::allocator<void Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::deconvolution_kernel *>(Espresso::ANECompilerEngine::deconvolution_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(unsigned char const*,unsigned long)#1}>,std::pair<int,unsigned long> ()(unsigned char const*,unsigned long)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DB1660;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::deconvolution_kernel *>(Espresso::ANECompilerEngine::deconvolution_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(unsigned char const*,unsigned long)#1},std::allocator<void Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::deconvolution_kernel *>(Espresso::ANECompilerEngine::deconvolution_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(unsigned char const*,unsigned long)#1}>,std::pair<int,unsigned long> ()(unsigned char const*,unsigned long)>::operator()(uint64_t a1, const unsigned __int8 **a2, size_t *a3)
{
  unsigned int v4;

  v4 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler::build_state_t *)(*(_QWORD *)(a1 + 8) + 128), *a2, *a3);
  if (!*(_BYTE *)(*(_QWORD *)(a1 + 8) + 552))
  return v4;
}

uint64_t std::__function::__func<void Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::deconvolution_kernel *>(Espresso::ANECompilerEngine::deconvolution_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(unsigned char const*,unsigned long)#1},std::allocator<void Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::deconvolution_kernel *>(Espresso::ANECompilerEngine::deconvolution_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(unsigned char const*,unsigned long)#1}>,std::pair<int,unsigned long> ()(unsigned char const*,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN8Espresso17ANECompilerEngine24handle_quantized_weightsIPNS0_20deconvolution_kernelEEEvT_PNS0_8compilerENSt3__110shared_ptrINS_3netEEENS8_INS_24quantized_weights_helperEEEP19NSMutableDictionaryRNS0_20final_anec_weights_tEEUlPKhmE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::deconvolution_kernel *>(Espresso::ANECompilerEngine::deconvolution_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(unsigned char const*,unsigned long)#1},std::allocator<void Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::deconvolution_kernel *>(Espresso::ANECompilerEngine::deconvolution_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(unsigned char const*,unsigned long)#1}>,std::pair<int,unsigned long> ()(unsigned char const*,unsigned long)>::target_type()
{
}

void Espresso::ANECompilerEngine::general_concat_kernel::~general_concat_kernel(void **this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 36);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 36);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANECompilerEngine::general_concat_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob((_QWORD *)(a1 + 288), a3, a4, a5);
}

void Espresso::ANECompilerEngine::general_concat_kernel::compile(Espresso::ANECompilerEngine::general_concat_kernel *this, Espresso::ANECompilerEngine::compiler *a2, void **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  char *v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  char *v20;
  char *v21;
  unint64_t v22;
  char *v23;
  _OWORD *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  __int128 v28;
  unint64_t v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _OWORD *v36;
  unint64_t v37;
  __int128 v38;
  char *v39;
  int v40;
  int v41;
  Espresso::ANECompilerEngine *v42;
  const __CFString *ANECAxisForNDAxis;
  void *v44;
  __CFString *v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  std::string *v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  float v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  Espresso::ANECompilerEngine::general_concat_kernel *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  int *v76;
  _WORD *v77;
  int v78;
  __int128 v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  uint64_t v91;
  int *v92;
  _WORD *v93;
  int v94;
  Espresso::ANECompilerEngine::compiler::build_state_t *v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t *v102;
  unint64_t v103;
  void *v104;
  id v105;
  void *v106;
  void *v107;
  void *v108;
  void *v109;
  uint64_t weights_file_index;
  void *v111;
  void *v112;
  __int128 v113;
  unint64_t *v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t *v117;
  unint64_t v118;
  void *v119;
  void *v120;
  void *v121;
  uint64_t v122;
  void *v123;
  void *v124;
  std::string *v125;
  std::string *v126;
  uint64_t v127;
  char v128;
  std::string::size_type size;
  std::string::size_type v130;
  uint64_t v131;
  unsigned __int8 *v132;
  std::string *v133;
  const std::string::value_type *data;
  __int128 v135;
  __CFString *v136;
  std::string *v137;
  std::string *v138;
  unint64_t v139;
  unint64_t v140;
  unint64_t v141;
  uint64_t v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  unint64_t *v155;
  unint64_t v156;
  unint64_t *v157;
  unint64_t v158;
  unint64_t *v159;
  unint64_t v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  const char *v170;
  int *v171;
  int v172;
  uint64_t i;
  float v174;
  int v175;
  _WORD *v176;
  int v177;
  std::runtime_error *exception;
  int *v180;
  uint64_t j;
  int v182;
  int v183;
  unsigned int v184;
  unsigned int v185;
  int v186;
  Espresso *v187;
  const char *v188;
  float v189;
  NSObject *v191;
  double v192;
  uint64_t v193;
  _WORD *v194;
  int v195;
  unsigned int v197;
  const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *v198;
  int v199;
  Espresso::ANECompilerEngine::compiler *v200;
  std::__shared_weak_count *v201;
  std::__shared_weak_count *v202;
  uint64_t v203;
  std::string *v204;
  unint64_t v205;
  uint64_t v206;
  std::__shared_weak_count *v207;
  uint64_t v208;
  std::__shared_weak_count *v209;
  uint64_t v210;
  std::__shared_weak_count *v211;
  __int128 v212;
  uint64_t v213;
  std::__shared_weak_count *v214;
  __int128 v215;
  uint64_t v216;
  std::__shared_weak_count *v217;
  uint64_t v218[2];
  uint64_t v219;
  std::__shared_weak_count *v220;
  uint64_t v221;
  std::__shared_weak_count *v222;
  uint64_t v223;
  std::__shared_weak_count *v224;
  unsigned int v225;
  unsigned int v226;
  uint64_t v227;
  std::__shared_weak_count *v228;
  void *v229[2];
  __int128 v230;
  void *__p;
  _QWORD v232[4];
  void *v233;
  char v234;
  id v235;
  __CFString *v236;
  id v237[2];
  _BYTE buf[24];
  __int128 v239;
  std::vector<std::string> v240;
  void *v241;
  char v242;
  id v243;
  __CFString *v244;
  id v245;
  std::string __str;
  __int128 v247;
  uint64_t v248;

  v248 = *MEMORY[0x1E0C80C00];
  v210 = 0;
  v211 = 0;
  v4 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
  if (!v4 || (v211 = std::__shared_weak_count::lock(v4)) == 0 || (v7 = *((_QWORD *)a2 + 1), (v210 = v7) == 0))
  {
    v170 = "Inconsistent state: null network";
    goto LABEL_259;
  }
  if (!*(_QWORD *)(v7 + 576))
  {
    v170 = "Inconsistent state: blob_storage";
LABEL_259:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v170);
  }
  v8 = v7 + 136;
  v229[0] = a3[6];
  v9 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7 + 136, (unsigned __int8 *)v229[0], (__int128 **)v229);
  v10 = (std::__shared_weak_count *)*((_QWORD *)v9 + 6);
  v208 = *((_QWORD *)v9 + 5);
  v209 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v229[0] = a3;
  v13 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8, (unsigned __int8 *)a3, (__int128 **)v229);
  v200 = a2;
  v15 = *((_QWORD *)v13 + 5);
  v14 = (std::__shared_weak_count *)*((_QWORD *)v13 + 6);
  v206 = v15;
  v207 = v14;
  if (v14)
  {
    v16 = (unint64_t *)&v14->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  v18 = (unsigned __int8 *)a3[6];
  v19 = (unsigned __int8 *)a3[7];
  if (v18 == v19)
  {
    v20 = 0;
  }
  else
  {
    v198 = (const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)a3;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    do
    {
      *(_QWORD *)buf = v18;
      v23 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v210 + 136, v18, (__int128 **)buf);
      v24 = (_OWORD *)*((_QWORD *)v23 + 5);
      if (v24
      {
        v26 = (unint64_t *)&v25->__shared_owners_;
        do
          v27 = __ldxr(v26);
        while (__stxr(v27 + 1, v26));
        v28 = v24[11];
        *(_OWORD *)v229 = v24[10];
        v230 = v28;
        do
          v29 = __ldaxr(v26);
        while (__stlxr(v29 - 1, v26));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
      else
      {
        v30 = v24[11];
        *(_OWORD *)v229 = v24[10];
        v230 = v30;
      }
      if ((unint64_t)v21 >= v22)
      {
        v32 = (v21 - v20) >> 5;
        v33 = v32 + 1;
        if ((unint64_t)(v32 + 1) >> 59)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        if ((uint64_t)(v22 - (_QWORD)v20) >> 4 > v33)
          v33 = (uint64_t)(v22 - (_QWORD)v20) >> 4;
        if (v22 - (unint64_t)v20 >= 0x7FFFFFFFFFFFFFE0)
          v34 = 0x7FFFFFFFFFFFFFFLL;
        else
          v34 = v33;
        if (v34)
          v34 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::blob_container::ane_blob_mapped_shape>>(v34);
        else
          v35 = 0;
        v36 = (_OWORD *)(v34 + 32 * v32);
        *v36 = *(_OWORD *)v229;
        v36[1] = v230;
        if (v21 == v20)
        {
          v39 = (char *)(v34 + 32 * v32);
        }
        else
        {
          v37 = v34 + 32 * v32;
          do
          {
            v38 = *((_OWORD *)v21 - 1);
            v39 = (char *)(v37 - 32);
            *(_OWORD *)(v37 - 32) = *((_OWORD *)v21 - 2);
            *(_OWORD *)(v37 - 16) = v38;
            v21 -= 32;
            v37 -= 32;
          }
          while (v21 != v20);
        }
        v22 = v34 + 32 * v35;
        v21 = (char *)(v36 + 2);
        if (v20)
          operator delete(v20);
        v20 = v39;
      }
      else
      {
        v31 = v230;
        *(_OWORD *)v21 = *(_OWORD *)v229;
        *((_OWORD *)v21 + 1) = v31;
        v21 += 32;
      }
      v18 += 24;
    }
    while (v18 != v19);
    v15 = v206;
    a3 = (void **)v198;
  }
  Espresso::abstract_blob_container::shape((char *)v229, v15);
  if ((_DWORD)v230 == 1)
    v40 = 4;
  else
    v40 = 5;
  if (DWORD1(v230) == -1)
    v41 = v40;
  else
    v41 = DWORD1(v230);
  if (__p)
  {
    v232[0] = __p;
    operator delete(__p);
  }
  v42 = (Espresso::ANECompilerEngine *)((v41 & (*((int *)this + 70) >> 31)) + *((_DWORD *)this + 70));
  v203 = 0;
  v204 = 0;
  v205 = 0;
  if (*((_BYTE *)this + 284))
  {
    ANECAxisForNDAxis = Espresso::ANECompilerEngine::GetANECAxisForNDAxis(v42, v41, *(_BYTE *)(v210 + 1281));
  }
  else
  {
    ANECAxisForNDAxis = CFSTR("Height");
    switch((int)v42)
    {
      case 0:
        ANECAxisForNDAxis = CFSTR("Width");
        break;
      case 1:
        break;
      case 2:
        if (v41 == 5 && *(_BYTE *)(v210 + 1281))
          goto LABEL_150;
        goto LABEL_153;
      case 3:
        ANECAxisForNDAxis = CFSTR("Batch");
        if (v41 == 5 && *(_BYTE *)(v210 + 1281))
LABEL_153:
          ANECAxisForNDAxis = CFSTR("Channel");
        break;
      case 4:
        if (v41 == 5 && *(_BYTE *)(v210 + 1281))
          ANECAxisForNDAxis = CFSTR("Batch");
        else
LABEL_150:
          ANECAxisForNDAxis = CFSTR("Depth");
        break;
      default:
        Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Invalid axis or rank specified.");
    }
  }
  v44 = (void *)objc_opt_new();
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t(v229, a3);
  if (v229 != a3)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)v232, (std::string *)a3[6], (std::string *)a3[7], 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a3[7] - (_BYTE *)a3[6]) >> 3));
  objc_msgSend(v44, "setObject:forKeyedSubscript:", ANECAxisForNDAxis, CFSTR("Dimension"));
  v45 = v236;
  v236 = CFSTR("Concat");

  if (*((_BYTE *)this + 285))
    objc_msgSend(v44, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], CFSTR("Interleaved"));
  objc_storeStrong(v237, v44);
  v46 = 0x8E38E38E38E38E39 * (((uint64_t)v204 - v203) >> 4);
  if (v46 + 1 > 0x1C71C71C71C71C7)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  v47 = 0x1C71C71C71C71C72 * ((uint64_t)(v205 - v203) >> 4);
  if (v47 <= v46 + 1)
    v47 = v46 + 1;
  if (0x8E38E38E38E38E39 * ((uint64_t)(v205 - v203) >> 4) >= 0xE38E38E38E38E3)
    v48 = 0x1C71C71C71C71C7;
  else
    v48 = v47;
  *((_QWORD *)&v239 + 1) = &v205;
  if (v48)
    v48 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v48);
  else
    v49 = 0;
  *(_QWORD *)buf = v48;
  *(_QWORD *)&buf[8] = v48 + 16 * (((uint64_t)v204 - v203) >> 4);
  *(_QWORD *)&buf[16] = *(_QWORD *)&buf[8];
  *(_QWORD *)&v239 = v48 + 144 * v49;
  std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(*(std::string **)&buf[8], (uint64_t)v229);
  *(_QWORD *)&buf[16] += 144;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v203, buf);
  v50 = v204;
  std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)buf);
  v204 = v50;

  if (v234 < 0)
    operator delete(v233);
  *(_QWORD *)buf = v232;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(_QWORD *)buf = (char *)&v230 + 8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (SBYTE7(v230) < 0)
    operator delete(v229[0]);

  v202 = v211;
  if (v211)
  {
    v51 = (unint64_t *)&v211->__shared_owners_;
    do
      v52 = __ldxr(v51);
    while (__stxr(v52 + 1, v51));
  }
  v201 = v207;
  if (v207)
  {
    v53 = (unint64_t *)&v207->__shared_owners_;
    do
      v54 = __ldxr(v53);
    while (__stxr(v54 + 1, v53));
  }
  Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t((Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)v229);
  v236 = 0;
  v237[0] = 0;
  v237[1] = (id)0x100000000;
  v55 = *((_QWORD *)this + 44);
  v56 = (std::__shared_weak_count *)*((_QWORD *)this + 45);
  v227 = v55;
  v228 = v56;
  if (v56)
  {
    v57 = (unint64_t *)&v56->__shared_owners_;
    do
      v58 = __ldxr(v57);
    while (__stxr(v58 + 1, v57));
  }
  if (v55 && !*(_BYTE *)((*(uint64_t (**)(char *))(*((_QWORD *)this + 36) + 104))((char *)this + 288) + 40))
  {
    v59 = *(float *)(v15 + 112);
    v219 = v55;
    v220 = v56;
    if (v56)
    {
      v60 = (unint64_t *)&v56->__shared_owners_;
      do
        v61 = __ldxr(v60);
      while (__stxr(v61 + 1, v60));
    }
    v62 = (std::__shared_weak_count *)*((_QWORD *)this + 47);
    v218[0] = *((_QWORD *)this + 46);
    v218[1] = (uint64_t)v62;
    if (v62)
    {
      v63 = (unint64_t *)&v62->__shared_owners_;
      do
        v64 = __ldxr(v63);
      while (__stxr(v64 + 1, v63));
    }
    Espresso::ane_style_post_scale_bias((uint64_t)&v219, v218, (uint64_t)&v221, v59);
    if (v62)
    {
      v65 = (unint64_t *)&v62->__shared_owners_;
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 - 1, v65));
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
        std::__shared_weak_count::__release_weak(v62);
      }
    }
    v67 = v220;
    if (v220)
    {
      v68 = (unint64_t *)&v220->__shared_owners_;
      do
        v69 = __ldaxr(v68);
      while (__stlxr(v69 - 1, v68));
      if (!v69)
      {
        ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
        std::__shared_weak_count::__release_weak(v67);
      }
    }
    v70 = this;
    v71 = v227;
    v72 = *(unsigned int *)(v227 + 8);
    std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v216, 2 * v72, 1, 1, 1);
    v73 = (int)v72;
    v215 = 0uLL;
    v74 = v72;
    v75 = *((_QWORD *)v70 + 46);
    if (v75)
      v74 = *(_DWORD *)(v75 + 8);
    if (!*((_BYTE *)v200 + 384))
    {
      Espresso::blob<unsigned char,1>::make(&__str, 4 * v72);
      v171 = *(int **)(__str.__r_.__value_.__r.__words[0] + 16);
      v172 = v72 - 1;
      if ((int)v72 >= 1)
      {
        for (i = 0; i != v72; ++i)
        {
          v174 = *(float *)(*(_QWORD *)(v71 + 16) + i * 4);
          *(float *)&v175 = ldexp(1.0, -v225) * v174;
          v171[i] = v175;
        }
      }
      if ((_DWORD)v72)
      {
        v176 = *(_WORD **)(v216 + 16);
        do
        {
          v177 = *v171++;
          _S0 = v177;
          __asm { FCVT            H0, S0 }
          *v176++ = _S0;
          --v73;
        }
        while (v73);
      }
      v213 = 0;
      v214 = 0;
      if (*((_QWORD *)v70 + 46))
      {
        Espresso::blob<unsigned char,1>::make(buf, 4 * v74);
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)&v213, (__int128 *)buf);
        std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)buf);
        Espresso::blob<unsigned char,1>::make(buf, 2 * v74);
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)&v215, (__int128 *)buf);
        std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)buf);
        v180 = *(int **)(v213 + 16);
        if (v74 >= 1)
        {
          for (j = 0; j != v74; ++j)
          {
            if (v172 >= (int)j)
              v182 = j;
            else
              v182 = v172;
            *(float *)&v183 = *(float *)(*(_QWORD *)(v223 + 16) + 4 * j)
                            * *(float *)(*(_QWORD *)(v221 + 16) + 4 * v182);
            v180[j] = v183;
            v184 = v226;
            v185 = v225;
            *(float *)&v186 = ldexp(1.0, v226 - v225) * *(float *)&v183;
            v180[j] = v186;
            v189 = ldexp(1.0, v185 - v184) * *(float *)&v186;
            if (v189 < -127.0 || v189 > 255.0)
            {
              Espresso::espresso_os_log_subsystem(v187, v188);
              v191 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v191, OS_LOG_TYPE_ERROR))
              {
                v192 = *(float *)&v180[j];
                *(_DWORD *)buf = 134218752;
                *(double *)&buf[4] = v189;
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v226;
                *(_WORD *)&buf[18] = 1024;
                *(_DWORD *)&buf[20] = v225;
                LOWORD(v239) = 2048;
                *(double *)((char *)&v239 + 2) = v192;
                _os_log_error_impl(&dword_190DAF000, v191, OS_LOG_TYPE_ERROR, "[ANEC::add_ane_scale_bias_unit] Shifted bias overflowing shifted_b=%f acc_bias_shift=%d post_right_shift=%d anebias=%f", buf, 0x22u);
              }

            }
          }
        }
        if (v74)
        {
          v193 = v74;
          v194 = *(_WORD **)(v215 + 16);
          do
          {
            v195 = *v180++;
            _S0 = v195;
            __asm { FCVT            H0, S0 }
            *v194++ = _S0;
            --v193;
          }
          while (v193);
        }
      }
      exception = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
      Espresso::not_implemented_error::not_implemented_error(exception);
    }
    v197 = v226;
    if ((_DWORD)v72)
    {
      v76 = *(int **)(v221 + 16);
      v77 = *(_WORD **)(v216 + 16);
      do
      {
        v78 = *v76++;
        _S0 = v78;
        __asm { FCVT            H0, S0 }
        *v77++ = _S0;
        --v73;
      }
      while (v73);
    }
    this = v70;
    if (v75)
    {
      std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(buf, 2 * v74, 1, 1, 1);
      v84 = *(_OWORD *)buf;
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = 0;
      v85 = (std::__shared_weak_count *)*((_QWORD *)&v215 + 1);
      v215 = v84;
      if (v85)
      {
        v86 = (unint64_t *)&v85->__shared_owners_;
        do
          v87 = __ldaxr(v86);
        while (__stlxr(v87 - 1, v86));
        if (!v87)
        {
          ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
          std::__shared_weak_count::__release_weak(v85);
        }
      }
      v88 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v89 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v90 = __ldaxr(v89);
        while (__stlxr(v90 - 1, v89));
        if (!v90)
        {
          ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
          std::__shared_weak_count::__release_weak(v88);
        }
      }
      if (v74)
      {
        v91 = v74;
        v92 = *(int **)(v223 + 16);
        v93 = *(_WORD **)(v215 + 16);
        do
        {
          v94 = *v92++;
          _S0 = v94;
          __asm { FCVT            H0, S0 }
          *v93++ = _S0;
          --v91;
        }
        while (v91);
      }
    }
    v199 = *((unsigned __int8 *)v200 + 552);
    v96 = (Espresso::ANECompilerEngine::compiler *)((char *)v200 + 128);
    v97 = v216;
    v98 = v217;
    v213 = v216;
    v214 = v217;
    if (v217)
    {
      v99 = (unint64_t *)&v217->__shared_owners_;
      do
        v100 = __ldxr(v99);
      while (__stxr(v100 + 1, v99));
    }
    v101 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v96, *(const unsigned __int8 **)(v97 + 16), *(int *)(v97 + 8));
    if (v98)
    {
      v102 = (unint64_t *)&v98->__shared_owners_;
      do
        v103 = __ldaxr(v102);
      while (__stlxr(v103 - 1, v102));
      if (!v103)
      {
        ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
        std::__shared_weak_count::__release_weak(v98);
      }
    }
    v104 = (void *)objc_opt_new();
    if (*((_BYTE *)v200 + 121))
    {
      v105 = *(id *)(v203 + 128);

      v104 = v105;
    }
    v106 = (void *)objc_opt_new();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v72);
    v107 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v106, "setObject:forKeyedSubscript:", v107, CFSTR("ScaleCount"));

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v101);
    v108 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v106, "setObject:forKeyedSubscript:", v108, CFSTR("ScaleOffset"));

    v109 = (void *)MEMORY[0x1E0CB37E8];
    if (v199)
      weights_file_index = 0;
    else
    objc_msgSend(v109, "numberWithUnsignedLong:", weights_file_index);
    v111 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v106, "setObject:forKeyedSubscript:", v111, CFSTR("ScaleIndex"));

    objc_msgSend(v106, "setObject:forKeyedSubscript:", CFSTR("Float16"), CFSTR("ScaleType"));
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v225);
    v112 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v104, "setObject:forKeyedSubscript:", v112, CFSTR("ScaleShift"));

    if (*((_QWORD *)this + 46))
    {
      v113 = v215;
      v212 = v215;
      if (*((_QWORD *)&v215 + 1))
      {
        v114 = (unint64_t *)(*((_QWORD *)&v215 + 1) + 8);
        do
          v115 = __ldxr(v114);
        while (__stxr(v115 + 1, v114));
      }
      v116 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v96, *(const unsigned __int8 **)(v113 + 16), *(int *)(v113 + 8));
      if (*((_QWORD *)&v113 + 1))
      {
        v117 = (unint64_t *)(*((_QWORD *)&v113 + 1) + 8);
        do
          v118 = __ldaxr(v117);
        while (__stlxr(v118 - 1, v117));
        if (!v118)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v113 + 1) + 16))(*((_QWORD *)&v113 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v113 + 1));
        }
      }
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *(unsigned int *)(*((_QWORD *)this + 46) + 8));
      v119 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v106, "setObject:forKeyedSubscript:", v119, CFSTR("BiasCount"));

      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v116);
      v120 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v106, "setObject:forKeyedSubscript:", v120, CFSTR("BiasOffset"));

      v121 = (void *)MEMORY[0x1E0CB37E8];
      if (v199)
        v122 = 0;
      else
      objc_msgSend(v121, "numberWithUnsignedLong:", v122);
      v123 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v106, "setObject:forKeyedSubscript:", v123, CFSTR("BiasIndex"));

      objc_msgSend(v106, "setObject:forKeyedSubscript:", CFSTR("Float16"), CFSTR("BiasType"));
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v197);
      v124 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v104, "setObject:forKeyedSubscript:", v124, CFSTR("BiasShift"));

    }
    objc_msgSend(v104, "setObject:forKeyedSubscript:", v106, CFSTR("BiasScaleGroupData"));
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)buf, a3);
    v125 = v204;
    if (v204 == (std::string *)v203)
      goto LABEL_180;
    v126 = v204 - 6;
    v127 = HIBYTE(v204[-6].__r_.__value_.__r.__words[2]);
    v128 = v127;
    size = v204[-6].__r_.__value_.__l.__size_;
    if ((v127 & 0x80u) == 0)
      v130 = HIBYTE(v204[-6].__r_.__value_.__r.__words[2]);
    else
      v130 = v204[-6].__r_.__value_.__l.__size_;
    v131 = buf[23];
    if (buf[23] < 0)
      v131 = *(_QWORD *)&buf[8];
    if (v130 != v131)
      goto LABEL_174;
    if (buf[23] >= 0)
      v132 = buf;
    else
      v132 = *(unsigned __int8 **)buf;
    if ((char)v127 < 0)
    {
      data = (const std::string::value_type *)v126->__r_.__value_.__r.__words[0];
      if (memcmp(v126->__r_.__value_.__l.__data_, v132, v204[-6].__r_.__value_.__l.__size_))
        goto LABEL_177;
    }
    else if ((_BYTE)v127)
    {
      v133 = v204 - 6;
      while (v133->__r_.__value_.__s.__data_[0] == *v132)
      {
        v133 = (std::string *)((char *)v133 + 1);
        ++v132;
        if (!--v127)
          goto LABEL_173;
      }
      goto LABEL_174;
    }
LABEL_173:
    std::string::append(v125 - 6, "__@pre_scale_bias");
    v128 = HIBYTE(v125[-6].__r_.__value_.__r.__words[2]);
LABEL_174:
    if ((v128 & 0x80) == 0)
    {
      v135 = *(_OWORD *)&v126->__r_.__value_.__l.__data_;
      __str.__r_.__value_.__r.__words[2] = v125[-6].__r_.__value_.__r.__words[2];
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v135;
      goto LABEL_178;
    }
    data = v125[-6].__r_.__value_.__l.__data_;
    size = v125[-6].__r_.__value_.__l.__size_;
LABEL_177:
    std::string::__init_copy_ctor_external(&__str, data, size);
LABEL_178:
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v240, &__str, &v247, 1uLL);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
LABEL_180:
    v136 = v244;
    v244 = CFSTR("GOC");

    objc_storeStrong(&v245, v104);
    if (!*((_BYTE *)v200 + 121))
    {
      v137 = v204;
      if ((unint64_t)v204 >= v205)
      {
        v139 = 0x8E38E38E38E38E39 * (((uint64_t)v204 - v203) >> 4);
        if (v139 + 1 > 0x1C71C71C71C71C7)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v140 = 0x1C71C71C71C71C72 * ((uint64_t)(v205 - v203) >> 4);
        if (v140 <= v139 + 1)
          v140 = v139 + 1;
        if (0x8E38E38E38E38E39 * ((uint64_t)(v205 - v203) >> 4) >= 0xE38E38E38E38E3)
          v141 = 0x1C71C71C71C71C7;
        else
          v141 = v140;
        *((_QWORD *)&v247 + 1) = &v205;
        if (v141)
          v141 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v141);
        else
          v142 = 0;
        __str.__r_.__value_.__r.__words[0] = v141;
        __str.__r_.__value_.__l.__size_ = v141 + 144 * v139;
        __str.__r_.__value_.__r.__words[2] = __str.__r_.__value_.__l.__size_;
        *(_QWORD *)&v247 = v141 + 144 * v142;
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)__str.__r_.__value_.__l.__size_, (uint64_t)buf);
        __str.__r_.__value_.__r.__words[2] += 144;
        std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v203, &__str);
        v138 = v204;
        std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&__str);
      }
      else
      {
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v204, (uint64_t)buf);
        v138 = v137 + 6;
      }
      v204 = v138;
    }

    if (v242 < 0)
      operator delete(v241);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v240;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v239;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);

    v143 = (std::__shared_weak_count *)*((_QWORD *)&v215 + 1);
    if (*((_QWORD *)&v215 + 1))
    {
      v144 = (unint64_t *)(*((_QWORD *)&v215 + 1) + 8);
      do
        v145 = __ldaxr(v144);
      while (__stlxr(v145 - 1, v144));
      if (!v145)
      {
        ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
        std::__shared_weak_count::__release_weak(v143);
      }
    }
    v146 = v217;
    if (v217)
    {
      v147 = (unint64_t *)&v217->__shared_owners_;
      do
        v148 = __ldaxr(v147);
      while (__stlxr(v148 - 1, v147));
      if (!v148)
      {
        ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
        std::__shared_weak_count::__release_weak(v146);
      }
    }
    v149 = v224;
    if (v224)
    {
      v150 = (unint64_t *)&v224->__shared_owners_;
      do
        v151 = __ldaxr(v150);
      while (__stlxr(v151 - 1, v150));
      if (!v151)
      {
        ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
        std::__shared_weak_count::__release_weak(v149);
      }
    }
    v152 = v222;
    if (v222)
    {
      v153 = (unint64_t *)&v222->__shared_owners_;
      do
        v154 = __ldaxr(v153);
      while (__stlxr(v154 - 1, v153));
      if (!v154)
      {
        ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
        std::__shared_weak_count::__release_weak(v152);
      }
    }
    v56 = v228;
  }
  if (v56)
  {
    v155 = (unint64_t *)&v56->__shared_owners_;
    do
      v156 = __ldaxr(v155);
    while (__stlxr(v156 - 1, v155));
    if (!v156)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }

  if (v234 < 0)
    operator delete(v233);
  *(_QWORD *)buf = v232;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(_QWORD *)buf = (char *)&v230 + 8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (SBYTE7(v230) < 0)
    operator delete(v229[0]);
  if (v201)
  {
    v157 = (unint64_t *)&v201->__shared_owners_;
    do
      v158 = __ldaxr(v157);
    while (__stlxr(v158 - 1, v157));
    if (!v158)
    {
      ((void (*)(std::__shared_weak_count *))v201->__on_zero_shared)(v201);
      std::__shared_weak_count::__release_weak(v201);
    }
  }
  if (v202)
  {
    v159 = (unint64_t *)&v202->__shared_owners_;
    do
      v160 = __ldaxr(v159);
    while (__stlxr(v160 - 1, v159));
    if (!v160)
    {
      ((void (*)(std::__shared_weak_count *))v202->__on_zero_shared)(v202);
      std::__shared_weak_count::__release_weak(v202);
    }
  }
  (*(void (**)(char *, Espresso::ANECompilerEngine::compiler *, uint64_t *))(*((_QWORD *)this + 36) + 32))((char *)this + 288, v200, &v203);
  v229[0] = &v203;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)v229);
  if (v20)
    operator delete(v20);
  v161 = v207;
  if (v207)
  {
    v162 = (unint64_t *)&v207->__shared_owners_;
    do
      v163 = __ldaxr(v162);
    while (__stlxr(v163 - 1, v162));
    if (!v163)
    {
      ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
      std::__shared_weak_count::__release_weak(v161);
    }
  }
  v164 = v209;
  if (v209)
  {
    v165 = (unint64_t *)&v209->__shared_owners_;
    do
      v166 = __ldaxr(v165);
    while (__stlxr(v166 - 1, v165));
    if (!v166)
    {
      ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
      std::__shared_weak_count::__release_weak(v164);
    }
  }
  v167 = v211;
  if (v211)
  {
    v168 = (unint64_t *)&v211->__shared_owners_;
    do
      v169 = __ldaxr(v168);
    while (__stlxr(v169 - 1, v168));
    if (!v169)
    {
      ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
      std::__shared_weak_count::__release_weak(v167);
    }
  }
}

void sub_19138DF00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,char a24,uint64_t a25,char a26,uint64_t a27,void **a28)
{
  void *v28;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  a28 = (void **)&a19;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100](&a28);
  if (v28)
    operator delete(v28);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::general_concat_kernel::compile(Espresso::ANECompilerEngine::general_concat_kernel *this, Espresso::ANECompilerEngine::compiler *a2, void **a3)
{
  Espresso::ANECompilerEngine::general_concat_kernel::compile((Espresso::ANECompilerEngine::general_concat_kernel *)((char *)this - 288), a2, a3);
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::general_concat_kernel::~general_concat_kernel(void **this)
{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 36);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
}

{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 36);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
  JUMPOUT(0x19401CD90);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::blob_container::ane_blob_mapped_shape>>(unint64_t a1)
{
  if (a1 >> 59)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(32 * a1);
}

void Espresso::ANECompilerEngine::concat_kernel::~concat_kernel(void **this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 43);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 43);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANECompilerEngine::concat_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob((_QWORD *)(a1 + 344), a3, a4, a5);
}

void Espresso::ANECompilerEngine::concat_kernel::compile(Espresso::ANECompilerEngine::concat_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  char *v9;
  std::__shared_weak_count *v10;
  _DWORD *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  char *v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  __CFString *v21;
  _BOOL4 v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  _DWORD *v26;
  unsigned int v27;
  int v28;
  const __CFString *v30;
  void *v31;
  _DWORD *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  float v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  int *v58;
  _WORD *v59;
  int v60;
  __int128 v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  int *v73;
  _WORD *v74;
  int v75;
  uint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  void *v84;
  id v85;
  void *v86;
  void *v87;
  void *v88;
  void *v89;
  uint64_t weights_file_index;
  void *v91;
  void *v92;
  __int128 v93;
  unint64_t *v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t *v97;
  unint64_t v98;
  void *v99;
  void *v100;
  void *v101;
  uint64_t v102;
  void *v103;
  void *v104;
  std::string *v105;
  std::string *v106;
  uint64_t v107;
  char v108;
  std::string::size_type size;
  std::string::size_type v110;
  uint64_t v111;
  unsigned __int8 *v112;
  std::string *v113;
  const std::string::value_type *data;
  __int128 v115;
  __CFString *v116;
  std::string *v117;
  std::string *v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  unint64_t *v135;
  unint64_t v136;
  unint64_t *v137;
  unint64_t v138;
  unint64_t *v139;
  unint64_t v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  std::runtime_error *exception;
  std::runtime_error *v154;
  const char *v155;
  int *v156;
  uint64_t i;
  float v158;
  int v159;
  _WORD *v160;
  int v161;
  std::runtime_error *v163;
  int *v164;
  uint64_t j;
  int v166;
  int v167;
  unsigned int v168;
  unsigned int v169;
  int v170;
  Espresso *v171;
  const char *v172;
  float v173;
  NSObject *v175;
  double v176;
  uint64_t v177;
  _WORD *v178;
  int v179;
  int v181;
  Espresso::ANECompilerEngine::compiler *v182;
  void *v183;
  std::__shared_weak_count *v185;
  std::__shared_weak_count *v186;
  std::string *v187;
  std::string *v188;
  unint64_t v189;
  void *v190[2];
  char v191;
  uint64_t v192;
  uint64_t v193;
  void *v194;
  char v195;
  id v196;
  __CFString *v197;
  id v198[3];
  std::__shared_weak_count *v199;
  uint64_t v200;
  std::__shared_weak_count *v201;
  _DWORD *v202;
  std::__shared_weak_count *v203;
  uint64_t v204;
  std::__shared_weak_count *v205;
  __int128 v206;
  uint64_t v207;
  std::__shared_weak_count *v208;
  __int128 v209;
  uint64_t v210;
  std::__shared_weak_count *v211;
  uint64_t v212[2];
  uint64_t v213;
  std::__shared_weak_count *v214;
  uint64_t v215;
  std::__shared_weak_count *v216;
  uint64_t v217;
  std::__shared_weak_count *v218;
  unsigned int v219;
  unsigned int v220;
  uint64_t v221;
  std::__shared_weak_count *v222;
  _BYTE buf[18];
  __int16 v224;
  int v225;
  __int16 v226;
  double v227;
  std::vector<std::string> v228;
  void *v229;
  char v230;
  id v231;
  __CFString *v232;
  id v233;
  std::string v234;
  _BYTE v235[16];
  void *__p;
  _QWORD v237[4];
  void *v238;
  char v239;
  id v240;
  __CFString *v241;
  id v242;
  uint64_t v243;
  std::string __str;
  __int128 v245;
  uint64_t v246;

  v246 = *MEMORY[0x1E0C80C00];
  v204 = 0;
  v205 = 0;
  v3 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
  if (!v3
    || (v6 = std::__shared_weak_count::lock(v3), (v205 = v6) == 0)
    || (v7 = *((_QWORD *)a2 + 1), (v204 = v7) == 0))
  {
    v155 = "Inconsistent state: null network";
    goto LABEL_237;
  }
  if (!*(_QWORD *)(v7 + 576))
  {
    v155 = "Inconsistent state: blob_storage";
LABEL_237:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v155);
  }
  v8 = v6;
  v234.__r_.__value_.__r.__words[0] = *((_QWORD *)a3 + 6);
  v9 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7 + 136, (unsigned __int8 *)v234.__r_.__value_.__l.__data_, (__int128 **)&v234);
  v11 = (_DWORD *)*((_QWORD *)v9 + 5);
  v10 = (std::__shared_weak_count *)*((_QWORD *)v9 + 6);
  v202 = v11;
  v203 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  v234.__r_.__value_.__r.__words[0] = (std::string::size_type)a3;
  v14 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7 + 136, (unsigned __int8 *)a3, (__int128 **)&v234);
  v16 = *((_QWORD *)v14 + 5);
  v15 = (std::__shared_weak_count *)*((_QWORD *)v14 + 6);
  v200 = v16;
  v201 = v15;
  if (v15)
  {
    v17 = (unint64_t *)&v15->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v198[2] = v11;
  v199 = v10;
  if (v10)
  {
    v19 = (unint64_t *)&v10->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v182 = a2;
  v183 = (void *)objc_opt_new();
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t(v190, (id *)a3);
  v21 = v197;
  v197 = CFSTR("Concat");

  Espresso::abstract_blob_container::shape((char *)&v234, (uint64_t)v11);
  v23 = HIDWORD(v234.__r_.__value_.__r.__words[2]) == -1 || SHIDWORD(v234.__r_.__value_.__r.__words[2]) > 3;
  if (__p)
  {
    v237[0] = __p;
    operator delete(__p);
  }
  v25 = (unsigned __int8 *)*((_QWORD *)a3 + 6);
  v24 = (unsigned __int8 *)*((_QWORD *)a3 + 7);
  if (v23)
  {
    for (; v25 != v24; v25 += 24)
    {
      v234.__r_.__value_.__r.__words[0] = (std::string::size_type)v25;
      v26 = (_DWORD *)*((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7 + 136, v25, (__int128 **)&v234)+ 5);
      if (v26[2] != v11[2] || v26[3] != v11[3] || v26[5] != v11[5] || v26[6] != v11[6])
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Dimensions don't match");
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
    }
    Espresso::abstract_blob_container::shape((char *)&v234, (uint64_t)v11);
    v27 = HIDWORD(v234.__r_.__value_.__r.__words[2]);
    if (LODWORD(v234.__r_.__value_.__r.__words[2]) == 1)
      v28 = 4;
    else
      v28 = 5;
    if (HIDWORD(v234.__r_.__value_.__r.__words[2]) == -1)
      v27 = v28;
    if (v27 > 5)
      Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Invalid axis or rank specified.");
    if (*(_BYTE *)(v7 + 1281))
      _ZF = v27 == 5;
    else
      _ZF = 0;
    if (_ZF)
      v30 = CFSTR("Depth");
    else
      v30 = CFSTR("Channel");
    if (__p)
    {
      v237[0] = __p;
      operator delete(__p);
    }
    v31 = v183;
    objc_msgSend(v183, "setObject:forKeyedSubscript:", v30, CFSTR("Dimension"));
  }
  else
  {
    for (; v25 != v24; v25 += 24)
    {
      v234.__r_.__value_.__r.__words[0] = (std::string::size_type)v25;
      v32 = (_DWORD *)*((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7 + 136, v25, (__int128 **)&v234)+ 5);
      if (v32[3] != v11[3] || v32[4] != v11[4] || v32[5] != v11[5] || v32[6] != v11[6])
      {
        v154 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v154, "Dimensions don't match");
        __cxa_throw(v154, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
    }
    v31 = v183;
    objc_msgSend(v183, "setObject:forKeyedSubscript:", CFSTR("Width"), CFSTR("Dimension"));
  }
  objc_storeStrong(v198, v31);
  Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t(&v234, (const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)v190);
  v241 = v197;
  v242 = v198[0];
  v243 = (uint64_t)v198[1];
  v188 = 0;
  v189 = 0;
  v187 = 0;
  *(_QWORD *)buf = &v187;
  buf[8] = 0;
  v187 = (std::string *)operator new(0x90uLL);
  v188 = v187;
  v189 = (unint64_t)&v187[6];
  v188 = (std::string *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>,Espresso::ANECompilerEngine::compiler::unit_t const*,Espresso::ANECompilerEngine::compiler::unit_t const*,Espresso::ANECompilerEngine::compiler::unit_t*>((uint64_t)&v189, (uint64_t)&v234, (uint64_t)&__str, (uint64_t)v187);

  if (v239 < 0)
    operator delete(v238);
  *(_QWORD *)buf = v237;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(_QWORD *)buf = v235;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v234.__r_.__value_.__l.__data_);
  v186 = v8;
  v33 = (unint64_t *)&v8->__shared_owners_;
  do
    v34 = __ldxr(v33);
  while (__stxr(v34 + 1, v33));
  v185 = v15;
  if (v15)
  {
    v35 = (unint64_t *)&v15->__shared_owners_;
    do
      v36 = __ldxr(v35);
    while (__stxr(v36 + 1, v35));
  }
  Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t((Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)&v234);
  v242 = 0;
  v241 = 0;
  v243 = 0x100000000;
  v37 = *((_QWORD *)this + 51);
  v38 = (std::__shared_weak_count *)*((_QWORD *)this + 52);
  v221 = v37;
  v222 = v38;
  if (v38)
  {
    v39 = (unint64_t *)&v38->__shared_owners_;
    do
      v40 = __ldxr(v39);
    while (__stxr(v40 + 1, v39));
  }
  if (v37 && !*(_BYTE *)((*(uint64_t (**)(char *))(*((_QWORD *)this + 43) + 104))((char *)this + 344) + 40))
  {
    v41 = *(float *)(v16 + 112);
    v213 = v37;
    v214 = v38;
    if (v38)
    {
      v42 = (unint64_t *)&v38->__shared_owners_;
      do
        v43 = __ldxr(v42);
      while (__stxr(v43 + 1, v42));
    }
    v44 = (std::__shared_weak_count *)*((_QWORD *)this + 54);
    v212[0] = *((_QWORD *)this + 53);
    v212[1] = (uint64_t)v44;
    if (v44)
    {
      v45 = (unint64_t *)&v44->__shared_owners_;
      do
        v46 = __ldxr(v45);
      while (__stxr(v46 + 1, v45));
    }
    Espresso::ane_style_post_scale_bias((uint64_t)&v213, v212, (uint64_t)&v215, v41);
    if (v44)
    {
      v47 = (unint64_t *)&v44->__shared_owners_;
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
    }
    v49 = v214;
    if (v214)
    {
      v50 = (unint64_t *)&v214->__shared_owners_;
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
    }
    v52 = v221;
    v53 = *(unsigned int *)(v221 + 8);
    std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v210, 2 * v53, 1, 1, 1);
    v54 = (int)v53;
    v209 = 0uLL;
    v55 = v53;
    v56 = *((_QWORD *)this + 53);
    if (v56)
      v55 = *(_DWORD *)(v56 + 8);
    if (!*((_BYTE *)v182 + 384))
    {
      Espresso::blob<unsigned char,1>::make(&__str, 4 * v53);
      v156 = *(int **)(__str.__r_.__value_.__r.__words[0] + 16);
      if ((int)v53 >= 1)
      {
        for (i = 0; i != v53; ++i)
        {
          v158 = *(float *)(*(_QWORD *)(v52 + 16) + i * 4);
          *(float *)&v159 = ldexp(1.0, -v219) * v158;
          v156[i] = v159;
        }
      }
      if ((_DWORD)v53)
      {
        v160 = *(_WORD **)(v210 + 16);
        do
        {
          v161 = *v156++;
          _S0 = v161;
          __asm { FCVT            H0, S0 }
          *v160++ = _S0;
          --v54;
        }
        while (v54);
      }
      v207 = 0;
      v208 = 0;
      if (*((_QWORD *)this + 53))
      {
        Espresso::blob<unsigned char,1>::make(buf, 4 * v55);
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)&v207, (__int128 *)buf);
        std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)buf);
        Espresso::blob<unsigned char,1>::make(buf, 2 * v55);
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)&v209, (__int128 *)buf);
        std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)buf);
        v164 = *(int **)(v207 + 16);
        if (v55 >= 1)
        {
          for (j = 0; j != v55; ++j)
          {
            if ((int)v53 - 1 >= (int)j)
              v166 = j;
            else
              v166 = v53 - 1;
            *(float *)&v167 = *(float *)(*(_QWORD *)(v217 + 16) + 4 * j)
                            * *(float *)(*(_QWORD *)(v215 + 16) + 4 * v166);
            v164[j] = v167;
            v168 = v220;
            v169 = v219;
            *(float *)&v170 = ldexp(1.0, v220 - v219) * *(float *)&v167;
            v164[j] = v170;
            v173 = ldexp(1.0, v169 - v168) * *(float *)&v170;
            if (v173 < -127.0 || v173 > 255.0)
            {
              Espresso::espresso_os_log_subsystem(v171, v172);
              v175 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v175, OS_LOG_TYPE_ERROR))
              {
                v176 = *(float *)&v164[j];
                *(_DWORD *)buf = 134218752;
                *(double *)&buf[4] = v173;
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v220;
                v224 = 1024;
                v225 = v219;
                v226 = 2048;
                v227 = v176;
                _os_log_error_impl(&dword_190DAF000, v175, OS_LOG_TYPE_ERROR, "[ANEC::add_ane_scale_bias_unit] Shifted bias overflowing shifted_b=%f acc_bias_shift=%d post_right_shift=%d anebias=%f", buf, 0x22u);
              }

            }
          }
        }
        if (v55)
        {
          v177 = v55;
          v178 = *(_WORD **)(v209 + 16);
          do
          {
            v179 = *v164++;
            _S0 = v179;
            __asm { FCVT            H0, S0 }
            *v178++ = _S0;
            --v177;
          }
          while (v177);
        }
      }
      v163 = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
      Espresso::not_implemented_error::not_implemented_error(v163);
    }
    v57 = v220;
    if ((_DWORD)v53)
    {
      v58 = *(int **)(v215 + 16);
      v59 = *(_WORD **)(v210 + 16);
      do
      {
        v60 = *v58++;
        _S0 = v60;
        __asm { FCVT            H0, S0 }
        *v59++ = _S0;
        --v54;
      }
      while (v54);
    }
    if (v56)
    {
      std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(buf, 2 * v55, 1, 1, 1);
      v65 = *(_OWORD *)buf;
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = 0;
      v66 = (std::__shared_weak_count *)*((_QWORD *)&v209 + 1);
      v209 = v65;
      if (v66)
      {
        v67 = (unint64_t *)&v66->__shared_owners_;
        do
          v68 = __ldaxr(v67);
        while (__stlxr(v68 - 1, v67));
        if (!v68)
        {
          ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
          std::__shared_weak_count::__release_weak(v66);
        }
      }
      v69 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v70 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v71 = __ldaxr(v70);
        while (__stlxr(v71 - 1, v70));
        if (!v71)
        {
          ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
          std::__shared_weak_count::__release_weak(v69);
        }
      }
      if (v55)
      {
        v72 = v55;
        v73 = *(int **)(v217 + 16);
        v74 = *(_WORD **)(v209 + 16);
        do
        {
          v75 = *v73++;
          _S0 = v75;
          __asm { FCVT            H0, S0 }
          *v74++ = _S0;
          --v72;
        }
        while (v72);
      }
    }
    v181 = *((unsigned __int8 *)v182 + 552);
    v77 = v210;
    v78 = v211;
    v207 = v210;
    v208 = v211;
    if (v211)
    {
      v79 = (unint64_t *)&v211->__shared_owners_;
      do
        v80 = __ldxr(v79);
      while (__stxr(v80 + 1, v79));
    }
    v81 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler *)((char *)v182 + 128), *(const unsigned __int8 **)(v77 + 16), *(int *)(v77 + 8));
    if (v78)
    {
      v82 = (unint64_t *)&v78->__shared_owners_;
      do
        v83 = __ldaxr(v82);
      while (__stlxr(v83 - 1, v82));
      if (!v83)
      {
        ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
        std::__shared_weak_count::__release_weak(v78);
      }
    }
    v84 = (void *)objc_opt_new();
    if (*((_BYTE *)v182 + 121))
    {
      v85 = (id)v187[5].__r_.__value_.__l.__size_;

      v84 = v85;
    }
    v86 = (void *)objc_opt_new();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v53);
    v87 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v86, "setObject:forKeyedSubscript:", v87, CFSTR("ScaleCount"));

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v81);
    v88 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v86, "setObject:forKeyedSubscript:", v88, CFSTR("ScaleOffset"));

    v89 = (void *)MEMORY[0x1E0CB37E8];
    if (v181)
      weights_file_index = 0;
    else
    objc_msgSend(v89, "numberWithUnsignedLong:", weights_file_index);
    v91 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v86, "setObject:forKeyedSubscript:", v91, CFSTR("ScaleIndex"));

    objc_msgSend(v86, "setObject:forKeyedSubscript:", CFSTR("Float16"), CFSTR("ScaleType"));
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v219);
    v92 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v84, "setObject:forKeyedSubscript:", v92, CFSTR("ScaleShift"));

    if (*((_QWORD *)this + 53))
    {
      v93 = v209;
      v206 = v209;
      if (*((_QWORD *)&v209 + 1))
      {
        v94 = (unint64_t *)(*((_QWORD *)&v209 + 1) + 8);
        do
          v95 = __ldxr(v94);
        while (__stxr(v95 + 1, v94));
      }
      v96 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler *)((char *)v182 + 128), *(const unsigned __int8 **)(v93 + 16), *(int *)(v93 + 8));
      if (*((_QWORD *)&v93 + 1))
      {
        v97 = (unint64_t *)(*((_QWORD *)&v93 + 1) + 8);
        do
          v98 = __ldaxr(v97);
        while (__stlxr(v98 - 1, v97));
        if (!v98)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v93 + 1) + 16))(*((_QWORD *)&v93 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v93 + 1));
        }
      }
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *(unsigned int *)(*((_QWORD *)this + 53) + 8));
      v99 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v86, "setObject:forKeyedSubscript:", v99, CFSTR("BiasCount"));

      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v96);
      v100 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v86, "setObject:forKeyedSubscript:", v100, CFSTR("BiasOffset"));

      v101 = (void *)MEMORY[0x1E0CB37E8];
      if (v181)
        v102 = 0;
      else
      objc_msgSend(v101, "numberWithUnsignedLong:", v102);
      v103 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v86, "setObject:forKeyedSubscript:", v103, CFSTR("BiasIndex"));

      objc_msgSend(v86, "setObject:forKeyedSubscript:", CFSTR("Float16"), CFSTR("BiasType"));
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v57);
      v104 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v84, "setObject:forKeyedSubscript:", v104, CFSTR("BiasShift"));

    }
    objc_msgSend(v84, "setObject:forKeyedSubscript:", v86, CFSTR("BiasScaleGroupData"));
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)buf, (id *)a3);
    v105 = v188;
    if (v188 == v187)
      goto LABEL_151;
    v106 = v188 - 6;
    v107 = HIBYTE(v188[-6].__r_.__value_.__r.__words[2]);
    v108 = v107;
    size = v188[-6].__r_.__value_.__l.__size_;
    if ((v107 & 0x80u) == 0)
      v110 = HIBYTE(v188[-6].__r_.__value_.__r.__words[2]);
    else
      v110 = v188[-6].__r_.__value_.__l.__size_;
    v111 = HIBYTE(v225);
    if (v225 < 0)
      v111 = *(_QWORD *)&buf[8];
    if (v110 != v111)
      goto LABEL_145;
    if (v225 >= 0)
      v112 = buf;
    else
      v112 = *(unsigned __int8 **)buf;
    if ((char)v107 < 0)
    {
      data = (const std::string::value_type *)v106->__r_.__value_.__r.__words[0];
      if (memcmp(v106->__r_.__value_.__l.__data_, v112, v188[-6].__r_.__value_.__l.__size_))
        goto LABEL_148;
    }
    else if ((_BYTE)v107)
    {
      v113 = v188 - 6;
      while (v113->__r_.__value_.__s.__data_[0] == *v112)
      {
        v113 = (std::string *)((char *)v113 + 1);
        ++v112;
        if (!--v107)
          goto LABEL_144;
      }
      goto LABEL_145;
    }
LABEL_144:
    std::string::append(v105 - 6, "__@pre_scale_bias");
    v108 = HIBYTE(v105[-6].__r_.__value_.__r.__words[2]);
LABEL_145:
    if ((v108 & 0x80) == 0)
    {
      v115 = *(_OWORD *)&v106->__r_.__value_.__l.__data_;
      __str.__r_.__value_.__r.__words[2] = v105[-6].__r_.__value_.__r.__words[2];
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v115;
      goto LABEL_149;
    }
    data = v105[-6].__r_.__value_.__l.__data_;
    size = v105[-6].__r_.__value_.__l.__size_;
LABEL_148:
    std::string::__init_copy_ctor_external(&__str, data, size);
LABEL_149:
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v228, &__str, &v245, 1uLL);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
LABEL_151:
    v116 = v232;
    v232 = CFSTR("GOC");

    objc_storeStrong(&v233, v84);
    if (!*((_BYTE *)v182 + 121))
    {
      v117 = v188;
      if ((unint64_t)v188 >= v189)
      {
        v119 = 0x8E38E38E38E38E39 * (((char *)v188 - (char *)v187) >> 4);
        if (v119 + 1 > 0x1C71C71C71C71C7)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v120 = 0x1C71C71C71C71C72 * ((uint64_t)(v189 - (_QWORD)v187) >> 4);
        if (v120 <= v119 + 1)
          v120 = v119 + 1;
        if (0x8E38E38E38E38E39 * ((uint64_t)(v189 - (_QWORD)v187) >> 4) >= 0xE38E38E38E38E3)
          v121 = 0x1C71C71C71C71C7;
        else
          v121 = v120;
        *((_QWORD *)&v245 + 1) = &v189;
        if (v121)
          v121 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v121);
        else
          v122 = 0;
        __str.__r_.__value_.__r.__words[0] = v121;
        __str.__r_.__value_.__l.__size_ = v121 + 144 * v119;
        __str.__r_.__value_.__r.__words[2] = __str.__r_.__value_.__l.__size_;
        *(_QWORD *)&v245 = v121 + 144 * v122;
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)__str.__r_.__value_.__l.__size_, (uint64_t)buf);
        __str.__r_.__value_.__r.__words[2] += 144;
        std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer((uint64_t *)&v187, &__str);
        v118 = v188;
        std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&__str);
      }
      else
      {
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v188, (uint64_t)buf);
        v118 = v117 + 6;
      }
      v188 = v118;
    }

    if (v230 < 0)
      operator delete(v229);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v228;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v226;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
    if (SHIBYTE(v225) < 0)
      operator delete(*(void **)buf);

    v123 = (std::__shared_weak_count *)*((_QWORD *)&v209 + 1);
    if (*((_QWORD *)&v209 + 1))
    {
      v124 = (unint64_t *)(*((_QWORD *)&v209 + 1) + 8);
      do
        v125 = __ldaxr(v124);
      while (__stlxr(v125 - 1, v124));
      if (!v125)
      {
        ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
        std::__shared_weak_count::__release_weak(v123);
      }
    }
    v126 = v211;
    if (v211)
    {
      v127 = (unint64_t *)&v211->__shared_owners_;
      do
        v128 = __ldaxr(v127);
      while (__stlxr(v128 - 1, v127));
      if (!v128)
      {
        ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
        std::__shared_weak_count::__release_weak(v126);
      }
    }
    v129 = v218;
    if (v218)
    {
      v130 = (unint64_t *)&v218->__shared_owners_;
      do
        v131 = __ldaxr(v130);
      while (__stlxr(v131 - 1, v130));
      if (!v131)
      {
        ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
        std::__shared_weak_count::__release_weak(v129);
      }
    }
    v132 = v216;
    if (v216)
    {
      v133 = (unint64_t *)&v216->__shared_owners_;
      do
        v134 = __ldaxr(v133);
      while (__stlxr(v134 - 1, v133));
      if (!v134)
      {
        ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
        std::__shared_weak_count::__release_weak(v132);
      }
    }
    v38 = v222;
  }
  if (v38)
  {
    v135 = (unint64_t *)&v38->__shared_owners_;
    do
      v136 = __ldaxr(v135);
    while (__stlxr(v136 - 1, v135));
    if (!v136)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }

  if (v239 < 0)
    operator delete(v238);
  *(_QWORD *)buf = v237;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(_QWORD *)buf = v235;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v234.__r_.__value_.__l.__data_);
  if (v185)
  {
    v137 = (unint64_t *)&v185->__shared_owners_;
    do
      v138 = __ldaxr(v137);
    while (__stlxr(v138 - 1, v137));
    if (!v138)
    {
      ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
      std::__shared_weak_count::__release_weak(v185);
    }
  }
  v139 = (unint64_t *)&v186->__shared_owners_;
  do
    v140 = __ldaxr(v139);
  while (__stlxr(v140 - 1, v139));
  if (!v140)
  {
    ((void (*)(std::__shared_weak_count *))v186->__on_zero_shared)(v186);
    std::__shared_weak_count::__release_weak(v186);
  }
  (*(void (**)(char *, Espresso::ANECompilerEngine::compiler *, std::string **))(*((_QWORD *)this + 43) + 32))((char *)this + 344, v182, &v187);
  v234.__r_.__value_.__r.__words[0] = (std::string::size_type)&v187;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&v234);

  if (v195 < 0)
    operator delete(v194);
  v234.__r_.__value_.__r.__words[0] = (std::string::size_type)&v193;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v234);
  v234.__r_.__value_.__r.__words[0] = (std::string::size_type)&v192;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v234);
  if (v191 < 0)
    operator delete(v190[0]);

  v141 = v199;
  if (v199)
  {
    v142 = (unint64_t *)&v199->__shared_owners_;
    do
      v143 = __ldaxr(v142);
    while (__stlxr(v143 - 1, v142));
    if (!v143)
    {
      ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
      std::__shared_weak_count::__release_weak(v141);
    }
  }
  v144 = v201;
  if (v201)
  {
    v145 = (unint64_t *)&v201->__shared_owners_;
    do
      v146 = __ldaxr(v145);
    while (__stlxr(v146 - 1, v145));
    if (!v146)
    {
      ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
      std::__shared_weak_count::__release_weak(v144);
    }
  }
  v147 = v203;
  if (v203)
  {
    v148 = (unint64_t *)&v203->__shared_owners_;
    do
      v149 = __ldaxr(v148);
    while (__stlxr(v149 - 1, v148));
    if (!v149)
    {
      ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
      std::__shared_weak_count::__release_weak(v147);
    }
  }
  v150 = v205;
  if (v205)
  {
    v151 = (unint64_t *)&v205->__shared_owners_;
    do
      v152 = __ldaxr(v151);
    while (__stlxr(v152 - 1, v151));
    if (!v152)
    {
      ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
      std::__shared_weak_count::__release_weak(v150);
    }
  }
}

void sub_19138F4D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,id a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,char a43,uint64_t a44,char a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a69;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  a69 = (uint64_t)&a20;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&a69);
  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t(&a23);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a41);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a43);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a45);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a47);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::concat_kernel::compile(Espresso::ANECompilerEngine::concat_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
  Espresso::ANECompilerEngine::concat_kernel::compile((Espresso::ANECompilerEngine::concat_kernel *)((char *)this - 344), a2, a3);
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::concat_kernel::~concat_kernel(void **this)
{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 43);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
}

{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 43);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>,Espresso::ANECompilerEngine::compiler::unit_t const*,Espresso::ANECompilerEngine::compiler::unit_t const*,Espresso::ANECompilerEngine::compiler::unit_t*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)(a4 + v7), a2 + v7);
      v7 += 144;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void Espresso::ANECompilerEngine::flatten_kernel::~flatten_kernel(void **this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 36);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 36);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANECompilerEngine::flatten_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob((_QWORD *)(a1 + 288), a3, a4, a5);
}

uint64_t Espresso::ANECompilerEngine::flatten_kernel::is_valid_for_engine(uint64_t a1, int64x2_t **a2, uint64_t *a3)
{
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  _QWORD *v22;
  _QWORD *v23;
  char *v24;
  char *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  int v38;
  int v39;
  uint64_t *v40;
  uint64_t v41;
  _QWORD *v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  _QWORD *v58;
  _QWORD *v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t *v66;
  uint64_t v71;
  int v72;
  int v73;
  int v74;
  int64x2_t *v75;
  unint64_t *v76;
  unint64_t v77;
  BOOL is_valid_kernel_input_size;
  int64x2_t *v79;
  unint64_t *v80;
  unint64_t v81;
  std::string *v82;
  __int128 v83;
  std::string *v84;
  __int128 v85;
  std::string *v86;
  std::string::size_type size;
  std::string *v88;
  int64x2_t **v89;
  int64x2_t *v90;
  unint64_t *v91;
  unint64_t v92;
  std::string *v93;
  int64x2_t *v94[2];
  _QWORD v95[2];
  std::string v96;
  std::string v97;
  std::string v98;
  std::string v99;
  std::string v100;
  std::string v101;
  int64x2_t *v102[2];
  std::string __p;
  _QWORD v104[2];
  int v105;
  int v106;
  _DWORD v107[2];
  unint64_t v108;
  uint64_t v109;
  __int16 v110;
  __int128 v111;
  __int16 v112;
  uint64_t v113;
  int v114;
  __int128 v115;
  int v116;
  uint64_t v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  __int16 v122;
  int v123;
  char v124;
  int64x2_t *v125;
  std::__shared_weak_count *v126;
  int64x2_t *v127;
  std::__shared_weak_count *v128;
  int64x2_t *v129;
  std::__shared_weak_count *v130;
  int64x2_t *v131;
  std::__shared_weak_count *v132;
  int64x2_t *v133;
  std::__shared_weak_count *v134;

  if (*a3 == a3[1] || a3[3] == a3[4])
  {
    v14 = (std::__shared_weak_count *)a2[1];
    v133 = *a2;
    v134 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldxr(p_shared_owners);
      while (__stxr(v16 + 1, p_shared_owners));
    }
    std::string::basic_string[abi:ne180100]<0>(&v101, "[Unsupported flatten] Detected zero input or zero output");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)&v101, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v133, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    v17 = *(std::__shared_weak_count **)((char *)&v111 + 6);
    if (*(_QWORD *)((char *)&v111 + 6))
    {
      v18 = (unint64_t *)(*(_QWORD *)((char *)&v111 + 6) + 8);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    v100.__r_.__value_.__r.__words[0] = (std::string::size_type)v107;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v100);
    v100.__r_.__value_.__r.__words[0] = (std::string::size_type)v104;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v100);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v101.__r_.__value_.__l.__data_);
    v11 = v134;
    if (!v134)
      return 0;
    v20 = (unint64_t *)&v134->__shared_owners_;
    do
      v13 = __ldaxr(v20);
    while (__stlxr(v13 - 1, v20));
LABEL_35:
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    return 0;
  }
  if (*(_DWORD *)(a1 + 280) == 2)
  {
    v5 = (std::__shared_weak_count *)a2[1];
    v131 = *a2;
    v132 = v5;
    if (v5)
    {
      v6 = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
    std::string::basic_string[abi:ne180100]<0>(&v101, "[Unsupported flatten] Only FLATTEN_NCHW_ND flatten mode is supported");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)&v101, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v131, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    v8 = *(std::__shared_weak_count **)((char *)&v111 + 6);
    if (*(_QWORD *)((char *)&v111 + 6))
    {
      v9 = (unint64_t *)(*(_QWORD *)((char *)&v111 + 6) + 8);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    v100.__r_.__value_.__r.__words[0] = (std::string::size_type)v107;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v100);
    v100.__r_.__value_.__r.__words[0] = (std::string::size_type)v104;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v100);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v101.__r_.__value_.__l.__data_);
    v11 = v132;
    if (!v132)
      return 0;
    v12 = (unint64_t *)&v132->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    goto LABEL_35;
  }
  v22 = (_QWORD *)a3[6];
  __p.__r_.__value_.__r.__words[0] = *(_QWORD *)(*v22 + 224 * a3[9] + 112);
  v23 = std::__tree<std::__value_type<std::string,std::vector<unsigned long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<unsigned long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<unsigned long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v22 + 6), __p.__r_.__value_.__l.__data_, (__int128 **)&__p);
  v25 = (char *)v23[7];
  v24 = (char *)v23[8];
  if ((unint64_t)(v24 - v25) >= 9)
  {
    v26 = (std::__shared_weak_count *)a2[1];
    v129 = *a2;
    v130 = v26;
    if (v26)
    {
      v27 = (unint64_t *)&v26->__shared_owners_;
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
    }
    std::string::basic_string[abi:ne180100]<0>(&v101, "[Unsupported flatten] Flatten output cannot have more than one consumer");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)&v101, (uint64_t)a3, 1);
    Espresso::emit_kernel_validation_warning(&v129, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    v29 = *(std::__shared_weak_count **)((char *)&v111 + 6);
    if (*(_QWORD *)((char *)&v111 + 6))
    {
      v30 = (unint64_t *)(*(_QWORD *)((char *)&v111 + 6) + 8);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    v100.__r_.__value_.__r.__words[0] = (std::string::size_type)v107;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v100);
    v100.__r_.__value_.__r.__words[0] = (std::string::size_type)v104;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v100);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v101.__r_.__value_.__l.__data_);
    v11 = v130;
    if (!v130)
      return 0;
    v32 = (unint64_t *)&v130->__shared_owners_;
    do
      v13 = __ldaxr(v32);
    while (__stlxr(v13 - 1, v32));
    goto LABEL_35;
  }
  if (v25 == v24)
  {
    v43 = (std::__shared_weak_count *)a2[1];
    v127 = *a2;
    v128 = v43;
    if (v43)
    {
      v44 = (unint64_t *)&v43->__shared_owners_;
      do
        v45 = __ldxr(v44);
      while (__stxr(v45 + 1, v44));
    }
    std::string::basic_string[abi:ne180100]<0>(&v101, "[Unsupported flatten] Flatten output cannot be empty");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)&v101, (uint64_t)a3, 1);
    Espresso::emit_kernel_validation_warning(&v127, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    v46 = *(std::__shared_weak_count **)((char *)&v111 + 6);
    if (*(_QWORD *)((char *)&v111 + 6))
    {
      v47 = (unint64_t *)(*(_QWORD *)((char *)&v111 + 6) + 8);
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }
    v100.__r_.__value_.__r.__words[0] = (std::string::size_type)v107;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v100);
    v100.__r_.__value_.__r.__words[0] = (std::string::size_type)v104;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v100);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v101.__r_.__value_.__l.__data_);
    v11 = v128;
    if (!v128)
      return 0;
    v49 = (unint64_t *)&v128->__shared_owners_;
    do
      v13 = __ldaxr(v49);
    while (__stlxr(v13 - 1, v49));
    goto LABEL_35;
  }
  v33 = (uint64_t *)a3[6];
  v34 = *(_QWORD *)v25;
  v35 = *v33;
  v36 = *v33 + 224 * *(_QWORD *)v25;
  v37 = (uint64_t *)(v36 + 48);
  v38 = *(char *)(v36 + 71);
  v39 = *(unsigned __int8 *)(v36 + 71);
  if (v38 < 0)
  {
    if (v37[1] != 13)
    {
      v54 = v35 + 224 * v34;
      v42 = *(_QWORD **)(v54 + 112);
      if (*(_QWORD *)(v54 + 120) - (_QWORD)v42 != 24)
        goto LABEL_97;
      goto LABEL_88;
    }
    v40 = (uint64_t *)*v37;
  }
  else
  {
    v40 = v37;
    if (v39 != 13)
    {
      v41 = v35 + 224 * v34;
      v42 = *(_QWORD **)(v41 + 112);
      if (*(_QWORD *)(v41 + 120) - (_QWORD)v42 != 24)
        goto LABEL_97;
      goto LABEL_85;
    }
  }
  v50 = *v40;
  v51 = *(uint64_t *)((char *)v40 + 5);
  if (v50 != 0x72705F72656E6E69 || v51 != 0x746375646F72705FLL)
  {
    v53 = v35 + 224 * v34;
    v42 = *(_QWORD **)(v53 + 112);
    if (*(_QWORD *)(v53 + 120) - (_QWORD)v42 != 24)
      goto LABEL_97;
    if ((v39 & 0x80) == 0)
    {
LABEL_85:
      if (v39 != 16)
        goto LABEL_97;
      goto LABEL_90;
    }
LABEL_88:
    if (v37[1] == 16)
    {
      v37 = (uint64_t *)*v37;
LABEL_90:
      v56 = (uint64_t *)*v37;
      v55 = v37[1];
      if (v56 != (uint64_t *)0x5F747865746E6F63 || v55 != 0x726566736E617274)
        goto LABEL_97;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v42;
      v58 = std::__tree<std::__value_type<std::string,std::vector<unsigned long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<unsigned long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<unsigned long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v33 + 6), v42, (__int128 **)&__p);
      v59 = (_QWORD *)v58[7];
      if (v58[8] - (_QWORD)v59 != 8
        || !std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)(*(_QWORD *)a3[6] + 224 * *v59 + 48), "inner_product"))
      {
        goto LABEL_97;
      }
      return 1;
    }
LABEL_97:
    v60 = (std::__shared_weak_count *)a2[1];
    v125 = *a2;
    v126 = v60;
    if (v60)
    {
      v61 = (unint64_t *)&v60->__shared_owners_;
      do
        v62 = __ldxr(v61);
      while (__stxr(v62 + 1, v61));
    }
    std::string::basic_string[abi:ne180100]<0>(&v101, "[Unsupported flatten]Flatten only supported before inner product");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)&v101, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v125, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    v63 = *(std::__shared_weak_count **)((char *)&v111 + 6);
    if (*(_QWORD *)((char *)&v111 + 6))
    {
      v64 = (unint64_t *)(*(_QWORD *)((char *)&v111 + 6) + 8);
      do
        v65 = __ldaxr(v64);
      while (__stlxr(v65 - 1, v64));
      if (!v65)
      {
        ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
        std::__shared_weak_count::__release_weak(v63);
      }
    }
    v100.__r_.__value_.__r.__words[0] = (std::string::size_type)v107;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v100);
    v100.__r_.__value_.__r.__words[0] = (std::string::size_type)v104;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v100);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v101.__r_.__value_.__l.__data_);
    v11 = v126;
    if (!v126)
      return 0;
    v66 = (unint64_t *)&v126->__shared_owners_;
    do
      v13 = __ldaxr(v66);
    while (__stlxr(v13 - 1, v66));
    goto LABEL_35;
  }
  __asm { FMOV            V0.2S, #1.0 }
  v110 = 1;
  v111 = 0uLL;
  v112 = 0;
  v113 = 0x1000100010001;
  v114 = 0;
  v116 = 1;
  v123 = 0;
  v124 = 0;
  v119 = 0;
  v120 = 0;
  memset(&__p, 0, sizeof(__p));
  v104[0] = 0;
  v104[1] = 1;
  v115 = xmmword_191A93310;
  v117 = 0;
  v108 = 0xFFFFFFFF00000000;
  v109 = _D0;
  v118 = 0x10000;
  v121 = 0;
  v122 = 1;
  v71 = *a3;
  v72 = *(_DWORD *)*a3;
  v107[0] = v72;
  v73 = *(_DWORD *)(v71 + 4);
  v107[1] = v73;
  v106 = *(_DWORD *)(v71 + 8);
  v74 = *(_DWORD *)(a3[3] + 8);
  v105 = v74;
  if (v72 > 104 || v73 >= 30)
  {
    v79 = a2[1];
    v102[0] = *a2;
    v102[1] = v79;
    if (v79)
    {
      v80 = &v79->u64[1];
      do
        v81 = __ldxr(v80);
      while (__stxr(v81 + 1, v80));
    }
    std::to_string(&v97, v72);
    v82 = std::string::insert(&v97, 0, "Flatten dimensions too large ");
    v83 = *(_OWORD *)&v82->__r_.__value_.__l.__data_;
    v98.__r_.__value_.__r.__words[2] = v82->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v98.__r_.__value_.__l.__data_ = v83;
    v82->__r_.__value_.__l.__size_ = 0;
    v82->__r_.__value_.__r.__words[2] = 0;
    v82->__r_.__value_.__r.__words[0] = 0;
    v84 = std::string::append(&v98, "x");
    v85 = *(_OWORD *)&v84->__r_.__value_.__l.__data_;
    v99.__r_.__value_.__r.__words[2] = v84->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v99.__r_.__value_.__l.__data_ = v85;
    v84->__r_.__value_.__l.__size_ = 0;
    v84->__r_.__value_.__r.__words[2] = 0;
    v84->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v96, v73);
    if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v86 = &v96;
    else
      v86 = (std::string *)v96.__r_.__value_.__r.__words[0];
    if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v96.__r_.__value_.__r.__words[2]);
    else
      size = v96.__r_.__value_.__l.__size_;
    v88 = std::string::append(&v99, (const std::string::value_type *)v86, size);
    v100 = *v88;
    v88->__r_.__value_.__l.__size_ = 0;
    v88->__r_.__value_.__r.__words[2] = 0;
    v88->__r_.__value_.__r.__words[0] = 0;
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v101, (__int128 *)&v100, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v102, (Espresso::base_kernel::validate_for_engine_warning_t *)&v101);
    Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)&v101.__r_.__value_.__l.__data_);
    if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v100.__r_.__value_.__l.__data_);
    if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v96.__r_.__value_.__l.__data_);
    if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v99.__r_.__value_.__l.__data_);
    if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v98.__r_.__value_.__l.__data_);
    if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v97.__r_.__value_.__l.__data_);
    v89 = v102;
  }
  else
  {
    v75 = a2[1];
    v95[0] = *a2;
    v95[1] = v75;
    if (v75)
    {
      v76 = &v75->u64[1];
      do
        v77 = __ldxr(v76);
      while (__stxr(v77 + 1, v76));
    }
    is_valid_kernel_input_size = Espresso::is_valid_kernel_input_size((uint64_t)&__p, a3, 0);
    std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v95);
    if (is_valid_kernel_input_size)
      return 1;
    v90 = a2[1];
    v94[0] = *a2;
    v94[1] = v90;
    if (v90)
    {
      v91 = &v90->u64[1];
      do
        v92 = __ldxr(v91);
      while (__stxr(v92 + 1, v91));
    }
    std::to_string(&v99, v73 * v72 * v74);
    v93 = std::string::insert(&v99, 0, "kernel input size too large for flatten layerRoughly, size_oc=Kw*Kh*Cin should be less than 65536 for INT8, 32768 for FP16. Instead size_oc=");
    v100 = *v93;
    v93->__r_.__value_.__l.__size_ = 0;
    v93->__r_.__value_.__r.__words[2] = 0;
    v93->__r_.__value_.__r.__words[0] = 0;
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v101, (__int128 *)&v100, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v94, (Espresso::base_kernel::validate_for_engine_warning_t *)&v101);
    Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)&v101.__r_.__value_.__l.__data_);
    if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v100.__r_.__value_.__l.__data_);
    if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v99.__r_.__value_.__l.__data_);
    v89 = v94;
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v89);
  return 0;
}

void sub_191390278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36)
{
  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t(&a36);
  if (a35 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::flatten_kernel::compile(Espresso::ANECompilerEngine::flatten_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  char *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  char *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  void *v17;
  id v18;
  int v19;
  const __CFString *v20;
  uint64_t v21;
  std::string *v22;
  int v23;
  uint64_t *v24;
  char v25;
  uint64_t v26;
  const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *v27;
  uint64_t v28;
  uint64_t v29;
  const void **v30;
  const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *v31;
  void *v32;
  id v33;
  void *v34;
  void *v35;
  std::string *v36;
  std::string *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  float v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  int *v67;
  _WORD *v68;
  int v69;
  __int128 v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  uint64_t v82;
  int *v83;
  _WORD *v84;
  int v85;
  int v87;
  Espresso::ANECompilerEngine::compiler::build_state_t *v88;
  uint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t *v94;
  unint64_t v95;
  void *v96;
  id v97;
  void *v98;
  void *v99;
  void *v100;
  void *v101;
  uint64_t weights_file_index;
  void *v103;
  void *v104;
  __int128 v105;
  unint64_t *v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t *v109;
  unint64_t v110;
  void *v111;
  void *v112;
  void *v113;
  uint64_t v114;
  void *v115;
  void *v116;
  std::string *v117;
  std::string *v118;
  uint64_t v119;
  char v120;
  std::string::size_type size;
  std::string::size_type v122;
  uint64_t v123;
  unsigned __int8 *v124;
  std::string *v125;
  const std::string::value_type *data;
  __int128 v127;
  __CFString *v128;
  std::string *v129;
  std::string *v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  uint64_t v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  unint64_t *v147;
  unint64_t v148;
  unint64_t *v149;
  unint64_t v150;
  unint64_t *v151;
  unint64_t v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  const char *v162;
  std::runtime_error *exception;
  int *v164;
  uint64_t i;
  float v166;
  int v167;
  _WORD *v168;
  int v169;
  std::runtime_error *v171;
  int *v172;
  uint64_t j;
  int v174;
  int v175;
  unsigned int v176;
  unsigned int v177;
  int v178;
  Espresso *v179;
  const char *v180;
  float v181;
  NSObject *v183;
  double v184;
  uint64_t v185;
  _WORD *v186;
  int v187;
  _DWORD *v189;
  uint64_t v190;
  std::__shared_weak_count *v193;
  std::__shared_weak_count *v194;
  _BYTE v195[16];
  uint64_t *v196;
  uint64_t v197;
  std::string *v198;
  unint64_t v199;
  std::string v200;
  _BYTE v201[24];
  _DWORD v202[8];
  std::string v203;
  int v204;
  id v205;
  id v206;
  id v207;
  uint64_t v208;
  uint64_t v209;
  std::__shared_weak_count *v210;
  uint64_t v211;
  std::__shared_weak_count *v212;
  uint64_t v213;
  std::__shared_weak_count *v214;
  __int128 v215;
  uint64_t v216;
  std::__shared_weak_count *v217;
  __int128 v218;
  uint64_t v219;
  std::__shared_weak_count *v220;
  uint64_t v221[2];
  uint64_t v222;
  std::__shared_weak_count *v223;
  uint64_t v224;
  std::__shared_weak_count *v225;
  uint64_t v226;
  std::__shared_weak_count *v227;
  unsigned int v228;
  unsigned int v229;
  uint64_t v230;
  std::__shared_weak_count *v231;
  std::string __str;
  std::string *v233;
  int v234[2];
  std::string *v235;
  int v236[2];
  int v237;
  std::string __p;
  int v239;
  id obj;
  id v241;
  id v242;
  uint64_t v243;
  _BYTE buf[24];
  __int128 v245;
  std::vector<std::string> v246;
  void *v247;
  char v248;
  id v249;
  __CFString *v250;
  id v251;
  std::string v252;
  __int128 v253;
  uint64_t v254;

  v254 = *MEMORY[0x1E0C80C00];
  v213 = 0;
  v214 = 0;
  v3 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
  if (!v3
    || (v5 = std::__shared_weak_count::lock(v3), (v214 = v5) == 0)
    || (v6 = *((_QWORD *)a2 + 1), (v213 = v6) == 0))
  {
    v162 = "Inconsistent state: null network";
    goto LABEL_237;
  }
  if (!*(_QWORD *)(v6 + 576))
  {
    v162 = "Inconsistent state: blob_storage";
LABEL_237:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v162);
  }
  v7 = v5;
  __str.__r_.__value_.__r.__words[0] = *((_QWORD *)a3 + 6);
  v8 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6 + 136, (unsigned __int8 *)__str.__r_.__value_.__l.__data_, (__int128 **)&__str);
  v10 = *((_QWORD *)v8 + 5);
  v9 = (std::__shared_weak_count *)*((_QWORD *)v8 + 6);
  v211 = v10;
  v212 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)a3;
  v13 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6 + 136, (unsigned __int8 *)a3, (__int128 **)&__str);
  v14 = (std::__shared_weak_count *)*((_QWORD *)v13 + 6);
  v190 = *((_QWORD *)v13 + 5);
  v209 = v190;
  v210 = v14;
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t((Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)&v200);
  v206 = 0;
  v207 = 0;
  v208 = 0x100000000;
  v17 = (void *)objc_opt_new();
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&__str.__r_.__value_.__l.__data_, (id *)a3);
  v18 = v241;
  v241 = CFSTR("Flatten");

  v19 = *((_DWORD *)this + 70);
  if (v19)
  {
    if (v19 != 1)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
      Espresso::unsupported_configuration_error::unsupported_configuration_error(exception);
    }
    v20 = CFSTR("NHWC");
  }
  else
  {
    v20 = CFSTR("NCHW");
  }
  objc_msgSend(v17, "setObject:forKeyedSubscript:", v20, CFSTR("Mode"));
  objc_storeStrong(&v242, v17);
  std::string::operator=(&v200, &__str);
  std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)v201, v233, *(std::string **)v234, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)v234 - (_QWORD)v233) >> 3));
  v189 = v202;
  std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)v202, v235, *(std::string **)v236, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)v236 - (_QWORD)v235) >> 3));
  v202[6] = v237;
  std::string::operator=(&v203, &__p);
  v204 = v239;
  objc_storeStrong(&v205, obj);
  objc_storeStrong(&v206, v241);
  objc_storeStrong(&v207, v242);
  v208 = v243;

  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *(_QWORD *)buf = &v235;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(_QWORD *)buf = &v233;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);

  v198 = 0;
  v199 = 0;
  v197 = 0;
  if (*(int *)(v10 + 8) <= 1 && *(int *)(v10 + 12) < 2)
  {
    v23 = 1;
  }
  else
  {
    *(_QWORD *)v234 = &v199;
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(1uLL);
    __str.__r_.__value_.__l.__size_ = __str.__r_.__value_.__r.__words[0];
    __str.__r_.__value_.__r.__words[2] = __str.__r_.__value_.__r.__words[0];
    v233 = (std::string *)(__str.__r_.__value_.__r.__words[0] + 144 * v21);
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)__str.__r_.__value_.__l.__data_, (uint64_t)&v200);
    __str.__r_.__value_.__r.__words[2] += 144;
    std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v197, &__str);
    v22 = v198;
    std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&__str);
    v23 = 0;
    v198 = v22;
  }
  std::unordered_set<std::string>::unordered_set((uint64_t)v195, *((_QWORD *)a2 + 4) + 120 * *((int *)a3 + 18) + 56);
  v24 = v196;
  if (v196)
  {
    v25 = *((_BYTE *)a3 + 23);
    if (v25 >= 0)
      v26 = *((unsigned __int8 *)a3 + 23);
    else
      v26 = *((_QWORD *)a3 + 1);
    if (v25 >= 0)
      v27 = a3;
    else
      v27 = *(const Espresso::ANECompilerEngine::compiler::layer_graph_info_t **)a3;
    do
    {
      v28 = *((unsigned __int8 *)v24 + 39);
      if ((v28 & 0x80u) == 0)
        v29 = *((unsigned __int8 *)v24 + 39);
      else
        v29 = v24[3];
      if (v29 == v26)
      {
        v30 = (const void **)(v24 + 2);
        if ((v28 & 0x80) != 0)
        {
          if (!memcmp(*v30, v27, v24[3]))
            goto LABEL_43;
        }
        else
        {
          if (!*((_BYTE *)v24 + 39))
            goto LABEL_43;
          v31 = v27;
          while (*(unsigned __int8 *)v30 == *(unsigned __int8 *)v31)
          {
            v30 = (const void **)((char *)v30 + 1);
            v31 = (const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)((char *)v31 + 1);
            if (!--v28)
              goto LABEL_43;
          }
        }
      }
      v24 = (uint64_t *)*v24;
    }
    while (v24);
  }
  if (v23)
  {
LABEL_43:
    v32 = (void *)objc_opt_new();
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&__str.__r_.__value_.__l.__data_, (id *)a3);
    v33 = v241;
    v241 = CFSTR("GOC");

    v34 = (void *)objc_opt_new();
    objc_msgSend(v32, "setObject:forKeyedSubscript:", v34, CFSTR("BiasScaleGroupData"));
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithShort:", 0);
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v32, "setObject:forKeyedSubscript:", v35, CFSTR("BiasScalar"));

    objc_storeStrong(&v242, v32);
    v36 = v198;
    if ((unint64_t)v198 >= v199)
    {
      v38 = 0x8E38E38E38E38E39 * (((uint64_t)v198 - v197) >> 4);
      if (v38 + 1 > 0x1C71C71C71C71C7)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v39 = 0x1C71C71C71C71C72 * ((uint64_t)(v199 - v197) >> 4);
      if (v39 <= v38 + 1)
        v39 = v38 + 1;
      if (0x8E38E38E38E38E39 * ((uint64_t)(v199 - v197) >> 4) >= 0xE38E38E38E38E3)
        v40 = 0x1C71C71C71C71C7;
      else
        v40 = v39;
      *((_QWORD *)&v245 + 1) = &v199;
      if (v40)
        v40 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v40);
      else
        v41 = 0;
      *(_QWORD *)buf = v40;
      *(_QWORD *)&buf[8] = v40 + 144 * v38;
      *(_QWORD *)&buf[16] = *(_QWORD *)&buf[8];
      *(_QWORD *)&v245 = v40 + 144 * v41;
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(*(std::string **)&buf[8], (uint64_t)&__str);
      *(_QWORD *)&buf[16] += 144;
      std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v197, buf);
      v37 = v198;
      std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)buf);
    }
    else
    {
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v198, (uint64_t)&__str);
      v37 = v36 + 6;
    }
    v198 = v37;

    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    *(_QWORD *)buf = &v235;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    *(_QWORD *)buf = &v233;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);

    v7 = v214;
  }
  v194 = v7;
  if (v7)
  {
    v42 = (unint64_t *)&v7->__shared_owners_;
    do
      v43 = __ldxr(v42);
    while (__stxr(v43 + 1, v42));
  }
  v193 = v14;
  if (v14)
  {
    v44 = (unint64_t *)&v14->__shared_owners_;
    do
      v45 = __ldxr(v44);
    while (__stxr(v45 + 1, v44));
  }
  Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t((Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)&__str);
  v242 = 0;
  v241 = 0;
  v243 = 0x100000000;
  v46 = *((_QWORD *)this + 44);
  v47 = (std::__shared_weak_count *)*((_QWORD *)this + 45);
  v230 = v46;
  v231 = v47;
  if (v47)
  {
    v48 = (unint64_t *)&v47->__shared_owners_;
    do
      v49 = __ldxr(v48);
    while (__stxr(v49 + 1, v48));
  }
  if (v46 && !*(_BYTE *)((*(uint64_t (**)(char *))(*((_QWORD *)this + 36) + 104))((char *)this + 288) + 40))
  {
    v50 = *(float *)(v190 + 112);
    v222 = v46;
    v223 = v47;
    if (v47)
    {
      v51 = (unint64_t *)&v47->__shared_owners_;
      do
        v52 = __ldxr(v51);
      while (__stxr(v52 + 1, v51));
    }
    v53 = (std::__shared_weak_count *)*((_QWORD *)this + 47);
    v221[0] = *((_QWORD *)this + 46);
    v221[1] = (uint64_t)v53;
    if (v53)
    {
      v54 = (unint64_t *)&v53->__shared_owners_;
      do
        v55 = __ldxr(v54);
      while (__stxr(v55 + 1, v54));
    }
    Espresso::ane_style_post_scale_bias((uint64_t)&v222, v221, (uint64_t)&v224, v50);
    if (v53)
    {
      v56 = (unint64_t *)&v53->__shared_owners_;
      do
        v57 = __ldaxr(v56);
      while (__stlxr(v57 - 1, v56));
      if (!v57)
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
      }
    }
    v58 = v223;
    if (v223)
    {
      v59 = (unint64_t *)&v223->__shared_owners_;
      do
        v60 = __ldaxr(v59);
      while (__stlxr(v60 - 1, v59));
      if (!v60)
      {
        ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
        std::__shared_weak_count::__release_weak(v58);
      }
    }
    v61 = v230;
    v62 = *(unsigned int *)(v230 + 8);
    std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v219, 2 * v62, 1, 1, 1);
    v63 = (int)v62;
    v218 = 0uLL;
    v64 = v62;
    v65 = *((_QWORD *)this + 46);
    if (v65)
      v64 = *(_DWORD *)(v65 + 8);
    if (!*((_BYTE *)a2 + 384))
    {
      Espresso::blob<unsigned char,1>::make(&v252, 4 * v62);
      v164 = *(int **)(v252.__r_.__value_.__r.__words[0] + 16);
      if ((int)v62 >= 1)
      {
        for (i = 0; i != v62; ++i)
        {
          v166 = *(float *)(*(_QWORD *)(v61 + 16) + i * 4);
          *(float *)&v167 = ldexp(1.0, -v228) * v166;
          v164[i] = v167;
        }
      }
      if ((_DWORD)v62)
      {
        v168 = *(_WORD **)(v219 + 16);
        do
        {
          v169 = *v164++;
          _S0 = v169;
          __asm { FCVT            H0, S0 }
          *v168++ = _S0;
          --v63;
        }
        while (v63);
      }
      v216 = 0;
      v217 = 0;
      if (*((_QWORD *)this + 46))
      {
        Espresso::blob<unsigned char,1>::make(buf, 4 * v64);
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)&v216, (__int128 *)buf);
        std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)buf);
        Espresso::blob<unsigned char,1>::make(buf, 2 * v64);
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)&v218, (__int128 *)buf);
        std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)buf);
        v172 = *(int **)(v216 + 16);
        if (v64 >= 1)
        {
          for (j = 0; j != v64; ++j)
          {
            if ((int)v62 - 1 >= (int)j)
              v174 = j;
            else
              v174 = v62 - 1;
            *(float *)&v175 = *(float *)(*(_QWORD *)(v226 + 16) + 4 * j)
                            * *(float *)(*(_QWORD *)(v224 + 16) + 4 * v174);
            v172[j] = v175;
            v176 = v229;
            v177 = v228;
            *(float *)&v178 = ldexp(1.0, v229 - v228) * *(float *)&v175;
            v172[j] = v178;
            v181 = ldexp(1.0, v177 - v176) * *(float *)&v178;
            if (v181 < -127.0 || v181 > 255.0)
            {
              Espresso::espresso_os_log_subsystem(v179, v180);
              v183 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v183, OS_LOG_TYPE_ERROR))
              {
                v184 = *(float *)&v172[j];
                *(_DWORD *)buf = 134218752;
                *(double *)&buf[4] = v181;
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v229;
                *(_WORD *)&buf[18] = 1024;
                *(_DWORD *)&buf[20] = v228;
                LOWORD(v245) = 2048;
                *(double *)((char *)&v245 + 2) = v184;
                _os_log_error_impl(&dword_190DAF000, v183, OS_LOG_TYPE_ERROR, "[ANEC::add_ane_scale_bias_unit] Shifted bias overflowing shifted_b=%f acc_bias_shift=%d post_right_shift=%d anebias=%f", buf, 0x22u);
              }

            }
          }
        }
        if (v64)
        {
          v185 = v64;
          v186 = *(_WORD **)(v218 + 16);
          do
          {
            v187 = *v172++;
            _S0 = v187;
            __asm { FCVT            H0, S0 }
            *v186++ = _S0;
            --v185;
          }
          while (v185);
        }
      }
      v171 = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
      Espresso::not_implemented_error::not_implemented_error(v171);
    }
    v66 = v229;
    if ((_DWORD)v62)
    {
      v67 = *(int **)(v224 + 16);
      v68 = *(_WORD **)(v219 + 16);
      do
      {
        v69 = *v67++;
        _S0 = v69;
        __asm { FCVT            H0, S0 }
        *v68++ = _S0;
        --v63;
      }
      while (v63);
    }
    if (v65)
    {
      std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(buf, 2 * v64, 1, 1, 1);
      v75 = *(_OWORD *)buf;
      *(_QWORD *)&buf[8] = 0;
      *(_QWORD *)buf = 0;
      v76 = (std::__shared_weak_count *)*((_QWORD *)&v218 + 1);
      v218 = v75;
      if (v76)
      {
        v77 = (unint64_t *)&v76->__shared_owners_;
        do
          v78 = __ldaxr(v77);
        while (__stlxr(v78 - 1, v77));
        if (!v78)
        {
          ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
          std::__shared_weak_count::__release_weak(v76);
        }
      }
      v79 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v80 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v81 = __ldaxr(v80);
        while (__stlxr(v81 - 1, v80));
        if (!v81)
        {
          ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
          std::__shared_weak_count::__release_weak(v79);
        }
      }
      if (v64)
      {
        v82 = v64;
        v83 = *(int **)(v226 + 16);
        v84 = *(_WORD **)(v218 + 16);
        do
        {
          v85 = *v83++;
          _S0 = v85;
          __asm { FCVT            H0, S0 }
          *v84++ = _S0;
          --v82;
        }
        while (v82);
      }
    }
    v87 = *((unsigned __int8 *)a2 + 552);
    v88 = (Espresso::ANECompilerEngine::compiler *)((char *)a2 + 128);
    v89 = v219;
    v90 = v220;
    v216 = v219;
    v217 = v220;
    if (v220)
    {
      v91 = (unint64_t *)&v220->__shared_owners_;
      do
        v92 = __ldxr(v91);
      while (__stxr(v92 + 1, v91));
    }
    v93 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v88, *(const unsigned __int8 **)(v89 + 16), *(int *)(v89 + 8));
    if (v90)
    {
      v94 = (unint64_t *)&v90->__shared_owners_;
      do
        v95 = __ldaxr(v94);
      while (__stlxr(v95 - 1, v94));
      if (!v95)
      {
        ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
        std::__shared_weak_count::__release_weak(v90);
      }
    }
    v96 = (void *)objc_opt_new();
    if (*((_BYTE *)a2 + 121))
    {
      v97 = *(id *)(v197 + 128);

      v96 = v97;
    }
    v98 = (void *)objc_opt_new();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v62);
    v99 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v98, "setObject:forKeyedSubscript:", v99, CFSTR("ScaleCount"));

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v93);
    v100 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v98, "setObject:forKeyedSubscript:", v100, CFSTR("ScaleOffset"));

    v101 = (void *)MEMORY[0x1E0CB37E8];
    if (v87)
      weights_file_index = 0;
    else
    objc_msgSend(v101, "numberWithUnsignedLong:", weights_file_index, v202);
    v103 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v98, "setObject:forKeyedSubscript:", v103, CFSTR("ScaleIndex"));

    objc_msgSend(v98, "setObject:forKeyedSubscript:", CFSTR("Float16"), CFSTR("ScaleType"));
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v228);
    v104 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v96, "setObject:forKeyedSubscript:", v104, CFSTR("ScaleShift"));

    if (*((_QWORD *)this + 46))
    {
      v105 = v218;
      v215 = v218;
      if (*((_QWORD *)&v218 + 1))
      {
        v106 = (unint64_t *)(*((_QWORD *)&v218 + 1) + 8);
        do
          v107 = __ldxr(v106);
        while (__stxr(v107 + 1, v106));
      }
      v108 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v88, *(const unsigned __int8 **)(v105 + 16), *(int *)(v105 + 8));
      if (*((_QWORD *)&v105 + 1))
      {
        v109 = (unint64_t *)(*((_QWORD *)&v105 + 1) + 8);
        do
          v110 = __ldaxr(v109);
        while (__stlxr(v110 - 1, v109));
        if (!v110)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v105 + 1) + 16))(*((_QWORD *)&v105 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v105 + 1));
        }
      }
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *(unsigned int *)(*((_QWORD *)this + 46) + 8));
      v111 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v98, "setObject:forKeyedSubscript:", v111, CFSTR("BiasCount"));

      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v108);
      v112 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v98, "setObject:forKeyedSubscript:", v112, CFSTR("BiasOffset"));

      v113 = (void *)MEMORY[0x1E0CB37E8];
      if (v87)
        v114 = 0;
      else
      objc_msgSend(v113, "numberWithUnsignedLong:", v114);
      v115 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v98, "setObject:forKeyedSubscript:", v115, CFSTR("BiasIndex"));

      objc_msgSend(v98, "setObject:forKeyedSubscript:", CFSTR("Float16"), CFSTR("BiasType"));
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v66);
      v116 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v96, "setObject:forKeyedSubscript:", v116, CFSTR("BiasShift"));

    }
    objc_msgSend(v96, "setObject:forKeyedSubscript:", v98, CFSTR("BiasScaleGroupData"));
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)buf, (id *)a3);
    v117 = v198;
    if (v198 == (std::string *)v197)
      goto LABEL_157;
    v118 = v198 - 6;
    v119 = HIBYTE(v198[-6].__r_.__value_.__r.__words[2]);
    v120 = v119;
    size = v198[-6].__r_.__value_.__l.__size_;
    if ((v119 & 0x80u) == 0)
      v122 = HIBYTE(v198[-6].__r_.__value_.__r.__words[2]);
    else
      v122 = v198[-6].__r_.__value_.__l.__size_;
    v123 = buf[23];
    if (buf[23] < 0)
      v123 = *(_QWORD *)&buf[8];
    if (v122 != v123)
      goto LABEL_151;
    if (buf[23] >= 0)
      v124 = buf;
    else
      v124 = *(unsigned __int8 **)buf;
    if ((char)v119 < 0)
    {
      data = (const std::string::value_type *)v118->__r_.__value_.__r.__words[0];
      if (memcmp(v118->__r_.__value_.__l.__data_, v124, v198[-6].__r_.__value_.__l.__size_))
        goto LABEL_154;
    }
    else if ((_BYTE)v119)
    {
      v125 = v198 - 6;
      while (v125->__r_.__value_.__s.__data_[0] == *v124)
      {
        v125 = (std::string *)((char *)v125 + 1);
        ++v124;
        if (!--v119)
          goto LABEL_150;
      }
      goto LABEL_151;
    }
LABEL_150:
    std::string::append(v117 - 6, "__@pre_scale_bias");
    v120 = HIBYTE(v117[-6].__r_.__value_.__r.__words[2]);
LABEL_151:
    if ((v120 & 0x80) == 0)
    {
      v127 = *(_OWORD *)&v118->__r_.__value_.__l.__data_;
      v252.__r_.__value_.__r.__words[2] = v117[-6].__r_.__value_.__r.__words[2];
      *(_OWORD *)&v252.__r_.__value_.__l.__data_ = v127;
      goto LABEL_155;
    }
    data = v117[-6].__r_.__value_.__l.__data_;
    size = v117[-6].__r_.__value_.__l.__size_;
LABEL_154:
    std::string::__init_copy_ctor_external(&v252, data, size);
LABEL_155:
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v246, &v252, &v253, 1uLL);
    if (SHIBYTE(v252.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v252.__r_.__value_.__l.__data_);
LABEL_157:
    v128 = v250;
    v250 = CFSTR("GOC");

    objc_storeStrong(&v251, v96);
    if (!*((_BYTE *)a2 + 121))
    {
      v129 = v198;
      if ((unint64_t)v198 >= v199)
      {
        v131 = 0x8E38E38E38E38E39 * (((uint64_t)v198 - v197) >> 4);
        if (v131 + 1 > 0x1C71C71C71C71C7)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v132 = 0x1C71C71C71C71C72 * ((uint64_t)(v199 - v197) >> 4);
        if (v132 <= v131 + 1)
          v132 = v131 + 1;
        if (0x8E38E38E38E38E39 * ((uint64_t)(v199 - v197) >> 4) >= 0xE38E38E38E38E3)
          v133 = 0x1C71C71C71C71C7;
        else
          v133 = v132;
        *((_QWORD *)&v253 + 1) = &v199;
        if (v133)
          v133 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v133);
        else
          v134 = 0;
        v252.__r_.__value_.__r.__words[0] = v133;
        v252.__r_.__value_.__l.__size_ = v133 + 144 * v131;
        v252.__r_.__value_.__r.__words[2] = v252.__r_.__value_.__l.__size_;
        *(_QWORD *)&v253 = v133 + 144 * v134;
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)v252.__r_.__value_.__l.__size_, (uint64_t)buf);
        v252.__r_.__value_.__r.__words[2] += 144;
        std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v197, &v252);
        v130 = v198;
        std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&v252);
      }
      else
      {
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v198, (uint64_t)buf);
        v130 = v129 + 6;
      }
      v198 = v130;
    }

    if (v248 < 0)
      operator delete(v247);
    v252.__r_.__value_.__r.__words[0] = (std::string::size_type)&v246;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v252);
    v252.__r_.__value_.__r.__words[0] = (std::string::size_type)&v245;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v252);
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);

    v135 = (std::__shared_weak_count *)*((_QWORD *)&v218 + 1);
    if (*((_QWORD *)&v218 + 1))
    {
      v136 = (unint64_t *)(*((_QWORD *)&v218 + 1) + 8);
      do
        v137 = __ldaxr(v136);
      while (__stlxr(v137 - 1, v136));
      if (!v137)
      {
        ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
        std::__shared_weak_count::__release_weak(v135);
      }
    }
    v138 = v220;
    if (v220)
    {
      v139 = (unint64_t *)&v220->__shared_owners_;
      do
        v140 = __ldaxr(v139);
      while (__stlxr(v140 - 1, v139));
      if (!v140)
      {
        ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
        std::__shared_weak_count::__release_weak(v138);
      }
    }
    v141 = v227;
    if (v227)
    {
      v142 = (unint64_t *)&v227->__shared_owners_;
      do
        v143 = __ldaxr(v142);
      while (__stlxr(v143 - 1, v142));
      if (!v143)
      {
        ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
        std::__shared_weak_count::__release_weak(v141);
      }
    }
    v144 = v225;
    if (v225)
    {
      v145 = (unint64_t *)&v225->__shared_owners_;
      do
        v146 = __ldaxr(v145);
      while (__stlxr(v146 - 1, v145));
      if (!v146)
      {
        ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
        std::__shared_weak_count::__release_weak(v144);
      }
    }
    v47 = v231;
  }
  if (v47)
  {
    v147 = (unint64_t *)&v47->__shared_owners_;
    do
      v148 = __ldaxr(v147);
    while (__stlxr(v148 - 1, v147));
    if (!v148)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }

  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *(_QWORD *)buf = &v235;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(_QWORD *)buf = &v233;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v193)
  {
    v149 = (unint64_t *)&v193->__shared_owners_;
    do
      v150 = __ldaxr(v149);
    while (__stlxr(v150 - 1, v149));
    if (!v150)
    {
      ((void (*)(std::__shared_weak_count *))v193->__on_zero_shared)(v193);
      std::__shared_weak_count::__release_weak(v193);
    }
  }
  if (v194)
  {
    v151 = (unint64_t *)&v194->__shared_owners_;
    do
      v152 = __ldaxr(v151);
    while (__stlxr(v152 - 1, v151));
    if (!v152)
    {
      ((void (*)(std::__shared_weak_count *))v194->__on_zero_shared)(v194);
      std::__shared_weak_count::__release_weak(v194);
    }
  }
  (*(void (**)(char *, Espresso::ANECompilerEngine::compiler *, uint64_t *))(*((_QWORD *)this + 36) + 32))((char *)this + 288, a2, &v197);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v195);
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v197;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);

  if (SHIBYTE(v203.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v203.__r_.__value_.__l.__data_);
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v189;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v201;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  if (SHIBYTE(v200.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v200.__r_.__value_.__l.__data_);
  v153 = v210;
  if (v210)
  {
    v154 = (unint64_t *)&v210->__shared_owners_;
    do
      v155 = __ldaxr(v154);
    while (__stlxr(v155 - 1, v154));
    if (!v155)
    {
      ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
      std::__shared_weak_count::__release_weak(v153);
    }
  }
  v156 = v212;
  if (v212)
  {
    v157 = (unint64_t *)&v212->__shared_owners_;
    do
      v158 = __ldaxr(v157);
    while (__stlxr(v158 - 1, v157));
    if (!v158)
    {
      ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
      std::__shared_weak_count::__release_weak(v156);
    }
  }
  v159 = v214;
  if (v214)
  {
    v160 = (unint64_t *)&v214->__shared_owners_;
    do
      v161 = __ldaxr(v160);
    while (__stlxr(v161 - 1, v160));
    if (!v161)
    {
      ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
      std::__shared_weak_count::__release_weak(v159);
    }
  }
}

void sub_191391874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, void **a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,id a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,char a47,uint64_t a48,char a49)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a19);
  a19 = (void **)&a24;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100](&a19);
  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t(&a27);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a45);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a47);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a49);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::flatten_kernel::compile(Espresso::ANECompilerEngine::flatten_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
  Espresso::ANECompilerEngine::flatten_kernel::compile((Espresso::ANECompilerEngine::flatten_kernel *)((char *)this - 288), a2, a3);
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::flatten_kernel::~flatten_kernel(void **this)
{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 36);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
}

{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 36);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANECompilerEngine::reshape_kernel::~reshape_kernel(void **this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 40);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 40);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANECompilerEngine::reshape_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob((_QWORD *)(a1 + 320), a3, a4, a5);
}

uint64_t Espresso::ANECompilerEngine::reshape_kernel::is_valid_for_engine(uint64_t a1, int64x2_t **a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD **v8;
  uint64_t v9;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  Espresso::base_kernel::validate_for_engine_args_t *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  void *v29;
  unsigned int v30;
  std::__shared_weak_count *size;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  int64x2_t *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  int64x2_t *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t *v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  _QWORD *v64;
  int v65;
  _QWORD *v66;
  uint64_t v67;
  int64x2_t *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  unint64_t *v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  _QWORD *v80;
  int64x2_t *v81;
  unint64_t *v82;
  unint64_t v83;
  int64x2_t *v84[2];
  int64x2_t *v85;
  uint64_t v86;
  int64x2_t *v87;
  uint64_t v88;
  void *v89[2];
  char v90;
  int64x2_t *v91;
  uint64_t v92;
  int64x2_t *v93;
  std::__shared_weak_count *v94;
  char v95[8];
  __int128 v96;
  char v97;
  Espresso::base_kernel::validate_for_engine_args_t *v98;
  std::__shared_weak_count *v99;
  _OWORD v100[2];
  uint64_t v101;
  void *v102;
  void *v103;
  uint64_t v104;
  __int128 __p;
  __int128 v106;
  uint64_t v107;
  void *v108;
  void *v109;
  uint64_t v110;
  std::string v111;
  _BYTE v112[24];
  _BYTE v113[32];
  std::__shared_weak_count *v114;
  int64x2_t *v115;
  std::__shared_weak_count *v116;
  void **v117;

  v5 = **(_QWORD **)(a3 + 48) + 224 * *(_QWORD *)(a3 + 72);
  v6 = *(_QWORD *)(v5 + 136);
  v7 = *(_QWORD *)(v5 + 144);
  v8 = (_QWORD **)(v5 + 136);
  if (v7 - v6 == 24)
  {
    v9 = *(_QWORD *)a3;
    if (*(_QWORD *)(a3 + 8) == *(_QWORD *)a3)
      std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
    v11 = *(_OWORD *)(v9 + 16);
    v12 = *(_QWORD *)(v9 + 32);
    __p = *(_OWORD *)v9;
    v106 = v11;
    v107 = v12;
    v108 = 0;
    v109 = 0;
    v110 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v108, *(const void **)(v9 + 40), *(_QWORD *)(v9 + 48), (uint64_t)(*(_QWORD *)(v9 + 48) - *(_QWORD *)(v9 + 40)) >> 2);
    v13 = *(_QWORD *)(a3 + 24);
    if (*(_QWORD *)(a3 + 32) == v13)
      std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
    v14 = *(_OWORD *)(v13 + 16);
    v15 = *(_QWORD *)(v13 + 32);
    v100[0] = *(_OWORD *)v13;
    v100[1] = v14;
    v101 = v15;
    v102 = 0;
    v103 = 0;
    v104 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v102, *(const void **)(v13 + 40), *(_QWORD *)(v13 + 48), (uint64_t)(*(_QWORD *)(v13 + 48) - *(_QWORD *)(v13 + 40)) >> 2);
    v16 = *(_QWORD *)(a3 + 48);
    v98 = 0;
    v99 = 0;
    v17 = *(std::__shared_weak_count **)(v16 + 80);
    if (v17 && (v99 = std::__shared_weak_count::lock(v17)) != 0)
    {
      v18 = *(Espresso::base_kernel::validate_for_engine_args_t **)(v16 + 72);
      v98 = v18;
    }
    else
    {
      v18 = 0;
    }
    Espresso::ANECompilerEngine::ane_arch_allow_network_override((uint64_t)v18 + 472);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    v30 = Espresso::ANECompilerEngine::bottom_compute_path((Espresso::ANECompilerEngine *)a3, v98, 0);
    Espresso::ANECompilerEngine::ane_kernel::get_ane_validator((Espresso::ANECompilerEngine::ane_kernel *)&v111, (NSString *)(a1 + 320), v29);
    size = (std::__shared_weak_count *)v111.__r_.__value_.__l.__size_;
    if (v111.__r_.__value_.__l.__size_)
    {
      v32 = (unint64_t *)(v111.__r_.__value_.__l.__size_ + 8);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    if (v95[0])
      goto LABEL_32;
    v34 = (std::__shared_weak_count *)a2[1];
    v93 = *a2;
    v94 = v34;
    if (v34)
    {
      p_shared_owners = (unint64_t *)&v34->__shared_owners_;
      do
        v36 = __ldxr(p_shared_owners);
      while (__stxr(v36 + 1, p_shared_owners));
    }
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v111, &v96, a3, 1);
    Espresso::emit_kernel_validation_warning(&v93, (Espresso::base_kernel::validate_for_engine_warning_t *)&v111);
    v37 = v114;
    if (v114)
    {
      v38 = (unint64_t *)&v114->__shared_owners_;
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    v89[0] = v113;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v89);
    v89[0] = v112;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v89);
    if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v111.__r_.__value_.__l.__data_);
    v40 = v94;
    if (v94)
    {
      v41 = (unint64_t *)&v94->__shared_owners_;
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
    if ((_DWORD)__p != 1 || DWORD1(__p) != 1)
    {
      v44 = a2[1];
      v91 = *a2;
      v92 = (uint64_t)v44;
      if (v44)
      {
        v45 = &v44->u64[1];
        do
          v46 = __ldxr(v45);
        while (__stxr(v46 + 1, v45));
      }
      std::string::basic_string[abi:ne180100]<0>(v89, "Invalid input blob shape for resize/unflatten");
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v111, (__int128 *)v89, a3, 0);
      Espresso::emit_kernel_validation_warning(&v91, (Espresso::base_kernel::validate_for_engine_warning_t *)&v111);
      v47 = v114;
      if (v114)
      {
        v48 = (unint64_t *)&v114->__shared_owners_;
        do
          v49 = __ldaxr(v48);
        while (__stlxr(v49 - 1, v48));
        if (!v49)
        {
          ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
          std::__shared_weak_count::__release_weak(v47);
        }
      }
      v117 = (void **)v113;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v117);
      v117 = (void **)v112;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v117);
      if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v111.__r_.__value_.__l.__data_);
      if (v90 < 0)
        operator delete(v89[0]);
      v28 = v92;
      if (!v92)
        goto LABEL_116;
      v50 = (unint64_t *)(v92 + 8);
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      goto LABEL_113;
    }
    if (LODWORD(v100[0]) == 1 || SLODWORD(v100[0]) >= 9)
    {
      v53 = a2[1];
      v87 = *a2;
      v88 = (uint64_t)v53;
      if (v53)
      {
        v54 = &v53->u64[1];
        do
          v55 = __ldxr(v54);
        while (__stxr(v55 + 1, v54));
      }
      std::string::basic_string[abi:ne180100]<0>(v89, "Unflatten output width must be between 2 and 8");
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v111, (__int128 *)v89, a3, 0);
      Espresso::emit_kernel_validation_warning(&v87, (Espresso::base_kernel::validate_for_engine_warning_t *)&v111);
      v56 = v114;
      if (v114)
      {
        v57 = (unint64_t *)&v114->__shared_owners_;
        do
          v58 = __ldaxr(v57);
        while (__stlxr(v58 - 1, v57));
        if (!v58)
        {
          ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
          std::__shared_weak_count::__release_weak(v56);
        }
      }
      v117 = (void **)v113;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v117);
      v117 = (void **)v112;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v117);
      if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v111.__r_.__value_.__l.__data_);
      if (v90 < 0)
        operator delete(v89[0]);
      v28 = v88;
      if (!v88)
        goto LABEL_116;
      v59 = (unint64_t *)(v88 + 8);
      do
        v51 = __ldaxr(v59);
      while (__stlxr(v51 - 1, v59));
      goto LABEL_113;
    }
    v60 = *v8;
    v61 = *(_QWORD **)(a3 + 48);
    v62 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>((uint64_t)(v61 + 3), *v8);
    if (v61 + 4 != v62)
    {
      v63 = *v61 + 224 * v62[7];
      v64 = (_QWORD *)(v63 + 48);
      v65 = *(char *)(v63 + 71);
      if (v65 < 0)
      {
        if (v64[1] != 13)
        {
LABEL_98:
          v69 = a2[1];
          v85 = *a2;
          v86 = (uint64_t)v69;
          if (v69)
          {
            v70 = &v69->u64[1];
            do
              v71 = __ldxr(v70);
            while (__stxr(v71 + 1, v70));
          }
          std::string::basic_string[abi:ne180100]<0>(v89, "Reshape/unflatten only supported after inner product");
          Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v111, (__int128 *)v89, a3, 0);
          Espresso::emit_kernel_validation_warning(&v85, (Espresso::base_kernel::validate_for_engine_warning_t *)&v111);
          v72 = v114;
          if (v114)
          {
            v73 = (unint64_t *)&v114->__shared_owners_;
            do
              v74 = __ldaxr(v73);
            while (__stlxr(v74 - 1, v73));
            if (!v74)
            {
              ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
              std::__shared_weak_count::__release_weak(v72);
            }
          }
          v117 = (void **)v113;
          std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v117);
          v117 = (void **)v112;
          std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v117);
          if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v111.__r_.__value_.__l.__data_);
          if (v90 < 0)
            operator delete(v89[0]);
          v28 = v86;
          if (!v86)
            goto LABEL_116;
          v75 = (unint64_t *)(v86 + 8);
          do
            v51 = __ldaxr(v75);
          while (__stlxr(v51 - 1, v75));
LABEL_113:
          if (!v51)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v28 + 16))(v28);
            std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v28);
          }
          goto LABEL_115;
        }
        v64 = (_QWORD *)*v64;
      }
      else if (v65 != 13)
      {
        goto LABEL_98;
      }
      v66 = (_QWORD *)*v64;
      v67 = *(_QWORD *)((char *)v64 + 5);
      if (v66 != (_QWORD *)0x72705F72656E6E69 || v67 != 0x746375646F72705FLL)
        goto LABEL_98;
      v111.__r_.__value_.__r.__words[0] = (std::string::size_type)v60;
      v80 = std::__tree<std::__value_type<std::string,std::vector<unsigned long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<unsigned long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<unsigned long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v61 + 6), v60, (__int128 **)&v111);
      if (v80[8] - v80[7] < 0x10uLL)
      {
LABEL_32:
        v28 = 1;
LABEL_116:
        if (v97 < 0)
          operator delete((void *)v96);

        v76 = v99;
        if (v99)
        {
          v77 = (unint64_t *)&v99->__shared_owners_;
          do
            v78 = __ldaxr(v77);
          while (__stlxr(v78 - 1, v77));
          if (!v78)
          {
            ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
            std::__shared_weak_count::__release_weak(v76);
          }
        }
        if (v102)
        {
          v103 = v102;
          operator delete(v102);
        }
        if (v108)
        {
          v109 = v108;
          operator delete(v108);
        }
        return v28;
      }
      v81 = a2[1];
      v84[0] = *a2;
      v84[1] = v81;
      if (v81)
      {
        v82 = &v81->u64[1];
        do
          v83 = __ldxr(v82);
        while (__stxr(v83 + 1, v82));
      }
      std::string::basic_string[abi:ne180100]<0>(v89, "Reshape/unflatten output has more than one consumer");
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v111, (__int128 *)v89, a3, 0);
      Espresso::emit_kernel_validation_warning(v84, (Espresso::base_kernel::validate_for_engine_warning_t *)&v111);
      Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)&v111.__r_.__value_.__l.__data_);
      if (v90 < 0)
        operator delete(v89[0]);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v84);
    }
LABEL_115:
    v28 = 0;
    goto LABEL_116;
  }
  v19 = (std::__shared_weak_count *)a2[1];
  v115 = *a2;
  v116 = v19;
  if (v19)
  {
    v20 = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "Unsupported number of input blobs for reshape/unflatten");
  Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v111, &__p, a3, 0);
  Espresso::emit_kernel_validation_warning(&v115, (Espresso::base_kernel::validate_for_engine_warning_t *)&v111);
  v22 = v114;
  if (v114)
  {
    v23 = (unint64_t *)&v114->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  *(_QWORD *)&v100[0] = v113;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v100);
  *(_QWORD *)&v100[0] = v112;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v100);
  if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v111.__r_.__value_.__l.__data_);
  if (SBYTE7(v106) < 0)
    operator delete((void *)__p);
  v25 = v116;
  if (v116)
  {
    v26 = (unint64_t *)&v116->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  return 0;
}

void sub_19139244C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52)
{
  void *v52;
  uint64_t v53;

  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)(v53 - 200));
  if (a21 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  if (a32 < 0)
    operator delete(a27);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
  if (a40)
  {
    a41 = (uint64_t)a40;
    operator delete(a40);
  }
  if (a51)
  {
    a52 = (uint64_t)a51;
    operator delete(a51);
  }
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::reshape_kernel::compile(NSString *this, Espresso::ANECompilerEngine::compiler *a2, void **a3)
{
  std::__shared_weak_count *v4;
  const Espresso::net *v7;
  char *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  char *v12;
  std::__shared_weak_count *v13;
  void *v14;
  unint64_t *v15;
  unint64_t v16;
  unsigned __int8 *v17;
  char *v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unsigned int v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  __CFString *v27;
  void *v28;
  unsigned int *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  void *v54;
  __CFString *v55;
  int v56;
  const __CFString *v57;
  void *v58;
  void *v59;
  void *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  const char *v83;
  std::runtime_error *exception;
  void *v85;
  char *v86;
  Espresso::ANECompilerEngine::compiler *v87;
  void *v88;
  _QWORD v89[3];
  std::__shared_weak_count *v90;
  _QWORD v91[3];
  std::__shared_weak_count *v92;
  std::__shared_weak_count *v93;
  std::__shared_weak_count *v94;
  _QWORD v95[2];
  std::__shared_weak_count *v96;
  void *v97[2];
  char v98;
  _BYTE v99[16];
  void *__p;
  _QWORD v101[4];
  void *v102;
  char v103;
  id v104;
  __CFString *v105;
  id v106;
  uint64_t v107;
  char v108[8];
  void *v109;
  char v110;
  uint64_t v111;
  std::__shared_weak_count *v112;
  void *lpsrc;
  std::__shared_weak_count *v114;
  uint64_t v115;
  std::__shared_weak_count *v116;
  const Espresso::net *v117;
  std::__shared_weak_count *v118;
  std::__shared_weak_count **v119;
  char v120;
  std::string v121;
  _BYTE v122[16];
  void *v123;
  _QWORD v124[4];
  void *v125;
  char v126;
  id v127;
  __CFString *v128;
  id v129;
  uint64_t v130;
  _QWORD v131[2];

  v131[0] = *MEMORY[0x1E0C80C00];
  v117 = 0;
  v118 = 0;
  v4 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
  if (!v4
    || (v118 = std::__shared_weak_count::lock(v4)) == 0
    || (v7 = (const Espresso::net *)*((_QWORD *)a2 + 1), (v117 = v7) == 0))
  {
    v83 = "Inconsistent state: null network";
    goto LABEL_111;
  }
  if (!*((_QWORD *)v7 + 72))
  {
    v83 = "Inconsistent state: blob_storage";
LABEL_111:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v83);
  }
  v97[0] = a3[6];
  v8 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v7 + 136, (unsigned __int8 *)v97[0], (__int128 **)v97);
  v9 = (std::__shared_weak_count *)*((_QWORD *)v8 + 6);
  v115 = *((_QWORD *)v8 + 5);
  v116 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v87 = a2;
  v97[0] = a3;
  v12 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v7 + 136, (unsigned __int8 *)a3, (__int128 **)v97);
  v14 = (void *)*((_QWORD *)v12 + 5);
  v13 = (std::__shared_weak_count *)*((_QWORD *)v12 + 6);
  lpsrc = v14;
  v114 = v13;
  if (v13)
  {
    v15 = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v17 = (unsigned __int8 *)a3[6];
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a3[7] - v17) >> 3) >= 2)
    Espresso::throw_exception_selector<Espresso::unsupported_configuration_error>("Unsupported number of input blobs for reshape/unflatten");
  v97[0] = a3[6];
  v18 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v7 + 136, v17, (__int128 **)v97);
  v20 = *((_QWORD *)v18 + 5);
  v19 = (std::__shared_weak_count *)*((_QWORD *)v18 + 6);
  v111 = v20;
  v112 = v19;
  if (v19)
  {
    v21 = (unint64_t *)&v19->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  v23 = *((_DWORD *)a3 + 26);
  Espresso::ANECompilerEngine::ane_arch_allow_network_override((uint64_t)v7 + 472);
  v86 = (char *)(this + 40);
  v88 = (void *)objc_claimAutoreleasedReturnValue();
  Espresso::ANECompilerEngine::ane_kernel::get_ane_validator((Espresso::ANECompilerEngine::ane_kernel *)&v93, this + 40, v88);
  Espresso::abstract_blob_container::shape((char *)v97, (uint64_t)v14);
  Espresso::abstract_blob_container::shape((char *)&v121, v20);
  if (v123)
  {
    v124[0] = v123;
    operator delete(v123);
  }
  if (__p)
  {
    v101[0] = __p;
    operator delete(__p);
  }
  v24 = v94;
  if (v94)
  {
    v25 = (unint64_t *)&v94->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  if (v108[0])
  {
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t(v97, a3);
    v27 = v105;
    v105 = CFSTR("Reshape");

    v28 = (void *)objc_opt_new();
    v85 = lpsrc;
    v30 = v114;
    v95[1] = v29;
    v96 = v114;
    if (v114)
    {
      v31 = (unint64_t *)&v114->__shared_owners_;
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
    }
    v33 = v29[41];
    v34 = v29[42];
    v35 = v29[43];
    v36 = v29[44];
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v29[40]);
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v28, "setObject:forKeyedSubscript:", v37, CFSTR("ReshapedBatch"));

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v34);
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v28, "setObject:forKeyedSubscript:", v38, CFSTR("ReshapedDepth"));

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v33);
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v28, "setObject:forKeyedSubscript:", v39, CFSTR("ReshapedChannel"));

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v35);
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v28, "setObject:forKeyedSubscript:", v40, CFSTR("ReshapedHeight"));

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v36);
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v28, "setObject:forKeyedSubscript:", v41, CFSTR("ReshapedWidth"));

    objc_storeStrong(&v106, v28);
    Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t(&v121, (const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)v97);
    v128 = v105;
    v129 = v106;
    v130 = v107;
    v94 = 0;
    v95[0] = 0;
    v93 = 0;
    v119 = &v93;
    v120 = 0;
    v93 = (std::__shared_weak_count *)operator new(0x90uLL);
    v94 = v93;
    v95[0] = v93 + 6;
    v94 = (std::__shared_weak_count *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>,Espresso::ANECompilerEngine::compiler::unit_t const*,Espresso::ANECompilerEngine::compiler::unit_t const*,Espresso::ANECompilerEngine::compiler::unit_t*>((uint64_t)v95, (uint64_t)&v121, (uint64_t)v131, (uint64_t)v93);

    if (v126 < 0)
      operator delete(v125);
    v119 = (std::__shared_weak_count **)v124;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v119);
    v119 = (std::__shared_weak_count **)v122;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v119);
    if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v121.__r_.__value_.__l.__data_);
    v91[2] = v117;
    v92 = v118;
    if (v118)
    {
      v42 = (unint64_t *)&v118->__shared_owners_;
      do
        v43 = __ldxr(v42);
      while (__stxr(v43 + 1, v42));
    }
    v91[0] = v85;
    v91[1] = v30;
    if (v30)
    {
      v44 = (unint64_t *)&v30->__shared_owners_;
      do
        v45 = __ldxr(v44);
      while (__stxr(v45 + 1, v44));
    }
    Espresso::ANECompilerEngine::add_ane_scale_bias_unit<Espresso::ANECompilerEngine::reshape_kernel *>(this, v87, a3, (uint64_t)v91, (uint64_t *)&v93);
    if (v30)
    {
      v46 = (unint64_t *)&v30->__shared_owners_;
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    v48 = v92;
    if (v92)
    {
      v49 = (unint64_t *)&v92->__shared_owners_;
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v50 - 1, v49));
      if (!v50)
      {
        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
        std::__shared_weak_count::__release_weak(v48);
      }
    }
    (*(void (**)(char *, Espresso::ANECompilerEngine::compiler *, std::__shared_weak_count **))(*(_QWORD *)v86 + 32))(v86, v87, &v93);
    v121.__r_.__value_.__r.__words[0] = (std::string::size_type)&v93;
    std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&v121);
    v51 = v96;
    if (v96)
    {
      v52 = (unint64_t *)&v96->__shared_owners_;
      do
        v53 = __ldaxr(v52);
      while (__stlxr(v53 - 1, v52));
      if (!v53)
      {
        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
        std::__shared_weak_count::__release_weak(v51);
      }
    }

    if (v103 < 0)
      operator delete(v102);
    v121.__r_.__value_.__r.__words[0] = (std::string::size_type)v101;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v121);
    v121.__r_.__value_.__r.__words[0] = (std::string::size_type)v99;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v121);
    if (v98 < 0)
      operator delete(v97[0]);
  }
  else
  {
    v54 = (void *)objc_opt_new();
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t(v97, a3);
    v55 = v105;
    v105 = CFSTR("Unflatten");

    v56 = *((_DWORD *)this + 76);
    if (v56)
    {
      if (v56 != 1)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
        Espresso::unsupported_configuration_error::unsupported_configuration_error(exception);
      }
      v57 = CFSTR("NHWC");
    }
    else
    {
      v57 = CFSTR("NCHW");
    }
    objc_msgSend(v54, "setObject:forKeyedSubscript:", v57, CFSTR("Mode"));
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *((unsigned int *)this + 70));
    v58 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v54, "setObject:forKeyedSubscript:", v58, CFSTR("DestinationWidth"));

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *((unsigned int *)this + 71));
    v59 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v54, "setObject:forKeyedSubscript:", v59, CFSTR("DestinationHeight"));

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *((unsigned int *)this + 72));
    v60 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v54, "setObject:forKeyedSubscript:", v60, CFSTR("DestinationChannels"));

    objc_storeStrong(&v106, v54);
    Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t(&v121, (const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)v97);
    v128 = v105;
    v129 = v106;
    v130 = v107;
    v94 = 0;
    v95[0] = 0;
    v93 = 0;
    v119 = &v93;
    v120 = 0;
    v93 = (std::__shared_weak_count *)operator new(0x90uLL);
    v94 = v93;
    v95[0] = v93 + 6;
    v94 = (std::__shared_weak_count *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>,Espresso::ANECompilerEngine::compiler::unit_t const*,Espresso::ANECompilerEngine::compiler::unit_t const*,Espresso::ANECompilerEngine::compiler::unit_t*>((uint64_t)v95, (uint64_t)&v121, (uint64_t)v131, (uint64_t)v93);

    if (v126 < 0)
      operator delete(v125);
    v119 = (std::__shared_weak_count **)v124;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v119);
    v119 = (std::__shared_weak_count **)v122;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v119);
    if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v121.__r_.__value_.__l.__data_);
    v89[2] = v117;
    v90 = v118;
    if (v118)
    {
      v61 = (unint64_t *)&v118->__shared_owners_;
      do
        v62 = __ldxr(v61);
      while (__stxr(v62 + 1, v61));
    }
    v63 = v114;
    v89[0] = lpsrc;
    v89[1] = v114;
    if (v114)
    {
      v64 = (unint64_t *)&v114->__shared_owners_;
      do
        v65 = __ldxr(v64);
      while (__stxr(v65 + 1, v64));
    }
    Espresso::ANECompilerEngine::add_ane_scale_bias_unit<Espresso::ANECompilerEngine::reshape_kernel *>(this, a2, a3, (uint64_t)v89, (uint64_t *)&v93);
    if (v63)
    {
      v66 = (unint64_t *)&v63->__shared_owners_;
      do
        v67 = __ldaxr(v66);
      while (__stlxr(v67 - 1, v66));
      if (!v67)
      {
        ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
        std::__shared_weak_count::__release_weak(v63);
      }
    }
    v68 = v90;
    if (v90)
    {
      v69 = (unint64_t *)&v90->__shared_owners_;
      do
        v70 = __ldaxr(v69);
      while (__stlxr(v70 - 1, v69));
      if (!v70)
      {
        ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
        std::__shared_weak_count::__release_weak(v68);
      }
    }
    (*(void (**)(char *, Espresso::ANECompilerEngine::compiler *, std::__shared_weak_count **))(*(_QWORD *)v86 + 32))(v86, a2, &v93);
    v121.__r_.__value_.__r.__words[0] = (std::string::size_type)&v93;
    std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&v121);

    if (v103 < 0)
      operator delete(v102);
    v121.__r_.__value_.__r.__words[0] = (std::string::size_type)v101;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v121);
    v121.__r_.__value_.__r.__words[0] = (std::string::size_type)v99;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v121);
    if (v98 < 0)
      operator delete(v97[0]);

  }
  if (v110 < 0)
    operator delete(v109);

  v71 = v112;
  if (v112)
  {
    v72 = (unint64_t *)&v112->__shared_owners_;
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  v74 = v114;
  if (v114)
  {
    v75 = (unint64_t *)&v114->__shared_owners_;
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
  v77 = v116;
  if (v116)
  {
    v78 = (unint64_t *)&v116->__shared_owners_;
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 - 1, v78));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }
  v80 = v118;
  if (v118)
  {
    v81 = (unint64_t *)&v118->__shared_owners_;
    do
      v82 = __ldaxr(v81);
    while (__stlxr(v82 - 1, v81));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
  }
}

void sub_19139302C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,id a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *__p,uint64_t a47,int a48,__int16 a49,char a50,char a51,char a52,uint64_t a53,char a54,uint64_t a55,char a56,uint64_t a57,char a58)
{
  void *v58;
  void *v59;

  __cxa_free_exception(v58);
  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t(&a27);

  if (a51 < 0)
    operator delete(__p);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a52);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a54);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a56);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a58);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::reshape_kernel::compile(NSString *this, Espresso::ANECompilerEngine::compiler *a2, void **a3)
{
  Espresso::ANECompilerEngine::reshape_kernel::compile(this - 40, a2, a3);
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::reshape_kernel::~reshape_kernel(void **this)
{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 40);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
}

{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 40);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
  JUMPOUT(0x19401CD90);
}

void `anonymous namespace'::EligibleForPureReshape(uint64_t a1, const Espresso::net **a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, unsigned int a8)
{
  id v14;
  const Espresso::net *v15;
  _QWORD *v16;
  _QWORD *v17;
  int v18;
  std::__shared_weak_count *v19;
  const Espresso::net *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  __int128 v23;
  const void *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  const Espresso::net *v28;
  unint64_t *v29;
  unint64_t v30;
  __int128 v31;
  const void *v32;
  unint64_t *v33;
  unint64_t v34;
  __CFString *v35;
  __int128 v36;
  __int128 v37;
  int v38;
  std::string *v39;
  __int128 v40;
  void **v41;
  std::string::size_type v42;
  std::string *v43;
  std::string::size_type v44;
  char v45;
  uint64_t v46;
  void *v47[2];
  unsigned __int8 v48;
  std::string v49;
  std::string v50;
  _BYTE v51[40];
  _OWORD v52[2];
  uint64_t v53;
  void *v54;
  void *v55;
  uint64_t v56;
  const Espresso::net *v57;
  std::__shared_weak_count *v58;
  _DWORD v59[8];
  _OWORD v60[2];
  uint64_t v61;
  void *__p;
  void *v63;
  uint64_t v64;
  const Espresso::net *v65;
  std::__shared_weak_count *v66;
  _DWORD v67[8];
  uint64_t v68;
  uint64_t v69;
  __CFString *v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;
  _QWORD v77[3];

  v77[2] = *MEMORY[0x1E0C80C00];
  v14 = a5;
  if (*(_DWORD *)(a3 + 24))
  {
    *(_BYTE *)a1 = 0;
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 8), "reshape_kernel: Only FLATTEN_NCHW unsupported on this arch.");
    goto LABEL_38;
  }
  v15 = *a2;
  std::string::basic_string[abi:ne180100]<0>(&v70, "early_arch_extended_reshape");
  v16 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>((uint64_t)v15 + 472, &v70);
  if (SHIBYTE(v71) < 0)
    operator delete(v70);
  if ((_QWORD *)((char *)*a2 + 480) == v16)
    goto LABEL_37;
  v17 = v16 + 7;
  v18 = *((char *)v16 + 79);
  if (v18 < 0)
  {
    if (v16[8] == 1)
    {
      v17 = (_QWORD *)*v17;
      goto LABEL_11;
    }
LABEL_37:
    *(_BYTE *)a1 = 0;
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 8), "reshape_kernel: extended reshape on this architecture requires 'early_arch_extended_reshape' network property.");
    goto LABEL_38;
  }
  if (v18 != 1)
    goto LABEL_37;
LABEL_11:
  if (*(_BYTE *)v17 != 49)
    goto LABEL_37;
  if (*(_DWORD *)(a7 + 16) == *(_DWORD *)(a6 + 16) && *(_DWORD *)(a7 + 12) == *(_DWORD *)(a6 + 12))
  {
    ANECReshapeLayerDescInitialize();
    ANECTensorDescInitialize();
    v68 = 0;
    v69 = 0;
    v20 = *a2;
    v19 = (std::__shared_weak_count *)a2[1];
    v65 = *a2;
    v66 = v19;
    if (v19)
    {
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v22 = __ldxr(p_shared_owners);
      while (__stxr(v22 + 1, p_shared_owners));
    }
    v23 = *(_OWORD *)(a7 + 16);
    v60[0] = *(_OWORD *)a7;
    v60[1] = v23;
    v24 = *(const void **)(a7 + 40);
    v61 = *(_QWORD *)(a7 + 32);
    __p = 0;
    v63 = 0;
    v64 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v24, *(_QWORD *)(a7 + 48), (uint64_t)(*(_QWORD *)(a7 + 48) - (_QWORD)v24) >> 2);
    Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v67, v20, (const Espresso::layer_shape *)v60, 1);
    if (__p)
    {
      v63 = __p;
      operator delete(__p);
    }
    if (v19)
    {
      v25 = (unint64_t *)&v19->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    v28 = *a2;
    v27 = (std::__shared_weak_count *)a2[1];
    v57 = v28;
    v58 = v27;
    if (v27)
    {
      v29 = (unint64_t *)&v27->__shared_owners_;
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
    }
    v31 = *(_OWORD *)(a6 + 16);
    v52[0] = *(_OWORD *)a6;
    v52[1] = v31;
    v32 = *(const void **)(a6 + 40);
    v53 = *(_QWORD *)(a6 + 32);
    v54 = 0;
    v55 = 0;
    v56 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v54, v32, *(_QWORD *)(a6 + 48), (uint64_t)(*(_QWORD *)(a6 + 48) - (_QWORD)v32) >> 2);
    Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v59, v28, (const Espresso::layer_shape *)v52, 1);
    if (v54)
    {
      v55 = v54;
      operator delete(v54);
    }
    if (v27)
    {
      v33 = (unint64_t *)&v27->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
    if (a8 < 8 && ((0x97u >> a8) & 1) != 0)
    {
      v35 = off_1E2DD20A8[a8];
      *(_QWORD *)&v36 = v67[3];
      *((_QWORD *)&v36 + 1) = v67[4];
      v72 = v36;
      v70 = v35;
      v73 = v67[2];
      *(_QWORD *)&v36 = v67[0];
      *((_QWORD *)&v36 + 1) = v67[1];
      v71 = v36;
      *(_QWORD *)&v36 = v59[0];
      *((_QWORD *)&v36 + 1) = v59[1];
      v37 = v36;
      *(_QWORD *)&v36 = v59[3];
      *((_QWORD *)&v36 + 1) = v59[4];
      v74 = v37;
      v75 = v36;
      v76 = v59[2];
      if (Espresso::ANECompilerEngine::blob_shape_ane_compatible(v67, v14)
        && Espresso::ANECompilerEngine::blob_shape_ane_compatible(v59, v14))
      {
        v38 = ANECValidateReshapeLayer();
        if (v38)
        {
          Espresso::ANECompilerEngine::violations_from_alternates<ANECReshapeLayerDescAlternate>((uint64_t)v51, v68, v69);
          std::to_string(&v49, v38);
          v39 = std::string::insert(&v49, 0, "reshape_kernel: ANECValidateReshapeLayer failed with status ");
          v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
          v50.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v40;
          v39->__r_.__value_.__l.__size_ = 0;
          v39->__r_.__value_.__r.__words[2] = 0;
          v39->__r_.__value_.__r.__words[0] = 0;
          Espresso::ANECompilerEngine::format_validation_violations((uint64_t)v47, (uint64_t)v51);
          if ((v48 & 0x80u) == 0)
            v41 = v47;
          else
            v41 = (void **)v47[0];
          if ((v48 & 0x80u) == 0)
            v42 = v48;
          else
            v42 = (std::string::size_type)v47[1];
          v43 = std::string::append(&v50, (const std::string::value_type *)v41, v42);
          v44 = v43->__r_.__value_.__r.__words[0];
          v77[0] = v43->__r_.__value_.__l.__size_;
          *(_QWORD *)((char *)v77 + 7) = *(std::string::size_type *)((char *)&v43->__r_.__value_.__r.__words[1] + 7);
          v45 = HIBYTE(v43->__r_.__value_.__r.__words[2]);
          v43->__r_.__value_.__l.__size_ = 0;
          v43->__r_.__value_.__r.__words[2] = 0;
          v43->__r_.__value_.__r.__words[0] = 0;
          *(_BYTE *)a1 = 0;
          *(_QWORD *)(a1 + 23) = *(_QWORD *)((char *)v77 + 7);
          v46 = v77[0];
          *(_QWORD *)(a1 + 8) = v44;
          *(_QWORD *)(a1 + 16) = v46;
          *(_BYTE *)(a1 + 31) = v45;
          if ((char)v48 < 0)
            operator delete(v47[0]);
          if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v50.__r_.__value_.__l.__data_);
          if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v49.__r_.__value_.__l.__data_);
          std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)v51);
        }
        else
        {
          *(_BYTE *)a1 = 1;
          std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 8), "");
        }
      }
      else
      {
        *(_BYTE *)a1 = 0;
        std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 8), "reshape_kernel: tensor exceed ANE limits.");
      }
    }
    else
    {
      *(_BYTE *)a1 = 0;
      std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 8), "reshape_kernel: invalid compute path for input.");
    }
  }
  else
  {
    *(_BYTE *)a1 = 0;
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 8), "reshape_kernel: Reshape does not preserve n and seq, required on this arch.");
  }
LABEL_38:

}

void sub_191393774(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,char a54)
{
  void *v54;

  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::add_ane_scale_bias_unit<Espresso::ANECompilerEngine::reshape_kernel *>(_QWORD *a1, _BYTE *a2, id *a3, uint64_t a4, uint64_t *a5)
{
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  float v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  int *v30;
  _WORD *v31;
  int v32;
  __int128 v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  int *v46;
  _WORD *v47;
  int v48;
  int v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  void *v58;
  id v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  uint64_t weights_file_index;
  void *v65;
  void *v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  void *v72;
  void *v73;
  void *v74;
  uint64_t v75;
  void *v76;
  void *v77;
  uint64_t v78;
  const void **v79;
  uint64_t v80;
  char v81;
  std::string::size_type v82;
  uint64_t v83;
  uint64_t v84;
  unsigned __int8 *v85;
  unsigned __int8 *v86;
  const std::string::value_type *v87;
  __int128 v88;
  __CFString *v89;
  BOOL v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  unint64_t *v110;
  unint64_t v111;
  int *v112;
  int v113;
  uint64_t i;
  float v115;
  int v116;
  _WORD *v117;
  int v118;
  std::runtime_error *exception;
  int *v121;
  uint64_t j;
  int v123;
  float v124;
  float *v125;
  unsigned int v126;
  unsigned int v127;
  float v128;
  Espresso *v129;
  const char *v130;
  float v131;
  NSObject *v133;
  double v134;
  uint64_t v135;
  _WORD *v136;
  int v137;
  _QWORD v140[2];
  __int128 v141;
  uint64_t v142;
  std::__shared_weak_count *v143;
  uint64_t v144[2];
  uint64_t v145;
  std::__shared_weak_count *v146;
  uint64_t v147;
  std::__shared_weak_count *v148;
  uint64_t v149;
  std::__shared_weak_count *v150;
  unsigned int v151;
  unsigned int v152;
  uint64_t v153;
  std::__shared_weak_count *v154;
  void *v155;
  char v156;
  uint64_t v157;
  uint64_t v158;
  void *v159;
  char v160;
  id v161;
  id v162;
  id v163;
  uint64_t v164;
  _BYTE buf[18];
  __int16 v166;
  int v167;
  __int16 v168;
  double v169;
  std::vector<std::string> v170;
  void *__p;
  char v172;
  id v173;
  __CFString *v174;
  id v175;
  std::string __str;
  __int128 v177;
  uint64_t v178;

  v178 = *MEMORY[0x1E0C80C00];
  Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t((Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)&v155);
  v162 = 0;
  v163 = 0;
  v164 = 0x100000000;
  v10 = a1[48];
  v9 = (std::__shared_weak_count *)a1[49];
  v153 = v10;
  v154 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  if (v10 && !*(_BYTE *)((*(uint64_t (**)(_QWORD *))(a1[40] + 104))(a1 + 40) + 40))
  {
    v13 = *(float *)(*(_QWORD *)a4 + 112);
    v145 = v10;
    v146 = v9;
    if (v9)
    {
      v14 = (unint64_t *)&v9->__shared_owners_;
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    v16 = (std::__shared_weak_count *)a1[51];
    v144[0] = a1[50];
    v144[1] = (uint64_t)v16;
    if (v16)
    {
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    Espresso::ane_style_post_scale_bias((uint64_t)&v145, v144, (uint64_t)&v147, v13);
    if (v16)
    {
      v19 = (unint64_t *)&v16->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v21 = v146;
    if (v146)
    {
      v22 = (unint64_t *)&v146->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v24 = v153;
    v25 = *(unsigned int *)(v153 + 8);
    std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v142, 2 * v25, 1, 1, 1);
    v26 = (int)v25;
    v141 = 0uLL;
    v27 = v25;
    v28 = a1[50];
    if (v28)
      v27 = *(_DWORD *)(v28 + 8);
    if (!a2[384])
    {
      Espresso::blob<unsigned char,1>::make(&__str, 4 * v25);
      v112 = *(int **)(__str.__r_.__value_.__r.__words[0] + 16);
      v113 = v25 - 1;
      if ((int)v25 >= 1)
      {
        for (i = 0; i != v25; ++i)
        {
          v115 = *(float *)(*(_QWORD *)(v24 + 16) + i * 4);
          *(float *)&v116 = ldexp(1.0, -v151) * v115;
          v112[i] = v116;
        }
      }
      if ((_DWORD)v25)
      {
        v117 = *(_WORD **)(v142 + 16);
        do
        {
          v118 = *v112++;
          _S0 = v118;
          __asm { FCVT            H0, S0 }
          *v117++ = _S0;
          --v26;
        }
        while (v26);
      }
      v140[0] = 0;
      v140[1] = 0;
      if (a1[50])
      {
        Espresso::blob<unsigned char,1>::make(buf, 4 * v27);
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)v140, (__int128 *)buf);
        std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)buf);
        Espresso::blob<unsigned char,1>::make(buf, 2 * v27);
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)&v141, (__int128 *)buf);
        std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)buf);
        v121 = *(int **)(v140[0] + 16);
        if (v27 >= 1)
        {
          for (j = 0; j != v27; ++j)
          {
            if (v113 >= (int)j)
              v123 = j;
            else
              v123 = v113;
            v124 = *(float *)(*(_QWORD *)(v149 + 16) + 4 * j) * *(float *)(*(_QWORD *)(v147 + 16) + 4 * v123);
            v125 = (float *)&v121[j];
            *v125 = v124;
            v127 = v151;
            v126 = v152;
            v128 = ldexp(1.0, v152 - v151) * v124;
            *v125 = v128;
            v131 = ldexp(1.0, v127 - v126) * v128;
            if (v131 < -127.0 || v131 > 255.0)
            {
              Espresso::espresso_os_log_subsystem(v129, v130);
              v133 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v133, OS_LOG_TYPE_ERROR))
              {
                v134 = *(float *)&v121[j];
                *(_DWORD *)buf = 134218752;
                *(double *)&buf[4] = v131;
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v152;
                v166 = 1024;
                v167 = v151;
                v168 = 2048;
                v169 = v134;
                _os_log_error_impl(&dword_190DAF000, v133, OS_LOG_TYPE_ERROR, "[ANEC::add_ane_scale_bias_unit] Shifted bias overflowing shifted_b=%f acc_bias_shift=%d post_right_shift=%d anebias=%f", buf, 0x22u);
              }

            }
          }
        }
        if (v27)
        {
          v135 = v27;
          v136 = *(_WORD **)(v141 + 16);
          do
          {
            v137 = *v121++;
            _S0 = v137;
            __asm { FCVT            H0, S0 }
            *v136++ = _S0;
            --v135;
          }
          while (v135);
        }
      }
      exception = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
      Espresso::not_implemented_error::not_implemented_error(exception);
    }
    v29 = v152;
    if ((_DWORD)v25)
    {
      v30 = *(int **)(v147 + 16);
      v31 = *(_WORD **)(v142 + 16);
      do
      {
        v32 = *v30++;
        _S0 = v32;
        __asm { FCVT            H0, S0 }
        *v31++ = _S0;
        --v26;
      }
      while (v26);
    }
    if (v28)
    {
      std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(buf, 2 * v27, 1, 1, 1);
      v38 = *(_OWORD *)buf;
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = 0;
      v39 = (std::__shared_weak_count *)*((_QWORD *)&v141 + 1);
      v141 = v38;
      if (v39)
      {
        v40 = (unint64_t *)&v39->__shared_owners_;
        do
          v41 = __ldaxr(v40);
        while (__stlxr(v41 - 1, v40));
        if (!v41)
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
      }
      v42 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v43 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v44 = __ldaxr(v43);
        while (__stlxr(v44 - 1, v43));
        if (!v44)
        {
          ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
          std::__shared_weak_count::__release_weak(v42);
        }
      }
      if (v27)
      {
        v45 = v27;
        v46 = *(int **)(v149 + 16);
        v47 = *(_WORD **)(v141 + 16);
        do
        {
          v48 = *v46++;
          _S0 = v48;
          __asm { FCVT            H0, S0 }
          *v47++ = _S0;
          --v45;
        }
        while (v45);
      }
    }
    v50 = a2[552];
    v51 = v142;
    v52 = v143;
    if (v143)
    {
      v53 = (unint64_t *)&v143->__shared_owners_;
      do
        v54 = __ldxr(v53);
      while (__stxr(v54 + 1, v53));
    }
    v55 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128), *(const unsigned __int8 **)(v51 + 16), *(int *)(v51 + 8));
    if (v52)
    {
      v56 = (unint64_t *)&v52->__shared_owners_;
      do
        v57 = __ldaxr(v56);
      while (__stlxr(v57 - 1, v56));
      if (!v57)
      {
        ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
        std::__shared_weak_count::__release_weak(v52);
      }
    }
    v58 = (void *)objc_opt_new();
    if (a5 && a2[121])
    {
      v59 = *(id *)(*a5 + 128);

      v58 = v59;
    }
    v60 = (void *)objc_opt_new();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v25);
    v61 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v60, "setObject:forKeyedSubscript:", v61, CFSTR("ScaleCount"));

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v55);
    v62 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v60, "setObject:forKeyedSubscript:", v62, CFSTR("ScaleOffset"));

    v63 = (void *)MEMORY[0x1E0CB37E8];
    if (v50)
      weights_file_index = 0;
    else
    objc_msgSend(v63, "numberWithUnsignedLong:", weights_file_index);
    v65 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v60, "setObject:forKeyedSubscript:", v65, CFSTR("ScaleIndex"));

    objc_msgSend(v60, "setObject:forKeyedSubscript:", CFSTR("Float16"), CFSTR("ScaleType"));
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v151);
    v66 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v58, "setObject:forKeyedSubscript:", v66, CFSTR("ScaleShift"));

    if (a1[50])
    {
      if (*((_QWORD *)&v141 + 1))
      {
        v67 = (unint64_t *)(*((_QWORD *)&v141 + 1) + 8);
        do
          v68 = __ldxr(v67);
        while (__stxr(v68 + 1, v67));
      }
      v69 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128), *(const unsigned __int8 **)(v141 + 16), *(int *)(v141 + 8));
      if (*((_QWORD *)&v141 + 1))
      {
        v70 = (unint64_t *)(*((_QWORD *)&v141 + 1) + 8);
        do
          v71 = __ldaxr(v70);
        while (__stlxr(v71 - 1, v70));
        if (!v71)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v141 + 1) + 16))(*((_QWORD *)&v141 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v141 + 1));
        }
      }
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *(unsigned int *)(a1[50] + 8));
      v72 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v60, "setObject:forKeyedSubscript:", v72, CFSTR("BiasCount"));

      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v69);
      v73 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v60, "setObject:forKeyedSubscript:", v73, CFSTR("BiasOffset"));

      v74 = (void *)MEMORY[0x1E0CB37E8];
      if (v50)
        v75 = 0;
      else
      objc_msgSend(v74, "numberWithUnsignedLong:", v75);
      v76 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v60, "setObject:forKeyedSubscript:", v76, CFSTR("BiasIndex"));

      objc_msgSend(v60, "setObject:forKeyedSubscript:", CFSTR("Float16"), CFSTR("BiasType"));
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v29);
      v77 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v58, "setObject:forKeyedSubscript:", v77, CFSTR("BiasShift"));

    }
    objc_msgSend(v58, "setObject:forKeyedSubscript:", v60, CFSTR("BiasScaleGroupData"));
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)buf, a3);
    v78 = a5[1];
    if (v78 == *a5)
      goto LABEL_93;
    v79 = (const void **)(v78 - 144);
    v80 = *(unsigned __int8 *)(v78 - 121);
    v81 = v80;
    v82 = *(_QWORD *)(v78 - 136);
    if ((v80 & 0x80u) == 0)
      v83 = *(unsigned __int8 *)(v78 - 121);
    else
      v83 = *(_QWORD *)(v78 - 136);
    v84 = HIBYTE(v167);
    if (v167 < 0)
      v84 = *(_QWORD *)&buf[8];
    if (v83 != v84)
      goto LABEL_87;
    if (v167 >= 0)
      v85 = buf;
    else
      v85 = *(unsigned __int8 **)buf;
    if ((char)v80 < 0)
    {
      v87 = (const std::string::value_type *)*v79;
      if (memcmp(*v79, v85, *(_QWORD *)(v78 - 136)))
        goto LABEL_90;
    }
    else if ((_BYTE)v80)
    {
      v86 = (unsigned __int8 *)(v78 - 144);
      while (*v86 == *v85)
      {
        ++v86;
        ++v85;
        if (!--v80)
          goto LABEL_86;
      }
      goto LABEL_87;
    }
LABEL_86:
    std::string::append((std::string *)(v78 - 144), "__@pre_scale_bias");
    v81 = *(_BYTE *)(v78 - 121);
LABEL_87:
    if ((v81 & 0x80) == 0)
    {
      v88 = *(_OWORD *)v79;
      __str.__r_.__value_.__r.__words[2] = *(_QWORD *)(v78 - 128);
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v88;
      goto LABEL_91;
    }
    v87 = *(const std::string::value_type **)(v78 - 144);
    v82 = *(_QWORD *)(v78 - 136);
LABEL_90:
    std::string::__init_copy_ctor_external(&__str, v87, v82);
LABEL_91:
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v170, &__str, &v177, 1uLL);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
LABEL_93:
    v89 = v174;
    v174 = CFSTR("GOC");

    objc_storeStrong(&v175, v58);
    if (a2[121])
      v90 = a5 != 0;
    else
      v90 = 0;
    if (!v90)
    {
      if (a5)
      {
        v91 = a5[2];
        v92 = a5[1];
        if (v92 >= v91)
        {
          v94 = 0x8E38E38E38E38E39 * ((uint64_t)(v92 - *a5) >> 4);
          if (v94 + 1 > 0x1C71C71C71C71C7)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v95 = 0x8E38E38E38E38E39 * ((uint64_t)(v91 - *a5) >> 4);
          v96 = 2 * v95;
          if (2 * v95 <= v94 + 1)
            v96 = v94 + 1;
          if (v95 >= 0xE38E38E38E38E3)
            v97 = 0x1C71C71C71C71C7;
          else
            v97 = v96;
          *((_QWORD *)&v177 + 1) = a5 + 2;
          if (v97)
            v97 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v97);
          else
            v98 = 0;
          __str.__r_.__value_.__r.__words[0] = v97;
          __str.__r_.__value_.__l.__size_ = v97 + 144 * v94;
          __str.__r_.__value_.__r.__words[2] = __str.__r_.__value_.__l.__size_;
          *(_QWORD *)&v177 = v97 + 144 * v98;
          std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)__str.__r_.__value_.__l.__size_, (uint64_t)buf);
          __str.__r_.__value_.__r.__words[2] += 144;
          std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(a5, &__str);
          v93 = a5[1];
          std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&__str);
        }
        else
        {
          std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)a5[1], (uint64_t)buf);
          v93 = v92 + 144;
          a5[1] = v92 + 144;
        }
        a5[1] = v93;
      }
      else
      {
        Espresso::ANECompilerEngine::compiler::add_unit((Espresso::ANECompilerEngine::compiler *)a2, (const Espresso::ANECompilerEngine::compiler::unit_t *)buf);
      }
    }

    if (v172 < 0)
      operator delete(__p);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v170;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v168;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
    if (SHIBYTE(v167) < 0)
      operator delete(*(void **)buf);

    if (*((_QWORD *)&v141 + 1))
    {
      v99 = (unint64_t *)(*((_QWORD *)&v141 + 1) + 8);
      do
        v100 = __ldaxr(v99);
      while (__stlxr(v100 - 1, v99));
      if (!v100)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v141 + 1) + 16))(*((_QWORD *)&v141 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v141 + 1));
      }
    }
    v101 = v143;
    if (v143)
    {
      v102 = (unint64_t *)&v143->__shared_owners_;
      do
        v103 = __ldaxr(v102);
      while (__stlxr(v103 - 1, v102));
      if (!v103)
      {
        ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
        std::__shared_weak_count::__release_weak(v101);
      }
    }
    v104 = v150;
    if (v150)
    {
      v105 = (unint64_t *)&v150->__shared_owners_;
      do
        v106 = __ldaxr(v105);
      while (__stlxr(v106 - 1, v105));
      if (!v106)
      {
        ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
        std::__shared_weak_count::__release_weak(v104);
      }
    }
    v107 = v148;
    if (v148)
    {
      v108 = (unint64_t *)&v148->__shared_owners_;
      do
        v109 = __ldaxr(v108);
      while (__stlxr(v109 - 1, v108));
      if (!v109)
      {
        ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
        std::__shared_weak_count::__release_weak(v107);
      }
    }
    v9 = v154;
  }
  if (v9)
  {
    v110 = (unint64_t *)&v9->__shared_owners_;
    do
      v111 = __ldaxr(v110);
    while (__stlxr(v111 - 1, v110));
    if (!v111)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }

  if (v160 < 0)
    operator delete(v159);
  *(_QWORD *)buf = &v158;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(_QWORD *)buf = &v157;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (v156 < 0)
    operator delete(v155);
}

void sub_1913944B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,id a35)
{
  uint64_t v35;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v35 - 160);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a30);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t(&a35);
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::violations_from_alternates<ANECReshapeLayerDescAlternate>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  CFTypeRef *v7;
  unint64_t *v8;
  unint64_t v9;
  CFTypeRef *v10;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a2)
  {
    v6 = 0;
    v7 = (CFTypeRef *)(a3 + 8);
    do
    {
      v8 = (unint64_t *)(a3 + 624 * v6);
      if (*v8)
      {
        v9 = 0;
        v10 = v7;
        do
        {
          std::__hash_table<__CFString const*,Espresso::ANECompilerEngine::CFStringHasher,Espresso::ANECompilerEngine::CFStringEqualWrapper,std::allocator<__CFString const*>>::__emplace_unique_key_args<__CFString const*,__CFString const* const&>((float *)a1, v10, v10);
          ++v9;
          ++v10;
        }
        while (v9 < *v8);
      }
      ++v6;
      v7 += 78;
    }
    while (v6 != a2);
  }
}

void sub_1913946EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::batchnorm_kernel::~batchnorm_kernel(Espresso::ANECompilerEngine::batchnorm_kernel *this)
{
  void **v2;

  *(_QWORD *)this = &off_1E2D76880;
  v2 = (void **)((char *)this + 400);
  *((_QWORD *)this + 50) = &unk_1E2D76A38;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 616);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);
  Espresso::generic_batchnorm_kernel::~generic_batchnorm_kernel(this);
}

{
  void **v2;

  *(_QWORD *)this = &off_1E2D76880;
  v2 = (void **)((char *)this + 400);
  *((_QWORD *)this + 50) = &unk_1E2D76A38;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 616);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);
  Espresso::generic_batchnorm_kernel::~generic_batchnorm_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANECompilerEngine::batchnorm_kernel::__set_weight_raw_blob(_QWORD *a1, uint64_t a2, unsigned __int8 **a3, void *a4, unint64_t a5, uint64_t *a6)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  double v15;
  double v16;
  int32x2_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20[2];
  __int128 v21[2];
  void *__p;
  void *v23;

  Espresso::generic_batchnorm_kernel::__set_weight_raw_blob((uint64_t)a1, a2, a3, a4, a5, a6);
  (*(void (**)(__int128 *__return_ptr, _QWORD *))(a1[50] + 128))(v21, a1 + 50);
  v11 = (std::__shared_weak_count *)a1[2];
  v20[0] = a1[1];
  v20[1] = (uint64_t)v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  v14 = (*(uint64_t (**)(_QWORD *))(a1[50] + 136))(a1 + 50);
  Espresso::set_conv_quantized_weight_helper(v15, v16, v17, v14, a3, (char *)a4, a5, a6, (uint64_t)(a1 + 48), v21, v20, v14, 1);
  if (v11)
  {
    v18 = (unint64_t *)&v11->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
  {
    v23 = __p;
    operator delete(__p);
  }
  Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob(a1 + 50, (uint64_t *)a3, a4, a5);
}

void sub_1913948C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t Espresso::ANECompilerEngine::batchnorm_kernel::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  if (Espresso::generic_batchnorm_kernel::supports_weight_key(a1, a2)
    || Espresso::weight_key_supported_by_conv_quantized_weights_helper(a2, 1))
  {
    return 1;
  }
  else
  {
    return Espresso::ANECompilerEngine::ane_kernel::supports_weight_key(a2);
  }
}

_QWORD *Espresso::ANECompilerEngine::batchnorm_kernel::set_batchnorm_params(uint64_t a1, uint64_t *a2)
{
  return std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 616), *a2, a2[1]);
}

uint64_t Espresso::ANECompilerEngine::batchnorm_kernel::get_batchnorm_params@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 624);
  *a2 = *(_QWORD *)(this + 616);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

void Espresso::ANECompilerEngine::batchnorm_kernel::compile(Espresso::ANECompilerEngine::batchnorm_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  char *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  char *v12;
  float *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  int v17;
  NSString *v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  char *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  void *v30;
  void *v31;
  void *v37;
  __CFString *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  std::string *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  unsigned int *v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  float v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  int v61;
  unint64_t *v62;
  unint64_t v63;
  __int128 v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  std::string::size_type v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  uint64_t v85;
  void *v86;
  void *v87;
  void *v88;
  void *v89;
  uint64_t weights_file_index;
  void *v91;
  void *v92;
  __CFString *v93;
  std::string *v94;
  std::string *v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  void *v100;
  void *v101;
  void *v102;
  void *v103;
  uint64_t v104;
  void *v105;
  void *v106;
  __CFString *v107;
  std::string *v108;
  std::string *v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  Espresso *v114;
  const char *v115;
  NSObject *v116;
  void *v117;
  __CFString *v118;
  std::string *v119;
  std::string *v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  void *v125;
  void *v126;
  void *v127;
  uint64_t v128;
  void *v129;
  __CFString *v130;
  std::string *v131;
  std::string *v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  uint64_t v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  std::__shared_weak_count *size;
  unint64_t *v147;
  unint64_t v148;
  unint64_t *v149;
  unint64_t v150;
  float *v151;
  unint64_t *v152;
  unint64_t v153;
  std::__shared_weak_count *v154;
  std::string::size_type v155;
  unint64_t *v156;
  unint64_t v157;
  float v158;
  unint64_t *v159;
  unint64_t v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  unint64_t *v164;
  unint64_t v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  std::string::size_type v169;
  uint64_t v170;
  uint64_t v171;
  int v172;
  uint64_t v173;
  int v174;
  int *v175;
  _WORD *v176;
  int v177;
  __int128 v179;
  std::__shared_weak_count *v180;
  unint64_t *v181;
  unint64_t v182;
  std::__shared_weak_count *v183;
  unint64_t *v184;
  unint64_t v185;
  uint64_t v186;
  int *v187;
  _WORD *v188;
  int v189;
  int v191;
  uint64_t v192;
  std::__shared_weak_count *v193;
  unint64_t *v194;
  unint64_t v195;
  uint64_t v196;
  unint64_t *v197;
  unint64_t v198;
  void *v199;
  id v200;
  void *v201;
  void *v202;
  void *v203;
  void *v204;
  uint64_t v205;
  void *v206;
  void *v207;
  __int128 v208;
  unint64_t *v209;
  unint64_t v210;
  uint64_t v211;
  unint64_t *v212;
  unint64_t v213;
  void *v214;
  void *v215;
  void *v216;
  uint64_t v217;
  void *v218;
  void *v219;
  std::string *v220;
  std::string *v221;
  uint64_t v222;
  char v223;
  std::string::size_type v224;
  std::string::size_type v225;
  uint64_t v226;
  unsigned __int8 *v227;
  std::string *v228;
  const std::string::value_type *data;
  __int128 v230;
  __CFString *v231;
  std::string *v232;
  std::string *v233;
  unint64_t v234;
  unint64_t v235;
  unint64_t v236;
  uint64_t v237;
  std::__shared_weak_count *v238;
  unint64_t *v239;
  unint64_t v240;
  std::__shared_weak_count *v241;
  unint64_t *v242;
  unint64_t v243;
  std::__shared_weak_count *v244;
  unint64_t *v245;
  unint64_t v246;
  std::__shared_weak_count *v247;
  unint64_t *v248;
  unint64_t v249;
  unint64_t *v250;
  unint64_t v251;
  unint64_t *v252;
  unint64_t v253;
  unint64_t *v254;
  unint64_t v255;
  std::__shared_weak_count *v256;
  unint64_t *v257;
  unint64_t v258;
  std::__shared_weak_count *v259;
  unint64_t *v260;
  unint64_t v261;
  std::__shared_weak_count *v262;
  unint64_t *v263;
  unint64_t v264;
  const char *v265;
  const char *v266;
  int *v267;
  uint64_t i;
  float v269;
  int v270;
  _WORD *v271;
  int v272;
  std::runtime_error *exception;
  int *v275;
  uint64_t j;
  int v277;
  int v278;
  int v279;
  unsigned int v280;
  int v281;
  Espresso *v282;
  const char *v283;
  float v284;
  NSObject *v286;
  double v287;
  uint64_t v288;
  _WORD *v289;
  int v290;
  uint64_t v292;
  unsigned int v293;
  Espresso::ANECompilerEngine *v294;
  std::__shared_weak_count *v295;
  std::__shared_weak_count *v296;
  _QWORD v297[2];
  uint64_t v298;
  std::string *v299;
  unint64_t v300;
  float *v301;
  std::__shared_weak_count *v302;
  uint64_t v303;
  std::__shared_weak_count *v304;
  uint64_t v305;
  std::__shared_weak_count *v306;
  __int128 v307;
  uint64_t v308;
  std::__shared_weak_count *v309;
  __int128 v310;
  uint64_t v311;
  std::__shared_weak_count *v312;
  uint64_t v313[2];
  std::string::size_type __C;
  std::__shared_weak_count *v315;
  __int128 v316;
  uint64_t v317;
  std::__shared_weak_count *v318;
  unsigned int v319;
  int v320;
  std::string::size_type v321;
  std::__shared_weak_count *v322;
  uint8_t buf[8];
  char v324;
  _BYTE v325[24];
  _BYTE v326[32];
  void *__p;
  char v328;
  id v329;
  __CFString *v330;
  id v331[2];
  _BYTE v332[24];
  __int128 v333;
  std::vector<std::string> v334;
  void *v335;
  char v336;
  id v337;
  __CFString *v338;
  id v339;
  std::string __str;
  __int128 v341;
  uint64_t v342;

  v342 = *MEMORY[0x1E0C80C00];
  v305 = 0;
  v306 = 0;
  v4 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
  if (!v4 || (v306 = std::__shared_weak_count::lock(v4)) == 0 || (v7 = *((_QWORD *)a2 + 1), (v305 = v7) == 0))
  {
    v265 = "Inconsistent state: null network";
    goto LABEL_372;
  }
  if (!*(_QWORD *)(v7 + 576))
  {
    v265 = "Inconsistent state: blob_storage";
LABEL_372:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v265);
  }
  *(_QWORD *)buf = *((_QWORD *)a3 + 6);
  v8 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7 + 136, *(unsigned __int8 **)buf, (__int128 **)buf);
  v9 = (std::__shared_weak_count *)*((_QWORD *)v8 + 6);
  v303 = *((_QWORD *)v8 + 5);
  v304 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  *(_QWORD *)buf = a3;
  v12 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7 + 136, (unsigned __int8 *)a3, (__int128 **)buf);
  v13 = (float *)*((_QWORD *)v12 + 5);
  v14 = (std::__shared_weak_count *)*((_QWORD *)v12 + 6);
  v301 = v13;
  v302 = v14;
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v17 = *((unsigned __int8 *)a2 + 552);
  v298 = 0;
  v299 = 0;
  v300 = 0;
  Espresso::ANECompilerEngine::ane_arch_allow_network_override(v7 + 472);
  v294 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
  if (*((_DWORD *)this + 77)
    && *((_DWORD *)this + 78) == 1
    && (Espresso::ANECompilerEngine::is_mix(v294, v18) & 1) == 0)
  {
    v316 = 0uLL;
    v19 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
    if (v19
      && (*((_QWORD *)&v316 + 1) = std::__shared_weak_count::lock(v19)) != 0
      && (v20 = *((_QWORD *)a2 + 1), (*(_QWORD *)&v316 = v20) != 0))
    {
      if (*(_QWORD *)(v20 + 576))
      {
        v21 = v20 + 136;
        *(_QWORD *)buf = *((_QWORD *)a3 + 6);
        v22 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v20 + 136, *(unsigned __int8 **)buf, (__int128 **)buf);
        v23 = (std::__shared_weak_count *)*((_QWORD *)v22 + 6);
        v321 = *((_QWORD *)v22 + 5);
        v322 = v23;
        if (v23)
        {
          v24 = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
        }
        *(_QWORD *)buf = a3;
        v26 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v21, (unsigned __int8 *)a3, (__int128 **)buf);
        v27 = (std::__shared_weak_count *)*((_QWORD *)v26 + 6);
        __C = *((_QWORD *)v26 + 5);
        v315 = v27;
        if (v27)
        {
          v28 = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldxr(v28);
          while (__stxr(v29 + 1, v28));
        }
        v30 = (void *)objc_opt_new();
        if (*((_DWORD *)this + 94) == 3)
        {
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)CFSTR("Width");
          __str.__r_.__value_.__l.__size_ = (std::string::size_type)CFSTR("Height");
          __str.__r_.__value_.__r.__words[2] = (std::string::size_type)CFSTR("Depth");
          objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &__str, 3);
        }
        else
        {
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)CFSTR("Width");
          __str.__r_.__value_.__l.__size_ = (std::string::size_type)CFSTR("Height");
          objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &__str, 2);
        }
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v30, "setObject:forKeyedSubscript:", v31, CFSTR("Dimension"));

        _S0 = *((_DWORD *)this + 79);
        __asm { FCVT            H0, S0 }
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithShort:", (__int16)_S0);
        v37 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v30, "setObject:forKeyedSubscript:", v37, CFSTR("Epsilon"));

        Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)buf, (id *)a3);
        v38 = v330;
        v330 = CFSTR("InstanceNormalization");

        objc_storeStrong(v331, v30);
        v39 = 0x8E38E38E38E38E39 * (((uint64_t)v299 - v298) >> 4);
        if (v39 + 1 > 0x1C71C71C71C71C7)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v40 = 0x1C71C71C71C71C72 * ((uint64_t)(v300 - v298) >> 4);
        if (v40 <= v39 + 1)
          v40 = v39 + 1;
        if (0x8E38E38E38E38E39 * ((uint64_t)(v300 - v298) >> 4) >= 0xE38E38E38E38E3)
          v41 = 0x1C71C71C71C71C7;
        else
          v41 = v40;
        *((_QWORD *)&v333 + 1) = &v300;
        if (v41)
          v41 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v41);
        else
          v42 = 0;
        *(_QWORD *)v332 = v41;
        *(_QWORD *)&v332[8] = v41 + 16 * (((uint64_t)v299 - v298) >> 4);
        *(_QWORD *)&v332[16] = *(_QWORD *)&v332[8];
        *(_QWORD *)&v333 = v41 + 144 * v42;
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(*(std::string **)&v332[8], (uint64_t)buf);
        *(_QWORD *)&v332[16] += 144;
        std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v298, v332);
        v43 = v299;
        std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)v332);
        v299 = v43;

        if (v328 < 0)
          operator delete(__p);
        *(_QWORD *)v332 = v326;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v332);
        *(_QWORD *)v332 = v325;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v332);
        if (v324 < 0)
          operator delete(*(void **)buf);

        if (v27)
        {
          v44 = (unint64_t *)&v27->__shared_owners_;
          do
            v45 = __ldaxr(v44);
          while (__stlxr(v45 - 1, v44));
          if (!v45)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        v46 = v322;
        if (v322)
        {
          v47 = (unint64_t *)&v322->__shared_owners_;
          do
            v48 = __ldaxr(v47);
          while (__stlxr(v48 - 1, v47));
          if (!v48)
          {
            ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
            std::__shared_weak_count::__release_weak(v46);
          }
        }
        v49 = (std::__shared_weak_count *)*((_QWORD *)&v316 + 1);
        if (*((_QWORD *)&v316 + 1))
        {
          v50 = (unint64_t *)(*((_QWORD *)&v316 + 1) + 8);
          do
            v51 = __ldaxr(v50);
          while (__stlxr(v51 - 1, v50));
          if (!v51)
          {
            ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
            std::__shared_weak_count::__release_weak(v49);
          }
        }
        goto LABEL_55;
      }
      v266 = "Inconsistent state: blob_storage";
    }
    else
    {
      v266 = "Inconsistent state: null network";
    }
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v266);
  }
LABEL_55:
  if (v14)
  {
    v53 = (unint64_t *)&v14->__shared_owners_;
    do
      v54 = __ldxr(v53);
    while (__stxr(v54 + 1, v53));
    v55 = v52[41];
    do
      v56 = __ldaxr(v53);
    while (__stlxr(v56 - 1, v53));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  else
  {
    v55 = v52[41];
  }
  if (*((_QWORD *)this + 77))
  {
    v57 = *((float *)this + 93);
    v58 = (std::__shared_weak_count *)*((_QWORD *)this + 78);
    v297[0] = *((_QWORD *)this + 77);
    v297[1] = v58;
    if (v58)
    {
      v59 = (unint64_t *)&v58->__shared_owners_;
      do
        v60 = __ldxr(v59);
      while (__stxr(v60 + 1, v59));
    }
    v61 = v57 > 0.00000001 && *((_BYTE *)a2 + 384) != 0;
    Espresso::ANECompilerEngine::batchnorm_kernel::batchnorm_to_scale_bias(&__str, (uint64_t)v297, v55, v61, *((_DWORD *)this + 78) == 1, *((float *)this + 93));
    if (v58)
    {
      v62 = (unint64_t *)&v58->__shared_owners_;
      do
        v63 = __ldaxr(v62);
      while (__stlxr(v63 - 1, v62));
      if (!v63)
      {
        ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
        std::__shared_weak_count::__release_weak(v58);
      }
    }
    v64 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
    v316 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
    if (__str.__r_.__value_.__l.__size_)
    {
      v65 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
      do
        v66 = __ldxr(v65);
      while (__stxr(v66 + 1, v65));
    }
    v321 = __str.__r_.__value_.__r.__words[2];
    v322 = (std::__shared_weak_count *)v341;
    if ((_QWORD)v341)
    {
      v67 = (unint64_t *)(v341 + 8);
      do
        v68 = __ldxr(v67);
      while (__stxr(v68 + 1, v67));
    }
    if (*((_QWORD *)&v64 + 1))
    {
      v69 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
      do
        v70 = __ldxr(v69);
      while (__stxr(v70 + 1, v69));
    }
    v71 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler *)((char *)a2 + 128), *(const unsigned __int8 **)(v64 + 16), *(int *)(v64 + 8));
    if (*((_QWORD *)&v64 + 1))
    {
      v72 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
      do
        v73 = __ldaxr(v72);
      while (__stlxr(v73 - 1, v72));
      if (!v73)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v64 + 1) + 16))(*((_QWORD *)&v64 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v64 + 1));
      }
    }
    v74 = v321;
    v75 = v322;
    if (v322)
    {
      v76 = (unint64_t *)&v322->__shared_owners_;
      do
        v77 = __ldxr(v76);
      while (__stxr(v77 + 1, v76));
    }
    v78 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler *)((char *)a2 + 128), *(const unsigned __int8 **)(v74 + 16), *(int *)(v74 + 8));
    if (v75)
    {
      v79 = (unint64_t *)&v75->__shared_owners_;
      do
        v80 = __ldaxr(v79);
      while (__stlxr(v80 - 1, v79));
      if (!v80)
      {
        ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
        std::__shared_weak_count::__release_weak(v75);
      }
    }
    if (v57 > 0.00000001)
    {
      v86 = (void *)objc_opt_new();
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v55);
      v87 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v86, "setObject:forKeyedSubscript:", v87, CFSTR("BiasCount"));

      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v78);
      v88 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v86, "setObject:forKeyedSubscript:", v88, CFSTR("BiasOffset"));

      v89 = (void *)MEMORY[0x1E0CB37E8];
      if (v17)
        weights_file_index = 0;
      else
      objc_msgSend(v89, "numberWithUnsignedLong:", weights_file_index);
      v100 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v86, "setObject:forKeyedSubscript:", v100, CFSTR("BiasIndex"));

      objc_msgSend(v86, "setObject:forKeyedSubscript:", CFSTR("Float32"), CFSTR("BiasType"));
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v55);
      v101 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v86, "setObject:forKeyedSubscript:", v101, CFSTR("ScaleCount"));

      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v71);
      v102 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v86, "setObject:forKeyedSubscript:", v102, CFSTR("ScaleOffset"));

      v103 = (void *)MEMORY[0x1E0CB37E8];
      if (v17)
        v104 = 0;
      else
      objc_msgSend(v103, "numberWithUnsignedLong:", v104);
      v105 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v86, "setObject:forKeyedSubscript:", v105, CFSTR("ScaleIndex"));

      objc_msgSend(v86, "setObject:forKeyedSubscript:", CFSTR("Float32"), CFSTR("ScaleType"));
      v106 = (void *)objc_opt_new();
      objc_msgSend(v106, "setObject:forKeyedSubscript:", v86, CFSTR("BiasScaleGroupData"));
      Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)buf, (id *)a3);
      v107 = v330;
      v330 = CFSTR("GOC");

      objc_storeStrong(v331, v106);
      v108 = v299;
      if ((unint64_t)v299 >= v300)
      {
        v110 = 0x8E38E38E38E38E39 * (((uint64_t)v299 - v298) >> 4);
        if (v110 + 1 > 0x1C71C71C71C71C7)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v111 = 0x1C71C71C71C71C72 * ((uint64_t)(v300 - v298) >> 4);
        if (v111 <= v110 + 1)
          v111 = v110 + 1;
        if (0x8E38E38E38E38E39 * ((uint64_t)(v300 - v298) >> 4) >= 0xE38E38E38E38E3)
          v112 = 0x1C71C71C71C71C7;
        else
          v112 = v111;
        *((_QWORD *)&v333 + 1) = &v300;
        if (v112)
          v112 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v112);
        else
          v113 = 0;
        *(_QWORD *)v332 = v112;
        *(_QWORD *)&v332[8] = v112 + 144 * v110;
        *(_QWORD *)&v332[16] = *(_QWORD *)&v332[8];
        *(_QWORD *)&v333 = v112 + 144 * v113;
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(*(std::string **)&v332[8], (uint64_t)buf);
        *(_QWORD *)&v332[16] += 144;
        std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v298, v332);
        v109 = v299;
        std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)v332);
      }
      else
      {
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v299, (uint64_t)buf);
        v109 = v108 + 6;
      }
      v299 = v109;

      if (v328 < 0)
        operator delete(__p);
      *(_QWORD *)v332 = v326;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v332);
      *(_QWORD *)v332 = v325;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v332);
      if (v324 < 0)
        operator delete(*(void **)buf);
    }
    else
    {
      v81 = (void *)objc_opt_new();
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v55);
      v82 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v81, "setObject:forKeyedSubscript:", v82, CFSTR("ScaleCount"));

      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v71);
      v83 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v81, "setObject:forKeyedSubscript:", v83, CFSTR("ScaleOffset"));

      v84 = (void *)MEMORY[0x1E0CB37E8];
      if (v17)
        v85 = 0;
      else
      objc_msgSend(v84, "numberWithUnsignedLong:", v85);
      v91 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v81, "setObject:forKeyedSubscript:", v91, CFSTR("ScaleIndex"));

      objc_msgSend(v81, "setObject:forKeyedSubscript:", CFSTR("Float32"), CFSTR("ScaleType"));
      v92 = (void *)objc_opt_new();
      objc_msgSend(v92, "setObject:forKeyedSubscript:", v81, CFSTR("BiasScaleGroupData"));
      Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)buf, (id *)a3);
      v93 = v330;
      v330 = CFSTR("GOC");

      objc_storeStrong(v331, v92);
      v94 = v299;
      if ((unint64_t)v299 >= v300)
      {
        v96 = 0x8E38E38E38E38E39 * (((uint64_t)v299 - v298) >> 4);
        if (v96 + 1 > 0x1C71C71C71C71C7)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v97 = 0x1C71C71C71C71C72 * ((uint64_t)(v300 - v298) >> 4);
        if (v97 <= v96 + 1)
          v97 = v96 + 1;
        if (0x8E38E38E38E38E39 * ((uint64_t)(v300 - v298) >> 4) >= 0xE38E38E38E38E3)
          v98 = 0x1C71C71C71C71C7;
        else
          v98 = v97;
        *((_QWORD *)&v333 + 1) = &v300;
        if (v98)
          v98 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v98);
        else
          v99 = 0;
        *(_QWORD *)v332 = v98;
        *(_QWORD *)&v332[8] = v98 + 144 * v96;
        *(_QWORD *)&v332[16] = *(_QWORD *)&v332[8];
        *(_QWORD *)&v333 = v98 + 144 * v99;
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(*(std::string **)&v332[8], (uint64_t)buf);
        *(_QWORD *)&v332[16] += 144;
        std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v298, v332);
        v95 = v299;
        std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)v332);
      }
      else
      {
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v299, (uint64_t)buf);
        v95 = v94 + 6;
      }
      v299 = v95;

      if (v328 < 0)
        operator delete(__p);
      *(_QWORD *)v332 = v326;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v332);
      *(_QWORD *)v332 = v325;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v332);
      if (v324 < 0)
        operator delete(*(void **)buf);

      LODWORD(__C) = 0;
      vDSP_minmgv(*(const float **)(v316 + 16), 1, (float *)&__C, (unint64_t)*(int *)(v316 + 8) >> 2);
      if (*(float *)&__C < 0.0001)
      {
        Espresso::espresso_os_log_subsystem(v114, v115);
        v116 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v116, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_debug_impl(&dword_190DAF000, v116, OS_LOG_TYPE_DEBUG, "Applying workaround for rdar://problem/48794950", buf, 2u);
        }

        v117 = (void *)objc_opt_new();
        objc_msgSend(v117, "setObject:forKeyedSubscript:", CFSTR("Avg"), CFSTR("Type"));
        objc_msgSend(v117, "setObject:forKeyedSubscript:", &unk_1E2DEDA78, CFSTR("KernelWidth"));
        objc_msgSend(v117, "setObject:forKeyedSubscript:", &unk_1E2DEDA78, CFSTR("KernelHeight"));
        objc_msgSend(v117, "setObject:forKeyedSubscript:", &unk_1E2DEDF98, CFSTR("Step"));
        Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)buf, (id *)a3);
        v118 = v330;
        v330 = CFSTR("Pooling");

        objc_storeStrong(v331, v117);
        v119 = v299;
        if ((unint64_t)v299 >= v300)
        {
          v121 = 0x8E38E38E38E38E39 * (((uint64_t)v299 - v298) >> 4);
          if (v121 + 1 > 0x1C71C71C71C71C7)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v122 = 0x1C71C71C71C71C72 * ((uint64_t)(v300 - v298) >> 4);
          if (v122 <= v121 + 1)
            v122 = v121 + 1;
          if (0x8E38E38E38E38E39 * ((uint64_t)(v300 - v298) >> 4) >= 0xE38E38E38E38E3)
            v123 = 0x1C71C71C71C71C7;
          else
            v123 = v122;
          *((_QWORD *)&v333 + 1) = &v300;
          if (v123)
            v123 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v123);
          else
            v124 = 0;
          *(_QWORD *)v332 = v123;
          *(_QWORD *)&v332[8] = v123 + 144 * v121;
          *(_QWORD *)&v332[16] = *(_QWORD *)&v332[8];
          *(_QWORD *)&v333 = v123 + 144 * v124;
          std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(*(std::string **)&v332[8], (uint64_t)buf);
          *(_QWORD *)&v332[16] += 144;
          std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v298, v332);
          v120 = v299;
          std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)v332);
        }
        else
        {
          std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v299, (uint64_t)buf);
          v120 = v119 + 6;
        }
        v299 = v120;

        if (v328 < 0)
          operator delete(__p);
        *(_QWORD *)v332 = v326;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v332);
        *(_QWORD *)v332 = v325;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v332);
        if (v324 < 0)
          operator delete(*(void **)buf);

      }
      v86 = (void *)objc_opt_new();
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v55);
      v125 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v86, "setObject:forKeyedSubscript:", v125, CFSTR("BiasCount"));

      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v78);
      v126 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v86, "setObject:forKeyedSubscript:", v126, CFSTR("BiasOffset"));

      v127 = (void *)MEMORY[0x1E0CB37E8];
      if (v17)
        v128 = 0;
      else
      objc_msgSend(v127, "numberWithUnsignedLong:", v128, &v300);
      v129 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v86, "setObject:forKeyedSubscript:", v129, CFSTR("BiasIndex"));

      objc_msgSend(v86, "setObject:forKeyedSubscript:", CFSTR("Float32"), CFSTR("BiasType"));
      v106 = (void *)objc_opt_new();
      objc_msgSend(v106, "setObject:forKeyedSubscript:", v86, CFSTR("BiasScaleGroupData"));
      Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)buf, (id *)a3);
      v130 = v330;
      v330 = CFSTR("GOC");

      objc_storeStrong(v331, v106);
      v131 = v299;
      if ((unint64_t)v299 >= v300)
      {
        v133 = 0x8E38E38E38E38E39 * (((uint64_t)v299 - v298) >> 4);
        if (v133 + 1 > 0x1C71C71C71C71C7)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v134 = 0x1C71C71C71C71C72 * ((uint64_t)(v300 - v298) >> 4);
        if (v134 <= v133 + 1)
          v134 = v133 + 1;
        if (0x8E38E38E38E38E39 * ((uint64_t)(v300 - v298) >> 4) >= 0xE38E38E38E38E3)
          v135 = 0x1C71C71C71C71C7;
        else
          v135 = v134;
        *((_QWORD *)&v333 + 1) = v292;
        if (v135)
          v135 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v135);
        else
          v136 = 0;
        *(_QWORD *)v332 = v135;
        *(_QWORD *)&v332[8] = v135 + 144 * v133;
        *(_QWORD *)&v332[16] = *(_QWORD *)&v332[8];
        *(_QWORD *)&v333 = v135 + 144 * v136;
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(*(std::string **)&v332[8], (uint64_t)buf);
        *(_QWORD *)&v332[16] += 144;
        std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v298, v332);
        v132 = v299;
        std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)v332);
      }
      else
      {
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v299, (uint64_t)buf);
        v132 = v131 + 6;
      }
      v299 = v132;

      if (v328 < 0)
        operator delete(__p);
      *(_QWORD *)v332 = v326;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v332);
      *(_QWORD *)v332 = v325;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v332);
      if (v324 < 0)
        operator delete(*(void **)buf);
    }

    v137 = v322;
    if (v322)
    {
      v138 = (unint64_t *)&v322->__shared_owners_;
      do
        v139 = __ldaxr(v138);
      while (__stlxr(v139 - 1, v138));
      if (!v139)
      {
        ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
        std::__shared_weak_count::__release_weak(v137);
      }
    }
    v140 = (std::__shared_weak_count *)*((_QWORD *)&v316 + 1);
    if (*((_QWORD *)&v316 + 1))
    {
      v141 = (unint64_t *)(*((_QWORD *)&v316 + 1) + 8);
      do
        v142 = __ldaxr(v141);
      while (__stlxr(v142 - 1, v141));
      if (!v142)
      {
        ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
        std::__shared_weak_count::__release_weak(v140);
      }
    }
    v143 = (std::__shared_weak_count *)v341;
    if ((_QWORD)v341)
    {
      v144 = (unint64_t *)(v341 + 8);
      do
        v145 = __ldaxr(v144);
      while (__stlxr(v145 - 1, v144));
      if (!v145)
      {
        ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
        std::__shared_weak_count::__release_weak(v143);
      }
    }
    size = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
    if (__str.__r_.__value_.__l.__size_)
    {
      v147 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
      do
        v148 = __ldaxr(v147);
      while (__stlxr(v148 - 1, v147));
      if (!v148)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
  }
  v296 = v306;
  if (v306)
  {
    v149 = (unint64_t *)&v306->__shared_owners_;
    do
      v150 = __ldxr(v149);
    while (__stxr(v150 + 1, v149));
  }
  v151 = v301;
  v295 = v302;
  if (v302)
  {
    v152 = (unint64_t *)&v302->__shared_owners_;
    do
      v153 = __ldxr(v152);
    while (__stxr(v153 + 1, v152));
  }
  Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t((Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)buf);
  v330 = 0;
  v331[0] = 0;
  v331[1] = (id)0x100000000;
  v155 = *((_QWORD *)this + 58);
  v154 = (std::__shared_weak_count *)*((_QWORD *)this + 59);
  v321 = v155;
  v322 = v154;
  if (v154)
  {
    v156 = (unint64_t *)&v154->__shared_owners_;
    do
      v157 = __ldxr(v156);
    while (__stxr(v157 + 1, v156));
  }
  if (v155
    && !*(_BYTE *)((*(uint64_t (**)(char *))(*((_QWORD *)this + 50) + 104))((char *)this + 400) + 40))
  {
    v158 = v151[28];
    __C = v155;
    v315 = v154;
    if (v154)
    {
      v159 = (unint64_t *)&v154->__shared_owners_;
      do
        v160 = __ldxr(v159);
      while (__stxr(v160 + 1, v159));
    }
    v161 = (std::__shared_weak_count *)*((_QWORD *)this + 61);
    v313[0] = *((_QWORD *)this + 60);
    v313[1] = (uint64_t)v161;
    if (v161)
    {
      v162 = (unint64_t *)&v161->__shared_owners_;
      do
        v163 = __ldxr(v162);
      while (__stxr(v163 + 1, v162));
    }
    Espresso::ane_style_post_scale_bias((uint64_t)&__C, v313, (uint64_t)&v316, v158);
    if (v161)
    {
      v164 = (unint64_t *)&v161->__shared_owners_;
      do
        v165 = __ldaxr(v164);
      while (__stlxr(v165 - 1, v164));
      if (!v165)
      {
        ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
        std::__shared_weak_count::__release_weak(v161);
      }
    }
    v166 = v315;
    if (v315)
    {
      v167 = (unint64_t *)&v315->__shared_owners_;
      do
        v168 = __ldaxr(v167);
      while (__stlxr(v168 - 1, v167));
      if (!v168)
      {
        ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
        std::__shared_weak_count::__release_weak(v166);
      }
    }
    v169 = v321;
    v170 = *(unsigned int *)(v321 + 8);
    std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v311, 2 * v170, 1, 1, 1);
    v171 = (int)v170;
    v310 = 0uLL;
    v172 = v170;
    v173 = *((_QWORD *)this + 60);
    if (v173)
      v172 = *(_DWORD *)(v173 + 8);
    if (!*((_BYTE *)a2 + 384))
    {
      Espresso::blob<unsigned char,1>::make(&__str, 4 * v170);
      v267 = *(int **)(__str.__r_.__value_.__r.__words[0] + 16);
      if ((int)v170 >= 1)
      {
        for (i = 0; i != v170; ++i)
        {
          v269 = *(float *)(*(_QWORD *)(v169 + 16) + i * 4);
          *(float *)&v270 = ldexp(1.0, -v319) * v269;
          v267[i] = v270;
        }
      }
      if ((_DWORD)v170)
      {
        v271 = *(_WORD **)(v311 + 16);
        do
        {
          v272 = *v267++;
          _S0 = v272;
          __asm { FCVT            H0, S0 }
          *v271++ = _S0;
          --v171;
        }
        while (v171);
      }
      v308 = 0;
      v309 = 0;
      if (*((_QWORD *)this + 60))
      {
        Espresso::blob<unsigned char,1>::make(v332, 4 * v172);
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)&v308, (__int128 *)v332);
        std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v332);
        Espresso::blob<unsigned char,1>::make(v332, 2 * v172);
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)&v310, (__int128 *)v332);
        std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v332);
        v275 = *(int **)(v308 + 16);
        if (v172 >= 1)
        {
          for (j = 0; j != v172; ++j)
          {
            if ((int)v170 - 1 >= (int)j)
              v277 = j;
            else
              v277 = v170 - 1;
            *(float *)&v278 = *(float *)(*(_QWORD *)(v317 + 16) + 4 * j)
                            * *(float *)(*(_QWORD *)(v316 + 16) + 4 * v277);
            v275[j] = v278;
            v279 = v320;
            v280 = v319;
            *(float *)&v281 = ldexp(1.0, v320 - v319) * *(float *)&v278;
            v275[j] = v281;
            v284 = ldexp(1.0, v280 - v279) * *(float *)&v281;
            if (v284 < -127.0 || v284 > 255.0)
            {
              Espresso::espresso_os_log_subsystem(v282, v283);
              v286 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v286, OS_LOG_TYPE_ERROR))
              {
                v287 = *(float *)&v275[j];
                *(_DWORD *)v332 = 134218752;
                *(double *)&v332[4] = v284;
                *(_WORD *)&v332[12] = 1024;
                *(_DWORD *)&v332[14] = v320;
                *(_WORD *)&v332[18] = 1024;
                *(_DWORD *)&v332[20] = v319;
                LOWORD(v333) = 2048;
                *(double *)((char *)&v333 + 2) = v287;
                _os_log_error_impl(&dword_190DAF000, v286, OS_LOG_TYPE_ERROR, "[ANEC::add_ane_scale_bias_unit] Shifted bias overflowing shifted_b=%f acc_bias_shift=%d post_right_shift=%d anebias=%f", v332, 0x22u);
              }

            }
          }
        }
        if (v172)
        {
          v288 = v172;
          v289 = *(_WORD **)(v310 + 16);
          do
          {
            v290 = *v275++;
            _S0 = v290;
            __asm { FCVT            H0, S0 }
            *v289++ = _S0;
            --v288;
          }
          while (v288);
        }
      }
      exception = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
      Espresso::not_implemented_error::not_implemented_error(exception);
    }
    v174 = v320;
    if ((_DWORD)v170)
    {
      v175 = *(int **)(v316 + 16);
      v176 = *(_WORD **)(v311 + 16);
      do
      {
        v177 = *v175++;
        _S0 = v177;
        __asm { FCVT            H0, S0 }
        *v176++ = _S0;
        --v171;
      }
      while (v171);
    }
    if (v173)
    {
      std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(v332, 2 * v172, 1, 1, 1);
      v179 = *(_OWORD *)v332;
      *(_QWORD *)v332 = 0;
      *(_QWORD *)&v332[8] = 0;
      v180 = (std::__shared_weak_count *)*((_QWORD *)&v310 + 1);
      v310 = v179;
      if (v180)
      {
        v181 = (unint64_t *)&v180->__shared_owners_;
        do
          v182 = __ldaxr(v181);
        while (__stlxr(v182 - 1, v181));
        if (!v182)
        {
          ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
          std::__shared_weak_count::__release_weak(v180);
        }
      }
      v183 = *(std::__shared_weak_count **)&v332[8];
      if (*(_QWORD *)&v332[8])
      {
        v184 = (unint64_t *)(*(_QWORD *)&v332[8] + 8);
        do
          v185 = __ldaxr(v184);
        while (__stlxr(v185 - 1, v184));
        if (!v185)
        {
          ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
          std::__shared_weak_count::__release_weak(v183);
        }
      }
      if (v172)
      {
        v186 = v172;
        v187 = *(int **)(v317 + 16);
        v188 = *(_WORD **)(v310 + 16);
        do
        {
          v189 = *v187++;
          _S0 = v189;
          __asm { FCVT            H0, S0 }
          *v188++ = _S0;
          --v186;
        }
        while (v186);
      }
    }
    v191 = *((unsigned __int8 *)a2 + 552);
    v192 = v311;
    v193 = v312;
    v308 = v311;
    v309 = v312;
    if (v312)
    {
      v194 = (unint64_t *)&v312->__shared_owners_;
      do
        v195 = __ldxr(v194);
      while (__stxr(v195 + 1, v194));
    }
    v196 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler *)((char *)a2 + 128), *(const unsigned __int8 **)(v192 + 16), *(int *)(v192 + 8));
    if (v193)
    {
      v197 = (unint64_t *)&v193->__shared_owners_;
      do
        v198 = __ldaxr(v197);
      while (__stlxr(v198 - 1, v197));
      if (!v198)
      {
        ((void (*)(std::__shared_weak_count *))v193->__on_zero_shared)(v193);
        std::__shared_weak_count::__release_weak(v193);
      }
    }
    LODWORD(v292) = v174;
    v199 = (void *)objc_opt_new();
    if (*((_BYTE *)a2 + 121))
    {
      v200 = *(id *)(v298 + 128);

      v199 = v200;
    }
    v201 = (void *)objc_opt_new();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v170);
    v202 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v201, "setObject:forKeyedSubscript:", v202, CFSTR("ScaleCount"));

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v196);
    v203 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v201, "setObject:forKeyedSubscript:", v203, CFSTR("ScaleOffset"));

    v204 = (void *)MEMORY[0x1E0CB37E8];
    if (v191)
      v205 = 0;
    else
    objc_msgSend(v204, "numberWithUnsignedLong:", v205, v292);
    v206 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v201, "setObject:forKeyedSubscript:", v206, CFSTR("ScaleIndex"));

    objc_msgSend(v201, "setObject:forKeyedSubscript:", CFSTR("Float16"), CFSTR("ScaleType"));
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v319);
    v207 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v199, "setObject:forKeyedSubscript:", v207, CFSTR("ScaleShift"));

    if (*((_QWORD *)this + 60))
    {
      v208 = v310;
      v307 = v310;
      if (*((_QWORD *)&v310 + 1))
      {
        v209 = (unint64_t *)(*((_QWORD *)&v310 + 1) + 8);
        do
          v210 = __ldxr(v209);
        while (__stxr(v210 + 1, v209));
      }
      v211 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler *)((char *)a2 + 128), *(const unsigned __int8 **)(v208 + 16), *(int *)(v208 + 8));
      if (*((_QWORD *)&v208 + 1))
      {
        v212 = (unint64_t *)(*((_QWORD *)&v208 + 1) + 8);
        do
          v213 = __ldaxr(v212);
        while (__stlxr(v213 - 1, v212));
        if (!v213)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v208 + 1) + 16))(*((_QWORD *)&v208 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v208 + 1));
        }
      }
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *(unsigned int *)(*((_QWORD *)this + 60) + 8));
      v214 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v201, "setObject:forKeyedSubscript:", v214, CFSTR("BiasCount"));

      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v211);
      v215 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v201, "setObject:forKeyedSubscript:", v215, CFSTR("BiasOffset"));

      v216 = (void *)MEMORY[0x1E0CB37E8];
      if (v191)
        v217 = 0;
      else
      objc_msgSend(v216, "numberWithUnsignedLong:", v217);
      v218 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v201, "setObject:forKeyedSubscript:", v218, CFSTR("BiasIndex"));

      objc_msgSend(v201, "setObject:forKeyedSubscript:", CFSTR("Float16"), CFSTR("BiasType"));
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v293);
      v219 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v199, "setObject:forKeyedSubscript:", v219, CFSTR("BiasShift"));

    }
    objc_msgSend(v199, "setObject:forKeyedSubscript:", v201, CFSTR("BiasScaleGroupData"));
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)v332, (id *)a3);
    v220 = v299;
    if (v299 == (std::string *)v298)
      goto LABEL_296;
    v221 = v299 - 6;
    v222 = HIBYTE(v299[-6].__r_.__value_.__r.__words[2]);
    v223 = v222;
    v224 = v299[-6].__r_.__value_.__l.__size_;
    if ((v222 & 0x80u) == 0)
      v225 = HIBYTE(v299[-6].__r_.__value_.__r.__words[2]);
    else
      v225 = v299[-6].__r_.__value_.__l.__size_;
    v226 = v332[23];
    if (v332[23] < 0)
      v226 = *(_QWORD *)&v332[8];
    if (v225 != v226)
      goto LABEL_290;
    if (v332[23] >= 0)
      v227 = v332;
    else
      v227 = *(unsigned __int8 **)v332;
    if ((char)v222 < 0)
    {
      data = (const std::string::value_type *)v221->__r_.__value_.__r.__words[0];
      if (memcmp(v221->__r_.__value_.__l.__data_, v227, v299[-6].__r_.__value_.__l.__size_))
        goto LABEL_293;
    }
    else if ((_BYTE)v222)
    {
      v228 = v299 - 6;
      while (v228->__r_.__value_.__s.__data_[0] == *v227)
      {
        v228 = (std::string *)((char *)v228 + 1);
        ++v227;
        if (!--v222)
          goto LABEL_289;
      }
      goto LABEL_290;
    }
LABEL_289:
    std::string::append(v220 - 6, "__@pre_scale_bias");
    v223 = HIBYTE(v220[-6].__r_.__value_.__r.__words[2]);
LABEL_290:
    if ((v223 & 0x80) == 0)
    {
      v230 = *(_OWORD *)&v221->__r_.__value_.__l.__data_;
      __str.__r_.__value_.__r.__words[2] = v220[-6].__r_.__value_.__r.__words[2];
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v230;
      goto LABEL_294;
    }
    data = v220[-6].__r_.__value_.__l.__data_;
    v224 = v220[-6].__r_.__value_.__l.__size_;
LABEL_293:
    std::string::__init_copy_ctor_external(&__str, data, v224);
LABEL_294:
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v334, &__str, &v341, 1uLL);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
LABEL_296:
    v231 = v338;
    v338 = CFSTR("GOC");

    objc_storeStrong(&v339, v199);
    if (!*((_BYTE *)a2 + 121))
    {
      v232 = v299;
      if ((unint64_t)v299 >= v300)
      {
        v234 = 0x8E38E38E38E38E39 * (((uint64_t)v299 - v298) >> 4);
        if (v234 + 1 > 0x1C71C71C71C71C7)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v235 = 0x1C71C71C71C71C72 * ((uint64_t)(v300 - v298) >> 4);
        if (v235 <= v234 + 1)
          v235 = v234 + 1;
        if (0x8E38E38E38E38E39 * ((uint64_t)(v300 - v298) >> 4) >= 0xE38E38E38E38E3)
          v236 = 0x1C71C71C71C71C7;
        else
          v236 = v235;
        *((_QWORD *)&v341 + 1) = &v300;
        if (v236)
          v236 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v236);
        else
          v237 = 0;
        __str.__r_.__value_.__r.__words[0] = v236;
        __str.__r_.__value_.__l.__size_ = v236 + 144 * v234;
        __str.__r_.__value_.__r.__words[2] = __str.__r_.__value_.__l.__size_;
        *(_QWORD *)&v341 = v236 + 144 * v237;
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)__str.__r_.__value_.__l.__size_, (uint64_t)v332);
        __str.__r_.__value_.__r.__words[2] += 144;
        std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v298, &__str);
        v233 = v299;
        std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&__str);
      }
      else
      {
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v299, (uint64_t)v332);
        v233 = v232 + 6;
      }
      v299 = v233;
    }

    if (v336 < 0)
      operator delete(v335);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v334;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v333;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
    if ((v332[23] & 0x80000000) != 0)
      operator delete(*(void **)v332);

    v238 = (std::__shared_weak_count *)*((_QWORD *)&v310 + 1);
    if (*((_QWORD *)&v310 + 1))
    {
      v239 = (unint64_t *)(*((_QWORD *)&v310 + 1) + 8);
      do
        v240 = __ldaxr(v239);
      while (__stlxr(v240 - 1, v239));
      if (!v240)
      {
        ((void (*)(std::__shared_weak_count *))v238->__on_zero_shared)(v238);
        std::__shared_weak_count::__release_weak(v238);
      }
    }
    v241 = v312;
    if (v312)
    {
      v242 = (unint64_t *)&v312->__shared_owners_;
      do
        v243 = __ldaxr(v242);
      while (__stlxr(v243 - 1, v242));
      if (!v243)
      {
        ((void (*)(std::__shared_weak_count *))v241->__on_zero_shared)(v241);
        std::__shared_weak_count::__release_weak(v241);
      }
    }
    v244 = v318;
    if (v318)
    {
      v245 = (unint64_t *)&v318->__shared_owners_;
      do
        v246 = __ldaxr(v245);
      while (__stlxr(v246 - 1, v245));
      if (!v246)
      {
        ((void (*)(std::__shared_weak_count *))v244->__on_zero_shared)(v244);
        std::__shared_weak_count::__release_weak(v244);
      }
    }
    v247 = (std::__shared_weak_count *)*((_QWORD *)&v316 + 1);
    if (*((_QWORD *)&v316 + 1))
    {
      v248 = (unint64_t *)(*((_QWORD *)&v316 + 1) + 8);
      do
        v249 = __ldaxr(v248);
      while (__stlxr(v249 - 1, v248));
      if (!v249)
      {
        ((void (*)(std::__shared_weak_count *))v247->__on_zero_shared)(v247);
        std::__shared_weak_count::__release_weak(v247);
      }
    }
    v154 = v322;
  }
  if (v154)
  {
    v250 = (unint64_t *)&v154->__shared_owners_;
    do
      v251 = __ldaxr(v250);
    while (__stlxr(v251 - 1, v250));
    if (!v251)
    {
      ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
      std::__shared_weak_count::__release_weak(v154);
    }
  }

  if (v328 < 0)
    operator delete(__p);
  *(_QWORD *)v332 = v326;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v332);
  *(_QWORD *)v332 = v325;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v332);
  if (v324 < 0)
    operator delete(*(void **)buf);
  if (v295)
  {
    v252 = (unint64_t *)&v295->__shared_owners_;
    do
      v253 = __ldaxr(v252);
    while (__stlxr(v253 - 1, v252));
    if (!v253)
    {
      ((void (*)(std::__shared_weak_count *))v295->__on_zero_shared)(v295);
      std::__shared_weak_count::__release_weak(v295);
    }
  }
  if (v296)
  {
    v254 = (unint64_t *)&v296->__shared_owners_;
    do
      v255 = __ldaxr(v254);
    while (__stlxr(v255 - 1, v254));
    if (!v255)
    {
      ((void (*)(std::__shared_weak_count *))v296->__on_zero_shared)(v296);
      std::__shared_weak_count::__release_weak(v296);
    }
  }
  (*(void (**)(char *, Espresso::ANECompilerEngine::compiler *, uint64_t *))(*((_QWORD *)this + 50) + 32))((char *)this + 400, a2, &v298);

  *(_QWORD *)buf = &v298;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  v256 = v302;
  if (v302)
  {
    v257 = (unint64_t *)&v302->__shared_owners_;
    do
      v258 = __ldaxr(v257);
    while (__stlxr(v258 - 1, v257));
    if (!v258)
    {
      ((void (*)(std::__shared_weak_count *))v256->__on_zero_shared)(v256);
      std::__shared_weak_count::__release_weak(v256);
    }
  }
  v259 = v304;
  if (v304)
  {
    v260 = (unint64_t *)&v304->__shared_owners_;
    do
      v261 = __ldaxr(v260);
    while (__stlxr(v261 - 1, v260));
    if (!v261)
    {
      ((void (*)(std::__shared_weak_count *))v259->__on_zero_shared)(v259);
      std::__shared_weak_count::__release_weak(v259);
    }
  }
  v262 = v306;
  if (v306)
  {
    v263 = (unint64_t *)&v306->__shared_owners_;
    do
      v264 = __ldaxr(v263);
    while (__stlxr(v264 - 1, v263));
    if (!v264)
    {
      ((void (*)(std::__shared_weak_count *))v262->__on_zero_shared)(v262);
      std::__shared_weak_count::__release_weak(v262);
    }
  }
}

void sub_19139698C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,char a28,uint64_t a29,char a30,uint64_t a31,void **a32)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);

  a32 = (void **)&a23;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100](&a32);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a26);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a30);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::batchnorm_kernel::compile(Espresso::ANECompilerEngine::batchnorm_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
  Espresso::ANECompilerEngine::batchnorm_kernel::compile((Espresso::ANECompilerEngine::batchnorm_kernel *)((char *)this - 400), a2, a3);
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::batchnorm_kernel::~batchnorm_kernel(Espresso::ANECompilerEngine::batchnorm_kernel *this)
{
  Espresso::generic_batchnorm_kernel *v2;

  v2 = (Espresso::ANECompilerEngine::batchnorm_kernel *)((char *)this - 400);
  *((_QWORD *)this - 50) = &off_1E2D76880;
  *(_QWORD *)this = &unk_1E2D76A38;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 216);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((void **)this);
  Espresso::generic_batchnorm_kernel::~generic_batchnorm_kernel(v2);
}

{
  Espresso::generic_batchnorm_kernel *v2;

  v2 = (Espresso::ANECompilerEngine::batchnorm_kernel *)((char *)this - 400);
  *((_QWORD *)this - 50) = &off_1E2D76880;
  *(_QWORD *)this = &unk_1E2D76A38;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 216);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((void **)this);
  Espresso::generic_batchnorm_kernel::~generic_batchnorm_kernel(v2);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANECompilerEngine::general_padding_kernel::~general_padding_kernel(Espresso::ANECompilerEngine::general_padding_kernel *this)
{
  void **v2;

  *(_QWORD *)this = &off_1E2D7AC30;
  v2 = (void **)((char *)this + 360);
  *((_QWORD *)this + 45) = &unk_1E2D7AD98;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 576);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);
  Espresso::base_kernel::~base_kernel(this);
}

{
  void **v2;

  *(_QWORD *)this = &off_1E2D7AC30;
  v2 = (void **)((char *)this + 360);
  *((_QWORD *)this + 45) = &unk_1E2D7AD98;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 576);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANECompilerEngine::general_padding_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob((_QWORD *)(a1 + 360), a3, a4, a5);
}

BOOL Espresso::ANECompilerEngine::general_padding_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 *v6;
  __int128 v7;
  _BOOL8 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  const Espresso::net *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  const Espresso::net *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  unint64_t *v31;
  unint64_t v32;
  const Espresso::net *v33;
  char *v34;
  int v35;
  unint64_t v36;
  std::string::size_type v37;
  BOOL v38;
  const __CFString *v39;
  uint64_t v40;
  int v41;
  int v42;
  unsigned int v43;
  unsigned int v44;
  int v45;
  int v46;
  std::string::size_type v47;
  int v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  int v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  __CFString *v76;
  __int128 v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  CFTypeRef *v82;
  unint64_t *v83;
  unint64_t v84;
  CFTypeRef *v85;
  std::string *v86;
  __int128 v87;
  std::string *v88;
  __int128 v89;
  void **v90;
  std::string::size_type v91;
  std::string *v92;
  void *v93;
  char v94;
  const __CFString *v95;
  unsigned int v96;
  std::__shared_weak_count *v97;
  uint64_t v98;
  void *v99;
  int64x2_t *v100;
  std::__shared_weak_count *v101;
  void *v102;
  std::__shared_weak_count *v103;
  std::string v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  unsigned __int8 v107;
  void *v108;
  _BYTE v109[15];
  char v110;
  _OWORD v111[2];
  uint64_t v112;
  void *v113;
  void *v114;
  uint64_t v115;
  const Espresso::net *v116;
  std::__shared_weak_count *v117;
  char v118[32];
  _OWORD v119[2];
  uint64_t v120;
  void *__p;
  void *v122;
  uint64_t v123;
  const Espresso::net *v124;
  std::__shared_weak_count *v125;
  _DWORD v126[6];
  unsigned int v127;
  const Espresso::net *v128;
  std::__shared_weak_count *v129;
  void *v130[2];
  unsigned __int8 v131;
  std::string v132;
  std::string v133;
  std::string v134;
  _OWORD v135[2];
  int v136;
  uint64_t v137;
  uint64_t v138;
  void *v139;
  __int128 v140;
  __int128 v141;
  uint64_t v142;
  std::string v143;
  unint64_t v144;
  const __CFString *v145;
  std::string::size_type v146;
  _DWORD v147[2];
  const __CFString *v148;
  uint64_t v149;
  int v150;
  int v151;
  std::__shared_weak_count *v152;
  int v153;
  _QWORD v154[5];

  v154[2] = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)a3 == *(_QWORD *)(a3 + 8) || *(_QWORD *)(a3 + 24) == *(_QWORD *)(a3 + 32))
    return 0;
  v6 = *(__int128 **)(**(_QWORD **)(a3 + 48) + 224 * *(_QWORD *)(a3 + 72) + 136);
  if (*((char *)v6 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v104, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
  }
  else
  {
    v7 = *v6;
    v104.__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
    *(_OWORD *)&v104.__r_.__value_.__l.__data_ = v7;
  }
  v9 = *(std::__shared_weak_count **)(a2 + 8);
  v102 = *(void **)a2;
  v103 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v12 = *(_QWORD *)(a3 + 48);
  v128 = 0;
  v129 = 0;
  v13 = *(std::__shared_weak_count **)(v12 + 80);
  if (v13 && (v14 = std::__shared_weak_count::lock(v13), (v129 = v14) != 0))
  {
    v15 = *(const Espresso::net **)(v12 + 72);
    v128 = v15;
    v124 = v15;
    v125 = v14;
    v16 = (unint64_t *)&v14->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  else
  {
    v15 = 0;
    v124 = 0;
    v125 = 0;
  }
  v18 = *(_QWORD *)a3;
  v19 = *(_QWORD *)(*(_QWORD *)a3 + 32);
  v20 = *(_OWORD *)(*(_QWORD *)a3 + 16);
  v119[0] = *(_OWORD *)*(_QWORD *)a3;
  v119[1] = v20;
  v120 = v19;
  __p = 0;
  v122 = 0;
  v123 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *(const void **)(v18 + 40), *(_QWORD *)(v18 + 48), (uint64_t)(*(_QWORD *)(v18 + 48) - *(_QWORD *)(v18 + 40)) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v126, v15, (const Espresso::layer_shape *)v119, 1);
  if (__p)
  {
    v122 = __p;
    operator delete(__p);
  }
  v21 = v125;
  if (v125)
  {
    v22 = (unint64_t *)&v125->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v25 = v128;
  v24 = v129;
  v116 = v128;
  v117 = v129;
  if (v129)
  {
    v26 = (unint64_t *)&v129->__shared_owners_;
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  v28 = *(_QWORD *)(a3 + 24);
  v29 = *(_QWORD *)(v28 + 32);
  v30 = *(_OWORD *)(v28 + 16);
  v111[0] = *(_OWORD *)v28;
  v111[1] = v30;
  v112 = v29;
  v113 = 0;
  v114 = 0;
  v115 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v113, *(const void **)(v28 + 40), *(_QWORD *)(v28 + 48), (uint64_t)(*(_QWORD *)(v28 + 48) - *(_QWORD *)(v28 + 40)) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v118, v25, (const Espresso::layer_shape *)v111, 1);
  if (v113)
  {
    v114 = v113;
    operator delete(v113);
  }
  if (v24)
  {
    v31 = (unint64_t *)&v24->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v33 = v128;
  if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*((_QWORD **)v128 + 45), &v104))
  {
    v139 = &v104;
    v34 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v33 + 44, &v104, (uint64_t)&std::piecewise_construct, (__int128 **)&v139);
    *(_OWORD *)&v143.__r_.__value_.__l.__data_ = *(_OWORD *)(v34 + 56);
    v144 = 0;
    v145 = 0;
    v143.__r_.__value_.__r.__words[2] = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v143.__r_.__value_.__r.__words[2], *((const void **)v34 + 9), *((_QWORD *)v34 + 10), (uint64_t)(*((_QWORD *)v34 + 10) - *((_QWORD *)v34 + 9)) >> 2);
    if (LODWORD(v143.__r_.__value_.__r.__words[1]) == -1)
      v35 = 1;
    else
      v35 = v143.__r_.__value_.__r.__words[1];
    if (v143.__r_.__value_.__r.__words[2])
    {
      v144 = v143.__r_.__value_.__r.__words[2];
      operator delete((void *)v143.__r_.__value_.__r.__words[2]);
    }
  }
  else
  {
    v35 = *(_DWORD *)(a3 + 64);
  }
  Espresso::ANECompilerEngine::ane_arch_allow_network_override((uint64_t)v33 + 472);
  v99 = (void *)objc_claimAutoreleasedReturnValue();
  Espresso::ANECompilerEngine::ane_kernel::get_ane_validator((Espresso::ANECompilerEngine::ane_kernel *)&v105, (NSString *)(a1 + 360), v99);
  if (*(_WORD *)(a1 + 280))
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Unsupported padding mode.");
  v36 = *(unsigned __int16 *)(a1 + 282);
  if (v36 > 3)
    v37 = 0;
  else
    v37 = *((_QWORD *)&off_1E2DD2048 + v36);
  v97 = v9;
  v98 = a2;
  if (v127 < 6)
  {
    if (*((_BYTE *)v33 + 1281))
      v38 = v127 == 5;
    else
      v38 = 0;
    v39 = CFSTR("Channel");
    if (v38)
      v39 = CFSTR("Depth");
    v95 = v39;
    v96 = v35;
    if (v36 > 3)
      v40 = 0;
    else
      v40 = *((_QWORD *)&off_1E2DD2048 + v36);
    v41 = *(__int16 *)(a1 + 298);
    v42 = *(__int16 *)(a1 + 296);
    v43 = *(__int16 *)(a1 + 292);
    v44 = *(__int16 *)(a1 + 294);
    v45 = *(__int16 *)(a1 + 288);
    v46 = *(__int16 *)(a1 + 290);
    ANECPadLayerDescInitialize();
    v144 = __PAIR64__(v44, v43);
    v145 = CFSTR("Width");
    v146 = v37;
    v147[0] = v45;
    v147[1] = v46;
    v47 = 2;
    if (v42 | v41)
      v47 = 3;
    v143.__r_.__value_.__r.__words[0] = v47;
    v143.__r_.__value_.__l.__size_ = (std::string::size_type)CFSTR("Height");
    v143.__r_.__value_.__r.__words[2] = v37;
    if (v42 | v41)
    {
      v148 = v95;
      v149 = v40;
      v150 = v42;
      v151 = v41;
    }
    v48 = 0;
    if (!*(_WORD *)(a1 + 282))
      v48 = *(_DWORD *)(a1 + 284);
    v153 = v48;
    ANECTensorDescInitialize();
    if (v96 < 8 && ((0x97u >> v96) & 1) != 0)
    {
      v76 = off_1E2DD20A8[v96];
      *(_QWORD *)&v77 = v126[3];
      *((_QWORD *)&v77 + 1) = v126[4];
      v141 = v77;
      v139 = v76;
      v142 = v126[2];
      *(_QWORD *)&v77 = v126[0];
      *((_QWORD *)&v77 + 1) = v126[1];
      v140 = v77;
      v138 = 0;
      v137 = 0;
      v78 = ANECValidatePadLayer();
      if (v78)
      {
        v79 = v138;
        v80 = v137;
        memset(v135, 0, sizeof(v135));
        v136 = 1065353216;
        if (v138)
        {
          v81 = 0;
          v82 = (CFTypeRef *)(v137 + 8);
          do
          {
            v83 = (unint64_t *)(v80 + 720 * v81);
            if (*v83)
            {
              v84 = 0;
              v85 = v82;
              do
              {
                std::__hash_table<__CFString const*,Espresso::ANECompilerEngine::CFStringHasher,Espresso::ANECompilerEngine::CFStringEqualWrapper,std::allocator<__CFString const*>>::__emplace_unique_key_args<__CFString const*,__CFString const* const&>((float *)v135, v85, v85);
                ++v84;
                ++v85;
              }
              while (v84 < *v83);
            }
            ++v81;
            v82 += 90;
          }
          while (v81 != v79);
        }
        std::to_string(&v132, v78);
        v86 = std::string::insert(&v132, 0, "ANECValidatePadLayer check failed with status ");
        v87 = *(_OWORD *)&v86->__r_.__value_.__l.__data_;
        v133.__r_.__value_.__r.__words[2] = v86->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v133.__r_.__value_.__l.__data_ = v87;
        v86->__r_.__value_.__l.__size_ = 0;
        v86->__r_.__value_.__r.__words[2] = 0;
        v86->__r_.__value_.__r.__words[0] = 0;
        v88 = std::string::append(&v133, ". ");
        v89 = *(_OWORD *)&v88->__r_.__value_.__l.__data_;
        v134.__r_.__value_.__r.__words[2] = v88->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v134.__r_.__value_.__l.__data_ = v89;
        v88->__r_.__value_.__l.__size_ = 0;
        v88->__r_.__value_.__r.__words[2] = 0;
        v88->__r_.__value_.__r.__words[0] = 0;
        Espresso::ANECompilerEngine::format_validation_violations((uint64_t)v130, (uint64_t)v135);
        if ((v131 & 0x80u) == 0)
          v90 = v130;
        else
          v90 = (void **)v130[0];
        if ((v131 & 0x80u) == 0)
          v91 = v131;
        else
          v91 = (std::string::size_type)v130[1];
        v92 = std::string::append(&v134, (const std::string::value_type *)v90, v91);
        v93 = (void *)v92->__r_.__value_.__r.__words[0];
        v154[0] = v92->__r_.__value_.__l.__size_;
        *(_QWORD *)((char *)v154 + 7) = *(std::string::size_type *)((char *)&v92->__r_.__value_.__r.__words[1] + 7);
        v94 = HIBYTE(v92->__r_.__value_.__r.__words[2]);
        v92->__r_.__value_.__l.__size_ = 0;
        v92->__r_.__value_.__r.__words[2] = 0;
        v92->__r_.__value_.__r.__words[0] = 0;
        v107 = 0;
        *(_QWORD *)&v109[7] = *(_QWORD *)((char *)v154 + 7);
        v108 = v93;
        *(_QWORD *)v109 = v154[0];
        v110 = v94;
        if ((char)v131 < 0)
          operator delete(v130[0]);
        if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v134.__r_.__value_.__l.__data_);
        if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v133.__r_.__value_.__l.__data_);
        if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v132.__r_.__value_.__l.__data_);
        std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)v135);
      }
      else
      {
        v107 = 1;
        std::string::basic_string[abi:ne180100]<0>(&v108, "");
      }
    }
    else
    {
      v107 = 0;
      std::string::basic_string[abi:ne180100]<0>(&v108, "Input tensor format invalid.");
    }
  }
  else
  {
    v107 = 0;
    std::string::basic_string[abi:ne180100]<0>(&v108, "Failed getting axis for 3rd padding dimension.");
  }
  v49 = v106;
  if (v106)
  {
    v50 = (unint64_t *)&v106->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  v52 = v107;
  v8 = v107 != 0;
  if (!v107)
  {
    v139 = v102;
    *(_QWORD *)&v140 = v103;
    if (v103)
    {
      v59 = (unint64_t *)&v103->__shared_owners_;
      do
        v60 = __ldxr(v59);
      while (__stxr(v60 + 1, v59));
    }
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v143, (__int128 *)&v108, a3, 1);
    Espresso::emit_kernel_validation_warning((int64x2_t **)&v139, (Espresso::base_kernel::validate_for_engine_warning_t *)&v143);
    v61 = v152;
    if (v152)
    {
      v62 = (unint64_t *)&v152->__shared_owners_;
      do
        v63 = __ldaxr(v62);
      while (__stlxr(v63 - 1, v62));
      if (!v63)
      {
        ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
        std::__shared_weak_count::__release_weak(v61);
      }
    }
    *(_QWORD *)&v135[0] = v147;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v135);
    *(_QWORD *)&v135[0] = &v144;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v135);
    if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v143.__r_.__value_.__l.__data_);
    v64 = (std::__shared_weak_count *)v140;
    if ((_QWORD)v140)
    {
      v65 = (unint64_t *)(v140 + 8);
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 - 1, v65));
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
        std::__shared_weak_count::__release_weak(v64);
      }
    }
  }
  if (v110 < 0)
    operator delete(v108);

  v53 = v129;
  if (!v129)
    goto LABEL_75;
  v54 = (unint64_t *)&v129->__shared_owners_;
  do
    v55 = __ldaxr(v54);
  while (__stlxr(v55 - 1, v54));
  if (!v55)
  {
    ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
    std::__shared_weak_count::__release_weak(v53);
    if (!v97)
      goto LABEL_79;
  }
  else
  {
LABEL_75:
    if (!v97)
      goto LABEL_79;
  }
  v56 = (unint64_t *)&v97->__shared_owners_;
  do
    v57 = __ldaxr(v56);
  while (__stlxr(v57 - 1, v56));
  if (v57)
  {
LABEL_79:
    if (v52)
      goto LABEL_80;
LABEL_101:
    v67 = *(std::__shared_weak_count **)(v98 + 8);
    v100 = *(int64x2_t **)v98;
    v101 = v67;
    if (v67)
    {
      v68 = (unint64_t *)&v67->__shared_owners_;
      do
        v69 = __ldxr(v68);
      while (__stxr(v69 + 1, v68));
    }
    std::string::basic_string[abi:ne180100]<0>(&v139, "General padding does not validate as standalone layer");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v143, (__int128 *)&v139, a3, 0);
    Espresso::emit_kernel_validation_warning(&v100, (Espresso::base_kernel::validate_for_engine_warning_t *)&v143);
    v70 = v152;
    if (v152)
    {
      v71 = (unint64_t *)&v152->__shared_owners_;
      do
        v72 = __ldaxr(v71);
      while (__stlxr(v72 - 1, v71));
      if (!v72)
      {
        ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
        std::__shared_weak_count::__release_weak(v70);
      }
    }
    *(_QWORD *)&v119[0] = v147;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v119);
    *(_QWORD *)&v119[0] = &v144;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v119);
    if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v143.__r_.__value_.__l.__data_);
    if (SHIBYTE(v140) < 0)
      operator delete(v139);
    v73 = v101;
    if (v101)
    {
      v74 = (unint64_t *)&v101->__shared_owners_;
      do
        v75 = __ldaxr(v74);
      while (__stlxr(v75 - 1, v74));
      if (!v75)
      {
        ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
        std::__shared_weak_count::__release_weak(v73);
      }
    }
    goto LABEL_80;
  }
  ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
  std::__shared_weak_count::__release_weak(v97);
  if (!v52)
    goto LABEL_101;
LABEL_80:
  if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v104.__r_.__value_.__l.__data_);
  return v8;
}

void sub_191397904(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60,uint64_t a61,void *__p,uint64_t a63)
{
  char a67;
  void *a68;
  char a72;
  void *a73;
  char a74;
  void *a75;
  char a76;

  if (a67 < 0)
    operator delete(__p);
  if (a76 < 0)
    operator delete(a75);
  if (a74 < 0)
    operator delete(a73);
  if (a72 < 0)
    operator delete(a68);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&STACK[0x200]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a26);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a60);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  if (a24 < 0)
    operator delete(a19);
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::general_padding_kernel::compile(Espresso::ANECompilerEngine::general_padding_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  char *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unsigned __int8 *i;
  unsigned __int8 *v16;
  char *v17;
  char *v18;
  __int128 v19;
  void *v20;
  int64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  std::string::size_type v26;
  uint64_t v27;
  __int128 v28;
  void *v29;
  __int128 *v30;
  char *v31;
  char *v32;
  __int128 v33;
  void *v34;
  int64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  std::string::size_type v40;
  uint64_t v41;
  __int128 v42;
  void *v43;
  __int128 *v44;
  uint64_t v45;
  uint64_t j;
  std::string *v47;
  __int128 v48;
  std::string *v49;
  char *v50;
  char *v51;
  __int128 v52;
  void *v53;
  int64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  std::string::size_type v59;
  uint64_t v60;
  __int128 v61;
  void *v62;
  __int128 *v63;
  std::string *v64;
  void *v65;
  char v66;
  std::__shared_weak_count *v67;
  std::__shared_weak_count *v68;
  uint64_t *v69;
  std::__shared_weak_count_vtbl *v70;
  uint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *shared_owners;
  unint64_t shared_weak_owners;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  __int128 *v83;
  __int128 v84;
  void *v85;
  unint64_t *v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  unint64_t v97;
  void *v98;
  unint64_t v99;
  void *v100;
  void *v105;
  void *v106;
  void *v107;
  void *v108;
  unsigned int v109;
  int v111;
  void *v112;
  void *v113;
  const __CFString *v114;
  void *v115;
  void *v116;
  void *v117;
  unint64_t v118;
  std::string::pointer data;
  unint64_t *v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t *v123;
  unint64_t v124;
  std::__shared_weak_count *v125;
  uint64_t v126;
  unint64_t *v127;
  unint64_t v128;
  float v129;
  unint64_t *v130;
  unint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  unint64_t *v135;
  unint64_t v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  uint64_t v144;
  unsigned int v145;
  int *v146;
  _WORD *v147;
  int v148;
  __int128 v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  std::__shared_weak_count *v154;
  unint64_t *v155;
  unint64_t v156;
  uint64_t v157;
  int *v158;
  _WORD *v159;
  int v160;
  int v162;
  Espresso::ANECompilerEngine::compiler::build_state_t *v163;
  uint64_t v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  uint64_t v168;
  unint64_t *v169;
  unint64_t v170;
  void *v171;
  id v172;
  void *v173;
  void *v174;
  void *v175;
  void *v176;
  uint64_t weights_file_index;
  void *v178;
  void *v179;
  __int128 v180;
  unint64_t *v181;
  unint64_t v182;
  uint64_t v183;
  unint64_t *v184;
  unint64_t v185;
  void *v186;
  void *v187;
  void *v188;
  uint64_t v189;
  void *v190;
  void *v191;
  std::string *v192;
  std::string *v193;
  uint64_t v194;
  char v195;
  std::string::size_type size;
  std::string::size_type v197;
  uint64_t v198;
  unsigned __int8 *v199;
  std::string *v200;
  const std::string::value_type *v201;
  __int128 v202;
  __CFString *v203;
  std::string *v204;
  std::string *v205;
  unint64_t v206;
  unint64_t v207;
  unint64_t v208;
  uint64_t v209;
  std::__shared_weak_count *v210;
  unint64_t *v211;
  unint64_t v212;
  std::__shared_weak_count *v213;
  unint64_t *v214;
  unint64_t v215;
  std::__shared_weak_count *v216;
  unint64_t *v217;
  unint64_t v218;
  std::__shared_weak_count *v219;
  unint64_t *v220;
  unint64_t v221;
  unint64_t *v222;
  unint64_t v223;
  unint64_t *v224;
  unint64_t v225;
  unint64_t *v226;
  unint64_t v227;
  std::__shared_weak_count *v228;
  unint64_t *v229;
  unint64_t v230;
  std::__shared_weak_count *v231;
  unint64_t *v232;
  unint64_t v233;
  std::__shared_weak_count *v234;
  unint64_t *v235;
  unint64_t v236;
  std::__shared_weak_count *v237;
  unint64_t *v238;
  unint64_t v239;
  std::__shared_weak_count *v240;
  unint64_t *v241;
  unint64_t v242;
  std::__shared_weak_count *v243;
  unint64_t *v244;
  unint64_t v245;
  const char *v246;
  int *v247;
  uint64_t k;
  float v249;
  int v250;
  _WORD *v251;
  int v252;
  std::runtime_error *exception;
  int *v255;
  uint64_t m;
  int v257;
  int v258;
  unsigned int v259;
  unsigned int v260;
  int v261;
  Espresso *v262;
  const char *v263;
  float v264;
  NSObject *v266;
  double v267;
  uint64_t v268;
  _WORD *v269;
  int v270;
  void *lpsrc;
  std::__shared_weak_count *v273;
  unsigned int v274;
  _OWORD *v276;
  void *v277;
  std::__shared_weak_count *v279;
  std::__shared_weak_count *v280;
  std::string *v281;
  std::string *v282;
  unint64_t v283;
  std::string v284;
  _OWORD v285[3];
  __int128 v286;
  int v287;
  uint64_t v288;
  uint64_t v289;
  std::__shared_weak_count *v290;
  std::__shared_weak_count *v291;
  std::__shared_weak_count *v292;
  void *v293[8];
  __int128 v294;
  int v295;
  uint64_t v296;
  uint64_t v297;
  __int16 v298;
  char v299;
  _OWORD v300[3];
  uint64_t v301[9];
  std::string *v302;
  std::string *v303;
  unint64_t v304;
  char *v305;
  char *v306;
  unint64_t v307;
  char *v308;
  char *v309;
  unint64_t v310;
  uint64_t v311;
  std::__shared_weak_count *v312;
  void *v313;
  std::__shared_weak_count *v314;
  uint64_t v315;
  std::__shared_weak_count *v316;
  __int128 v317;
  uint64_t v318;
  std::__shared_weak_count *v319;
  __int128 v320;
  uint64_t v321;
  std::__shared_weak_count *v322;
  uint64_t v323[2];
  uint64_t v324;
  std::__shared_weak_count *v325;
  uint64_t v326;
  std::__shared_weak_count *v327;
  uint64_t v328;
  std::__shared_weak_count *v329;
  unsigned int v330;
  unsigned int v331;
  uint64_t v332;
  std::__shared_weak_count *v333;
  _BYTE buf[18];
  __int16 v335;
  int v336;
  __int16 v337;
  double v338;
  std::vector<std::string> v339;
  void *v340;
  char v341;
  id v342;
  __CFString *v343;
  id v344;
  std::string v345;
  char *v346;
  unint64_t *p_shared_weak_owners;
  _BYTE v348[32];
  void *v349;
  char v350;
  id v351;
  id v352;
  id v353;
  uint64_t v354;
  std::string __str;
  __int128 v356;
  uint64_t v357;

  v357 = *MEMORY[0x1E0C80C00];
  v316 = 0;
  v315 = 0;
  v4 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
  if (!v4 || (v316 = std::__shared_weak_count::lock(v4)) == 0 || (v5 = *((_QWORD *)a2 + 1), (v315 = v5) == 0))
  {
    v246 = "Inconsistent state: null network";
    goto LABEL_313;
  }
  if (!*(_QWORD *)(v5 + 576))
  {
    v246 = "Inconsistent state: blob_storage";
LABEL_313:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v246);
  }
  v6 = v5 + 136;
  v293[0] = *((void **)a3 + 6);
  v7 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v5 + 136, (unsigned __int8 *)v293[0], (__int128 **)v293);
  v8 = (std::__shared_weak_count *)*((_QWORD *)v7 + 6);
  lpsrc = (void *)*((_QWORD *)v7 + 5);
  v313 = lpsrc;
  v314 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v293[0] = a3;
  v11 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6, (unsigned __int8 *)a3, (__int128 **)v293);
  v276 = (_OWORD *)((char *)a3 + 48);
  v273 = v8;
  v12 = (std::__shared_weak_count *)*((_QWORD *)v11 + 6);
  v311 = *((_QWORD *)v11 + 5);
  v312 = v12;
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v309 = 0;
  v308 = 0;
  v310 = 0;
  v16 = (unsigned __int8 *)*((_QWORD *)a3 + 6);
  for (i = (unsigned __int8 *)*((_QWORD *)a3 + 7); v16 != i; v16 += 24)
  {
    v345.__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
    v17 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6, v16, (__int128 **)&v345);
    Espresso::abstract_blob_container::shape((char *)v293, *((_QWORD *)v17 + 5));
    v18 = v309;
    if ((unint64_t)v309 >= v310)
    {
      v21 = (v309 - v308) >> 6;
      v22 = v21 + 1;
      if ((unint64_t)(v21 + 1) >> 58)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v23 = v310 - (_QWORD)v308;
      if ((uint64_t)(v310 - (_QWORD)v308) >> 5 > v22)
        v22 = v23 >> 5;
      if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFC0)
        v24 = 0x3FFFFFFFFFFFFFFLL;
      else
        v24 = v22;
      p_shared_weak_owners = &v310;
      v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::layer_shape>>(v24);
      v26 = (std::string::size_type)&v25[64 * v21];
      v345.__r_.__value_.__r.__words[0] = (std::string::size_type)v25;
      v345.__r_.__value_.__l.__size_ = v26;
      v346 = &v25[64 * v27];
      v28 = *(_OWORD *)&v293[2];
      v29 = v293[4];
      *(_OWORD *)v26 = *(_OWORD *)v293;
      *(_OWORD *)(v26 + 16) = v28;
      *(_QWORD *)(v26 + 32) = v29;
      *(_QWORD *)(v26 + 40) = 0;
      *(_QWORD *)(v26 + 48) = 0;
      *(_QWORD *)(v26 + 56) = 0;
      *(_OWORD *)(v26 + 40) = *(_OWORD *)&v293[5];
      *(void **)(v26 + 56) = v293[7];
      memset(&v293[5], 0, 24);
      v345.__r_.__value_.__r.__words[2] = v26 + 64;
      std::vector<Espresso::layer_shape>::__swap_out_circular_buffer((uint64_t *)&v308, &v345);
      v30 = (__int128 *)v309;
      std::__split_buffer<Espresso::layer_shape>::~__split_buffer((uint64_t)&v345);
      v309 = (char *)v30;
      if (v293[5])
      {
        v293[6] = v293[5];
        operator delete(v293[5]);
      }
    }
    else
    {
      v19 = *(_OWORD *)&v293[2];
      v20 = v293[4];
      *(_OWORD *)v309 = *(_OWORD *)v293;
      *((_OWORD *)v18 + 1) = v19;
      *((_QWORD *)v18 + 4) = v20;
      *((_QWORD *)v18 + 5) = 0;
      *((_QWORD *)v18 + 6) = 0;
      *((_QWORD *)v18 + 7) = 0;
      *(_OWORD *)(v18 + 40) = *(_OWORD *)&v293[5];
      *((void **)v18 + 7) = v293[7];
      memset(&v293[5], 0, 24);
      v309 = v18 + 64;
    }
  }
  v306 = 0;
  v305 = 0;
  v307 = 0;
  v302 = 0;
  v303 = 0;
  v304 = 0;
  v303 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v302, (uint64_t)a3);
  v345.__r_.__value_.__r.__words[0] = (std::string::size_type)a3;
  v31 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6, (unsigned __int8 *)a3, (__int128 **)&v345);
  Espresso::abstract_blob_container::shape((char *)v293, *((_QWORD *)v31 + 5));
  v32 = v306;
  if ((unint64_t)v306 >= v307)
  {
    v35 = (v306 - v305) >> 6;
    v36 = v35 + 1;
    if ((unint64_t)(v35 + 1) >> 58)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v37 = v307 - (_QWORD)v305;
    if ((uint64_t)(v307 - (_QWORD)v305) >> 5 > v36)
      v36 = v37 >> 5;
    if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFC0)
      v38 = 0x3FFFFFFFFFFFFFFLL;
    else
      v38 = v36;
    p_shared_weak_owners = &v307;
    v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::layer_shape>>(v38);
    v40 = (std::string::size_type)&v39[64 * v35];
    v345.__r_.__value_.__r.__words[0] = (std::string::size_type)v39;
    v345.__r_.__value_.__l.__size_ = v40;
    v346 = &v39[64 * v41];
    v42 = *(_OWORD *)&v293[2];
    v43 = v293[4];
    *(_OWORD *)v40 = *(_OWORD *)v293;
    *(_OWORD *)(v40 + 16) = v42;
    *(_QWORD *)(v40 + 32) = v43;
    *(_QWORD *)(v40 + 40) = 0;
    *(_QWORD *)(v40 + 48) = 0;
    *(_QWORD *)(v40 + 56) = 0;
    *(_OWORD *)(v40 + 40) = *(_OWORD *)&v293[5];
    *(void **)(v40 + 56) = v293[7];
    memset(&v293[5], 0, 24);
    v345.__r_.__value_.__r.__words[2] = v40 + 64;
    std::vector<Espresso::layer_shape>::__swap_out_circular_buffer((uint64_t *)&v305, &v345);
    v44 = (__int128 *)v306;
    std::__split_buffer<Espresso::layer_shape>::~__split_buffer((uint64_t)&v345);
    v306 = (char *)v44;
    if (v293[5])
    {
      v293[6] = v293[5];
      operator delete(v293[5]);
    }
  }
  else
  {
    v33 = *(_OWORD *)&v293[2];
    v34 = v293[4];
    *(_OWORD *)v306 = *(_OWORD *)v293;
    *((_OWORD *)v32 + 1) = v33;
    *((_QWORD *)v32 + 4) = v34;
    *((_QWORD *)v32 + 5) = 0;
    *((_QWORD *)v32 + 6) = 0;
    *((_QWORD *)v32 + 7) = 0;
    *(_OWORD *)(v32 + 40) = *(_OWORD *)&v293[5];
    *((void **)v32 + 7) = v293[7];
    memset(&v293[5], 0, 24);
    v306 = v32 + 64;
  }
  v45 = *((_QWORD *)a3 + 3);
  for (j = *((_QWORD *)a3 + 4); v45 != j; v45 += 24)
  {
    v47 = v303;
    if ((unint64_t)v303 >= v304)
    {
      v49 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v302, v45);
    }
    else
    {
      if (*(char *)(v45 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v303, *(const std::string::value_type **)v45, *(_QWORD *)(v45 + 8));
      }
      else
      {
        v48 = *(_OWORD *)v45;
        v303->__r_.__value_.__r.__words[2] = *(_QWORD *)(v45 + 16);
        *(_OWORD *)&v47->__r_.__value_.__l.__data_ = v48;
      }
      v49 = v47 + 1;
    }
    v303 = v49;
    v345.__r_.__value_.__r.__words[0] = v45;
    v50 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6, (unsigned __int8 *)v45, (__int128 **)&v345);
    Espresso::abstract_blob_container::shape((char *)v293, *((_QWORD *)v50 + 5));
    v51 = v306;
    if ((unint64_t)v306 >= v307)
    {
      v54 = (v306 - v305) >> 6;
      v55 = v54 + 1;
      if ((unint64_t)(v54 + 1) >> 58)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v56 = v307 - (_QWORD)v305;
      if ((uint64_t)(v307 - (_QWORD)v305) >> 5 > v55)
        v55 = v56 >> 5;
      if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFC0)
        v57 = 0x3FFFFFFFFFFFFFFLL;
      else
        v57 = v55;
      p_shared_weak_owners = &v307;
      v58 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::layer_shape>>(v57);
      v59 = (std::string::size_type)&v58[64 * v54];
      v345.__r_.__value_.__r.__words[0] = (std::string::size_type)v58;
      v345.__r_.__value_.__l.__size_ = v59;
      v346 = &v58[64 * v60];
      v61 = *(_OWORD *)&v293[2];
      v62 = v293[4];
      *(_OWORD *)v59 = *(_OWORD *)v293;
      *(_OWORD *)(v59 + 16) = v61;
      *(_QWORD *)(v59 + 32) = v62;
      *(_QWORD *)(v59 + 40) = 0;
      *(_QWORD *)(v59 + 48) = 0;
      *(_QWORD *)(v59 + 56) = 0;
      *(_OWORD *)(v59 + 40) = *(_OWORD *)&v293[5];
      *(void **)(v59 + 56) = v293[7];
      memset(&v293[5], 0, 24);
      v345.__r_.__value_.__r.__words[2] = v59 + 64;
      std::vector<Espresso::layer_shape>::__swap_out_circular_buffer((uint64_t *)&v305, &v345);
      v63 = (__int128 *)v306;
      std::__split_buffer<Espresso::layer_shape>::~__split_buffer((uint64_t)&v345);
      v306 = (char *)v63;
      if (v293[5])
      {
        v293[6] = v293[5];
        operator delete(v293[5]);
      }
    }
    else
    {
      v52 = *(_OWORD *)&v293[2];
      v53 = v293[4];
      *(_OWORD *)v306 = *(_OWORD *)v293;
      *((_OWORD *)v51 + 1) = v52;
      *((_QWORD *)v51 + 4) = v53;
      *((_QWORD *)v51 + 5) = 0;
      *((_QWORD *)v51 + 6) = 0;
      *((_QWORD *)v51 + 7) = 0;
      *(_OWORD *)(v51 + 40) = *(_OWORD *)&v293[5];
      *((void **)v51 + 7) = v293[7];
      memset(&v293[5], 0, 24);
      v306 = v51 + 64;
    }
  }
  v295 = 0;
  v294 = 0u;
  memset(v293, 0, sizeof(v293));
  v296 = 0;
  v297 = 0;
  v298 = 0;
  v299 = 1;
  memset(v300, 0, sizeof(v300));
  memset(v301, 0, 64);
  std::operator+<char>();
  v64 = std::string::append(&v345, "_general_padding");
  v65 = (void *)v64->__r_.__value_.__r.__words[0];
  *(_QWORD *)buf = v64->__r_.__value_.__l.__size_;
  *(_QWORD *)&buf[7] = *(std::string::size_type *)((char *)&v64->__r_.__value_.__r.__words[1] + 7);
  v66 = HIBYTE(v64->__r_.__value_.__r.__words[2]);
  v64->__r_.__value_.__l.__size_ = 0;
  v64->__r_.__value_.__r.__words[2] = 0;
  v64->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v293[2]) < 0)
    operator delete(v293[0]);
  v293[0] = v65;
  v293[1] = *(void **)buf;
  *(void **)((char *)&v293[1] + 7) = *(void **)&buf[7];
  HIBYTE(v293[2]) = v66;
  if (SHIBYTE(v345.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v345.__r_.__value_.__l.__data_);
  MEMORY[0x19401C808](&v293[6], "general_padding");
  std::vector<Espresso::layer_shape>::__assign_with_size[abi:ne180100]<Espresso::layer_shape*,Espresso::layer_shape*>(v301, (__int128 *)v305, (__int128 *)v306, (v306 - v305) >> 6);
  std::vector<Espresso::layer_shape>::__assign_with_size[abi:ne180100]<Espresso::layer_shape*,Espresso::layer_shape*>(&v301[3], (__int128 *)v308, (__int128 *)v309, (v309 - v308) >> 6);
  std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)v300, v302, v303, 0xAAAAAAAAAAAAAAABLL * (((char *)v303 - (char *)v302) >> 3));
  if ((_OWORD *)((char *)&v300[1] + 8) != v276)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v300[1] + 8, *((std::string **)a3 + 6), *((std::string **)a3 + 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a3 + 7) - *((_QWORD *)a3 + 6)) >> 3));
  v67 = (std::__shared_weak_count *)operator new(0x70uLL);
  v68 = v67;
  v67->__shared_owners_ = 0;
  v67->__shared_weak_owners_ = 0;
  v67->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB7030;
  v67[1].std::__shared_count = 0u;
  v69 = (uint64_t *)&v67[1];
  *(_OWORD *)&v67[1].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v67[2].__shared_owners_ = 0u;
  v67[2].__vftable = (std::__shared_weak_count_vtbl *)&v67[2].__shared_owners_;
  v67[3].__shared_owners_ = 0;
  v67[3].__vftable = (std::__shared_weak_count_vtbl *)&v67[3].__shared_owners_;
  v67[4].__vftable = 0;
  v67[4].__shared_owners_ = 0;
  v67[3].__shared_weak_owners_ = 0;
  v291 = v67 + 1;
  v292 = v67;
  v70 = (std::__shared_weak_count_vtbl *)*((_QWORD *)a2 + 1);
  v71 = *((_QWORD *)a2 + 2);
  if (v71)
  {
    v72 = (unint64_t *)(v71 + 16);
    do
      v73 = __ldxr(v72);
    while (__stxr(v73 + 1, v72));
    shared_owners = (std::__shared_weak_count *)v67[4].__shared_owners_;
    v68[4].__vftable = v70;
    v68[4].__shared_owners_ = v71;
    if (shared_owners)
      std::__shared_weak_count::__release_weak(shared_owners);
  }
  else
  {
    v67[4].__vftable = v70;
    v67[4].__shared_owners_ = 0;
  }
  shared_weak_owners = v68[1].__shared_weak_owners_;
  v76 = v68[1].__shared_owners_;
  if (v76 >= shared_weak_owners)
  {
    v78 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v76 - *v69) >> 5);
    if ((unint64_t)(v78 + 1) > 0x124924924924924)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v79 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(shared_weak_owners - *v69) >> 5);
    v80 = 2 * v79;
    if (2 * v79 <= v78 + 1)
      v80 = v78 + 1;
    if (v79 >= 0x92492492492492)
      v81 = 0x124924924924924;
    else
      v81 = v80;
    p_shared_weak_owners = (unint64_t *)&v68[1].__shared_weak_owners_;
    if (v81)
      v81 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::kernel_info_t>>(v81);
    else
      v82 = 0;
    v345.__r_.__value_.__r.__words[0] = v81;
    v345.__r_.__value_.__l.__size_ = v81 + 224 * v78;
    v345.__r_.__value_.__r.__words[2] = v345.__r_.__value_.__l.__size_;
    v346 = (char *)(v81 + 224 * v82);
    Espresso::kernel_info_t::kernel_info_t((std::string *)v345.__r_.__value_.__l.__size_, (const Espresso::kernel_info_t *)v293);
    v345.__r_.__value_.__r.__words[2] += 224;
    std::vector<Espresso::kernel_info_t>::__swap_out_circular_buffer(v69, &v345);
    v77 = v68[1].__shared_owners_;
    std::__split_buffer<Espresso::kernel_info_t>::~__split_buffer((uint64_t)&v345);
  }
  else
  {
    Espresso::kernel_info_t::kernel_info_t((std::string *)v68[1].__shared_owners_, (const Espresso::kernel_info_t *)v293);
    v77 = v76 + 224;
    v68[1].__shared_owners_ = v76 + 224;
  }
  v68[1].__shared_owners_ = v77;
  v289 = 0;
  v290 = 0;
  v286 = 0u;
  memset(v285, 0, sizeof(v285));
  v287 = 1;
  v288 = 0;
  std::vector<Espresso::layer_shape>::__assign_with_size[abi:ne180100]<Espresso::layer_shape*,Espresso::layer_shape*>((uint64_t *)v285, (__int128 *)v308, (__int128 *)v309, (v309 - v308) >> 6);
  std::vector<Espresso::layer_shape>::__assign_with_size[abi:ne180100]<Espresso::layer_shape*,Espresso::layer_shape*>((uint64_t *)&v285[1] + 1, (__int128 *)v305, (__int128 *)v306, (v306 - v305) >> 6);
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v286, (uint64_t)v291, (uint64_t)v292);
  v287 = *((_DWORD *)this + 148);
  v288 = 0;
  v83 = *(__int128 **)v276;
  if (*(char *)(*(_QWORD *)v276 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v284, *(const std::string::value_type **)v83, *((_QWORD *)v83 + 1));
  }
  else
  {
    v84 = *v83;
    v284.__r_.__value_.__r.__words[2] = *((_QWORD *)v83 + 2);
    *(_OWORD *)&v284.__r_.__value_.__l.__data_ = v84;
  }
  v85 = (void *)objc_opt_new();
  if (lpsrc)
  {
    {
      if (v273)
      {
        v86 = (unint64_t *)&v273->__shared_owners_;
        do
          v87 = __ldxr(v86);
        while (__stxr(v87 + 1, v86));
        do
          v88 = __ldaxr(v86);
        while (__stlxr(v88 - 1, v86));
        if (!v88)
        {
          ((void (*)(std::__shared_weak_count *))v273->__on_zero_shared)(v273);
          std::__shared_weak_count::__release_weak(v273);
        }
      }
    }
  }
  if (*((_WORD *)this + 140))
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Unsupported padding mode.");
  v89 = *((__int16 *)this + 144);
  v90 = *((__int16 *)this + 145);
  v91 = *((__int16 *)this + 146);
  v92 = *((__int16 *)this + 147);
  v93 = *((__int16 *)this + 149);
  v94 = *((__int16 *)this + 148);
  if (v94 | v93)
    v95 = 3;
  else
    v95 = 2;
  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", v95);
  v277 = (void *)objc_claimAutoreleasedReturnValue();
  v96 = (void *)objc_opt_new();
  objc_msgSend(v96, "setObject:forKeyedSubscript:", CFSTR("Width"), CFSTR("Coordinate"));
  v97 = *((unsigned __int16 *)this + 141);
  if (v97 >= 4)
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Unexpected padding fill mode.");
  objc_msgSend(v96, "setObject:forKeyedSubscript:", *((_QWORD *)&off_1E2DD2048 + v97), CFSTR("PaddingMode"));
  objc_msgSend(v277, "setObject:atIndexedSubscript:", v96, 0);

  v98 = (void *)objc_opt_new();
  objc_msgSend(v98, "setObject:forKeyedSubscript:", CFSTR("Height"), CFSTR("Coordinate"));
  v99 = *((unsigned __int16 *)this + 141);
  if (v99 >= 4)
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Unexpected padding fill mode.");
  objc_msgSend(v98, "setObject:forKeyedSubscript:", *((_QWORD *)&off_1E2DD2048 + v99), CFSTR("PaddingMode"));
  objc_msgSend(v277, "setObject:atIndexedSubscript:", v98, 1);

  if (*((_WORD *)this + 141))
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithShort:", 0);
  }
  else
  {
    _S0 = *((_DWORD *)this + 71);
    __asm { FCVT            H0, S0 }
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithShort:", (__int16)_S0);
  }
  v100 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v85, "setObject:forKeyedSubscript:", v100, CFSTR("BackgroundValue"));

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v89);
  v105 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v85, "setObject:forKeyedSubscript:", v105, CFSTR("PadLeft"));

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v90);
  v106 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v85, "setObject:forKeyedSubscript:", v106, CFSTR("PadRight"));

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v91);
  v107 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v85, "setObject:forKeyedSubscript:", v107, CFSTR("PadTop"));

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v92);
  v108 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v85, "setObject:forKeyedSubscript:", v108, CFSTR("PadBot"));

  if (*((_QWORD *)&v285[0] + 1) == *(_QWORD *)&v285[0])
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  v109 = *(_DWORD *)(*(_QWORD *)&v285[0] + 20);
  if (v109 == -1)
  {
    if (*(_DWORD *)(*(_QWORD *)&v285[0] + 16) == 1)
      v109 = 4;
    else
      v109 = 5;
  }
  else if (v109 >= 6)
  {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Failed to determine 3d padding axis.");
  }
  _ZF = v109 != 5 || *(_BYTE *)(v315 + 1281) == 0;
  v111 = !_ZF;
  if (_ZF)
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v94);
    v115 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v85, "setObject:forKeyedSubscript:", v115, CFSTR("PadChannelFront"));

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v93);
    v116 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v85, "setObject:forKeyedSubscript:", v116, CFSTR("PadChannelBack"));

    objc_msgSend(v85, "setObject:forKeyedSubscript:", &unk_1E2DEDA90, CFSTR("PadFront"));
    v114 = CFSTR("PadBack");
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v94);
    v112 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v85, "setObject:forKeyedSubscript:", v112, CFSTR("PadFront"));

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v93);
    v113 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v85, "setObject:forKeyedSubscript:", v113, CFSTR("PadBack"));

    objc_msgSend(v85, "setObject:forKeyedSubscript:", &unk_1E2DEDA90, CFSTR("PadChannelFront"));
    v114 = CFSTR("PadChannelBack");
  }
  objc_msgSend(v85, "setObject:forKeyedSubscript:", &unk_1E2DEDA90, v114);
  objc_msgSend(v85, "setObject:forKeyedSubscript:", &unk_1E2DEDA90, CFSTR("PadBatchFront"));
  objc_msgSend(v85, "setObject:forKeyedSubscript:", &unk_1E2DEDA90, CFSTR("PadBatchBack"));
  if (v94 | v93)
  {
    if (v111)
    {
      v117 = (void *)objc_opt_new();
      objc_msgSend(v117, "setObject:forKeyedSubscript:", CFSTR("Depth"), CFSTR("Coordinate"));
      v118 = *((unsigned __int16 *)this + 141);
      if (v118 >= 4)
        Espresso::throw_exception_selector<Espresso::invalid_state_error>("Unexpected padding fill mode.");
    }
    else
    {
      v117 = (void *)objc_opt_new();
      objc_msgSend(v117, "setObject:forKeyedSubscript:", CFSTR("Channel"), CFSTR("Coordinate"));
      v118 = *((unsigned __int16 *)this + 141);
      if (v118 >= 4)
        Espresso::throw_exception_selector<Espresso::invalid_state_error>("Unexpected padding fill mode.");
    }
    objc_msgSend(v117, "setObject:forKeyedSubscript:", *((_QWORD *)&off_1E2DD2048 + v118), CFSTR("PaddingMode"));
    objc_msgSend(v277, "setObject:atIndexedSubscript:", v117, 2);

  }
  objc_msgSend(v85, "setObject:forKeyedSubscript:", v277, CFSTR("PaddingInfo"));
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v345.__r_.__value_.__l.__data_, (id *)a3);
  v281 = 0;
  v282 = 0;
  v283 = 0;
  *(_QWORD *)buf = &v281;
  buf[8] = 0;
  v281 = (std::string *)operator new(0x90uLL);
  v282 = v281;
  v283 = (unint64_t)&v281[6];
  v282 = (std::string *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>,Espresso::ANECompilerEngine::compiler::unit_t const*,Espresso::ANECompilerEngine::compiler::unit_t const*,Espresso::ANECompilerEngine::compiler::unit_t*>((uint64_t)&v283, (uint64_t)&v345, (uint64_t)&__str, (uint64_t)v281);

  if (v350 < 0)
    operator delete(v349);
  *(_QWORD *)buf = v348;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(_QWORD *)buf = &v346;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (SHIBYTE(v345.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v345.__r_.__value_.__l.__data_);
  data = v281[5].__r_.__value_.__l.__data_;
  v281[5].__r_.__value_.__r.__words[0] = (std::string::size_type)CFSTR("Padding");

  objc_storeStrong((id *)&v281[5].__r_.__value_.__l.__size_, v85);
  v280 = v316;
  if (v316)
  {
    v120 = (unint64_t *)&v316->__shared_owners_;
    do
      v121 = __ldxr(v120);
    while (__stxr(v121 + 1, v120));
  }
  v122 = v311;
  v279 = v312;
  if (v312)
  {
    v123 = (unint64_t *)&v312->__shared_owners_;
    do
      v124 = __ldxr(v123);
    while (__stxr(v124 + 1, v123));
  }
  Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t((Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)&v345);
  v353 = 0;
  v352 = 0;
  v354 = 0x100000000;
  v126 = *((_QWORD *)this + 53);
  v125 = (std::__shared_weak_count *)*((_QWORD *)this + 54);
  v332 = v126;
  v333 = v125;
  if (v125)
  {
    v127 = (unint64_t *)&v125->__shared_owners_;
    do
      v128 = __ldxr(v127);
    while (__stxr(v128 + 1, v127));
  }
  if (v126
    && !*(_BYTE *)((*(uint64_t (**)(char *))(*((_QWORD *)this + 45) + 104))((char *)this + 360) + 40))
  {
    v129 = *(float *)(v122 + 112);
    v324 = v126;
    v325 = v125;
    if (v125)
    {
      v130 = (unint64_t *)&v125->__shared_owners_;
      do
        v131 = __ldxr(v130);
      while (__stxr(v131 + 1, v130));
    }
    v132 = (std::__shared_weak_count *)*((_QWORD *)this + 56);
    v323[0] = *((_QWORD *)this + 55);
    v323[1] = (uint64_t)v132;
    if (v132)
    {
      v133 = (unint64_t *)&v132->__shared_owners_;
      do
        v134 = __ldxr(v133);
      while (__stxr(v134 + 1, v133));
    }
    Espresso::ane_style_post_scale_bias((uint64_t)&v324, v323, (uint64_t)&v326, v129);
    if (v132)
    {
      v135 = (unint64_t *)&v132->__shared_owners_;
      do
        v136 = __ldaxr(v135);
      while (__stlxr(v136 - 1, v135));
      if (!v136)
      {
        ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
        std::__shared_weak_count::__release_weak(v132);
      }
    }
    v137 = v325;
    if (v325)
    {
      v138 = (unint64_t *)&v325->__shared_owners_;
      do
        v139 = __ldaxr(v138);
      while (__stlxr(v139 - 1, v138));
      if (!v139)
      {
        ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
        std::__shared_weak_count::__release_weak(v137);
      }
    }
    v140 = v332;
    v141 = *(unsigned int *)(v332 + 8);
    std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v321, 2 * v141, 1, 1, 1);
    v142 = (int)v141;
    v320 = 0uLL;
    v143 = v141;
    v144 = *((_QWORD *)this + 55);
    if (v144)
      v143 = *(_DWORD *)(v144 + 8);
    if (!*((_BYTE *)a2 + 384))
    {
      Espresso::blob<unsigned char,1>::make(&__str, 4 * v141);
      v247 = *(int **)(__str.__r_.__value_.__r.__words[0] + 16);
      if ((int)v141 >= 1)
      {
        for (k = 0; k != v141; ++k)
        {
          v249 = *(float *)(*(_QWORD *)(v140 + 16) + k * 4);
          *(float *)&v250 = ldexp(1.0, -v330) * v249;
          v247[k] = v250;
        }
      }
      if ((_DWORD)v141)
      {
        v251 = *(_WORD **)(v321 + 16);
        do
        {
          v252 = *v247++;
          _S0 = v252;
          __asm { FCVT            H0, S0 }
          *v251++ = _S0;
          --v142;
        }
        while (v142);
      }
      v319 = 0;
      v318 = 0;
      if (*((_QWORD *)this + 55))
      {
        Espresso::blob<unsigned char,1>::make(buf, 4 * v143);
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)&v318, (__int128 *)buf);
        std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)buf);
        Espresso::blob<unsigned char,1>::make(buf, 2 * v143);
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)&v320, (__int128 *)buf);
        std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)buf);
        v255 = *(int **)(v318 + 16);
        if (v143 >= 1)
        {
          for (m = 0; m != v143; ++m)
          {
            if ((int)v141 - 1 >= (int)m)
              v257 = m;
            else
              v257 = v141 - 1;
            *(float *)&v258 = *(float *)(*(_QWORD *)(v328 + 16) + 4 * m)
                            * *(float *)(*(_QWORD *)(v326 + 16) + 4 * v257);
            v255[m] = v258;
            v259 = v331;
            v260 = v330;
            *(float *)&v261 = ldexp(1.0, v331 - v330) * *(float *)&v258;
            v255[m] = v261;
            v264 = ldexp(1.0, v260 - v259) * *(float *)&v261;
            if (v264 < -127.0 || v264 > 255.0)
            {
              Espresso::espresso_os_log_subsystem(v262, v263);
              v266 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v266, OS_LOG_TYPE_ERROR))
              {
                v267 = *(float *)&v255[m];
                *(_DWORD *)buf = 134218752;
                *(double *)&buf[4] = v264;
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v331;
                v335 = 1024;
                v336 = v330;
                v337 = 2048;
                v338 = v267;
                _os_log_error_impl(&dword_190DAF000, v266, OS_LOG_TYPE_ERROR, "[ANEC::add_ane_scale_bias_unit] Shifted bias overflowing shifted_b=%f acc_bias_shift=%d post_right_shift=%d anebias=%f", buf, 0x22u);
              }

            }
          }
        }
        if (v143)
        {
          v268 = v143;
          v269 = *(_WORD **)(v320 + 16);
          do
          {
            v270 = *v255++;
            _S0 = v270;
            __asm { FCVT            H0, S0 }
            *v269++ = _S0;
            --v268;
          }
          while (v268);
        }
      }
      exception = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
      Espresso::not_implemented_error::not_implemented_error(exception);
    }
    v145 = v331;
    if ((_DWORD)v141)
    {
      v146 = *(int **)(v326 + 16);
      v147 = *(_WORD **)(v321 + 16);
      do
      {
        v148 = *v146++;
        _S0 = v148;
        __asm { FCVT            H0, S0 }
        *v147++ = _S0;
        --v142;
      }
      while (v142);
    }
    if (v144)
    {
      std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(buf, 2 * v143, 1, 1, 1);
      v150 = *(_OWORD *)buf;
      *(_QWORD *)&buf[8] = 0;
      *(_QWORD *)buf = 0;
      v151 = (std::__shared_weak_count *)*((_QWORD *)&v320 + 1);
      v320 = v150;
      if (v151)
      {
        v152 = (unint64_t *)&v151->__shared_owners_;
        do
          v153 = __ldaxr(v152);
        while (__stlxr(v153 - 1, v152));
        if (!v153)
        {
          ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
          std::__shared_weak_count::__release_weak(v151);
        }
      }
      v154 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v155 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v156 = __ldaxr(v155);
        while (__stlxr(v156 - 1, v155));
        if (!v156)
        {
          ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
          std::__shared_weak_count::__release_weak(v154);
        }
      }
      if (v143)
      {
        v157 = v143;
        v158 = *(int **)(v328 + 16);
        v159 = *(_WORD **)(v320 + 16);
        do
        {
          v160 = *v158++;
          _S0 = v160;
          __asm { FCVT            H0, S0 }
          *v159++ = _S0;
          --v157;
        }
        while (v157);
      }
    }
    v162 = *((unsigned __int8 *)a2 + 552);
    v163 = (Espresso::ANECompilerEngine::compiler *)((char *)a2 + 128);
    v164 = v321;
    v165 = v322;
    v318 = v321;
    v319 = v322;
    if (v322)
    {
      v166 = (unint64_t *)&v322->__shared_owners_;
      do
        v167 = __ldxr(v166);
      while (__stxr(v167 + 1, v166));
    }
    v168 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v163, *(const unsigned __int8 **)(v164 + 16), *(int *)(v164 + 8));
    if (v165)
    {
      v169 = (unint64_t *)&v165->__shared_owners_;
      do
        v170 = __ldaxr(v169);
      while (__stlxr(v170 - 1, v169));
      if (!v170)
      {
        ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
        std::__shared_weak_count::__release_weak(v165);
      }
    }
    v274 = v145;
    v171 = (void *)objc_opt_new();
    if (*((_BYTE *)a2 + 121))
    {
      v172 = (id)v281[5].__r_.__value_.__l.__size_;

      v171 = v172;
    }
    v173 = (void *)objc_opt_new();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v141);
    v174 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v173, "setObject:forKeyedSubscript:", v174, CFSTR("ScaleCount"));

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v168);
    v175 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v173, "setObject:forKeyedSubscript:", v175, CFSTR("ScaleOffset"));

    v176 = (void *)MEMORY[0x1E0CB37E8];
    if (v162)
      weights_file_index = 0;
    else
    objc_msgSend(v176, "numberWithUnsignedLong:", weights_file_index);
    v178 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v173, "setObject:forKeyedSubscript:", v178, CFSTR("ScaleIndex"));

    objc_msgSend(v173, "setObject:forKeyedSubscript:", CFSTR("Float16"), CFSTR("ScaleType"));
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v330);
    v179 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v171, "setObject:forKeyedSubscript:", v179, CFSTR("ScaleShift"));

    if (*((_QWORD *)this + 55))
    {
      v180 = v320;
      v317 = v320;
      if (*((_QWORD *)&v320 + 1))
      {
        v181 = (unint64_t *)(*((_QWORD *)&v320 + 1) + 8);
        do
          v182 = __ldxr(v181);
        while (__stxr(v182 + 1, v181));
      }
      v183 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v163, *(const unsigned __int8 **)(v180 + 16), *(int *)(v180 + 8));
      if (*((_QWORD *)&v180 + 1))
      {
        v184 = (unint64_t *)(*((_QWORD *)&v180 + 1) + 8);
        do
          v185 = __ldaxr(v184);
        while (__stlxr(v185 - 1, v184));
        if (!v185)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v180 + 1) + 16))(*((_QWORD *)&v180 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v180 + 1));
        }
      }
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *(unsigned int *)(*((_QWORD *)this + 55) + 8));
      v186 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v173, "setObject:forKeyedSubscript:", v186, CFSTR("BiasCount"));

      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v183);
      v187 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v173, "setObject:forKeyedSubscript:", v187, CFSTR("BiasOffset"));

      v188 = (void *)MEMORY[0x1E0CB37E8];
      if (v162)
        v189 = 0;
      else
      objc_msgSend(v188, "numberWithUnsignedLong:", v189);
      v190 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v173, "setObject:forKeyedSubscript:", v190, CFSTR("BiasIndex"));

      objc_msgSend(v173, "setObject:forKeyedSubscript:", CFSTR("Float16"), CFSTR("BiasType"));
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v274);
      v191 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v171, "setObject:forKeyedSubscript:", v191, CFSTR("BiasShift"));

    }
    objc_msgSend(v171, "setObject:forKeyedSubscript:", v173, CFSTR("BiasScaleGroupData"));
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)buf, (id *)a3);
    v192 = v282;
    if (v282 == v281)
      goto LABEL_218;
    v193 = v282 - 6;
    v194 = HIBYTE(v282[-6].__r_.__value_.__r.__words[2]);
    v195 = v194;
    size = v282[-6].__r_.__value_.__l.__size_;
    if ((v194 & 0x80u) == 0)
      v197 = HIBYTE(v282[-6].__r_.__value_.__r.__words[2]);
    else
      v197 = v282[-6].__r_.__value_.__l.__size_;
    v198 = HIBYTE(v336);
    if (v336 < 0)
      v198 = *(_QWORD *)&buf[8];
    if (v197 != v198)
      goto LABEL_212;
    if (v336 >= 0)
      v199 = buf;
    else
      v199 = *(unsigned __int8 **)buf;
    if ((char)v194 < 0)
    {
      v201 = (const std::string::value_type *)v193->__r_.__value_.__r.__words[0];
      if (memcmp(v193->__r_.__value_.__l.__data_, v199, v282[-6].__r_.__value_.__l.__size_))
        goto LABEL_215;
    }
    else if ((_BYTE)v194)
    {
      v200 = v282 - 6;
      while (v200->__r_.__value_.__s.__data_[0] == *v199)
      {
        v200 = (std::string *)((char *)v200 + 1);
        ++v199;
        if (!--v194)
          goto LABEL_211;
      }
      goto LABEL_212;
    }
LABEL_211:
    std::string::append(v192 - 6, "__@pre_scale_bias");
    v195 = HIBYTE(v192[-6].__r_.__value_.__r.__words[2]);
LABEL_212:
    if ((v195 & 0x80) == 0)
    {
      v202 = *(_OWORD *)&v193->__r_.__value_.__l.__data_;
      __str.__r_.__value_.__r.__words[2] = v192[-6].__r_.__value_.__r.__words[2];
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v202;
      goto LABEL_216;
    }
    v201 = v192[-6].__r_.__value_.__l.__data_;
    size = v192[-6].__r_.__value_.__l.__size_;
LABEL_215:
    std::string::__init_copy_ctor_external(&__str, v201, size);
LABEL_216:
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v339, &__str, &v356, 1uLL);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
LABEL_218:
    v203 = v343;
    v343 = CFSTR("GOC");

    objc_storeStrong(&v344, v171);
    if (!*((_BYTE *)a2 + 121))
    {
      v204 = v282;
      if ((unint64_t)v282 >= v283)
      {
        v206 = 0x8E38E38E38E38E39 * (((char *)v282 - (char *)v281) >> 4);
        if (v206 + 1 > 0x1C71C71C71C71C7)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v207 = 0x1C71C71C71C71C72 * ((uint64_t)(v283 - (_QWORD)v281) >> 4);
        if (v207 <= v206 + 1)
          v207 = v206 + 1;
        if (0x8E38E38E38E38E39 * ((uint64_t)(v283 - (_QWORD)v281) >> 4) >= 0xE38E38E38E38E3)
          v208 = 0x1C71C71C71C71C7;
        else
          v208 = v207;
        *((_QWORD *)&v356 + 1) = &v283;
        if (v208)
          v208 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v208);
        else
          v209 = 0;
        __str.__r_.__value_.__r.__words[0] = v208;
        __str.__r_.__value_.__l.__size_ = v208 + 144 * v206;
        __str.__r_.__value_.__r.__words[2] = __str.__r_.__value_.__l.__size_;
        *(_QWORD *)&v356 = v208 + 144 * v209;
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)__str.__r_.__value_.__l.__size_, (uint64_t)buf);
        __str.__r_.__value_.__r.__words[2] += 144;
        std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer((uint64_t *)&v281, &__str);
        v205 = v282;
        std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&__str);
      }
      else
      {
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v282, (uint64_t)buf);
        v205 = v204 + 6;
      }
      v282 = v205;
    }

    if (v341 < 0)
      operator delete(v340);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v339;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v337;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
    if (SHIBYTE(v336) < 0)
      operator delete(*(void **)buf);

    v210 = (std::__shared_weak_count *)*((_QWORD *)&v320 + 1);
    if (*((_QWORD *)&v320 + 1))
    {
      v211 = (unint64_t *)(*((_QWORD *)&v320 + 1) + 8);
      do
        v212 = __ldaxr(v211);
      while (__stlxr(v212 - 1, v211));
      if (!v212)
      {
        ((void (*)(std::__shared_weak_count *))v210->__on_zero_shared)(v210);
        std::__shared_weak_count::__release_weak(v210);
      }
    }
    v213 = v322;
    if (v322)
    {
      v214 = (unint64_t *)&v322->__shared_owners_;
      do
        v215 = __ldaxr(v214);
      while (__stlxr(v215 - 1, v214));
      if (!v215)
      {
        ((void (*)(std::__shared_weak_count *))v213->__on_zero_shared)(v213);
        std::__shared_weak_count::__release_weak(v213);
      }
    }
    v216 = v329;
    if (v329)
    {
      v217 = (unint64_t *)&v329->__shared_owners_;
      do
        v218 = __ldaxr(v217);
      while (__stlxr(v218 - 1, v217));
      if (!v218)
      {
        ((void (*)(std::__shared_weak_count *))v216->__on_zero_shared)(v216);
        std::__shared_weak_count::__release_weak(v216);
      }
    }
    v219 = v327;
    if (v327)
    {
      v220 = (unint64_t *)&v327->__shared_owners_;
      do
        v221 = __ldaxr(v220);
      while (__stlxr(v221 - 1, v220));
      if (!v221)
      {
        ((void (*)(std::__shared_weak_count *))v219->__on_zero_shared)(v219);
        std::__shared_weak_count::__release_weak(v219);
      }
    }
    v125 = v333;
  }
  if (v125)
  {
    v222 = (unint64_t *)&v125->__shared_owners_;
    do
      v223 = __ldaxr(v222);
    while (__stlxr(v223 - 1, v222));
    if (!v223)
    {
      ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
      std::__shared_weak_count::__release_weak(v125);
    }
  }

  if (v350 < 0)
    operator delete(v349);
  *(_QWORD *)buf = v348;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(_QWORD *)buf = &v346;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (SHIBYTE(v345.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v345.__r_.__value_.__l.__data_);
  if (v279)
  {
    v224 = (unint64_t *)&v279->__shared_owners_;
    do
      v225 = __ldaxr(v224);
    while (__stlxr(v225 - 1, v224));
    if (!v225)
    {
      ((void (*)(std::__shared_weak_count *))v279->__on_zero_shared)(v279);
      std::__shared_weak_count::__release_weak(v279);
    }
  }
  if (v280)
  {
    v226 = (unint64_t *)&v280->__shared_owners_;
    do
      v227 = __ldaxr(v226);
    while (__stlxr(v227 - 1, v226));
    if (!v227)
    {
      ((void (*)(std::__shared_weak_count *))v280->__on_zero_shared)(v280);
      std::__shared_weak_count::__release_weak(v280);
    }
  }
  (*(void (**)(char *, Espresso::ANECompilerEngine::compiler *, std::string **))(*((_QWORD *)this + 45) + 32))((char *)this + 360, a2, &v281);
  v345.__r_.__value_.__r.__words[0] = (std::string::size_type)&v281;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&v345);

  if (SHIBYTE(v284.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v284.__r_.__value_.__l.__data_);
  v228 = (std::__shared_weak_count *)*((_QWORD *)&v286 + 1);
  if (*((_QWORD *)&v286 + 1))
  {
    v229 = (unint64_t *)(*((_QWORD *)&v286 + 1) + 8);
    do
      v230 = __ldaxr(v229);
    while (__stlxr(v230 - 1, v229));
    if (!v230)
    {
      ((void (*)(std::__shared_weak_count *))v228->__on_zero_shared)(v228);
      std::__shared_weak_count::__release_weak(v228);
    }
  }
  v345.__r_.__value_.__r.__words[0] = (std::string::size_type)&v285[1] + 8;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v345);
  v345.__r_.__value_.__r.__words[0] = (std::string::size_type)v285;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v345);
  v231 = v290;
  if (v290)
  {
    v232 = (unint64_t *)&v290->__shared_owners_;
    do
      v233 = __ldaxr(v232);
    while (__stlxr(v233 - 1, v232));
    if (!v233)
    {
      ((void (*)(std::__shared_weak_count *))v231->__on_zero_shared)(v231);
      std::__shared_weak_count::__release_weak(v231);
    }
  }
  v234 = v292;
  if (v292)
  {
    v235 = (unint64_t *)&v292->__shared_owners_;
    do
      v236 = __ldaxr(v235);
    while (__stlxr(v236 - 1, v235));
    if (!v236)
    {
      ((void (*)(std::__shared_weak_count *))v234->__on_zero_shared)(v234);
      std::__shared_weak_count::__release_weak(v234);
    }
  }
  Espresso::kernel_info_t::~kernel_info_t(v293);
  v293[0] = &v302;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v293);
  v293[0] = &v305;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v293);
  v293[0] = &v308;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v293);
  v237 = v312;
  if (v312)
  {
    v238 = (unint64_t *)&v312->__shared_owners_;
    do
      v239 = __ldaxr(v238);
    while (__stlxr(v239 - 1, v238));
    if (!v239)
    {
      ((void (*)(std::__shared_weak_count *))v237->__on_zero_shared)(v237);
      std::__shared_weak_count::__release_weak(v237);
    }
  }
  v240 = v314;
  if (v314)
  {
    v241 = (unint64_t *)&v314->__shared_owners_;
    do
      v242 = __ldaxr(v241);
    while (__stlxr(v242 - 1, v241));
    if (!v242)
    {
      ((void (*)(std::__shared_weak_count *))v240->__on_zero_shared)(v240);
      std::__shared_weak_count::__release_weak(v240);
    }
  }
  v243 = v316;
  if (v316)
  {
    v244 = (unint64_t *)&v316->__shared_owners_;
    do
      v245 = __ldaxr(v244);
    while (__stlxr(v245 - 1, v244));
    if (!v245)
    {
      ((void (*)(std::__shared_weak_count *))v243->__on_zero_shared)(v243);
      std::__shared_weak_count::__release_weak(v243);
    }
  }
}

void sub_1913998A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a72;
  void *v72;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  STACK[0x310] = (unint64_t)&a22;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x310]);

  if (a30 < 0)
    operator delete(__p);
  Espresso::base_kernel::validate_for_engine_args_t::~validate_for_engine_args_t(&a32);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a42);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a44);
  Espresso::kernel_info_t::~kernel_info_t((void **)&a46);
  a46 = (uint64_t)&a72;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a46);
  a46 = (uint64_t)&STACK[0x210];
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&a46);
  a46 = (uint64_t)&STACK[0x228];
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&a46);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x240]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x250]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x260]);
  _Unwind_Resume(a1);
}

uint64_t Espresso::ANECompilerEngine::general_padding_kernel::reflective_padding_requires_transform(Espresso::ANECompilerEngine::general_padding_kernel *this)
{
  return 1;
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::general_padding_kernel::compile(Espresso::ANECompilerEngine::general_padding_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
  Espresso::ANECompilerEngine::general_padding_kernel::compile((Espresso::ANECompilerEngine::general_padding_kernel *)((char *)this - 360), a2, a3);
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::general_padding_kernel::~general_padding_kernel(Espresso::ANECompilerEngine::general_padding_kernel *this)
{
  Espresso::base_kernel *v2;

  v2 = (Espresso::ANECompilerEngine::general_padding_kernel *)((char *)this - 360);
  *((_QWORD *)this - 45) = &off_1E2D7AC30;
  *(_QWORD *)this = &unk_1E2D7AD98;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 216);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((void **)this);
  Espresso::base_kernel::~base_kernel(v2);
}

{
  Espresso::base_kernel *v2;

  v2 = (Espresso::ANECompilerEngine::general_padding_kernel *)((char *)this - 360);
  *((_QWORD *)this - 45) = &off_1E2D7AC30;
  *(_QWORD *)this = &unk_1E2D7AD98;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 216);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((void **)this);
  Espresso::base_kernel::~base_kernel(v2);
  JUMPOUT(0x19401CD90);
}

void std::vector<Espresso::layer_shape>::__assign_with_size[abi:ne180100]<Espresso::layer_shape*,Espresso::layer_shape*>(uint64_t *a1, __int128 *a2, __int128 *a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  __int128 *v15;
  uint64_t v16;
  uint64_t i;
  void *v18;

  v8 = (uint64_t)(a1 + 2);
  v9 = *a1;
  if (a4 > (a1[2] - *a1) >> 6)
  {
    std::vector<Espresso::layer_shape>::__vdeallocate(a1);
    if (a4 >> 58)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v10 = a1[2] - *a1;
    v11 = v10 >> 5;
    if (v10 >> 5 <= a4)
      v11 = a4;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFC0)
      v12 = 0x3FFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    std::vector<Espresso::layer_shape>::__vallocate[abi:ne180100](a1, v12);
    v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape*,Espresso::layer_shape*,Espresso::layer_shape*>(v8, a2, a3, a1[1]);
    goto LABEL_11;
  }
  v14 = (a1[1] - v9) >> 6;
  if (v14 < a4)
  {
    v15 = &a2[4 * v14];
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<Espresso::layer_shape *,Espresso::layer_shape *,Espresso::layer_shape *>(a2, v15, v9);
    v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape*,Espresso::layer_shape*,Espresso::layer_shape*>(v8, v15, a3, a1[1]);
LABEL_11:
    a1[1] = v13;
    return;
  }
  v16 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<Espresso::layer_shape *,Espresso::layer_shape *,Espresso::layer_shape *>(a2, a3, v9);
  for (i = a1[1]; i != v16; i -= 64)
  {
    v18 = *(void **)(i - 24);
    if (v18)
    {
      *(_QWORD *)(i - 16) = v18;
      operator delete(v18);
    }
  }
  a1[1] = v16;
}

void sub_191399EA8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_191399EB0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::kernel_info_t>>(unint64_t a1)
{
  if (a1 >= 0x124924924924925)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(224 * a1);
}

void std::__shared_ptr_emplace<Espresso::net_info_ir_t>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB7030;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::net_info_ir_t>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB7030;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::vector<Espresso::kernel_info_t>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        Espresso::kernel_info_t::~kernel_info_t(v4 - 28);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<Espresso::layer_shape *,Espresso::layer_shape *,Espresso::layer_shape *>(__int128 *a1, __int128 *a2, uint64_t a3)
{
  __int128 *v5;
  __int128 v6;
  __int128 v7;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      v6 = *v5;
      v7 = v5[1];
      *(_QWORD *)(a3 + 32) = *((_QWORD *)v5 + 4);
      *(_OWORD *)a3 = v6;
      *(_OWORD *)(a3 + 16) = v7;
      if (v5 != (__int128 *)a3)
        std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)(a3 + 40), *((char **)v5 + 5), *((_QWORD *)v5 + 6), (uint64_t)(*((_QWORD *)v5 + 6) - *((_QWORD *)v5 + 5)) >> 2);
      v5 += 4;
      a3 += 64;
    }
    while (v5 != a2);
  }
  return a3;
}

void Espresso::ANECompilerEngine::tensor_zero_pad_kernel::~tensor_zero_pad_kernel(void **this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 69);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 69);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANECompilerEngine::tensor_zero_pad_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob((_QWORD *)(a1 + 552), a3, a4, a5);
}

std::__shared_weak_count *Espresso::ANECompilerEngine::tensor_zero_pad_kernel::is_valid_for_engine(uint64_t a1, int64x2_t **a2, uint64_t a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  int64x2_t *v34;
  unint64_t *v35;
  unint64_t v36;
  int64x2_t **v37;
  int64x2_t *v38;
  unint64_t *v39;
  unint64_t v40;
  int64x2_t *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  __int128 v48;
  uint64_t v49;
  std::string::size_type v50;
  int64x2_t *v51;
  unint64_t *v52;
  unint64_t v53;
  int64x2_t *v54;
  unint64_t *v55;
  unint64_t v56;
  int64x2_t *v57;
  unint64_t *v58;
  unint64_t v59;
  int64x2_t *v60;
  unint64_t *v61;
  unint64_t v62;
  int64x2_t *v63;
  unint64_t *v64;
  unint64_t v65;
  int64x2_t *v66;
  unint64_t *v67;
  unint64_t v68;
  _QWORD v69[2];
  _OWORD v70[2];
  uint64_t v71;
  void *__p;
  void *v73;
  uint64_t v74;
  int64x2_t *v75[2];
  int64x2_t *v76[2];
  int64x2_t *v77[2];
  int64x2_t *v78;
  std::__shared_weak_count *v79;
  int64x2_t *v80;
  std::__shared_weak_count *v81;
  int64x2_t *v82[2];
  int64x2_t *v83[2];
  int64x2_t *v84[2];
  int64x2_t *v85[2];
  int64x2_t *v86[2];
  __int128 v87;
  char v88;
  std::string v89;
  _BYTE v90[24];
  _BYTE v91[32];
  std::__shared_weak_count *v92;
  int64x2_t *v93;
  std::__shared_weak_count *v94;
  uint64_t v95;
  std::__shared_weak_count *v96;
  void **v97;

  v6 = *(_QWORD *)(a3 + 48);
  v95 = 0;
  v96 = 0;
  v7 = *(std::__shared_weak_count **)(v6 + 80);
  if (v7)
  {
    v96 = std::__shared_weak_count::lock(v7);
    if (v96)
      v95 = *(_QWORD *)(v6 + 72);
  }
  v8 = *(_QWORD *)a3;
  v9 = *(_QWORD *)(a3 + 8);
  if (*(_QWORD *)a3 == v9 || *(_QWORD *)(a3 + 24) == *(_QWORD *)(a3 + 32))
    goto LABEL_126;
  if (v9 - v8 == 64)
  {
    switch(*(_DWORD *)(v8 + 20))
    {
      case 0xFFFFFFFF:
        if (*(_DWORD *)(v8 + 16) != 1)
          goto LABEL_30;
        goto LABEL_9;
      case 1:
        if (*(_DWORD *)(a1 + 288) || *(_DWORD *)(a1 + 292))
        {
          v10 = 1;
          goto LABEL_64;
        }
        v54 = a2[1];
        v86[0] = *a2;
        v86[1] = v54;
        if (v54)
        {
          v55 = &v54->u64[1];
          do
            v56 = __ldxr(v55);
          while (__stxr(v56 + 1, v55));
        }
        std::string::basic_string[abi:ne180100]<0>(&v87, "tensor_zero_pad_kernel: no paddings in width/height");
        Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v89, &v87, a3, 0);
        Espresso::emit_kernel_validation_warning(v86, (Espresso::base_kernel::validate_for_engine_warning_t *)&v89);
        Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)&v89.__r_.__value_.__l.__data_);
        if (v88 < 0)
          operator delete((void *)v87);
        v37 = v86;
        goto LABEL_125;
      case 2:
        if (*(_DWORD *)(a1 + 288) || *(_DWORD *)(a1 + 292) || *(_DWORD *)(a1 + 296) || *(_DWORD *)(a1 + 300))
        {
          v10 = 2;
          goto LABEL_64;
        }
        v66 = a2[1];
        v85[0] = *a2;
        v85[1] = v66;
        if (v66)
        {
          v67 = &v66->u64[1];
          do
            v68 = __ldxr(v67);
          while (__stxr(v68 + 1, v67));
        }
        std::string::basic_string[abi:ne180100]<0>(&v87, "tensor_zero_pad_kernel: no paddings in width/height");
        Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v89, &v87, a3, 0);
        Espresso::emit_kernel_validation_warning(v85, (Espresso::base_kernel::validate_for_engine_warning_t *)&v89);
        Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)&v89.__r_.__value_.__l.__data_);
        if (v88 < 0)
          operator delete((void *)v87);
        v37 = v85;
        goto LABEL_125;
      case 3:
        if (*(_DWORD *)(a1 + 296) || *(_DWORD *)(a1 + 300) || *(_DWORD *)(a1 + 304) || *(_DWORD *)(a1 + 308))
        {
          v10 = 3;
          goto LABEL_64;
        }
        v63 = a2[1];
        v84[0] = *a2;
        v84[1] = v63;
        if (v63)
        {
          v64 = &v63->u64[1];
          do
            v65 = __ldxr(v64);
          while (__stxr(v65 + 1, v64));
        }
        std::string::basic_string[abi:ne180100]<0>(&v87, "tensor_zero_pad_kernel: no paddings in width/height");
        Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v89, &v87, a3, 0);
        Espresso::emit_kernel_validation_warning(v84, (Espresso::base_kernel::validate_for_engine_warning_t *)&v89);
        Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)&v89.__r_.__value_.__l.__data_);
        if (v88 < 0)
          operator delete((void *)v87);
        v37 = v84;
        goto LABEL_125;
      case 4:
LABEL_9:
        if (*(_DWORD *)(a1 + 304) || *(_DWORD *)(a1 + 308) || *(_DWORD *)(a1 + 312) || *(_DWORD *)(a1 + 316))
        {
          v10 = 4;
          goto LABEL_64;
        }
        v57 = a2[1];
        v83[0] = *a2;
        v83[1] = v57;
        if (v57)
        {
          v58 = &v57->u64[1];
          do
            v59 = __ldxr(v58);
          while (__stxr(v59 + 1, v58));
        }
        std::string::basic_string[abi:ne180100]<0>(&v87, "tensor_zero_pad_kernel: no paddings in width/height");
        Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v89, &v87, a3, 0);
        Espresso::emit_kernel_validation_warning(v83, (Espresso::base_kernel::validate_for_engine_warning_t *)&v89);
        Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)&v89.__r_.__value_.__l.__data_);
        if (v88 < 0)
          operator delete((void *)v87);
        v37 = v83;
        goto LABEL_125;
      case 5:
LABEL_30:
        if (!*(_DWORD *)(a1 + 312) && !*(_DWORD *)(a1 + 316) && !*(_DWORD *)(a1 + 320) && !*(_DWORD *)(a1 + 324))
        {
          v60 = a2[1];
          v82[0] = *a2;
          v82[1] = v60;
          if (v60)
          {
            v61 = &v60->u64[1];
            do
              v62 = __ldxr(v61);
            while (__stxr(v62 + 1, v61));
          }
          std::string::basic_string[abi:ne180100]<0>(&v87, "tensor_zero_pad_kernel: no paddings in width/height");
          Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v89, &v87, a3, 0);
          Espresso::emit_kernel_validation_warning(v82, (Espresso::base_kernel::validate_for_engine_warning_t *)&v89);
          Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)&v89.__r_.__value_.__l.__data_);
          if (v88 < 0)
            operator delete((void *)v87);
          v37 = v82;
          goto LABEL_125;
        }
        v10 = 5;
LABEL_64:
        if (*(_BYTE *)(a1 + 544)
          && (*(_DWORD *)(a1 + 288) && *(_DWORD *)(a1 + 292)
           || *(_DWORD *)(a1 + 296) && *(_DWORD *)(a1 + 300)
           || *(_DWORD *)(a1 + 304) && *(_DWORD *)(a1 + 308)
           || *(_DWORD *)(a1 + 312) && *(_DWORD *)(a1 + 316)
           || *(_DWORD *)(a1 + 320) && *(_DWORD *)(a1 + 324)))
        {
          v27 = (std::__shared_weak_count *)a2[1];
          v78 = *a2;
          v79 = v27;
          if (v27)
          {
            p_shared_owners = (unint64_t *)&v27->__shared_owners_;
            do
              v29 = __ldxr(p_shared_owners);
            while (__stxr(v29 + 1, p_shared_owners));
          }
          std::string::basic_string[abi:ne180100]<0>(&v87, "tensor_zero_pad_kernel: if pad_to_given_size_mode is True, only one pad value on a given dimension can be non-zero");
          Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v89, &v87, a3, 0);
          Espresso::emit_kernel_validation_warning(&v78, (Espresso::base_kernel::validate_for_engine_warning_t *)&v89);
          v30 = v92;
          if (v92)
          {
            v31 = (unint64_t *)&v92->__shared_owners_;
            do
              v32 = __ldaxr(v31);
            while (__stlxr(v32 - 1, v31));
            if (!v32)
            {
              ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
              std::__shared_weak_count::__release_weak(v30);
            }
          }
          v97 = (void **)v91;
          std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v97);
          v97 = (void **)v90;
          std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v97);
          if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v89.__r_.__value_.__l.__data_);
          if (v88 < 0)
            operator delete((void *)v87);
          v17 = v79;
          if (v79)
          {
            v33 = (unint64_t *)&v79->__shared_owners_;
            do
              v19 = __ldaxr(v33);
            while (__stlxr(v19 - 1, v33));
            goto LABEL_90;
          }
          goto LABEL_127;
        }
        if (v10 == 5)
        {
          if (*(_DWORD *)(a1 + 288)
            || *(_DWORD *)(a1 + 292)
            || *(_DWORD *)(a1 + 296)
            || *(_DWORD *)(a1 + 300)
            || *(_DWORD *)(a1 + 304)
            || *(_DWORD *)(a1 + 308))
          {
            v38 = a2[1];
            v75[0] = *a2;
            v75[1] = v38;
            if (v38)
            {
              v39 = &v38->u64[1];
              do
                v40 = __ldxr(v39);
              while (__stxr(v40 + 1, v39));
            }
            std::string::basic_string[abi:ne180100]<0>(&v87, "tensor_zero_pad_kernel: only l/r/t/b padding is supported");
            Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v89, &v87, a3, 0);
            Espresso::emit_kernel_validation_warning(v75, (Espresso::base_kernel::validate_for_engine_warning_t *)&v89);
            Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)&v89.__r_.__value_.__l.__data_);
            if (v88 < 0)
              operator delete((void *)v87);
            v37 = v75;
            goto LABEL_125;
          }
        }
        else if (v10 == 4)
        {
          if (*(_DWORD *)(a1 + 288) || *(_DWORD *)(a1 + 292) || *(_DWORD *)(a1 + 296) || *(_DWORD *)(a1 + 300))
          {
            v41 = a2[1];
            v76[0] = *a2;
            v76[1] = v41;
            if (v41)
            {
              v42 = &v41->u64[1];
              do
                v43 = __ldxr(v42);
              while (__stxr(v43 + 1, v42));
            }
            std::string::basic_string[abi:ne180100]<0>(&v87, "tensor_zero_pad_kernel: only l/r/t/b padding is supported");
            Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v89, &v87, a3, 0);
            Espresso::emit_kernel_validation_warning(v76, (Espresso::base_kernel::validate_for_engine_warning_t *)&v89);
            Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)&v89.__r_.__value_.__l.__data_);
            if (v88 < 0)
              operator delete((void *)v87);
            v37 = v76;
            goto LABEL_125;
          }
        }
        else if (v10 == 3 && (*(_DWORD *)(a1 + 288) || *(_DWORD *)(a1 + 292)))
        {
          v34 = a2[1];
          v77[0] = *a2;
          v77[1] = v34;
          if (v34)
          {
            v35 = &v34->u64[1];
            do
              v36 = __ldxr(v35);
            while (__stxr(v36 + 1, v35));
          }
          std::string::basic_string[abi:ne180100]<0>(&v87, "tensor_zero_pad_kernel: only l/r/t/b padding is supported");
          Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v89, &v87, a3, 0);
          Espresso::emit_kernel_validation_warning(v77, (Espresso::base_kernel::validate_for_engine_warning_t *)&v89);
          Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)&v89.__r_.__value_.__l.__data_);
          if (v88 < 0)
            operator delete((void *)v87);
          v37 = v77;
LABEL_125:
          std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v37);
          goto LABEL_126;
        }
        v48 = *(_OWORD *)(v8 + 16);
        v49 = *(_QWORD *)(v8 + 32);
        v70[0] = *(_OWORD *)v8;
        v70[1] = v48;
        v71 = v49;
        __p = 0;
        v73 = 0;
        v74 = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *(const void **)(v8 + 40), *(_QWORD *)(v8 + 48), (uint64_t)(*(_QWORD *)(v8 + 48) - *(_QWORD *)(v8 + 40)) >> 2);
        Espresso::ANECompilerEngine::tensor_zero_pad_kernel::decomposition_to_general_padding(&v89, a1 + 280, (uint64_t)v70, a1 + 8, *(_DWORD *)(a3 + 64));
        if (__p)
        {
          v73 = __p;
          operator delete(__p);
        }
        v50 = v89.__r_.__value_.__r.__words[0];
        v51 = a2[1];
        v69[0] = *a2;
        v69[1] = v51;
        if (v51)
        {
          v52 = &v51->u64[1];
          do
            v53 = __ldxr(v52);
          while (__stxr(v53 + 1, v52));
        }
        v17 = (std::__shared_weak_count *)(*(uint64_t (**)(std::string::size_type, _QWORD *, uint64_t))(*(_QWORD *)v50 + 200))(v50, v69, a3);
        std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v69);
        std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v89);
        goto LABEL_127;
      default:
        v20 = (std::__shared_weak_count *)a2[1];
        v80 = *a2;
        v81 = v20;
        if (v20)
        {
          v21 = (unint64_t *)&v20->__shared_owners_;
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        std::string::basic_string[abi:ne180100]<0>(&v87, "tensor_zero_pad_kernel: rank < 1 or > 5 is not is supported");
        Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v89, &v87, a3, 0);
        Espresso::emit_kernel_validation_warning(&v80, (Espresso::base_kernel::validate_for_engine_warning_t *)&v89);
        v23 = v92;
        if (v92)
        {
          v24 = (unint64_t *)&v92->__shared_owners_;
          do
            v25 = __ldaxr(v24);
          while (__stlxr(v25 - 1, v24));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v23);
          }
        }
        v97 = (void **)v91;
        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v97);
        v97 = (void **)v90;
        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v97);
        if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v89.__r_.__value_.__l.__data_);
        if (v88 < 0)
          operator delete((void *)v87);
        v17 = v81;
        if (!v81)
          goto LABEL_127;
        v26 = (unint64_t *)&v81->__shared_owners_;
        do
          v19 = __ldaxr(v26);
        while (__stlxr(v19 - 1, v26));
        goto LABEL_90;
    }
  }
  v11 = (std::__shared_weak_count *)a2[1];
  v93 = *a2;
  v94 = v11;
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  std::string::basic_string[abi:ne180100]<0>(&v87, "tensor_zero_pad_kernel: only one input is supported");
  Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v89, &v87, a3, 0);
  Espresso::emit_kernel_validation_warning(&v93, (Espresso::base_kernel::validate_for_engine_warning_t *)&v89);
  v14 = v92;
  if (v92)
  {
    v15 = (unint64_t *)&v92->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v97 = (void **)v91;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v97);
  v97 = (void **)v90;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v97);
  if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v89.__r_.__value_.__l.__data_);
  if (v88 < 0)
    operator delete((void *)v87);
  v17 = v94;
  if (v94)
  {
    v18 = (unint64_t *)&v94->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
LABEL_90:
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
LABEL_126:
    v17 = 0;
  }
LABEL_127:
  v44 = v96;
  if (v96)
  {
    v45 = (unint64_t *)&v96->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  return v17;
}

void sub_19139AA2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,char a27,uint64_t a28,char a29,uint64_t a30,char a31,uint64_t a32,char a33,uint64_t a34,char a35,uint64_t a36,char a37)
{
  uint64_t v37;

  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)(v37 - 200));
  if (*(char *)(v37 - 201) < 0)
    operator delete(*(void **)(v37 - 224));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a35);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v37 - 72);
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::tensor_zero_pad_kernel::compile(Espresso::ANECompilerEngine::tensor_zero_pad_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
  Espresso::throw_exception_selector<Espresso::invalid_state_error>("tensor_zero_pad should have been transformed to general_padding");
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::tensor_zero_pad_kernel::compile(Espresso::ANECompilerEngine::tensor_zero_pad_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
  Espresso::throw_exception_selector<Espresso::invalid_state_error>("tensor_zero_pad should have been transformed to general_padding");
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::tensor_zero_pad_kernel::~tensor_zero_pad_kernel(void **this)
{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 69);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
}

{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 69);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANECompilerEngine::tensor_zero_pad_kernel::decomposition_to_general_padding(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  __int128 v8;
  const void *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  int v17;
  void *v18[2];
  char v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  __int128 v22;
  _OWORD v23[2];
  uint64_t v24;
  void *__p;
  void *v26;
  uint64_t v27;
  _BYTE v28[20];
  int v29;

  v29 = a5;
  *a1 = 0;
  a1[1] = 0;
  v8 = *(_OWORD *)(a3 + 16);
  v23[0] = *(_OWORD *)a3;
  v23[1] = v8;
  v9 = *(const void **)(a3 + 40);
  v24 = *(_QWORD *)(a3 + 32);
  __p = 0;
  v26 = 0;
  v27 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v9, *(_QWORD *)(a3 + 48), (uint64_t)(*(_QWORD *)(a3 + 48) - (_QWORD)v9) >> 2);
  Espresso::ANECompilerEngine::tensor_zero_pad_kernel::get_padding_params((uint64_t)v28, a2, (uint64_t)v23);
  if (__p)
  {
    v26 = __p;
    operator delete(__p);
  }
  Espresso::abstract_engine_factory::shared(&v20);
  v10 = v20;
  std::string::basic_string[abi:ne180100]<0>(v18, "general_padding");
  v17 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a4 + 8))(*(_QWORD *)(*(_QWORD *)a4 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v10, a4, (uint64_t)v18, (uint64_t)v28, &v17);
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)a1, &v22);
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
  if (*((_QWORD *)&v22 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v19 < 0)
    operator delete(v18[0]);
  v14 = v21;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_19139AE9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

uint64_t Espresso::ANECompilerEngine::tensor_zero_pad_kernel::get_padding_params(uint64_t result, uint64_t a2, uint64_t a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;

  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  switch(*(_DWORD *)(a3 + 20))
  {
    case 0xFFFFFFFF:
      if (*(_DWORD *)(a3 + 16) != 1)
        goto LABEL_11;
      goto LABEL_3;
    case 1:
      v10 = *(_DWORD *)(a2 + 8);
      if (!*(_BYTE *)(a2 + 264))
      {
        *(_WORD *)(result + 8) = v10;
        v17 = *(_DWORD *)(a2 + 12);
        goto LABEL_41;
      }
      if (v10 >= 1)
        *(_WORD *)(result + 8) = v10 - *(_WORD *)a3;
      v6 = *(_DWORD *)(a2 + 12);
      goto LABEL_39;
    case 2:
      v11 = *(_DWORD *)(a2 + 8);
      if (!*(_BYTE *)(a2 + 264))
      {
        *(_WORD *)(result + 12) = v11;
        v20 = *(_DWORD *)(a2 + 16);
        *(_WORD *)(result + 14) = *(_DWORD *)(a2 + 12);
        *(_WORD *)(result + 8) = v20;
        v17 = *(_DWORD *)(a2 + 20);
        goto LABEL_41;
      }
      if (v11 >= 1)
        *(_WORD *)(result + 12) = v11 - *(_WORD *)(a3 + 4);
      v12 = *(_DWORD *)(a2 + 12);
      if (v12 >= 1)
        *(_WORD *)(result + 14) = v12 - *(_WORD *)(a3 + 4);
      v13 = *(_DWORD *)(a2 + 16);
      if (v13 >= 1)
        *(_WORD *)(result + 8) = v13 - *(_WORD *)a3;
      v6 = *(_DWORD *)(a2 + 20);
      goto LABEL_39;
    case 3:
      v14 = *(_DWORD *)(a2 + 16);
      if (!*(_BYTE *)(a2 + 264))
      {
        *(_WORD *)(result + 12) = v14;
        v21 = *(_DWORD *)(a2 + 24);
        *(_WORD *)(result + 14) = *(_DWORD *)(a2 + 20);
        *(_WORD *)(result + 8) = v21;
        v17 = *(_DWORD *)(a2 + 28);
        goto LABEL_41;
      }
      if (v14 >= 1)
        *(_WORD *)(result + 12) = v14 - *(_WORD *)(a3 + 4);
      v15 = *(_DWORD *)(a2 + 20);
      if (v15 >= 1)
        *(_WORD *)(result + 14) = v15 - *(_WORD *)(a3 + 4);
      v16 = *(_DWORD *)(a2 + 24);
      if (v16 >= 1)
        *(_WORD *)(result + 8) = v16 - *(_WORD *)a3;
      v6 = *(_DWORD *)(a2 + 28);
      goto LABEL_39;
    case 4:
LABEL_3:
      v3 = *(_DWORD *)(a2 + 24);
      if (!*(_BYTE *)(a2 + 264))
      {
        *(_WORD *)(result + 12) = v3;
        v18 = *(_DWORD *)(a2 + 32);
        *(_WORD *)(result + 14) = *(_DWORD *)(a2 + 28);
        *(_WORD *)(result + 8) = v18;
        v17 = *(_DWORD *)(a2 + 36);
        goto LABEL_41;
      }
      if (v3 >= 1)
        *(_WORD *)(result + 12) = v3 - *(_WORD *)(a3 + 4);
      v4 = *(_DWORD *)(a2 + 28);
      if (v4 >= 1)
        *(_WORD *)(result + 14) = v4 - *(_WORD *)(a3 + 4);
      v5 = *(_DWORD *)(a2 + 32);
      if (v5 >= 1)
        *(_WORD *)(result + 8) = v5 - *(_WORD *)a3;
      v6 = *(_DWORD *)(a2 + 36);
      goto LABEL_39;
    case 5:
LABEL_11:
      v7 = *(_DWORD *)(a2 + 32);
      if (!*(_BYTE *)(a2 + 264))
      {
        *(_WORD *)(result + 12) = v7;
        v19 = *(_DWORD *)(a2 + 40);
        *(_WORD *)(result + 14) = *(_DWORD *)(a2 + 36);
        *(_WORD *)(result + 8) = v19;
        v17 = *(_DWORD *)(a2 + 44);
        goto LABEL_41;
      }
      if (v7 >= 1)
        *(_WORD *)(result + 12) = v7 - *(_WORD *)(a3 + 4);
      v8 = *(_DWORD *)(a2 + 36);
      if (v8 >= 1)
        *(_WORD *)(result + 14) = v8 - *(_WORD *)(a3 + 4);
      v9 = *(_DWORD *)(a2 + 40);
      if (v9 >= 1)
        *(_WORD *)(result + 8) = v9 - *(_WORD *)a3;
      v6 = *(_DWORD *)(a2 + 44);
LABEL_39:
      if (v6 >= 1)
      {
        v17 = v6 - *(_DWORD *)a3;
LABEL_41:
        *(_WORD *)(result + 10) = v17;
      }
      return result;
    default:
      return result;
  }
}

void Espresso::ANECompilerEngine::upsample_kernel::~upsample_kernel(Espresso::ANECompilerEngine::upsample_kernel *this)
{
  void **v2;

  *(_QWORD *)this = &off_1E2D76680;
  v2 = (void **)((char *)this + 352);
  *((_QWORD *)this + 44) = &unk_1E2D767E0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 568);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);
  Espresso::base_kernel::~base_kernel(this);
}

{
  void **v2;

  *(_QWORD *)this = &off_1E2D76680;
  v2 = (void **)((char *)this + 352);
  *((_QWORD *)this + 44) = &unk_1E2D767E0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 568);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANECompilerEngine::upsample_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob((_QWORD *)(a1 + 352), a3, a4, a5);
}

void Espresso::ANECompilerEngine::upsample_kernel::compile(Espresso::ANECompilerEngine::upsample_kernel *this, Espresso::ANECompilerEngine::compiler *a2, void **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  char *v8;
  std::__shared_weak_count *v9;
  const void *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  char *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  float v17;
  float v18;
  void *v19;
  void *v20;
  int v21;
  void *v22;
  char v23;
  __CFString *v24;
  std::string *v25;
  std::string *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  void *v31;
  __CFString *v32;
  std::string *v33;
  std::string *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  const char *v47;
  void *v48[2];
  char v49;
  _BYTE v50[24];
  _BYTE v51[32];
  void *__p;
  char v53;
  id v54;
  __CFString *v55;
  id v56[2];
  char v57[8];
  void *v58;
  char v59;
  uint64_t v60;
  std::string *v61;
  _QWORD v62[4];
  std::__shared_weak_count *v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  void **v66;
  std::string *v67;
  std::string *v68;
  unint64_t v69;
  _QWORD *v70;

  v64 = 0;
  v65 = 0;
  v4 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
  if (!v4 || (v65 = std::__shared_weak_count::lock(v4)) == 0 || (v7 = *((_QWORD *)a2 + 1), (v64 = v7) == 0))
  {
    v47 = "Inconsistent state: null network";
    goto LABEL_83;
  }
  if (!*(_QWORD *)(v7 + 576))
  {
    v47 = "Inconsistent state: blob_storage";
LABEL_83:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v47);
  }
  v48[0] = a3[6];
  v8 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7 + 136, (unsigned __int8 *)v48[0], (__int128 **)v48);
  v10 = (const void *)*((_QWORD *)v8 + 5);
  v9 = (std::__shared_weak_count *)*((_QWORD *)v8 + 6);
  v62[3] = v10;
  v63 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v48[0] = a3;
  v13 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7 + 136, (unsigned __int8 *)a3, (__int128 **)v48);
  v14 = (std::__shared_weak_count *)*((_QWORD *)v13 + 6);
  v62[1] = *((_QWORD *)v13 + 5);
  v62[2] = v14;
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  if (*((_BYTE *)this + 304))
  {
    v17 = *((float *)this + 77);
    v18 = *((float *)this + 78);
  }
  else
  {
    v17 = (float)*((int *)this + 71);
    v18 = (float)*((int *)this + 72);
  }
  Espresso::ANECompilerEngine::ane_arch_allow_network_override(v7 + 472);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v60 = 0;
  v61 = 0;
  v62[0] = 0;
  if (v10)
  else
    v20 = 0;
  Espresso::ANECompilerEngine::upsample_kernel::anec_validate_upsample_step((uint64_t)v57, (uint64_t)this, v19, (uint64_t)v20 + 160, *((_DWORD *)this + 146), v17, v18);
  if (v57[0])
    goto LABEL_45;
  if ((Espresso::ANECompilerEngine::upsample_kernel::needs_nearest_pow2_workaround(this, (NSString *)v19) & 1) == 0)
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Workaround is needed but it is not available");
  if (!Espresso::ANECompilerEngine::upsample_kernel::needs_nearest_pow2_workaround(this, (NSString *)v19))
  {
LABEL_45:
    Espresso::ANECompilerEngine::upsample_kernel::create_anec_unit(this, v17, v18);
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t(v48, a3);
    v32 = v55;
    v55 = CFSTR("Resize");

    objc_storeStrong(v56, v31);
    v33 = v61;
    if ((unint64_t)v61 >= v62[0])
    {
      v35 = 0x8E38E38E38E38E39 * (((uint64_t)v61 - v60) >> 4);
      if (v35 + 1 > 0x1C71C71C71C71C7)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v36 = 0x1C71C71C71C71C72 * ((v62[0] - v60) >> 4);
      if (v36 <= v35 + 1)
        v36 = v35 + 1;
      if (0x8E38E38E38E38E39 * ((v62[0] - v60) >> 4) >= 0xE38E38E38E38E3)
        v37 = 0x1C71C71C71C71C7;
      else
        v37 = v36;
      v70 = v62;
      if (v37)
        v37 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v37);
      else
        v38 = 0;
      v66 = (void **)v37;
      v67 = (std::string *)(v37 + 144 * v35);
      v68 = v67;
      v69 = v37 + 144 * v38;
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v67, (uint64_t)v48);
      v68 += 6;
      std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v60, &v66);
      v34 = v61;
      std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&v66);
    }
    else
    {
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v61, (uint64_t)v48);
      v34 = v33 + 6;
    }
    v61 = v34;

    if (v53 < 0)
      operator delete(__p);
    v66 = (void **)v51;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v66);
    v66 = (void **)v50;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v66);
    if (v49 < 0)
      operator delete(v48[0]);

  }
  else
  {
    v21 = (int)v17;
    if ((int)v17 >= 2)
    {
      do
      {
        if ((v21 & 3) != 0)
        {
          if ((v21 & 1) != 0)
          {
            v22 = 0;
            goto LABEL_27;
          }
          Espresso::ANECompilerEngine::upsample_kernel::create_anec_unit(this, 2.0, 2.0);
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          v23 = 1;
        }
        else
        {
          Espresso::ANECompilerEngine::upsample_kernel::create_anec_unit(this, 4.0, 4.0);
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          v23 = 2;
        }
        v21 = v21 >> v23;
LABEL_27:
        Espresso::ANECompilerEngine::compiler::unit_t::unit_t(v48, a3);
        v24 = v55;
        v55 = CFSTR("Resize");

        objc_storeStrong(v56, v22);
        v25 = v61;
        if ((unint64_t)v61 >= v62[0])
        {
          v27 = 0x8E38E38E38E38E39 * (((uint64_t)v61 - v60) >> 4);
          v28 = v27 + 1;
          if (v27 + 1 > 0x1C71C71C71C71C7)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          if (0x1C71C71C71C71C72 * ((v62[0] - v60) >> 4) > v28)
            v28 = 0x1C71C71C71C71C72 * ((v62[0] - v60) >> 4);
          if (0x8E38E38E38E38E39 * ((v62[0] - v60) >> 4) >= 0xE38E38E38E38E3)
            v29 = 0x1C71C71C71C71C7;
          else
            v29 = v28;
          v70 = v62;
          if (v29)
            v29 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v29);
          else
            v30 = 0;
          v66 = (void **)v29;
          v67 = (std::string *)(v29 + 144 * v27);
          v68 = v67;
          v69 = v29 + 144 * v30;
          std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v67, (uint64_t)v48);
          v68 += 6;
          std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v60, &v66);
          v26 = v61;
          std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&v66);
        }
        else
        {
          std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v61, (uint64_t)v48);
          v26 = v25 + 6;
        }
        v61 = v26;

        if (v53 < 0)
          operator delete(__p);
        v66 = (void **)v51;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v66);
        v66 = (void **)v50;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v66);
        if (v49 < 0)
          operator delete(v48[0]);

      }
      while (v21 > 1);
    }
  }
  (*(void (**)(char *, Espresso::ANECompilerEngine::compiler *, uint64_t *))(*((_QWORD *)this + 44) + 32))((char *)this + 352, a2, &v60);
  if (v59 < 0)
    operator delete(v58);
  v48[0] = &v60;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)v48);

  if (v14)
  {
    v39 = (unint64_t *)&v14->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v41 = v63;
  if (v63)
  {
    v42 = (unint64_t *)&v63->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  v44 = v65;
  if (v65)
  {
    v45 = (unint64_t *)&v65->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
}

void sub_19139B820(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, char *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,char a37,uint64_t a38)
{
  void *v38;
  uint64_t v39;

  std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer(v39 - 144);
  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t((id *)&a12);

  if (a36 < 0)
    operator delete(__p);
  a12 = &a37;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v39 - 192);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v39 - 176);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v39 - 160);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::upsample_kernel::compile(Espresso::ANECompilerEngine::upsample_kernel *this, Espresso::ANECompilerEngine::compiler *a2, void **a3)
{
  Espresso::ANECompilerEngine::upsample_kernel::compile((Espresso::ANECompilerEngine::upsample_kernel *)((char *)this - 352), a2, a3);
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::upsample_kernel::~upsample_kernel(Espresso::ANECompilerEngine::upsample_kernel *this)
{
  Espresso::base_kernel *v2;

  v2 = (Espresso::ANECompilerEngine::upsample_kernel *)((char *)this - 352);
  *((_QWORD *)this - 44) = &off_1E2D76680;
  *(_QWORD *)this = &unk_1E2D767E0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 216);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((void **)this);
  Espresso::base_kernel::~base_kernel(v2);
}

{
  Espresso::base_kernel *v2;

  v2 = (Espresso::ANECompilerEngine::upsample_kernel *)((char *)this - 352);
  *((_QWORD *)this - 44) = &off_1E2D76680;
  *(_QWORD *)this = &unk_1E2D767E0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 216);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((void **)this);
  Espresso::base_kernel::~base_kernel(v2);
  JUMPOUT(0x19401CD90);
}

uint64_t Espresso::ANECompilerEngine::upsample_kernel::needs_nearest_pow2_workaround(Espresso::ANECompilerEngine::upsample_kernel *this, NSString *a2)
{
  uint64_t result;
  int32x2_t v4;

  result = Espresso::ANECompilerEngine::is_mix_e((Espresso::ANECompilerEngine *)a2, a2);
  if ((_DWORD)result)
  {
    if (*((_BYTE *)this + 304))
      return 0;
    *(float *)v4.i32 = (float)*((int *)this + 71);
    return (vmaxv_u16((uint16x4_t)vmovn_s32(vceqq_f32((float32x4_t)vdupq_lane_s32(v4, 0), (float32x4_t)xmmword_191A93440))) & 1) != 0
        && *(float *)v4.i32 == (float)*((int *)this + 72)
        && *((_DWORD *)this + 73) == 0;
  }
  return result;
}

id Espresso::ANECompilerEngine::upsample_kernel::create_anec_unit(Espresso::ANECompilerEngine::upsample_kernel *this, float a2, float a3)
{
  void *v6;
  double v7;
  void *v8;
  double v9;
  void *v10;
  void *v11;
  const __CFString *v12;
  void *v13;
  const __CFString *v14;
  void *v15;
  int v16;
  void *v17;
  void *v18;
  void *v19;
  const __CFString *v20;
  const __CFString *v21;
  const __CFString *v22;
  _QWORD v24[2];
  _QWORD v25[2];
  _QWORD v26[2];
  _QWORD v27[3];

  v27[2] = *MEMORY[0x1E0C80C00];
  v6 = (void *)objc_opt_new();
  *(float *)&v7 = a2;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setObject:forKeyedSubscript:", v8, CFSTR("ScaleFactorX"));

  *(float *)&v9 = a3;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setObject:forKeyedSubscript:", v10, CFSTR("ScaleFactorY"));

  v11 = (void *)objc_opt_new();
  objc_msgSend(v11, "setObject:forKeyedSubscript:", CFSTR("Height"), CFSTR("Coordinate"));
  if (*((_DWORD *)this + 73))
    v12 = CFSTR("Linear");
  else
    v12 = CFSTR("NearestNeighbor");
  objc_msgSend(v11, "setObject:forKeyedSubscript:", v12, CFSTR("SamplingMethod"));
  v13 = (void *)objc_opt_new();
  objc_msgSend(v13, "setObject:forKeyedSubscript:", CFSTR("Width"), CFSTR("Coordinate"));
  if (*((_DWORD *)this + 73))
    v14 = CFSTR("Linear");
  else
    v14 = CFSTR("NearestNeighbor");
  objc_msgSend(v13, "setObject:forKeyedSubscript:", v14, CFSTR("SamplingMethod"));
  v27[0] = v11;
  v27[1] = v13;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v27, 2);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setObject:forKeyedSubscript:", v15, CFSTR("SamplingMethodInfo"));
  v16 = *((_DWORD *)this + 73);
  if (!v16)
  {
    v17 = (void *)objc_opt_new();
    v18 = (void *)objc_opt_new();
    if (a2 == 2.0 && a3 == 2.0 || a2 == 3.0 && a3 == 3.0 || a2 == 4.0 && a3 == 4.0)
    {
      v20 = CFSTR("UnalignedCorners");
      objc_msgSend(v17, "setObject:forKeyedSubscript:", CFSTR("UnalignedCorners"), CFSTR("SamplingGridMode"));
    }
    else if (*((_BYTE *)this + 316))
    {
      v20 = CFSTR("OffsetDefault");
      objc_msgSend(v17, "setObject:forKeyedSubscript:", CFSTR("OffsetDefault"), CFSTR("SamplingGridMode"));
    }
    else
    {
      v20 = CFSTR("OffsetDefaultWithNominalScale");
      objc_msgSend(v17, "setObject:forKeyedSubscript:", CFSTR("OffsetDefaultWithNominalScale"), CFSTR("SamplingGridMode"));
    }
    objc_msgSend(v18, "setObject:forKeyedSubscript:", v20, CFSTR("SamplingGridMode"));
    objc_msgSend(v17, "setObject:forKeyedSubscript:", CFSTR("Height"), CFSTR("Coordinate"));
    objc_msgSend(v18, "setObject:forKeyedSubscript:", CFSTR("Width"), CFSTR("Coordinate"));
    v26[0] = v17;
    v26[1] = v18;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v26, 2);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", v19, CFSTR("SamplingGridInfo"));
    goto LABEL_26;
  }
  if (*((_DWORD *)this + 75) == 1)
  {
    v17 = (void *)objc_opt_new();
    v18 = (void *)objc_opt_new();
    objc_msgSend(v17, "setObject:forKeyedSubscript:", CFSTR("Height"), CFSTR("Coordinate"));
    objc_msgSend(v18, "setObject:forKeyedSubscript:", CFSTR("Width"), CFSTR("Coordinate"));
    objc_msgSend(v18, "setObject:forKeyedSubscript:", CFSTR("Default"), CFSTR("SamplingGridMode"));
    objc_msgSend(v17, "setObject:forKeyedSubscript:", CFSTR("Default"), CFSTR("SamplingGridMode"));
    v25[0] = v17;
    v25[1] = v18;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v25, 2);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", v19, CFSTR("SamplingGridInfo"));
LABEL_26:

    goto LABEL_27;
  }
  if (v16 == 1)
  {
    v17 = (void *)objc_opt_new();
    v18 = (void *)objc_opt_new();
    objc_msgSend(v17, "setObject:forKeyedSubscript:", CFSTR("Height"), CFSTR("Coordinate"));
    objc_msgSend(v18, "setObject:forKeyedSubscript:", CFSTR("Width"), CFSTR("Coordinate"));
    if (*((_DWORD *)this + 74))
      v21 = CFSTR("AlignedCorners");
    else
      v21 = CFSTR("UnalignedCorners");
    objc_msgSend(v17, "setObject:forKeyedSubscript:", v21, CFSTR("SamplingGridMode"));
    if (*((_DWORD *)this + 74))
      v22 = CFSTR("AlignedCorners");
    else
      v22 = CFSTR("UnalignedCorners");
    objc_msgSend(v18, "setObject:forKeyedSubscript:", v22, CFSTR("SamplingGridMode"));
    v24[0] = v17;
    v24[1] = v18;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v24, 2);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", v19, CFSTR("SamplingGridInfo"));
    goto LABEL_26;
  }
LABEL_27:

  return v6;
}

void sub_19139BE84(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v8 = v7;

  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::violations_from_alternates<ANECResizeLayerDescAlternate>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  CFTypeRef *v7;
  unint64_t *v8;
  unint64_t v9;
  CFTypeRef *v10;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a2)
  {
    v6 = 0;
    v7 = (CFTypeRef *)(a3 + 8);
    do
    {
      v8 = (unint64_t *)(a3 + 664 * v6);
      if (*v8)
      {
        v9 = 0;
        v10 = v7;
        do
        {
          std::__hash_table<__CFString const*,Espresso::ANECompilerEngine::CFStringHasher,Espresso::ANECompilerEngine::CFStringEqualWrapper,std::allocator<__CFString const*>>::__emplace_unique_key_args<__CFString const*,__CFString const* const&>((float *)a1, v10, v10);
          ++v9;
          ++v10;
        }
        while (v9 < *v8);
      }
      ++v6;
      v7 += 83;
    }
    while (v6 != a2);
  }
}

void sub_19139C018(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::load_constant_kernel::~load_constant_kernel(void **this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 48);
  Espresso::generic_load_constant_kernel::~generic_load_constant_kernel((Espresso::generic_load_constant_kernel *)this);
}

{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 48);
  Espresso::generic_load_constant_kernel::~generic_load_constant_kernel((Espresso::generic_load_constant_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANECompilerEngine::load_constant_kernel::__set_weight_raw_blob(_QWORD *a1, uint64_t a2, unsigned __int8 **a3, void *a4, unint64_t a5, uint64_t *a6)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  double v15;
  double v16;
  int32x2_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20[2];
  __int128 v21[2];
  void *__p;
  void *v23;

  Espresso::generic_load_constant_kernel::__set_weight_raw_blob((uint64_t)a1, a2, (uint64_t)a3, a4, a5, a6);
  (*(void (**)(__int128 *__return_ptr, _QWORD *))(a1[48] + 128))(v21, a1 + 48);
  v11 = (std::__shared_weak_count *)a1[2];
  v20[0] = a1[1];
  v20[1] = (uint64_t)v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  v14 = (*(uint64_t (**)(_QWORD *))(a1[48] + 136))(a1 + 48);
  Espresso::set_conv_quantized_weight_helper(v15, v16, v17, v14, a3, (char *)a4, a5, a6, (uint64_t)(a1 + 41), v21, v20, v14, 1);
  if (v11)
  {
    v18 = (unint64_t *)&v11->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
  {
    v23 = __p;
    operator delete(__p);
  }
  Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob(a1 + 48, (uint64_t *)a3, a4, a5);
}

void sub_19139C1B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t Espresso::ANECompilerEngine::load_constant_kernel::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  if ((Espresso::generic_load_constant_kernel::supports_weight_key(a1, a2) & 1) != 0
    || Espresso::weight_key_supported_by_conv_quantized_weights_helper(a2, 1))
  {
    return 1;
  }
  else
  {
    return Espresso::ANECompilerEngine::ane_kernel::supports_weight_key(a2);
  }
}

const char *Espresso::generic_load_constant_kernel::kernel_type_str(Espresso::generic_load_constant_kernel *this)
{
  return "load_constant";
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::load_constant_params,Espresso::abstract_kernel_with_weights_>::get_params(uint64_t a1)
{
  return a1 + 304;
}

void Espresso::ANECompilerEngine::load_constant_kernel::compile(Espresso::ANECompilerEngine::load_constant_kernel *this, Espresso::ANECompilerEngine::compiler *a2, std::string *a3)
{
  uint64_t v4;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t *v10;
  char v11;
  size_t size;
  std::string *v13;
  uint64_t v14;
  uint64_t v15;
  const void **v16;
  std::string *v17;
  char *v18;
  void **v19;
  std::string *v20;
  size_t v21;
  std::string *v22;
  std::string *v23;
  void **v24;
  char *v25;
  uint64_t **v26;
  void *v27;
  void *v28;
  void *v29;
  size_t v30;
  std::string *v31;
  std::string *v32;
  __CFString *v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  void *v43[2];
  uint64_t v44;
  uint64_t v45;
  std::vector<std::string> v46;
  void *__p;
  char v48;
  id v49;
  __CFString *v50;
  id v51[2];
  __int128 __str;
  __int128 __str_16;
  std::__shared_weak_count *v54;
  _BYTE v55[16];
  uint64_t *v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  void **v59;
  char v60;
  std::string v61;
  __int128 v62;
  void *v63[6];
  char v64;
  id v65;
  __CFString *v66;
  id v67;
  id v68;
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)this + 43);
  if (!v4)
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Missing constant_blob for load_constant");
  v57 = 0;
  v58 = 0;
  v43[0] = 0;
  v43[1] = 0;
  (*(void (**)(uint64_t, void **, uint64_t *))(*(_QWORD *)v4 + 40))(v4, v43, &v57);
  v7 = (std::__shared_weak_count *)v43[1];
  if (v43[1])
  {
    v8 = (unint64_t *)((char *)v43[1] + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  std::unordered_set<std::string>::unordered_set((uint64_t)v55, *((_QWORD *)a2 + 4) + 120 * SLODWORD(a3[3].__r_.__value_.__l.__data_) + 56);
  v10 = v56;
  if (!v56)
  {
LABEL_26:
    v54 = 0;
    __str = 0u;
    __str_16 = 0u;
    std::string::operator=((std::string *)&__str, a3);
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)&__str_16 + 1, v57, (uint64_t)v58);
    v43[0] = a3;
    v18 = std::__tree<std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a2 + 34, a3, (__int128 **)v43);
    std::string::operator=((std::string *)(v18 + 56), (const std::string *)&__str);
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v18 + 10, *((uint64_t *)&__str_16 + 1), (uint64_t)v54);
    goto LABEL_71;
  }
  v11 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
  if (v11 >= 0)
    size = HIBYTE(a3->__r_.__value_.__r.__words[2]);
  else
    size = a3->__r_.__value_.__l.__size_;
  if (v11 >= 0)
    v13 = a3;
  else
    v13 = (std::string *)a3->__r_.__value_.__r.__words[0];
  while (1)
  {
    v14 = *((unsigned __int8 *)v10 + 39);
    if ((v14 & 0x80u) == 0)
      v15 = *((unsigned __int8 *)v10 + 39);
    else
      v15 = v10[3];
    if (v15 != size)
      goto LABEL_25;
    v16 = (const void **)(v10 + 2);
    if ((v14 & 0x80) != 0)
      break;
    if (!*((_BYTE *)v10 + 39))
      goto LABEL_27;
    v17 = v13;
    while (*(unsigned __int8 *)v16 == v17->__r_.__value_.__s.__data_[0])
    {
      v16 = (const void **)((char *)v16 + 1);
      v17 = (std::string *)((char *)v17 + 1);
      if (!--v14)
        goto LABEL_27;
    }
LABEL_25:
    v10 = (uint64_t *)*v10;
    if (!v10)
      goto LABEL_26;
  }
  if (memcmp(*v16, v13, v10[3]))
    goto LABEL_25;
LABEL_27:
  v54 = 0;
  __str = 0u;
  __str_16 = 0u;
  v19 = v43;
  std::string::basic_string[abi:ne180100]((uint64_t)v43, size + 17);
  if (v44 < 0)
    v19 = (void **)v43[0];
  if (size)
  {
    if ((a3->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v20 = a3;
    else
      v20 = (std::string *)a3->__r_.__value_.__r.__words[0];
    memmove(v19, v20, size);
  }
  strcpy((char *)v19 + size, "___constoutput___");
  if (SBYTE7(__str_16) < 0)
    operator delete((void *)__str);
  __str = *(_OWORD *)v43;
  *(_QWORD *)&__str_16 = v44;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)&__str_16 + 1, v57, (uint64_t)v58);
  if ((a3->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v21 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
  else
    v21 = a3->__r_.__value_.__l.__size_;
  v22 = &v61;
  std::string::basic_string[abi:ne180100]((uint64_t)&v61, v21 + 17);
  if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v22 = (std::string *)v61.__r_.__value_.__r.__words[0];
  if (v21)
  {
    if ((a3->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v23 = a3;
    else
      v23 = (std::string *)a3->__r_.__value_.__r.__words[0];
    memmove(v22, v23, v21);
  }
  strcpy((char *)v22 + v21, "___constoutput___");
  v24 = (void **)std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__find_equal<std::string>((uint64_t)a2 + 272, &v40, &v61);
  v25 = (char *)*v24;
  if (!*v24)
  {
    v26 = (uint64_t **)v24;
    v25 = (char *)operator new(0x60uLL);
    v43[1] = (char *)a2 + 280;
    *(std::string *)(v25 + 32) = v61;
    memset(&v61, 0, sizeof(v61));
    *(_OWORD *)(v25 + 56) = 0u;
    *(_OWORD *)(v25 + 72) = 0u;
    *((_QWORD *)v25 + 11) = 0;
    LOBYTE(v44) = 1;
    std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at((uint64_t **)a2 + 34, (uint64_t)v40, v26, (uint64_t *)v25);
    v43[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>,void *>>>>::reset[abi:ne180100]((uint64_t)v43);
  }
  std::string::operator=((std::string *)(v25 + 56), (const std::string *)&__str);
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v25 + 10, *((uint64_t *)&__str_16 + 1), (uint64_t)v54);
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v61.__r_.__value_.__l.__data_);
  v27 = (void *)objc_opt_new();
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithShort:", 15360);
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v27, "setObject:forKeyedSubscript:", v28, CFSTR("ScaleScalar"));

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithShort:", 0);
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v27, "setObject:forKeyedSubscript:", v29, CFSTR("BiasScalar"));

  objc_msgSend(v27, "removeObjectForKey:", CFSTR("BiasScaleGroupData"));
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t(v43, (id *)&a3->__r_.__value_.__l.__data_);
  if ((a3->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v30 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
  else
    v30 = a3->__r_.__value_.__l.__size_;
  v31 = &v61;
  std::string::basic_string[abi:ne180100]((uint64_t)&v61, v30 + 17);
  if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v31 = (std::string *)v61.__r_.__value_.__r.__words[0];
  if (v30)
  {
    if ((a3->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v32 = a3;
    else
      v32 = (std::string *)a3->__r_.__value_.__r.__words[0];
    memmove(v31, v32, v30);
  }
  strcpy((char *)v31 + v30, "___constoutput___");
  std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v46, &v61, &v62, 1uLL);
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v61.__r_.__value_.__l.__data_);
  v33 = v50;
  v50 = CFSTR("GOC");

  objc_storeStrong(v51, v27);
  Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t(&v61, (const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)v43);
  v66 = v50;
  v67 = v51[0];
  v68 = v51[1];
  v41 = 0;
  v42 = 0;
  v40 = 0;
  v59 = (void **)&v40;
  v60 = 0;
  v40 = (char *)operator new(0x90uLL);
  v41 = (uint64_t)v40;
  v42 = v40 + 144;
  v41 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>,Espresso::ANECompilerEngine::compiler::unit_t const*,Espresso::ANECompilerEngine::compiler::unit_t const*,Espresso::ANECompilerEngine::compiler::unit_t*>((uint64_t)&v42, (uint64_t)&v61, (uint64_t)&v69, (uint64_t)v40);

  if (v64 < 0)
    operator delete(v63[4]);
  v59 = v63;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v59);
  v59 = (void **)&v62;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v59);
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v61.__r_.__value_.__l.__data_);
  (*(void (**)(char *, Espresso::ANECompilerEngine::compiler *, char **))(*((_QWORD *)this + 48) + 32))((char *)this + 384, a2, &v40);
  v61.__r_.__value_.__r.__words[0] = (std::string::size_type)&v40;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&v61);

  if (v48 < 0)
    operator delete(__p);
  v61.__r_.__value_.__r.__words[0] = (std::string::size_type)&v46;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v61);
  v61.__r_.__value_.__r.__words[0] = (std::string::size_type)&v45;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v61);
  if (SHIBYTE(v44) < 0)
    operator delete(v43[0]);

LABEL_71:
  v34 = v54;
  if (v54)
  {
    p_shared_owners = (unint64_t *)&v54->__shared_owners_;
    do
      v36 = __ldaxr(p_shared_owners);
    while (__stlxr(v36 - 1, p_shared_owners));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  if (SBYTE7(__str_16) < 0)
    operator delete((void *)__str);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v55);
  v37 = v58;
  if (v58)
  {
    v38 = (unint64_t *)&v58->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
}

void sub_19139C8DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  uint64_t v39;
  void *v40;
  uint64_t v41;

  *(_QWORD *)(v41 - 216) = v39;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)(v41 - 216));
  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t(&a15);

  std::pair<std::string,std::shared_ptr<Espresso::abstract_blob_container>>::~pair((uint64_t)&a33);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a39);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v41 - 248);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::load_constant_kernel::compile(Espresso::ANECompilerEngine::load_constant_kernel *this, Espresso::ANECompilerEngine::compiler *a2, std::string *a3)
{
  Espresso::ANECompilerEngine::load_constant_kernel::compile((Espresso::ANECompilerEngine::load_constant_kernel *)((char *)this - 384), a2, a3);
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::load_constant_kernel::~load_constant_kernel(void **this)
{
  Espresso::generic_load_constant_kernel *v1;

  v1 = (Espresso::generic_load_constant_kernel *)(this - 48);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::generic_load_constant_kernel::~generic_load_constant_kernel(v1);
}

{
  Espresso::generic_load_constant_kernel *v1;

  v1 = (Espresso::generic_load_constant_kernel *)(this - 48);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::generic_load_constant_kernel::~generic_load_constant_kernel(v1);
  JUMPOUT(0x19401CD90);
}

char *std::__tree<std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, _QWORD *a2, __int128 **a3)
{
  void **v5;
  char *v6;
  uint64_t **v7;
  std::string *v8;
  __int128 *v9;
  __int128 v10;
  _QWORD v12[2];
  char v13;
  uint64_t v14;

  v5 = (void **)std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__find_equal<std::string>((uint64_t)a1, &v14, a2);
  v6 = (char *)*v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = (char *)operator new(0x60uLL);
    v12[0] = v6;
    v12[1] = a1 + 1;
    v13 = 0;
    v8 = (std::string *)(v6 + 32);
    v9 = *a3;
    if (*((char *)*a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)v9, *((_QWORD *)v9 + 1));
    }
    else
    {
      v10 = *v9;
      *((_QWORD *)v6 + 6) = *((_QWORD *)v9 + 2);
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v10;
    }
    *((_QWORD *)v6 + 11) = 0;
    *(_OWORD *)(v6 + 72) = 0u;
    *(_OWORD *)(v6 + 56) = 0u;
    v13 = 1;
    std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at(a1, v14, v7, (uint64_t *)v6);
    v12[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>,void *>>>>::reset[abi:ne180100]((uint64_t)v12);
  }
  return v6;
}

void sub_19139CB04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>,void *>>>>::reset[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>,0>((uint64_t)v1 + 32);
    operator delete(v1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>,0>(uint64_t a1)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 48);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void Espresso::ANECompilerEngine::crop_kernel::~crop_kernel(Espresso::ANECompilerEngine::crop_kernel *this)
{
  void **v2;

  *(_QWORD *)this = &off_1E2D73D20;
  v2 = (void **)((char *)this + 296);
  *((_QWORD *)this + 37) = &unk_1E2D73E80;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 512);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);
  Espresso::base_kernel::~base_kernel(this);
}

{
  void **v2;

  *(_QWORD *)this = &off_1E2D73D20;
  v2 = (void **)((char *)this + 296);
  *((_QWORD *)this + 37) = &unk_1E2D73E80;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 512);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANECompilerEngine::crop_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob((_QWORD *)(a1 + 296), a3, a4, a5);
}

uint64_t Espresso::ANECompilerEngine::crop_kernel::is_valid_for_engine(_DWORD *a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v5;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  const Espresso::net *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v26;
  const Espresso::net *v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  unint64_t *v31;
  unint64_t v32;
  int v33;
  int v34;
  int v36;
  int v37;
  uint64_t result;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t *v55;
  int64x2_t *v56;
  std::__shared_weak_count *v57;
  int64x2_t *v58;
  std::__shared_weak_count *v59;
  char v60[8];
  void *v61[2];
  char v62;
  unsigned int v63;
  int v64;
  int v65;
  uint64_t v66;
  int v67;
  _OWORD v68[2];
  uint64_t v69;
  void *v70;
  void *v71;
  uint64_t v72;
  const Espresso::net *v73;
  std::__shared_weak_count *v74;
  void **v75[4];
  _OWORD v76[2];
  uint64_t v77;
  void *__p;
  void *v79;
  uint64_t v80;
  const Espresso::net *v81;
  std::__shared_weak_count *v82;
  __int128 v83;
  int v84;
  char v85;
  std::string v86;
  _BYTE v87[24];
  _BYTE v88[32];
  std::__shared_weak_count *v89;
  int64x2_t *v90;
  std::__shared_weak_count *v91;
  void **v92;

  v5 = (_QWORD *)a3[6];
  if (*(_QWORD *)(*v5 + 224 * a3[9] + 144) - *(_QWORD *)(*v5 + 224 * a3[9] + 136) != 24)
  {
    v10 = *(std::__shared_weak_count **)(a2 + 8);
    v90 = *(int64x2_t **)a2;
    v91 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
    std::string::basic_string[abi:ne180100]<0>(&v83, "ANE crop kernel doesn't support more than 1 input.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v86, &v83, (uint64_t)a3, 1);
    Espresso::emit_kernel_validation_warning(&v90, (Espresso::base_kernel::validate_for_engine_warning_t *)&v86);
    v13 = v89;
    if (v89)
    {
      v14 = (unint64_t *)&v89->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v75[0] = (void **)v88;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v75);
    v75[0] = (void **)v87;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v75);
    if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v86.__r_.__value_.__l.__data_);
    if (v85 < 0)
      operator delete((void *)v83);
    v16 = v91;
    if (v91)
    {
      v17 = (unint64_t *)&v91->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    return 0;
  }
  v81 = 0;
  v82 = 0;
  v7 = (std::__shared_weak_count *)v5[10];
  if (v7)
  {
    v8 = std::__shared_weak_count::lock(v7);
    v82 = v8;
    if (v8)
    {
      v9 = (const Espresso::net *)v5[9];
      v81 = v9;
      goto LABEL_24;
    }
  }
  else
  {
    v8 = 0;
  }
  v9 = 0;
LABEL_24:
  v19 = *a3;
  v20 = *(_QWORD *)(*a3 + 32);
  v21 = *(_OWORD *)(*a3 + 16);
  v76[0] = *(_OWORD *)*a3;
  v76[1] = v21;
  v77 = v20;
  __p = 0;
  v79 = 0;
  v80 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *(const void **)(v19 + 40), *(_QWORD *)(v19 + 48), (uint64_t)(*(_QWORD *)(v19 + 48) - *(_QWORD *)(v19 + 40)) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)&v83, v9, (const Espresso::layer_shape *)v76, 1);
  if (__p)
  {
    v79 = __p;
    operator delete(__p);
  }
  if (v8)
  {
    v22 = (unint64_t *)&v8->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v24 = a3[6];
  v73 = 0;
  v74 = 0;
  v25 = *(std::__shared_weak_count **)(v24 + 80);
  if (v25)
  {
    v26 = std::__shared_weak_count::lock(v25);
    v74 = v26;
    if (v26)
    {
      v27 = *(const Espresso::net **)(v24 + 72);
      v73 = v27;
      goto LABEL_36;
    }
  }
  else
  {
    v26 = 0;
  }
  v27 = 0;
LABEL_36:
  v28 = a3[3];
  v29 = *(_QWORD *)(v28 + 32);
  v30 = *(_OWORD *)(v28 + 16);
  v68[0] = *(_OWORD *)v28;
  v68[1] = v30;
  v69 = v29;
  v70 = 0;
  v71 = 0;
  v72 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v70, *(const void **)(v28 + 40), *(_QWORD *)(v28 + 48), (uint64_t)(*(_QWORD *)(v28 + 48) - *(_QWORD *)(v28 + 40)) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v75, v27, (const Espresso::layer_shape *)v68, 1);
  if (v70)
  {
    v71 = v70;
    operator delete(v70);
  }
  if (v26)
  {
    v31 = (unint64_t *)&v26->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v33 = a1[70];
  v34 = a1[71];
  if (v33 > 0 || v34 >= 1)
  {
    v66 = 1;
    v67 = 1;
    v63 = 0;
    v64 = v33;
    v65 = v84 - v34;
    Espresso::ANECompilerEngine::slice_kernel::supported_by_hw((uint64_t)v60, (uint64_t)&v83, &v63, *((_DWORD *)a3 + 16));
    if (!v60[0])
    {
      v40 = *(std::__shared_weak_count **)(a2 + 8);
      v58 = *(int64x2_t **)a2;
      v59 = v40;
      if (v40)
      {
        v41 = (unint64_t *)&v40->__shared_owners_;
        do
          v42 = __ldxr(v41);
        while (__stxr(v42 + 1, v41));
      }
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v86, (__int128 *)v61, (uint64_t)a3, 0);
      Espresso::emit_kernel_validation_warning(&v58, (Espresso::base_kernel::validate_for_engine_warning_t *)&v86);
      v43 = v89;
      if (v89)
      {
        v44 = (unint64_t *)&v89->__shared_owners_;
        do
          v45 = __ldaxr(v44);
        while (__stlxr(v45 - 1, v44));
        if (!v45)
        {
          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
          std::__shared_weak_count::__release_weak(v43);
        }
      }
      v92 = (void **)v88;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v92);
      v92 = (void **)v87;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v92);
      if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v86.__r_.__value_.__l.__data_);
      v46 = v59;
      if (!v59)
        goto LABEL_87;
      v47 = (unint64_t *)&v59->__shared_owners_;
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
LABEL_85:
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
LABEL_87:
      if (v62 < 0)
        operator delete(v61[0]);
      return 0;
    }
    if (v62 < 0)
      operator delete(v61[0]);
  }
  v36 = a1[72];
  v37 = a1[73];
  result = 1;
  if (v36 > 0 || v37 >= 1)
  {
    v66 = 1;
    v67 = 1;
    v63 = 1;
    v64 = v36;
    v65 = HIDWORD(v83) - v37;
    Espresso::ANECompilerEngine::slice_kernel::supported_by_hw((uint64_t)v60, (uint64_t)&v83, &v63, *((_DWORD *)a3 + 16));
    if (v60[0])
    {
      if (v62 < 0)
        operator delete(v61[0]);
      return 1;
    }
    v49 = *(std::__shared_weak_count **)(a2 + 8);
    v56 = *(int64x2_t **)a2;
    v57 = v49;
    if (v49)
    {
      v50 = (unint64_t *)&v49->__shared_owners_;
      do
        v51 = __ldxr(v50);
      while (__stxr(v51 + 1, v50));
    }
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v86, (__int128 *)v61, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v56, (Espresso::base_kernel::validate_for_engine_warning_t *)&v86);
    v52 = v89;
    if (v89)
    {
      v53 = (unint64_t *)&v89->__shared_owners_;
      do
        v54 = __ldaxr(v53);
      while (__stlxr(v54 - 1, v53));
      if (!v54)
      {
        ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
        std::__shared_weak_count::__release_weak(v52);
      }
    }
    v92 = (void **)v88;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v92);
    v92 = (void **)v87;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v92);
    if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v86.__r_.__value_.__l.__data_);
    v46 = v57;
    if (!v57)
      goto LABEL_87;
    v55 = (unint64_t *)&v57->__shared_owners_;
    do
      v48 = __ldaxr(v55);
    while (__stlxr(v48 - 1, v55));
    goto LABEL_85;
  }
  return result;
}

void sub_19139D1F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44)
{
  uint64_t v44;

  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)(v44 - 200));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::crop_kernel::compile(Espresso::ANECompilerEngine::crop_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  int16x4_t v23;
  int v24;
  _QWORD *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t *v31;
  unint64_t *v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  unsigned int v53;
  uint64_t v54;
  int *v55;
  uint64_t v56;
  _WORD *v57;
  uint64_t v58;
  int v59;
  uint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  const char *v94;
  int16x4_t v95;
  uint64_t v96;
  std::__shared_weak_count *v97;
  uint64_t v98;
  std::__shared_weak_count *v99;
  uint64_t v100;
  std::__shared_weak_count *v101;
  uint64_t v102;
  std::__shared_weak_count *v103;
  uint64_t v104;
  std::__shared_weak_count *v105;
  __int128 v106;
  __int128 v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  int v112;
  __int128 v113;
  uint64_t v114;
  __int16 v115;
  __int128 v116;
  __int16 v117;
  uint64_t v118;
  int v119;
  uint64_t v120;
  int v121;
  int v122;
  int v123;
  uint64_t v124;
  __int16 v125;
  __int16 v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  __int16 v130;
  int v131;
  char v132;
  uint64_t v133;
  std::__shared_weak_count *v134;
  uint64_t v135;
  std::__shared_weak_count *v136;
  uint64_t v137;
  std::__shared_weak_count *v138;

  v137 = 0;
  v138 = 0;
  v4 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
  if (!v4 || (v138 = std::__shared_weak_count::lock(v4)) == 0 || (v7 = *((_QWORD *)a2 + 1), (v137 = v7) == 0))
  {
    v94 = "Inconsistent state: null network";
    goto LABEL_123;
  }
  if (!*(_QWORD *)(v7 + 576))
  {
    v94 = "Inconsistent state: blob_storage";
LABEL_123:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v94);
  }
  v8 = v7 + 136;
  *(_QWORD *)&v107 = *((_QWORD *)a3 + 6);
  v9 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7 + 136, (unsigned __int8 *)v107, (__int128 **)&v107);
  v11 = *((_QWORD *)v9 + 5);
  v10 = (std::__shared_weak_count *)*((_QWORD *)v9 + 6);
  v135 = v11;
  v136 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  *(_QWORD *)&v107 = a3;
  v14 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8, (unsigned __int8 *)a3, (__int128 **)&v107);
  v15 = *((_QWORD *)v14 + 5);
  v16 = (std::__shared_weak_count *)*((_QWORD *)v14 + 6);
  v133 = v15;
  v134 = v16;
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  __asm { FMOV            V0.2S, #1.0 }
  v114 = _D0;
  v116 = 0uLL;
  v117 = 0;
  v118 = 0x1000100010001;
  v131 = 0;
  v132 = 0;
  v127 = 0;
  v128 = 0;
  v107 = 0uLL;
  v109 = 0;
  v110 = 1;
  v119 = 0;
  v120 = 0;
  v124 = 0;
  v126 = 1;
  v125 = 0;
  v108 = 0;
  v129 = 0;
  v130 = 1;
  v113 = xmmword_191A93450;
  v115 = 0;
  v23 = vsub_s16((int16x4_t)0x1000100010001, vmovn_s32(*(int32x4_t *)((char *)this + 280)));
  *(int16x4_t *)((char *)&v116 + 6) = v23;
  v24 = *(_DWORD *)(v11 + 16);
  v123 = 1;
  v121 = 0;
  v122 = v24;
  v111 = *(_DWORD *)(v15 + 16);
  v112 = v24;
  v25 = (_QWORD *)((char *)this + 512);
  v26 = *((_QWORD *)this + 64);
  if (v26)
  {
    v95 = v23;
    if (*(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 384))(v26) + 48) == 3)
    {
      if (*(_DWORD *)((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v25 + 384))(*v25) + 52) == 3)
      {
        if (*(unsigned __int16 *)((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v25 + 384))(*v25) + 80) == v95.u16[0])
        {
          if (*(unsigned __int16 *)((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v25 + 384))(*v25) + 82) == v95.u16[1])
          {
            if (*(unsigned __int16 *)((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v25 + 384))(*v25) + 84) != v95.u16[2]
              || *(unsigned __int16 *)((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v25 + 384))(*v25) + 86) != v95.u16[3]
              || *(_DWORD *)((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v25 + 384))(*v25) + 116) != v24)
            {
              v106 = 0uLL;
              std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)this + 512, &v106);
              std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v106);
            }
            goto LABEL_37;
          }
          v106 = 0uLL;
          std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)this + 512, &v106);
          v27 = (std::__shared_weak_count *)*((_QWORD *)&v106 + 1);
          if (!*((_QWORD *)&v106 + 1))
            goto LABEL_37;
          v32 = (unint64_t *)(*((_QWORD *)&v106 + 1) + 8);
          do
            v29 = __ldaxr(v32);
          while (__stlxr(v29 - 1, v32));
        }
        else
        {
          v106 = 0uLL;
          std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)this + 512, &v106);
          v27 = (std::__shared_weak_count *)*((_QWORD *)&v106 + 1);
          if (!*((_QWORD *)&v106 + 1))
            goto LABEL_37;
          v31 = (unint64_t *)(*((_QWORD *)&v106 + 1) + 8);
          do
            v29 = __ldaxr(v31);
          while (__stlxr(v29 - 1, v31));
        }
      }
      else
      {
        v106 = 0uLL;
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)this + 512, &v106);
        v27 = (std::__shared_weak_count *)*((_QWORD *)&v106 + 1);
        if (!*((_QWORD *)&v106 + 1))
          goto LABEL_37;
        v30 = (unint64_t *)(*((_QWORD *)&v106 + 1) + 8);
        do
          v29 = __ldaxr(v30);
        while (__stlxr(v29 - 1, v30));
      }
    }
    else
    {
      v106 = 0uLL;
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)this + 512, &v106);
      v27 = (std::__shared_weak_count *)*((_QWORD *)&v106 + 1);
      if (!*((_QWORD *)&v106 + 1))
        goto LABEL_37;
      v28 = (unint64_t *)(*((_QWORD *)&v106 + 1) + 8);
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
    }
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
LABEL_37:
    v33 = *v25;
    if (*v25)
      goto LABEL_105;
  }
  std::allocate_shared[abi:ne180100]<Espresso::ANECompilerEngine::convolution_kernel,std::allocator<Espresso::ANECompilerEngine::convolution_kernel>,std::shared_ptr<Espresso::abstract_context> &,Espresso::compute_path,Espresso::convolution_uniforms &,void>((uint64_t *)&v106, (_QWORD *)this + 1, &v107);
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)this + 512, &v106);
  v34 = (std::__shared_weak_count *)*((_QWORD *)&v106 + 1);
  if (*((_QWORD *)&v106 + 1))
  {
    v35 = (unint64_t *)(*((_QWORD *)&v106 + 1) + 8);
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*v25 + 472))(&v106);
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*v25 + 488))(&v104);
  v37 = v111;
  if (v111 >= 1)
  {
    v38 = 0;
    LODWORD(v39) = 0;
    v40 = *(_QWORD *)(v104 + 16);
    v42 = v113;
    v41 = DWORD1(v113);
    if ((int)v113 >= 0)
      v43 = v113;
    else
      v43 = v113 + 1;
    v44 = v43 >> 1;
    if ((SDWORD1(v113) & 0x80000000) == 0)
      v45 = DWORD1(v113);
    else
      v45 = DWORD1(v113) + 1;
    v46 = v45 >> 1;
    do
    {
      *(_DWORD *)(v40 + 4 * v38) = 0;
      if (v41 >= 1)
      {
        v47 = 0;
        v48 = v106;
        do
        {
          if (v42 >= 1)
          {
            v49 = *(_QWORD *)(v48 + 24);
            v39 = (int)v39;
            v50 = v44;
            v51 = v42;
            do
            {
              if (v50)
                _ZF = 0;
              else
                _ZF = v47 == v46;
              v53 = _ZF;
              *(float *)(v49 + 4 * v39++) = (float)v53;
              --v50;
              --v51;
            }
            while (v51);
          }
          ++v47;
        }
        while (v47 != v41);
      }
      ++v38;
    }
    while (v38 != v37);
  }
  std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned short,4>,std::allocator<Espresso::blob<unsigned short,4>>,int const*&,void>(&v102, v106 + 8);
  v54 = 0;
  v55 = *(int **)(v106 + 24);
  v56 = v102;
  v57 = *(_WORD **)(v102 + 24);
  v58 = *(int *)(v106 + 8);
  do
  {
    v58 *= *(int *)(v106 + 12 + v54);
    v54 += 4;
  }
  while (v54 != 12);
  for (; v58; --v58)
  {
    v59 = *v55++;
    _S0 = v59;
    __asm { FCVT            H0, S0 }
    *v57++ = _S0;
  }
  v61 = *v25;
  v100 = v56;
  v101 = v103;
  if (v103)
  {
    v62 = (unint64_t *)&v103->__shared_owners_;
    do
      v63 = __ldxr(v62);
    while (__stxr(v63 + 1, v62));
  }
  v98 = 0;
  v99 = 0;
  (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v61 + 544))(v61, &v100, &v98);
  v64 = v99;
  if (v99)
  {
    v65 = (unint64_t *)&v99->__shared_owners_;
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  v67 = v101;
  if (v101)
  {
    v68 = (unint64_t *)&v101->__shared_owners_;
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = *v25;
  v96 = v104;
  v97 = v105;
  if (v105)
  {
    v71 = (unint64_t *)&v105->__shared_owners_;
    do
      v72 = __ldxr(v71);
    while (__stxr(v72 + 1, v71));
  }
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v70 + 392))(v70, &v96);
  v73 = v97;
  if (v97)
  {
    v74 = (unint64_t *)&v97->__shared_owners_;
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  v76 = v103;
  if (v103)
  {
    v77 = (unint64_t *)&v103->__shared_owners_;
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  v79 = v105;
  if (v105)
  {
    v80 = (unint64_t *)&v105->__shared_owners_;
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  v82 = (std::__shared_weak_count *)*((_QWORD *)&v106 + 1);
  if (*((_QWORD *)&v106 + 1))
  {
    v83 = (unint64_t *)(*((_QWORD *)&v106 + 1) + 8);
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  v33 = *v25;
LABEL_105:
  (*(void (**)(uint64_t, Espresso::ANECompilerEngine::compiler *, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *))(*(_QWORD *)v33 + 624))(v33, a2, a3);
  v85 = v134;
  if (v134)
  {
    v86 = (unint64_t *)&v134->__shared_owners_;
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
  v88 = v136;
  if (v136)
  {
    v89 = (unint64_t *)&v136->__shared_owners_;
    do
      v90 = __ldaxr(v89);
    while (__stlxr(v90 - 1, v89));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
  v91 = v138;
  if (v138)
  {
    v92 = (unint64_t *)&v138->__shared_owners_;
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }
}

void sub_19139DA28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;
  uint64_t v15;
  uint64_t v16;
  va_list va2;
  uint64_t v18;
  va_list va3;

  va_start(va3, a4);
  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v13 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v16 = va_arg(va3, _QWORD);
  v18 = va_arg(va3, _QWORD);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va3);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v4 - 96);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v4 - 80);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v4 - 64);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::crop_kernel::compile(Espresso::ANECompilerEngine::crop_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
  Espresso::ANECompilerEngine::crop_kernel::compile((Espresso::ANECompilerEngine::crop_kernel *)((char *)this - 296), a2, a3);
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::crop_kernel::~crop_kernel(Espresso::ANECompilerEngine::crop_kernel *this)
{
  Espresso::base_kernel *v2;

  v2 = (Espresso::ANECompilerEngine::crop_kernel *)((char *)this - 296);
  *((_QWORD *)this - 37) = &off_1E2D73D20;
  *(_QWORD *)this = &unk_1E2D73E80;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 216);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((void **)this);
  Espresso::base_kernel::~base_kernel(v2);
}

{
  Espresso::base_kernel *v2;

  v2 = (Espresso::ANECompilerEngine::crop_kernel *)((char *)this - 296);
  *((_QWORD *)this - 37) = &off_1E2D73D20;
  *(_QWORD *)this = &unk_1E2D73E80;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 216);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((void **)this);
  Espresso::base_kernel::~base_kernel(v2);
  JUMPOUT(0x19401CD90);
}

uint64_t std::allocate_shared[abi:ne180100]<Espresso::ANECompilerEngine::convolution_kernel,std::allocator<Espresso::ANECompilerEngine::convolution_kernel>,std::shared_ptr<Espresso::abstract_context> &,Espresso::compute_path,Espresso::convolution_uniforms &,void>(uint64_t *a1, _QWORD *a2, __int128 *a3)
{
  _QWORD *v6;
  uint64_t result;

  v6 = operator new(0x348uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DBA210;
  result = Espresso::ANECompilerEngine::convolution_kernel::convolution_kernel((uint64_t)(v6 + 3), a2, a3);
  *a1 = result;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_19139DBB4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::convolution_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBA210;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::convolution_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBA210;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::convolution_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::ANECompilerEngine::slice_kernel::supported_by_hw(uint64_t a1, uint64_t a2, unsigned int *a3, int a4)
{
  unsigned int v8;
  BOOL v9;
  unsigned int v10;
  BOOL v11;
  BOOL v12;
  char v13;
  char v15;
  unsigned int v16;
  int v17;
  _BOOL4 v18;
  int v19;
  int v20;
  char v21;
  BOOL v22;
  _BOOL4 v23;
  int v24;
  unint64_t v25;
  std::string *v26;
  void *__p[2];
  std::string::size_type v28;

  v8 = a3[3];
  v9 = v8 == 4 || v8 == 2;
  v10 = *a3;
  v11 = v9 && v10 == 2;
  v12 = v11 && (*(_BYTE *)(a2 + 4) & 1) == 0 && *(_DWORD *)(a2 + 28) != 0;
  v13 = v8 == 1 || v12;
  if (v10 < 3 && a3[4] == 0)
    v15 = v13;
  else
    v15 = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  v16 = *a3;
  if (*a3 == 2)
  {
    v18 = 0;
    v17 = *(_DWORD *)(a2 + 4);
  }
  else if (v16 == 1)
  {
    v18 = 0;
    v17 = *(_DWORD *)(a2 + 12);
  }
  else if (v16)
  {
    MEMORY[0x19401C808](__p, "Invalid slice axis");
    v17 = 0;
    v15 = 0;
    v18 = *a3 == 0;
  }
  else
  {
    v17 = *(_DWORD *)(a2 + 16);
    v18 = 1;
  }
  v19 = a3[2];
  v20 = (v17 & ((int)a3[1] >> 31)) + a3[1];
  if (v19 > 0)
    v17 = 0;
  if (v17 + v19 > v20)
    v21 = v15;
  else
    v21 = 0;
  if (!v18)
    goto LABEL_48;
  v22 = a4 == 4 || a4 == 2;
  v23 = v22;
  v24 = v22 ? 63 : 31;
  if ((v20 & v24) == 0)
    goto LABEL_48;
  v9 = !v23;
  v25 = 12;
  if (!v9)
    v25 = 28;
  if (v25 < v20)
  {
    *(_BYTE *)a1 = 0;
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 8), "Unsupported crop along left edge.");
  }
  else
  {
LABEL_48:
    if ((v21 & 1) != 0)
    {
      *(_BYTE *)a1 = 1;
      std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 8), "Success");
    }
    else
    {
      *(_BYTE *)a1 = 0;
      v26 = (std::string *)(a1 + 8);
      if (SHIBYTE(v28) < 0)
      {
        std::string::__init_copy_ctor_external(v26, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
      }
      else
      {
        *(_OWORD *)&v26->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
        v26->__r_.__value_.__r.__words[2] = v28;
      }
    }
  }
  if (SHIBYTE(v28) < 0)
    operator delete(__p[0]);
}

void sub_19139DDE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Espresso::ANECompilerEngine::copy_kernel::~copy_kernel(void **this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 36);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 36);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANECompilerEngine::copy_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob((_QWORD *)(a1 + 288), a3, a4, a5);
}

const char *Espresso::generic_copy_kernel::kernel_type_str(Espresso::generic_copy_kernel *this)
{
  return "copy";
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::copy_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

void Espresso::ANECompilerEngine::copy_kernel::compile(Espresso::ANECompilerEngine::copy_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  char *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  char *v14;
  std::__shared_weak_count *v15;
  float *v16;
  unint64_t *v17;
  unint64_t v18;
  __CFString *v19;
  void *v20;
  void *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  float v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  unsigned int v46;
  int *v47;
  _WORD *v48;
  int v49;
  __int128 v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  int *v63;
  _WORD *v64;
  int v65;
  uint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  void *v74;
  id v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  uint64_t weights_file_index;
  void *v81;
  void *v82;
  __int128 v83;
  unint64_t *v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  void *v89;
  void *v90;
  void *v91;
  uint64_t v92;
  void *v93;
  void *v94;
  std::string *v95;
  std::string *v96;
  uint64_t v97;
  char v98;
  std::string::size_type size;
  std::string::size_type v100;
  uint64_t v101;
  unsigned __int8 *v102;
  std::string *v103;
  const std::string::value_type *data;
  __int128 v105;
  __CFString *v106;
  std::string *v107;
  std::string *v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  unint64_t *v125;
  unint64_t v126;
  unint64_t *v127;
  unint64_t v128;
  unint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  const char *v140;
  int *v141;
  uint64_t i;
  float v143;
  int v144;
  _WORD *v145;
  int v146;
  std::runtime_error *exception;
  int *v149;
  uint64_t j;
  int v151;
  int v152;
  unsigned int v153;
  unsigned int v154;
  int v155;
  Espresso *v156;
  const char *v157;
  float v158;
  NSObject *v160;
  double v161;
  uint64_t v162;
  _WORD *v163;
  int v164;
  int v166;
  void *v167;
  id obj;
  std::__shared_weak_count *v169;
  std::__shared_weak_count *v170;
  std::string *v171;
  std::string *v172;
  unint64_t v173;
  void *v174[2];
  char v175;
  uint64_t v176;
  uint64_t v177;
  void *v178;
  char v179;
  id v180;
  __CFString *v181;
  id v182[3];
  std::__shared_weak_count *v183;
  uint64_t v184;
  std::__shared_weak_count *v185;
  uint64_t v186;
  std::__shared_weak_count *v187;
  __int128 v188;
  uint64_t v189;
  std::__shared_weak_count *v190;
  __int128 v191;
  uint64_t v192;
  std::__shared_weak_count *v193;
  uint64_t v194[2];
  uint64_t v195;
  std::__shared_weak_count *v196;
  uint64_t v197;
  std::__shared_weak_count *v198;
  uint64_t v199;
  std::__shared_weak_count *v200;
  unsigned int v201;
  unsigned int v202;
  uint64_t v203;
  std::__shared_weak_count *v204;
  _BYTE buf[18];
  __int16 v206;
  int v207;
  __int16 v208;
  double v209;
  std::vector<std::string> v210;
  void *v211;
  char v212;
  id v213;
  __CFString *v214;
  id v215;
  std::string v216;
  _BYTE v217[24];
  _BYTE v218[32];
  void *__p;
  char v220;
  id v221;
  __CFString *v222;
  id v223;
  uint64_t v224;
  std::string __str;
  __int128 v226;
  uint64_t v227;

  v227 = *MEMORY[0x1E0C80C00];
  v186 = 0;
  v187 = 0;
  v4 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
  if (!v4
    || (v7 = std::__shared_weak_count::lock(v4), (v187 = v7) == 0)
    || (v8 = *((_QWORD *)a2 + 1), (v186 = v8) == 0))
  {
    v140 = "Inconsistent state: null network";
    goto LABEL_190;
  }
  if (!*(_QWORD *)(v8 + 576))
  {
    v140 = "Inconsistent state: blob_storage";
LABEL_190:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v140);
  }
  v9 = v7;
  v216.__r_.__value_.__r.__words[0] = *((_QWORD *)a3 + 6);
  v10 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8 + 136, (unsigned __int8 *)v216.__r_.__value_.__l.__data_, (__int128 **)&v216);
  v11 = (std::__shared_weak_count *)*((_QWORD *)v10 + 6);
  v184 = *((_QWORD *)v10 + 5);
  v185 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  v216.__r_.__value_.__r.__words[0] = (std::string::size_type)a3;
  v14 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8 + 136, (unsigned __int8 *)a3, (__int128 **)&v216);
  v16 = (float *)*((_QWORD *)v14 + 5);
  v15 = (std::__shared_weak_count *)*((_QWORD *)v14 + 6);
  v182[2] = v16;
  v183 = v15;
  if (v15)
  {
    v17 = (unint64_t *)&v15->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  obj = (id)objc_opt_new();
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t(v174, (id *)a3);
  v19 = v181;
  v181 = CFSTR("GOC");

  v167 = (void *)objc_opt_new();
  objc_msgSend(obj, "setObject:forKeyedSubscript:", v167, CFSTR("BiasScaleGroupData"));
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithShort:", 0);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(obj, "setObject:forKeyedSubscript:", v20, CFSTR("BiasScalar"));

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithShort:", 15360);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(obj, "setObject:forKeyedSubscript:", v21, CFSTR("ScaleScalar"));

  objc_msgSend(obj, "removeObjectForKey:", CFSTR("BiasScaleGroupData"));
  objc_storeStrong(v182, obj);
  Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t(&v216, (const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)v174);
  v222 = v181;
  v223 = v182[0];
  v224 = (uint64_t)v182[1];
  v172 = 0;
  v173 = 0;
  v171 = 0;
  *(_QWORD *)buf = &v171;
  buf[8] = 0;
  v171 = (std::string *)operator new(0x90uLL);
  v172 = v171;
  v173 = (unint64_t)&v171[6];
  v172 = (std::string *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>,Espresso::ANECompilerEngine::compiler::unit_t const*,Espresso::ANECompilerEngine::compiler::unit_t const*,Espresso::ANECompilerEngine::compiler::unit_t*>((uint64_t)&v173, (uint64_t)&v216, (uint64_t)&__str, (uint64_t)v171);

  if (v220 < 0)
    operator delete(__p);
  *(_QWORD *)buf = v218;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(_QWORD *)buf = v217;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (SHIBYTE(v216.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v216.__r_.__value_.__l.__data_);
  v170 = v9;
  v22 = (unint64_t *)&v9->__shared_owners_;
  do
    v23 = __ldxr(v22);
  while (__stxr(v23 + 1, v22));
  v169 = v15;
  if (v15)
  {
    v24 = (unint64_t *)&v15->__shared_owners_;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t((Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)&v216);
  v223 = 0;
  v222 = 0;
  v224 = 0x100000000;
  v27 = *((_QWORD *)this + 44);
  v26 = (std::__shared_weak_count *)*((_QWORD *)this + 45);
  v203 = v27;
  v204 = v26;
  if (v26)
  {
    v28 = (unint64_t *)&v26->__shared_owners_;
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  if (v27 && !*(_BYTE *)((*(uint64_t (**)(char *))(*((_QWORD *)this + 36) + 104))((char *)this + 288) + 40))
  {
    v30 = v16[28];
    v195 = v27;
    v196 = v26;
    if (v26)
    {
      v31 = (unint64_t *)&v26->__shared_owners_;
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
    }
    v33 = (std::__shared_weak_count *)*((_QWORD *)this + 47);
    v194[0] = *((_QWORD *)this + 46);
    v194[1] = (uint64_t)v33;
    if (v33)
    {
      v34 = (unint64_t *)&v33->__shared_owners_;
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 1, v34));
    }
    Espresso::ane_style_post_scale_bias((uint64_t)&v195, v194, (uint64_t)&v197, v30);
    if (v33)
    {
      v36 = (unint64_t *)&v33->__shared_owners_;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    v38 = v196;
    if (v196)
    {
      v39 = (unint64_t *)&v196->__shared_owners_;
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
    v41 = v203;
    v42 = *(unsigned int *)(v203 + 8);
    std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v192, 2 * v42, 1, 1, 1);
    v43 = (int)v42;
    v191 = 0uLL;
    v44 = v42;
    v45 = *((_QWORD *)this + 46);
    if (v45)
      v44 = *(_DWORD *)(v45 + 8);
    if (!*((_BYTE *)a2 + 384))
    {
      Espresso::blob<unsigned char,1>::make(&__str, 4 * v42);
      v141 = *(int **)(__str.__r_.__value_.__r.__words[0] + 16);
      if ((int)v42 >= 1)
      {
        for (i = 0; i != v42; ++i)
        {
          v143 = *(float *)(*(_QWORD *)(v41 + 16) + i * 4);
          *(float *)&v144 = ldexp(1.0, -v201) * v143;
          v141[i] = v144;
        }
      }
      if ((_DWORD)v42)
      {
        v145 = *(_WORD **)(v192 + 16);
        do
        {
          v146 = *v141++;
          _S0 = v146;
          __asm { FCVT            H0, S0 }
          *v145++ = _S0;
          --v43;
        }
        while (v43);
      }
      v189 = 0;
      v190 = 0;
      if (*((_QWORD *)this + 46))
      {
        Espresso::blob<unsigned char,1>::make(buf, 4 * v44);
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)&v189, (__int128 *)buf);
        std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)buf);
        Espresso::blob<unsigned char,1>::make(buf, 2 * v44);
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)&v191, (__int128 *)buf);
        std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)buf);
        v149 = *(int **)(v189 + 16);
        if (v44 >= 1)
        {
          for (j = 0; j != v44; ++j)
          {
            if ((int)v42 - 1 >= (int)j)
              v151 = j;
            else
              v151 = v42 - 1;
            *(float *)&v152 = *(float *)(*(_QWORD *)(v199 + 16) + 4 * j)
                            * *(float *)(*(_QWORD *)(v197 + 16) + 4 * v151);
            v149[j] = v152;
            v153 = v202;
            v154 = v201;
            *(float *)&v155 = ldexp(1.0, v202 - v201) * *(float *)&v152;
            v149[j] = v155;
            v158 = ldexp(1.0, v154 - v153) * *(float *)&v155;
            if (v158 < -127.0 || v158 > 255.0)
            {
              Espresso::espresso_os_log_subsystem(v156, v157);
              v160 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v160, OS_LOG_TYPE_ERROR))
              {
                v161 = *(float *)&v149[j];
                *(_DWORD *)buf = 134218752;
                *(double *)&buf[4] = v158;
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v202;
                v206 = 1024;
                v207 = v201;
                v208 = 2048;
                v209 = v161;
                _os_log_error_impl(&dword_190DAF000, v160, OS_LOG_TYPE_ERROR, "[ANEC::add_ane_scale_bias_unit] Shifted bias overflowing shifted_b=%f acc_bias_shift=%d post_right_shift=%d anebias=%f", buf, 0x22u);
              }

            }
          }
        }
        if (v44)
        {
          v162 = v44;
          v163 = *(_WORD **)(v191 + 16);
          do
          {
            v164 = *v149++;
            _S0 = v164;
            __asm { FCVT            H0, S0 }
            *v163++ = _S0;
            --v162;
          }
          while (v162);
        }
      }
      exception = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
      Espresso::not_implemented_error::not_implemented_error(exception);
    }
    v46 = v202;
    if ((_DWORD)v42)
    {
      v47 = *(int **)(v197 + 16);
      v48 = *(_WORD **)(v192 + 16);
      do
      {
        v49 = *v47++;
        _S0 = v49;
        __asm { FCVT            H0, S0 }
        *v48++ = _S0;
        --v43;
      }
      while (v43);
    }
    if (v45)
    {
      std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(buf, 2 * v44, 1, 1, 1);
      v55 = *(_OWORD *)buf;
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = 0;
      v56 = (std::__shared_weak_count *)*((_QWORD *)&v191 + 1);
      v191 = v55;
      if (v56)
      {
        v57 = (unint64_t *)&v56->__shared_owners_;
        do
          v58 = __ldaxr(v57);
        while (__stlxr(v58 - 1, v57));
        if (!v58)
        {
          ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
          std::__shared_weak_count::__release_weak(v56);
        }
      }
      v59 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v60 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v61 = __ldaxr(v60);
        while (__stlxr(v61 - 1, v60));
        if (!v61)
        {
          ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
          std::__shared_weak_count::__release_weak(v59);
        }
      }
      if (v44)
      {
        v62 = v44;
        v63 = *(int **)(v199 + 16);
        v64 = *(_WORD **)(v191 + 16);
        do
        {
          v65 = *v63++;
          _S0 = v65;
          __asm { FCVT            H0, S0 }
          *v64++ = _S0;
          --v62;
        }
        while (v62);
      }
    }
    v166 = *((unsigned __int8 *)a2 + 552);
    v67 = v192;
    v68 = v193;
    v189 = v192;
    v190 = v193;
    if (v193)
    {
      v69 = (unint64_t *)&v193->__shared_owners_;
      do
        v70 = __ldxr(v69);
      while (__stxr(v70 + 1, v69));
    }
    v71 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler *)((char *)a2 + 128), *(const unsigned __int8 **)(v67 + 16), *(int *)(v67 + 8));
    if (v68)
    {
      v72 = (unint64_t *)&v68->__shared_owners_;
      do
        v73 = __ldaxr(v72);
      while (__stlxr(v73 - 1, v72));
      if (!v73)
      {
        ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
        std::__shared_weak_count::__release_weak(v68);
      }
    }
    v74 = (void *)objc_opt_new();
    if (*((_BYTE *)a2 + 121))
    {
      v75 = (id)v171[5].__r_.__value_.__l.__size_;

      v74 = v75;
    }
    v76 = (void *)objc_opt_new();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v42);
    v77 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v76, "setObject:forKeyedSubscript:", v77, CFSTR("ScaleCount"));

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v71);
    v78 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v76, "setObject:forKeyedSubscript:", v78, CFSTR("ScaleOffset"));

    v79 = (void *)MEMORY[0x1E0CB37E8];
    if (v166)
      weights_file_index = 0;
    else
    objc_msgSend(v79, "numberWithUnsignedLong:", weights_file_index);
    v81 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v76, "setObject:forKeyedSubscript:", v81, CFSTR("ScaleIndex"));

    objc_msgSend(v76, "setObject:forKeyedSubscript:", CFSTR("Float16"), CFSTR("ScaleType"));
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v201);
    v82 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v74, "setObject:forKeyedSubscript:", v82, CFSTR("ScaleShift"));

    if (*((_QWORD *)this + 46))
    {
      v83 = v191;
      v188 = v191;
      if (*((_QWORD *)&v191 + 1))
      {
        v84 = (unint64_t *)(*((_QWORD *)&v191 + 1) + 8);
        do
          v85 = __ldxr(v84);
        while (__stxr(v85 + 1, v84));
      }
      v86 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler *)((char *)a2 + 128), *(const unsigned __int8 **)(v83 + 16), *(int *)(v83 + 8));
      if (*((_QWORD *)&v83 + 1))
      {
        v87 = (unint64_t *)(*((_QWORD *)&v83 + 1) + 8);
        do
          v88 = __ldaxr(v87);
        while (__stlxr(v88 - 1, v87));
        if (!v88)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v83 + 1) + 16))(*((_QWORD *)&v83 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v83 + 1));
        }
      }
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *(unsigned int *)(*((_QWORD *)this + 46) + 8));
      v89 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v76, "setObject:forKeyedSubscript:", v89, CFSTR("BiasCount"));

      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v86);
      v90 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v76, "setObject:forKeyedSubscript:", v90, CFSTR("BiasOffset"));

      v91 = (void *)MEMORY[0x1E0CB37E8];
      if (v166)
        v92 = 0;
      else
      objc_msgSend(v91, "numberWithUnsignedLong:", v92);
      v93 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v76, "setObject:forKeyedSubscript:", v93, CFSTR("BiasIndex"));

      objc_msgSend(v76, "setObject:forKeyedSubscript:", CFSTR("Float16"), CFSTR("BiasType"));
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v46);
      v94 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v74, "setObject:forKeyedSubscript:", v94, CFSTR("BiasShift"));

    }
    objc_msgSend(v74, "setObject:forKeyedSubscript:", v76, CFSTR("BiasScaleGroupData"));
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)buf, (id *)a3);
    v95 = v172;
    if (v172 == v171)
      goto LABEL_111;
    v96 = v172 - 6;
    v97 = HIBYTE(v172[-6].__r_.__value_.__r.__words[2]);
    v98 = v97;
    size = v172[-6].__r_.__value_.__l.__size_;
    if ((v97 & 0x80u) == 0)
      v100 = HIBYTE(v172[-6].__r_.__value_.__r.__words[2]);
    else
      v100 = v172[-6].__r_.__value_.__l.__size_;
    v101 = HIBYTE(v207);
    if (v207 < 0)
      v101 = *(_QWORD *)&buf[8];
    if (v100 != v101)
      goto LABEL_105;
    if (v207 >= 0)
      v102 = buf;
    else
      v102 = *(unsigned __int8 **)buf;
    if ((char)v97 < 0)
    {
      data = (const std::string::value_type *)v96->__r_.__value_.__r.__words[0];
      if (memcmp(v96->__r_.__value_.__l.__data_, v102, v172[-6].__r_.__value_.__l.__size_))
        goto LABEL_108;
    }
    else if ((_BYTE)v97)
    {
      v103 = v172 - 6;
      while (v103->__r_.__value_.__s.__data_[0] == *v102)
      {
        v103 = (std::string *)((char *)v103 + 1);
        ++v102;
        if (!--v97)
          goto LABEL_104;
      }
      goto LABEL_105;
    }
LABEL_104:
    std::string::append(v95 - 6, "__@pre_scale_bias");
    v98 = HIBYTE(v95[-6].__r_.__value_.__r.__words[2]);
LABEL_105:
    if ((v98 & 0x80) == 0)
    {
      v105 = *(_OWORD *)&v96->__r_.__value_.__l.__data_;
      __str.__r_.__value_.__r.__words[2] = v95[-6].__r_.__value_.__r.__words[2];
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v105;
      goto LABEL_109;
    }
    data = v95[-6].__r_.__value_.__l.__data_;
    size = v95[-6].__r_.__value_.__l.__size_;
LABEL_108:
    std::string::__init_copy_ctor_external(&__str, data, size);
LABEL_109:
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v210, &__str, &v226, 1uLL);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
LABEL_111:
    v106 = v214;
    v214 = CFSTR("GOC");

    objc_storeStrong(&v215, v74);
    if (!*((_BYTE *)a2 + 121))
    {
      v107 = v172;
      if ((unint64_t)v172 >= v173)
      {
        v109 = 0x8E38E38E38E38E39 * (((char *)v172 - (char *)v171) >> 4);
        if (v109 + 1 > 0x1C71C71C71C71C7)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v110 = 0x1C71C71C71C71C72 * ((uint64_t)(v173 - (_QWORD)v171) >> 4);
        if (v110 <= v109 + 1)
          v110 = v109 + 1;
        if (0x8E38E38E38E38E39 * ((uint64_t)(v173 - (_QWORD)v171) >> 4) >= 0xE38E38E38E38E3)
          v111 = 0x1C71C71C71C71C7;
        else
          v111 = v110;
        *((_QWORD *)&v226 + 1) = &v173;
        if (v111)
          v111 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v111);
        else
          v112 = 0;
        __str.__r_.__value_.__r.__words[0] = v111;
        __str.__r_.__value_.__l.__size_ = v111 + 144 * v109;
        __str.__r_.__value_.__r.__words[2] = __str.__r_.__value_.__l.__size_;
        *(_QWORD *)&v226 = v111 + 144 * v112;
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)__str.__r_.__value_.__l.__size_, (uint64_t)buf);
        __str.__r_.__value_.__r.__words[2] += 144;
        std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer((uint64_t *)&v171, &__str);
        v108 = v172;
        std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&__str);
      }
      else
      {
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v172, (uint64_t)buf);
        v108 = v107 + 6;
      }
      v172 = v108;
    }

    if (v212 < 0)
      operator delete(v211);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v210;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v208;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
    if (SHIBYTE(v207) < 0)
      operator delete(*(void **)buf);

    v113 = (std::__shared_weak_count *)*((_QWORD *)&v191 + 1);
    if (*((_QWORD *)&v191 + 1))
    {
      v114 = (unint64_t *)(*((_QWORD *)&v191 + 1) + 8);
      do
        v115 = __ldaxr(v114);
      while (__stlxr(v115 - 1, v114));
      if (!v115)
      {
        ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
        std::__shared_weak_count::__release_weak(v113);
      }
    }
    v116 = v193;
    if (v193)
    {
      v117 = (unint64_t *)&v193->__shared_owners_;
      do
        v118 = __ldaxr(v117);
      while (__stlxr(v118 - 1, v117));
      if (!v118)
      {
        ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
        std::__shared_weak_count::__release_weak(v116);
      }
    }
    v119 = v200;
    if (v200)
    {
      v120 = (unint64_t *)&v200->__shared_owners_;
      do
        v121 = __ldaxr(v120);
      while (__stlxr(v121 - 1, v120));
      if (!v121)
      {
        ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
        std::__shared_weak_count::__release_weak(v119);
      }
    }
    v122 = v198;
    if (v198)
    {
      v123 = (unint64_t *)&v198->__shared_owners_;
      do
        v124 = __ldaxr(v123);
      while (__stlxr(v124 - 1, v123));
      if (!v124)
      {
        ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
        std::__shared_weak_count::__release_weak(v122);
      }
    }
    v26 = v204;
  }
  if (v26)
  {
    v125 = (unint64_t *)&v26->__shared_owners_;
    do
      v126 = __ldaxr(v125);
    while (__stlxr(v126 - 1, v125));
    if (!v126)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }

  if (v220 < 0)
    operator delete(__p);
  *(_QWORD *)buf = v218;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(_QWORD *)buf = v217;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (SHIBYTE(v216.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v216.__r_.__value_.__l.__data_);
  if (v169)
  {
    v127 = (unint64_t *)&v169->__shared_owners_;
    do
      v128 = __ldaxr(v127);
    while (__stlxr(v128 - 1, v127));
    if (!v128)
    {
      ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
      std::__shared_weak_count::__release_weak(v169);
    }
  }
  v129 = (unint64_t *)&v170->__shared_owners_;
  do
    v130 = __ldaxr(v129);
  while (__stlxr(v130 - 1, v129));
  if (!v130)
  {
    ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
    std::__shared_weak_count::__release_weak(v170);
  }
  (*(void (**)(char *, Espresso::ANECompilerEngine::compiler *, std::string **))(*((_QWORD *)this + 36) + 32))((char *)this + 288, a2, &v171);
  v216.__r_.__value_.__r.__words[0] = (std::string::size_type)&v171;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&v216);

  if (v179 < 0)
    operator delete(v178);
  v216.__r_.__value_.__r.__words[0] = (std::string::size_type)&v177;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v216);
  v216.__r_.__value_.__r.__words[0] = (std::string::size_type)&v176;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v216);
  if (v175 < 0)
    operator delete(v174[0]);

  v131 = v183;
  if (v183)
  {
    v132 = (unint64_t *)&v183->__shared_owners_;
    do
      v133 = __ldaxr(v132);
    while (__stlxr(v133 - 1, v132));
    if (!v133)
    {
      ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
      std::__shared_weak_count::__release_weak(v131);
    }
  }
  v134 = v185;
  if (v185)
  {
    v135 = (unint64_t *)&v185->__shared_owners_;
    do
      v136 = __ldaxr(v135);
    while (__stlxr(v136 - 1, v135));
    if (!v136)
    {
      ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
      std::__shared_weak_count::__release_weak(v134);
    }
  }
  v137 = v187;
  if (v187)
  {
    v138 = (unint64_t *)&v187->__shared_owners_;
    do
      v139 = __ldaxr(v138);
    while (__stlxr(v139 - 1, v138));
    if (!v139)
    {
      ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
      std::__shared_weak_count::__release_weak(v137);
    }
  }
}

void sub_19139EF34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, char a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,id a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,char a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void **a67;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  a67 = (void **)&a20;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100](&a67);

  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t(&a23);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a41);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a43);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a45);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::copy_kernel::compile(Espresso::ANECompilerEngine::copy_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
  Espresso::ANECompilerEngine::copy_kernel::compile((Espresso::ANECompilerEngine::copy_kernel *)((char *)this - 288), a2, a3);
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::copy_kernel::~copy_kernel(void **this)
{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 36);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
}

{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 36);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANECompilerEngine::reduce_kernel::~reduce_kernel(void **this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 41);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 41);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANECompilerEngine::reduce_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob((_QWORD *)(a1 + 328), a3, a4, a5);
}

uint64_t Espresso::ANECompilerEngine::reduce_kernel::is_valid_for_engine(uint64_t a1, int64x2_t **a2, int *a3)
{
  _OWORD *v6;
  std::__shared_weak_count *v7;
  const Espresso::base_kernel::validate_for_engine_args_t *v8;
  int v9;
  BOOL v10;
  int v11;
  _BOOL4 v13;
  int64x2_t *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  int64x2_t *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unsigned int v31;
  uint64_t v32;
  int v33;
  int v34;
  _BOOL4 v36;
  _OWORD *v37;
  int v38;
  int v39;
  __int128 v40;
  const __CFString *v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  int v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::string *v49;
  __int128 v50;
  std::string *v51;
  __int128 v52;
  std::string *v53;
  std::string::size_type v54;
  std::string *v55;
  __int128 v56;
  std::string *v57;
  __int128 v58;
  std::string *v59;
  std::string::size_type v60;
  std::string *v61;
  __int128 v62;
  std::string *v63;
  __int128 v64;
  std::string *v65;
  std::string::size_type v66;
  std::string *v67;
  __int128 v68;
  std::string *v69;
  __int128 v70;
  std::string *v71;
  std::string::size_type v72;
  std::string *v73;
  __int128 v74;
  std::string *v75;
  __int128 v76;
  std::string *v77;
  std::string::size_type v78;
  std::string *v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  int64x2_t *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t *v92;
  int v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::string *v97;
  __int128 v98;
  std::string *v99;
  __int128 v100;
  std::string *v101;
  std::string::size_type v102;
  std::string *v103;
  __int128 v104;
  std::string *v105;
  __int128 v106;
  std::string *v107;
  std::string::size_type v108;
  std::string *v109;
  __int128 v110;
  std::string *v111;
  __int128 v112;
  std::string *v113;
  std::string::size_type v114;
  std::string *v115;
  __int128 v116;
  std::string *v117;
  __int128 v118;
  std::string *v119;
  std::string::size_type v120;
  std::string *v121;
  __int128 v122;
  std::string *v123;
  __int128 v124;
  std::string *v125;
  std::string::size_type v126;
  std::string *v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  unint64_t *v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  std::string *v135;
  __int128 v136;
  std::string *v137;
  __int128 v138;
  std::string *v139;
  std::string::size_type v140;
  std::string *v141;
  __int128 v142;
  std::string *v143;
  __int128 v144;
  std::string *v145;
  std::string::size_type v146;
  std::string *v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  unint64_t *v151;
  const Espresso::base_kernel::validate_for_engine_args_t *v152;
  void *v153;
  unsigned int v154;
  int64x2_t *v155;
  unint64_t *v156;
  unint64_t v157;
  int64x2_t *v158;
  unint64_t *v159;
  unint64_t v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  unint64_t *v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  int64x2_t *v169;
  unint64_t *v170;
  unint64_t v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  unint64_t *v175;
  __CFString *v176;
  unint64_t *v177;
  unint64_t v178;
  __int128 v179;
  uint64_t v180;
  __int128 v181;
  int v182;
  int64x2_t *v183;
  unint64_t *v184;
  unint64_t v185;
  std::string *v186;
  uint64_t **v187;
  std::__shared_weak_count *v188;
  unint64_t *v189;
  unint64_t v190;
  uint64_t *v191;
  std::__shared_weak_count *v192;
  unint64_t *v193;
  unint64_t v194;
  std::__shared_weak_count *v195;
  unint64_t *v196;
  unint64_t v197;
  int64x2_t *v198;
  unint64_t *v199;
  unint64_t v200;
  std::string *v201;
  __int128 v202;
  std::string *v203;
  __int128 v204;
  std::string *v205;
  std::string::size_type size;
  std::string *v207;
  __int128 v208;
  std::string *v209;
  __int128 v210;
  std::string *v211;
  std::string::size_type v212;
  std::string *v213;
  _QWORD *v214;
  __int128 *v215;
  __int128 v216;
  std::__shared_weak_count *v217;
  std::string::size_type v218;
  Espresso::ANECompilerEngine *v219;
  std::string::size_type v220;
  uint64_t v221;
  NSString *v222;
  int v223;
  char *v224;
  int64x2_t *v225;
  std::__shared_weak_count *v226;
  std::string v227;
  int64x2_t *v228[2];
  void *v229[2];
  __int128 v230;
  const __CFString *v231;
  void *v232;
  void *v233;
  uint64_t v234;
  _OWORD v235[2];
  uint64_t v236;
  void *v237;
  void *v238;
  uint64_t v239;
  Espresso::net *v240[2];
  std::string v241;
  int64x2_t *v242[2];
  int64x2_t *v243;
  uint64_t v244;
  int64x2_t *v245;
  uint64_t v246;
  int64x2_t *v247;
  uint64_t v248;
  int64x2_t *v249;
  uint64_t v250;
  const Espresso::base_kernel::validate_for_engine_args_t *v251;
  std::__shared_weak_count *v252;
  int64x2_t *v253;
  uint64_t v254;
  int64x2_t *v255[2];
  int64x2_t *v256;
  std::__shared_weak_count *v257;
  int64x2_t *v258;
  std::__shared_weak_count *v259;
  std::string v260;
  std::string v261;
  std::string v262;
  std::string v263;
  std::string v264;
  std::string v265;
  std::string v266;
  std::string v267;
  std::string v268;
  std::string v269;
  std::string v270;
  std::string v271;
  std::string v272;
  std::string v273;
  std::string v274;
  std::string __p;
  _QWORD v276[3];
  _BYTE v277[32];
  std::__shared_weak_count *v278;
  int64x2_t *v279;
  std::__shared_weak_count *v280;
  _BYTE v281[40];
  void *v282;
  void *v283;
  uint64_t v284;
  void **v285;

  if (*(_QWORD *)a3 != *((_QWORD *)a3 + 1))
  {
    v6 = (_OWORD *)*((_QWORD *)a3 + 6);
    v251 = 0;
    v252 = 0;
    v7 = (std::__shared_weak_count *)*((_QWORD *)v6 + 10);
    if (v7 && (v252 = std::__shared_weak_count::lock(v7)) != 0)
    {
      v8 = (const Espresso::base_kernel::validate_for_engine_args_t *)*((_QWORD *)v6 + 9);
      v251 = v8;
    }
    else
    {
      v8 = 0;
    }
    v9 = *(_DWORD *)(a1 + 288);
    v10 = v9 == 1;
    if (v9 == 4)
      v10 = 1;
    v11 = *(_DWORD *)(a1 + 280);
    if (v11 == 9 || v11 == 0)
      v10 = v9 == 4;
    if (v11 != 1)
      goto LABEL_64;
    std::string::basic_string[abi:ne180100]<0>(v229, "experimental.ane.reduce_mean_spatial");
    std::string::basic_string[abi:ne180100]<0>(v281, "0");
    Espresso::map_const_get<std::map<std::string,std::string>>((uint64_t)v8 + 472, (uint64_t)v229, (uint64_t)v281, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      v13 = __p.__r_.__value_.__l.__size_ == 1 && *__p.__r_.__value_.__l.__data_ == 49;
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    else
    {
      v13 = SHIBYTE(__p.__r_.__value_.__r.__words[2]) == 1 && __p.__r_.__value_.__s.__data_[0] == 49;
    }
    if ((v281[23] & 0x80000000) != 0)
      operator delete(*(void **)v281);
    if (SBYTE7(v230) < 0)
      operator delete(v229[0]);
    v10 = v9 == 4;
    if (v13)
    {
      if (v9 != 4 && (*(_DWORD *)(a1 + 288) & 0xFFFFFFFB) != 3)
        goto LABEL_48;
    }
    else
    {
LABEL_64:
      if (!v10)
      {
LABEL_48:
        v23 = a2[1];
        v249 = *a2;
        v250 = (uint64_t)v23;
        if (v23)
        {
          v24 = &v23->u64[1];
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
        }
        std::string::basic_string[abi:ne180100]<0>(v229, "reduce_kernel: SUM/AVG only support K, AVG support for XY or XYK requires opt-in.");
        Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)v229, (uint64_t)a3, 0);
        Espresso::emit_kernel_validation_warning(&v249, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
        v26 = v278;
        if (v278)
        {
          p_shared_owners = (unint64_t *)&v278->__shared_owners_;
          do
            v28 = __ldaxr(p_shared_owners);
          while (__stlxr(v28 - 1, p_shared_owners));
          if (!v28)
          {
            ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
            std::__shared_weak_count::__release_weak(v26);
          }
        }
        *(_QWORD *)v281 = v277;
        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v281);
        *(_QWORD *)v281 = v276;
        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v281);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SBYTE7(v230) < 0)
          operator delete(v229[0]);
        v20 = v250;
        if (!v250)
          goto LABEL_342;
        v29 = (unint64_t *)(v250 + 8);
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        goto LABEL_339;
      }
    }
    v31 = *(_DWORD *)(a1 + 280);
    if (v31 > 0xC || ((1 << v31) & 0x1A03) == 0)
    {
      v86 = a2[1];
      v247 = *a2;
      v248 = (uint64_t)v86;
      if (v86)
      {
        v87 = &v86->u64[1];
        do
          v88 = __ldxr(v87);
        while (__stxr(v88 + 1, v87));
      }
      std::string::basic_string[abi:ne180100]<0>(v229, "reduce_kernel: only reduce modes of ARGMAX, ARGMIN, MAX, SUM, AVG supported");
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)v229, (uint64_t)a3, 0);
      Espresso::emit_kernel_validation_warning(&v247, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
      v89 = v278;
      if (v278)
      {
        v90 = (unint64_t *)&v278->__shared_owners_;
        do
          v91 = __ldaxr(v90);
        while (__stlxr(v91 - 1, v90));
        if (!v91)
        {
          ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
          std::__shared_weak_count::__release_weak(v89);
        }
      }
      *(_QWORD *)v281 = v277;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v281);
      *(_QWORD *)v281 = v276;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v281);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SBYTE7(v230) < 0)
        operator delete(v229[0]);
      v20 = v248;
      if (!v248)
        goto LABEL_342;
      v92 = (unint64_t *)(v248 + 8);
      do
        v30 = __ldaxr(v92);
      while (__stlxr(v30 - 1, v92));
      goto LABEL_339;
    }
    v32 = *(_QWORD *)a3;
    v33 = *(_DWORD *)(a1 + 288);
    if (v33 != 3 && v33 != 7)
    {
      if (v33 == 4)
      {
        if (v31 == 9)
          v34 = 4097;
        else
          v34 = 2049;
        if (*(_DWORD *)(v32 + 8) >= v34)
          goto LABEL_324;
LABEL_313:
        if (v31 == 9 && *(_DWORD *)(a1 + 288) == 4)
        {
          v152 = v251;
          Espresso::ANECompilerEngine::ane_arch_allow_network_override((uint64_t)v251 + 472);
          v153 = (void *)objc_claimAutoreleasedReturnValue();
          v154 = Espresso::ANECompilerEngine::bottom_compute_path((Espresso::ANECompilerEngine *)a3, v152, 0);
          if (v154 >= 8 || ((0x97u >> v154) & 1) == 0)
          {
            v155 = a2[1];
            v242[0] = *a2;
            v242[1] = v155;
            if (v155)
            {
              v156 = &v155->u64[1];
              do
                v157 = __ldxr(v156);
              while (__stxr(v157 + 1, v156));
            }
            std::string::basic_string[abi:ne180100]<0>(v229, "reduce_kernel: invalid compute path for reduction input");
            Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)v229, (uint64_t)a3, 0);
            Espresso::emit_kernel_validation_warning(v242, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
            Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)&__p.__r_.__value_.__l.__data_);
            if (SBYTE7(v230) < 0)
              operator delete(v229[0]);
            std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v242);
LABEL_323:

LABEL_341:
            v20 = 0;
LABEL_342:
            v165 = v252;
            if (v252)
            {
              v166 = (unint64_t *)&v252->__shared_owners_;
              do
                v167 = __ldaxr(v166);
              while (__stlxr(v167 - 1, v166));
              if (!v167)
              {
                ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
                std::__shared_weak_count::__release_weak(v165);
              }
            }
            return v20;
          }
          v176 = off_1E2DD20A8[v154];
          ANECTensorDescInitialize();
          v240[0] = v152;
          v240[1] = (Espresso::net *)v252;
          if (v252)
          {
            v177 = (unint64_t *)&v252->__shared_owners_;
            do
              v178 = __ldxr(v177);
            while (__stxr(v178 + 1, v177));
          }
          v179 = *(_OWORD *)(v32 + 16);
          v180 = *(_QWORD *)(v32 + 32);
          v235[0] = *(_OWORD *)v32;
          v235[1] = v179;
          v236 = v180;
          v237 = 0;
          v238 = 0;
          v239 = 0;
          std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v237, *(const void **)(v32 + 40), *(_QWORD *)(v32 + 48), (uint64_t)(*(_QWORD *)(v32 + 48) - *(_QWORD *)(v32 + 40)) >> 2);
          Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)&v241, v240[0], (const Espresso::layer_shape *)v235, 1);
          if (v237)
          {
            v238 = v237;
            operator delete(v237);
          }
          std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v240);
          *(_QWORD *)&v181 = SHIDWORD(v241.__r_.__value_.__r.__words[1]);
          *((_QWORD *)&v181 + 1) = SLODWORD(v241.__r_.__value_.__r.__words[2]);
          *(_OWORD *)&v281[24] = v181;
          *(_QWORD *)v281 = v176;
          v282 = (void *)SLODWORD(v241.__r_.__value_.__r.__words[1]);
          *(_QWORD *)&v181 = SLODWORD(v241.__r_.__value_.__l.__data_);
          *((_QWORD *)&v181 + 1) = SHIDWORD(v241.__r_.__value_.__r.__words[0]);
          *(_OWORD *)&v281[8] = v181;
          ANECReductionLayerDescInitialize();
          v229[0] = CFSTR("Max");
          v229[1] = CFSTR("Bypass");
          *((_QWORD *)&v230 + 1) = 1;
          v231 = CFSTR("Channel");
          v272.__r_.__value_.__r.__words[0] = 0;
          v271.__r_.__value_.__r.__words[0] = 0;
          Espresso::ANECompilerEngine::ane_kernel::get_ane_validator((Espresso::ANECompilerEngine::ane_kernel *)&__p, (NSString *)(a1 + 328), v153);
          v182 = ANECValidateReductionLayer();
          std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
          if (v182)
          {
            v183 = a2[1];
            v228[0] = *a2;
            v228[1] = v183;
            if (v183)
            {
              v184 = &v183->u64[1];
              do
                v185 = __ldxr(v184);
              while (__stxr(v185 + 1, v184));
            }
            std::to_string(&v274, v182);
            v186 = std::string::insert(&v274, 0, "reduce_kernel: ANECValidateReductionLayer failed with status");
            v227 = *v186;
            v186->__r_.__value_.__l.__size_ = 0;
            v186->__r_.__value_.__r.__words[2] = 0;
            v186->__r_.__value_.__r.__words[0] = 0;
            Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)&v227, (uint64_t)a3, 0);
            Espresso::emit_kernel_validation_warning(v228, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
            Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)&__p.__r_.__value_.__l.__data_);
            if (SHIBYTE(v227.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v227.__r_.__value_.__l.__data_);
            if (SHIBYTE(v274.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v274.__r_.__value_.__l.__data_);
            std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v228);
            Espresso::ANECompilerEngine::violations_from_alternates<ANECReductionLayerDescAlternate>((uint64_t)&v227, (uint64_t)v272.__r_.__value_.__l.__data_, (uint64_t)v271.__r_.__value_.__l.__data_);
            v187 = (uint64_t **)v227.__r_.__value_.__r.__words[2];
            if (v227.__r_.__value_.__r.__words[2])
            {
              do
              {
                v188 = (std::__shared_weak_count *)a2[1];
                v225 = *a2;
                v226 = v188;
                if (v188)
                {
                  v189 = (unint64_t *)&v188->__shared_owners_;
                  do
                    v190 = __ldxr(v189);
                  while (__stxr(v190 + 1, v189));
                }
                v191 = objc_retainAutorelease(v187[2]);
                std::string::basic_string[abi:ne180100]<0>(&v274, (char *)objc_msgSend(v191, "UTF8String", v225));
                Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)&v274, (uint64_t)a3, 0);
                Espresso::emit_kernel_validation_warning(&v225, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
                v192 = v278;
                if (v278)
                {
                  v193 = (unint64_t *)&v278->__shared_owners_;
                  do
                    v194 = __ldaxr(v193);
                  while (__stlxr(v194 - 1, v193));
                  if (!v194)
                  {
                    ((void (*)(std::__shared_weak_count *))v192->__on_zero_shared)(v192);
                    std::__shared_weak_count::__release_weak(v192);
                  }
                }
                v273.__r_.__value_.__r.__words[0] = (std::string::size_type)v277;
                std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v273);
                v273.__r_.__value_.__r.__words[0] = (std::string::size_type)v276;
                std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v273);
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__p.__r_.__value_.__l.__data_);
                if (SHIBYTE(v274.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v274.__r_.__value_.__l.__data_);
                v195 = v226;
                if (v226)
                {
                  v196 = (unint64_t *)&v226->__shared_owners_;
                  do
                    v197 = __ldaxr(v196);
                  while (__stlxr(v197 - 1, v196));
                  if (!v197)
                  {
                    ((void (*)(std::__shared_weak_count *))v195->__on_zero_shared)(v195);
                    std::__shared_weak_count::__release_weak(v195);
                  }
                }
                v187 = (uint64_t **)*v187;
              }
              while (v187);
            }
            std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&v227);
            goto LABEL_323;
          }

        }
        v20 = 1;
        goto LABEL_342;
      }
      if (*(int *)v32 <= 2048 && *(_DWORD *)(v32 + 4) == 1 && *(_DWORD *)(v32 + 8) == 1)
        goto LABEL_313;
LABEL_324:
      v158 = a2[1];
      v243 = *a2;
      v244 = (uint64_t)v158;
      if (v158)
      {
        v159 = &v158->u64[1];
        do
          v160 = __ldxr(v159);
        while (__stxr(v160 + 1, v159));
      }
      std::string::basic_string[abi:ne180100]<0>(v229, "reduce_kernel: invalid reduce bottom shape");
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)v229, (uint64_t)a3, 0);
      Espresso::emit_kernel_validation_warning(&v243, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
      v161 = v278;
      if (v278)
      {
        v162 = (unint64_t *)&v278->__shared_owners_;
        do
          v163 = __ldaxr(v162);
        while (__stlxr(v163 - 1, v162));
        if (!v163)
        {
          ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
          std::__shared_weak_count::__release_weak(v161);
        }
      }
      *(_QWORD *)v281 = v277;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v281);
      *(_QWORD *)v281 = v276;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v281);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SBYTE7(v230) < 0)
        operator delete(v229[0]);
      v20 = v244;
      if (!v244)
        goto LABEL_342;
      v164 = (unint64_t *)(v244 + 8);
      do
        v30 = __ldaxr(v164);
      while (__stlxr(v30 - 1, v164));
      goto LABEL_339;
    }
    v36 = v33 != 7 || *(_DWORD *)(v32 + 8) < 2049;
    if (v32 == *((_QWORD *)a3 + 1) || (v37 = (_OWORD *)*((_QWORD *)a3 + 3), v37 == *((_OWORD **)a3 + 4)))
    {
LABEL_311:
      if (v36)
      {
        v31 = *(_DWORD *)(a1 + 280);
        goto LABEL_313;
      }
      goto LABEL_324;
    }
    v39 = *(_DWORD *)v32;
    v38 = *(_DWORD *)(v32 + 4);
    v40 = v37[1];
    v41 = (const __CFString *)*((_QWORD *)v37 + 4);
    *(_OWORD *)v229 = *v37;
    v230 = v40;
    v231 = v41;
    v232 = 0;
    v233 = 0;
    v234 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v232, *((const void **)v37 + 5), *((_QWORD *)v37 + 6), (uint64_t)(*((_QWORD *)v37 + 6) - *((_QWORD *)v37 + 5)) >> 2);
    v42 = *(_QWORD *)a3;
    v43 = *(_QWORD *)(*(_QWORD *)a3 + 32);
    v44 = *(_OWORD *)(*(_QWORD *)a3 + 16);
    *(_OWORD *)v281 = *(_OWORD *)*(_QWORD *)a3;
    *(_OWORD *)&v281[16] = v44;
    *(_QWORD *)&v281[32] = v43;
    v282 = 0;
    v283 = 0;
    v284 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v282, *(const void **)(v42 + 40), *(_QWORD *)(v42 + 48), (uint64_t)(*(_QWORD *)(v42 + 48) - *(_QWORD *)(v42 + 40)) >> 2);
    v45 = *(_DWORD *)v281;
    if (~*(_DWORD *)v281 + LODWORD(v229[0]) + v39 < 1)
    {
      v93 = *(_DWORD *)&v281[4];
      if (~*(_DWORD *)&v281[4] + HIDWORD(v229[0]) + v38 < 1)
      {
        if (*(int *)v281 >= v39)
        {
          if (*(int *)&v281[4] >= v38)
          {
            v214 = (_QWORD *)*((_QWORD *)a3 + 6);
            v215 = *(__int128 **)(*v214 + 224 * *((_QWORD *)a3 + 9) + 136);
            if (*((char *)v215 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&v227, *(const std::string::value_type **)v215, *((_QWORD *)v215 + 1));
              v214 = (_QWORD *)*((_QWORD *)a3 + 6);
            }
            else
            {
              v216 = *v215;
              v227.__r_.__value_.__r.__words[2] = *((_QWORD *)v215 + 2);
              *(_OWORD *)&v227.__r_.__value_.__l.__data_ = v216;
            }
            *(_OWORD *)&v241.__r_.__value_.__l.__data_ = 0uLL;
            v217 = (std::__shared_weak_count *)v214[10];
            if (v217)
            {
              v241.__r_.__value_.__l.__size_ = (std::string::size_type)std::__shared_weak_count::lock(v217);
              if (v241.__r_.__value_.__l.__size_)
              {
                v218 = v214[9];
                v241.__r_.__value_.__r.__words[0] = v218;
              }
              else
              {
                v218 = v241.__r_.__value_.__r.__words[0];
              }
            }
            else
            {
              v218 = 0;
            }
            Espresso::ANECompilerEngine::ane_arch_allow_network_override(v218 + 472);
            v219 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
            v220 = v241.__r_.__value_.__r.__words[0];
            v221 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(_QWORD **)(v241.__r_.__value_.__r.__words[0] + 360), &v227);
            if (a3[16] <= 1)
              v223 = 1;
            else
              v223 = a3[16];
            if (v221)
            {
              v274.__r_.__value_.__r.__words[0] = (std::string::size_type)&v227;
              v224 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v220 + 352), &v227, (uint64_t)&std::piecewise_construct, (__int128 **)&v274);
              *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)(v224 + 56);
              v276[1] = 0;
              __p.__r_.__value_.__r.__words[2] = 0;
              v276[0] = 0;
              std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p.__r_.__value_.__r.__words[2], *((const void **)v224 + 9), *((_QWORD *)v224 + 10), (uint64_t)(*((_QWORD *)v224 + 10) - *((_QWORD *)v224 + 9)) >> 2);
              v223 = LODWORD(__p.__r_.__value_.__r.__words[1]) == -1 ? 1 : LODWORD(__p.__r_.__value_.__r.__words[1]);
              if (__p.__r_.__value_.__r.__words[2])
              {
                v276[0] = *((_QWORD *)&__p.__r_.__value_.__l + 2);
                operator delete((void *)__p.__r_.__value_.__r.__words[2]);
              }
            }
            if (v223 == 1)
              Espresso::ANECompilerEngine::is_mix(v219, v222);

            std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v241);
            if (SHIBYTE(v227.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v227.__r_.__value_.__l.__data_);
            LOBYTE(v83) = 1;
            goto LABEL_306;
          }
          v198 = a2[1];
          v255[0] = *a2;
          v255[1] = v198;
          if (v198)
          {
            v199 = &v198->u64[1];
            do
              v200 = __ldxr(v199);
            while (__stxr(v200 + 1, v199));
          }
          std::to_string(&v271, v93);
          v201 = std::string::insert(&v271, 0, "Input height ");
          v202 = *(_OWORD *)&v201->__r_.__value_.__l.__data_;
          v272.__r_.__value_.__r.__words[2] = v201->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v272.__r_.__value_.__l.__data_ = v202;
          v201->__r_.__value_.__l.__size_ = 0;
          v201->__r_.__value_.__r.__words[2] = 0;
          v201->__r_.__value_.__r.__words[0] = 0;
          v203 = std::string::append(&v272, " plus vertical padding ");
          v204 = *(_OWORD *)&v203->__r_.__value_.__l.__data_;
          v273.__r_.__value_.__r.__words[2] = v203->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v273.__r_.__value_.__l.__data_ = v204;
          v203->__r_.__value_.__l.__size_ = 0;
          v203->__r_.__value_.__r.__words[2] = 0;
          v203->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v270, 0);
          if ((v270.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v205 = &v270;
          else
            v205 = (std::string *)v270.__r_.__value_.__r.__words[0];
          if ((v270.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v270.__r_.__value_.__r.__words[2]);
          else
            size = v270.__r_.__value_.__l.__size_;
          v207 = std::string::append(&v273, (const std::string::value_type *)v205, size);
          v208 = *(_OWORD *)&v207->__r_.__value_.__l.__data_;
          v274.__r_.__value_.__r.__words[2] = v207->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v274.__r_.__value_.__l.__data_ = v208;
          v207->__r_.__value_.__l.__size_ = 0;
          v207->__r_.__value_.__r.__words[2] = 0;
          v207->__r_.__value_.__r.__words[0] = 0;
          v209 = std::string::append(&v274, " is less than the kernel height ");
          v210 = *(_OWORD *)&v209->__r_.__value_.__l.__data_;
          v241.__r_.__value_.__r.__words[2] = v209->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v241.__r_.__value_.__l.__data_ = v210;
          v209->__r_.__value_.__l.__size_ = 0;
          v209->__r_.__value_.__r.__words[2] = 0;
          v209->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v269, v38);
          if ((v269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v211 = &v269;
          else
            v211 = (std::string *)v269.__r_.__value_.__r.__words[0];
          if ((v269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v212 = HIBYTE(v269.__r_.__value_.__r.__words[2]);
          else
            v212 = v269.__r_.__value_.__l.__size_;
          v213 = std::string::append(&v241, (const std::string::value_type *)v211, v212);
          v227 = *v213;
          v213->__r_.__value_.__l.__size_ = 0;
          v213->__r_.__value_.__r.__words[2] = 0;
          v213->__r_.__value_.__r.__words[0] = 0;
          Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)&v227, (uint64_t)a3, 0);
          Espresso::emit_kernel_validation_warning(v255, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
          Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)&__p.__r_.__value_.__l.__data_);
          if (SHIBYTE(v227.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v227.__r_.__value_.__l.__data_);
          if (SHIBYTE(v269.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v269.__r_.__value_.__l.__data_);
          if (SHIBYTE(v241.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v241.__r_.__value_.__l.__data_);
          if (SHIBYTE(v274.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v274.__r_.__value_.__l.__data_);
          if (SHIBYTE(v270.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v270.__r_.__value_.__l.__data_);
          if (SHIBYTE(v273.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v273.__r_.__value_.__l.__data_);
          if (SHIBYTE(v272.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v272.__r_.__value_.__l.__data_);
          if (SHIBYTE(v271.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v271.__r_.__value_.__l.__data_);
          std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v255);
          goto LABEL_305;
        }
        v132 = (std::__shared_weak_count *)a2[1];
        v256 = *a2;
        v257 = v132;
        if (v132)
        {
          v133 = (unint64_t *)&v132->__shared_owners_;
          do
            v134 = __ldxr(v133);
          while (__stxr(v134 + 1, v133));
        }
        std::to_string(&v271, v45);
        v135 = std::string::insert(&v271, 0, "Input width ");
        v136 = *(_OWORD *)&v135->__r_.__value_.__l.__data_;
        v272.__r_.__value_.__r.__words[2] = v135->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v272.__r_.__value_.__l.__data_ = v136;
        v135->__r_.__value_.__l.__size_ = 0;
        v135->__r_.__value_.__r.__words[2] = 0;
        v135->__r_.__value_.__r.__words[0] = 0;
        v137 = std::string::append(&v272, " plus horizontal padding ");
        v138 = *(_OWORD *)&v137->__r_.__value_.__l.__data_;
        v273.__r_.__value_.__r.__words[2] = v137->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v273.__r_.__value_.__l.__data_ = v138;
        v137->__r_.__value_.__l.__size_ = 0;
        v137->__r_.__value_.__r.__words[2] = 0;
        v137->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v270, 0);
        if ((v270.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v139 = &v270;
        else
          v139 = (std::string *)v270.__r_.__value_.__r.__words[0];
        if ((v270.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v140 = HIBYTE(v270.__r_.__value_.__r.__words[2]);
        else
          v140 = v270.__r_.__value_.__l.__size_;
        v141 = std::string::append(&v273, (const std::string::value_type *)v139, v140);
        v142 = *(_OWORD *)&v141->__r_.__value_.__l.__data_;
        v274.__r_.__value_.__r.__words[2] = v141->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v274.__r_.__value_.__l.__data_ = v142;
        v141->__r_.__value_.__l.__size_ = 0;
        v141->__r_.__value_.__r.__words[2] = 0;
        v141->__r_.__value_.__r.__words[0] = 0;
        v143 = std::string::append(&v274, " is less than the kernel width ");
        v144 = *(_OWORD *)&v143->__r_.__value_.__l.__data_;
        v241.__r_.__value_.__r.__words[2] = v143->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v241.__r_.__value_.__l.__data_ = v144;
        v143->__r_.__value_.__l.__size_ = 0;
        v143->__r_.__value_.__r.__words[2] = 0;
        v143->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v269, v39);
        if ((v269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v145 = &v269;
        else
          v145 = (std::string *)v269.__r_.__value_.__r.__words[0];
        if ((v269.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v146 = HIBYTE(v269.__r_.__value_.__r.__words[2]);
        else
          v146 = v269.__r_.__value_.__l.__size_;
        v147 = std::string::append(&v241, (const std::string::value_type *)v145, v146);
        v227 = *v147;
        v147->__r_.__value_.__l.__size_ = 0;
        v147->__r_.__value_.__r.__words[2] = 0;
        v147->__r_.__value_.__r.__words[0] = 0;
        Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)&v227, (uint64_t)a3, 0);
        Espresso::emit_kernel_validation_warning(&v256, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
        v148 = v278;
        if (v278)
        {
          v149 = (unint64_t *)&v278->__shared_owners_;
          do
            v150 = __ldaxr(v149);
          while (__stlxr(v150 - 1, v149));
          if (!v150)
          {
            ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
            std::__shared_weak_count::__release_weak(v148);
          }
        }
        v268.__r_.__value_.__r.__words[0] = (std::string::size_type)v277;
        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v268);
        v268.__r_.__value_.__r.__words[0] = (std::string::size_type)v276;
        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v268);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v227.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v227.__r_.__value_.__l.__data_);
        if (SHIBYTE(v269.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v269.__r_.__value_.__l.__data_);
        if (SHIBYTE(v241.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v241.__r_.__value_.__l.__data_);
        if (SHIBYTE(v274.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v274.__r_.__value_.__l.__data_);
        if (SHIBYTE(v270.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v270.__r_.__value_.__l.__data_);
        if (SHIBYTE(v273.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v273.__r_.__value_.__l.__data_);
        if (SHIBYTE(v272.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v272.__r_.__value_.__l.__data_);
        if (SHIBYTE(v271.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v271.__r_.__value_.__l.__data_);
        v83 = v257;
        if (!v257)
          goto LABEL_306;
        v151 = (unint64_t *)&v257->__shared_owners_;
        do
          v85 = __ldaxr(v151);
        while (__stlxr(v85 - 1, v151));
      }
      else
      {
        v94 = (std::__shared_weak_count *)a2[1];
        v258 = *a2;
        v259 = v94;
        if (v94)
        {
          v95 = (unint64_t *)&v94->__shared_owners_;
          do
            v96 = __ldxr(v95);
          while (__stxr(v96 + 1, v95));
        }
        std::to_string(&v265, v93);
        v97 = std::string::insert(&v265, 0, "Declared bottom pad less than derived value for src_h=");
        v98 = *(_OWORD *)&v97->__r_.__value_.__l.__data_;
        v266.__r_.__value_.__r.__words[2] = v97->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v266.__r_.__value_.__l.__data_ = v98;
        v97->__r_.__value_.__l.__size_ = 0;
        v97->__r_.__value_.__r.__words[2] = 0;
        v97->__r_.__value_.__r.__words[0] = 0;
        v99 = std::string::append(&v266, " dst_h=");
        v100 = *(_OWORD *)&v99->__r_.__value_.__l.__data_;
        v267.__r_.__value_.__r.__words[2] = v99->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v267.__r_.__value_.__l.__data_ = v100;
        v99->__r_.__value_.__l.__size_ = 0;
        v99->__r_.__value_.__r.__words[2] = 0;
        v99->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v264, SHIDWORD(v229[0]));
        if ((v264.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v101 = &v264;
        else
          v101 = (std::string *)v264.__r_.__value_.__r.__words[0];
        if ((v264.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v102 = HIBYTE(v264.__r_.__value_.__r.__words[2]);
        else
          v102 = v264.__r_.__value_.__l.__size_;
        v103 = std::string::append(&v267, (const std::string::value_type *)v101, v102);
        v104 = *(_OWORD *)&v103->__r_.__value_.__l.__data_;
        v268.__r_.__value_.__r.__words[2] = v103->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v268.__r_.__value_.__l.__data_ = v104;
        v103->__r_.__value_.__l.__size_ = 0;
        v103->__r_.__value_.__r.__words[2] = 0;
        v103->__r_.__value_.__r.__words[0] = 0;
        v105 = std::string::append(&v268, " stride_y=");
        v106 = *(_OWORD *)&v105->__r_.__value_.__l.__data_;
        v269.__r_.__value_.__r.__words[2] = v105->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v269.__r_.__value_.__l.__data_ = v106;
        v105->__r_.__value_.__l.__size_ = 0;
        v105->__r_.__value_.__r.__words[2] = 0;
        v105->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v263, 1);
        if ((v263.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v107 = &v263;
        else
          v107 = (std::string *)v263.__r_.__value_.__r.__words[0];
        if ((v263.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v108 = HIBYTE(v263.__r_.__value_.__r.__words[2]);
        else
          v108 = v263.__r_.__value_.__l.__size_;
        v109 = std::string::append(&v269, (const std::string::value_type *)v107, v108);
        v110 = *(_OWORD *)&v109->__r_.__value_.__l.__data_;
        v270.__r_.__value_.__r.__words[2] = v109->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v270.__r_.__value_.__l.__data_ = v110;
        v109->__r_.__value_.__l.__size_ = 0;
        v109->__r_.__value_.__r.__words[2] = 0;
        v109->__r_.__value_.__r.__words[0] = 0;
        v111 = std::string::append(&v270, " Ny=");
        v112 = *(_OWORD *)&v111->__r_.__value_.__l.__data_;
        v271.__r_.__value_.__r.__words[2] = v111->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v271.__r_.__value_.__l.__data_ = v112;
        v111->__r_.__value_.__l.__size_ = 0;
        v111->__r_.__value_.__r.__words[2] = 0;
        v111->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v262, v38);
        if ((v262.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v113 = &v262;
        else
          v113 = (std::string *)v262.__r_.__value_.__r.__words[0];
        if ((v262.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v114 = HIBYTE(v262.__r_.__value_.__r.__words[2]);
        else
          v114 = v262.__r_.__value_.__l.__size_;
        v115 = std::string::append(&v271, (const std::string::value_type *)v113, v114);
        v116 = *(_OWORD *)&v115->__r_.__value_.__l.__data_;
        v272.__r_.__value_.__r.__words[2] = v115->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v272.__r_.__value_.__l.__data_ = v116;
        v115->__r_.__value_.__l.__size_ = 0;
        v115->__r_.__value_.__r.__words[2] = 0;
        v115->__r_.__value_.__r.__words[0] = 0;
        v117 = std::string::append(&v272, " pad_t=");
        v118 = *(_OWORD *)&v117->__r_.__value_.__l.__data_;
        v273.__r_.__value_.__r.__words[2] = v117->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v273.__r_.__value_.__l.__data_ = v118;
        v117->__r_.__value_.__l.__size_ = 0;
        v117->__r_.__value_.__r.__words[2] = 0;
        v117->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v261, 0);
        if ((v261.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v119 = &v261;
        else
          v119 = (std::string *)v261.__r_.__value_.__r.__words[0];
        if ((v261.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v120 = HIBYTE(v261.__r_.__value_.__r.__words[2]);
        else
          v120 = v261.__r_.__value_.__l.__size_;
        v121 = std::string::append(&v273, (const std::string::value_type *)v119, v120);
        v122 = *(_OWORD *)&v121->__r_.__value_.__l.__data_;
        v274.__r_.__value_.__r.__words[2] = v121->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v274.__r_.__value_.__l.__data_ = v122;
        v121->__r_.__value_.__l.__size_ = 0;
        v121->__r_.__value_.__r.__words[2] = 0;
        v121->__r_.__value_.__r.__words[0] = 0;
        v123 = std::string::append(&v274, " pad_b");
        v124 = *(_OWORD *)&v123->__r_.__value_.__l.__data_;
        v241.__r_.__value_.__r.__words[2] = v123->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v241.__r_.__value_.__l.__data_ = v124;
        v123->__r_.__value_.__l.__size_ = 0;
        v123->__r_.__value_.__r.__words[2] = 0;
        v123->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v260, 0);
        if ((v260.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v125 = &v260;
        else
          v125 = (std::string *)v260.__r_.__value_.__r.__words[0];
        if ((v260.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v126 = HIBYTE(v260.__r_.__value_.__r.__words[2]);
        else
          v126 = v260.__r_.__value_.__l.__size_;
        v127 = std::string::append(&v241, (const std::string::value_type *)v125, v126);
        v227 = *v127;
        v127->__r_.__value_.__l.__size_ = 0;
        v127->__r_.__value_.__r.__words[2] = 0;
        v127->__r_.__value_.__r.__words[0] = 0;
        Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)&v227, (uint64_t)a3, 0);
        Espresso::emit_kernel_validation_warning(&v258, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
        v128 = v278;
        if (v278)
        {
          v129 = (unint64_t *)&v278->__shared_owners_;
          do
            v130 = __ldaxr(v129);
          while (__stlxr(v130 - 1, v129));
          if (!v130)
          {
            ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
            std::__shared_weak_count::__release_weak(v128);
          }
        }
        v285 = (void **)v277;
        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v285);
        v285 = (void **)v276;
        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v285);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v227.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v227.__r_.__value_.__l.__data_);
        if (SHIBYTE(v260.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v260.__r_.__value_.__l.__data_);
        if (SHIBYTE(v241.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v241.__r_.__value_.__l.__data_);
        if (SHIBYTE(v274.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v274.__r_.__value_.__l.__data_);
        if (SHIBYTE(v261.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v261.__r_.__value_.__l.__data_);
        if (SHIBYTE(v273.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v273.__r_.__value_.__l.__data_);
        if (SHIBYTE(v272.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v272.__r_.__value_.__l.__data_);
        if (SHIBYTE(v262.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v262.__r_.__value_.__l.__data_);
        if (SHIBYTE(v271.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v271.__r_.__value_.__l.__data_);
        if (SHIBYTE(v270.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v270.__r_.__value_.__l.__data_);
        if (SHIBYTE(v263.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v263.__r_.__value_.__l.__data_);
        if (SHIBYTE(v269.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v269.__r_.__value_.__l.__data_);
        if (SHIBYTE(v268.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v268.__r_.__value_.__l.__data_);
        if (SHIBYTE(v264.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v264.__r_.__value_.__l.__data_);
        if (SHIBYTE(v267.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v267.__r_.__value_.__l.__data_);
        if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v266.__r_.__value_.__l.__data_);
        if (SHIBYTE(v265.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v265.__r_.__value_.__l.__data_);
        v83 = v259;
        if (!v259)
          goto LABEL_306;
        v131 = (unint64_t *)&v259->__shared_owners_;
        do
          v85 = __ldaxr(v131);
        while (__stlxr(v85 - 1, v131));
      }
    }
    else
    {
      v46 = (std::__shared_weak_count *)a2[1];
      v279 = *a2;
      v280 = v46;
      if (v46)
      {
        v47 = (unint64_t *)&v46->__shared_owners_;
        do
          v48 = __ldxr(v47);
        while (__stxr(v48 + 1, v47));
      }
      std::to_string(&v265, v45);
      v49 = std::string::insert(&v265, 0, "Declared right pad less than derived value for src_w=");
      v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
      v266.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v266.__r_.__value_.__l.__data_ = v50;
      v49->__r_.__value_.__l.__size_ = 0;
      v49->__r_.__value_.__r.__words[2] = 0;
      v49->__r_.__value_.__r.__words[0] = 0;
      v51 = std::string::append(&v266, " dst_w=");
      v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
      v267.__r_.__value_.__r.__words[2] = v51->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v267.__r_.__value_.__l.__data_ = v52;
      v51->__r_.__value_.__l.__size_ = 0;
      v51->__r_.__value_.__r.__words[2] = 0;
      v51->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v264, (int)v229[0]);
      if ((v264.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v53 = &v264;
      else
        v53 = (std::string *)v264.__r_.__value_.__r.__words[0];
      if ((v264.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v54 = HIBYTE(v264.__r_.__value_.__r.__words[2]);
      else
        v54 = v264.__r_.__value_.__l.__size_;
      v55 = std::string::append(&v267, (const std::string::value_type *)v53, v54);
      v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
      v268.__r_.__value_.__r.__words[2] = v55->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v268.__r_.__value_.__l.__data_ = v56;
      v55->__r_.__value_.__l.__size_ = 0;
      v55->__r_.__value_.__r.__words[2] = 0;
      v55->__r_.__value_.__r.__words[0] = 0;
      v57 = std::string::append(&v268, " stride_x=");
      v58 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
      v269.__r_.__value_.__r.__words[2] = v57->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v269.__r_.__value_.__l.__data_ = v58;
      v57->__r_.__value_.__l.__size_ = 0;
      v57->__r_.__value_.__r.__words[2] = 0;
      v57->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v263, 1);
      if ((v263.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v59 = &v263;
      else
        v59 = (std::string *)v263.__r_.__value_.__r.__words[0];
      if ((v263.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v60 = HIBYTE(v263.__r_.__value_.__r.__words[2]);
      else
        v60 = v263.__r_.__value_.__l.__size_;
      v61 = std::string::append(&v269, (const std::string::value_type *)v59, v60);
      v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
      v270.__r_.__value_.__r.__words[2] = v61->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v270.__r_.__value_.__l.__data_ = v62;
      v61->__r_.__value_.__l.__size_ = 0;
      v61->__r_.__value_.__r.__words[2] = 0;
      v61->__r_.__value_.__r.__words[0] = 0;
      v63 = std::string::append(&v270, " Nx=");
      v64 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
      v271.__r_.__value_.__r.__words[2] = v63->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v271.__r_.__value_.__l.__data_ = v64;
      v63->__r_.__value_.__l.__size_ = 0;
      v63->__r_.__value_.__r.__words[2] = 0;
      v63->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v262, v39);
      if ((v262.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v65 = &v262;
      else
        v65 = (std::string *)v262.__r_.__value_.__r.__words[0];
      if ((v262.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v66 = HIBYTE(v262.__r_.__value_.__r.__words[2]);
      else
        v66 = v262.__r_.__value_.__l.__size_;
      v67 = std::string::append(&v271, (const std::string::value_type *)v65, v66);
      v68 = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
      v272.__r_.__value_.__r.__words[2] = v67->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v272.__r_.__value_.__l.__data_ = v68;
      v67->__r_.__value_.__l.__size_ = 0;
      v67->__r_.__value_.__r.__words[2] = 0;
      v67->__r_.__value_.__r.__words[0] = 0;
      v69 = std::string::append(&v272, " pad_l=");
      v70 = *(_OWORD *)&v69->__r_.__value_.__l.__data_;
      v273.__r_.__value_.__r.__words[2] = v69->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v273.__r_.__value_.__l.__data_ = v70;
      v69->__r_.__value_.__l.__size_ = 0;
      v69->__r_.__value_.__r.__words[2] = 0;
      v69->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v261, 0);
      if ((v261.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v71 = &v261;
      else
        v71 = (std::string *)v261.__r_.__value_.__r.__words[0];
      if ((v261.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v72 = HIBYTE(v261.__r_.__value_.__r.__words[2]);
      else
        v72 = v261.__r_.__value_.__l.__size_;
      v73 = std::string::append(&v273, (const std::string::value_type *)v71, v72);
      v74 = *(_OWORD *)&v73->__r_.__value_.__l.__data_;
      v274.__r_.__value_.__r.__words[2] = v73->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v274.__r_.__value_.__l.__data_ = v74;
      v73->__r_.__value_.__l.__size_ = 0;
      v73->__r_.__value_.__r.__words[2] = 0;
      v73->__r_.__value_.__r.__words[0] = 0;
      v75 = std::string::append(&v274, " pad_r=");
      v76 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
      v241.__r_.__value_.__r.__words[2] = v75->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v241.__r_.__value_.__l.__data_ = v76;
      v75->__r_.__value_.__l.__size_ = 0;
      v75->__r_.__value_.__r.__words[2] = 0;
      v75->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v260, 0);
      if ((v260.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v77 = &v260;
      else
        v77 = (std::string *)v260.__r_.__value_.__r.__words[0];
      if ((v260.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v78 = HIBYTE(v260.__r_.__value_.__r.__words[2]);
      else
        v78 = v260.__r_.__value_.__l.__size_;
      v79 = std::string::append(&v241, (const std::string::value_type *)v77, v78);
      v227 = *v79;
      v79->__r_.__value_.__l.__size_ = 0;
      v79->__r_.__value_.__r.__words[2] = 0;
      v79->__r_.__value_.__r.__words[0] = 0;
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)&v227, (uint64_t)a3, 0);
      Espresso::emit_kernel_validation_warning(&v279, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
      v80 = v278;
      if (v278)
      {
        v81 = (unint64_t *)&v278->__shared_owners_;
        do
          v82 = __ldaxr(v81);
        while (__stlxr(v82 - 1, v81));
        if (!v82)
        {
          ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
          std::__shared_weak_count::__release_weak(v80);
        }
      }
      v285 = (void **)v277;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v285);
      v285 = (void **)v276;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v285);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v227.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v227.__r_.__value_.__l.__data_);
      if (SHIBYTE(v260.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v260.__r_.__value_.__l.__data_);
      if (SHIBYTE(v241.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v241.__r_.__value_.__l.__data_);
      if (SHIBYTE(v274.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v274.__r_.__value_.__l.__data_);
      if (SHIBYTE(v261.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v261.__r_.__value_.__l.__data_);
      if (SHIBYTE(v273.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v273.__r_.__value_.__l.__data_);
      if (SHIBYTE(v272.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v272.__r_.__value_.__l.__data_);
      if (SHIBYTE(v262.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v262.__r_.__value_.__l.__data_);
      if (SHIBYTE(v271.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v271.__r_.__value_.__l.__data_);
      if (SHIBYTE(v270.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v270.__r_.__value_.__l.__data_);
      if (SHIBYTE(v263.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v263.__r_.__value_.__l.__data_);
      if (SHIBYTE(v269.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v269.__r_.__value_.__l.__data_);
      if (SHIBYTE(v268.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v268.__r_.__value_.__l.__data_);
      if (SHIBYTE(v264.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v264.__r_.__value_.__l.__data_);
      if (SHIBYTE(v267.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v267.__r_.__value_.__l.__data_);
      if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v266.__r_.__value_.__l.__data_);
      if (SHIBYTE(v265.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v265.__r_.__value_.__l.__data_);
      v83 = v280;
      if (!v280)
        goto LABEL_306;
      v84 = (unint64_t *)&v280->__shared_owners_;
      do
        v85 = __ldaxr(v84);
      while (__stlxr(v85 - 1, v84));
    }
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
LABEL_305:
    LOBYTE(v83) = 0;
LABEL_306:
    if (v282)
    {
      v283 = v282;
      operator delete(v282);
    }
    if (v232)
    {
      v233 = v232;
      operator delete(v232);
    }
    if ((v83 & 1) != 0)
      goto LABEL_311;
    v169 = a2[1];
    v245 = *a2;
    v246 = (uint64_t)v169;
    if (v169)
    {
      v170 = &v169->u64[1];
      do
        v171 = __ldxr(v170);
      while (__stxr(v171 + 1, v170));
    }
    std::string::basic_string[abi:ne180100]<0>(v229, "reduce_kernel: invalid reduce bottom shape for spatial reduce.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)v229, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v245, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    v172 = v278;
    if (v278)
    {
      v173 = (unint64_t *)&v278->__shared_owners_;
      do
        v174 = __ldaxr(v173);
      while (__stlxr(v174 - 1, v173));
      if (!v174)
      {
        ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
        std::__shared_weak_count::__release_weak(v172);
      }
    }
    *(_QWORD *)v281 = v277;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v281);
    *(_QWORD *)v281 = v276;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v281);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SBYTE7(v230) < 0)
      operator delete(v229[0]);
    v20 = v246;
    if (!v246)
      goto LABEL_342;
    v175 = (unint64_t *)(v246 + 8);
    do
      v30 = __ldaxr(v175);
    while (__stlxr(v30 - 1, v175));
LABEL_339:
    if (!v30)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 16))(v20);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v20);
    }
    goto LABEL_341;
  }
  v14 = a2[1];
  v253 = *a2;
  v254 = (uint64_t)v14;
  if (v14)
  {
    v15 = &v14->u64[1];
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  std::string::basic_string[abi:ne180100]<0>(v229, "reduce_kernel: detected zero bottom blob");
  Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)v229, (uint64_t)a3, 0);
  Espresso::emit_kernel_validation_warning(&v253, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
  v17 = v278;
  if (v278)
  {
    v18 = (unint64_t *)&v278->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  *(_QWORD *)v281 = v277;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v281);
  *(_QWORD *)v281 = v276;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v281);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SBYTE7(v230) < 0)
    operator delete(v229[0]);
  v20 = v254;
  if (v254)
  {
    v21 = (unint64_t *)(v254 + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 16))(v20);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v20);
    }
    return 0;
  }
  return v20;
}

void sub_1913A0CCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  uint64_t v53;
  void *v55;

  v55 = *(void **)(v53 - 120);
  if (v55)
  {
    *(_QWORD *)(v53 - 112) = v55;
    operator delete(v55);
  }
  if (__p)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a53);
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::reduce_kernel::compile(Espresso::ANECompilerEngine::reduce_kernel *this, Espresso::ANECompilerEngine::compiler *a2, void **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  char *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unsigned int v17;
  void *v18;
  __CFString *v19;
  const __CFString *v20;
  void *v21;
  char *v22;
  void *v23;
  void *v24;
  int v25;
  void *v27;
  __CFString *v28;
  void *v29;
  __CFString *v30;
  const __CFString *v31;
  void *v32;
  char *v33;
  void *v34;
  void *v35;
  char *v36;
  void *v37;
  const __CFString *v38;
  const __CFString *v39;
  const __CFString *v40;
  void *v41;
  char *v42;
  void *v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  std::string *v56;
  std::string *v57;
  std::string *v58;
  void *v59;
  __CFString *v60;
  __CFString *v61;
  char *v62;
  float v63;
  void *v68;
  std::string *v69;
  std::string *v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  __CFString *v75;
  void *v76;
  char *v77;
  void *v78;
  void *v79;
  char *v80;
  void *v81;
  __CFString *v82;
  std::string *v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t *v88;
  unint64_t v89;
  unint64_t *v90;
  unint64_t v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  float v96;
  unint64_t *v97;
  unint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  Espresso::ANECompilerEngine::compiler *v112;
  uint64_t v113;
  int *v114;
  _WORD *v115;
  int v116;
  __int128 v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  uint64_t v125;
  int *v126;
  _WORD *v127;
  int v128;
  int v130;
  Espresso::ANECompilerEngine::compiler::build_state_t *v131;
  uint64_t v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  uint64_t v136;
  unint64_t *v137;
  unint64_t v138;
  void *v139;
  id v140;
  void *v141;
  void *v142;
  void *v143;
  void *v144;
  uint64_t weights_file_index;
  void *v146;
  void *v147;
  __int128 v148;
  unint64_t *v149;
  unint64_t v150;
  uint64_t v151;
  unint64_t *v152;
  unint64_t v153;
  void *v154;
  void *v155;
  void *v156;
  uint64_t v157;
  void *v158;
  void *v159;
  std::string *v160;
  std::string *v161;
  uint64_t v162;
  char v163;
  std::string::size_type size;
  std::string::size_type v165;
  uint64_t v166;
  unsigned __int8 *v167;
  std::string *v168;
  const std::string::value_type *data;
  __int128 v170;
  __CFString *v171;
  std::string *v172;
  std::string *v173;
  unint64_t v174;
  unint64_t v175;
  unint64_t v176;
  uint64_t v177;
  std::__shared_weak_count *v178;
  unint64_t *v179;
  unint64_t v180;
  std::__shared_weak_count *v181;
  unint64_t *v182;
  unint64_t v183;
  std::__shared_weak_count *v184;
  unint64_t *v185;
  unint64_t v186;
  std::__shared_weak_count *v187;
  unint64_t *v188;
  unint64_t v189;
  unint64_t *v190;
  unint64_t v191;
  unint64_t *v192;
  unint64_t v193;
  unint64_t *v194;
  unint64_t v195;
  std::__shared_weak_count *v196;
  unint64_t *v197;
  unint64_t v198;
  std::__shared_weak_count *v199;
  unint64_t *v200;
  unint64_t v201;
  std::__shared_weak_count *v202;
  unint64_t *v203;
  unint64_t v204;
  const char *v205;
  int *v206;
  int v207;
  uint64_t i;
  float v209;
  int v210;
  _WORD *v211;
  int v212;
  std::runtime_error *exception;
  int *v215;
  uint64_t j;
  int v217;
  int v218;
  unsigned int v219;
  unsigned int v220;
  int v221;
  Espresso *v222;
  const char *v223;
  float v224;
  NSObject *v226;
  double v227;
  uint64_t v228;
  _WORD *v229;
  int v230;
  Espresso::ANECompilerEngine::compiler *v232;
  std::__shared_weak_count *v233;
  uint64_t v234;
  std::string *v235;
  _QWORD v236[2];
  std::__shared_weak_count *v237;
  uint64_t v238;
  std::__shared_weak_count *v239;
  uint64_t v240;
  std::__shared_weak_count *v241;
  __int128 v242;
  uint64_t v243;
  std::__shared_weak_count *v244;
  __int128 v245;
  uint64_t v246;
  std::__shared_weak_count *v247;
  uint64_t v248[2];
  uint64_t v249;
  std::__shared_weak_count *v250;
  unsigned __int8 *v251;
  std::__shared_weak_count *v252;
  uint64_t v253;
  std::__shared_weak_count *v254;
  unsigned int v255;
  unsigned int v256;
  uint64_t v257;
  std::__shared_weak_count *v258;
  void *v259[2];
  char v260;
  _BYTE v261[24];
  _BYTE v262[32];
  void *v263;
  char v264;
  __CFString *v265;
  __CFString *v266;
  id v267;
  uint64_t v268;
  std::string __str;
  __int128 v270;
  void *v271;
  void *v272;
  _BYTE buf[24];
  __int128 v274;
  void *__p;
  std::vector<std::string> v276;
  void *v277;
  char v278;
  __CFString *v279;
  __CFString *v280;
  id v281[6];

  v281[3] = *(id *)MEMORY[0x1E0C80C00];
  v240 = 0;
  v241 = 0;
  v4 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
  if (!v4 || (v241 = std::__shared_weak_count::lock(v4)) == 0 || (v7 = *((_QWORD *)a2 + 1), (v240 = v7) == 0))
  {
    v205 = "Inconsistent state: null network";
    goto LABEL_297;
  }
  v232 = a2;
  if (!*(_QWORD *)(v7 + 576))
  {
    v205 = "Inconsistent state: blob_storage";
LABEL_297:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v205);
  }
  v259[0] = a3[6];
  v8 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7 + 136, (unsigned __int8 *)v259[0], (__int128 **)v259);
  v9 = (std::__shared_weak_count *)*((_QWORD *)v8 + 6);
  v238 = *((_QWORD *)v8 + 5);
  v239 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v259[0] = a3;
  v12 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7 + 136, (unsigned __int8 *)a3, (__int128 **)v259);
  v13 = *((_QWORD *)v12 + 5);
  v14 = (std::__shared_weak_count *)*((_QWORD *)v12 + 6);
  v236[1] = v13;
  v237 = v14;
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v234 = 0;
  v235 = 0;
  v236[0] = 0;
  v17 = *((_DWORD *)this + 70);
  if (v17 >= 2)
  {
    if (v17 - 11 >= 2)
    {
      if (v17 != 9)
        goto LABEL_124;
      Espresso::ANECompilerEngine::compiler::unit_t::unit_t(v259, a3);
      v29 = (void *)objc_opt_new();
      objc_storeStrong(&v267, v29);
      v30 = v266;
      v266 = CFSTR("Reduction");

      objc_msgSend(v29, "setObject:forKeyedSubscript:", CFSTR("Max"), CFSTR("Type"));
      if (*((_DWORD *)this + 72) != 4)
        Espresso::throw_exception_selector<Espresso::unsupported_configuration_error>("Unsupported axis mode for reduce operation.");
      objc_msgSend(v29, "setObject:forKeyedSubscript:", CFSTR("Channel"), CFSTR("Dimension"));
      v48 = 0x8E38E38E38E38E39 * (((uint64_t)v235 - v234) >> 4);
      if (v48 + 1 > 0x1C71C71C71C71C7)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v49 = 0x1C71C71C71C71C72 * ((v236[0] - v234) >> 4);
      if (v49 <= v48 + 1)
        v49 = v48 + 1;
      if (0x8E38E38E38E38E39 * ((v236[0] - v234) >> 4) >= 0xE38E38E38E38E3)
        v50 = 0x1C71C71C71C71C7;
      else
        v50 = v49;
      *((_QWORD *)&v274 + 1) = v236;
      if (v50)
        v50 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v50);
      else
        v51 = 0;
      *(_QWORD *)buf = v50;
      *(_QWORD *)&buf[8] = v50 + 16 * (((uint64_t)v235 - v234) >> 4);
      *(_QWORD *)&buf[16] = *(_QWORD *)&buf[8];
      *(_QWORD *)&v274 = v50 + 144 * v51;
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(*(std::string **)&buf[8], (uint64_t)v259);
      *(_QWORD *)&buf[16] += 144;
      std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v234, buf);
      v57 = v235;
      std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)buf);
      v235 = v57;

      goto LABEL_120;
    }
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t(v259, a3);
    v18 = (void *)objc_opt_new();
    objc_storeStrong(&v267, v18);
    v19 = v266;
    v266 = CFSTR("ArgMinMax");

    switch(*((_DWORD *)this + 72))
    {
      case 1:
        if (*((_DWORD *)this + 70) == 11)
          v20 = CFSTR("SpatialArgMax");
        else
          v20 = CFSTR("SpatialArgMin");
        objc_msgSend(v18, "setObject:forKeyedSubscript:", v20, CFSTR("Mode"));
        v21 = (void *)MEMORY[0x1E0CB37E8];
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)a3[6];
        v22 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7 + 136, (unsigned __int8 *)__str.__r_.__value_.__l.__data_, (__int128 **)&__str);
        Espresso::abstract_blob_container::shape(buf, *((_QWORD *)v22 + 5));
        objc_msgSend(v21, "numberWithInt:", *(unsigned int *)buf);
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v18, "setObject:forKeyedSubscript:", v23, CFSTR("KernelWidth"));

        if (__p)
        {
          v276.__begin_ = (std::vector<std::string>::pointer)__p;
          operator delete(__p);
        }
        objc_msgSend(v18, "setObject:forKeyedSubscript:", &unk_1E2DEDA78, CFSTR("KernelHeight"));
        v24 = &unk_1E2DEDFB0;
        goto LABEL_48;
      case 2:
        if (*((_DWORD *)this + 70) == 11)
          v40 = CFSTR("SpatialArgMax");
        else
          v40 = CFSTR("SpatialArgMin");
        objc_msgSend(v18, "setObject:forKeyedSubscript:", v40, CFSTR("Mode"));
        objc_msgSend(v18, "setObject:forKeyedSubscript:", &unk_1E2DEDA78, CFSTR("KernelWidth"));
        v41 = (void *)MEMORY[0x1E0CB37E8];
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)a3[6];
        v42 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7 + 136, (unsigned __int8 *)__str.__r_.__value_.__l.__data_, (__int128 **)&__str);
        Espresso::abstract_blob_container::shape(buf, *((_QWORD *)v42 + 5));
        objc_msgSend(v41, "numberWithInt:", *(unsigned int *)&buf[4]);
        v43 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v18, "setObject:forKeyedSubscript:", v43, CFSTR("KernelHeight"));

        if (__p)
        {
          v276.__begin_ = (std::vector<std::string>::pointer)__p;
          operator delete(__p);
        }
        v24 = &unk_1E2DEDFC8;
        goto LABEL_48;
      case 3:
        if (*((_DWORD *)this + 70) == 11)
          v31 = CFSTR("SpatialArgMax");
        else
          v31 = CFSTR("SpatialArgMin");
        objc_msgSend(v18, "setObject:forKeyedSubscript:", v31, CFSTR("Mode"));
        v32 = (void *)MEMORY[0x1E0CB37E8];
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)a3[6];
        v33 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7 + 136, (unsigned __int8 *)__str.__r_.__value_.__l.__data_, (__int128 **)&__str);
        Espresso::abstract_blob_container::shape(buf, *((_QWORD *)v33 + 5));
        objc_msgSend(v32, "numberWithInt:", *(unsigned int *)buf);
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v18, "setObject:forKeyedSubscript:", v34, CFSTR("KernelWidth"));

        if (__p)
        {
          v276.__begin_ = (std::vector<std::string>::pointer)__p;
          operator delete(__p);
        }
        v35 = (void *)MEMORY[0x1E0CB37E8];
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)a3[6];
        v36 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7 + 136, (unsigned __int8 *)__str.__r_.__value_.__l.__data_, (__int128 **)&__str);
        Espresso::abstract_blob_container::shape(buf, *((_QWORD *)v36 + 5));
        objc_msgSend(v35, "numberWithInt:", *(unsigned int *)&buf[4]);
        v37 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v18, "setObject:forKeyedSubscript:", v37, CFSTR("KernelHeight"));

        if (__p)
        {
          v276.__begin_ = (std::vector<std::string>::pointer)__p;
          operator delete(__p);
        }
        v24 = &unk_1E2DEDFE0;
LABEL_48:
        objc_msgSend(v18, "setObject:forKeyedSubscript:", v24, CFSTR("Step"));
        objc_msgSend(v18, "setObject:forKeyedSubscript:", &unk_1E2DEDA90, CFSTR("PadTop"));
        objc_msgSend(v18, "setObject:forKeyedSubscript:", &unk_1E2DEDA90, CFSTR("PadBot"));
        v38 = (const __CFString *)&unk_1E2DEDA90;
        objc_msgSend(v18, "setObject:forKeyedSubscript:", &unk_1E2DEDA90, CFSTR("PadLeft"));
        v39 = CFSTR("PadRight");
        break;
      case 4:
        if (*((_DWORD *)this + 70) == 11)
          v38 = CFSTR("ChannelArgMax");
        else
          v38 = CFSTR("ChannelArgMin");
        v39 = CFSTR("Mode");
        break;
      default:
        Espresso::throw_exception_selector<Espresso::generic_error>("Unsupported reduction axis");
    }
    objc_msgSend(v18, "setObject:forKeyedSubscript:", v38, v39);
    v44 = 0x8E38E38E38E38E39 * (((uint64_t)v235 - v234) >> 4);
    if (v44 + 1 > 0x1C71C71C71C71C7)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v45 = 0x1C71C71C71C71C72 * ((v236[0] - v234) >> 4);
    if (v45 <= v44 + 1)
      v45 = v44 + 1;
    if (0x8E38E38E38E38E39 * ((v236[0] - v234) >> 4) >= 0xE38E38E38E38E3)
      v46 = 0x1C71C71C71C71C7;
    else
      v46 = v45;
    *((_QWORD *)&v274 + 1) = v236;
    if (v46)
      v46 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v46);
    else
      v47 = 0;
    *(_QWORD *)buf = v46;
    *(_QWORD *)&buf[8] = v46 + 16 * (((uint64_t)v235 - v234) >> 4);
    *(_QWORD *)&buf[16] = *(_QWORD *)&buf[8];
    *(_QWORD *)&v274 = v46 + 144 * v47;
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(*(std::string **)&buf[8], (uint64_t)v259);
    *(_QWORD *)&buf[16] += 144;
    std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v234, buf);
    v56 = v235;
    std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)buf);
LABEL_119:
    v235 = v56;

LABEL_120:
    if (v264 < 0)
      operator delete(v263);
    *(_QWORD *)buf = v262;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    *(_QWORD *)buf = v261;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    if (v260 < 0)
      operator delete(v259[0]);
    goto LABEL_124;
  }
  v25 = *((_DWORD *)this + 72);
  if (v25 == 3)
    goto LABEL_102;
  if (v25 == 7 || v25 == 4)
  {
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t(v259, a3);
    v27 = (void *)objc_opt_new();
    objc_storeStrong(&v267, v27);
    objc_msgSend(v27, "setObject:forKeyedSubscript:", CFSTR("Conv"), CFSTR("Type"));
    objc_msgSend(v27, "setObject:forKeyedSubscript:", CFSTR("Unity"), CFSTR("KernelMode"));
    objc_msgSend(v27, "setObject:forKeyedSubscript:", &unk_1E2DEDA78, CFSTR("KernelWidth"));
    objc_msgSend(v27, "setObject:forKeyedSubscript:", &unk_1E2DEDA78, CFSTR("KernelHeight"));
    objc_msgSend(v27, "setObject:forKeyedSubscript:", CFSTR("Float16"), CFSTR("KernelType"));
    objc_msgSend(v27, "setObject:forKeyedSubscript:", &unk_1E2DEDFF8, CFSTR("Step"));
    objc_msgSend(v27, "setObject:forKeyedSubscript:", &unk_1E2DEDA90, CFSTR("PadTop"));
    objc_msgSend(v27, "setObject:forKeyedSubscript:", &unk_1E2DEDA90, CFSTR("PadBot"));
    objc_msgSend(v27, "setObject:forKeyedSubscript:", &unk_1E2DEDA90, CFSTR("PadLeft"));
    objc_msgSend(v27, "setObject:forKeyedSubscript:", &unk_1E2DEDA90, CFSTR("PadRight"));
    objc_msgSend(v27, "setObject:forKeyedSubscript:", CFSTR("Zero"), CFSTR("PaddingMode"));
    v28 = v266;
    v266 = CFSTR("Conv");

    v268 = 0x100000001;
    v52 = 0x8E38E38E38E38E39 * (((uint64_t)v235 - v234) >> 4);
    if (v52 + 1 > 0x1C71C71C71C71C7)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v53 = 0x1C71C71C71C71C72 * ((v236[0] - v234) >> 4);
    if (v53 <= v52 + 1)
      v53 = v52 + 1;
    if (0x8E38E38E38E38E39 * ((v236[0] - v234) >> 4) >= 0xE38E38E38E38E3)
      v54 = 0x1C71C71C71C71C7;
    else
      v54 = v53;
    *((_QWORD *)&v274 + 1) = v236;
    if (v54)
      v54 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v54);
    else
      v55 = 0;
    *(_QWORD *)buf = v54;
    *(_QWORD *)&buf[8] = v54 + 16 * (((uint64_t)v235 - v234) >> 4);
    *(_QWORD *)&buf[16] = *(_QWORD *)&buf[8];
    *(_QWORD *)&v274 = v54 + 144 * v55;
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(*(std::string **)&buf[8], (uint64_t)v259);
    *(_QWORD *)&buf[16] += 144;
    std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v234, buf);
    v58 = v235;
    std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)buf);
    v235 = v58;
    if (*((_DWORD *)this + 70) == 1)
    {
      Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)buf, a3);
      v59 = (void *)objc_opt_new();
      v60 = v279;
      v279 = CFSTR("Float16");

      objc_storeStrong(v281, v59);
      v61 = v280;
      v280 = CFSTR("GOC");

      v251 = (unsigned __int8 *)a3[6];
      v62 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7 + 136, v251, (__int128 **)&v251);
      Espresso::abstract_blob_container::shape((char *)&__str, *((_QWORD *)v62 + 5));
      v63 = (float)SLODWORD(__str.__r_.__value_.__r.__words[1]);
      if (v271)
      {
        v272 = v271;
        operator delete(v271);
      }
      _S0 = 1.0 / v63;
      __asm { FCVT            H0, S0 }
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithShort:", SLOWORD(_S0));
      v68 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v59, "setObject:forKeyedSubscript:", v68, CFSTR("ScaleScalar"));

      v69 = v235;
      if ((unint64_t)v235 >= v236[0])
      {
        v71 = 0x8E38E38E38E38E39 * (((uint64_t)v235 - v234) >> 4);
        if (v71 + 1 > 0x1C71C71C71C71C7)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v72 = 0x1C71C71C71C71C72 * ((v236[0] - v234) >> 4);
        if (v72 <= v71 + 1)
          v72 = v71 + 1;
        if (0x8E38E38E38E38E39 * ((v236[0] - v234) >> 4) >= 0xE38E38E38E38E3)
          v73 = 0x1C71C71C71C71C7;
        else
          v73 = v72;
        *((_QWORD *)&v270 + 1) = v236;
        if (v73)
          v73 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v73);
        else
          v74 = 0;
        __str.__r_.__value_.__r.__words[0] = v73;
        __str.__r_.__value_.__l.__size_ = v73 + 144 * v71;
        __str.__r_.__value_.__r.__words[2] = __str.__r_.__value_.__l.__size_;
        *(_QWORD *)&v270 = v73 + 144 * v74;
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)__str.__r_.__value_.__l.__size_, (uint64_t)buf);
        __str.__r_.__value_.__r.__words[2] += 144;
        std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v234, &__str);
        v70 = v235;
        std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&__str);
      }
      else
      {
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v235, (uint64_t)buf);
        v70 = v69 + 6;
      }
      v235 = v70;

      if (v278 < 0)
        operator delete(v277);
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v276;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v274;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
      if ((buf[23] & 0x80000000) != 0)
        operator delete(*(void **)buf);
    }

    if (v264 < 0)
      operator delete(v263);
    *(_QWORD *)buf = v262;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    *(_QWORD *)buf = v261;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    if (v260 < 0)
      operator delete(v259[0]);
    if (v25 == 7)
    {
LABEL_102:
      Espresso::ANECompilerEngine::compiler::unit_t::unit_t(v259, a3);
      v18 = (void *)objc_opt_new();
      v75 = v265;
      v265 = CFSTR("Float16");

      objc_storeStrong(&v267, v18);
      if (*((_DWORD *)this + 70) != 1)
        Espresso::throw_exception_selector<Espresso::unsupported_configuration_error>("Unsupported axis mode for reduce operation.");
      objc_msgSend(v18, "setObject:forKeyedSubscript:", CFSTR("Avg"), CFSTR("Type"));
      v76 = (void *)MEMORY[0x1E0CB37E8];
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)a3[6];
      v77 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7 + 136, (unsigned __int8 *)__str.__r_.__value_.__l.__data_, (__int128 **)&__str);
      Espresso::abstract_blob_container::shape(buf, *((_QWORD *)v77 + 5));
      objc_msgSend(v76, "numberWithInt:", *(unsigned int *)&buf[4]);
      v78 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "setObject:forKeyedSubscript:", v78, CFSTR("KernelHeight"));

      if (__p)
      {
        v276.__begin_ = (std::vector<std::string>::pointer)__p;
        operator delete(__p);
      }
      v79 = (void *)MEMORY[0x1E0CB37E8];
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)a3[6];
      v80 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7 + 136, (unsigned __int8 *)__str.__r_.__value_.__l.__data_, (__int128 **)&__str);
      Espresso::abstract_blob_container::shape(buf, *((_QWORD *)v80 + 5));
      objc_msgSend(v79, "numberWithInt:", *(unsigned int *)buf);
      v81 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "setObject:forKeyedSubscript:", v81, CFSTR("KernelWidth"));

      if (__p)
      {
        v276.__begin_ = (std::vector<std::string>::pointer)__p;
        operator delete(__p);
      }
      objc_msgSend(v18, "setObject:forKeyedSubscript:", &unk_1E2DEE010, CFSTR("Step"));
      v82 = v266;
      v266 = CFSTR("Pooling");

      v83 = v235;
      if ((unint64_t)v235 >= v236[0])
      {
        v84 = 0x8E38E38E38E38E39 * (((uint64_t)v235 - v234) >> 4);
        if (v84 + 1 > 0x1C71C71C71C71C7)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v85 = 0x1C71C71C71C71C72 * ((v236[0] - v234) >> 4);
        if (v85 <= v84 + 1)
          v85 = v84 + 1;
        if (0x8E38E38E38E38E39 * ((v236[0] - v234) >> 4) >= 0xE38E38E38E38E3)
          v86 = 0x1C71C71C71C71C7;
        else
          v86 = v85;
        *((_QWORD *)&v274 + 1) = v236;
        if (v86)
          v86 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v86);
        else
          v87 = 0;
        *(_QWORD *)buf = v86;
        *(_QWORD *)&buf[8] = v86 + 144 * v84;
        *(_QWORD *)&buf[16] = *(_QWORD *)&buf[8];
        *(_QWORD *)&v274 = v86 + 144 * v87;
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(*(std::string **)&buf[8], (uint64_t)v259);
        *(_QWORD *)&buf[16] += 144;
        std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v234, buf);
        v56 = v235;
        std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)buf);
      }
      else
      {
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v235, (uint64_t)v259);
        v56 = v83 + 6;
      }
      goto LABEL_119;
    }
  }
LABEL_124:
  v233 = v241;
  if (v241)
  {
    v88 = (unint64_t *)&v241->__shared_owners_;
    do
      v89 = __ldxr(v88);
    while (__stxr(v89 + 1, v88));
  }
  if (v14)
  {
    v90 = (unint64_t *)&v14->__shared_owners_;
    do
      v91 = __ldxr(v90);
    while (__stxr(v91 + 1, v90));
  }
  Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t((Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)v259);
  v266 = 0;
  v267 = 0;
  v268 = 0x100000000;
  v92 = *((_QWORD *)this + 49);
  v93 = (std::__shared_weak_count *)*((_QWORD *)this + 50);
  v257 = v92;
  v258 = v93;
  if (v93)
  {
    v94 = (unint64_t *)&v93->__shared_owners_;
    do
      v95 = __ldxr(v94);
    while (__stxr(v95 + 1, v94));
  }
  if (v92 && !*(_BYTE *)((*(uint64_t (**)(char *))(*((_QWORD *)this + 41) + 104))((char *)this + 328) + 40))
  {
    v96 = *(float *)(v13 + 112);
    v249 = v92;
    v250 = v93;
    if (v93)
    {
      v97 = (unint64_t *)&v93->__shared_owners_;
      do
        v98 = __ldxr(v97);
      while (__stxr(v98 + 1, v97));
    }
    v99 = (std::__shared_weak_count *)*((_QWORD *)this + 52);
    v248[0] = *((_QWORD *)this + 51);
    v248[1] = (uint64_t)v99;
    if (v99)
    {
      v100 = (unint64_t *)&v99->__shared_owners_;
      do
        v101 = __ldxr(v100);
      while (__stxr(v101 + 1, v100));
    }
    Espresso::ane_style_post_scale_bias((uint64_t)&v249, v248, (uint64_t)&v251, v96);
    if (v99)
    {
      v102 = (unint64_t *)&v99->__shared_owners_;
      do
        v103 = __ldaxr(v102);
      while (__stlxr(v103 - 1, v102));
      if (!v103)
      {
        ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
        std::__shared_weak_count::__release_weak(v99);
      }
    }
    v104 = v250;
    if (v250)
    {
      v105 = (unint64_t *)&v250->__shared_owners_;
      do
        v106 = __ldaxr(v105);
      while (__stlxr(v106 - 1, v105));
      if (!v106)
      {
        ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
        std::__shared_weak_count::__release_weak(v104);
      }
    }
    v107 = v257;
    v108 = *(unsigned int *)(v257 + 8);
    std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v246, 2 * v108, 1, 1, 1);
    v109 = (int)v108;
    v245 = 0uLL;
    v110 = v108;
    v111 = *((_QWORD *)this + 51);
    v112 = v232;
    if (v111)
      v110 = *(_DWORD *)(v111 + 8);
    if (!*((_BYTE *)v232 + 384))
    {
      Espresso::blob<unsigned char,1>::make(&__str, 4 * v108);
      v206 = *(int **)(__str.__r_.__value_.__r.__words[0] + 16);
      v207 = v108 - 1;
      if ((int)v108 >= 1)
      {
        for (i = 0; i != v108; ++i)
        {
          v209 = *(float *)(*(_QWORD *)(v107 + 16) + i * 4);
          *(float *)&v210 = ldexp(1.0, -v255) * v209;
          v206[i] = v210;
        }
      }
      if ((_DWORD)v108)
      {
        v211 = *(_WORD **)(v246 + 16);
        do
        {
          v212 = *v206++;
          _S0 = v212;
          __asm { FCVT            H0, S0 }
          *v211++ = _S0;
          --v109;
        }
        while (v109);
      }
      v243 = 0;
      v244 = 0;
      if (*((_QWORD *)this + 51))
      {
        Espresso::blob<unsigned char,1>::make(buf, 4 * v110);
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)&v243, (__int128 *)buf);
        std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)buf);
        Espresso::blob<unsigned char,1>::make(buf, 2 * v110);
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)&v245, (__int128 *)buf);
        std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)buf);
        v215 = *(int **)(v243 + 16);
        if (v110 >= 1)
        {
          for (j = 0; j != v110; ++j)
          {
            if (v207 >= (int)j)
              v217 = j;
            else
              v217 = v207;
            *(float *)&v218 = *(float *)(*(_QWORD *)(v253 + 16) + 4 * j)
                            * *(float *)(*((_QWORD *)v251 + 2) + 4 * v217);
            v215[j] = v218;
            v219 = v256;
            v220 = v255;
            *(float *)&v221 = ldexp(1.0, v256 - v255) * *(float *)&v218;
            v215[j] = v221;
            v224 = ldexp(1.0, v220 - v219) * *(float *)&v221;
            if (v224 < -127.0 || v224 > 255.0)
            {
              Espresso::espresso_os_log_subsystem(v222, v223);
              v226 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v226, OS_LOG_TYPE_ERROR))
              {
                v227 = *(float *)&v215[j];
                *(_DWORD *)buf = 134218752;
                *(double *)&buf[4] = v224;
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v256;
                *(_WORD *)&buf[18] = 1024;
                *(_DWORD *)&buf[20] = v255;
                LOWORD(v274) = 2048;
                *(double *)((char *)&v274 + 2) = v227;
                _os_log_error_impl(&dword_190DAF000, v226, OS_LOG_TYPE_ERROR, "[ANEC::add_ane_scale_bias_unit] Shifted bias overflowing shifted_b=%f acc_bias_shift=%d post_right_shift=%d anebias=%f", buf, 0x22u);
              }

            }
          }
        }
        if (v110)
        {
          v228 = v110;
          v229 = *(_WORD **)(v245 + 16);
          do
          {
            v230 = *v215++;
            _S0 = v230;
            __asm { FCVT            H0, S0 }
            *v229++ = _S0;
            --v228;
          }
          while (v228);
        }
      }
      exception = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
      Espresso::not_implemented_error::not_implemented_error(exception);
    }
    v113 = v256;
    if ((_DWORD)v108)
    {
      v114 = (int *)*((_QWORD *)v251 + 2);
      v115 = *(_WORD **)(v246 + 16);
      do
      {
        v116 = *v114++;
        _S0 = v116;
        __asm { FCVT            H0, S0 }
        *v115++ = _S0;
        --v109;
      }
      while (v109);
    }
    if (v111)
    {
      std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(buf, 2 * v110, 1, 1, 1);
      v118 = *(_OWORD *)buf;
      *(_QWORD *)&buf[8] = 0;
      *(_QWORD *)buf = 0;
      v119 = (std::__shared_weak_count *)*((_QWORD *)&v245 + 1);
      v245 = v118;
      if (v119)
      {
        v120 = (unint64_t *)&v119->__shared_owners_;
        do
          v121 = __ldaxr(v120);
        while (__stlxr(v121 - 1, v120));
        if (!v121)
        {
          ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
          std::__shared_weak_count::__release_weak(v119);
        }
      }
      v122 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v123 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v124 = __ldaxr(v123);
        while (__stlxr(v124 - 1, v123));
        if (!v124)
        {
          ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
          std::__shared_weak_count::__release_weak(v122);
        }
      }
      v112 = v232;
      if (v110)
      {
        v125 = v110;
        v126 = *(int **)(v253 + 16);
        v127 = *(_WORD **)(v245 + 16);
        do
        {
          v128 = *v126++;
          _S0 = v128;
          __asm { FCVT            H0, S0 }
          *v127++ = _S0;
          --v125;
        }
        while (v125);
      }
    }
    v130 = *((unsigned __int8 *)v112 + 552);
    v131 = (Espresso::ANECompilerEngine::compiler *)((char *)v112 + 128);
    v132 = v246;
    v133 = v247;
    v243 = v246;
    v244 = v247;
    if (v247)
    {
      v134 = (unint64_t *)&v247->__shared_owners_;
      do
        v135 = __ldxr(v134);
      while (__stxr(v135 + 1, v134));
    }
    v136 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v131, *(const unsigned __int8 **)(v132 + 16), *(int *)(v132 + 8));
    if (v133)
    {
      v137 = (unint64_t *)&v133->__shared_owners_;
      do
        v138 = __ldaxr(v137);
      while (__stlxr(v138 - 1, v137));
      if (!v138)
      {
        ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
        std::__shared_weak_count::__release_weak(v133);
      }
    }
    v139 = (void *)objc_opt_new();
    if (*((_BYTE *)v232 + 121))
    {
      v140 = *(id *)(v234 + 128);

      v139 = v140;
    }
    v141 = (void *)objc_opt_new();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v108);
    v142 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v141, "setObject:forKeyedSubscript:", v142, CFSTR("ScaleCount"));

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v136);
    v143 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v141, "setObject:forKeyedSubscript:", v143, CFSTR("ScaleOffset"));

    v144 = (void *)MEMORY[0x1E0CB37E8];
    if (v130)
      weights_file_index = 0;
    else
    objc_msgSend(v144, "numberWithUnsignedLong:", weights_file_index);
    v146 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v141, "setObject:forKeyedSubscript:", v146, CFSTR("ScaleIndex"));

    objc_msgSend(v141, "setObject:forKeyedSubscript:", CFSTR("Float16"), CFSTR("ScaleType"));
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v255);
    v147 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v139, "setObject:forKeyedSubscript:", v147, CFSTR("ScaleShift"));

    if (*((_QWORD *)this + 51))
    {
      v148 = v245;
      v242 = v245;
      if (*((_QWORD *)&v245 + 1))
      {
        v149 = (unint64_t *)(*((_QWORD *)&v245 + 1) + 8);
        do
          v150 = __ldxr(v149);
        while (__stxr(v150 + 1, v149));
      }
      v151 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v131, *(const unsigned __int8 **)(v148 + 16), *(int *)(v148 + 8));
      if (*((_QWORD *)&v148 + 1))
      {
        v152 = (unint64_t *)(*((_QWORD *)&v148 + 1) + 8);
        do
          v153 = __ldaxr(v152);
        while (__stlxr(v153 - 1, v152));
        if (!v153)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v148 + 1) + 16))(*((_QWORD *)&v148 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v148 + 1));
        }
      }
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *(unsigned int *)(*((_QWORD *)this + 51) + 8));
      v154 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v141, "setObject:forKeyedSubscript:", v154, CFSTR("BiasCount"));

      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v151);
      v155 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v141, "setObject:forKeyedSubscript:", v155, CFSTR("BiasOffset"));

      v156 = (void *)MEMORY[0x1E0CB37E8];
      if (v130)
        v157 = 0;
      else
      objc_msgSend(v156, "numberWithUnsignedLong:", v157);
      v158 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v141, "setObject:forKeyedSubscript:", v158, CFSTR("BiasIndex"));

      objc_msgSend(v141, "setObject:forKeyedSubscript:", CFSTR("Float16"), CFSTR("BiasType"));
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v113);
      v159 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v139, "setObject:forKeyedSubscript:", v159, CFSTR("BiasShift"));

    }
    objc_msgSend(v139, "setObject:forKeyedSubscript:", v141, CFSTR("BiasScaleGroupData"));
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)buf, a3);
    v160 = v235;
    if (v235 == (std::string *)v234)
      goto LABEL_221;
    v161 = v235 - 6;
    v162 = HIBYTE(v235[-6].__r_.__value_.__r.__words[2]);
    v163 = v162;
    size = v235[-6].__r_.__value_.__l.__size_;
    if ((v162 & 0x80u) == 0)
      v165 = HIBYTE(v235[-6].__r_.__value_.__r.__words[2]);
    else
      v165 = v235[-6].__r_.__value_.__l.__size_;
    v166 = buf[23];
    if (buf[23] < 0)
      v166 = *(_QWORD *)&buf[8];
    if (v165 != v166)
      goto LABEL_215;
    if (buf[23] >= 0)
      v167 = buf;
    else
      v167 = *(unsigned __int8 **)buf;
    if ((char)v162 < 0)
    {
      data = (const std::string::value_type *)v161->__r_.__value_.__r.__words[0];
      if (memcmp(v161->__r_.__value_.__l.__data_, v167, v235[-6].__r_.__value_.__l.__size_))
        goto LABEL_218;
    }
    else if ((_BYTE)v162)
    {
      v168 = v235 - 6;
      while (v168->__r_.__value_.__s.__data_[0] == *v167)
      {
        v168 = (std::string *)((char *)v168 + 1);
        ++v167;
        if (!--v162)
          goto LABEL_214;
      }
      goto LABEL_215;
    }
LABEL_214:
    std::string::append(v160 - 6, "__@pre_scale_bias");
    v163 = HIBYTE(v160[-6].__r_.__value_.__r.__words[2]);
LABEL_215:
    if ((v163 & 0x80) == 0)
    {
      v170 = *(_OWORD *)&v161->__r_.__value_.__l.__data_;
      __str.__r_.__value_.__r.__words[2] = v160[-6].__r_.__value_.__r.__words[2];
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v170;
      goto LABEL_219;
    }
    data = v160[-6].__r_.__value_.__l.__data_;
    size = v160[-6].__r_.__value_.__l.__size_;
LABEL_218:
    std::string::__init_copy_ctor_external(&__str, data, size);
LABEL_219:
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v276, &__str, &v270, 1uLL);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
LABEL_221:
    v171 = v280;
    v280 = CFSTR("GOC");

    objc_storeStrong(v281, v139);
    if (!*((_BYTE *)v232 + 121))
    {
      v172 = v235;
      if ((unint64_t)v235 >= v236[0])
      {
        v174 = 0x8E38E38E38E38E39 * (((uint64_t)v235 - v234) >> 4);
        if (v174 + 1 > 0x1C71C71C71C71C7)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v175 = 0x1C71C71C71C71C72 * ((v236[0] - v234) >> 4);
        if (v175 <= v174 + 1)
          v175 = v174 + 1;
        if (0x8E38E38E38E38E39 * ((v236[0] - v234) >> 4) >= 0xE38E38E38E38E3)
          v176 = 0x1C71C71C71C71C7;
        else
          v176 = v175;
        *((_QWORD *)&v270 + 1) = v236;
        if (v176)
          v176 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v176);
        else
          v177 = 0;
        __str.__r_.__value_.__r.__words[0] = v176;
        __str.__r_.__value_.__l.__size_ = v176 + 144 * v174;
        __str.__r_.__value_.__r.__words[2] = __str.__r_.__value_.__l.__size_;
        *(_QWORD *)&v270 = v176 + 144 * v177;
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)__str.__r_.__value_.__l.__size_, (uint64_t)buf);
        __str.__r_.__value_.__r.__words[2] += 144;
        std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v234, &__str);
        v173 = v235;
        std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&__str);
      }
      else
      {
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v235, (uint64_t)buf);
        v173 = v172 + 6;
      }
      v235 = v173;
    }

    if (v278 < 0)
      operator delete(v277);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v276;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v274;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);

    v178 = (std::__shared_weak_count *)*((_QWORD *)&v245 + 1);
    if (*((_QWORD *)&v245 + 1))
    {
      v179 = (unint64_t *)(*((_QWORD *)&v245 + 1) + 8);
      do
        v180 = __ldaxr(v179);
      while (__stlxr(v180 - 1, v179));
      if (!v180)
      {
        ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
        std::__shared_weak_count::__release_weak(v178);
      }
    }
    v181 = v247;
    if (v247)
    {
      v182 = (unint64_t *)&v247->__shared_owners_;
      do
        v183 = __ldaxr(v182);
      while (__stlxr(v183 - 1, v182));
      if (!v183)
      {
        ((void (*)(std::__shared_weak_count *))v181->__on_zero_shared)(v181);
        std::__shared_weak_count::__release_weak(v181);
      }
    }
    v184 = v254;
    if (v254)
    {
      v185 = (unint64_t *)&v254->__shared_owners_;
      do
        v186 = __ldaxr(v185);
      while (__stlxr(v186 - 1, v185));
      if (!v186)
      {
        ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
        std::__shared_weak_count::__release_weak(v184);
      }
    }
    v187 = v252;
    if (v252)
    {
      v188 = (unint64_t *)&v252->__shared_owners_;
      do
        v189 = __ldaxr(v188);
      while (__stlxr(v189 - 1, v188));
      if (!v189)
      {
        ((void (*)(std::__shared_weak_count *))v187->__on_zero_shared)(v187);
        std::__shared_weak_count::__release_weak(v187);
      }
    }
    v93 = v258;
  }
  if (v93)
  {
    v190 = (unint64_t *)&v93->__shared_owners_;
    do
      v191 = __ldaxr(v190);
    while (__stlxr(v191 - 1, v190));
    if (!v191)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }

  if (v264 < 0)
    operator delete(v263);
  *(_QWORD *)buf = v262;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(_QWORD *)buf = v261;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (v260 < 0)
    operator delete(v259[0]);
  if (v14)
  {
    v192 = (unint64_t *)&v14->__shared_owners_;
    do
      v193 = __ldaxr(v192);
    while (__stlxr(v193 - 1, v192));
    if (!v193)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v233)
  {
    v194 = (unint64_t *)&v233->__shared_owners_;
    do
      v195 = __ldaxr(v194);
    while (__stlxr(v195 - 1, v194));
    if (!v195)
    {
      ((void (*)(std::__shared_weak_count *))v233->__on_zero_shared)(v233);
      std::__shared_weak_count::__release_weak(v233);
    }
  }
  (*(void (**)(char *, Espresso::ANECompilerEngine::compiler *, uint64_t *))(*((_QWORD *)this + 41) + 32))((char *)this + 328, v232, &v234);
  v259[0] = &v234;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)v259);
  v196 = v237;
  if (v237)
  {
    v197 = (unint64_t *)&v237->__shared_owners_;
    do
      v198 = __ldaxr(v197);
    while (__stlxr(v198 - 1, v197));
    if (!v198)
    {
      ((void (*)(std::__shared_weak_count *))v196->__on_zero_shared)(v196);
      std::__shared_weak_count::__release_weak(v196);
    }
  }
  v199 = v239;
  if (v239)
  {
    v200 = (unint64_t *)&v239->__shared_owners_;
    do
      v201 = __ldaxr(v200);
    while (__stlxr(v201 - 1, v200));
    if (!v201)
    {
      ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
      std::__shared_weak_count::__release_weak(v199);
    }
  }
  v202 = v241;
  if (v241)
  {
    v203 = (unint64_t *)&v241->__shared_owners_;
    do
      v204 = __ldaxr(v203);
    while (__stlxr(v204 - 1, v203));
    if (!v204)
    {
      ((void (*)(std::__shared_weak_count *))v202->__on_zero_shared)(v202);
      std::__shared_weak_count::__release_weak(v202);
    }
  }
}

void sub_1913A314C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  a26 = (uint64_t)&a17;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&a26);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::reduce_kernel::compile(Espresso::ANECompilerEngine::reduce_kernel *this, Espresso::ANECompilerEngine::compiler *a2, void **a3)
{
  Espresso::ANECompilerEngine::reduce_kernel::compile((Espresso::ANECompilerEngine::reduce_kernel *)((char *)this - 328), a2, a3);
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::reduce_kernel::~reduce_kernel(void **this)
{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 41);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
}

{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 41);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANECompilerEngine::violations_from_alternates<ANECReductionLayerDescAlternate>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  CFTypeRef *v7;
  unint64_t *v8;
  unint64_t v9;
  CFTypeRef *v10;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a2)
  {
    v6 = 0;
    v7 = (CFTypeRef *)(a3 + 8);
    do
    {
      v8 = (unint64_t *)(a3 + 656 * v6);
      if (*v8)
      {
        v9 = 0;
        v10 = v7;
        do
        {
          std::__hash_table<__CFString const*,Espresso::ANECompilerEngine::CFStringHasher,Espresso::ANECompilerEngine::CFStringEqualWrapper,std::allocator<__CFString const*>>::__emplace_unique_key_args<__CFString const*,__CFString const* const&>((float *)a1, v10, v10);
          ++v9;
          ++v10;
        }
        while (v9 < *v8);
      }
      ++v6;
      v7 += 82;
    }
    while (v6 != a2);
  }
}

void sub_1913A3604(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::dev_op_kernel::~dev_op_kernel(void **this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 52);
  Espresso::generic_dev_op_kernel::~generic_dev_op_kernel(this);
}

{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 52);
  Espresso::generic_dev_op_kernel::~generic_dev_op_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANECompilerEngine::dev_op_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob((_QWORD *)(a1 + 416), a3, a4, a5);
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::dev_op_kernel::~dev_op_kernel(void **this)
{
  void **v1;

  v1 = this - 52;
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::generic_dev_op_kernel::~generic_dev_op_kernel(v1);
}

{
  void **v1;

  v1 = this - 52;
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::generic_dev_op_kernel::~generic_dev_op_kernel(v1);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANECompilerEngine::broadcast_kernel::~broadcast_kernel(void **this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 40);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 40);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANECompilerEngine::broadcast_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob((_QWORD *)(a1 + 320), a3, a4, a5);
}

uint64_t Espresso::ANECompilerEngine::broadcast_kernel::is_valid_for_engine(int *a1, int64x2_t **a2, _QWORD *a3)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  Espresso::net *v8;
  Espresso::ANECompilerEngine *v9;
  _DWORD *v10;
  int64x2_t *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  int64x2_t *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  unint64_t *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  int64x2_t *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  int64x2_t *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t *v44;
  int64x2_t *v45;
  unint64_t *v46;
  unint64_t v47;
  int64x2_t *v48[2];
  int64x2_t *v49;
  uint64_t v50;
  int64x2_t *v51;
  uint64_t v52;
  int64x2_t *v53;
  uint64_t v54;
  void *v55[2];
  char v56;
  std::string __p;
  _BYTE v58[24];
  _BYTE v59[32];
  std::__shared_weak_count *v60;
  int64x2_t *v61;
  uint64_t v62;
  Espresso::ANECompilerEngine *v63;
  std::__shared_weak_count *v64;
  void **v65;

  v4 = a3[6];
  v63 = 0;
  v64 = 0;
  v5 = *(std::__shared_weak_count **)(v4 + 80);
  if (!v5
    || (v64 = std::__shared_weak_count::lock(v5)) == 0
    || (v9 = *(Espresso::ANECompilerEngine **)(v4 + 72), (v63 = v9) == 0))
  {
    Espresso::throw_exception_selector<Espresso::generic_error>("Null pointer in broadcast validation");
  }
  v10 = (_DWORD *)*a3;
  if (!Espresso::ANECompilerEngine::can_handle_configuration_dependent_transforms(v9, v8))
  {
    if (a1[74] > 0 || a1[73] > 0 || a1[71] > 0 || a1[70] >= 1)
    {
      v20 = a2[1];
      v53 = *a2;
      v54 = (uint64_t)v20;
      if (v20)
      {
        v21 = &v20->u64[1];
        do
          v22 = __ldxr(v21);
        while (__stxr(v22 + 1, v21));
      }
      std::string::basic_string[abi:ne180100]<0>(v55, "Cannot broadcast along seq, n, h, w");
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)v55, (uint64_t)a3, 0);
      Espresso::emit_kernel_validation_warning(&v53, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
      v23 = v60;
      if (v60)
      {
        p_shared_owners = (unint64_t *)&v60->__shared_owners_;
        do
          v25 = __ldaxr(p_shared_owners);
        while (__stlxr(v25 - 1, p_shared_owners));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      v65 = (void **)v59;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v65);
      v65 = (void **)v58;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v65);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (v56 < 0)
        operator delete(v55[0]);
      v17 = v54;
      if (!v54)
        goto LABEL_47;
      v26 = (unint64_t *)(v54 + 8);
      do
        v19 = __ldaxr(v26);
      while (__stlxr(v19 - 1, v26));
      goto LABEL_44;
    }
LABEL_53:
    if (v10[2] == 1)
    {
      if (a1[72] <= a1[134])
      {
        if (a1[77] != 1)
        {
          v17 = 1;
          goto LABEL_47;
        }
        v45 = a2[1];
        v48[0] = *a2;
        v48[1] = v45;
        if (v45)
        {
          v46 = &v45->u64[1];
          do
            v47 = __ldxr(v46);
          while (__stxr(v47 + 1, v46));
        }
        std::string::basic_string[abi:ne180100]<0>(v55, "nd_mode not supported for broadcast.");
        Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)v55, (uint64_t)a3, 0);
        Espresso::emit_kernel_validation_warning(v48, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
        Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)&__p.__r_.__value_.__l.__data_);
        if (v56 < 0)
          operator delete(v55[0]);
        std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v48);
        goto LABEL_46;
      }
      v31 = a2[1];
      v49 = *a2;
      v50 = (uint64_t)v31;
      if (v31)
      {
        v32 = &v31->u64[1];
        do
          v33 = __ldxr(v32);
        while (__stxr(v33 + 1, v32));
      }
      std::string::basic_string[abi:ne180100]<0>(v55, "Channel broadcast size exceeds limit");
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)v55, (uint64_t)a3, 0);
      Espresso::emit_kernel_validation_warning(&v49, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
      v34 = v60;
      if (v60)
      {
        v35 = (unint64_t *)&v60->__shared_owners_;
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 - 1, v35));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
      }
      v65 = (void **)v59;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v65);
      v65 = (void **)v58;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v65);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (v56 < 0)
        operator delete(v55[0]);
      v17 = v50;
      if (!v50)
        goto LABEL_47;
      v37 = (unint64_t *)(v50 + 8);
      do
        v19 = __ldaxr(v37);
      while (__stlxr(v19 - 1, v37));
    }
    else
    {
      v38 = a2[1];
      v51 = *a2;
      v52 = (uint64_t)v38;
      if (v38)
      {
        v39 = &v38->u64[1];
        do
          v40 = __ldxr(v39);
        while (__stxr(v40 + 1, v39));
      }
      std::string::basic_string[abi:ne180100]<0>(v55, "Bottom number of channels has to be 1.");
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)v55, (uint64_t)a3, 0);
      Espresso::emit_kernel_validation_warning(&v51, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
      v41 = v60;
      if (v60)
      {
        v42 = (unint64_t *)&v60->__shared_owners_;
        do
          v43 = __ldaxr(v42);
        while (__stlxr(v43 - 1, v42));
        if (!v43)
        {
          ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
          std::__shared_weak_count::__release_weak(v41);
        }
      }
      v65 = (void **)v59;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v65);
      v65 = (void **)v58;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v65);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (v56 < 0)
        operator delete(v55[0]);
      v17 = v52;
      if (!v52)
        goto LABEL_47;
      v44 = (unint64_t *)(v52 + 8);
      do
        v19 = __ldaxr(v44);
      while (__stlxr(v19 - 1, v44));
    }
LABEL_44:
    if (!v19)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 16))(v17);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v17);
    }
LABEL_46:
    v17 = 0;
    goto LABEL_47;
  }
  if ((a1[74] < 2 || v10[4] != 1) && (a1[73] < 2 || v10[3] != 1))
    goto LABEL_53;
  v11 = a2[1];
  v61 = *a2;
  v62 = (uint64_t)v11;
  if (v11)
  {
    v12 = &v11->u64[1];
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  std::string::basic_string[abi:ne180100]<0>(v55, "Cannot broadcast along seq or batch");
  Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)v55, (uint64_t)a3, 0);
  Espresso::emit_kernel_validation_warning(&v61, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
  v14 = v60;
  if (v60)
  {
    v15 = (unint64_t *)&v60->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v65 = (void **)v59;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v65);
  v65 = (void **)v58;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v65);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v56 < 0)
    operator delete(v55[0]);
  v17 = v62;
  if (v62)
  {
    v18 = (unint64_t *)(v62 + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    goto LABEL_44;
  }
LABEL_47:
  v27 = v64;
  if (v64)
  {
    v28 = (unint64_t *)&v64->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  return v17;
}

void sub_1913A3D10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23)
{
  uint64_t v23;

  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t(&a23);
  if (a22 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v23 - 72);
  _Unwind_Resume(a1);
}

BOOL Espresso::generic_broadcast_kernel::has_dynamic_top_shape(Espresso::generic_broadcast_kernel *this, unint64_t a2)
{
  return a2 >= 2 && *((_BYTE *)this + 312) != 0;
}

const char *Espresso::generic_broadcast_kernel::kernel_type_str(Espresso::generic_broadcast_kernel *this)
{
  return "broadcast";
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::broadcast_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

void Espresso::ANECompilerEngine::broadcast_kernel::compile(Espresso::ANECompilerEngine::broadcast_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v7;
  Espresso::ANECompilerEngine *v8;
  std::__shared_weak_count *v9;
  char *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  void *v19;
  char *v20;
  Espresso::net *v21;
  const __CFString *v22;
  __CFString *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  float v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  int *v48;
  _WORD *v49;
  int v50;
  __int128 v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  int *v64;
  _WORD *v65;
  int v66;
  uint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  id v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  uint64_t weights_file_index;
  void *v81;
  void *v82;
  __int128 v83;
  unint64_t *v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  void *v89;
  void *v90;
  void *v91;
  uint64_t v92;
  void *v93;
  void *v94;
  std::string *v95;
  std::string *v96;
  uint64_t v97;
  char v98;
  std::string::size_type size;
  std::string::size_type v100;
  uint64_t v101;
  unsigned __int8 *v102;
  std::string *v103;
  const std::string::value_type *data;
  __int128 v105;
  __CFString *v106;
  std::string *v107;
  std::string *v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  unint64_t *v125;
  unint64_t v126;
  unint64_t *v127;
  unint64_t v128;
  unint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  const char *v140;
  const char *v141;
  int *v142;
  uint64_t i;
  float v144;
  int v145;
  _WORD *v146;
  int v147;
  std::runtime_error *exception;
  int *v150;
  uint64_t j;
  int v152;
  int v153;
  unsigned int v154;
  unsigned int v155;
  int v156;
  Espresso *v157;
  const char *v158;
  float v159;
  NSObject *v161;
  double v162;
  uint64_t v163;
  _WORD *v164;
  int v165;
  unsigned int v167;
  int v168;
  void *obj;
  std::__shared_weak_count *v170;
  std::string *v171;
  std::string *v172;
  unint64_t v173;
  char v174[8];
  int v175;
  int v176;
  int v177;
  void *v178;
  void *v179;
  void *v180[2];
  char v181;
  uint64_t v182;
  uint64_t v183;
  void *v184;
  char v185;
  id v186;
  __CFString *v187;
  id v188;
  uint64_t v189;
  uint64_t v190;
  std::__shared_weak_count *v191;
  uint64_t v192;
  std::__shared_weak_count *v193;
  Espresso::ANECompilerEngine *v194;
  std::__shared_weak_count *v195;
  __int128 v196;
  uint64_t v197;
  std::__shared_weak_count *v198;
  __int128 v199;
  uint64_t v200;
  std::__shared_weak_count *v201;
  uint64_t v202[2];
  uint64_t v203;
  std::__shared_weak_count *v204;
  uint64_t v205;
  std::__shared_weak_count *v206;
  uint64_t v207;
  std::__shared_weak_count *v208;
  unsigned int v209;
  unsigned int v210;
  uint64_t v211;
  std::__shared_weak_count *v212;
  _BYTE buf[18];
  __int16 v214;
  int v215;
  __int16 v216;
  double v217;
  std::vector<std::string> v218;
  void *v219;
  char v220;
  id v221;
  __CFString *v222;
  id v223;
  std::string v224;
  _BYTE v225[24];
  _BYTE v226[32];
  void *__p;
  char v228;
  id v229;
  __CFString *v230;
  id v231;
  uint64_t v232;
  std::string __str;
  __int128 v234;
  uint64_t v235;

  v235 = *MEMORY[0x1E0C80C00];
  v194 = 0;
  v195 = 0;
  v4 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
  if (!v4
    || (v7 = std::__shared_weak_count::lock(v4), (v195 = v7) == 0)
    || (v8 = (Espresso::ANECompilerEngine *)*((_QWORD *)a2 + 1), (v194 = v8) == 0))
  {
    v140 = "Inconsistent state: null network";
    goto LABEL_210;
  }
  if (!*((_QWORD *)v8 + 72))
  {
    v140 = "Inconsistent state: blob_storage";
LABEL_210:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v140);
  }
  v9 = v7;
  v224.__r_.__value_.__r.__words[0] = *((_QWORD *)a3 + 6);
  v10 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v8 + 136, (unsigned __int8 *)v224.__r_.__value_.__l.__data_, (__int128 **)&v224);
  v11 = (std::__shared_weak_count *)*((_QWORD *)v10 + 6);
  v192 = *((_QWORD *)v10 + 5);
  v193 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  v224.__r_.__value_.__r.__words[0] = (std::string::size_type)a3;
  v14 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v8 + 136, (unsigned __int8 *)a3, (__int128 **)&v224);
  v15 = *((_QWORD *)v14 + 5);
  v16 = (std::__shared_weak_count *)*((_QWORD *)v14 + 6);
  v190 = v15;
  v191 = v16;
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v19 = (void *)objc_opt_new();
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t(v180, (id *)a3);
  v224.__r_.__value_.__r.__words[0] = *((_QWORD *)a3 + 6);
  v20 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v8 + 136, (unsigned __int8 *)v224.__r_.__value_.__l.__data_, (__int128 **)&v224);
  Espresso::abstract_blob_container::shape(v174, *((_QWORD *)v20 + 5));
  if (Espresso::ANECompilerEngine::can_handle_configuration_dependent_transforms(v8, v21))
  {
    if (*((int *)this + 74) >= 2 && v177 == 1 || *((int *)this + 73) >= 2 && v176 == 1)
      goto LABEL_206;
  }
  else if (*((int *)this + 74) > 0 || *((int *)this + 73) > 0 || *((int *)this + 71) > 0 || *((int *)this + 70) > 0)
  {
LABEL_206:
    v141 = "Unsupported axis for broadcast.";
    goto LABEL_208;
  }
  if (v175 != 1 || *((_DWORD *)this + 72) > *((_DWORD *)this + 134))
  {
    v141 = "Unsupported channel count for broadcast.";
LABEL_208:
    Espresso::throw_exception_selector<Espresso::unsupported_configuration_error>(v141);
  }
  objc_msgSend(v19, "setObject:forKeyedSubscript:", CFSTR("Conv"), CFSTR("Type"));
  objc_msgSend(v19, "setObject:forKeyedSubscript:", CFSTR("Unity"), CFSTR("KernelMode"));
  objc_msgSend(v19, "setObject:forKeyedSubscript:", &unk_1E2DEDA78, CFSTR("KernelWidth"));
  objc_msgSend(v19, "setObject:forKeyedSubscript:", &unk_1E2DEDA78, CFSTR("KernelHeight"));
  if (*((_DWORD *)a3 + 26) == 1)
    v22 = CFSTR("Float16");
  else
    v22 = CFSTR("Int8");
  objc_msgSend(v19, "setObject:forKeyedSubscript:", v22, CFSTR("KernelType"));
  objc_msgSend(v19, "setObject:forKeyedSubscript:", &unk_1E2DEE028, CFSTR("Step"));
  objc_msgSend(v19, "setObject:forKeyedSubscript:", &unk_1E2DEDA90, CFSTR("PadTop"));
  objc_msgSend(v19, "setObject:forKeyedSubscript:", &unk_1E2DEDA90, CFSTR("PadBot"));
  objc_msgSend(v19, "setObject:forKeyedSubscript:", &unk_1E2DEDA90, CFSTR("PadLeft"));
  objc_msgSend(v19, "setObject:forKeyedSubscript:", &unk_1E2DEDA90, CFSTR("PadRight"));
  objc_msgSend(v19, "setObject:forKeyedSubscript:", CFSTR("Zero"), CFSTR("PaddingMode"));
  v23 = v187;
  v187 = CFSTR("Conv");

  LODWORD(v189) = *((_DWORD *)this + 72);
  HIDWORD(v189) = 1;
  objc_storeStrong(&v188, v19);
  Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t(&v224, (const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)v180);
  v230 = v187;
  v231 = v188;
  v232 = v189;
  v172 = 0;
  v173 = 0;
  v171 = 0;
  *(_QWORD *)buf = &v171;
  buf[8] = 0;
  v171 = (std::string *)operator new(0x90uLL);
  v172 = v171;
  v173 = (unint64_t)&v171[6];
  v172 = (std::string *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>,Espresso::ANECompilerEngine::compiler::unit_t const*,Espresso::ANECompilerEngine::compiler::unit_t const*,Espresso::ANECompilerEngine::compiler::unit_t*>((uint64_t)&v173, (uint64_t)&v224, (uint64_t)&__str, (uint64_t)v171);

  if (v228 < 0)
    operator delete(__p);
  *(_QWORD *)buf = v226;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(_QWORD *)buf = v225;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (SHIBYTE(v224.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v224.__r_.__value_.__l.__data_);
  v170 = v9;
  v24 = (unint64_t *)&v9->__shared_owners_;
  do
    v25 = __ldxr(v24);
  while (__stxr(v25 + 1, v24));
  if (v16)
  {
    v26 = (unint64_t *)&v16->__shared_owners_;
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t((Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)&v224);
  v231 = 0;
  v230 = 0;
  v232 = 0x100000000;
  v29 = *((_QWORD *)this + 48);
  v28 = (std::__shared_weak_count *)*((_QWORD *)this + 49);
  v211 = v29;
  v212 = v28;
  if (v28)
  {
    v30 = (unint64_t *)&v28->__shared_owners_;
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  if (v29 && !*(_BYTE *)((*(uint64_t (**)(char *))(*((_QWORD *)this + 40) + 104))((char *)this + 320) + 40))
  {
    v32 = *(float *)(v15 + 112);
    v203 = v29;
    v204 = v28;
    if (v28)
    {
      v33 = (unint64_t *)&v28->__shared_owners_;
      do
        v34 = __ldxr(v33);
      while (__stxr(v34 + 1, v33));
    }
    v35 = (std::__shared_weak_count *)*((_QWORD *)this + 51);
    v202[0] = *((_QWORD *)this + 50);
    v202[1] = (uint64_t)v35;
    if (v35)
    {
      v36 = (unint64_t *)&v35->__shared_owners_;
      do
        v37 = __ldxr(v36);
      while (__stxr(v37 + 1, v36));
    }
    Espresso::ane_style_post_scale_bias((uint64_t)&v203, v202, (uint64_t)&v205, v32);
    if (v35)
    {
      v38 = (unint64_t *)&v35->__shared_owners_;
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
    v40 = v204;
    if (v204)
    {
      v41 = (unint64_t *)&v204->__shared_owners_;
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
    v43 = v211;
    v44 = *(unsigned int *)(v211 + 8);
    std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v200, 2 * v44, 1, 1, 1);
    v45 = (int)v44;
    v199 = 0uLL;
    v46 = v44;
    v47 = *((_QWORD *)this + 50);
    if (v47)
      v46 = *(_DWORD *)(v47 + 8);
    if (!*((_BYTE *)a2 + 384))
    {
      Espresso::blob<unsigned char,1>::make(&__str, 4 * v44);
      v142 = *(int **)(__str.__r_.__value_.__r.__words[0] + 16);
      if ((int)v44 >= 1)
      {
        for (i = 0; i != v44; ++i)
        {
          v144 = *(float *)(*(_QWORD *)(v43 + 16) + i * 4);
          *(float *)&v145 = ldexp(1.0, -v209) * v144;
          v142[i] = v145;
        }
      }
      if ((_DWORD)v44)
      {
        v146 = *(_WORD **)(v200 + 16);
        do
        {
          v147 = *v142++;
          _S0 = v147;
          __asm { FCVT            H0, S0 }
          *v146++ = _S0;
          --v45;
        }
        while (v45);
      }
      v197 = 0;
      v198 = 0;
      if (*((_QWORD *)this + 50))
      {
        Espresso::blob<unsigned char,1>::make(buf, 4 * v46);
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)&v197, (__int128 *)buf);
        std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)buf);
        Espresso::blob<unsigned char,1>::make(buf, 2 * v46);
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)&v199, (__int128 *)buf);
        std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)buf);
        v150 = *(int **)(v197 + 16);
        if (v46 >= 1)
        {
          for (j = 0; j != v46; ++j)
          {
            if ((int)v44 - 1 >= (int)j)
              v152 = j;
            else
              v152 = v44 - 1;
            *(float *)&v153 = *(float *)(*(_QWORD *)(v207 + 16) + 4 * j)
                            * *(float *)(*(_QWORD *)(v205 + 16) + 4 * v152);
            v150[j] = v153;
            v154 = v210;
            v155 = v209;
            *(float *)&v156 = ldexp(1.0, v210 - v209) * *(float *)&v153;
            v150[j] = v156;
            v159 = ldexp(1.0, v155 - v154) * *(float *)&v156;
            if (v159 < -127.0 || v159 > 255.0)
            {
              Espresso::espresso_os_log_subsystem(v157, v158);
              v161 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v161, OS_LOG_TYPE_ERROR))
              {
                v162 = *(float *)&v150[j];
                *(_DWORD *)buf = 134218752;
                *(double *)&buf[4] = v159;
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v210;
                v214 = 1024;
                v215 = v209;
                v216 = 2048;
                v217 = v162;
                _os_log_error_impl(&dword_190DAF000, v161, OS_LOG_TYPE_ERROR, "[ANEC::add_ane_scale_bias_unit] Shifted bias overflowing shifted_b=%f acc_bias_shift=%d post_right_shift=%d anebias=%f", buf, 0x22u);
              }

            }
          }
        }
        if (v46)
        {
          v163 = v46;
          v164 = *(_WORD **)(v199 + 16);
          do
          {
            v165 = *v150++;
            _S0 = v165;
            __asm { FCVT            H0, S0 }
            *v164++ = _S0;
            --v163;
          }
          while (v163);
        }
      }
      exception = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
      Espresso::not_implemented_error::not_implemented_error(exception);
    }
    v167 = v210;
    if ((_DWORD)v44)
    {
      v48 = *(int **)(v205 + 16);
      v49 = *(_WORD **)(v200 + 16);
      do
      {
        v50 = *v48++;
        _S0 = v50;
        __asm { FCVT            H0, S0 }
        *v49++ = _S0;
        --v45;
      }
      while (v45);
    }
    if (v47)
    {
      std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(buf, 2 * v46, 1, 1, 1);
      v56 = *(_OWORD *)buf;
      *(_QWORD *)&buf[8] = 0;
      *(_QWORD *)buf = 0;
      v57 = (std::__shared_weak_count *)*((_QWORD *)&v199 + 1);
      v199 = v56;
      if (v57)
      {
        v58 = (unint64_t *)&v57->__shared_owners_;
        do
          v59 = __ldaxr(v58);
        while (__stlxr(v59 - 1, v58));
        if (!v59)
        {
          ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
          std::__shared_weak_count::__release_weak(v57);
        }
      }
      v60 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v61 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v62 = __ldaxr(v61);
        while (__stlxr(v62 - 1, v61));
        if (!v62)
        {
          ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
          std::__shared_weak_count::__release_weak(v60);
        }
      }
      if (v46)
      {
        v63 = v46;
        v64 = *(int **)(v207 + 16);
        v65 = *(_WORD **)(v199 + 16);
        do
        {
          v66 = *v64++;
          _S0 = v66;
          __asm { FCVT            H0, S0 }
          *v65++ = _S0;
          --v63;
        }
        while (v63);
      }
    }
    v168 = *((unsigned __int8 *)a2 + 552);
    v68 = v200;
    v69 = v201;
    v197 = v200;
    v198 = v201;
    if (v201)
    {
      v70 = (unint64_t *)&v201->__shared_owners_;
      do
        v71 = __ldxr(v70);
      while (__stxr(v71 + 1, v70));
    }
    v72 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler *)((char *)a2 + 128), *(const unsigned __int8 **)(v68 + 16), *(int *)(v68 + 8));
    if (v69)
    {
      v73 = (unint64_t *)&v69->__shared_owners_;
      do
        v74 = __ldaxr(v73);
      while (__stlxr(v74 - 1, v73));
      if (!v74)
      {
        ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
        std::__shared_weak_count::__release_weak(v69);
      }
    }
    obj = (void *)objc_opt_new();
    if (*((_BYTE *)a2 + 121))
    {
      v75 = (id)v171[5].__r_.__value_.__l.__size_;

      obj = v75;
    }
    v76 = (void *)objc_opt_new();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v44);
    v77 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v76, "setObject:forKeyedSubscript:", v77, CFSTR("ScaleCount"));

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v72);
    v78 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v76, "setObject:forKeyedSubscript:", v78, CFSTR("ScaleOffset"));

    v79 = (void *)MEMORY[0x1E0CB37E8];
    if (v168)
      weights_file_index = 0;
    else
    objc_msgSend(v79, "numberWithUnsignedLong:", weights_file_index);
    v81 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v76, "setObject:forKeyedSubscript:", v81, CFSTR("ScaleIndex"));

    objc_msgSend(v76, "setObject:forKeyedSubscript:", CFSTR("Float16"), CFSTR("ScaleType"));
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v209);
    v82 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(obj, "setObject:forKeyedSubscript:", v82, CFSTR("ScaleShift"));

    if (*((_QWORD *)this + 50))
    {
      v83 = v199;
      v196 = v199;
      if (*((_QWORD *)&v199 + 1))
      {
        v84 = (unint64_t *)(*((_QWORD *)&v199 + 1) + 8);
        do
          v85 = __ldxr(v84);
        while (__stxr(v85 + 1, v84));
      }
      v86 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler *)((char *)a2 + 128), *(const unsigned __int8 **)(v83 + 16), *(int *)(v83 + 8));
      if (*((_QWORD *)&v83 + 1))
      {
        v87 = (unint64_t *)(*((_QWORD *)&v83 + 1) + 8);
        do
          v88 = __ldaxr(v87);
        while (__stlxr(v88 - 1, v87));
        if (!v88)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v83 + 1) + 16))(*((_QWORD *)&v83 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v83 + 1));
        }
      }
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *(unsigned int *)(*((_QWORD *)this + 50) + 8));
      v89 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v76, "setObject:forKeyedSubscript:", v89, CFSTR("BiasCount"));

      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v86);
      v90 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v76, "setObject:forKeyedSubscript:", v90, CFSTR("BiasOffset"));

      v91 = (void *)MEMORY[0x1E0CB37E8];
      if (v168)
        v92 = 0;
      else
      objc_msgSend(v91, "numberWithUnsignedLong:", v92);
      v93 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v76, "setObject:forKeyedSubscript:", v93, CFSTR("BiasIndex"));

      objc_msgSend(v76, "setObject:forKeyedSubscript:", CFSTR("Float16"), CFSTR("BiasType"));
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v167);
      v94 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(obj, "setObject:forKeyedSubscript:", v94, CFSTR("BiasShift"));

    }
    objc_msgSend(obj, "setObject:forKeyedSubscript:", v76, CFSTR("BiasScaleGroupData"));
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)buf, (id *)a3);
    v95 = v172;
    if (v172 == v171)
      goto LABEL_126;
    v96 = v172 - 6;
    v97 = HIBYTE(v172[-6].__r_.__value_.__r.__words[2]);
    v98 = v97;
    size = v172[-6].__r_.__value_.__l.__size_;
    if ((v97 & 0x80u) == 0)
      v100 = HIBYTE(v172[-6].__r_.__value_.__r.__words[2]);
    else
      v100 = v172[-6].__r_.__value_.__l.__size_;
    v101 = HIBYTE(v215);
    if (v215 < 0)
      v101 = *(_QWORD *)&buf[8];
    if (v100 != v101)
      goto LABEL_120;
    if (v215 >= 0)
      v102 = buf;
    else
      v102 = *(unsigned __int8 **)buf;
    if ((char)v97 < 0)
    {
      data = (const std::string::value_type *)v96->__r_.__value_.__r.__words[0];
      if (memcmp(v96->__r_.__value_.__l.__data_, v102, v172[-6].__r_.__value_.__l.__size_))
        goto LABEL_123;
    }
    else if ((_BYTE)v97)
    {
      v103 = v172 - 6;
      while (v103->__r_.__value_.__s.__data_[0] == *v102)
      {
        v103 = (std::string *)((char *)v103 + 1);
        ++v102;
        if (!--v97)
          goto LABEL_119;
      }
      goto LABEL_120;
    }
LABEL_119:
    std::string::append(v95 - 6, "__@pre_scale_bias");
    v98 = HIBYTE(v95[-6].__r_.__value_.__r.__words[2]);
LABEL_120:
    if ((v98 & 0x80) == 0)
    {
      v105 = *(_OWORD *)&v96->__r_.__value_.__l.__data_;
      __str.__r_.__value_.__r.__words[2] = v95[-6].__r_.__value_.__r.__words[2];
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v105;
      goto LABEL_124;
    }
    data = v95[-6].__r_.__value_.__l.__data_;
    size = v95[-6].__r_.__value_.__l.__size_;
LABEL_123:
    std::string::__init_copy_ctor_external(&__str, data, size);
LABEL_124:
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v218, &__str, &v234, 1uLL);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
LABEL_126:
    v106 = v222;
    v222 = CFSTR("GOC");

    objc_storeStrong(&v223, obj);
    if (!*((_BYTE *)a2 + 121))
    {
      v107 = v172;
      if ((unint64_t)v172 >= v173)
      {
        v109 = 0x8E38E38E38E38E39 * (((char *)v172 - (char *)v171) >> 4);
        if (v109 + 1 > 0x1C71C71C71C71C7)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v110 = 0x1C71C71C71C71C72 * ((uint64_t)(v173 - (_QWORD)v171) >> 4);
        if (v110 <= v109 + 1)
          v110 = v109 + 1;
        if (0x8E38E38E38E38E39 * ((uint64_t)(v173 - (_QWORD)v171) >> 4) >= 0xE38E38E38E38E3)
          v111 = 0x1C71C71C71C71C7;
        else
          v111 = v110;
        *((_QWORD *)&v234 + 1) = &v173;
        if (v111)
          v111 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v111);
        else
          v112 = 0;
        __str.__r_.__value_.__r.__words[0] = v111;
        __str.__r_.__value_.__l.__size_ = v111 + 144 * v109;
        __str.__r_.__value_.__r.__words[2] = __str.__r_.__value_.__l.__size_;
        *(_QWORD *)&v234 = v111 + 144 * v112;
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)__str.__r_.__value_.__l.__size_, (uint64_t)buf);
        __str.__r_.__value_.__r.__words[2] += 144;
        std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer((uint64_t *)&v171, &__str);
        v108 = v172;
        std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&__str);
      }
      else
      {
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v172, (uint64_t)buf);
        v108 = v107 + 6;
      }
      v172 = v108;
    }

    if (v220 < 0)
      operator delete(v219);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v218;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v216;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
    if (SHIBYTE(v215) < 0)
      operator delete(*(void **)buf);

    v113 = (std::__shared_weak_count *)*((_QWORD *)&v199 + 1);
    if (*((_QWORD *)&v199 + 1))
    {
      v114 = (unint64_t *)(*((_QWORD *)&v199 + 1) + 8);
      do
        v115 = __ldaxr(v114);
      while (__stlxr(v115 - 1, v114));
      if (!v115)
      {
        ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
        std::__shared_weak_count::__release_weak(v113);
      }
    }
    v116 = v201;
    if (v201)
    {
      v117 = (unint64_t *)&v201->__shared_owners_;
      do
        v118 = __ldaxr(v117);
      while (__stlxr(v118 - 1, v117));
      if (!v118)
      {
        ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
        std::__shared_weak_count::__release_weak(v116);
      }
    }
    v119 = v208;
    if (v208)
    {
      v120 = (unint64_t *)&v208->__shared_owners_;
      do
        v121 = __ldaxr(v120);
      while (__stlxr(v121 - 1, v120));
      if (!v121)
      {
        ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
        std::__shared_weak_count::__release_weak(v119);
      }
    }
    v122 = v206;
    if (v206)
    {
      v123 = (unint64_t *)&v206->__shared_owners_;
      do
        v124 = __ldaxr(v123);
      while (__stlxr(v124 - 1, v123));
      if (!v124)
      {
        ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
        std::__shared_weak_count::__release_weak(v122);
      }
    }
    v28 = v212;
  }
  if (v28)
  {
    v125 = (unint64_t *)&v28->__shared_owners_;
    do
      v126 = __ldaxr(v125);
    while (__stlxr(v126 - 1, v125));
    if (!v126)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }

  if (v228 < 0)
    operator delete(__p);
  *(_QWORD *)buf = v226;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(_QWORD *)buf = v225;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (SHIBYTE(v224.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v224.__r_.__value_.__l.__data_);
  if (v16)
  {
    v127 = (unint64_t *)&v16->__shared_owners_;
    do
      v128 = __ldaxr(v127);
    while (__stlxr(v128 - 1, v127));
    if (!v128)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v129 = (unint64_t *)&v170->__shared_owners_;
  do
    v130 = __ldaxr(v129);
  while (__stlxr(v130 - 1, v129));
  if (!v130)
  {
    ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
    std::__shared_weak_count::__release_weak(v170);
  }
  (*(void (**)(char *, Espresso::ANECompilerEngine::compiler *, std::string **))(*((_QWORD *)this + 40) + 32))((char *)this + 320, a2, &v171);
  v224.__r_.__value_.__r.__words[0] = (std::string::size_type)&v171;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&v224);
  if (v178)
  {
    v179 = v178;
    operator delete(v178);
  }

  if (v185 < 0)
    operator delete(v184);
  v224.__r_.__value_.__r.__words[0] = (std::string::size_type)&v183;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v224);
  v224.__r_.__value_.__r.__words[0] = (std::string::size_type)&v182;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v224);
  if (v181 < 0)
    operator delete(v180[0]);

  v131 = v191;
  if (v191)
  {
    v132 = (unint64_t *)&v191->__shared_owners_;
    do
      v133 = __ldaxr(v132);
    while (__stlxr(v133 - 1, v132));
    if (!v133)
    {
      ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
      std::__shared_weak_count::__release_weak(v131);
    }
  }
  v134 = v193;
  if (v193)
  {
    v135 = (unint64_t *)&v193->__shared_owners_;
    do
      v136 = __ldaxr(v135);
    while (__stlxr(v136 - 1, v135));
    if (!v136)
    {
      ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
      std::__shared_weak_count::__release_weak(v134);
    }
  }
  v137 = v195;
  if (v195)
  {
    v138 = (unint64_t *)&v195->__shared_owners_;
    do
      v139 = __ldaxr(v138);
    while (__stlxr(v139 - 1, v138));
    if (!v139)
    {
      ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
      std::__shared_weak_count::__release_weak(v137);
    }
  }
}

void sub_1913A5048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28,id a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,char a49,uint64_t a50,char a51)
{
  void *v51;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  STACK[0x200] = (unint64_t)&a18;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x200]);
  if (__p)
  {
    a27 = (uint64_t)__p;
    operator delete(__p);
  }
  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t(&a29);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a47);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a49);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a51);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::broadcast_kernel::compile(Espresso::ANECompilerEngine::broadcast_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
  Espresso::ANECompilerEngine::broadcast_kernel::compile((Espresso::ANECompilerEngine::broadcast_kernel *)((char *)this - 320), a2, a3);
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::broadcast_kernel::~broadcast_kernel(void **this)
{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 40);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
}

{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 40);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANECompilerEngine::softmax_kernel::~softmax_kernel(void **this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 39);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 39);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANECompilerEngine::softmax_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob((_QWORD *)(a1 + 312), a3, a4, a5);
}

uint64_t Espresso::ANECompilerEngine::softmax_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::string *p_p;
  BOOL v20;
  char v21;
  std::string *v22;
  BOOL v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::string __p;
  uint64_t v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  int64x2_t *v32;
  uint64_t v33;
  void *v34[2];
  char v35;
  void **v36[2];
  char v37;
  std::string v38;
  uint64_t v39;
  std::__shared_weak_count *v40;

  v4 = a3[6];
  v39 = 0;
  v40 = 0;
  v5 = *(std::__shared_weak_count **)(v4 + 80);
  if (!v5 || (v40 = std::__shared_weak_count::lock(v5)) == 0 || (v8 = *(_QWORD *)(v4 + 72), (v39 = v8) == 0))
    Espresso::throw_exception_selector<Espresso::generic_error>("Null pointer in softmax validation");
  v9 = *(unsigned __int8 *)(a1 + 304) | *(unsigned __int8 *)(a1 + 306);
  if (!*(_DWORD *)(a1 + 300))
  {
    std::string::basic_string[abi:ne180100]<0>(&v38, "experimental.ane.enable_scenenet_optimizations");
    std::string::basic_string[abi:ne180100]<0>(v36, "0");
    Espresso::map_const_get<std::map<std::string,std::string>>(v8 + 472, (uint64_t)&v38, (uint64_t)v36, &__p);
    if (v37 < 0)
      operator delete(v36[0]);
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v38.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(v36, "allowSoftmaxApproximation");
    std::string::basic_string[abi:ne180100]<0>(v34, "0");
    Espresso::map_const_get<std::map<std::string,std::string>>(v8 + 472, (uint64_t)v36, (uint64_t)v34, &v38);
    if (v35 < 0)
      operator delete(v34[0]);
    if (v37 < 0)
      operator delete(v36[0]);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      if (__p.__r_.__value_.__l.__size_ != 1)
        goto LABEL_39;
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    else
    {
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) != 1)
        goto LABEL_39;
      p_p = &__p;
    }
    if (p_p->__r_.__value_.__s.__data_[0] == 49)
    {
      v20 = 1;
      v21 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
      goto LABEL_44;
    }
LABEL_39:
    v21 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    {
      v22 = (std::string *)v38.__r_.__value_.__r.__words[0];
      if (v38.__r_.__value_.__l.__size_ != 1)
      {
        v23 = 0;
LABEL_63:
        operator delete(v22);
        if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
          goto LABEL_64;
        goto LABEL_51;
      }
    }
    else
    {
      if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) != 1)
      {
        v23 = 0;
        if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
          goto LABEL_64;
LABEL_51:
        if (!v23)
          goto LABEL_6;
LABEL_52:
        v16 = 1;
        goto LABEL_53;
      }
      v22 = &v38;
    }
    v20 = v22->__r_.__value_.__s.__data_[0] == 49;
LABEL_44:
    if (*(int *)(*a3 + 8) > 4096)
      v20 = 0;
    if (v9)
      v23 = 0;
    else
      v23 = v20;
    if ((v21 & 0x80) == 0)
    {
      if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) == 0)
        goto LABEL_51;
LABEL_64:
      operator delete(__p.__r_.__value_.__l.__data_);
      if (!v23)
        goto LABEL_6;
      goto LABEL_52;
    }
    v22 = (std::string *)v38.__r_.__value_.__r.__words[0];
    goto LABEL_63;
  }
  if (!v9)
    goto LABEL_52;
LABEL_6:
  v10 = *(_QWORD *)(a2 + 8);
  v32 = *(int64x2_t **)a2;
  v33 = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  std::string::basic_string[abi:ne180100]<0>(&v38, "Softmax unsupported");
  Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)&v38, (uint64_t)a3, 0);
  Espresso::emit_kernel_validation_warning(&v32, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
  v13 = v31;
  if (v31)
  {
    p_shared_owners = (unint64_t *)&v31->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v36[0] = (void **)&v30;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v36);
  v36[0] = (void **)&v29;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v36);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  v16 = v33;
  if (v33)
  {
    v17 = (unint64_t *)(v33 + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v16);
    }
    v16 = 0;
  }
LABEL_53:
  v24 = v40;
  if (v40)
  {
    v25 = (unint64_t *)&v40->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  return v16;
}

void sub_1913A56CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  uint64_t v34;

  if (a34 < 0)
    operator delete(__p);
  if (*(char *)(v34 - 89) < 0)
    operator delete(*(void **)(v34 - 112));
  if (a15 < 0)
    operator delete(a10);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v34 - 64);
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::softmax_kernel::compile(Espresso::ANECompilerEngine::softmax_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
  Espresso::throw_exception_selector<Espresso::generic_error>("softmax_kernel::compile should not be called: The layer should have been transformed");
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::softmax_kernel::compile(Espresso::ANECompilerEngine::softmax_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
  Espresso::throw_exception_selector<Espresso::generic_error>("softmax_kernel::compile should not be called: The layer should have been transformed");
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::softmax_kernel::~softmax_kernel(void **this)
{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 39);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
}

{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 39);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANECompilerEngine::cast_kernel::~cast_kernel(void **this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 36);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 36);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANECompilerEngine::cast_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob((_QWORD *)(a1 + 288), a3, a4, a5);
}

BOOL Espresso::ANECompilerEngine::cast_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  const Espresso::net *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  const Espresso::net *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 *v27;
  __int128 v28;
  const Espresso::net *v29;
  char *v30;
  unsigned int v31;
  char *v32;
  int v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::string v47;
  _QWORD v48[3];
  uint64_t v49;
  std::__shared_weak_count *v50;
  int64x2_t *v51;
  std::__shared_weak_count *v52;
  std::string *v53;
  void *v54[2];
  char v55;
  std::string v56;
  _OWORD v57[2];
  uint64_t v58;
  void *__p;
  void *v60;
  uint64_t v61;
  const Espresso::net *v62;
  std::__shared_weak_count *v63;
  char v64[32];
  _OWORD v65[2];
  uint64_t v66;
  void *v67;
  void *v68;
  uint64_t v69;
  const Espresso::net *v70;
  std::__shared_weak_count *v71;
  char v72[32];
  const Espresso::net *v73;
  std::__shared_weak_count *v74;
  void **v75;

  v6 = a3[6];
  v73 = 0;
  v74 = 0;
  v7 = *(std::__shared_weak_count **)(v6 + 80);
  if (v7 && (v8 = std::__shared_weak_count::lock(v7), (v74 = v8) != 0))
  {
    v9 = *(const Espresso::net **)(v6 + 72);
    v73 = v9;
    v70 = v9;
    v71 = v8;
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  else
  {
    v9 = 0;
    v70 = 0;
    v71 = 0;
  }
  v12 = *a3;
  v13 = *(_QWORD *)(*a3 + 32);
  v14 = *(_OWORD *)(*a3 + 16);
  v65[0] = *(_OWORD *)*a3;
  v65[1] = v14;
  v66 = v13;
  v67 = 0;
  v68 = 0;
  v69 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v67, *(const void **)(v12 + 40), *(_QWORD *)(v12 + 48), (uint64_t)(*(_QWORD *)(v12 + 48) - *(_QWORD *)(v12 + 40)) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v72, v9, (const Espresso::layer_shape *)v65, 1);
  if (v67)
  {
    v68 = v67;
    operator delete(v67);
  }
  v15 = v71;
  if (v71)
  {
    v16 = (unint64_t *)&v71->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v19 = v73;
  v18 = v74;
  v62 = v73;
  v63 = v74;
  if (v74)
  {
    v20 = (unint64_t *)&v74->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  v22 = a3[3];
  v23 = *(_QWORD *)(v22 + 32);
  v24 = *(_OWORD *)(v22 + 16);
  v57[0] = *(_OWORD *)v22;
  v57[1] = v24;
  v58 = v23;
  __p = 0;
  v60 = 0;
  v61 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *(const void **)(v22 + 40), *(_QWORD *)(v22 + 48), (uint64_t)(*(_QWORD *)(v22 + 48) - *(_QWORD *)(v22 + 40)) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v64, v19, (const Espresso::layer_shape *)v57, 1);
  if (__p)
  {
    v60 = __p;
    operator delete(__p);
  }
  if (v18)
  {
    v25 = (unint64_t *)&v18->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v27 = *(__int128 **)(*(_QWORD *)a3[6] + 224 * a3[9] + 136);
  if (*((char *)v27 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v56, *(const std::string::value_type **)v27, *((_QWORD *)v27 + 1));
  }
  else
  {
    v28 = *v27;
    v56.__r_.__value_.__r.__words[2] = *((_QWORD *)v27 + 2);
    *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v28;
  }
  v29 = v73;
  if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*((_QWORD **)v73 + 45), &v56))
  {
    v53 = &v56;
    v30 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v29 + 44, &v56, (uint64_t)&std::piecewise_construct, (__int128 **)&v53);
    *(_OWORD *)&v47.__r_.__value_.__l.__data_ = *(_OWORD *)(v30 + 56);
    v48[0] = 0;
    v48[1] = 0;
    v47.__r_.__value_.__r.__words[2] = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v47.__r_.__value_.__r.__words[2], *((const void **)v30 + 9), *((_QWORD *)v30 + 10), (uint64_t)(*((_QWORD *)v30 + 10) - *((_QWORD *)v30 + 9)) >> 2);
    if (v47.__r_.__value_.__r.__words[2])
    {
      v48[0] = *((_QWORD *)&v47.__r_.__value_.__l + 2);
      operator delete((void *)v47.__r_.__value_.__r.__words[2]);
    }
  }
  v31 = *(_DWORD *)(a1 + 280);
  if (v31 <= 4 && ((1 << v31) & 0x16) != 0)
  {
    LOBYTE(v53) = 1;
LABEL_33:
    v32 = "Success";
    goto LABEL_34;
  }
  if (!v31 && *(_BYTE *)(*(_QWORD *)a3[6] + 224 * a3[9] + 104))
  {
    LOBYTE(v53) = 1;
    goto LABEL_33;
  }
  LOBYTE(v53) = 0;
  v32 = "Destination compute_path has to be among FP16, Int8 and Uint8";
LABEL_34:
  std::string::basic_string[abi:ne180100]<0>(v54, v32);
  v33 = v53;
  if (!(_BYTE)v53)
  {
    v38 = *(std::__shared_weak_count **)(a2 + 8);
    v51 = *(int64x2_t **)a2;
    v52 = v38;
    if (v38)
    {
      v39 = (unint64_t *)&v38->__shared_owners_;
      do
        v40 = __ldxr(v39);
      while (__stxr(v40 + 1, v39));
    }
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v47, (__int128 *)v54, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v51, (Espresso::base_kernel::validate_for_engine_warning_t *)&v47);
    v41 = v50;
    if (v50)
    {
      v42 = (unint64_t *)&v50->__shared_owners_;
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }
    v75 = (void **)&v49;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v75);
    v75 = (void **)v48;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v75);
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v47.__r_.__value_.__l.__data_);
    v44 = v52;
    if (v52)
    {
      v45 = (unint64_t *)&v52->__shared_owners_;
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
    }
  }
  if (v55 < 0)
    operator delete(v54[0]);
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v56.__r_.__value_.__l.__data_);
  v34 = v74;
  if (v74)
  {
    v35 = (unint64_t *)&v74->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  return v33 != 0;
}

void sub_1913A5CD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45)
{
  uint64_t v45;

  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)&a9);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  if (a31 < 0)
    operator delete(__p);
  if (a37 < 0)
    operator delete(a32);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v45 - 72);
  _Unwind_Resume(a1);
}

const char *Espresso::generic_cast_kernel::kernel_type_str(Espresso::generic_cast_kernel *this)
{
  return "cast";
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::cast_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

void Espresso::ANECompilerEngine::cast_kernel::compile(Espresso::ANECompilerEngine::cast_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
  Espresso::throw_exception_selector<Espresso::invalid_state_error>("Cast kernel should have been removed during transformation");
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::cast_kernel::compile(Espresso::ANECompilerEngine::cast_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
  Espresso::throw_exception_selector<Espresso::invalid_state_error>("Cast kernel should have been removed during transformation");
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::cast_kernel::~cast_kernel(void **this)
{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 36);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
}

{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 36);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANECompilerEngine::tile_kernel::~tile_kernel(void **this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 38);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 38);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANECompilerEngine::tile_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob((_QWORD *)(a1 + 304), a3, a4, a5);
}

uint64_t Espresso::ANECompilerEngine::tile_kernel::is_valid_for_engine(uint64_t a1, int64x2_t **a2, uint64_t a3)
{
  int64x2_t *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  __int128 *v16;
  int64x2_t *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  void **v24;
  void **v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  __int128 v29;
  const void *v30;
  void *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  char v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  void *v54[2];
  char v55;
  int64x2_t *v56;
  std::__shared_weak_count *v57;
  int64x2_t *v58;
  std::__shared_weak_count *v59;
  __int128 __p;
  uint64_t v61;
  uint64_t v62[4];
  std::__shared_weak_count *v63;
  __int128 v64;
  __int128 v65;
  int v66;
  void **v67;
  void **v68;
  int64x2_t *v69;
  uint64_t v70;
  int64x2_t *v71;
  uint64_t v72;
  void **v73;
  _BYTE v74[32];
  void *v75;
  void *v76;
  _QWORD v77[2];
  __int128 v78;
  std::__shared_weak_count *v79;
  uint64_t v80;

  v80 = *MEMORY[0x1E0C80C00];
  if (*(int *)(a1 + 292) <= 1 && *(int *)(a1 + 296) < 2)
  {
    v16 = *(__int128 **)a3;
    if (*(_QWORD *)(a3 + 8) - *(_QWORD *)a3 < 0x41uLL)
    {
      v65 = *(_OWORD *)(a1 + 280);
      v66 = *(_DWORD *)(a1 + 296);
      std::string::basic_string[abi:ne180100]<0>(v74, "bottom");
      std::string::basic_string[abi:ne180100]<0>(&__p, "top");
      Espresso::ANECompilerEngine::tile_kernel::concat_decomposition((std::string::size_type)&v67, a1 + 8, (int *)&v65, (int *)v16, (uint64_t)v74, (uint64_t)&__p, *(_DWORD *)(a3 + 64));
      if (SHIBYTE(v61) < 0)
        operator delete((void *)__p);
      if ((v74[23] & 0x80000000) != 0)
        operator delete(*(void **)v74);
      v25 = v67;
      v24 = v68;
      if (v67 == v68)
      {
LABEL_66:
        v12 = 1;
      }
      else
      {
        while (1)
        {
          __p = 0uLL;
          v61 = 0;
          std::vector<Espresso::layer_shape>::__init_with_size[abi:ne180100]<Espresso::layer_shape*,Espresso::layer_shape*>(&__p, *(__int128 **)a3, *(__int128 **)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 6);
          memset(v62, 0, 24);
          std::vector<Espresso::layer_shape>::__init_with_size[abi:ne180100]<Espresso::layer_shape*,Espresso::layer_shape*>(v62, *(__int128 **)(a3 + 24), *(__int128 **)(a3 + 32), (uint64_t)(*(_QWORD *)(a3 + 32) - *(_QWORD *)(a3 + 24)) >> 6);
          v26 = *(std::__shared_weak_count **)(a3 + 56);
          v62[3] = *(_QWORD *)(a3 + 48);
          v63 = v26;
          if (v26)
          {
            p_shared_owners = (unint64_t *)&v26->__shared_owners_;
            do
              v28 = __ldxr(p_shared_owners);
            while (__stxr(v28 + 1, p_shared_owners));
          }
          v64 = *(_OWORD *)(a3 + 64);
          if (&__p != (__int128 *)(v25 + 2))
            std::vector<Espresso::layer_shape>::__assign_with_size[abi:ne180100]<Espresso::layer_shape*,Espresso::layer_shape*>((uint64_t *)&__p, (__int128 *)v25[2], (__int128 *)v25[3], ((_BYTE *)v25[3] - (_BYTE *)v25[2]) >> 6);
          v29 = *(_OWORD *)(v25 + 7);
          *(_OWORD *)v74 = *(_OWORD *)(v25 + 5);
          *(_OWORD *)&v74[16] = v29;
          v30 = v25[10];
          v75 = v25[9];
          v77[0] = 0;
          v77[1] = 0;
          v76 = 0;
          std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v76, v30, (uint64_t)v25[11], ((_BYTE *)v25[11] - (_BYTE *)v30) >> 2);
          std::vector<Espresso::layer_shape>::__assign_with_size[abi:ne180100]<Espresso::layer_shape const*,Espresso::layer_shape const*>(v62, (__int128 *)v74, &v78, 1uLL);
          if (v76)
          {
            v77[0] = v76;
            operator delete(v76);
          }
          v31 = *v25;
          v32 = (std::__shared_weak_count *)a2[1];
          v58 = *a2;
          v59 = v32;
          if (v32)
          {
            v33 = (unint64_t *)&v32->__shared_owners_;
            do
              v34 = __ldxr(v33);
            while (__stxr(v34 + 1, v33));
          }
          v35 = (*(uint64_t (**)(void *, int64x2_t **, __int128 *))(*(_QWORD *)v31 + 200))(v31, &v58, &__p);
          v36 = v59;
          if (v59)
          {
            v37 = (unint64_t *)&v59->__shared_owners_;
            do
              v38 = __ldaxr(v37);
            while (__stlxr(v38 - 1, v37));
            if (!v38)
            {
              ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
              std::__shared_weak_count::__release_weak(v36);
            }
          }
          if ((v35 & 1) == 0)
            break;
          v39 = v63;
          if (v63)
          {
            v40 = (unint64_t *)&v63->__shared_owners_;
            do
              v41 = __ldaxr(v40);
            while (__stlxr(v41 - 1, v40));
            if (!v41)
            {
              ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
              std::__shared_weak_count::__release_weak(v39);
            }
          }
          *(_QWORD *)v74 = v62;
          std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v74);
          *(_QWORD *)v74 = &__p;
          std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v74);
          v25 += 19;
          if (v25 == v24)
            goto LABEL_66;
        }
        v42 = (std::__shared_weak_count *)a2[1];
        v56 = *a2;
        v57 = v42;
        if (v42)
        {
          v43 = (unint64_t *)&v42->__shared_owners_;
          do
            v44 = __ldxr(v43);
          while (__stxr(v44 + 1, v43));
        }
        std::string::basic_string[abi:ne180100]<0>(v54, "tile_kernel: decomposition error ^");
        Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t((std::string *)v74, (__int128 *)v54, a3, 0);
        Espresso::emit_kernel_validation_warning(&v56, (Espresso::base_kernel::validate_for_engine_warning_t *)v74);
        v45 = v79;
        if (v79)
        {
          v46 = (unint64_t *)&v79->__shared_owners_;
          do
            v47 = __ldaxr(v46);
          while (__stlxr(v47 - 1, v46));
          if (!v47)
          {
            ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
            std::__shared_weak_count::__release_weak(v45);
          }
        }
        v73 = (void **)v77;
        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v73);
        v73 = (void **)&v74[24];
        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v73);
        if ((v74[23] & 0x80000000) != 0)
          operator delete(*(void **)v74);
        if (v55 < 0)
          operator delete(v54[0]);
        v48 = v57;
        if (v57)
        {
          v49 = (unint64_t *)&v57->__shared_owners_;
          do
            v50 = __ldaxr(v49);
          while (__stlxr(v50 - 1, v49));
          if (!v50)
          {
            ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
            std::__shared_weak_count::__release_weak(v48);
          }
        }
        v51 = v63;
        if (v63)
        {
          v52 = (unint64_t *)&v63->__shared_owners_;
          do
            v53 = __ldaxr(v52);
          while (__stlxr(v53 - 1, v52));
          if (!v53)
          {
            ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
            std::__shared_weak_count::__release_weak(v51);
          }
        }
        *(_QWORD *)v74 = v62;
        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v74);
        *(_QWORD *)v74 = &__p;
        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v74);
        v12 = 0;
      }
      *(_QWORD *)v74 = &v67;
      std::vector<Espresso::ANECompilerEngine::decomposition_node>::__destroy_vector::operator()[abi:ne180100]((void ***)v74);
    }
    else
    {
      v17 = a2[1];
      v69 = *a2;
      v70 = (uint64_t)v17;
      if (v17)
      {
        v18 = &v17->u64[1];
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 1, v18));
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "tile_kernel: dynamic tile not supported");
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t((std::string *)v74, &__p, a3, 0);
      Espresso::emit_kernel_validation_warning(&v69, (Espresso::base_kernel::validate_for_engine_warning_t *)v74);
      v20 = v79;
      if (v79)
      {
        v21 = (unint64_t *)&v79->__shared_owners_;
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      v67 = (void **)v77;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v67);
      v67 = (void **)&v74[24];
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v67);
      if ((v74[23] & 0x80000000) != 0)
        operator delete(*(void **)v74);
      if (SHIBYTE(v61) < 0)
        operator delete((void *)__p);
      v12 = v70;
      if (v70)
      {
        v23 = (unint64_t *)(v70 + 8);
        do
          v14 = __ldaxr(v23);
        while (__stlxr(v14 - 1, v23));
        goto LABEL_18;
      }
    }
  }
  else
  {
    v6 = a2[1];
    v71 = *a2;
    v72 = (uint64_t)v6;
    if (v6)
    {
      v7 = &v6->u64[1];
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "tile_kernel: tiling not supported");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t((std::string *)v74, &__p, a3, 0);
    Espresso::emit_kernel_validation_warning(&v71, (Espresso::base_kernel::validate_for_engine_warning_t *)v74);
    v9 = v79;
    if (v79)
    {
      v10 = (unint64_t *)&v79->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v67 = (void **)v77;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v67);
    v67 = (void **)&v74[24];
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v67);
    if ((v74[23] & 0x80000000) != 0)
      operator delete(*(void **)v74);
    if (SHIBYTE(v61) < 0)
      operator delete((void *)__p);
    v12 = v72;
    if (v72)
    {
      v13 = (unint64_t *)(v72 + 8);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
LABEL_18:
      if (!v14)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v12);
      }
      return 0;
    }
  }
  return v12;
}

void sub_1913A6504(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,char a42)
{
  uint64_t v42;

  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)(v42 - 224));
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  Espresso::base_kernel::validate_for_engine_args_t::~validate_for_engine_args_t(&a20);
  *(_QWORD *)(v42 - 224) = &a37;
  std::vector<Espresso::ANECompilerEngine::decomposition_node>::__destroy_vector::operator()[abi:ne180100]((void ***)(v42 - 224));
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::tile_kernel::compile(Espresso::ANECompilerEngine::tile_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
  Espresso::throw_exception_selector<Espresso::invalid_state_error>("tile_kernel should have been transformed to concats");
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::tile_kernel::compile(Espresso::ANECompilerEngine::tile_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
  Espresso::throw_exception_selector<Espresso::invalid_state_error>("tile_kernel should have been transformed to concats");
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::tile_kernel::~tile_kernel(void **this)
{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 38);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
}

{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 38);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANECompilerEngine::tile_kernel::concat_decomposition(std::string::size_type a1, uint64_t a2, int *a3, int *a4, uint64_t a5, uint64_t a6, int a7)
{
  int v12;
  int v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *begin;
  unint64_t *p_size;
  unint64_t v22;
  std::__shared_weak_count *size;
  unint64_t *v24;
  unint64_t v25;
  int v26;
  int v28;
  BOOL v29;
  int v30;
  int v31;
  BOOL v32;
  int v33;
  int v34;
  int v35;
  int v36;
  __int128 v37;
  const void *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  int v44;
  __int128 v45;
  size_t v46;
  void *first;
  const void *v48;
  std::string *v49;
  std::string::size_type v50;
  std::string *v51;
  __int128 v52;
  uint64_t v53;
  __int128 v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::string *v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  std::string *v69;
  std::string *v70;
  uint64_t v71;
  std::string *v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  std::string *v82;
  std::string *v83;
  uint64_t v84;
  std::string *v85;
  unint64_t v86;
  __int128 v87;
  __int128 v88;
  unint64_t v89;
  void *v90;
  unint64_t v91;
  unint64_t v92;
  __int128 v93;
  __int128 v94;
  std::string::size_type v95;
  __int128 v96;
  unint64_t v97;
  unint64_t v98;
  std::__split_buffer<std::string>::pointer end;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  std::string *v104;
  std::__split_buffer<std::string>::pointer v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  __int128 v111;
  uint64_t v112;
  __int128 v113;
  int64x2_t v114;
  std::string *v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  __int128 v119;
  const void *v120;
  __int128 v121;
  char *v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  int v129;
  int v130;
  int v131;
  int v132;
  int v133;
  unsigned int v134;
  __int128 v135;
  uint64_t v136;
  __int128 v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  __int128 v147;
  const void *v148;
  uint64_t v149;
  __int128 v150;
  char *v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  unint64_t *v155;
  int v157;
  uint64_t v158;
  std::__shared_weak_count *v159;
  int v160;
  __int16 v161;
  std::string v162;
  std::string __str;
  std::string v164;
  __int128 v165;
  _BYTE v166[64];
  __int128 v167;
  uint64_t v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  int v172;
  std::__split_buffer<std::string> v173;
  unint64_t v174;
  std::__shared_weak_count *v175;
  unint64_t v176;
  _BYTE v177[32];
  std::string::size_type v178;
  _BYTE *v179;
  _BYTE *v180;
  uint64_t v181;
  __int128 v182;
  void *v183;
  void *v184;
  _BYTE v185[24];
  void *v186;
  char v187;
  _QWORD v188[3];

  v188[0] = *MEMORY[0x1E0C80C00];
  v172 = a7;
  v12 = *a3;
  if (*a3 == 1)
  {
    v13 = a3[1];
    if (v13 == 1 && a3[2] == 1)
    {
      LODWORD(v174) = 0;
      v168 = 0;
      *(_OWORD *)&v166[48] = 0u;
      v167 = 0u;
      v165 = 0u;
      memset(v166, 0, 28);
      *(_QWORD *)&v14 = 0x100000001;
      *((_QWORD *)&v14 + 1) = 0x100000001;
      *(_OWORD *)&v166[28] = v14;
      *(_DWORD *)&v166[44] = -1;
      v169 = 0u;
      v170 = 0u;
      v171 = 0u;
      Espresso::abstract_engine_factory::shared(&v164);
      v15 = v164.__r_.__value_.__r.__words[0];
      std::string::basic_string[abi:ne180100]<0>(v177, "copy");
      LODWORD(__str.__r_.__value_.__l.__data_) = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a2 + 8))(*(_QWORD *)(*(_QWORD *)a2 + 8));
      Espresso::abstract_engine_factory::make_kernel_priv(v15, a2, (uint64_t)v177, (uint64_t)&v174, (int *)&__str);
      v16 = *(_OWORD *)&v173.__first_;
      *(_OWORD *)&v173.__first_ = 0uLL;
      v17 = (std::__shared_weak_count *)*((_QWORD *)&v165 + 1);
      v165 = v16;
      if (v17)
      {
        p_shared_owners = (unint64_t *)&v17->__shared_owners_;
        do
          v19 = __ldaxr(p_shared_owners);
        while (__stlxr(v19 - 1, p_shared_owners));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      begin = (std::__shared_weak_count *)v173.__begin_;
      if (v173.__begin_)
      {
        p_size = &v173.__begin_->__r_.__value_.__l.__size_;
        do
          v22 = __ldaxr(p_size);
        while (__stlxr(v22 - 1, p_size));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))begin->__on_zero_shared)(begin);
          std::__shared_weak_count::__release_weak(begin);
        }
      }
      if ((v177[23] & 0x80000000) != 0)
        operator delete(*(void **)v177);
      size = (std::__shared_weak_count *)v164.__r_.__value_.__l.__size_;
      if (v164.__r_.__value_.__l.__size_)
      {
        v24 = (unint64_t *)(v164.__r_.__value_.__l.__size_ + 8);
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
      if (*(char *)(a5 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v177, *(const std::string::value_type **)a5, *(_QWORD *)(a5 + 8));
      }
      else
      {
        *(_OWORD *)v177 = *(_OWORD *)a5;
        *(_QWORD *)&v177[16] = *(_QWORD *)(a5 + 16);
      }
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>((std::vector<std::string> *)&v169, (std::string *)v177, (__int128 *)&v177[24], 1uLL);
      if ((v177[23] & 0x80000000) != 0)
        operator delete(*(void **)v177);
      v119 = *((_OWORD *)a4 + 1);
      *(_OWORD *)v177 = *(_OWORD *)a4;
      *(_OWORD *)&v177[16] = v119;
      v120 = (const void *)*((_QWORD *)a4 + 5);
      v178 = *((_QWORD *)a4 + 4);
      v179 = 0;
      v180 = 0;
      v181 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v179, v120, *((_QWORD *)a4 + 6), (uint64_t)(*((_QWORD *)a4 + 6) - (_QWORD)v120) >> 2);
      std::vector<Espresso::layer_shape>::__assign_with_size[abi:ne180100]<Espresso::layer_shape const*,Espresso::layer_shape const*>((uint64_t *)v166, (__int128 *)v177, &v182, 1uLL);
      if (v179)
      {
        v180 = v179;
        operator delete(v179);
      }
      std::string::operator=((std::string *)((char *)&v170 + 8), (const std::string *)a6);
      v121 = *((_OWORD *)a4 + 1);
      *(_OWORD *)&v166[24] = *(_OWORD *)a4;
      *(_OWORD *)&v166[40] = v121;
      *(_QWORD *)&v166[56] = *((_QWORD *)a4 + 4);
      if (&v166[24] != (_BYTE *)a4)
        std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)&v167, *((char **)a4 + 5), *((_QWORD *)a4 + 6), (uint64_t)(*((_QWORD *)a4 + 6) - *((_QWORD *)a4 + 5)) >> 2);
      Espresso::ANECompilerEngine::decomposition_node::decomposition_node((uint64_t)v177, (uint64_t)&v165);
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      v173.__first_ = (std::__split_buffer<std::string>::pointer)a1;
      LOBYTE(v173.__begin_) = 0;
      v122 = (char *)operator new(0x98uLL);
      *(_QWORD *)a1 = v122;
      *(_QWORD *)(a1 + 8) = v122;
      *(_QWORD *)(a1 + 16) = v122 + 152;
      *(_QWORD *)(a1 + 8) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::decomposition_node>,Espresso::ANECompilerEngine::decomposition_node const*,Espresso::ANECompilerEngine::decomposition_node const*,Espresso::ANECompilerEngine::decomposition_node*>(a1 + 16, (uint64_t)v177, (uint64_t)v188, (uint64_t)v122);
      if (v187 < 0)
        operator delete(v186);
      v173.__first_ = (std::__split_buffer<std::string>::pointer)v185;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v173);
      if (v183)
      {
        v184 = v183;
        operator delete(v183);
      }
      v173.__first_ = (std::__split_buffer<std::string>::pointer)&v177[16];
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v173);
      v123 = *(std::__shared_weak_count **)&v177[8];
      if (*(_QWORD *)&v177[8])
      {
        v124 = (unint64_t *)(*(_QWORD *)&v177[8] + 8);
        do
          v125 = __ldaxr(v124);
        while (__stlxr(v125 - 1, v124));
        if (!v125)
        {
          ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
          std::__shared_weak_count::__release_weak(v123);
        }
      }
      if (SHIBYTE(v171) < 0)
        operator delete(*((void **)&v170 + 1));
      *(_QWORD *)v177 = &v169;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v177);
      if ((_QWORD)v167)
      {
        *((_QWORD *)&v167 + 1) = v167;
        operator delete((void *)v167);
      }
      *(_QWORD *)v177 = v166;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v177);
      v126 = (std::__shared_weak_count *)*((_QWORD *)&v165 + 1);
      if (!*((_QWORD *)&v165 + 1))
        return;
      v127 = (unint64_t *)(*((_QWORD *)&v165 + 1) + 8);
      do
        v128 = __ldaxr(v127);
      while (__stlxr(v128 - 1, v127));
LABEL_247:
      if (!v128)
      {
        ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
        std::__shared_weak_count::__release_weak(v126);
      }
      return;
    }
    v26 = *a4;
  }
  else
  {
    v26 = *a4;
    if (v12 >= 2 && v26 != 1)
      goto LABEL_44;
    v13 = a3[1];
  }
  v28 = a4[1];
  v29 = v13 < 2 || v28 == 1;
  if (!v29
    || ((v30 = a3[2], v31 = a4[2], v30 >= 2) ? (v32 = v31 == 1) : (v32 = 1),
        !v32 || (v33 = a3[3], v34 = a4[3], v33 >= 2) && v34 != 1 || (v35 = a3[4], v36 = a4[4], v35 >= 2) && v36 != 1))
  {
LABEL_44:
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    if (*(char *)(a5 + 23) < 0)
      std::string::__init_copy_ctor_external(&v164, *(const std::string::value_type **)a5, *(_QWORD *)(a5 + 8));
    else
      v164 = *(std::string *)a5;
    v37 = *((_OWORD *)a4 + 1);
    *(_OWORD *)v177 = *(_OWORD *)a4;
    *(_OWORD *)&v177[16] = v37;
    v38 = (const void *)*((_QWORD *)a4 + 5);
    v178 = *((_QWORD *)a4 + 4);
    v179 = 0;
    v180 = 0;
    v181 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v179, v38, *((_QWORD *)a4 + 6), (uint64_t)(*((_QWORD *)a4 + 6) - (_QWORD)v38) >> 2);
    v39 = 0;
    v40 = ((unint64_t)a3[1] << 32) | 1;
    v41 = ((unint64_t)a3[2] << 32) | 2;
    v174 = (unint64_t)*a3 << 32;
    v175 = (std::__shared_weak_count *)v40;
    v176 = v41;
    while (1)
    {
      v42 = &v174 + v39;
      v43 = *((unsigned int *)v42 + 1);
      if ((int)v43 >= 2)
        break;
LABEL_163:
      if (++v39 == 3)
      {
        std::string::operator=((std::string *)(*(_QWORD *)(a1 + 8) - 24), (const std::string *)a6);
        if (v179)
        {
          v180 = v179;
          operator delete(v179);
        }
        if (SHIBYTE(v164.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v164.__r_.__value_.__l.__data_);
        return;
      }
    }
    v44 = *(_DWORD *)v42;
    v168 = 0;
    *(_OWORD *)&v166[48] = 0u;
    v167 = 0u;
    v165 = 0u;
    memset(v166, 0, 28);
    *(_QWORD *)&v45 = 0x100000001;
    *((_QWORD *)&v45 + 1) = 0x100000001;
    *(_OWORD *)&v166[28] = v45;
    *(_DWORD *)&v166[44] = -1;
    v169 = 0u;
    v170 = 0u;
    v171 = 0u;
    if (*(char *)(a6 + 23) >= 0)
      v46 = *(unsigned __int8 *)(a6 + 23);
    else
      v46 = *(_QWORD *)(a6 + 8);
    std::string::basic_string[abi:ne180100]((uint64_t)&v173, v46 + 7);
    if (SHIBYTE(v173.__end_) >= 0)
      first = &v173;
    else
      first = v173.__first_;
    if (v46)
    {
      if (*(char *)(a6 + 23) >= 0)
        v48 = (const void *)a6;
      else
        v48 = *(const void **)a6;
      memmove(first, v48, v46);
    }
    strcpy((char *)first + v46, "__@axis");
    std::to_string(&v162, v44);
    if ((v162.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v49 = &v162;
    else
      v49 = (std::string *)v162.__r_.__value_.__r.__words[0];
    if ((v162.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v50 = HIBYTE(v162.__r_.__value_.__r.__words[2]);
    else
      v50 = v162.__r_.__value_.__l.__size_;
    v51 = std::string::append((std::string *)&v173, (const std::string::value_type *)v49, v50);
    v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v51->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v52;
    v51->__r_.__value_.__l.__size_ = 0;
    v51->__r_.__value_.__r.__words[2] = 0;
    v51->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v162.__r_.__value_.__l.__data_);
    if (SHIBYTE(v173.__end_) < 0)
      operator delete(v173.__first_);
    v161 = 0;
    v160 = v44;
    Espresso::abstract_engine_factory::shared(&v158);
    v53 = v158;
    std::string::basic_string[abi:ne180100]<0>(&v173, "general_concat");
    v157 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a2 + 8))(*(_QWORD *)(*(_QWORD *)a2 + 8));
    Espresso::abstract_engine_factory::make_kernel_priv(v53, a2, (uint64_t)&v173, (uint64_t)&v160, &v157);
    v54 = *(_OWORD *)&v162.__r_.__value_.__l.__data_;
    *(_OWORD *)&v162.__r_.__value_.__l.__data_ = 0uLL;
    v55 = (std::__shared_weak_count *)*((_QWORD *)&v165 + 1);
    v165 = v54;
    if (v55)
    {
      v56 = (unint64_t *)&v55->__shared_owners_;
      do
        v57 = __ldaxr(v56);
      while (__stlxr(v57 - 1, v56));
      if (!v57)
      {
        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
        std::__shared_weak_count::__release_weak(v55);
      }
    }
    v58 = (std::__shared_weak_count *)v162.__r_.__value_.__l.__size_;
    if (v162.__r_.__value_.__l.__size_)
    {
      v59 = (unint64_t *)(v162.__r_.__value_.__l.__size_ + 8);
      do
        v60 = __ldaxr(v59);
      while (__stlxr(v60 - 1, v59));
      if (!v60)
      {
        ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
        std::__shared_weak_count::__release_weak(v58);
      }
    }
    if (SHIBYTE(v173.__end_) < 0)
      operator delete(v173.__first_);
    v61 = v159;
    if (v159)
    {
      v62 = (unint64_t *)&v159->__shared_owners_;
      do
        v63 = __ldaxr(v62);
      while (__stlxr(v63 - 1, v62));
      if (!v63)
      {
        ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
        std::__shared_weak_count::__release_weak(v61);
      }
    }
    v64 = (std::string *)*((_QWORD *)&v169 + 1);
    v65 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v169 + 1) - v169) >> 3);
    v66 = v43 - v65;
    if (v43 <= v65)
    {
      if (v43 >= v65)
      {
LABEL_112:
        v78 = *(_QWORD *)&v166[8];
        v79 = (uint64_t)(*(_QWORD *)&v166[8] - *(_QWORD *)v166) >> 6;
        if (v43 <= v79)
        {
          if (v43 < v79)
          {
            v89 = *(_QWORD *)v166 + (v43 << 6);
            while (v78 != v89)
            {
              v90 = *(void **)(v78 - 24);
              if (v90)
              {
                *(_QWORD *)(v78 - 16) = v90;
                operator delete(v90);
              }
              v78 -= 64;
            }
            *(_QWORD *)&v166[8] = v89;
          }
        }
        else if (v43 - v79 <= (uint64_t)(*(_QWORD *)&v166[16] - *(_QWORD *)&v166[8]) >> 6)
        {
          v91 = *(_QWORD *)&v166[8] + ((v43 - v79) << 6);
          v92 = (v43 << 6) - (v79 << 6);
          do
          {
            v93 = *(_OWORD *)v177;
            v94 = *(_OWORD *)&v177[16];
            *(_QWORD *)(v78 + 32) = v178;
            *(_OWORD *)v78 = v93;
            *(_OWORD *)(v78 + 16) = v94;
            *(_QWORD *)(v78 + 48) = 0;
            *(_QWORD *)(v78 + 56) = 0;
            *(_QWORD *)(v78 + 40) = 0;
            std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((_QWORD *)(v78 + 40), v179, (uint64_t)v180, (v180 - v179) >> 2);
            v78 += 64;
            v92 -= 64;
          }
          while (v92);
          *(_QWORD *)&v166[8] = v91;
        }
        else
        {
          v173.__end_cap_.__value_ = (std::allocator<std::string> *)&v166[16];
          v80 = (uint64_t)(*(_QWORD *)&v166[16] - *(_QWORD *)v166) >> 5;
          if (v80 <= v43)
            v80 = v43;
          if (*(_QWORD *)&v166[16] - *(_QWORD *)v166 >= 0x7FFFFFFFFFFFFFC0uLL)
            v81 = 0x3FFFFFFFFFFFFFFLL;
          else
            v81 = v80;
          v82 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::layer_shape>>(v81);
          v83 = (std::string *)((char *)v82 + 64 * v79);
          v173.__first_ = v82;
          v173.__begin_ = v83;
          v173.__end_ = v83;
          v173.__end_cap_.__value_ = (std::string *)((char *)v82 + 64 * v84);
          v85 = (std::string *)((char *)v82 + 64 * v43);
          v86 = (v43 << 6) - (v79 << 6);
          do
          {
            v87 = *(_OWORD *)v177;
            v88 = *(_OWORD *)&v177[16];
            v83[1].__r_.__value_.__l.__size_ = v178;
            *(_OWORD *)&v83->__r_.__value_.__l.__data_ = v87;
            *(_OWORD *)&v83->__r_.__value_.__r.__words[2] = v88;
            v83[2].__r_.__value_.__r.__words[0] = 0;
            v83[2].__r_.__value_.__l.__size_ = 0;
            v83[1].__r_.__value_.__r.__words[2] = 0;
            std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v83[1].__r_.__value_.__r.__words[2], v179, (uint64_t)v180, (v180 - v179) >> 2);
            v83 = (std::string *)((char *)v83 + 64);
            v86 -= 64;
          }
          while (v86);
          v173.__end_ = v85;
          std::vector<Espresso::layer_shape>::__swap_out_circular_buffer((uint64_t *)v166, &v173);
          std::__split_buffer<Espresso::layer_shape>::~__split_buffer((uint64_t)&v173);
        }
        std::string::operator=((std::string *)((char *)&v170 + 8), &__str);
        (*(void (**)(std::__split_buffer<std::string> *__return_ptr, _QWORD, _BYTE *))(*(_QWORD *)v165 + 64))(&v173, v165, v166);
        v95 = v173.__first_[1].__r_.__value_.__l.__size_;
        v96 = *(_OWORD *)&v173.__first_->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v166[24] = *(_OWORD *)&v173.__first_->__r_.__value_.__l.__data_;
        *(_OWORD *)&v166[40] = v96;
        *(_QWORD *)&v166[56] = v95;
        if (&v166[24] != (_BYTE *)v173.__first_)
          std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)&v167, (char *)v173.__first_[1].__r_.__value_.__r.__words[2], (uint64_t)v173.__first_[2].__r_.__value_.__l.__data_, (uint64_t)(v173.__first_[2].__r_.__value_.__r.__words[0] - v173.__first_[1].__r_.__value_.__r.__words[2]) >> 2);
        v162.__r_.__value_.__r.__words[0] = (std::string::size_type)&v173;
        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v162);
        v98 = *(_QWORD *)(a1 + 8);
        v97 = *(_QWORD *)(a1 + 16);
        if (v98 >= v97)
        {
          v100 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v98 - *(_QWORD *)a1) >> 3);
          v101 = v100 + 1;
          if (v100 + 1 > 0x1AF286BCA1AF286)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v102 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v97 - *(_QWORD *)a1) >> 3);
          if (2 * v102 > v101)
            v101 = 2 * v102;
          if (v102 >= 0xD79435E50D7943)
            v103 = 0x1AF286BCA1AF286;
          else
            v103 = v101;
          v173.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 16);
          if (v103)
          {
            if (v103 > 0x1AF286BCA1AF286)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v104 = (std::string *)operator new(152 * v103);
          }
          else
          {
            v104 = 0;
          }
          v173.__first_ = v104;
          v173.__begin_ = (std::string *)((char *)v104 + 152 * v100);
          v173.__end_ = v173.__begin_;
          v173.__end_cap_.__value_ = (std::string *)((char *)v104 + 152 * v103);
          Espresso::ANECompilerEngine::decomposition_node::decomposition_node((uint64_t)v173.__begin_, (uint64_t)&v165);
          v105 = v173.__begin_;
          end = (std::__split_buffer<std::string>::pointer)((char *)v173.__end_ + 152);
          v173.__end_ = (std::__split_buffer<std::string>::pointer)((char *)v173.__end_ + 152);
          v107 = *(_QWORD *)a1;
          v106 = *(_QWORD *)(a1 + 8);
          if (v106 == *(_QWORD *)a1)
          {
            v114 = vdupq_n_s64(v106);
          }
          else
          {
            v108 = 0;
            do
            {
              v109 = (char *)v105 + v108;
              v110 = v106 + v108;
              *(_OWORD *)(v109 - 152) = *(_OWORD *)(v106 + v108 - 152);
              *(_QWORD *)(v110 - 152) = 0;
              *(_QWORD *)(v110 - 144) = 0;
              *((_QWORD *)v109 - 17) = 0;
              *((_QWORD *)v109 - 16) = 0;
              *((_QWORD *)v109 - 15) = 0;
              *(_OWORD *)(v109 - 136) = *(_OWORD *)(v106 + v108 - 136);
              *((_QWORD *)v109 - 15) = *(_QWORD *)(v106 + v108 - 120);
              *(_QWORD *)(v110 - 136) = 0;
              *(_QWORD *)(v110 - 128) = 0;
              *(_QWORD *)(v110 - 120) = 0;
              v111 = *(_OWORD *)(v106 + v108 - 96);
              v112 = *(_QWORD *)(v106 + v108 - 80);
              *((_OWORD *)v109 - 7) = *(_OWORD *)(v106 + v108 - 112);
              *((_OWORD *)v109 - 6) = v111;
              *((_QWORD *)v109 - 10) = v112;
              *((_QWORD *)v109 - 9) = 0;
              *((_QWORD *)v109 - 8) = 0;
              *((_QWORD *)v109 - 7) = 0;
              *(_OWORD *)(v109 - 72) = *(_OWORD *)(v106 + v108 - 72);
              *((_QWORD *)v109 - 7) = *(_QWORD *)(v106 + v108 - 56);
              *(_QWORD *)(v110 - 72) = 0;
              *(_QWORD *)(v110 - 64) = 0;
              *(_QWORD *)(v110 - 56) = 0;
              *((_QWORD *)v109 - 6) = 0;
              *((_QWORD *)v109 - 5) = 0;
              *((_QWORD *)v109 - 4) = 0;
              *((_OWORD *)v109 - 3) = *(_OWORD *)(v106 + v108 - 48);
              *((_QWORD *)v109 - 4) = *(_QWORD *)(v106 + v108 - 32);
              *(_QWORD *)(v110 - 48) = 0;
              *(_QWORD *)(v110 - 40) = 0;
              *(_QWORD *)(v110 - 32) = 0;
              v113 = *(_OWORD *)(v106 + v108 - 24);
              *((_QWORD *)v109 - 1) = *(_QWORD *)(v106 + v108 - 8);
              *(_OWORD *)(v109 - 24) = v113;
              *(_QWORD *)(v110 - 16) = 0;
              *(_QWORD *)(v110 - 8) = 0;
              *(_QWORD *)(v110 - 24) = 0;
              v108 -= 152;
            }
            while (v106 + v108 != v107);
            v105 = (std::__split_buffer<std::string>::pointer)((char *)v105 + v108);
            v114 = *(int64x2_t *)a1;
            end = v173.__end_;
          }
          *(_QWORD *)a1 = v105;
          *(_QWORD *)(a1 + 8) = end;
          *(int64x2_t *)&v173.__begin_ = v114;
          v115 = *(std::string **)(a1 + 16);
          *(_QWORD *)(a1 + 16) = v173.__end_cap_.__value_;
          v173.__end_cap_.__value_ = v115;
          v173.__first_ = (std::__split_buffer<std::string>::pointer)v114.i64[0];
          std::__split_buffer<Espresso::ANECompilerEngine::decomposition_node>::~__split_buffer((uint64_t)&v173);
        }
        else
        {
          Espresso::ANECompilerEngine::decomposition_node::decomposition_node(*(_QWORD *)(a1 + 8), (uint64_t)&v165);
          end = (std::__split_buffer<std::string>::pointer)(v98 + 152);
          *(_QWORD *)(a1 + 8) = v98 + 152;
        }
        *(_QWORD *)(a1 + 8) = end;
        std::string::operator=(&v164, &__str);
        *(_OWORD *)v177 = *(_OWORD *)&v166[24];
        *(_OWORD *)&v177[16] = *(_OWORD *)&v166[40];
        v178 = *(_QWORD *)&v166[56];
        std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)&v179, (char *)v167, *((uint64_t *)&v167 + 1), (uint64_t)(*((_QWORD *)&v167 + 1) - v167) >> 2);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        if (SHIBYTE(v171) < 0)
          operator delete(*((void **)&v170 + 1));
        v173.__first_ = (std::__split_buffer<std::string>::pointer)&v169;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v173);
        if ((_QWORD)v167)
        {
          *((_QWORD *)&v167 + 1) = v167;
          operator delete((void *)v167);
        }
        v173.__first_ = (std::__split_buffer<std::string>::pointer)v166;
        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v173);
        v116 = (std::__shared_weak_count *)*((_QWORD *)&v165 + 1);
        if (*((_QWORD *)&v165 + 1))
        {
          v117 = (unint64_t *)(*((_QWORD *)&v165 + 1) + 8);
          do
            v118 = __ldaxr(v117);
          while (__stlxr(v118 - 1, v117));
          if (!v118)
          {
            ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
            std::__shared_weak_count::__release_weak(v116);
          }
        }
        goto LABEL_163;
      }
      v75 = v169 + 24 * v43;
      while (v64 != (std::string *)v75)
      {
        if (SHIBYTE(v64[-1].__r_.__value_.__r.__words[2]) < 0)
          operator delete(v64[-1].__r_.__value_.__l.__data_);
        --v64;
      }
    }
    else
    {
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v170 - *((_QWORD *)&v169 + 1)) >> 3) < v66)
      {
        v173.__end_cap_.__value_ = (std::allocator<std::string> *)&v170;
        v67 = 0x5555555555555556 * ((uint64_t)(v170 - v169) >> 3);
        if (v67 <= v43)
          v67 = v43;
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v170 - v169) >> 3) >= 0x555555555555555)
          v68 = 0xAAAAAAAAAAAAAAALL;
        else
          v68 = v67;
        v69 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v68);
        v70 = v69 + v65;
        v173.__first_ = v69;
        v173.__begin_ = v70;
        v173.__end_ = v70;
        v173.__end_cap_.__value_ = &v69[v71];
        v72 = &v69[v43];
        v73 = 24 * v43 - 24 * v65;
        do
        {
          if (SHIBYTE(v164.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(v70, v164.__r_.__value_.__l.__data_, v164.__r_.__value_.__l.__size_);
          }
          else
          {
            v74 = *(_OWORD *)&v164.__r_.__value_.__l.__data_;
            v70->__r_.__value_.__r.__words[2] = v164.__r_.__value_.__r.__words[2];
            *(_OWORD *)&v70->__r_.__value_.__l.__data_ = v74;
          }
          ++v70;
          v73 -= 24;
        }
        while (v73);
        v173.__end_ = v72;
        std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)&v169, &v173);
        std::__split_buffer<std::string>::~__split_buffer(&v173);
        goto LABEL_112;
      }
      v75 = *((_QWORD *)&v169 + 1) + 24 * v66;
      v76 = 24 * v43 - 8 * ((uint64_t)(*((_QWORD *)&v169 + 1) - v169) >> 3);
      do
      {
        if (SHIBYTE(v164.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(v64, v164.__r_.__value_.__l.__data_, v164.__r_.__value_.__l.__size_);
        }
        else
        {
          v77 = *(_OWORD *)&v164.__r_.__value_.__l.__data_;
          v64->__r_.__value_.__r.__words[2] = v164.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v64->__r_.__value_.__l.__data_ = v77;
        }
        ++v64;
        v76 -= 24;
      }
      while (v76);
    }
    *((_QWORD *)&v169 + 1) = v75;
    goto LABEL_112;
  }
  LOBYTE(v173.__end_cap_.__value_) = 0;
  HIDWORD(v173.__end_cap_.__value_) = 0;
  LOBYTE(v173.__end_cap_.__value_) = 0;
  v129 = v26 * v12;
  if (v12 <= 1)
    v130 = -1;
  else
    v130 = v129;
  if (v13 <= 1)
    v131 = -1;
  else
    v131 = v28 * v13;
  v173.__first_ = (std::__split_buffer<std::string>::pointer)__PAIR64__(v131, v130);
  v132 = v31 * v30;
  if (v30 <= 1)
    v132 = -1;
  v133 = v34 * v33;
  if (v33 <= 1)
    v133 = -1;
  v173.__begin_ = (std::__split_buffer<std::string>::pointer)__PAIR64__(v133, v132);
  v134 = v36 * v35;
  if (v35 <= 1)
    v134 = -1;
  v173.__end_ = (std::__split_buffer<std::string>::pointer)(v134 | 0xFFFFFFFF00000000);
  v168 = 0;
  *(_OWORD *)&v166[48] = 0u;
  v167 = 0u;
  v165 = 0u;
  memset(v166, 0, 28);
  *(_QWORD *)&v135 = 0x100000001;
  *((_QWORD *)&v135 + 1) = 0x100000001;
  *(_OWORD *)&v166[28] = v135;
  *(_DWORD *)&v166[44] = -1;
  v169 = 0u;
  v170 = 0u;
  v171 = 0u;
  Espresso::abstract_engine_factory::shared(&v174);
  v136 = v174;
  std::string::basic_string[abi:ne180100]<0>(v177, "broadcast");
  LODWORD(__str.__r_.__value_.__l.__data_) = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a2 + 8))(*(_QWORD *)(*(_QWORD *)a2 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v136, a2, (uint64_t)v177, (uint64_t)&v173, (int *)&__str);
  v137 = *(_OWORD *)&v164.__r_.__value_.__l.__data_;
  *(_OWORD *)&v164.__r_.__value_.__l.__data_ = 0uLL;
  v138 = (std::__shared_weak_count *)*((_QWORD *)&v165 + 1);
  v165 = v137;
  if (v138)
  {
    v139 = (unint64_t *)&v138->__shared_owners_;
    do
      v140 = __ldaxr(v139);
    while (__stlxr(v140 - 1, v139));
    if (!v140)
    {
      ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
      std::__shared_weak_count::__release_weak(v138);
    }
  }
  v141 = (std::__shared_weak_count *)v164.__r_.__value_.__l.__size_;
  if (v164.__r_.__value_.__l.__size_)
  {
    v142 = (unint64_t *)(v164.__r_.__value_.__l.__size_ + 8);
    do
      v143 = __ldaxr(v142);
    while (__stlxr(v143 - 1, v142));
    if (!v143)
    {
      ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
      std::__shared_weak_count::__release_weak(v141);
    }
  }
  if ((v177[23] & 0x80000000) != 0)
    operator delete(*(void **)v177);
  v144 = v175;
  if (v175)
  {
    v145 = (unint64_t *)&v175->__shared_owners_;
    do
      v146 = __ldaxr(v145);
    while (__stlxr(v146 - 1, v145));
    if (!v146)
    {
      ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
      std::__shared_weak_count::__release_weak(v144);
    }
  }
  if (*(char *)(a5 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)v177, *(const std::string::value_type **)a5, *(_QWORD *)(a5 + 8));
  }
  else
  {
    *(_OWORD *)v177 = *(_OWORD *)a5;
    *(_QWORD *)&v177[16] = *(_QWORD *)(a5 + 16);
  }
  std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>((std::vector<std::string> *)&v169, (std::string *)v177, (__int128 *)&v177[24], 1uLL);
  if ((v177[23] & 0x80000000) != 0)
    operator delete(*(void **)v177);
  v147 = *((_OWORD *)a4 + 1);
  *(_OWORD *)v177 = *(_OWORD *)a4;
  *(_OWORD *)&v177[16] = v147;
  v148 = (const void *)*((_QWORD *)a4 + 5);
  v178 = *((_QWORD *)a4 + 4);
  v179 = 0;
  v180 = 0;
  v181 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v179, v148, *((_QWORD *)a4 + 6), (uint64_t)(*((_QWORD *)a4 + 6) - (_QWORD)v148) >> 2);
  std::vector<Espresso::layer_shape>::__assign_with_size[abi:ne180100]<Espresso::layer_shape const*,Espresso::layer_shape const*>((uint64_t *)v166, (__int128 *)v177, &v182, 1uLL);
  if (v179)
  {
    v180 = v179;
    operator delete(v179);
  }
  std::string::operator=((std::string *)((char *)&v170 + 8), (const std::string *)a6);
  (*(void (**)(_BYTE *__return_ptr, _QWORD, _BYTE *))(*(_QWORD *)v165 + 64))(v177, v165, v166);
  v149 = *(_QWORD *)(*(_QWORD *)v177 + 32);
  v150 = *(_OWORD *)(*(_QWORD *)v177 + 16);
  *(_OWORD *)&v166[24] = **(_OWORD **)v177;
  *(_OWORD *)&v166[40] = v150;
  *(_QWORD *)&v166[56] = v149;
  if (&v166[24] != *(_BYTE **)v177)
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)&v167, *(char **)(*(_QWORD *)v177 + 40), *(_QWORD *)(*(_QWORD *)v177 + 48), (uint64_t)(*(_QWORD *)(*(_QWORD *)v177 + 48) - *(_QWORD *)(*(_QWORD *)v177 + 40)) >> 2);
  v164.__r_.__value_.__r.__words[0] = (std::string::size_type)v177;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v164);
  Espresso::ANECompilerEngine::decomposition_node::decomposition_node((uint64_t)v177, (uint64_t)&v165);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v164.__r_.__value_.__r.__words[0] = a1;
  v164.__r_.__value_.__s.__data_[8] = 0;
  v151 = (char *)operator new(0x98uLL);
  *(_QWORD *)a1 = v151;
  *(_QWORD *)(a1 + 8) = v151;
  *(_QWORD *)(a1 + 16) = v151 + 152;
  *(_QWORD *)(a1 + 8) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::decomposition_node>,Espresso::ANECompilerEngine::decomposition_node const*,Espresso::ANECompilerEngine::decomposition_node const*,Espresso::ANECompilerEngine::decomposition_node*>(a1 + 16, (uint64_t)v177, (uint64_t)v188, (uint64_t)v151);
  if (v187 < 0)
    operator delete(v186);
  v164.__r_.__value_.__r.__words[0] = (std::string::size_type)v185;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v164);
  if (v183)
  {
    v184 = v183;
    operator delete(v183);
  }
  v164.__r_.__value_.__r.__words[0] = (std::string::size_type)&v177[16];
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v164);
  v152 = *(std::__shared_weak_count **)&v177[8];
  if (*(_QWORD *)&v177[8])
  {
    v153 = (unint64_t *)(*(_QWORD *)&v177[8] + 8);
    do
      v154 = __ldaxr(v153);
    while (__stlxr(v154 - 1, v153));
    if (!v154)
    {
      ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
      std::__shared_weak_count::__release_weak(v152);
    }
  }
  if (SHIBYTE(v171) < 0)
    operator delete(*((void **)&v170 + 1));
  *(_QWORD *)v177 = &v169;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v177);
  if ((_QWORD)v167)
  {
    *((_QWORD *)&v167 + 1) = v167;
    operator delete((void *)v167);
  }
  *(_QWORD *)v177 = v166;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v177);
  v126 = (std::__shared_weak_count *)*((_QWORD *)&v165 + 1);
  if (*((_QWORD *)&v165 + 1))
  {
    v155 = (unint64_t *)(*((_QWORD *)&v165 + 1) + 8);
    do
      v128 = __ldaxr(v155);
    while (__stlxr(v128 - 1, v155));
    goto LABEL_247;
  }
}

void sub_1913A787C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,void *__pa,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,std::__split_buffer<std::string> *a56,char a57)
{
  std::allocator<Espresso::ANECompilerEngine::decomposition_node>::destroy[abi:ne180100]((uint64_t)&a44);
  _Unwind_Resume(a1);
}

void std::vector<Espresso::layer_shape>::__assign_with_size[abi:ne180100]<Espresso::layer_shape const*,Espresso::layer_shape const*>(uint64_t *a1, __int128 *a2, __int128 *a3, unint64_t a4)
{
  __int128 *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  void *v16;

  v5 = a2;
  v7 = (uint64_t)(a1 + 2);
  v8 = *a1;
  if (a4 > (a1[2] - *a1) >> 6)
  {
    std::vector<Espresso::layer_shape>::__vdeallocate(a1);
    v9 = a1[2] - *a1;
    v10 = v9 >> 5;
    if ((unint64_t)(v9 >> 5) <= 1)
      v10 = 1;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFC0)
      v11 = 0x3FFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    std::vector<Espresso::layer_shape>::__vallocate[abi:ne180100](a1, v11);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>(v7, v5, a3, a1[1]);
    goto LABEL_10;
  }
  v13 = a1[1];
  if (a4 > (v13 - v8) >> 6)
  {
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a1 + 2), a2, a3, a1[1]);
LABEL_10:
    a1[1] = v12;
    return;
  }
  if (a2 != a3)
  {
    do
    {
      v14 = *v5;
      v15 = v5[1];
      *(_QWORD *)(v8 + 32) = *((_QWORD *)v5 + 4);
      *(_OWORD *)v8 = v14;
      *(_OWORD *)(v8 + 16) = v15;
      if (v5 != (__int128 *)v8)
        std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)(v8 + 40), *((char **)v5 + 5), *((_QWORD *)v5 + 6), (uint64_t)(*((_QWORD *)v5 + 6) - *((_QWORD *)v5 + 5)) >> 2);
      v5 += 4;
      v8 += 64;
    }
    while (v5 != a3);
    v13 = a1[1];
  }
  while (v13 != v8)
  {
    v16 = *(void **)(v13 - 24);
    if (v16)
    {
      *(_QWORD *)(v13 - 16) = v16;
      operator delete(v16);
    }
    v13 -= 64;
  }
  a1[1] = v8;
}

void sub_1913A7BF8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<Espresso::ANECompilerEngine::decomposition_node>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 152;
        std::allocator<Espresso::ANECompilerEngine::decomposition_node>::destroy[abi:ne180100](v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::allocator<Espresso::ANECompilerEngine::decomposition_node>::destroy[abi:ne180100](uint64_t a1)
{
  void *v2;
  void **v4;

  if (*(char *)(a1 + 151) < 0)
    operator delete(*(void **)(a1 + 128));
  v4 = (void **)(a1 + 104);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  v2 = *(void **)(a1 + 80);
  if (v2)
  {
    *(_QWORD *)(a1 + 88) = v2;
    operator delete(v2);
  }
  v4 = (void **)(a1 + 16);
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v4);
  return std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1);
}

uint64_t Espresso::ANECompilerEngine::decomposition_node::decomposition_node(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  std::string *v10;
  __int128 v11;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  std::vector<Espresso::layer_shape>::__init_with_size[abi:ne180100]<Espresso::layer_shape*,Espresso::layer_shape*>((_QWORD *)(a1 + 16), *(__int128 **)(a2 + 16), *(__int128 **)(a2 + 24), (uint64_t)(*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 6);
  v7 = *(_OWORD *)(a2 + 40);
  v8 = *(_OWORD *)(a2 + 56);
  v9 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 72) = v9;
  *(_OWORD *)(a1 + 56) = v8;
  *(_OWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((_QWORD *)(a1 + 80), *(const void **)(a2 + 80), *(_QWORD *)(a2 + 88), (uint64_t)(*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 2);
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((_QWORD *)(a1 + 104), *(_QWORD *)(a2 + 104), *(_QWORD *)(a2 + 112), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 112) - *(_QWORD *)(a2 + 104)) >> 3));
  v10 = (std::string *)(a1 + 128);
  if (*(char *)(a2 + 151) < 0)
  {
    std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)(a2 + 128), *(_QWORD *)(a2 + 136));
  }
  else
  {
    v11 = *(_OWORD *)(a2 + 128);
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
  }
  return a1;
}

void sub_1913A7DF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void **v3;
  void *v5;
  va_list va;

  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v2 + 88) = v5;
    operator delete(v5);
  }
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::decomposition_node>,Espresso::ANECompilerEngine::decomposition_node const*,Espresso::ANECompilerEngine::decomposition_node const*,Espresso::ANECompilerEngine::decomposition_node*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      Espresso::ANECompilerEngine::decomposition_node::decomposition_node(a4 + v7, a2 + v7);
      v7 += 152;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

uint64_t std::__split_buffer<Espresso::ANECompilerEngine::decomposition_node>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 152;
    std::allocator<Espresso::ANECompilerEngine::decomposition_node>::destroy[abi:ne180100](i - 152);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void Espresso::ANECompilerEngine::tunneled_ane_op_kernel::~tunneled_ane_op_kernel(void **this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 70);
  *this = off_1E2D8BB28;
  Espresso::tunneled_ane_op_params_t::~tunneled_ane_op_params_t((Espresso::tunneled_ane_op_params_t *)(this + 35));
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 70);
  *this = off_1E2D8BB28;
  Espresso::tunneled_ane_op_params_t::~tunneled_ane_op_params_t((Espresso::tunneled_ane_op_params_t *)(this + 35));
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANECompilerEngine::tunneled_ane_op_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob((_QWORD *)(a1 + 560), a3, a4, a5);
}

uint64_t Espresso::ANECompilerEngine::tunneled_ane_op_kernel::is_valid_for_engine()
{
  return 1;
}

const char *Espresso::generic_tunneled_ane_op_kernel::kernel_type_str(Espresso::generic_tunneled_ane_op_kernel *this)
{
  return "tunneled_ane_op";
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::tunneled_ane_op_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::tunneled_ane_op_kernel::~tunneled_ane_op_kernel(void **this)
{
  Espresso::base_kernel *v1;
  uint64_t v2;

  v1 = (Espresso::base_kernel *)(this - 70);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  *(_QWORD *)v1 = off_1E2D8BB28;
  Espresso::tunneled_ane_op_params_t::~tunneled_ane_op_params_t((Espresso::tunneled_ane_op_params_t *)(v2 - 280));
  Espresso::base_kernel::~base_kernel(v1);
}

{
  Espresso::base_kernel *v1;
  uint64_t v2;

  v1 = (Espresso::base_kernel *)(this - 70);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  *(_QWORD *)v1 = off_1E2D8BB28;
  Espresso::tunneled_ane_op_params_t::~tunneled_ane_op_params_t((Espresso::tunneled_ane_op_params_t *)(v2 - 280));
  Espresso::base_kernel::~base_kernel(v1);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANECompilerEngine::tunneled_ane_unit_kernel::~tunneled_ane_unit_kernel(void **this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 57);
  *this = off_1E2D8BC80;
  Espresso::tunneled_ane_unit_params_t::~tunneled_ane_unit_params_t(this + 35);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 57);
  *this = off_1E2D8BC80;
  Espresso::tunneled_ane_unit_params_t::~tunneled_ane_unit_params_t(this + 35);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANECompilerEngine::tunneled_ane_unit_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob((_QWORD *)(a1 + 456), a3, a4, a5);
}

uint64_t Espresso::ANECompilerEngine::tunneled_ane_unit_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  Espresso::ANECompilerEngine *v8;
  NSString *v9;
  int is_mix;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  void *v24[2];
  char v25;
  std::string __p;
  uint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  int64x2_t *v30;
  std::__shared_weak_count *v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  void **v34;

  v5 = *(_QWORD *)(a3 + 48);
  v32 = 0;
  v33 = 0;
  v6 = *(std::__shared_weak_count **)(v5 + 80);
  if (v6 && (v33 = std::__shared_weak_count::lock(v6)) != 0)
  {
    v7 = *(_QWORD *)(v5 + 72);
    v32 = v7;
  }
  else
  {
    v7 = 0;
  }
  Espresso::ANECompilerEngine::ane_arch_allow_network_override(v7 + 472);
  v8 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
  is_mix = Espresso::ANECompilerEngine::is_mix(v8, v9);
  if (is_mix)
  {
    v11 = *(std::__shared_weak_count **)(a2 + 8);
    v30 = *(int64x2_t **)a2;
    v31 = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }
    std::string::basic_string[abi:ne180100]<0>(v24, "Tunneled units may rely on transpose for layout conversion.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)v24, a3, 0);
    Espresso::emit_kernel_validation_warning(&v30, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    v14 = v29;
    if (v29)
    {
      v15 = (unint64_t *)&v29->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v34 = (void **)&v28;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v34);
    v34 = (void **)&v27;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v34);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v25 < 0)
      operator delete(v24[0]);
    v17 = v31;
    if (v31)
    {
      v18 = (unint64_t *)&v31->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
  }

  v20 = v33;
  if (v33)
  {
    v21 = (unint64_t *)&v33->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  return is_mix ^ 1u;
}

void sub_1913A82D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  void *v15;
  uint64_t v16;

  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t(&a15);
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v16 - 72);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v16 - 56);
  _Unwind_Resume(a1);
}

const char *Espresso::generic_tunneled_ane_unit_kernel::kernel_type_str(Espresso::generic_tunneled_ane_unit_kernel *this)
{
  return "tunneled_ane_unit";
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::tunneled_ane_unit_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

void Espresso::ANECompilerEngine::tunneled_ane_unit_kernel::compile(Espresso::ANECompilerEngine::tunneled_ane_unit_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v7;
  const Espresso::net *v8;
  std::__shared_weak_count *v9;
  char *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  char *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  std::string *v25;
  unint64_t *p_size;
  unint64_t v27;
  std::__shared_weak_count *v28;
  const Espresso::net *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  _OWORD *v35;
  _OWORD *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  std::string *v40;
  std::string *v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  _OWORD *v48;
  unint64_t v49;
  __int128 v50;
  char *v51;
  size_t v52;
  std::string *v53;
  const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *v54;
  std::string *v55;
  std::string::size_type size;
  std::string *v57;
  char *v58;
  char v59;
  std::vector<std::string>::pointer v60;
  std::string::size_type v61;
  std::string *v62;
  uint64_t v63;
  std::vector<std::string>::pointer end;
  __int128 v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  std::string *v70;
  unint64_t v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  BOOL v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  int *v81;
  unint64_t v82;
  uint64_t v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  std::string *v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  std::string::size_type v93;
  std::string *v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  id v104;
  char *v105;
  int v106;
  uint64_t v107;
  int v108;
  int v109;
  int v111;
  int v112;
  int v113;
  void *v115;
  void *v116;
  _QWORD *v117;
  uint64_t v118;
  void *v119;
  void *v120;
  int v121;
  char *v122;
  uint64_t v123;
  void *v124;
  void *v125;
  id v126;
  id v127;
  std::string *v128;
  std::string *v129;
  Espresso::ANECompilerEngine::tunneled_ane_unit_kernel *v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  uint64_t v134;
  std::string *v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  std::string::size_type v139;
  std::string *v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  char *v144;
  std::string::size_type v145;
  uint64_t v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  id v150;
  void *v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  const char *v161;
  Espresso::ANECompilerEngine::compiler *v162;
  uint64_t v163;
  const __CFString *v164;
  Espresso::ANECompilerEngine::tunneled_ane_unit_kernel *v165;
  _BYTE v166[40];
  std::string::size_type v167;
  __int128 v168;
  std::string::size_type v169;
  int v170;
  void *v171[2];
  std::string::size_type v172;
  int v173;
  __int128 v174;
  id v175;
  std::string::size_type v176;
  std::string __str;
  std::__split_buffer<std::string> __v;
  std::string::size_type v179;
  __int128 v180;
  std::string::size_type v181;
  int v182;
  __int128 v183;
  std::string::size_type v184;
  int v185;
  __int128 v186;
  id v187;
  std::string::size_type v188;
  uint64_t v189;
  std::string *v190;
  unint64_t v191;
  char v192[40];
  void *v193;
  void *v194;
  const Espresso::net *v195;
  std::__shared_weak_count *v196;
  std::string v197;
  unsigned int v198;
  int v199;
  char v200[40];
  void *__p;
  void *v202;
  const Espresso::net *v203;
  std::__shared_weak_count *v204;
  std::vector<std::string> v205;
  uint64_t v206;
  _OWORD *v207;
  unint64_t v208;
  uint64_t v209;
  std::__shared_weak_count *v210;
  uint64_t v211;
  std::__shared_weak_count *v212;
  const Espresso::net *v213;
  std::__shared_weak_count *v214;
  std::string v215;
  char *v216;
  unint64_t *v217;
  __int128 v218;
  uint64_t v219;

  v219 = *MEMORY[0x1E0C80C00];
  v213 = 0;
  v214 = 0;
  v4 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
  if (!v4
    || (v7 = std::__shared_weak_count::lock(v4), (v214 = v7) == 0)
    || (v8 = (const Espresso::net *)*((_QWORD *)a2 + 1), (v213 = v8) == 0))
  {
    v161 = "Inconsistent state: null network";
    goto LABEL_260;
  }
  v162 = a2;
  if (!*((_QWORD *)v8 + 72))
  {
    v161 = "Inconsistent state: blob_storage";
LABEL_260:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v161);
  }
  v9 = v7;
  __v.__first_ = (std::__split_buffer<std::string>::pointer)*((_QWORD *)a3 + 6);
  v10 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v8 + 136, (unsigned __int8 *)__v.__first_, (__int128 **)&__v);
  v11 = (std::__shared_weak_count *)*((_QWORD *)v10 + 6);
  v211 = *((_QWORD *)v10 + 5);
  v212 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  __v.__first_ = (std::__split_buffer<std::string>::pointer)a3;
  v14 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v8 + 136, (unsigned __int8 *)a3, (__int128 **)&__v);
  v15 = (std::__shared_weak_count *)*((_QWORD *)v14 + 6);
  v209 = *((_QWORD *)v14 + 5);
  v210 = v15;
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  v206 = 0;
  v207 = 0;
  v208 = 0;
  memset(&v205, 0, sizeof(v205));
  std::vector<std::string>::reserve(&v205, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a3 + 7) - *((_QWORD *)a3 + 6)) >> 3));
  v165 = this;
  v18 = *((_QWORD *)a3 + 6);
  if (*((_QWORD *)a3 + 7) == v18)
  {
    v20 = 0;
    v19 = 0;
    v195 = v8;
    v196 = v9;
    v76 = v9 == 0;
LABEL_114:
    v77 = (unint64_t *)&v9->__shared_owners_;
    do
      v78 = __ldxr(v77);
    while (__stxr(v78 + 1, v77));
    goto LABEL_116;
  }
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  do
  {
    __v.__first_ = (std::__split_buffer<std::string>::pointer)(v18 + 24 * v22);
    v23 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v213 + 136, (unsigned __int8 *)__v.__first_, (__int128 **)&__v);
    v24 = *((_QWORD *)v23 + 5);
    v25 = (std::string *)*((_QWORD *)v23 + 6);
    v189 = v24;
    v190 = v25;
    if (v25)
    {
      p_size = &v25->__r_.__value_.__l.__size_;
      do
        v27 = __ldxr(p_size);
      while (__stxr(v27 + 1, p_size));
    }
    v29 = v213;
    v28 = v214;
    v203 = v213;
    v204 = v214;
    if (v214)
    {
      v30 = (unint64_t *)&v214->__shared_owners_;
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
    }
    Espresso::abstract_blob_container::shape(v200, v24);
    Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v166, v29, (const Espresso::layer_shape *)v200, 1);
    if (__p)
    {
      v202 = __p;
      operator delete(__p);
    }
    if (v28)
    {
      v32 = (unint64_t *)&v28->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    v34 = *((_QWORD *)this + 41);
    if (v22 >= (*((_QWORD *)this + 42) - v34) >> 5)
      std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
    if (*(_BYTE *)(v34 + 32 * v22))
    {
      memset(&v215, 0, sizeof(v215));
    }
    else
    {
      if (*(_DWORD *)&v166[28] == -1 || *(_DWORD *)&v166[28] == 1)
      {
        std::string::basic_string[abi:ne180100]<0>(&__v, "DNCHW");
      }
      else
      {
        if (*(_DWORD *)&v166[28])
          Espresso::throw_exception_selector<Espresso::invalid_state_error>("tunneled_ane_unit_kernel encountered unexpected layout from espresso.");
        std::string::basic_string[abi:ne180100]<0>(&__v, "NCDHW");
      }
      if (SHIBYTE(__v.__end_) < 0)
        operator delete(__v.__first_);
    }
    v35 = v207;
    if ((unint64_t)v207 >= v208)
    {
      v37 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v207 - v206) >> 3);
      v38 = v37 + 1;
      if (v37 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      if (0x5555555555555556 * ((uint64_t)(v208 - v206) >> 3) > v38)
        v38 = 0x5555555555555556 * ((uint64_t)(v208 - v206) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v208 - v206) >> 3) >= 0x555555555555555)
        v39 = 0xAAAAAAAAAAAAAAALL;
      else
        v39 = v38;
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v208;
      v40 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v39);
      v41 = v40 + v37;
      __v.__first_ = v40;
      __v.__begin_ = v41;
      __v.__end_cap_.__value_ = &v40[v42];
      *v41 = v215;
      __v.__end_ = v41 + 1;
      std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(&v206, &__v);
      v36 = v207;
      std::__split_buffer<std::vector<unsigned long>>::~__split_buffer((uint64_t)&__v);
    }
    else
    {
      *v207 = *(_OWORD *)&v215.__r_.__value_.__l.__data_;
      *((_QWORD *)v35 + 2) = *((_QWORD *)&v215.__r_.__value_.__l + 2);
      v36 = (_OWORD *)((char *)v35 + 24);
    }
    v207 = v36;
    if ((unint64_t)v20 >= v21)
    {
      v44 = (v20 - v19) >> 5;
      v45 = v44 + 1;
      if ((unint64_t)(v44 + 1) >> 59)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      if ((uint64_t)(v21 - (_QWORD)v19) >> 4 > v45)
        v45 = (uint64_t)(v21 - (_QWORD)v19) >> 4;
      if (v21 - (unint64_t)v19 >= 0x7FFFFFFFFFFFFFE0)
        v46 = 0x7FFFFFFFFFFFFFFLL;
      else
        v46 = v45;
      if (v46)
        v46 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::blob_container::ane_blob_mapped_shape>>(v46);
      else
        v47 = 0;
      v48 = (_OWORD *)(v46 + 32 * v44);
      *v48 = *(_OWORD *)v166;
      v48[1] = *(_OWORD *)&v166[16];
      if (v20 == v19)
      {
        v51 = (char *)(v46 + 32 * v44);
      }
      else
      {
        v49 = v46 + 32 * v44;
        do
        {
          v50 = *((_OWORD *)v20 - 1);
          v51 = (char *)(v49 - 32);
          *(_OWORD *)(v49 - 32) = *((_OWORD *)v20 - 2);
          *(_OWORD *)(v49 - 16) = v50;
          v20 -= 32;
          v49 -= 32;
        }
        while (v20 != v19);
      }
      v21 = v46 + 32 * v47;
      v20 = (char *)(v48 + 2);
      if (v19)
        operator delete(v19);
      v19 = v51;
    }
    else
    {
      v43 = *(_OWORD *)&v166[16];
      *(_OWORD *)v20 = *(_OWORD *)v166;
      *((_OWORD *)v20 + 1) = v43;
      v20 += 32;
    }
    if (*((_QWORD *)v207 - 2) == *((_QWORD *)v207 - 3))
    {
      v63 = *((_QWORD *)a3 + 6) + 24 * v22;
      end = v205.__end_;
      if (v205.__end_ >= v205.__end_cap_.__value_)
      {
        v70 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v205, v63);
      }
      else
      {
        if (*(char *)(v63 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v205.__end_, *(const std::string::value_type **)v63, *(_QWORD *)(v63 + 8));
        }
        else
        {
          v65 = *(_OWORD *)v63;
          v205.__end_->__r_.__value_.__r.__words[2] = *(_QWORD *)(v63 + 16);
          *(_OWORD *)&end->__r_.__value_.__l.__data_ = v65;
        }
        v70 = end + 1;
      }
      v205.__end_ = v70;
    }
    else
    {
      if (*((char *)a3 + 23) >= 0)
        v52 = *((unsigned __int8 *)a3 + 23);
      else
        v52 = *((_QWORD *)a3 + 1);
      std::string::basic_string[abi:ne180100]((uint64_t)&v215, v52 + 29);
      if ((v215.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v53 = &v215;
      else
        v53 = (std::string *)v215.__r_.__value_.__r.__words[0];
      if (v52)
      {
        if (*((char *)a3 + 23) >= 0)
          v54 = a3;
        else
          v54 = *(const Espresso::ANECompilerEngine::compiler::layer_graph_info_t **)a3;
        memmove(v53, v54, v52);
      }
      strcpy((char *)v53 + v52, "__generated_bottom_transpose_");
      std::to_string(&v197, v22);
      if ((v197.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v55 = &v197;
      else
        v55 = (std::string *)v197.__r_.__value_.__r.__words[0];
      if ((v197.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v197.__r_.__value_.__r.__words[2]);
      else
        size = v197.__r_.__value_.__l.__size_;
      v57 = std::string::append(&v215, (const std::string::value_type *)v55, size);
      v58 = (char *)v57->__r_.__value_.__r.__words[0];
      *(_QWORD *)&v218 = v57->__r_.__value_.__l.__size_;
      *(_QWORD *)((char *)&v218 + 7) = *(std::string::size_type *)((char *)&v57->__r_.__value_.__r.__words[1] + 7);
      v59 = HIBYTE(v57->__r_.__value_.__r.__words[2]);
      v57->__r_.__value_.__l.__size_ = 0;
      v57->__r_.__value_.__r.__words[2] = 0;
      v57->__r_.__value_.__r.__words[0] = 0;
      v60 = v205.__end_;
      if (v205.__end_ >= v205.__end_cap_.__value_)
      {
        v66 = 0xAAAAAAAAAAAAAAABLL * (((char *)v205.__end_ - (char *)v205.__begin_) >> 3);
        v67 = v66 + 1;
        if (v66 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        if (0x5555555555555556 * (((char *)v205.__end_cap_.__value_ - (char *)v205.__begin_) >> 3) > v67)
          v67 = 0x5555555555555556 * (((char *)v205.__end_cap_.__value_ - (char *)v205.__begin_) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v205.__end_cap_.__value_ - (char *)v205.__begin_) >> 3) >= 0x555555555555555)
          v68 = 0xAAAAAAAAAAAAAAALL;
        else
          v68 = v67;
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v205.__end_cap_;
        if (v68)
          v68 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v68);
        else
          v69 = 0;
        v71 = v68 + 24 * v66;
        __v.__first_ = (std::__split_buffer<std::string>::pointer)v68;
        __v.__begin_ = (std::__split_buffer<std::string>::pointer)v71;
        __v.__end_cap_.__value_ = (std::string *)(v68 + 24 * v69);
        v72 = v218;
        *(_QWORD *)v71 = v58;
        *(_QWORD *)(v71 + 8) = v72;
        *(_QWORD *)(v71 + 15) = *(_QWORD *)((char *)&v218 + 7);
        *(_BYTE *)(v71 + 23) = v59;
        __v.__end_ = (std::__split_buffer<std::string>::pointer)(v71 + 24);
        std::vector<std::string>::__swap_out_circular_buffer(&v205, &__v);
        v62 = v205.__end_;
        std::__split_buffer<std::string>::~__split_buffer(&__v);
      }
      else
      {
        v61 = v218;
        v205.__end_->__r_.__value_.__l.__data_ = v58;
        v60->__r_.__value_.__l.__size_ = v61;
        *(std::string::size_type *)((char *)&v60->__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)&v218 + 7);
        *((_BYTE *)&v60->__r_.__value_.__s + 23) = v59;
        v62 = v60 + 1;
      }
      v205.__end_ = v62;
      if (SHIBYTE(v197.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v197.__r_.__value_.__l.__data_);
      if (SHIBYTE(v215.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v215.__r_.__value_.__l.__data_);
    }
    v73 = (std::__shared_weak_count *)v190;
    if (v190)
    {
      v74 = &v190->__r_.__value_.__l.__size_;
      do
        v75 = __ldaxr(v74);
      while (__stlxr(v75 - 1, v74));
      if (!v75)
      {
        ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
        std::__shared_weak_count::__release_weak(v73);
      }
    }
    ++v22;
    v18 = *((_QWORD *)a3 + 6);
  }
  while (v22 < 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)a3 + 7) - v18) >> 3));
  v8 = v213;
  v9 = v214;
  v195 = v213;
  v196 = v214;
  v76 = v214 == 0;
  if (v214)
    goto LABEL_114;
LABEL_116:
  Espresso::abstract_blob_container::shape(v192, v209);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)&v197, v8, (const Espresso::layer_shape *)v192, 1);
  if (v193)
  {
    v194 = v193;
    operator delete(v193);
  }
  if (!v76)
  {
    v79 = (unint64_t *)&v9->__shared_owners_;
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v81 = (int *)*((_QWORD *)v165 + 44);
  if (*((int **)v165 + 45) == v81)
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  memset(&__v, 0, 24);
  v82 = *v81;
  if ((_DWORD)v82 == -1)
  {
    std::string::operator=((std::string *)&__v, (const std::string *)(v81 + 2));
  }
  else
  {
    v83 = *((_QWORD *)v165 + 41);
    if (v82 >= (*((_QWORD *)v165 + 42) - v83) >> 5)
      std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
    if (*(_BYTE *)(v83 + 32 * v82))
    {
      if (v82 >= (v20 - v19) >> 5)
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      v84 = *(_DWORD *)&v19[32 * v82 + 28] + 1;
      if (v84 >= 3)
        Espresso::throw_exception_selector<Espresso::invalid_state_error>("tunneled_ane_unit_kernel encountered unexpected layout from espresso.");
      MEMORY[0x19401C808](&__v, off_1E2DD2090[v84]);
    }
    else
    {
      std::string::operator=((std::string *)&__v, (const std::string *)(v83 + 32 * v82 + 8));
    }
  }
  memset(v166, 0, 24);
  if ((v199 + 1) >= 3)
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("tunneled_ane_unit_kernel encountered unexpected layout from espresso top.");
  MEMORY[0x19401C808](v166, off_1E2DD2090[v199 + 1]);
  if ((v166[23] & 0x80000000) != 0)
    operator delete(*(void **)v166);
  if (SHIBYTE(__v.__end_) < 0)
    operator delete(__v.__first_);
  v189 = 0;
  v190 = 0;
  v191 = 0;
  v85 = *((_QWORD *)a3 + 6);
  v86 = *((_QWORD *)a3 + 7);
  if (v86 != v85)
  {
    v87 = 0;
    v88 = 0;
    do
    {
      if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v207 - v206) >> 3) <= v88)
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      if (*(_QWORD *)(v206 + v87 + 8) != *(_QWORD *)(v206 + v87))
      {
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v205.__end_ - (char *)v205.__begin_) >> 3) <= v88)
          std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
        Espresso::ANECompilerEngine::transpose_unit_from_axis_pairs((uint64_t)&__v, v85 + v87, &v205.__begin_[v87 / 0x18], *((_DWORD *)a3 + 18), 1, CFSTR("Float16"), (unsigned int **)(v206 + v87), (std::string *)((char *)a3 + 80));
        v89 = v190;
        if ((unint64_t)v190 >= v191)
        {
          v95 = 0x8E38E38E38E38E39 * (((uint64_t)v190 - v189) >> 4);
          v96 = v95 + 1;
          if (v95 + 1 > 0x1C71C71C71C71C7)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          if (0x1C71C71C71C71C72 * ((uint64_t)(v191 - v189) >> 4) > v96)
            v96 = 0x1C71C71C71C71C72 * ((uint64_t)(v191 - v189) >> 4);
          if (0x8E38E38E38E38E39 * ((uint64_t)(v191 - v189) >> 4) >= 0xE38E38E38E38E3)
            v97 = 0x1C71C71C71C71C7;
          else
            v97 = v96;
          *(_QWORD *)&v166[32] = &v191;
          v98 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v97);
          v99 = &v98[144 * v95];
          *(_QWORD *)v166 = v98;
          *(_QWORD *)&v166[8] = v99;
          *(_QWORD *)&v166[24] = &v98[144 * v100];
          v101 = *(_OWORD *)&__v.__first_;
          *((_QWORD *)v99 + 2) = __v.__end_;
          *(_OWORD *)v99 = v101;
          memset(&__v, 0, 24);
          *((_QWORD *)v99 + 3) = 0;
          *((_QWORD *)v99 + 4) = 0;
          *((_QWORD *)v99 + 5) = 0;
          *(std::__compressed_pair<std::string *> *)(v99 + 24) = __v.__end_cap_;
          *((_QWORD *)v99 + 5) = v179;
          __v.__end_cap_.__value_ = 0;
          __v.__end_cap_.__value_ = 0;
          v179 = 0;
          *((_QWORD *)v99 + 6) = 0;
          *((_QWORD *)v99 + 7) = 0;
          *((_QWORD *)v99 + 8) = 0;
          *((_OWORD *)v99 + 3) = v180;
          *((_QWORD *)v99 + 8) = v181;
          v180 = 0uLL;
          v181 = 0;
          *((_DWORD *)v99 + 18) = v182;
          v102 = v183;
          *((_QWORD *)v99 + 12) = v184;
          *((_OWORD *)v99 + 5) = v102;
          v184 = 0;
          v183 = 0uLL;
          *((_DWORD *)v99 + 26) = v185;
          v103 = v186;
          v186 = 0uLL;
          *((_OWORD *)v99 + 7) = v103;
          v104 = v187;
          v187 = 0;
          *((_QWORD *)v99 + 16) = v104;
          *((_QWORD *)v99 + 17) = v188;
          *(_QWORD *)&v166[16] = v99 + 144;
          std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v189, v166);
          v94 = v190;
          std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)v166);
        }
        else
        {
          v90 = *(_OWORD *)&__v.__first_;
          v190->__r_.__value_.__r.__words[2] = (std::string::size_type)__v.__end_;
          v89[1].__r_.__value_.__r.__words[0] = 0;
          *(_OWORD *)&v89->__r_.__value_.__l.__data_ = v90;
          __v.__first_ = 0;
          __v.__begin_ = 0;
          v89[1].__r_.__value_.__l.__size_ = 0;
          v89[1].__r_.__value_.__r.__words[2] = 0;
          *(std::__compressed_pair<std::string *> *)&v89[1].__r_.__value_.__l.__data_ = __v.__end_cap_;
          __v.__end_cap_.__value_ = 0;
          __v.__end_cap_.__value_ = 0;
          v89[1].__r_.__value_.__r.__words[2] = v179;
          v89[2].__r_.__value_.__r.__words[0] = 0;
          v179 = 0;
          v89[2].__r_.__value_.__l.__size_ = 0;
          v89[2].__r_.__value_.__r.__words[2] = 0;
          *(_OWORD *)&v89[2].__r_.__value_.__l.__data_ = v180;
          v89[2].__r_.__value_.__r.__words[2] = v181;
          v180 = 0uLL;
          v181 = 0;
          LODWORD(v89[3].__r_.__value_.__l.__data_) = v182;
          v91 = v183;
          v89[4].__r_.__value_.__r.__words[0] = v184;
          *(_OWORD *)&v89[3].__r_.__value_.__r.__words[1] = v91;
          v184 = 0;
          v183 = 0uLL;
          LODWORD(v89[4].__r_.__value_.__r.__words[1]) = v185;
          v92 = v186;
          v186 = 0uLL;
          __v.__end_ = 0;
          *(_OWORD *)&v89[4].__r_.__value_.__r.__words[2] = v92;
          v93 = (std::string::size_type)v187;
          v187 = 0;
          v89[5].__r_.__value_.__l.__size_ = v93;
          v89[5].__r_.__value_.__r.__words[2] = v188;
          v94 = v89 + 6;
        }
        v190 = v94;

        if (SHIBYTE(v184) < 0)
          operator delete((void *)v183);
        *(_QWORD *)v166 = &v180;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v166);
        *(_QWORD *)v166 = &__v.__end_cap_;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v166);
        if (SHIBYTE(__v.__end_) < 0)
          operator delete(__v.__first_);
        v85 = *((_QWORD *)a3 + 6);
        v86 = *((_QWORD *)a3 + 7);
      }
      ++v88;
      v87 += 24;
    }
    while (v88 < 0xAAAAAAAAAAAAAAABLL * ((v86 - v85) >> 3));
  }
  if (*((char *)a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  else
    __str = *(std::string *)a3;
  v105 = (char *)v165 + 424;
  if ((*((char *)v165 + 447) & 0x80000000) == 0)
  {
    v106 = *((unsigned __int8 *)v165 + 447);
    if (v106 != 4)
    {
      if (v106 != 5)
      {
        if (v106 != 7)
          goto LABEL_258;
        goto LABEL_169;
      }
      goto LABEL_176;
    }
LABEL_183:
    if (*(_DWORD *)v105 != 947154505)
      goto LABEL_258;
    v164 = CFSTR("Int8");
    v111 = 2;
    goto LABEL_185;
  }
  v107 = *((_QWORD *)v165 + 54);
  if (v107 == 4)
  {
    v105 = *(char **)v105;
    goto LABEL_183;
  }
  if (v107 != 5)
  {
    if (v107 != 7)
      goto LABEL_258;
    v105 = *(char **)v105;
LABEL_169:
    v108 = *(_DWORD *)v105;
    v109 = *(_DWORD *)(v105 + 3);
    if (v108 != 1634692166 || v109 != 909210721)
      goto LABEL_258;
    v164 = CFSTR("Float16");
    v111 = 1;
    goto LABEL_185;
  }
  v105 = *(char **)v105;
LABEL_176:
  v112 = *(_DWORD *)v105;
  v113 = v105[4];
  if (v112 != 1953384789 || v113 != 56)
LABEL_258:
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("tunneled_ane_unit_kernel has invalid output_type data.");
  v164 = CFSTR("UInt8");
  v111 = 4;
LABEL_185:
  v115 = (void *)*((_QWORD *)&v218 + 1);
  v116 = (void *)v218;
  if (*((_QWORD *)&v218 + 1) != (_QWORD)v218)
    std::string::append(&__str, "__tunneled_intermediate");
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&__v.__first_, (id *)a3);
  v117 = (_QWORD *)((char *)v165 + 376);
  if (*((char *)v165 + 399) < 0)
    v117 = (_QWORD *)*v117;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v117, v162);
  v118 = objc_claimAutoreleasedReturnValue();
  v119 = (void *)*((_QWORD *)&v186 + 1);
  *((_QWORD *)&v186 + 1) = v118;

  std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v180, v205.__begin_, v205.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v205.__end_ - (char *)v205.__begin_) >> 3));
  std::string::operator=((std::string *)&__v, &__str);
  v185 = v111;
  v120 = (void *)v186;
  *(_QWORD *)&v186 = v164;

  v121 = *((char *)v165 + 423);
  if (v121 >= 0)
    v122 = (char *)v165 + 400;
  else
    v122 = (char *)*((_QWORD *)v165 + 50);
  if (v121 >= 0)
    v123 = *((unsigned __int8 *)v165 + 423);
  else
    v123 = *((_QWORD *)v165 + 51);
  objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytes:length:", v122, v123);
  v124 = (void *)objc_claimAutoreleasedReturnValue();
  *(_QWORD *)v166 = 0;
  objc_msgSend(MEMORY[0x1E0CB38B0], "propertyListWithData:options:format:error:", v124, 2, 0, v166);
  v125 = (void *)objc_claimAutoreleasedReturnValue();
  v126 = *(id *)v166;
  if (!v125)
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("tunneled_ane_unit_kernel has invalid plist data.");

  v127 = v187;
  v187 = v125;

  v128 = v190;
  if ((unint64_t)v190 >= v191)
  {
    v131 = 0x8E38E38E38E38E39 * (((uint64_t)v190 - v189) >> 4);
    if (v131 + 1 > 0x1C71C71C71C71C7)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v132 = 0x1C71C71C71C71C72 * ((uint64_t)(v191 - v189) >> 4);
    if (v132 <= v131 + 1)
      v132 = v131 + 1;
    if (0x8E38E38E38E38E39 * ((uint64_t)(v191 - v189) >> 4) >= 0xE38E38E38E38E3)
      v133 = 0x1C71C71C71C71C7;
    else
      v133 = v132;
    *(_QWORD *)&v166[32] = &v191;
    v130 = v165;
    if (v133)
      v133 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v133);
    else
      v134 = 0;
    *(_QWORD *)v166 = v133;
    *(_QWORD *)&v166[8] = v133 + 144 * v131;
    *(_QWORD *)&v166[16] = *(_QWORD *)&v166[8];
    *(_QWORD *)&v166[24] = v133 + 144 * v134;
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(*(std::string **)&v166[8], (uint64_t)&__v);
    *(_QWORD *)&v166[16] += 144;
    std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v189, v166);
    v129 = v190;
    std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)v166);
    v115 = (void *)*((_QWORD *)&v218 + 1);
    v116 = (void *)v218;
  }
  else
  {
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v190, (uint64_t)&__v);
    v129 = v128 + 6;
    v130 = v165;
  }
  v190 = v129;
  if (v115 != v116)
  {
    Espresso::ANECompilerEngine::transpose_unit_from_axis_pairs((uint64_t)v166, (uint64_t)&__str, (const std::string *)a3, *((_DWORD *)a3 + 18), *((_DWORD *)a3 + 26), *((void **)a3 + 14), (unsigned int **)&v218, (std::string *)((char *)a3 + 80));
    v135 = v190;
    if ((unint64_t)v190 >= v191)
    {
      v141 = 0x8E38E38E38E38E39 * (((uint64_t)v190 - v189) >> 4);
      v142 = v141 + 1;
      if (v141 + 1 > 0x1C71C71C71C71C7)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      if (0x1C71C71C71C71C72 * ((uint64_t)(v191 - v189) >> 4) > v142)
        v142 = 0x1C71C71C71C71C72 * ((uint64_t)(v191 - v189) >> 4);
      if (0x8E38E38E38E38E39 * ((uint64_t)(v191 - v189) >> 4) >= 0xE38E38E38E38E3)
        v143 = 0x1C71C71C71C71C7;
      else
        v143 = v142;
      v217 = &v191;
      v144 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v143);
      v145 = (std::string::size_type)&v144[144 * v141];
      v215.__r_.__value_.__r.__words[0] = (std::string::size_type)v144;
      v215.__r_.__value_.__l.__size_ = v145;
      v216 = &v144[144 * v146];
      v147 = *(_OWORD *)v166;
      *(_QWORD *)(v145 + 16) = *(_QWORD *)&v166[16];
      *(_OWORD *)v145 = v147;
      memset(v166, 0, 24);
      *(_QWORD *)(v145 + 24) = 0;
      *(_QWORD *)(v145 + 32) = 0;
      *(_QWORD *)(v145 + 40) = 0;
      *(_OWORD *)(v145 + 24) = *(_OWORD *)&v166[24];
      *(_QWORD *)(v145 + 40) = v167;
      *(_QWORD *)&v166[24] = 0;
      *(_QWORD *)&v166[32] = 0;
      v167 = 0;
      *(_QWORD *)(v145 + 48) = 0;
      *(_QWORD *)(v145 + 56) = 0;
      *(_QWORD *)(v145 + 64) = 0;
      *(_OWORD *)(v145 + 48) = v168;
      *(_QWORD *)(v145 + 64) = v169;
      v168 = 0uLL;
      v169 = 0;
      *(_DWORD *)(v145 + 72) = v170;
      v148 = *(_OWORD *)v171;
      *(_QWORD *)(v145 + 96) = v172;
      *(_OWORD *)(v145 + 80) = v148;
      v171[1] = 0;
      v172 = 0;
      v171[0] = 0;
      *(_DWORD *)(v145 + 104) = v173;
      v149 = v174;
      v174 = 0uLL;
      *(_OWORD *)(v145 + 112) = v149;
      v150 = v175;
      v175 = 0;
      *(_QWORD *)(v145 + 128) = v150;
      *(_QWORD *)(v145 + 136) = v176;
      v215.__r_.__value_.__r.__words[2] = v145 + 144;
      std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v189, &v215);
      v140 = v190;
      std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&v215);
    }
    else
    {
      v136 = *(_OWORD *)v166;
      v190->__r_.__value_.__r.__words[2] = *(_QWORD *)&v166[16];
      v135[1].__r_.__value_.__r.__words[0] = 0;
      *(_OWORD *)&v135->__r_.__value_.__l.__data_ = v136;
      *(_OWORD *)v166 = 0uLL;
      v135[1].__r_.__value_.__l.__size_ = 0;
      v135[1].__r_.__value_.__r.__words[2] = 0;
      *(_OWORD *)&v135[1].__r_.__value_.__l.__data_ = *(_OWORD *)&v166[24];
      v135[1].__r_.__value_.__r.__words[2] = v167;
      v135[2].__r_.__value_.__r.__words[0] = 0;
      memset(&v166[16], 0, 24);
      v167 = 0;
      v135[2].__r_.__value_.__l.__size_ = 0;
      v135[2].__r_.__value_.__r.__words[2] = 0;
      *(_OWORD *)&v135[2].__r_.__value_.__l.__data_ = v168;
      v135[2].__r_.__value_.__r.__words[2] = v169;
      v168 = 0uLL;
      LODWORD(v135[3].__r_.__value_.__l.__data_) = v170;
      v137 = *(_OWORD *)v171;
      v135[4].__r_.__value_.__r.__words[0] = v172;
      *(_OWORD *)&v135[3].__r_.__value_.__r.__words[1] = v137;
      v171[1] = 0;
      v172 = 0;
      v169 = 0;
      v171[0] = 0;
      LODWORD(v135[4].__r_.__value_.__r.__words[1]) = v173;
      v138 = v174;
      v174 = 0uLL;
      *(_OWORD *)&v135[4].__r_.__value_.__r.__words[2] = v138;
      v139 = (std::string::size_type)v175;
      v175 = 0;
      v135[5].__r_.__value_.__l.__size_ = v139;
      v135[5].__r_.__value_.__r.__words[2] = v176;
      v140 = v135 + 6;
    }
    v190 = v140;

    if (SHIBYTE(v172) < 0)
      operator delete(v171[0]);
    v215.__r_.__value_.__r.__words[0] = (std::string::size_type)&v168;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v215);
    v215.__r_.__value_.__r.__words[0] = (std::string::size_type)&v166[24];
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v215);
    if ((v166[23] & 0x80000000) != 0)
      operator delete(*(void **)v166);
    v151 = (void *)v190[-2].__r_.__value_.__r.__words[2];
    v190[-2].__r_.__value_.__r.__words[2] = (std::string::size_type)v164;

    LODWORD(v190[-2].__r_.__value_.__r.__words[1]) = v111;
    v130 = v165;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*((_QWORD *)v130 + 57) + 24))((uint64_t)v130 + 456, v163, &v189);

  if (SHIBYTE(v184) < 0)
    operator delete((void *)v183);
  *(_QWORD *)v166 = &v180;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v166);
  *(_QWORD *)v166 = &__v.__end_cap_;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v166);
  if (SHIBYTE(__v.__end_) < 0)
    operator delete(__v.__first_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v189;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
  if (v116)
    operator delete(v116);
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v205;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
  if (v19)
    operator delete(v19);
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v206;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
  v152 = v210;
  if (v210)
  {
    v153 = (unint64_t *)&v210->__shared_owners_;
    do
      v154 = __ldaxr(v153);
    while (__stlxr(v154 - 1, v153));
    if (!v154)
    {
      ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
      std::__shared_weak_count::__release_weak(v152);
    }
  }
  v155 = v212;
  if (v212)
  {
    v156 = (unint64_t *)&v212->__shared_owners_;
    do
      v157 = __ldaxr(v156);
    while (__stlxr(v157 - 1, v156));
    if (!v157)
    {
      ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
      std::__shared_weak_count::__release_weak(v155);
    }
  }
  v158 = v214;
  if (v214)
  {
    v159 = (unint64_t *)&v214->__shared_owners_;
    do
      v160 = __ldaxr(v159);
    while (__stlxr(v160 - 1, v159));
    if (!v160)
    {
      ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
      std::__shared_weak_count::__release_weak(v158);
    }
  }
}

void sub_1913A9760(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  void *v55;
  uint64_t v56;
  void *v58;

  if (a36 < 0)
    operator delete(__p);
  a37 = &a55;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&a37);
  v58 = *(void **)(v56 - 128);
  if (v58)
    operator delete(v58);
  *(_QWORD *)(v56 - 128) = &STACK[0x230];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v56 - 128));
  if (v55)
    operator delete(v55);
  STACK[0x230] = v56 - 248;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x230]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v56 - 224);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v56 - 208);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v56 - 192);
  _Unwind_Resume(a1);
}

void sub_1913A99D4()
{
  JUMPOUT(0x1913A99CCLL);
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::tunneled_ane_unit_kernel::compile(Espresso::ANECompilerEngine::tunneled_ane_unit_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
  Espresso::ANECompilerEngine::tunneled_ane_unit_kernel::compile((Espresso::ANECompilerEngine::tunneled_ane_unit_kernel *)((char *)this - 456), a2, a3);
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::tunneled_ane_unit_kernel::~tunneled_ane_unit_kernel(void **this)
{
  Espresso::base_kernel *v1;
  uint64_t v2;

  v1 = (Espresso::base_kernel *)(this - 57);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  *(_QWORD *)v1 = off_1E2D8BC80;
  Espresso::tunneled_ane_unit_params_t::~tunneled_ane_unit_params_t((void **)(v2 - 176));
  Espresso::base_kernel::~base_kernel(v1);
}

{
  Espresso::base_kernel *v1;
  uint64_t v2;

  v1 = (Espresso::base_kernel *)(this - 57);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  *(_QWORD *)v1 = off_1E2D8BC80;
  Espresso::tunneled_ane_unit_params_t::~tunneled_ane_unit_params_t((void **)(v2 - 176));
  Espresso::base_kernel::~base_kernel(v1);
  JUMPOUT(0x19401CD90);
}

std::string::const_reference `anonymous namespace'::enum_layout_from_string(uint64_t a1, std::string *this)
{
  std::string::size_type size;
  std::string::size_type i;
  std::string::const_reference result;
  int v7;
  int v8;

  size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) != 0)
    size = this->__r_.__value_.__l.__size_;
  if (size != 5)
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("tunneled_ane_unit_kernel got layout string that is not size 5.");
  for (i = 0; i != 5; ++i)
  {
    result = std::string::at(this, i);
    v7 = *result;
    if (v7 <= 71)
    {
      if (v7 == 67)
      {
        v8 = 2;
      }
      else
      {
        if (v7 != 68)
LABEL_18:
          Espresso::throw_exception_selector<Espresso::invalid_state_error>("tunneled_ane_unit_kernel got layout string with bad character.");
        v8 = 1;
      }
    }
    else
    {
      switch(v7)
      {
        case 'H':
          v8 = 3;
          break;
        case 'N':
          v8 = 0;
          break;
        case 'W':
          v8 = 4;
          break;
        default:
          goto LABEL_18;
      }
    }
    *(_DWORD *)(a1 + 4 * i) = v8;
  }
  return result;
}

void `anonymous namespace'::transposes_from_layout_conversion(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;

  if (a4 >= 6)
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("tunneled_ane_unit_kernel got out of range rank.");
  if (a4 <= 1)
    v7 = 1;
  else
    v7 = a4;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  std::vector<Espresso::net *>::reserve((void **)a1, v7);
  v8 = 1;
  do
  {
    v9 = *(unsigned int *)(a2 + 4 * (v7 - v8));
    v10 = *(unsigned int *)(a3 + 4 * (v7 - v8));
    if ((_DWORD)v9 != (_DWORD)v10)
    {
      v12 = *(uint64_t **)(a1 + 8);
      v11 = *(_QWORD *)(a1 + 16);
      if ((unint64_t)v12 >= v11)
      {
        v14 = *(uint64_t **)a1;
        v15 = ((uint64_t)v12 - *(_QWORD *)a1) >> 3;
        v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v17 = v11 - (_QWORD)v14;
        if (v17 >> 2 > v16)
          v16 = v17 >> 2;
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
          v18 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v18 = v16;
        if (v18)
          v18 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v18);
        else
          v19 = 0;
        v20 = (uint64_t *)(v18 + 8 * v15);
        *v20 = v9 | (v10 << 32);
        v13 = v20 + 1;
        if (v12 != v14)
        {
          do
          {
            v21 = *--v12;
            *--v20 = v21;
          }
          while (v12 != v14);
          v12 = *(uint64_t **)a1;
        }
        *(_QWORD *)a1 = v20;
        *(_QWORD *)(a1 + 8) = v13;
        *(_QWORD *)(a1 + 16) = v18 + 8 * v19;
        if (v12)
          operator delete(v12);
      }
      else
      {
        *v12 = v9 | (v10 << 32);
        v13 = v12 + 1;
      }
      *(_QWORD *)(a1 + 8) = v13;
    }
  }
  while (v7 != v8++);
  Espresso::ANECompilerEngine::fill_unpaired_transposes(a1);
}

void sub_1913A9C90(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::ANECompilerEngine::plane_rw_kernel::~plane_rw_kernel(void **this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 36);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 36);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANECompilerEngine::plane_rw_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob((_QWORD *)(a1 + 288), a3, a4, a5);
}

uint64_t Espresso::ANECompilerEngine::plane_rw_kernel::is_valid_for_engine(uint64_t a1, int64x2_t **a2, uint64_t a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  Espresso::ANECompilerEngine *v9;
  int v10;
  NSString *v11;
  NSString *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  int *v22;
  int v23;
  unsigned int v24;
  uint64_t v30;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  int is_mix_c;
  NSString *v52;
  int v53;
  int v54;
  int v55;
  int64x2_t *v56;
  unint64_t *v57;
  unint64_t v58;
  int64x2_t **v59;
  int64x2_t *v60;
  unint64_t *v61;
  unint64_t v62;
  int64x2_t *v63;
  unint64_t *v64;
  unint64_t v65;
  int64x2_t *v66[2];
  int64x2_t *v67[2];
  int64x2_t *v68[2];
  int64x2_t *v69;
  std::__shared_weak_count *v70;
  int64x2_t *v71;
  std::__shared_weak_count *v72;
  void *v73[2];
  char v74;
  std::string __p;
  _BYTE v76[24];
  _BYTE v77[32];
  std::__shared_weak_count *v78;
  int64x2_t *v79;
  std::__shared_weak_count *v80;
  uint64_t v81;
  std::__shared_weak_count *v82;
  void **v83;

  v6 = *(_QWORD *)(a3 + 48);
  v81 = 0;
  v82 = 0;
  v7 = *(std::__shared_weak_count **)(v6 + 80);
  if (v7 && (v82 = std::__shared_weak_count::lock(v7)) != 0)
  {
    v8 = *(_QWORD *)(v6 + 72);
    v81 = v8;
  }
  else
  {
    v8 = 0;
  }
  Espresso::ANECompilerEngine::ane_arch_allow_network_override(v8 + 472);
  v9 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
  v10 = *(_DWORD *)(a1 + 280);
  if (Espresso::ANECompilerEngine::is_mix(v9, v11))
  {
    v13 = (std::__shared_weak_count *)a2[1];
    v79 = *a2;
    v80 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
    }
    std::string::basic_string[abi:ne180100]<0>(v73, "Plane rw kernel is not supported on this architecture of ANEs due to ANE driver lacking support for multi-planar inputs.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)v73, a3, 0);
    Espresso::emit_kernel_validation_warning(&v79, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    v16 = v78;
    if (v78)
    {
      v17 = (unint64_t *)&v78->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v83 = (void **)v77;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v83);
    v83 = (void **)v76;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v83);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v74 < 0)
      operator delete(v73[0]);
    v19 = v80;
    if (!v80)
      goto LABEL_84;
    v20 = (unint64_t *)&v80->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    goto LABEL_82;
  }
  if (!(*(_DWORD *)(a1 + 284) | v10))
  {
    v40 = (std::__shared_weak_count *)a2[1];
    v71 = *a2;
    v72 = v40;
    if (v40)
    {
      v41 = (unint64_t *)&v40->__shared_owners_;
      do
        v42 = __ldxr(v41);
      while (__stxr(v42 + 1, v41));
    }
    std::string::basic_string[abi:ne180100]<0>(v73, "Plane rw kernel must be configured for either read or write.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)v73, a3, 0);
    Espresso::emit_kernel_validation_warning(&v71, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    v43 = v78;
    if (v78)
    {
      v44 = (unint64_t *)&v78->__shared_owners_;
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }
    v83 = (void **)v77;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v83);
    v83 = (void **)v76;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v83);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v74 < 0)
      operator delete(v73[0]);
    v19 = v72;
    if (!v72)
      goto LABEL_84;
    v46 = (unint64_t *)&v72->__shared_owners_;
    do
      v21 = __ldaxr(v46);
    while (__stlxr(v21 - 1, v46));
LABEL_82:
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
    goto LABEL_84;
  }
  v22 = (int *)(a1 + 280);
  if (!v10)
    v22 = (int *)(a1 + 284);
  v23 = *v22;
  v24 = *v22 & 0xFFFFFFEF;
  LODWORD(v30) = v23 == 2016686640
              || v24 == 875704422
              || v23 == 2019963440
              || v24 == 875836518
              || v23 == 1882468912
              || v23 == 1885745712;
  if (v23 == 1882468912 || v23 == 1886859824 || v23 == 1885745712)
  {
    v33 = (std::__shared_weak_count *)a2[1];
    v69 = *a2;
    v70 = v33;
    if (v33)
    {
      v34 = (unint64_t *)&v33->__shared_owners_;
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 1, v34));
    }
    std::string::basic_string[abi:ne180100]<0>(v73, "Plane rw kernel does not support packed (3 10 bit values in 32 bits) formats.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)v73, a3, 0);
    Espresso::emit_kernel_validation_warning(&v69, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    v36 = v78;
    if (v78)
    {
      v37 = (unint64_t *)&v78->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
    v83 = (void **)v77;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v83);
    v83 = (void **)v76;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v83);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v74 < 0)
      operator delete(v73[0]);
    v19 = v70;
    if (!v70)
      goto LABEL_84;
    v39 = (unint64_t *)&v70->__shared_owners_;
    do
      v21 = __ldaxr(v39);
    while (__stlxr(v21 - 1, v39));
    goto LABEL_82;
  }
  is_mix_c = Espresso::ANECompilerEngine::is_mix_c(v9, v12);
  if (is_mix_c && !v10)
  {
    v30 = 1;
    if (v23 > 1885745711)
    {
      if (v23 > 2016686639)
      {
        if (v23 == 2016686640)
          goto LABEL_85;
        v53 = 2019963440;
      }
      else
      {
        if (v23 == 1885745712)
          goto LABEL_85;
        v53 = 1886859824;
      }
    }
    else if (v23 > 875836517)
    {
      if (v23 == 875836518)
        goto LABEL_85;
      v53 = 875836534;
    }
    else
    {
      if (v23 == 875704422)
        goto LABEL_85;
      v53 = 875704438;
    }
    if (v23 == v53)
      goto LABEL_85;
    v56 = a2[1];
    v68[0] = *a2;
    v68[1] = v56;
    if (v56)
    {
      v57 = &v56->u64[1];
      do
        v58 = __ldxr(v57);
      while (__stxr(v58 + 1, v57));
    }
    std::string::basic_string[abi:ne180100]<0>(v73, "Plane rw kernel is not supported on this architecture of ANEs due to  lacking support for 4cc compressed outputs.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)v73, a3, 0);
    Espresso::emit_kernel_validation_warning(v68, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)&__p.__r_.__value_.__l.__data_);
    if (v74 < 0)
      operator delete(v73[0]);
    v59 = v68;
    goto LABEL_142;
  }
  if (Espresso::ANECompilerEngine::is_mix_c(v9, v52))
  {
    v30 = 1;
    if (v23 > 1885745711)
    {
      if (v23 > 2016686639)
      {
        if (v23 == 2016686640)
          goto LABEL_85;
        v54 = 2019963440;
      }
      else
      {
        if (v23 == 1885745712)
          goto LABEL_85;
        v54 = 1886859824;
      }
    }
    else if (v23 > 875836517)
    {
      if (v23 == 875836518)
        goto LABEL_85;
      v54 = 875836534;
    }
    else
    {
      if (v23 == 875704422)
        goto LABEL_85;
      v54 = 875704438;
    }
    if (v23 == v54)
      goto LABEL_85;
    v60 = a2[1];
    v67[0] = *a2;
    v67[1] = v60;
    if (v60)
    {
      v61 = &v60->u64[1];
      do
        v62 = __ldxr(v61);
      while (__stxr(v62 + 1, v61));
    }
    std::string::basic_string[abi:ne180100]<0>(v73, "Plane rw kernel is not supported on this architecture of ANEs due to  lack of support for configured 4cc code. No multiplanar compression eligible.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)v73, a3, 0);
    Espresso::emit_kernel_validation_warning(v67, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)&__p.__r_.__value_.__l.__data_);
    if (v74 < 0)
      operator delete(v73[0]);
    v59 = v67;
LABEL_142:
    std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v59);
LABEL_84:
    v30 = 0;
    goto LABEL_85;
  }
  if ((v23 & 0xFFFFEFFF) == 0x26386630)
    v30 = 1;
  else
    v30 = v30;
  if (v23 > 875836533)
  {
    if (v23 <= 1886859823)
    {
      if (v23 == 875836534)
        goto LABEL_85;
      v55 = 1885745712;
    }
    else
    {
      if (v23 == 1886859824 || v23 == 2016686640)
        goto LABEL_85;
      v55 = 2019963440;
    }
  }
  else if (v23 <= 875704421)
  {
    if (v23 == 641230384)
      goto LABEL_85;
    v55 = 641234480;
  }
  else
  {
    if (v23 == 875704422 || v23 == 875704438)
      goto LABEL_85;
    v55 = 875836518;
  }
  if (v23 != v55)
  {
    v63 = a2[1];
    v66[0] = *a2;
    v66[1] = v63;
    if (v63)
    {
      v64 = &v63->u64[1];
      do
        v65 = __ldxr(v64);
      while (__stxr(v65 + 1, v64));
    }
    std::string::basic_string[abi:ne180100]<0>(v73, "Plane rw kernel is not supported for this code.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)v73, a3, 0);
    Espresso::emit_kernel_validation_warning(v66, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)&__p.__r_.__value_.__l.__data_);
    if (v74 < 0)
      operator delete(v73[0]);
    std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v66);
  }
LABEL_85:

  v47 = v82;
  if (v82)
  {
    v48 = (unint64_t *)&v82->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  return v30;
}

void sub_1913AA514(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25)
{
  void *v25;
  uint64_t v26;

  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t(&a25);
  if (a24 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v26 - 88);
  _Unwind_Resume(a1);
}

const char *Espresso::generic_plane_rw_kernel::kernel_type_str(Espresso::generic_plane_rw_kernel *this)
{
  return "plane_rw";
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::plane_rw_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

void Espresso::ANECompilerEngine::plane_rw_kernel::compile(Espresso::ANECompilerEngine::plane_rw_kernel *this, Espresso::ANECompilerEngine::compiler *a2, id *a3)
{
  id *v3;
  Espresso::ANECompilerEngine::plane_rw_kernel *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  id *v10;
  void *v11;
  __CFString *v12;
  void *v13;
  void *v14;
  void *v15;
  id *v16;
  uint64_t v17;
  Espresso::ANECompilerEngine::plane_rw_kernel *v18;
  uint64_t v19;
  Espresso::ANECompilerEngine::compiler *v20;
  id *v21;
  uint64_t i;
  uint64_t v23;
  std::string v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *__p;
  char v29;
  id v30;
  __CFString *v31;
  id v32;
  void **v33[2];

  v3 = a3;
  v5 = this;
  v6 = *((unsigned int *)this + 71);
  if ((_DWORD)v6)
  {
    v7 = 1;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a3[4] - (_BYTE *)a3[3]) >> 3);
    v7 = v8 + 1;
    if (v8 == -1)
      return;
  }
  v9 = 0;
  v10 = &v32;
  do
  {
    v11 = (void *)objc_opt_new();
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v24.__r_.__value_.__l.__data_, v3);
    objc_storeStrong(v10, v11);
    v12 = v31;
    if ((_DWORD)v6)
    {
      v31 = CFSTR("PlaneWriter");

      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", *((unsigned int *)v5 + 71));
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "setObject:forKeyedSubscript:", v13, CFSTR("Output4CCFormat"));

    }
    else
    {
      v31 = CFSTR("PlaneReader");

      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", *((unsigned int *)v5 + 70));
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "setObject:forKeyedSubscript:", v14, CFSTR("Input4CCFormat"));

      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", v9);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "setObject:forKeyedSubscript:", v15, CFSTR("PlaneIndex"));

      if (v9)
        std::string::operator=(&v24, (const std::string *)(v25 + 24 * v9 - 24));
      v16 = v10;
      v17 = v7;
      v18 = v5;
      v19 = v6;
      v20 = a2;
      v21 = v3;
      v23 = v25;
      for (i = v26; i != v23; i -= 24)
      {
        if (*(char *)(i - 1) < 0)
          operator delete(*(void **)(i - 24));
      }
      v26 = v23;
      v3 = v21;
      a2 = v20;
      v6 = v19;
      v5 = v18;
      v7 = v17;
      v10 = v16;
    }
    Espresso::ANECompilerEngine::compiler::add_unit(a2, (const Espresso::ANECompilerEngine::compiler::unit_t *)&v24);

    if (v29 < 0)
      operator delete(__p);
    v33[0] = (void **)&v27;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v33);
    v33[0] = (void **)&v25;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v33);
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v24.__r_.__value_.__l.__data_);

    ++v9;
  }
  while (v9 != v7);
}

void sub_1913AA8E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  void *v4;
  va_list va;

  va_start(va, a3);

  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t((id *)va);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::plane_rw_kernel::compile(Espresso::ANECompilerEngine::plane_rw_kernel *this, Espresso::ANECompilerEngine::compiler *a2, id *a3)
{
  Espresso::ANECompilerEngine::plane_rw_kernel::compile((Espresso::ANECompilerEngine::plane_rw_kernel *)((char *)this - 288), a2, a3);
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::plane_rw_kernel::~plane_rw_kernel(void **this)
{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 36);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
}

{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 36);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANECompilerEngine::fill_kernel::~fill_kernel(void **this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 40);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 40);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANECompilerEngine::fill_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob((_QWORD *)(a1 + 320), a3, a4, a5);
}

uint64_t Espresso::ANECompilerEngine::fill_kernel::is_valid_for_engine(uint64_t a1, int64x2_t **a2, uint64_t a3)
{
  int64x2_t *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  __int128 v15;
  void **v16;
  void **v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  __int128 v21;
  const void *v22;
  void *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  char v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  void *v47[2];
  char v48;
  int64x2_t *v49;
  std::__shared_weak_count *v50;
  int64x2_t *v51;
  std::__shared_weak_count *v52;
  __int128 __p;
  uint64_t v54;
  uint64_t v55[4];
  std::__shared_weak_count *v56;
  __int128 v57;
  _OWORD v58[2];
  int v59;
  void **v60;
  void **v61;
  int64x2_t *v62;
  uint64_t v63;
  void **v64;
  _BYTE v65[32];
  void *v66;
  void *v67;
  _QWORD v68[2];
  __int128 v69;
  std::__shared_weak_count *v70;
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a3 + 8) == *(_QWORD *)a3)
  {
    v59 = *(_DWORD *)(a1 + 312);
    v15 = *(_OWORD *)(a1 + 296);
    v58[0] = *(_OWORD *)(a1 + 280);
    v58[1] = v15;
    std::string::basic_string[abi:ne180100]<0>(v65, "top");
    Espresso::ANECompilerEngine::fill_kernel::decomposition(&v60, a1 + 8, (uint64_t)v58, (const void **)v65, *(_DWORD *)(a3 + 64));
    if ((v65[23] & 0x80000000) != 0)
      operator delete(*(void **)v65);
    v17 = v60;
    v16 = v61;
    if (v60 == v61)
    {
LABEL_45:
      v11 = 1;
    }
    else
    {
      while (1)
      {
        __p = 0uLL;
        v54 = 0;
        std::vector<Espresso::layer_shape>::__init_with_size[abi:ne180100]<Espresso::layer_shape*,Espresso::layer_shape*>(&__p, *(__int128 **)a3, *(__int128 **)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 6);
        memset(v55, 0, 24);
        std::vector<Espresso::layer_shape>::__init_with_size[abi:ne180100]<Espresso::layer_shape*,Espresso::layer_shape*>(v55, *(__int128 **)(a3 + 24), *(__int128 **)(a3 + 32), (uint64_t)(*(_QWORD *)(a3 + 32) - *(_QWORD *)(a3 + 24)) >> 6);
        v18 = *(std::__shared_weak_count **)(a3 + 56);
        v55[3] = *(_QWORD *)(a3 + 48);
        v56 = v18;
        if (v18)
        {
          p_shared_owners = (unint64_t *)&v18->__shared_owners_;
          do
            v20 = __ldxr(p_shared_owners);
          while (__stxr(v20 + 1, p_shared_owners));
        }
        v57 = *(_OWORD *)(a3 + 64);
        if (&__p != (__int128 *)(v17 + 2))
          std::vector<Espresso::layer_shape>::__assign_with_size[abi:ne180100]<Espresso::layer_shape*,Espresso::layer_shape*>((uint64_t *)&__p, (__int128 *)v17[2], (__int128 *)v17[3], ((_BYTE *)v17[3] - (_BYTE *)v17[2]) >> 6);
        v21 = *(_OWORD *)(v17 + 7);
        *(_OWORD *)v65 = *(_OWORD *)(v17 + 5);
        *(_OWORD *)&v65[16] = v21;
        v22 = v17[10];
        v66 = v17[9];
        v68[0] = 0;
        v68[1] = 0;
        v67 = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v67, v22, (uint64_t)v17[11], ((_BYTE *)v17[11] - (_BYTE *)v22) >> 2);
        std::vector<Espresso::layer_shape>::__assign_with_size[abi:ne180100]<Espresso::layer_shape const*,Espresso::layer_shape const*>(v55, (__int128 *)v65, &v69, 1uLL);
        if (v67)
        {
          v68[0] = v67;
          operator delete(v67);
        }
        v23 = *v17;
        v24 = (std::__shared_weak_count *)a2[1];
        v51 = *a2;
        v52 = v24;
        if (v24)
        {
          v25 = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldxr(v25);
          while (__stxr(v26 + 1, v25));
        }
        v27 = (*(uint64_t (**)(void *, int64x2_t **, __int128 *))(*(_QWORD *)v23 + 200))(v23, &v51, &__p);
        v28 = v52;
        if (v52)
        {
          v29 = (unint64_t *)&v52->__shared_owners_;
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
            std::__shared_weak_count::__release_weak(v28);
          }
        }
        if ((v27 & 1) == 0)
          break;
        v31 = v56;
        if (v56)
        {
          v32 = (unint64_t *)&v56->__shared_owners_;
          do
            v33 = __ldaxr(v32);
          while (__stlxr(v33 - 1, v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
            std::__shared_weak_count::__release_weak(v31);
          }
        }
        *(_QWORD *)v65 = v55;
        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v65);
        *(_QWORD *)v65 = &__p;
        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v65);
        v17 += 19;
        if (v17 == v16)
          goto LABEL_45;
      }
      v34 = (std::__shared_weak_count *)a2[1];
      v49 = *a2;
      v50 = v34;
      if (v34)
      {
        v35 = (unint64_t *)&v34->__shared_owners_;
        do
          v36 = __ldxr(v35);
        while (__stxr(v36 + 1, v35));
      }
      std::string::basic_string[abi:ne180100]<0>(v47, "fill_kernel: decomposition error ^");
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t((std::string *)v65, (__int128 *)v47, a3, 0);
      Espresso::emit_kernel_validation_warning(&v49, (Espresso::base_kernel::validate_for_engine_warning_t *)v65);
      v37 = v70;
      if (v70)
      {
        v38 = (unint64_t *)&v70->__shared_owners_;
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
      }
      v64 = (void **)v68;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v64);
      v64 = (void **)&v65[24];
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v64);
      if ((v65[23] & 0x80000000) != 0)
        operator delete(*(void **)v65);
      if (v48 < 0)
        operator delete(v47[0]);
      v40 = v50;
      if (v50)
      {
        v41 = (unint64_t *)&v50->__shared_owners_;
        do
          v42 = __ldaxr(v41);
        while (__stlxr(v42 - 1, v41));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }
      v43 = v56;
      if (v56)
      {
        v44 = (unint64_t *)&v56->__shared_owners_;
        do
          v45 = __ldaxr(v44);
        while (__stlxr(v45 - 1, v44));
        if (!v45)
        {
          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
          std::__shared_weak_count::__release_weak(v43);
        }
      }
      *(_QWORD *)v65 = v55;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v65);
      *(_QWORD *)v65 = &__p;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v65);
      v11 = 0;
    }
    *(_QWORD *)v65 = &v60;
    std::vector<Espresso::ANECompilerEngine::decomposition_node>::__destroy_vector::operator()[abi:ne180100]((void ***)v65);
  }
  else
  {
    v5 = a2[1];
    v62 = *a2;
    v63 = (uint64_t)v5;
    if (v5)
    {
      v6 = &v5->u64[1];
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "fill_kernel: dynamic fill not supported");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t((std::string *)v65, &__p, a3, 0);
    Espresso::emit_kernel_validation_warning(&v62, (Espresso::base_kernel::validate_for_engine_warning_t *)v65);
    v8 = v70;
    if (v70)
    {
      v9 = (unint64_t *)&v70->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    v60 = (void **)v68;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v60);
    v60 = (void **)&v65[24];
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v60);
    if ((v65[23] & 0x80000000) != 0)
      operator delete(*(void **)v65);
    if (SHIBYTE(v54) < 0)
      operator delete((void *)__p);
    v11 = v63;
    if (v63)
    {
      v12 = (unint64_t *)(v63 + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v11);
      }
      return 0;
    }
  }
  return v11;
}

void sub_1913AAF3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,char a42)
{
  uint64_t v42;

  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)(v42 - 224));
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  Espresso::base_kernel::validate_for_engine_args_t::~validate_for_engine_args_t(&a20);
  *(_QWORD *)(v42 - 224) = &a39;
  std::vector<Espresso::ANECompilerEngine::decomposition_node>::__destroy_vector::operator()[abi:ne180100]((void ***)(v42 - 224));
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::fill_kernel::compile(Espresso::ANECompilerEngine::fill_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
  Espresso::throw_exception_selector<Espresso::invalid_state_error>("fill_kernel should have been transformed to broadcasts");
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::fill_kernel::compile(Espresso::ANECompilerEngine::fill_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
  Espresso::throw_exception_selector<Espresso::invalid_state_error>("fill_kernel should have been transformed to broadcasts");
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::fill_kernel::~fill_kernel(void **this)
{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 40);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
}

{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 40);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANECompilerEngine::fill_kernel::decomposition(_QWORD *a1, uint64_t a2, uint64_t a3, const void **a4, int a5)
{
  __int128 v9;
  int v10;
  size_t v11;
  std::string *p_str;
  const void *v13;
  __int128 v14;
  void **v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  __int128 v38;
  int v39;
  int v40;
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  __int128 v54;
  char *v55;
  unint64_t v56;
  void **v57;
  void *v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  char *v68;
  unint64_t *v69;
  int v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  __int128 v73;
  _BYTE v74[64];
  void *__p[2];
  uint64_t v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  void **v80;
  std::__shared_weak_count *v81;
  int v82;
  int v83;
  char v84;
  int v85;
  char v86;
  _QWORD v87[2];
  uint64_t v88;
  std::__shared_weak_count *v89;
  __int128 v90;
  _BYTE v91[64];
  __int128 v92;
  uint64_t v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  std::string __str;
  __int128 v98;
  int v99;
  int v100;
  int v101;
  __int128 v102;
  _BYTE v103[32];
  uint64_t v104;
  void *v105;
  void *v106;
  uint64_t v107;
  __int128 v108;
  void *v109;
  void *v110;
  void *v111[5];
  char v112;
  _BYTE v113[152];
  _QWORD v114[4];

  v114[1] = *MEMORY[0x1E0C80C00];
  v101 = a5;
  *(_QWORD *)&v9 = 0x100000001;
  *((_QWORD *)&v9 + 1) = 0x100000001;
  v98 = v9;
  v10 = *(_DWORD *)(a3 + 24);
  v99 = 1;
  v100 = v10;
  if (*((char *)a4 + 23) >= 0)
    v11 = *((unsigned __int8 *)a4 + 23);
  else
    v11 = (size_t)a4[1];
  p_str = &__str;
  std::string::basic_string[abi:ne180100]((uint64_t)&__str, v11 + 8);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  if (v11)
  {
    if (*((char *)a4 + 23) >= 0)
      v13 = a4;
    else
      v13 = *a4;
    memmove(p_str, v13, v11);
  }
  strcpy((char *)p_str + v11, "__@const");
  v93 = 0;
  *(_OWORD *)&v91[48] = 0u;
  v92 = 0u;
  v90 = 0u;
  memset(v91, 0, 28);
  *(_QWORD *)&v14 = 0x100000001;
  *((_QWORD *)&v14 + 1) = 0x100000001;
  *(_OWORD *)&v91[28] = v14;
  *(_DWORD *)&v91[44] = -1;
  v94 = 0u;
  v95 = 0u;
  v96 = 0u;
  Espresso::abstract_engine_factory::shared(&v80);
  v15 = v80;
  std::string::basic_string[abi:ne180100]<0>(v103, "load_constant");
  LODWORD(v102) = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a2 + 8))(*(_QWORD *)(*(_QWORD *)a2 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv((uint64_t)v15, a2, (uint64_t)v103, (uint64_t)&v98, (int *)&v102);
  v16 = v73;
  v73 = 0uLL;
  v17 = (std::__shared_weak_count *)*((_QWORD *)&v90 + 1);
  v90 = v16;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (*((_QWORD *)&v73 + 1))
  {
    v20 = (unint64_t *)(*((_QWORD *)&v73 + 1) + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v73 + 1) + 16))(*((_QWORD *)&v73 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v73 + 1));
    }
  }
  if ((v103[23] & 0x80000000) != 0)
    operator delete(*(void **)v103);
  v22 = v81;
  if (v81)
  {
    v23 = (unint64_t *)&v81->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v88, 1, 1, 1, 1);
  v25 = v88;
  **(_DWORD **)(v88 + 24) = *(_DWORD *)a3;
  if ((_QWORD)v90
  {
    *(_QWORD *)v103 = v26;
    *(_QWORD *)&v103[8] = *((_QWORD *)&v90 + 1);
    if (*((_QWORD *)&v90 + 1))
    {
      v27 = (unint64_t *)(*((_QWORD *)&v90 + 1) + 8);
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
    }
  }
  else
  {
    v26 = 0;
    *(_OWORD *)v103 = 0uLL;
  }
  v29 = v89;
  v87[0] = v25;
  v87[1] = v89;
  if (v89)
  {
    v30 = (unint64_t *)&v89->__shared_owners_;
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  Espresso::generic_load_constant_kernel::set_constant_blob(v26, (uint64_t)v87);
  if (v29)
  {
    v32 = (unint64_t *)&v29->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v34 = *(std::__shared_weak_count **)&v103[8];
  if (*(_QWORD *)&v103[8])
  {
    v35 = (unint64_t *)(*(_QWORD *)&v103[8] + 8);
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>((std::vector<std::string> *)&v94, 0, 0, 0);
  std::vector<Espresso::layer_shape>::__assign_with_size[abi:ne180100]<Espresso::layer_shape const*,Espresso::layer_shape const*>((uint64_t *)v91, 0, 0, 0);
  std::string::operator=((std::string *)((char *)&v95 + 8), &__str);
  v73 = 0uLL;
  *(_QWORD *)v74 = 0;
  (*(void (**)(_BYTE *__return_ptr, _QWORD, __int128 *))(*(_QWORD *)v90 + 64))(v103, v90, &v73);
  v37 = *(_QWORD *)(*(_QWORD *)v103 + 32);
  v38 = *(_OWORD *)(*(_QWORD *)v103 + 16);
  *(_OWORD *)&v91[24] = **(_OWORD **)v103;
  *(_OWORD *)&v91[40] = v38;
  *(_QWORD *)&v91[56] = v37;
  if (&v91[24] != *(_BYTE **)v103)
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)&v92, *(char **)(*(_QWORD *)v103 + 40), *(_QWORD *)(*(_QWORD *)v103 + 48), (uint64_t)(*(_QWORD *)(*(_QWORD *)v103 + 48) - *(_QWORD *)(*(_QWORD *)v103 + 40)) >> 2);
  v80 = (void **)v103;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v80);
  v80 = (void **)&v73;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v80);
  v39 = *(_DWORD *)(a3 + 4);
  v40 = *(_DWORD *)(a3 + 8);
  if (v39 <= 1 && v40 <= 1 && *(int *)(a3 + 12) <= 1 && *(int *)(a3 + 16) <= 1 && *(int *)(a3 + 20) < 2)
  {
    std::string::operator=((std::string *)((char *)&v95 + 8), (const std::string *)a4);
    Espresso::ANECompilerEngine::decomposition_node::decomposition_node((uint64_t)v103, (uint64_t)&v90);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
    *(_QWORD *)&v73 = a1;
    BYTE8(v73) = 0;
    v68 = (char *)operator new(0x98uLL);
    *a1 = v68;
    a1[1] = v68;
    a1[2] = v68 + 152;
    a1[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::decomposition_node>,Espresso::ANECompilerEngine::decomposition_node const*,Espresso::ANECompilerEngine::decomposition_node const*,Espresso::ANECompilerEngine::decomposition_node*>((uint64_t)(a1 + 2), (uint64_t)v103, (uint64_t)v113, (uint64_t)v68);
    if (v112 < 0)
      operator delete(v111[3]);
    *(_QWORD *)&v73 = v111;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v73);
    if (v109)
    {
      v110 = v109;
      operator delete(v109);
    }
    *(_QWORD *)&v73 = &v103[16];
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v73);
    v59 = *(std::__shared_weak_count **)&v103[8];
    if (*(_QWORD *)&v103[8])
    {
      v69 = (unint64_t *)(*(_QWORD *)&v103[8] + 8);
      do
        v61 = __ldaxr(v69);
      while (__stlxr(v61 - 1, v69));
LABEL_94:
      if (!v61)
      {
        ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
        std::__shared_weak_count::__release_weak(v59);
      }
    }
  }
  else
  {
    v84 = 0;
    v85 = 0;
    v86 = 0;
    v80 = (void **)__PAIR64__(v40, v39);
    v81 = *(std::__shared_weak_count **)(a3 + 12);
    v82 = *(_DWORD *)(a3 + 20);
    v83 = -1;
    v76 = 0;
    *(_OWORD *)&v74[48] = 0u;
    *(_OWORD *)__p = 0u;
    v73 = 0u;
    memset(v74, 0, 28);
    *(_QWORD *)&v41 = 0x100000001;
    *((_QWORD *)&v41 + 1) = 0x100000001;
    *(_OWORD *)&v74[28] = v41;
    *(_DWORD *)&v74[44] = -1;
    v77 = 0u;
    v78 = 0u;
    v79 = 0u;
    Espresso::abstract_engine_factory::shared(&v71);
    v42 = v71;
    std::string::basic_string[abi:ne180100]<0>(v103, "broadcast");
    v70 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a2 + 8))(*(_QWORD *)(*(_QWORD *)a2 + 8));
    Espresso::abstract_engine_factory::make_kernel_priv(v42, a2, (uint64_t)v103, (uint64_t)&v80, &v70);
    v43 = v102;
    v102 = 0uLL;
    v44 = (std::__shared_weak_count *)*((_QWORD *)&v73 + 1);
    v73 = v43;
    if (v44)
    {
      v45 = (unint64_t *)&v44->__shared_owners_;
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
    }
    v47 = (std::__shared_weak_count *)*((_QWORD *)&v102 + 1);
    if (*((_QWORD *)&v102 + 1))
    {
      v48 = (unint64_t *)(*((_QWORD *)&v102 + 1) + 8);
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
    }
    if ((v103[23] & 0x80000000) != 0)
      operator delete(*(void **)v103);
    v50 = v72;
    if (v72)
    {
      v51 = (unint64_t *)&v72->__shared_owners_;
      do
        v52 = __ldaxr(v51);
      while (__stlxr(v52 - 1, v51));
      if (!v52)
      {
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v50);
      }
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external((std::string *)v103, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
    else
      *(std::string *)v103 = __str;
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>((std::vector<std::string> *)&v77, (std::string *)v103, (__int128 *)&v103[24], 1uLL);
    if ((v103[23] & 0x80000000) != 0)
      operator delete(*(void **)v103);
    *(_OWORD *)v103 = *(_OWORD *)&v91[24];
    *(_OWORD *)&v103[16] = *(_OWORD *)&v91[40];
    v104 = *(_QWORD *)&v91[56];
    v105 = 0;
    v106 = 0;
    v107 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v105, (const void *)v92, *((uint64_t *)&v92 + 1), (uint64_t)(*((_QWORD *)&v92 + 1) - v92) >> 2);
    std::vector<Espresso::layer_shape>::__assign_with_size[abi:ne180100]<Espresso::layer_shape const*,Espresso::layer_shape const*>((uint64_t *)v74, (__int128 *)v103, &v108, 1uLL);
    if (v105)
    {
      v106 = v105;
      operator delete(v105);
    }
    std::string::operator=((std::string *)((char *)&v78 + 8), (const std::string *)a4);
    (*(void (**)(_BYTE *__return_ptr, _QWORD, _BYTE *))(*(_QWORD *)v73 + 64))(v103, v73, v74);
    v53 = *(_QWORD *)(*(_QWORD *)v103 + 32);
    v54 = *(_OWORD *)(*(_QWORD *)v103 + 16);
    *(_OWORD *)&v74[24] = **(_OWORD **)v103;
    *(_OWORD *)&v74[40] = v54;
    *(_QWORD *)&v74[56] = v53;
    if (&v74[24] != *(_BYTE **)v103)
      std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)__p, *(char **)(*(_QWORD *)v103 + 40), *(_QWORD *)(*(_QWORD *)v103 + 48), (uint64_t)(*(_QWORD *)(*(_QWORD *)v103 + 48) - *(_QWORD *)(*(_QWORD *)v103 + 40)) >> 2);
    *(_QWORD *)&v102 = v103;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v102);
    Espresso::ANECompilerEngine::decomposition_node::decomposition_node((uint64_t)v103, (uint64_t)&v90);
    Espresso::ANECompilerEngine::decomposition_node::decomposition_node((uint64_t)v113, (uint64_t)&v73);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
    *(_QWORD *)&v102 = a1;
    BYTE8(v102) = 0;
    v55 = (char *)operator new(0x130uLL);
    *a1 = v55;
    a1[1] = v55;
    a1[2] = v55 + 304;
    a1[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::decomposition_node>,Espresso::ANECompilerEngine::decomposition_node const*,Espresso::ANECompilerEngine::decomposition_node const*,Espresso::ANECompilerEngine::decomposition_node*>((uint64_t)(a1 + 2), (uint64_t)v103, (uint64_t)v114, (uint64_t)v55);
    v56 = 304;
    do
    {
      v57 = (void **)&v103[v56];
      if ((char)v103[v56 - 1] < 0)
        operator delete(*(v57 - 3));
      *(_QWORD *)&v102 = v57 - 6;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v102);
      v58 = *(v57 - 9);
      if (v58)
      {
        __str.__r_.__value_.__r.__words[v56 / 8 + 1] = (std::string::size_type)v58;
        operator delete(v58);
      }
      *(_QWORD *)&v102 = (char *)&v92 + v56 + 8;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v102);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(v57 - 19));
      v56 -= 152;
    }
    while (v56);
    if (SHIBYTE(v79) < 0)
      operator delete(*((void **)&v78 + 1));
    *(_QWORD *)v103 = &v77;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v103);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    *(_QWORD *)v103 = v74;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v103);
    v59 = (std::__shared_weak_count *)*((_QWORD *)&v73 + 1);
    if (*((_QWORD *)&v73 + 1))
    {
      v60 = (unint64_t *)(*((_QWORD *)&v73 + 1) + 8);
      do
        v61 = __ldaxr(v60);
      while (__stlxr(v61 - 1, v60));
      goto LABEL_94;
    }
  }
  v62 = v89;
  if (v89)
  {
    v63 = (unint64_t *)&v89->__shared_owners_;
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  if (SHIBYTE(v96) < 0)
    operator delete(*((void **)&v95 + 1));
  *(_QWORD *)v103 = &v94;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v103);
  if ((_QWORD)v92)
  {
    *((_QWORD *)&v92 + 1) = v92;
    operator delete((void *)v92);
  }
  *(_QWORD *)v103 = v91;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v103);
  v65 = (std::__shared_weak_count *)*((_QWORD *)&v90 + 1);
  if (*((_QWORD *)&v90 + 1))
  {
    v66 = (unint64_t *)(*((_QWORD *)&v90 + 1) + 8);
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_1913ABA5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,int a62,__int16 a63)
{
  char a65;
  char a72;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;

  *(_QWORD *)(v72 + 8) = v73;
  std::vector<Espresso::ANECompilerEngine::decomposition_node>::__destroy_vector::operator()[abi:ne180100](&a13);
  std::allocator<Espresso::ANECompilerEngine::decomposition_node>::destroy[abi:ne180100]((uint64_t)&a72);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a39);
  std::allocator<Espresso::ANECompilerEngine::decomposition_node>::destroy[abi:ne180100]((uint64_t)&a41);
  if (a65 < 0)
    operator delete(*(void **)(v74 + 152));
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::space_to_batch_kernel::~space_to_batch_kernel(void **this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 40);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 40);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANECompilerEngine::space_to_batch_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob((_QWORD *)(a1 + 320), a3, a4, a5);
}

BOOL Espresso::ANECompilerEngine::space_to_batch_kernel::is_valid_for_engine(_DWORD *a1, uint64_t a2, _OWORD **a3)
{
  _OWORD *v6;
  std::__shared_weak_count *v7;
  const Espresso::net *v8;
  void *v9;
  int v10;
  std::__shared_weak_count *v11;
  const Espresso::net *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  _OWORD *v15;
  uint64_t v16;
  __int128 v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  const Espresso::net *v21;
  unint64_t *v22;
  unint64_t v23;
  _DWORD *v24;
  uint64_t v25;
  __int128 v26;
  unint64_t *v27;
  unint64_t v28;
  id v29;
  NSString *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  _BOOL8 v40;
  int v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  int64x2_t *v55;
  std::__shared_weak_count *v56;
  char v57;
  void *v58[2];
  char v59;
  _OWORD v60[2];
  uint64_t v61;
  void *v62;
  void *v63;
  uint64_t v64;
  const Espresso::net *v65;
  std::__shared_weak_count *v66;
  void **v67[4];
  _OWORD v68[2];
  uint64_t v69;
  void *__p;
  void *v71;
  uint64_t v72;
  const Espresso::net *v73;
  std::__shared_weak_count *v74;
  void *v75[2];
  char v76;
  std::string v77;
  _BYTE v78[24];
  _BYTE v79[32];
  std::__shared_weak_count *v80;
  int64x2_t *v81;
  std::__shared_weak_count *v82;
  const Espresso::net *v83;
  std::__shared_weak_count *v84;
  void **v85;

  v6 = a3[6];
  v83 = 0;
  v84 = 0;
  v7 = (std::__shared_weak_count *)*((_QWORD *)v6 + 10);
  if (v7 && (v84 = std::__shared_weak_count::lock(v7)) != 0)
  {
    v8 = (const Espresso::net *)*((_QWORD *)v6 + 9);
    v83 = v8;
  }
  else
  {
    v8 = 0;
  }
  Espresso::ANECompilerEngine::ane_arch_allow_network_override((uint64_t)v8 + 472);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = *((_DWORD *)*a3 + 5);
  if (v10 == 4 || v10 == -1 && *((_DWORD *)*a3 + 4) == 1)
  {
    v12 = v83;
    v11 = v84;
    v73 = v83;
    v74 = v84;
    if (v84)
    {
      p_shared_owners = (unint64_t *)&v84->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    v15 = a3[3];
    v16 = *((_QWORD *)v15 + 4);
    v17 = v15[1];
    v68[0] = *v15;
    v68[1] = v17;
    v69 = v16;
    __p = 0;
    v71 = 0;
    v72 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *((const void **)v15 + 5), *((_QWORD *)v15 + 6), (uint64_t)(*((_QWORD *)v15 + 6) - *((_QWORD *)v15 + 5)) >> 2);
    Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v75, v12, (const Espresso::layer_shape *)v68, 1);
    if (__p)
    {
      v71 = __p;
      operator delete(__p);
    }
    if (v11)
    {
      v18 = (unint64_t *)&v11->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v21 = v83;
    v20 = v84;
    v65 = v83;
    v66 = v84;
    if (v84)
    {
      v22 = (unint64_t *)&v84->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    v24 = *a3;
    v25 = *((_QWORD *)*a3 + 4);
    v26 = (*a3)[1];
    v60[0] = **a3;
    v60[1] = v26;
    v61 = v25;
    v62 = 0;
    v63 = 0;
    v64 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v62, *((const void **)v24 + 5), *((_QWORD *)v24 + 6), (uint64_t)(*((_QWORD *)v24 + 6) - *((_QWORD *)v24 + 5)) >> 2);
    Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v67, v21, (const Espresso::layer_shape *)v60, 1);
    if (v62)
    {
      v63 = v62;
      operator delete(v62);
    }
    if (v20)
    {
      v27 = (unint64_t *)&v20->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v29 = v9;
    if (Espresso::ANECompilerEngine::is_mix((Espresso::ANECompilerEngine *)v29, v30))
    {
      v57 = 0;
      std::string::basic_string[abi:ne180100]<0>(v58, "space_to_batch not supported on this architecture because of limitations with batch size.");
    }
    else if (Espresso::ANECompilerEngine::blob_shape_ane_compatible(v67, v29))
    {
      if (Espresso::ANECompilerEngine::blob_shape_ane_compatible(v75, v29))
      {
        v41 = a1[71];
        if ((v41 & 1) != 0 && v41 % 3)
        {
          v57 = 0;
          std::string::basic_string[abi:ne180100]<0>(v58, "space_to_batch block shape width must be a multiple of 2 or 3");
        }
        else if (a1[72])
        {
          v57 = 0;
          std::string::basic_string[abi:ne180100]<0>(v58, "3d space_to_batch is not supported on ANE");
        }
        else if (a1[73] || a1[74] || a1[75] || a1[76] || a1[77] || a1[78])
        {
          v57 = 0;
          std::string::basic_string[abi:ne180100]<0>(v58, "space_to_batch kernel does not support padding/crop");
        }
        else
        {
          v57 = 1;
          std::string::basic_string[abi:ne180100]<0>(v58, "Success");
        }
      }
      else
      {
        v57 = 0;
        std::string::basic_string[abi:ne180100]<0>(v58, "Output blob dimensions exceed ANE limit.");
      }
    }
    else
    {
      v57 = 0;
      std::string::basic_string[abi:ne180100]<0>(v58, "Input blob dimensions exceed ANE limit.");
    }

    v40 = v57 != 0;
    if (!v57)
    {
      v46 = *(std::__shared_weak_count **)(a2 + 8);
      v55 = *(int64x2_t **)a2;
      v56 = v46;
      if (v46)
      {
        v47 = (unint64_t *)&v46->__shared_owners_;
        do
          v48 = __ldxr(v47);
        while (__stxr(v48 + 1, v47));
      }
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v77, (__int128 *)v58, (uint64_t)a3, 0);
      Espresso::emit_kernel_validation_warning(&v55, (Espresso::base_kernel::validate_for_engine_warning_t *)&v77);
      v49 = v80;
      if (v80)
      {
        v50 = (unint64_t *)&v80->__shared_owners_;
        do
          v51 = __ldaxr(v50);
        while (__stlxr(v51 - 1, v50));
        if (!v51)
        {
          ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
          std::__shared_weak_count::__release_weak(v49);
        }
      }
      v85 = (void **)v79;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v85);
      v85 = (void **)v78;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v85);
      if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v77.__r_.__value_.__l.__data_);
      v52 = v56;
      if (v56)
      {
        v53 = (unint64_t *)&v56->__shared_owners_;
        do
          v54 = __ldaxr(v53);
        while (__stlxr(v54 - 1, v53));
        if (!v54)
        {
          ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
          std::__shared_weak_count::__release_weak(v52);
        }
      }
    }
    if (v59 < 0)
      operator delete(v58[0]);
  }
  else
  {
    v31 = *(std::__shared_weak_count **)(a2 + 8);
    v81 = *(int64x2_t **)a2;
    v82 = v31;
    if (v31)
    {
      v32 = (unint64_t *)&v31->__shared_owners_;
      do
        v33 = __ldxr(v32);
      while (__stxr(v33 + 1, v32));
    }
    std::string::basic_string[abi:ne180100]<0>(v75, "Only rank-4 inputs to space_to_batch are supported on ANE.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v77, (__int128 *)v75, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v81, (Espresso::base_kernel::validate_for_engine_warning_t *)&v77);
    v34 = v80;
    if (v80)
    {
      v35 = (unint64_t *)&v80->__shared_owners_;
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    v67[0] = (void **)v79;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v67);
    v67[0] = (void **)v78;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v67);
    if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v77.__r_.__value_.__l.__data_);
    if (v76 < 0)
      operator delete(v75[0]);
    v37 = v82;
    if (v82)
    {
      v38 = (unint64_t *)&v82->__shared_owners_;
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    v40 = 0;
  }

  v42 = v84;
  if (v84)
  {
    v43 = (unint64_t *)&v84->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  return v40;
}

void sub_1913AC240(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  void *v48;
  void *v49;
  uint64_t v50;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v50 - 88);
  _Unwind_Resume(a1);
}

void sub_1913AC330()
{
  JUMPOUT(0x1913AC320);
}

const char *Espresso::generic_space_to_batch_kernel::kernel_type_str(Espresso::generic_space_to_batch_kernel *this)
{
  return "space_to_batch";
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::space_to_batch_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

void Espresso::ANECompilerEngine::space_to_batch_kernel::compile(Espresso::ANECompilerEngine::space_to_batch_kernel *this, Espresso::ANECompilerEngine::compiler *a2, void **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  char *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  void *v17;
  __CFString *v18;
  void *v19;
  void *v20;
  std::string *v21;
  std::string *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  const char *v35;
  void *v36[2];
  char v37;
  uint64_t v38;
  uint64_t v39;
  void *__p;
  char v41;
  id v42;
  __CFString *v43;
  id v44;
  uint64_t v45;
  std::string *v46;
  _QWORD v47[4];
  std::__shared_weak_count *v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  void **v51;
  std::string *v52;
  std::string *v53;
  unint64_t v54;
  _QWORD *v55;

  v49 = 0;
  v50 = 0;
  v4 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
  if (!v4 || (v50 = std::__shared_weak_count::lock(v4)) == 0 || (v7 = *((_QWORD *)a2 + 1), (v49 = v7) == 0))
  {
    v35 = "Inconsistent state: null network";
    goto LABEL_48;
  }
  if (!*(_QWORD *)(v7 + 576))
  {
    v35 = "Inconsistent state: blob_storage";
LABEL_48:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v35);
  }
  v8 = v7 + 136;
  v36[0] = a3[6];
  v9 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7 + 136, (unsigned __int8 *)v36[0], (__int128 **)v36);
  v10 = (std::__shared_weak_count *)*((_QWORD *)v9 + 6);
  v47[3] = *((_QWORD *)v9 + 5);
  v48 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v36[0] = a3;
  v13 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8, (unsigned __int8 *)a3, (__int128 **)v36);
  v14 = (std::__shared_weak_count *)*((_QWORD *)v13 + 6);
  v47[1] = *((_QWORD *)v13 + 5);
  v47[2] = v14;
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v17 = (void *)objc_opt_new();
  v45 = 0;
  v46 = 0;
  v47[0] = 0;
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t(v36, a3);
  v18 = v43;
  if (*((_BYTE *)this + 316))
    v43 = CFSTR("BatchToSpace");
  else
    v43 = CFSTR("SpaceToBatch");

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *((unsigned int *)this + 71));
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "setObject:forKeyedSubscript:", v19, CFSTR("FactorX"));

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *((unsigned int *)this + 70));
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "setObject:forKeyedSubscript:", v20, CFSTR("FactorY"));

  objc_msgSend(v17, "setObject:forKeyedSubscript:", &unk_1E2DEDA78, CFSTR("FactorZ"));
  objc_storeStrong(&v44, v17);
  v21 = v46;
  if ((unint64_t)v46 >= v47[0])
  {
    v23 = 0x8E38E38E38E38E39 * (((uint64_t)v46 - v45) >> 4);
    if (v23 + 1 > 0x1C71C71C71C71C7)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v24 = 0x1C71C71C71C71C72 * ((v47[0] - v45) >> 4);
    if (v24 <= v23 + 1)
      v24 = v23 + 1;
    if (0x8E38E38E38E38E39 * ((v47[0] - v45) >> 4) >= 0xE38E38E38E38E3)
      v25 = 0x1C71C71C71C71C7;
    else
      v25 = v24;
    v55 = v47;
    if (v25)
      v25 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v25);
    else
      v26 = 0;
    v51 = (void **)v25;
    v52 = (std::string *)(v25 + 144 * v23);
    v53 = v52;
    v54 = v25 + 144 * v26;
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v52, (uint64_t)v36);
    v53 += 6;
    std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v45, &v51);
    v22 = v46;
    std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&v51);
  }
  else
  {
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v46, (uint64_t)v36);
    v22 = v21 + 6;
  }
  v46 = v22;
  (*(void (**)(char *, Espresso::ANECompilerEngine::compiler *, uint64_t *))(*((_QWORD *)this + 40) + 32))((char *)this + 320, a2, &v45);

  if (v41 < 0)
    operator delete(__p);
  v51 = (void **)&v39;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v51);
  v51 = (void **)&v38;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v51);
  if (v37 < 0)
    operator delete(v36[0]);
  v36[0] = &v45;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)v36);

  if (v14)
  {
    v27 = (unint64_t *)&v14->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v29 = v48;
  if (v48)
  {
    v30 = (unint64_t *)&v48->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v32 = v50;
  if (v50)
  {
    v33 = (unint64_t *)&v50->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
}

void sub_1913AC798(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  void *v27;
  void *v28;
  uint64_t v29;

  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t((id *)&a9);
  a9 = (void **)&a27;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100](&a9);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v29 - 152);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v29 - 136);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v29 - 120);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::space_to_batch_kernel::compile(Espresso::ANECompilerEngine::space_to_batch_kernel *this, Espresso::ANECompilerEngine::compiler *a2, void **a3)
{
  Espresso::ANECompilerEngine::space_to_batch_kernel::compile((Espresso::ANECompilerEngine::space_to_batch_kernel *)((char *)this - 320), a2, a3);
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::space_to_batch_kernel::~space_to_batch_kernel(void **this)
{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 40);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
}

{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 40);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANECompilerEngine::space_to_depth_kernel::~space_to_depth_kernel(void **this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 37);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 37);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANECompilerEngine::space_to_depth_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob((_QWORD *)(a1 + 296), a3, a4, a5);
}

BOOL Espresso::ANECompilerEngine::space_to_depth_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, Espresso::ANECompilerEngine *a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  const Espresso::base_kernel::validate_for_engine_args_t *v8;
  void *v9;
  std::__shared_weak_count *v10;
  const Espresso::net *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  const Espresso::net *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  unint64_t *v26;
  unint64_t v27;
  unsigned int v28;
  int v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::string v46;
  uint64_t v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  int64x2_t *v50;
  std::__shared_weak_count *v51;
  char v52[8];
  __int128 v53;
  char v54;
  char v55[8];
  std::__shared_weak_count *v56;
  _OWORD v57[2];
  uint64_t v58;
  void *__p;
  void *v60;
  uint64_t v61;
  const Espresso::base_kernel::validate_for_engine_args_t *v62;
  std::__shared_weak_count *v63;
  _BYTE v64[32];
  _OWORD v65[2];
  uint64_t v66;
  void *v67;
  void *v68;
  uint64_t v69;
  const Espresso::base_kernel::validate_for_engine_args_t *v70;
  std::__shared_weak_count *v71;
  _DWORD v72[8];
  const Espresso::base_kernel::validate_for_engine_args_t *v73;
  std::__shared_weak_count *v74;
  void **v75;

  v6 = *((_QWORD *)a3 + 6);
  v73 = 0;
  v74 = 0;
  v7 = *(std::__shared_weak_count **)(v6 + 80);
  if (v7 && (v74 = std::__shared_weak_count::lock(v7)) != 0)
  {
    v8 = *(const Espresso::base_kernel::validate_for_engine_args_t **)(v6 + 72);
    v73 = v8;
  }
  else
  {
    v8 = 0;
  }
  Espresso::ANECompilerEngine::ane_arch_allow_network_override((uint64_t)v8 + 472);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = v73;
  v10 = v74;
  v70 = v73;
  v71 = v74;
  if (v74)
  {
    p_shared_owners = (unint64_t *)&v74->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  v14 = *((_QWORD *)a3 + 3);
  v15 = *(_QWORD *)(v14 + 32);
  v16 = *(_OWORD *)(v14 + 16);
  v65[0] = *(_OWORD *)v14;
  v65[1] = v16;
  v66 = v15;
  v67 = 0;
  v68 = 0;
  v69 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v67, *(const void **)(v14 + 40), *(_QWORD *)(v14 + 48), (uint64_t)(*(_QWORD *)(v14 + 48) - *(_QWORD *)(v14 + 40)) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v72, v11, (const Espresso::layer_shape *)v65, 1);
  if (v67)
  {
    v68 = v67;
    operator delete(v67);
  }
  if (v10)
  {
    v17 = (unint64_t *)&v10->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v20 = v73;
  v19 = v74;
  v62 = v73;
  v63 = v74;
  if (v74)
  {
    v21 = (unint64_t *)&v74->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  v23 = *(_QWORD *)a3;
  v24 = *(_QWORD *)(*(_QWORD *)a3 + 32);
  v25 = *(_OWORD *)(*(_QWORD *)a3 + 16);
  v57[0] = *(_OWORD *)*(_QWORD *)a3;
  v57[1] = v25;
  v58 = v24;
  __p = 0;
  v60 = 0;
  v61 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *(const void **)(v23 + 40), *(_QWORD *)(v23 + 48), (uint64_t)(*(_QWORD *)(v23 + 48) - *(_QWORD *)(v23 + 40)) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v64, v20, (const Espresso::layer_shape *)v57, 1);
  if (__p)
  {
    v60 = __p;
    operator delete(__p);
  }
  if (v19)
  {
    v26 = (unint64_t *)&v19->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v28 = Espresso::ANECompilerEngine::bottom_compute_path(a3, v73, 0);
  Espresso::ANECompilerEngine::ane_kernel::get_ane_validator((Espresso::ANECompilerEngine::ane_kernel *)v55, (NSString *)(a1 + 296), v9);
  Espresso::ANECompilerEngine::space_to_depth_kernel::pixel_shuffle_or_unshuffle_supported((uint64_t)v52, (uint64_t)v55, v28, v9, (uint64_t)v64, v72, (int *)(a1 + 280));
  v29 = v52[0];
  if (!v52[0])
  {
    v37 = *(std::__shared_weak_count **)(a2 + 8);
    v50 = *(int64x2_t **)a2;
    v51 = v37;
    if (v37)
    {
      v38 = (unint64_t *)&v37->__shared_owners_;
      do
        v39 = __ldxr(v38);
      while (__stxr(v39 + 1, v38));
    }
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v46, &v53, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v50, (Espresso::base_kernel::validate_for_engine_warning_t *)&v46);
    v40 = v49;
    if (v49)
    {
      v41 = (unint64_t *)&v49->__shared_owners_;
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
    v75 = (void **)&v48;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v75);
    v75 = (void **)&v47;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v75);
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v46.__r_.__value_.__l.__data_);
    v43 = v51;
    if (v51)
    {
      v44 = (unint64_t *)&v51->__shared_owners_;
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }
  }
  if (v54 < 0)
    operator delete((void *)v53);
  v30 = v56;
  if (v56)
  {
    v31 = (unint64_t *)&v56->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }

  v33 = v74;
  if (v74)
  {
    v34 = (unint64_t *)&v74->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  return v29 != 0;
}

void sub_1913ACCA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,char a42)
{
  void *v42;
  uint64_t v43;

  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)&a9);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  if (a31 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a32);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v43 - 88);
  _Unwind_Resume(a1);
}

void sub_1913ACD50()
{
  JUMPOUT(0x1913ACD40);
}

void Espresso::ANECompilerEngine::space_to_depth_kernel::compile(Espresso::ANECompilerEngine::space_to_depth_kernel *this, Espresso::ANECompilerEngine::compiler *a2, void **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  char *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  __CFString *v20;
  const __CFString *v21;
  std::string *v22;
  std::string *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  const char *v36;
  void *v37[2];
  char v38;
  uint64_t v39;
  uint64_t v40;
  void *__p;
  char v42;
  id v43;
  __CFString *v44;
  id v45;
  uint64_t v46;
  std::string *v47;
  _QWORD v48[4];
  std::__shared_weak_count *v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  void **v52;
  std::string *v53;
  std::string *v54;
  unint64_t v55;
  _QWORD *v56;

  v50 = 0;
  v51 = 0;
  v4 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
  if (!v4 || (v51 = std::__shared_weak_count::lock(v4)) == 0 || (v7 = *((_QWORD *)a2 + 1), (v50 = v7) == 0))
  {
    v36 = "Inconsistent state: null network";
    goto LABEL_48;
  }
  if (!*(_QWORD *)(v7 + 576))
  {
    v36 = "Inconsistent state: blob_storage";
LABEL_48:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v36);
  }
  v8 = v7 + 136;
  v37[0] = a3[6];
  v9 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7 + 136, (unsigned __int8 *)v37[0], (__int128 **)v37);
  v10 = (std::__shared_weak_count *)*((_QWORD *)v9 + 6);
  v48[3] = *((_QWORD *)v9 + 5);
  v49 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v37[0] = a3;
  v13 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8, (unsigned __int8 *)a3, (__int128 **)v37);
  v14 = (std::__shared_weak_count *)*((_QWORD *)v13 + 6);
  v48[1] = *((_QWORD *)v13 + 5);
  v48[2] = v14;
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v17 = (void *)objc_opt_new();
  v46 = 0;
  v47 = 0;
  v48[0] = 0;
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t(v37, a3);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *((unsigned int *)this + 70));
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "setObject:forKeyedSubscript:", v18, CFSTR("FactorX"));

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *((unsigned int *)this + 70));
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "setObject:forKeyedSubscript:", v19, CFSTR("FactorY"));

  objc_msgSend(v17, "setObject:forKeyedSubscript:", &unk_1E2DEDA78, CFSTR("FactorZ"));
  v20 = v44;
  if (*((_DWORD *)this + 71) == 1)
    v21 = CFSTR("PixelShuffle");
  else
    v21 = CFSTR("PixelUnshuffle");
  v44 = (__CFString *)v21;

  objc_storeStrong(&v45, v17);
  v22 = v47;
  if ((unint64_t)v47 >= v48[0])
  {
    v24 = 0x8E38E38E38E38E39 * (((uint64_t)v47 - v46) >> 4);
    if (v24 + 1 > 0x1C71C71C71C71C7)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v25 = 0x1C71C71C71C71C72 * ((v48[0] - v46) >> 4);
    if (v25 <= v24 + 1)
      v25 = v24 + 1;
    if (0x8E38E38E38E38E39 * ((v48[0] - v46) >> 4) >= 0xE38E38E38E38E3)
      v26 = 0x1C71C71C71C71C7;
    else
      v26 = v25;
    v56 = v48;
    if (v26)
      v26 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v26);
    else
      v27 = 0;
    v52 = (void **)v26;
    v53 = (std::string *)(v26 + 144 * v24);
    v54 = v53;
    v55 = v26 + 144 * v27;
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v53, (uint64_t)v37);
    v54 += 6;
    std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v46, &v52);
    v23 = v47;
    std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&v52);
  }
  else
  {
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v47, (uint64_t)v37);
    v23 = v22 + 6;
  }
  v47 = v23;
  (*(void (**)(char *, Espresso::ANECompilerEngine::compiler *, uint64_t *))(*((_QWORD *)this + 37) + 32))((char *)this + 296, a2, &v46);

  if (v42 < 0)
    operator delete(__p);
  v52 = (void **)&v40;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v52);
  v52 = (void **)&v39;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v52);
  if (v38 < 0)
    operator delete(v37[0]);
  v37[0] = &v46;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)v37);

  if (v14)
  {
    v28 = (unint64_t *)&v14->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v30 = v49;
  if (v49)
  {
    v31 = (unint64_t *)&v49->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v33 = v51;
  if (v51)
  {
    v34 = (unint64_t *)&v51->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
}

void sub_1913AD144(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  void *v27;
  uint64_t v28;

  std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer(v28 - 104);
  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t((id *)&a9);
  a9 = (void **)&a27;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100](&a9);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v28 - 152);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v28 - 136);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v28 - 120);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::space_to_depth_kernel::compile(Espresso::ANECompilerEngine::space_to_depth_kernel *this, Espresso::ANECompilerEngine::compiler *a2, void **a3)
{
  Espresso::ANECompilerEngine::space_to_depth_kernel::compile((Espresso::ANECompilerEngine::space_to_depth_kernel *)((char *)this - 296), a2, a3);
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::space_to_depth_kernel::~space_to_depth_kernel(void **this)
{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 37);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
}

{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 37);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANECompilerEngine::space_to_depth_kernel::pixel_shuffle_or_unshuffle_supported(uint64_t a1, uint64_t a2, unsigned int a3, void *a4, uint64_t a5, _DWORD *a6, int *a7)
{
  id v12;
  __CFString *v13;
  uint64_t v14;
  __int128 v15;
  std::string *v16;
  std::string::size_type v17;
  char v18;
  uint64_t v19;
  std::string __p;
  _BYTE v21[40];
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __CFString *v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  _QWORD v31[3];

  v31[2] = *MEMORY[0x1E0C80C00];
  v12 = a4;
  if (!Espresso::ANECompilerEngine::blob_shape_ane_compatible((_DWORD *)a5, v12))
  {
    *(_BYTE *)a1 = 0;
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 8), "Input blob dimensions exceed ANE limit.");
    goto LABEL_10;
  }
  if (!Espresso::ANECompilerEngine::blob_shape_ane_compatible(a6, v12))
  {
    *(_BYTE *)a1 = 0;
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 8), "Output blob dimensions exceed ANE limit.");
    goto LABEL_10;
  }
  if (a7[2] != 1)
  {
    *(_BYTE *)a1 = 0;
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 8), "space_to_depth_kernel only supports pixel shuffle/unshuffle mode.");
    goto LABEL_10;
  }
  if (a3 >= 8 || ((0x97u >> a3) & 1) == 0)
  {
    *(_BYTE *)a1 = 0;
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 8), "Pixel (un)shuffle: invalid compute path.");
    goto LABEL_10;
  }
  v13 = off_1E2DD20A8[a3];
  ANECTensorDescInitialize();
  v27 = v13;
  v14 = *(_QWORD *)(a5 + 12);
  *(_QWORD *)&v15 = (int)v14;
  *((_QWORD *)&v15 + 1) = SHIDWORD(v14);
  v29 = v15;
  v30 = *(int *)(a5 + 8);
  *(_QWORD *)&v15 = (int)*(_QWORD *)a5;
  *((_QWORD *)&v15 + 1) = (int)HIDWORD(*(_QWORD *)a5);
  v28 = v15;
  if (a7[1] != 1)
  {
    ANECPixelUnshuffleLayerDescInitialize();
    ANECExpansionFactorInitialize();
    v24 = *a7;
    v25 = v24;
    v26 = 1;
    v22 = 0;
    v23 = 0;
    if (ANECValidatePixelUnshuffleLayer())
    {
      Espresso::ANECompilerEngine::violations_from_alternates<ANECPixelUnshuffleLayerDescAlternate>((uint64_t)v21, v23, v22);
      Espresso::ANECompilerEngine::format_validation_violations((uint64_t)&__p, (uint64_t)v21);
      v16 = std::string::insert(&__p, 0, "ANECValidatePixelUnshuffleLayer returned invalid: ");
      goto LABEL_16;
    }
LABEL_19:
    *(_BYTE *)a1 = 1;
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 8), "Success");
    goto LABEL_10;
  }
  ANECPixelShuffleLayerDescInitialize();
  ANECExpansionFactorInitialize();
  v24 = *a7;
  v25 = v24;
  v26 = 1;
  v22 = 0;
  v23 = 0;
  if (!ANECValidatePixelShuffleLayer())
    goto LABEL_19;
  Espresso::ANECompilerEngine::violations_from_alternates<ANECPixelShuffleLayerDescAlternate>((uint64_t)v21, v23, v22);
  Espresso::ANECompilerEngine::format_validation_violations((uint64_t)&__p, (uint64_t)v21);
  v16 = std::string::insert(&__p, 0, "ANECValidatePixelShuffleLayer returned invalid: ");
LABEL_16:
  v17 = v16->__r_.__value_.__r.__words[0];
  v31[0] = v16->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)v31 + 7) = *(std::string::size_type *)((char *)&v16->__r_.__value_.__r.__words[1] + 7);
  v18 = HIBYTE(v16->__r_.__value_.__r.__words[2]);
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  *(_BYTE *)a1 = 0;
  *(_QWORD *)(a1 + 23) = *(_QWORD *)((char *)v31 + 7);
  v19 = v31[0];
  *(_QWORD *)(a1 + 8) = v17;
  *(_QWORD *)(a1 + 16) = v19;
  *(_BYTE *)(a1 + 31) = v18;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)v21);
LABEL_10:

}

void sub_1913AD4EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  void *v15;

  if (a14 < 0)
    operator delete(__p);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&a15);

  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::violations_from_alternates<ANECPixelShuffleLayerDescAlternate>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  CFTypeRef *v7;
  unint64_t *v8;
  unint64_t v9;
  CFTypeRef *v10;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a2)
  {
    v6 = 0;
    v7 = (CFTypeRef *)(a3 + 8);
    do
    {
      v8 = (unint64_t *)(a3 + 608 * v6);
      if (*v8)
      {
        v9 = 0;
        v10 = v7;
        do
        {
          std::__hash_table<__CFString const*,Espresso::ANECompilerEngine::CFStringHasher,Espresso::ANECompilerEngine::CFStringEqualWrapper,std::allocator<__CFString const*>>::__emplace_unique_key_args<__CFString const*,__CFString const* const&>((float *)a1, v10, v10);
          ++v9;
          ++v10;
        }
        while (v9 < *v8);
      }
      ++v6;
      v7 += 76;
    }
    while (v6 != a2);
  }
}

void sub_1913AD610(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::violations_from_alternates<ANECPixelUnshuffleLayerDescAlternate>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  CFTypeRef *v7;
  unint64_t *v8;
  unint64_t v9;
  CFTypeRef *v10;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a2)
  {
    v6 = 0;
    v7 = (CFTypeRef *)(a3 + 8);
    do
    {
      v8 = (unint64_t *)(a3 + 608 * v6);
      if (*v8)
      {
        v9 = 0;
        v10 = v7;
        do
        {
          std::__hash_table<__CFString const*,Espresso::ANECompilerEngine::CFStringHasher,Espresso::ANECompilerEngine::CFStringEqualWrapper,std::allocator<__CFString const*>>::__emplace_unique_key_args<__CFString const*,__CFString const* const&>((float *)a1, v10, v10);
          ++v9;
          ++v10;
        }
        while (v9 < *v8);
      }
      ++v6;
      v7 += 76;
    }
    while (v6 != a2);
  }
}

void sub_1913AD6D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::degamma_kernel::~degamma_kernel(void **this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 36);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 36);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANECompilerEngine::degamma_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob((_QWORD *)(a1 + 288), a3, a4, a5);
}

BOOL Espresso::ANECompilerEngine::degamma_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, _OWORD **a3)
{
  _OWORD *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  void *v9;
  _OWORD *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  const Espresso::net *v13;
  _OWORD *v14;
  uint64_t v15;
  __int128 v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  _OWORD *v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  const Espresso::net *v22;
  _OWORD *v23;
  uint64_t v24;
  __int128 v25;
  unint64_t *v26;
  unint64_t v27;
  id v28;
  int v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::string v43;
  uint64_t v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  int64x2_t *v47;
  std::__shared_weak_count *v48;
  unsigned __int8 v49;
  void *v50[2];
  char v51;
  _OWORD v52[2];
  uint64_t v53;
  void *__p;
  void *v55;
  uint64_t v56;
  const Espresso::net *v57;
  std::__shared_weak_count *v58;
  _DWORD v59[8];
  _OWORD v60[2];
  uint64_t v61;
  void *v62;
  void *v63;
  uint64_t v64;
  const Espresso::net *v65;
  std::__shared_weak_count *v66;
  _DWORD v67[8];
  uint64_t v68;
  std::__shared_weak_count *v69;
  void **v70;

  v6 = a3[6];
  v68 = 0;
  v69 = 0;
  v7 = (std::__shared_weak_count *)*((_QWORD *)v6 + 10);
  if (v7 && (v69 = std::__shared_weak_count::lock(v7)) != 0)
  {
    v8 = *((_QWORD *)v6 + 9);
    v68 = v8;
  }
  else
  {
    v8 = 0;
  }
  Espresso::ANECompilerEngine::ane_arch_allow_network_override(v8 + 472);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = a3[6];
  v65 = 0;
  v66 = 0;
  v11 = (std::__shared_weak_count *)*((_QWORD *)v10 + 10);
  if (v11)
  {
    v12 = std::__shared_weak_count::lock(v11);
    v66 = v12;
    if (v12)
    {
      v13 = (const Espresso::net *)*((_QWORD *)v10 + 9);
      v65 = v13;
      goto LABEL_10;
    }
  }
  else
  {
    v12 = 0;
  }
  v13 = 0;
LABEL_10:
  v14 = a3[3];
  v15 = *((_QWORD *)v14 + 4);
  v16 = v14[1];
  v60[0] = *v14;
  v60[1] = v16;
  v61 = v15;
  v62 = 0;
  v63 = 0;
  v64 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v62, *((const void **)v14 + 5), *((_QWORD *)v14 + 6), (uint64_t)(*((_QWORD *)v14 + 6) - *((_QWORD *)v14 + 5)) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v67, v13, (const Espresso::layer_shape *)v60, 1);
  if (v62)
  {
    v63 = v62;
    operator delete(v62);
  }
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v19 = a3[6];
  v57 = 0;
  v58 = 0;
  v20 = (std::__shared_weak_count *)*((_QWORD *)v19 + 10);
  if (v20)
  {
    v21 = std::__shared_weak_count::lock(v20);
    v58 = v21;
    if (v21)
    {
      v22 = (const Espresso::net *)*((_QWORD *)v19 + 9);
      v57 = v22;
      goto LABEL_22;
    }
  }
  else
  {
    v21 = 0;
  }
  v22 = 0;
LABEL_22:
  v23 = *a3;
  v24 = *((_QWORD *)*a3 + 4);
  v25 = (*a3)[1];
  v52[0] = **a3;
  v52[1] = v25;
  v53 = v24;
  __p = 0;
  v55 = 0;
  v56 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *((const void **)v23 + 5), *((_QWORD *)v23 + 6), (uint64_t)(*((_QWORD *)v23 + 6) - *((_QWORD *)v23 + 5)) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v59, v22, (const Espresso::layer_shape *)v52, 1);
  if (__p)
  {
    v55 = __p;
    operator delete(__p);
  }
  if (v21)
  {
    v26 = (unint64_t *)&v21->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v28 = v9;
  if (Espresso::ANECompilerEngine::blob_shape_ane_compatible(v59, v28))
  {
    if (Espresso::ANECompilerEngine::blob_shape_ane_compatible(v67, v28))
    {
      if (*(_DWORD *)(a1 + 280))
      {
        v49 = 0;
        std::string::basic_string[abi:ne180100]<0>(v50, "ANE Degamma only supports default gamma of 2.2.");
      }
      else
      {
        v49 = 1;
        std::string::basic_string[abi:ne180100]<0>(v50, "Success");
      }
    }
    else
    {
      v49 = 0;
      std::string::basic_string[abi:ne180100]<0>(v50, "Output blob dimensions exceed ANE limit.");
    }
  }
  else
  {
    v49 = 0;
    std::string::basic_string[abi:ne180100]<0>(v50, "Input blob dimensions exceed ANE limit.");
  }

  v29 = v49;
  if (!v49)
  {
    v34 = *(std::__shared_weak_count **)(a2 + 8);
    v47 = *(int64x2_t **)a2;
    v48 = v34;
    if (v34)
    {
      v35 = (unint64_t *)&v34->__shared_owners_;
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
    }
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v43, (__int128 *)v50, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v47, (Espresso::base_kernel::validate_for_engine_warning_t *)&v43);
    v37 = v46;
    if (v46)
    {
      v38 = (unint64_t *)&v46->__shared_owners_;
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    v70 = (void **)&v45;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v70);
    v70 = (void **)&v44;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v70);
    if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v43.__r_.__value_.__l.__data_);
    v40 = v48;
    if (v48)
    {
      v41 = (unint64_t *)&v48->__shared_owners_;
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
  }
  if (v51 < 0)
    operator delete(v50[0]);

  v30 = v69;
  if (v69)
  {
    v31 = (unint64_t *)&v69->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  return v29 != 0;
}

void sub_1913ADB40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,char a40)
{
  void *v40;
  void *v41;
  uint64_t v42;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v42 - 88);
  _Unwind_Resume(a1);
}

const char *Espresso::generic_degamma_kernel::kernel_type_str(Espresso::generic_degamma_kernel *this)
{
  return "degamma";
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::degamma_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

void Espresso::ANECompilerEngine::degamma_kernel::compile(Espresso::ANECompilerEngine::degamma_kernel *this, Espresso::ANECompilerEngine::compiler *a2, void **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  char *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  void *v17;
  __CFString *v18;
  std::string *v19;
  std::string *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  const char *v33;
  void *v34[2];
  char v35;
  uint64_t v36;
  uint64_t v37;
  void *__p;
  char v39;
  id v40;
  __CFString *v41;
  id v42;
  uint64_t v43;
  std::string *v44;
  _QWORD v45[4];
  std::__shared_weak_count *v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  void **v49;
  std::string *v50;
  std::string *v51;
  unint64_t v52;
  _QWORD *v53;

  v47 = 0;
  v48 = 0;
  v4 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
  if (!v4 || (v48 = std::__shared_weak_count::lock(v4)) == 0 || (v7 = *((_QWORD *)a2 + 1), (v47 = v7) == 0))
  {
    v33 = "Inconsistent state: null network";
    goto LABEL_45;
  }
  if (!*(_QWORD *)(v7 + 576))
  {
    v33 = "Inconsistent state: blob_storage";
LABEL_45:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v33);
  }
  v8 = v7 + 136;
  v34[0] = a3[6];
  v9 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7 + 136, (unsigned __int8 *)v34[0], (__int128 **)v34);
  v10 = (std::__shared_weak_count *)*((_QWORD *)v9 + 6);
  v45[3] = *((_QWORD *)v9 + 5);
  v46 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v34[0] = a3;
  v13 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8, (unsigned __int8 *)a3, (__int128 **)v34);
  v14 = (std::__shared_weak_count *)*((_QWORD *)v13 + 6);
  v45[1] = *((_QWORD *)v13 + 5);
  v45[2] = v14;
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v17 = (void *)objc_opt_new();
  v43 = 0;
  v44 = 0;
  v45[0] = 0;
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t(v34, a3);
  v18 = v41;
  v41 = CFSTR("Neuron");

  objc_msgSend(v17, "setObject:forKeyedSubscript:", CFSTR("Degamma"), CFSTR("Type"));
  objc_storeStrong(&v42, v17);
  v19 = v44;
  if ((unint64_t)v44 >= v45[0])
  {
    v21 = 0x8E38E38E38E38E39 * (((uint64_t)v44 - v43) >> 4);
    if (v21 + 1 > 0x1C71C71C71C71C7)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v22 = 0x1C71C71C71C71C72 * ((v45[0] - v43) >> 4);
    if (v22 <= v21 + 1)
      v22 = v21 + 1;
    if (0x8E38E38E38E38E39 * ((v45[0] - v43) >> 4) >= 0xE38E38E38E38E3)
      v23 = 0x1C71C71C71C71C7;
    else
      v23 = v22;
    v53 = v45;
    if (v23)
      v23 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v23);
    else
      v24 = 0;
    v49 = (void **)v23;
    v50 = (std::string *)(v23 + 144 * v21);
    v51 = v50;
    v52 = v23 + 144 * v24;
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v50, (uint64_t)v34);
    v51 += 6;
    std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v43, &v49);
    v20 = v44;
    std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&v49);
  }
  else
  {
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v44, (uint64_t)v34);
    v20 = v19 + 6;
  }
  v44 = v20;
  (*(void (**)(char *, Espresso::ANECompilerEngine::compiler *, uint64_t *))(*((_QWORD *)this + 36) + 32))((char *)this + 288, a2, &v43);

  if (v39 < 0)
    operator delete(__p);
  v49 = (void **)&v37;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v49);
  v49 = (void **)&v36;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v49);
  if (v35 < 0)
    operator delete(v34[0]);
  v34[0] = &v43;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)v34);

  if (v14)
  {
    v25 = (unint64_t *)&v14->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v27 = v46;
  if (v46)
  {
    v28 = (unint64_t *)&v46->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v30 = v48;
  if (v48)
  {
    v31 = (unint64_t *)&v48->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
}

void sub_1913ADF78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  void *v27;
  uint64_t v28;

  std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer(v28 - 88);
  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t((id *)&a9);
  a9 = (void **)&a27;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100](&a9);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v28 - 136);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v28 - 120);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v28 - 104);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::degamma_kernel::compile(Espresso::ANECompilerEngine::degamma_kernel *this, Espresso::ANECompilerEngine::compiler *a2, void **a3)
{
  Espresso::ANECompilerEngine::degamma_kernel::compile((Espresso::ANECompilerEngine::degamma_kernel *)((char *)this - 288), a2, a3);
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::degamma_kernel::~degamma_kernel(void **this)
{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 36);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
}

{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 36);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANECompilerEngine::transpose_kernel::~transpose_kernel(Espresso::ANECompilerEngine::transpose_kernel *this)
{
  void **v2;

  *(_QWORD *)this = &off_1E2D76ED8;
  v2 = (void **)((char *)this + 304);
  *((_QWORD *)this + 38) = &unk_1E2D77038;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 520);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);
  Espresso::base_kernel::~base_kernel(this);
}

{
  void **v2;

  *(_QWORD *)this = &off_1E2D76ED8;
  v2 = (void **)((char *)this + 304);
  *((_QWORD *)this + 38) = &unk_1E2D77038;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 520);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANECompilerEngine::transpose_kernel::top_shapes_for_bottom_shapes(uint64_t a1@<X0>, __int128 **a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 520);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 64))(v4);
  else
    Espresso::generic_transpose_kernel::top_shapes_for_bottom_shapes((unsigned int *)a1, a2, a3);
}

void Espresso::ANECompilerEngine::transpose_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob((_QWORD *)(a1 + 304), a3, a4, a5);
}

void Espresso::ANECompilerEngine::transpose_kernel::compile(Espresso::ANECompilerEngine::transpose_kernel *this, Espresso::ANECompilerEngine::compiler *a2, void **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  char *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  char *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  int v17;
  int v18;
  int v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  const char *v28;
  char *v29;
  uint64_t v30;
  _QWORD v31[4];
  std::__shared_weak_count *v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  char **v35;
  char v36;
  void *v37[2];
  int v38;
  int v39;
  uint64_t v40;
  void *__p;
  _QWORD v42[6];
  char v43;
  id v44;
  id v45;
  id v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v33 = 0;
  v34 = 0;
  v4 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
  if (!v4 || (v34 = std::__shared_weak_count::lock(v4)) == 0 || (v7 = *((_QWORD *)a2 + 1), (v33 = v7) == 0))
  {
    v28 = "Inconsistent state: null network";
    goto LABEL_46;
  }
  if (!*(_QWORD *)(v7 + 576))
  {
    v28 = "Inconsistent state: blob_storage";
LABEL_46:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v28);
  }
  v37[0] = a3[6];
  v8 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7 + 136, (unsigned __int8 *)v37[0], (__int128 **)v37);
  v10 = *((_QWORD *)v8 + 5);
  v9 = (std::__shared_weak_count *)*((_QWORD *)v8 + 6);
  v31[3] = v10;
  v32 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v37[0] = a3;
  v13 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7 + 136, (unsigned __int8 *)a3, (__int128 **)v37);
  v14 = (std::__shared_weak_count *)*((_QWORD *)v13 + 6);
  v31[1] = *((_QWORD *)v13 + 5);
  v31[2] = v14;
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  Espresso::abstract_blob_container::shape((char *)v37, v10);
  if (v38 == 1)
    v17 = 4;
  else
    v17 = 5;
  if (v39 == -1)
    v18 = v17;
  else
    v18 = v39;
  if (__p)
  {
    v42[0] = __p;
    operator delete(__p);
  }
  if (*((_QWORD *)this + 65))
  {
    v19 = 1;
  }
  else if (v18 == 5)
  {
    v19 = *(_BYTE *)(v7 + 1281) == 0;
  }
  else
  {
    v19 = -1;
  }
  Espresso::ANECompilerEngine::CodegenTransposeUnit((uint64_t)v37, (unsigned int *)this + 70, (uint64_t)a3, v19);
  v29 = 0;
  v30 = 0;
  v31[0] = 0;
  v35 = &v29;
  v36 = 0;
  v29 = (char *)operator new(0x90uLL);
  v30 = (uint64_t)v29;
  v31[0] = v29 + 144;
  v30 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>,Espresso::ANECompilerEngine::compiler::unit_t const*,Espresso::ANECompilerEngine::compiler::unit_t const*,Espresso::ANECompilerEngine::compiler::unit_t*>((uint64_t)v31, (uint64_t)v37, (uint64_t)&v47, (uint64_t)v29);

  if (v43 < 0)
    operator delete((void *)v42[4]);
  v35 = (char **)v42;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v35);
  v35 = (char **)&v40;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v35);
  if (SHIBYTE(v39) < 0)
    operator delete(v37[0]);
  (*(void (**)(char *, Espresso::ANECompilerEngine::compiler *, char **))(*((_QWORD *)this + 38) + 32))((char *)this + 304, a2, &v29);
  v37[0] = &v29;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)v37);
  if (v14)
  {
    v20 = (unint64_t *)&v14->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v22 = v32;
  if (v32)
  {
    v23 = (unint64_t *)&v32->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = v34;
  if (v34)
  {
    v26 = (unint64_t *)&v34->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
}

void sub_1913AE43C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  va_list va1;
  uint64_t v10;
  uint64_t v11;
  va_list va2;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va3;

  va_start(va3, a4);
  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v8 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v11 = va_arg(va3, _QWORD);
  v13 = va_arg(va3, _QWORD);
  v14 = va_arg(va3, _QWORD);
  v15 = va_arg(va3, _QWORD);
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)va3);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::transpose_kernel::compile(Espresso::ANECompilerEngine::transpose_kernel *this, Espresso::ANECompilerEngine::compiler *a2, void **a3)
{
  Espresso::ANECompilerEngine::transpose_kernel::compile((Espresso::ANECompilerEngine::transpose_kernel *)((char *)this - 304), a2, a3);
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::transpose_kernel::~transpose_kernel(Espresso::ANECompilerEngine::transpose_kernel *this)
{
  Espresso::base_kernel *v2;

  v2 = (Espresso::ANECompilerEngine::transpose_kernel *)((char *)this - 304);
  *((_QWORD *)this - 38) = &off_1E2D76ED8;
  *(_QWORD *)this = &unk_1E2D77038;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 216);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((void **)this);
  Espresso::base_kernel::~base_kernel(v2);
}

{
  Espresso::base_kernel *v2;

  v2 = (Espresso::ANECompilerEngine::transpose_kernel *)((char *)this - 304);
  *((_QWORD *)this - 38) = &off_1E2D76ED8;
  *(_QWORD *)this = &unk_1E2D77038;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 216);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((void **)this);
  Espresso::base_kernel::~base_kernel(v2);
  JUMPOUT(0x19401CD90);
}

double Espresso::ANECompilerEngine::flatten_kernel::flatten_kernel(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v5;
  char v6;
  double result;

  v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_QWORD *)(v5 + 280) = 0;
  v6 = *(_BYTE *)(*a2 + 123);
  *(_OWORD *)(v5 + 424) = 0u;
  *(_OWORD *)(v5 + 440) = 0u;
  *(_OWORD *)(v5 + 296) = 0u;
  *(_OWORD *)(v5 + 312) = 0u;
  *(_OWORD *)(v5 + 328) = 0u;
  *(_BYTE *)(v5 + 344) = 0;
  *(_OWORD *)(v5 + 352) = 0u;
  *(_OWORD *)(v5 + 368) = 0u;
  *(_OWORD *)(v5 + 384) = 0u;
  *(_OWORD *)(v5 + 400) = 0u;
  *(_BYTE *)(v5 + 416) = 0;
  *(_DWORD *)(v5 + 456) = 1065353216;
  *(_WORD *)(v5 + 464) = 0;
  *(_BYTE *)(v5 + 466) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *(double *)(v5 + 468) = result;
  *(_BYTE *)(v5 + 476) = 0;
  *(_QWORD *)(v5 + 480) = 0;
  *(_QWORD *)(v5 + 488) = 0;
  *(_BYTE *)(v5 + 496) = v6;
  *(_QWORD *)v5 = &off_1E2D75440;
  *(_QWORD *)(v5 + 288) = &unk_1E2D755A0;
  *(_QWORD *)(v5 + 280) = *a3;
  return result;
}

__n128 Espresso::ANECompilerEngine::reshape_kernel::reshape_kernel(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char v7;
  __n128 result;
  __int128 v14;

  v5 = a1 + 296;
  v6 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_OWORD *)(v6 + 280) = 0u;
  *(_OWORD *)v5 = xmmword_191A93460;
  *(_WORD *)(v6 + 312) = 1;
  *(_DWORD *)(v6 + 316) = 1;
  v7 = *(_BYTE *)(*a2 + 123);
  *(_OWORD *)(v6 + 456) = 0u;
  *(_OWORD *)(v6 + 472) = 0u;
  *(_OWORD *)(v6 + 328) = 0u;
  *(_OWORD *)(v6 + 344) = 0u;
  *(_OWORD *)(v6 + 360) = 0u;
  *(_BYTE *)(v6 + 376) = 0;
  *(_OWORD *)(v6 + 384) = 0u;
  *(_OWORD *)(v6 + 400) = 0u;
  *(_OWORD *)(v6 + 416) = 0u;
  *(_OWORD *)(v6 + 432) = 0u;
  *(_BYTE *)(v6 + 448) = 0;
  *(_DWORD *)(v6 + 488) = 1065353216;
  *(_WORD *)(v6 + 496) = 0;
  *(_BYTE *)(v6 + 498) = 0;
  __asm { FMOV            V1.2S, #1.0 }
  *(_QWORD *)(v5 + 204) = _D1;
  *(_BYTE *)(v6 + 508) = 0;
  *(_OWORD *)(v6 + 512) = 0u;
  *(_BYTE *)(v6 + 528) = v7;
  *(_QWORD *)v6 = &off_1E2D75640;
  *(_QWORD *)(v6 + 320) = &unk_1E2D757A0;
  *(_BYTE *)(v6 + 529) = 0;
  result = *(__n128 *)a3;
  v14 = *(_OWORD *)(a3 + 16);
  *(_QWORD *)(v6 + 312) = *(_QWORD *)(a3 + 32);
  *(__n128 *)(v6 + 280) = result;
  *(_OWORD *)(v6 + 296) = v14;
  return result;
}

__n128 Espresso::ANECompilerEngine::general_padding_kernel::general_padding_kernel(uint64_t a1, _QWORD *a2, int a3, uint64_t a4)
{
  uint64_t v7;
  char v8;
  __n128 result;
  __int128 v15;
  __int128 v16;

  v7 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_OWORD *)(v7 + 340) = 0u;
  *(_OWORD *)(v7 + 312) = 0u;
  *(_OWORD *)(v7 + 328) = 0u;
  *(_OWORD *)(v7 + 280) = 0u;
  *(_OWORD *)(v7 + 296) = 0u;
  v8 = *(_BYTE *)(*a2 + 123);
  *(_OWORD *)(v7 + 496) = 0u;
  *(_OWORD *)(v7 + 512) = 0u;
  *(_OWORD *)(v7 + 368) = 0u;
  *(_OWORD *)(v7 + 384) = 0u;
  *(_OWORD *)(v7 + 400) = 0u;
  *(_BYTE *)(v7 + 416) = 0;
  *(_OWORD *)(v7 + 424) = 0u;
  *(_OWORD *)(v7 + 440) = 0u;
  *(_OWORD *)(v7 + 456) = 0u;
  *(_OWORD *)(v7 + 472) = 0u;
  *(_BYTE *)(v7 + 488) = 0;
  *(_DWORD *)(v7 + 528) = 1065353216;
  *(_WORD *)(v7 + 536) = 0;
  *(_BYTE *)(v7 + 538) = 0;
  __asm { FMOV            V1.2S, #1.0 }
  *(_QWORD *)(v7 + 540) = _D1;
  *(_BYTE *)(v7 + 548) = 0;
  *(_OWORD *)(v7 + 552) = 0u;
  *(_BYTE *)(v7 + 568) = v8;
  *(_QWORD *)v7 = &off_1E2D7AC30;
  *(_QWORD *)(v7 + 360) = &unk_1E2D7AD98;
  *(_OWORD *)(v7 + 576) = 0u;
  *(_DWORD *)(v7 + 592) = a3;
  *(_OWORD *)(v7 + 280) = *(_OWORD *)a4;
  result = *(__n128 *)(a4 + 16);
  v15 = *(_OWORD *)(a4 + 32);
  v16 = *(_OWORD *)(a4 + 48);
  *(_OWORD *)(v7 + 340) = *(_OWORD *)(a4 + 60);
  *(_OWORD *)(v7 + 312) = v15;
  *(_OWORD *)(v7 + 328) = v16;
  *(__n128 *)(v7 + 296) = result;
  return result;
}

uint64_t Espresso::ANECompilerEngine::tensor_zero_pad_kernel::tensor_zero_pad_kernel(uint64_t a1, _QWORD *a2, const void *a3)
{
  uint64_t v6;
  char v7;

  v6 = Espresso::base_kernel::base_kernel(a1, a2) + 280;
  *(_BYTE *)(a1 + 280) = 0;
  *(_OWORD *)(v6 + 20) = 0u;
  *(_OWORD *)(v6 + 36) = 0u;
  *(_OWORD *)(v6 + 52) = 0u;
  *(_OWORD *)(v6 + 68) = 0u;
  *(_OWORD *)(v6 + 84) = 0u;
  *(_OWORD *)(v6 + 100) = 0u;
  *(_OWORD *)(v6 + 116) = 0u;
  *(_OWORD *)(v6 + 132) = 0u;
  *(_OWORD *)(v6 + 148) = 0u;
  *(_OWORD *)(v6 + 164) = 0u;
  *(_OWORD *)(v6 + 180) = 0u;
  *(_OWORD *)(v6 + 196) = 0u;
  *(_OWORD *)(v6 + 212) = 0u;
  *(_OWORD *)(v6 + 228) = 0u;
  *(_OWORD *)(v6 + 244) = 0u;
  *(_OWORD *)(v6 + 4) = 0u;
  *(_QWORD *)(v6 + 257) = 0;
  v7 = *(_BYTE *)(*a2 + 123);
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_BYTE *)(a1 + 608) = 0;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_BYTE *)(a1 + 680) = 0;
  *(_DWORD *)(a1 + 720) = 1065353216;
  *(_WORD *)(a1 + 728) = 0;
  *(_BYTE *)(a1 + 730) = 0;
  __asm { FMOV            V1.2S, #1.0 }
  *(_QWORD *)(a1 + 732) = _D1;
  *(_BYTE *)(a1 + 740) = 0;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_BYTE *)(a1 + 760) = v7;
  *(_QWORD *)a1 = &off_1E2D7B248;
  *(_QWORD *)(a1 + 552) = &unk_1E2D7B3A8;
  memcpy((void *)v6, a3, 0x109uLL);
  return a1;
}

void ___ZN8Espresso17ANECompilerEngine22tensor_zero_pad_kernel9decomposeEPNS_3netEPNS_16abstract_contextE_block_invoke(uint64_t a1, int64x2_t *a2)
{
  uint64_t v2;
  int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t **v8;
  char *v9;
  __int128 v10;
  const void *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  char *v27;
  const std::string *v28;
  std::string *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *p_shared_owners;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  std::string __str;
  void *v48[2];
  char v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  _OWORD v54[2];
  uint64_t v55;
  void *__p;
  void *v57;
  uint64_t v58;
  _BYTE v59[20];
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  void *v63;
  _BYTE *v64;
  uint64_t v65;
  int v66;
  int v67;
  std::string v68;
  __int128 *v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;

  v2 = *(_QWORD *)(a2->i64[0] + 8);
  if (v2 == *(_QWORD *)(a1 + 32))
  {
    v5 = (***(uint64_t (****)(_QWORD))(v2 + 8))(*(_QWORD *)(v2 + 8));
    v6 = *(_QWORD *)(a1 + 40);
    v7 = a2[3].i32[2];
    v66 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 32) + 16 * v7) + 12);
    v67 = v5;
    v8 = (uint64_t **)(v6 + 184);
    v68.__r_.__value_.__r.__words[0] = v7;
    v69 = (__int128 *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v6 + 56, v7, &v68)[3];
    v9 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8, v69, &v69);
    v10 = *(_OWORD *)(v9 + 72);
    v60 = *(_OWORD *)(v9 + 56);
    v61 = v10;
    v11 = (const void *)*((_QWORD *)v9 + 12);
    v62 = *((_QWORD *)v9 + 11);
    v63 = 0;
    v64 = 0;
    v65 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v63, v11, *((_QWORD *)v9 + 13), (uint64_t)(*((_QWORD *)v9 + 13) - (_QWORD)v11) >> 2);
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2->i64[0] + 320))(a2->i64[0]);
    v54[0] = v60;
    v54[1] = v61;
    v55 = v62;
    __p = 0;
    v57 = 0;
    v58 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v63, (uint64_t)v64, (v64 - (_BYTE *)v63) >> 2);
    Espresso::ANECompilerEngine::tensor_zero_pad_kernel::get_padding_params((uint64_t)v59, v12, (uint64_t)v54);
    if (__p)
    {
      v57 = __p;
      operator delete(__p);
    }
    v73 = 0u;
    v72 = 0u;
    v71 = 0u;
    LODWORD(v69) = a2[3].i32[2];
    v70 = 0uLL;
    v13 = a2[2].u64[1];
    if (v13 >= a2[3].i64[0])
    {
      v14 = std::vector<Espresso::net::new_layer_info>::__push_back_slow_path<Espresso::net::new_layer_info const&>(a2 + 2, (uint64_t)&v69);
    }
    else
    {
      std::allocator<Espresso::net::new_layer_info>::construct[abi:ne180100]<Espresso::net::new_layer_info,Espresso::net::new_layer_info const&>(a2[2].i64[1], (uint64_t)&v69);
      v14 = v13 + 72;
      a2[2].i64[1] = v13 + 72;
    }
    a2[2].i64[1] = v14;
    v68.__r_.__value_.__r.__words[0] = (std::string::size_type)&v72 + 8;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v68);
    v68.__r_.__value_.__r.__words[0] = (std::string::size_type)&v71;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v68);
    v15 = (std::__shared_weak_count *)*((_QWORD *)&v70 + 1);
    if (*((_QWORD *)&v70 + 1))
    {
      v16 = (unint64_t *)(*((_QWORD *)&v70 + 1) + 8);
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    Espresso::abstract_engine_factory::shared(&v50);
    v18 = v50;
    v19 = a2->i64[0];
    std::string::basic_string[abi:ne180100]<0>(v48, "general_padding");
    Espresso::abstract_engine_factory::make_kernel_priv(v18, v19 + 8, (uint64_t)v48, (uint64_t)v59, &v67);
    std::string::basic_string[abi:ne180100]<0>(&__str, "general_padding");
    v20 = a2[1].i64[0];
    v21 = *(_QWORD *)(a1 + 40) + 56;
    v22 = a2[3].i32[2];
    v46 = v22;
    v23 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v21, v22, &v46);
    v24 = *(_QWORD *)(a1 + 40) + 96;
    v25 = a2[3].i32[2];
    v45 = v25;
    v26 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v24, v25, &v45);
    LODWORD(v69) = 0;
    v70 = 0u;
    v71 = 0u;
    v72 = 0u;
    v73 = 0u;
    v27 = (char *)operator new(0xF8uLL);
    v28 = (const std::string *)(v20 + 16);
    *((_QWORD *)v27 + 1) = 0;
    *((_QWORD *)v27 + 2) = 0;
    *(_QWORD *)v27 = &off_1E2DBF0D0;
    *((_QWORD *)v27 + 3) = &off_1E2DA1A38;
    *(_OWORD *)(v27 + 56) = 0u;
    *(_OWORD *)(v27 + 72) = 0u;
    *(_OWORD *)(v27 + 104) = 0u;
    *(_OWORD *)(v27 + 120) = 0u;
    *(_OWORD *)(v27 + 136) = 0u;
    *(_OWORD *)(v27 + 152) = 0u;
    *(_OWORD *)(v27 + 161) = 0u;
    *(_OWORD *)(v27 + 40) = 0u;
    v29 = (std::string *)(v27 + 40);
    *(_OWORD *)(v27 + 88) = 0u;
    *((_OWORD *)v27 + 13) = 0u;
    *((_OWORD *)v27 + 14) = 0u;
    *((_QWORD *)v27 + 30) = 0;
    *(_QWORD *)&v70 = v27 + 24;
    *((_QWORD *)&v70 + 1) = v27;
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v27 + 11, v52, (uint64_t)v53);
    std::string::operator=(v29, v28);
    std::string::operator=((std::string *)(v70 + 40), &__str);
    v30 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)(v52 + 8) + 8))(*(_QWORD *)(*(_QWORD *)(v52 + 8) + 8));
    v31 = v70;
    *(_DWORD *)(v70 + 8) = v30;
    v32 = a2[1].i64[0];
    if (v32)
    {
      *(_DWORD *)(v31 + 12) = *(_DWORD *)(v32 + 12);
      if (*(char *)(v32 + 223) < 0)
        std::string::__init_copy_ctor_external(&v68, *(const std::string::value_type **)(v32 + 200), *(_QWORD *)(v32 + 208));
      else
        v68 = *(std::string *)(v32 + 200);
      std::string::operator=((std::string *)(v31 + 200), &v68);
      if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v68.__r_.__value_.__l.__data_);
    }
    else
    {
      v33 = *(_QWORD *)(a2[4].i64[0] + 32);
      if (*(_QWORD *)(a2[4].i64[0] + 40) != v33)
        *(_DWORD *)(v31 + 12) = *(_DWORD *)(*(_QWORD *)v33 + 12);
    }
    if (&v71 != (__int128 *)(v23 + 3))
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v71, (std::string *)v23[3], (std::string *)v23[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23[4] - v23[3]) >> 3));
    if ((_QWORD *)((char *)&v72 + 8) != v26 + 3)
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v72 + 8, (std::string *)v26[3], (std::string *)v26[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v26[4] - v26[3]) >> 3));
    LODWORD(v69) = a2[3].i32[2];
    v34 = a2[2].u64[1];
    if (v34 >= a2[3].i64[0])
    {
      v35 = std::vector<Espresso::net::new_layer_info>::__push_back_slow_path<Espresso::net::new_layer_info const&>(a2 + 2, (uint64_t)&v69);
    }
    else
    {
      std::allocator<Espresso::net::new_layer_info>::construct[abi:ne180100]<Espresso::net::new_layer_info,Espresso::net::new_layer_info const&>(a2[2].i64[1], (uint64_t)&v69);
      v35 = v34 + 72;
      a2[2].i64[1] = v34 + 72;
    }
    a2[2].i64[1] = v35;
    v68.__r_.__value_.__r.__words[0] = (std::string::size_type)&v72 + 8;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v68);
    v68.__r_.__value_.__r.__words[0] = (std::string::size_type)&v71;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v68);
    v36 = (std::__shared_weak_count *)*((_QWORD *)&v70 + 1);
    if (*((_QWORD *)&v70 + 1))
    {
      v37 = (unint64_t *)(*((_QWORD *)&v70 + 1) + 8);
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    v39 = v53;
    if (v53)
    {
      p_shared_owners = (unint64_t *)&v53->__shared_owners_;
      do
        v41 = __ldaxr(p_shared_owners);
      while (__stlxr(v41 - 1, p_shared_owners));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }
    if (v49 < 0)
      operator delete(v48[0]);
    v42 = v51;
    if (v51)
    {
      v43 = (unint64_t *)&v51->__shared_owners_;
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }
    if (v63)
    {
      v64 = v63;
      operator delete(v63);
    }
  }
}

void sub_1913AEDD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45)
{
  uint64_t v45;

  Espresso::net::new_layer_info::~new_layer_info((Espresso::net::new_layer_info *)(v45 - 120));
  if (a16 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  if (a22 < 0)
    operator delete(a17);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  if (a44)
  {
    a45 = (uint64_t)a44;
    operator delete(a44);
  }
  _Unwind_Resume(a1);
}

__n128 Espresso::ANECompilerEngine::crop_kernel::crop_kernel(uint64_t a1, _QWORD *a2, __n128 *a3)
{
  uint64_t v5;
  char v6;
  __n128 result;

  v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_OWORD *)(v5 + 280) = 0u;
  v6 = *(_BYTE *)(*a2 + 123);
  *(_OWORD *)(v5 + 432) = 0u;
  *(_OWORD *)(v5 + 448) = 0u;
  *(_OWORD *)(v5 + 304) = 0u;
  *(_OWORD *)(v5 + 320) = 0u;
  *(_OWORD *)(v5 + 336) = 0u;
  *(_BYTE *)(v5 + 352) = 0;
  *(_OWORD *)(v5 + 360) = 0u;
  *(_OWORD *)(v5 + 376) = 0u;
  *(_OWORD *)(v5 + 392) = 0u;
  *(_OWORD *)(v5 + 408) = 0u;
  *(_BYTE *)(v5 + 424) = 0;
  *(_DWORD *)(v5 + 464) = 1065353216;
  *(_WORD *)(v5 + 472) = 0;
  *(_BYTE *)(v5 + 474) = 0;
  __asm { FMOV            V1.2S, #1.0 }
  *(_QWORD *)(v5 + 476) = _D1;
  *(_BYTE *)(v5 + 484) = 0;
  *(_OWORD *)(v5 + 488) = 0u;
  *(_BYTE *)(v5 + 504) = v6;
  *(_QWORD *)v5 = &off_1E2D73D20;
  *(_QWORD *)(v5 + 296) = &unk_1E2D73E80;
  *(_OWORD *)(v5 + 512) = 0u;
  result = *a3;
  *(__n128 *)(v5 + 280) = *a3;
  return result;
}

__n128 Espresso::ANECompilerEngine::broadcast_kernel::broadcast_kernel(uint64_t a1, _QWORD *a2, int a3, uint64_t a4)
{
  uint64_t v7;
  char v8;
  __n128 result;
  __int128 v15;

  v7 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_QWORD *)(v7 + 280) = -1;
  *(_QWORD *)(v7 + 288) = -1;
  *(_QWORD *)(v7 + 296) = 0xFFFFFFFF00000001;
  *(_BYTE *)(v7 + 304) = 0;
  *(_DWORD *)(v7 + 308) = 0;
  *(_BYTE *)(v7 + 312) = 0;
  v8 = *(_BYTE *)(*a2 + 123);
  *(_OWORD *)(v7 + 456) = 0u;
  *(_OWORD *)(v7 + 472) = 0u;
  *(_OWORD *)(v7 + 328) = 0u;
  *(_OWORD *)(v7 + 344) = 0u;
  *(_OWORD *)(v7 + 360) = 0u;
  *(_BYTE *)(v7 + 376) = 0;
  *(_OWORD *)(v7 + 384) = 0u;
  *(_OWORD *)(v7 + 400) = 0u;
  *(_OWORD *)(v7 + 416) = 0u;
  *(_OWORD *)(v7 + 432) = 0u;
  *(_BYTE *)(v7 + 448) = 0;
  *(_DWORD *)(v7 + 488) = 1065353216;
  *(_WORD *)(v7 + 496) = 0;
  *(_BYTE *)(v7 + 498) = 0;
  __asm { FMOV            V1.2S, #1.0 }
  *(_QWORD *)(v7 + 500) = _D1;
  *(_BYTE *)(v7 + 508) = 0;
  *(_OWORD *)(v7 + 512) = 0u;
  *(_BYTE *)(v7 + 528) = v8;
  *(_QWORD *)v7 = &off_1E2D76AD8;
  *(_QWORD *)(v7 + 320) = &unk_1E2D76C38;
  *(_DWORD *)(v7 + 532) = a3;
  *(_DWORD *)(v7 + 536) = 0x4000;
  result = *(__n128 *)a4;
  v15 = *(_OWORD *)(a4 + 16);
  *(_BYTE *)(v7 + 312) = *(_BYTE *)(a4 + 32);
  *(__n128 *)(v7 + 280) = result;
  *(_OWORD *)(v7 + 296) = v15;
  return result;
}

uint64_t Espresso::ANECompilerEngine::inner_product_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  const Espresso::net *v8;
  uint64_t v9;
  void *v11;
  uint64_t v17;
  int v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  const Espresso::net *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  __int128 v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  _DWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  std::string *v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  BOOL is_valid_kernel_input_size;
  unint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  std::string *v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t *v62;
  int64x2_t *v63;
  uint64_t v64;
  int64x2_t *v65;
  std::__shared_weak_count *v66;
  int64x2_t *v67;
  uint64_t v68;
  std::string v69;
  std::string v70;
  std::string v71;
  _BYTE v72[24];
  _BYTE v73[32];
  std::__shared_weak_count *v74;
  int64x2_t *v75;
  uint64_t v76;
  _OWORD v77[2];
  uint64_t v78;
  void *__p;
  void *v80;
  uint64_t v81;
  const Espresso::net *v82;
  std::__shared_weak_count *v83;
  _DWORD v84[8];
  _QWORD v85[5];
  int v86;
  int v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  __int16 v91;
  uint64_t v92;
  uint64_t v93;
  __int16 v94;
  uint64_t v95;
  int v96;
  __int128 v97;
  int v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  __int16 v104;
  int v105;
  char v106;
  const Espresso::net *v107;
  std::__shared_weak_count *v108;
  void **v109;

  if (a3[1] - *a3 != 64 || a3[3] == a3[4])
    return 0;
  v6 = a3[6];
  v107 = 0;
  v108 = 0;
  v7 = *(std::__shared_weak_count **)(v6 + 80);
  if (v7 && (v108 = std::__shared_weak_count::lock(v7)) != 0)
  {
    v8 = *(const Espresso::net **)(v6 + 72);
    v107 = v8;
  }
  else
  {
    v8 = 0;
  }
  Espresso::ANECompilerEngine::ane_arch_allow_network_override((uint64_t)v8 + 472);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  __asm { FMOV            V0.2S, #1.0 }
  v90 = _D0;
  v91 = 1;
  v93 = 0;
  v92 = 0;
  v94 = 0;
  v95 = 0x1000100010001;
  v96 = 0;
  v98 = 1;
  v105 = 0;
  v106 = 0;
  v101 = 0;
  v102 = 0;
  memset(v85, 0, 32);
  v85[4] = 1;
  v97 = xmmword_191A93310;
  v99 = 0;
  v100 = 0x10000;
  v103 = 0;
  v104 = 1;
  v17 = *a3;
  v88 = *(_QWORD *)*a3;
  v89 = 0xFFFFFFFF00000000;
  v18 = *(_DWORD *)(v17 + 8);
  v19 = a3[3];
  v86 = *(_DWORD *)(v19 + 8);
  v87 = v18;
  v21 = v107;
  v20 = v108;
  v82 = v107;
  v83 = v108;
  if (v108)
  {
    p_shared_owners = (unint64_t *)&v108->__shared_owners_;
    do
      v23 = __ldxr(p_shared_owners);
    while (__stxr(v23 + 1, p_shared_owners));
    v19 = a3[3];
  }
  v24 = *(_OWORD *)(v19 + 16);
  v25 = *(_QWORD *)(v19 + 32);
  v77[0] = *(_OWORD *)v19;
  v77[1] = v24;
  v78 = v25;
  __p = 0;
  v80 = 0;
  v81 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *(const void **)(v19 + 40), *(_QWORD *)(v19 + 48), (uint64_t)(*(_QWORD *)(v19 + 48) - *(_QWORD *)(v19 + 40)) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v84, v21, (const Espresso::layer_shape *)v77, 1);
  if (__p)
  {
    v80 = __p;
    operator delete(__p);
  }
  if (v20)
  {
    v26 = (unint64_t *)&v20->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (!Espresso::ANECompilerEngine::blob_shape_ane_compatible(v84, v11))
  {
    v38 = *(_QWORD *)(a2 + 8);
    v75 = *(int64x2_t **)a2;
    v76 = v38;
    if (v38)
    {
      v39 = (unint64_t *)(v38 + 8);
      do
        v40 = __ldxr(v39);
      while (__stxr(v40 + 1, v39));
    }
    std::to_string(&v69, *(_DWORD *)a3[3]);
    v41 = std::string::insert(&v69, 0, "Output size too large for inner_product layer: ");
    v70 = *v41;
    v41->__r_.__value_.__l.__size_ = 0;
    v41->__r_.__value_.__r.__words[2] = 0;
    v41->__r_.__value_.__r.__words[0] = 0;
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v71, (__int128 *)&v70, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v75, (Espresso::base_kernel::validate_for_engine_warning_t *)&v71);
    v42 = v74;
    if (v74)
    {
      v43 = (unint64_t *)&v74->__shared_owners_;
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }
    v109 = (void **)v73;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v109);
    v109 = (void **)v72;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v109);
    if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v71.__r_.__value_.__l.__data_);
    if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v70.__r_.__value_.__l.__data_);
    if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v69.__r_.__value_.__l.__data_);
    v9 = v76;
    if (!v76)
      goto LABEL_66;
    v45 = (unint64_t *)(v76 + 8);
    do
      v37 = __ldaxr(v45);
    while (__stlxr(v37 - 1, v45));
LABEL_62:
    if (!v37)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v9);
    }
    goto LABEL_65;
  }
  v28 = (_DWORD *)a3[3];
  if (v28[1] != 1 || *v28 != 1)
  {
    v29 = *(_QWORD **)(a1 + 440);
    if (v29)
    {
      if (*v29 && (v29[4] || v29[6] || v29[8] || v29[10]))
      {
        v30 = *(_QWORD *)(a2 + 8);
        v67 = *(int64x2_t **)a2;
        v68 = v30;
        if (v30)
        {
          v31 = (unint64_t *)(v30 + 8);
          do
            v32 = __ldxr(v31);
          while (__stxr(v32 + 1, v31));
        }
        std::string::basic_string[abi:ne180100]<0>(&v70, "Quantized / palletized weights are not supported with matmul based inner product.");
        Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v71, (__int128 *)&v70, (uint64_t)a3, 0);
        Espresso::emit_kernel_validation_warning(&v67, (Espresso::base_kernel::validate_for_engine_warning_t *)&v71);
        v33 = v74;
        if (v74)
        {
          v34 = (unint64_t *)&v74->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
            std::__shared_weak_count::__release_weak(v33);
          }
        }
        v69.__r_.__value_.__r.__words[0] = (std::string::size_type)v73;
        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v69);
        v69.__r_.__value_.__r.__words[0] = (std::string::size_type)v72;
        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v69);
        if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v71.__r_.__value_.__l.__data_);
        if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v70.__r_.__value_.__l.__data_);
        v9 = v68;
        if (!v68)
          goto LABEL_66;
        v36 = (unint64_t *)(v68 + 8);
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
        goto LABEL_62;
      }
    }
  }
  if (!*(_DWORD *)(a1 + 336))
  {
    v49 = *(std::__shared_weak_count **)(a2 + 8);
    v65 = *(int64x2_t **)a2;
    v66 = v49;
    if (v49)
    {
      v50 = (unint64_t *)&v49->__shared_owners_;
      do
        v51 = __ldxr(v50);
      while (__stxr(v51 + 1, v50));
    }
    is_valid_kernel_input_size = Espresso::is_valid_kernel_input_size((uint64_t)v85, a3, 0);
    if (v49)
    {
      v53 = (unint64_t *)&v49->__shared_owners_;
      do
        v54 = __ldaxr(v53);
      while (__stlxr(v54 - 1, v53));
      if (!v54)
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
    }
    if (is_valid_kernel_input_size)
    {
      v9 = 1;
      goto LABEL_66;
    }
    v55 = *(_QWORD *)(a2 + 8);
    v63 = *(int64x2_t **)a2;
    v64 = v55;
    if (v55)
    {
      v56 = (unint64_t *)(v55 + 8);
      do
        v57 = __ldxr(v56);
      while (__stxr(v57 + 1, v56));
    }
    std::to_string(&v69, HIDWORD(v88) * v88 * v86);
    v58 = std::string::insert(&v69, 0, "kernel input size too large for inner_product layerRoughly, size_oc=Kw*Kh*Cin should be less than 65536 for INT8, 32768 for FP16. Instead size_oc=");
    v70 = *v58;
    v58->__r_.__value_.__l.__size_ = 0;
    v58->__r_.__value_.__r.__words[2] = 0;
    v58->__r_.__value_.__r.__words[0] = 0;
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v71, (__int128 *)&v70, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v63, (Espresso::base_kernel::validate_for_engine_warning_t *)&v71);
    v59 = v74;
    if (v74)
    {
      v60 = (unint64_t *)&v74->__shared_owners_;
      do
        v61 = __ldaxr(v60);
      while (__stlxr(v61 - 1, v60));
      if (!v61)
      {
        ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
        std::__shared_weak_count::__release_weak(v59);
      }
    }
    v109 = (void **)v73;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v109);
    v109 = (void **)v72;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v109);
    if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v71.__r_.__value_.__l.__data_);
    if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v70.__r_.__value_.__l.__data_);
    if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v69.__r_.__value_.__l.__data_);
    v9 = v64;
    if (!v64)
      goto LABEL_66;
    v62 = (unint64_t *)(v64 + 8);
    do
      v37 = __ldaxr(v62);
    while (__stlxr(v37 - 1, v62));
    goto LABEL_62;
  }
LABEL_65:
  v9 = 0;
LABEL_66:

  v46 = v108;
  if (v108)
  {
    v47 = (unint64_t *)&v108->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  return v9;
}

void sub_1913AF678(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,char a53)
{
  void *v53;
  uint64_t v54;

  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t(&a29);
  if (a27 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a10);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v54 - 88);
  _Unwind_Resume(a1);
}

void sub_1913AF794()
{
  JUMPOUT(0x1913AF784);
}

BOOL Espresso::ANECompilerEngine::slice_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v5;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  const Espresso::net *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  _BOOL8 v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  const Espresso::net *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  unint64_t *v35;
  unint64_t v36;
  int v37;
  __int128 *v38;
  __int128 v39;
  const Espresso::net *v40;
  char *v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  int64x2_t *v55;
  std::__shared_weak_count *v56;
  std::string *v57;
  __int128 v58;
  char v59;
  std::string v60;
  _OWORD v61[2];
  uint64_t v62;
  void *v63;
  void *v64;
  uint64_t v65;
  const Espresso::net *v66;
  std::__shared_weak_count *v67;
  void **v68[4];
  _OWORD v69[2];
  uint64_t v70;
  void *__p;
  void *v72;
  uint64_t v73;
  const Espresso::net *v74;
  std::__shared_weak_count *v75;
  __int128 v76;
  char v77;
  const Espresso::net *v78;
  std::__shared_weak_count *v79;
  std::string v80;
  _QWORD v81[3];
  _BYTE v82[32];
  std::__shared_weak_count *v83;
  int64x2_t *v84;
  std::__shared_weak_count *v85;
  void **v86;

  v5 = (_QWORD *)a3[6];
  if (*(_QWORD *)(*v5 + 224 * a3[9] + 144) - *(_QWORD *)(*v5 + 224 * a3[9] + 136) == 24)
  {
    v78 = 0;
    v79 = 0;
    v7 = (std::__shared_weak_count *)v5[10];
    if (v7 && (v8 = std::__shared_weak_count::lock(v7), (v79 = v8) != 0))
    {
      v9 = (const Espresso::net *)v5[9];
      v78 = v9;
      v74 = v9;
      v75 = v8;
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    else
    {
      v9 = 0;
      v74 = 0;
      v75 = 0;
    }
    v22 = *a3;
    v23 = *(_QWORD *)(*a3 + 32);
    v24 = *(_OWORD *)(*a3 + 16);
    v69[0] = *(_OWORD *)*a3;
    v69[1] = v24;
    v70 = v23;
    __p = 0;
    v72 = 0;
    v73 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *(const void **)(v22 + 40), *(_QWORD *)(v22 + 48), (uint64_t)(*(_QWORD *)(v22 + 48) - *(_QWORD *)(v22 + 40)) >> 2);
    Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)&v76, v9, (const Espresso::layer_shape *)v69, 1);
    if (__p)
    {
      v72 = __p;
      operator delete(__p);
    }
    v25 = v75;
    if (v75)
    {
      v26 = (unint64_t *)&v75->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    v29 = v78;
    v28 = v79;
    v66 = v78;
    v67 = v79;
    if (v79)
    {
      v30 = (unint64_t *)&v79->__shared_owners_;
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
    }
    v32 = a3[3];
    v33 = *(_QWORD *)(v32 + 32);
    v34 = *(_OWORD *)(v32 + 16);
    v61[0] = *(_OWORD *)v32;
    v61[1] = v34;
    v62 = v33;
    v63 = 0;
    v64 = 0;
    v65 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v63, *(const void **)(v32 + 40), *(_QWORD *)(v32 + 48), (uint64_t)(*(_QWORD *)(v32 + 48) - *(_QWORD *)(v32 + 40)) >> 2);
    Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v68, v29, (const Espresso::layer_shape *)v61, 1);
    if (v63)
    {
      v64 = v63;
      operator delete(v63);
    }
    if (v28)
    {
      v35 = (unint64_t *)&v28->__shared_owners_;
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    v37 = *((_DWORD *)a3 + 16);
    v38 = *(__int128 **)(*(_QWORD *)a3[6] + 224 * a3[9] + 136);
    if (*((char *)v38 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v60, *(const std::string::value_type **)v38, *((_QWORD *)v38 + 1));
    }
    else
    {
      v39 = *v38;
      v60.__r_.__value_.__r.__words[2] = *((_QWORD *)v38 + 2);
      *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v39;
    }
    v40 = v78;
    if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*((_QWORD **)v78 + 45), &v60))
    {
      v57 = &v60;
      v41 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v40 + 44, &v60, (uint64_t)&std::piecewise_construct, (__int128 **)&v57);
      *(_OWORD *)&v80.__r_.__value_.__l.__data_ = *(_OWORD *)(v41 + 56);
      v81[0] = 0;
      v81[1] = 0;
      v80.__r_.__value_.__r.__words[2] = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v80.__r_.__value_.__r.__words[2], *((const void **)v41 + 9), *((_QWORD *)v41 + 10), (uint64_t)(*((_QWORD *)v41 + 10) - *((_QWORD *)v41 + 9)) >> 2);
      v37 = LODWORD(v80.__r_.__value_.__r.__words[1]) == -1 ? 1 : LODWORD(v80.__r_.__value_.__r.__words[1]);
      if (v80.__r_.__value_.__r.__words[2])
      {
        v81[0] = *((_QWORD *)&v80.__r_.__value_.__l + 2);
        operator delete((void *)v80.__r_.__value_.__r.__words[2]);
      }
    }
    Espresso::ANECompilerEngine::slice_kernel::supported_by_hw((uint64_t)&v57, (uint64_t)&v76, (unsigned int *)(a1 + 280), v37);
    v21 = (_BYTE)v57 != 0;
    if (!(_BYTE)v57)
    {
      v46 = *(std::__shared_weak_count **)(a2 + 8);
      v55 = *(int64x2_t **)a2;
      v56 = v46;
      if (v46)
      {
        v47 = (unint64_t *)&v46->__shared_owners_;
        do
          v48 = __ldxr(v47);
        while (__stxr(v48 + 1, v47));
      }
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v80, &v58, (uint64_t)a3, 0);
      Espresso::emit_kernel_validation_warning(&v55, (Espresso::base_kernel::validate_for_engine_warning_t *)&v80);
      v49 = v83;
      if (v83)
      {
        v50 = (unint64_t *)&v83->__shared_owners_;
        do
          v51 = __ldaxr(v50);
        while (__stlxr(v51 - 1, v50));
        if (!v51)
        {
          ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
          std::__shared_weak_count::__release_weak(v49);
        }
      }
      v86 = (void **)v82;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v86);
      v86 = (void **)v81;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v86);
      if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v80.__r_.__value_.__l.__data_);
      v52 = v56;
      if (v56)
      {
        v53 = (unint64_t *)&v56->__shared_owners_;
        do
          v54 = __ldaxr(v53);
        while (__stlxr(v54 - 1, v53));
        if (!v54)
        {
          ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
          std::__shared_weak_count::__release_weak(v52);
        }
      }
    }
    if (v59 < 0)
      operator delete((void *)v58);
    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v60.__r_.__value_.__l.__data_);
    v42 = v79;
    if (v79)
    {
      v43 = (unint64_t *)&v79->__shared_owners_;
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }
  }
  else
  {
    v12 = *(std::__shared_weak_count **)(a2 + 8);
    v84 = *(int64x2_t **)a2;
    v85 = v12;
    if (v12)
    {
      v13 = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    std::string::basic_string[abi:ne180100]<0>(&v76, "Invalid number of inputs, only slice operations with 1 input are supported on ANE");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v80, &v76, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v84, (Espresso::base_kernel::validate_for_engine_warning_t *)&v80);
    v15 = v83;
    if (v83)
    {
      v16 = (unint64_t *)&v83->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    v68[0] = (void **)v82;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v68);
    v68[0] = (void **)v81;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v68);
    if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v80.__r_.__value_.__l.__data_);
    if (v77 < 0)
      operator delete((void *)v76);
    v18 = v85;
    if (v85)
    {
      v19 = (unint64_t *)&v85->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    return 0;
  }
  return v21;
}

void sub_1913AFCC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,char a47)
{
  uint64_t v47;

  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)(v47 - 208));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v47 - 224);
  _Unwind_Resume(a1);
}

double Espresso::ANECompilerEngine::cast_kernel::cast_kernel(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v5;
  char v6;
  double result;

  v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_QWORD *)(v5 + 280) = 0;
  v6 = *(_BYTE *)(*a2 + 123);
  *(_OWORD *)(v5 + 424) = 0u;
  *(_OWORD *)(v5 + 440) = 0u;
  *(_OWORD *)(v5 + 296) = 0u;
  *(_OWORD *)(v5 + 312) = 0u;
  *(_OWORD *)(v5 + 328) = 0u;
  *(_BYTE *)(v5 + 344) = 0;
  *(_OWORD *)(v5 + 352) = 0u;
  *(_OWORD *)(v5 + 368) = 0u;
  *(_OWORD *)(v5 + 384) = 0u;
  *(_OWORD *)(v5 + 400) = 0u;
  *(_BYTE *)(v5 + 416) = 0;
  *(_DWORD *)(v5 + 456) = 1065353216;
  *(_WORD *)(v5 + 464) = 0;
  *(_BYTE *)(v5 + 466) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *(double *)(v5 + 468) = result;
  *(_BYTE *)(v5 + 476) = 0;
  *(_QWORD *)(v5 + 480) = 0;
  *(_QWORD *)(v5 + 488) = 0;
  *(_BYTE *)(v5 + 496) = v6;
  *(_QWORD *)v5 = &off_1E2D73920;
  *(_QWORD *)(v5 + 288) = &unk_1E2D73A80;
  *(_QWORD *)(v5 + 280) = *a3;
  return result;
}

double Espresso::ANECompilerEngine::tunneled_ane_op_kernel::tunneled_ane_op_kernel(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  char v6;
  double result;

  v5 = Espresso::generic_tunneled_ane_op_kernel::generic_tunneled_ane_op_kernel(a1, a2, a4);
  v6 = *(_BYTE *)(*a2 + 123);
  result = 0.0;
  *(_OWORD *)(v5 + 696) = 0u;
  *(_OWORD *)(v5 + 712) = 0u;
  *(_OWORD *)(v5 + 568) = 0u;
  *(_OWORD *)(v5 + 584) = 0u;
  *(_OWORD *)(v5 + 600) = 0u;
  *(_BYTE *)(v5 + 616) = 0;
  *(_OWORD *)(v5 + 624) = 0u;
  *(_OWORD *)(v5 + 640) = 0u;
  *(_OWORD *)(v5 + 656) = 0u;
  *(_OWORD *)(v5 + 672) = 0u;
  *(_BYTE *)(v5 + 688) = 0;
  *(_DWORD *)(v5 + 728) = 1065353216;
  *(_WORD *)(v5 + 736) = 0;
  *(_BYTE *)(v5 + 738) = 0;
  __asm { FMOV            V1.2S, #1.0 }
  *(_QWORD *)(v5 + 740) = _D1;
  *(_BYTE *)(v5 + 748) = 0;
  *(_OWORD *)(v5 + 752) = 0u;
  *(_BYTE *)(v5 + 768) = v6;
  *(_QWORD *)v5 = &off_1E2D7B448;
  *(_QWORD *)(v5 + 560) = &unk_1E2D7B5A8;
  return result;
}

uint64_t Espresso::generic_tunneled_ane_op_kernel::generic_tunneled_ane_op_kernel(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  std::string *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;
  uint64_t v14;
  void *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  std::string *v22;
  std::string *v23;
  uint64_t i;

  v5 = Espresso::base_kernel::base_kernel(a1, a2);
  v6 = v5 + 280;
  *(_DWORD *)(v5 + 336) = 0;
  *(_OWORD *)(v5 + 344) = 0u;
  v7 = (std::string *)(v5 + 344);
  *(_OWORD *)(v5 + 280) = 0u;
  *(_OWORD *)(v5 + 296) = 0u;
  *(_OWORD *)(v5 + 312) = 0u;
  *(_DWORD *)(v5 + 328) = 0;
  *(_OWORD *)(v5 + 360) = 0u;
  *(_OWORD *)(v5 + 376) = 0u;
  *(_OWORD *)(v5 + 392) = 0u;
  *(_OWORD *)(v5 + 408) = 0u;
  *(_OWORD *)(v5 + 424) = 0u;
  *(_OWORD *)(v5 + 440) = 0u;
  *(_OWORD *)(v5 + 456) = 0u;
  *(_OWORD *)(v5 + 472) = 0u;
  *(_OWORD *)(v5 + 488) = 0u;
  *(_OWORD *)(v5 + 504) = 0u;
  *(_OWORD *)(v5 + 520) = 0u;
  *(_OWORD *)(v5 + 536) = 0u;
  *(_QWORD *)(v5 + 552) = 0;
  *(_QWORD *)v5 = off_1E2D9AFE8;
  if (v5 + 280 != a3)
  {
    std::vector<Espresso::tensor_shape_t>::__assign_with_size[abi:ne180100]<Espresso::tensor_shape_t*,Espresso::tensor_shape_t*>((_QWORD *)(v5 + 280), *(char **)a3, *(char **)(a3 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3));
    std::vector<Espresso::tensor_shape_t>::__assign_with_size[abi:ne180100]<Espresso::tensor_shape_t*,Espresso::tensor_shape_t*>((_QWORD *)(a1 + 304), *(char **)(a3 + 24), *(char **)(a3 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 32) - *(_QWORD *)(a3 + 24)) >> 3));
  }
  *(_DWORD *)(a1 + 328) = *(_DWORD *)(a3 + 48);
  *(_DWORD *)(a1 + 336) = *(_DWORD *)(a3 + 56);
  std::string::operator=(v7, (const std::string *)(a3 + 64));
  std::string::operator=((std::string *)(a1 + 368), (const std::string *)(a3 + 88));
  std::string::operator=((std::string *)(a1 + 392), (const std::string *)(a3 + 112));
  if (v6 != a3)
  {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(a1 + 416, *(std::string **)(a3 + 136), *(std::string **)(a3 + 144), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 144) - *(_QWORD *)(a3 + 136)) >> 3));
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(a1 + 440, *(std::string **)(a3 + 160), *(std::string **)(a3 + 168), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 168) - *(_QWORD *)(a3 + 160)) >> 3));
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(a1 + 464, *(std::string **)(a3 + 184), *(std::string **)(a3 + 192), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 192) - *(_QWORD *)(a3 + 184)) >> 3));
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(a1 + 488, *(std::string **)(a3 + 208), *(std::string **)(a3 + 216), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 216) - *(_QWORD *)(a3 + 208)) >> 3));
    v9 = *(_QWORD *)(a3 + 232);
    v8 = *(_QWORD *)(a3 + 240);
    v10 = 0x4EC4EC4EC4EC4EC5 * ((v8 - v9) >> 3);
    v11 = *(_QWORD *)(a1 + 528);
    v12 = *(_QWORD *)(a1 + 512);
    if (0x4EC4EC4EC4EC4EC5 * ((v11 - v12) >> 3) >= v10)
    {
      if (0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 520) - v12) >> 3) >= v10)
      {
        v23 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<Espresso::foreign_network_weight_file_t *,Espresso::foreign_network_weight_file_t *,Espresso::foreign_network_weight_file_t *>(*(std::string **)(a3 + 232), *(std::string **)(a3 + 240), *(std::string **)(a1 + 512));
        for (i = *(_QWORD *)(a1 + 520);
              (std::string *)i != v23;
              std::allocator<Espresso::foreign_network_weight_file_t>::destroy[abi:ne180100](i))
        {
          i -= 104;
        }
        *(_QWORD *)(a1 + 520) = v23;
        goto LABEL_25;
      }
      v22 = (std::string *)(v9 + 8 * ((*(_QWORD *)(a1 + 520) - v12) >> 3));
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<Espresso::foreign_network_weight_file_t *,Espresso::foreign_network_weight_file_t *,Espresso::foreign_network_weight_file_t *>(*(std::string **)(a3 + 232), v22, *(std::string **)(a1 + 512));
      v21 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::foreign_network_weight_file_t>,Espresso::foreign_network_weight_file_t*,Espresso::foreign_network_weight_file_t*,Espresso::foreign_network_weight_file_t*>(a1 + 528, (uint64_t)v22, v8, *(_QWORD *)(a1 + 520));
    }
    else
    {
      if (v12)
      {
        v13 = (void **)(a1 + 512);
        v14 = *(_QWORD *)(a1 + 520);
        v15 = *(void **)(a1 + 512);
        if (v14 != v12)
        {
          do
          {
            v14 -= 104;
            std::allocator<Espresso::foreign_network_weight_file_t>::destroy[abi:ne180100](v14);
          }
          while (v14 != v12);
          v15 = *v13;
        }
        *(_QWORD *)(a1 + 520) = v12;
        operator delete(v15);
        v11 = 0;
        *v13 = 0;
        *(_QWORD *)(a1 + 520) = 0;
        *(_QWORD *)(a1 + 528) = 0;
      }
      if (v10 > 0x276276276276276)
        goto LABEL_27;
      v16 = 0x4EC4EC4EC4EC4EC5 * (v11 >> 3);
      v17 = 2 * v16;
      if (2 * v16 <= v10)
        v17 = 0x4EC4EC4EC4EC4EC5 * ((v8 - v9) >> 3);
      v18 = v16 >= 0x13B13B13B13B13BLL ? 0x276276276276276 : v17;
      if (v18 > 0x276276276276276)
LABEL_27:
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<std::string,BOOL,unsigned long,Espresso::layer_shape>>>(v18);
      *(_QWORD *)(a1 + 512) = v19;
      *(_QWORD *)(a1 + 520) = v19;
      *(_QWORD *)(a1 + 528) = &v19[104 * v20];
      v21 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::foreign_network_weight_file_t>,Espresso::foreign_network_weight_file_t*,Espresso::foreign_network_weight_file_t*,Espresso::foreign_network_weight_file_t*>(a1 + 528, v9, v8, (uint64_t)v19);
    }
    *(_QWORD *)(a1 + 520) = v21;
LABEL_25:
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(a1 + 536, *(std::string **)(a3 + 256), *(std::string **)(a3 + 264), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 264) - *(_QWORD *)(a3 + 256)) >> 3));
  }
  return a1;
}

void sub_1913B0204(_Unwind_Exception *a1)
{
  Espresso::base_kernel *v1;
  Espresso::tunneled_ane_op_params_t *v2;
  uint64_t v3;

  *((_QWORD *)v1 + 65) = v3;
  *(_QWORD *)v1 = off_1E2D8BB28;
  Espresso::tunneled_ane_op_params_t::~tunneled_ane_op_params_t(v2);
  Espresso::base_kernel::~base_kernel(v1);
  _Unwind_Resume(a1);
}

void Espresso::tunneled_ane_op_params_t::~tunneled_ane_op_params_t(Espresso::tunneled_ane_op_params_t *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void **v7;

  v7 = (void **)((char *)this + 256);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v7);
  v2 = *((_QWORD *)this + 29);
  if (v2)
  {
    v3 = *((_QWORD *)this + 30);
    v4 = (void *)*((_QWORD *)this + 29);
    if (v3 != v2)
    {
      do
      {
        v3 -= 104;
        std::allocator<Espresso::foreign_network_weight_file_t>::destroy[abi:ne180100](v3);
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 29);
    }
    *((_QWORD *)this + 30) = v2;
    operator delete(v4);
  }
  v7 = (void **)((char *)this + 208);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v7);
  v7 = (void **)((char *)this + 184);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v7);
  v7 = (void **)((char *)this + 160);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v7);
  v7 = (void **)((char *)this + 136);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v7);
  if (*((char *)this + 135) < 0)
    operator delete(*((void **)this + 14));
  if (*((char *)this + 111) < 0)
    operator delete(*((void **)this + 11));
  if (*((char *)this + 87) < 0)
    operator delete(*((void **)this + 8));
  v5 = (void *)*((_QWORD *)this + 3);
  if (v5)
  {
    *((_QWORD *)this + 4) = v5;
    operator delete(v5);
  }
  v6 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v6;
    operator delete(v6);
  }
}

void std::allocator<Espresso::foreign_network_weight_file_t>::destroy[abi:ne180100](uint64_t a1)
{
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

_QWORD *std::vector<Espresso::tensor_shape_t>::__assign_with_size[abi:ne180100]<Espresso::tensor_shape_t*,Espresso::tensor_shape_t*>(_QWORD *result, char *__src, char *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  size_t v14;
  void **v15;
  _BYTE *v16;
  char *v17;
  void *v18;

  v6 = __src;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *result) >> 3) < a4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_23;
    v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    v11 = 2 * v10;
    if (2 * v10 <= a4)
      v11 = a4;
    v12 = v10 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v11;
    if (v12 > 0xAAAAAAAAAAAAAAALL)
LABEL_23:
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    result = std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v12);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[3 * v13];
    v14 = a3 - v6;
    if (v14)
      result = memmove(result, v6, v14);
    v15 = (void **)(v7 + 1);
    goto LABEL_22;
  }
  v15 = (void **)(result + 1);
  v16 = (_BYTE *)result[1];
  if (0xAAAAAAAAAAAAAAABLL * ((v16 - v9) >> 3) >= a4)
  {
    v14 = a3 - __src;
    if (a3 == __src)
      goto LABEL_22;
    v18 = (void *)*result;
LABEL_21:
    result = memmove(v18, __src, v14);
    goto LABEL_22;
  }
  v17 = &__src[8 * ((v16 - v9) >> 3)];
  if (v16 != v9)
  {
    result = memmove((void *)*result, __src, v16 - v9);
    v9 = (char *)*v15;
  }
  v14 = a3 - v17;
  if (v14)
  {
    v18 = v9;
    __src = v17;
    goto LABEL_21;
  }
LABEL_22:
  *v15 = &v9[v14];
  return result;
}

std::string *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<Espresso::foreign_network_weight_file_t *,Espresso::foreign_network_weight_file_t *,Espresso::foreign_network_weight_file_t *>(std::string *__str, std::string *a2, std::string *this)
{
  std::string *v5;

  if (__str != a2)
  {
    v5 = __str;
    do
    {
      std::string::operator=(this, v5);
      LODWORD(this[1].__r_.__value_.__l.__data_) = v5[1].__r_.__value_.__l.__data_;
      std::string::operator=((std::string *)((char *)this + 32), (std::string *)((char *)v5 + 32));
      std::string::operator=((std::string *)((char *)this + 56), (std::string *)((char *)v5 + 56));
      std::string::operator=((std::string *)((char *)this + 80), (std::string *)((char *)v5 + 80));
      this = (std::string *)((char *)this + 104);
      v5 = (std::string *)((char *)v5 + 104);
    }
    while (v5 != a2);
  }
  return this;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::foreign_network_weight_file_t>,Espresso::foreign_network_weight_file_t*,Espresso::foreign_network_weight_file_t*,Espresso::foreign_network_weight_file_t*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  __int128 *v9;
  __int128 v10;
  const std::string::value_type **v11;
  __int128 v12;
  const std::string::value_type **v13;
  __int128 v14;
  std::string *v15;
  const std::string::value_type **v16;
  __int128 v17;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      v8 = a4 + v7;
      v9 = (__int128 *)(a2 + v7);
      if (*(char *)(a2 + v7 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(a4 + v7), *(const std::string::value_type **)v9, *((_QWORD *)v9 + 1));
      }
      else
      {
        v10 = *v9;
        *(_QWORD *)(v8 + 16) = *((_QWORD *)v9 + 2);
        *(_OWORD *)v8 = v10;
      }
      *(_DWORD *)(a4 + v7 + 24) = *(_DWORD *)(a2 + v7 + 24);
      v11 = (const std::string::value_type **)(a2 + v7 + 32);
      if (*(char *)(a2 + v7 + 55) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(a4 + v7 + 32), *v11, *(_QWORD *)(a2 + v7 + 40));
      }
      else
      {
        v12 = *(_OWORD *)v11;
        *(_QWORD *)(a4 + v7 + 48) = *(_QWORD *)(a2 + v7 + 48);
        *(_OWORD *)(a4 + v7 + 32) = v12;
      }
      v13 = (const std::string::value_type **)(a2 + v7 + 56);
      if (*(char *)(a2 + v7 + 79) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(a4 + v7 + 56), *v13, *(_QWORD *)(a2 + v7 + 64));
      }
      else
      {
        v14 = *(_OWORD *)v13;
        *(_QWORD *)(a4 + v7 + 72) = *(_QWORD *)(a2 + v7 + 72);
        *(_OWORD *)(a4 + v7 + 56) = v14;
      }
      v15 = (std::string *)(a4 + v7 + 80);
      v16 = (const std::string::value_type **)(a2 + v7 + 80);
      if (*(char *)(a2 + v7 + 103) < 0)
      {
        std::string::__init_copy_ctor_external(v15, *v16, *(_QWORD *)(a2 + v7 + 88));
      }
      else
      {
        v17 = *(_OWORD *)v16;
        *(_QWORD *)(a4 + v7 + 96) = *(_QWORD *)(a2 + v7 + 96);
        *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v17;
      }
      v7 += 104;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1913B06EC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  void **v4;

  if (*(char *)(v2 + 79) < 0)
    operator delete(*v4);
  if (*(char *)(v2 + 55) < 0)
    operator delete(*v3);
  if (*(char *)(v2 + 23) < 0)
    operator delete(*(void **)v2);
  while (v2 != v1)
  {
    v2 -= 104;
    std::allocator<Espresso::foreign_network_weight_file_t>::destroy[abi:ne180100](v2);
  }
  _Unwind_Resume(exception_object);
}

double Espresso::ANECompilerEngine::tunneled_ane_unit_kernel::tunneled_ane_unit_kernel(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  char v6;
  double result;

  v5 = Espresso::generic_tunneled_ane_unit_kernel::generic_tunneled_ane_unit_kernel(a1, a2, a4);
  v6 = *(_BYTE *)(*a2 + 123);
  result = 0.0;
  *(_OWORD *)(v5 + 592) = 0u;
  *(_OWORD *)(v5 + 608) = 0u;
  *(_OWORD *)(v5 + 464) = 0u;
  *(_OWORD *)(v5 + 480) = 0u;
  *(_OWORD *)(v5 + 496) = 0u;
  *(_BYTE *)(v5 + 512) = 0;
  *(_OWORD *)(v5 + 520) = 0u;
  *(_OWORD *)(v5 + 536) = 0u;
  *(_OWORD *)(v5 + 552) = 0u;
  *(_OWORD *)(v5 + 568) = 0u;
  *(_BYTE *)(v5 + 584) = 0;
  *(_DWORD *)(v5 + 624) = 1065353216;
  *(_WORD *)(v5 + 632) = 0;
  *(_BYTE *)(v5 + 634) = 0;
  __asm { FMOV            V1.2S, #1.0 }
  *(_QWORD *)(v5 + 636) = _D1;
  *(_BYTE *)(v5 + 644) = 0;
  *(_OWORD *)(v5 + 648) = 0u;
  *(_BYTE *)(v5 + 664) = v6;
  *(_QWORD *)v5 = &off_1E2D7C118;
  *(_QWORD *)(v5 + 456) = &unk_1E2D7C278;
  return result;
}

uint64_t Espresso::generic_tunneled_ane_unit_kernel::generic_tunneled_ane_unit_kernel(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  const std::string *v7;
  unint64_t v8;
  uint64_t v9;
  std::string *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  std::string *v16;
  unint64_t v17;
  uint64_t v18;
  const std::string *v19;
  std::string::value_type v20;
  std::string *v21;
  std::string *v22;
  const std::string *v23;
  std::string::value_type v24;
  std::string *v25;
  uint64_t v26;
  const std::string *v27;
  unint64_t v28;
  uint64_t v29;
  std::string *v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  std::string *v36;
  unint64_t v37;
  uint64_t v38;
  const std::string *v39;
  int data;
  std::string *v41;
  std::string *v42;
  const std::string *v43;
  int v44;
  std::string *v45;

  v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_OWORD *)(v5 + 436) = 0u;
  *(_OWORD *)(v5 + 408) = 0u;
  *(_OWORD *)(v5 + 424) = 0u;
  *(_OWORD *)(v5 + 376) = 0u;
  *(_OWORD *)(v5 + 392) = 0u;
  *(_OWORD *)(v5 + 344) = 0u;
  *(_OWORD *)(v5 + 360) = 0u;
  *(_OWORD *)(v5 + 312) = 0u;
  *(_OWORD *)(v5 + 328) = 0u;
  *(_OWORD *)(v5 + 280) = 0u;
  *(_OWORD *)(v5 + 296) = 0u;
  *(_QWORD *)v5 = off_1E2D9CFD0;
  if (v5 + 280 == a3)
    goto LABEL_52;
  std::vector<Espresso::tensor_shape_t>::__assign_with_size[abi:ne180100]<Espresso::tensor_shape_t*,Espresso::tensor_shape_t*>((_QWORD *)(v5 + 280), *(char **)a3, *(char **)(a3 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3));
  std::vector<Espresso::tensor_shape_t>::__assign_with_size[abi:ne180100]<Espresso::tensor_shape_t*,Espresso::tensor_shape_t*>((_QWORD *)(a1 + 304), *(char **)(a3 + 24), *(char **)(a3 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 32) - *(_QWORD *)(a3 + 24)) >> 3));
  v7 = *(const std::string **)(a3 + 48);
  v6 = *(_QWORD *)(a3 + 56);
  v8 = (v6 - (uint64_t)v7) >> 5;
  v9 = *(_QWORD *)(a1 + 344);
  v10 = *(std::string **)(a1 + 328);
  if (v8 <= (v9 - (uint64_t)v10) >> 5)
  {
    v16 = *(std::string **)(a1 + 336);
    v17 = ((char *)v16 - (char *)v10) >> 5;
    if (v17 >= v8)
    {
      if (v7 != (const std::string *)v6)
      {
        do
        {
          v22 = v10;
          v24 = v7->__r_.__value_.__s.__data_[0];
          v23 = (const std::string *)&v7->__r_.__value_.__r.__words[1];
          v10->__r_.__value_.__s.__data_[0] = v24;
          v25 = (std::string *)&v10->__r_.__value_.__r.__words[1];
          std::string::operator=(v25, v23);
          v7 = v23 + 1;
          v10 = v25 + 1;
        }
        while (v7 != (const std::string *)v6);
        v10 = (std::string *)((char *)v22 + 32);
        v16 = *(std::string **)(a1 + 336);
      }
      while (v16 != v10)
      {
        if (SHIBYTE(v16[-1].__r_.__value_.__r.__words[2]) < 0)
          operator delete(v16[-1].__r_.__value_.__l.__data_);
        v16 = (std::string *)((char *)v16 - 32);
      }
      *(_QWORD *)(a1 + 336) = v10;
      goto LABEL_27;
    }
    v18 = (uint64_t)v7 + 32 * v17;
    if (v16 != v10)
    {
      do
      {
        v20 = v7->__r_.__value_.__s.__data_[0];
        v19 = (const std::string *)&v7->__r_.__value_.__r.__words[1];
        v10->__r_.__value_.__s.__data_[0] = v20;
        v21 = (std::string *)&v10->__r_.__value_.__r.__words[1];
        std::string::operator=(v21, v19);
        v7 = v19 + 1;
        v10 = v21 + 1;
      }
      while (v7 != (const std::string *)v18);
      v10 = *(std::string **)(a1 + 336);
    }
    v15 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::tunneled_unit_bottom_layout_t>,Espresso::tunneled_unit_bottom_layout_t*,Espresso::tunneled_unit_bottom_layout_t*,Espresso::tunneled_unit_bottom_layout_t*>(a1 + 344, v18, v6, (uint64_t)v10);
  }
  else
  {
    if (v10)
    {
      std::vector<Espresso::tunneled_unit_bottom_layout_t>::__clear[abi:ne180100]((uint64_t *)(a1 + 328));
      operator delete(*(void **)(a1 + 328));
      v9 = 0;
      *(_QWORD *)(a1 + 328) = 0;
      *(_QWORD *)(a1 + 336) = 0;
      *(_QWORD *)(a1 + 344) = 0;
    }
    if (v6 - (_QWORD)v7 < 0)
      goto LABEL_53;
    v11 = v9 >> 4;
    if (v9 >> 4 <= v8)
      v11 = (v6 - (uint64_t)v7) >> 5;
    v12 = (unint64_t)v9 >= 0x7FFFFFFFFFFFFFE0 ? 0x7FFFFFFFFFFFFFFLL : v11;
    if (v12 >> 59)
LABEL_53:
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::blob_container::ane_blob_mapped_shape>>(v12);
    *(_QWORD *)(a1 + 328) = v13;
    *(_QWORD *)(a1 + 336) = v13;
    *(_QWORD *)(a1 + 344) = &v13[32 * v14];
    v15 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::tunneled_unit_bottom_layout_t>,Espresso::tunneled_unit_bottom_layout_t*,Espresso::tunneled_unit_bottom_layout_t*,Espresso::tunneled_unit_bottom_layout_t*>(a1 + 344, (uint64_t)v7, v6, (uint64_t)v13);
  }
  *(_QWORD *)(a1 + 336) = v15;
LABEL_27:
  v27 = *(const std::string **)(a3 + 72);
  v26 = *(_QWORD *)(a3 + 80);
  v28 = (v26 - (uint64_t)v27) >> 5;
  v29 = *(_QWORD *)(a1 + 368);
  v30 = *(std::string **)(a1 + 352);
  if (v28 > (v29 - (uint64_t)v30) >> 5)
  {
    if (v30)
    {
      std::vector<Espresso::tunneled_unit_bottom_layout_t>::__clear[abi:ne180100]((uint64_t *)(a1 + 352));
      operator delete(*(void **)(a1 + 352));
      v29 = 0;
      *(_QWORD *)(a1 + 352) = 0;
      *(_QWORD *)(a1 + 360) = 0;
      *(_QWORD *)(a1 + 368) = 0;
    }
    if (v26 - (_QWORD)v27 < 0)
      goto LABEL_54;
    v31 = v29 >> 4;
    if (v29 >> 4 <= v28)
      v31 = (v26 - (uint64_t)v27) >> 5;
    v32 = (unint64_t)v29 >= 0x7FFFFFFFFFFFFFE0 ? 0x7FFFFFFFFFFFFFFLL : v31;
    if (v32 >> 59)
LABEL_54:
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::blob_container::ane_blob_mapped_shape>>(v32);
    *(_QWORD *)(a1 + 352) = v33;
    *(_QWORD *)(a1 + 360) = v33;
    *(_QWORD *)(a1 + 368) = &v33[32 * v34];
    v35 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::tunneled_unit_top_layout_t>,Espresso::tunneled_unit_top_layout_t*,Espresso::tunneled_unit_top_layout_t*,Espresso::tunneled_unit_top_layout_t*>(a1 + 368, (uint64_t)v27, v26, (uint64_t)v33);
LABEL_43:
    *(_QWORD *)(a1 + 360) = v35;
    goto LABEL_52;
  }
  v36 = *(std::string **)(a1 + 360);
  v37 = ((char *)v36 - (char *)v30) >> 5;
  if (v37 < v28)
  {
    v38 = (uint64_t)v27 + 32 * v37;
    if (v36 != v30)
    {
      do
      {
        data = (int)v27->__r_.__value_.__l.__data_;
        v39 = (const std::string *)&v27->__r_.__value_.__r.__words[1];
        LODWORD(v30->__r_.__value_.__l.__data_) = data;
        v41 = (std::string *)&v30->__r_.__value_.__r.__words[1];
        std::string::operator=(v41, v39);
        v27 = v39 + 1;
        v30 = v41 + 1;
      }
      while (v27 != (const std::string *)v38);
      v30 = *(std::string **)(a1 + 360);
    }
    v35 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::tunneled_unit_top_layout_t>,Espresso::tunneled_unit_top_layout_t*,Espresso::tunneled_unit_top_layout_t*,Espresso::tunneled_unit_top_layout_t*>(a1 + 368, v38, v26, (uint64_t)v30);
    goto LABEL_43;
  }
  if (v27 != (const std::string *)v26)
  {
    do
    {
      v42 = v30;
      v44 = (int)v27->__r_.__value_.__l.__data_;
      v43 = (const std::string *)&v27->__r_.__value_.__r.__words[1];
      LODWORD(v30->__r_.__value_.__l.__data_) = v44;
      v45 = (std::string *)&v30->__r_.__value_.__r.__words[1];
      std::string::operator=(v45, v43);
      v27 = v43 + 1;
      v30 = v45 + 1;
    }
    while (v27 != (const std::string *)v26);
    v30 = (std::string *)((char *)v42 + 32);
    v36 = *(std::string **)(a1 + 360);
  }
  while (v36 != v30)
  {
    if (SHIBYTE(v36[-1].__r_.__value_.__r.__words[2]) < 0)
      operator delete(v36[-1].__r_.__value_.__l.__data_);
    v36 = (std::string *)((char *)v36 - 32);
  }
  *(_QWORD *)(a1 + 360) = v30;
LABEL_52:
  std::string::operator=((std::string *)(a1 + 376), (const std::string *)(a3 + 96));
  std::string::operator=((std::string *)(a1 + 400), (const std::string *)(a3 + 120));
  std::string::operator=((std::string *)(a1 + 424), (const std::string *)(a3 + 144));
  *(_DWORD *)(a1 + 448) = *(_DWORD *)(a3 + 168);
  return a1;
}

void sub_1913B0B90(_Unwind_Exception *a1)
{
  Espresso::base_kernel *v1;
  void **v2;
  uint64_t v3;

  *((_QWORD *)v1 + 45) = v3;
  *(_QWORD *)v1 = off_1E2D8BC80;
  Espresso::tunneled_ane_unit_params_t::~tunneled_ane_unit_params_t(v2);
  Espresso::base_kernel::~base_kernel(v1);
  _Unwind_Resume(a1);
}

void Espresso::tunneled_ane_unit_params_t::~tunneled_ane_unit_params_t(void **this)
{
  void *v2;
  void *v3;
  void **v4;

  if (*((char *)this + 167) < 0)
    operator delete(this[18]);
  if (*((char *)this + 143) < 0)
    operator delete(this[15]);
  if (*((char *)this + 119) < 0)
    operator delete(this[12]);
  v4 = this + 9;
  std::vector<Espresso::tunneled_unit_top_layout_t>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = this + 6;
  std::vector<Espresso::tunneled_unit_top_layout_t>::__destroy_vector::operator()[abi:ne180100](&v4);
  v2 = this[3];
  if (v2)
  {
    this[4] = v2;
    operator delete(v2);
  }
  v3 = *this;
  if (*this)
  {
    this[1] = v3;
    operator delete(v3);
  }
}

void std::vector<Espresso::tunneled_unit_top_layout_t>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<Espresso::tunneled_unit_bottom_layout_t>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<Espresso::tunneled_unit_bottom_layout_t>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 32)
  {
    if (*(char *)(i - 1) < 0)
      operator delete(*(void **)(i - 24));
  }
  a1[1] = v2;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::tunneled_unit_top_layout_t>,Espresso::tunneled_unit_top_layout_t*,Espresso::tunneled_unit_top_layout_t*,Espresso::tunneled_unit_top_layout_t*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  __int128 *v6;
  uint64_t v7;
  std::string *v8;
  __int128 v9;
  _QWORD v11[3];
  char v12;
  uint64_t v13;
  uint64_t v14;

  v4 = a4;
  v13 = a4;
  v14 = a4;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  v12 = 0;
  if (a2 != a3)
  {
    v6 = (__int128 *)(a2 + 8);
    do
    {
      v7 = (uint64_t)v6 - 8;
      *(_DWORD *)v4 = *((_DWORD *)v6 - 2);
      v8 = (std::string *)(v4 + 8);
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
        v4 = v14;
      }
      else
      {
        v9 = *v6;
        *(_QWORD *)(v4 + 24) = *((_QWORD *)v6 + 2);
        *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
      }
      v4 += 32;
      v14 = v4;
      v6 += 2;
    }
    while (v7 + 32 != a3);
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<Espresso::tunneled_unit_top_layout_t>,Espresso::tunneled_unit_top_layout_t*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v4;
}

void sub_1913B0DCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<Espresso::tunneled_unit_top_layout_t>,Espresso::tunneled_unit_top_layout_t*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<Espresso::tunneled_unit_top_layout_t>,Espresso::tunneled_unit_top_layout_t*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 16);
    v4 = **(_QWORD **)(a1 + 8);
    while (v3 != v4)
    {
      if (*(char *)(v3 - 1) < 0)
        operator delete(*(void **)(v3 - 24));
      v3 -= 32;
    }
  }
  return a1;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::tunneled_unit_bottom_layout_t>,Espresso::tunneled_unit_bottom_layout_t*,Espresso::tunneled_unit_bottom_layout_t*,Espresso::tunneled_unit_bottom_layout_t*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  __int128 *v6;
  uint64_t v7;
  std::string *v8;
  __int128 v9;
  _QWORD v11[3];
  char v12;
  uint64_t v13;
  uint64_t v14;

  v4 = a4;
  v13 = a4;
  v14 = a4;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  v12 = 0;
  if (a2 != a3)
  {
    v6 = (__int128 *)(a2 + 8);
    do
    {
      v7 = (uint64_t)v6 - 8;
      *(_BYTE *)v4 = *((_BYTE *)v6 - 8);
      v8 = (std::string *)(v4 + 8);
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
        v4 = v14;
      }
      else
      {
        v9 = *v6;
        *(_QWORD *)(v4 + 24) = *((_QWORD *)v6 + 2);
        *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
      }
      v4 += 32;
      v14 = v4;
      v6 += 2;
    }
    while (v7 + 32 != a3);
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<Espresso::tunneled_unit_top_layout_t>,Espresso::tunneled_unit_top_layout_t*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v4;
}

void sub_1913B0EF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<Espresso::tunneled_unit_top_layout_t>,Espresso::tunneled_unit_top_layout_t*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

double Espresso::ANECompilerEngine::plane_rw_kernel::plane_rw_kernel(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v5;
  char v6;
  double result;

  v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_QWORD *)(v5 + 280) = 875704422;
  *(_QWORD *)v5 = off_1E2D8F990;
  *(_QWORD *)(v5 + 280) = *a3;
  v6 = *(_BYTE *)(*a2 + 123);
  __asm { FMOV            V0.2S, #1.0 }
  *(_QWORD *)(v5 + 468) = _D0;
  result = 0.0;
  *(_OWORD *)(v5 + 424) = 0u;
  *(_OWORD *)(v5 + 440) = 0u;
  *(_OWORD *)(v5 + 296) = 0u;
  *(_OWORD *)(v5 + 312) = 0u;
  *(_OWORD *)(v5 + 328) = 0u;
  *(_DWORD *)(v5 + 456) = 1065353216;
  *(_BYTE *)(v5 + 344) = 0;
  *(_OWORD *)(v5 + 352) = 0u;
  *(_OWORD *)(v5 + 368) = 0u;
  *(_OWORD *)(v5 + 384) = 0u;
  *(_OWORD *)(v5 + 400) = 0u;
  *(_BYTE *)(v5 + 416) = 0;
  *(_WORD *)(v5 + 464) = 0;
  *(_BYTE *)(v5 + 466) = 0;
  *(_BYTE *)(v5 + 476) = 0;
  *(_QWORD *)(v5 + 480) = 0;
  *(_QWORD *)(v5 + 488) = 0;
  *(_BYTE *)(v5 + 496) = v6;
  *(_QWORD *)v5 = &off_1E2D76280;
  *(_QWORD *)(v5 + 288) = &unk_1E2D763E0;
  return result;
}

__n128 Espresso::ANECompilerEngine::fill_kernel::fill_kernel(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  char v6;
  __n128 result;
  __int128 v13;

  v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_QWORD *)(v5 + 296) = 0x100000000;
  *(_OWORD *)(v5 + 280) = 0u;
  *(_QWORD *)(v5 + 304) = 0xFFFFFFFFLL;
  *(_BYTE *)(v5 + 312) = 1;
  v6 = *(_BYTE *)(*a2 + 123);
  *(_OWORD *)(v5 + 456) = 0u;
  *(_OWORD *)(v5 + 472) = 0u;
  *(_OWORD *)(v5 + 328) = 0u;
  *(_OWORD *)(v5 + 344) = 0u;
  *(_OWORD *)(v5 + 360) = 0u;
  *(_BYTE *)(v5 + 376) = 0;
  *(_OWORD *)(v5 + 384) = 0u;
  *(_OWORD *)(v5 + 400) = 0u;
  *(_OWORD *)(v5 + 416) = 0u;
  *(_OWORD *)(v5 + 432) = 0u;
  *(_BYTE *)(v5 + 448) = 0;
  *(_DWORD *)(v5 + 488) = 1065353216;
  *(_WORD *)(v5 + 496) = 0;
  *(_BYTE *)(v5 + 498) = 0;
  __asm { FMOV            V1.2S, #1.0 }
  *(_QWORD *)(v5 + 500) = _D1;
  *(_BYTE *)(v5 + 508) = 0;
  *(_OWORD *)(v5 + 512) = 0u;
  *(_BYTE *)(v5 + 528) = v6;
  *(_QWORD *)v5 = &off_1E2D73F20;
  *(_QWORD *)(v5 + 320) = &unk_1E2D74080;
  result = *(__n128 *)a3;
  v13 = *(_OWORD *)(a3 + 16);
  *(_BYTE *)(v5 + 312) = *(_BYTE *)(a3 + 32);
  *(__n128 *)(v5 + 280) = result;
  *(_OWORD *)(v5 + 296) = v13;
  return result;
}

__n128 Espresso::ANECompilerEngine::space_to_batch_kernel::space_to_batch_kernel(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  char v6;
  __n128 result;
  __int128 v13;

  v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_QWORD *)(v5 + 309) = 0;
  *(_OWORD *)(v5 + 280) = 0u;
  *(_OWORD *)(v5 + 296) = 0u;
  v6 = *(_BYTE *)(*a2 + 123);
  *(_OWORD *)(v5 + 456) = 0u;
  *(_OWORD *)(v5 + 472) = 0u;
  *(_OWORD *)(v5 + 328) = 0u;
  *(_OWORD *)(v5 + 344) = 0u;
  *(_OWORD *)(v5 + 360) = 0u;
  *(_BYTE *)(v5 + 376) = 0;
  *(_OWORD *)(v5 + 384) = 0u;
  *(_OWORD *)(v5 + 400) = 0u;
  *(_OWORD *)(v5 + 416) = 0u;
  *(_OWORD *)(v5 + 432) = 0u;
  *(_BYTE *)(v5 + 448) = 0;
  *(_DWORD *)(v5 + 488) = 1065353216;
  *(_WORD *)(v5 + 496) = 0;
  *(_BYTE *)(v5 + 498) = 0;
  __asm { FMOV            V1.2S, #1.0 }
  *(_QWORD *)(v5 + 500) = _D1;
  *(_BYTE *)(v5 + 508) = 0;
  *(_OWORD *)(v5 + 512) = 0u;
  *(_BYTE *)(v5 + 528) = v6;
  *(_QWORD *)v5 = &off_1E2D7A630;
  *(_QWORD *)(v5 + 320) = &unk_1E2D7A790;
  result = *(__n128 *)a3;
  v13 = *(_OWORD *)(a3 + 16);
  *(_QWORD *)(v5 + 309) = *(_QWORD *)(a3 + 29);
  *(__n128 *)(v5 + 280) = result;
  *(_OWORD *)(v5 + 296) = v13;
  return result;
}

double Espresso::ANECompilerEngine::space_to_depth_kernel::space_to_depth_kernel(uint64_t a1, _QWORD *a2, uint64_t a3, int a4)
{
  uint64_t v7;
  char v8;
  double result;

  v7 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_QWORD *)(v7 + 280) = 2;
  v8 = *(_BYTE *)(*a2 + 123);
  *(_OWORD *)(v7 + 432) = 0u;
  *(_OWORD *)(v7 + 448) = 0u;
  *(_OWORD *)(v7 + 304) = 0u;
  *(_OWORD *)(v7 + 320) = 0u;
  *(_OWORD *)(v7 + 336) = 0u;
  *(_BYTE *)(v7 + 352) = 0;
  *(_OWORD *)(v7 + 360) = 0u;
  *(_OWORD *)(v7 + 376) = 0u;
  *(_OWORD *)(v7 + 392) = 0u;
  *(_OWORD *)(v7 + 408) = 0u;
  *(_BYTE *)(v7 + 424) = 0;
  *(_DWORD *)(v7 + 464) = 1065353216;
  *(_WORD *)(v7 + 472) = 0;
  *(_BYTE *)(v7 + 474) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *(double *)(v7 + 476) = result;
  *(_BYTE *)(v7 + 484) = 0;
  *(_QWORD *)(v7 + 488) = 0;
  *(_QWORD *)(v7 + 496) = 0;
  *(_BYTE *)(v7 + 504) = v8;
  *(_QWORD *)v7 = &off_1E2D7A830;
  *(_QWORD *)(v7 + 296) = &unk_1E2D7A990;
  *(_QWORD *)(v7 + 280) = a3;
  *(_DWORD *)(v7 + 288) = a4;
  return result;
}

double Espresso::ANECompilerEngine::degamma_kernel::degamma_kernel(uint64_t a1, _QWORD *a2, int a3)
{
  uint64_t v5;
  char v6;
  double result;

  v5 = Espresso::base_kernel::base_kernel(a1, a2);
  v6 = *(_BYTE *)(*a2 + 123);
  *(_OWORD *)(v5 + 424) = 0u;
  *(_OWORD *)(v5 + 440) = 0u;
  *(_OWORD *)(v5 + 296) = 0u;
  *(_OWORD *)(v5 + 312) = 0u;
  *(_OWORD *)(v5 + 328) = 0u;
  *(_BYTE *)(v5 + 344) = 0;
  *(_OWORD *)(v5 + 352) = 0u;
  *(_OWORD *)(v5 + 368) = 0u;
  *(_OWORD *)(v5 + 384) = 0u;
  *(_OWORD *)(v5 + 400) = 0u;
  *(_BYTE *)(v5 + 416) = 0;
  *(_DWORD *)(v5 + 456) = 1065353216;
  *(_WORD *)(v5 + 464) = 0;
  *(_BYTE *)(v5 + 466) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *(double *)(v5 + 468) = result;
  *(_BYTE *)(v5 + 476) = 0;
  *(_QWORD *)(v5 + 480) = 0;
  *(_QWORD *)(v5 + 488) = 0;
  *(_BYTE *)(v5 + 496) = v6;
  *(_QWORD *)v5 = &off_1E2D75240;
  *(_QWORD *)(v5 + 288) = &unk_1E2D753A0;
  *(_DWORD *)(v5 + 280) = a3;
  return result;
}

__n128 Espresso::ANECompilerEngine::transpose_kernel::transpose_kernel(uint64_t a1, _QWORD *a2, __n128 *a3)
{
  uint64_t v5;
  uint64_t v6;
  char v7;
  __n128 result;

  v5 = a1 + 280;
  v6 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_OWORD *)v5 = xmmword_191A761E0;
  *(_DWORD *)(v6 + 296) = 4;
  v7 = *(_BYTE *)(*a2 + 123);
  *(_OWORD *)(v6 + 440) = 0u;
  *(_OWORD *)(v6 + 456) = 0u;
  *(_OWORD *)(v6 + 312) = 0u;
  *(_OWORD *)(v6 + 328) = 0u;
  *(_OWORD *)(v6 + 344) = 0u;
  *(_BYTE *)(v6 + 360) = 0;
  *(_OWORD *)(v6 + 368) = 0u;
  *(_OWORD *)(v6 + 384) = 0u;
  *(_OWORD *)(v6 + 400) = 0u;
  *(_OWORD *)(v6 + 416) = 0u;
  *(_BYTE *)(v6 + 432) = 0;
  *(_DWORD *)(v6 + 472) = 1065353216;
  *(_WORD *)(v6 + 480) = 0;
  *(_BYTE *)(v6 + 482) = 0;
  __asm { FMOV            V1.2S, #1.0 }
  *(_QWORD *)(v5 + 204) = _D1;
  *(_BYTE *)(v6 + 492) = 0;
  *(_OWORD *)(v6 + 496) = 0u;
  *(_BYTE *)(v6 + 512) = v7;
  *(_QWORD *)v6 = &off_1E2D76ED8;
  *(_QWORD *)(v6 + 304) = &unk_1E2D77038;
  *(_OWORD *)(v6 + 520) = 0u;
  result = *a3;
  *(_DWORD *)(v6 + 296) = a3[1].n128_u32[0];
  *(__n128 *)v5 = result;
  return result;
}

uint64_t Espresso::keys_translation::cpp_platform_from_c_api(uint64_t a1)
{
  uint64_t v1;
  std::runtime_error *exception;
  int v4;
  std::runtime_error *v5;
  std::string *v6;
  __int128 v7;
  std::string v8;
  std::string v9;

  if ((int)a1 <= 10005)
  {
    v1 = 100;
    switch((int)a1)
    {
      case 0:
        return v1;
      case 1:
        return 0;
      case 2:
        goto LABEL_20;
      case 3:
        return 60000;
      case 4:
      case 6:
        goto LABEL_26;
      case 5:
        return 50000;
      case 7:
        return 5;
      case 8:
        return 6;
      case 9:
        return 7;
      default:
        if ((_DWORD)a1 == 201)
        {
LABEL_20:
          v1 = 20000;
        }
        else
        {
          if ((_DWORD)a1 != 209)
            goto LABEL_26;
          v1 = 90000;
        }
        break;
    }
  }
  else
  {
    if ((int)a1 <= 50001)
    {
      switch((int)a1)
      {
        case 10006:
        case 10007:
        case 10008:
        case 10009:
        case 10010:
        case 10011:
          return a1;
        default:
          goto LABEL_26;
      }
    }
    if ((int)a1 > 79999)
    {
      if ((_DWORD)a1 != 80000 && (_DWORD)a1 != 100000)
      {
        if ((_DWORD)a1 == 0x7FFFFFFF)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "ESPRESSO_ENGINE_MAX_VAL is not the right engine");
          __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
LABEL_26:
        v4 = a1;
        v5 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::to_string(&v8, v4);
        v6 = std::string::insert(&v8, 0, "Not supported engine: ");
        v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
        v9.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v9.__r_.__value_.__l.__data_ = v7;
        v6->__r_.__value_.__l.__size_ = 0;
        v6->__r_.__value_.__r.__words[2] = 0;
        v6->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v5, &v9);
        __cxa_throw(v5, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
    }
    else if ((_DWORD)a1 != 50002 && (_DWORD)a1 != 50005 && (_DWORD)a1 != 50008)
    {
      goto LABEL_26;
    }
    return a1;
  }
  return v1;
}

void sub_1913B1520(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t Espresso::keys_translation::cpp_compute_path_from_c_api(int a1)
{
  std::runtime_error *exception;
  std::string *v4;
  __int128 v5;
  std::string v6;
  std::string v7;

  if (a1 <= 131079)
  {
    if (a1 == 65552)
    {
      return 1;
    }
    else
    {
      if (a1 != 65568)
        goto LABEL_13;
      return 0;
    }
  }
  else
  {
    switch(a1)
    {
      case 0x20008:
        return 2;
      case 0x40008:
        return 4;
      case 0x80000:
        return 5;
      default:
LABEL_13:
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::to_string(&v6, a1);
        v4 = std::string::insert(&v6, 0, "Not supported storage_type: ");
        v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
        v7.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v7.__r_.__value_.__l.__data_ = v5;
        v4->__r_.__value_.__l.__size_ = 0;
        v4->__r_.__value_.__r.__words[2] = 0;
        v4->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, &v7);
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
  }
}

void sub_1913B16A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t Espresso::keys_translation::cpp_quant_weight_mem_from_c_api(uint64_t result)
{
  int v1;
  std::runtime_error *exception;
  std::string *v3;
  __int128 v4;
  std::string v5;
  std::string v6;

  v1 = result;
  if (result >= 3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
    std::to_string(&v5, v1);
    v3 = std::string::insert(&v5, 0, "Unsupported quantized weight memory type: ");
    v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
    v6.__r_.__value_.__r.__words[2] = v3->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v6.__r_.__value_.__l.__data_ = v4;
    v3->__r_.__value_.__l.__size_ = 0;
    v3->__r_.__value_.__r.__words[2] = 0;
    v3->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v6);
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D59458;
    LODWORD(exception[1].__vftable) = -6;
  }
  return result;
}

void sub_1913B17C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t Espresso::keys_translation::c_api_engine_from_cpp_platform(Espresso::keys_translation *this)
{
  uint64_t v1;
  int v3;
  std::runtime_error *exception;
  std::string *v5;
  __int128 v6;
  std::string v7;
  std::string v8;

  if ((int)this > 19999)
  {
    switch((int)this)
    {
      case 50000:
        return 5;
      case 50001:
      case 50003:
      case 50004:
      case 50006:
      case 50007:
        goto LABEL_17;
      case 50002:
      case 50005:
      case 50008:
        return (uint64_t)this;
      default:
        if ((_DWORD)this == 90000)
        {
          v1 = 209;
        }
        else
        {
          if ((_DWORD)this != 20000)
          {
LABEL_17:
            v3 = (int)this;
            exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::to_string(&v7, v3);
            v5 = std::string::insert(&v7, 0, "Not supported: ");
            v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
            v8.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v8.__r_.__value_.__l.__data_ = v6;
            v5->__r_.__value_.__l.__size_ = 0;
            v5->__r_.__value_.__r.__words[2] = 0;
            v5->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error(exception, &v8);
            __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
          v1 = 2;
        }
        break;
    }
  }
  else
  {
    switch((int)this)
    {
      case 10006:
      case 10007:
      case 10008:
      case 10009:
      case 10010:
      case 10011:
        return (uint64_t)this;
      default:
        v1 = 1;
        switch((int)this)
        {
          case 0:
            return v1;
          case 1:
          case 2:
          case 3:
          case 4:
            goto LABEL_17;
          case 5:
            return 7;
          case 6:
            return 8;
          case 7:
            return 9;
          default:
            if ((_DWORD)this != 100)
              goto LABEL_17;
            v1 = 0;
            break;
        }
        break;
    }
  }
  return v1;
}

void sub_1913B19A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t Espresso::keys_translation::c_api_storage_type_from_cpp_compute_path(Espresso::keys_translation *this)
{
  int v1;
  std::runtime_error *exception;
  std::string *v4;
  __int128 v5;
  std::string v6;
  std::string v7;

  v1 = (int)this;
  if (this >= 6 || ((0x37u >> (char)this) & 1) == 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v6, v1);
    v4 = std::string::insert(&v6, 0, "Not supported: ");
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v7.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v7.__r_.__value_.__l.__data_ = v5;
    v4->__r_.__value_.__l.__size_ = 0;
    v4->__r_.__value_.__r.__words[2] = 0;
    v4->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v7);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return dword_191A98870[this];
}

void sub_1913B1AC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t Espresso::keys_translation::c_api_engine_from_name(_QWORD *a1)
{
  std::__shared_weak_count *size;
  unint64_t *v3;
  unint64_t v4;
  Espresso::keys_translation *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::runtime_error *exception;
  std::string v12;
  uint64_t (***v13)(_QWORD);
  std::__shared_weak_count *v14;

  Espresso::abstract_engine_factory::shared(&v12);
  Espresso::abstract_engine_factory::engine_with_name((uint64_t)v12.__r_.__value_.__l.__data_, a1, &v13);
  size = (std::__shared_weak_count *)v12.__r_.__value_.__l.__size_;
  if (v12.__r_.__value_.__l.__size_)
  {
    v3 = (unint64_t *)(v12.__r_.__value_.__l.__size_ + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 - 1, v3));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  if (!v13)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, &v12);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v5 = (Espresso::keys_translation *)(**v13)(v13);
  v6 = Espresso::keys_translation::c_api_engine_from_cpp_platform(v5);
  v7 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return v6;
}

void sub_1913B1C4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  void *v16;
  int v17;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0)
    {
LABEL_6:
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
      _Unwind_Resume(a1);
    }
  }
  else if (!v17)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v16);
  goto LABEL_6;
}

uint64_t Espresso::keys_translation::c_api_storage_type_from_name(unsigned __int16 *a1)
{
  int v2;
  uint64_t result;
  int v4;
  uint64_t v5;
  int v6;
  _WORD *v7;
  std::runtime_error *exception;
  std::string v9;

  if ((*((char *)a1 + 23) & 0x80000000) == 0)
  {
    v2 = *((unsigned __int8 *)a1 + 23);
    if (v2 != 2)
    {
      if (v2 != 4)
        goto LABEL_22;
      result = 65552;
      v4 = *(_DWORD *)a1;
      if (*(_DWORD *)a1 == 842223686)
        return 65568;
      goto LABEL_10;
    }
    result = 131080;
    if (*a1 == 14419)
      return result;
    v6 = *a1;
    v7 = a1;
LABEL_17:
    if (v6 == 14421)
      return 262152;
    if (*v7 != 22600)
      goto LABEL_22;
    return 0x80000;
  }
  v5 = *((_QWORD *)a1 + 1);
  if (v5 == 2)
  {
    result = 131080;
    v7 = *(_WORD **)a1;
    if (**(_WORD **)a1 == 14419)
      return result;
    v6 = (unsigned __int16)*v7;
    goto LABEL_17;
  }
  if (v5 != 4)
    goto LABEL_22;
  result = 65552;
  if (**(_DWORD **)a1 == 842223686)
    return 65568;
  v4 = **(_DWORD **)a1;
LABEL_10:
  if (v4 != 909201478)
  {
LABEL_22:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, &v9);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_1913B1E20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

__n128 std::deque<Espresso::basic_block::walk_status>::push_back(_QWORD *a1, __n128 *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  __int128 v34;
  void *v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  unint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  int64_t v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t i;
  _QWORD *v78;
  char *v79;
  _BYTE *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  char *v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  __n128 result;
  unint64_t v97;
  char *v98;
  uint64_t v99;
  char *v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  char *v106;
  __int128 v107;
  __int128 v108;
  uint64_t v109;
  __int128 v110;
  uint64_t v111;
  __int128 v112;

  v4 = (char *)a1[2];
  v5 = (char *)a1[1];
  v6 = v4 - v5;
  if (v4 == v5)
    v7 = 0;
  else
    v7 = 32 * (v4 - v5) - 1;
  v8 = a1[4];
  v9 = a1[5] + v8;
  if (v7 == v9)
  {
    if (v8 >= 0x100)
    {
      a1[4] = v8 - 256;
      v12 = *(_QWORD *)v5;
      v10 = v5 + 8;
      v11 = v12;
      a1[1] = v10;
      if ((char *)a1[3] == v4)
      {
        v13 = (uint64_t)&v10[-*a1];
        if ((unint64_t)v10 <= *a1)
        {
          if (v4 == (char *)*a1)
            v41 = 1;
          else
            v41 = (uint64_t)&v4[-*a1] >> 2;
          v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v41);
          v44 = &v42[8 * (v41 >> 2)];
          v45 = (uint64_t *)a1[1];
          v4 = v44;
          v46 = a1[2] - (_QWORD)v45;
          if (v46)
          {
            v4 = &v44[v46 & 0xFFFFFFFFFFFFFFF8];
            v47 = 8 * (v46 >> 3);
            v48 = &v42[8 * (v41 >> 2)];
            do
            {
              v49 = *v45++;
              *(_QWORD *)v48 = v49;
              v48 += 8;
              v47 -= 8;
            }
            while (v47);
          }
          v50 = (char *)*a1;
          *a1 = v42;
          a1[1] = v44;
          a1[2] = v4;
          a1[3] = &v42[8 * v43];
          if (v50)
          {
            operator delete(v50);
            v4 = (char *)a1[2];
          }
        }
        else
        {
          v14 = v13 >> 3;
          v15 = v13 >> 3 < -1;
          v16 = (v13 >> 3) + 2;
          if (v15)
            v17 = v16;
          else
            v17 = v14 + 1;
          v18 = -(v17 >> 1);
          v19 = v17 >> 1;
          v20 = &v10[-8 * v19];
          v21 = v4 - v10;
          if (v4 == v10)
          {
            v22 = v4;
          }
          else
          {
            memmove(&v10[-8 * v19], v10, v4 - v10);
            v22 = (char *)a1[1];
          }
          v4 = &v20[v21];
          a1[1] = &v22[8 * v18];
          a1[2] = &v20[v21];
        }
      }
      *(_QWORD *)v4 = v11;
LABEL_82:
      a1[2] += 8;
LABEL_83:
      v5 = (char *)a1[1];
      v9 = a1[5] + a1[4];
      goto LABEL_84;
    }
    v23 = v6 >> 3;
    v24 = (char *)a1[3];
    v25 = (char *)*a1;
    v26 = (uint64_t)&v24[-*a1];
    if (v6 >> 3 < (unint64_t)(v26 >> 3))
    {
      v27 = operator new(0x1000uLL);
      v28 = v27;
      if (v24 == v4)
      {
        if (v25 == v5)
        {
          if (v4 == v5)
            v51 = 1;
          else
            v51 = v26 >> 2;
          v52 = 2 * v51;
          v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v51);
          v5 = &v53[(v52 + 6) & 0xFFFFFFFFFFFFFFF8];
          v55 = (uint64_t *)a1[1];
          v56 = v5;
          v57 = a1[2] - (_QWORD)v55;
          if (v57)
          {
            v56 = &v5[v57 & 0xFFFFFFFFFFFFFFF8];
            v58 = 8 * (v57 >> 3);
            v59 = v5;
            do
            {
              v60 = *v55++;
              *(_QWORD *)v59 = v60;
              v59 += 8;
              v58 -= 8;
            }
            while (v58);
          }
          v61 = (char *)*a1;
          *a1 = v53;
          a1[1] = v5;
          a1[2] = v56;
          a1[3] = &v53[8 * v54];
          if (v61)
          {
            operator delete(v61);
            v5 = (char *)a1[1];
          }
        }
        *((_QWORD *)v5 - 1) = v28;
        v62 = (char *)a1[1];
        v63 = (char *)a1[2];
        a1[1] = v62 - 8;
        v64 = *((_QWORD *)v62 - 1);
        a1[1] = v62;
        if (v63 == (char *)a1[3])
        {
          v65 = (uint64_t)&v62[-*a1];
          if ((unint64_t)v62 <= *a1)
          {
            if (v63 == (char *)*a1)
              v97 = 1;
            else
              v97 = (uint64_t)&v63[-*a1] >> 2;
            v98 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v97);
            v100 = &v98[8 * (v97 >> 2)];
            v101 = (uint64_t *)a1[1];
            v63 = v100;
            v102 = a1[2] - (_QWORD)v101;
            if (v102)
            {
              v63 = &v100[v102 & 0xFFFFFFFFFFFFFFF8];
              v103 = 8 * (v102 >> 3);
              v104 = &v98[8 * (v97 >> 2)];
              do
              {
                v105 = *v101++;
                *(_QWORD *)v104 = v105;
                v104 += 8;
                v103 -= 8;
              }
              while (v103);
            }
            v106 = (char *)*a1;
            *a1 = v98;
            a1[1] = v100;
            a1[2] = v63;
            a1[3] = &v98[8 * v99];
            if (v106)
            {
              operator delete(v106);
              v63 = (char *)a1[2];
            }
          }
          else
          {
            v66 = v65 >> 3;
            v15 = v65 >> 3 < -1;
            v67 = (v65 >> 3) + 2;
            if (v15)
              v68 = v67;
            else
              v68 = v66 + 1;
            v69 = -(v68 >> 1);
            v70 = v68 >> 1;
            v71 = &v62[-8 * v70];
            v72 = v63 - v62;
            if (v63 != v62)
            {
              memmove(&v62[-8 * v70], v62, v63 - v62);
              v62 = (char *)a1[1];
            }
            v63 = &v71[v72];
            a1[1] = &v62[8 * v69];
            a1[2] = &v71[v72];
          }
        }
        *(_QWORD *)v63 = v64;
      }
      else
      {
        *(_QWORD *)v4 = v27;
      }
      goto LABEL_82;
    }
    if (v24 == v25)
      v29 = 1;
    else
      v29 = v26 >> 2;
    v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v29);
    v32 = v31;
    v33 = &v30[8 * v23];
    *(_QWORD *)&v34 = v30;
    *((_QWORD *)&v34 + 1) = v33;
    v110 = v34;
    v35 = operator new(0x1000uLL);
    *(_QWORD *)&v36 = v33;
    *((_QWORD *)&v36 + 1) = &v30[8 * v32];
    if (v23 == v32)
    {
      v37 = 8 * v23;
      *(_QWORD *)&v38 = v110;
      if (v6 >= 1)
      {
        v39 = v37 >> 3;
        if (v39 >= -1)
          v40 = v39 + 1;
        else
          v40 = v39 + 2;
        v33 -= 8 * (v40 >> 1);
        *(_QWORD *)&v36 = v33;
        *((_QWORD *)&v38 + 1) = v33;
        goto LABEL_56;
      }
      v73 = v37 >> 2;
      if (v4 == v5)
        v74 = 1;
      else
        v74 = v73;
      v75 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v74);
      v33 = &v75[8 * (v74 >> 2)];
      *(_QWORD *)&v38 = v75;
      *((_QWORD *)&v38 + 1) = v33;
      *(_QWORD *)&v36 = v33;
      *((_QWORD *)&v36 + 1) = &v75[8 * v76];
      if (!v30)
        goto LABEL_56;
      v107 = v36;
      v110 = v38;
      operator delete(v30);
      v36 = v107;
    }
    v38 = v110;
LABEL_56:
    *(_QWORD *)v33 = v35;
    *(_QWORD *)&v36 = v36 + 8;
    for (i = a1[2]; i != a1[1]; i -= 8)
    {
      v78 = (_QWORD *)*((_QWORD *)&v38 + 1);
      if (*((_QWORD *)&v38 + 1) == (_QWORD)v38)
      {
        v80 = (_BYTE *)v36;
        if ((unint64_t)v36 >= *((_QWORD *)&v36 + 1))
        {
          if (*((_QWORD *)&v36 + 1) == *((_QWORD *)&v38 + 1))
            v85 = 1;
          else
            v85 = (uint64_t)(*((_QWORD *)&v36 + 1) - *((_QWORD *)&v38 + 1)) >> 2;
          v86 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v85);
          v79 = &v86[(2 * v85 + 6) & 0xFFFFFFFFFFFFFFF8];
          v88 = v79;
          v89 = v80 - (_BYTE *)v78;
          if (v80 != (_BYTE *)v78)
          {
            v88 = &v79[v89 & 0xFFFFFFFFFFFFFFF8];
            v90 = 8 * (v89 >> 3);
            v91 = v79;
            v92 = v78;
            do
            {
              v93 = *v92++;
              *(_QWORD *)v91 = v93;
              v91 += 8;
              v90 -= 8;
            }
            while (v90);
          }
          *(_QWORD *)&v38 = v86;
          *((_QWORD *)&v38 + 1) = v79;
          *(_QWORD *)&v36 = v88;
          *((_QWORD *)&v36 + 1) = &v86[8 * v87];
          if (v78)
          {
            v108 = v36;
            v112 = v38;
            operator delete(v78);
            v36 = v108;
            v38 = v112;
          }
        }
        else
        {
          v81 = (uint64_t)(*((_QWORD *)&v36 + 1) - v36) >> 3;
          if (v81 >= -1)
            v82 = v81 + 1;
          else
            v82 = v81 + 2;
          v83 = v82 >> 1;
          v84 = v36 + 8 * (v82 >> 1);
          v79 = (char *)(v84 - (v36 - *((_QWORD *)&v38 + 1)));
          if ((_QWORD)v36 == *((_QWORD *)&v38 + 1))
          {
            v80 = (_BYTE *)*((_QWORD *)&v38 + 1);
          }
          else
          {
            v109 = *((_QWORD *)&v36 + 1);
            v111 = v38;
            memmove((void *)(v84 - (v36 - *((_QWORD *)&v38 + 1))), *((const void **)&v38 + 1), v36 - *((_QWORD *)&v38 + 1));
            *((_QWORD *)&v36 + 1) = v109;
            *(_QWORD *)&v38 = v111;
          }
          *((_QWORD *)&v38 + 1) = v79;
          *(_QWORD *)&v36 = &v80[8 * v83];
        }
      }
      else
      {
        v79 = (char *)*((_QWORD *)&v38 + 1);
      }
      v94 = *(_QWORD *)(i - 8);
      *((_QWORD *)v79 - 1) = v94;
      *((_QWORD *)&v38 + 1) -= 8;
    }
    v95 = (char *)*a1;
    *(_OWORD *)a1 = v38;
    *((_OWORD *)a1 + 1) = v36;
    if (v95)
      operator delete(v95);
    goto LABEL_83;
  }
LABEL_84:
  result = *a2;
  *(__n128 *)(*(_QWORD *)&v5[(v9 >> 5) & 0x7FFFFFFFFFFFFF8] + 16 * v9) = *a2;
  ++a1[5];
  return result;
}

void sub_1913B23AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 a11)
{
  void *v11;

  operator delete(v11);
  if ((_QWORD)a11)
    operator delete((void *)a11);
  _Unwind_Resume(a1);
}

uint64_t std::deque<Espresso::basic_block::walk_status>::~deque[abi:ne180100](uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  *(_QWORD *)(a1 + 40) = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 128;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    v6 = 256;
LABEL_7:
    *(_QWORD *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    v9 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    if (v8 != v9)
      *(_QWORD *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t Espresso::basic_block::is_blob_defined_in_predecessors(unint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v6;
  _BYTE *v7;
  uint64_t v8;
  _QWORD *i;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t *v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unsigned __int8 v24;
  __n128 v25;
  __int128 v26;
  __n128 v27;
  uint64_t v28;
  _OWORD v29[2];
  __int128 v30;
  _BYTE v31[24];
  _BYTE *v32;
  _BYTE v33[24];
  _BYTE *v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v24 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(_QWORD **)(*(_QWORD *)(a1 + 192) + 240), a2);
  v6 = operator new(0x20uLL);
  *v6 = &off_1E2DB3658;
  v6[1] = a3;
  v6[2] = a2;
  v6[3] = &v24;
  v32 = v6;
  std::__function::__func<Espresso::basic_block::is_blob_defined_in_predecessors(std::string const&,std::unordered_map<std::string,Espresso::basic_block*> const&)::$_0,std::allocator<Espresso::basic_block::is_blob_defined_in_predecessors(std::string const&,std::unordered_map<std::string,Espresso::basic_block*> const&)::$_0>,void ()(Espresso::basic_block::walk_status const&)>::__clone((uint64_t)v6);
  v34 = v7;
  v30 = 0u;
  memset(v29, 0, sizeof(v29));
  v27.n128_u64[0] = a1;
  v27.n128_u32[2] = 0;
  std::deque<Espresso::basic_block::walk_status>::push_back(v29, &v27);
  v27.n128_u64[1] = 0;
  v28 = 0;
  v27.n128_u64[0] = (unint64_t)&v27.n128_u64[1];
  v8 = *((_QWORD *)&v30 + 1);
  if (*((_QWORD *)&v30 + 1))
  {
    do
    {
      v26 = *(_OWORD *)(*(_QWORD *)(*((_QWORD *)&v29[0] + 1) + (((unint64_t)v30 >> 5) & 0x7FFFFFFFFFFFFF8))
                      + 16 * v30);
      *(_QWORD *)&v30 = v30 + 1;
      *((_QWORD *)&v30 + 1) = v8 - 1;
      if ((unint64_t)v30 >= 0x200)
      {
        operator delete(**((void ***)&v29[0] + 1));
        *((_QWORD *)&v29[0] + 1) += 8;
        *(_QWORD *)&v30 = v30 - 256;
      }
      if (SDWORD2(v26) >= 1)
      {
        if (!v34)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(_BYTE *, __int128 *))(*(_QWORD *)v34 + 48))(v34, &v26);
      }
      for (i = *(_QWORD **)(v26 + 128); i; i = (_QWORD *)*i)
      {
        v10 = i[2];
        v11 = v27.n128_u64[1];
        v12 = &v27.n128_u64[1];
        v13 = &v27.n128_u64[1];
        if (v27.n128_u64[1])
        {
          v14 = (_QWORD *)v27.n128_u64[1];
          do
          {
            v15 = v14[4];
            if (v10 >= v15)
            {
              if (v15 >= v10)
                goto LABEL_24;
              ++v14;
            }
            v14 = (_QWORD *)*v14;
          }
          while (v14);
          while (1)
          {
            while (1)
            {
              v13 = (unint64_t *)v11;
              v16 = *(_QWORD *)(v11 + 32);
              if (v10 >= v16)
                break;
              v11 = *v13;
              v12 = v13;
              if (!*v13)
                goto LABEL_20;
            }
            if (v16 >= v10)
              break;
            v11 = v13[1];
            if (!v11)
            {
              v12 = v13 + 1;
              goto LABEL_20;
            }
          }
        }
        else
        {
LABEL_20:
          v17 = (uint64_t *)operator new(0x28uLL);
          v17[4] = v10;
          *v17 = 0;
          v17[1] = 0;
          v17[2] = (uint64_t)v13;
          *v12 = (unint64_t)v17;
          if (*(_QWORD *)v27.n128_u64[0])
          {
            v27.n128_u64[0] = *(_QWORD *)v27.n128_u64[0];
            v17 = (uint64_t *)*v12;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v27.n128_u64[1], v17);
          ++v28;
        }
        v25.n128_u64[0] = v10;
        v25.n128_u32[2] = DWORD2(v26) + 1;
        std::deque<Espresso::basic_block::walk_status>::push_back(v29, &v25);
LABEL_24:
        ;
      }
      v8 = *((_QWORD *)&v30 + 1);
    }
    while (*((_QWORD *)&v30 + 1));
    v18 = (_QWORD *)v27.n128_u64[1];
  }
  else
  {
    v18 = 0;
  }
  std::__tree<int>::destroy(v18);
  std::deque<Espresso::basic_block::walk_status>::~deque[abi:ne180100]((uint64_t)v29);
  v19 = v34;
  if (v34 == v33)
  {
    v20 = 4;
    v19 = v33;
  }
  else
  {
    if (!v34)
      goto LABEL_33;
    v20 = 5;
  }
  (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_33:
  v21 = v32;
  if (v32 == v31)
  {
    v22 = 4;
    v21 = v31;
    goto LABEL_37;
  }
  if (v32)
  {
    v22 = 5;
LABEL_37:
    (*(void (**)(void))(*v21 + 8 * v22))();
  }
  return v24;
}

void sub_1913B2774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  uint64_t v26;
  uint64_t v27;
  _QWORD *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;

  std::deque<Espresso::basic_block::walk_status>::~deque[abi:ne180100]((uint64_t)&a19);
  v29 = *(_QWORD **)(v26 + 56);
  if (v29 == (_QWORD *)(v27 - 104))
  {
    v30 = 4;
    v29 = (_QWORD *)(v27 - 104);
  }
  else
  {
    if (!v29)
      goto LABEL_6;
    v30 = 5;
  }
  (*(void (**)(void))(*v29 + 8 * v30))();
LABEL_6:
  v31 = *(char **)(v26 + 24);
  if (v31 == &a26)
  {
    v32 = 4;
    v31 = &a26;
  }
  else
  {
    if (!v31)
      goto LABEL_11;
    v32 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v31 + 8 * v32))();
LABEL_11:
  _Unwind_Resume(a1);
}

void std::__function::__func<Espresso::basic_block::is_blob_defined_in_predecessors(std::string const&,std::unordered_map<std::string,Espresso::basic_block*> const&)::$_0,std::allocator<Espresso::basic_block::is_blob_defined_in_predecessors(std::string const&,std::unordered_map<std::string,Espresso::basic_block*> const&)::$_0>,void ()(Espresso::basic_block::walk_status const&)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

__n128 std::__function::__func<Espresso::basic_block::is_blob_defined_in_predecessors(std::string const&,std::unordered_map<std::string,Espresso::basic_block*> const&)::$_0,std::allocator<Espresso::basic_block::is_blob_defined_in_predecessors(std::string const&,std::unordered_map<std::string,Espresso::basic_block*> const&)::$_0>,void ()(Espresso::basic_block::walk_status const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E2DB3658;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<Espresso::basic_block::is_blob_defined_in_predecessors(std::string const&,std::unordered_map<std::string,Espresso::basic_block*> const&)::$_0,std::allocator<Espresso::basic_block::is_blob_defined_in_predecessors(std::string const&,std::unordered_map<std::string,Espresso::basic_block*> const&)::$_0>,void ()(Espresso::basic_block::walk_status const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DB3658;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

unint64_t std::__function::__func<Espresso::basic_block::is_blob_defined_in_predecessors(std::string const&,std::unordered_map<std::string,Espresso::basic_block*> const&)::$_0,std::allocator<Espresso::basic_block::is_blob_defined_in_predecessors(std::string const&,std::unordered_map<std::string,Espresso::basic_block*> const&)::$_0>,void ()(Espresso::basic_block::walk_status const&)>::operator()(uint64_t a1, _QWORD *a2)
{
  unsigned __int8 *v4;
  _QWORD *v5;
  unint64_t result;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned __int8 **v12;
  unsigned __int8 *i;
  unint64_t v14;

  v5 = *(_QWORD **)(a1 + 8);
  v4 = *(unsigned __int8 **)(a1 + 16);
  result = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)v4);
  v7 = (int8x8_t)v5[1];
  if (v7)
  {
    v8 = result;
    v9 = (uint8x8_t)vcnt_s8(v7);
    v9.i16[0] = vaddlv_u8(v9);
    v10 = v9.u32[0];
    if (v9.u32[0] > 1uLL)
    {
      v11 = result;
      if (result >= *(_QWORD *)&v7)
        v11 = result % *(_QWORD *)&v7;
    }
    else
    {
      v11 = (*(_QWORD *)&v7 - 1) & result;
    }
    v12 = *(unsigned __int8 ***)(*v5 + 8 * v11);
    if (v12)
    {
      for (i = *v12; i; i = *(unsigned __int8 **)i)
      {
        v14 = *((_QWORD *)i + 1);
        if (v8 == v14)
        {
          result = std::equal_to<std::string>::operator()[abi:ne180100](i + 16, v4);
          if ((result & 1) != 0)
          {
            if (*((_QWORD *)i + 5) == *a2)
              **(_BYTE **)(a1 + 24) = 1;
            return result;
          }
        }
        else
        {
          if (v10 > 1)
          {
            if (v14 >= *(_QWORD *)&v7)
              v14 %= *(_QWORD *)&v7;
          }
          else
          {
            v14 &= *(_QWORD *)&v7 - 1;
          }
          if (v14 != v11)
            return result;
        }
      }
    }
  }
  return result;
}

uint64_t std::__function::__func<Espresso::basic_block::is_blob_defined_in_predecessors(std::string const&,std::unordered_map<std::string,Espresso::basic_block*> const&)::$_0,std::allocator<Espresso::basic_block::is_blob_defined_in_predecessors(std::string const&,std::unordered_map<std::string,Espresso::basic_block*> const&)::$_0>,void ()(Espresso::basic_block::walk_status const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZNK8Espresso11basic_block31is_blob_defined_in_predecessorsERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEERKNS1_13unordered_mapIS7_PS0_NS1_4hashIS7_EENS1_8equal_toIS7_EENS5_INS1_4pairIS8_SB_EEEEEEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<Espresso::basic_block::is_blob_defined_in_predecessors(std::string const&,std::unordered_map<std::string,Espresso::basic_block*> const&)::$_0,std::allocator<Espresso::basic_block::is_blob_defined_in_predecessors(std::string const&,std::unordered_map<std::string,Espresso::basic_block*> const&)::$_0>,void ()(Espresso::basic_block::walk_status const&)>::target_type()
{
}

_QWORD *Espresso::basic_block::debug_name(Espresso::basic_block *this, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  int v6;
  _QWORD *v7;
  uint64_t v8;
  char *v10;

  v2 = a2;
  do
  {
    v2 = *(_QWORD *)(v2 + 8);
    if (v2 == a2)
    {
      v10 = "<empty>";
      return std::string::basic_string[abi:ne180100]<0>(this, v10);
    }
    v3 = *(_QWORD **)(v2 + 16);
    v4 = *v3;
    v5 = (_QWORD *)(*v3 + 40);
    v6 = *(char *)(*v3 + 63);
    if (v6 < 0)
    {
      if (*(_QWORD *)(v4 + 48) != 11)
        break;
      v5 = (_QWORD *)*v5;
    }
    else if (v6 != 11)
    {
      break;
    }
    v7 = (_QWORD *)*v5;
    v8 = *(_QWORD *)((char *)v5 + 3);
  }
  while (v7 == (_QWORD *)0x747269765F696870 && v8 == 0x6C6175747269765FLL);
  v10 = (char *)v3[2];
  if (v10 != (char *)v3[3])
  {
    if ((v10[23] & 0x80000000) == 0)
      return std::string::basic_string[abi:ne180100]<0>(this, v10);
    goto LABEL_17;
  }
  v10 = (char *)(v4 + 16);
  if (*(char *)(v4 + 39) < 0)
LABEL_17:
    v10 = *(char **)v10;
  return std::string::basic_string[abi:ne180100]<0>(this, v10);
}

void Espresso::rnn_arch_kernel_montreal::~rnn_arch_kernel_montreal(Espresso::rnn_arch_kernel_montreal *this)
{
  Espresso::montreal_base::~montreal_base((Espresso::rnn_arch_kernel_montreal *)((char *)this + 880));
  Espresso::generic_rnn_arch_kernel_impl::~generic_rnn_arch_kernel_impl(this);
}

{
  Espresso::montreal_base::~montreal_base((Espresso::rnn_arch_kernel_montreal *)((char *)this + 880));
  Espresso::generic_rnn_arch_kernel_impl::~generic_rnn_arch_kernel_impl(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::rnn_arch_kernel_montreal::__launch(uint64_t a1, uint64_t *a2, uint64_t **a3, std::string::size_type **a4)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  _OWORD *v13;
  std::__shared_weak_count *v14;
  char *v15;
  unint64_t *v16;
  unint64_t v17;
  _OWORD *v18;
  std::__shared_weak_count *v19;
  char *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  std::__shared_weak_count *v26;
  char *v27;
  unint64_t *v28;
  unint64_t v29;
  _OWORD *v30;
  std::__shared_weak_count *v31;
  char *v32;
  unint64_t *v33;
  unint64_t v34;
  _OWORD *v35;
  std::__shared_weak_count *v36;
  char *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _OWORD *v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  _OWORD *v46;
  std::__shared_weak_count *v47;
  char *v48;
  unint64_t *v49;
  unint64_t v50;
  _OWORD *v51;
  std::__shared_weak_count *v52;
  char *v53;
  unint64_t *v54;
  unint64_t v55;
  int v56;
  char *v57;
  int v58;
  char *v59;
  uint64_t v60;
  int32x2_t v61;
  int v62;
  int v63;
  int v64;
  const __CFAllocator *v65;
  __CFDictionary *Mutable;
  CFNumberRef v67;
  CFNumberRef v68;
  char **v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  std::__shared_weak_count *v74;
  uint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  void *v78;
  uint64_t v79;
  uint64x2_t v80;
  int32x2_t v81;
  int64x2_t v82;
  int64x2_t v83;
  int32x2_t v84;
  int32x2_t v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  uint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  unint64_t *v101;
  std::__shared_weak_count *v102;
  uint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count *v105;
  uint64_t *v106;
  unint64_t v107;
  std::runtime_error *exception;
  std::runtime_error *v109;
  char *v110;
  char *v111;
  char *v112;
  char *v113;
  char *v114;
  char *v115;
  char *v116;
  char *v117;
  int v118;
  void *__p;
  std::__shared_weak_count *v120;
  char v121;
  void **p_p;
  std::__shared_weak_count *v123;
  uint64_t valuePtr;
  void *v125;
  std::__shared_weak_count *v126;
  unsigned int *v127;
  std::__shared_weak_count *v128;
  _OWORD *v129[2];

  if (*(_DWORD *)(a1 + 440) != 1 || *(_DWORD *)(a1 + 452) != 1 || *(_DWORD *)(a1 + 304))
  {
    Espresso::generic_rnn_arch_kernel_impl::__launch(a1, a2, a3, a4);
    return;
  }
  v5 = (std::__shared_weak_count *)(*a4)[1];
  v127 = (unsigned int *)**a4;
  v128 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v8 = (std::__shared_weak_count *)(*a3)[1];
  v125 = (void *)**a3;
  v126 = v8;
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11 = *(_DWORD *)(a1 + 380);
  v118 = *(_DWORD *)(a1 + 384);
  v12 = operator new();
  valuePtr = v12;
  std::string::basic_string[abi:ne180100]<0>(&__p, "W_h");
  v129[0] = &__p;
  v13 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 280), &__p, v129);
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&p_p, *((void **)v13 + 7), *((std::__shared_weak_count **)v13 + 8));
  v14 = v123;
  v15 = (char *)p_p[3];
  if (v123)
  {
    v16 = (unint64_t *)&v123->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v121 < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "W_x");
  v129[0] = &__p;
  v18 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 280), &__p, v129);
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&p_p, *((void **)v18 + 7), *((std::__shared_weak_count **)v18 + 8));
  v19 = v123;
  v20 = (char *)p_p[3];
  if (v123)
  {
    v21 = (unint64_t *)&v123->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  if (v121 < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "b");
  v23 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(_QWORD **)(a1 + 288), &__p);
  if (v121 < 0)
    operator delete(__p);
  if (!v23)
    goto LABEL_38;
  std::string::basic_string[abi:ne180100]<0>(&__p, "b");
  p_p = &__p;
  v24 = *((_QWORD *)std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 280), &__p, (_OWORD **)&p_p)+ 7);
  if (v121 < 0)
    operator delete(__p);
  if (v24)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "b");
    v129[0] = &__p;
    v25 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 280), &__p, v129);
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&p_p, *((void **)v25 + 7), *((std::__shared_weak_count **)v25 + 8));
    v26 = v123;
    v27 = (char *)p_p[3];
    if (v123)
    {
      v28 = (unint64_t *)&v123->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    if (v121 < 0)
      operator delete(__p);
  }
  else
  {
LABEL_38:
    v27 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "W_h_reverse");
  v129[0] = &__p;
  v30 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 280), &__p, v129);
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&p_p, *((void **)v30 + 7), *((std::__shared_weak_count **)v30 + 8));
  v31 = v123;
  v32 = (char *)p_p[3];
  if (v123)
  {
    v33 = (unint64_t *)&v123->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  if (v121 < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "W_x_reverse");
  v129[0] = &__p;
  v35 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 280), &__p, v129);
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&p_p, *((void **)v35 + 7), *((std::__shared_weak_count **)v35 + 8));
  v36 = v123;
  v37 = (char *)p_p[3];
  if (v123)
  {
    v38 = (unint64_t *)&v123->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  if (v121 < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "b_reverse");
  v40 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(_QWORD **)(a1 + 288), &__p);
  if (v121 < 0)
    operator delete(__p);
  if (!v40)
    goto LABEL_66;
  std::string::basic_string[abi:ne180100]<0>(&__p, "b_reverse");
  p_p = &__p;
  v41 = *((_QWORD *)std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 280), &__p, (_OWORD **)&p_p)+ 7);
  if (v121 < 0)
    operator delete(__p);
  if (v41)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "b_reverse");
    v129[0] = &__p;
    v42 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 280), &__p, v129);
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&p_p, *((void **)v42 + 7), *((std::__shared_weak_count **)v42 + 8));
    v43 = v123;
    v115 = (char *)p_p[3];
    if (v123)
    {
      v44 = (unint64_t *)&v123->__shared_owners_;
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }
    if (v121 < 0)
      operator delete(__p);
  }
  else
  {
LABEL_66:
    v115 = 0;
  }
  v117 = v37;
  if (*(_DWORD *)(a1 + 392))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "p");
    v129[0] = &__p;
    v46 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 280), &__p, v129);
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&p_p, *((void **)v46 + 7), *((std::__shared_weak_count **)v46 + 8));
    v47 = v123;
    v48 = (char *)p_p[3];
    if (v123)
    {
      v49 = (unint64_t *)&v123->__shared_owners_;
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v50 - 1, v49));
      if (!v50)
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
    }
    if (v121 < 0)
      operator delete(__p);
    std::string::basic_string[abi:ne180100]<0>(&__p, "p_reverse");
    v129[0] = &__p;
    v51 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 280), &__p, v129);
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&p_p, *((void **)v51 + 7), *((std::__shared_weak_count **)v51 + 8));
    v52 = v123;
    v53 = (char *)p_p[3];
    if (v123)
    {
      v54 = (unint64_t *)&v123->__shared_owners_;
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v55 - 1, v54));
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
        std::__shared_weak_count::__release_weak(v52);
      }
    }
    if (v121 < 0)
      operator delete(__p);
  }
  else
  {
    v53 = 0;
    v48 = 0;
  }
  if (!v15)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "null W_h");
    goto LABEL_161;
  }
  if (!v20)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "null W_x");
    goto LABEL_161;
  }
  if (!v32)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "null W_h_rev");
    goto LABEL_161;
  }
  v56 = *(_DWORD *)(a1 + 392);
  if (!v56)
    goto LABEL_89;
  if (!v48)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "null p");
    goto LABEL_161;
  }
  if (!v53)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "null p_rev");
LABEL_161:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
LABEL_89:
  v114 = v27;
  v57 = v20;
  v58 = 2 * v11;
  v116 = v32;
  if (v56)
  {
    v59 = v15;
    v112 = &v48[4 * v58];
    v113 = &v48[4 * v11];
    v60 = v11;
    v110 = &v53[4 * v58];
    v111 = &v53[4 * v11];
  }
  else
  {
    v60 = v11;
    v59 = v15;
    v48 = 0;
    v112 = 0;
    v113 = 0;
    v53 = 0;
    v110 = 0;
    v111 = 0;
  }
  v61 = (int32x2_t)0x100000000;
  *(_QWORD *)v12 = 0x100000000;
  *(_DWORD *)(v12 + 612) = 1;
  *(_DWORD *)(v12 + 12) = v118;
  *(_DWORD *)(v12 + 16) = v11;
  *(_DWORD *)(v12 + 8) = 7;
  *(_DWORD *)(v12 + 576) = espresso_to_montreal_activation(*(_QWORD *)(a1 + 320));
  *(_DWORD *)(v12 + 580) = espresso_to_montreal_activation(*(_QWORD *)(a1 + 332));
  *(_DWORD *)(v12 + 584) = espresso_to_montreal_activation(*(_QWORD *)(a1 + 308));
  *(_DWORD *)(v12 + 588) = espresso_to_montreal_activation(*(_QWORD *)(a1 + 356));
  *(_DWORD *)(v12 + 592) = espresso_to_montreal_activation(*(_QWORD *)(a1 + 368));
  *(_DWORD *)(v12 + 596) = espresso_to_montreal_activation(*(_QWORD *)(a1 + 344));
  *(_DWORD *)(v12 + 516) = 32;
  v62 = *(_DWORD *)(a1 + 392);
  *(_BYTE *)(v12 + 520) = v62 != 0;
  *(_BYTE *)(v12 + 32) = 1;
  *(_QWORD *)(v12 + 112) = v57;
  *(_QWORD *)(v12 + 120) = &v57[4 * v118 * v11];
  *(_OWORD *)(v12 + 36) = xmmword_191A93480;
  *(_QWORD *)(v12 + 128) = &v57[12 * v118 * v11];
  *(_QWORD *)(v12 + 136) = &v57[8 * v118 * v11];
  *(_QWORD *)(v12 + 144) = v59;
  *(_QWORD *)(v12 + 152) = &v59[4 * v11 * v11];
  *(_OWORD *)(v12 + 52) = xmmword_191A93490;
  *(_QWORD *)(v12 + 160) = &v59[12 * v11 * v11];
  *(_QWORD *)(v12 + 168) = &v59[8 * v11 * v11];
  *(_QWORD *)(v12 + 176) = v117;
  *(_QWORD *)(v12 + 184) = &v117[4 * v118 * v11];
  *(_OWORD *)(v12 + 68) = xmmword_191A934A0;
  *(_QWORD *)(v12 + 192) = &v117[12 * v118 * v11];
  *(_QWORD *)(v12 + 200) = &v117[8 * v118 * v11];
  *(_QWORD *)(v12 + 208) = v116;
  *(_QWORD *)(v12 + 216) = &v116[4 * v11 * v11];
  *(_OWORD *)(v12 + 84) = xmmword_191A93490;
  *(_QWORD *)(v12 + 224) = &v116[12 * v11 * v11];
  *(_QWORD *)(v12 + 232) = &v116[8 * v11 * v11];
  *(_QWORD *)(v12 + 100) = 0x700000006;
  v63 = *(_DWORD *)(a1 + 400);
  *(_BYTE *)(v12 + 244) = v63 != 0;
  *(_DWORD *)(v12 + 240) = 32;
  if (v63)
  {
    *(_QWORD *)(v12 + 248) = v114;
    *(_QWORD *)(v12 + 256) = &v114[4 * v60];
    *(_QWORD *)(v12 + 264) = &v114[12 * v11];
    *(_QWORD *)(v12 + 272) = &v114[4 * v58];
    *(_QWORD *)(v12 + 280) = v115;
    *(_QWORD *)(v12 + 288) = &v115[4 * v60];
    *(_QWORD *)(v12 + 296) = &v115[12 * v11];
    *(_QWORD *)(v12 + 304) = &v115[4 * v58];
  }
  if (v62)
  {
    *(_QWORD *)(v12 + 528) = v48;
    *(_QWORD *)(v12 + 536) = v113;
    *(_QWORD *)(v12 + 544) = v112;
    *(_QWORD *)(v12 + 552) = v53;
    *(_QWORD *)(v12 + 560) = v111;
    *(_QWORD *)(v12 + 568) = v110;
  }
  *(_BYTE *)(v12 + 512) = 0;
  v64 = *(_DWORD *)(a1 + 416);
  *(_BYTE *)(v12 + 20) = 0;
  *(_DWORD *)(v12 + 24) = 0;
  *(_DWORD *)(v12 + 28) = v64;
  *(_BYTE *)(v12 + 600) = *(_DWORD *)(a1 + 412) != 0;
  *(_BYTE *)(v12 + 608) = 0;
  *(_BYTE *)(v12 + 601) = *(_DWORD *)(a1 + 404) != 0;
  *(_DWORD *)(v12 + 604) = *(_DWORD *)(a1 + 408);
  v65 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  LODWORD(__p) = 1;
  v67 = CFNumberCreate(v65, kCFNumberLongLongType, &valuePtr);
  CFDictionaryAddValue(Mutable, CFSTR("LayerParametersEspresso"), v67);
  CFRelease(v67);
  v68 = CFNumberCreate(v65, kCFNumberIntType, &__p);
  CFDictionaryAddValue(Mutable, CFSTR("LayerParametersEspressoSize"), v68);
  CFRelease(v68);
  v69 = *(char ***)(a1 + 888);
  if (v69)
  {
    v70 = *(_QWORD *)(a1 + 880);
    if (v70)
      MRLModelStateRelease(v70, v69);
  }
  else
  {
    v71 = *(_QWORD *)(a1 + 880);
    if (v71)
      MRLModelRelease(v71);
  }
  *(_DWORD *)(a1 + 924) = 70;
  v72 = MRLModelCreate((uint64_t)Mutable);
  *(_QWORD *)(a1 + 880) = v72;
  *(_QWORD *)(a1 + 888) = MRLModelStateCreate(v72);
  CFRelease(Mutable);
  v73 = v127[6];
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&__p, v127, v128);
  v74 = v120;
  v75 = *((_QWORD *)__p + 3);
  if (v120)
  {
    v76 = (unint64_t *)&v120->__shared_owners_;
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
  if ((_DWORD)v73)
  {
    if ((v73 & 0x80000000) != 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v78 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((int)v73);
    bzero(v78, 8 * (int)v73);
    v79 = 0;
    v80 = (uint64x2_t)vdupq_n_s64(v73 - 1);
    v81 = vdup_n_s32(v127[5] * v127[2] * v127[3] * v127[4]);
    v82 = (int64x2_t)xmmword_191A82A80;
    v83 = vdupq_n_s64(2uLL);
    do
    {
      v84 = vmovn_s64((int64x2_t)vcgeq_u64(v80, (uint64x2_t)v82));
      v85 = vmul_s32(v81, v61);
      *(_QWORD *)&v86 = v85.i32[0];
      *((_QWORD *)&v86 + 1) = v85.i32[1];
      v87 = v86;
      if ((v84.i8[0] & 1) != 0)
        *((_QWORD *)v78 + v79) = v75 + 4 * v87;
      if ((v84.i8[4] & 1) != 0)
        *((_QWORD *)v78 + v79 + 1) = v75 + 4 * *((_QWORD *)&v87 + 1);
      v79 += 2;
      v82 = vaddq_s64(v82, v83);
      v61 = vadd_s32(v61, (int32x2_t)0x200000002);
    }
    while (((v73 + 1) & 0x1FFFFFFFELL) != v79);
  }
  else
  {
    v78 = 0;
  }
  if ((int)v73 >= *(_DWORD *)(a1 + 924))
  {
    v88 = *(_QWORD *)(a1 + 880);
    std::mutex::lock(&globalMutex(void)::mutex);
    if (!v88)
      goto LABEL_158;
    maxFeatureVectors = *(_DWORD *)(v88 + 224);
    if (*(_BYTE *)(v88 + 188))
      MRLModelWrapper::cleanupAllBuffers(v88);
    *(_BYTE *)(v88 + 188) = 0;
    if ((v73 + 1) >= 0x270F)
    {
LABEL_158:
      std::mutex::unlock(&globalMutex(void)::mutex);
      v109 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v109, "maximum sequence length exceeded");
      __cxa_throw(v109, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    *(_DWORD *)(v88 + 220) = v73 + 2;
    *(_DWORD *)(v88 + 224) = v73 + 2;
    maxFeatureVectors = v73 + 2;
    std::mutex::unlock(&globalMutex(void)::mutex);
    *(_DWORD *)(a1 + 924) = v73;
  }
  if (!*(_DWORD *)(a1 + 448))
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&__p, 2 * v11 * v73, 1, 1, 1);
    v93 = *(_QWORD *)(a1 + 880);
    v94 = __p;
    MRLModelRecognizeVectors(v93, (uint64_t)v78, (int)v73, *((char **)__p + 2));
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&p_p, v125, v126);
    memcpy(p_p[3], (const void *)(v94[2] + 4 * (2 * (int)v73 - 2) * v11), 4 * v60);
    v95 = v123;
    if (v123)
    {
      v96 = (unint64_t *)&v123->__shared_owners_;
      do
        v97 = __ldaxr(v96);
      while (__stlxr(v97 - 1, v96));
      if (!v97)
      {
        ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
        std::__shared_weak_count::__release_weak(v95);
      }
    }
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&p_p, v125, v126);
    memcpy((char *)p_p[3] + 4 * v60, (const void *)(*((_QWORD *)__p + 2) + 4 * v60), 4 * v60);
    v98 = v123;
    if (v123)
    {
      v99 = (unint64_t *)&v123->__shared_owners_;
      do
        v100 = __ldaxr(v99);
      while (__stlxr(v100 - 1, v99));
      if (!v100)
      {
        ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
        std::__shared_weak_count::__release_weak(v98);
      }
    }
    v90 = v120;
    if (!v120)
      goto LABEL_142;
    v101 = (unint64_t *)&v120->__shared_owners_;
    do
      v92 = __ldaxr(v101);
    while (__stlxr(v92 - 1, v101));
    goto LABEL_140;
  }
  v89 = *(_QWORD *)(a1 + 880);
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&__p, v125, v126);
  MRLModelRecognizeVectors(v89, (uint64_t)v78, (int)v73, *((char **)__p + 3));
  v90 = v120;
  if (v120)
  {
    v91 = (unint64_t *)&v120->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
LABEL_140:
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
LABEL_142:
  if (v78)
    operator delete(v78);
  v102 = v126;
  if (v126)
  {
    v103 = &v126->__shared_owners_;
    do
      v104 = __ldaxr((unint64_t *)v103);
    while (__stlxr(v104 - 1, (unint64_t *)v103));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      std::__shared_weak_count::__release_weak(v102);
    }
  }
  v105 = v128;
  if (v128)
  {
    v106 = &v128->__shared_owners_;
    do
      v107 = __ldaxr((unint64_t *)v106);
    while (__stlxr(v107 - 1, (unint64_t *)v106));
    if (!v107)
    {
      ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
      std::__shared_weak_count::__release_weak(v105);
    }
  }
}

void sub_1913B38D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  void *v17;
  uint64_t v18;
  va_list va;

  va_start(va, a17);
  std::mutex::unlock(&globalMutex(void)::mutex);
  if (v17)
    operator delete(v17);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v18 - 128);
  _Unwind_Resume(a1);
}

void Espresso::rnn_arch_kernel_montreal::__set_weight_raw_blob(_DWORD *a1, uint64_t *a2, std::string *a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  int v12;
  int v13;
  int v14;
  uint64_t **v15;
  uint64_t **v16;
  uint64_t **v17;
  uint64_t **v18;
  uint64_t **v19;
  uint64_t **v20;
  uint64_t **v21;
  uint64_t **v22;
  uint64_t **v23;
  uint64_t **v24;
  uint64_t **v25;
  uint64_t **v26;
  uint64_t **v27;
  uint64_t **v28;
  uint64_t **v29;
  uint64_t **v30;
  uint64_t **v31;
  uint64_t **v32;
  uint64_t **v33;
  uint64_t **v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  std::string::size_type size;
  std::string::size_type v40;
  std::string *v41;
  std::string *v42;
  int v43;
  int v44;
  int v45;
  _DWORD *v46;
  const void *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t *v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  char *v61;
  char **v62;
  BOOL v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::runtime_error *exception;
  uint64_t *v71;
  std::string v72;
  void *__p;
  uint64_t v74;
  const void *v75;
  unint64_t v76;
  unsigned __int8 *v77;
  _DWORD *v78;
  char **v79;
  char *v80[2];
  unsigned __int8 v81;
  void *v82;
  std::__shared_weak_count *v83;
  __int128 v84;
  uint64_t v85[2];
  uint64_t v86;
  std::__shared_weak_count *v87;
  std::string *v88;

  v82 = 0;
  v83 = 0;
  if (a6 && *a6)
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v82, *a6, a6[1]);
  v12 = a1[95];
  v13 = a1[96];
  if (a1[76])
    v14 = a1[95];
  else
    v14 = 4 * v12;
  v81 = 0;
  v80[0] = 0;
  v80[1] = 0;
  v79 = v80;
  std::string::basic_string[abi:ne180100]<0>(&__p, "W_x");
  v15 = std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v79, &__p, (uint64_t)&__p);
  *((_DWORD *)v15 + 14) = v13;
  *((_DWORD *)v15 + 15) = v14;
  if (SHIBYTE(v75) < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "W_x_reverse");
  v16 = std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v79, &__p, (uint64_t)&__p);
  *((_DWORD *)v16 + 14) = v13;
  *((_DWORD *)v16 + 15) = v14;
  if (SHIBYTE(v75) < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "W_h");
  v17 = std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v79, &__p, (uint64_t)&__p);
  *((_DWORD *)v17 + 14) = v12;
  *((_DWORD *)v17 + 15) = v14;
  if (SHIBYTE(v75) < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "W_h_reverse");
  v18 = std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v79, &__p, (uint64_t)&__p);
  *((_DWORD *)v18 + 14) = v12;
  *((_DWORD *)v18 + 15) = v14;
  if (SHIBYTE(v75) < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "W_z");
  v19 = std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v79, &__p, (uint64_t)&__p);
  *((_DWORD *)v19 + 14) = v13;
  *((_DWORD *)v19 + 15) = v14;
  if (SHIBYTE(v75) < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "W_r");
  v20 = std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v79, &__p, (uint64_t)&__p);
  *((_DWORD *)v20 + 14) = v13;
  *((_DWORD *)v20 + 15) = v14;
  if (SHIBYTE(v75) < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "W_o");
  v21 = std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v79, &__p, (uint64_t)&__p);
  *((_DWORD *)v21 + 14) = v13;
  *((_DWORD *)v21 + 15) = v14;
  if (SHIBYTE(v75) < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "R_z");
  v22 = std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v79, &__p, (uint64_t)&__p);
  *((_DWORD *)v22 + 14) = v12;
  *((_DWORD *)v22 + 15) = v14;
  if (SHIBYTE(v75) < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "R_r");
  v23 = std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v79, &__p, (uint64_t)&__p);
  *((_DWORD *)v23 + 14) = v12;
  *((_DWORD *)v23 + 15) = v14;
  if (SHIBYTE(v75) < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "R_o");
  v24 = std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v79, &__p, (uint64_t)&__p);
  *((_DWORD *)v24 + 14) = v12;
  *((_DWORD *)v24 + 15) = v14;
  if (SHIBYTE(v75) < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "b");
  v25 = std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v79, &__p, (uint64_t)&__p);
  *((_DWORD *)v25 + 14) = v14;
  *((_DWORD *)v25 + 15) = 1;
  if (SHIBYTE(v75) < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "b_reverse");
  v26 = std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v79, &__p, (uint64_t)&__p);
  *((_DWORD *)v26 + 14) = v14;
  *((_DWORD *)v26 + 15) = 1;
  if (SHIBYTE(v75) < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "p");
  v71 = a2;
  v27 = std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v79, &__p, (uint64_t)&__p);
  *((_DWORD *)v27 + 14) = 3 * v12;
  *((_DWORD *)v27 + 15) = 1;
  if (SHIBYTE(v75) < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "p_reverse");
  v28 = std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v79, &__p, (uint64_t)&__p);
  *((_DWORD *)v28 + 14) = 3 * v12;
  *((_DWORD *)v28 + 15) = 1;
  if (SHIBYTE(v75) < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "B_z");
  v29 = std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v79, &__p, (uint64_t)&__p);
  *((_DWORD *)v29 + 14) = v14;
  *((_DWORD *)v29 + 15) = 1;
  if (SHIBYTE(v75) < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "B_r");
  v30 = std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v79, &__p, (uint64_t)&__p);
  *((_DWORD *)v30 + 14) = v14;
  *((_DWORD *)v30 + 15) = 1;
  if (SHIBYTE(v75) < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "B_o");
  v31 = std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v79, &__p, (uint64_t)&__p);
  *((_DWORD *)v31 + 14) = v14;
  *((_DWORD *)v31 + 15) = 1;
  if (SHIBYTE(v75) < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "B_i_z");
  v32 = std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v79, &__p, (uint64_t)&__p);
  *((_DWORD *)v32 + 14) = v14;
  *((_DWORD *)v32 + 15) = 1;
  if (SHIBYTE(v75) < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "B_i_r");
  v33 = std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v79, &__p, (uint64_t)&__p);
  *((_DWORD *)v33 + 14) = v14;
  *((_DWORD *)v33 + 15) = 1;
  if (SHIBYTE(v75) < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "B_i_o");
  v34 = std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v79, &__p, (uint64_t)&__p);
  *((_DWORD *)v34 + 14) = v14;
  *((_DWORD *)v34 + 15) = 1;
  if (SHIBYTE(v75) < 0)
    operator delete(__p);
  __p = v82;
  v74 = (uint64_t)v83;
  if (v83)
  {
    p_shared_owners = (unint64_t *)&v83->__shared_owners_;
    do
      v36 = __ldxr(p_shared_owners);
    while (__stxr(v36 + 1, p_shared_owners));
  }
  v75 = (const void *)a4;
  v76 = a5;
  v77 = &v81;
  v78 = a1;
  v37 = (uint64_t *)v79;
  if (v79 != v80)
  {
    while (1)
    {
      if (*((char *)v37 + 55) < 0)
        std::string::__init_copy_ctor_external(&v72, (const std::string::value_type *)v37[4], v37[5]);
      else
        v72 = *(std::string *)(v37 + 4);
      v38 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
      if ((v38 & 0x80u) == 0)
        size = HIBYTE(a3->__r_.__value_.__r.__words[2]);
      else
        size = a3->__r_.__value_.__l.__size_;
      v40 = HIBYTE(v72.__r_.__value_.__r.__words[2]);
      if ((v72.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v40 = v72.__r_.__value_.__l.__size_;
      if (size == v40)
      {
        if ((v72.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v41 = &v72;
        else
          v41 = (std::string *)v72.__r_.__value_.__r.__words[0];
        if ((v38 & 0x80) != 0)
        {
          if (!memcmp(a3->__r_.__value_.__l.__data_, v41, a3->__r_.__value_.__l.__size_))
          {
LABEL_71:
            v44 = *((_DWORD *)v37 + 14);
            v45 = *((_DWORD *)v37 + 15);
            v46 = v78;
            v47 = v75;
            v48 = v76;
            v49 = (std::__shared_weak_count *)v74;
            v85[0] = (uint64_t)__p;
            v85[1] = v74;
            if (v74)
            {
              v50 = (unint64_t *)(v74 + 8);
              do
                v51 = __ldxr(v50);
              while (__stxr(v51 + 1, v50));
            }
            Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<float,4>(&v86, *((_QWORD *)v46 + 1), *((std::__shared_weak_count **)v46 + 2), v47, v48, v85, v44, v45, 1, 1, (v47 & 0x3F) == 0);
            if (v49)
            {
              v52 = (unint64_t *)&v49->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
                std::__shared_weak_count::__release_weak(v49);
              }
            }
            std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,std::shared_ptr<Espresso::blob<float,4>> &,void>(&v84, *((_QWORD *)v46 + 1), *((_QWORD *)v46 + 2), &v86);
            v88 = a3;
            v54 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v46 + 35, a3, (__int128 **)&v88);
            std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)(v54 + 7), &v84);
            v55 = (std::__shared_weak_count *)*((_QWORD *)&v84 + 1);
            a2 = v71;
            if (*((_QWORD *)&v84 + 1))
            {
              v56 = (unint64_t *)(*((_QWORD *)&v84 + 1) + 8);
              do
                v57 = __ldaxr(v56);
              while (__stlxr(v57 - 1, v56));
              if (!v57)
              {
                ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
                std::__shared_weak_count::__release_weak(v55);
              }
            }
            *v77 = 1;
            v58 = v87;
            if (v87)
            {
              v59 = (unint64_t *)&v87->__shared_owners_;
              do
                v60 = __ldaxr(v59);
              while (__stlxr(v60 - 1, v59));
              if (!v60)
              {
                ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
                std::__shared_weak_count::__release_weak(v58);
              }
            }
            v43 = v81;
            goto LABEL_90;
          }
        }
        else
        {
          if (!*((_BYTE *)&a3->__r_.__value_.__s + 23))
            goto LABEL_71;
          v42 = a3;
          while (v42->__r_.__value_.__s.__data_[0] == v41->__r_.__value_.__s.__data_[0])
          {
            v42 = (std::string *)((char *)v42 + 1);
            v41 = (std::string *)((char *)v41 + 1);
            if (!--v38)
              goto LABEL_71;
          }
        }
      }
      v43 = Espresso::generic_rnn_arch_kernel_impl::__set_quantized_weight_raw_blob(a1, a2, a3, a4, a5, a6);
      v81 = v43;
LABEL_90:
      if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v72.__r_.__value_.__l.__data_);
      if (!v43)
      {
        v61 = (char *)v37[1];
        if (v61)
        {
          do
          {
            v62 = (char **)v61;
            v61 = *(char **)v61;
          }
          while (v61);
        }
        else
        {
          do
          {
            v62 = (char **)v37[2];
            v63 = *v62 == (char *)v37;
            v37 = (uint64_t *)v62;
          }
          while (!v63);
        }
        v37 = (uint64_t *)v62;
        if (v62 != v80)
          continue;
      }
      break;
    }
  }
  if (!v81)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, &v72);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v64 = (std::__shared_weak_count *)v74;
  if (v74)
  {
    v65 = (unint64_t *)(v74 + 8);
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::destroy(v80[0]);
  v67 = v83;
  if (v83)
  {
    v68 = (unint64_t *)&v83->__shared_owners_;
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
}

void sub_1913B423C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char *a30,uint64_t a31,uint64_t a32,char a33)
{
  void *v33;
  int v34;

  if (a18 < 0)
  {
    operator delete(__p);
    if ((v34 & 1) == 0)
    {
LABEL_6:
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
      std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::destroy(a30);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
      _Unwind_Resume(a1);
    }
  }
  else if (!v34)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v33);
  goto LABEL_6;
}

void Espresso::rnn_arch_kernel_montreal::__set_weights_finalize(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t **v4;
  Espresso::quantized_weights_helper *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  BOOL v26;
  unint64_t *v27;
  unint64_t v28;
  __int128 v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  Espresso::quantized_weights_helper *v32;
  std::__shared_weak_count *v33;
  __int128 *v34;

  v1 = *(_QWORD **)(a1 + 464);
  v2 = (_QWORD *)(a1 + 472);
  if (v1 == (_QWORD *)(a1 + 472))
    return;
  v4 = (uint64_t **)(a1 + 280);
  while (1)
  {
    v5 = (Espresso::quantized_weights_helper *)v1[7];
    v6 = (std::__shared_weak_count *)v1[8];
    v32 = v5;
    v33 = v6;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    if (!v5
      || !*(_QWORD *)v5
      || !*((_QWORD *)v5 + 4) && !*((_QWORD *)v5 + 6) && !*((_QWORD *)v5 + 8) && !*((_QWORD *)v5 + 10))
    {
      break;
    }
    if (*(_DWORD *)(a1 + 304))
    {
      Espresso::quantized_weights_helper::dequantize_to_float32_4d(v5, &v30);
      std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,std::shared_ptr<Espresso::blob<float,4>> &,void>(&v29, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), &v30);
      v34 = (__int128 *)(v1 + 4);
      v9 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v4, v1 + 4, &v34);
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)(v9 + 7), &v29);
      v10 = (std::__shared_weak_count *)*((_QWORD *)&v29 + 1);
      if (*((_QWORD *)&v29 + 1))
      {
        v11 = (unint64_t *)(*((_QWORD *)&v29 + 1) + 8);
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      v13 = v31;
      if (!v31)
        goto LABEL_32;
      v14 = (unint64_t *)&v31->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
    }
    else
    {
      Espresso::quantized_weights_helper::dequantize_to_float32_4d_lstm(v5, &v30);
      std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,std::shared_ptr<Espresso::blob<float,4>> &,void>(&v29, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), &v30);
      v34 = (__int128 *)(v1 + 4);
      v16 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v4, v1 + 4, &v34);
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)(v16 + 7), &v29);
      v17 = (std::__shared_weak_count *)*((_QWORD *)&v29 + 1);
      if (*((_QWORD *)&v29 + 1))
      {
        v18 = (unint64_t *)(*((_QWORD *)&v29 + 1) + 8);
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      v13 = v31;
      if (!v31)
        goto LABEL_32;
      v20 = (unint64_t *)&v31->__shared_owners_;
      do
        v15 = __ldaxr(v20);
      while (__stlxr(v15 - 1, v20));
    }
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
LABEL_32:
    v21 = v33;
    if (v33)
    {
      v22 = (unint64_t *)&v33->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v24 = (_QWORD *)v1[1];
    if (v24)
    {
      do
      {
        v25 = v24;
        v24 = (_QWORD *)*v24;
      }
      while (v24);
    }
    else
    {
      do
      {
        v25 = (_QWORD *)v1[2];
        v26 = *v25 == (_QWORD)v1;
        v1 = v25;
      }
      while (!v26);
    }
    v1 = v25;
    if (v25 == v2)
      return;
  }
  if (v6)
  {
    v27 = (unint64_t *)&v6->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1913B4614(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;
  uint64_t v8;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v6 = va_arg(va2, _QWORD);
  v8 = va_arg(va2, _QWORD);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  _Unwind_Resume(a1);
}

void Espresso::rnn_arch_kernel_montreal::__launch_cell_lstm(uint64_t *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, int a11)
{
  std::__shared_weak_count *v17;
  int *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  int *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  char *v26;
  int v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  _DWORD *v31;
  int v32;
  uint64_t v33;
  int v34;
  int v35;
  _DWORD *v36;
  uint64_t v37;
  int *v38;
  int v39;
  _DWORD *v40;
  uint64_t v41;
  int *v42;
  int v43;
  const void *v44;
  const void *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::runtime_error *exception;
  uint64_t v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  _QWORD v58[2];

  v58[1] = *MEMORY[0x1E0C80C00];
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v56, *(void **)a5, *(std::__shared_weak_count **)(a5 + 8));
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v54, *(void **)a8, *(std::__shared_weak_count **)(a8 + 8));
  v17 = v55;
  v18 = *(int **)(v54 + 24);
  if (v55)
  {
    p_shared_owners = (unint64_t *)&v55->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v54, *(void **)a9, *(std::__shared_weak_count **)(a9 + 8));
  v21 = v55;
  v22 = *(int **)(v54 + 24);
  if (v55)
  {
    v23 = (unint64_t *)&v55->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v54, *(void **)a7, *(std::__shared_weak_count **)(a7 + 8));
  v25 = v55;
  v26 = *(char **)(v54 + 24);
  v27 = a6;
  if (v55)
  {
    v28 = (unint64_t *)&v55->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
      v27 = a6;
    }
  }
  v30 = *(_QWORD *)(v56 + 24);
  v31 = *(_DWORD **)a5;
  if ((a10 & v27) == 0xFFFFFFFF)
  {
    if (v31[5] != 1)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Batch size != 1 not supported");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
  }
  else
  {
    v32 = *(_DWORD *)(*(_QWORD *)a7 + 12) * *(_DWORD *)(*(_QWORD *)a7 + 8);
    v30 += 4 * v31[2] * v27 * v31[3] * v31[4];
    v26 += 4 * v32 * a10 * *(_DWORD *)(*(_QWORD *)a7 + 16) + 4 * v32 * a11;
  }
  v33 = *(int *)(a4 + 76);
  if (!a1[110])
    Espresso::rnn_arch_kernel_montreal::init_montreal((Espresso::rnn_arch_kernel_montreal *)a1, a3);
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v54, 1, 1, 4 * v33, 1);
  v58[0] = v30;
  v34 = MRLModelStatePieceSize((_QWORD *)a1[111], 0);
  v35 = MRLModelStatePieceSize((_QWORD *)a1[111], 1);
  v36 = (_DWORD *)MRLModelStatePieceData((_QWORD *)a1[111], 0);
  if (v34 >= 1)
  {
    v37 = v34;
    v38 = v18;
    do
    {
      v39 = *v38++;
      *v36++ = v39;
      --v37;
    }
    while (v37);
  }
  v40 = (_DWORD *)MRLModelStatePieceData((_QWORD *)a1[111], 1);
  if (v35 >= 1)
  {
    v41 = v35;
    v42 = v22;
    do
    {
      v43 = *v42++;
      *v40++ = v43;
      --v41;
    }
    while (v41);
  }
  MRLModelStateRestore(a1[110], a1[111]);
  MRLModelRecognizeVectorsIncremental(a1[110], a1[111], (uint64_t)v58, *(char **)(v54 + 24));
  MRLModelStateSave(a1[110], a1[111]);
  v44 = (const void *)MRLModelStatePieceData((_QWORD *)a1[111], 0);
  v45 = (const void *)MRLModelStatePieceData((_QWORD *)a1[111], 1);
  memcpy(v26, v44, 4 * v33);
  memcpy(v18, v44, 4 * v33);
  memcpy(v22, v45, 4 * v33);
  v46 = v55;
  if (v55)
  {
    v47 = (unint64_t *)&v55->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  v49 = v57;
  if (v57)
  {
    v50 = (unint64_t *)&v57->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
}

void sub_1913B4A10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void Espresso::rnn_arch_kernel_montreal::__launch_cell_rnn(uint64_t *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, int a9, int a10)
{
  std::__shared_weak_count *v17;
  int *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  char *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  int v27;
  uint64_t v28;
  int v29;
  _DWORD *v30;
  uint64_t v31;
  int *v32;
  int v33;
  const void *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::runtime_error *exception;
  uint64_t v42;
  std::__shared_weak_count *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  _QWORD v46[2];

  v46[1] = *MEMORY[0x1E0C80C00];
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v44, *(void **)a5, *(std::__shared_weak_count **)(a5 + 8));
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v42, *(void **)a8, *(std::__shared_weak_count **)(a8 + 8));
  v17 = v43;
  v18 = *(int **)(v42 + 24);
  if (v43)
  {
    p_shared_owners = (unint64_t *)&v43->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v42, *(void **)a7, *(std::__shared_weak_count **)(a7 + 8));
  v21 = v43;
  v22 = *(char **)(v42 + 24);
  if (v43)
  {
    v23 = (unint64_t *)&v43->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v25 = *(_QWORD *)(v44 + 24);
  v26 = *(_DWORD **)a5;
  if ((a9 & a6) == 0xFFFFFFFF)
  {
    if (v26[5] != 1)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Batch size != 1 not supported");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
  }
  else
  {
    v27 = *(_DWORD *)(*(_QWORD *)a7 + 12) * *(_DWORD *)(*(_QWORD *)a7 + 8);
    v25 += 4 * v26[2] * a6 * v26[3] * v26[4];
    v22 += 4 * v27 * a9 * *(_DWORD *)(*(_QWORD *)a7 + 16) + 4 * v27 * a10;
  }
  v28 = *(int *)(a4 + 76);
  if (!a1[110])
    Espresso::rnn_arch_kernel_montreal::init_montreal((Espresso::rnn_arch_kernel_montreal *)a1, a3);
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v42, 1, 1, v28, 1);
  v46[0] = v25;
  v29 = MRLModelStatePieceSize((_QWORD *)a1[111], 0);
  v30 = (_DWORD *)MRLModelStatePieceData((_QWORD *)a1[111], 0);
  if (v29 >= 1)
  {
    v31 = v29;
    v32 = v18;
    do
    {
      v33 = *v32++;
      *v30++ = v33;
      --v31;
    }
    while (v31);
  }
  MRLModelStateRestore(a1[110], a1[111]);
  MRLModelRecognizeVectorsIncremental(a1[110], a1[111], (uint64_t)v46, *(char **)(v42 + 24));
  MRLModelStateSave(a1[110], a1[111]);
  v34 = (const void *)MRLModelStatePieceData((_QWORD *)a1[111], 0);
  memcpy(v22, v34, 4 * v28);
  memcpy(v18, v34, 4 * v28);
  v35 = v43;
  if (v43)
  {
    v36 = (unint64_t *)&v43->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  v38 = v45;
  if (v45)
  {
    v39 = (unint64_t *)&v45->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
}

void sub_1913B4D7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void Espresso::rnn_arch_kernel_montreal::__launch_cell_gru(uint64_t *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, int a9, int a10)
{
  std::__shared_weak_count *v17;
  int *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  char *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  int v27;
  uint64_t v28;
  int v29;
  _DWORD *v30;
  uint64_t v31;
  int *v32;
  int v33;
  const void *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::runtime_error *exception;
  uint64_t v42;
  std::__shared_weak_count *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  _QWORD v46[2];

  v46[1] = *MEMORY[0x1E0C80C00];
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v44, *(void **)a5, *(std::__shared_weak_count **)(a5 + 8));
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v42, *(void **)a8, *(std::__shared_weak_count **)(a8 + 8));
  v17 = v43;
  v18 = *(int **)(v42 + 24);
  if (v43)
  {
    p_shared_owners = (unint64_t *)&v43->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v42, *(void **)a7, *(std::__shared_weak_count **)(a7 + 8));
  v21 = v43;
  v22 = *(char **)(v42 + 24);
  if (v43)
  {
    v23 = (unint64_t *)&v43->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v25 = *(_QWORD *)(v44 + 24);
  v26 = *(_DWORD **)a5;
  if ((a9 & a6) == 0xFFFFFFFF)
  {
    if (v26[5] != 1)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Batch size != 1 not supported");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
  }
  else
  {
    v27 = *(_DWORD *)(*(_QWORD *)a7 + 12) * *(_DWORD *)(*(_QWORD *)a7 + 8);
    v25 += 4 * v26[2] * a6 * v26[3] * v26[4];
    v22 += 4 * v27 * a9 * *(_DWORD *)(*(_QWORD *)a7 + 16) + 4 * v27 * a10;
  }
  v28 = *(int *)(a4 + 76);
  if (!a1[110])
    Espresso::rnn_arch_kernel_montreal::init_montreal((Espresso::rnn_arch_kernel_montreal *)a1, a3);
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v42, 1, 1, v28, 1);
  v46[0] = v25;
  v29 = MRLModelStatePieceSize((_QWORD *)a1[111], 0);
  v30 = (_DWORD *)MRLModelStatePieceData((_QWORD *)a1[111], 0);
  if (v29 >= 1)
  {
    v31 = v29;
    v32 = v18;
    do
    {
      v33 = *v32++;
      *v30++ = v33;
      --v31;
    }
    while (v31);
  }
  MRLModelStateRestore(a1[110], a1[111]);
  MRLModelRecognizeVectorsIncremental(a1[110], a1[111], (uint64_t)v46, v22);
  MRLModelStateSave(a1[110], a1[111]);
  v34 = (const void *)MRLModelStatePieceData((_QWORD *)a1[111], 0);
  memcpy(v22, v34, 4 * v28);
  memcpy(v18, v34, 4 * v28);
  v35 = v43;
  if (v43)
  {
    v36 = (unint64_t *)&v43->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  v38 = v45;
  if (v45)
  {
    v39 = (unint64_t *)&v45->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
}

void sub_1913B50D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void Espresso::rnn_arch_kernel_montreal::init_montreal(Espresso::rnn_arch_kernel_montreal *this, int a2)
{
  uint64_t v4;
  int v5;
  const __CFAllocator *v6;
  __CFDictionary *Mutable;
  uint64_t v8;
  int v9;
  _OWORD *v10;
  std::__shared_weak_count *size;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  _OWORD *v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const __CFAllocator *v22;
  _OWORD *v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  _OWORD *v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _OWORD *v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  _OWORD *v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  _OWORD *v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  _OWORD *v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  _OWORD *v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  _OWORD *v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  _OWORD *v61;
  __int128 v62;
  unint64_t *v63;
  unint64_t v64;
  _OWORD *v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  _OWORD *v69;
  __int128 v70;
  unint64_t *v71;
  unint64_t v72;
  _OWORD *v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  _OWORD *v77;
  __int128 v78;
  unint64_t *v79;
  unint64_t v80;
  _OWORD *v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  _OWORD *v85;
  __int128 v86;
  unint64_t *v87;
  unint64_t v88;
  _OWORD *v89;
  std::__shared_weak_count *v90;
  uint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  _OWORD *v94;
  __int128 v95;
  unint64_t *v96;
  unint64_t v97;
  const __CFAllocator *v98;
  _OWORD *v99;
  std::__shared_weak_count *v100;
  uint64_t v101;
  unint64_t *v102;
  unint64_t v103;
  _OWORD *v104;
  std::string::size_type v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  _OWORD *v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  int v113;
  const __CFAllocator *v114;
  _OWORD *v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  int v119;
  _OWORD *v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  void **v124;
  unsigned int v125;
  uint64_t v126;
  void *v127;
  int v128;
  _OWORD *v129;
  std::__shared_weak_count *v130;
  uint64_t v131;
  unint64_t *v132;
  unint64_t v133;
  void *v134;
  CFNumberRef v135;
  CFNumberRef v136;
  uint64_t v137;
  _QWORD *v138;
  uint64_t v139;
  std::runtime_error *v140;
  std::runtime_error *exception;
  std::string *v142;
  __int128 v143;
  std::runtime_error *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  __CFDictionary *v152;
  uint64_t v153;
  _QWORD *v154;
  std::string valuePtr;
  std::string __p;
  void *v157[2];
  char v158;
  _OWORD *v159[2];

  v4 = *((int *)this + 95);
  v5 = *((_DWORD *)this + 96);
  v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v8 = operator new();
  std::string::basic_string[abi:ne180100]<0>(v157, "");
  if (a2 == 1)
    MEMORY[0x19401C808](v157, "_reverse");
  v154 = (_QWORD *)((char *)this + 308);
  v9 = *((_DWORD *)this + 76);
  if (v9 != 2)
  {
    if (v9 != 1)
    {
      if (v9)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::to_string(&valuePtr, *((_DWORD *)this + 76));
        v142 = std::string::insert(&valuePtr, 0, "Not implemented rnn cell mode: ");
        v143 = *(_OWORD *)&v142->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v142->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v143;
        v142->__r_.__value_.__l.__size_ = 0;
        v142->__r_.__value_.__r.__words[2] = 0;
        v142->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, &__p);
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      std::operator+<char>();
      v152 = Mutable;
      v159[0] = &__p;
      v10 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 35, &__p, v159);
      Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&valuePtr, *((void **)v10 + 7), *((std::__shared_weak_count **)v10 + 8));
      size = (std::__shared_weak_count *)valuePtr.__r_.__value_.__l.__size_;
      v12 = *(_QWORD *)(valuePtr.__r_.__value_.__r.__words[0] + 24);
      if (valuePtr.__r_.__value_.__l.__size_)
      {
        v13 = (unint64_t *)(valuePtr.__r_.__value_.__l.__size_ + 8);
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      std::operator+<char>();
      v159[0] = &__p;
      v15 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 35, &__p, v159);
      Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&valuePtr, *((void **)v15 + 7), *((std::__shared_weak_count **)v15 + 8));
      v16 = (std::__shared_weak_count *)valuePtr.__r_.__value_.__l.__size_;
      v17 = *(_QWORD *)(valuePtr.__r_.__value_.__r.__words[0] + 24);
      if (valuePtr.__r_.__value_.__l.__size_)
      {
        v18 = (unint64_t *)(valuePtr.__r_.__value_.__l.__size_ + 8);
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      std::operator+<char>();
      v20 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*((_QWORD **)this + 36), &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (v20)
      {
        std::operator+<char>();
        valuePtr.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
        v21 = *((_QWORD *)std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 35, &__p, &valuePtr)+ 7);
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          if (!v21)
            goto LABEL_220;
LABEL_213:
          std::operator+<char>();
          v159[0] = &__p;
          v120 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 35, &__p, v159);
          Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&valuePtr, *((void **)v120 + 7), *((std::__shared_weak_count **)v120 + 8));
          v121 = (std::__shared_weak_count *)valuePtr.__r_.__value_.__l.__size_;
          v21 = *(_QWORD *)(valuePtr.__r_.__value_.__r.__words[0] + 24);
          if (valuePtr.__r_.__value_.__l.__size_)
          {
            v122 = (unint64_t *)(valuePtr.__r_.__value_.__l.__size_ + 8);
            do
              v123 = __ldaxr(v122);
            while (__stlxr(v123 - 1, v122));
            if (!v123)
            {
              ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
              std::__shared_weak_count::__release_weak(v121);
            }
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          goto LABEL_220;
        }
        operator delete(__p.__r_.__value_.__l.__data_);
        if (v21)
          goto LABEL_213;
      }
      else
      {
        v21 = 0;
      }
LABEL_220:
      *(_QWORD *)v8 = 0x100000000;
      *(_DWORD *)(v8 + 8) = 0;
      *(int32x2_t *)(v8 + 12) = vrev64_s32(*(int32x2_t *)((char *)this + 380));
      *(_BYTE *)(v8 + 20) = 0;
      *(_DWORD *)(v8 + 24) = 0;
      *(_BYTE *)(v8 + 32) = 1;
      v124 = (void **)((char *)this + 896);
      std::vector<float>::resize((_QWORD *)this + 112, 4 * v4);
      if ((int)v4 >= 1)
      {
        if (4 * (int)v4 <= 1)
          v125 = 1;
        else
          v125 = 4 * v4;
        bzero(*v124, 4 * v125);
      }
      *(_QWORD *)(v8 + 144) = v12;
      *(_QWORD *)(v8 + 152) = v12 + 4 * (v4 * v4);
      *(_QWORD *)(v8 + 160) = v12 + 4 * (3 * v4 * v4);
      *(_QWORD *)(v8 + 168) = v12 + 4 * (2 * v4 * v4);
      v126 = v5 * (uint64_t)(int)v4;
      *(_QWORD *)(v8 + 112) = v17;
      *(_QWORD *)(v8 + 120) = v17 + 4 * v126;
      *(_QWORD *)(v8 + 128) = v17 + 12 * v126;
      *(_QWORD *)(v8 + 136) = v17 + 8 * v126;
      *(_OWORD *)(v8 + 40) = xmmword_191A934D0;
      *(_OWORD *)(v8 + 56) = xmmword_191A934E0;
      *(_DWORD *)(v8 + 72) = 7;
      *(_DWORD *)(v8 + 612) = 1;
      LODWORD(v126) = *((_DWORD *)this + 100);
      *(_BYTE *)(v8 + 244) = (_DWORD)v126 != 0;
      if ((_DWORD)v126)
      {
        *(_QWORD *)(v8 + 248) = v21;
        *(_QWORD *)(v8 + 256) = v21 + 4 * v4;
        *(_QWORD *)(v8 + 264) = v21 + 12 * (_DWORD)v4;
        *(_QWORD *)(v8 + 272) = v21 + 8 * v4;
        v127 = *v124;
        *(_QWORD *)(v8 + 280) = *v124;
        *(_QWORD *)(v8 + 288) = v127;
        *(_QWORD *)(v8 + 296) = v127;
        *(_QWORD *)(v8 + 304) = v127;
      }
      *(_BYTE *)(v8 + 512) = 0;
      v128 = *((_DWORD *)this + 98);
      *(_BYTE *)(v8 + 520) = v128 != 0;
      *(_DWORD *)(v8 + 516) = 32;
      if (v128)
      {
        std::operator+<char>();
        v159[0] = &__p;
        v129 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 35, &__p, v159);
        Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&valuePtr, *((void **)v129 + 7), *((std::__shared_weak_count **)v129 + 8));
        v130 = (std::__shared_weak_count *)valuePtr.__r_.__value_.__l.__size_;
        v131 = *(_QWORD *)(valuePtr.__r_.__value_.__r.__words[0] + 24);
        if (valuePtr.__r_.__value_.__l.__size_)
        {
          v132 = (unint64_t *)(valuePtr.__r_.__value_.__l.__size_ + 8);
          do
            v133 = __ldaxr(v132);
          while (__stlxr(v133 - 1, v132));
          if (!v133)
          {
            ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
            std::__shared_weak_count::__release_weak(v130);
          }
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        *(_QWORD *)(v8 + 528) = v131;
        *(_QWORD *)(v8 + 536) = v131 + 4 * v4;
        v134 = (void *)(v131 + 8 * v4);
      }
      else
      {
        v134 = *v124;
        *(_QWORD *)(v8 + 528) = *v124;
        *(_QWORD *)(v8 + 536) = v134;
      }
      *(_QWORD *)(v8 + 544) = v134;
      *(_DWORD *)(v8 + 576) = espresso_to_montreal_activation(*((_QWORD *)this + 40));
      *(_DWORD *)(v8 + 580) = espresso_to_montreal_activation(*(_QWORD *)((char *)this + 332));
      *(_DWORD *)(v8 + 584) = espresso_to_montreal_activation(*v154);
      *(_DWORD *)(v8 + 588) = 0;
      *(_BYTE *)(v8 + 600) = *((_DWORD *)this + 103) != 0;
      *(_BYTE *)(v8 + 601) = *((_DWORD *)this + 101) != 0;
      *(_DWORD *)(v8 + 604) = *((_DWORD *)this + 102);
      *(_BYTE *)(v8 + 608) = 0;
      *(_DWORD *)(v8 + 36) = 32;
      *(_DWORD *)(v8 + 240) = 32;
      *(_DWORD *)(v8 + 28) = *((_DWORD *)this + 104);
      Mutable = v152;
      v114 = v6;
      goto LABEL_238;
    }
    std::operator+<char>();
    v22 = v6;
    v159[0] = &__p;
    v23 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 35, &__p, v159);
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&valuePtr, *((void **)v23 + 7), *((std::__shared_weak_count **)v23 + 8));
    v24 = (std::__shared_weak_count *)valuePtr.__r_.__value_.__l.__size_;
    v25 = *(_QWORD *)(valuePtr.__r_.__value_.__r.__words[0] + 24);
    if (valuePtr.__r_.__value_.__l.__size_)
    {
      v26 = (unint64_t *)(valuePtr.__r_.__value_.__l.__size_ + 8);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    std::operator+<char>();
    v159[0] = &__p;
    v28 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 35, &__p, v159);
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&valuePtr, *((void **)v28 + 7), *((std::__shared_weak_count **)v28 + 8));
    v29 = (std::__shared_weak_count *)valuePtr.__r_.__value_.__l.__size_;
    v30 = *(_QWORD *)(valuePtr.__r_.__value_.__r.__words[0] + 24);
    if (valuePtr.__r_.__value_.__l.__size_)
    {
      v31 = (unint64_t *)(valuePtr.__r_.__value_.__l.__size_ + 8);
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    std::operator+<char>();
    v33 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*((_QWORD **)this + 36), &__p);
    v34 = v33;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if (v34)
        goto LABEL_42;
    }
    else if (v33)
    {
LABEL_42:
      std::operator+<char>();
      valuePtr.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
      v35 = *((_QWORD *)std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 35, &__p, &valuePtr)+ 7);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        if (!v35)
          goto LABEL_209;
LABEL_202:
        std::operator+<char>();
        v159[0] = &__p;
        v115 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 35, &__p, v159);
        Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&valuePtr, *((void **)v115 + 7), *((std::__shared_weak_count **)v115 + 8));
        v116 = (std::__shared_weak_count *)valuePtr.__r_.__value_.__l.__size_;
        v35 = *(_QWORD *)(valuePtr.__r_.__value_.__r.__words[0] + 24);
        if (valuePtr.__r_.__value_.__l.__size_)
        {
          v117 = (unint64_t *)(valuePtr.__r_.__value_.__l.__size_ + 8);
          do
            v118 = __ldaxr(v117);
          while (__stlxr(v118 - 1, v117));
          if (!v118)
          {
            ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
            std::__shared_weak_count::__release_weak(v116);
          }
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        goto LABEL_209;
      }
      operator delete(__p.__r_.__value_.__l.__data_);
      if (v35)
        goto LABEL_202;
LABEL_209:
      *(_QWORD *)v8 = 0x100000000;
      *(int32x2_t *)(v8 + 12) = vrev64_s32(*(int32x2_t *)((char *)this + 380));
      *(_DWORD *)(v8 + 8) = 1;
      *(_DWORD *)(v8 + 576) = espresso_to_montreal_activation(*v154);
      *(_BYTE *)(v8 + 32) = 1;
      *(_QWORD *)(v8 + 112) = v30;
      *(_QWORD *)(v8 + 120) = v25;
      *(_OWORD *)(v8 + 36) = xmmword_191A934C0;
      *(_BYTE *)(v8 + 520) = 0;
      *(_DWORD *)(v8 + 516) = 32;
      v119 = *((_DWORD *)this + 100);
      *(_BYTE *)(v8 + 244) = v119 != 0;
      if (v119)
      {
        *(_DWORD *)(v8 + 240) = 32;
        *(_QWORD *)(v8 + 248) = v35;
      }
      *(_BYTE *)(v8 + 512) = 0;
      *(_BYTE *)(v8 + 20) = 0;
      *(_QWORD *)(v8 + 24) = 0x100000000;
      *(_WORD *)(v8 + 600) = 0;
      *(_BYTE *)(v8 + 608) = 0;
      *(_DWORD *)(v8 + 604) = 1112014848;
      v114 = v22;
      goto LABEL_238;
    }
    v35 = 0;
    goto LABEL_209;
  }
  std::operator+<char>();
  v159[0] = &__p;
  v36 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 35, &__p, v159);
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&valuePtr, *((void **)v36 + 7), *((std::__shared_weak_count **)v36 + 8));
  v37 = (std::__shared_weak_count *)valuePtr.__r_.__value_.__l.__size_;
  v148 = *(_QWORD *)(valuePtr.__r_.__value_.__r.__words[0] + 24);
  if (valuePtr.__r_.__value_.__l.__size_)
  {
    v38 = (unint64_t *)(valuePtr.__r_.__value_.__l.__size_ + 8);
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::operator+<char>();
  v159[0] = &__p;
  v40 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 35, &__p, v159);
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&valuePtr, *((void **)v40 + 7), *((std::__shared_weak_count **)v40 + 8));
  v41 = (std::__shared_weak_count *)valuePtr.__r_.__value_.__l.__size_;
  v153 = *(_QWORD *)(valuePtr.__r_.__value_.__r.__words[0] + 24);
  if (valuePtr.__r_.__value_.__l.__size_)
  {
    v42 = (unint64_t *)(valuePtr.__r_.__value_.__l.__size_ + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::operator+<char>();
  v159[0] = &__p;
  v44 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 35, &__p, v159);
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&valuePtr, *((void **)v44 + 7), *((std::__shared_weak_count **)v44 + 8));
  v45 = (std::__shared_weak_count *)valuePtr.__r_.__value_.__l.__size_;
  v151 = *(_QWORD *)(valuePtr.__r_.__value_.__r.__words[0] + 24);
  if (valuePtr.__r_.__value_.__l.__size_)
  {
    v46 = (unint64_t *)(valuePtr.__r_.__value_.__l.__size_ + 8);
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::operator+<char>();
  v159[0] = &__p;
  v48 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 35, &__p, v159);
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&valuePtr, *((void **)v48 + 7), *((std::__shared_weak_count **)v48 + 8));
  v49 = (std::__shared_weak_count *)valuePtr.__r_.__value_.__l.__size_;
  v150 = *(_QWORD *)(valuePtr.__r_.__value_.__r.__words[0] + 24);
  if (valuePtr.__r_.__value_.__l.__size_)
  {
    v50 = (unint64_t *)(valuePtr.__r_.__value_.__l.__size_ + 8);
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::operator+<char>();
  v159[0] = &__p;
  v52 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 35, &__p, v159);
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&valuePtr, *((void **)v52 + 7), *((std::__shared_weak_count **)v52 + 8));
  v53 = (std::__shared_weak_count *)valuePtr.__r_.__value_.__l.__size_;
  v149 = *(_QWORD *)(valuePtr.__r_.__value_.__r.__words[0] + 24);
  if (valuePtr.__r_.__value_.__l.__size_)
  {
    v54 = (unint64_t *)(valuePtr.__r_.__value_.__l.__size_ + 8);
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::operator+<char>();
  v159[0] = &__p;
  v56 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 35, &__p, v159);
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&valuePtr, *((void **)v56 + 7), *((std::__shared_weak_count **)v56 + 8));
  v57 = (std::__shared_weak_count *)valuePtr.__r_.__value_.__l.__size_;
  v58 = *(_QWORD *)(valuePtr.__r_.__value_.__r.__words[0] + 24);
  if (valuePtr.__r_.__value_.__l.__size_)
  {
    v59 = (unint64_t *)(valuePtr.__r_.__value_.__l.__size_ + 8);
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::operator+<char>();
  v159[0] = &__p;
  v61 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 35, &__p, v159);
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&valuePtr, *((void **)v61 + 7), *((std::__shared_weak_count **)v61 + 8));
  v62 = *(_OWORD *)&valuePtr.__r_.__value_.__l.__data_;
  if (valuePtr.__r_.__value_.__l.__size_)
  {
    v63 = (unint64_t *)(valuePtr.__r_.__value_.__l.__size_ + 8);
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v62 + 1) + 16))(*((_QWORD *)&v62 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v62 + 1));
    }
  }
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((_QWORD)v62)
      goto LABEL_94;
LABEL_105:
    v147 = 0;
    goto LABEL_106;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (!(_QWORD)v62)
    goto LABEL_105;
LABEL_94:
  std::operator+<char>();
  v159[0] = &__p;
  v65 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 35, &__p, v159);
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&valuePtr, *((void **)v65 + 7), *((std::__shared_weak_count **)v65 + 8));
  v66 = (std::__shared_weak_count *)valuePtr.__r_.__value_.__l.__size_;
  v147 = *(_QWORD *)(valuePtr.__r_.__value_.__r.__words[0] + 24);
  if (valuePtr.__r_.__value_.__l.__size_)
  {
    v67 = (unint64_t *)(valuePtr.__r_.__value_.__l.__size_ + 8);
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_106:
  std::operator+<char>();
  v159[0] = &__p;
  v69 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 35, &__p, v159);
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&valuePtr, *((void **)v69 + 7), *((std::__shared_weak_count **)v69 + 8));
  v70 = *(_OWORD *)&valuePtr.__r_.__value_.__l.__data_;
  if (valuePtr.__r_.__value_.__l.__size_)
  {
    v71 = (unint64_t *)(valuePtr.__r_.__value_.__l.__size_ + 8);
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v70 + 1) + 16))(*((_QWORD *)&v70 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v70 + 1));
    }
  }
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((_QWORD)v70)
      goto LABEL_113;
LABEL_121:
    v146 = 0;
    goto LABEL_122;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (!(_QWORD)v70)
    goto LABEL_121;
LABEL_113:
  std::operator+<char>();
  v159[0] = &__p;
  v73 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 35, &__p, v159);
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&valuePtr, *((void **)v73 + 7), *((std::__shared_weak_count **)v73 + 8));
  v74 = (std::__shared_weak_count *)valuePtr.__r_.__value_.__l.__size_;
  v146 = *(_QWORD *)(valuePtr.__r_.__value_.__r.__words[0] + 24);
  if (valuePtr.__r_.__value_.__l.__size_)
  {
    v75 = (unint64_t *)(valuePtr.__r_.__value_.__l.__size_ + 8);
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_122:
  std::operator+<char>();
  v159[0] = &__p;
  v77 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 35, &__p, v159);
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&valuePtr, *((void **)v77 + 7), *((std::__shared_weak_count **)v77 + 8));
  v78 = *(_OWORD *)&valuePtr.__r_.__value_.__l.__data_;
  if (valuePtr.__r_.__value_.__l.__size_)
  {
    v79 = (unint64_t *)(valuePtr.__r_.__value_.__l.__size_ + 8);
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v78 + 1) + 16))(*((_QWORD *)&v78 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v78 + 1));
    }
  }
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((_QWORD)v78)
      goto LABEL_129;
LABEL_137:
    v145 = 0;
    goto LABEL_138;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (!(_QWORD)v78)
    goto LABEL_137;
LABEL_129:
  std::operator+<char>();
  v159[0] = &__p;
  v81 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 35, &__p, v159);
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&valuePtr, *((void **)v81 + 7), *((std::__shared_weak_count **)v81 + 8));
  v82 = (std::__shared_weak_count *)valuePtr.__r_.__value_.__l.__size_;
  v145 = *(_QWORD *)(valuePtr.__r_.__value_.__r.__words[0] + 24);
  if (valuePtr.__r_.__value_.__l.__size_)
  {
    v83 = (unint64_t *)(valuePtr.__r_.__value_.__l.__size_ + 8);
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_138:
  std::operator+<char>();
  v159[0] = &__p;
  v85 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 35, &__p, v159);
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&valuePtr, *((void **)v85 + 7), *((std::__shared_weak_count **)v85 + 8));
  v86 = *(_OWORD *)&valuePtr.__r_.__value_.__l.__data_;
  if (valuePtr.__r_.__value_.__l.__size_)
  {
    v87 = (unint64_t *)(valuePtr.__r_.__value_.__l.__size_ + 8);
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v86 + 1) + 16))(*((_QWORD *)&v86 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v86 + 1));
    }
  }
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((_QWORD)v86)
      goto LABEL_145;
LABEL_153:
    v91 = 0;
    goto LABEL_154;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (!(_QWORD)v86)
    goto LABEL_153;
LABEL_145:
  std::operator+<char>();
  v159[0] = &__p;
  v89 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 35, &__p, v159);
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&valuePtr, *((void **)v89 + 7), *((std::__shared_weak_count **)v89 + 8));
  v90 = (std::__shared_weak_count *)valuePtr.__r_.__value_.__l.__size_;
  v91 = *(_QWORD *)(valuePtr.__r_.__value_.__r.__words[0] + 24);
  if (valuePtr.__r_.__value_.__l.__size_)
  {
    v92 = (unint64_t *)(valuePtr.__r_.__value_.__l.__size_ + 8);
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_154:
  std::operator+<char>();
  v159[0] = &__p;
  v94 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 35, &__p, v159);
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&valuePtr, *((void **)v94 + 7), *((std::__shared_weak_count **)v94 + 8));
  v95 = *(_OWORD *)&valuePtr.__r_.__value_.__l.__data_;
  if (valuePtr.__r_.__value_.__l.__size_)
  {
    v96 = (unint64_t *)(valuePtr.__r_.__value_.__l.__size_ + 8);
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v95 + 1) + 16))(*((_QWORD *)&v95 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v95 + 1));
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((_QWORD)v95)
    {
LABEL_161:
      std::operator+<char>();
      v98 = v6;
      v159[0] = &__p;
      v99 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 35, &__p, v159);
      Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&valuePtr, *((void **)v99 + 7), *((std::__shared_weak_count **)v99 + 8));
      v100 = (std::__shared_weak_count *)valuePtr.__r_.__value_.__l.__size_;
      v101 = *(_QWORD *)(valuePtr.__r_.__value_.__r.__words[0] + 24);
      if (valuePtr.__r_.__value_.__l.__size_)
      {
        v102 = (unint64_t *)(valuePtr.__r_.__value_.__l.__size_ + 8);
        do
          v103 = __ldaxr(v102);
        while (__stlxr(v103 - 1, v102));
        if (!v103)
        {
          ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
          std::__shared_weak_count::__release_weak(v100);
        }
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      goto LABEL_170;
    }
  }
  else if ((_QWORD)v95)
  {
    goto LABEL_161;
  }
  v98 = v6;
  v101 = 0;
LABEL_170:
  std::operator+<char>();
  v159[0] = &__p;
  v104 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 35, &__p, v159);
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&valuePtr, *((void **)v104 + 7), *((std::__shared_weak_count **)v104 + 8));
  v106 = (std::__shared_weak_count *)valuePtr.__r_.__value_.__l.__size_;
  v105 = valuePtr.__r_.__value_.__r.__words[0];
  if (valuePtr.__r_.__value_.__l.__size_)
  {
    v107 = (unint64_t *)(valuePtr.__r_.__value_.__l.__size_ + 8);
    do
      v108 = __ldaxr(v107);
    while (__stlxr(v108 - 1, v107));
    if (!v108)
    {
      ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
      std::__shared_weak_count::__release_weak(v106);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v105)
  {
    std::operator+<char>();
    v159[0] = &__p;
    v109 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 35, &__p, v159);
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&valuePtr, *((void **)v109 + 7), *((std::__shared_weak_count **)v109 + 8));
    v110 = (std::__shared_weak_count *)valuePtr.__r_.__value_.__l.__size_;
    v105 = *(_QWORD *)(valuePtr.__r_.__value_.__r.__words[0] + 24);
    if (valuePtr.__r_.__value_.__l.__size_)
    {
      v111 = (unint64_t *)(valuePtr.__r_.__value_.__l.__size_ + 8);
      do
        v112 = __ldaxr(v111);
      while (__stlxr(v112 - 1, v111));
      if (!v112)
      {
        ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
        std::__shared_weak_count::__release_weak(v110);
      }
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (!v148 || !v153 || !v151 || !v150 || !v149 || !v58)
  {
    v144 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v144, "Missing weight");
    __cxa_throw(v144, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  *(_QWORD *)v8 = 0x100000000;
  *(int32x2_t *)(v8 + 12) = vrev64_s32(*(int32x2_t *)((char *)this + 380));
  *(_DWORD *)(v8 + 8) = 5;
  *(_BYTE *)(v8 + 609) = 1;
  *(_DWORD *)(v8 + 576) = espresso_to_montreal_activation(*((_QWORD *)this + 40));
  *(_DWORD *)(v8 + 580) = espresso_to_montreal_activation(*((_QWORD *)this + 40));
  *(_DWORD *)(v8 + 584) = espresso_to_montreal_activation(*v154);
  *(_BYTE *)(v8 + 32) = 1;
  *(_BYTE *)(v8 + 512) = 0;
  *(_QWORD *)(v8 + 112) = v148;
  *(_QWORD *)(v8 + 120) = v153;
  *(_QWORD *)(v8 + 128) = v151;
  *(_QWORD *)(v8 + 136) = v150;
  *(_QWORD *)(v8 + 144) = v149;
  *(_QWORD *)(v8 + 152) = v58;
  *(_OWORD *)(v8 + 52) = xmmword_191A93490;
  *(_OWORD *)(v8 + 36) = xmmword_191A934B0;
  *(_DWORD *)(v8 + 516) = 32;
  *(_BYTE *)(v8 + 520) = 0;
  *(_DWORD *)(v8 + 240) = 32;
  *(_BYTE *)(v8 + 610) = *((_BYTE *)this + 437);
  v113 = *((_DWORD *)this + 100);
  *(_BYTE *)(v8 + 244) = v113 != 0;
  if (v113)
  {
    if (v147 && v146 && v145)
    {
      *(_BYTE *)(v8 + 245) = 1;
      *(_QWORD *)(v8 + 248) = v147;
      *(_QWORD *)(v8 + 256) = v146;
      *(_QWORD *)(v8 + 264) = v145;
    }
    if (v91 && v101 && v105)
    {
      *(_BYTE *)(v8 + 376) = 1;
      *(_QWORD *)(v8 + 384) = v91;
      *(_QWORD *)(v8 + 392) = v101;
      *(_QWORD *)(v8 + 400) = v105;
    }
  }
  *(_BYTE *)(v8 + 512) = 0;
  *(_BYTE *)(v8 + 20) = 0;
  *(_QWORD *)(v8 + 24) = 0x100000000;
  *(_WORD *)(v8 + 600) = 0;
  *(_BYTE *)(v8 + 608) = 0;
  *(_DWORD *)(v8 + 604) = 1112014848;
  v114 = v98;
LABEL_238:
  __p.__r_.__value_.__r.__words[0] = v8;
  LODWORD(valuePtr.__r_.__value_.__l.__data_) = 1;
  v135 = CFNumberCreate(v114, kCFNumberIntType, &valuePtr);
  if (!v135
    || (CFDictionarySetValue(Mutable, CFSTR("LayerParametersEspressoSize"), v135),
        CFRelease(v135),
        (v136 = CFNumberCreate(v114, kCFNumberLongLongType, &__p)) == 0))
  {
    v140 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v140, "Cannot create number");
    __cxa_throw(v140, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  CFDictionarySetValue(Mutable, CFSTR("LayerParametersEspresso"), v136);
  CFRelease(v136);
  *((_DWORD *)this + 231) = 70;
  v137 = MRLModelCreate((uint64_t)Mutable);
  *((_QWORD *)this + 110) = v137;
  v138 = MRLModelStateCreate(v137);
  *((_QWORD *)this + 111) = v138;
  v139 = *((_QWORD *)this + 110);
  std::mutex::lock(&globalMutex(void)::mutex);
  if (v138)
    MRLModelWrapper::clearState(*(_QWORD *)(v139 + 120), (uint64_t)v138);
  std::mutex::unlock(&globalMutex(void)::mutex);
  if (v158 < 0)
    operator delete(v157[0]);
}

void sub_1913B669C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  void *v37;
  int v38;

  if (a31 < 0)
    operator delete(__p);
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v38 & 1) == 0)
    {
LABEL_8:
      if (a37 < 0)
        operator delete(a32);
      _Unwind_Resume(a1);
    }
  }
  else if (!v38)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v37);
  goto LABEL_8;
}

_OWORD *std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, _QWORD *a2, _OWORD **a3)
{
  void **v5;
  _OWORD *v6;
  uint64_t **v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD v11[2];
  char v12;
  uint64_t v13;

  v5 = (void **)std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__find_equal<std::string>((uint64_t)a1, &v13, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = operator new(0x48uLL);
    v11[1] = a1 + 1;
    v8 = *a3;
    v9 = *((_QWORD *)*a3 + 2);
    v6[2] = **a3;
    *((_QWORD *)v6 + 6) = v9;
    *v8 = 0;
    v8[1] = 0;
    v8[2] = 0;
    *((_QWORD *)v6 + 7) = 0;
    *((_QWORD *)v6 + 8) = 0;
    v12 = 1;
    std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at(a1, v13, v7, (uint64_t *)v6);
    v11[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>>>>::reset[abi:ne180100]((uint64_t)v11);
  }
  return v6;
}

uint64_t espresso_to_montreal_activation(int a1)
{
  std::runtime_error *exception;
  std::string *v4;
  __int128 v5;
  std::string v6;
  std::string v7;

  if (a1 >= 7)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v6, a1);
    v4 = std::string::insert(&v6, 0, "Unsupported nonlinearity ");
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v7.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v7.__r_.__value_.__l.__data_ = v5;
    v4->__r_.__value_.__l.__size_ = 0;
    v4->__r_.__value_.__r.__words[2] = 0;
    v4->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v7);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return dword_191A98BB4[a1];
}

void sub_1913B69D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

void Espresso::montreal_base::~montreal_base(Espresso::montreal_base *this)
{
  char **v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v2 = (char **)*((_QWORD *)this + 1);
  if (v2)
  {
    v3 = *(_QWORD *)this;
    if (*(_QWORD *)this)
      MRLModelStateRelease(v3, v2);
  }
  else
  {
    v4 = *(_QWORD *)this;
    if (*(_QWORD *)this)
      MRLModelRelease(v4);
  }
  v5 = (void *)*((_QWORD *)this + 2);
  if (v5)
  {
    *((_QWORD *)this + 3) = v5;
    operator delete(v5);
  }
}

double __espresso_tmp_enable_montreal_block_invoke_3@<D0>(_QWORD *a1@<X1>, __int128 *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::rnn_arch_cpu,std::allocator<Espresso::rnn_arch_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::rnn_arch_params const&,void>(&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double std::allocate_shared[abi:ne180100]<Espresso::rnn_arch_cpu,std::allocator<Espresso::rnn_arch_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::rnn_arch_params const&,void>(_QWORD *a1, _QWORD *a2, __int128 *a3)
{
  _QWORD *v6;
  _OWORD *v7;
  double result;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[28];

  v6 = operator new(0x388uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DB6DC8;
  v15 = a3[6];
  v16 = a3[7];
  *(_OWORD *)v17 = a3[8];
  *(_OWORD *)&v17[12] = *(__int128 *)((char *)a3 + 140);
  v11 = a3[2];
  v12 = a3[3];
  v13 = a3[4];
  v14 = a3[5];
  v9 = *a3;
  v10 = a3[1];
  Espresso::kernel_with_uniforms_<Espresso::rnn_arch_params,Espresso::abstract_kernel_with_named_weights_>::kernel_with_uniforms_((uint64_t)(v6 + 3), a2);
  v6[62] = 0;
  v6[63] = 0;
  v6[61] = v6 + 62;
  *((_OWORD *)v6 + 32) = 0u;
  *((_OWORD *)v6 + 33) = 0u;
  *((_OWORD *)v6 + 34) = 0u;
  *((_OWORD *)v6 + 35) = 0u;
  *((_OWORD *)v6 + 36) = 0u;
  *((_OWORD *)v6 + 37) = 0u;
  *((_OWORD *)v6 + 38) = 0u;
  *((_OWORD *)v6 + 39) = 0u;
  *((_DWORD *)v6 + 160) = 0;
  v7[39] = 0u;
  v7[40] = 0u;
  v7[41] = 0u;
  v7[42] = 0u;
  v7[43] = 0u;
  v7[44] = 0u;
  v7[45] = 0u;
  v7[46] = 0u;
  v7[47] = 0u;
  v7[48] = 0u;
  v7[49] = 0u;
  v7[50] = 0u;
  v7[51] = 0u;
  *((_DWORD *)v6 + 214) = 1065353216;
  *((_DWORD *)v6 + 224) = 1065353216;
  *((_OWORD *)v6 + 54) = 0u;
  *((_OWORD *)v6 + 55) = 0u;
  v6[3] = &off_1E2D60010;
  *(_OWORD *)((char *)v7 + 442) = *(_OWORD *)&v17[10];
  v7[26] = v16;
  v7[27] = *(_OWORD *)v17;
  v7[24] = v14;
  v7[25] = v15;
  v7[22] = v12;
  v7[23] = v13;
  result = *(double *)&v10;
  v7[20] = v10;
  v7[21] = v11;
  v7[19] = v9;
  *a1 = v7;
  a1[1] = v6;
  return result;
}

void sub_1913B6BE4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::rnn_arch_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB6DC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::rnn_arch_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB6DC8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::rnn_arch_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

double __espresso_tmp_enable_montreal_block_invoke_2@<D0>(_QWORD *a1@<X1>, __int128 *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::rnn_arch_cpu,std::allocator<Espresso::rnn_arch_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::rnn_arch_params const&,void>(&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

void __espresso_tmp_enable_montreal_block_invoke(_QWORD *a1@<X1>, __int128 *a2@<X2>, _OWORD *a3@<X8>)
{
  int v6;
  _BOOL4 v7;
  int v8;
  BOOL v9;
  int v10;
  BOOL v11;
  BOOL v12;
  __int128 v14;
  _QWORD *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _OWORD *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  _OWORD v36[2];

  v6 = *((_DWORD *)a2 + 34);
  v7 = v6 != 1
    || *((_DWORD *)a2 + 37) != 1
    || *(_DWORD *)a2
    || *((_DWORD *)a2 + 1) == *((_DWORD *)a2 + 10)
    && *((_DWORD *)a2 + 4) == *((_DWORD *)a2 + 13)
    && *((_DWORD *)a2 + 7) == *((_DWORD *)a2 + 16);
  if (*((_DWORD *)a2 + 35))
    goto LABEL_24;
  v8 = *((_DWORD *)a2 + 23);
  if (v8)
    v9 = v8 == 5;
  else
    v9 = 1;
  v10 = v9;
  if (*((_DWORD *)a2 + 27))
    v7 = 0;
  v11 = v6 != 1 || *(_DWORD *)a2 == 2;
  v12 = v11 || v10 == 0;
  if (v12 || !v7)
  {
    v15 = operator new(0x3B8uLL);
    v15[1] = 0;
    v15[2] = 0;
    *v15 = &off_1E2DBD428;
    v16 = a2[7];
    v34 = a2[6];
    v35 = v16;
    v36[0] = a2[8];
    *(_OWORD *)((char *)v36 + 12) = *(__int128 *)((char *)a2 + 140);
    v17 = a2[3];
    v30 = a2[2];
    v31 = v17;
    v18 = a2[5];
    v32 = a2[4];
    v33 = v18;
    v19 = a2[1];
    v28 = *a2;
    v29 = v19;
    Espresso::kernel_with_uniforms_<Espresso::rnn_arch_params,Espresso::abstract_kernel_with_named_weights_>::kernel_with_uniforms_((uint64_t)(v15 + 3), a1);
    v15[62] = 0;
    v15[63] = 0;
    v15[61] = v15 + 62;
    *((_OWORD *)v15 + 32) = 0u;
    *((_OWORD *)v15 + 33) = 0u;
    *((_OWORD *)v15 + 34) = 0u;
    *((_OWORD *)v15 + 35) = 0u;
    *((_OWORD *)v15 + 36) = 0u;
    *((_OWORD *)v15 + 37) = 0u;
    *((_OWORD *)v15 + 38) = 0u;
    *((_OWORD *)v15 + 39) = 0u;
    *((_DWORD *)v15 + 160) = 0;
    v20[39] = 0u;
    v20[40] = 0u;
    v20[41] = 0u;
    v20[42] = 0u;
    v20[43] = 0u;
    v20[44] = 0u;
    v20[45] = 0u;
    v20[46] = 0u;
    v20[47] = 0u;
    v20[48] = 0u;
    v20[49] = 0u;
    v20[50] = 0u;
    v20[51] = 0u;
    *((_DWORD *)v15 + 214) = 1065353216;
    *((_OWORD *)v15 + 54) = 0u;
    *((_OWORD *)v15 + 55) = 0u;
    *((_DWORD *)v15 + 224) = 1065353216;
    v21 = v29;
    v20[19] = v28;
    v20[20] = v21;
    v22 = v33;
    v20[23] = v32;
    v20[24] = v22;
    v23 = v31;
    v20[21] = v30;
    v20[22] = v23;
    *(_OWORD *)((char *)v20 + 442) = *(_OWORD *)((char *)v36 + 10);
    v24 = v36[0];
    v25 = v34;
    v20[26] = v35;
    v20[27] = v24;
    v20[25] = v25;
    *(_OWORD *)((char *)v20 + 908) = 0u;
    v20[55] = 0u;
    v20[56] = 0u;
    v15[3] = &off_1E2D92080;
    *((_DWORD *)v15 + 237) = 70;
    *(_QWORD *)&v14 = v20;
    *((_QWORD *)&v14 + 1) = v15;
  }
  else
  {
LABEL_24:
    std::allocate_shared[abi:ne180100]<Espresso::rnn_arch_cpu,std::allocator<Espresso::rnn_arch_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::rnn_arch_params const&,void>(&v28, a1, a2);
    v14 = v28;
  }
  *a3 = v14;
}

void sub_1913B6E68(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::rnn_arch_kernel_montreal>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBD428;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::rnn_arch_kernel_montreal>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBD428;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::rnn_arch_kernel_montreal>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t Espresso::zephyr::value_t::defining_node(Espresso::zephyr::value_t *this)
{
  return *((_QWORD *)this + 10);
}

uint64_t Espresso::zephyr::value_t::uses(Espresso::zephyr::value_t *this)
{
  return (uint64_t)this + 56;
}

BOOL Espresso::zephyr::value_t::has_any_use(Espresso::zephyr::value_t *this)
{
  return *((_QWORD *)this + 7) != *((_QWORD *)this + 8);
}

BOOL Espresso::zephyr::value_t::has_one_use(Espresso::zephyr::value_t *this)
{
  return *((_QWORD *)this + 8) - *((_QWORD *)this + 7) == 16;
}

void Espresso::zephyr::value_t::replace_uses(Espresso::zephyr::value_t *this, Espresso::zephyr::value_t *a2)
{
  uint64_t i;

  for (i = *((_QWORD *)this + 7); i != *((_QWORD *)this + 8); i = *((_QWORD *)this + 7))
    Espresso::zephyr::node_t::replace_input_at(*(Espresso::zephyr::node_t **)i, *(_QWORD *)(i + 8), a2);
}

void Espresso::zephyr::value_t::replace_uses_if (uint64_t a1, Espresso::zephyr::value_t *a2, uint64_t a3)
{
  _BYTE *v3;
  _BYTE *v4;
  int64_t v5;
  char *v8;
  char *v9;
  char *v10;
  Espresso::zephyr::node_t *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD v14[2];

  v4 = *(_BYTE **)(a1 + 56);
  v3 = *(_BYTE **)(a1 + 64);
  v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v8 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v5 >> 4);
    memmove(v8, v4, v5);
    if (16 * (v5 >> 4))
    {
      v9 = &v8[16 * (v5 >> 4)];
      v10 = v8;
      do
      {
        v11 = *(Espresso::zephyr::node_t **)v10;
        v12 = *((_QWORD *)v10 + 1);
        v14[0] = *(_QWORD *)v10;
        v14[1] = v12;
        v13 = *(_QWORD *)(a3 + 24);
        if (!v13)
          std::__throw_bad_function_call[abi:ne180100]();
        if ((*(unsigned int (**)(uint64_t, _QWORD *))(*(_QWORD *)v13 + 48))(v13, v14))
          Espresso::zephyr::node_t::replace_input_at(v11, v12, a2);
        v10 += 16;
      }
      while (v10 != v9);
    }
    if (v8)
      operator delete(v8);
  }
}

void sub_1913B701C(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::serdes_object_json_objc::clone_empty(_QWORD *a1@<X8>)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t v6;
  _QWORD v7[2];

  _ZNSt3__115allocate_sharedB8ne180100IN8Espresso6SerDes23serdes_object_json_objcENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(v7);
  v3 = (std::__shared_weak_count *)v7[1];
  *a1 = v7[0];
  a1[1] = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

uint64_t Espresso::SerDes::serdes_object_json_objc::get_ushort(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  uint64_t v4;
  std::logic_error *exception;
  std::string *v7;
  __int128 v8;
  std::string v9;
  std::string v10;

  Espresso::SerDes::fast_dict_lookup(*(void **)(a1 + 24), a2);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if (!v2)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    v7 = std::string::append(&v9, "\" not found");
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v10.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v10.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    std::logic_error::logic_error(exception, &v10);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(exception, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
  }
  v4 = objc_msgSend(v2, "unsignedShortValue");

  return v4;
}

void sub_1913B71DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  void *v22;
  int v23;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v23 & 1) == 0)
    {
LABEL_8:

      _Unwind_Resume(a1);
    }
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t Espresso::SerDes::serdes_object_json_objc::get_longlong(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  uint64_t v4;
  std::logic_error *exception;
  std::string *v7;
  __int128 v8;
  std::string v9;
  std::string v10;

  Espresso::SerDes::fast_dict_lookup(*(void **)(a1 + 24), a2);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if (!v2)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    v7 = std::string::append(&v9, "\" not found");
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v10.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v10.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    std::logic_error::logic_error(exception, &v10);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(exception, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
  }
  v4 = objc_msgSend(v2, "longLongValue");

  return v4;
}

void sub_1913B7324(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  void *v22;
  int v23;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v23 & 1) == 0)
    {
LABEL_8:

      _Unwind_Resume(a1);
    }
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

double Espresso::SerDes::serdes_object_json_objc::get_double(uint64_t a1, uint64_t a2)
{
  void *v3;
  const char *v4;
  size_t v5;
  double v6;
  double v7;
  std::logic_error *exception;
  std::string *v10;
  __int128 v11;
  std::string v12;
  std::string v13;

  Espresso::SerDes::fast_dict_lookup(*(void **)(a1 + 24), a2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    v10 = std::string::append(&v12, "\" not found");
    v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v13.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    std::logic_error::logic_error(exception, &v13);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(exception, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v4 = (const char *)objc_msgSend(objc_retainAutorelease(v3), "UTF8String");
    v5 = strlen(v4);
    v6 = Espresso::SerDes::generic_serdes_object::try_parse_special_double_val(a2, (uint64_t)v4, v5);
  }
  else
  {
    objc_msgSend(v3, "doubleValue");
  }
  v7 = v6;

  return v7;
}

void sub_1913B74B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  void *v22;
  int v23;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v23 & 1) == 0)
    {
LABEL_8:

      _Unwind_Resume(a1);
    }
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void Espresso::SerDes::serdes_object_json_objc::get_int_array(uint64_t a1@<X0>, uint64_t a2@<X1>, char **a3@<X8>)
{
  void *v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  char *v9;
  uint64_t i;
  void *v11;
  int v12;
  int v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  int v20;
  uint64_t v21;
  id v22;
  uint64_t v23;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  Espresso::SerDes::fast_dict_lookup(*(void **)(a1 + 24), a2);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v22 = v5;
  if (!v5)
  {
    if (*(char *)(a2 + 23) >= 0)
      v21 = a2;
    else
      v21 = *(_QWORD *)a2;
    v23 = v21;
    Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*>("Deserialization tag %s not found", &v23);
  }
  v6 = objc_msgSend(v5, "count");
  if (v6)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    for (i = 0; i != v6; ++i)
    {
      objc_msgSend(v22, "objectAtIndexedSubscript:", i, v22);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = objc_msgSend(v11, "intValue");
      v13 = v12;
      if ((unint64_t)v9 >= v8)
      {
        v15 = (v9 - v7) >> 2;
        v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 62)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        if ((uint64_t)(v8 - (_QWORD)v7) >> 1 > v16)
          v16 = (uint64_t)(v8 - (_QWORD)v7) >> 1;
        if (v8 - (unint64_t)v7 >= 0x7FFFFFFFFFFFFFFCLL)
          v17 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v17 = v16;
        if (v17)
          v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v17);
        else
          v18 = 0;
        v19 = (char *)(v17 + 4 * v15);
        *(_DWORD *)v19 = v13;
        v14 = v19 + 4;
        while (v9 != v7)
        {
          v20 = *((_DWORD *)v9 - 1);
          v9 -= 4;
          *((_DWORD *)v19 - 1) = v20;
          v19 -= 4;
        }
        v8 = v17 + 4 * v18;
        *a3 = v19;
        a3[1] = v14;
        a3[2] = (char *)v8;
        if (v7)
          operator delete(v7);
        v7 = v19;
      }
      else
      {
        *(_DWORD *)v9 = v12;
        v14 = v9 + 4;
      }
      a3[1] = v14;

      v9 = v14;
    }
  }

}

void sub_1913B76A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{
  uint64_t v9;
  void *v11;

  v11 = *(void **)v9;
  if (*(_QWORD *)v9)
  {
    *(_QWORD *)(v9 + 8) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::serdes_object_json_objc::get_uint32_array(uint64_t a1@<X0>, uint64_t a2@<X1>, char **a3@<X8>)
{
  void *v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  char *v9;
  uint64_t i;
  void *v11;
  int v12;
  int v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  int v20;
  uint64_t v21;
  id v22;
  uint64_t v23;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  Espresso::SerDes::fast_dict_lookup(*(void **)(a1 + 24), a2);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v22 = v5;
  if (!v5)
  {
    if (*(char *)(a2 + 23) >= 0)
      v21 = a2;
    else
      v21 = *(_QWORD *)a2;
    v23 = v21;
    Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*>("Deserialization tag %s not found", &v23);
  }
  v6 = objc_msgSend(v5, "count");
  if (v6)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    for (i = 0; i != v6; ++i)
    {
      objc_msgSend(v22, "objectAtIndexedSubscript:", i, v22);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = objc_msgSend(v11, "unsignedIntValue");
      v13 = v12;
      if ((unint64_t)v9 >= v8)
      {
        v15 = (v9 - v7) >> 2;
        v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 62)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        if ((uint64_t)(v8 - (_QWORD)v7) >> 1 > v16)
          v16 = (uint64_t)(v8 - (_QWORD)v7) >> 1;
        if (v8 - (unint64_t)v7 >= 0x7FFFFFFFFFFFFFFCLL)
          v17 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v17 = v16;
        if (v17)
          v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v17);
        else
          v18 = 0;
        v19 = (char *)(v17 + 4 * v15);
        *(_DWORD *)v19 = v13;
        v14 = v19 + 4;
        while (v9 != v7)
        {
          v20 = *((_DWORD *)v9 - 1);
          v9 -= 4;
          *((_DWORD *)v19 - 1) = v20;
          v19 -= 4;
        }
        v8 = v17 + 4 * v18;
        *a3 = v19;
        a3[1] = v14;
        a3[2] = (char *)v8;
        if (v7)
          operator delete(v7);
        v7 = v19;
      }
      else
      {
        *(_DWORD *)v9 = v12;
        v14 = v9 + 4;
      }
      a3[1] = v14;

      v9 = v14;
    }
  }

}

void sub_1913B7860(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{
  uint64_t v9;
  void *v11;

  v11 = *(void **)v9;
  if (*(_QWORD *)v9)
  {
    *(_QWORD *)(v9 + 8) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::serdes_object_json_objc::get_string_array(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t i;
  id v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  std::string *v18;
  __int128 v19;
  uint64_t v20;
  int v21;
  std::string *v22;
  void *__p[2];
  std::string::size_type v24;
  std::__split_buffer<std::string> __v;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  Espresso::SerDes::fast_dict_lookup(*(void **)(a1 + 24), a2);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v5;
  if (!v5)
  {
    if (*(char *)(a2 + 23) >= 0)
      v22 = (std::string *)a2;
    else
      v22 = *(std::string **)a2;
    __v.__first_ = v22;
    Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*>("Deserialization tag %s not found", &__v);
  }
  v7 = objc_msgSend(v5, "count");
  if (v7)
  {
    for (i = 0; i != v7; ++i)
    {
      objc_msgSend(v6, "objectAtIndexedSubscript:", i, __p[0]);
      v9 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      std::string::basic_string[abi:ne180100]<0>(__p, (char *)objc_msgSend(v9, "UTF8String"));
      v10 = *(_QWORD *)(a3 + 8);
      v11 = *(_QWORD *)(a3 + 16);
      if (v10 >= v11)
      {
        v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - *(_QWORD *)a3) >> 3);
        v14 = v13 + 1;
        if (v13 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - *(_QWORD *)a3) >> 3);
        if (2 * v15 > v14)
          v14 = 2 * v15;
        if (v15 >= 0x555555555555555)
          v16 = 0xAAAAAAAAAAAAAAALL;
        else
          v16 = v14;
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a3 + 16);
        if (v16)
          v16 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v16);
        else
          v17 = 0;
        v18 = (std::string *)(v16 + 24 * v13);
        __v.__first_ = (std::__split_buffer<std::string>::pointer)v16;
        __v.__begin_ = v18;
        __v.__end_cap_.__value_ = (std::string *)(v16 + 24 * v17);
        v19 = *(_OWORD *)__p;
        v18->__r_.__value_.__r.__words[2] = v24;
        *(_OWORD *)&v18->__r_.__value_.__l.__data_ = v19;
        __p[1] = 0;
        v24 = 0;
        __p[0] = 0;
        __v.__end_ = v18 + 1;
        std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a3, &__v);
        v20 = *(_QWORD *)(a3 + 8);
        std::__split_buffer<std::string>::~__split_buffer(&__v);
        v21 = SHIBYTE(v24);
        *(_QWORD *)(a3 + 8) = v20;
        if (v21 < 0)
          operator delete(__p[0]);
      }
      else
      {
        v12 = *(_OWORD *)__p;
        *(_QWORD *)(v10 + 16) = v24;
        *(_OWORD *)v10 = v12;
        __p[1] = 0;
        v24 = 0;
        __p[0] = 0;
        *(_QWORD *)(a3 + 8) = v10 + 24;
      }

    }
  }

}

void sub_1913B7A78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;

  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::serdes_object_json_objc::set_int(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t *v5;
  void *v6;
  id v7;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", *a3);
  v7 = (id)objc_claimAutoreleasedReturnValue();
  if (*((char *)a2 + 23) >= 0)
    v5 = a2;
  else
    v5 = (uint64_t *)*a2;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 24), "setObject:forKeyedSubscript:", v7, v6);

}

void sub_1913B7B48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void Espresso::SerDes::serdes_object_json_objc::set_uint(uint64_t a1, uint64_t *a2, unsigned int *a3)
{
  uint64_t *v5;
  void *v6;
  id v7;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", *a3);
  v7 = (id)objc_claimAutoreleasedReturnValue();
  if (*((char *)a2 + 23) >= 0)
    v5 = a2;
  else
    v5 = (uint64_t *)*a2;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 24), "setObject:forKeyedSubscript:", v7, v6);

}

void sub_1913B7BE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void Espresso::SerDes::serdes_object_json_objc::set_short(uint64_t a1, uint64_t *a2, __int16 *a3)
{
  uint64_t *v5;
  void *v6;
  id v7;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithShort:", *a3);
  v7 = (id)objc_claimAutoreleasedReturnValue();
  if (*((char *)a2 + 23) >= 0)
    v5 = a2;
  else
    v5 = (uint64_t *)*a2;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 24), "setObject:forKeyedSubscript:", v7, v6);

}

void sub_1913B7C80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void Espresso::SerDes::serdes_object_json_objc::set_ushort(uint64_t a1, uint64_t *a2, unsigned __int16 *a3)
{
  uint64_t *v5;
  void *v6;
  id v7;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedShort:", *a3);
  v7 = (id)objc_claimAutoreleasedReturnValue();
  if (*((char *)a2 + 23) >= 0)
    v5 = a2;
  else
    v5 = (uint64_t *)*a2;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 24), "setObject:forKeyedSubscript:", v7, v6);

}

void sub_1913B7D1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void Espresso::SerDes::serdes_object_json_objc::set_longlong(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t *v5;
  void *v6;
  id v7;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", *a3);
  v7 = (id)objc_claimAutoreleasedReturnValue();
  if (*((char *)a2 + 23) >= 0)
    v5 = a2;
  else
    v5 = (uint64_t *)*a2;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 24), "setObject:forKeyedSubscript:", v7, v6);

}

void sub_1913B7DB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void Espresso::SerDes::serdes_object_json_objc::set_ulonglong(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t *v5;
  void *v6;
  id v7;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", *a3);
  v7 = (id)objc_claimAutoreleasedReturnValue();
  if (*((char *)a2 + 23) >= 0)
    v5 = a2;
  else
    v5 = (uint64_t *)*a2;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 24), "setObject:forKeyedSubscript:", v7, v6);

}

void sub_1913B7E54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void Espresso::SerDes::serdes_object_json_objc::set_BOOL(uint64_t a1, uint64_t *a2, unsigned __int8 *a3)
{
  uint64_t *v5;
  void *v6;
  id v7;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", *a3);
  v7 = (id)objc_claimAutoreleasedReturnValue();
  if (*((char *)a2 + 23) >= 0)
    v5 = a2;
  else
    v5 = (uint64_t *)*a2;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 24), "setObject:forKeyedSubscript:", v7, v6);

}

void sub_1913B7EF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void Espresso::SerDes::serdes_object_json_objc::set_float(uint64_t a1, uint64_t *a2, _DWORD *a3)
{
  uint64_t *v5;
  double v6;
  const char *v7;
  void *v8;
  id v9;

  if (*((char *)a2 + 23) >= 0)
    v5 = a2;
  else
    v5 = (uint64_t *)*a2;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v5);
  v9 = (id)objc_claimAutoreleasedReturnValue();
  LODWORD(v6) = *a3;
  if (*(float *)a3 == INFINITY)
  {
    v7 = "inf";
  }
  else
  {
    if (*(float *)&v6 != -INFINITY)
    {
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 24), "setObject:forKeyedSubscript:", v8, v9);
      goto LABEL_9;
    }
    v7 = "-inf";
  }
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v7, v6);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 24), "setObject:forKeyedSubscript:", v8, v9);
LABEL_9:

}

void sub_1913B8000(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void Espresso::SerDes::serdes_object_json_objc::set_double(uint64_t a1, uint64_t *a2, double *a3)
{
  uint64_t *v5;
  double v6;
  const char *v7;
  void *v8;
  id v9;

  if (*((char *)a2 + 23) >= 0)
    v5 = a2;
  else
    v5 = (uint64_t *)*a2;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v5);
  v9 = (id)objc_claimAutoreleasedReturnValue();
  v6 = *a3;
  if (*a3 == INFINITY)
  {
    v7 = "inf";
  }
  else
  {
    if (v6 != -INFINITY)
    {
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 24), "setObject:forKeyedSubscript:", v8, v9);
      goto LABEL_9;
    }
    v7 = "-inf";
  }
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v7, v6);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 24), "setObject:forKeyedSubscript:", v8, v9);
LABEL_9:

}

void sub_1913B8118(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void Espresso::SerDes::serdes_object_json_objc::set_string(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v5;
  void *v6;
  id v7;

  if (*((char *)a3 + 23) < 0)
    a3 = (uint64_t *)*a3;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", a3);
  v7 = (id)objc_claimAutoreleasedReturnValue();
  if (*((char *)a2 + 23) >= 0)
    v5 = a2;
  else
    v5 = (uint64_t *)*a2;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 24), "setObject:forKeyedSubscript:", v7, v6);

}

void sub_1913B81CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void Espresso::SerDes::serdes_object_json_objc::set_obj(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v5;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  id v12;

  if (*((char *)a2 + 23) >= 0)
    v5 = a2;
  else
    v5 = (uint64_t *)*a2;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v5);
  v12 = (id)objc_claimAutoreleasedReturnValue();
  v7 = *(std::__shared_weak_count **)(a3 + 8);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  objc_msgSend(*(id *)(a1 + 24), "setObject:forKeyedSubscript:", v6[3], v12);
  if (v7)
  {
    v10 = (unint64_t *)&v7->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }

}

void sub_1913B82BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, char a11)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);

  _Unwind_Resume(a1);
}

void Espresso::SerDes::serdes_object_json_objc::set_obj_array(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  const void *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _QWORD *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  id v20;

  if (*((char *)a2 + 23) >= 0)
    v5 = a2;
  else
    v5 = (uint64_t *)*a2;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v5);
  v20 = (id)objc_claimAutoreleasedReturnValue();
  v6 = (void *)objc_opt_new();
  v7 = *a3;
  v8 = a3[1];
  if (*a3 != v8)
  {
    do
    {
      v9 = *(const void **)v7;
      v10 = *(std::__shared_weak_count **)(v7 + 8);
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldxr(p_shared_owners);
        while (__stxr(v12 + 1, p_shared_owners));
      }
      if (v10)
      {
        v14 = (unint64_t *)&v10->__shared_owners_;
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
      objc_msgSend(v6, "addObject:", v13[3]);
      if (v10)
      {
        v16 = (unint64_t *)&v10->__shared_owners_;
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      if (v10)
      {
        v18 = (unint64_t *)&v10->__shared_owners_;
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      v7 += 16;
    }
    while (v7 != v8);
  }
  objc_msgSend(*(id *)(a1 + 24), "setObject:forKeyedSubscript:", v6, v20);

}

void sub_1913B8450(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, char a11, uint64_t a12, char a13)
{
  void *v13;

  _Unwind_Resume(a1);
}

void Espresso::SerDes::serdes_object_json_objc::set_int_array(uint64_t a1, uint64_t *a2, int **a3)
{
  uint64_t *v5;
  void *v6;
  int *v7;
  int *v8;
  void *v9;
  id v10;

  if (*((char *)a2 + 23) >= 0)
    v5 = a2;
  else
    v5 = (uint64_t *)*a2;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v5);
  v10 = (id)objc_claimAutoreleasedReturnValue();
  v6 = (void *)objc_opt_new();
  v7 = *a3;
  v8 = a3[1];
  if (*a3 != v8)
  {
    do
    {
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", *v7);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "addObject:", v9);

      ++v7;
    }
    while (v7 != v8);
  }
  objc_msgSend(*(id *)(a1 + 24), "setObject:forKeyedSubscript:", v6, v10);

}

void sub_1913B854C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void Espresso::SerDes::serdes_object_json_objc::set_uint32_array(uint64_t a1, uint64_t *a2, unsigned int **a3)
{
  uint64_t *v5;
  void *v6;
  unsigned int *v7;
  unsigned int *v8;
  void *v9;
  id v10;

  if (*((char *)a2 + 23) >= 0)
    v5 = a2;
  else
    v5 = (uint64_t *)*a2;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v5);
  v10 = (id)objc_claimAutoreleasedReturnValue();
  v6 = (void *)objc_opt_new();
  v7 = *a3;
  v8 = a3[1];
  if (*a3 != v8)
  {
    do
    {
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", *v7);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "addObject:", v9);

      ++v7;
    }
    while (v7 != v8);
  }
  objc_msgSend(*(id *)(a1 + 24), "setObject:forKeyedSubscript:", v6, v10);

}

void sub_1913B8640(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void Espresso::SerDes::serdes_object_json_objc::set_string_array(uint64_t a1, uint64_t *a2, uint64_t **a3)
{
  uint64_t *v5;
  void *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  void *v10;
  id v11;

  if (*((char *)a2 + 23) >= 0)
    v5 = a2;
  else
    v5 = (uint64_t *)*a2;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v5);
  v11 = (id)objc_claimAutoreleasedReturnValue();
  v6 = (void *)objc_opt_new();
  v7 = *a3;
  v8 = a3[1];
  while (v7 != v8)
  {
    v9 = v7;
    if (*((char *)v7 + 23) < 0)
      v9 = (uint64_t *)*v7;
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "addObject:", v10);

    v7 += 3;
  }
  objc_msgSend(*(id *)(a1 + 24), "setObject:forKeyedSubscript:", v6, v11);

}

void sub_1913B8738(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void Espresso::SerDes::serdes_object_json_objc::serialize(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  id v5;

  v1 = *(_QWORD *)(a1 + 24);
  v5 = 0;
  objc_msgSend(MEMORY[0x1E0CB36D8], "dataWithJSONObject:options:error:", v1, 1, &v5);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v5;
  v4 = objc_retainAutorelease(v2);
  objc_msgSend(v4, "bytes");
  objc_msgSend(v4, "length");
  std::ostream::write();

}

void sub_1913B87FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t Espresso::SerDes::generic_serdes_object::serialize_to_string(Espresso::SerDes::generic_serdes_object *this)
{
  _QWORD v3[11];
  char v4;
  uint64_t v5;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v3);
  (*(void (**)(Espresso::SerDes::generic_serdes_object *, _QWORD *))(*(_QWORD *)this + 288))(this, v3);
  std::stringbuf::str();
  v3[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v3 + *(_QWORD *)(v3[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v3[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v4 < 0)
    operator delete((void *)v3[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x19401CCD0](&v5);
}

void sub_1913B88CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t Espresso::SerDes::generic_serdes_object::serialize_from_string(uint64_t a1, const std::string *a2)
{
  _QWORD v4[12];
  char v5;
  uint64_t v6;

  std::istringstream::basic_istringstream[abi:ne180100](v4, a2);
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 280))(a1, v4);
  v4[0] = *MEMORY[0x1E0DE4F58];
  *(_QWORD *)((char *)v4 + *(_QWORD *)(v4[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F58] + 24);
  v4[2] = MEMORY[0x1E0DE4FB8] + 16;
  if (v5 < 0)
    operator delete((void *)v4[10]);
  std::streambuf::~streambuf();
  std::istream::~istream();
  return MEMORY[0x19401CCD0](&v6);
}

void sub_1913B898C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::istringstream::~istringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<Espresso::SerDes::serdes_object_json_objc,std::allocator<Espresso::SerDes::serdes_object_json_objc>,NSMutableDictionary * {__strong}&,void>(_QWORD *a1, void *a2)
{
  _QWORD *v4;
  id v5;

  v4 = operator new(0x38uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_1E2DBF108;
  v5 = a2;
  v4[4] = 0;
  v4[3] = &off_1E2DA1C08;
  v4[5] = 0;
  v4[6] = v5;
  *a1 = v4 + 3;
  a1[1] = v4;
  std::shared_ptr<Espresso::SerDes::serdes_object_json_objc>::__enable_weak_this[abi:ne180100]<Espresso::SerDes::generic_serdes_object,Espresso::SerDes::serdes_object_json_objc,void>((uint64_t)a1, v4 + 4, (uint64_t)(v4 + 3));
}

void std::shared_ptr<Espresso::SerDes::serdes_object_json_objc>::__enable_weak_this[abi:ne180100]<Espresso::SerDes::generic_serdes_object,Espresso::SerDes::serdes_object_json_objc,void>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  if (a2)
  {
    v4 = (std::__shared_weak_count *)a2[1];
    if (!v4 || v4->__shared_owners_ == -1)
    {
      v5 = *(std::__shared_weak_count **)(a1 + 8);
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
        p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
        do
          v9 = __ldxr(p_shared_weak_owners);
        while (__stxr(v9 + 1, p_shared_weak_owners));
        v4 = (std::__shared_weak_count *)a2[1];
      }
      *a2 = a3;
      a2[1] = v5;
      if (v4)
        std::__shared_weak_count::__release_weak(v4);
      if (v5)
      {
        v10 = (unint64_t *)&v5->__shared_owners_;
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
    }
  }
}

void std::__shared_ptr_emplace<Espresso::SerDes::serdes_object_json_objc>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF108;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::serdes_object_json_objc>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF108;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void _ZNSt3__115allocate_sharedB8ne180100IN8Espresso6SerDes23serdes_object_json_objcENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(_QWORD *a1)
{
  char *v2;
  uint64_t v3;
  void *v4;

  v2 = (char *)operator new(0x38uLL);
  *(_OWORD *)(v2 + 8) = 0u;
  *(_QWORD *)v2 = &off_1E2DBF108;
  *((_QWORD *)v2 + 3) = &off_1E2DA1C08;
  *((_QWORD *)v2 + 4) = 0;
  *(_OWORD *)(v2 + 40) = 0u;
  v3 = objc_opt_new();
  v4 = (void *)*((_QWORD *)v2 + 6);
  *((_QWORD *)v2 + 6) = v3;

  *a1 = v2 + 24;
  a1[1] = v2;
  std::shared_ptr<Espresso::SerDes::serdes_object_json_objc>::__enable_weak_this[abi:ne180100]<Espresso::SerDes::generic_serdes_object,Espresso::SerDes::serdes_object_json_objc,void>((uint64_t)a1, (_QWORD *)v2 + 4, (uint64_t)(v2 + 24));
}

void sub_1913B8B84(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  std::__shared_weak_count *shared_weak_owners;
  void *v4;

  shared_weak_owners = (std::__shared_weak_count *)v1[1].__shared_weak_owners_;
  if (shared_weak_owners)
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::blob_container_options>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBAF68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::blob_container_options>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBAF68;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::blob_container_options>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::MPSGraphEngine::Kernels::flatten_kernel::~flatten_kernel(Espresso::MPSGraphEngine::Kernels::flatten_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

uint64_t Espresso::MPSGraphEngine::Kernels::flatten_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  BOOL v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  void *v34[2];
  char v35;
  int64x2_t *v36;
  std::__shared_weak_count *v37;
  int64x2_t *v38;
  uint64_t v39;
  void *v40[2];
  int v41;
  std::string __p;
  _BYTE v43[24];
  _BYTE v44[32];
  std::__shared_weak_count *v45;
  int64x2_t *v46;
  uint64_t v47;
  void **v48;

  if (*(_QWORD *)(a3 + 8) - *(_QWORD *)a3 == 64 && *(_QWORD *)(a3 + 32) - *(_QWORD *)(a3 + 24) == 64)
  {
    if (*(_DWORD *)(a1 + 280) == 2)
    {
      Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v40, *(const Espresso::layer_shape **)a3, 0);
      v6 = *(unsigned int *)(a1 + 284);
      v7 = (v6 & 0x80000000) == 0 && v41 > v6;
      v8 = v7;
      if (!v7)
      {
        v9 = *(std::__shared_weak_count **)(a2 + 8);
        v36 = *(int64x2_t **)a2;
        v37 = v9;
        if (v9)
        {
          p_shared_owners = (unint64_t *)&v9->__shared_owners_;
          do
            v11 = __ldxr(p_shared_owners);
          while (__stxr(v11 + 1, p_shared_owners));
        }
        std::string::basic_string[abi:ne180100]<0>(v34, "[Dispatch::MPSGraph::flatten_kernel] unsupported: nd_axis < 0 or nd_axis >= input rank");
        Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)v34, a3, 0);
        Espresso::emit_kernel_validation_warning(&v36, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
        v12 = v45;
        if (v45)
        {
          v13 = (unint64_t *)&v45->__shared_owners_;
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 - 1, v13));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        v48 = (void **)v44;
        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v48);
        v48 = (void **)v43;
        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v48);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (v35 < 0)
          operator delete(v34[0]);
        v15 = v37;
        if (v37)
        {
          v16 = (unint64_t *)&v37->__shared_owners_;
          do
            v17 = __ldaxr(v16);
          while (__stlxr(v17 - 1, v16));
          if (!v17)
          {
            ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
            std::__shared_weak_count::__release_weak(v15);
          }
        }
      }
      return v8;
    }
    v27 = *(_QWORD *)(a2 + 8);
    v38 = *(int64x2_t **)a2;
    v39 = v27;
    if (v27)
    {
      v28 = (unint64_t *)(v27 + 8);
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
    }
    std::string::basic_string[abi:ne180100]<0>(v40, "[Dispatch::MPSGraph::flatten_kernel] unsupported: only mode FLATTEN_NCHW_ND is supported");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)v40, a3, 0);
    Espresso::emit_kernel_validation_warning(&v38, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    v30 = v45;
    if (v45)
    {
      v31 = (unint64_t *)&v45->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    v34[0] = v44;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v34);
    v34[0] = v43;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v34);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v41) < 0)
      operator delete(v40[0]);
    v8 = v39;
    if (v39)
    {
      v33 = (unint64_t *)(v39 + 8);
      do
        v25 = __ldaxr(v33);
      while (__stlxr(v25 - 1, v33));
LABEL_43:
      if (!v25)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v8);
      }
      return 0;
    }
  }
  else
  {
    v18 = *(_QWORD *)(a2 + 8);
    v46 = *(int64x2_t **)a2;
    v47 = v18;
    if (v18)
    {
      v19 = (unint64_t *)(v18 + 8);
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
    std::string::basic_string[abi:ne180100]<0>(v40, "[Dispatch::MPSGraph::flatten_kernel] unsupported: invalid number of inputs or outputs.  Only 1 & 1 supported.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)v40, a3, 0);
    Espresso::emit_kernel_validation_warning(&v46, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    v21 = v45;
    if (v45)
    {
      v22 = (unint64_t *)&v45->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v34[0] = v44;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v34);
    v34[0] = v43;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v34);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v41) < 0)
      operator delete(v40[0]);
    v8 = v47;
    if (v47)
    {
      v24 = (unint64_t *)(v47 + 8);
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      goto LABEL_43;
    }
  }
  return v8;
}

void sub_1913B8FBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26)
{
  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t(&a26);
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1913B9290(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33)
{
  _Unwind_Resume(exception_object);
}

void std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_elementwise_kernel,Espresso::generic_activation_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_elementwise_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_elementwise_kernel,Espresso::generic_activation_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_elementwise_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_elementwise_kernel,Espresso::generic_activation_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_elementwise_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_elementwise_kernel,Espresso::generic_activation_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_elementwise_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DB3080;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_elementwise_kernel,Espresso::generic_activation_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_elementwise_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_elementwise_kernel,Espresso::generic_activation_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_elementwise_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DB3080;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_elementwise_kernel,Espresso::generic_activation_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_elementwise_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_elementwise_kernel,Espresso::generic_activation_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_elementwise_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::operator()(uint64_t a1, uint64_t **a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[2];
  _QWORD v10[2];

  v3 = *(_QWORD *)(a1 + 8);
  v4 = **a2;
  v5 = Espresso::zephyr::cast_kernel<Espresso::generic_elementwise_kernel>(v4);
  v6 = (*a2)[1];
  v10[0] = v4;
  v10[1] = v5;
  v9[0] = v6;
  v9[1] = Espresso::zephyr::cast_kernel<Espresso::generic_activation_kernel>(v6);
  v7 = *(_QWORD *)(v3 + 24);
  if (!v7)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *))(*(_QWORD *)v7 + 48))(v7, v10, v9);
}

uint64_t std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_elementwise_kernel,Espresso::generic_activation_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_elementwise_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_elementwise_kernel,Espresso::generic_activation_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_elementwise_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN8Espresso6zephyr19match_fuse_verticalINS_26generic_elementwise_kernelENS_25generic_activation_kernelEEEbRNS0_15ordered_block_tENSt3__18functionIFbNS0_19match_kernel_info_tIT_EENS8_IT0_EEEEEEUlRKNS6_6vectorIPNS0_6node_tENS6_9allocatorISH_EEEEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_elementwise_kernel,Espresso::generic_activation_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_elementwise_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_elementwise_kernel,Espresso::generic_activation_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_elementwise_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::target_type()
{
}

void *Espresso::zephyr::cast_kernel<Espresso::generic_elementwise_kernel>(uint64_t a1)
{
  uint64_t v1;
  const void *v2;
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;

  if (!a1)
    return 0;
  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(const void **)(v1 + 8);
  if (!v2)
    return 0;
  if (v3)
  {
    v4 = *(std::__shared_weak_count **)(v1 + 16);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  return v3;
}

void *Espresso::zephyr::cast_kernel<Espresso::generic_activation_kernel>(uint64_t a1)
{
  uint64_t v1;
  const void *v2;
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;

  if (!a1)
    return 0;
  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(const void **)(v1 + 8);
  if (!v2)
    return 0;
  if (v3)
  {
    v4 = *(std::__shared_weak_count **)(v1 + 16);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  return v3;
}

void std::__function::__func<fuse_add_and_relu(Espresso::zephyr::function_t &)::$_0,std::allocator<fuse_add_and_relu(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_elementwise_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<fuse_add_and_relu(Espresso::zephyr::function_t &)::$_0,std::allocator<fuse_add_and_relu(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_elementwise_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DAEBC0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<fuse_add_and_relu(Espresso::zephyr::function_t &)::$_0,std::allocator<fuse_add_and_relu(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_elementwise_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DAEBC0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<fuse_add_and_relu(Espresso::zephyr::function_t &)::$_0,std::allocator<fuse_add_and_relu(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_elementwise_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>::operator()(uint64_t a1, uint64_t *a2, Espresso::zephyr::node_t **a3)
{
  uint64_t v3;
  Espresso::zephyr::node_t *v4;
  void *matched;
  const char *v6;
  void *v7;
  Espresso *v8;
  const char *v9;
  Espresso::zephyr::value_t **v10;
  Espresso *v11;
  const char *v12;
  NSObject *v13;
  uint64_t v14;
  int v16;
  const char *v17;
  __int16 v18;
  int v19;
  __int16 v20;
  const char *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  v4 = *a3;
  matched = Espresso::zephyr::match_simple_eltwise_binop(*a2, 0);
  if (!matched)
  {
    if (!Espresso::zephyr::match_verbose)
      return 0;
    Espresso::espresso_os_log_subsystem(0, v6);
    v13 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      goto LABEL_18;
    v16 = 136315650;
    v17 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_manual.mm";
    v18 = 1024;
    v19 = 23;
    v20 = 2080;
    v21 = "ke";
LABEL_17:
    _os_log_impl(&dword_190DAF000, v13, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", (uint8_t *)&v16, 0x1Cu);
    goto LABEL_18;
  }
  v7 = matched;
  v8 = (Espresso *)Espresso::zephyr::match_simple_activation((uint64_t)v4, 0);
  if (!v8)
  {
    if (!Espresso::zephyr::match_verbose)
      return 0;
    Espresso::espresso_os_log_subsystem(0, v9);
    v13 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      goto LABEL_18;
    v16 = 136315650;
    v17 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_manual.mm";
    v18 = 1024;
    v19 = 25;
    v20 = 2080;
    v21 = "ka";
    goto LABEL_17;
  }
  if (*(_QWORD *)(v3 + 128) - *(_QWORD *)(v3 + 120) == 16)
  {
    *(_DWORD *)((*(uint64_t (**)(void *))(*(_QWORD *)v7 + 320))(v7) + 4) = 1;
    v10 = (Espresso::zephyr::value_t **)*((_QWORD *)v4 + 12);
    if (*((Espresso::zephyr::value_t ***)v4 + 13) == v10)
      std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
    Espresso::zephyr::node_t::replace_output_at(v3, 0, *v10);
    v11 = (Espresso *)Espresso::zephyr::node_t::remove_from_graphs(v4);
    if (!Espresso::zephyr::match_verbose)
      return 1;
    Espresso::espresso_os_log_subsystem(v11, v12);
    v13 = objc_claimAutoreleasedReturnValue();
    v14 = 1;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      v16 = 136315394;
      v17 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_manual.mm";
      v18 = 1024;
      v19 = 33;
      _os_log_impl(&dword_190DAF000, v13, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_PASS %s:%d\n", (uint8_t *)&v16, 0x12u);
    }
    goto LABEL_19;
  }
  if (!Espresso::zephyr::match_verbose)
    return 0;
  Espresso::espresso_os_log_subsystem(v8, v9);
  v13 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    v16 = 136315650;
    v17 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_manual.mm";
    v18 = 1024;
    v19 = 26;
    v20 = 2080;
    v21 = "t0.node->inputs().size() == 2";
    goto LABEL_17;
  }
LABEL_18:
  v14 = 0;
LABEL_19:

  return v14;
}

uint64_t std::__function::__func<fuse_add_and_relu(Espresso::zephyr::function_t &)::$_0,std::allocator<fuse_add_and_relu(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_elementwise_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZL17fuse_add_and_reluRN8Espresso6zephyr10function_tEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<fuse_add_and_relu(Espresso::zephyr::function_t &)::$_0,std::allocator<fuse_add_and_relu(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_elementwise_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>::target_type()
{
}

void sub_1913B9A58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  va_list va;

  va_start(va, a2);
  v5 = *(_QWORD **)(v3 - 48);
  if (v5 == v2)
  {
    v6 = 4;
    v5 = (_QWORD *)(v3 - 72);
  }
  else
  {
    if (!v5)
      goto LABEL_6;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_6:
  Espresso::zephyr::function_t::~function_t((Espresso::zephyr::function_t *)va);
  _Unwind_Resume(a1);
}

void std::__function::__func<quantize_gathers(Espresso::zephyr::function_t &)::$_0,std::allocator<quantize_gathers(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::ordered_block_t *)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<quantize_gathers(Espresso::zephyr::function_t &)::$_0,std::allocator<quantize_gathers(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::ordered_block_t *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DAEB68;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<quantize_gathers(Espresso::zephyr::function_t &)::$_0,std::allocator<quantize_gathers(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::ordered_block_t *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DAEB68;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<quantize_gathers(Espresso::zephyr::function_t &)::$_0,std::allocator<quantize_gathers(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::ordered_block_t *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t matched;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v6 = *a2;
  v7[0] = &off_1E2DB3868;
  v7[1] = &v6;
  v8 = v7;
  matched = Espresso::zephyr::ordered_block_t::match_transform(v6, (uint64_t)v7);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return matched;
}

void sub_1913B9BB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<quantize_gathers(Espresso::zephyr::function_t &)::$_0,std::allocator<quantize_gathers(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::ordered_block_t *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZL16quantize_gathersRN8Espresso6zephyr10function_tEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quantize_gathers(Espresso::zephyr::function_t &)::$_0,std::allocator<quantize_gathers(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::ordered_block_t *)>::target_type()
{
}

void std::__function::__func<quantize_gathers(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::ordered_block_t *)::{lambda(Espresso::zephyr::node_t *)#1},std::allocator<quantize_gathers(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::ordered_block_t *)::{lambda(Espresso::zephyr::node_t *)#1}>,BOOL ()(Espresso::zephyr::node_t *)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<quantize_gathers(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::ordered_block_t *)::{lambda(Espresso::zephyr::node_t *)#1},std::allocator<quantize_gathers(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::ordered_block_t *)::{lambda(Espresso::zephyr::node_t *)#1}>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DB3868;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<quantize_gathers(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::ordered_block_t *)::{lambda(Espresso::zephyr::node_t *)#1},std::allocator<quantize_gathers(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::ordered_block_t *)::{lambda(Espresso::zephyr::node_t *)#1}>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DB3868;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<quantize_gathers(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::ordered_block_t *)::{lambda(Espresso::zephyr::node_t *)#1},std::allocator<quantize_gathers(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::ordered_block_t *)::{lambda(Espresso::zephyr::node_t *)#1}>,BOOL ()(Espresso::zephyr::node_t *)>::operator()(Espresso::zephyr::ordered_block_t ***a1, const char *a2)
{
  Espresso::zephyr::node_t *v2;
  void *v4;
  const char *v5;
  void *v6;
  unsigned int *v7;
  const char *v8;
  NSObject *v9;
  uint64_t v10;
  vDSP_Length v12;
  vDSP_Length v13;
  Espresso *v14;
  const char *v15;
  Espresso::zephyr::value_t **v16;
  Espresso *v17;
  const char *v18;
  int v19;
  Espresso::zephyr::value_t **v20;
  uint64_t v21;
  __int128 v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _DWORD *v31;
  _DWORD *v32;
  float v33;
  float v34;
  float v35;
  float v36;
  unint64_t v37;
  float *v38;
  float *v39;
  float *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  BOOL v44;
  unint64_t v45;
  uint64_t v46;
  float *v47;
  int v48;
  float *v49;
  float *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  float *v56;
  int v57;
  float *v58;
  float *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  float *v65;
  int v66;
  float *v67;
  vDSP_Length v68;
  float *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  float *v75;
  int v76;
  uint64_t v77;
  vDSP_Length v78;
  float v79;
  double v80;
  int v81;
  double v82;
  unsigned int v83;
  double v84;
  unsigned int v85;
  int v86;
  char *v87;
  uint64_t *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  size_t v92;
  size_t v93;
  __int128 *v94;
  const void *v95;
  char *v96;
  std::__shared_weak_count *v97;
  Espresso::zephyr::value_t **v98;
  unint64_t *p_shared_owners;
  unint64_t v100;
  uint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  uint64_t v109;
  Espresso::zephyr::value_t **v110;
  const Espresso::layer_shape *v111;
  uint64_t v112;
  __int128 v113;
  uint64_t v114;
  __int128 v115;
  const char *v116;
  std::string *v117;
  std::string *v118;
  std::string *v119;
  const char *v120;
  Espresso *v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  NSObject *v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  NSObject *v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  NSObject *v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  vDSP_Length v146;
  uint64_t v147;
  vDSP_Length v148;
  vDSP_Length v149;
  uint64_t v150;
  _BYTE v151[24];
  std::string v152;
  _BYTE v153[24];
  std::string v154;
  std::string *v155;
  char v156;
  std::string v157;
  uint64_t v158;
  std::__shared_weak_count *v159;
  uint64_t v160;
  std::__shared_weak_count *v161;
  uint64_t v162;
  std::__shared_weak_count *v163;
  _DWORD v164[2];
  uint64_t v165;
  uint64_t v166;
  std::__shared_weak_count *v167;
  void *v168;
  float *v169;
  void *__p;
  float *v171;
  unint64_t v172;
  uint64_t v173;
  std::__shared_weak_count *v174;
  _OWORD v175[2];
  uint64_t v176;
  void *v177;
  void *v178;
  uint64_t v179;
  _OWORD v180[2];
  uint64_t v181;
  void *v182;
  void *v183;
  uint64_t v184;
  uint64_t v185;
  std::__shared_weak_count *v186;
  float __C;
  uint64_t v188;
  std::__shared_weak_count *v189;
  uint64_t v190;
  std::__shared_weak_count *v191;
  __int128 v192;
  __int128 v193;
  uint64_t v194;
  void *v195;
  void *v196;
  uint64_t v197;
  _BYTE buf[68];
  __int128 v199;
  __int128 v200;
  __int128 v201;
  _BYTE v202[21];
  int v203;
  uint64_t v204;

  v204 = *MEMORY[0x1E0C80C00];
  v2 = *(Espresso::zephyr::node_t **)a2;
  if (*(_QWORD *)(*(_QWORD *)a2 + 128) - *(_QWORD *)(*(_QWORD *)a2 + 120) != 8)
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem((Espresso *)a1, a2);
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_manual.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 44;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = "node->inputs().size() == 1";
        _os_log_impl(&dword_190DAF000, v9, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_35;
    }
    return 0;
  }
  v4 = Espresso::zephyr::cast_kernel<Espresso::generic_inner_product_kernel>(*(_QWORD *)a2);
  if (!v4)
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(0, v5);
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_manual.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 47;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = "k";
        _os_log_impl(&dword_190DAF000, v9, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_35;
    }
    return 0;
  }
  v6 = v4;
  v7 = (unsigned int *)(*(uint64_t (**)(void *))(*(_QWORD *)v4 + 384))(v4);
  if (!v7[8])
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem((Espresso *)v7, v8);
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_manual.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 50;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = "p.is_lookup";
        _os_log_impl(&dword_190DAF000, v9, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_35;
    }
    return 0;
  }
  if (v7[7])
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem((Espresso *)v7, v8);
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_manual.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 51;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = "!p.has_prelu";
        _os_log_impl(&dword_190DAF000, v9, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
LABEL_35:

      return 0;
    }
    return 0;
  }
  if (v7[3])
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem((Espresso *)v7, v8);
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_manual.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 52;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = "!p.has_relu";
        _os_log_impl(&dword_190DAF000, v9, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_35;
    }
    return 0;
  }
  if (v7[4])
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem((Espresso *)v7, v8);
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_manual.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 53;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = "!p.has_tanh";
        _os_log_impl(&dword_190DAF000, v9, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_35;
    }
    return 0;
  }
  if (v7[9])
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem((Espresso *)v7, v8);
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_manual.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 54;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = "!p.quantization_mode";
        _os_log_impl(&dword_190DAF000, v9, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_35;
    }
    return 0;
  }
  v12 = *v7;
  v13 = v7[1];
  (*(void (**)(uint64_t *__return_ptr, void *))(*(_QWORD *)v6 + 416))(&v190, v6);
  v14 = (Espresso *)(*(_QWORD *(**)(uint64_t *__return_ptr, void *))(*(_QWORD *)v6 + 408))(&v188, v6);
  __C = 0.0;
  if (v188)
    vDSP_maxv(*(const float **)(v188 + 16), 1, &__C, *(int *)(v188 + 8));
  if (v190)
  {
    if (v188 && fabsf(__C) >= 1.0e-12)
    {
      if (Espresso::zephyr::match_verbose)
      {
        Espresso::espresso_os_log_subsystem(v14, v15);
        v135 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v135, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_manual.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 62;
          *(_WORD *)&buf[18] = 2080;
          *(_QWORD *)&buf[20] = "!b || fabsf(max_b) < 1e-12";
          _os_log_impl(&dword_190DAF000, v135, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
        }
        goto LABEL_232;
      }
    }
    else
    {
      if (v12 > 4)
      {
        v16 = (Espresso::zephyr::value_t **)*((_QWORD *)v2 + 15);
        if (*((Espresso::zephyr::value_t ***)v2 + 16) == v16)
          std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
        Espresso::zephyr::need_shape((Espresso::zephyr *)&v185, *v16);
        if (!v185 || (v19 = *(_DWORD *)(v185 + 20), v19 == -1) || v19 >= 4)
        {
          if (Espresso::zephyr::match_verbose)
          {
            Espresso::espresso_os_log_subsystem(v17, v18);
            v142 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v142, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 136315650;
              *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_manual.mm";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 66;
              *(_WORD *)&buf[18] = 2080;
              *(_QWORD *)&buf[20] = "shape_ptr && shape_ptr->rank() <= 3";
              _os_log_impl(&dword_190DAF000, v142, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
            }
            goto LABEL_247;
          }
        }
        else
        {
          if (v19 > 1)
          {
            v20 = (Espresso::zephyr::value_t **)*((_QWORD *)v2 + 12);
            if (*((Espresso::zephyr::value_t ***)v2 + 13) == v20)
              std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
            Espresso::zephyr::need_shape((Espresso::zephyr *)buf, *v20);
            v21 = *(_QWORD *)(*(_QWORD *)buf + 32);
            v22 = *(_OWORD *)(*(_QWORD *)buf + 16);
            v180[0] = **(_OWORD **)buf;
            v180[1] = v22;
            v181 = v21;
            v182 = 0;
            v183 = 0;
            v184 = 0;
            std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v182, *(const void **)(*(_QWORD *)buf + 40), *(_QWORD *)(*(_QWORD *)buf + 48), (uint64_t)(*(_QWORD *)(*(_QWORD *)buf + 48) - *(_QWORD *)(*(_QWORD *)buf + 40)) >> 2);
            v23 = *(std::__shared_weak_count **)&buf[8];
            if (*(_QWORD *)&buf[8])
            {
              v24 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
              do
                v25 = __ldaxr(v24);
              while (__stlxr(v25 - 1, v24));
              if (!v25)
              {
                ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
                std::__shared_weak_count::__release_weak(v23);
              }
            }
            v26 = *(_QWORD *)(v185 + 32);
            v27 = *(_OWORD *)(v185 + 16);
            v175[0] = *(_OWORD *)v185;
            v175[1] = v27;
            v176 = v26;
            v177 = 0;
            v178 = 0;
            v179 = 0;
            std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v177, *(const void **)(v185 + 40), *(_QWORD *)(v185 + 48), (uint64_t)(*(_QWORD *)(v185 + 48) - *(_QWORD *)(v185 + 40)) >> 2);
            std::allocate_shared[abi:ne180100]<Espresso::blob<float,2>,std::allocator<Espresso::blob<float,2>>,int &,int &,int &,int &,void>(&v173, *(_DWORD *)(v190 + 12), *(_DWORD *)(v190 + 8), 1, 1);
            v150 = v173;
            vDSP_mtrans(*(const float **)(v190 + 16), 1, *(float **)(v173 + 16), 1, v13, v12);
            __p = 0;
            v171 = 0;
            v28 = 4 * v12;
            v172 = 0;
            std::vector<float>::reserve(&__p, 4 * v12);
            std::vector<float>::vector(&v168, v13);
            v29 = 0;
            v30 = 0;
            v148 = v13 >> 2;
            v149 = v12;
            v146 = v13;
            v147 = 3 * (v13 >> 2);
            do
            {
              if ((_DWORD)v13)
              {
                v31 = (_DWORD *)(*(_QWORD *)(v150 + 16) + v29);
                v32 = v168;
                do
                {
                  *v32++ = *v31;
                  v31 = (_DWORD *)((char *)v31 + v28);
                  --v13;
                }
                while (v13);
              }
              std::__sort<std::__less<float,float> &,float *>();
              v33 = *(float *)v168;
              v34 = *((float *)v168 + v148);
              v35 = *((float *)v168 + v147);
              v36 = *(v169 - 1);
              v38 = v171;
              v37 = v172;
              if ((unint64_t)v171 >= v172)
              {
                v40 = (float *)__p;
                v41 = ((char *)v171 - (_BYTE *)__p) >> 2;
                v42 = v41 + 1;
                if ((unint64_t)(v41 + 1) >> 62)
                  goto LABEL_258;
                v43 = v172 - (_QWORD)__p;
                if ((uint64_t)(v172 - (_QWORD)__p) >> 1 > v42)
                  v42 = v43 >> 1;
                v44 = (unint64_t)v43 >= 0x7FFFFFFFFFFFFFFCLL;
                v45 = 0x3FFFFFFFFFFFFFFFLL;
                if (!v44)
                  v45 = v42;
                if (v45)
                {
                  v45 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v45);
                  v40 = (float *)__p;
                  v38 = v171;
                }
                else
                {
                  v46 = 0;
                }
                v47 = (float *)(v45 + 4 * v41);
                *v47 = v33;
                v39 = v47 + 1;
                while (v38 != v40)
                {
                  v48 = *((_DWORD *)v38-- - 1);
                  *((_DWORD *)v47-- - 1) = v48;
                }
                v37 = v45 + 4 * v46;
                __p = v47;
                v171 = v39;
                v172 = v37;
                if (v40)
                {
                  operator delete(v40);
                  v37 = v172;
                }
              }
              else
              {
                *v171 = v33;
                v39 = v38 + 1;
              }
              v171 = v39;
              if ((unint64_t)v39 >= v37)
              {
                v50 = (float *)__p;
                v51 = ((char *)v39 - (_BYTE *)__p) >> 2;
                v52 = v51 + 1;
                if ((unint64_t)(v51 + 1) >> 62)
                  goto LABEL_258;
                v53 = v37 - (_QWORD)__p;
                if (v53 >> 1 > v52)
                  v52 = v53 >> 1;
                v44 = (unint64_t)v53 >= 0x7FFFFFFFFFFFFFFCLL;
                v54 = 0x3FFFFFFFFFFFFFFFLL;
                if (!v44)
                  v54 = v52;
                if (v54)
                {
                  v54 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v54);
                  v50 = (float *)__p;
                  v39 = v171;
                }
                else
                {
                  v55 = 0;
                }
                v56 = (float *)(v54 + 4 * v51);
                *v56 = v34;
                v49 = v56 + 1;
                while (v39 != v50)
                {
                  v57 = *((_DWORD *)v39-- - 1);
                  *((_DWORD *)v56-- - 1) = v57;
                }
                v37 = v54 + 4 * v55;
                __p = v56;
                v171 = v49;
                v172 = v37;
                if (v50)
                {
                  operator delete(v50);
                  v37 = v172;
                }
              }
              else
              {
                *v39 = v34;
                v49 = v39 + 1;
              }
              v171 = v49;
              if ((unint64_t)v49 >= v37)
              {
                v59 = (float *)__p;
                v60 = ((char *)v49 - (_BYTE *)__p) >> 2;
                v61 = v60 + 1;
                if ((unint64_t)(v60 + 1) >> 62)
                  goto LABEL_258;
                v62 = v37 - (_QWORD)__p;
                if (v62 >> 1 > v61)
                  v61 = v62 >> 1;
                v44 = (unint64_t)v62 >= 0x7FFFFFFFFFFFFFFCLL;
                v63 = 0x3FFFFFFFFFFFFFFFLL;
                if (!v44)
                  v63 = v61;
                if (v63)
                {
                  v63 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v63);
                  v59 = (float *)__p;
                  v49 = v171;
                }
                else
                {
                  v64 = 0;
                }
                v65 = (float *)(v63 + 4 * v60);
                *v65 = v35;
                v58 = v65 + 1;
                while (v49 != v59)
                {
                  v66 = *((_DWORD *)v49-- - 1);
                  *((_DWORD *)v65-- - 1) = v66;
                }
                v37 = v63 + 4 * v64;
                __p = v65;
                v171 = v58;
                v172 = v37;
                if (v59)
                {
                  operator delete(v59);
                  v37 = v172;
                }
              }
              else
              {
                *v49 = v35;
                v58 = v49 + 1;
              }
              v171 = v58;
              if ((unint64_t)v58 >= v37)
              {
                v69 = (float *)__p;
                v70 = ((char *)v58 - (_BYTE *)__p) >> 2;
                v71 = v70 + 1;
                if ((unint64_t)(v70 + 1) >> 62)
LABEL_258:
                  std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                v72 = v37 - (_QWORD)__p;
                if (v72 >> 1 > v71)
                  v71 = v72 >> 1;
                v44 = (unint64_t)v72 >= 0x7FFFFFFFFFFFFFFCLL;
                v73 = 0x3FFFFFFFFFFFFFFFLL;
                if (!v44)
                  v73 = v71;
                if (v73)
                {
                  v73 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v73);
                  v69 = (float *)__p;
                  v58 = v171;
                }
                else
                {
                  v74 = 0;
                }
                v75 = (float *)(v73 + 4 * v70);
                *v75 = v36;
                v67 = v75 + 1;
                while (v58 != v69)
                {
                  v76 = *((_DWORD *)v58-- - 1);
                  *((_DWORD *)v75-- - 1) = v76;
                }
                __p = v75;
                v171 = v67;
                v172 = v73 + 4 * v74;
                if (v69)
                  operator delete(v69);
                v68 = v149;
              }
              else
              {
                *v58 = v36;
                v67 = v58 + 1;
                v68 = v149;
              }
              v171 = v67;
              v13 = v146;
              if ((_DWORD)v146)
              {
                v77 = *(_QWORD *)(v150 + 16);
                v78 = v146;
                do
                {
                  v79 = *(float *)(v77 + v29);
                  if (v79 >= v34)
                  {
                    v82 = (float)((float)((float)(v79 - v35) / (float)(v36 - v35)) * 63.0) + 0.5;
                    v83 = (int)v82 & ~((int)v82 >> 31);
                    if (v83 >= 0x3F)
                      v83 = 63;
                    v81 = v83 | 0xC0;
                    v84 = (float)((float)((float)(v79 - v34) / (float)(v35 - v34)) * 128.0) + 0.5;
                    v85 = (int)v84 & ~((int)v84 >> 31);
                    if (v85 >= 0x80)
                      v85 = 128;
                    v86 = v85 + 64;
                    if (v79 < v35)
                      v81 = v86;
                  }
                  else
                  {
                    v80 = (float)((float)((float)(v79 - v33) / (float)(v34 - v33)) * 64.0) + 0.5;
                    v81 = (int)v80 & ~((int)v80 >> 31);
                    if (v81 >= 0x40)
                      v81 = 64;
                  }
                  *(float *)(v77 + v29) = (float)v81;
                  v77 += v28;
                  --v78;
                }
                while (v78);
              }
              ++v30;
              v29 += 4;
            }
            while (v30 != v68);
            std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,2>,std::allocator<Espresso::blob<unsigned char,2>>,int const*&,void>(&v166, (int *)(v190 + 8));
            vDSP_vfixu8(*(const float **)(v173 + 16), 1, *(unsigned __int8 **)(v166 + 16), 1, *(int *)(v173 + 12) * (uint64_t)*(int *)(v173 + 8));
            memset(v202, 0, sizeof(v202));
            v201 = 0u;
            v200 = 0u;
            v199 = 0u;
            memset(&buf[4], 0, 64);
            v203 = 2;
            *(_DWORD *)buf = -1;
            Espresso::zephyr::make_kernel<Espresso::generic_squeeze_kernel,Espresso::zephyr::node_t,Espresso::squeeze_params_t>(&v158, *(_QWORD *)(*((_QWORD *)v2 + 1) + 8), (uint64_t)buf);
            v87 = Espresso::zephyr::function_t::new_detached_node(*((_QWORD *)v2 + 3), (uint64_t)v2 + 144);
            v88 = (uint64_t *)*((_QWORD *)v2 + 15);
            if (*((uint64_t **)v2 + 16) == v88)
              std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
            v89 = v87;
            v90 = *((_QWORD *)v2 + 3);
            v91 = *v88;
            v92 = *(unsigned __int8 *)(*v88 + 55);
            if ((v92 & 0x80u) == 0)
              v93 = v92;
            else
              v93 = *(_QWORD *)(v91 + 40);
            v94 = &v192;
            std::string::basic_string[abi:ne180100]((uint64_t)&v192, v93 + 8);
            if (SBYTE7(v193) < 0)
              v94 = (__int128 *)v192;
            if (v93)
            {
              if (*(char *)(v91 + 55) >= 0)
                v95 = (const void *)(v91 + 32);
              else
                v95 = *(const void **)(v91 + 32);
              memmove(v94, v95, v93);
            }
            strcpy((char *)v94 + v93, "_squeeze");
            v96 = Espresso::zephyr::function_t::new_value(v90, (uint64_t)&v192);
            if (SBYTE7(v193) < 0)
              operator delete((void *)v192);
            v97 = v159;
            std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(*((_QWORD *)v89 + 1) + 8), v158, (uint64_t)v159);
            v98 = (Espresso::zephyr::value_t **)*((_QWORD *)v2 + 15);
            if (*((Espresso::zephyr::value_t ***)v2 + 16) == v98)
              std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
            Espresso::zephyr::node_t::add_input((Espresso::zephyr::node_t *)v89, *v98);
            Espresso::zephyr::node_t::add_output((Espresso::zephyr::node_t *)v89, (Espresso::zephyr::value_t *)v96);
            Espresso::zephyr::node_t::replace_input_at(v2, 0, (Espresso::zephyr::value_t *)v96);
            Espresso::zephyr::ordered_block_t::insert_node_before(*a1[1], (Espresso::zephyr::node_t *)v89, v2);
            if (v97)
            {
              p_shared_owners = (unint64_t *)&v97->__shared_owners_;
              do
                v100 = __ldaxr(p_shared_owners);
              while (__stlxr(v100 - 1, p_shared_owners));
              if (!v100)
              {
                ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
                std::__shared_weak_count::__release_weak(v97);
              }
            }
            v165 = 0x800000000;
            v164[0] = v149;
            v164[1] = v146;
            Espresso::zephyr::make_kernel<Espresso::generic_quantized_gather_kernel,Espresso::zephyr::node_t,Espresso::quantized_gather_params_t>(&v162, *(_QWORD *)(*((_QWORD *)v2 + 1) + 8), (uint64_t)v164);
            v101 = v162;
            v192 = 0uLL;
            std::string::basic_string[abi:ne180100]<0>(buf, "Q_meta");
            (*(void (**)(uint64_t, __int128 *, _BYTE *, void *, int64_t, _QWORD))(*(_QWORD *)v101
                                                                                                 + 168))(v101, &v192, buf, __p, (char *)v171 - (_BYTE *)__p, 0);
            if ((buf[23] & 0x80000000) != 0)
              operator delete(*(void **)buf);
            v102 = (std::__shared_weak_count *)*((_QWORD *)&v192 + 1);
            if (*((_QWORD *)&v192 + 1))
            {
              v103 = (unint64_t *)(*((_QWORD *)&v192 + 1) + 8);
              do
                v104 = __ldaxr(v103);
              while (__stlxr(v104 - 1, v103));
              if (!v104)
              {
                ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
                std::__shared_weak_count::__release_weak(v102);
              }
            }
            v105 = v162;
            v192 = 0uLL;
            std::string::basic_string[abi:ne180100]<0>(buf, "weights_u8");
            (*(void (**)(uint64_t, __int128 *, _BYTE *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v105 + 168))(v105, &v192, buf, *(_QWORD *)(v166 + 16), *(int *)(v166 + 12) * (uint64_t)*(int *)(v166 + 8), 0);
            if ((buf[23] & 0x80000000) != 0)
              operator delete(*(void **)buf);
            v106 = (std::__shared_weak_count *)*((_QWORD *)&v192 + 1);
            if (*((_QWORD *)&v192 + 1))
            {
              v107 = (unint64_t *)(*((_QWORD *)&v192 + 1) + 8);
              do
                v108 = __ldaxr(v107);
              while (__stlxr(v108 - 1, v107));
              if (!v108)
              {
                ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
                std::__shared_weak_count::__release_weak(v106);
              }
            }
            v109 = v162;
            std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(*((_QWORD *)v2 + 1) + 8), v162, (uint64_t)v163);
            v110 = (Espresso::zephyr::value_t **)*((_QWORD *)v2 + 15);
            if (*((Espresso::zephyr::value_t ***)v2 + 16) == v110)
              std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
            Espresso::zephyr::need_shape((Espresso::zephyr *)&v160, *v110);
            v111 = (const Espresso::layer_shape *)v160;
            v112 = *(_QWORD *)(v160 + 32);
            v113 = *(_OWORD *)(v160 + 16);
            v192 = *(_OWORD *)v160;
            v193 = v113;
            v194 = v112;
            v195 = 0;
            v197 = 0;
            v196 = 0;
            std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v195, *(const void **)(v160 + 40), *(_QWORD *)(v160 + 48), (uint64_t)(*(_QWORD *)(v160 + 48) - *(_QWORD *)(v160 + 40)) >> 2);
            memset(&v157, 0, sizeof(v157));
            v155 = &v157;
            v156 = 0;
            v157.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x40uLL);
            v157.__r_.__value_.__l.__size_ = v157.__r_.__value_.__r.__words[0];
            v157.__r_.__value_.__r.__words[2] = v157.__r_.__value_.__r.__words[0] + 64;
            v157.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)&v157.__r_.__value_.__r.__words[2], &v192, (__int128 *)buf, (uint64_t)v157.__r_.__value_.__l.__data_);
            (*(void (**)(uint64_t *__return_ptr, uint64_t, std::string *))(*(_QWORD *)v109 + 64))(&v158, v109, &v157);
            v114 = *(_QWORD *)(v158 + 32);
            v115 = *(_OWORD *)(v158 + 16);
            *(_OWORD *)buf = *(_OWORD *)v158;
            *(_OWORD *)&buf[16] = v115;
            *(_QWORD *)&buf[32] = v114;
            memset(&buf[40], 0, 24);
            std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&buf[40], *(const void **)(v158 + 40), *(_QWORD *)(v158 + 48), (uint64_t)(*(_QWORD *)(v158 + 48) - *(_QWORD *)(v158 + 40)) >> 2);
            v155 = (std::string *)&v158;
            std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v155);
            v155 = &v157;
            std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v155);
            if (v195)
            {
              v196 = v195;
              operator delete(v195);
            }
            Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v158, (const Espresso::layer_shape *)v175, 0);
            v116 = (const char *)&v192;
            Espresso::layer_nd_shape::repr((std::string *)&v192, (uint64_t)&v158);
            if (SBYTE7(v193) < 0)
              v116 = (const char *)v192;
            Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v155, v111, 0);
            v117 = &v157;
            Espresso::layer_nd_shape::repr(&v157, (uint64_t)&v155);
            if ((v157.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v117 = (std::string *)v157.__r_.__value_.__r.__words[0];
            Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v153, (const Espresso::layer_shape *)buf, 0);
            v118 = &v154;
            Espresso::layer_nd_shape::repr(&v154, (uint64_t)v153);
            if ((v154.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v118 = (std::string *)v154.__r_.__value_.__r.__words[0];
            Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v151, (const Espresso::layer_shape *)v180, 0);
            Espresso::layer_nd_shape::repr(&v152, (uint64_t)v151);
            if ((v152.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v119 = &v152;
            else
              v119 = (std::string *)v152.__r_.__value_.__r.__words[0];
            printf("sq_in=%s in=%s new=%s old=%s\n", v116, (const char *)v117, (const char *)v118, (const char *)v119);
            if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v152.__r_.__value_.__l.__data_);
            if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v154.__r_.__value_.__l.__data_);
            if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v157.__r_.__value_.__l.__data_);
            if (SBYTE7(v193) < 0)
              operator delete((void *)v192);
            v121 = *(Espresso **)&buf[40];
            if (*(_QWORD *)&buf[40])
            {
              *(_QWORD *)&buf[48] = *(_QWORD *)&buf[40];
              operator delete(*(void **)&buf[40]);
            }
            v122 = v161;
            if (v161)
            {
              v123 = (unint64_t *)&v161->__shared_owners_;
              do
                v124 = __ldaxr(v123);
              while (__stlxr(v124 - 1, v123));
              if (!v124)
              {
                ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
                std::__shared_weak_count::__release_weak(v122);
              }
            }
            v125 = v163;
            if (v163)
            {
              v126 = (unint64_t *)&v163->__shared_owners_;
              do
                v127 = __ldaxr(v126);
              while (__stlxr(v127 - 1, v126));
              if (!v127)
              {
                ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
                std::__shared_weak_count::__release_weak(v125);
              }
            }
            if (Espresso::zephyr::match_verbose)
            {
              Espresso::espresso_os_log_subsystem(v121, v120);
              v128 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v128, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)buf = 136315394;
                *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_manual.mm";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 176;
                _os_log_impl(&dword_190DAF000, v128, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_PASS %s:%d\n", buf, 0x12u);
              }

            }
            v129 = v167;
            if (v167)
            {
              v130 = (unint64_t *)&v167->__shared_owners_;
              do
                v131 = __ldaxr(v130);
              while (__stlxr(v131 - 1, v130));
              if (!v131)
              {
                ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
                std::__shared_weak_count::__release_weak(v129);
              }
            }
            if (v168)
            {
              v169 = (float *)v168;
              operator delete(v168);
            }
            if (__p)
            {
              v171 = (float *)__p;
              operator delete(__p);
            }
            v132 = v174;
            if (v174)
            {
              v133 = (unint64_t *)&v174->__shared_owners_;
              do
                v134 = __ldaxr(v133);
              while (__stlxr(v134 - 1, v133));
              if (!v134)
              {
                ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
                std::__shared_weak_count::__release_weak(v132);
              }
            }
            if (v177)
            {
              v178 = v177;
              operator delete(v177);
            }
            if (v182)
            {
              v183 = v182;
              operator delete(v182);
            }
            v10 = 1;
            goto LABEL_249;
          }
          if (Espresso::zephyr::match_verbose)
          {
            Espresso::espresso_os_log_subsystem(v17, v18);
            v142 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v142, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 136315650;
              *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_manual.mm";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 67;
              *(_WORD *)&buf[18] = 2080;
              *(_QWORD *)&buf[20] = "shape_ptr && shape_ptr->rank() >= 2";
              _os_log_impl(&dword_190DAF000, v142, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
            }
LABEL_247:

          }
        }
        v10 = 0;
LABEL_249:
        v143 = v186;
        if (v186)
        {
          v144 = (unint64_t *)&v186->__shared_owners_;
          do
            v145 = __ldaxr(v144);
          while (__stlxr(v145 - 1, v144));
          if (!v145)
          {
            ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
            std::__shared_weak_count::__release_weak(v143);
          }
        }
        goto LABEL_234;
      }
      if (Espresso::zephyr::match_verbose)
      {
        Espresso::espresso_os_log_subsystem(v14, v15);
        v135 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v135, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_manual.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 63;
          *(_WORD *)&buf[18] = 2080;
          *(_QWORD *)&buf[20] = "p.nC >= 5";
          _os_log_impl(&dword_190DAF000, v135, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
        }
LABEL_232:

      }
    }
  }
  else if (Espresso::zephyr::match_verbose)
  {
    Espresso::espresso_os_log_subsystem(v14, v15);
    v135 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v135, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_manual.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 61;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "W_const";
      _os_log_impl(&dword_190DAF000, v135, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_232;
  }
  v10 = 0;
LABEL_234:
  v136 = v189;
  if (v189)
  {
    v137 = (unint64_t *)&v189->__shared_owners_;
    do
      v138 = __ldaxr(v137);
    while (__stlxr(v138 - 1, v137));
    if (!v138)
    {
      ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
      std::__shared_weak_count::__release_weak(v136);
    }
  }
  v139 = v191;
  if (v191)
  {
    v140 = (unint64_t *)&v191->__shared_owners_;
    do
      v141 = __ldaxr(v140);
    while (__stlxr(v141 - 1, v140));
    if (!v141)
    {
      ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
      std::__shared_weak_count::__release_weak(v139);
    }
  }
  return v10;
}

void sub_1913BB1E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void *a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a68;
  uint64_t a69;
  void *v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *p_shared_owners;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;

  a30 = (uint64_t)&a36;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a30 = (uint64_t)&a33;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  v70 = (void *)STACK[0x258];
  if (STACK[0x258])
  {
    STACK[0x260] = (unint64_t)v70;
    operator delete(v70);
  }
  v71 = (std::__shared_weak_count *)a40;
  if (a40)
  {
    v72 = (unint64_t *)(a40 + 8);
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  v74 = (std::__shared_weak_count *)a42;
  if (a42)
  {
    v75 = (unint64_t *)(a42 + 8);
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
  v77 = (std::__shared_weak_count *)a46;
  if (a46)
  {
    v78 = (unint64_t *)(a46 + 8);
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 - 1, v78));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }
  if (a47)
  {
    a48 = (uint64_t)a47;
    operator delete(a47);
  }
  if (a50)
  {
    a51 = (uint64_t)a50;
    operator delete(a50);
  }
  v80 = (std::__shared_weak_count *)a54;
  if (a54)
  {
    v81 = (unint64_t *)(a54 + 8);
    do
      v82 = __ldaxr(v81);
    while (__stlxr(v82 - 1, v81));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
  }
  if (a60)
  {
    a61 = (uint64_t)a60;
    operator delete(a60);
  }
  if (a68)
  {
    a69 = (uint64_t)a68;
    operator delete(a68);
  }
  v83 = (std::__shared_weak_count *)STACK[0x200];
  if (STACK[0x200])
  {
    p_shared_owners = (unint64_t *)&v83->__shared_owners_;
    do
      v85 = __ldaxr(p_shared_owners);
    while (__stlxr(v85 - 1, p_shared_owners));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
  v86 = (std::__shared_weak_count *)STACK[0x218];
  if (STACK[0x218])
  {
    v87 = (unint64_t *)&v86->__shared_owners_;
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  v89 = (std::__shared_weak_count *)STACK[0x228];
  if (STACK[0x228])
  {
    v90 = (unint64_t *)&v89->__shared_owners_;
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<quantize_gathers(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::ordered_block_t *)::{lambda(Espresso::zephyr::node_t *)#1},std::allocator<quantize_gathers(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::ordered_block_t *)::{lambda(Espresso::zephyr::node_t *)#1}>,BOOL ()(Espresso::zephyr::node_t *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZZL16quantize_gathersRN8Espresso6zephyr10function_tEENK3$_0clEPNS0_15ordered_block_tEEUlPNS0_6node_tEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quantize_gathers(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::ordered_block_t *)::{lambda(Espresso::zephyr::node_t *)#1},std::allocator<quantize_gathers(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::ordered_block_t *)::{lambda(Espresso::zephyr::node_t *)#1}>,BOOL ()(Espresso::zephyr::node_t *)>::target_type()
{
}

void *Espresso::zephyr::cast_kernel<Espresso::generic_inner_product_kernel>(uint64_t a1)
{
  uint64_t v1;
  const void *v2;
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;

  if (!a1)
    return 0;
  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(const void **)(v1 + 8);
  if (!v2)
    return 0;
  if (v3)
  {
    v4 = *(std::__shared_weak_count **)(v1 + 16);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  return v3;
}

void std::vector<float>::reserve(void **a1, unint64_t a2)
{
  int64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  int v11;

  if (a2 > ((_BYTE *)a1[2] - (_BYTE *)*a1) >> 2)
  {
    if (a2 >> 62)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v3 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v4 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(a2);
    v5 = &v4[v3 & 0xFFFFFFFFFFFFFFFCLL];
    v7 = &v4[4 * v6];
    v8 = (char *)*a1;
    v9 = (char *)a1[1];
    v10 = v5;
    if (v9 != *a1)
    {
      v10 = v5;
      do
      {
        v11 = *((_DWORD *)v9 - 1);
        v9 -= 4;
        *((_DWORD *)v10 - 1) = v11;
        v10 -= 4;
      }
      while (v9 != v8);
    }
    *a1 = v10;
    a1[1] = v5;
    a1[2] = v7;
    if (v8)
      operator delete(v8);
  }
}

void std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,2>,std::allocator<Espresso::blob<unsigned char,2>>,int const*&,void>(_QWORD *a1, int *a2)
{
  char *v4;
  int v5;
  int v6;
  size_t v7;
  void *v8;

  v4 = (char *)operator new(0x58uLL);
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 2) = 0;
  *(_QWORD *)v4 = &off_1E2DBED88;
  *((_QWORD *)v4 + 3) = &off_1E2DA1270;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  v5 = *a2;
  v6 = a2[1];
  *((_DWORD *)v4 + 8) = *a2;
  *((_DWORD *)v4 + 9) = v6;
  v7 = v6 * (uint64_t)v5;
  v8 = Espresso::kern_alloc_uninitialized((Espresso *)v7);
  bzero(v8, v7);
  *((_QWORD *)v4 + 5) = v8;
  v4[48] = 1;
  *a1 = v4 + 24;
  a1[1] = v4;
}

void sub_1913BB7F4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;
  void *v4;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v1[3]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v2);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

void Espresso::zephyr::make_kernel<Espresso::generic_squeeze_kernel,Espresso::zephyr::node_t,Espresso::squeeze_params_t>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  int v17;
  void *__p[2];
  char v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  void *lpsrc;
  std::__shared_weak_count *v23;

  Espresso::abstract_engine_factory::shared(&v20);
  v6 = v20;
  std::string::basic_string[abi:ne180100]<0>(__p, "squeeze");
  v17 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)(a2 + 8) + 8))(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v6, a2 + 8, (uint64_t)__p, a3, &v17);
  if (v19 < 0)
    operator delete(__p[0]);
  v7 = v21;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (lpsrc
  {
    v11 = v23;
    *a1 = v10;
    a1[1] = v11;
    if (v11)
    {
      v12 = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
  }
  v14 = v23;
  if (v23)
  {
    v15 = (unint64_t *)&v23->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_1913BB970(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void Espresso::zephyr::make_kernel<Espresso::generic_quantized_gather_kernel,Espresso::zephyr::node_t,Espresso::quantized_gather_params_t>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  int v17;
  void *__p[2];
  char v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  void *lpsrc;
  std::__shared_weak_count *v23;

  Espresso::abstract_engine_factory::shared(&v20);
  v6 = v20;
  std::string::basic_string[abi:ne180100]<0>(__p, "quantized_gather");
  v17 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)(a2 + 8) + 8))(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v6, a2 + 8, (uint64_t)__p, a3, &v17);
  if (v19 < 0)
    operator delete(__p[0]);
  v7 = v21;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (lpsrc
  {
    v11 = v23;
    *a1 = v10;
    a1[1] = v11;
    if (v11)
    {
      v12 = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
  }
  v14 = v23;
  if (v23)
  {
    v15 = (unint64_t *)&v23->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_1913BBAF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void Espresso::HXEngine::blob_container::~blob_container(Espresso::HXEngine::blob_container *this)
{
  Espresso::HXEngine::blob_container::~blob_container(this);
  JUMPOUT(0x19401CD90);
}

{
  __CVBuffer *v2;

  *(_QWORD *)this = &off_1E2DA4528;
  v2 = (__CVBuffer *)*((_QWORD *)this + 21);
  if (v2)
    CVPixelBufferRelease(v2);
  *((_QWORD *)this + 21) = 0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 176);
  Espresso::abstract_blob_container::~abstract_blob_container(this);
}

void Espresso::HXEngine::blob_container::resize(uint64_t a1, const Espresso::layer_shape *a2, const void **a3)
{
  void *v5;
  std::__shared_weak_count *size;
  unint64_t *v7;
  unint64_t v8;
  _BOOL4 v9;
  int v10;
  __CVBuffer *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  BOOL v19;
  unsigned int v20;
  std::runtime_error *exception;
  uint64_t v22;
  std::runtime_error *v23;
  std::string *v24;
  __int128 v25;
  std::string *v26;
  __int128 v27;
  std::runtime_error *v28;
  std::runtime_error *v29;
  uint64_t v30;
  std::runtime_error *v31;
  int v32;
  std::string *v33;
  __int128 v34;
  std::string v35;
  std::string v36;
  std::string v37;

  if (*(int *)(a1 + 24) >= 2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v22 = a1;
    v23 = exception;
    std::to_string(&v35, *(_DWORD *)(v22 + 24));
    v24 = std::string::insert(&v35, 0, "Seq ");
    v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v36.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    v26 = std::string::append(&v36, "not supported");
    v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    v37.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v27;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v23, &v37);
    __cxa_throw(v23, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (*a3)
  else
    v5 = 0;
  *(_OWORD *)&v37.__r_.__value_.__l.__data_ = 0uLL;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 176, (__int128 *)&v37);
  size = (std::__shared_weak_count *)v37.__r_.__value_.__l.__size_;
  if (!v37.__r_.__value_.__l.__size_)
    goto LABEL_9;
  v7 = (unint64_t *)(v37.__r_.__value_.__l.__size_ + 8);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
    std::__shared_weak_count::__release_weak(size);
    if (v5)
      goto LABEL_10;
  }
  else
  {
LABEL_9:
    if (v5)
    {
LABEL_10:
      v9 = *((_BYTE *)v5 + 88) != 0;
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 176), *((_QWORD *)v5 + 13), *((_QWORD *)v5 + 14));
      goto LABEL_13;
    }
  }
  v9 = 0;
LABEL_13:
  Espresso::abstract_blob_container::set_shape((Espresso::abstract_blob_container *)a1, a2);
  v10 = *(_DWORD *)(a1 + 20);
  if (v10 >= 2)
  {
    v28 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v28, "Batch > 1 not supported by HX Engine");
    __cxa_throw(v28, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v11 = *(__CVBuffer **)(a1 + 168);
  if (v11)
  {
    CVPixelBufferRelease(v11);
    v10 = *(_DWORD *)(a1 + 20);
  }
  *(_QWORD *)(a1 + 168) = 0;
  if (*(_DWORD *)(a1 + 16) * v10 * *(_DWORD *)(a1 + 12) * *(_DWORD *)(a1 + 8) * *(_DWORD *)(a1 + 24))
  {
    *(_QWORD *)(a1 + 192) = 0;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1) != 5
      && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1) != 4)
    {
      v29 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      v30 = a1;
      v31 = v29;
      v32 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 32))(v30);
      std::to_string(&v36, v32);
      v33 = std::string::insert(&v36, 0, "Invalid parameter ");
      v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v37.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v31, &v37);
      __cxa_throw(v31, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v12 = *(_DWORD *)(a1 + 12);
    v13 = v12
        * (uint64_t)(int)Espresso::HXEngine::blob_container::stride_in_bytes((Espresso::HXEngine::blob_container *)a1);
    *(_QWORD *)(a1 + 192) = v13;
    if (v9)
    {
      *((_QWORD *)v5 + 12) = v13;
    }
    else if ((***(unsigned int (****)(_QWORD))(*(_QWORD *)(a1 + 72) + 8))(*(_QWORD *)(*(_QWORD *)(a1 + 72)
                                                                                                  + 8)) == 6)
    {
      Espresso::HXEngine::blob_container::force_allocate((CVPixelBufferRef)a1, v14, v15, v16, v17, v18, v19, v20);
    }
  }
}

void sub_1913BBE5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  void *v28;
  char v29;

  if (a28 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if ((v29 & 1) != 0)
    __cxa_free_exception(v28);
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::HXEngine::blob_container::platform(Espresso::HXEngine::blob_container *this)
{
  return 5;
}

uint64_t Espresso::HXEngine::blob_container::compute_path(Espresso::HXEngine::blob_container *this)
{
  return *((unsigned int *)this + 50);
}

uint64_t Espresso::HXEngine::blob_container::__copy_to_host(Espresso::HXEngine::blob_container *this, uint64_t a2, uint64_t *a3)
{
  int v5;
  int v6;
  unsigned __int16 *v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  float v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  __int16 *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  unsigned __int8 *v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  unsigned int v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  unsigned __int16 *v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  unsigned int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  unsigned __int8 *v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  unsigned int v66;
  __int128 v68;

  if (!*a3)
  {
    (*(void (**)(__int128 *__return_ptr, Espresso::HXEngine::blob_container *))(*(_QWORD *)this + 56))(&v68, this);
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)a3, &v68);
    v38 = (std::__shared_weak_count *)*((_QWORD *)&v68 + 1);
    if (*((_QWORD *)&v68 + 1))
    {
      v39 = (unint64_t *)(*((_QWORD *)&v68 + 1) + 8);
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
  }
  v5 = *((_DWORD *)this + 2);
  v6 = *((_DWORD *)this + 3);
  v7 = (unsigned __int16 *)Espresso::HXEngine::blob_container::util_lock_pixel_buffer(this, *((CVPixelBufferRef *)this + 21), 1uLL);
  v9 = v8;
  v10 = ldexpf(1.0, -*((_DWORD *)this + 41));
  v11 = 1.0 / *((float *)this + 28);
  if ((*(unsigned int (**)(Espresso::HXEngine::blob_container *))(*(_QWORD *)this + 32))(this) == 5
    && !*((_DWORD *)this + 29))
  {
    v41 = *((_DWORD *)this + 3);
    if (v41 >= 1)
    {
      v42 = 0;
      v43 = 0;
      v44 = *((_DWORD *)this + 2);
      do
      {
        if (v44 >= 1)
        {
          v45 = 0;
          v46 = *((unsigned int *)this + 4);
          v47 = *a3;
          v48 = v42;
          v49 = v7;
          do
          {
            if ((int)v46 >= 1)
            {
              v50 = *(_QWORD *)(v47 + 24);
              v51 = v48;
              v52 = v46;
              do
              {
                v53 = *v49++;
                *(float *)(v50 + 4 * v51) = v11 * (float)(v10 * (float)v53);
                v51 += v6 * v5;
                --v52;
              }
              while (v52);
            }
            ++v45;
            ++v48;
          }
          while (v45 != v44);
        }
        v7 = (unsigned __int16 *)((char *)v7 + v9);
        ++v43;
        v42 += v44;
      }
      while (v43 != v41);
    }
  }
  else if ((*(unsigned int (**)(Espresso::HXEngine::blob_container *))(*(_QWORD *)this + 32))(this) == 4
         && !*((_DWORD *)this + 29))
  {
    v54 = *((_DWORD *)this + 3);
    if (v54 >= 1)
    {
      v55 = 0;
      v56 = 0;
      v57 = *((_DWORD *)this + 2);
      do
      {
        if (v57 >= 1)
        {
          v58 = 0;
          v59 = *((unsigned int *)this + 4);
          v60 = *a3;
          v61 = v55;
          v62 = (unsigned __int8 *)v7;
          do
          {
            if ((int)v59 >= 1)
            {
              v63 = *(_QWORD *)(v60 + 24);
              v64 = v61;
              v65 = v59;
              do
              {
                v66 = *v62++;
                *(float *)(v63 + 4 * v64) = v11 * (float)(v10 * (float)v66);
                v64 += v6 * v5;
                --v65;
              }
              while (v65);
            }
            ++v58;
            ++v61;
          }
          while (v58 != v57);
        }
        v7 = (unsigned __int16 *)((char *)v7 + v9);
        ++v56;
        v55 += v57;
      }
      while (v56 != v54);
    }
  }
  else if ((*(unsigned int (**)(Espresso::HXEngine::blob_container *))(*(_QWORD *)this + 32))(this) == 5
         && *((_DWORD *)this + 29) == 1)
  {
    v12 = *((_DWORD *)this + 3);
    if (v12 >= 1)
    {
      v13 = 0;
      v14 = 0;
      v15 = *((_DWORD *)this + 2);
      do
      {
        if (v15 >= 1)
        {
          v16 = 0;
          v17 = *((unsigned int *)this + 4);
          v18 = *a3;
          v19 = v13;
          v20 = (__int16 *)v7;
          do
          {
            if ((int)v17 >= 1)
            {
              v21 = *(_QWORD *)(v18 + 24);
              v22 = v19;
              v23 = v17;
              do
              {
                v24 = *v20++;
                *(float *)(v21 + 4 * v22) = v11 * (float)(v10 * (float)v24);
                v22 += v6 * v5;
                --v23;
              }
              while (v23);
            }
            ++v16;
            ++v19;
          }
          while (v16 != v15);
        }
        v7 = (unsigned __int16 *)((char *)v7 + v9);
        ++v14;
        v13 += v15;
      }
      while (v14 != v12);
    }
  }
  else if ((*(unsigned int (**)(Espresso::HXEngine::blob_container *))(*(_QWORD *)this + 32))(this) == 4
         && *((_DWORD *)this + 29) == 1)
  {
    v25 = *((_DWORD *)this + 3);
    if (v25 >= 1)
    {
      v26 = 0;
      v27 = 0;
      v28 = *((_DWORD *)this + 2);
      do
      {
        if (v28 >= 1)
        {
          v29 = 0;
          v30 = *((unsigned int *)this + 4);
          v31 = *a3;
          v32 = v26;
          v33 = (unsigned __int8 *)v7;
          do
          {
            if ((int)v30 >= 1)
            {
              v34 = *(_QWORD *)(v31 + 24);
              v35 = v32;
              v36 = v30;
              do
              {
                v37 = *v33++;
                *(float *)(v34 + 4 * v35) = (float)(v10 * (float)(v11 * -127.0))
                                            + (float)((float)(v10 * (float)v37) * v11);
                v35 += v6 * v5;
                --v36;
              }
              while (v36);
            }
            ++v29;
            ++v32;
          }
          while (v29 != v28);
        }
        v7 = (unsigned __int16 *)((char *)v7 + v9);
        ++v27;
        v26 += v28;
      }
      while (v27 != v25);
    }
  }
  return Espresso::HXEngine::blob_container::util_unlock_pixel_buffer(*((Espresso::HXEngine::blob_container **)this + 21), (__CVBuffer *)1);
}

uint64_t Espresso::HXEngine::blob_container::__copy_from_host(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  int v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  float v10;
  int v11;
  char v12;
  int v13;
  int v14;
  BOOL v15;
  int v16;
  signed int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  _WORD *v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  signed int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  char *v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  _WORD *v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  signed int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  char *v59;
  uint64_t v60;
  int v61;
  signed int v62;
  std::runtime_error *exception;

  v5 = *(_DWORD *)(a1 + 12) * *(_DWORD *)(a1 + 8);
  v6 = (char *)Espresso::HXEngine::blob_container::util_lock_pixel_buffer((Espresso::HXEngine::blob_container *)a1, *(CVPixelBufferRef *)(a1 + 168), 0);
  v8 = v7;
  v9 = *(float *)(a1 + 112);
  v10 = ldexpf(1.0, *(_DWORD *)(a1 + 164));
  v11 = *(_DWORD *)(a1 + 116);
  v12 = *(_DWORD *)(a1 + 160);
  v13 = -1 << v12;
  v14 = -1 << (v12 - 1);
  v15 = v11 == 0;
  if (v11)
    v16 = v14;
  else
    v16 = v13;
  if (v15)
    v17 = 0;
  else
    v17 = v14;
  v18 = ~v16;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1) == 5 && !*(_DWORD *)(a1 + 116))
  {
    v41 = *(_DWORD *)(a1 + 12);
    if (v41 >= 1)
    {
      v42 = 0;
      v43 = 0;
      v44 = *(_DWORD *)(a1 + 8);
      do
      {
        if (v44 >= 1)
        {
          v45 = 0;
          v46 = *(unsigned int *)(a1 + 16);
          v47 = *a3;
          v48 = v42;
          v49 = v6;
          do
          {
            if ((int)v46 >= 1)
            {
              v50 = *(_QWORD *)(v47 + 24);
              v51 = v48;
              v52 = v46;
              do
              {
                v53 = llroundf(v9 * (float)(v10 * *(float *)(v50 + 4 * v51)));
                if (v53 >= v18)
                  v53 = v18;
                if (v17 > v53)
                  LOWORD(v53) = v17;
                *v49++ = v53;
                v51 += v5;
                --v52;
              }
              while (v52);
            }
            ++v45;
            ++v48;
          }
          while (v45 != v44);
        }
        v6 += v8;
        ++v43;
        v42 += v44;
      }
      while (v43 != v41);
    }
  }
  else if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1) == 5 && *(_DWORD *)(a1 + 116) == 1)
  {
    v19 = *(_DWORD *)(a1 + 12);
    if (v19 >= 1)
    {
      v20 = 0;
      v21 = 0;
      v22 = *(_DWORD *)(a1 + 8);
      do
      {
        if (v22 >= 1)
        {
          v23 = 0;
          v24 = *(unsigned int *)(a1 + 16);
          v25 = *a3;
          v26 = v20;
          v27 = v6;
          do
          {
            if ((int)v24 >= 1)
            {
              v28 = *(_QWORD *)(v25 + 24);
              v29 = v26;
              v30 = v24;
              do
              {
                v31 = llroundf(v9 * (float)(v10 * *(float *)(v28 + 4 * v29)));
                if (v31 >= v18)
                  v31 = v18;
                if (v17 > v31)
                  LOWORD(v31) = v17;
                *v27++ = v31;
                v29 += v5;
                --v30;
              }
              while (v30);
            }
            ++v23;
            ++v26;
          }
          while (v23 != v22);
        }
        v6 += v8;
        ++v21;
        v20 += v22;
      }
      while (v21 != v19);
    }
  }
  else if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1) == 4 && !*(_DWORD *)(a1 + 116))
  {
    v54 = *(_DWORD *)(a1 + 12);
    if (v54 >= 1)
    {
      v55 = 0;
      v56 = *(_DWORD *)(a1 + 8);
      do
      {
        if (v56 >= 1)
        {
          v57 = 0;
          v58 = *(_DWORD *)(a1 + 16);
          v59 = v6;
          do
          {
            if (v58 >= 1)
            {
              v60 = 0;
              v61 = v57;
              do
              {
                v62 = llroundf(v9 * (float)(v10
                                          * *(float *)(*(_QWORD *)(*a3 + 24) + 4 * (v61 + v55 * *(_DWORD *)(a1 + 8)))));
                if (v18 < v62)
                  v62 = v18;
                if (v17 > v62)
                  LOBYTE(v62) = v17;
                v59[v60] = v62;
                v58 = *(_DWORD *)(a1 + 16);
                ++v60;
                v61 += v5;
              }
              while ((int)v60 < v58);
              v59 += v60;
              v56 = *(_DWORD *)(a1 + 8);
            }
            ++v57;
          }
          while (v57 < v56);
          v54 = *(_DWORD *)(a1 + 12);
        }
        v6 += v8;
        ++v55;
      }
      while (v55 < v54);
    }
  }
  else
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1) != 4 || *(_DWORD *)(a1 + 116) != 1)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "invalid parameter");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v32 = *(_DWORD *)(a1 + 12);
    if (v32 >= 1)
    {
      v33 = 0;
      v34 = *(_DWORD *)(a1 + 8);
      do
      {
        if (v34 >= 1)
        {
          v35 = 0;
          v36 = *(_DWORD *)(a1 + 16);
          v37 = v6;
          do
          {
            if (v36 >= 1)
            {
              v38 = 0;
              v39 = v35;
              do
              {
                v40 = llroundf((float)((float)(v10 * *(float *)(*(_QWORD *)(*a3 + 24) + 4 * (v39 + v33 * *(_DWORD *)(a1 + 8))))* v9)+ 128.0);
                if (v40 >= 255)
                  v40 = 255;
                v37[v38] = v40 & ~(v40 >> 31);
                v36 = *(_DWORD *)(a1 + 16);
                ++v38;
                v39 += v5;
              }
              while ((int)v38 < v36);
              v37 += v38;
              v34 = *(_DWORD *)(a1 + 8);
            }
            ++v35;
          }
          while (v35 < v34);
          v32 = *(_DWORD *)(a1 + 12);
        }
        v6 += v8;
        ++v33;
      }
      while (v33 < v32);
    }
  }
  return Espresso::HXEngine::blob_container::util_unlock_pixel_buffer(*(Espresso::HXEngine::blob_container **)(a1 + 168), 0);
}

void sub_1913BC6E0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t Espresso::abstract_blob_container::can_arbitrarily_resize(Espresso::abstract_blob_container *this)
{
  return 0;
}

uint64_t Espresso::HXEngine::blob_container::unsafe_opaque_raw_pointer(Espresso::HXEngine::blob_container *this)
{
  return *((_QWORD *)this + 21);
}

uint64_t Espresso::HXEngine::blob_container::__copy_to_raw(CVPixelBufferRef *a1, uint64_t a2, uint64_t a3)
{
  int v5;
  int v6;
  char *v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  char *v14;
  uint64_t v15;
  int v16;
  std::runtime_error *exception;

  v5 = *((_DWORD *)a1 + 2);
  v6 = *((_DWORD *)a1 + 3);
  if ((*((unsigned int (**)(CVPixelBufferRef *))*a1 + 4))(a1) != 4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Not supported");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v7 = (char *)Espresso::HXEngine::blob_container::util_lock_pixel_buffer((Espresso::HXEngine::blob_container *)a1, a1[21], 1uLL);
  v9 = *((_DWORD *)a1 + 3);
  if (v9 >= 1)
  {
    v10 = 0;
    v11 = *((_DWORD *)a1 + 2);
    do
    {
      if (v11 >= 1)
      {
        v12 = 0;
        v13 = *((_DWORD *)a1 + 4);
        v14 = v7;
        do
        {
          if (v13 >= 1)
          {
            v15 = 0;
            v16 = v12;
            do
            {
              *(_BYTE *)(a3 + v16 + v10 * *((_DWORD *)a1 + 2)) = v14[v15];
              v13 = *((_DWORD *)a1 + 4);
              ++v15;
              v16 += v6 * v5;
            }
            while ((int)v15 < v13);
            v14 += v15;
            v11 = *((_DWORD *)a1 + 2);
          }
          ++v12;
        }
        while (v12 < v11);
        v9 = *((_DWORD *)a1 + 3);
      }
      v7 += v8;
      ++v10;
    }
    while (v10 < v9);
  }
  return Espresso::HXEngine::blob_container::util_unlock_pixel_buffer(a1[21], (__CVBuffer *)1);
}

void sub_1913BC814(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t Espresso::HXEngine::blob_container::raw_size(Espresso::HXEngine::blob_container *this)
{
  if ((*(unsigned int (**)(Espresso::HXEngine::blob_container *))(*(_QWORD *)this + 32))(this) == 4)
    return *((int *)this + 3) * (uint64_t)*((int *)this + 2) * *((int *)this + 4);
  else
    return 0;
}

BOOL Espresso::HXEngine::blob_container::__copy_from(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v10;
  std::__shared_weak_count *v11;

  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v10, *(void **)a3, *(std::__shared_weak_count **)(a3 + 8));
  v5 = v10;
  if (v10)
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 48))(a1, a2, &v10);
  v6 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5 != 0;
}

void sub_1913BC90C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t Espresso::abstract_blob_container::resize_without_realloc()
{
  return 0;
}

uint64_t Espresso::abstract_blob_container::set_reference_to()
{
  return 0;
}

void *Espresso::HXEngine::blob_container::util_lock_pixel_buffer(Espresso::HXEngine::blob_container *this, CVPixelBufferRef pixelBuffer, CVPixelBufferLockFlags lockFlags)
{
  void *result;
  std::runtime_error *exception;

  if (!pixelBuffer)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Pixel buffer not initialized");
    goto LABEL_7;
  }
  if (CVPixelBufferLockBaseAddress(pixelBuffer, lockFlags)
    || (Espresso::HXEngine::blob_container::stride_in_bytes(this),
        (result = CVPixelBufferGetBaseAddress(pixelBuffer)) == 0))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot lock pixel buffer");
LABEL_7:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_1913BC9E8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t Espresso::HXEngine::blob_container::util_unlock_pixel_buffer(Espresso::HXEngine::blob_container *this, __CVBuffer *a2)
{
  uint64_t result;
  std::runtime_error *exception;

  if (!this)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Pixel buffer not initialized");
    goto LABEL_6;
  }
  result = CVPixelBufferUnlockBaseAddress(this, (CVPixelBufferLockFlags)a2);
  if ((_DWORD)result)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot unlock pixel buffer");
LABEL_6:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_1913BCA74(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t Espresso::HXEngine::blob_container::stride_in_bytes(Espresso::HXEngine::blob_container *this)
{
  int v2;
  std::runtime_error *exception;

  if ((*(unsigned int (**)(Espresso::HXEngine::blob_container *))(*(_QWORD *)this + 32))(this) == 5)
  {
    v2 = 2 * *((_DWORD *)this + 2) * *((_DWORD *)this + 4);
  }
  else
  {
    if ((*(unsigned int (**)(Espresso::HXEngine::blob_container *))(*(_QWORD *)this + 32))(this) != 4)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Invalid parameter");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v2 = *((_DWORD *)this + 4) * *((_DWORD *)this + 2);
  }
  return (v2 + 63) & 0xFFFFFFC0;
}

void sub_1913BCB2C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

CVPixelBufferRef Espresso::HXEngine::blob_container::force_allocate(CVPixelBufferRef this, uint64_t a2, uint64_t a3, unsigned int a4, unsigned int a5, int a6, BOOL a7, unsigned int a8)
{
  CVPixelBufferRef v8;
  uint64_t v9;
  BOOL v10;
  unsigned int v11;

  if (!*((_QWORD *)this + 21))
  {
    v8 = this;
    this = Espresso::HXEngine::H10ISPCreateCVBuffer((Espresso::HXEngine *)((*((_DWORD *)this + 4) * *((_DWORD *)this + 2) + 63) & 0xFFFFFFC0), *((_DWORD *)this + 3), 10, a4, a5, a6, a7, a8, v9, HIDWORD(v9), v10, v11);
    *((_QWORD *)v8 + 21) = this;
  }
  return this;
}

double Espresso::HXEngine::blob_container::blob_container(uint64_t a1, _QWORD *a2, int a3)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  double result;
  std::runtime_error *exception;
  std::string *v9;
  __int128 v10;
  std::string v11;
  std::string v12;

  *(_QWORD *)a1 = off_1E2D8F108;
  *(_DWORD *)(a1 + 28) = -1;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = *a2;
  v3 = a2[1];
  *(_QWORD *)(a1 + 80) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 112) = 1065353216;
  *(_QWORD *)(a1 + 116) = 0xFFFFFFFF00000000;
  *(_DWORD *)(a1 + 124) = 1;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 128) = 0uLL;
  *(_OWORD *)(a1 + 144) = 0uLL;
  *(_QWORD *)a1 = &off_1E2DA4528;
  *(_DWORD *)(a1 + 160) = 8;
  *(_OWORD *)(a1 + 164) = 0uLL;
  *(_OWORD *)(a1 + 180) = 0uLL;
  *(_DWORD *)(a1 + 196) = 0;
  *(_DWORD *)(a1 + 200) = a3;
  if (a3 == 2 || a3 == 4)
  {
    *(_QWORD *)&result = 8;
    *(_QWORD *)(a1 + 160) = 8;
    *(_DWORD *)(a1 + 200) = 4;
  }
  else
  {
    if (a3 != 5)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v11, *(_DWORD *)(a1 + 200));
      v9 = std::string::insert(&v11, 0, "Invalid compute path for hx: ");
      v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      v12.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v12.__r_.__value_.__l.__data_ = v10;
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v12);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    *(_QWORD *)&result = 0x800000010;
    *(_QWORD *)(a1 + 160) = 0x800000010;
  }
  return result;
}

void sub_1913BCD40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, Espresso::abstract_blob_container *a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
    {
LABEL_8:
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a9 + 176);
      Espresso::abstract_blob_container::~abstract_blob_container(a9);
      _Unwind_Resume(a1);
    }
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t Espresso::HXEngine::hx_quantization_converter_helper::supports_weight_key(_DWORD *a1)
{
  int v1;
  uint64_t v2;
  int v6;

  if (*((char *)a1 + 23) < 0)
  {
    v2 = *((_QWORD *)a1 + 1);
    if (v2 != 4)
    {
      if (v2 != 10)
        return 0;
      a1 = *(_DWORD **)a1;
      goto LABEL_8;
    }
    v6 = **(_DWORD **)a1;
    return v6 == 944987991;
  }
  v1 = *((unsigned __int8 *)a1 + 23);
  if (v1 == 4)
  {
    v6 = *a1;
    return v6 == 944987991;
  }
  if (v1 != 10)
    return 0;
LABEL_8:
  if (*(_QWORD *)a1 == 0x6163735F74736F70 && *((_WORD *)a1 + 4) == 25964)
    return 1;
  return *(_QWORD *)a1 == 0x61727478655F7868 && *((_WORD *)a1 + 4) == 26207;
}

void *Espresso::HXEngine::hx_quantization_converter_helper::__set_weight_raw_blob(void *result, _DWORD *a2, const void *a3, unint64_t a4)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::runtime_error *v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  int v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::runtime_error *v43;
  std::string *v44;
  __int128 v45;
  std::string *v46;
  __int128 v47;
  std::string *v48;
  std::string::size_type v49;
  std::string *v50;
  __int128 v51;
  const std::string::value_type *v52;
  std::string::size_type v53;
  std::string *v54;
  __int128 v55;
  std::string *v56;
  __int128 v57;
  const std::string::value_type *v58;
  std::string::size_type v59;
  std::string *v60;
  __int128 v61;
  std::string *v62;
  std::string::size_type v63;
  std::string *v64;
  __int128 v65;
  uint64_t v66;
  std::__shared_weak_count *size;
  unint64_t *v68;
  unint64_t v69;
  std::runtime_error *exception;
  std::string *v71;
  __int128 v72;
  std::string *v73;
  __int128 v74;
  std::string *v75;
  std::string::size_type v76;
  std::string *v77;
  __int128 v78;
  const std::string::value_type *v79;
  std::string::size_type v80;
  std::string *v81;
  __int128 v82;
  std::string *v83;
  __int128 v84;
  const std::string::value_type *v85;
  std::string::size_type v86;
  std::string *v87;
  __int128 v88;
  std::string *v89;
  std::string::size_type v90;
  std::string *v91;
  __int128 v92;
  std::string v93;
  const std::string::value_type *v94;
  std::string::size_type v95;
  unsigned __int8 v96;
  const std::string::value_type *v97;
  std::string::size_type v98;
  unsigned __int8 v99;
  std::string v100;
  std::string v101;
  std::string v102;
  std::string v103;
  std::string v104;
  std::string v105;
  std::string v106;
  std::string v107;
  std::string v108;

  v6 = (uint64_t)result;
  if ((*((char *)a2 + 23) & 0x80000000) == 0)
  {
    v7 = *((unsigned __int8 *)a2 + 23);
    if (v7 != 4)
    {
      if (v7 != 10)
        return result;
      goto LABEL_8;
    }
    v39 = *a2;
LABEL_81:
    if (v39 != 944987991)
      return result;
    std::allocate_shared[abi:ne180100]<Espresso::blob<signed char,1>,std::allocator<Espresso::blob<signed char,1>>,int &,int &,int &,int &,void>(&v108, a4, 1, 1, 1);
    v66 = v6 + 16;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v66, (__int128 *)&v108);
    size = (std::__shared_weak_count *)v108.__r_.__value_.__l.__size_;
    if (v108.__r_.__value_.__l.__size_)
    {
      v68 = (unint64_t *)(v108.__r_.__value_.__l.__size_ + 8);
      do
        v69 = __ldaxr(v68);
      while (__stlxr(v69 - 1, v68));
      if (!v69)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    v15 = *(_QWORD *)v66;
    if (*(_DWORD *)(*(_QWORD *)v66 + 8) != a4)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v101, a4);
      v71 = std::string::insert(&v101, 0, "Unexpected size s=");
      v72 = *(_OWORD *)&v71->__r_.__value_.__l.__data_;
      v102.__r_.__value_.__r.__words[2] = v71->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v102.__r_.__value_.__l.__data_ = v72;
      v71->__r_.__value_.__l.__size_ = 0;
      v71->__r_.__value_.__r.__words[2] = 0;
      v71->__r_.__value_.__r.__words[0] = 0;
      v73 = std::string::append(&v102, "/blob=");
      v74 = *(_OWORD *)&v73->__r_.__value_.__l.__data_;
      v103.__r_.__value_.__r.__words[2] = v73->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v103.__r_.__value_.__l.__data_ = v74;
      v73->__r_.__value_.__l.__size_ = 0;
      v73->__r_.__value_.__r.__words[2] = 0;
      v73->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v100, *(int *)(*(_QWORD *)v66 + 8));
      if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v75 = &v100;
      else
        v75 = (std::string *)v100.__r_.__value_.__r.__words[0];
      if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v76 = HIBYTE(v100.__r_.__value_.__r.__words[2]);
      else
        v76 = v100.__r_.__value_.__l.__size_;
      v77 = std::string::append(&v103, (const std::string::value_type *)v75, v76);
      v78 = *(_OWORD *)&v77->__r_.__value_.__l.__data_;
      v104.__r_.__value_.__r.__words[2] = v77->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v104.__r_.__value_.__l.__data_ = v78;
      v77->__r_.__value_.__l.__size_ = 0;
      v77->__r_.__value_.__r.__words[2] = 0;
      v77->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(&v97, " @ ");
      if ((v99 & 0x80u) == 0)
        v79 = (const std::string::value_type *)&v97;
      else
        v79 = v97;
      if ((v99 & 0x80u) == 0)
        v80 = v99;
      else
        v80 = v98;
      v81 = std::string::append(&v104, v79, v80);
      v82 = *(_OWORD *)&v81->__r_.__value_.__l.__data_;
      v105.__r_.__value_.__r.__words[2] = v81->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v105.__r_.__value_.__l.__data_ = v82;
      v81->__r_.__value_.__l.__size_ = 0;
      v81->__r_.__value_.__r.__words[2] = 0;
      v81->__r_.__value_.__r.__words[0] = 0;
      v83 = std::string::append(&v105, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/HXEngine/HXBlobContainer.mm");
      v84 = *(_OWORD *)&v83->__r_.__value_.__l.__data_;
      v106.__r_.__value_.__r.__words[2] = v83->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v106.__r_.__value_.__l.__data_ = v84;
      v83->__r_.__value_.__l.__size_ = 0;
      v83->__r_.__value_.__r.__words[2] = 0;
      v83->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(&v94, ":");
      if ((v96 & 0x80u) == 0)
        v85 = (const std::string::value_type *)&v94;
      else
        v85 = v94;
      if ((v96 & 0x80u) == 0)
        v86 = v96;
      else
        v86 = v95;
      v87 = std::string::append(&v106, v85, v86);
      v88 = *(_OWORD *)&v87->__r_.__value_.__l.__data_;
      v107.__r_.__value_.__r.__words[2] = v87->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v107.__r_.__value_.__l.__data_ = v88;
      v87->__r_.__value_.__l.__size_ = 0;
      v87->__r_.__value_.__r.__words[2] = 0;
      v87->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v93, 752);
      if ((v93.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v89 = &v93;
      else
        v89 = (std::string *)v93.__r_.__value_.__r.__words[0];
      if ((v93.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v90 = HIBYTE(v93.__r_.__value_.__r.__words[2]);
      else
        v90 = v93.__r_.__value_.__l.__size_;
      v91 = std::string::append(&v107, (const std::string::value_type *)v89, v90);
      v92 = *(_OWORD *)&v91->__r_.__value_.__l.__data_;
      v108.__r_.__value_.__r.__words[2] = v91->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v108.__r_.__value_.__l.__data_ = v92;
      v91->__r_.__value_.__l.__size_ = 0;
      v91->__r_.__value_.__r.__words[2] = 0;
      v91->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v108);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    return memcpy(*(void **)(v15 + 16), a3, a4);
  }
  v8 = *((_QWORD *)a2 + 1);
  if (v8 == 4)
  {
    v39 = **(_DWORD **)a2;
    goto LABEL_81;
  }
  if (v8 != 10)
    return result;
  a2 = *(_DWORD **)a2;
LABEL_8:
  if (*(_QWORD *)a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v108, (unint64_t)(int)a4 >> 2, 1, 1, 1);
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v6, (__int128 *)&v108);
    v40 = (std::__shared_weak_count *)v108.__r_.__value_.__l.__size_;
    if (v108.__r_.__value_.__l.__size_)
    {
      v41 = (unint64_t *)(v108.__r_.__value_.__l.__size_ + 8);
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
    v15 = *(_QWORD *)v6;
    if (a4 != 4 * *(int *)(*(_QWORD *)v6 + 8))
    {
      v43 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v101, a4);
      v44 = std::string::insert(&v101, 0, "Unexpected size s=");
      v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
      v102.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v102.__r_.__value_.__l.__data_ = v45;
      v44->__r_.__value_.__l.__size_ = 0;
      v44->__r_.__value_.__r.__words[2] = 0;
      v44->__r_.__value_.__r.__words[0] = 0;
      v46 = std::string::append(&v102, "/blob=");
      v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
      v103.__r_.__value_.__r.__words[2] = v46->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v103.__r_.__value_.__l.__data_ = v47;
      v46->__r_.__value_.__l.__size_ = 0;
      v46->__r_.__value_.__r.__words[2] = 0;
      v46->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v100, 4 * *(int *)(*(_QWORD *)v6 + 8));
      if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v48 = &v100;
      else
        v48 = (std::string *)v100.__r_.__value_.__r.__words[0];
      if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v49 = HIBYTE(v100.__r_.__value_.__r.__words[2]);
      else
        v49 = v100.__r_.__value_.__l.__size_;
      v50 = std::string::append(&v103, (const std::string::value_type *)v48, v49);
      v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
      v104.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v104.__r_.__value_.__l.__data_ = v51;
      v50->__r_.__value_.__l.__size_ = 0;
      v50->__r_.__value_.__r.__words[2] = 0;
      v50->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(&v97, " @ ");
      if ((v99 & 0x80u) == 0)
        v52 = (const std::string::value_type *)&v97;
      else
        v52 = v97;
      if ((v99 & 0x80u) == 0)
        v53 = v99;
      else
        v53 = v98;
      v54 = std::string::append(&v104, v52, v53);
      v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
      v105.__r_.__value_.__r.__words[2] = v54->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v105.__r_.__value_.__l.__data_ = v55;
      v54->__r_.__value_.__l.__size_ = 0;
      v54->__r_.__value_.__r.__words[2] = 0;
      v54->__r_.__value_.__r.__words[0] = 0;
      v56 = std::string::append(&v105, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/HXEngine/HXBlobContainer.mm");
      v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
      v106.__r_.__value_.__r.__words[2] = v56->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v106.__r_.__value_.__l.__data_ = v57;
      v56->__r_.__value_.__l.__size_ = 0;
      v56->__r_.__value_.__r.__words[2] = 0;
      v56->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(&v94, ":");
      if ((v96 & 0x80u) == 0)
        v58 = (const std::string::value_type *)&v94;
      else
        v58 = v94;
      if ((v96 & 0x80u) == 0)
        v59 = v96;
      else
        v59 = v95;
      v60 = std::string::append(&v106, v58, v59);
      v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
      v107.__r_.__value_.__r.__words[2] = v60->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v107.__r_.__value_.__l.__data_ = v61;
      v60->__r_.__value_.__l.__size_ = 0;
      v60->__r_.__value_.__r.__words[2] = 0;
      v60->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v93, 748);
      if ((v93.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v62 = &v93;
      else
        v62 = (std::string *)v93.__r_.__value_.__r.__words[0];
      if ((v93.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v63 = HIBYTE(v93.__r_.__value_.__r.__words[2]);
      else
        v63 = v93.__r_.__value_.__l.__size_;
      v64 = std::string::append(&v107, (const std::string::value_type *)v62, v63);
      v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
      v108.__r_.__value_.__r.__words[2] = v64->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v108.__r_.__value_.__l.__data_ = v65;
      v64->__r_.__value_.__l.__size_ = 0;
      v64->__r_.__value_.__r.__words[2] = 0;
      v64->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v43, &v108);
      __cxa_throw(v43, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    return memcpy(*(void **)(v15 + 16), a3, a4);
  }
  if (*(_QWORD *)a2 == 0x61727478655F7868 && *((_WORD *)a2 + 4) == 26207)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v108, (unint64_t)(int)a4 >> 2, 1, 1, 1);
    v11 = v6 + 32;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v11, (__int128 *)&v108);
    v12 = (std::__shared_weak_count *)v108.__r_.__value_.__l.__size_;
    if (v108.__r_.__value_.__l.__size_)
    {
      v13 = (unint64_t *)(v108.__r_.__value_.__l.__size_ + 8);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v15 = *(_QWORD *)v11;
    if (a4 != 4 * *(int *)(*(_QWORD *)v11 + 8))
    {
      v16 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v101, a4);
      v17 = std::string::insert(&v101, 0, "Unexpected size s=");
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v102.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v102.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      v19 = std::string::append(&v102, "/blob=");
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v103.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v103.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v100, 4 * *(int *)(*(_QWORD *)v11 + 8));
      if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v21 = &v100;
      else
        v21 = (std::string *)v100.__r_.__value_.__r.__words[0];
      if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = HIBYTE(v100.__r_.__value_.__r.__words[2]);
      else
        v22 = v100.__r_.__value_.__l.__size_;
      v23 = std::string::append(&v103, (const std::string::value_type *)v21, v22);
      v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v104.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v104.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(&v97, " @ ");
      if ((v99 & 0x80u) == 0)
        v25 = (const std::string::value_type *)&v97;
      else
        v25 = v97;
      if ((v99 & 0x80u) == 0)
        v26 = v99;
      else
        v26 = v98;
      v27 = std::string::append(&v104, v25, v26);
      v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v105.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v105.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      v29 = std::string::append(&v105, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/HXEngine/HXBlobContainer.mm");
      v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v106.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v106.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(&v94, ":");
      if ((v96 & 0x80u) == 0)
        v31 = (const std::string::value_type *)&v94;
      else
        v31 = v94;
      if ((v96 & 0x80u) == 0)
        v32 = v96;
      else
        v32 = v95;
      v33 = std::string::append(&v106, v31, v32);
      v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v107.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v107.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v93, 756);
      if ((v93.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = &v93;
      else
        v35 = (std::string *)v93.__r_.__value_.__r.__words[0];
      if ((v93.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v36 = HIBYTE(v93.__r_.__value_.__r.__words[2]);
      else
        v36 = v93.__r_.__value_.__l.__size_;
      v37 = std::string::append(&v107, (const std::string::value_type *)v35, v36);
      v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v108.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v108.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v16, &v108);
      __cxa_throw(v16, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    return memcpy(*(void **)(v15 + 16), a3, a4);
  }
  return result;
}

void sub_1913BD6A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  void *v59;
  char v60;
  uint64_t v61;

  if (*(char *)(v61 - 57) < 0)
    operator delete(*(void **)(v61 - 80));
  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v61 - 89) < 0)
    operator delete(*(void **)(v61 - 112));
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v61 - 121) < 0)
    operator delete(*(void **)(v61 - 144));
  if (*(char *)(v61 - 153) < 0)
    operator delete(*(void **)(v61 - 176));
  if (a27 < 0)
    operator delete(a22);
  if (a59 < 0)
    operator delete(a54);
  if (a33 < 0)
    operator delete(a28);
  if (a52 < 0)
    operator delete(a47);
  if (a45 < 0)
    operator delete(a40);
  if (a39 < 0)
    operator delete(a34);
  if ((v60 & 1) != 0)
    __cxa_free_exception(v59);
  _Unwind_Resume(exception_object);
}

void std::allocate_shared[abi:ne180100]<Espresso::blob<signed char,1>,std::allocator<Espresso::blob<signed char,1>>,int &,int &,int &,int &,void>(_QWORD *a1, int a2, int a3, int a4, int a5)
{
  char *v10;
  size_t v11;
  void *v12;

  v10 = (char *)operator new(0x58uLL);
  *((_QWORD *)v10 + 1) = 0;
  *((_QWORD *)v10 + 2) = 0;
  *((_QWORD *)v10 + 3) = &off_1E2DA1110;
  *(_QWORD *)v10 = &off_1E2DBEB20;
  *(_OWORD *)(v10 + 56) = 0u;
  *(_OWORD *)(v10 + 72) = 0u;
  *((_DWORD *)v10 + 8) = a2;
  v11 = a3 * (uint64_t)a2 * a4 * a5;
  v12 = Espresso::kern_alloc_uninitialized((Espresso *)v11);
  bzero(v12, v11);
  *((_QWORD *)v10 + 5) = v12;
  v10[48] = 1;
  *a1 = v10 + 24;
  a1[1] = v10;
}

void sub_1913BD93C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;
  void *v4;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v1[3]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v2);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

uint64_t Espresso::blob<signed char,1>::~blob(uint64_t a1, void *a2)
{
  void *v3;

  *(_QWORD *)a1 = &off_1E2DA1110;
  if (*(_BYTE *)(a1 + 24))
  {
    v3 = *(void **)(a1 + 16);
    if (v3)
    {
      Espresso::on_dealloc(*(Espresso **)(a1 + 16), a2);
      free(v3);
    }
  }
  *(_QWORD *)(a1 + 16) = 0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 48);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 32);
  return a1;
}

void Espresso::blob<signed char,1>::~blob(uint64_t a1, void *a2)
{
  void *v3;

  *(_QWORD *)a1 = &off_1E2DA1110;
  if (*(_BYTE *)(a1 + 24))
  {
    v3 = *(void **)(a1 + 16);
    if (v3)
    {
      Espresso::on_dealloc(*(Espresso **)(a1 + 16), a2);
      free(v3);
    }
  }
  *(_QWORD *)(a1 + 16) = 0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 48);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 32);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::blob<signed char,1>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBEB20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::blob<signed char,1>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBEB20;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::blob<signed char,1>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::HXEngine::hx_quantization_converter_helper::get_conv_weights(Espresso::HXEngine::hx_quantization_converter_helper *this, Espresso::generic_convolution_kernel *a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  vDSP_Length v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int i;
  int j;
  uint64_t v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  float v37;
  float v38;
  int v39;
  int v40;
  __n128 v41;
  float *v42;
  int *v43;
  _DWORD *v44;
  float *v45;
  _DWORD *v46;
  float v47;
  float v48;
  float v49;
  unint64_t *v50;
  unint64_t v51;
  float __C;
  uint64_t v53;
  std::__shared_weak_count *v54;
  __int128 v55[2];
  void *__p;
  void *v57;

  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  if (*((_QWORD *)a2 + 2) && *(_QWORD *)a2 && *((_QWORD *)a2 + 4) && *((_QWORD *)a2 + 6))
  {
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 384))(a3);
    v7 = *(_DWORD *)(v6 + 24);
    v8 = *(int *)(v6 + 40);
    std::allocate_shared[abi:ne180100]<Espresso::blob<signed char,1>,std::allocator<Espresso::blob<signed char,1>>,int &,int &,int &,int &,void>(v55, *(_DWORD *)(*((_QWORD *)a2 + 2) + 8), 1, 1, 1);
    v9 = v8;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)this + 48, v55);
    v10 = (std::__shared_weak_count *)*((_QWORD *)&v55[0] + 1);
    if (*((_QWORD *)&v55[0] + 1))
    {
      v11 = (unint64_t *)(*((_QWORD *)&v55[0] + 1) + 8);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned int,1>,std::allocator<Espresso::blob<unsigned int,1>>,int &,int &,int &,int &,void>(v55, v8, 1, 1, 1);
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)this + 32, v55);
    v13 = (std::__shared_weak_count *)*((_QWORD *)&v55[0] + 1);
    if (*((_QWORD *)&v55[0] + 1))
    {
      v14 = (unint64_t *)(*((_QWORD *)&v55[0] + 1) + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    std::allocate_shared[abi:ne180100]<Espresso::blob<int,1>,std::allocator<Espresso::blob<int,1>>,int &,int &,int &,int &,void>(v55, v8, 1, 1, 1);
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)this + 16, v55);
    v16 = (std::__shared_weak_count *)*((_QWORD *)&v55[0] + 1);
    if (*((_QWORD *)&v55[0] + 1))
    {
      v17 = (unint64_t *)(*((_QWORD *)&v55[0] + 1) + 8);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    std::allocate_shared[abi:ne180100]<Espresso::blob<int,1>,std::allocator<Espresso::blob<int,1>>,int &,int &,int &,int &,void>(v55, v8, 1, 1, 1);
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)this, v55);
    v19 = (std::__shared_weak_count *)*((_QWORD *)&v55[0] + 1);
    if (*((_QWORD *)&v55[0] + 1))
    {
      v20 = (unint64_t *)(*((_QWORD *)&v55[0] + 1) + 8);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)this + 8, *((_QWORD *)a2 + 4), *((_QWORD *)a2 + 5));
    v22 = *(_QWORD *)(*((_QWORD *)a2 + 2) + 16);
    (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)a3 + 464))(v55, a3);
    v23 = HIDWORD(v55[0]);
    if (SHIDWORD(v55[0]) >= 1)
    {
      v24 = 0;
      v25 = 0;
      v26 = v55[0];
      v27 = DWORD1(v55[0]);
      v28 = DWORD2(v55[0]);
      v29 = DWORD1(v55[0]) * LODWORD(v55[0]) * DWORD2(v55[0]);
      do
      {
        if (v28 >= 1)
        {
          for (i = 0; i < v28; ++i)
          {
            if (v27 >= 1)
            {
              for (j = 0; j < v27; ++j)
              {
                if (v26 >= 1)
                {
                  v32 = 0;
                  do
                  {
                    *(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 6) + 16)
                             + i
                             + v29 * v24
                             + ((int)v32 + j * v26) * DWORD2(v55[0])) = *(_BYTE *)(v22 + v25 + v32);
                    v26 = v55[0];
                    ++v32;
                  }
                  while ((int)v32 < SLODWORD(v55[0]));
                  v25 += v32;
                  v27 = DWORD1(v55[0]);
                }
              }
              v28 = DWORD2(v55[0]);
            }
          }
          v23 = HIDWORD(v55[0]);
        }
        ++v24;
      }
      while (v24 < v23);
    }
    v34 = *((_QWORD *)a2 + 6);
    v33 = (std::__shared_weak_count *)*((_QWORD *)a2 + 7);
    v53 = v34;
    v54 = v33;
    if (v33)
    {
      p_shared_owners = (unint64_t *)&v33->__shared_owners_;
      do
        v36 = __ldxr(p_shared_owners);
      while (__stxr(v36 + 1, p_shared_owners));
    }
    v37 = **(float **)(*((_QWORD *)a2 + 4) + 16);
    if (v7)
      v38 = 0.0;
    else
      v38 = 127.0 / v37;
    __C = 0.0;
    vDSP_maxv(*(const float **)(*(_QWORD *)a2 + 16), 1, &__C, v8);
    v39 = vcvtmd_s64_f64(log2(4096.0 / __C));
    if (v39 >= 20)
      v39 = 20;
    if (v39 <= 8)
      v40 = 8;
    else
      v40 = v39;
    v41.n128_f64[0] = ldexp(1.0, v40);
    if ((int)v8 >= 1)
    {
      v42 = *(float **)(*(_QWORD *)a2 + 16);
      v43 = *(int **)(*((_QWORD *)this + 4) + 16);
      v44 = *(_DWORD **)(*((_QWORD *)this + 2) + 16);
      v45 = *(float **)(v34 + 16);
      v46 = *(_DWORD **)(*(_QWORD *)this + 16);
      do
      {
        v47 = *v42++;
        *v43++ = v40;
        *v44++ = vcvtpd_s64_f64(v41.n128_f64[0] * v47);
        v48 = *v45++;
        v49 = v41.n128_f64[0] * 0.5 + (float)(v38 + v48) * (v41.n128_f64[0] * v37);
        *v46++ = llroundf(v49);
        --v9;
      }
      while (v9);
    }
    if (v33)
    {
      v50 = (unint64_t *)&v33->__shared_owners_;
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v33->__on_zero_shared)(v33, v41);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    if (__p)
    {
      v57 = __p;
      operator delete(__p);
    }
  }
}

void sub_1913BDECC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  Espresso::HXEngine::hx_quantization_converter_helper::conv_hx_weights *v19;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
  }
  Espresso::HXEngine::hx_quantization_converter_helper::conv_hx_weights::~conv_hx_weights(v19);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned int,1>,std::allocator<Espresso::blob<unsigned int,1>>,int &,int &,int &,int &,void>(_QWORD *a1, int a2, int a3, int a4, int a5)
{
  char *v10;
  Espresso *v11;
  void *v12;

  v10 = (char *)operator new(0x58uLL);
  *((_QWORD *)v10 + 1) = 0;
  *((_QWORD *)v10 + 2) = 0;
  *(_QWORD *)v10 = &off_1E2DBEF10;
  *((_QWORD *)v10 + 3) = &off_1E2DA1350;
  *(_OWORD *)(v10 + 56) = 0u;
  *(_OWORD *)(v10 + 72) = 0u;
  *((_DWORD *)v10 + 8) = a2;
  v11 = (Espresso *)(4 * a2 * (uint64_t)a3 * a4 * a5);
  v12 = Espresso::kern_alloc_uninitialized(v11);
  bzero(v12, (size_t)v11);
  *((_QWORD *)v10 + 5) = v12;
  v10[48] = 1;
  *a1 = v10 + 24;
  a1[1] = v10;
}

void sub_1913BDFD4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;
  void *v4;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v1[3]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v2);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<Espresso::blob<int,1>,std::allocator<Espresso::blob<int,1>>,int &,int &,int &,int &,void>(_QWORD *a1, int a2, int a3, int a4, int a5)
{
  char *v10;
  Espresso *v11;
  void *v12;

  v10 = (char *)operator new(0x58uLL);
  *((_QWORD *)v10 + 1) = 0;
  *((_QWORD *)v10 + 2) = 0;
  *(_QWORD *)v10 = &off_1E2DBEE68;
  *((_QWORD *)v10 + 3) = &off_1E2DA12F0;
  *(_OWORD *)(v10 + 56) = 0u;
  *(_OWORD *)(v10 + 72) = 0u;
  *((_DWORD *)v10 + 8) = a2;
  v11 = (Espresso *)(4 * a2 * (uint64_t)a3 * a4 * a5);
  v12 = Espresso::kern_alloc_uninitialized(v11);
  bzero(v12, (size_t)v11);
  *((_QWORD *)v10 + 5) = v12;
  v10[48] = 1;
  *a1 = v10 + 24;
  a1[1] = v10;
}

void sub_1913BE0BC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;
  void *v4;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v1[3]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v2);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

void Espresso::HXEngine::hx_quantization_converter_helper::conv_hx_weights::~conv_hx_weights(Espresso::HXEngine::hx_quantization_converter_helper::conv_hx_weights *this)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 64);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 32);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 16);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this);
}

uint64_t Espresso::blob<int,1>::~blob(uint64_t a1, void *a2)
{
  void *v3;

  *(_QWORD *)a1 = &off_1E2DA12F0;
  if (*(_BYTE *)(a1 + 24))
  {
    v3 = *(void **)(a1 + 16);
    if (v3)
    {
      Espresso::on_dealloc(*(Espresso **)(a1 + 16), a2);
      free(v3);
    }
  }
  *(_QWORD *)(a1 + 16) = 0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 48);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 32);
  return a1;
}

void Espresso::blob<int,1>::~blob(uint64_t a1, void *a2)
{
  void *v3;

  *(_QWORD *)a1 = &off_1E2DA12F0;
  if (*(_BYTE *)(a1 + 24))
  {
    v3 = *(void **)(a1 + 16);
    if (v3)
    {
      Espresso::on_dealloc(*(Espresso **)(a1 + 16), a2);
      free(v3);
    }
  }
  *(_QWORD *)(a1 + 16) = 0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 48);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 32);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::blob<int,1>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBEE68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::blob<int,1>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBEE68;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::blob<int,1>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t Espresso::blob<unsigned int,1>::~blob(uint64_t a1, void *a2)
{
  void *v3;

  *(_QWORD *)a1 = &off_1E2DA1350;
  if (*(_BYTE *)(a1 + 24))
  {
    v3 = *(void **)(a1 + 16);
    if (v3)
    {
      Espresso::on_dealloc(*(Espresso **)(a1 + 16), a2);
      free(v3);
    }
  }
  *(_QWORD *)(a1 + 16) = 0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 48);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 32);
  return a1;
}

void Espresso::blob<unsigned int,1>::~blob(uint64_t a1, void *a2)
{
  void *v3;

  *(_QWORD *)a1 = &off_1E2DA1350;
  if (*(_BYTE *)(a1 + 24))
  {
    v3 = *(void **)(a1 + 16);
    if (v3)
    {
      Espresso::on_dealloc(*(Espresso **)(a1 + 16), a2);
      free(v3);
    }
  }
  *(_QWORD *)(a1 + 16) = 0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 48);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 32);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::blob<unsigned int,1>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBEF10;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::blob<unsigned int,1>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBEF10;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::blob<unsigned int,1>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::HXEngine::hx_quantization_converter_helper::get_pool_weights(Espresso::HXEngine::hx_quantization_converter_helper *this, uint64_t *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  double v7;
  int v8;
  int v9;
  long double v10;
  _DWORD *v11;
  __int128 v12;

  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  if (*a2 && a2[4])
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<int,1>,std::allocator<Espresso::blob<int,1>>,int &,int &,int &,int &,void>(&v12, 2, 1, 1, 1);
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)this, &v12);
    v4 = (std::__shared_weak_count *)*((_QWORD *)&v12 + 1);
    if (*((_QWORD *)&v12 + 1))
    {
      v5 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 - 1, v5));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)this + 2, a2[4], a2[5]);
    v7 = **(float **)(*a2 + 16);
    v8 = vcvtmd_s64_f64(log2(4096.0 / v7));
    if (v8 >= 20)
      v8 = 20;
    if (v8 <= 8)
      v9 = 8;
    else
      v9 = v8;
    v10 = ldexp(1.0, v9);
    v11 = *(_DWORD **)(*(_QWORD *)this + 16);
    *v11 = vcvtpd_s64_f64(v10 * v7);
    v11[1] = v9;
  }
}

void sub_1913BE478(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1 + 16);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void EspressoLight::espresso_plan::~espresso_plan(EspressoLight::espresso_plan *this)
{
  EspressoLight::espresso_plan::~espresso_plan(this);
  JUMPOUT(0x19401CD90);
}

{
  *(_QWORD *)this = &off_1E2D59350;
  if (*((char *)this + 1095) < 0)
    operator delete(*((void **)this + 134));
  std::unique_ptr<EspressoLight::espresso_plan::priv_t>::reset[abi:ne180100]((uint64_t *)this + 133);
  *(_QWORD *)this = off_1E2D59730;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 1048);

}

void EspressoLight::espresso_plan::execute_forward_nocopy(EspressoLight::espresso_plan *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t **v3;
  uint64_t *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  void (***v7)(uint64_t *__return_ptr, _QWORD);
  unint64_t *p_shared_owners;
  unint64_t v9;
  int v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD v13[5];
  _QWORD v14[11];

  v1 = *((_QWORD *)this + 133);
  v2 = *(_QWORD *)(v1 + 144);
  v4 = *(uint64_t **)(v1 + 24);
  v3 = (uint64_t **)(v1 + 24);
  v5 = *v4;
  v7 = *(void (****)(uint64_t *__return_ptr, _QWORD))(*v4 + 16);
  v6 = *(std::__shared_weak_count **)(*v4 + 24);
  v14[9] = v7;
  v14[10] = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    v5 = **v3;
  }
  v10 = *(unsigned __int8 *)(v5 + 1352);
  LOBYTE(v14[0]) = v10;
  memset((char *)v14 + 4, 0, 68);
  if (v10)
  {
    v14[1] = v2;
    memset(&v14[2], 0, 24);
    v14[5] = v2;
    memset(&v14[6], 0, 24);
    HIDWORD(v14[0]) = 723714128;
    kdebug_trace();
  }
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 3221225472;
  v13[2] = ___ZN13EspressoLight13espresso_plan22execute_forward_nocopyEv_block_invoke;
  v13[3] = &__block_descriptor_40_e10_v16__0r_v8l;
  v13[4] = v3;
  Espresso::abstract_context::compute_batch_sync(v7, v13);
  Espresso_scoped_signpost::~Espresso_scoped_signpost((Espresso_scoped_signpost *)v14);
  if (v6)
  {
    v11 = (unint64_t *)&v6->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1913BE5EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1 - 48);
  _Unwind_Resume(a1);
}

uint64_t EspressoLight::espresso_plan::set_function_name(uint64_t a1, const std::string *a2)
{
  std::string::operator=((std::string *)(a1 + 1072), a2);
  return 0;
}

void EspressoLight::espresso_plan::set_input_raw_ptr(uint64_t a1, int a2, char *a3, __int128 *a4)
{
  uint64_t v6;
  uint64_t v8;
  __int128 v9;
  unint64_t *v10;
  unint64_t v11;
  int *v12;
  uint64_t **v13;
  char *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::runtime_error *exception;
  uint64_t v30;
  std::runtime_error *v31;
  std::string *v32;
  __int128 v33;
  std::runtime_error *v34;
  std::runtime_error *v35;
  std::runtime_error *v36;
  std::runtime_error *v37;
  std::string *v38;
  __int128 v39;
  std::string *v40;
  __int128 v41;
  std::string *v42;
  std::string::size_type size;
  std::string *v44;
  __int128 v45;
  std::runtime_error *v46;
  std::string *v47;
  __int128 v48;
  std::string *v49;
  __int128 v50;
  std::string *v51;
  std::string::size_type v52;
  std::string *v53;
  __int128 v54;
  std::runtime_error *v55;
  std::string *v56;
  __int128 v57;
  std::string *v58;
  __int128 v59;
  std::string *v60;
  std::string::size_type v61;
  std::string *v62;
  __int128 v63;
  std::runtime_error *v64;
  std::string *v65;
  __int128 v66;
  std::string *v67;
  __int128 v68;
  std::string *v69;
  std::string::size_type v70;
  std::string *v71;
  __int128 v72;
  std::string v73;
  std::string v74;
  std::string v75;
  std::string v76;
  int *v77;
  std::__shared_weak_count *v78;
  __int128 v79;
  std::string v80;
  std::string v81;
  int v82;

  v82 = a2;
  v6 = *(_QWORD *)(a1 + 1064);
  if (*(_DWORD *)(v6 + 160) != 1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
    v30 = a1;
    v31 = exception;
    std::to_string(&v80, *(_DWORD *)(*(_QWORD *)(v30 + 1064) + 160));
    v32 = std::string::insert(&v80, 0, "Inconsistent phase of espresso_plan: ");
    v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
    v81.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v81.__r_.__value_.__l.__data_ = v33;
    v32->__r_.__value_.__l.__size_ = 0;
    v32->__r_.__value_.__r.__words[2] = 0;
    v32->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v31, &v81);
    v31->__vftable = (std::runtime_error_vtbl *)&off_1E2D59458;
    LODWORD(v31[1].__vftable) = -5;
  }
  EspressoLight::espresso_plan::default_blob_name_if_null(&v81, (_QWORD *)v6, a2, 0, a3);
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 1064) + 24);
  if (a2 >= (unint64_t)((*(_QWORD *)(*(_QWORD *)(a1 + 1064) + 32) - v8) >> 4))
  {
    v34 = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v80, "Invalid network_index.");
    std::runtime_error::runtime_error(v34, &v80);
    v34->__vftable = (std::runtime_error_vtbl *)&off_1E2D59458;
    LODWORD(v34[1].__vftable) = -6;
  }
  v9 = *(_OWORD *)(v8 + 16 * a2);
  v79 = v9;
  if (*((_QWORD *)&v9 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v9 + 1) + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  if (!(_QWORD)v9)
  {
    v35 = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v80, "Null network found.");
    std::runtime_error::runtime_error(v35, &v80);
    v35->__vftable = (std::runtime_error_vtbl *)&off_1E2D59458;
    LODWORD(v35[1].__vftable) = -6;
  }
  Espresso::net::get_blob_or_global_with_prefix(v9, &v81, &v77);
  v12 = v77;
  if (!v77)
  {
    v36 = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v80, "Blob not found.");
    std::runtime_error::runtime_error(v36, &v80);
    v36->__vftable = (std::runtime_error_vtbl *)&off_1E2D59458;
    LODWORD(v36[1].__vftable) = -8;
  }
  if (*((_QWORD *)a4 + 2) != v77[2])
  {
    v37 = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
    std::to_string(&v74, v12[2]);
    v38 = std::string::insert(&v74, 0, "Invalid X-dimension ");
    v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
    v75.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v75.__r_.__value_.__l.__data_ = v39;
    v38->__r_.__value_.__l.__size_ = 0;
    v38->__r_.__value_.__r.__words[2] = 0;
    v38->__r_.__value_.__r.__words[0] = 0;
    v40 = std::string::append(&v75, "/");
    v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
    v76.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v76.__r_.__value_.__l.__data_ = v41;
    v40->__r_.__value_.__l.__size_ = 0;
    v40->__r_.__value_.__r.__words[2] = 0;
    v40->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v73, *((_QWORD *)a4 + 2));
    if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v42 = &v73;
    else
      v42 = (std::string *)v73.__r_.__value_.__r.__words[0];
    if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v73.__r_.__value_.__r.__words[2]);
    else
      size = v73.__r_.__value_.__l.__size_;
    v44 = std::string::append(&v76, (const std::string::value_type *)v42, size);
    v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
    v80.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v80.__r_.__value_.__l.__data_ = v45;
    v44->__r_.__value_.__l.__size_ = 0;
    v44->__r_.__value_.__r.__words[2] = 0;
    v44->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v37, &v80);
    v37->__vftable = (std::runtime_error_vtbl *)&off_1E2D59458;
    LODWORD(v37[1].__vftable) = -7;
  }
  if (*((_QWORD *)a4 + 3) != v77[3])
  {
    v46 = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
    std::to_string(&v74, v12[3]);
    v47 = std::string::insert(&v74, 0, "Invalid Y-dimension ");
    v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
    v75.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v75.__r_.__value_.__l.__data_ = v48;
    v47->__r_.__value_.__l.__size_ = 0;
    v47->__r_.__value_.__r.__words[2] = 0;
    v47->__r_.__value_.__r.__words[0] = 0;
    v49 = std::string::append(&v75, "/");
    v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
    v76.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v76.__r_.__value_.__l.__data_ = v50;
    v49->__r_.__value_.__l.__size_ = 0;
    v49->__r_.__value_.__r.__words[2] = 0;
    v49->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v73, *((_QWORD *)a4 + 3));
    if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v51 = &v73;
    else
      v51 = (std::string *)v73.__r_.__value_.__r.__words[0];
    if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v52 = HIBYTE(v73.__r_.__value_.__r.__words[2]);
    else
      v52 = v73.__r_.__value_.__l.__size_;
    v53 = std::string::append(&v76, (const std::string::value_type *)v51, v52);
    v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
    v80.__r_.__value_.__r.__words[2] = v53->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v80.__r_.__value_.__l.__data_ = v54;
    v53->__r_.__value_.__l.__size_ = 0;
    v53->__r_.__value_.__r.__words[2] = 0;
    v53->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v46, &v80);
    v46->__vftable = (std::runtime_error_vtbl *)&off_1E2D59458;
    LODWORD(v46[1].__vftable) = -7;
  }
  if (*((_QWORD *)a4 + 4) != v77[4])
  {
    v55 = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
    std::to_string(&v74, v12[4]);
    v56 = std::string::insert(&v74, 0, "Invalid K-dimension ");
    v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
    v75.__r_.__value_.__r.__words[2] = v56->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v75.__r_.__value_.__l.__data_ = v57;
    v56->__r_.__value_.__l.__size_ = 0;
    v56->__r_.__value_.__r.__words[2] = 0;
    v56->__r_.__value_.__r.__words[0] = 0;
    v58 = std::string::append(&v75, "/");
    v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
    v76.__r_.__value_.__r.__words[2] = v58->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v76.__r_.__value_.__l.__data_ = v59;
    v58->__r_.__value_.__l.__size_ = 0;
    v58->__r_.__value_.__r.__words[2] = 0;
    v58->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v73, *((_QWORD *)a4 + 4));
    if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v60 = &v73;
    else
      v60 = (std::string *)v73.__r_.__value_.__r.__words[0];
    if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v61 = HIBYTE(v73.__r_.__value_.__r.__words[2]);
    else
      v61 = v73.__r_.__value_.__l.__size_;
    v62 = std::string::append(&v76, (const std::string::value_type *)v60, v61);
    v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
    v80.__r_.__value_.__r.__words[2] = v62->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v80.__r_.__value_.__l.__data_ = v63;
    v62->__r_.__value_.__l.__size_ = 0;
    v62->__r_.__value_.__r.__words[2] = 0;
    v62->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v55, &v80);
    v55->__vftable = (std::runtime_error_vtbl *)&off_1E2D59458;
    LODWORD(v55[1].__vftable) = -7;
  }
  if (*((_QWORD *)a4 + 5) != v77[5])
  {
    v64 = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
    std::to_string(&v74, v12[5]);
    v65 = std::string::insert(&v74, 0, "Invalid N-dimension ");
    v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
    v75.__r_.__value_.__r.__words[2] = v65->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v75.__r_.__value_.__l.__data_ = v66;
    v65->__r_.__value_.__l.__size_ = 0;
    v65->__r_.__value_.__r.__words[2] = 0;
    v65->__r_.__value_.__r.__words[0] = 0;
    v67 = std::string::append(&v75, "/");
    v68 = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
    v76.__r_.__value_.__r.__words[2] = v67->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v76.__r_.__value_.__l.__data_ = v68;
    v67->__r_.__value_.__l.__size_ = 0;
    v67->__r_.__value_.__r.__words[2] = 0;
    v67->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v73, *((_QWORD *)a4 + 5));
    if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v69 = &v73;
    else
      v69 = (std::string *)v73.__r_.__value_.__r.__words[0];
    if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v70 = HIBYTE(v73.__r_.__value_.__r.__words[2]);
    else
      v70 = v73.__r_.__value_.__l.__size_;
    v71 = std::string::append(&v76, (const std::string::value_type *)v69, v70);
    v72 = *(_OWORD *)&v71->__r_.__value_.__l.__data_;
    v80.__r_.__value_.__r.__words[2] = v71->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v80.__r_.__value_.__l.__data_ = v72;
    v71->__r_.__value_.__l.__size_ = 0;
    v71->__r_.__value_.__r.__words[2] = 0;
    v71->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v64, &v80);
    v64->__vftable = (std::runtime_error_vtbl *)&off_1E2D59458;
    LODWORD(v64[1].__vftable) = -7;
  }
  v13 = std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*(_QWORD *)(*(_QWORD *)(a1 + 1064) + 144) + 184), v82, &v82);
  v80.__r_.__value_.__r.__words[0] = (std::string::size_type)&v81;
  v14 = std::__tree<std::__value_type<std::string,espresso_buffer_t>,std::__map_value_compare<std::string,std::__value_type<std::string,espresso_buffer_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,espresso_buffer_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v13 + 5, &v81, (__int128 **)&v80);
  v15 = *a4;
  v16 = a4[1];
  *(_OWORD *)(v14 + 88) = a4[2];
  *(_OWORD *)(v14 + 72) = v16;
  *(_OWORD *)(v14 + 56) = v15;
  v17 = a4[3];
  v18 = a4[4];
  v19 = a4[5];
  *(_OWORD *)(v14 + 152) = a4[6];
  *(_OWORD *)(v14 + 136) = v19;
  *(_OWORD *)(v14 + 120) = v18;
  *(_OWORD *)(v14 + 104) = v17;
  v20 = a4[7];
  v21 = a4[8];
  v22 = a4[9];
  *((_QWORD *)v14 + 27) = *((_QWORD *)a4 + 20);
  *(_OWORD *)(v14 + 200) = v22;
  *(_OWORD *)(v14 + 184) = v21;
  *(_OWORD *)(v14 + 168) = v20;
  v23 = v78;
  if (v78)
  {
    p_shared_owners = (unint64_t *)&v78->__shared_owners_;
    do
      v25 = __ldaxr(p_shared_owners);
    while (__stlxr(v25 - 1, p_shared_owners));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v26 = (std::__shared_weak_count *)*((_QWORD *)&v79 + 1);
  if (*((_QWORD *)&v79 + 1))
  {
    v27 = (unint64_t *)(*((_QWORD *)&v79 + 1) + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v81.__r_.__value_.__l.__data_);
}

void sub_1913BEDA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,char a35)
{
  void *v35;
  int v36;
  uint64_t v37;

  if (*(char *)(v37 - 73) < 0)
    operator delete(*(void **)(v37 - 96));
  if (a14 < 0)
    operator delete(__p);
  if (a33 < 0)
    operator delete(a28);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
  {
    operator delete(a15);
    if ((v36 & 1) == 0)
    {
LABEL_14:
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a35);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100](v37 - 112);
      if (*(char *)(v37 - 41) < 0)
        operator delete(*(void **)(v37 - 64));
      _Unwind_Resume(a1);
    }
  }
  else if (!v36)
  {
    goto LABEL_14;
  }
  __cxa_free_exception(v35);
  goto LABEL_14;
}

void EspressoLight::espresso_plan::set_output_raw_ptr(uint64_t a1, int a2, char *a3, __int128 *a4)
{
  uint64_t v6;
  uint64_t v8;
  __int128 v9;
  unint64_t *v10;
  unint64_t v11;
  int *v12;
  uint64_t **v13;
  char *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::runtime_error *exception;
  uint64_t v30;
  std::runtime_error *v31;
  std::string *v32;
  __int128 v33;
  std::runtime_error *v34;
  std::runtime_error *v35;
  std::runtime_error *v36;
  std::runtime_error *v37;
  std::string *v38;
  __int128 v39;
  std::string *v40;
  __int128 v41;
  std::string *v42;
  std::string::size_type size;
  std::string *v44;
  __int128 v45;
  std::runtime_error *v46;
  std::string *v47;
  __int128 v48;
  std::string *v49;
  __int128 v50;
  std::string *v51;
  std::string::size_type v52;
  std::string *v53;
  __int128 v54;
  std::runtime_error *v55;
  std::string *v56;
  __int128 v57;
  std::string *v58;
  __int128 v59;
  std::string *v60;
  std::string::size_type v61;
  std::string *v62;
  __int128 v63;
  std::runtime_error *v64;
  std::string *v65;
  __int128 v66;
  std::string *v67;
  __int128 v68;
  std::string *v69;
  std::string::size_type v70;
  std::string *v71;
  __int128 v72;
  std::string v73;
  std::string v74;
  std::string v75;
  std::string v76;
  int *v77;
  std::__shared_weak_count *v78;
  __int128 v79;
  std::string v80;
  std::string v81;
  int v82;

  v82 = a2;
  v6 = *(_QWORD *)(a1 + 1064);
  if (*(_DWORD *)(v6 + 160) != 1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
    v30 = a1;
    v31 = exception;
    std::to_string(&v80, *(_DWORD *)(*(_QWORD *)(v30 + 1064) + 160));
    v32 = std::string::insert(&v80, 0, "Inconsistent phase of espresso_plan: ");
    v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
    v81.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v81.__r_.__value_.__l.__data_ = v33;
    v32->__r_.__value_.__l.__size_ = 0;
    v32->__r_.__value_.__r.__words[2] = 0;
    v32->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v31, &v81);
    v31->__vftable = (std::runtime_error_vtbl *)&off_1E2D59458;
    LODWORD(v31[1].__vftable) = -5;
  }
  EspressoLight::espresso_plan::default_blob_name_if_null(&v81, (_QWORD *)v6, a2, (const char *)1, a3);
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 1064) + 24);
  if (a2 >= (unint64_t)((*(_QWORD *)(*(_QWORD *)(a1 + 1064) + 32) - v8) >> 4))
  {
    v34 = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v80, "Invalid network_index.");
    std::runtime_error::runtime_error(v34, &v80);
    v34->__vftable = (std::runtime_error_vtbl *)&off_1E2D59458;
    LODWORD(v34[1].__vftable) = -6;
  }
  v9 = *(_OWORD *)(v8 + 16 * a2);
  v79 = v9;
  if (*((_QWORD *)&v9 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v9 + 1) + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  if (!(_QWORD)v9)
  {
    v35 = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v80, "Null network found.");
    std::runtime_error::runtime_error(v35, &v80);
    v35->__vftable = (std::runtime_error_vtbl *)&off_1E2D59458;
    LODWORD(v35[1].__vftable) = -6;
  }
  Espresso::net::get_blob_or_global_with_prefix(v9, &v81, &v77);
  v12 = v77;
  if (!v77)
  {
    v36 = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v80, "Blob not found.");
    std::runtime_error::runtime_error(v36, &v80);
    v36->__vftable = (std::runtime_error_vtbl *)&off_1E2D59458;
    LODWORD(v36[1].__vftable) = -8;
  }
  if (*((_QWORD *)a4 + 2) != v77[2])
  {
    v37 = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
    std::to_string(&v74, v12[2]);
    v38 = std::string::insert(&v74, 0, "Invalid X-dimension ");
    v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
    v75.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v75.__r_.__value_.__l.__data_ = v39;
    v38->__r_.__value_.__l.__size_ = 0;
    v38->__r_.__value_.__r.__words[2] = 0;
    v38->__r_.__value_.__r.__words[0] = 0;
    v40 = std::string::append(&v75, "/");
    v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
    v76.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v76.__r_.__value_.__l.__data_ = v41;
    v40->__r_.__value_.__l.__size_ = 0;
    v40->__r_.__value_.__r.__words[2] = 0;
    v40->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v73, *((_QWORD *)a4 + 2));
    if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v42 = &v73;
    else
      v42 = (std::string *)v73.__r_.__value_.__r.__words[0];
    if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v73.__r_.__value_.__r.__words[2]);
    else
      size = v73.__r_.__value_.__l.__size_;
    v44 = std::string::append(&v76, (const std::string::value_type *)v42, size);
    v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
    v80.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v80.__r_.__value_.__l.__data_ = v45;
    v44->__r_.__value_.__l.__size_ = 0;
    v44->__r_.__value_.__r.__words[2] = 0;
    v44->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v37, &v80);
    v37->__vftable = (std::runtime_error_vtbl *)&off_1E2D59458;
    LODWORD(v37[1].__vftable) = -7;
  }
  if (*((_QWORD *)a4 + 3) != v77[3])
  {
    v46 = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
    std::to_string(&v74, v12[3]);
    v47 = std::string::insert(&v74, 0, "Invalid Y-dimension ");
    v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
    v75.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v75.__r_.__value_.__l.__data_ = v48;
    v47->__r_.__value_.__l.__size_ = 0;
    v47->__r_.__value_.__r.__words[2] = 0;
    v47->__r_.__value_.__r.__words[0] = 0;
    v49 = std::string::append(&v75, "/");
    v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
    v76.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v76.__r_.__value_.__l.__data_ = v50;
    v49->__r_.__value_.__l.__size_ = 0;
    v49->__r_.__value_.__r.__words[2] = 0;
    v49->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v73, *((_QWORD *)a4 + 3));
    if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v51 = &v73;
    else
      v51 = (std::string *)v73.__r_.__value_.__r.__words[0];
    if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v52 = HIBYTE(v73.__r_.__value_.__r.__words[2]);
    else
      v52 = v73.__r_.__value_.__l.__size_;
    v53 = std::string::append(&v76, (const std::string::value_type *)v51, v52);
    v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
    v80.__r_.__value_.__r.__words[2] = v53->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v80.__r_.__value_.__l.__data_ = v54;
    v53->__r_.__value_.__l.__size_ = 0;
    v53->__r_.__value_.__r.__words[2] = 0;
    v53->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v46, &v80);
    v46->__vftable = (std::runtime_error_vtbl *)&off_1E2D59458;
    LODWORD(v46[1].__vftable) = -7;
  }
  if (*((_QWORD *)a4 + 4) != v77[4])
  {
    v55 = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
    std::to_string(&v74, v12[4]);
    v56 = std::string::insert(&v74, 0, "Invalid K-dimension ");
    v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
    v75.__r_.__value_.__r.__words[2] = v56->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v75.__r_.__value_.__l.__data_ = v57;
    v56->__r_.__value_.__l.__size_ = 0;
    v56->__r_.__value_.__r.__words[2] = 0;
    v56->__r_.__value_.__r.__words[0] = 0;
    v58 = std::string::append(&v75, "/");
    v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
    v76.__r_.__value_.__r.__words[2] = v58->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v76.__r_.__value_.__l.__data_ = v59;
    v58->__r_.__value_.__l.__size_ = 0;
    v58->__r_.__value_.__r.__words[2] = 0;
    v58->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v73, *((_QWORD *)a4 + 4));
    if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v60 = &v73;
    else
      v60 = (std::string *)v73.__r_.__value_.__r.__words[0];
    if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v61 = HIBYTE(v73.__r_.__value_.__r.__words[2]);
    else
      v61 = v73.__r_.__value_.__l.__size_;
    v62 = std::string::append(&v76, (const std::string::value_type *)v60, v61);
    v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
    v80.__r_.__value_.__r.__words[2] = v62->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v80.__r_.__value_.__l.__data_ = v63;
    v62->__r_.__value_.__l.__size_ = 0;
    v62->__r_.__value_.__r.__words[2] = 0;
    v62->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v55, &v80);
    v55->__vftable = (std::runtime_error_vtbl *)&off_1E2D59458;
    LODWORD(v55[1].__vftable) = -7;
  }
  if (*((_QWORD *)a4 + 5) != v77[5])
  {
    v64 = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
    std::to_string(&v74, v12[5]);
    v65 = std::string::insert(&v74, 0, "Invalid N-dimension ");
    v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
    v75.__r_.__value_.__r.__words[2] = v65->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v75.__r_.__value_.__l.__data_ = v66;
    v65->__r_.__value_.__l.__size_ = 0;
    v65->__r_.__value_.__r.__words[2] = 0;
    v65->__r_.__value_.__r.__words[0] = 0;
    v67 = std::string::append(&v75, "/");
    v68 = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
    v76.__r_.__value_.__r.__words[2] = v67->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v76.__r_.__value_.__l.__data_ = v68;
    v67->__r_.__value_.__l.__size_ = 0;
    v67->__r_.__value_.__r.__words[2] = 0;
    v67->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v73, *((_QWORD *)a4 + 5));
    if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v69 = &v73;
    else
      v69 = (std::string *)v73.__r_.__value_.__r.__words[0];
    if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v70 = HIBYTE(v73.__r_.__value_.__r.__words[2]);
    else
      v70 = v73.__r_.__value_.__l.__size_;
    v71 = std::string::append(&v76, (const std::string::value_type *)v69, v70);
    v72 = *(_OWORD *)&v71->__r_.__value_.__l.__data_;
    v80.__r_.__value_.__r.__words[2] = v71->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v80.__r_.__value_.__l.__data_ = v72;
    v71->__r_.__value_.__l.__size_ = 0;
    v71->__r_.__value_.__r.__words[2] = 0;
    v71->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v64, &v80);
    v64->__vftable = (std::runtime_error_vtbl *)&off_1E2D59458;
    LODWORD(v64[1].__vftable) = -7;
  }
  v13 = std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*(_QWORD *)(*(_QWORD *)(a1 + 1064) + 144) + 208), v82, &v82);
  v80.__r_.__value_.__r.__words[0] = (std::string::size_type)&v81;
  v14 = std::__tree<std::__value_type<std::string,espresso_buffer_t>,std::__map_value_compare<std::string,std::__value_type<std::string,espresso_buffer_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,espresso_buffer_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v13 + 5, &v81, (__int128 **)&v80);
  v15 = *a4;
  v16 = a4[1];
  *(_OWORD *)(v14 + 88) = a4[2];
  *(_OWORD *)(v14 + 72) = v16;
  *(_OWORD *)(v14 + 56) = v15;
  v17 = a4[3];
  v18 = a4[4];
  v19 = a4[5];
  *(_OWORD *)(v14 + 152) = a4[6];
  *(_OWORD *)(v14 + 136) = v19;
  *(_OWORD *)(v14 + 120) = v18;
  *(_OWORD *)(v14 + 104) = v17;
  v20 = a4[7];
  v21 = a4[8];
  v22 = a4[9];
  *((_QWORD *)v14 + 27) = *((_QWORD *)a4 + 20);
  *(_OWORD *)(v14 + 200) = v22;
  *(_OWORD *)(v14 + 184) = v21;
  *(_OWORD *)(v14 + 168) = v20;
  v23 = v78;
  if (v78)
  {
    p_shared_owners = (unint64_t *)&v78->__shared_owners_;
    do
      v25 = __ldaxr(p_shared_owners);
    while (__stlxr(v25 - 1, p_shared_owners));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v26 = (std::__shared_weak_count *)*((_QWORD *)&v79 + 1);
  if (*((_QWORD *)&v79 + 1))
  {
    v27 = (unint64_t *)(*((_QWORD *)&v79 + 1) + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v81.__r_.__value_.__l.__data_);
}

void sub_1913BF72C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,char a35)
{
  void *v35;
  int v36;
  uint64_t v37;

  if (*(char *)(v37 - 73) < 0)
    operator delete(*(void **)(v37 - 96));
  if (a14 < 0)
    operator delete(__p);
  if (a33 < 0)
    operator delete(a28);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
  {
    operator delete(a15);
    if ((v36 & 1) == 0)
    {
LABEL_14:
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a35);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100](v37 - 112);
      if (*(char *)(v37 - 41) < 0)
        operator delete(*(void **)(v37 - 64));
      _Unwind_Resume(a1);
    }
  }
  else if (!v36)
  {
    goto LABEL_14;
  }
  __cxa_free_exception(v35);
  goto LABEL_14;
}

void EspressoLight::espresso_plan::unbind(uint64_t a1, int a2, char *a3, int a4)
{
  int v4;
  _QWORD *v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t **v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  _BOOL4 v14;
  uint64_t **v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t **v18;
  uint64_t **v19;
  uint64_t **v20;
  uint64_t **v21;
  uint64_t *v22;
  BOOL v23;
  uint64_t **v24;
  std::string __p;
  int v26;
  std::string *p_p;

  v4 = a2;
  v26 = a2;
  v5 = *(_QWORD **)(a1 + 1064);
  if (a4 == 0x10000)
  {
    EspressoLight::espresso_plan::default_blob_name_if_null(&__p, v5, a2, 0, a3);
    v6 = std::__tree<std::__value_type<int,std::map<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(v5[18] + 16), v4, &v26);
    std::__tree<std::__value_type<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>>>::__erase_unique<std::string>(v6 + 5, &__p);
    v7 = std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(v5[18] + 64), v4, &v26);
    p_p = &__p;
    std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7 + 5, &__p, (__int128 **)&p_p)[56] = 0;
    v8 = std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(v5[18] + 112), v4, &v26);
    v9 = v8;
    v11 = (uint64_t *)(v8 + 6);
    v10 = v8[6];
    if (v10)
    {
      v12 = (uint64_t *)(v8 + 6);
      v13 = v8[6];
      do
      {
        v14 = std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v13 + 4, &__p);
        v15 = (uint64_t **)(v13 + 1);
        if (!v14)
        {
          v15 = (uint64_t **)v13;
          v12 = v13;
        }
        v13 = *v15;
      }
      while (*v15);
      if (v12 != v11 && !std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&__p, v12 + 4))
      {
        v16 = (uint64_t *)v12[1];
        if (v16)
        {
          do
          {
            v17 = v16;
            v16 = (uint64_t *)*v16;
          }
          while (v16);
        }
        else
        {
          v22 = v12;
          do
          {
            v17 = (uint64_t *)v22[2];
            v23 = *v17 == (_QWORD)v22;
            v22 = v17;
          }
          while (!v23);
        }
        if (v9[5] == v12)
          v9[5] = v17;
        v9[7] = (uint64_t *)((char *)v9[7] - 1);
        std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v10, v12);
        std::__destroy_at[abi:ne180100]<std::pair<std::string const,EspressoLight::input_image_buffers>,0>((uint64_t)(v12 + 4));
        operator delete(v12);
        v4 = v26;
      }
    }
    v24 = std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(v5[18] + 184), v4, &v26);
    std::__tree<std::__value_type<std::string,espresso_buffer_t>,std::__map_value_compare<std::string,std::__value_type<std::string,espresso_buffer_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,espresso_buffer_t>>>::__erase_unique<std::string>(v24 + 5, &__p);
    v21 = std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(v5[18] + 136), v4, &v26);
  }
  else
  {
    EspressoLight::espresso_plan::default_blob_name_if_null(&__p, v5, a2, (const char *)1, a3);
    v18 = std::__tree<std::__value_type<int,std::map<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(v5[18] + 40), v4, &v26);
    std::__tree<std::__value_type<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>>>::__erase_unique<std::string>(v18 + 5, &__p);
    v19 = std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(v5[18] + 88), v4, &v26);
    p_p = &__p;
    std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v19 + 5, &__p, (__int128 **)&p_p)[56] = 0;
    v20 = std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(v5[18] + 208), v4, &v26);
    std::__tree<std::__value_type<std::string,espresso_buffer_t>,std::__map_value_compare<std::string,std::__value_type<std::string,espresso_buffer_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,espresso_buffer_t>>>::__erase_unique<std::string>(v20 + 5, &__p);
    v21 = std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(v5[18] + 160), v4, &v26);
  }
  std::__tree<std::__value_type<std::string,EspressoLight::input_cvpixel_buffers_t>,std::__map_value_compare<std::string,std::__value_type<std::string,EspressoLight::input_cvpixel_buffers_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,EspressoLight::input_cvpixel_buffers_t>>>::__erase_unique<std::string>(v21 + 5, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1913BFBA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL EspressoLight::espresso_plan::is_output_bound(uint64_t a1, int a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t *v8;
  uint64_t **v9;
  _BOOL4 v10;
  uint64_t **v11;
  uint64_t **v12;
  uint64_t **v14;
  BOOL v15;
  int v16;

  v16 = a2;
  v4 = *(_QWORD **)(a1 + 1064);
  if (a2 >= (unint64_t)((uint64_t)(v4[4] - v4[3]) >> 4))
    return 0;
  v6 = std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(v4[18] + 88), a2, &v16);
  v7 = v6 + 6;
  v8 = v6[6];
  if (!v8)
    goto LABEL_9;
  v9 = v6 + 6;
  do
  {
    v10 = std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v8 + 4, a3);
    v11 = (uint64_t **)(v8 + 1);
    if (!v10)
    {
      v11 = (uint64_t **)v8;
      v9 = (uint64_t **)v8;
    }
    v8 = *v11;
  }
  while (*v11);
  if (v9 == v7 || std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a3, v9 + 4))
  {
LABEL_9:
    v12 = std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(v4[18] + 208), a2, &v16);
    if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(v12[6], a3))
    {
      return 1;
    }
    v14 = std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(v4[18] + 160), a2, &v16);
    v15 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(v14[6], a3) == 0;
  }
  else
  {
    v15 = *((_BYTE *)v9 + 56) == 0;
  }
  return !v15;
}

BOOL EspressoLight::espresso_plan::is_output_declared(uint64_t a1, int a2, _QWORD *a3)
{
  _QWORD *v3;
  uint64_t *v4;
  uint64_t **v6;
  int v7;
  uint64_t **v8;
  int v10;

  v10 = a2;
  v3 = *(_QWORD **)(a1 + 1064);
  if (a2 >= (unint64_t)((uint64_t)(v3[4] - v3[3]) >> 4))
    return 0;
  if (v3[17])
  {
    v4 = (uint64_t *)v3[16];
    if (v4)
    {
      v6 = (uint64_t **)(v3 + 15);
      do
      {
        v7 = *((_DWORD *)v4 + 8);
        if (v7 <= a2)
        {
          if (v7 >= a2)
          {
            v8 = std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v6, a2, &v10);
            return std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(v8[6], a3) != 0;
          }
          ++v4;
        }
        v4 = (uint64_t *)*v4;
      }
      while (v4);
    }
  }
  return 1;
}

uint64_t EspressoLight::espresso_plan::is_valid_for_submit(EspressoLight::espresso_plan *this)
{
  _QWORD *v1;
  std::runtime_error *exception;
  std::runtime_error *v5;
  std::string *v6;
  __int128 v7;
  std::string v8;
  std::string v9;

  v1 = (_QWORD *)*((_QWORD *)this + 133);
  if (v1[3] == v1[4])
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v9, "The plan must have at least one network to execute.");
    std::runtime_error::runtime_error(exception, &v9);
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D59458;
    LODWORD(exception[1].__vftable) = -6;
  }
  if (*((_DWORD *)v1 + 40) != 1)
  {
    v5 = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
    std::to_string(&v8, *(_DWORD *)(*((_QWORD *)this + 133) + 160));
    v6 = std::string::insert(&v8, 0, "Inconsistent phase of espresso_plan: ");
    v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v9.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v9.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v5, &v9);
    v5->__vftable = (std::runtime_error_vtbl *)&off_1E2D59458;
    LODWORD(v5[1].__vftable) = -5;
  }
  return (*(uint64_t (**)(_QWORD, _QWORD *))(*(_QWORD *)*v1 + 152))(*v1, v1 + 3);
}

void sub_1913BFEC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  char v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  if ((v22 & 1) != 0)
    __cxa_free_exception(v21);
  _Unwind_Resume(exception_object);
}

void EspressoLight::espresso_plan::submit(EspressoLight::espresso_plan *a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  unsigned int (***v8)(_QWORD);
  unsigned int (***v9)(_QWORD);
  id v10;
  id v11;
  _QWORD *v12;
  int v13;
  uint64_t *v14;
  uint64_t v15;
  const void *v16;
  void *v17;
  void (***v18)(_QWORD **__return_ptr, _QWORD, uint64_t, uint64_t);
  uint64_t v19;
  _QWORD *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  unint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  BOOL v34;
  unint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t (***v40)(_QWORD);
  unsigned int v41;
  uint64_t *v42;
  uint64_t *v43;
  const void *v44;
  std::__shared_weak_count *v45;
  unint64_t *p_shared_owners;
  unint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  id *v59;
  id *v60;
  id v61;
  uint64_t v62;
  uint64_t **i;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  void *v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t *v78;
  unint64_t v79;
  id v80;
  id v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  id v100;
  id v101;
  _QWORD *v102;
  uint64_t v103;
  _QWORD *v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  int v110;
  void *v111;
  unint64_t *v112;
  unint64_t v113;
  _QWORD *v114;
  unint64_t *v115;
  unint64_t v116;
  uint64_t v117;
  _QWORD *v118;
  _QWORD *v119;
  uint64_t v120;
  unint64_t *v121;
  unint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  std::runtime_error *v132;
  std::runtime_error *exception;
  std::string *v134;
  __int128 v135;
  __int128 v136;
  id v137;
  id v138;
  _BYTE __lk[72];
  _QWORD *v140;
  __int128 v141;
  uint64_t v142[2];
  __int128 v143;
  uint64_t v144;
  uint64_t v145;
  __int128 v146;
  _QWORD *v147;
  std::__shared_weak_count *v148;
  __int128 v149;
  _QWORD *v150;
  std::__shared_weak_count *v151;
  _QWORD v152[12];

  v152[9] = *MEMORY[0x1E0C80C00];
  v137 = a2;
  v138 = a5;
  v8 = *(unsigned int (****)(_QWORD))(**((_QWORD **)a1 + 133) + 8);
  if ((**v8)(v8) == 10007
    || (v9 = *(unsigned int (****)(_QWORD))(**((_QWORD **)a1 + 133) + 8), (**v9)(v9) == 10006))
  {
    v10 = v137;
    v11 = v138;
    v12 = (_QWORD *)*((_QWORD *)a1 + 133);
    v13 = *((_DWORD *)v12 + 40);
    if (v13 != 1)
      Espresso::throw_exception_selector<Espresso::invalid_state_error,espresso_plan_phase_t &>(v13);
    if (!v11)
      Espresso::throw_exception_selector<Espresso::invalid_argument_error>("A client cannot determine when the data is ready without the callback.");
    v14 = (uint64_t *)v12[3];
    if ((uint64_t *)v12[4] == v14)
      Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Plan is empty");
    v15 = *v14;
    v16 = *(const void **)(*v14 + 16);
    if (!v16
    {
      v143 = 0uLL;
      Espresso::throw_exception_selector<Espresso::invalid_argument_error>("The Engine must be ANE_RUNTIME");
    }
    v18 = (void (***)(_QWORD **__return_ptr, _QWORD, uint64_t, uint64_t))v17;
    v19 = *(_QWORD *)(v15 + 24);
    *(_QWORD *)&v143 = v17;
    *((_QWORD *)&v143 + 1) = v19;
    v20 = v12;
    if (v19)
    {
      v21 = (unint64_t *)(v19 + 8);
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
      v20 = (_QWORD *)*((_QWORD *)a1 + 133);
    }
    v23 = v20[25];
    if (!v23)
    {
      EspressoLight::espresso_plan::priv_t::multiple_buffers_manager_t::set_n_async_buffers((EspressoLight::espresso_plan::priv_t::multiple_buffers_manager_t *)(v20 + 24), 2uLL);
      v20 = (_QWORD *)*((_QWORD *)a1 + 133);
      v23 = v20[25];
    }
    v24 = v20[18];
    LOBYTE(v152[0]) = *(_BYTE *)(*(_QWORD *)v12[3] + 1352);
    memset((char *)v152 + 4, 0, 68);
    if (LOBYTE(v152[0]))
    {
      v152[1] = v24;
      v152[2] = v23;
      v152[3] = 0;
      v152[4] = 0;
      v152[5] = v24;
      v152[6] = v23;
      v152[7] = 0;
      v152[8] = 0;
      HIDWORD(v152[0]) = 723714160;
      kdebug_trace();
    }
    (**v18)(&v150, v18, v24, v23);
    v25 = (_QWORD *)v12[3];
    (*(void (**)(_QWORD *, _QWORD))(*v150 + 48))(v150, *v25);
    v26 = (_QWORD *)*((_QWORD *)a1 + 133);
    *(_QWORD *)__lk = v26 + 26;
    __lk[8] = 1;
    std::mutex::lock((std::mutex *)(v26 + 26));
    while (1)
    {
      v27 = (unint64_t *)v26[40];
      v28 = v26[41] - (_QWORD)v27;
      if (v28)
      {
        v29 = v28 >> 3;
        if ((unint64_t)(v28 >> 3) <= 1)
          v30 = 1;
        else
          v30 = v28 >> 3;
        v31 = *v27;
        if (*v27)
        {
          v31 = 0;
          v32 = v30 - 1;
          while (v32 != v31)
          {
            if (!v27[++v31])
            {
              v34 = v31 < v29;
              goto LABEL_27;
            }
          }
        }
        else
        {
          v34 = 1;
LABEL_27:
          v35 = v26[47];
          v26[47] = v35 + 1;
          v27[(int)v31] = v35;
          ++v26[46];
          if (v34)
          {
            v36 = (int)v31;
            if (__lk[8])
              std::mutex::unlock(*(std::mutex **)__lk);
            v37 = v150;
            v150[10] = v36;
            v37[11] = v35;
            v38 = (_QWORD *)*((_QWORD *)a1 + 133);
            v149 = *((_OWORD *)v38 + 9);
            v38[18] = 0;
            v38[19] = 0;
            EspressoLight::espresso_plan::create_binding_task(a1);
            v39 = *v25;
            v40 = *(uint64_t (****)(_QWORD))(*(_QWORD *)(*v25 + 16) + 8);
            v41 = (**v40)(v40);
            v42 = std::__hash_table<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::__unordered_map_hasher<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::hash<Espresso::platform>,std::equal_to<Espresso::platform>,true>,std::__unordered_map_equal<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::equal_to<Espresso::platform>,std::hash<Espresso::platform>,true>,std::allocator<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>>>::find<Espresso::platform>((_QWORD *)(v39 + 528), v41);
            if (v42)
            {
              v43 = v42;
              v44 = (const void *)v42[3];
              v45 = (std::__shared_weak_count *)v43[4];
              if (v45)
              {
                p_shared_owners = (unint64_t *)&v45->__shared_owners_;
                do
                  v47 = __ldxr(p_shared_owners);
                while (__stxr(v47 + 1, p_shared_owners));
              }
              if (v44
              {
                v49 = v48;
                v147 = v48;
                v148 = v45;
                if (!v45)
                  goto LABEL_47;
                v50 = (unint64_t *)&v45->__shared_owners_;
                do
                  v51 = __ldxr(v50);
                while (__stxr(v51 + 1, v50));
LABEL_42:
                v52 = (unint64_t *)&v45->__shared_owners_;
                do
                  v53 = __ldaxr(v52);
                while (__stlxr(v53 - 1, v52));
                if (!v53)
                {
                  ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
                  std::__shared_weak_count::__release_weak(v45);
                }
                v49 = v147;
                if (v147)
                {
LABEL_47:
                  v55 = v49[51];
                  v54 = v49[52];
                  if (v54 != v55)
                  {
                    v56 = 0;
                    v57 = *(_QWORD *)(*((_QWORD *)a1 + 133) + 200);
                    do
                    {
                      v58 = *(_QWORD *)(v55 + 8 * v56);
                      v59 = *(id **)(v58 + 216);
                      v60 = *(id **)(v58 + 224);
                      if (v59 != v60)
                      {
                        do
                        {
                          v61 = *v59;
                          objc_msgSend(v61, "resizeForMultipleAsyncBuffers:", v57);

                          ++v59;
                        }
                        while (v59 != v60);
                        v55 = v49[51];
                        v54 = v49[52];
                      }
                      ++v56;
                    }
                    while (v56 < (v54 - v55) >> 3);
                  }
                  *(_DWORD *)__lk = 0;
                  v62 = v149;
                  for (i = (uint64_t **)*((_QWORD *)std::__tree<std::__value_type<int,std::unordered_set<std::shared_ptr<Espresso::abstract_blob_container>>>,std::__map_value_compare<int,std::__value_type<int,std::unordered_set<std::shared_ptr<Espresso::abstract_blob_container>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::unordered_set<std::shared_ptr<Espresso::abstract_blob_container>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(v149 + 232), 0, __lk)+ 7); i; i = (uint64_t **)*i)
                    (*(void (**)(uint64_t *, _QWORD **))(*i[2] + 168))(i[2], &v150);
                  *(_QWORD *)&v146 = v62;
                  *((_QWORD *)&v146 + 1) = *((_QWORD *)&v149 + 1);
                  if (*((_QWORD *)&v149 + 1))
                  {
                    v64 = (unint64_t *)(*((_QWORD *)&v149 + 1) + 8);
                    do
                      v65 = __ldxr(v64);
                    while (__stxr(v65 + 1, v64));
                  }
                  v66 = (std::__shared_weak_count *)v25[1];
                  v142[0] = *v25;
                  v142[1] = (uint64_t)v66;
                  if (v66)
                  {
                    v67 = (unint64_t *)&v66->__shared_owners_;
                    do
                      v68 = __ldxr(v67);
                    while (__stxr(v68 + 1, v67));
                  }
                  EspressoLight::espresso_plan::__copy_inputs((uint64_t *)&v146, (uint64_t)&v150, 0, v142);
                  if (v66)
                  {
                    v69 = (unint64_t *)&v66->__shared_owners_;
                    do
                      v70 = __ldaxr(v69);
                    while (__stlxr(v70 - 1, v69));
                    if (!v70)
                    {
                      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
                      std::__shared_weak_count::__release_weak(v66);
                    }
                  }
                  v71 = (std::__shared_weak_count *)*((_QWORD *)&v146 + 1);
                  if (*((_QWORD *)&v146 + 1))
                  {
                    v72 = (unint64_t *)(*((_QWORD *)&v146 + 1) + 8);
                    do
                      v73 = __ldaxr(v72);
                    while (__stlxr(v73 - 1, v72));
                    if (!v73)
                    {
                      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
                      std::__shared_weak_count::__release_weak(v71);
                    }
                  }
                  v74 = (uint64_t)v147;
                  v75 = *(void **)(*((_QWORD *)a1 + 133) + 192);
                  *(_QWORD *)__lk = MEMORY[0x1E0C809B0];
                  *(_QWORD *)&__lk[8] = 3321888768;
                  *(_QWORD *)&__lk[16] = ___ZN13EspressoLight13espresso_plan10submit_aneEPU28objcproto17OS_dispatch_queue8NSObjectU13block_pointerFvP21espresso_error_info_tE_block_invoke;
                  *(_QWORD *)&__lk[24] = &unk_1E2DC45B8;
                  *(_QWORD *)&__lk[48] = a1;
                  *(_QWORD *)&__lk[56] = v150;
                  *(_QWORD *)&__lk[64] = v151;
                  if (v151)
                  {
                    v76 = (unint64_t *)&v151->__shared_owners_;
                    do
                      v77 = __ldxr(v76);
                    while (__stxr(v77 + 1, v76));
                  }
                  v140 = v25;
                  v141 = v149;
                  if (*((_QWORD *)&v149 + 1))
                  {
                    v78 = (unint64_t *)(*((_QWORD *)&v149 + 1) + 8);
                    do
                      v79 = __ldxr(v78);
                    while (__stxr(v79 + 1, v78));
                  }
                  v80 = v10;
                  *(_QWORD *)&__lk[32] = v80;
                  v81 = v11;
                  *(_QWORD *)&__lk[40] = v81;
                  Espresso::ANERuntimeEngine::compiler::forward_single_ane_segment(v74, (uint64_t *)&v150, v75, __lk);

                  v82 = (std::__shared_weak_count *)*((_QWORD *)&v141 + 1);
                  if (*((_QWORD *)&v141 + 1))
                  {
                    v83 = (unint64_t *)(*((_QWORD *)&v141 + 1) + 8);
                    do
                      v84 = __ldaxr(v83);
                    while (__stlxr(v84 - 1, v83));
                    if (!v84)
                    {
                      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
                      std::__shared_weak_count::__release_weak(v82);
                    }
                  }
                  v85 = *(std::__shared_weak_count **)&__lk[64];
                  if (*(_QWORD *)&__lk[64])
                  {
                    v86 = (unint64_t *)(*(_QWORD *)&__lk[64] + 8);
                    do
                      v87 = __ldaxr(v86);
                    while (__stlxr(v87 - 1, v86));
                    if (!v87)
                    {
                      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
                      std::__shared_weak_count::__release_weak(v85);
                    }
                  }
                  v88 = v148;
                  if (v148)
                  {
                    v89 = (unint64_t *)&v148->__shared_owners_;
                    do
                      v90 = __ldaxr(v89);
                    while (__stlxr(v90 - 1, v89));
                    if (!v90)
                    {
                      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
                      std::__shared_weak_count::__release_weak(v88);
                    }
                  }
                  v91 = (std::__shared_weak_count *)*((_QWORD *)&v149 + 1);
                  if (*((_QWORD *)&v149 + 1))
                  {
                    v92 = (unint64_t *)(*((_QWORD *)&v149 + 1) + 8);
                    do
                      v93 = __ldaxr(v92);
                    while (__stlxr(v93 - 1, v92));
                    if (!v93)
                    {
                      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
                      std::__shared_weak_count::__release_weak(v91);
                    }
                  }
                  v94 = v151;
                  if (v151)
                  {
                    v95 = (unint64_t *)&v151->__shared_owners_;
                    do
                      v96 = __ldaxr(v95);
                    while (__stlxr(v96 - 1, v95));
                    if (!v96)
                    {
                      ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
                      std::__shared_weak_count::__release_weak(v94);
                    }
                  }
                  Espresso_scoped_signpost::~Espresso_scoped_signpost((Espresso_scoped_signpost *)v152);
                  v97 = (std::__shared_weak_count *)*((_QWORD *)&v143 + 1);
                  if (*((_QWORD *)&v143 + 1))
                  {
                    v98 = (unint64_t *)(*((_QWORD *)&v143 + 1) + 8);
                    do
                      v99 = __ldaxr(v98);
                    while (__stlxr(v99 - 1, v98));
                    if (!v99)
                    {
                      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
                      std::__shared_weak_count::__release_weak(v97);
                    }
                  }

                  goto LABEL_153;
                }
              }
              else
              {
                v147 = 0;
                v148 = 0;
                if (v45)
                  goto LABEL_42;
              }
            }
            else
            {
              v147 = 0;
              v148 = 0;
            }
            Espresso::throw_exception_selector<Espresso::invalid_state_error>("Network missing compiler");
          }
        }
      }
      std::condition_variable::wait((std::condition_variable *)(v26 + 34), (std::unique_lock<std::mutex> *)__lk);
    }
  }
  v100 = v137;
  v101 = v138;
  v102 = (_QWORD *)*((_QWORD *)a1 + 133);
  if (*((_DWORD *)v102 + 40) != 1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
    std::to_string((std::string *)v152, *(_DWORD *)(*((_QWORD *)a1 + 133) + 160));
    v134 = std::string::insert((std::string *)v152, 0, "Inconsistent phase of espresso_plan: ");
    v135 = *(_OWORD *)&v134->__r_.__value_.__l.__data_;
    *(_QWORD *)&__lk[16] = *((_QWORD *)&v134->__r_.__value_.__l + 2);
    *(_OWORD *)__lk = v135;
    v134->__r_.__value_.__l.__size_ = 0;
    v134->__r_.__value_.__r.__words[2] = 0;
    v134->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, (const std::string *)__lk);
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D59458;
    LODWORD(exception[1].__vftable) = -5;
  }
  v103 = *(_QWORD *)v102[3];
  v104 = *(_QWORD **)(v103 + 16);
  v105 = *(std::__shared_weak_count **)(v103 + 24);
  v150 = v104;
  v151 = v105;
  if (v105)
  {
    v106 = (unint64_t *)&v105->__shared_owners_;
    do
      v107 = __ldxr(v106);
    while (__stxr(v107 + 1, v106));
    v108 = (_QWORD *)*((_QWORD *)a1 + 133);
    v103 = *(_QWORD *)v102[3];
  }
  else
  {
    v108 = v102;
  }
  v109 = v108[18];
  v110 = *(unsigned __int8 *)(v103 + 1352);
  __lk[0] = v110;
  memset(&__lk[4], 0, 68);
  if (v110)
  {
    *(_QWORD *)&__lk[8] = v109;
    memset(&__lk[16], 0, 24);
    *(_QWORD *)&__lk[40] = v109;
    memset(&__lk[48], 0, 24);
    *(_DWORD *)&__lk[4] = 723714160;
    kdebug_trace();
  }
  if (!v104
  {
    v149 = 0uLL;
    v132 = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v152, "submit with arguments requires context_metal");
    std::runtime_error::runtime_error(v132, (const std::string *)v152);
    v132->__vftable = (std::runtime_error_vtbl *)&off_1E2D59458;
    LODWORD(v132[1].__vftable) = -1;
  }
  *(_QWORD *)&v149 = v111;
  *((_QWORD *)&v149 + 1) = v105;
  if (v105)
  {
    v112 = (unint64_t *)&v105->__shared_owners_;
    do
      v113 = __ldxr(v112);
    while (__stxr(v113 + 1, v112));
  }
  (*(void (**)(_QWORD **__return_ptr, void *, uint64_t))(*(_QWORD *)v111 + 168))(&v147, v111, a3);
  (*(void (**)(_QWORD *, _QWORD))(*v147 + 48))(v147, *(_QWORD *)v102[3]);
  v114 = (_QWORD *)*((_QWORD *)a1 + 133);
  v146 = *((_OWORD *)v114 + 9);
  v136 = v146;
  v114[18] = 0;
  v114[19] = 0;
  EspressoLight::espresso_plan::create_binding_task(a1);
  EspressoLight::espresso_plan::dispatch_task_on_compute_batch((uint64_t)a1, &v147, (uint64_t ***)&v146);
  v143 = v136;
  if (*((_QWORD *)&v136 + 1))
  {
    v115 = (unint64_t *)(*((_QWORD *)&v136 + 1) + 8);
    do
      v116 = __ldxr(v115);
    while (__stxr(v116 + 1, v115));
  }
  v117 = MEMORY[0x19401D648](v101);
  v145 = v109;
  v152[3] = 0;
  v118 = operator new(0x28uLL);
  *v118 = &off_1E2DAEF30;
  v118[1] = v136;
  v144 = 0;
  v143 = 0uLL;
  v118[2] = *((_QWORD *)&v136 + 1);
  v118[3] = v117;
  v118[4] = v109;
  v152[3] = v118;
  (*(void (**)(_QWORD *, _QWORD **, id, _QWORD *))(*v104 + 8))(v104, &v147, v100, v152);
  v119 = (_QWORD *)v152[3];
  if ((_QWORD *)v152[3] == v152)
  {
    v120 = 4;
    v119 = v152;
  }
  else
  {
    if (!v152[3])
      goto LABEL_132;
    v120 = 5;
  }
  (*(void (**)(void))(*v119 + 8 * v120))();
LABEL_132:
  kdebug_trace();
  (*(void (**)(_QWORD *))(*v147 + 16))(v147);
  if (*((_QWORD *)&v136 + 1))
  {
    v121 = (unint64_t *)(*((_QWORD *)&v136 + 1) + 8);
    do
      v122 = __ldaxr(v121);
    while (__stlxr(v122 - 1, v121));
    if (!v122)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v136 + 1) + 16))(*((_QWORD *)&v136 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v136 + 1));
    }
  }
  v123 = v148;
  if (v148)
  {
    v124 = (unint64_t *)&v148->__shared_owners_;
    do
      v125 = __ldaxr(v124);
    while (__stlxr(v125 - 1, v124));
    if (!v125)
    {
      ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
      std::__shared_weak_count::__release_weak(v123);
    }
  }
  v126 = (std::__shared_weak_count *)*((_QWORD *)&v149 + 1);
  if (*((_QWORD *)&v149 + 1))
  {
    v127 = (unint64_t *)(*((_QWORD *)&v149 + 1) + 8);
    do
      v128 = __ldaxr(v127);
    while (__stlxr(v128 - 1, v127));
    if (!v128)
    {
      ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
      std::__shared_weak_count::__release_weak(v126);
    }
  }
  Espresso_scoped_signpost::~Espresso_scoped_signpost((Espresso_scoped_signpost *)__lk);
  v129 = v151;
  if (v151)
  {
    v130 = (unint64_t *)&v151->__shared_owners_;
    do
      v131 = __ldaxr(v130);
    while (__stlxr(v131 - 1, v130));
    if (!v131)
    {
      ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
      std::__shared_weak_count::__release_weak(v129);
    }
  }

LABEL_153:
}

void sub_1913C0AF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id a11, void *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,char a36,uint64_t a37,char a38)
{
  int v38;
  void *v39;
  void *v40;
  void *v41;
  uint64_t v42;

  if (a18 < 0)
    operator delete(__p);
  if (*(char *)(v42 - 153) < 0)
  {
    operator delete(*(void **)(v42 - 176));
    if ((v38 & 1) == 0)
    {
LABEL_8:

      _Unwind_Resume(a1);
    }
  }
  else if (!v38)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v41);
  goto LABEL_8;
}

void sub_1913C0CA0()
{
  JUMPOUT(0x1913C0D70);
}

void sub_1913C0CB0(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  uint64_t v35;
  uint64_t v36;
  unint64_t v39;
  std::exception_ptr v40;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](&a33);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    if (EspressoLight::espresso_plan::priv_t::multiple_buffers_manager_t::prepare_for_done_to_async_batch((EspressoLight::espresso_plan::priv_t::multiple_buffers_manager_t *)(*(_QWORD *)(v35 + 1064)+ 192), *(_QWORD *)(*(_QWORD *)(v36 - 192) + 80), *(_QWORD *)(*(_QWORD *)(v36 - 192) + 88)))
    {
      restore_internal_storage_for_network(v36 - 192, 0, &a35);
      EspressoLight::espresso_plan::priv_t::multiple_buffers_manager_t::done_with_async_batch((EspressoLight::espresso_plan::priv_t::multiple_buffers_manager_t *)(*(_QWORD *)(v35 + 1064) + 192), *(_QWORD *)(*(_QWORD *)(v36 - 192) + 80), v39);
    }
    std::current_exception();
    v40.__ptr_ = &a33;
    std::rethrow_exception(v40);
    sub_1913C0D2C();
  }
  JUMPOUT(0x1913C0D48);
}

void sub_1913C0CBC()
{
  void *v0;

  JUMPOUT(0x1913C0CC8);
}

void sub_1913C0D30(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,std::exception_ptr a33)
{
  std::exception_ptr::~exception_ptr(&a33);
  __cxa_end_catch();
  JUMPOUT(0x1913C0D48);
}

void sub_1913C0D84(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void EspressoLight::espresso_plan::bind_input_vimagebuffer_argb8()
{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Not implemented.");
  __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
}

void sub_1913C0DDC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t EspressoLight::espresso_plan::bind_direct_cvpixelbuffer(EspressoLight::espresso_plan *this, int a2, char *a3, __CVBuffer *a4)
{
  uint64_t v6;
  uint64_t v8;
  __int128 v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  char v14;
  char *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::runtime_error *exception;
  std::string *v25;
  __int128 v26;
  std::runtime_error *v27;
  std::runtime_error *v28;
  std::runtime_error *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  __int128 v32;
  std::string __p;
  std::string v34;
  int v35;

  v35 = a2;
  v6 = *((_QWORD *)this + 133);
  if (*(_DWORD *)(v6 + 160) != 1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
    std::to_string(&__p, *(_DWORD *)(*((_QWORD *)this + 133) + 160));
    v25 = std::string::insert(&__p, 0, "Inconsistent phase of espresso_plan: ");
    v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    v34.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v34);
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D59458;
    LODWORD(exception[1].__vftable) = -5;
  }
  EspressoLight::espresso_plan::default_blob_name_if_null(&v34, (_QWORD *)v6, a2, 0, a3);
  v8 = *(_QWORD *)(*((_QWORD *)this + 133) + 24);
  if (a2 >= (unint64_t)((*(_QWORD *)(*((_QWORD *)this + 133) + 32) - v8) >> 4))
  {
    v27 = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&__p, "Invalid network_index.");
    std::runtime_error::runtime_error(v27, &__p);
    v27->__vftable = (std::runtime_error_vtbl *)&off_1E2D59458;
    LODWORD(v27[1].__vftable) = -6;
  }
  v9 = *(_OWORD *)(v8 + 16 * a2);
  v32 = v9;
  if (*((_QWORD *)&v9 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v9 + 1) + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  if (!(_QWORD)v9)
  {
    v28 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v28, "Null network found.");
    goto LABEL_31;
  }
  if (!a4)
  {
    v28 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v28, "Pixel buffer must not be null.");
LABEL_31:
    __cxa_throw(v28, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  Espresso::net::get_blob_or_global_with_prefix(v9, &v34, &v30);
  v12 = v30;
  if (!v30)
  {
    v29 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(v29, &__p);
    __cxa_throw(v29, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v13 = operator new(8uLL);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v13;
  *v13 = a4;
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)(v13 + 1);
  __p.__r_.__value_.__r.__words[2] = (std::string::size_type)(v13 + 1);
  v14 = (*(uint64_t (**)(unint64_t, std::string *))(*(_QWORD *)v12 + 160))(v12, &__p);
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if ((v14 & 1) != 0)
  {
    v15 = std::__tree<std::__value_type<int,std::unordered_set<std::shared_ptr<Espresso::abstract_blob_container>>>,std::__map_value_compare<int,std::__value_type<int,std::unordered_set<std::shared_ptr<Espresso::abstract_blob_container>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::unordered_set<std::shared_ptr<Espresso::abstract_blob_container>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*(_QWORD *)(*((_QWORD *)this + 133) + 144) + 232), v35, &v35);
    std::__hash_table<std::shared_ptr<Espresso::abstract_blob_container>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>::__emplace_unique_key_args<std::shared_ptr<Espresso::abstract_blob_container>,std::shared_ptr<Espresso::abstract_blob_container>>((uint64_t)(v15 + 40), v12, (uint64_t)&v30);
    v16 = 0;
  }
  else
  {
    v16 = 4294967290;
  }
  v17 = v31;
  if (v31)
  {
    p_shared_owners = (unint64_t *)&v31->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = (std::__shared_weak_count *)*((_QWORD *)&v32 + 1);
  if (*((_QWORD *)&v32 + 1))
  {
    v21 = (unint64_t *)(*((_QWORD *)&v32 + 1) + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v34.__r_.__value_.__l.__data_);
  return v16;
}

void sub_1913C112C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  void *v25;
  int v26;

  if (a25 < 0)
    operator delete(__p);
  if (a19 < 0)
  {
    operator delete(a14);
    if ((v26 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v26)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v25);
  goto LABEL_8;
}

void EspressoLight::espresso_plan::bind_input_cvpixelbuffer(uint64_t a1, int a2, char *a3, int a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, unsigned __int8 a11)
{
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  float v26;
  uint64_t *v27;
  int v28;
  char *v29;
  int v30;
  uint64_t *v31;
  uint64_t *v32;
  int v34;
  int v35;
  int v36;
  std::runtime_error *v37;
  unsigned int v38;
  void *v43;
  int8x16_t v44;
  BOOL v45;
  BOOL v46;
  int v47;
  int v48;
  unint64_t v49;
  _QWORD *v50;
  char *v51;
  int v52;
  int v53;
  uint64_t **v54;
  uint64_t **v55;
  uint64_t **v56;
  uint64_t *v57;
  uint64_t *v58;
  _QWORD *v59;
  int64_t v60;
  unint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  void *v64;
  uint64_t *v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *p_shared_owners;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::runtime_error *v73;
  std::runtime_error *exception;
  std::string *v75;
  __int128 v76;
  std::runtime_error *v77;
  std::runtime_error *v78;
  uint64_t v79;
  int8x16_t v80;
  int v81;
  int v82;
  unint64_t v83;
  int v84;
  uint64_t *v85;
  uint64_t *v86;
  int v87;
  unsigned int v88;
  int v89;
  int v90;
  __int128 v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  __int128 v94;
  std::string v95;
  std::string v96;
  int v97;

  v97 = a2;
  v18 = a6;
  v19 = *(_QWORD *)(a1 + 1064);
  if (*(_DWORD *)(v19 + 160) != 1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
    std::to_string(&v95, *(_DWORD *)(*(_QWORD *)(a1 + 1064) + 160));
    v75 = std::string::insert(&v95, 0, "Inconsistent phase of espresso_plan: ");
    v76 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
    v96.__r_.__value_.__r.__words[2] = v75->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v96.__r_.__value_.__l.__data_ = v76;
    v75->__r_.__value_.__l.__size_ = 0;
    v75->__r_.__value_.__r.__words[2] = 0;
    v75->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v96);
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D59458;
    LODWORD(exception[1].__vftable) = -5;
  }
  EspressoLight::espresso_plan::default_blob_name_if_null(&v96, (_QWORD *)v19, a2, 0, a3);
  v20 = *(_QWORD *)(*(_QWORD *)(a1 + 1064) + 24);
  if (a2 >= (unint64_t)((*(_QWORD *)(*(_QWORD *)(a1 + 1064) + 32) - v20) >> 4))
  {
    v77 = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v95, "Invalid network_index.");
    std::runtime_error::runtime_error(v77, &v95);
    v77->__vftable = (std::runtime_error_vtbl *)&off_1E2D59458;
    LODWORD(v77[1].__vftable) = -6;
  }
  v21 = *(_OWORD *)(v20 + 16 * a2);
  v94 = v21;
  if (*((_QWORD *)&v21 + 1))
  {
    v22 = (unint64_t *)(*((_QWORD *)&v21 + 1) + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  v24 = v21;
  if (!(_QWORD)v21)
  {
    v73 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v73, "Null network found.");
LABEL_63:
    __cxa_throw(v73, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (!(a5 | v18) || a5 && v18)
  {
    v73 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v73, "Only one of cvpixelbuffer and tex must be set");
    goto LABEL_63;
  }
  Espresso::net::get_blob_or_global_with_prefix(v21, &v96, &v92);
  if (!v92)
  {
    v78 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(v78, &v95);
    __cxa_throw(v78, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v25 = a9;
  v91 = 0uLL;
  v87 = a4;
  if (a8)
  {
    v90 = *(unsigned __int8 *)(a8 + 16);
    v26 = *(float *)(a8 + 12);
    v88 = *(_DWORD *)(a8 + 8);
    v27 = *(uint64_t **)a8;
    if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(_QWORD **)(v24 + 336), &v96))
    {
      v95.__r_.__value_.__r.__words[0] = (std::string::size_type)&v96;
      v28 = *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v24 + 328), &v96, (uint64_t)&std::piecewise_construct, (__int128 **)&v95)+ 32);
    }
    else
    {
      v28 = 0;
    }
    v38 = v88;
    goto LABEL_23;
  }
  if (!std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(_QWORD **)(v24 + 336), &v96))
  {
    v90 = 0;
    v28 = 0;
    v27 = 0;
    v26 = 1.0;
    v38 = 0;
LABEL_23:
    v30 = 0;
    v36 = 0;
    v34 = 0;
    if (a10)
      v35 = 1;
    else
      v35 = v28;
    v32 = 0;
    v31 = (uint64_t *)v38;
    __asm { FMOV            V10.2S, #1.0 }
    v89 = 1;
    goto LABEL_27;
  }
  v95.__r_.__value_.__r.__words[0] = (std::string::size_type)&v96;
  v29 = std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v24 + 328), &v96, (uint64_t)&std::piecewise_construct, (__int128 **)&v95);
  v26 = *((float *)v29 + 14);
  v30 = *((_DWORD *)v29 + 15);
  v89 = *((_DWORD *)v29 + 16);
  v90 = *((_DWORD *)v29 + 17);
  v27 = (uint64_t *)*((_QWORD *)v29 + 9);
  v31 = (uint64_t *)*((_QWORD *)v29 + 10);
  v91 = *(_OWORD *)(v29 + 88);
  _D10 = (uint64_t *)*((_QWORD *)v29 + 13);
  v32 = (uint64_t *)*((_QWORD *)v29 + 14);
  v34 = *((_DWORD *)v29 + 31);
  if (a10)
    v35 = 1;
  else
    v35 = *((_DWORD *)v29 + 32);
  v36 = *((_DWORD *)v29 + 30);
  if (v34 && a9)
  {
    v37 = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v95, "Image pre-processing were pre-compiled, cannot change them now");
    std::runtime_error::runtime_error(v37, &v95);
    v37->__vftable = (std::runtime_error_vtbl *)&off_1E2D59458;
    LODWORD(v37[1].__vftable) = -6;
  }
LABEL_27:
  v85 = v31;
  v86 = v32;
  v84 = v34;
  if (!(a8 | a9))
  {
    v49 = v92;
    v50 = operator new(8uLL);
    v95.__r_.__value_.__r.__words[0] = (std::string::size_type)v50;
    *v50 = a5;
    v95.__r_.__value_.__l.__size_ = (std::string::size_type)(v50 + 1);
    v95.__r_.__value_.__r.__words[2] = (std::string::size_type)(v50 + 1);
    v25 = (*(uint64_t (**)(unint64_t, std::string *))(*(_QWORD *)v49 + 160))(v49, &v95);
    if (v95.__r_.__value_.__r.__words[0])
    {
      v95.__r_.__value_.__l.__size_ = v95.__r_.__value_.__r.__words[0];
      operator delete(v95.__r_.__value_.__l.__data_);
    }
    if (v25)
    {
      v51 = std::__tree<std::__value_type<int,std::unordered_set<std::shared_ptr<Espresso::abstract_blob_container>>>,std::__map_value_compare<int,std::__value_type<int,std::unordered_set<std::shared_ptr<Espresso::abstract_blob_container>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::unordered_set<std::shared_ptr<Espresso::abstract_blob_container>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*(_QWORD *)(*(_QWORD *)(a1 + 1064) + 144) + 232), v97, &v97);
      std::__hash_table<std::shared_ptr<Espresso::abstract_blob_container>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>::__emplace_unique_key_args<std::shared_ptr<Espresso::abstract_blob_container>,std::shared_ptr<Espresso::abstract_blob_container>>((uint64_t)(v51 + 40), v49, (uint64_t)&v92);
      goto LABEL_45;
    }
    v81 = v35;
    v82 = v36;
    v79 = a5;
    v43 = a6;
    v83 = v18;
    v48 = 0;
    v45 = 0;
    v46 = 0;
    v47 = 0;
    v80 = 0u;
    goto LABEL_38;
  }
  v81 = v35;
  v82 = v36;
  v79 = a5;
  v43 = a6;
  v83 = v18;
  if (a9)
  {
    v44 = *(int8x16_t *)(a9 + 20);
    v45 = *(_DWORD *)(a9 + 8) != 0;
    v46 = *(_DWORD *)(a9 + 12) != 0;
    v48 = *(_DWORD *)a9;
    v47 = *(_DWORD *)(a9 + 4);
    v25 = *(_DWORD *)(a9 + 16);
  }
  else
  {
    v47 = 0;
    v46 = 0;
    v45 = 0;
    v48 = 0;
    v44 = 0uLL;
  }
  v80 = vextq_s8(v44, v44, 8uLL);
  if (!a8)
  {
LABEL_38:
    _ZF = ((std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(_QWORD **)(v24 + 336), &v96) == 0) & a11) == 0;
    v52 = v90;
    v53 = v89;
    if (!_ZF)
      v52 = v89;
    goto LABEL_40;
  }
  v52 = v90;
  v53 = v89;
LABEL_40:
  v54 = std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*(_QWORD *)(*(_QWORD *)(a1 + 1064) + 144) + 136), v97, &v97);
  v55 = std::__tree<std::__value_type<std::string,EspressoLight::input_cvpixel_buffers_t>,std::__map_value_compare<std::string,std::__value_type<std::string,EspressoLight::input_cvpixel_buffers_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,EspressoLight::input_cvpixel_buffers_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v54 + 5, &v96, (uint64_t)&v96);
  v56 = v55;
  *((float *)v55 + 14) = v26;
  *((_DWORD *)v55 + 15) = v30;
  *((_DWORD *)v55 + 16) = v53;
  *((_DWORD *)v55 + 17) = v52;
  v55[9] = v27;
  v55[10] = v85;
  *(_OWORD *)(v55 + 11) = v91;
  v55[13] = _D10;
  v55[14] = v86;
  *((_DWORD *)v55 + 30) = v82;
  *((_DWORD *)v55 + 31) = v84;
  *((_DWORD *)v55 + 32) = v81;
  *((_DWORD *)v55 + 34) = v48;
  *((_BYTE *)v55 + 140) = v45;
  *((_BYTE *)v55 + 141) = v46;
  v57 = v55[21];
  v58 = v55[22];
  v59 = v55 + 21;
  *((_DWORD *)v55 + 36) = v47;
  *((_DWORD *)v55 + 37) = v25;
  v60 = (char *)v58 - (char *)v57;
  *(int8x16_t *)(v55 + 19) = v80;
  v18 = v83;
  if ((int)((unint64_t)((char *)v58 - (char *)v57) >> 4) <= v87)
  {
    std::vector<EspressoLight::input_cvpixel_buffers_t::cvpixel_buffer_or_mtltexture>::resize((char **)v55 + 21, v87 + 1);
    v61 = ((v60 << 28) - 0x100000000) >> 32;
    v62 = v56[21];
    if (v61 < ((char *)v56[22] - (char *)v62) >> 4)
    {
      v63 = (16 * v61) | 8;
      do
      {
        v64 = *(void **)((char *)v62 + v63);
        v65 = &v62[2 * v61];
        *v65 = 0;
        v65[1] = 0;

        ++v61;
        v62 = v56[21];
        v63 += 16;
      }
      while (v61 < ((char *)v56[22] - (char *)v62) >> 4);
    }
  }
  v66 = *v59 + 16 * v87;
  *(_QWORD *)v66 = v79;
  objc_storeStrong((id *)(v66 + 8), v43);
LABEL_45:
  v67 = v93;
  if (v93)
  {
    p_shared_owners = (unint64_t *)&v93->__shared_owners_;
    do
      v69 = __ldaxr(p_shared_owners);
    while (__stlxr(v69 - 1, p_shared_owners));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = (std::__shared_weak_count *)*((_QWORD *)&v94 + 1);
  if (*((_QWORD *)&v94 + 1))
  {
    v71 = (unint64_t *)(*((_QWORD *)&v94 + 1) + 8);
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v96.__r_.__value_.__l.__data_);

}

void sub_1913C1950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,char a31)
{
  int v31;
  void *v32;
  uint64_t v33;

  if (*(char *)(v33 - 161) < 0)
  {
    operator delete(*(void **)(v33 - 184));
    if ((v31 & 1) == 0)
    {
LABEL_6:
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a31);
      if (*(char *)(v33 - 137) < 0)
        operator delete(*(void **)(v33 - 160));

      _Unwind_Resume(a1);
    }
  }
  else if (!v31)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v32);
  goto LABEL_6;
}

void EspressoLight::espresso_plan::bind_cvpixelbuffer(_QWORD *a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, __int16 a10)
{
  id v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  __int128 v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  void *v27;
  unint64_t v28;
  _QWORD *v29;
  int v30;
  char *v31;
  uint64_t **v32;
  uint64_t **v33;
  uint64_t **v34;
  _QWORD *v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  void *v40;
  uint64_t *v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *p_shared_owners;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  std::runtime_error *v48;
  std::runtime_error *exception;
  std::string *v50;
  __int128 v51;
  std::runtime_error *v52;
  std::runtime_error *v53;
  id obj;
  id v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  __int128 v58;
  std::string __p;
  std::string v60;
  int v61;

  v61 = a2;
  v18 = a6;
  v19 = a1[133];
  v55 = v18;
  if (*(_DWORD *)(v19 + 160) != 1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
    std::to_string(&__p, *(_DWORD *)(a1[133] + 160));
    v50 = std::string::insert(&__p, 0, "Inconsistent phase of espresso_plan: ");
    v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
    v60.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v51;
    v50->__r_.__value_.__l.__size_ = 0;
    v50->__r_.__value_.__r.__words[2] = 0;
    v50->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v60);
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D59458;
    LODWORD(exception[1].__vftable) = -5;
  }
  v20 = (unint64_t)v18;
  EspressoLight::espresso_plan::default_blob_name_if_null(&v60, (_QWORD *)v19, a2, 0, a3);
  v21 = *(_QWORD *)(a1[133] + 24);
  if ((int)a2 >= (unint64_t)((*(_QWORD *)(a1[133] + 32) - v21) >> 4))
  {
    v52 = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&__p, "Invalid network_index.");
    std::runtime_error::runtime_error(v52, &__p);
    v52->__vftable = (std::runtime_error_vtbl *)&off_1E2D59458;
    LODWORD(v52[1].__vftable) = -6;
  }
  obj = a6;
  v22 = *(_OWORD *)(v21 + 16 * (int)a2);
  v58 = v22;
  v23 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
  if (*((_QWORD *)&v22 + 1))
  {
    v24 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  v26 = v22;
  if (!(_QWORD)v22)
  {
    v48 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v48, "Null network found.");
LABEL_42:
    __cxa_throw(v48, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (!(a5 | v20) || a5 && v20)
  {
    v48 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v48, "Only one of cvpixelbuffer and tex must be set");
    goto LABEL_42;
  }
  if ((_QWORD *)(v22 + 240) != std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(v22 + 232, &v60))
  {
    v27 = v55;
    (*(void (**)(_QWORD *, uint64_t, char *, uint64_t, uint64_t, id, uint64_t, uint64_t, uint64_t, __int16, id))(*a1 + 224))(a1, a2, a3, a4, a5, v55, a7, a8, a9, a10, obj);
    if (!v23)
      goto LABEL_35;
    goto LABEL_31;
  }
  if ((_QWORD *)(v26 + 264) == std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(v26 + 256, &v60))Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Espresso: cvpixelbuffer bind - blob is neither input or output to network");
  Espresso::net::get_blob_or_global_with_prefix(v26, &v60, &v56);
  v28 = v56;
  if (!v56)
  {
    v53 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(v53, &__p);
    __cxa_throw(v53, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v27 = v55;
  if (a8 | a9)
    goto LABEL_20;
  v29 = operator new(8uLL);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v29;
  *v29 = a5;
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)(v29 + 1);
  __p.__r_.__value_.__r.__words[2] = (std::string::size_type)(v29 + 1);
  v30 = (*(uint64_t (**)(unint64_t, std::string *))(*(_QWORD *)v28 + 160))(v28, &__p);
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (!v30)
  {
LABEL_20:
    v32 = std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*(_QWORD *)(a1[133] + 144) + 160), v61, &v61);
    v33 = std::__tree<std::__value_type<std::string,EspressoLight::input_cvpixel_buffers_t>,std::__map_value_compare<std::string,std::__value_type<std::string,EspressoLight::input_cvpixel_buffers_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,EspressoLight::input_cvpixel_buffers_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v32 + 5, &v60, (uint64_t)&v60);
    v34 = v33;
    v35 = v33 + 21;
    v36 = (char *)v33[22] - (char *)v33[21];
    if ((int)(v36 >> 4) <= (int)a4)
    {
      std::vector<EspressoLight::input_cvpixel_buffers_t::cvpixel_buffer_or_mtltexture>::resize((char **)v33 + 21, (int)a4 + 1);
      v37 = (uint64_t)((v36 << 28) - 0x100000000) >> 32;
      v38 = v34[21];
      if (v37 < ((char *)v34[22] - (char *)v38) >> 4)
      {
        v39 = (16 * v37) | 8;
        do
        {
          v40 = *(void **)((char *)v38 + v39);
          v41 = &v38[2 * v37];
          *v41 = 0;
          v41[1] = 0;

          ++v37;
          v38 = v34[21];
          v39 += 16;
        }
        while (v37 < ((char *)v34[22] - (char *)v38) >> 4);
      }
    }
    v42 = *v35 + 16 * (int)a4;
    *(_QWORD *)v42 = a5;
    objc_storeStrong((id *)(v42 + 8), obj);
    v27 = v55;
  }
  else
  {
    v31 = std::__tree<std::__value_type<int,std::unordered_set<std::shared_ptr<Espresso::abstract_blob_container>>>,std::__map_value_compare<int,std::__value_type<int,std::unordered_set<std::shared_ptr<Espresso::abstract_blob_container>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::unordered_set<std::shared_ptr<Espresso::abstract_blob_container>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*(_QWORD *)(a1[133] + 144) + 232), v61, &v61);
    std::__hash_table<std::shared_ptr<Espresso::abstract_blob_container>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>::__emplace_unique_key_args<std::shared_ptr<Espresso::abstract_blob_container>,std::shared_ptr<Espresso::abstract_blob_container>>((uint64_t)(v31 + 40), v28, (uint64_t)&v56);
  }
  v43 = v57;
  if (v57)
  {
    p_shared_owners = (unint64_t *)&v57->__shared_owners_;
    do
      v45 = __ldaxr(p_shared_owners);
    while (__stlxr(v45 - 1, p_shared_owners));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  v23 = (std::__shared_weak_count *)*((_QWORD *)&v58 + 1);
  if (*((_QWORD *)&v58 + 1))
  {
LABEL_31:
    v46 = (unint64_t *)&v23->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
LABEL_35:
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v60.__r_.__value_.__l.__data_);

}

void sub_1913C1F80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  if (a29 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void Espresso::get_internal_context(uint64_t **this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  if (!this)
    goto LABEL_8;
  if (*this != (uint64_t *)0x50FBC8A8A6F7B03CLL)
  {
    EspressoLight::very_bad_client((EspressoLight *)this);
LABEL_8:
    *a2 = 0;
    a2[1] = 0;
    return;
  }
  v4 = this[2];
  v6 = *v4;
  v5 = v4[1];
  *a2 = v6;
  a2[1] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
}

void EspressoLight::espresso_plan::add_network(char const*,espresso_storage_type_t,std::shared_ptr<Espresso::net>)::$_0::operator()(uint64_t *a1)
{
  uint64_t v1;
  _QWORD *v2;
  _BYTE *v4;
  void *v5;
  id v6;
  uint64_t **context_with_args;
  uint64_t **v8;
  uint64_t v9;
  uint64_t *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  Espresso *v18;
  const char *v19;
  NSObject *v20;
  _QWORD *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  void *__p[2];
  char v32;
  __int128 v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  __int128 v36;

  v1 = *a1;
  v2 = *(_QWORD **)(*a1 + 1064);
  if (v2[4] == v2[3])
  {
    if ((***(unsigned int (****)(_QWORD))(*v2 + 8))(*(_QWORD *)(*v2 + 8)) == 50000
      && (v4 = **(_BYTE ***)(v1 + 1064), v4[120])
      && (v5 = (void *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v4 + 120))(v4),
          objc_msgSend(v5, "device"),
          (id)objc_claimAutoreleasedReturnValue(),
          v5))
    {
      v6 = v5;
      context_with_args = (uint64_t **)espresso_create_context_with_args(0xC352u, 0xFFFFFFFF, v6, 0);
    }
    else
    {
      v6 = 0;
      context_with_args = (uint64_t **)espresso_create_context(0xC352u, 0xFFFFFFFD);
    }
    v8 = context_with_args;
    Espresso::get_internal_context(context_with_args, &v36);
    v9 = v36;
    if (!(_QWORD)v36)
      Espresso::throw_exception_selector<Espresso::invalid_argument_error>("The context is invalid.");
    v10 = *(uint64_t **)(v1 + 1064);
    v12 = *v10;
    v11 = (std::__shared_weak_count *)v10[1];
    v34 = v12;
    v35 = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v9 + 112))(v9, &v34);
    v15 = v35;
    if (v35)
    {
      v16 = (unint64_t *)&v35->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    v18 = (Espresso *)std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](*(_QWORD *)(v1 + 1064), &v36);
    *(_QWORD *)(*(_QWORD *)(v1 + 1064) + 16) = v8;
    if (*(_DWORD *)a1[1])
    {
      Espresso::espresso_os_log_subsystem(v18, v19);
      v20 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(__p[0]) = 0;
        _os_log_debug_impl(&dword_190DAF000, v20, OS_LOG_TYPE_DEBUG, "ESPRESSO_ENGINE_METAL_MPS_BUFFERS forcing FP32 compute path.", (uint8_t *)__p, 2u);
      }

    }
    v21 = (_QWORD *)a1[2];
    if (*v21)
    {
      Espresso::reload_network_on_context(v21, *(uint64_t **)(v1 + 1064), 0, (uint64_t *)__p);
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1[3], (__int128 *)__p);
      v22 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v23 = (unint64_t *)((char *)__p[1] + 8);
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(__p, *(char **)a1[4]);
      Espresso::load_network((uint64_t)__p, *(uint64_t **)(v1 + 1064), 0, *(unsigned __int8 *)a1[5], (uint64_t *)&v33);
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1[3], &v33);
      v25 = (std::__shared_weak_count *)*((_QWORD *)&v33 + 1);
      if (*((_QWORD *)&v33 + 1))
      {
        v26 = (unint64_t *)(*((_QWORD *)&v33 + 1) + 8);
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
      if (v32 < 0)
        operator delete(__p[0]);
    }
    v28 = (std::__shared_weak_count *)*((_QWORD *)&v36 + 1);
    if (*((_QWORD *)&v36 + 1))
    {
      v29 = (unint64_t *)(*((_QWORD *)&v36 + 1) + 8);
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }

  }
}

void sub_1913C2418(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::espresso_plan_tracer>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBC0E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::espresso_plan_tracer>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBC0E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::espresso_plan_tracer>::__on_zero_shared(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 40);
  std::vector<std::unique_ptr<Espresso::tracer>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void std::vector<std::unique_ptr<Espresso::tracer>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  Espresso::tracer **v2;
  Espresso::tracer **v4;
  void *v5;

  v1 = *a1;
  v2 = (Espresso::tracer **)**a1;
  if (v2)
  {
    v4 = (Espresso::tracer **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
        std::unique_ptr<Espresso::tracer>::reset[abi:ne180100](--v4);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

Espresso::tracer *std::unique_ptr<Espresso::tracer>::reset[abi:ne180100](Espresso::tracer **a1)
{
  Espresso::tracer *result;

  result = *a1;
  *a1 = 0;
  if (result)
  {
    Espresso::tracer::~tracer(result);
    JUMPOUT(0x19401CD90);
  }
  return result;
}

uint64_t espresso_create_context_with_args(unsigned int a1, unsigned int a2, void *a3, const void *a4)
{
  void *v6;
  int v7;
  Espresso *v8;
  uint64_t v9;
  unsigned int v11;
  unsigned int v12;

  v11 = a2;
  v12 = a1;
  v6 = (void *)MEMORY[0x19401D4A4]();
  adjust_espresso_engine((Espresso *)&v12, (char *)&v11);
  v8 = (Espresso *)v11;
  v7 = v12;
  if (pre_validate_context(v12))
  {
    v9 = operator new();
    EspressoLight::espresso_context::espresso_context(v9, v7, v8, a3, a4);
  }
  else
  {
    v9 = 0;
  }
  objc_autoreleasePoolPop(v6);
  return v9;
}

void sub_1913C266C()
{
  __cxa_end_catch();
  JUMPOUT(0x1913C2674);
}

void adjust_espresso_engine(Espresso *a1, char *a2)
{
  BOOL v4;
  NSObject *v5;
  int v6;
  int v7;
  _DWORD v8[2];
  __int16 v9;
  int v10;
  __int16 v11;
  int v12;
  __int16 v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (Espresso::hardware::is_virtual_machine(void)::onceToken != -1)
    dispatch_once(&Espresso::hardware::is_virtual_machine(void)::onceToken, &__block_literal_global_24_4921);
  if (Espresso::hardware::is_virtual_machine(void)::result)
    v4 = *(_DWORD *)a1 == 0;
  else
    v4 = 1;
  if (!v4)
  {
    Espresso::espresso_os_log_subsystem(a1, a2);
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      v6 = *(_DWORD *)a1;
      v7 = *(_DWORD *)a2;
      v8[0] = 67109888;
      v8[1] = v6;
      v9 = 1024;
      v10 = v7;
      v11 = 1024;
      v12 = 0;
      v13 = 1024;
      v14 = -1;
      _os_log_impl(&dword_190DAF000, v5, OS_LOG_TYPE_INFO, "VM detected: Adjusted requested context from (eng=%d dev=%d) to (eng=%d dev=%d)", (uint8_t *)v8, 0x1Au);
    }

    *(_DWORD *)a1 = 0;
    *(_DWORD *)a2 = -1;
  }
}

uint64_t EspressoLight::handle_ex_(EspressoLight *this, std::exception *a2)
{
  const char *v3;
  char *v4;
  const char *v5;
  NSObject *v6;
  unsigned int *v7;
  void *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v3 = (const char *)(*(uint64_t (**)(EspressoLight *, std::exception *))(*(_QWORD *)this + 16))(this, a2);
  v4 = strncpy(errbuff, v3, 0x3FFuLL);
  err = 1;
  Espresso::espresso_os_log_subsystem((Espresso *)v4, v5);
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    v10 = (*(uint64_t (**)(EspressoLight *))(*(_QWORD *)this + 16))(this);
    v11 = 136315138;
    v12 = v10;
    _os_log_error_impl(&dword_190DAF000, v6, OS_LOG_TYPE_ERROR, "[Espresso::handle_ex_] exception=%s", (uint8_t *)&v11, 0xCu);
  }

  if (v7)
    return v7[4];
  if (v9)
    return (*(uint64_t (**)(void *))(*(_QWORD *)v9 + 24))(v9);
  else
    return 0xFFFFFFFFLL;
}

uint64_t std::unique_ptr<EspressoLight::espresso_context::priv_t>::reset[abi:ne180100](uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  *a1 = 0;
  if (result)
  {
    std::shared_ptr<void>::~shared_ptr[abi:ne180100](result);
    JUMPOUT(0x19401CD90);
  }
  return result;
}

void std::__shared_ptr_emplace<Espresso::CVAEngine::context>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC1B08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::CVAEngine::context>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC1B08;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::CVAEngine::context>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 48))(a1 + 24);
}

void std::__shared_ptr_emplace<Espresso::HXEngine::context>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC12F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::HXEngine::context>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC12F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::HXEngine::context>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 48))(a1 + 24);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::context>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB7FF0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::context>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB7FF0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSGraphEngine::context>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 48))(a1 + 24);
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::context>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB99F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::context>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB99F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::V9Engine::context>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC1830;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::V9Engine::context>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC1830;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::V9Engine::context>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 48))(a1 + 24);
}

void std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::context>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBB390;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::context>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBB390;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::context>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 48))(a1 + 24);
}

void EspressoLight::very_bad_client(EspressoLight *this)
{
  uint8_t v1[16];

  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)v1 = 0;
    _os_log_fault_impl(&dword_190DAF000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "The client use of the API is invalid and dangerous.", v1, 2u);
  }
}

uint64_t espresso_deinitialize(Espresso::abstract_engine_factory *a1, const char *a2)
{
  Espresso::generic_factory_t *v2;
  uint64_t result;
  NSObject *v4;
  uint8_t v5[16];

  if ((espresso_initialize_was_called & 1) != 0)
  {
    v2 = (Espresso::generic_factory_t *)Espresso::abstract_engine_factory::destroy_singleton(a1);
    Espresso::generic_factory_t::destroy_singleton(v2);
    result = 0;
    espresso_initialize_was_called = 0;
  }
  else
  {
    Espresso::espresso_os_log_subsystem(a1, a2);
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v5 = 0;
      _os_log_error_impl(&dword_190DAF000, v4, OS_LOG_TYPE_ERROR, "espresso_destroy_singletons called without calling espresso_create_singletons first", v5, 2u);
    }

    return 4294967283;
  }
  return result;
}

void std::__hash_table<std::shared_ptr<Espresso::abstract_blob_container>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>::__emplace_unique_key_args<std::shared_ptr<Espresso::abstract_blob_container>,std::shared_ptr<Espresso::abstract_blob_container>>(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD *v11;
  _QWORD *i;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v25[2];
  char v26;

  v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = v8 & (v9 - 1);
    }
    v11 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      for (i = (_QWORD *)*v11; i; i = (_QWORD *)*i)
      {
        v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == a2)
            return;
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9)
              v13 %= v9;
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3)
            break;
        }
      }
    }
  }
  v14 = (_QWORD *)(a1 + 16);
  v15 = operator new(0x20uLL);
  v25[0] = v15;
  v25[1] = a1 + 16;
  *v15 = 0;
  v15[1] = v8;
  *((_OWORD *)v15 + 1) = *(_OWORD *)a3;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v26 = 1;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v9 || (float)(v17 * (float)v9) < v16)
  {
    v18 = 1;
    if (v9 >= 3)
      v18 = (v9 & (v9 - 1)) != 0;
    v19 = v18 | (2 * v9);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__rehash<true>(a1, v21);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v22 = *(_QWORD *)a1;
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v23)
  {
    *v15 = *v23;
LABEL_38:
    *v23 = v15;
    goto LABEL_39;
  }
  *v15 = *v14;
  *v14 = v15;
  *(_QWORD *)(v22 + 8 * v3) = v14;
  if (*v15)
  {
    v24 = *(_QWORD *)(*v15 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v24 >= v9)
        v24 %= v9;
    }
    else
    {
      v24 &= v9 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_38;
  }
LABEL_39:
  v25[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::shared_ptr<Espresso::abstract_blob_container>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::shared_ptr<Espresso::abstract_blob_container>,void *>>>>::reset[abi:ne180100]((uint64_t)v25);
}

void sub_1913C2E20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::shared_ptr<Espresso::abstract_blob_container>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::shared_ptr<Espresso::abstract_blob_container>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<std::string,EspressoLight::input_cvpixel_buffers_t>,std::__map_value_compare<std::string,std::__value_type<std::string,EspressoLight::input_cvpixel_buffers_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,EspressoLight::input_cvpixel_buffers_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, _QWORD *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t **v8;
  _QWORD *v10;
  char *v11;
  std::string *v12;
  uint64_t *v18;
  uint64_t *v19;
  _QWORD v21[2];
  char v22;

  v6 = a1 + 1;
  v5 = a1[1];
  v7 = a1 + 1;
  v8 = a1 + 1;
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v10 = v5 + 4;
        if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, v5 + 4))
          break;
        v5 = *v7;
        v8 = v7;
        if (!*v7)
          goto LABEL_7;
      }
      if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v10, a2))
        return v7;
      v8 = v7 + 1;
      v5 = v7[1];
      if (!v5)
        goto LABEL_7;
    }
  }
  else
  {
LABEL_7:
    v11 = (char *)operator new(0xC0uLL);
    v21[0] = v11;
    v21[1] = v6;
    v22 = 0;
    v12 = (std::string *)(v11 + 32);
    if (*(char *)(a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
    }
    else
    {
      *(_OWORD *)&v12->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
      *((_QWORD *)v11 + 6) = *(_QWORD *)(a3 + 16);
    }
    *((_QWORD *)v11 + 16) = 0;
    *((_QWORD *)v11 + 17) = 0;
    *((_DWORD *)v11 + 14) = 1065353216;
    *(_QWORD *)(v11 + 76) = 0;
    *(_QWORD *)(v11 + 68) = 0;
    *((_DWORD *)v11 + 21) = 0;
    *(_QWORD *)(v11 + 60) = 0x100000000;
    *((_QWORD *)v11 + 14) = 0;
    *((_QWORD *)v11 + 15) = 0;
    *((_QWORD *)v11 + 11) = 0;
    *((_QWORD *)v11 + 12) = 0;
    __asm { FMOV            V0.2S, #1.0 }
    *((_QWORD *)v11 + 13) = _D0;
    *((_OWORD *)v11 + 9) = 0u;
    *((_OWORD *)v11 + 10) = 0u;
    *((_OWORD *)v11 + 11) = 0u;
    v22 = 1;
    *(_QWORD *)v11 = 0;
    *((_QWORD *)v11 + 1) = 0;
    *((_QWORD *)v11 + 2) = v7;
    *v8 = (uint64_t *)v11;
    v18 = (uint64_t *)v11;
    v19 = (uint64_t *)**a1;
    if (v19)
    {
      *a1 = v19;
      v18 = *v8;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v18);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    v21[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,EspressoLight::input_cvpixel_buffers_t>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,EspressoLight::input_cvpixel_buffers_t>,void *>>>>::reset[abi:ne180100]((uint64_t)v21);
  }
  return (uint64_t **)v11;
}

void sub_1913C2F9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,EspressoLight::input_cvpixel_buffers_t>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,EspressoLight::input_cvpixel_buffers_t>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<EspressoLight::input_cvpixel_buffers_t::cvpixel_buffer_or_mtltexture>::resize(char **a1, unint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  unint64_t v16;
  char *v17;
  __int128 v18;
  int64x2_t v19;
  char *i;
  uint64_t v21;
  void *v22;
  void *v23;

  v3 = *a1;
  v4 = a1[1];
  v5 = (v4 - *a1) >> 4;
  if (a2 <= v5)
  {
    if (a2 < v5)
    {
      for (i = &v3[16 * a2]; v4 != i; v4 -= 16)

      a1[1] = i;
    }
  }
  else
  {
    v6 = a2 - v5;
    v7 = a1[2];
    if (a2 - v5 <= (v7 - v4) >> 4)
    {
      bzero(a1[1], 16 * v6);
      a1[1] = &v4[16 * v6];
    }
    else
    {
      if (a2 >> 60)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v8 = v7 - v3;
      v9 = v8 >> 3;
      if (v8 >> 3 <= a2)
        v9 = a2;
      if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
        v10 = 0xFFFFFFFFFFFFFFFLL;
      else
        v10 = v9;
      v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      v12 = &v11[16 * v5];
      v14 = &v11[16 * v13];
      bzero(v12, 16 * v6);
      v15 = &v12[16 * v6];
      v17 = *a1;
      v16 = (unint64_t)a1[1];
      if ((char *)v16 == *a1)
      {
        v19 = vdupq_n_s64(v16);
      }
      else
      {
        do
        {
          v18 = *(_OWORD *)(v16 - 16);
          v16 -= 16;
          *(_QWORD *)(v16 + 8) = 0;
          *((_OWORD *)v12 - 1) = v18;
          v12 -= 16;
        }
        while ((char *)v16 != v17);
        v19 = *(int64x2_t *)a1;
      }
      *a1 = v12;
      a1[1] = v15;
      a1[2] = v14;
      v21 = v19.i64[1];
      v22 = (void *)v19.i64[0];
      if (v19.i64[1] != v19.i64[0])
      {
        do
        {
          v23 = (void *)(v21 - 16);

          v21 = (uint64_t)v23;
        }
        while (v23 != v22);
      }
      if (v22)
        operator delete(v22);
    }
  }
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,EspressoLight::input_cvpixel_buffers_t>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,EspressoLight::input_cvpixel_buffers_t>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,EspressoLight::input_cvpixel_buffers_t>,0>((uint64_t)v1 + 32);
    operator delete(v1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,EspressoLight::input_cvpixel_buffers_t>,0>(uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 136);
  std::vector<EspressoLight::input_cvpixel_buffers_t::cvpixel_buffer_or_mtltexture>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::vector<EspressoLight::input_cvpixel_buffers_t::cvpixel_buffer_or_mtltexture>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  id *v2;
  id *v4;
  void *v5;
  id *v6;

  v1 = *a1;
  v2 = (id *)**a1;
  if (v2)
  {
    v4 = (id *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 2;

        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<vImage_Buffer>::resize(char **a1, unint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  __int128 v18;
  char *v19;

  v3 = *a1;
  v4 = a1[1];
  v5 = (v4 - *a1) >> 5;
  if (a2 <= v5)
  {
    if (a2 >= v5)
      return;
    v19 = &v3[32 * a2];
    goto LABEL_17;
  }
  v6 = a2 - v5;
  v7 = a1[2];
  if (a2 - v5 <= (v7 - v4) >> 5)
  {
    bzero(a1[1], 32 * v6);
    v19 = &v4[32 * v6];
LABEL_17:
    a1[1] = v19;
    return;
  }
  if (a2 >> 59)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  v8 = v7 - v3;
  v9 = v8 >> 4;
  if (v8 >> 4 <= a2)
    v9 = a2;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0)
    v10 = 0x7FFFFFFFFFFFFFFLL;
  else
    v10 = v9;
  v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::blob_container::ane_blob_mapped_shape>>(v10);
  v12 = &v11[32 * v5];
  v14 = &v11[32 * v13];
  bzero(v12, 32 * v6);
  v15 = &v12[32 * v6];
  v17 = *a1;
  v16 = a1[1];
  if (v16 != *a1)
  {
    do
    {
      v18 = *((_OWORD *)v16 - 1);
      *((_OWORD *)v12 - 2) = *((_OWORD *)v16 - 2);
      *((_OWORD *)v12 - 1) = v18;
      v12 -= 32;
      v16 -= 32;
    }
    while (v16 != v17);
    v16 = *a1;
  }
  *a1 = v12;
  a1[1] = v15;
  a1[2] = v14;
  if (v16)
    operator delete(v16);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,EspressoLight::input_image_buffers>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,EspressoLight::input_image_buffers>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,EspressoLight::input_image_buffers>,0>((uint64_t)v1 + 32);
    operator delete(v1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,EspressoLight::input_image_buffers>,0>(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 112);
  if (v2)
  {
    *(_QWORD *)(a1 + 120) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t std::__function::__func<EspressoLight::espresso_plan::submit_gpu(NSObject  {objcproto17OS_dispatch_queue}*,void *,void *,void({block_pointer})(espresso_error_info_t *))::$_0,std::allocator<EspressoLight::espresso_plan::submit_gpu(NSObject  {objcproto17OS_dispatch_queue}*,void *,void *,void({block_pointer})(espresso_error_info_t *))::$_0>,void ()(Espresso::execution_error_t const&)>::~__func(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_1E2DAEF30;
  v2 = a1 + 8;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v2);
  return a1;
}

void std::__function::__func<EspressoLight::espresso_plan::submit_gpu(NSObject  {objcproto17OS_dispatch_queue}*,void *,void *,void({block_pointer})(espresso_error_info_t *))::$_0,std::allocator<EspressoLight::espresso_plan::submit_gpu(NSObject  {objcproto17OS_dispatch_queue}*,void *,void *,void({block_pointer})(espresso_error_info_t *))::$_0>,void ()(Espresso::execution_error_t const&)>::~__func(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)a1 = &off_1E2DAEF30;
  v1 = a1 + 8;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1);
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<EspressoLight::espresso_plan::submit_gpu(NSObject  {objcproto17OS_dispatch_queue}*,void *,void *,void({block_pointer})(espresso_error_info_t *))::$_0,std::allocator<EspressoLight::espresso_plan::submit_gpu(NSObject  {objcproto17OS_dispatch_queue}*,void *,void *,void({block_pointer})(espresso_error_info_t *))::$_0>,void ()(Espresso::execution_error_t const&)>::__clone(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;

  v1 = (_QWORD *)(a1 + 8);
  v2 = operator new(0x28uLL);
  *v2 = &off_1E2DAEF30;
  std::__compressed_pair_elem<EspressoLight::espresso_plan::submit_gpu(NSObject  {objcproto17OS_dispatch_queue}*,void *,void *,void({block_pointer})(espresso_error_info_t *))::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<EspressoLight::espresso_plan::submit_gpu(NSObject  {objcproto17OS_dispatch_queue}*,void *,void *,void({block_pointer})(espresso_error_info_t *))::$_0 const&,0ul>(v2 + 1, v1);
  return v2;
}

_QWORD *std::__function::__func<EspressoLight::espresso_plan::submit_gpu(NSObject  {objcproto17OS_dispatch_queue}*,void *,void *,void({block_pointer})(espresso_error_info_t *))::$_0,std::allocator<EspressoLight::espresso_plan::submit_gpu(NSObject  {objcproto17OS_dispatch_queue}*,void *,void *,void({block_pointer})(espresso_error_info_t *))::$_0>,void ()(Espresso::execution_error_t const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2DAEF30;
  return std::__compressed_pair_elem<EspressoLight::espresso_plan::submit_gpu(NSObject  {objcproto17OS_dispatch_queue}*,void *,void *,void({block_pointer})(espresso_error_info_t *))::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<EspressoLight::espresso_plan::submit_gpu(NSObject  {objcproto17OS_dispatch_queue}*,void *,void *,void({block_pointer})(espresso_error_info_t *))::$_0 const&,0ul>(a2 + 1, (_QWORD *)(a1 + 8));
}

uint64_t std::__function::__func<EspressoLight::espresso_plan::submit_gpu(NSObject  {objcproto17OS_dispatch_queue}*,void *,void *,void({block_pointer})(espresso_error_info_t *))::$_0,std::allocator<EspressoLight::espresso_plan::submit_gpu(NSObject  {objcproto17OS_dispatch_queue}*,void *,void *,void({block_pointer})(espresso_error_info_t *))::$_0>,void ()(Espresso::execution_error_t const&)>::destroy(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 + 8;

  return std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1);
}

void std::__function::__func<EspressoLight::espresso_plan::submit_gpu(NSObject  {objcproto17OS_dispatch_queue}*,void *,void *,void({block_pointer})(espresso_error_info_t *))::$_0,std::allocator<EspressoLight::espresso_plan::submit_gpu(NSObject  {objcproto17OS_dispatch_queue}*,void *,void *,void({block_pointer})(espresso_error_info_t *))::$_0>,void ()(Espresso::execution_error_t const&)>::destroy_deallocate(id *a1)
{
  uint64_t v2;

  v2 = (uint64_t)(a1 + 1);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v2);
  operator delete(a1);
}

uint64_t std::__function::__func<EspressoLight::espresso_plan::submit_gpu(NSObject  {objcproto17OS_dispatch_queue}*,void *,void *,void({block_pointer})(espresso_error_info_t *))::$_0,std::allocator<EspressoLight::espresso_plan::submit_gpu(NSObject  {objcproto17OS_dispatch_queue}*,void *,void *,void({block_pointer})(espresso_error_info_t *))::$_0>,void ()(Espresso::execution_error_t const&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[2];

  kdebug_trace();
  result = *(_QWORD *)(a1 + 24);
  if (result)
  {
    if (*(_DWORD *)a2)
    {
      v7 = *(_QWORD *)(a2 + 8);
      v6 = a2 + 8;
      v5 = v7;
      v8[0] = 0xFFFFFFFF00000001;
      if (*(char *)(v6 + 23) >= 0)
        v5 = v6;
      v8[1] = v5;
      return (*(uint64_t (**)(uint64_t, _QWORD *))(result + 16))(result, v8);
    }
    else
    {
      return (*(uint64_t (**)(uint64_t, _QWORD))(result + 16))(result, 0);
    }
  }
  return result;
}

uint64_t std::__function::__func<EspressoLight::espresso_plan::submit_gpu(NSObject  {objcproto17OS_dispatch_queue}*,void *,void *,void({block_pointer})(espresso_error_info_t *))::$_0,std::allocator<EspressoLight::espresso_plan::submit_gpu(NSObject  {objcproto17OS_dispatch_queue}*,void *,void *,void({block_pointer})(espresso_error_info_t *))::$_0>,void ()(Espresso::execution_error_t const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN13EspressoLight13espresso_plan10submit_gpuEPU28objcproto17OS_dispatch_queue8NSObjectPvS4_U13block_pointerFvP21espresso_error_info_tEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<EspressoLight::espresso_plan::submit_gpu(NSObject  {objcproto17OS_dispatch_queue}*,void *,void *,void({block_pointer})(espresso_error_info_t *))::$_0,std::allocator<EspressoLight::espresso_plan::submit_gpu(NSObject  {objcproto17OS_dispatch_queue}*,void *,void *,void({block_pointer})(espresso_error_info_t *))::$_0>,void ()(Espresso::execution_error_t const&)>::target_type()
{
}

_QWORD *std::__compressed_pair_elem<EspressoLight::espresso_plan::submit_gpu(NSObject  {objcproto17OS_dispatch_queue}*,void *,void *,void({block_pointer})(espresso_error_info_t *))::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<EspressoLight::espresso_plan::submit_gpu(NSObject  {objcproto17OS_dispatch_queue}*,void *,void *,void({block_pointer})(espresso_error_info_t *))::$_0 const&,0ul>(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = MEMORY[0x19401D648](a2[2]);
  v8 = a2[3];
  a1[2] = v7;
  a1[3] = v8;
  return a1;
}

char *std::__tree<std::__value_type<std::string,espresso_buffer_t>,std::__map_value_compare<std::string,std::__value_type<std::string,espresso_buffer_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,espresso_buffer_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, _QWORD *a2, __int128 **a3)
{
  void **v5;
  char *v6;
  uint64_t **v7;
  std::string *v8;
  __int128 *v9;
  __int128 v10;
  uint64_t v12;

  v5 = (void **)std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__find_equal<std::string>((uint64_t)a1, &v12, a2);
  v6 = (char *)*v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = (char *)operator new(0xE0uLL);
    v8 = (std::string *)(v6 + 32);
    v9 = *a3;
    if (*((char *)*a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)v9, *((_QWORD *)v9 + 1));
    }
    else
    {
      v10 = *v9;
      *((_QWORD *)v6 + 6) = *((_QWORD *)v9 + 2);
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v10;
    }
    *((_QWORD *)v6 + 27) = 0;
    *(_OWORD *)(v6 + 200) = 0u;
    *(_OWORD *)(v6 + 184) = 0u;
    *(_OWORD *)(v6 + 168) = 0u;
    *(_OWORD *)(v6 + 152) = 0u;
    *(_OWORD *)(v6 + 136) = 0u;
    *(_OWORD *)(v6 + 120) = 0u;
    *(_OWORD *)(v6 + 104) = 0u;
    *(_OWORD *)(v6 + 88) = 0u;
    *(_OWORD *)(v6 + 72) = 0u;
    *(_OWORD *)(v6 + 56) = 0u;
    std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at(a1, v12, v7, (uint64_t *)v6);
  }
  return v6;
}

void sub_1913C36D8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<EspressoLight::plan_task_t>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB59E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<EspressoLight::plan_task_t>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB59E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::__tree<std::__value_type<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>,0>(uint64_t a1)
{
  uint64_t v2;
  void *v3;

  v2 = a1 + 24;
  v3 = *(void **)(a1 + 80);
  if (v3)
  {
    *(_QWORD *)(a1 + 88) = v3;
    operator delete(v3);
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::__tree<std::__value_type<std::string,EspressoLight::input_image_buffers>,std::__map_value_compare<std::string,std::__value_type<std::string,EspressoLight::input_image_buffers>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,EspressoLight::input_image_buffers>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,EspressoLight::input_image_buffers>,std::__map_value_compare<std::string,std::__value_type<std::string,EspressoLight::input_image_buffers>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,EspressoLight::input_image_buffers>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,EspressoLight::input_image_buffers>,std::__map_value_compare<std::string,std::__value_type<std::string,EspressoLight::input_image_buffers>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,EspressoLight::input_image_buffers>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,EspressoLight::input_image_buffers>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__tree<std::__value_type<std::string,EspressoLight::input_cvpixel_buffers_t>,std::__map_value_compare<std::string,std::__value_type<std::string,EspressoLight::input_cvpixel_buffers_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,EspressoLight::input_cvpixel_buffers_t>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,EspressoLight::input_cvpixel_buffers_t>,std::__map_value_compare<std::string,std::__value_type<std::string,EspressoLight::input_cvpixel_buffers_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,EspressoLight::input_cvpixel_buffers_t>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,EspressoLight::input_cvpixel_buffers_t>,std::__map_value_compare<std::string,std::__value_type<std::string,EspressoLight::input_cvpixel_buffers_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,EspressoLight::input_cvpixel_buffers_t>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,EspressoLight::input_cvpixel_buffers_t>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void Espresso::throw_exception_selector<Espresso::invalid_state_error,espresso_plan_phase_t &>(int a1)
{
  Espresso::throw_exception_with_format<Espresso::invalid_state_error>("Inconsistent phase of espresso_plan: %d", a1);
}

void ___ZN13EspressoLight13espresso_plan10submit_aneEPU28objcproto17OS_dispatch_queue8NSObjectU13block_pointerFvP21espresso_error_info_tE_block_invoke(uint64_t a1, char a2, void *a3)
{
  id v5;
  uint64_t v6;
  uint64_t *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t **i;
  char *v25;
  NSObject *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  _QWORD v36[4];
  id v37;
  id v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  char v41;
  uint64_t v42[2];
  uint64_t v43;
  std::__shared_weak_count *v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  int v47;

  v5 = a3;
  v6 = *(_QWORD *)(a1 + 48);
  if ((EspressoLight::espresso_plan::priv_t::multiple_buffers_manager_t::prepare_for_done_to_async_batch((EspressoLight::espresso_plan::priv_t::multiple_buffers_manager_t *)(*(_QWORD *)(v6 + 1064) + 192), *(_QWORD *)(*(_QWORD *)(a1 + 56) + 80), *(_QWORD *)(*(_QWORD *)(a1 + 56) + 88)) & 1) != 0)
  {
    v7 = *(uint64_t **)(a1 + 72);
    v9 = *v7;
    v8 = (std::__shared_weak_count *)v7[1];
    v45 = v9;
    v46 = v8;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    v12 = *(std::__shared_weak_count **)(a1 + 88);
    v43 = *(_QWORD *)(a1 + 80);
    v44 = v12;
    if (v12)
    {
      v13 = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    v15 = *(uint64_t **)(a1 + 72);
    v16 = (std::__shared_weak_count *)v15[1];
    v42[0] = *v15;
    v42[1] = (uint64_t)v16;
    if (v16)
    {
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    EspressoLight::espresso_plan::__copy_outputs((uint64_t)&v43, a1 + 56, 0, v42);
    if (v16)
    {
      v19 = (unint64_t *)&v16->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v21 = v44;
    if (v44)
    {
      v22 = (unint64_t *)&v44->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v47 = 0;
    for (i = (uint64_t **)*((_QWORD *)std::__tree<std::__value_type<int,std::unordered_set<std::shared_ptr<Espresso::abstract_blob_container>>>,std::__map_value_compare<int,std::__value_type<int,std::unordered_set<std::shared_ptr<Espresso::abstract_blob_container>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::unordered_set<std::shared_ptr<Espresso::abstract_blob_container>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*(_QWORD *)(a1 + 80) + 232), 0, &v47)+ 7); i; i = (uint64_t **)*i)
      (*(void (**)(uint64_t *, uint64_t))(*i[2] + 176))(i[2], a1 + 56);
    v25 = std::__tree<std::__value_type<int,std::unordered_set<std::shared_ptr<Espresso::abstract_blob_container>>>,std::__map_value_compare<int,std::__value_type<int,std::unordered_set<std::shared_ptr<Espresso::abstract_blob_container>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::unordered_set<std::shared_ptr<Espresso::abstract_blob_container>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*(_QWORD *)(a1 + 80) + 232), 0, &v47);
    std::__hash_table<std::shared_ptr<Espresso::abstract_blob_container>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>::clear((uint64_t)(v25 + 40));
    EspressoLight::espresso_plan::priv_t::multiple_buffers_manager_t::done_with_async_batch((EspressoLight::espresso_plan::priv_t::multiple_buffers_manager_t *)(*(_QWORD *)(v6 + 1064) + 192), *(_QWORD *)(*(_QWORD *)(a1 + 56) + 80));
    v26 = *(NSObject **)(a1 + 32);
    v36[0] = MEMORY[0x1E0C809B0];
    v36[1] = 3321888768;
    v36[2] = ___ZN13EspressoLight13espresso_plan10submit_aneEPU28objcproto17OS_dispatch_queue8NSObjectU13block_pointerFvP21espresso_error_info_tE_block_invoke_2;
    v36[3] = &unk_1E2DC4278;
    v27 = *(std::__shared_weak_count **)(a1 + 88);
    v39 = *(_QWORD *)(a1 + 80);
    v40 = v27;
    if (v27)
    {
      v28 = (unint64_t *)&v27->__shared_owners_;
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
    }
    v37 = v5;
    v41 = a2;
    v38 = *(id *)(a1 + 40);
    dispatch_async(v26, v36);

    v30 = v40;
    if (v40)
    {
      v31 = (unint64_t *)&v40->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    v33 = v46;
    if (v46)
    {
      v34 = (unint64_t *)&v46->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
  }

}

void sub_1913C3B04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  void *v10;
  uint64_t v11;
  uint64_t v13;
  va_list va;
  uint64_t v15;
  va_list va1;

  va_start(va1, a10);
  va_start(va, a10);
  v13 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v11 - 72);

  _Unwind_Resume(a1);
}

uint64_t EspressoLight::espresso_plan::priv_t::multiple_buffers_manager_t::prepare_for_done_to_async_batch(EspressoLight::espresso_plan::priv_t::multiple_buffers_manager_t *this, uint64_t a2, uint64_t a3)
{
  std::mutex *v6;
  uint64_t v7;
  uint64_t v8;

  v6 = (std::mutex *)((char *)this + 16);
  std::mutex::lock((std::mutex *)((char *)this + 16));
  v7 = *((_QWORD *)this + 19);
  if (*(_BYTE *)(v7 + a2) || *(_QWORD *)(*((_QWORD *)this + 16) + 8 * a2) != a3)
  {
    v8 = 0;
  }
  else
  {
    v8 = 1;
    *(_BYTE *)(v7 + a2) = 1;
  }
  std::mutex::unlock(v6);
  return v8;
}

void restore_internal_storage_for_network(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t **i;
  char *v7;
  int v8;

  v8 = a2;
  for (i = (uint64_t **)*((_QWORD *)std::__tree<std::__value_type<int,std::unordered_set<std::shared_ptr<Espresso::abstract_blob_container>>>,std::__map_value_compare<int,std::__value_type<int,std::unordered_set<std::shared_ptr<Espresso::abstract_blob_container>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::unordered_set<std::shared_ptr<Espresso::abstract_blob_container>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*(_QWORD *)a3 + 232), a2, &v8)+ 7); i; i = (uint64_t **)*i)
    (*(void (**)(uint64_t *, uint64_t))(*i[2] + 176))(i[2], a1);
  v7 = std::__tree<std::__value_type<int,std::unordered_set<std::shared_ptr<Espresso::abstract_blob_container>>>,std::__map_value_compare<int,std::__value_type<int,std::unordered_set<std::shared_ptr<Espresso::abstract_blob_container>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::unordered_set<std::shared_ptr<Espresso::abstract_blob_container>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*(_QWORD *)a3 + 232), a2, &v8);
  std::__hash_table<std::shared_ptr<Espresso::abstract_blob_container>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>::clear((uint64_t)(v7 + 40));
}

void EspressoLight::espresso_plan::priv_t::multiple_buffers_manager_t::done_with_async_batch(EspressoLight::espresso_plan::priv_t::multiple_buffers_manager_t *this, uint64_t a2)
{
  std::mutex *v4;

  v4 = (std::mutex *)((char *)this + 16);
  std::mutex::lock((std::mutex *)((char *)this + 16));
  *(_QWORD *)(*((_QWORD *)this + 16) + 8 * a2) = 0;
  *(_BYTE *)(*((_QWORD *)this + 19) + a2) = 0;
  --*((_QWORD *)this + 22);
  std::mutex::unlock(v4);
  std::condition_variable::notify_all((std::condition_variable *)((char *)this + 80));
}

_QWORD *__copy_helper_block_ea8_56c53_ZTSNSt3__110shared_ptrIN8Espresso14abstract_batchEEE80c56_ZTSNSt3__110shared_ptrIN13EspressoLight11plan_task_tEEE(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = a2[8];
  result[7] = a2[7];
  result[8] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  v5 = a2[11];
  result[10] = a2[10];
  result[11] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return result;
}

uint64_t __destroy_helper_block_ea8_56c53_ZTSNSt3__110shared_ptrIN8Espresso14abstract_batchEEE80c56_ZTSNSt3__110shared_ptrIN13EspressoLight11plan_task_tEEE(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 + 56;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 80);
  return std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1);
}

void ___ZN13EspressoLight13espresso_plan10submit_aneEPU28objcproto17OS_dispatch_queue8NSObjectU13block_pointerFvP21espresso_error_info_tE_block_invoke_2(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  _QWORD *v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD v12[4];

  v2 = *(std::__shared_weak_count **)(a1 + 56);
  v12[2] = *(_QWORD *)(a1 + 48);
  v12[3] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  objc_msgSend(*(id *)(a1 + 32), "localizedDescription");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = v5;
  if (*(_BYTE *)(a1 + 64))
  {
    v9 = 0;
  }
  else
  {
    v12[0] = 0xFFFFFFFF00000001;
    v12[1] = objc_msgSend(objc_retainAutorelease(v5), "UTF8String");
    v9 = v12;
  }
  (*(void (**)(_QWORD, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), v9, v6, v7);

  if (v2)
  {
    v10 = (unint64_t *)&v2->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_1913C3DD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  va_list va;

  va_start(va, a3);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_48c56_ZTSNSt3__110shared_ptrIN13EspressoLight11plan_task_tEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(result + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 56) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_ea8_48c56_ZTSNSt3__110shared_ptrIN13EspressoLight11plan_task_tEEE(uint64_t a1)
{
  return std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 48);
}

void std::__tree<std::__value_type<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>>>::__erase_unique<std::string>(uint64_t **a1, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  BOOL v8;
  uint64_t *v9;

  v3 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>((uint64_t)a1, a2);
  if (a1 + 1 != (uint64_t **)v3)
  {
    v4 = v3;
    v5 = (uint64_t *)v3[1];
    if (v5)
    {
      do
      {
        v6 = v5;
        v5 = (uint64_t *)*v5;
      }
      while (v5);
    }
    else
    {
      v7 = v3;
      do
      {
        v6 = (uint64_t *)v7[2];
        v8 = *v6 == (_QWORD)v7;
        v7 = v6;
      }
      while (!v8);
    }
    if (*a1 == v3)
      *a1 = v6;
    v9 = a1[1];
    a1[2] = (uint64_t *)((char *)a1[2] - 1);
    std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v9, v4);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>,0>((uint64_t)(v4 + 4));
    operator delete(v4);
  }
}

void std::__tree<std::__value_type<std::string,espresso_buffer_t>,std::__map_value_compare<std::string,std::__value_type<std::string,espresso_buffer_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,espresso_buffer_t>>>::__erase_unique<std::string>(_QWORD *a1, _QWORD *a2)
{
  uint64_t *v2;
  _QWORD *v3;
  _QWORD *v6;
  _QWORD *v7;
  _BOOL4 v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;

  v3 = a1 + 1;
  v2 = (uint64_t *)a1[1];
  if (v2)
  {
    v6 = a1 + 1;
    v7 = (_QWORD *)a1[1];
    do
    {
      v8 = std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v7 + 4, a2);
      v9 = v7 + 1;
      if (!v8)
      {
        v9 = v7;
        v6 = v7;
      }
      v7 = (_QWORD *)*v9;
    }
    while (*v9);
    if (v6 != v3 && !std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, v6 + 4))
    {
      v10 = (_QWORD *)v6[1];
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
      else
      {
        v12 = v6;
        do
        {
          v11 = (_QWORD *)v12[2];
          v13 = *v11 == (_QWORD)v12;
          v12 = v11;
        }
        while (!v13);
      }
      if ((_QWORD *)*a1 == v6)
        *a1 = v11;
      --a1[2];
      std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v2, v6);
      if (*((char *)v6 + 55) < 0)
        operator delete((void *)v6[4]);
      operator delete(v6);
    }
  }
}

void std::__tree<std::__value_type<std::string,EspressoLight::input_cvpixel_buffers_t>,std::__map_value_compare<std::string,std::__value_type<std::string,EspressoLight::input_cvpixel_buffers_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,EspressoLight::input_cvpixel_buffers_t>>>::__erase_unique<std::string>(uint64_t **a1, _QWORD *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v6;
  uint64_t *v7;
  _BOOL4 v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  BOOL v13;

  v3 = (uint64_t *)(a1 + 1);
  v2 = a1[1];
  if (v2)
  {
    v6 = (uint64_t *)(a1 + 1);
    v7 = a1[1];
    do
    {
      v8 = std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v7 + 4, a2);
      v9 = (uint64_t **)(v7 + 1);
      if (!v8)
      {
        v9 = (uint64_t **)v7;
        v6 = v7;
      }
      v7 = *v9;
    }
    while (*v9);
    if (v6 != v3 && !std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, v6 + 4))
    {
      v10 = (uint64_t *)v6[1];
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
      else
      {
        v12 = v6;
        do
        {
          v11 = (uint64_t *)v12[2];
          v13 = *v11 == (_QWORD)v12;
          v12 = v11;
        }
        while (!v13);
      }
      if (*a1 == v6)
        *a1 = v11;
      a1[2] = (uint64_t *)((char *)a1[2] - 1);
      std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v2, v6);
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,EspressoLight::input_cvpixel_buffers_t>,0>((uint64_t)(v6 + 4));
      operator delete(v6);
    }
  }
}

void Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error,int const&,unsigned long const&>(char *a1, uint64_t a2, uint64_t a3)
{
  Espresso::throw_exception_with_format<Espresso::invalid_blob_shape_error>(a1, a2, a3);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>,0>((uint64_t)v1 + 32);
    operator delete(v1);
  }
}

uint64_t std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>::pair[abi:ne180100]<std::shared_ptr<Espresso::blob<float,4>>&,Espresso::layer_shape const&,0>(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4)
{
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  if (a3)
  {
    v5 = (unint64_t *)(a3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = *a4;
  v8 = a4[1];
  v9 = *((_QWORD *)a4 + 4);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 48) = v9;
  *(_OWORD *)(a1 + 32) = v8;
  *(_OWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((_QWORD *)(a1 + 56), *((const void **)a4 + 5), *((_QWORD *)a4 + 6), (uint64_t)(*((_QWORD *)a4 + 6) - *((_QWORD *)a4 + 5)) >> 2);
  return a1;
}

void sub_1913C4180(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>::pair[abi:ne180100]<std::string&,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>,0>(std::string *this, __int128 *a2, uint64_t a3)
{
  __int128 v5;
  __int128 v6;
  std::string::size_type v7;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = *(_OWORD *)a3;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v6 = *(_OWORD *)(a3 + 16);
  v7 = *(_QWORD *)(a3 + 48);
  *(_OWORD *)&this[2].__r_.__value_.__r.__words[1] = *(_OWORD *)(a3 + 32);
  *(_OWORD *)&this[1].__r_.__value_.__r.__words[2] = v6;
  this[3].__r_.__value_.__r.__words[0] = v7;
  this[3].__r_.__value_.__l.__size_ = 0;
  this[3].__r_.__value_.__r.__words[2] = 0;
  this[4].__r_.__value_.__r.__words[0] = 0;
  *(_OWORD *)&this[3].__r_.__value_.__r.__words[1] = *(_OWORD *)(a3 + 56);
  this[4].__r_.__value_.__r.__words[0] = *(_QWORD *)(a3 + 72);
  *(_QWORD *)(a3 + 56) = 0;
  *(_QWORD *)(a3 + 64) = 0;
  *(_QWORD *)(a3 + 72) = 0;
  return this;
}

uint64_t std::pair<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>::~pair(uint64_t a1)
{
  uint64_t v2;
  void *v3;

  v2 = a1 + 24;
  v3 = *(void **)(a1 + 80);
  if (v3)
  {
    *(_QWORD *)(a1 + 88) = v3;
    operator delete(v3);
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

BOOL Espresso::run_pass_on_network<Espresso::pass_multi_head_prune_undeclared>(uint64_t a1)
{
  Espresso *v2;
  _QWORD *v3;
  const char *v4;
  NSObject *v5;
  int v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  char v14;
  _QWORD *v15;
  std::__shared_weak_count *v16;
  uint8_t buf[4];
  unint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v2 = (Espresso *)operator new(0x30uLL);
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_1E2DBE420;
  *((_QWORD *)v2 + 4) = 0;
  *((_QWORD *)v2 + 5) = 0;
  *((_QWORD *)v2 + 3) = &off_1E2D9D158;
  v3 = (_QWORD *)((char *)v2 + 24);
  v15 = (_QWORD *)((char *)v2 + 24);
  v16 = (std::__shared_weak_count *)v2;
  Espresso::espresso_os_log_subsystem(v2, v4);
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315138;
    v18 = (unint64_t)"N8Espresso32pass_multi_head_prune_undeclaredE" & 0x7FFFFFFFFFFFFFFFLL;
    _os_log_debug_impl(&dword_190DAF000, v5, OS_LOG_TYPE_DEBUG, "run_pass_on_network %s", buf, 0xCu);
  }

  (*(void (**)(uint8_t *__return_ptr, _QWORD *, uint64_t))(*v3 + 24))(buf, v3, a1);
  v14 = 0;
  (*(void (**)(_QWORD *, char *))(*v3 + 16))(v3, &v14);
  if (v14)
  {
    if (buf[0])
      Espresso::net::set_analysis<Espresso::analysis_result>(a1, (uint64_t *)((char *)&v18 + 4));
    else
      std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::__erase_unique<std::type_index>((uint64_t *)(a1 + 1120), (uint64_t)"N8Espresso36analysis_multi_head_prune_undeclaredE");
  }
  v6 = buf[0];
  v7 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = v16;
  if (v16)
  {
    v11 = (unint64_t *)&v16->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  return v6 != 0;
}

void sub_1913C445C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::pass_multi_head_prune_undeclared>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBE420;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::pass_multi_head_prune_undeclared>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBE420;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::pass_multi_head_prune_undeclared>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void ___ZN13EspressoLight13espresso_plan26prepare_compiler_if_neededEv_block_invoke(uint64_t a1, uint64_t a2)
{
  Espresso::net::__build(**(_QWORD **)(a1 + 32), a2, 0, 0xFFFFFFFFLL);
}

void ___ZN13EspressoLight13espresso_plan29prepare_network_two_compilersEm_block_invoke(uint64_t a1, uint64_t a2)
{
  Espresso::net::__build(*(_QWORD *)(a1 + 32), a2, 0, 0xFFFFFFFFLL);
}

void ___ZN13EspressoLight13espresso_plan22execute_forward_nocopyEv_block_invoke(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v5;
  __int128 v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;

  v2 = **(_QWORD **)(a1 + 32);
  if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) != v2)
  {
    v5 = 0;
    do
    {
      v6 = *(_OWORD *)(v2 + 16 * v5);
      v7 = *(std::__shared_weak_count **)(v2 + 16 * v5 + 8);
      if (*((_QWORD *)&v6 + 1))
      {
        v8 = (unint64_t *)(*((_QWORD *)&v6 + 1) + 8);
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
      v10 = v6;
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a2 + 48))(*a2, v6);
      Espresso::net::__forward(v10, a2, 0, 0xFFFFFFFFLL);
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      ++v5;
      v2 = **(_QWORD **)(a1 + 32);
    }
    while (v5 < (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) - v2) >> 4);
  }
}

void sub_1913C45E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void EspressoLight::espresso_plan::wipe_layers(EspressoLight::espresso_plan *this)
{
  uint64_t v1;
  unint64_t v3;
  __int128 v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v1 = *((_QWORD *)this + 3);
  if (*((_QWORD *)this + 4) != v1)
  {
    v3 = 0;
    do
    {
      v4 = *(_OWORD *)(v1 + 16 * v3);
      v5 = *(std::__shared_weak_count **)(v1 + 16 * v3 + 8);
      if (*((_QWORD *)&v4 + 1))
      {
        v6 = (unint64_t *)(*((_QWORD *)&v4 + 1) + 8);
        do
          v7 = __ldxr(v6);
        while (__stxr(v7 + 1, v6));
      }
      Espresso::net::wipe_layers_blobs((Espresso::net *)v4);
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
      ++v3;
      v1 = *((_QWORD *)this + 3);
    }
    while (v3 < (*((_QWORD *)this + 4) - v1) >> 4);
  }
}

void sub_1913C46AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<EspressoLight::espresso_plan::priv_t>::reset[abi:ne180100](uint64_t *result)
{
  uint64_t v1;
  FILE *v2;
  _QWORD *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7;
  void *v8;
  void **v9;

  v1 = *result;
  *result = 0;
  if (v1)
  {
    v2 = *(FILE **)(v1 + 184);
    if (v2)
      fclose(v2);
    v3 = *(_QWORD **)(v1 + 16);
    if (v3)
      espresso_context_destroy(v3);
    v4 = *(std::__shared_weak_count **)(v1 + 392);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    v7 = *(void **)(v1 + 344);
    if (v7)
    {
      *(_QWORD *)(v1 + 352) = v7;
      operator delete(v7);
    }
    v8 = *(void **)(v1 + 320);
    if (v8)
    {
      *(_QWORD *)(v1 + 328) = v8;
      operator delete(v8);
    }
    std::condition_variable::~condition_variable((std::condition_variable *)(v1 + 272));
    std::mutex::~mutex((std::mutex *)(v1 + 208));

    std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1 + 144);
    std::__tree<std::__value_type<int,std::map<std::string,BOOL>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,BOOL>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,BOOL>>>>::destroy(*(_QWORD **)(v1 + 128));
    std::__tree<std::__value_type<int,std::map<std::string,BOOL>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,BOOL>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,BOOL>>>>::destroy(*(_QWORD **)(v1 + 104));
    std::__tree<std::__value_type<int,std::map<std::string,Espresso::layer_shape>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,Espresso::layer_shape>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,Espresso::layer_shape>>>>::destroy(*(_QWORD **)(v1 + 80));
    std::__tree<std::__value_type<int,std::map<std::string,Espresso::layer_shape>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,Espresso::layer_shape>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,Espresso::layer_shape>>>>::destroy(*(_QWORD **)(v1 + 56));
    v9 = (void **)(v1 + 24);
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v9);
    std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1);
    JUMPOUT(0x19401CD90);
  }
  return result;
}

void std::__tree<std::__value_type<int,std::map<std::string,Espresso::layer_shape>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,Espresso::layer_shape>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,Espresso::layer_shape>>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<int,std::map<std::string,Espresso::layer_shape>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,Espresso::layer_shape>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,Espresso::layer_shape>>>>::destroy(*a1);
    std::__tree<std::__value_type<int,std::map<std::string,Espresso::layer_shape>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,Espresso::layer_shape>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,Espresso::layer_shape>>>>::destroy(a1[1]);
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)(a1 + 5), (char *)a1[6]);
    operator delete(a1);
  }
}

char *EspressoLight::espresso_plan::get_networks@<X0>(EspressoLight::espresso_plan *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 133);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  return std::vector<std::shared_ptr<Espresso::net>>::__init_with_size[abi:ne180100]<std::shared_ptr<Espresso::net>*,std::shared_ptr<Espresso::net>*>((char *)a2, *(_QWORD **)(v2 + 24), *(_QWORD **)(v2 + 32), (uint64_t)(*(_QWORD *)(v2 + 32) - *(_QWORD *)(v2 + 24)) >> 4);
}

char *std::vector<std::shared_ptr<Espresso::net>>::__init_with_size[abi:ne180100]<std::shared_ptr<Espresso::net>*,std::shared_ptr<Espresso::net>*>(char *result, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__vallocate[abi:ne180100](result, a4);
    v7 = (_QWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      *v7 = *a2;
      v8 = a2[1];
      v7[1] = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      a2 += 2;
      v7 += 2;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1913C4938(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void EspressoLight::espresso_plan::get_networks(EspressoLight::espresso_plan *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v10;
  unint64_t *v11;
  unint64_t v12;
  _OWORD *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  _OWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  __int128 v30;
  char *v31;
  char *v32;
  _OWORD *v33;
  char *v34;
  uint64_t *v35;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = a2 + 2;
  v5 = *(_QWORD *)(*((_QWORD *)this + 133) + 24);
  v6 = *(_QWORD *)(*((_QWORD *)this + 133) + 32);
  v7 = v6 - v5;
  if (v6 != v5)
  {
    if (v7 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v35 = v4;
    v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v7 >> 4);
    v32 = v31;
    v33 = v31;
    v34 = &v31[16 * v8];
    std::vector<std::shared_ptr<Espresso::net const> const,std::allocator<std::shared_ptr<Espresso::net const> const>>::__swap_out_circular_buffer(a2, &v31);
    std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v31);
    v5 = *(_QWORD *)(*((_QWORD *)this + 133) + 24);
    v6 = *(_QWORD *)(*((_QWORD *)this + 133) + 32);
  }
  if (v6 != v5)
  {
    v9 = 0;
    do
    {
      v10 = *(_OWORD *)(v5 + 16 * v9);
      v30 = v10;
      if (*((_QWORD *)&v10 + 1))
      {
        v11 = (unint64_t *)(*((_QWORD *)&v10 + 1) + 8);
        do
          v12 = __ldxr(v11);
        while (__stxr(v12 + 1, v11));
      }
      v13 = (_OWORD *)a2[1];
      v14 = a2[2];
      if ((unint64_t)v13 >= v14)
      {
        v19 = ((uint64_t)v13 - *a2) >> 4;
        v20 = v19 + 1;
        if ((unint64_t)(v19 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v21 = v14 - *a2;
        if (v21 >> 3 > v20)
          v20 = v21 >> 3;
        if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF0)
          v22 = 0xFFFFFFFFFFFFFFFLL;
        else
          v22 = v20;
        v35 = v4;
        v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v22);
        v24 = &v23[16 * v19];
        v31 = v23;
        v32 = v24;
        v34 = &v23[16 * v25];
        *(_OWORD *)v24 = v30;
        v15 = (std::__shared_weak_count *)*((_QWORD *)&v30 + 1);
        if (*((_QWORD *)&v30 + 1))
        {
          v26 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
          do
            v27 = __ldxr(v26);
          while (__stxr(v27 + 1, v26));
          v15 = (std::__shared_weak_count *)*((_QWORD *)&v30 + 1);
        }
        v33 = v24 + 16;
        std::vector<std::shared_ptr<Espresso::net const> const,std::allocator<std::shared_ptr<Espresso::net const> const>>::__swap_out_circular_buffer(a2, &v31);
        v18 = (_OWORD *)a2[1];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v31);
      }
      else
      {
        *v13 = v10;
        v15 = (std::__shared_weak_count *)*((_QWORD *)&v10 + 1);
        if (*((_QWORD *)&v10 + 1))
        {
          v16 = (unint64_t *)(*((_QWORD *)&v10 + 1) + 8);
          do
            v17 = __ldxr(v16);
          while (__stxr(v17 + 1, v16));
        }
        v18 = v13 + 1;
        a2[1] = (uint64_t)(v13 + 1);
      }
      a2[1] = (uint64_t)v18;
      if (v15)
      {
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v29 = __ldaxr(p_shared_owners);
        while (__stlxr(v29 - 1, p_shared_owners));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      ++v9;
      v5 = *(_QWORD *)(*((_QWORD *)this + 133) + 24);
    }
    while (v9 < (*(_QWORD *)(*((_QWORD *)this + 133) + 32) - v5) >> 4);
  }
}

void sub_1913C4B48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t *std::vector<std::shared_ptr<Espresso::net const> const,std::allocator<std::shared_ptr<Espresso::net const> const>>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  while (v2 != v3)
  {
    v5 = *(_QWORD *)(v2 - 16);
    v2 -= 16;
    *(_QWORD *)(v4 - 16) = v5;
    v4 -= 16;
    v6 = *(_QWORD *)(v2 + 8);
    *(_QWORD *)(v4 + 8) = v6;
    if (v6)
    {
      v7 = (unint64_t *)(v6 + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
  }
  a2[1] = v4;
  v9 = *result;
  *result = v4;
  a2[1] = v9;
  v10 = result[1];
  result[1] = a2[2];
  a2[2] = v10;
  v11 = result[2];
  result[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return result;
}

uint64_t EspressoLight::espresso_plan::get_context@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  v2 = *(uint64_t **)(this + 1064);
  v4 = *v2;
  v3 = v2[1];
  *a2 = v4;
  a2[1] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return this;
}

EspressoLight *EspressoLight::espresso_context::unbox(EspressoLight *this, void *a2)
{
  if (this)
  {
    if (*(_QWORD *)this != 0x50FBC8A8A6F7B03CLL)
    {
      EspressoLight::very_bad_client(this);
      return 0;
    }
  }
  return this;
}

uint64_t EspressoLight::espresso_context::get_internal_context@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  v2 = *(uint64_t **)(this + 16);
  v4 = *v2;
  v3 = v2[1];
  *a2 = v4;
  a2[1] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return this;
}

uint64_t get_main_function_name()
{
  return EspressoLight::abstract_espresso_plan::main_function_name;
}

_QWORD *std::string::basic_string[abi:ne180100](_QWORD *__dst, void *__src, size_t __len)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *__dst = v6;
  }
  else
  {
    *((_BYTE *)__dst + 23) = __len;
    v6 = __dst;
    if (!__len)
      goto LABEL_9;
  }
  memmove(v6, __src, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __dst;
}

void ___ZN13EspressoLight13espresso_plan13submit_cameraEU13block_pointerFv18espresso_network_tP21espresso_error_info_tE_block_invoke(uint64_t a1, int a2, void *a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  int v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t **i;
  char *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37[2];
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  std::__shared_weak_count *v43;

  v5 = a3;
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 40);
  v8 = *(std::__shared_weak_count **)(a1 + 56);
  v42 = *(_QWORD *)(a1 + 48);
  v43 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v11 = *(unsigned int *)(a1 + 64);
  if ((a2 & 1) == 0)
  {
    objc_msgSend(v5, "localizedDescription");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = v12;
    v40 = 0xFFFFFFFF00000001;
    v41 = 0;
    if (v6)
      v41 = objc_msgSend(objc_retainAutorelease(v12), "UTF8String");
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

  }
  v14 = *(_QWORD *)(v7 + 1064);
  v16 = *(_QWORD *)(v14 + 144);
  v15 = *(std::__shared_weak_count **)(v14 + 152);
  v38 = v16;
  v39 = v15;
  if (v15)
  {
    v17 = (unint64_t *)&v15->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v19 = *(_DWORD *)(a1 + 64);
  v20 = *(std::__shared_weak_count **)(a1 + 56);
  v37[0] = *(_QWORD *)(a1 + 48);
  v37[1] = (uint64_t)v20;
  if (v20)
  {
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  EspressoLight::espresso_plan::__copy_outputs((uint64_t)&v38, a1 + 72, v19, v37);
  if (v20)
  {
    v23 = (unint64_t *)&v20->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v25 = v39;
  if (v39)
  {
    v26 = (unint64_t *)&v39->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v29 = *(_QWORD *)(v7 + 1064);
  LODWORD(v40) = *(_DWORD *)(a1 + 64);
  v28 = v40;
  for (i = (uint64_t **)*((_QWORD *)std::__tree<std::__value_type<int,std::unordered_set<std::shared_ptr<Espresso::abstract_blob_container>>>,std::__map_value_compare<int,std::__value_type<int,std::unordered_set<std::shared_ptr<Espresso::abstract_blob_container>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::unordered_set<std::shared_ptr<Espresso::abstract_blob_container>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*(_QWORD *)(v29 + 144) + 232), v40, &v40)+ 7); i; i = (uint64_t **)*i)
    (*(void (**)(uint64_t *, uint64_t))(*i[2] + 176))(i[2], a1 + 72);
  v31 = std::__tree<std::__value_type<int,std::unordered_set<std::shared_ptr<Espresso::abstract_blob_container>>>,std::__map_value_compare<int,std::__value_type<int,std::unordered_set<std::shared_ptr<Espresso::abstract_blob_container>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::unordered_set<std::shared_ptr<Espresso::abstract_blob_container>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*(_QWORD *)(v29 + 144) + 232), v28, &v40);
  std::__hash_table<std::shared_ptr<Espresso::abstract_blob_container>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>::clear((uint64_t)(v31 + 40));
  v32 = (unint64_t *)(*(_QWORD *)(v7 + 1064) + 408);
  do
    v33 = __ldaxr(v32);
  while (__stlxr(v33 - 1, v32));
  if (a2)
    (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), v7, v11);
  v34 = v43;
  if (v43)
  {
    v35 = (unint64_t *)&v43->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }

}

void sub_1913C4F8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);

  _Unwind_Resume(a1);
}

_QWORD *__copy_helper_block_ea8_48c41_ZTSNSt3__110shared_ptrIN8Espresso3netEEE72c53_ZTSNSt3__110shared_ptrIN8Espresso14abstract_batchEEE(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = a2[7];
  result[6] = a2[6];
  result[7] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  v5 = a2[10];
  result[9] = a2[9];
  result[10] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return result;
}

uint64_t __destroy_helper_block_ea8_48c41_ZTSNSt3__110shared_ptrIN8Espresso3netEEE72c53_ZTSNSt3__110shared_ptrIN8Espresso14abstract_batchEEE(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 + 48;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 72);
  return std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1);
}

void ___ZN13EspressoLight13espresso_plan20temporal_state_resetEiP37espresso_temporal_smoothing_options_t_block_invoke(uint64_t a1, uint64_t a2)
{
  Espresso::net::__reset_temporal_state(*(_QWORD *)(a1 + 32), a2);
}

uint64_t espresso_context_report_bench(EspressoLight *a1, char *a2, float a3)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  char *v13;
  unint64_t *v14;
  unint64_t v15;
  float v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  int v22;
  void *__p[2];
  char v24;
  void *v25[2];
  char v26;
  void *v27[2];
  char v28;
  void *v29[2];
  char v30;
  void *v31[2];
  char v32;
  void *v33[2];
  char v34;
  float v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  int v39;
  uint64_t v40;
  std::__shared_weak_count *v41;

  if (!a1)
  {
    v18 = a3;
    __asm { FMOV            V0.4S, #-1.0 }
    v19 = _Q0;
    v20 = _Q0;
    v21 = _Q0;
    v22 = -1082130432;
    std::string::basic_string[abi:ne180100]<0>(v33, a2);
    std::string::basic_string[abi:ne180100]<0>(v31, "capi");
    std::string::basic_string[abi:ne180100]<0>(v29, "NONE");
    std::string::basic_string[abi:ne180100]<0>(v27, "");
    std::string::basic_string[abi:ne180100]<0>(v25, "");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    Espresso::report_benchmark_result((uint64_t)&v18, (const char *)v33, (uint64_t *)v31, (const char *)v29, (uint64_t *)v27, (uint64_t)v25, (uint64_t)__p);
    if (v24 < 0)
      operator delete(__p[0]);
    if (v26 < 0)
      operator delete(v25[0]);
    if (v28 < 0)
      operator delete(v27[0]);
    if (v30 < 0)
      operator delete(v29[0]);
    if (v32 < 0)
      operator delete(v31[0]);
    if (v34 < 0)
      operator delete(v33[0]);
    return 0;
  }
  if (*(_QWORD *)a1 == 0x50FBC8A8A6F7B03CLL)
  {
    v3 = **((_QWORD **)a1 + 2);
    v5 = *(_QWORD *)(v3 + 8);
    v4 = *(std::__shared_weak_count **)(v3 + 16);
    v40 = v5;
    v41 = v4;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
    }
    v35 = a3;
    __asm { FMOV            V0.4S, #-1.0 }
    v36 = _Q0;
    v37 = _Q0;
    v38 = _Q0;
    v39 = -1082130432;
    std::string::basic_string[abi:ne180100]<0>(v33, a2);
    std::string::basic_string[abi:ne180100]<0>(v31, "capi");
    v13 = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
    std::string::basic_string[abi:ne180100]<0>(v29, v13);
    std::string::basic_string[abi:ne180100]<0>(v27, "");
    std::string::basic_string[abi:ne180100]<0>(v25, "");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    Espresso::report_benchmark_result((uint64_t)&v35, (const char *)v33, (uint64_t *)v31, (const char *)v29, (uint64_t *)v27, (uint64_t)v25, (uint64_t)__p);
    if (v24 < 0)
      operator delete(__p[0]);
    if (v26 < 0)
      operator delete(v25[0]);
    if (v28 < 0)
      operator delete(v27[0]);
    if (v30 < 0)
      operator delete(v29[0]);
    if (v32 < 0)
      operator delete(v31[0]);
    if (v34 < 0)
      operator delete(v33[0]);
    if (v4)
    {
      v14 = (unint64_t *)&v4->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    return 0;
  }
  EspressoLight::very_bad_client(a1);
  return 4294967290;
}

void sub_1913C52F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  uint64_t v45;

  if (a21 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  if (a33 < 0)
    operator delete(a28);
  if (a39 < 0)
    operator delete(a34);
  if (a45 < 0)
    operator delete(a40);
  if (*(char *)(v45 - 105) < 0)
    operator delete(*(void **)(v45 - 128));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v45 - 48);
  _Unwind_Resume(a1);
}

float EspressoLight::espresso_plan::perfbench(EspressoLight::espresso_plan *this, const char *a2, int a3, double a4)
{
  int v6;
  uint64_t v7;
  float v8;
  int v9;
  float v10;
  std::runtime_error *exception;
  EspressoLight::espresso_plan *v13;
  std::runtime_error *v14;
  std::string *v15;
  __int128 v16;
  std::string v17;
  char v18;
  std::string v19;

  if (*(_DWORD *)(*((_QWORD *)this + 133) + 160) != 1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
    v13 = this;
    v14 = exception;
    std::to_string(&v19, *(_DWORD *)(*((_QWORD *)v13 + 133) + 160));
    v15 = std::string::insert(&v19, 0, "Inconsistent phase of espresso_plan: ");
    v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v14, &v17);
    v14->__vftable = (std::runtime_error_vtbl *)&off_1E2D59458;
    LODWORD(v14[1].__vftable) = -5;
  }
  v6 = (int)a2;
  if ((int)a2 < 1)
  {
    Espresso::scoped_timer::scoped_timer((Espresso::scoped_timer *)&v17, "first", a4);
    if (a3)
      v7 = 3;
    else
      v7 = 4;
    (*(void (**)(EspressoLight::espresso_plan *))(*(_QWORD *)this + 8 * v7))(this);
    v18 = 1;
    v17.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
    *(double *)&v17.__r_.__value_.__r.__words[2] = (double)(uint64_t)(v17.__r_.__value_.__l.__size_
                                                                   - v17.__r_.__value_.__r.__words[0])
                                                 * 0.000001;
    v8 = *(double *)&v17.__r_.__value_.__r.__words[2] * 0.001;
    if ((int)(float)(2.0 / v8) <= 5)
      v6 = 5;
    else
      v6 = (int)(float)(2.0 / v8);
    Espresso::scoped_timer::~scoped_timer((Espresso::scoped_timer *)&v17);
  }
  else if (a3)
  {
    v7 = 3;
  }
  else
  {
    v7 = 4;
  }
  Espresso::scoped_timer::scoped_timer((Espresso::scoped_timer *)&v17, "n_runs", a4);
  v9 = v6;
  do
  {
    (*(void (**)(EspressoLight::espresso_plan *))(*(_QWORD *)this + 8 * v7))(this);
    --v9;
  }
  while (v9);
  v18 = 1;
  v17.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
  *(double *)&v17.__r_.__value_.__r.__words[2] = (double)(uint64_t)(v17.__r_.__value_.__l.__size_
                                                                 - v17.__r_.__value_.__r.__words[0])
                                               * 0.000001;
  v10 = *(double *)&v17.__r_.__value_.__r.__words[2] / (double)v6;
  printf("[espresso_plan::perfbench] avg runtime (ms) = %.2f\n", v10);
  Espresso::scoped_timer::~scoped_timer((Espresso::scoped_timer *)&v17);
  return v10;
}

void sub_1913C562C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  void *v28;
  int v29;

  if (a16 < 0)
    operator delete(__p);
  if (a28 < 0)
  {
    operator delete(a23);
    if ((v29 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v29)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v28);
  goto LABEL_8;
}

_QWORD *Espresso::compute_network_shape<std::string,Espresso::layer_shape,std::unordered_map<std::string,Espresso::layer_shape>>(Espresso::net *,std::unordered_map<std::string,Espresso::layer_shape> const&)::{lambda(int)#1}::operator()(uint64_t a1)
{
  unint64_t v2;
  __int128 v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *result;
  uint64_t *v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  __int128 v12;
  unint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  std::vector<Espresso::layer_shape>::__clear[abi:ne180100](*(uint64_t **)a1);
  v2 = 0;
  v16 = 0;
  v15 = 0u;
  v14 = 0u;
  *(_QWORD *)&v3 = 0x100000001;
  *((_QWORD *)&v3 + 1) = 0x100000001;
  v12 = v3;
  v13 = 0xFFFFFFFF00000001;
  while (1)
  {
    v4 = **(_QWORD **)(a1 + 8) + 96;
    v5 = **(int **)(a1 + 16);
    v11 = v5;
    result = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v4, v5, &v11);
    if (v2 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(result[4] - result[3]) >> 3))
      break;
    v7 = *(uint64_t **)a1;
    v8 = *(_QWORD *)(*(_QWORD *)a1 + 8);
    v9 = *(uint64_t **)a1;
    if (v8 >= *(_QWORD *)(*(_QWORD *)a1 + 16))
    {
      v10 = std::vector<Espresso::layer_shape>::__push_back_slow_path<Espresso::layer_shape const&>(v9, &v12);
    }
    else
    {
      std::vector<Espresso::layer_shape>::__construct_one_at_end[abi:ne180100]<Espresso::layer_shape const&>((uint64_t)v9, &v12);
      v10 = v8 + 64;
    }
    v7[1] = v10;
    ++v2;
  }
  return result;
}

const char *espresso_get_status_string(int a1)
{
  if ((a1 + 10) > 0x18)
    return "";
  else
    return off_1E2DD2200[a1 + 10];
}

uint64_t espresso_buffer_set_rank(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 8) = a2;
  return result;
}

uint64_t espresso_buffer_get_rank(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t espresso_buffer_get_count(uint64_t a1)
{
  return *(_QWORD *)(a1 + 152) * *(_QWORD *)(a1 + 112);
}

uint64_t espresso_buffer_get_size(uint64_t a1, char *a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t result;
  _DWORD v8[2];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v2 = *(_DWORD *)(a1 + 160);
  v3 = *(_QWORD *)(a1 + 112);
  v4 = *(_QWORD *)(a1 + 152);
  v5 = 4;
  if (v2 <= 131079)
  {
    if (v2 == 65552)
    {
      v5 = 2;
      goto LABEL_12;
    }
    if (v2 != 65568)
      goto LABEL_8;
LABEL_12:
    result = 0;
    *(_QWORD *)a2 = v4 * v3 * v5;
    return result;
  }
  switch(v2)
  {
    case 131080:
LABEL_5:
      v5 = 1;
      goto LABEL_12;
    case 131104:
      goto LABEL_12;
    case 262152:
      goto LABEL_5;
  }
LABEL_8:
  Espresso::espresso_os_log_subsystem((Espresso *)a1, a2);
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    v8[0] = 67109120;
    v8[1] = v2;
    _os_log_impl(&dword_190DAF000, v6, OS_LOG_TYPE_INFO, "Unsupported blob storage type %d", (uint8_t *)v8, 8u);
  }

  return 0xFFFFFFFFLL;
}

const char *espresso_get_last_error()
{
  if (err != 1)
    return "";
  err = 0;
  return (const char *)&errbuff;
}

uint64_t espresso_device_id_for_metal_device()
{
  return 0xFFFFFFFFLL;
}

uint64_t espresso_autoinitialize_isset()
{
  return g_espresso_autoinitialize;
}

uint64_t espresso_enable_autoinitialize(int a1)
{
  std::mutex *v2;
  Espresso *v3;
  const char *v4;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  uint64_t v8;
  __int16 v10;
  __int16 v11;

  if (espresso_enable_autoinitialize::autoInitializeToken != -1)
    dispatch_once(&espresso_enable_autoinitialize::autoInitializeToken, &__block_literal_global_2038);
  v2 = (std::mutex *)g_autoinitialize_mutex;
  std::mutex::lock((std::mutex *)g_autoinitialize_mutex);
  if ((a1 & 1) != 0 || !g_autoinitialize_ctx_count)
  {
    if (!a1 || !singleton)
    {
      v8 = 0;
      g_espresso_autoinitialize = a1;
      goto LABEL_12;
    }
    Espresso::espresso_os_log_subsystem(v3, v4);
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v10 = 0;
      v6 = "espresso_autoinitialize is enabled after context is created or espresso_initialize is called.";
      v7 = (uint8_t *)&v10;
      goto LABEL_14;
    }
  }
  else
  {
    Espresso::espresso_os_log_subsystem(v3, v4);
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v11 = 0;
      v6 = "espresso_autoinitialize is being disabled when there are context still being referenced.";
      v7 = (uint8_t *)&v11;
LABEL_14:
      _os_log_error_impl(&dword_190DAF000, v5, OS_LOG_TYPE_ERROR, v6, v7, 2u);
    }
  }

  v8 = 0xFFFFFFFFLL;
LABEL_12:
  std::mutex::unlock(v2);
  return v8;
}

double __espresso_enable_autoinitialize_block_invoke()
{
  uint64_t v0;
  double result;

  v0 = operator new();
  *(_QWORD *)v0 = 850045863;
  result = 0.0;
  *(_OWORD *)(v0 + 8) = 0u;
  *(_OWORD *)(v0 + 24) = 0u;
  *(_OWORD *)(v0 + 40) = 0u;
  *(_QWORD *)(v0 + 56) = 0;
  g_autoinitialize_mutex = v0;
  return result;
}

uint64_t espresso_initialize()
{
  espresso_initialize_was_called = 1;
  initialize_static_memory();
  return 0;
}

uint64_t espresso_create_context_auto()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  char v5;
  uint64_t context;

  v0 = (void *)MEMORY[0x19401D4A4]();
  objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "persistentDomainForName:", *MEMORY[0x1E0CB2B58]);
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v2, "objectForKeyedSubscript:", CFSTR("espresso.enable_experimental_auto_context"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3
    && (objc_msgSend(v2, "objectForKeyedSubscript:", CFSTR("espresso.enable_experimental_auto_context")),
        v4 = (void *)objc_claimAutoreleasedReturnValue(),
        v5 = objc_msgSend(v4, "BOOLValue"),
        v4,
        (v5 & 1) != 0))
  {
    context = 0;
  }
  else
  {
    context = espresso_create_context(0x2717u, 0xFFFFFFFF);
    if (!context)
    {
      context = espresso_create_context(5u, 0xFFFFFFFD);
      if (!context)
        context = espresso_create_context(0, 0xFFFFFFFF);
    }
  }

  objc_autoreleasePoolPop(v0);
  return context;
}

void sub_1913C5BB0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t espresso_set_quantization_flags(EspressoLight *a1, uint64_t a2)
{
  int v3;
  uint64_t result;

  if (a1)
  {
    if (*(_QWORD *)a1 == 0x50FBC8A8A6F7B03CLL)
    {
      v3 = a2;
      Espresso::keys_translation::cpp_quant_weight_mem_from_c_api(a2);
      result = 0;
      *(_DWORD *)(**((_QWORD **)a1 + 2) + 76) = v3;
      return result;
    }
    EspressoLight::very_bad_client(a1);
  }
  return 4294967290;
}

uint64_t handle_ex_plan(char *a1, std::exception *this)
{
  const std::nested_exception *v4;
  const char *v5;
  Espresso *v6;
  const char *v7;
  Espresso *v8;
  NSObject *v9;
  uint64_t v10;
  int v11;
  const char *v12;
  void *v14;
  const char *v15;
  void *v16;
  Espresso *v17;
  const char *v18;
  uint64_t v19;
  int v20;
  NSObject *v21;
  uint32_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  __int16 v26;
  int v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return EspressoLight::handle_ex_((EspressoLight *)this, this);
  v4 = (const std::nested_exception *)__dynamic_cast(this, MEMORY[0x1E0DE4EB0], (const struct __class_type_info *)off_1E2D35328, -2);
  if (!v4)
  {
    v5 = (const char *)((uint64_t (*)(std::exception *))this->what)(this);
    strncpy(a1 + 20, v5, 0x3FFuLL);
    *((_DWORD *)a1 + 261) = -1;
    if (v6)
    {
      v8 = v6;
      *((_DWORD *)a1 + 261) = *((_DWORD *)v6 + 4);
      Espresso::espresso_os_log_subsystem(v6, v7);
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        v10 = ((uint64_t (*)(std::exception *))this->what)(this);
        v11 = *((_DWORD *)v8 + 4);
        v24 = 136315394;
        v25 = v10;
        v26 = 1024;
        v27 = v11;
        v12 = "[Espresso::handle_ex_plan] exception=%s status=%d";
LABEL_10:
        v21 = v9;
        v22 = 18;
LABEL_11:
        _os_log_error_impl(&dword_190DAF000, v21, OS_LOG_TYPE_ERROR, v12, (uint8_t *)&v24, v22);
      }
    }
    else
    {
      if (!v14)
      {
        Espresso::espresso_os_log_subsystem(0, v15);
        v9 = objc_claimAutoreleasedReturnValue();
        if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
          goto LABEL_13;
        v23 = ((uint64_t (*)(std::exception *))this->what)(this);
        v24 = 136315138;
        v25 = v23;
        v12 = "[Espresso::handle_ex_plan] exception=%s";
        v21 = v9;
        v22 = 12;
        goto LABEL_11;
      }
      v16 = v14;
      v17 = (Espresso *)(*(uint64_t (**)(void *))(*(_QWORD *)v14 + 24))(v14);
      *((_DWORD *)a1 + 261) = (_DWORD)v17;
      Espresso::espresso_os_log_subsystem(v17, v18);
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        v19 = ((uint64_t (*)(std::exception *))this->what)(this);
        v20 = (*(uint64_t (**)(void *))(*(_QWORD *)v16 + 24))(v16);
        v24 = 136315394;
        v25 = v19;
        v26 = 1024;
        v27 = v20;
        v12 = "[Espresso::handle_ex_plan] exception=%s status=%d";
        goto LABEL_10;
      }
    }
LABEL_13:

    return *((unsigned int *)a1 + 261);
  }
  std::nested_exception::rethrow_nested(v4);
  return espresso_plan_add_network_from_memory();
}

uint64_t espresso_plan_add_network_from_memory(uint64_t a1, void *a2, size_t a3, void *a4, size_t a5, uint64_t a6, uint64_t a7, int a8)
{
  void *v16;
  unsigned int v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  Espresso *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  char *v46;
  __int128 v47;
  int64x2_t v48;
  uint64_t v49;
  uint64_t v50;
  std::string::size_type v51;
  std::string::size_type v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::runtime_error *v58;
  std::runtime_error *exception;
  int v60;
  std::runtime_error *v61;
  std::string *v62;
  __int128 v63;
  std::string *v64;
  __int128 v65;
  std::string v66;
  char *v67[3];
  std::string v68;
  void *__p;
  char v70;
  uint64_t v71;
  std::string v72;
  std::string v73;
  void *v74;
  char v75;
  uint64_t v76;
  std::string __dst;
  __int128 v78;
  _BYTE v79[24];
  uint64_t v80;
  _QWORD *v81;

  v16 = (void *)MEMORY[0x19401D4A4]();
  if (a1
  {
    v78 = 0uLL;
    if (a8 == 65568)
    {
      v17 = 0;
    }
    else
    {
      if (a8 != 65552)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        v60 = a8;
        v61 = exception;
        std::to_string(&v66, v60);
        v62 = std::string::insert(&v66, 0, "Compute path ");
        v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
        v68.__r_.__value_.__r.__words[2] = v62->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v63;
        v62->__r_.__value_.__l.__size_ = 0;
        v62->__r_.__value_.__r.__words[2] = 0;
        v62->__r_.__value_.__r.__words[0] = 0;
        v64 = std::string::append(&v68, " not supported.");
        v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
        v73.__r_.__value_.__r.__words[2] = v64->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v73.__r_.__value_.__l.__data_ = v65;
        v64->__r_.__value_.__l.__size_ = 0;
        v64->__r_.__value_.__r.__words[2] = 0;
        v64->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v61, &v73);
        __cxa_throw(v61, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v17 = 1;
    }
    std::string::basic_string[abi:ne180100](&__dst, a2, a3);
    std::istringstream::basic_istringstream[abi:ne180100](&v73, &__dst);
    std::string::basic_string[abi:ne180100](&v72, a4, a5);
    std::istringstream::basic_istringstream[abi:ne180100](&v68, &v72);
    std::string::basic_string[abi:ne180100]<0>(v79, "json");
    Espresso::load_network_shape((uint64_t)&v68, v79, (uint64_t)&v66);
    if ((v79[23] & 0x80000000) != 0)
      operator delete(*(void **)v79);
    Espresso::load_network_layers((uint64_t)&v73, a6, a7, *(uint64_t **)(a1 + 1064), (uint64_t)&v66, v17, (uint64_t *)v79);
    v78 = *(_OWORD *)v79;
    v19 = *(std::__shared_weak_count **)&v79[8];
    v20 = *(Espresso **)v79;
    if (*(_QWORD *)&v79[8])
    {
      v21 = (unint64_t *)(*(_QWORD *)&v79[8] + 8);
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
    }
    Espresso::shape_network_recursive(v20, (Espresso::net *)&v66, 0, 0);
    if (v19)
    {
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v24 = __ldaxr(p_shared_owners);
      while (__stlxr(v24 - 1, p_shared_owners));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    v25 = v78;
    if (!(_QWORD)v78)
    {
      v58 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v58, "Cannot load network.");
      __cxa_throw(v58, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    if ((*(_BYTE *)(a1 + 16) & 2) != 0)
      Espresso::net::wipe_layers_blobs((Espresso::net *)v78);
    v26 = *(_QWORD **)(a1 + 1064);
    v27 = (_QWORD *)v26[4];
    v28 = v26[5];
    if ((unint64_t)v27 >= v28)
    {
      v33 = v26[3];
      v34 = ((uint64_t)v27 - v33) >> 4;
      v35 = v34 + 1;
      if ((unint64_t)(v34 + 1) >> 60)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v36 = v28 - v33;
      if (v36 >> 3 > v35)
        v35 = v36 >> 3;
      if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF0)
        v37 = 0xFFFFFFFFFFFFFFFLL;
      else
        v37 = v35;
      v81 = v26 + 5;
      v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v37);
      v40 = &v38[16 * v34];
      v41 = *((_QWORD *)&v78 + 1);
      *(_OWORD *)v40 = v78;
      if (v41)
      {
        v42 = (unint64_t *)(v41 + 8);
        do
          v43 = __ldxr(v42);
        while (__stxr(v43 + 1, v42));
      }
      v45 = (_QWORD *)v26[3];
      v44 = (_QWORD *)v26[4];
      if (v44 == v45)
      {
        v48 = vdupq_n_s64((unint64_t)v44);
        v46 = &v38[16 * v34];
      }
      else
      {
        v46 = &v38[16 * v34];
        do
        {
          v47 = *((_OWORD *)v44 - 1);
          v44 -= 2;
          *((_OWORD *)v46 - 1) = v47;
          v46 -= 16;
          *v44 = 0;
          v44[1] = 0;
        }
        while (v44 != v45);
        v48 = *(int64x2_t *)(v26 + 3);
      }
      v32 = v40 + 16;
      v26[3] = v46;
      v26[4] = v40 + 16;
      *(int64x2_t *)&v79[8] = v48;
      v49 = v26[5];
      v26[5] = &v38[16 * v39];
      v80 = v49;
      *(_QWORD *)v79 = v48.i64[0];
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v79);
    }
    else
    {
      *v27 = v25;
      v29 = *((_QWORD *)&v78 + 1);
      v27[1] = *((_QWORD *)&v78 + 1);
      if (v29)
      {
        v30 = (unint64_t *)(v29 + 8);
        do
          v31 = __ldxr(v30);
        while (__stxr(v31 + 1, v30));
      }
      v32 = v27 + 2;
    }
    v26[4] = v32;
    v50 = v78;
    *(_QWORD *)(v78 + 1240) = a1;
    v18 = ((*(_QWORD *)(*(_QWORD *)(a1 + 1064) + 32) - *(_QWORD *)(*(_QWORD *)(a1 + 1064) + 24)) >> 4)
        - 1;
    *(_DWORD *)(v50 + 1248) = v18;
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)v67, v67[1]);
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v66, (char *)v66.__r_.__value_.__l.__size_);
    v51 = *MEMORY[0x1E0DE4F58];
    v68.__r_.__value_.__r.__words[0] = v51;
    v52 = *(_QWORD *)(MEMORY[0x1E0DE4F58] + 24);
    *(std::string::size_type *)((char *)v68.__r_.__value_.__r.__words + *(_QWORD *)(v51 - 24)) = v52;
    v53 = MEMORY[0x1E0DE4FB8];
    v68.__r_.__value_.__r.__words[2] = MEMORY[0x1E0DE4FB8] + 16;
    if (v70 < 0)
      operator delete(__p);
    std::streambuf::~streambuf();
    std::istream::~istream();
    MEMORY[0x19401CCD0](&v71);
    if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v72.__r_.__value_.__l.__data_);
    v73.__r_.__value_.__r.__words[0] = v51;
    *(std::string::size_type *)((char *)v73.__r_.__value_.__r.__words + *(_QWORD *)(v51 - 24)) = v52;
    v73.__r_.__value_.__r.__words[2] = v53 + 16;
    if (v75 < 0)
      operator delete(v74);
    std::streambuf::~streambuf();
    std::istream::~istream();
    MEMORY[0x19401CCD0](&v76);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
    v54 = (std::__shared_weak_count *)*((_QWORD *)&v78 + 1);
    if (*((_QWORD *)&v78 + 1))
    {
      v55 = (unint64_t *)(*((_QWORD *)&v78 + 1) + 8);
      do
        v56 = __ldaxr(v55);
      while (__stlxr(v56 - 1, v55));
      if (!v56)
      {
        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
        std::__shared_weak_count::__release_weak(v54);
      }
    }
  }
  else
  {
    v18 = 4294967290;
  }
  objc_autoreleasePoolPop(v16);
  return v18;
}

void sub_1913C63F8(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,uint64_t a60,void *__p,uint64_t a62,int a63)
{
  char a66;
  char *v66;
  void *v67;
  int v68;
  uint64_t v69;
  std::exception *v72;

  if (a66 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  if (a16 < 0)
  {
    operator delete(a11);
    if ((v68 & 1) == 0)
      goto LABEL_10;
  }
  else if (!v68)
  {
LABEL_10:
    std::shared_ptr<void>::~shared_ptr[abi:ne180100](v69 - 144);
    if (a2 == 1)
    {
      v72 = (std::exception *)__cxa_begin_catch(a1);
      handle_ex_plan(v66, v72);
      __cxa_end_catch();
      JUMPOUT(0x1913C62F0);
    }
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v67);
  goto LABEL_10;
}

uint64_t espresso_plan_activate_debug_firehose(_QWORD *a1, char *a2)
{
  uint64_t v4;
  int v5;
  void **v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void **v11;
  unint64_t *v12;
  unint64_t v13;
  std::runtime_error *exception;
  std::runtime_error *v17;
  void *__p[2];
  char v19;
  std::string v20;
  uint64_t v21;
  std::__shared_weak_count *v22;

  if (!a1
  {
    return 4294967290;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  v4 = a1[133];
  v5 = *(_DWORD *)(v4 + 160);
  if (v5)
    Espresso::throw_exception_selector<Espresso::invalid_state_error,espresso_plan_phase_t &>(v5);
  if (*(_QWORD *)(v4 + 32) == *(_QWORD *)(v4 + 24))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Empty espresso_plan.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (v19 >= 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  printf("[espresso] Dumping to %s\n", (const char *)v6);
  v7 = **(_QWORD **)(a1[133] + 24);
  v8 = *(std::__shared_weak_count **)(v7 + 24);
  v21 = *(_QWORD *)(v7 + 16);
  v22 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  if (v19 >= 0)
    v11 = __p;
  else
    v11 = (void **)__p[0];
  *(_QWORD *)(a1[133] + 184) = fopen((const char *)v11, "wb");
  if (!*(_QWORD *)(a1[133] + 184))
  {
    v17 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(v17, &v20);
    __cxa_throw(v17, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (v8)
  {
    v12 = (unint64_t *)&v8->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (v19 < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_1913C6764(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  char *v23;
  void *v24;
  int v25;
  std::exception *v28;

  if (a22 < 0)
  {
    operator delete(__p);
    if ((v25 & 1) == 0)
      goto LABEL_6;
  }
  else if (!v25)
  {
LABEL_6:
    std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
    if (a16 < 0)
      operator delete(a11);
    if (a2 == 1)
    {
      v28 = (std::exception *)__cxa_begin_catch(a1);
      handle_ex_plan(v23, v28);
      __cxa_end_catch();
      JUMPOUT(0x1913C66BCLL);
    }
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v24);
  goto LABEL_6;
}

std::string::size_type espresso_plan_destroy(std::string::size_type a1)
{
  void *v2;
  Espresso *v3;
  const char *v4;
  NSObject *v5;
  void *v6;
  std::runtime_error *exception;
  std::string v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v2 = (void *)MEMORY[0x19401D4A4]();
  if (a1)
  {
    if (v3)
    {
      Espresso::espresso_os_log_subsystem(v3, v4);
      v5 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        LODWORD(v9.__r_.__value_.__l.__data_) = 134217984;
        *(std::string::size_type *)((char *)v9.__r_.__value_.__r.__words + 4) = a1;
        _os_log_impl(&dword_190DAF000, v5, OS_LOG_TYPE_INFO, "Destroying plan %zu", (uint8_t *)&v9, 0xCu);
      }

      if (v6 && (*(unsigned int (**)(void *))(*(_QWORD *)v6 + 184))(v6))
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(&v9, "A plan cannot be destroyed while it is being executed.");
        std::runtime_error::runtime_error(exception, &v9);
        exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D59458;
        LODWORD(exception[1].__vftable) = -1;
      }
      (*(void (**)(std::string::size_type))(*(_QWORD *)a1 + 8))(a1);
      a1 = 0;
    }
    else
    {
      a1 = 4294967290;
    }
  }
  objc_autoreleasePoolPop(v2);
  return a1;
}

void sub_1913C69BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  int v15;
  EspressoLight *v18;
  std::exception *v19;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0)
      goto LABEL_6;
  }
  else if (!v15)
  {
LABEL_6:
    if (a2 == 1)
    {
      v18 = (EspressoLight *)__cxa_begin_catch(exception_object);
      EspressoLight::handle_ex_(v18, v19);
      __cxa_end_catch();
      JUMPOUT(0x1913C691CLL);
    }
    _Unwind_Resume(exception_object);
  }
  __cxa_free_exception(v14);
  goto LABEL_6;
}

uint64_t espresso_network_unbind_buffer(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v8;
  uint64_t v9;

  v8 = (void *)MEMORY[0x19401D4A4]();
  if (a1
  {
    (*(void (**)(const void *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2, a3, a4);
    v9 = 0;
  }
  else
  {
    v9 = 4294967290;
  }
  objc_autoreleasePoolPop(v8);
  return v9;
}

void tmp_espresso_load_image_bgra(Espresso *a1, const char *a2)
{
  Espresso::load_image_to_vImageBuffer_stbi(a1, a2);
}

void tmp_espresso_load_image_grayscale(Espresso *a1, const char *a2)
{
  Espresso::load_image_to_vImageBuffer_stbi(a1, a2);
}

uint64_t espresso_network_bind_direct_cvpixelbuffer(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v8;
  uint64_t v9;

  v8 = (void *)MEMORY[0x19401D4A4]();
  if (a1
  {
    v9 = (*(uint64_t (**)(const void *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 216))(a1, a2, a3, a4);
  }
  else
  {
    v9 = 4294967290;
  }
  objc_autoreleasePoolPop(v8);
  return v9;
}

uint64_t espresso_network_bind_cvpixelbuffer(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __int16 v12;

  if (!a1
  {
    return 4294967290;
  }
  v12 = 1;
  (*(void (**)(const void *, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, _QWORD, __int16))(*(_QWORD *)a1 + 232))(a1, a2, a3, a4, a5, 0, 4, 0, 0, v12);
  return 0;
}

uint64_t espresso_network_bind_cvpixelbuffer_no_channel_swap(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __int16 v12;

  if (!a1
  {
    return 4294967290;
  }
  v12 = 257;
  (*(void (**)(const void *, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, _QWORD, __int16))(*(_QWORD *)a1 + 232))(a1, a2, a3, a4, a5, 0, 4, 0, 0, v12);
  return 0;
}

uint64_t espresso_network_bind_input_cvpixelbuffer(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  void *v14;
  uint64_t v15;
  __int16 v17;

  v14 = (void *)MEMORY[0x19401D4A4]();
  if (a1
  {
    v17 = 0;
    (*(void (**)(const void *, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, __int16))(*(_QWORD *)a1 + 224))(a1, a2, a3, a4, a5, 0, 4, a6, a7, v17);
    v15 = 0;
  }
  else
  {
    v15 = 4294967290;
  }
  objc_autoreleasePoolPop(v14);
  return v15;
}

uint64_t espresso_network_bind_input_metaltexture(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  id v13;
  void *v14;
  uint64_t v15;
  __int16 v17;

  v13 = a5;
  v14 = (void *)MEMORY[0x19401D4A4]();
  if (a1
  {
    v17 = 0;
    (*(void (**)(const void *, uint64_t, uint64_t, uint64_t, _QWORD, id, uint64_t, uint64_t, uint64_t, __int16))(*(_QWORD *)a1 + 224))(a1, a2, a3, a4, 0, v13, 4, a6, a7, v17);
    v15 = 0;
  }
  else
  {
    v15 = 4294967290;
  }
  objc_autoreleasePoolPop(v14);

  return v15;
}

uint64_t espresso_network_bind_input_vimagebuffer_argb8(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v12;
  uint64_t v13;

  v12 = (void *)MEMORY[0x19401D4A4]();
  if (a1
  {
    (*(void (**)(const void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 208))(a1, a2, a3, a4, a5, 4, a6);
    v13 = 0;
  }
  else
  {
    v13 = 4294967290;
  }
  objc_autoreleasePoolPop(v12);
  return v13;
}

uint64_t espresso_network_bind_input_vimagebuffer_rgba8(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v12;
  uint64_t v13;

  v12 = (void *)MEMORY[0x19401D4A4]();
  if (a1
  {
    (*(void (**)(const void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 200))(a1, a2, a3, a4, a5, 4, a6, 0);
    v13 = 0;
  }
  else
  {
    v13 = 4294967290;
  }
  objc_autoreleasePoolPop(v12);
  return v13;
}

uint64_t espresso_network_bind_input_vimagebuffer_planar8(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v12;
  uint64_t v13;

  v12 = (void *)MEMORY[0x19401D4A4]();
  if (a1
  {
    (*(void (**)(const void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 200))(a1, a2, a3, a4, a5, 1, a6, 1);
    v13 = 0;
  }
  else
  {
    v13 = 4294967290;
  }
  objc_autoreleasePoolPop(v12);
  return v13;
}

void sub_1913C72E0()
{
  __cxa_end_catch();
  JUMPOUT(0x1913C72E8);
}

unint64_t espresso_plan_get_error_info(uint64_t a1)
{
  unint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = 0xFFFFFFFA00000000;
  v3 = (void *)MEMORY[0x19401D4A4]();
  if (a1
  {
    v4 = *(unsigned int *)(*(_QWORD *)(a1 + 1064) + 160);
    v5 = *(unsigned int *)(a1 + 1044);
    *(_DWORD *)(a1 + 1044) = 0;
    v2 = v5 << 32;
  }
  else
  {
    v4 = 0;
  }
  objc_autoreleasePoolPop(v3);
  return v2 | v4;
}

uint64_t espresso_network_change_blob_shape(const void *a1, int a2, uint64_t a3, int a4, int a5, int a6, int a7, int a8)
{
  void *v16;
  _QWORD *v17;
  _DWORD *v18;
  _DWORD *v19;
  _DWORD *v20;
  _DWORD *v21;
  _DWORD *v22;
  uint64_t v23;
  uint64_t v25[3];
  _QWORD v26[3];
  _QWORD v27[3];
  _QWORD v28[3];
  _QWORD v29[3];
  _QWORD v30[3];
  uint64_t v31[4];

  v16 = (void *)MEMORY[0x19401D4A4]();
  if (a1
  {
    v17 = operator new(8uLL);
    *v17 = a3;
    v31[1] = (uint64_t)(v17 + 1);
    v31[2] = (uint64_t)(v17 + 1);
    v31[0] = (uint64_t)v17;
    v18 = operator new(4uLL);
    *v18 = a4;
    v30[1] = v18 + 1;
    v30[2] = v18 + 1;
    v30[0] = v18;
    v19 = operator new(4uLL);
    *v19 = a5;
    v29[1] = v19 + 1;
    v29[2] = v19 + 1;
    v29[0] = v19;
    v20 = operator new(4uLL);
    *v20 = a6;
    v28[1] = v20 + 1;
    v28[2] = v20 + 1;
    v28[0] = v20;
    v21 = operator new(4uLL);
    *v21 = a7;
    v27[1] = v21 + 1;
    v27[2] = v21 + 1;
    v27[0] = v21;
    v22 = operator new(4uLL);
    *v22 = a8;
    v26[1] = v22 + 1;
    v26[2] = v22 + 1;
    v26[0] = v22;
    memset(v25, 0, sizeof(v25));
    EspressoLight::espresso_plan::change_input_shapes((uint64_t)a1, a2, v31, v30, v29, v28, v27, v26, v25);
    operator delete(v22);
    operator delete(v21);
    operator delete(v20);
    operator delete(v19);
    operator delete(v18);
    operator delete(v17);
    v23 = 0;
  }
  else
  {
    v23 = 4294967290;
  }
  objc_autoreleasePoolPop(v16);
  return v23;
}

void sub_1913C7538(_Unwind_Exception *a1, int a2)
{
  char *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  std::exception *v11;

  operator delete(v7);
  operator delete(v8);
  operator delete(v6);
  operator delete(v5);
  operator delete(v4);
  operator delete(v3);
  if (a2 == 1)
  {
    v11 = (std::exception *)__cxa_begin_catch(a1);
    handle_ex_plan(v2, v11);
    __cxa_end_catch();
    JUMPOUT(0x1913C750CLL);
  }
  _Unwind_Resume(a1);
}

void sub_1913C75DC()
{
  JUMPOUT(0x1913C7598);
}

void sub_1913C75E8()
{
  JUMPOUT(0x1913C75A0);
}

uint64_t espresso_network_change_input_blob_shapes_seq(const void *a1, int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v17;
  uint64_t v18;

  v17 = (void *)MEMORY[0x19401D4A4]();
  v18 = espresso_network_change_input_blob_shapes_seq_rank(a1, a2, a3, a4, a5, a6, a7, a8, a9, 0);
  objc_autoreleasePoolPop(v17);
  return v18;
}

uint64_t espresso_network_change_input_blob_shapes(const void *a1, int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  std::vector<int> *v16;
  std::vector<int>::pointer begin;
  void *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  std::vector<int>::value_type __x;
  std::vector<int> v25;
  char v26[4];
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  int v31;
  uint64_t v32;
  std::__shared_weak_count *v33;

  Espresso::get_internal_network((uint64_t)a1, a2, (uint64_t)&v32);
  if (!v32)
  {
    v26[0] = 1;
    v27 = 0u;
    v28 = 0u;
    v29 = 0u;
    v30 = 0u;
    v31 = 0;
    goto LABEL_5;
  }
  v26[0] = *(_BYTE *)(v32 + 1352);
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v31 = 0;
  if (v26[0])
  {
LABEL_5:
    LODWORD(v27) = 723714072;
    kdebug_trace();
  }
  __x = 1;
  v16 = std::vector<int>::vector(&v25, a3, &__x);
  begin = v25.__begin_;
  v18 = (void *)MEMORY[0x19401D4A4](v16);
  v19 = espresso_network_change_input_blob_shapes_seq_rank(a1, a2, a3, a4, a5, a6, a7, a8, (uint64_t)begin, 0);
  objc_autoreleasePoolPop(v18);
  if (v25.__begin_)
  {
    v25.__end_ = v25.__begin_;
    operator delete(v25.__begin_);
  }
  Espresso_scoped_signpost::~Espresso_scoped_signpost((Espresso_scoped_signpost *)v26);
  v20 = v33;
  if (v33)
  {
    p_shared_owners = (unint64_t *)&v33->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  return v19;
}

void sub_1913C7824(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, char a16)
{
  uint64_t v16;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v16 - 96);
  _Unwind_Resume(a1);
}

uint64_t espresso_plan_perfbench(EspressoLight::espresso_plan *a1, uint64_t a2, const char *a3, float *a4)
{
  void *v7;
  double v8;
  float v9;
  uint64_t v10;

  v7 = (void *)MEMORY[0x19401D4A4]();
  if (a1
  {
    v9 = EspressoLight::espresso_plan::perfbench(a1, a3, 1, v8);
    v10 = 0;
    if (a4)
      *a4 = v9;
  }
  else
  {
    v10 = 4294967290;
  }
  objc_autoreleasePoolPop(v7);
  return v10;
}

uint64_t espresso_plan_perfbench_nocopy(EspressoLight::espresso_plan *a1, uint64_t a2, const char *a3, float *a4)
{
  void *v7;
  double v8;
  float v9;
  uint64_t v10;

  v7 = (void *)MEMORY[0x19401D4A4]();
  if (a1
  {
    v9 = EspressoLight::espresso_plan::perfbench(a1, a3, 0, v8);
    v10 = 0;
    if (a4)
      *a4 = v9;
  }
  else
  {
    v10 = 4294967290;
  }
  objc_autoreleasePoolPop(v7);
  return v10;
}

_QWORD *espresso_plan_add_cpp_net(_QWORD *lpsrc, __int128 *a2)
{
  _QWORD *v2;
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  __int128 v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  char *v24;
  __int128 v25;
  int64x2_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  int64x2_t v31;
  uint64_t v32;
  _QWORD *v33;

  v2 = lpsrc;
  if (lpsrc)
  {
    {
      v4 = (_QWORD *)v2[133];
      v5 = (_QWORD *)v4[4];
      v6 = v4[5];
      if ((unint64_t)v5 >= v6)
      {
        v11 = v4[3];
        v12 = ((uint64_t)v5 - v11) >> 4;
        v13 = v12 + 1;
        if ((unint64_t)(v12 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v14 = v6 - v11;
        if (v14 >> 3 > v13)
          v13 = v14 >> 3;
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
          v15 = 0xFFFFFFFFFFFFFFFLL;
        else
          v15 = v13;
        v33 = v4 + 5;
        v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v15);
        v18 = &v16[16 * v12];
        v19 = *a2;
        *(_OWORD *)v18 = *a2;
        if (*((_QWORD *)&v19 + 1))
        {
          v20 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
        }
        v23 = (_QWORD *)v4[3];
        v22 = (_QWORD *)v4[4];
        if (v22 == v23)
        {
          v26 = vdupq_n_s64((unint64_t)v22);
          v24 = &v16[16 * v12];
        }
        else
        {
          v24 = &v16[16 * v12];
          do
          {
            v25 = *((_OWORD *)v22 - 1);
            v22 -= 2;
            *((_OWORD *)v24 - 1) = v25;
            v24 -= 16;
            *v22 = 0;
            v22[1] = 0;
          }
          while (v22 != v23);
          v26 = *(int64x2_t *)(v4 + 3);
        }
        v10 = v18 + 16;
        v4[3] = v24;
        v4[4] = v18 + 16;
        v31 = v26;
        v27 = v4[5];
        v4[5] = &v16[16 * v17];
        v32 = v27;
        v30 = v26.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v30);
      }
      else
      {
        *v5 = *(_QWORD *)a2;
        v7 = *((_QWORD *)a2 + 1);
        v5[1] = v7;
        if (v7)
        {
          v8 = (unint64_t *)(v7 + 8);
          do
            v9 = __ldxr(v8);
          while (__stxr(v9 + 1, v8));
        }
        v10 = v5 + 2;
      }
      v4[4] = v10;
      v28 = *(_QWORD *)a2;
      *(_QWORD *)(v28 + 1240) = v2;
      *(_DWORD *)(v28 + 1248) = ((*(_QWORD *)(v2[133] + 32) - *(_QWORD *)(v2[133] + 24)) >> 4) - 1;
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

uint64_t espresso_plan_add_cpp_net_and_reload(const void *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  Espresso *v8;
  const char *v9;
  NSObject *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  int v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v20;
  std::__shared_weak_count *v21;
  uint8_t buf[4];
  const void *v23;
  __int16 v24;
  int v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0xFFFFFFFFLL;
  if (!v8)
    return 0xFFFFFFFFLL;
  Espresso::espresso_os_log_subsystem(v8, v9);
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 134218240;
    v23 = a1;
    v24 = 1024;
    v25 = a3;
    _os_log_impl(&dword_190DAF000, v10, OS_LOG_TYPE_INFO, "espresso_plan_add_cpp_net_and_reload plan=%zu cp=%d", buf, 0x12u);
  }

  v11 = (std::__shared_weak_count *)a2[1];
  v20 = *a2;
  v21 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  v14 = (*(uint64_t (**)(const void *, _QWORD, uint64_t, uint64_t *))(*(_QWORD *)a1 + 240))(a1, 0, a3, &v20);
  v15 = v21;
  if (v21)
  {
    v16 = (unint64_t *)&v21->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = 0;
  if (a4)
  {
    *(_DWORD *)(a4 + 8) = v14;
    *(_QWORD *)a4 = a1;
  }
  return v18;
}

void sub_1913C7D04(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  char *v9;
  uint64_t v10;
  std::exception *v13;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a2 == 1)
  {
    v13 = (std::exception *)__cxa_begin_catch(a1);
    if (v10)
    {
      *(_DWORD *)(v10 + 8) = -1;
      *(_QWORD *)v10 = 0;
    }
    handle_ex_plan(v9, v13);
    __cxa_end_catch();
    JUMPOUT(0x1913C7CCCLL);
  }
  _Unwind_Resume(a1);
}

uint64_t espresso_plan_wipe_tempoary(EspressoLight::espresso_plan **a1)
{
  void *v2;
  uint64_t v3;

  v2 = (void *)MEMORY[0x19401D4A4]();
  if (a1
  {
    EspressoLight::espresso_plan::wipe_layers(a1[133]);
    v3 = 0;
  }
  else
  {
    v3 = 4294967290;
  }
  objc_autoreleasePoolPop(v2);
  return v3;
}

uint64_t espresso_create_hx_context(void *a1, const void *a2)
{
  void *v4;
  uint64_t v5;

  v4 = (void *)MEMORY[0x19401D4A4]();
  v5 = operator new();
  EspressoLight::espresso_context::espresso_context(v5, 7, 0, a1, a2);
  objc_autoreleasePoolPop(v4);
  return v5;
}

void sub_1913C7E90(_Unwind_Exception *a1, int a2)
{
  uint64_t v2;
  uint64_t v4;
  EspressoLight *v6;
  std::exception *v7;

  v4 = v2;
  MEMORY[0x19401CD90](v4, 0x1020C406E52F545);
  if (a2 == 1)
  {
    v6 = (EspressoLight *)__cxa_begin_catch(a1);
    EspressoLight::handle_ex_(v6, v7);
    __cxa_end_catch();
    JUMPOUT(0x1913C7E74);
  }
  _Unwind_Resume(a1);
}

uint64_t espresso_create_hx_cva_context(void *a1, const void *a2)
{
  void *v4;
  uint64_t v5;

  v4 = (void *)MEMORY[0x19401D4A4]();
  v5 = operator new();
  EspressoLight::espresso_context::espresso_context(v5, 9, 0, a1, a2);
  objc_autoreleasePoolPop(v4);
  return v5;
}

void sub_1913C7F60(_Unwind_Exception *a1, int a2)
{
  uint64_t v2;
  uint64_t v4;
  EspressoLight *v6;
  std::exception *v7;

  v4 = v2;
  MEMORY[0x19401CD90](v4, 0x1020C406E52F545);
  if (a2 == 1)
  {
    v6 = (EspressoLight *)__cxa_begin_catch(a1);
    EspressoLight::handle_ex_(v6, v7);
    __cxa_end_catch();
    JUMPOUT(0x1913C7F44);
  }
  _Unwind_Resume(a1);
}

uint64_t espresso_hx_get_processing_session(EspressoLight *a1)
{
  uint64_t v1;
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  std::runtime_error *exception;
  std::string v10;
  _QWORD *v11;
  std::__shared_weak_count *v12;

  if (!a1)
LABEL_16:
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("The context is invalid.");
  if (*(_QWORD *)a1 != 0x50FBC8A8A6F7B03CLL)
  {
    EspressoLight::very_bad_client(a1);
    goto LABEL_16;
  }
  v1 = *((_QWORD *)a1 + 2);
  if (!*(_QWORD *)v1
  {
    v11 = 0;
    v12 = 0;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v10, "Not an HX context.");
    std::runtime_error::runtime_error(exception, &v10);
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D59458;
    LODWORD(exception[1].__vftable) = -6;
  }
  v3 = *(std::__shared_weak_count **)(v1 + 8);
  v11 = v2;
  v12 = v3;
  if (!v3)
    return v2[18];
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldxr(p_shared_owners);
  while (__stxr(v5 + 1, p_shared_owners));
  v6 = v2[18];
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return v6;
}

void sub_1913C8108(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  void *v16;
  int v17;
  EspressoLight *v20;
  std::exception *v21;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0)
      goto LABEL_6;
  }
  else if (!v17)
  {
LABEL_6:
    std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
    if (a2 == 1)
    {
      v20 = (EspressoLight *)__cxa_begin_catch(a1);
      EspressoLight::handle_ex_(v20, v21);
      __cxa_end_catch();
      JUMPOUT(0x1913C8078);
    }
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v16);
  goto LABEL_6;
}

uint64_t espresso_plan_can_use_submit(void *lpsrc, _DWORD *a2)
{
  int v4;
  uint64_t v5;

  if (!a2)
    return 4294967290;
  *a2 = 0;
  if (!lpsrc
  {
    return 4294967290;
  }
  v4 = (*(uint64_t (**)(void *))(*(_QWORD *)lpsrc + 176))(lpsrc);
  v5 = 0;
  *a2 = v4;
  return v5;
}

uint64_t espresso_plan_submit(const void *a1, void *a2, void *a3)
{
  return espresso_plan_submit_with_args(a1, a2, 0, 0, a3);
}

uint64_t espresso_plan_submit_with_args(const void *a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v9;
  id v10;
  void *v11;
  void *v12;
  uint64_t v13;

  v9 = a2;
  v10 = a5;
  v11 = (void *)MEMORY[0x19401D4A4]();
  if (a1)
  {
    v13 = 4294967290;
    if (v9 && v12)
    {
      (*(void (**)(const void *, id, uint64_t, uint64_t, id))(*(_QWORD *)a1 + 192))(a1, v9, a3, a4, v10);
      v13 = 0;
    }
  }
  else
  {
    v13 = 4294967290;
  }
  objc_autoreleasePoolPop(v11);

  return v13;
}

uint64_t espresso_network_temporal_state_reset(_QWORD *a1, int a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  __int128 v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  __int128 v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  const void *v30;
  void *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  _DWORD *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  void (***v40)(uint64_t *__return_ptr, _QWORD);
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  std::runtime_error *exception;
  std::runtime_error *v55;
  __int128 v56;
  void (*v57)(uint64_t, uint64_t);
  void *v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  void *v61;
  std::__shared_weak_count *v62;
  __int128 v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  void (***v66)(uint64_t *__return_ptr, _QWORD);
  std::__shared_weak_count *v67;
  __int128 v68;

  v6 = (void *)MEMORY[0x19401D4A4]();
  if (a1
  {
    v7 = *(_QWORD *)(a1[133] + 24);
    if (a2 >= (unint64_t)((*(_QWORD *)(a1[133] + 32) - v7) >> 4))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Invalid network_index.");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v8 = *(_OWORD *)(v7 + 16 * a2);
    v68 = v8;
    if (*((_QWORD *)&v8 + 1))
    {
      v9 = (unint64_t *)(*((_QWORD *)&v8 + 1) + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    v11 = v8;
    if (!(_QWORD)v8)
    {
      v55 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v55, "Invalid network");
      __cxa_throw(v55, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v12 = *(std::__shared_weak_count **)(v8 + 24);
    v66 = *(void (****)(uint64_t *__return_ptr, _QWORD))(v8 + 16);
    v67 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    if (a3)
    {
      v15 = *(_QWORD *)a3;
      v63 = v8;
      if (*((_QWORD *)&v8 + 1))
      {
        v16 = (unint64_t *)(*((_QWORD *)&v8 + 1) + 8);
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
      }
      Espresso::auto_add_auto_temporal_smoothing_before_softmaxes((uint64_t *)&v63, v15, &v64);
      v18 = v65;
      if (v65)
      {
        v19 = (unint64_t *)&v65->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v21 = (std::__shared_weak_count *)*((_QWORD *)&v63 + 1);
      if (*((_QWORD *)&v63 + 1))
      {
        v22 = (unint64_t *)(*((_QWORD *)&v63 + 1) + 8);
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      v11 = v68;
      v24 = *(_QWORD *)(v68 + 32);
      if (*(_QWORD *)(v68 + 40) != v24)
      {
        v25 = 0;
        do
        {
          v26 = *(_OWORD *)(v24 + 16 * v25);
          v56 = v26;
          if (*((_QWORD *)&v26 + 1))
          {
            v27 = (unint64_t *)(*((_QWORD *)&v26 + 1) + 8);
            do
              v28 = __ldxr(v27);
            while (__stxr(v28 + 1, v27));
          }
          v29 = v26;
          v30 = *(const void **)(v26 + 64);
          if (v30)
          {
            if (v31)
            {
              v32 = *(std::__shared_weak_count **)(v29 + 72);
              v61 = v31;
              v62 = v32;
              if (v32)
              {
                v33 = (unint64_t *)&v32->__shared_owners_;
                do
                  v34 = __ldxr(v33);
                while (__stxr(v34 + 1, v33));
              }
              v35 = (_DWORD *)(*(uint64_t (**)(void *))(*(_QWORD *)v31 + 320))(v31);
              *v35 = *(_DWORD *)a3;
              v35[1] = *(_DWORD *)(a3 + 4);
              if (v32)
              {
                v36 = (unint64_t *)&v32->__shared_owners_;
                do
                  v37 = __ldaxr(v36);
                while (__stlxr(v37 - 1, v36));
                if (!v37)
                {
                  ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
                  std::__shared_weak_count::__release_weak(v32);
                }
              }
            }
          }
          if (*((_QWORD *)&v56 + 1))
          {
            v38 = (unint64_t *)(*((_QWORD *)&v56 + 1) + 8);
            do
              v39 = __ldaxr(v38);
            while (__stlxr(v39 - 1, v38));
            if (!v39)
            {
              (*(void (**)(_QWORD))(**((_QWORD **)&v56 + 1) + 16))(*((_QWORD *)&v56 + 1));
              std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v56 + 1));
            }
          }
          ++v25;
          v11 = v68;
          v24 = *(_QWORD *)(v68 + 32);
        }
        while (v25 < (*(_QWORD *)(v68 + 40) - v24) >> 4);
      }
    }
    v40 = v66;
    *(_QWORD *)&v56 = MEMORY[0x1E0C809B0];
    *((_QWORD *)&v56 + 1) = 3321888768;
    v57 = ___ZN13EspressoLight13espresso_plan20temporal_state_resetEiP37espresso_temporal_smoothing_options_t_block_invoke;
    v58 = &__block_descriptor_48_ea8_32c41_ZTSNSt3__110shared_ptrIN8Espresso3netEEE_e10_v16__0r_v8l;
    v59 = v11;
    v60 = (std::__shared_weak_count *)*((_QWORD *)&v68 + 1);
    if (*((_QWORD *)&v68 + 1))
    {
      v41 = (unint64_t *)(*((_QWORD *)&v68 + 1) + 8);
      do
        v42 = __ldxr(v41);
      while (__stxr(v42 + 1, v41));
    }
    Espresso::abstract_context::compute_batch_sync(v40, &v56);
    v43 = v60;
    if (v60)
    {
      v44 = (unint64_t *)&v60->__shared_owners_;
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }
    v46 = v67;
    if (v67)
    {
      v47 = (unint64_t *)&v67->__shared_owners_;
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }
    v49 = (std::__shared_weak_count *)*((_QWORD *)&v68 + 1);
    if (*((_QWORD *)&v68 + 1))
    {
      v50 = (unint64_t *)(*((_QWORD *)&v68 + 1) + 8);
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
    }
    v52 = 0;
  }
  else
  {
    v52 = 4294967290;
  }
  objc_autoreleasePoolPop(v6);
  return v52;
}

void sub_1913C8784(_Unwind_Exception *a1, int a2)
{
  char *v2;
  uint64_t v3;
  std::exception *v6;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v3 - 80);
  if (a2 == 1)
  {
    v6 = (std::exception *)__cxa_begin_catch(a1);
    handle_ex_plan(v2, v6);
    __cxa_end_catch();
    JUMPOUT(0x1913C86F4);
  }
  _Unwind_Resume(a1);
}

uint64_t espresso_plan_submit_camera(_QWORD *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  int v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  const void *v10;
  void (***v11)(void **__return_ptr);
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t *v17;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  std::string::size_type v23;
  __int128 v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t **i;
  uint64_t v30;
  std::__shared_weak_count *v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t *v45;
  uint64_t *v46;
  const void *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  void *v51;
  uint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  void *v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::runtime_error *v81;
  const char *v82;
  std::runtime_error *exception;
  id v84;
  __int128 v85;
  std::string v86;
  void *v87;
  id v88;
  _QWORD *v89;
  __int128 v90;
  unint64_t v91;
  void *v92;
  std::__shared_weak_count *v93;
  uint64_t v94;
  std::__shared_weak_count *v95;
  __int128 v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  __int128 v99;
  void *lpsrc;
  std::__shared_weak_count *v101;
  _QWORD v102[9];
  void (***v103)(void **__return_ptr);
  std::__shared_weak_count *v104;
  int v105[5];

  v3 = a2;
  if (!a1
  {
    v16 = 4294967290;
    goto LABEL_102;
  }
  v4 = v3;
  v5 = a1[133];
  v6 = *(_DWORD *)(v5 + 160);
  if (v6 != 1)
    Espresso::throw_exception_selector<Espresso::invalid_state_error,espresso_plan_phase_t &>(v6);
  if (!v4)
  {
    v82 = "A client cannot determine when the data is ready without the callback.";
    goto LABEL_109;
  }
  if (!*(_QWORD *)(v5 + 176))
  {
    v82 = "Missing execution queue";
LABEL_109:
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>(v82);
  }
  v8 = *(uint64_t **)(v5 + 24);
  v7 = *(uint64_t **)(v5 + 32);
  if (v7 == v8)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v86, "Plan is empty");
    std::runtime_error::runtime_error(exception, &v86);
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D59458;
    LODWORD(exception[1].__vftable) = -6;
  }
  v9 = *v8;
  v10 = *(const void **)(*v8 + 16);
  if (!v10
  {
    v103 = 0;
    v104 = 0;
    v81 = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v86, "The Engine must be ANE_RUNTIME");
    std::runtime_error::runtime_error(v81, &v86);
    v81->__vftable = (std::runtime_error_vtbl *)&off_1E2D59458;
    LODWORD(v81[1].__vftable) = -6;
  }
  v12 = *(std::__shared_weak_count **)(v9 + 24);
  v103 = v11;
  v104 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    v15 = (_QWORD *)a1[133];
    v8 = (uint64_t *)v15[3];
    v7 = (uint64_t *)v15[4];
  }
  else
  {
    v15 = (_QWORD *)v5;
  }
  v17 = v15 + 51;
  do
  {
    if (__ldaxr(v17))
    {
      __clrex();
      Espresso::throw_exception_selector<Espresso::invalid_argument_error>("A plan cannot be run again until all of its networks are executed.");
    }
  }
  while (__stlxr(((char *)v7 - (char *)v8) >> 4, v17));
  v19 = *(_QWORD *)(a1[133] + 144);
  LOBYTE(v102[0]) = *(_BYTE *)(**(_QWORD **)(v5 + 24) + 1352);
  memset((char *)v102 + 4, 0, 68);
  if (LOBYTE(v102[0]))
  {
    v102[1] = v19;
    memset(&v102[2], 0, 24);
    v102[5] = v19;
    memset(&v102[6], 0, 24);
    HIDWORD(v102[0]) = 723714160;
    kdebug_trace();
  }
  v84 = v3;
  (**v103)(&lpsrc);
  v20 = *(_QWORD **)(v5 + 24);
  if (v20 != *(_QWORD **)(v5 + 32))
    (*(void (**)(void *, _QWORD))(*(_QWORD *)lpsrc + 48))(lpsrc, *v20);
  EspressoLight::plan_task_t::disable_memory_lingering_if_needed(*(_QWORD **)(a1[133] + 144), lpsrc);
  v21 = *(_QWORD *)(v5 + 24);
  if (*(_QWORD *)(v5 + 32) != v21)
  {
    v22 = 0;
    v23 = MEMORY[0x1E0C809B0];
    do
    {
      v24 = *(_OWORD *)(v21 + 16 * v22);
      v99 = v24;
      v85 = v24;
      v25 = *((_QWORD *)&v24 + 1);
      if (*((_QWORD *)&v24 + 1))
      {
        v26 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
        do
          v27 = __ldxr(v26);
        while (__stxr(v27 + 1, v26));
      }
      v28 = a1[133];
      v105[0] = v22;
      for (i = (uint64_t **)*((_QWORD *)std::__tree<std::__value_type<int,std::unordered_set<std::shared_ptr<Espresso::abstract_blob_container>>>,std::__map_value_compare<int,std::__value_type<int,std::unordered_set<std::shared_ptr<Espresso::abstract_blob_container>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::unordered_set<std::shared_ptr<Espresso::abstract_blob_container>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*(_QWORD *)(v28 + 144) + 232), v22, v105)+ 7); i; i = (uint64_t **)*i)
        (*(void (**)(uint64_t *, void **))(*i[2] + 168))(i[2], &lpsrc);
      v30 = a1[133];
      v32 = *(_QWORD *)(v30 + 144);
      v31 = *(std::__shared_weak_count **)(v30 + 152);
      v97 = v32;
      v98 = v31;
      if (v31)
      {
        v33 = (unint64_t *)&v31->__shared_owners_;
        do
          v34 = __ldxr(v33);
        while (__stxr(v34 + 1, v33));
      }
      v96 = v85;
      if (v25)
      {
        v35 = (unint64_t *)(v25 + 8);
        do
          v36 = __ldxr(v35);
        while (__stxr(v36 + 1, v35));
      }
      EspressoLight::espresso_plan::__copy_inputs(&v97, (uint64_t)&lpsrc, v22, (uint64_t *)&v96);
      v37 = (std::__shared_weak_count *)*((_QWORD *)&v96 + 1);
      if (*((_QWORD *)&v96 + 1))
      {
        v38 = (unint64_t *)(*((_QWORD *)&v96 + 1) + 8);
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
      }
      v40 = v98;
      if (v98)
      {
        v41 = (unint64_t *)&v98->__shared_owners_;
        do
          v42 = __ldaxr(v41);
        while (__stlxr(v42 - 1, v41));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }
      v43 = v99;
      v44 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)(v99 + 16) + 8))(*(_QWORD *)(*(_QWORD *)(v99 + 16) + 8));
      v45 = std::__hash_table<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::__unordered_map_hasher<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::hash<Espresso::platform>,std::equal_to<Espresso::platform>,true>,std::__unordered_map_equal<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::equal_to<Espresso::platform>,std::hash<Espresso::platform>,true>,std::allocator<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>>>::find<Espresso::platform>((_QWORD *)(v43 + 528), v44);
      if (!v45)
      {
        v94 = 0;
        v95 = 0;
LABEL_104:
        Espresso::throw_exception_selector<Espresso::invalid_state_error>("Network missing compiler");
      }
      v46 = v45;
      v47 = (const void *)v45[3];
      v48 = (std::__shared_weak_count *)v46[4];
      if (v48)
      {
        v49 = (unint64_t *)&v48->__shared_owners_;
        do
          v50 = __ldxr(v49);
        while (__stxr(v50 + 1, v49));
      }
      if (v47
      {
        v52 = (uint64_t)v51;
        v94 = (uint64_t)v51;
        v95 = v48;
        if (!v48)
          goto LABEL_64;
        v53 = (unint64_t *)&v48->__shared_owners_;
        do
          v54 = __ldxr(v53);
        while (__stxr(v54 + 1, v53));
      }
      else
      {
        v94 = 0;
        v95 = 0;
        if (!v48)
          goto LABEL_104;
      }
      v55 = (unint64_t *)&v48->__shared_owners_;
      do
        v56 = __ldaxr(v55);
      while (__stlxr(v56 - 1, v55));
      if (!v56)
      {
        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
        std::__shared_weak_count::__release_weak(v48);
      }
      v52 = v94;
      if (!v94)
        goto LABEL_104;
LABEL_64:
      v57 = *(void **)(a1[133] + 176);
      v86.__r_.__value_.__r.__words[0] = v23;
      v86.__r_.__value_.__l.__size_ = 3321888768;
      v86.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZN13EspressoLight13espresso_plan13submit_cameraEU13block_pointerFv18espresso_network_tP21espresso_error_info_tE_block_invoke;
      v87 = &unk_1E2DC4448;
      v89 = a1;
      v90 = v99;
      if (*((_QWORD *)&v99 + 1))
      {
        v58 = (unint64_t *)(*((_QWORD *)&v99 + 1) + 8);
        do
          v59 = __ldxr(v58);
        while (__stxr(v59 + 1, v58));
      }
      v91 = v22;
      v88 = v4;
      v92 = lpsrc;
      v93 = v101;
      if (v101)
      {
        v60 = (unint64_t *)&v101->__shared_owners_;
        do
          v61 = __ldxr(v60);
        while (__stxr(v61 + 1, v60));
      }
      Espresso::ANERuntimeEngine::compiler::forward_single_ane_segment(v52, (uint64_t *)&lpsrc, v57, &v86);
      v62 = v93;
      if (v93)
      {
        v63 = (unint64_t *)&v93->__shared_owners_;
        do
          v64 = __ldaxr(v63);
        while (__stlxr(v64 - 1, v63));
        if (!v64)
        {
          ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
          std::__shared_weak_count::__release_weak(v62);
        }
      }

      v65 = (std::__shared_weak_count *)*((_QWORD *)&v90 + 1);
      if (*((_QWORD *)&v90 + 1))
      {
        v66 = (unint64_t *)(*((_QWORD *)&v90 + 1) + 8);
        do
          v67 = __ldaxr(v66);
        while (__stlxr(v67 - 1, v66));
        if (!v67)
        {
          ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
          std::__shared_weak_count::__release_weak(v65);
        }
      }
      v68 = v95;
      if (v95)
      {
        v69 = (unint64_t *)&v95->__shared_owners_;
        do
          v70 = __ldaxr(v69);
        while (__stlxr(v70 - 1, v69));
        if (!v70)
        {
          ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
          std::__shared_weak_count::__release_weak(v68);
        }
      }
      v71 = (std::__shared_weak_count *)*((_QWORD *)&v99 + 1);
      if (*((_QWORD *)&v99 + 1))
      {
        v72 = (unint64_t *)(*((_QWORD *)&v99 + 1) + 8);
        do
          v73 = __ldaxr(v72);
        while (__stlxr(v73 - 1, v72));
        if (!v73)
        {
          ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
          std::__shared_weak_count::__release_weak(v71);
        }
      }
      ++v22;
      v21 = *(_QWORD *)(v5 + 24);
    }
    while (v22 < (*(_QWORD *)(v5 + 32) - v21) >> 4);
  }
  v74 = v101;
  v3 = v84;
  if (v101)
  {
    v75 = (unint64_t *)&v101->__shared_owners_;
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
  Espresso_scoped_signpost::~Espresso_scoped_signpost((Espresso_scoped_signpost *)v102);
  v77 = v104;
  if (v104)
  {
    v78 = (unint64_t *)&v104->__shared_owners_;
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 - 1, v78));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }

  v16 = 0;
LABEL_102:

  return v16;
}

void sub_1913C8F8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,char a32,uint64_t a33,char a34,uint64_t a35,char a36,uint64_t a37,char a38)
{
  int v38;
  void *v39;
  char *v40;
  void *v41;
  std::exception *v44;

  if (a21 < 0)
  {
    operator delete(__p);
    if ((v38 & 1) == 0)
      goto LABEL_6;
  }
  else if (!v38)
  {
LABEL_6:

    if (a2 == 1)
    {
      v44 = (std::exception *)__cxa_begin_catch(a1);
      handle_ex_plan(v40, v44);
      __cxa_end_catch();
      JUMPOUT(0x1913C8E54);
    }

    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v41);
  goto LABEL_6;
}

void sub_1913C9144(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,std::exception_ptr a27)
{
  std::exception_ptr::~exception_ptr(&a27);
  __cxa_end_catch();
  JUMPOUT(0x1913C90B0);
}

void sub_1913C9170(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1913C9178()
{
  __cxa_end_catch();
  JUMPOUT(0x1913C9180);
}

uint64_t espresso_dump_ir(_QWORD *a1, uint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unsigned int v16;
  uint64_t *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  char v21;
  unsigned int v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  char v34;
  NSObject *v36;
  void *__p[2];
  char v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  std::__shared_weak_count *v44;

  v4 = (void *)MEMORY[0x19401D4A4]();
  if (a1)
  {
    v6 = 4294967290;
    if (a2 && v5)
    {
      v7 = (uint64_t)std::string::basic_string[abi:ne180100]<0>(__p, *(char **)a2);
      v9 = (_QWORD *)a1[133];
      if (*(_BYTE *)(*v9 + 124))
      {
        v10 = (uint64_t *)v9[3];
        v11 = (uint64_t *)v9[4];
        if (v10 != v11)
        {
          do
          {
            v13 = *v10;
            v12 = (std::__shared_weak_count *)v10[1];
            v43 = *v10;
            v44 = v12;
            if (v12)
            {
              p_shared_owners = (unint64_t *)&v12->__shared_owners_;
              do
                v15 = __ldxr(p_shared_owners);
              while (__stxr(v15 + 1, p_shared_owners));
            }
            v16 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)(v13 + 16) + 8))(*(_QWORD *)(*(_QWORD *)(v13 + 16)
                                                                                                  + 8));
            v17 = std::__hash_table<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::__unordered_map_hasher<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::hash<Espresso::platform>,std::equal_to<Espresso::platform>,true>,std::__unordered_map_equal<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::equal_to<Espresso::platform>,std::hash<Espresso::platform>,true>,std::allocator<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>>>::find<Espresso::platform>((_QWORD *)(v13 + 528), v16);
            if (v17)
            {
              v18 = (std::__shared_weak_count *)v17[4];
              v41 = v17[3];
              v42 = v18;
              if (v18)
              {
                v19 = (unint64_t *)&v18->__shared_owners_;
                do
                  v20 = __ldxr(v19);
                while (__stxr(v20 + 1, v19));
              }
            }
            else
            {
              v18 = 0;
              v41 = 0;
              v42 = 0;
            }
            if (*(char *)(v13 + 471) < 0)
            {
              if (!*(_QWORD *)(v13 + 456))
              {
LABEL_20:
                v22 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)(v13 + 16) + 8))(*(_QWORD *)(*(_QWORD *)(v13 + 16) + 8));
                v7 = (uint64_t)std::__hash_table<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::__unordered_map_hasher<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::hash<Espresso::platform>,std::equal_to<Espresso::platform>,true>,std::__unordered_map_equal<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::equal_to<Espresso::platform>,std::hash<Espresso::platform>,true>,std::allocator<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>>>::find<Espresso::platform>((_QWORD *)(v13 + 528), v22);
                if (v7)
                {
                  v23 = v7;
                  v7 = *(_QWORD *)(v7 + 24);
                  v24 = *(std::__shared_weak_count **)(v23 + 32);
                  v39 = v7;
                  v40 = v24;
                  if (v24)
                  {
                    v25 = (unint64_t *)&v24->__shared_owners_;
                    do
                      v26 = __ldxr(v25);
                    while (__stxr(v26 + 1, v25));
                  }
                  if (v7)
                    v7 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v7 + 32))(v7, __p);
                  if (v24)
                  {
                    v27 = (unint64_t *)&v24->__shared_owners_;
                    do
                      v28 = __ldaxr(v27);
                    while (__stlxr(v28 - 1, v27));
                    if (!v28)
                    {
                      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
                      std::__shared_weak_count::__release_weak(v24);
                    }
                  }
                }
                v21 = 0;
                v18 = v42;
                if (!v42)
                  goto LABEL_36;
LABEL_32:
                v29 = (unint64_t *)&v18->__shared_owners_;
                do
                  v30 = __ldaxr(v29);
                while (__stlxr(v30 - 1, v29));
                if (!v30)
                {
                  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
                  std::__shared_weak_count::__release_weak(v18);
                }
                goto LABEL_36;
              }
            }
            else if (!*(_BYTE *)(v13 + 471))
            {
              goto LABEL_20;
            }
            v7 = printf("Dump_directory detected, IR already generated during plan_build");
            v21 = 1;
            if (v18)
              goto LABEL_32;
LABEL_36:
            v31 = v44;
            if (v44)
            {
              v32 = (unint64_t *)&v44->__shared_owners_;
              do
                v33 = __ldaxr(v32);
              while (__stlxr(v33 - 1, v32));
              if (!v33)
              {
                ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
                std::__shared_weak_count::__release_weak(v31);
              }
            }
            v10 += 2;
            if (v10 == v11)
              v34 = 1;
            else
              v34 = v21;
          }
          while ((v34 & 1) == 0);
        }
      }
      if (v38 < 0)
        operator delete(__p[0]);
      if (*(_BYTE *)(a2 + 8) && !*(_BYTE *)(*(_QWORD *)a1[133] + 124))
      {
        Espresso::espresso_os_log_subsystem((Espresso *)v7, v8);
        v36 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
        {
          LOWORD(__p[0]) = 0;
          _os_log_error_impl(&dword_190DAF000, v36, OS_LOG_TYPE_ERROR, "Primary context is not associated with a compiler. Cannot dump ir. It's possible that the model was forced to CPU due to an unsupported feature for the requested compilation platform (i.e. control flow or dynamic allocation)", (uint8_t *)__p, 2u);
        }

        v6 = 4294967291;
      }
      else
      {
        v6 = 0;
      }
    }
  }
  else
  {
    v6 = 4294967290;
  }
  objc_autoreleasePoolPop(v4);
  return v6;
}

void sub_1913C9480(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, char a20)
{
  char *v20;
  std::exception *v21;

  if (a2 == 1)
  {
    v21 = (std::exception *)__cxa_begin_catch(exception_object);
    handle_ex_plan(v20, v21);
    __cxa_end_catch();
    JUMPOUT(0x1913C9404);
  }
  _Unwind_Resume(exception_object);
}

uint64_t espresso_network_compiler_set_metadata_key(const void *a1, int a2, uint64_t a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v11;
  std::__shared_weak_count *v12;
  std::string __str;

  if (!a1
  {
    return 4294967290;
  }
  memset(&__str, 0, sizeof(__str));
  if (a3)
    MEMORY[0x19401C808](&__str, a3);
  Espresso::get_internal_network((uint64_t)a1, a2, (uint64_t)&v11);
  if (v11)
  {
    std::string::operator=((std::string *)(v11 + 728), &__str);
    v6 = 0;
  }
  else
  {
    v6 = 4294967291;
  }
  v7 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  return v6;
}

void sub_1913C9600(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *espresso_get_internal_queue(_QWORD *result)
{
  if (result)
  {
    if (*result == 0x50FBC8A8A6F7B03CLL)
    {
      result = *(_QWORD **)result[2];
      if (result)
      {
        if (result)
          return (_QWORD *)result[24];
      }
    }
    else
    {
      EspressoLight::very_bad_client((EspressoLight *)result);
      return 0;
    }
  }
  return result;
}

uint64_t espresso_recommended_device_id()
{
  return 0xFFFFFFFFLL;
}

void dump_test_vector(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  BOOL v5;
  uint64_t *v6;
  void *v7;
  char v8;
  char v9;
  void *v10;
  id v11;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t i;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *size;
  unint64_t *v25;
  unint64_t v26;
  unint64_t j;
  uint64_t v28;
  Espresso *v29;
  const char *v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::string::size_type v42;
  __int128 v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  char v51;
  NSObject *v52;
  unint64_t *p_shared_owners;
  unint64_t v54;
  __int128 v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  void *v68;
  std::string *v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  uint64_t v78;
  size_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  void *v83;
  void *v84;
  void *v85;
  void *v86;
  void *v87;
  void *v88;
  size_t v89;
  std::string *v90;
  std::string *v91;
  std::string *v92;
  void *v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  std::string *v103;
  id v104;
  void *v105;
  id v106;
  std::runtime_error *v107;
  std::string *v108;
  __int128 v109;
  std::runtime_error *v110;
  std::string *v111;
  __int128 v112;
  std::runtime_error *exception;
  std::runtime_error *v114;
  std::runtime_error *v115;
  std::string *v116;
  __int128 v117;
  std::runtime_error *v118;
  std::string *v119;
  std::string *v120;
  __int128 v121;
  std::runtime_error *v122;
  std::string *v123;
  std::string *v124;
  __int128 v125;
  __int128 v126;
  id v127;
  id v128;
  id v129;
  id v130;
  void *v131;
  std::string::size_type v132;
  void *v133;
  void *v134;
  void *v135;
  FILE *__stream;
  void *v137;
  std::string::size_type v138;
  void *__ptr;
  void *__ptra;
  uint64_t v141;
  id v142;
  std::string v143;
  unint64_t v144;
  std::__shared_weak_count *v145;
  __int128 v146;
  __int128 v147;
  std::string v148;
  __int128 v149;
  char **v150;
  char *v151[2];
  std::string v152;
  id v153;
  char v154;
  _QWORD v155[9];
  _QWORD v156[2];
  uint64_t v157;
  uint64_t v158;
  void *v159;
  void *v160;
  void *v161;
  void *v162;
  void *v163;
  _QWORD v164[8];
  _QWORD v165[8];
  std::string v166;
  uint64_t v167;

  v167 = *MEMORY[0x1E0C80C00];
  if (!*a1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Unexpected null network");
    goto LABEL_163;
  }
  v2 = *(_QWORD *)(*a1 + 16);
  if (!v2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Unexpected null context");
LABEL_163:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (*(_BYTE *)(v2 + 44))
    v5 = 0;
  else
    v5 = getenv("ESPRESSO_LITE_TEST_VECTORS") == 0;
  if (*((char *)a2 + 23) >= 0)
    v6 = a2;
  else
    v6 = (uint64_t *)*a2;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v6);
  v131 = (void *)objc_claimAutoreleasedReturnValue();
  v154 = 0;
  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "fileExistsAtPath:isDirectory:", v131, &v154);

  if ((v8 & 1) != 0)
  {
    v9 = 1;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v153 = 0;
    objc_msgSend(v10, "createDirectoryAtPath:withIntermediateDirectories:attributes:error:", v131, 1, 0, &v153);
    v11 = v153;

    objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v12, "fileExistsAtPath:isDirectory:", v131, &v154);

  }
  if (!v154 || (v9 & 1) == 0)
  {
    v114 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(v114, &v148);
    __cxa_throw(v114, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v137 = (void *)objc_opt_new();
  objc_msgSend(v131, "stringByAppendingPathComponent:", CFSTR("blobs.bin"));
  v127 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v131, "stringByAppendingPathComponent:", CFSTR("test_vector.json"));
  v128 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v131, "stringByAppendingPathComponent:", CFSTR("test_vector.plist"));
  v129 = (id)objc_claimAutoreleasedReturnValue();
  v130 = objc_retainAutorelease(v127);
  __stream = fopen((const char *)objc_msgSend(v130, "UTF8String"), "wb");
  if (!__stream)
  {
    v115 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v152, (char *)objc_msgSend(objc_retainAutorelease(v130), "UTF8String"));
    v116 = std::string::insert(&v152, 0, "Cannot create file: ");
    v117 = *(_OWORD *)&v116->__r_.__value_.__l.__data_;
    v148.__r_.__value_.__r.__words[2] = v116->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v148.__r_.__value_.__l.__data_ = v117;
    v116->__r_.__value_.__l.__size_ = 0;
    v116->__r_.__value_.__r.__words[2] = 0;
    v116->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v115, &v148);
    __cxa_throw(v115, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  memset(&v152, 0, sizeof(v152));
  v151[0] = 0;
  v151[1] = 0;
  v150 = v151;
  v13 = *a1;
  if (*(_QWORD *)(*a1 + 40) != *(_QWORD *)(*a1 + 32))
  {
    v14 = 0;
    do
    {
      for (i = 0; ; ++i)
      {
        v148.__r_.__value_.__r.__words[0] = v14;
        v16 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v13 + 56, v14, &v148);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16[4] - v16[3]) >> 3) <= i)
          break;
        v17 = *a1 + 56;
        v148.__r_.__value_.__r.__words[0] = v14;
        v18 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v17, v14, &v148)[3]+ 24 * i;
        if (*(char *)(v18 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v166, *(const std::string::value_type **)v18, *(_QWORD *)(v18 + 8));
        }
        else
        {
          v19 = *(_OWORD *)v18;
          v166.__r_.__value_.__r.__words[2] = *(_QWORD *)(v18 + 16);
          *(_OWORD *)&v166.__r_.__value_.__l.__data_ = v19;
        }
        if (v5
          || (v20 = *a1,
              std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(_QWORD **)(*a1 + 240), &v166))|| std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(_QWORD **)(v20 + 264), &v166))
        {
          v143.__r_.__value_.__r.__words[0] = (std::string::size_type)&v166;
          if (!std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v150, &v166, (__int128 **)&v143)[56])
          {
            Espresso::net::get_blob_or_global_with_prefix(*a1, &v166, &v143);
            if (SHIBYTE(v166.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v148, v166.__r_.__value_.__l.__data_, v166.__r_.__value_.__l.__size_);
            else
              v148 = v166;
            v149 = *(_OWORD *)&v143.__r_.__value_.__l.__data_;
            *(_OWORD *)&v143.__r_.__value_.__l.__data_ = 0uLL;
            std::vector<std::pair<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>::push_back[abi:ne180100]((void **)&v152.__r_.__value_.__l.__data_, (__int128 *)&v148);
            v21 = (std::__shared_weak_count *)*((_QWORD *)&v149 + 1);
            if (*((_QWORD *)&v149 + 1))
            {
              v22 = (unint64_t *)(*((_QWORD *)&v149 + 1) + 8);
              do
                v23 = __ldaxr(v22);
              while (__stlxr(v23 - 1, v22));
              if (!v23)
              {
                ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
                std::__shared_weak_count::__release_weak(v21);
              }
            }
            if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v148.__r_.__value_.__l.__data_);
            size = (std::__shared_weak_count *)v143.__r_.__value_.__l.__size_;
            if (v143.__r_.__value_.__l.__size_)
            {
              v25 = (unint64_t *)(v143.__r_.__value_.__l.__size_ + 8);
              do
                v26 = __ldaxr(v25);
              while (__stlxr(v26 - 1, v25));
              if (!v26)
              {
                ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
                std::__shared_weak_count::__release_weak(size);
              }
            }
            v143.__r_.__value_.__r.__words[0] = (std::string::size_type)&v166;
            std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v150, &v166, (__int128 **)&v143)[56] = 1;
          }
        }
        if (SHIBYTE(v166.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v166.__r_.__value_.__l.__data_);
        v13 = *a1;
      }
      for (j = 0; ; ++j)
      {
        v28 = *a1 + 96;
        v148.__r_.__value_.__r.__words[0] = v14;
        v29 = (Espresso *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v28, v14, &v148);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v29 + 4) - *((_QWORD *)v29 + 3)) >> 3) <= j)
          break;
        v32 = *a1 + 96;
        v148.__r_.__value_.__r.__words[0] = v14;
        v33 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v32, v14, &v148)[3]+ 24 * j;
        if (*(char *)(v33 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v166, *(const std::string::value_type **)v33, *(_QWORD *)(v33 + 8));
        }
        else
        {
          v34 = *(_OWORD *)v33;
          v166.__r_.__value_.__r.__words[2] = *(_QWORD *)(v33 + 16);
          *(_OWORD *)&v166.__r_.__value_.__l.__data_ = v34;
        }
        v35 = *a1;
        if (v5
          || std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(_QWORD **)(v35 + 240), &v166)|| std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(_QWORD **)(v35 + 264), &v166))
        {
          Espresso::net::get_blob_or_global_with_prefix(v35, &v166, &v143);
          if (SHIBYTE(v166.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v148, v166.__r_.__value_.__l.__data_, v166.__r_.__value_.__l.__size_);
          else
            v148 = v166;
          v149 = *(_OWORD *)&v143.__r_.__value_.__l.__data_;
          *(_OWORD *)&v143.__r_.__value_.__l.__data_ = 0uLL;
          std::vector<std::pair<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>::push_back[abi:ne180100]((void **)&v152.__r_.__value_.__l.__data_, (__int128 *)&v148);
          v36 = (std::__shared_weak_count *)*((_QWORD *)&v149 + 1);
          if (*((_QWORD *)&v149 + 1))
          {
            v37 = (unint64_t *)(*((_QWORD *)&v149 + 1) + 8);
            do
              v38 = __ldaxr(v37);
            while (__stlxr(v38 - 1, v37));
            if (!v38)
            {
              ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
              std::__shared_weak_count::__release_weak(v36);
            }
          }
          if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v148.__r_.__value_.__l.__data_);
          v39 = (std::__shared_weak_count *)v143.__r_.__value_.__l.__size_;
          if (v143.__r_.__value_.__l.__size_)
          {
            v40 = (unint64_t *)(v143.__r_.__value_.__l.__size_ + 8);
            do
              v41 = __ldaxr(v40);
            while (__stlxr(v41 - 1, v40));
            if (!v41)
            {
              ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
              std::__shared_weak_count::__release_weak(v39);
            }
          }
        }
        if (SHIBYTE(v166.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v166.__r_.__value_.__l.__data_);
      }
      ++v14;
      v13 = *a1;
    }
    while (v14 < (uint64_t)(*(_QWORD *)(*a1 + 40) - *(_QWORD *)(*a1 + 32)) >> 4);
    v132 = v152.__r_.__value_.__l.__size_;
    v42 = v152.__r_.__value_.__r.__words[0];
    if (v152.__r_.__value_.__r.__words[0] != v152.__r_.__value_.__l.__size_)
    {
      v141 = 0;
      *(_QWORD *)&v31 = 136315138;
      v126 = v31;
      do
      {
        if (*(char *)(v42 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v148, *(const std::string::value_type **)v42, *(_QWORD *)(v42 + 8));
        }
        else
        {
          v43 = *(_OWORD *)v42;
          v148.__r_.__value_.__r.__words[2] = *(_QWORD *)(v42 + 16);
          *(_OWORD *)&v148.__r_.__value_.__l.__data_ = v43;
        }
        v45 = *(_QWORD *)(v42 + 24);
        v44 = *(_QWORD *)(v42 + 32);
        *(_QWORD *)&v149 = v45;
        *((_QWORD *)&v149 + 1) = v44;
        v138 = v42;
        if (v44)
        {
          v46 = (unint64_t *)(v44 + 8);
          do
            v47 = __ldxr(v46);
          while (__stxr(v47 + 1, v46));
          v48 = (std::__shared_weak_count *)*((_QWORD *)&v149 + 1);
          v45 = v149;
          v147 = v149;
          if (*((_QWORD *)&v149 + 1))
          {
            v49 = (unint64_t *)(*((_QWORD *)&v149 + 1) + 8);
            do
              v50 = __ldxr(v49);
            while (__stxr(v50 + 1, v49));
            v51 = 0;
            goto LABEL_86;
          }
        }
        else
        {
          v48 = 0;
          v147 = v45;
        }
        v51 = 1;
LABEL_86:
        Espresso::espresso_os_log_subsystem(v29, v30);
        v52 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v52, OS_LOG_TYPE_DEBUG))
        {
          v103 = &v148;
          if ((v148.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v103 = (std::string *)v148.__r_.__value_.__r.__words[0];
          LODWORD(v166.__r_.__value_.__l.__data_) = v126;
          *(std::string::size_type *)((char *)v166.__r_.__value_.__r.__words + 4) = (std::string::size_type)v103;
          _os_log_debug_impl(&dword_190DAF000, v52, OS_LOG_TYPE_DEBUG, "blob: %s\n", (uint8_t *)&v166, 0xCu);
        }

        v146 = 0uLL;
        v144 = v45;
        v145 = v48;
        if ((v51 & 1) == 0)
        {
          p_shared_owners = (unint64_t *)&v48->__shared_owners_;
          do
            v54 = __ldxr(p_shared_owners);
          while (__stxr(v54 + 1, p_shared_owners));
        }
        Espresso::sync_copy_to_host(&v166, &v144);
        v55 = *(_OWORD *)&v166.__r_.__value_.__l.__data_;
        *(_OWORD *)&v166.__r_.__value_.__l.__data_ = 0uLL;
        v146 = v55;
        v56 = v145;
        if (v145)
        {
          v57 = (unint64_t *)&v145->__shared_owners_;
          do
            v58 = __ldaxr(v57);
          while (__stlxr(v58 - 1, v57));
          if (!v58)
          {
            ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
            std::__shared_weak_count::__release_weak(v56);
          }
        }
        v165[0] = CFSTR("blobs.bin");
        v164[0] = CFSTR("binary_file");
        v164[1] = CFSTR("offset");
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", v141, v126);
        __ptr = (void *)objc_claimAutoreleasedReturnValue();
        v165[1] = __ptr;
        v164[2] = CFSTR("w");
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *(unsigned int *)(v149 + 8));
        v59 = (void *)objc_claimAutoreleasedReturnValue();
        v165[2] = v59;
        v164[3] = CFSTR("h");
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *(unsigned int *)(v149 + 12));
        v60 = (void *)objc_claimAutoreleasedReturnValue();
        v165[3] = v60;
        v164[4] = CFSTR("k");
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *(unsigned int *)(v149 + 16));
        v61 = (void *)objc_claimAutoreleasedReturnValue();
        v165[4] = v61;
        v164[5] = CFSTR("n");
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *(unsigned int *)(v149 + 20));
        v62 = (void *)objc_claimAutoreleasedReturnValue();
        v165[5] = v62;
        v164[6] = CFSTR("seq");
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *(unsigned int *)(v149 + 24));
        v63 = (void *)objc_claimAutoreleasedReturnValue();
        v64 = 0;
        v165[6] = v63;
        v164[7] = CFSTR("size");
        v65 = v146;
        v66 = *(int *)(v146 + 8);
        do
        {
          v66 *= *(int *)(v146 + 12 + v64);
          v64 += 4;
        }
        while (v64 != 12);
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", 4 * v66);
        v67 = (void *)objc_claimAutoreleasedReturnValue();
        v165[7] = v67;
        objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v165, v164, 8);
        v68 = (void *)objc_claimAutoreleasedReturnValue();
        if ((v148.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v69 = &v148;
        else
          v69 = (std::string *)v148.__r_.__value_.__r.__words[0];
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v69);
        v70 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v137, "setObject:forKeyedSubscript:", v68, v70);

        v71 = 0;
        v72 = *(int *)(v65 + 8);
        do
        {
          v72 *= *(int *)(v65 + 12 + v71);
          v71 += 4;
        }
        while (v71 != 12);
        if (fwrite(*(const void **)(v65 + 24), 4 * v72, 1uLL, __stream) != 1)
        {
          v107 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::string::basic_string[abi:ne180100]<0>(&v143, (char *)objc_msgSend(objc_retainAutorelease(v130), "UTF8String"));
          v108 = std::string::insert(&v143, 0, "Cannot write file: ");
          v109 = *(_OWORD *)&v108->__r_.__value_.__l.__data_;
          v166.__r_.__value_.__r.__words[2] = v108->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v166.__r_.__value_.__l.__data_ = v109;
          v108->__r_.__value_.__l.__size_ = 0;
          v108->__r_.__value_.__r.__words[2] = 0;
          v108->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(v107, &v166);
          __cxa_throw(v107, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        v73 = 0;
        v74 = *(int *)(v65 + 8);
        do
        {
          v74 *= *(int *)(v65 + 12 + v73);
          v73 += 4;
        }
        while (v73 != 12);
        v75 = (std::__shared_weak_count *)*((_QWORD *)&v146 + 1);
        v146 = 0uLL;
        if (v75)
        {
          v76 = (unint64_t *)&v75->__shared_owners_;
          do
            v77 = __ldaxr(v76);
          while (__stlxr(v77 - 1, v76));
          if (!v77)
          {
            ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
            std::__shared_weak_count::__release_weak(v75);
          }
        }
        v78 = v147;
        v29 = (Espresso *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v147 + 128))(v147);
        v79 = (size_t)v29;
        v141 += 4 * v74;
        if (v29)
        {
          __ptra = malloc_type_malloc((size_t)v29, 0xD3E3DF1DuLL);
          *(_OWORD *)&v166.__r_.__value_.__l.__data_ = 0uLL;
          (*(void (**)(uint64_t, std::string *, void *))(*(_QWORD *)v78 + 112))(v78, &v166, __ptra);
          v80 = (std::__shared_weak_count *)v166.__r_.__value_.__l.__size_;
          if (v166.__r_.__value_.__l.__size_)
          {
            v81 = (unint64_t *)(v166.__r_.__value_.__l.__size_ + 8);
            do
              v82 = __ldaxr(v81);
            while (__stlxr(v82 - 1, v81));
            if (!v82)
            {
              ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
              std::__shared_weak_count::__release_weak(v80);
            }
          }
          v155[0] = CFSTR("binary_file");
          v155[1] = CFSTR("raw");
          v156[0] = CFSTR("blobs.bin");
          v156[1] = MEMORY[0x1E0C9AAB0];
          v155[2] = CFSTR("offset");
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", v141);
          v157 = objc_claimAutoreleasedReturnValue();
          v155[3] = CFSTR("w");
          v135 = (void *)v157;
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *(unsigned int *)(v149 + 8));
          v158 = objc_claimAutoreleasedReturnValue();
          v155[4] = CFSTR("h");
          v134 = (void *)v158;
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *(unsigned int *)(v149 + 12));
          v133 = (void *)objc_claimAutoreleasedReturnValue();
          v159 = v133;
          v155[5] = CFSTR("k");
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *(unsigned int *)(v149 + 16));
          v83 = (void *)objc_claimAutoreleasedReturnValue();
          v160 = v83;
          v155[6] = CFSTR("n");
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *(unsigned int *)(v149 + 20));
          v84 = (void *)objc_claimAutoreleasedReturnValue();
          v161 = v84;
          v155[7] = CFSTR("seq");
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *(unsigned int *)(v149 + 24));
          v85 = (void *)objc_claimAutoreleasedReturnValue();
          v162 = v85;
          v155[8] = CFSTR("size");
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", v79);
          v86 = (void *)objc_claimAutoreleasedReturnValue();
          v163 = v86;
          objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v156, v155, 9);
          v87 = (void *)objc_claimAutoreleasedReturnValue();
          v88 = (void *)MEMORY[0x1E0CB3940];
          if ((v148.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v89 = HIBYTE(v148.__r_.__value_.__r.__words[2]);
          else
            v89 = v148.__r_.__value_.__l.__size_;
          std::string::basic_string[abi:ne180100]((uint64_t)&v166, v89 + 7);
          if ((v166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v90 = &v166;
          else
            v90 = (std::string *)v166.__r_.__value_.__r.__words[0];
          if (v89)
          {
            if ((v148.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v91 = &v148;
            else
              v91 = (std::string *)v148.__r_.__value_.__r.__words[0];
            memmove(v90, v91, v89);
          }
          strcpy((char *)v90 + v89, "__raw__");
          if ((v166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v92 = &v166;
          else
            v92 = (std::string *)v166.__r_.__value_.__r.__words[0];
          objc_msgSend(v88, "stringWithUTF8String:", v92);
          v93 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v137, "setObject:forKeyedSubscript:", v87, v93);

          if (SHIBYTE(v166.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v166.__r_.__value_.__l.__data_);

          if (fwrite(__ptra, v79, 1uLL, __stream) != 1)
          {
            v110 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::string::basic_string[abi:ne180100]<0>(&v143, (char *)objc_msgSend(objc_retainAutorelease(v130), "UTF8String"));
            v111 = std::string::insert(&v143, 0, "Cannot write file: ");
            v112 = *(_OWORD *)&v111->__r_.__value_.__l.__data_;
            v166.__r_.__value_.__r.__words[2] = v111->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v166.__r_.__value_.__l.__data_ = v112;
            v111->__r_.__value_.__l.__size_ = 0;
            v111->__r_.__value_.__r.__words[2] = 0;
            v111->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error(v110, &v166);
            __cxa_throw(v110, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
          free(__ptra);
          v141 += v79;
        }
        v94 = (std::__shared_weak_count *)*((_QWORD *)&v146 + 1);
        if (*((_QWORD *)&v146 + 1))
        {
          v95 = (unint64_t *)(*((_QWORD *)&v146 + 1) + 8);
          do
            v96 = __ldaxr(v95);
          while (__stlxr(v96 - 1, v95));
          if (!v96)
          {
            ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
            std::__shared_weak_count::__release_weak(v94);
          }
        }
        v97 = (std::__shared_weak_count *)*((_QWORD *)&v147 + 1);
        if (*((_QWORD *)&v147 + 1))
        {
          v98 = (unint64_t *)(*((_QWORD *)&v147 + 1) + 8);
          do
            v99 = __ldaxr(v98);
          while (__stlxr(v99 - 1, v98));
          if (!v99)
          {
            ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
            std::__shared_weak_count::__release_weak(v97);
          }
        }
        v100 = (std::__shared_weak_count *)*((_QWORD *)&v149 + 1);
        if (*((_QWORD *)&v149 + 1))
        {
          v101 = (unint64_t *)(*((_QWORD *)&v149 + 1) + 8);
          do
            v102 = __ldaxr(v101);
          while (__stlxr(v102 - 1, v101));
          if (!v102)
          {
            ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
            std::__shared_weak_count::__release_weak(v100);
          }
        }
        if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v148.__r_.__value_.__l.__data_);
        v42 = v138 + 40;
      }
      while (v138 + 40 != v132);
    }
  }
  fclose(__stream);
  v104 = v137;
  v142 = 0;
  objc_msgSend(MEMORY[0x1E0CB36D8], "dataWithJSONObject:options:error:", v104, 1, &v142);
  v105 = (void *)objc_claimAutoreleasedReturnValue();
  v106 = v142;
  if ((objc_msgSend(v105, "writeToFile:atomically:", v128, 1) & 1) == 0)
  {
    v118 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v119 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v166, (char *)objc_msgSend(objc_retainAutorelease(v128), "UTF8String"));
    v120 = std::string::insert(v119, 0, "Cannot write file: ");
    v121 = *(_OWORD *)&v120->__r_.__value_.__l.__data_;
    v148.__r_.__value_.__r.__words[2] = v120->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v148.__r_.__value_.__l.__data_ = v121;
    v120->__r_.__value_.__l.__size_ = 0;
    v120->__r_.__value_.__r.__words[2] = 0;
    v120->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v118, &v148);
    __cxa_throw(v118, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if ((objc_msgSend(v104, "writeToFile:atomically:", v129, 1) & 1) == 0)
  {
    v122 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v123 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v166, (char *)objc_msgSend(objc_retainAutorelease(v129), "UTF8String"));
    v124 = std::string::insert(v123, 0, "Cannot write file: ");
    v125 = *(_OWORD *)&v124->__r_.__value_.__l.__data_;
    v148.__r_.__value_.__r.__words[2] = v124->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v148.__r_.__value_.__l.__data_ = v125;
    v124->__r_.__value_.__l.__size_ = 0;
    v124->__r_.__value_.__r.__words[2] = 0;
    v124->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v122, &v148);
    __cxa_throw(v122, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }

  std::__tree<std::string>::destroy((uint64_t)&v150, v151[0]);
  v148.__r_.__value_.__r.__words[0] = (std::string::size_type)&v152;
  std::vector<std::pair<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v148);

}

void sub_1913CA930(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57)
{
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD v65[6];
  char *v66[3];
  uint64_t v67;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v63);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v64);
  std::pair<std::string,std::shared_ptr<Espresso::abstract_blob_container>>::~pair((uint64_t)v65);
  std::__tree<std::string>::destroy((uint64_t)v66, v66[1]);
  v65[0] = &v67;
  std::vector<std::pair<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>::__destroy_vector::operator()[abi:ne180100](v65);

  _Unwind_Resume(a1);
}

void sub_1913CABE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  uint64_t *v33;
  char *v34[3];
  uint64_t v35;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
  if (*(char *)(v27 - 105) < 0)
    operator delete(*(void **)(v27 - 128));
  std::__tree<std::string>::destroy((uint64_t)v34, v34[1]);
  v33 = &v35;
  std::vector<std::pair<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>::__destroy_vector::operator()[abi:ne180100](&v33);

  JUMPOUT(0x1913CAC84);
}

void sub_1913CAC30()
{
  JUMPOUT(0x1913CAC38);
}

void std::vector<std::pair<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>::push_back[abi:ne180100](void **a1, __int128 *a2)
{
  char *v4;
  char *v5;
  __int128 v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  __int128 v17;
  uint64_t v18;

  v4 = (char *)a1[1];
  v5 = (char *)a1[2];
  if (v4 >= v5)
  {
    v8 = 0xCCCCCCCCCCCCCCCDLL * ((v4 - (_BYTE *)*a1) >> 3);
    v9 = v8 + 1;
    if (v8 + 1 > 0x666666666666666)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v10 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - (_BYTE *)*a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x333333333333333)
      v9 = 0x666666666666666;
    if (v9 > 0x666666666666666)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v11 = 5 * v9;
    v12 = (char *)operator new(40 * v9);
    v13 = &v12[40 * v8];
    v14 = &v12[8 * v11];
    *(_OWORD *)v13 = *a2;
    *((_QWORD *)v13 + 2) = *((_QWORD *)a2 + 2);
    *(_QWORD *)a2 = 0;
    *((_QWORD *)a2 + 1) = 0;
    *(_OWORD *)(v13 + 24) = *(__int128 *)((char *)a2 + 24);
    *((_QWORD *)a2 + 3) = 0;
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)a2 + 2) = 0;
    v7 = v13 + 40;
    v15 = (char *)*a1;
    v16 = (char *)a1[1];
    if (v16 == *a1)
    {
      *a1 = v13;
      a1[1] = v7;
      a1[2] = v14;
    }
    else
    {
      do
      {
        v17 = *(_OWORD *)(v16 - 40);
        *((_QWORD *)v13 - 3) = *((_QWORD *)v16 - 3);
        *(_OWORD *)(v13 - 40) = v17;
        *((_QWORD *)v16 - 4) = 0;
        *((_QWORD *)v16 - 3) = 0;
        *((_QWORD *)v16 - 5) = 0;
        *((_OWORD *)v13 - 1) = *((_OWORD *)v16 - 1);
        v13 -= 40;
        *((_QWORD *)v16 - 2) = 0;
        *((_QWORD *)v16 - 1) = 0;
        v16 -= 40;
      }
      while (v16 != v15);
      v16 = (char *)*a1;
      v18 = (uint64_t)a1[1];
      *a1 = v13;
      a1[1] = v7;
      a1[2] = v14;
      while ((char *)v18 != v16)
      {
        v18 -= 40;
        std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<Espresso::abstract_blob_container>>,0>(v18);
      }
    }
    if (v16)
      operator delete(v16);
  }
  else
  {
    v6 = *a2;
    *((_QWORD *)v4 + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v4 = v6;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    *(_OWORD *)(v4 + 24) = *(__int128 *)((char *)a2 + 24);
    *((_QWORD *)a2 + 3) = 0;
    *((_QWORD *)a2 + 4) = 0;
    v7 = v4 + 40;
  }
  a1[1] = v7;
}

void std::vector<std::pair<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 40;
        std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<Espresso::abstract_blob_container>>,0>(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t espresso_network_dump_test_vector(const void *a1, int a2, char *a3)
{
  void *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  void *__p[2];
  char v17;
  uint64_t v18[2];
  uint64_t v19;
  uint64_t v20;

  if (!a1)
    return 4294967290;
  v7 = 4294967290;
  if (a3 && v6)
  {
    Espresso::get_internal_network((uint64_t)a1, a2, (uint64_t)&v19);
    v7 = v20;
    v18[0] = v19;
    v18[1] = v20;
    if (v20)
    {
      v8 = (unint64_t *)(v20 + 8);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }
    std::string::basic_string[abi:ne180100]<0>(__p, a3);
    dump_test_vector(v18, (uint64_t *)__p);
    if (v17 < 0)
      operator delete(__p[0]);
    if (v7)
    {
      v10 = (unint64_t *)(v7 + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v7);
      }
      v7 = 0;
    }
    v12 = (std::__shared_weak_count *)v20;
    if (v20)
    {
      v13 = (unint64_t *)(v20 + 8);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
  return v7;
}

void sub_1913CAFB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18)
{
  char *v18;
  std::exception *v21;

  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  if (a2 == 1)
  {
    v21 = (std::exception *)__cxa_begin_catch(a1);
    handle_ex_plan(v18, v21);
    __cxa_end_catch();
    JUMPOUT(0x1913CAF58);
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  _Unwind_Resume(a1);
}

Espresso *espresso_context_create_for_cpu_test_vectors()
{
  Espresso *context;
  const char *v1;
  NSObject *v2;
  int v4;
  Espresso *v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  context = (Espresso *)espresso_create_context(1u, 0xFFFFFFFF);
  Espresso::espresso_os_log_subsystem(context, v1);
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    v4 = 134217984;
    v5 = context;
    _os_log_debug_impl(&dword_190DAF000, v2, OS_LOG_TYPE_DEBUG, "Creating test vectors context %zu", (uint8_t *)&v4, 0xCu);
  }

  espresso_enable_test_vector_mode((uint64_t **)context, 1);
  return context;
}

uint64_t espresso_enable_test_vector_mode(uint64_t **a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v9;
  std::__shared_weak_count *v10;

  Espresso::get_internal_context(a1, &v9);
  v3 = v9;
  if (v9)
  {
    v4 = 0;
    if (!getenv("ESPRESSO_LITE_TEST_VECTORS"))
      *(_BYTE *)(v3 + 44) = a2 ^ 1;
  }
  else
  {
    v4 = 4294967290;
  }
  v5 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return v4;
}

uint64_t c_network_get_input_names(const void *a1, int a2, uint64_t a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v11;
  std::__shared_weak_count *v12;

  if (!a1
  {
    return 4294967290;
  }
  Espresso::get_internal_network((uint64_t)a1, a2, (uint64_t)&v11);
  if (v11 + 640 != a3)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(a3, *(std::string **)(v11 + 640), *(std::string **)(v11 + 648), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v11 + 648) - *(_QWORD *)(v11 + 640)) >> 3));
  v6 = 0;
  v7 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return v6;
}

uint64_t c_network_get_output_names(const void *a1, int a2, uint64_t a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v11;
  std::__shared_weak_count *v12;

  if (!a1
  {
    return 4294967290;
  }
  Espresso::get_internal_network((uint64_t)a1, a2, (uint64_t)&v11);
  if (v11 + 664 != a3)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(a3, *(std::string **)(v11 + 664), *(std::string **)(v11 + 672), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v11 + 672) - *(_QWORD *)(v11 + 664)) >> 3));
  v6 = 0;
  v7 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return v6;
}

uint64_t espresso_set_image_preprocessing_params(_QWORD *a1, int a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t **v10;
  const std::string *v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  char *v16;
  uint64_t **v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  std::string v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  std::string *v29;

  if (!a1
  {
    return 4294967290;
  }
  if (*(_DWORD *)(a1[133] + 160))
    return 4294967291;
  Espresso::get_internal_network((uint64_t)a1, a2, (uint64_t)&v27);
  memset(&v26, 0, sizeof(v26));
  if (a3)
  {
    MEMORY[0x19401C808](&v26, a3);
    v10 = (uint64_t **)v27;
LABEL_11:
    if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(v10[30], &v26)&& (v29 = &v26, std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v10 + 29, &v26, (__int128 **)&v29)[56]))
    {
      if (a4)
      {
        v12 = *((unsigned __int8 *)a4 + 16);
        v13 = *((_DWORD *)a4 + 2);
        v14 = *((_DWORD *)a4 + 3);
        v15 = *a4;
        v29 = &v26;
        v16 = std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v10 + 41, &v26, (uint64_t)&std::piecewise_construct, (__int128 **)&v29);
        v8 = 0;
        *((_DWORD *)v16 + 14) = v14;
        *(_QWORD *)(v16 + 60) = 0x100000000;
        *((_DWORD *)v16 + 17) = v12;
        *((_QWORD *)v16 + 9) = v15;
        *((_DWORD *)v16 + 20) = v13;
        *(_QWORD *)(v16 + 92) = 0;
        *(_QWORD *)(v16 + 84) = 0;
        *((_DWORD *)v16 + 25) = 0;
        __asm { FMOV            V0.2S, #1.0 }
        *((_QWORD *)v16 + 13) = _D0;
        *((_QWORD *)v16 + 14) = 0;
        *((_QWORD *)v16 + 15) = 0;
        *((_DWORD *)v16 + 32) = 0;
      }
      else
      {
        v22 = (uint64_t **)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>((uint64_t)(v10 + 41), &v26);
        if (v10 + 42 == v22)
        {
          v8 = 4294967290;
        }
        else
        {
          std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::erase(v10 + 41, (uint64_t)v22);
          v8 = 0;
        }
      }
    }
    else
    {
      v8 = 4294967288;
    }
    goto LABEL_20;
  }
  v10 = (uint64_t **)v27;
  v11 = *(const std::string **)(v27 + 640);
  if (*(const std::string **)(v27 + 648) != v11)
  {
    std::string::operator=(&v26, v11);
    goto LABEL_11;
  }
  v8 = 4294967291;
LABEL_20:
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  v23 = v28;
  if (v28)
  {
    p_shared_owners = (unint64_t *)&v28->__shared_owners_;
    do
      v25 = __ldaxr(p_shared_owners);
    while (__stlxr(v25 - 1, p_shared_owners));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  return v8;
}

void sub_1913CB5E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::erase(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  BOOL v6;
  uint64_t *v7;

  v3 = *(_QWORD **)(a2 + 8);
  if (v3)
  {
    do
    {
      v4 = v3;
      v3 = (_QWORD *)*v3;
    }
    while (v3);
  }
  else
  {
    v5 = (_QWORD *)a2;
    do
    {
      v4 = (_QWORD *)v5[2];
      v6 = *v4 == (_QWORD)v5;
      v5 = v4;
    }
    while (!v6);
  }
  if (*a1 == a2)
    *a1 = v4;
  v7 = (uint64_t *)a1[1];
  --a1[2];
  std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v7, (uint64_t *)a2);
  if (*(char *)(a2 + 55) < 0)
    operator delete(*(void **)(a2 + 32));
  operator delete((void *)a2);
}

uint64_t espresso_blob_set_int_option(uint64_t a1, int a2, char *a3, char *__s1, int a5)
{
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  void *__p[2];
  char v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  void **v22;

  if (strncmp(__s1, "no_alpha_premultiply", 0x100uLL))
    return 4294967290;
  Espresso::get_internal_network(a1, a2, (uint64_t)&v20);
  v11 = v20;
  std::string::basic_string[abi:ne180100]<0>(__p, a3);
  v12 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(_QWORD **)(v11 + 240), __p);
  v13 = v12;
  if (v19 < 0)
  {
    operator delete(__p[0]);
    if (v13)
      goto LABEL_6;
  }
  else if (v12)
  {
LABEL_6:
    std::string::basic_string[abi:ne180100]<0>(__p, a3);
    v22 = __p;
    v14 = std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(v11 + 328), __p, (_OWORD **)&v22);
    if (v19 < 0)
      operator delete(__p[0]);
    v9 = 0;
    *((_DWORD *)v14 + 32) = a5;
    goto LABEL_11;
  }
  v9 = 4294967288;
LABEL_11:
  v15 = v21;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  return v9;
}

void sub_1913CB7BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

char *std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, _QWORD *a2, _OWORD **a3)
{
  void **v5;
  char *v6;
  uint64_t **v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v16;

  v5 = (void **)std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__find_equal<std::string>((uint64_t)a1, &v16, a2);
  v6 = (char *)*v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = (char *)operator new(0x88uLL);
    v8 = *a3;
    v9 = *((_QWORD *)*a3 + 2);
    *((_OWORD *)v6 + 2) = **a3;
    *((_QWORD *)v6 + 6) = v9;
    *v8 = 0;
    v8[1] = 0;
    v8[2] = 0;
    *((_DWORD *)v6 + 14) = 1065353216;
    *((_DWORD *)v6 + 21) = 0;
    *(_QWORD *)(v6 + 68) = 0;
    *(_QWORD *)(v6 + 76) = 0;
    *(_QWORD *)(v6 + 60) = 0x100000000;
    *((_DWORD *)v6 + 32) = 0;
    *((_QWORD *)v6 + 14) = 0;
    *((_QWORD *)v6 + 15) = 0;
    *((_QWORD *)v6 + 11) = 0;
    *((_QWORD *)v6 + 12) = 0;
    __asm { FMOV            V0.2S, #1.0 }
    *((_QWORD *)v6 + 13) = _D0;
    std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at(a1, v16, v7, (uint64_t *)v6);
  }
  return v6;
}

uint64_t **espresso_get_input_blob_name(uint64_t a1, int a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t **v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v10;
  std::__shared_weak_count *v11;

  Espresso::get_internal_network(a1, a2, (uint64_t)&v10);
  v4 = *(_QWORD *)(v10 + 640);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v10 + 648) - v4) >> 3) <= a3)
  {
    v5 = 0;
  }
  else
  {
    v5 = (uint64_t **)(v4 + 24 * a3);
    if (*((char *)v5 + 23) < 0)
      v5 = (uint64_t **)*v5;
  }
  v6 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

uint64_t **espresso_get_output_blob_name(uint64_t a1, int a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t **v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v10;
  std::__shared_weak_count *v11;

  Espresso::get_internal_network(a1, a2, (uint64_t)&v10);
  v4 = *(_QWORD *)(v10 + 664);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v10 + 672) - v4) >> 3) <= a3)
  {
    v5 = 0;
  }
  else
  {
    v5 = (uint64_t **)(v4 + 24 * a3);
    if (*((char *)v5 + 23) < 0)
      v5 = (uint64_t **)*v5;
  }
  v6 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

uint64_t espresso_network_set_function_name(const void *a1, uint64_t a2, char *a3)
{
  uint64_t v5;
  void *__p[2];
  char v8;

  if (!a1
  {
    return 4294967290;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, a3);
  v5 = (*(uint64_t (**)(const void *, void **))(*(_QWORD *)a1 + 72))(a1, __p);
  if (v8 < 0)
    operator delete(__p[0]);
  return v5;
}

void sub_1913CBA88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t espresso_set_breakpoint(_QWORD *a1, uint64_t a2, void *a3)
{
  id v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;

  v4 = a3;
  if (a1
  {
    v5 = MEMORY[0x19401D648](v4);
    v6 = (void *)a1[1];
    a1[1] = v5;

    v7 = 0;
  }
  else
  {
    v7 = 4294967290;
  }

  return v7;
}

uint64_t Espresso::get_default_compute_path(uint64_t (***a1)(_QWORD))
{
  int v1;
  uint64_t result;
  unsigned int v3;
  BOOL v4;
  int v5;

  v1 = (**a1)(a1);
  result = 0;
  if (v1 > 50001)
  {
    v3 = v1 - 50002;
    v4 = v3 > 6;
    v5 = (1 << v3) & 0x49;
    if (v4 || v5 == 0)
      return 1;
  }
  else
  {
    if (!v1)
      return result;
    if (v1 != 5)
    {
      if (v1 == 100)
        return result;
      return 1;
    }
    return 4;
  }
  return result;
}

uint64_t espresso_get_default_storage_type(EspressoLight *a1)
{
  uint64_t v1;
  unsigned int (***v3)(_QWORD);
  uint64_t *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  Espresso::keys_translation *default_compute_path;
  unint64_t *v11;
  unint64_t v12;

  v1 = 65552;
  if (!a1)
    return v1;
  if (*(_QWORD *)a1 != 0x50FBC8A8A6F7B03CLL)
  {
    EspressoLight::very_bad_client(a1);
    return v1;
  }
  v3 = *(unsigned int (****)(_QWORD))(**((_QWORD **)a1 + 2) + 8);
  if ((**v3)(v3) == 5)
    return 0x80000;
  v5 = (uint64_t *)*((_QWORD *)a1 + 2);
  v6 = *v5;
  v7 = (std::__shared_weak_count *)v5[1];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  default_compute_path = (Espresso::keys_translation *)Espresso::get_default_compute_path(*(uint64_t (****)(_QWORD))(v6 + 8));
  if (v7)
  {
    v11 = (unint64_t *)&v7->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return Espresso::keys_translation::c_api_storage_type_from_cpp_compute_path(default_compute_path);
}

void sub_1913CBC80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_BYTE *espresso_create_plan_and_load_network(EspressoLight *a1, int a2, char *__s, _QWORD *a4)
{
  _BYTE *plan;
  void **v8;
  int64_t v9;
  void **v10;
  uint64_t v11;
  char *v12;
  int v13;
  uint64_t v14;
  void **v15;
  uint64_t v16;
  char *v17;
  char *v18;
  _BYTE *v20;
  uint64_t default_storage_type;
  char *v22;
  void *__p[2];
  unsigned __int8 v24;
  void *v25[2];
  unsigned __int8 v26;

  if (!a1)
    return 0;
  if (*(_QWORD *)a1 != 0x50FBC8A8A6F7B03CLL)
  {
    EspressoLight::very_bad_client(a1);
    return 0;
  }
  plan = 0;
  if (__s && a4)
  {
    *a4 = 0;
    a4[1] = 0;
    std::string::basic_string[abi:ne180100]<0>(v25, __s);
    std::string::basic_string[abi:ne180100]<0>(__p, "code.nitroir");
    if ((v24 & 0x80u) == 0)
      v8 = __p;
    else
      v8 = (void **)__p[0];
    if ((v24 & 0x80u) == 0)
      v9 = v24;
    else
      v9 = (int64_t)__p[1];
    if ((v26 & 0x80u) == 0)
      v10 = v25;
    else
      v10 = (void **)v25[0];
    if ((v26 & 0x80u) == 0)
      v11 = v26;
    else
      v11 = (uint64_t)v25[1];
    if (v9)
    {
      if (v11 >= v9)
      {
        v12 = (char *)v10 + v11;
        v13 = *(char *)v8;
        v14 = v11;
        v15 = v10;
        do
        {
          v16 = v14 - v9;
          if (v16 == -1)
            break;
          v17 = (char *)memchr(v15, v13, v16 + 1);
          if (!v17)
            break;
          v18 = v17;
          if (!memcmp(v17, v8, v9))
          {
            if (v18 != v12)
            {
              v20 = (_BYTE *)(v18 - (char *)v10);
              if (v18 - (char *)v10 != -1)
                goto LABEL_29;
            }
            break;
          }
          v15 = (void **)(v18 + 1);
          v14 = v12 - (v18 + 1);
        }
        while (v14 >= v9);
      }
    }
    else
    {
      v20 = 0;
LABEL_29:
      if (v20 == (_BYTE *)(v11 - v9))
        a2 |= 4u;
    }
    plan = (_BYTE *)espresso_create_plan(a1, a2);
    if (plan)
    {
      default_storage_type = espresso_get_default_storage_type(a1);
      v22 = (v26 & 0x80u) == 0 ? (char *)v25 : (char *)v25[0];
      if (espresso_plan_add_network(plan, v22, default_storage_type, (uint64_t)a4))
      {
        espresso_plan_destroy((std::string::size_type)plan);
        plan = 0;
      }
    }
    if ((char)v24 < 0)
      operator delete(__p[0]);
    if ((char)v26 < 0)
      operator delete(v25[0]);
  }
  return plan;
}

void sub_1913CBE6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t espresso_destroy_global_ref(EspressoLight *a1)
{
  if (a1)
  {
    if (*(_QWORD *)a1 == 0xA17F78C9A32)
    {
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
      MEMORY[0x19401CD90](a1, 0x1020C4023CB03E4);
    }
    else
    {
      EspressoLight::very_bad_client(a1);
    }
  }
  return 0;
}

void espresso_network_swap_global(const void *a1, int a2, char *a3, _QWORD *a4, std::__shared_weak_count *on_zero_shared)
{
  void *v10;
  void *v11;
  uint64_t v12;
  EspressoLight *v13;
  std::__shared_weak_count_vtbl *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  void (__cdecl *v26)(std::__shared_weak_count *__hidden);
  std::__shared_weak_count *v27;
  void *__p[2];
  char v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  uint64_t v32;
  std::__shared_weak_count *v33;

  v10 = (void *)MEMORY[0x19401D4A4]();
  if (!a1
  {
LABEL_34:
    objc_autoreleasePoolPop(v10);
    return;
  }
  Espresso::get_internal_network((uint64_t)a1, a2, (uint64_t)&v32);
  v12 = v32;
  if (!v32)
  {
LABEL_29:
    v23 = v33;
    if (v33)
    {
      p_shared_owners = (unint64_t *)&v33->__shared_owners_;
      do
        v25 = __ldaxr(p_shared_owners);
      while (__stlxr(v25 - 1, p_shared_owners));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    goto LABEL_34;
  }
  v13 = (EspressoLight *)std::string::basic_string[abi:ne180100]<0>(__p, a3);
  if (!on_zero_shared)
  {
    v26 = 0;
    v27 = 0;
    goto LABEL_14;
  }
  v14 = on_zero_shared->__vftable;
  if (on_zero_shared->~__shared_weak_count == (void (__cdecl *)(std::__shared_weak_count *__hidden))0xA17F78C9A32)
  {
    on_zero_shared = (std::__shared_weak_count *)v14->__on_zero_shared;
    v26 = v14->~__shared_weak_count_0;
    v27 = on_zero_shared;
    if (on_zero_shared)
    {
      v15 = (unint64_t *)&on_zero_shared->__shared_owners_;
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
    }
LABEL_14:
    Espresso::net::swap_global(v12, (__int128 *)__p, (uint64_t *)&v26, &v30);
    if (on_zero_shared)
    {
      v17 = (unint64_t *)&on_zero_shared->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))on_zero_shared->__on_zero_shared)(on_zero_shared);
        std::__shared_weak_count::__release_weak(on_zero_shared);
      }
    }
    if (v29 < 0)
    {
      operator delete(__p[0]);
      if (!a4)
      {
LABEL_24:
        v20 = v31;
        if (v31)
        {
          v21 = (unint64_t *)&v31->__shared_owners_;
          do
            v22 = __ldaxr(v21);
          while (__stlxr(v22 - 1, v21));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v20);
          }
        }
        goto LABEL_29;
      }
    }
    else if (!a4)
    {
      goto LABEL_24;
    }
    v19 = (_QWORD *)operator new();
    *v19 = 0xA17F78C9A32;
    v19[2] = 0;
    v19[1] = 0;
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v19 + 1, v30, (uint64_t)v31);
    *a4 = v19;
    goto LABEL_24;
  }
  EspressoLight::very_bad_client(v13);
  __break(1u);
}

void sub_1913CC128(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, char a20)
{
  char *v20;
  std::exception *v23;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  if (a2 == 1)
  {
    v23 = (std::exception *)__cxa_begin_catch(a1);
    handle_ex_plan(v20, v23);
    __cxa_end_catch();
    JUMPOUT(0x1913CC0C0);
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  _Unwind_Resume(a1);
}

uint64_t espresso_network_sync_copy_global(const void *a1, int a2, char *a3, _QWORD *a4)
{
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  void *__p[2];
  char v21;
  __int128 v22;
  uint64_t v23;
  std::__shared_weak_count *v24;

  v8 = (void *)MEMORY[0x19401D4A4]();
  if (a1)
  {
    v10 = 4294967290;
    if (a4 && a3 && v9)
    {
      Espresso::get_internal_network((uint64_t)a1, a2, (uint64_t)&v23);
      v11 = v23;
      if (v23)
      {
        v12 = (_QWORD *)operator new();
        *v12 = 0xA17F78C9A32;
        v12[1] = 0;
        v12[2] = 0;
        std::string::basic_string[abi:ne180100]<0>(__p, a3);
        Espresso::net::sync_copy_global(v11, (unsigned __int8 *)__p, (uint64_t *)&v22);
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)(v12 + 1), &v22);
        v13 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
        if (*((_QWORD *)&v22 + 1))
        {
          v14 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
          do
            v15 = __ldaxr(v14);
          while (__stlxr(v15 - 1, v14));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
        if (v21 < 0)
          operator delete(__p[0]);
        v10 = 0;
        *a4 = v12;
      }
      else
      {
        v10 = 4294967291;
      }
      v16 = v24;
      if (v24)
      {
        p_shared_owners = (unint64_t *)&v24->__shared_owners_;
        do
          v18 = __ldaxr(p_shared_owners);
        while (__stlxr(v18 - 1, p_shared_owners));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
    }
  }
  else
  {
    v10 = 4294967290;
  }
  objc_autoreleasePoolPop(v8);
  return v10;
}

void sub_1913CC350(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, char a18)
{
  char *v18;
  std::exception *v21;

  if (a15 < 0)
    operator delete(__p);
  if (a2 == 1)
  {
    v21 = (std::exception *)__cxa_begin_catch(a1);
    handle_ex_plan(v18, v21);
    __cxa_end_catch();
    JUMPOUT(0x1913CC2F0);
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  _Unwind_Resume(a1);
}

uint64_t espresso_network_bind_buffer_to_global(const void *a1, uint64_t a2, const std::string::value_type *a3, uint64_t a4, uint64_t a5, int a6, int a7)
{
  std::string *v14;
  __int128 v15;
  void **v16;
  uint64_t v17;
  std::string v19;
  void *__p[2];
  int64_t v21;

  if (!a3)
    return 4294967290;
  std::string::basic_string[abi:ne180100]<0>(&v19, Espresso::net::bind_global_prefix[0]);
  v14 = std::string::append(&v19, a3);
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v21 = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  if (v21 >= 0)
    v16 = __p;
  else
    v16 = (void **)__p[0];
  v17 = espresso_network_bind_buffer(a1, a2, (uint64_t)v16, a4, a5, a6, a7);
  if (SHIBYTE(v21) < 0)
    operator delete(__p[0]);
  return v17;
}

void sub_1913CC4B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t espresso_network_unbind_buffer_to_global(const void *a1, uint64_t a2, const std::string::value_type *a3, uint64_t a4)
{
  std::string *v8;
  __int128 v9;
  void **v10;
  uint64_t v11;
  std::string v13;
  void *__p[2];
  int64_t v15;

  if (!a3)
    return 4294967290;
  std::string::basic_string[abi:ne180100]<0>(&v13, Espresso::net::bind_global_prefix[0]);
  v8 = std::string::append(&v13, a3);
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v15 = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (v15 >= 0)
    v10 = __p;
  else
    v10 = (void **)__p[0];
  v11 = espresso_network_unbind_buffer(a1, a2, (uint64_t)v10, a4);
  if (SHIBYTE(v15) < 0)
    operator delete(__p[0]);
  return v11;
}

void sub_1913CC5A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t espresso_network_set_inference_weights(uint64_t a1, int a2, uint64_t a3, int a4)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  const void *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  unint64_t v22;
  __int128 v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  const void *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  const void *v33;
  void *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  __int128 v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  const void *v46;
  void *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  __int128 v53;
  void *v54;
  void *v55;
  std::string::size_type v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  const void *v60;
  void *v61;
  void *v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *size;
  unint64_t *v67;
  unint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  void *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  __int128 v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  unint64_t *v88;
  unint64_t v89;
  int *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  unint64_t *v106;
  unint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  unint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  unint64_t *v120;
  unint64_t v121;
  int *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  void *v126;
  unint64_t *v127;
  unint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  unint64_t *v138;
  unint64_t v139;
  _QWORD *v140;
  uint64_t v141;
  __int128 v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  unint64_t *v146;
  unint64_t v147;
  int *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  void *v152;
  unint64_t *v153;
  unint64_t v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  unint64_t *v164;
  unint64_t v165;
  unint64_t *v166;
  unsigned __int8 *v167;
  unint64_t v168;
  uint64_t v169;
  uint64_t v170;
  const void *v171;
  int *v172;
  int *v173;
  std::__shared_weak_count *v174;
  unint64_t *v175;
  unint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  int v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t *v184;
  unint64_t v185;
  std::__shared_weak_count *v186;
  unint64_t *v187;
  unint64_t v188;
  std::__shared_weak_count *v189;
  unint64_t *v190;
  unint64_t v191;
  std::__shared_weak_count *v192;
  unint64_t *v193;
  unint64_t v194;
  std::__shared_weak_count *v195;
  unint64_t *v196;
  unint64_t v197;
  unint64_t *v198;
  unint64_t *v199;
  std::__shared_weak_count *v200;
  unint64_t *v201;
  unint64_t v202;
  unint64_t *v203;
  unint64_t v204;
  unint64_t *v205;
  unint64_t v206;
  uint64_t v207;
  std::__shared_weak_count *v208;
  unint64_t *v209;
  unint64_t v210;
  std::__shared_weak_count *v211;
  unint64_t *v212;
  unint64_t v213;
  std::__shared_weak_count *v214;
  unint64_t *v215;
  unint64_t v216;
  _QWORD *v218;
  _QWORD *v219;
  _QWORD *v220;
  std::__shared_weak_count *v221;
  uint64_t v222;
  std::__shared_weak_count *v223;
  uint64_t v224;
  std::__shared_weak_count *v225;
  uint64_t v226;
  std::__shared_weak_count *v227;
  uint64_t v228;
  std::__shared_weak_count *v229;
  __int128 v230;
  uint64_t v231;
  std::__shared_weak_count *v232;
  __int128 v233;
  uint64_t v234;
  std::__shared_weak_count *v235;
  uint64_t v236;
  std::__shared_weak_count *v237;
  __int128 v238;
  int *v239;
  std::__shared_weak_count *v240;
  __int128 v241;
  int *v242;
  std::__shared_weak_count *v243;
  std::string v244;
  std::string v245;
  void *v246;
  std::__shared_weak_count *v247;
  __int128 v248;
  __int128 v249;

  Espresso::get_internal_network(a1, a2, (uint64_t)&v222);
  v6 = v222;
  Espresso::get_internal_network(a3, a4, (uint64_t)&v220);
  v7 = v220;
  Espresso::run_pass_on_network<Espresso::pass_blob_name_indexing>((uint64_t)v220);
  v218 = Espresso::net::get_analysis<Espresso::pass_blob_name_indexing_result>((uint64_t)v7);
  v8 = *(_QWORD *)(v6 + 32);
  if (*(_QWORD *)(v6 + 40) != v8)
  {
    v9 = 0;
    v219 = v7 + 116;
    do
    {
      v10 = *(_OWORD *)(v8 + 16 * v9);
      v249 = v10;
      v11 = (std::__shared_weak_count *)*((_QWORD *)&v10 + 1);
      if (*((_QWORD *)&v10 + 1))
      {
        v12 = (unint64_t *)(*((_QWORD *)&v10 + 1) + 8);
        do
          v13 = __ldxr(v12);
        while (__stxr(v13 + 1, v12));
      }
      v14 = v10;
      v15 = *(const void **)(v10 + 64);
      if (!v15
      {
        goto LABEL_300;
      }
      v16 = *(std::__shared_weak_count **)(v14 + 72);
      if (v16)
      {
        p_shared_owners = (unint64_t *)&v16->__shared_owners_;
        do
          v18 = __ldxr(p_shared_owners);
        while (__stxr(v18 + 1, p_shared_owners));
        do
          v19 = __ldaxr(p_shared_owners);
        while (__stlxr(v19 - 1, p_shared_owners));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      v20 = (_QWORD *)(*(_QWORD *)(v6 + 32) + 16 * v9);
      if (std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>(v219, *v20 + 16))
      {
        v21 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>(v219, *v20 + 16);
        if (!v21)
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        v22 = v21[5];
      }
      else
      {
        v22 = -1;
      }
      v23 = *(_OWORD *)(v7[4] + 16 * v22);
      v248 = v23;
      if (*((_QWORD *)&v23 + 1))
      {
        v24 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
        do
          v25 = __ldxr(v24);
        while (__stxr(v25 + 1, v24));
      }
      v26 = v23;
      v27 = *(const void **)(v23 + 64);
      if (!v27)
      {
        *(_OWORD *)&v244.__r_.__value_.__l.__data_ = 0uLL;
LABEL_329:
        Espresso::throw_exception_selector<Espresso::not_implemented_error>("Currently only supports networks where only inner product and convolution layers have weights");
      }
      {
        v28 = *(std::__shared_weak_count **)(v26 + 72);
        if (v28)
        {
          v29 = (unint64_t *)&v28->__shared_owners_;
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
          do
            v31 = __ldaxr(v29);
          while (__stlxr(v31 - 1, v29));
          if (!v31)
          {
            ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
            std::__shared_weak_count::__release_weak(v28);
          }
        }
        v32 = v249;
        v33 = *(const void **)(v249 + 64);
        if (v33
        {
          v35 = *(std::__shared_weak_count **)(v32 + 72);
          v246 = v34;
          v247 = v35;
          if (v35)
          {
            v36 = (unint64_t *)&v35->__shared_owners_;
            do
              v37 = __ldxr(v36);
            while (__stxr(v37 + 1, v36));
          }
        }
        else
        {
          v246 = 0;
          v247 = 0;
        }
        v245.__r_.__value_.__r.__words[0] = v22;
        v38 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)(v7 + 7), v22, &v245);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v38[4] - v38[3]) >> 3) >= 2)
        {
          Espresso::get_layer_parameter_name((const void **)(v248 + 16), 1, &v244);
          v39 = Espresso::net::loaded_global_name(v7, (uint64_t)&v244);
          if (*(char *)(v39 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v245, *(const std::string::value_type **)v39, *(_QWORD *)(v39 + 8));
          }
          else
          {
            v40 = *(_OWORD *)v39;
            v245.__r_.__value_.__r.__words[2] = *(_QWORD *)(v39 + 16);
            *(_OWORD *)&v245.__r_.__value_.__l.__data_ = v40;
          }
          if (SHIBYTE(v244.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v244.__r_.__value_.__l.__data_);
          Espresso::net::get_global(&v244, (uint64_t)v7, (unsigned __int8 *)&v245);
          size = (std::__shared_weak_count *)v244.__r_.__value_.__l.__size_;
          if (v244.__r_.__value_.__r.__words[0])
          {
            v241 = *(_OWORD *)&v244.__r_.__value_.__l.__data_;
            if (v244.__r_.__value_.__l.__size_)
            {
              v67 = (unint64_t *)(v244.__r_.__value_.__l.__size_ + 8);
              do
                v68 = __ldxr(v67);
              while (__stxr(v68 + 1, v67));
            }
            Espresso::sync_copy_to_host(&v242, &v241);
            if (size)
            {
              v69 = (unint64_t *)&size->__shared_owners_;
              do
                v70 = __ldaxr(v69);
              while (__stlxr(v70 - 1, v69));
              if (!v70)
              {
                ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
                std::__shared_weak_count::__release_weak(size);
              }
            }
            v71 = v246;
            v239 = v242;
            v240 = v243;
            if (v243)
            {
              v72 = (unint64_t *)&v243->__shared_owners_;
              do
                v73 = __ldxr(v72);
              while (__stxr(v73 + 1, v72));
            }
            (*(void (**)(void *, int **))(*(_QWORD *)v71 + 400))(v71, &v239);
            v74 = v240;
            if (v240)
            {
              v75 = (unint64_t *)&v240->__shared_owners_;
              do
                v76 = __ldaxr(v75);
              while (__stlxr(v76 - 1, v75));
              if (!v76)
              {
                ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
                std::__shared_weak_count::__release_weak(v74);
              }
            }
            v77 = v243;
            if (v243)
            {
              v78 = (unint64_t *)&v243->__shared_owners_;
              do
                v79 = __ldaxr(v78);
              while (__stlxr(v79 - 1, v78));
              if (!v79)
              {
                ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
                std::__shared_weak_count::__release_weak(v77);
              }
            }
            size = (std::__shared_weak_count *)v244.__r_.__value_.__l.__size_;
          }
          if (size)
          {
            v80 = (unint64_t *)&size->__shared_owners_;
            do
              v81 = __ldaxr(v80);
            while (__stlxr(v81 - 1, v80));
            if (!v81)
            {
              ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
              std::__shared_weak_count::__release_weak(size);
            }
          }
          if (SHIBYTE(v245.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v245.__r_.__value_.__l.__data_);
        }
        v245.__r_.__value_.__r.__words[0] = v22;
        v82 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)(v7 + 7), v22, &v245);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v82[4] - v82[3]) >> 3) >= 3)
        {
          Espresso::get_layer_parameter_name((const void **)(v248 + 16), 2, &v244);
          v83 = Espresso::net::loaded_global_name(v7, (uint64_t)&v244);
          if (*(char *)(v83 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v245, *(const std::string::value_type **)v83, *(_QWORD *)(v83 + 8));
          }
          else
          {
            v84 = *(_OWORD *)v83;
            v245.__r_.__value_.__r.__words[2] = *(_QWORD *)(v83 + 16);
            *(_OWORD *)&v245.__r_.__value_.__l.__data_ = v84;
          }
          if (SHIBYTE(v244.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v244.__r_.__value_.__l.__data_);
          Espresso::net::get_global(&v244, (uint64_t)v7, (unsigned __int8 *)&v245);
          v85 = (std::__shared_weak_count *)v244.__r_.__value_.__l.__size_;
          if (v244.__r_.__value_.__r.__words[0])
          {
            v238 = *(_OWORD *)&v244.__r_.__value_.__l.__data_;
            if (v244.__r_.__value_.__l.__size_)
            {
              v86 = (unint64_t *)(v244.__r_.__value_.__l.__size_ + 8);
              do
                v87 = __ldxr(v86);
              while (__stxr(v87 + 1, v86));
            }
            Espresso::sync_copy_to_host(&v242, &v238);
            if (v85)
            {
              v88 = (unint64_t *)&v85->__shared_owners_;
              do
                v89 = __ldaxr(v88);
              while (__stlxr(v89 - 1, v88));
              if (!v89)
              {
                ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
                std::__shared_weak_count::__release_weak(v85);
              }
            }
            v90 = v242;
            std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,void>(&v236, v242[4]);
            v91 = 0;
            v92 = v236;
            v93 = v90[2];
            do
            {
              v93 *= v90[v91 + 3];
              ++v91;
            }
            while (v91 != 3);
            memcpy(*(void **)(v236 + 16), *((const void **)v90 + 3), 4 * v93);
            v94 = v246;
            v234 = v92;
            v235 = v237;
            if (v237)
            {
              v95 = (unint64_t *)&v237->__shared_owners_;
              do
                v96 = __ldxr(v95);
              while (__stxr(v96 + 1, v95));
            }
            (*(void (**)(void *, uint64_t *))(*(_QWORD *)v94 + 392))(v94, &v234);
            v97 = v235;
            if (v235)
            {
              v98 = (unint64_t *)&v235->__shared_owners_;
              do
                v99 = __ldaxr(v98);
              while (__stlxr(v99 - 1, v98));
              if (!v99)
              {
                ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
                std::__shared_weak_count::__release_weak(v97);
              }
            }
            v100 = v237;
            if (v237)
            {
              v101 = (unint64_t *)&v237->__shared_owners_;
              do
                v102 = __ldaxr(v101);
              while (__stlxr(v102 - 1, v101));
              if (!v102)
              {
                ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
                std::__shared_weak_count::__release_weak(v100);
              }
            }
            v103 = v243;
            if (v243)
            {
              v104 = (unint64_t *)&v243->__shared_owners_;
              do
                v105 = __ldaxr(v104);
              while (__stlxr(v105 - 1, v104));
              if (!v105)
              {
                ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
                std::__shared_weak_count::__release_weak(v103);
              }
            }
            v85 = (std::__shared_weak_count *)v244.__r_.__value_.__l.__size_;
          }
          if (v85)
          {
            v106 = (unint64_t *)&v85->__shared_owners_;
            do
              v107 = __ldaxr(v106);
            while (__stlxr(v107 - 1, v106));
            if (!v107)
            {
              ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
              std::__shared_weak_count::__release_weak(v85);
            }
          }
          if (SHIBYTE(v245.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v245.__r_.__value_.__l.__data_);
        }
        v108 = v247;
        if (!v247)
          goto LABEL_294;
        v109 = (unint64_t *)&v247->__shared_owners_;
        do
          v110 = __ldaxr(v109);
        while (__stlxr(v110 - 1, v109));
        goto LABEL_292;
      }
      {
        v41 = *(std::__shared_weak_count **)(v26 + 72);
        if (v41)
        {
          v42 = (unint64_t *)&v41->__shared_owners_;
          do
            v43 = __ldxr(v42);
          while (__stxr(v43 + 1, v42));
          do
            v44 = __ldaxr(v42);
          while (__stlxr(v44 - 1, v42));
          if (!v44)
          {
            ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
            std::__shared_weak_count::__release_weak(v41);
          }
        }
        v45 = v249;
        v46 = *(const void **)(v249 + 64);
        if (v46
        {
          v48 = *(std::__shared_weak_count **)(v45 + 72);
          v246 = v47;
          v247 = v48;
          if (v48)
          {
            v49 = (unint64_t *)&v48->__shared_owners_;
            do
              v50 = __ldxr(v49);
            while (__stxr(v50 + 1, v49));
          }
        }
        else
        {
          v246 = 0;
          v247 = 0;
        }
        v245.__r_.__value_.__r.__words[0] = v22;
        v51 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)(v7 + 7), v22, &v245);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v51[4] - v51[3]) >> 3) >= 2)
        {
          Espresso::get_layer_parameter_name((const void **)(v248 + 16), 1, &v244);
          v52 = Espresso::net::loaded_global_name(v7, (uint64_t)&v244);
          if (*(char *)(v52 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v245, *(const std::string::value_type **)v52, *(_QWORD *)(v52 + 8));
          }
          else
          {
            v53 = *(_OWORD *)v52;
            v245.__r_.__value_.__r.__words[2] = *(_QWORD *)(v52 + 16);
            *(_OWORD *)&v245.__r_.__value_.__l.__data_ = v53;
          }
          if (SHIBYTE(v244.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v244.__r_.__value_.__l.__data_);
          Espresso::net::get_global(&v244, (uint64_t)v7, (unsigned __int8 *)&v245);
          v117 = (std::__shared_weak_count *)v244.__r_.__value_.__l.__size_;
          if (v244.__r_.__value_.__r.__words[0])
          {
            v233 = *(_OWORD *)&v244.__r_.__value_.__l.__data_;
            if (v244.__r_.__value_.__l.__size_)
            {
              v118 = (unint64_t *)(v244.__r_.__value_.__l.__size_ + 8);
              do
                v119 = __ldxr(v118);
              while (__stxr(v119 + 1, v118));
            }
            Espresso::sync_copy_to_host(&v242, &v233);
            if (v117)
            {
              v120 = (unint64_t *)&v117->__shared_owners_;
              do
                v121 = __ldaxr(v120);
              while (__stlxr(v121 - 1, v120));
              if (!v121)
              {
                ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
                std::__shared_weak_count::__release_weak(v117);
              }
            }
            v122 = v242;
            std::allocate_shared[abi:ne180100]<Espresso::blob<float,2>,std::allocator<Espresso::blob<float,2>>,int &,int &,void>(&v236, v242[2], v242[3]);
            v123 = 0;
            v124 = v236;
            v125 = v122[2];
            do
            {
              v125 *= v122[v123 + 3];
              ++v123;
            }
            while (v123 != 3);
            memcpy(*(void **)(v236 + 16), *((const void **)v122 + 3), 4 * v125);
            v126 = v246;
            v231 = v124;
            v232 = v237;
            if (v237)
            {
              v127 = (unint64_t *)&v237->__shared_owners_;
              do
                v128 = __ldxr(v127);
              while (__stxr(v128 + 1, v127));
            }
            (*(void (**)(void *, uint64_t *))(*(_QWORD *)v126 + 400))(v126, &v231);
            v129 = v232;
            if (v232)
            {
              v130 = (unint64_t *)&v232->__shared_owners_;
              do
                v131 = __ldaxr(v130);
              while (__stlxr(v131 - 1, v130));
              if (!v131)
              {
                ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
                std::__shared_weak_count::__release_weak(v129);
              }
            }
            v132 = v237;
            if (v237)
            {
              v133 = (unint64_t *)&v237->__shared_owners_;
              do
                v134 = __ldaxr(v133);
              while (__stlxr(v134 - 1, v133));
              if (!v134)
              {
                ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
                std::__shared_weak_count::__release_weak(v132);
              }
            }
            v135 = v243;
            if (v243)
            {
              v136 = (unint64_t *)&v243->__shared_owners_;
              do
                v137 = __ldaxr(v136);
              while (__stlxr(v137 - 1, v136));
              if (!v137)
              {
                ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
                std::__shared_weak_count::__release_weak(v135);
              }
            }
            v117 = (std::__shared_weak_count *)v244.__r_.__value_.__l.__size_;
          }
          if (v117)
          {
            v138 = (unint64_t *)&v117->__shared_owners_;
            do
              v139 = __ldaxr(v138);
            while (__stlxr(v139 - 1, v138));
            if (!v139)
            {
              ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
              std::__shared_weak_count::__release_weak(v117);
            }
          }
          if (SHIBYTE(v245.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v245.__r_.__value_.__l.__data_);
        }
        v245.__r_.__value_.__r.__words[0] = v22;
        v140 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)(v7 + 7), v22, &v245);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v140[4] - v140[3]) >> 3) >= 3)
        {
          Espresso::get_layer_parameter_name((const void **)(v248 + 16), 2, &v244);
          v141 = Espresso::net::loaded_global_name(v7, (uint64_t)&v244);
          if (*(char *)(v141 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v245, *(const std::string::value_type **)v141, *(_QWORD *)(v141 + 8));
          }
          else
          {
            v142 = *(_OWORD *)v141;
            v245.__r_.__value_.__r.__words[2] = *(_QWORD *)(v141 + 16);
            *(_OWORD *)&v245.__r_.__value_.__l.__data_ = v142;
          }
          if (SHIBYTE(v244.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v244.__r_.__value_.__l.__data_);
          Espresso::net::get_global(&v244, (uint64_t)v7, (unsigned __int8 *)&v245);
          v143 = (std::__shared_weak_count *)v244.__r_.__value_.__l.__size_;
          if (v244.__r_.__value_.__r.__words[0])
          {
            v230 = *(_OWORD *)&v244.__r_.__value_.__l.__data_;
            if (v244.__r_.__value_.__l.__size_)
            {
              v144 = (unint64_t *)(v244.__r_.__value_.__l.__size_ + 8);
              do
                v145 = __ldxr(v144);
              while (__stxr(v145 + 1, v144));
            }
            Espresso::sync_copy_to_host(&v242, &v230);
            if (v143)
            {
              v146 = (unint64_t *)&v143->__shared_owners_;
              do
                v147 = __ldaxr(v146);
              while (__stlxr(v147 - 1, v146));
              if (!v147)
              {
                ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
                std::__shared_weak_count::__release_weak(v143);
              }
            }
            v148 = v242;
            std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,void>(&v236, v242[4]);
            v149 = 0;
            v150 = v236;
            v151 = v148[2];
            do
            {
              v151 *= v148[v149 + 3];
              ++v149;
            }
            while (v149 != 3);
            memcpy(*(void **)(v236 + 16), *((const void **)v148 + 3), 4 * v151);
            v152 = v246;
            v228 = v150;
            v229 = v237;
            if (v237)
            {
              v153 = (unint64_t *)&v237->__shared_owners_;
              do
                v154 = __ldxr(v153);
              while (__stxr(v154 + 1, v153));
            }
            (*(void (**)(void *, uint64_t *))(*(_QWORD *)v152 + 392))(v152, &v228);
            v155 = v229;
            if (v229)
            {
              v156 = (unint64_t *)&v229->__shared_owners_;
              do
                v157 = __ldaxr(v156);
              while (__stlxr(v157 - 1, v156));
              if (!v157)
              {
                ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
                std::__shared_weak_count::__release_weak(v155);
              }
            }
            v158 = v237;
            if (v237)
            {
              v159 = (unint64_t *)&v237->__shared_owners_;
              do
                v160 = __ldaxr(v159);
              while (__stlxr(v160 - 1, v159));
              if (!v160)
              {
                ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
                std::__shared_weak_count::__release_weak(v158);
              }
            }
            v161 = v243;
            if (v243)
            {
              v162 = (unint64_t *)&v243->__shared_owners_;
              do
                v163 = __ldaxr(v162);
              while (__stlxr(v163 - 1, v162));
              if (!v163)
              {
                ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
                std::__shared_weak_count::__release_weak(v161);
              }
            }
            v143 = (std::__shared_weak_count *)v244.__r_.__value_.__l.__size_;
          }
          if (v143)
          {
            v164 = (unint64_t *)&v143->__shared_owners_;
            do
              v165 = __ldaxr(v164);
            while (__stlxr(v165 - 1, v164));
            if (!v165)
            {
              ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
              std::__shared_weak_count::__release_weak(v143);
            }
          }
          if (SHIBYTE(v245.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v245.__r_.__value_.__l.__data_);
        }
        v108 = v247;
        if (!v247)
          goto LABEL_294;
        v166 = (unint64_t *)&v247->__shared_owners_;
        do
          v110 = __ldaxr(v166);
        while (__stlxr(v110 - 1, v166));
        goto LABEL_292;
      }
      if (v54)
      {
        v55 = v54;
        v56 = *(_QWORD *)(v26 + 72);
        v244.__r_.__value_.__r.__words[0] = (std::string::size_type)v54;
        v244.__r_.__value_.__l.__size_ = v56;
        if (v56)
        {
          v57 = (unint64_t *)(v56 + 8);
          do
            v58 = __ldxr(v57);
          while (__stxr(v58 + 1, v57));
        }
        v59 = v249;
        v60 = *(const void **)(v249 + 64);
        if (v60
        {
          v62 = v61;
          v63 = *(std::__shared_weak_count **)(v59 + 72);
          v246 = v61;
          v247 = v63;
          if (v63)
          {
            v64 = (unint64_t *)&v63->__shared_owners_;
            do
              v65 = __ldxr(v64);
            while (__stxr(v65 + 1, v64));
          }
        }
        else
        {
          v62 = 0;
          v246 = 0;
          v247 = 0;
        }
        if (*(_DWORD *)((*(uint64_t (**)(void *))(*(_QWORD *)v55 + 384))(v55) + 4))
          Espresso::throw_exception_selector<Espresso::not_implemented_error>("training mode batchnorm is not supported");
        v245.__r_.__value_.__r.__words[0] = v22;
        v111 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)(v7 + 7), v22, &v245);
        if (v111[4] - v111[3] != 48)
          Espresso::throw_exception_selector<Espresso::invalid_state_error>("number of batchnorm inputs != 2");
        v242 = (int *)v22;
        v112 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)(v7 + 7), v22, &v242)[3];
        if (*(char *)(v112 + 47) < 0)
          std::string::__init_copy_ctor_external(&v245, *(const std::string::value_type **)(v112 + 24), *(_QWORD *)(v112 + 32));
        else
          v245 = *(std::string *)(v112 + 24);
        v167 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>(v218 + 2, (unsigned __int8 *)&v245);
        if (!v167)
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        v168 = *((int *)v167 + 10);
        v169 = v218[19];
        if (v168 >= (v218[20] - v169) >> 3)
          std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
        v170 = *(_QWORD *)(v7[4] + 16 * *(_QWORD *)(v169 + 8 * v168));
        v171 = *(const void **)(v170 + 64);
        if (v171)
        {
          if (v172)
          {
            v173 = v172;
            v174 = *(std::__shared_weak_count **)(v170 + 72);
            v242 = v172;
            v243 = v174;
            if (v174)
            {
              v175 = (unint64_t *)&v174->__shared_owners_;
              do
                v176 = __ldxr(v175);
              while (__stxr(v176 + 1, v175));
            }
            v177 = *((_QWORD *)v172 + 43);
            if (v177 && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v177 + 32))(v177))
            {
              v207 = *((_QWORD *)v173 + 43);
              v178 = *(_QWORD *)(v207 + 160);
              v208 = *(std::__shared_weak_count **)(v207 + 168);
              v236 = v178;
              v237 = v208;
              if (v208)
              {
                v209 = (unint64_t *)&v208->__shared_owners_;
                do
                  v210 = __ldxr(v209);
                while (__stxr(v210 + 1, v209));
              }
            }
            else
            {
              v178 = 0;
              v236 = 0;
              v237 = 0;
            }
            v179 = 0;
            v180 = *(_DWORD *)(v178 + 8);
            do
            {
              v180 *= *(_DWORD *)(v178 + 12 + v179);
              v179 += 4;
            }
            while (v179 != 12);
            std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,unsigned long,void>(&v226, v180);
            v181 = 0;
            v182 = v226;
            v183 = *(int *)(v178 + 8);
            do
            {
              v183 *= *(int *)(v178 + 12 + v181);
              v181 += 4;
            }
            while (v181 != 12);
            memcpy(*(void **)(v226 + 16), *(const void **)(v178 + 24), 4 * v183);
            v224 = v182;
            v225 = v227;
            if (v227)
            {
              v184 = (unint64_t *)&v227->__shared_owners_;
              do
                v185 = __ldxr(v184);
              while (__stxr(v185 + 1, v184));
            }
            (*(void (**)(void *, uint64_t *))(*(_QWORD *)v62 + 392))(v62, &v224);
            v186 = v225;
            if (v225)
            {
              v187 = (unint64_t *)&v225->__shared_owners_;
              do
                v188 = __ldaxr(v187);
              while (__stlxr(v188 - 1, v187));
              if (!v188)
              {
                ((void (*)(std::__shared_weak_count *))v186->__on_zero_shared)(v186);
                std::__shared_weak_count::__release_weak(v186);
              }
            }
            v189 = v227;
            if (v227)
            {
              v190 = (unint64_t *)&v227->__shared_owners_;
              do
                v191 = __ldaxr(v190);
              while (__stlxr(v191 - 1, v190));
              if (!v191)
              {
                ((void (*)(std::__shared_weak_count *))v189->__on_zero_shared)(v189);
                std::__shared_weak_count::__release_weak(v189);
              }
            }
            v192 = v237;
            if (v237)
            {
              v193 = (unint64_t *)&v237->__shared_owners_;
              do
                v194 = __ldaxr(v193);
              while (__stlxr(v194 - 1, v193));
              if (!v194)
              {
                ((void (*)(std::__shared_weak_count *))v192->__on_zero_shared)(v192);
                std::__shared_weak_count::__release_weak(v192);
              }
            }
            v195 = v243;
            if (v243)
            {
              v196 = (unint64_t *)&v243->__shared_owners_;
              do
                v197 = __ldaxr(v196);
              while (__stlxr(v197 - 1, v196));
              if (!v197)
              {
                ((void (*)(std::__shared_weak_count *))v195->__on_zero_shared)(v195);
                std::__shared_weak_count::__release_weak(v195);
              }
            }
          }
        }
        if (SHIBYTE(v245.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v245.__r_.__value_.__l.__data_);
        v113 = v247;
        if (v247)
        {
          v198 = (unint64_t *)&v247->__shared_owners_;
          do
            v116 = __ldaxr(v198);
          while (__stlxr(v116 - 1, v198));
          goto LABEL_287;
        }
      }
      else
      {
        *(_OWORD *)&v244.__r_.__value_.__l.__data_ = 0uLL;
        {
          v113 = *(std::__shared_weak_count **)(v26 + 72);
          if (!v113)
            goto LABEL_289;
          v114 = (unint64_t *)&v113->__shared_owners_;
          do
            v115 = __ldxr(v114);
          while (__stxr(v115 + 1, v114));
          do
            v116 = __ldaxr(v114);
          while (__stlxr(v116 - 1, v114));
          goto LABEL_287;
        }
        v113 = *(std::__shared_weak_count **)(v26 + 72);
        if (v113)
        {
          v205 = (unint64_t *)&v113->__shared_owners_;
          do
            v206 = __ldxr(v205);
          while (__stxr(v206 + 1, v205));
          do
            v116 = __ldaxr(v205);
          while (__stlxr(v116 - 1, v205));
LABEL_287:
          if (!v116)
          {
            ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
            std::__shared_weak_count::__release_weak(v113);
          }
        }
      }
LABEL_289:
      v108 = (std::__shared_weak_count *)v244.__r_.__value_.__l.__size_;
      if (v244.__r_.__value_.__l.__size_)
      {
        v199 = (unint64_t *)(v244.__r_.__value_.__l.__size_ + 8);
        do
          v110 = __ldaxr(v199);
        while (__stlxr(v110 - 1, v199));
LABEL_292:
        if (!v110)
        {
          ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
          std::__shared_weak_count::__release_weak(v108);
        }
      }
LABEL_294:
      v200 = (std::__shared_weak_count *)*((_QWORD *)&v248 + 1);
      if (*((_QWORD *)&v248 + 1))
      {
        v201 = (unint64_t *)(*((_QWORD *)&v248 + 1) + 8);
        do
          v202 = __ldaxr(v201);
        while (__stlxr(v202 - 1, v201));
        if (!v202)
        {
          ((void (*)(std::__shared_weak_count *))v200->__on_zero_shared)(v200);
          std::__shared_weak_count::__release_weak(v200);
        }
      }
      v11 = (std::__shared_weak_count *)*((_QWORD *)&v249 + 1);
LABEL_300:
      if (v11)
      {
        v203 = (unint64_t *)&v11->__shared_owners_;
        do
          v204 = __ldaxr(v203);
        while (__stlxr(v204 - 1, v203));
        if (!v204)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      ++v9;
      v8 = *(_QWORD *)(v6 + 32);
    }
    while (v9 < (*(_QWORD *)(v6 + 40) - v8) >> 4);
  }
  v211 = v221;
  if (v221)
  {
    v212 = (unint64_t *)&v221->__shared_owners_;
    do
      v213 = __ldaxr(v212);
    while (__stlxr(v213 - 1, v212));
    if (!v213)
    {
      ((void (*)(std::__shared_weak_count *))v211->__on_zero_shared)(v211);
      std::__shared_weak_count::__release_weak(v211);
    }
  }
  v214 = v223;
  if (v223)
  {
    v215 = (unint64_t *)&v223->__shared_owners_;
    do
      v216 = __ldaxr(v215);
    while (__stlxr(v216 - 1, v215));
    if (!v216)
    {
      ((void (*)(std::__shared_weak_count *))v214->__on_zero_shared)(v214);
      std::__shared_weak_count::__release_weak(v214);
    }
  }
  return 0;
}

void sub_1913CD828(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  EspressoLight *v10;
  std::exception *v11;
  uint64_t v12;
  va_list va;
  uint64_t v14;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v7 - 216);
  if (*(char *)(v7 - 153) < 0)
    operator delete(*(void **)(v7 - 176));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v7 - 144);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v7 - 200);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v7 - 128);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v7 - 112);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  if (a2 == 1)
  {
    v10 = (EspressoLight *)__cxa_begin_catch(a1);
    EspressoLight::handle_ex_(v10, v11);
    __cxa_end_catch();
    JUMPOUT(0x1913CD7A4);
  }
  _Unwind_Resume(a1);
}

uint64_t espresso_context_set_low_precision_accumulation(uint64_t **a1, int a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v8;
  std::__shared_weak_count *v9;

  Espresso::get_internal_context(a1, &v8);
  if (v8)
  {
    v3 = 0;
    *(_DWORD *)(v8 + 68) = a2;
  }
  else
  {
    v3 = 4294967290;
  }
  v4 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return v3;
}

uint64_t espresso_will_share_intermediate_buffer_with_existing_plan(char *__s, void *lpsrc)
{
  unint64_t v2;
  Espresso *v5;
  const char *v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint8x8_t v14;
  unint64_t v15;
  _QWORD *v16;
  unsigned __int8 *v17;
  int8x8_t v18;
  unint64_t v19;
  uint8x8_t v20;
  void **v21;
  char *v22;
  unint64_t v23;
  std::string *v24;
  _QWORD *v25;
  float v26;
  float v27;
  _BOOL8 v28;
  unint64_t v29;
  unint64_t v30;
  int8x8_t prime;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  unint64_t v34;
  void *v35;
  void *v36;
  uint64_t v37;
  _QWORD *v38;
  unint64_t v39;
  uint8x8_t v40;
  unint64_t v41;
  uint8x8_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  unint64_t v51;
  void *v53;
  std::runtime_error *exception;
  _BYTE __p[24];
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  if (!__s)
    return 4294967290;
  if (lpsrc)
  {
    if (v5)
    {
      if (*(_DWORD *)(*((_QWORD *)lpsrc + 133) + 160) != 1)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Inconsistent phase of espresso_plan");
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      Espresso::espresso_os_log_subsystem(v5, v6);
      v7 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)__p = 136315394;
        *(_QWORD *)&__p[4] = __s;
        *(_WORD *)&__p[12] = 2048;
        *(_QWORD *)&__p[14] = lpsrc;
        _os_log_debug_impl(&dword_190DAF000, v7, OS_LOG_TYPE_DEBUG, "IntermediateSharing espresso_will_share_intermediate_buffer_with_existing_plan (1/3) %s %llu", __p, 0x16u);
      }

      v8 = *(_QWORD *)(*((_QWORD *)lpsrc + 133) + 400);
      if (EspressoLight::intermediate_buffer_sharing_singleton::shared(void)::onceToken != -1)
        dispatch_once(&EspressoLight::intermediate_buffer_sharing_singleton::shared(void)::onceToken, &__block_literal_global_231);
      v9 = EspressoLight::intermediate_buffer_sharing_singleton::shared(void)::ret;
      std::string::basic_string[abi:ne180100]<0>(__p, __s);
      v10 = *(_DWORD *)(*((_QWORD *)lpsrc + 133) + 164);
      std::mutex::lock((std::mutex *)v9);
      v11 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)__p);
      v12 = v11;
      v13 = *(_QWORD *)(v9 + 72);
      if (v13)
      {
        v14 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
        v14.i16[0] = vaddlv_u8(v14);
        v15 = v14.u32[0];
        if (v14.u32[0] > 1uLL)
        {
          v2 = v11;
          if (v11 >= v13)
            v2 = v11 % v13;
        }
        else
        {
          v2 = (v13 - 1) & v11;
        }
        v21 = *(void ***)(*(_QWORD *)(v9 + 64) + 8 * v2);
        if (v21)
        {
          v22 = (char *)*v21;
          if (*v21)
          {
            do
            {
              v23 = *((_QWORD *)v22 + 1);
              if (v23 == v12)
              {
                if (std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)v22 + 16, __p))
                  goto LABEL_115;
              }
              else
              {
                if (v15 > 1)
                {
                  if (v23 >= v13)
                    v23 %= v13;
                }
                else
                {
                  v23 &= v13 - 1;
                }
                if (v23 != v2)
                  break;
              }
              v22 = *(char **)v22;
            }
            while (v22);
          }
        }
      }
      v22 = (char *)operator new(0x38uLL);
      *(_QWORD *)v22 = 0;
      *((_QWORD *)v22 + 1) = v12;
      v24 = (std::string *)(v22 + 16);
      if ((__p[23] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external(v24, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
      }
      else
      {
        *(_OWORD *)&v24->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
        *((_QWORD *)v22 + 4) = *(_QWORD *)&__p[16];
      }
      v25 = (_QWORD *)(v9 + 80);
      *((_QWORD *)v22 + 5) = 0;
      *((_QWORD *)v22 + 6) = 0;
      v26 = (float)(unint64_t)(*(_QWORD *)(v9 + 88) + 1);
      v27 = *(float *)(v9 + 96);
      if (v13 && (float)(v27 * (float)v13) >= v26)
      {
LABEL_105:
        v50 = *(_QWORD **)(*(_QWORD *)(v9 + 64) + 8 * v2);
        if (v50)
        {
          *(_QWORD *)v22 = *v50;
        }
        else
        {
          *(_QWORD *)v22 = *(_QWORD *)(v9 + 80);
          *(_QWORD *)(v9 + 80) = v22;
          *(_QWORD *)(*(_QWORD *)(v9 + 64) + 8 * v2) = v25;
          if (!*(_QWORD *)v22)
            goto LABEL_114;
          v51 = *(_QWORD *)(*(_QWORD *)v22 + 8);
          if ((v13 & (v13 - 1)) != 0)
          {
            if (v51 >= v13)
              v51 %= v13;
          }
          else
          {
            v51 &= v13 - 1;
          }
          v50 = (_QWORD *)(*(_QWORD *)(v9 + 64) + 8 * v51);
        }
        *v50 = v22;
LABEL_114:
        ++*(_QWORD *)(v9 + 88);
LABEL_115:
        *((_QWORD *)v22 + 5) = v8;
        *((_DWORD *)v22 + 12) = v10;
        goto LABEL_116;
      }
      v28 = 1;
      if (v13 >= 3)
        v28 = (v13 & (v13 - 1)) != 0;
      v29 = v28 | (2 * v13);
      v30 = vcvtps_u32_f32(v26 / v27);
      if (v29 <= v30)
        prime = (int8x8_t)v30;
      else
        prime = (int8x8_t)v29;
      if (*(_QWORD *)&prime == 1)
      {
        prime = (int8x8_t)2;
      }
      else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
      {
        prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      }
      v13 = *(_QWORD *)(v9 + 72);
      if (*(_QWORD *)&prime > v13)
        goto LABEL_53;
      if (*(_QWORD *)&prime < v13)
      {
        v41 = vcvtps_u32_f32((float)*(unint64_t *)(v9 + 88) / *(float *)(v9 + 96));
        if (v13 < 3 || (v42 = (uint8x8_t)vcnt_s8((int8x8_t)v13), v42.i16[0] = vaddlv_u8(v42), v42.u32[0] > 1uLL))
        {
          v41 = std::__next_prime(v41);
        }
        else
        {
          v43 = 1 << -(char)__clz(v41 - 1);
          if (v41 >= 2)
            v41 = v43;
        }
        if (*(_QWORD *)&prime <= v41)
          prime = (int8x8_t)v41;
        if (*(_QWORD *)&prime >= v13)
        {
          v13 = *(_QWORD *)(v9 + 72);
        }
        else
        {
          if (prime)
          {
LABEL_53:
            if (*(_QWORD *)&prime >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v35 = operator new(8 * *(_QWORD *)&prime);
            v36 = *(void **)(v9 + 64);
            *(_QWORD *)(v9 + 64) = v35;
            if (v36)
              operator delete(v36);
            v37 = 0;
            *(int8x8_t *)(v9 + 72) = prime;
            do
              *(_QWORD *)(*(_QWORD *)(v9 + 64) + 8 * v37++) = 0;
            while (*(_QWORD *)&prime != v37);
            v38 = (_QWORD *)*v25;
            if (*v25)
            {
              v39 = v38[1];
              v40 = (uint8x8_t)vcnt_s8(prime);
              v40.i16[0] = vaddlv_u8(v40);
              if (v40.u32[0] > 1uLL)
              {
                if (v39 >= *(_QWORD *)&prime)
                  v39 %= *(_QWORD *)&prime;
              }
              else
              {
                v39 &= *(_QWORD *)&prime - 1;
              }
              *(_QWORD *)(*(_QWORD *)(v9 + 64) + 8 * v39) = v25;
              v47 = (_QWORD *)*v38;
              if (*v38)
              {
                do
                {
                  v48 = v47[1];
                  if (v40.u32[0] > 1uLL)
                  {
                    if (v48 >= *(_QWORD *)&prime)
                      v48 %= *(_QWORD *)&prime;
                  }
                  else
                  {
                    v48 &= *(_QWORD *)&prime - 1;
                  }
                  if (v48 != v39)
                  {
                    v49 = *(_QWORD *)(v9 + 64);
                    if (!*(_QWORD *)(v49 + 8 * v48))
                    {
                      *(_QWORD *)(v49 + 8 * v48) = v38;
                      goto LABEL_96;
                    }
                    *v38 = *v47;
                    *v47 = **(_QWORD **)(*(_QWORD *)(v9 + 64) + 8 * v48);
                    **(_QWORD **)(*(_QWORD *)(v9 + 64) + 8 * v48) = v47;
                    v47 = v38;
                  }
                  v48 = v39;
LABEL_96:
                  v38 = v47;
                  v47 = (_QWORD *)*v47;
                  v39 = v48;
                }
                while (v47);
              }
            }
            v13 = (unint64_t)prime;
            goto LABEL_100;
          }
          v53 = *(void **)(v9 + 64);
          *(_QWORD *)(v9 + 64) = 0;
          if (v53)
            operator delete(v53);
          v13 = 0;
          *(_QWORD *)(v9 + 72) = 0;
        }
      }
LABEL_100:
      if ((v13 & (v13 - 1)) != 0)
      {
        if (v12 >= v13)
          v2 = v12 % v13;
        else
          v2 = v12;
      }
      else
      {
        v2 = (v13 - 1) & v12;
      }
      goto LABEL_105;
    }
    return 4294967290;
  }
  if (EspressoLight::intermediate_buffer_sharing_singleton::shared(void)::onceToken != -1)
    dispatch_once(&EspressoLight::intermediate_buffer_sharing_singleton::shared(void)::onceToken, &__block_literal_global_231);
  v9 = EspressoLight::intermediate_buffer_sharing_singleton::shared(void)::ret;
  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  std::mutex::lock((std::mutex *)v9);
  v16 = (_QWORD *)(v9 + 64);
  v17 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>((_QWORD *)(v9 + 64), __p);
  if (v17)
  {
    v18 = *(int8x8_t *)(v9 + 72);
    v19 = *((_QWORD *)v17 + 1);
    v20 = (uint8x8_t)vcnt_s8(v18);
    v20.i16[0] = vaddlv_u8(v20);
    if (v20.u32[0] > 1uLL)
    {
      if (v19 >= *(_QWORD *)&v18)
        v19 %= *(_QWORD *)&v18;
    }
    else
    {
      v19 &= *(_QWORD *)&v18 - 1;
    }
    v32 = *(unsigned __int8 **)(*v16 + 8 * v19);
    do
    {
      v33 = v32;
      v32 = *(unsigned __int8 **)v32;
    }
    while (v32 != v17);
    if (v33 == (unsigned __int8 *)(v9 + 80))
      goto LABEL_75;
    v34 = *((_QWORD *)v33 + 1);
    if (v20.u32[0] > 1uLL)
    {
      if (v34 >= *(_QWORD *)&v18)
        v34 %= *(_QWORD *)&v18;
    }
    else
    {
      v34 &= *(_QWORD *)&v18 - 1;
    }
    if (v34 != v19)
    {
LABEL_75:
      if (!*(_QWORD *)v17)
        goto LABEL_76;
      v44 = *(_QWORD *)(*(_QWORD *)v17 + 8);
      if (v20.u32[0] > 1uLL)
      {
        if (v44 >= *(_QWORD *)&v18)
          v44 %= *(_QWORD *)&v18;
      }
      else
      {
        v44 &= *(_QWORD *)&v18 - 1;
      }
      if (v44 != v19)
LABEL_76:
        *(_QWORD *)(*v16 + 8 * v19) = 0;
    }
    v45 = *(_QWORD *)v17;
    if (*(_QWORD *)v17)
    {
      v46 = *(_QWORD *)(v45 + 8);
      if (v20.u32[0] > 1uLL)
      {
        if (v46 >= *(_QWORD *)&v18)
          v46 %= *(_QWORD *)&v18;
      }
      else
      {
        v46 &= *(_QWORD *)&v18 - 1;
      }
      if (v46 != v19)
      {
        *(_QWORD *)(*v16 + 8 * v46) = v33;
        v45 = *(_QWORD *)v17;
      }
    }
    *(_QWORD *)v33 = v45;
    *(_QWORD *)v17 = 0;
    --*(_QWORD *)(v9 + 88);
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,unsigned long>,void *>>>::operator()[abi:ne180100](1, (void **)v17);
  }
LABEL_116:
  std::mutex::unlock((std::mutex *)v9);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  return 0;
}

uint64_t espresso_plan_share_intermediate_buffer(void *lpsrc, _QWORD *a2)
{
  uint64_t result;
  Espresso *v5;
  const char *v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  std::runtime_error *exception;
  int v15;
  void *v16;
  __int16 v17;
  _QWORD *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  result = 4294967290;
  if (!lpsrc || !a2)
    return result;
  if (!v5)
    return 4294967290;
  v7 = *((_QWORD *)lpsrc + 133);
  if (*(_DWORD *)(v7 + 160))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Inconsistent phase of espresso_plan");
    goto LABEL_18;
  }
  if (*(_DWORD *)(a2[133] + 160) != 1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Inconsistent phase of src espresso_plan");
LABEL_18:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (*(_QWORD *)(v7 + 24) == *(_QWORD *)(v7 + 32))
    return 4294967290;
  Espresso::espresso_os_log_subsystem(v5, v6);
  v8 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    v15 = 134218240;
    v16 = lpsrc;
    v17 = 2048;
    v18 = a2;
    _os_log_debug_impl(&dword_190DAF000, v8, OS_LOG_TYPE_DEBUG, "IntermediateSharing espresso_plan_share_intermediate_buffer (1/3) %llu %llu", (uint8_t *)&v15, 0x16u);
  }

  v9 = *((_QWORD *)lpsrc + 133);
  v10 = *(uint64_t **)(v9 + 24);
  v11 = *(uint64_t **)(v9 + 32);
  if (v10 != v11)
  {
    v12 = *(_QWORD *)(a2[133] + 400);
    do
    {
      v13 = *v10;
      v10 += 2;
      *(_QWORD *)(v13 + 1272) = v12;
      *(_BYTE *)(v13 + 1280) = 1;
    }
    while (v10 != v11);
  }
  return 0;
}

void sub_1913CE4BC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t espresso_ane_cache_has_network(Espresso *a1, char *a2)
{
  Espresso *v4;
  const char *v5;
  NSObject *v6;
  uint64_t v7;
  _QWORD *v8;
  NSURL *v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  unsigned __int8 v14;
  uint8_t buf[4];
  Espresso *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    Espresso::espresso_os_log_subsystem(0, a2);
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_190DAF000, v12, OS_LOG_TYPE_ERROR, "espresso_ane_cache_has_network 'path' arg is null", buf, 2u);
    }
    goto LABEL_12;
  }
  if (!a2)
  {
    Espresso::espresso_os_log_subsystem(a1, 0);
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_190DAF000, v12, OS_LOG_TYPE_ERROR, "espresso_ane_cache_has_network 'exists' arg is null", buf, 2u);
    }
LABEL_12:

    return 4294967290;
  }
  v14 = 0;
  v4 = (Espresso *)MEMORY[0x19401D4A4]();
  Espresso::espresso_os_log_subsystem(v4, v5);
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315138;
    v16 = a1;
    _os_log_debug_impl(&dword_190DAF000, v6, OS_LOG_TYPE_DEBUG, "ANECache lookup path=%s", buf, 0xCu);
  }

  objc_msgSend(MEMORY[0x1E0CFDF38], "sharedConnection");
  v7 = objc_claimAutoreleasedReturnValue();
  v8 = (_QWORD *)operator new();
  *v8 = &off_1E2D59320;
  v8[1] = v7;
  model_path_to_model_url((const char *)a1);
  v9 = (NSURL *)objc_claimAutoreleasedReturnValue();
  swap_for_devop_override_if_exists_and_not_precompiled((char *)a1, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = (*(uint64_t (**)(_QWORD *, void *, unsigned __int8 *))*v8)(v8, v10, &v14);

  (*(void (**)(_QWORD *))(*v8 + 24))(v8);
  objc_autoreleasePoolPop(v4);
  if (!(_DWORD)v11)
    *(_DWORD *)a2 = v14;
  return v11;
}

void sub_1913CE6F8(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int buf, __int128 a12)
{
  uint64_t v12;
  void *v13;
  void *v14;
  Espresso *v17;
  const char *v18;
  NSObject *v19;
  uint64_t v20;

  (*(void (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
  if (a2 == 1)
  {
    v17 = (Espresso *)__cxa_begin_catch(a1);
    Espresso::espresso_os_log_subsystem(v17, v18);
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
    {
      v20 = (*(uint64_t (**)(Espresso *))(*(_QWORD *)v17 + 16))(v17);
      buf = 136315394;
      WORD2(a12) = 2080;
      *(_QWORD *)((char *)&a12 + 6) = v20;
      _os_log_debug_impl(&dword_190DAF000, v19, OS_LOG_TYPE_DEBUG, "ane_cache_has_network %s exception: %s", (uint8_t *)&buf, 0x16u);
    }

    __cxa_end_catch();
    JUMPOUT(0x1913CE62CLL);
  }
  _Unwind_Resume(a1);
}

uint64_t espresso_ane_cache_purge_network(char *a1)
{
  void *v2;
  uint64_t v3;
  _QWORD *v4;
  NSURL *v5;
  void *v6;
  uint64_t v7;

  if (!a1)
    return 4294967290;
  v2 = (void *)MEMORY[0x19401D4A4]();
  objc_msgSend(MEMORY[0x1E0CFDF38], "sharedConnection");
  v3 = objc_claimAutoreleasedReturnValue();
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E2D59320;
  v4[1] = v3;
  model_path_to_model_url(a1);
  v5 = (NSURL *)objc_claimAutoreleasedReturnValue();
  swap_for_devop_override_if_exists_and_not_precompiled(a1, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = (*(uint64_t (**)(_QWORD *, void *))(*v4 + 8))(v4, v6);

  (*(void (**)(_QWORD *))(*v4 + 24))(v4);
  objc_autoreleasePoolPop(v2);
  return v7;
}

void sub_1913CE8C4(_Unwind_Exception *a1, int a2)
{
  uint64_t v2;
  void *v3;
  void *v4;

  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1913CE8ACLL);
  }
  _Unwind_Resume(a1);
}

uint64_t espresso_is_ane_arch_greater_than_or_equal(const char *a1, _BYTE *a2)
{
  size_t v4;
  NSString *v5;
  void *v6;
  int v7;
  char is_mix_e;
  size_t v9;
  NSString *v10;
  void *v11;
  int v12;
  char v13;
  uint64_t result;
  char v15;
  void *__s1;
  uint64_t v17;
  unsigned __int8 v18;

  std::string::basic_string[abi:ne180100]<0>(&__s1, "H13");
  v4 = strlen(a1);
  if ((char)v18 < 0)
  {
    if (v4 == v17)
    {
      if (v4 == -1)
        std::string::__throw_out_of_range[abi:ne180100]();
      v6 = __s1;
      v7 = memcmp(__s1, a1, v4);
      operator delete(v6);
      if (!v7)
        goto LABEL_8;
    }
    else
    {
      operator delete(__s1);
    }
LABEL_10:
    std::string::basic_string[abi:ne180100]<0>(&__s1, "H14");
    v9 = strlen(a1);
    if ((char)v18 < 0)
    {
      if (v9 == v17)
      {
        if (v9 == -1)
          std::string::__throw_out_of_range[abi:ne180100]();
        v11 = __s1;
        v12 = memcmp(__s1, a1, v9);
        operator delete(v11);
        if (!v12)
          goto LABEL_17;
      }
      else
      {
        operator delete(__s1);
      }
    }
    else if (v9 == v18 && !memcmp(&__s1, a1, v9))
    {
LABEL_17:
      is_mix_e = Espresso::ANECompilerEngine::is_mix_e(0, v10);
      goto LABEL_18;
    }
    v15 = 0;
    result = 4294967290;
    goto LABEL_21;
  }
  if (v4 != v18 || memcmp(&__s1, a1, v4))
    goto LABEL_10;
LABEL_8:
  is_mix_e = Espresso::ANECompilerEngine::is_mix(0, v5);
LABEL_18:
  v13 = is_mix_e;
  result = 0;
  v15 = v13 ^ 1;
LABEL_21:
  *a2 = v15;
  return result;
}

uint64_t espresso_get_metadata_for_key(const void *a1, int a2, char *a3, uint64_t a4, int a5)
{
  void *v10;
  Espresso *v11;
  const char *v12;
  uint64_t v13;
  unsigned __int8 *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  uint64_t v23;
  NSObject *v24;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  _OWORD v29[2];
  uint64_t v30;
  void *__p;
  void *v32;
  uint64_t v33;
  _OWORD buf[11];
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  void *v38;
  _BYTE *v39;
  uint64_t v40;
  _OWORD v41[2];
  uint64_t v42;
  void *v43;
  _BYTE *v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  void *v47[2];
  char v48;
  uint64_t v49;
  std::__shared_weak_count *v50;

  v10 = (void *)MEMORY[0x19401D4A4]();
  if (!a1
  {
LABEL_22:
    v23 = 4294967290;
    goto LABEL_23;
  }
  if (a5 != 0x10000)
  {
    Espresso::espresso_os_log_subsystem(v11, v12);
    v24 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf[0]) = 0;
      _os_log_error_impl(&dword_190DAF000, v24, OS_LOG_TYPE_ERROR, "espresso_get_metadata_for_key requires Espresso managed buffer.", (uint8_t *)buf, 2u);
    }

    goto LABEL_22;
  }
  Espresso::get_internal_network((uint64_t)a1, a2, (uint64_t)&v49);
  v13 = v49;
  if (v49)
  {
    std::string::basic_string[abi:ne180100]<0>(v47, a3);
    if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>((_QWORD *)(v13 + 1304), (unsigned __int8 *)v47))
    {
      v14 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>((_QWORD *)(v13 + 1304), (unsigned __int8 *)v47);
      if (!v14)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      std::pair<Espresso::layer_shape,std::shared_ptr<Espresso::blob<float,5>>>::pair[abi:ne180100]((uint64_t)v41, (__int128 *)(v14 + 40));
      v35 = v41[0];
      v36 = v41[1];
      v37 = v42;
      v38 = 0;
      v39 = 0;
      v40 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v38, v43, (uint64_t)v44, (v44 - (_BYTE *)v43) >> 2);
      memset((char *)buf + 8, 0, 160);
      v29[0] = v35;
      v29[1] = v36;
      v30 = v37;
      __p = 0;
      v32 = 0;
      v33 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v38, (uint64_t)v39, (v39 - (_BYTE *)v38) >> 2);
      setup_espresso_buffer_with_shape((uint64_t)buf, (uint64_t)v29);
      if (__p)
      {
        v32 = __p;
        operator delete(__p);
      }
      *(_QWORD *)&buf[0] = *(_QWORD *)(v45 + 32);
      v15 = buf[9];
      *(_OWORD *)(a4 + 128) = buf[8];
      *(_OWORD *)(a4 + 144) = v15;
      *(_QWORD *)(a4 + 160) = *(_QWORD *)&buf[10];
      v16 = buf[5];
      *(_OWORD *)(a4 + 64) = buf[4];
      *(_OWORD *)(a4 + 80) = v16;
      v17 = buf[7];
      *(_OWORD *)(a4 + 96) = buf[6];
      *(_OWORD *)(a4 + 112) = v17;
      v18 = buf[3];
      *(_OWORD *)(a4 + 32) = buf[2];
      *(_OWORD *)(a4 + 48) = v18;
      v19 = buf[1];
      *(_OWORD *)a4 = buf[0];
      *(_OWORD *)(a4 + 16) = v19;
      if (v38)
      {
        v39 = v38;
        operator delete(v38);
      }
      v20 = v46;
      if (v46)
      {
        p_shared_owners = (unint64_t *)&v46->__shared_owners_;
        do
          v22 = __ldaxr(p_shared_owners);
        while (__stlxr(v22 - 1, p_shared_owners));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      if (v43)
      {
        v44 = v43;
        operator delete(v43);
      }
      v23 = 0;
    }
    else
    {
      v23 = 4294967288;
    }
    if (v48 < 0)
      operator delete(v47[0]);
  }
  else
  {
    v23 = 4294967291;
  }
  v26 = v50;
  if (v50)
  {
    v27 = (unint64_t *)&v50->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
LABEL_23:
  objc_autoreleasePoolPop(v10);
  return v23;
}

void sub_1913CED90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45)
{
  char *v45;
  uint64_t v46;
  std::exception *v49;

  if (__p)
    operator delete(__p);
  if (a44)
    operator delete(a44);
  std::pair<Espresso::layer_shape,std::shared_ptr<Espresso::blob<float,5>>>::~pair(v46 - 184);
  if (*(char *)(v46 - 81) < 0)
    operator delete(*(void **)(v46 - 104));
  if (a2 == 1)
  {
    v49 = (std::exception *)__cxa_begin_catch(a1);
    handle_ex_plan(v45, v49);
    __cxa_end_catch();
    JUMPOUT(0x1913CED18);
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v46 - 80);
  _Unwind_Resume(a1);
}

uint64_t std::pair<Espresso::layer_shape,std::shared_ptr<Espresso::blob<float,5>>>::pair[abi:ne180100](uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v4 = *a2;
  v5 = a2[1];
  *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((_QWORD *)(a1 + 40), *((const void **)a2 + 5), *((_QWORD *)a2 + 6), (uint64_t)(*((_QWORD *)a2 + 6) - *((_QWORD *)a2 + 5)) >> 2);
  v6 = *((_QWORD *)a2 + 9);
  *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
  *(_QWORD *)(a1 + 72) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return a1;
}

char *espresso_get_analysis_model_metadata_for_key(uint64_t a1, int a2, const char *a3)
{
  void *v6;
  char *v7;
  std::string *v8;
  void **v9;
  int v10;
  std::string *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::string v19;
  void *v20;
  char v21;
  void *v22;
  char v23;
  void *v24;
  char v25;
  void *v26;
  char v27;
  void *v28;
  char v29;
  void *__p;
  char v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;

  v6 = (void *)MEMORY[0x19401D4A4]();
  Espresso::get_internal_network(a1, a2, (uint64_t)&v34);
  if (!v34)
  {
    v7 = 0;
    goto LABEL_43;
  }
  Espresso::net::get_analysis_if_existing<Espresso::analysis_debug_metadata>(v34, &v32);
  if (v32)
  {
    Espresso::model_metadata_t::model_metadata_t(&v19, (__int128 *)(v32 + 8));
    if (!strcmp(a3, "bundle"))
    {
      if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v8 = &v19;
      else
        v8 = (std::string *)v19.__r_.__value_.__r.__words[0];
    }
    else
    {
      if (!strcmp(a3, "name"))
      {
        v9 = &v20;
        v10 = v21;
        v11 = (std::string *)v20;
      }
      else if (!strcmp(a3, "path"))
      {
        v9 = &v22;
        v10 = v23;
        v11 = (std::string *)v22;
      }
      else if (!strcmp(a3, "version"))
      {
        v9 = &v24;
        v10 = v25;
        v11 = (std::string *)v24;
      }
      else if (!strcmp(a3, "product"))
      {
        v9 = &v26;
        v10 = v27;
        v11 = (std::string *)v26;
      }
      else
      {
        if (strcmp(a3, "usecase"))
        {
          v7 = 0;
LABEL_24:
          if (v31 < 0)
            operator delete(__p);
          if (v29 < 0)
            operator delete(v28);
          if (v27 < 0)
            operator delete(v26);
          if (v25 < 0)
            operator delete(v24);
          if (v23 < 0)
            operator delete(v22);
          if (v21 < 0)
            operator delete(v20);
          if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v19.__r_.__value_.__l.__data_);
          goto LABEL_38;
        }
        v9 = &v28;
        v10 = v29;
        v11 = (std::string *)v28;
      }
      if (v10 >= 0)
        v8 = (std::string *)v9;
      else
        v8 = v11;
    }
    v7 = strdup((const char *)v8);
    goto LABEL_24;
  }
  v7 = 0;
LABEL_38:
  v12 = v33;
  if (v33)
  {
    p_shared_owners = (unint64_t *)&v33->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
LABEL_43:
  v15 = v35;
  if (v35)
  {
    v16 = (unint64_t *)&v35->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  objc_autoreleasePoolPop(v6);
  return v7;
}

void sub_1913CF138(_Unwind_Exception *a1, int a2)
{
  uint64_t v2;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v2 - 80);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v2 - 64);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1913CF114);
  }
  _Unwind_Resume(a1);
}

uint64_t espresso_set_analysis_model_metadata_for_key(const void *a1, int a2, const char *a3, uint64_t a4)
{
  void *v8;
  uint64_t v9;
  _QWORD *v10;
  __int128 v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  std::string *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::string v24;
  void *v25;
  char v26;
  void *v27;
  char v28;
  void *v29;
  char v30;
  void *v31;
  char v32;
  void *v33;
  char v34;
  void *__p;
  char v36;
  __int128 v37;
  uint64_t v38;
  std::__shared_weak_count *v39;

  v8 = (void *)MEMORY[0x19401D4A4]();
  if (!a1
  {
    v15 = 4294967290;
    goto LABEL_51;
  }
  Espresso::get_internal_network((uint64_t)a1, a2, (uint64_t)&v38);
  if (v38)
  {
    Espresso::net::get_analysis_if_existing<Espresso::analysis_debug_metadata>(v38, &v37);
    v9 = v37;
    if (!(_QWORD)v37)
    {
      v10 = operator new(0xF0uLL);
      v10[1] = 0;
      v10[2] = 0;
      *v10 = &off_1E2DBCD60;
      v10[3] = &off_1E2D8F218;
      *((_OWORD *)v10 + 2) = 0u;
      *((_OWORD *)v10 + 3) = 0u;
      *((_OWORD *)v10 + 4) = 0u;
      *((_OWORD *)v10 + 5) = 0u;
      *((_OWORD *)v10 + 6) = 0u;
      *((_OWORD *)v10 + 7) = 0u;
      *((_OWORD *)v10 + 8) = 0u;
      *((_OWORD *)v10 + 9) = 0u;
      *((_OWORD *)v10 + 10) = 0u;
      *((_OWORD *)v10 + 11) = 0u;
      *((_OWORD *)v10 + 12) = 0u;
      *((_OWORD *)v10 + 13) = 0u;
      v10[28] = 0;
      *((_DWORD *)v10 + 58) = 1065353216;
      *(_QWORD *)&v11 = v10 + 3;
      *((_QWORD *)&v11 + 1) = v10;
      v12 = (std::__shared_weak_count *)*((_QWORD *)&v37 + 1);
      v37 = v11;
      if (v12)
      {
        p_shared_owners = (unint64_t *)&v12->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      v9 = v37;
    }
    Espresso::model_metadata_t::model_metadata_t(&v24, (__int128 *)(v9 + 8));
    if (!strcmp(a3, "bundle"))
    {
      v16 = &v24;
    }
    else if (!strcmp(a3, "name"))
    {
      v16 = (std::string *)&v25;
    }
    else if (!strcmp(a3, "path"))
    {
      v16 = (std::string *)&v27;
    }
    else if (!strcmp(a3, "version"))
    {
      v16 = (std::string *)&v29;
    }
    else if (!strcmp(a3, "product"))
    {
      v16 = (std::string *)&v31;
    }
    else
    {
      if (strcmp(a3, "usecase"))
      {
        v15 = 4294967290;
LABEL_27:
        if (v36 < 0)
          operator delete(__p);
        if (v34 < 0)
          operator delete(v33);
        if (v32 < 0)
          operator delete(v31);
        if (v30 < 0)
          operator delete(v29);
        if (v28 < 0)
          operator delete(v27);
        if (v26 < 0)
          operator delete(v25);
        if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v24.__r_.__value_.__l.__data_);
        v17 = (std::__shared_weak_count *)*((_QWORD *)&v37 + 1);
        if (*((_QWORD *)&v37 + 1))
        {
          v18 = (unint64_t *)(*((_QWORD *)&v37 + 1) + 8);
          do
            v19 = __ldaxr(v18);
          while (__stlxr(v19 - 1, v18));
          if (!v19)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
        }
        goto LABEL_46;
      }
      v16 = (std::string *)&v33;
    }
    MEMORY[0x19401C808](v16, a4);
    Espresso::analysis_debug_metadata::set_model_metadata((Espresso::analysis_debug_metadata *)v37, &v24);
    Espresso::net::set_analysis<Espresso::analysis_debug_metadata>(v38, &v37);
    v15 = 0;
    goto LABEL_27;
  }
  v15 = 4294967291;
LABEL_46:
  v20 = v39;
  if (v39)
  {
    v21 = (unint64_t *)&v39->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
LABEL_51:
  objc_autoreleasePoolPop(v8);
  return v15;
}

void sub_1913CF494(_Unwind_Exception *a1, int a2)
{
  char *v2;
  uint64_t v3;
  std::exception *v6;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v3 - 80);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v3 - 64);
  if (a2 == 1)
  {
    v6 = (std::exception *)__cxa_begin_catch(a1);
    handle_ex_plan(v2, v6);
    __cxa_end_catch();
    JUMPOUT(0x1913CF470);
  }
  _Unwind_Resume(a1);
}

void Espresso::model_metadata_t::~model_metadata_t(void **this)
{
  if (*((char *)this + 167) < 0)
    operator delete(this[18]);
  if (*((char *)this + 143) < 0)
    operator delete(this[15]);
  if (*((char *)this + 119) < 0)
    operator delete(this[12]);
  if (*((char *)this + 95) < 0)
    operator delete(this[9]);
  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

uint64_t espresso_plan_start_profiling_with_options(_QWORD *a1, int a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _DWORD **v7;
  Espresso *v8;
  const char *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  void *v17;
  char v18;
  Espresso *v19;
  const char *v20;
  Espresso *v21;
  _DWORD *v22;
  id v23;
  Espresso *v24;
  const char *v25;
  NSObject *v26;
  const char *v27;
  NSObject *v28;
  uint32_t v29;
  NSObject *v31;
  id v32;
  _BYTE buf[22];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if (!a1
  {
    return 0xFFFFFFFFLL;
  }
  v4 = a1[133];
  v5 = *(_QWORD **)(v4 + 24);
  if (*(_QWORD *)(v4 + 32) - (_QWORD)v5 != 16)
    return 4294967290;
  v6 = operator new(0xC8uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DB6770;
  *(_QWORD *)buf = Espresso::profiler_t::profiler_t((uint64_t)(v6 + 3), v5);
  *(_QWORD *)&buf[8] = v6;
  v7 = (_DWORD **)(a1 + 131);
  v8 = (Espresso *)std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)(a1 + 131), (__int128 *)buf);
  v10 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v11 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  **v7 = a2;
  if ((a2 & 2) == 0)
    goto LABEL_16;
  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = objc_alloc_init(MEMORY[0x1E0CB3578]);
  objc_msgSend(v14, "setDateFormat:", CFSTR("yyyy-MM-dd-HH-mm-ss"));
  objc_msgSend(MEMORY[0x1E0C99D68], "date");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "stringFromDate:", v15);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("/tmp/compiler_analytics_%@_%u"), v16, arc4random() & 0x3FF);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v32 = 0;
  v18 = objc_msgSend(v13, "createDirectoryAtPath:withIntermediateDirectories:attributes:error:", v17, 1, 0, &v32);
  v19 = (Espresso *)v32;
  v21 = v19;
  if ((v18 & 1) != 0)
  {
    v22 = *v7;
    v23 = objc_retainAutorelease(v17);
    v24 = (Espresso *)MEMORY[0x19401C808](v22 + 14, objc_msgSend(v23, "UTF8String"));
    Espresso::espresso_os_log_subsystem(v24, v25);
    v26 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
      goto LABEL_15;
    *(_DWORD *)buf = 138412290;
    *(_QWORD *)&buf[4] = v23;
    v27 = "EspressoProfiler: espresso_plan_start_profiling_with_options compiler analytics written to: %@";
    v28 = v26;
    v29 = 12;
  }
  else
  {
    Espresso::espresso_os_log_subsystem(v19, v20);
    v26 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
      goto LABEL_15;
    *(_DWORD *)buf = 138412546;
    *(_QWORD *)&buf[4] = CFSTR("/tmp");
    *(_WORD *)&buf[12] = 2112;
    *(_QWORD *)&buf[14] = v21;
    v27 = "Failed to create directory \"%@\". Error: %@";
    v28 = v26;
    v29 = 22;
  }
  _os_log_debug_impl(&dword_190DAF000, v28, OS_LOG_TYPE_DEBUG, v27, buf, v29);
LABEL_15:

  if ((v18 & 1) == 0)
    return 0xFFFFFFFFLL;
LABEL_16:
  Espresso::espresso_os_log_subsystem(v8, v9);
  v31 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = a2;
    _os_log_debug_impl(&dword_190DAF000, v31, OS_LOG_TYPE_DEBUG, "EspressoProfiler: espresso_plan_start_profiling_with_options option: %d", buf, 8u);
  }

  return 0;
}

void sub_1913CF8D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::profiler_t>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB6770;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::profiler_t>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB6770;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::profiler_t>::__on_zero_shared(uint64_t a1)
{
  Espresso::profiler_t::~profiler_t((Espresso::profiler_t *)(a1 + 24));
}

uint64_t espresso_plan_start_profiling(_QWORD *a1)
{
  return espresso_plan_start_profiling_with_options(a1, 0);
}

uint64_t espresso_network_query_quantization_info(_QWORD *a1, int a2, char *a3, uint64_t a4)
{
  void *v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  Espresso::keys_translation *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t default_compute_path;
  void *v18[2];
  char v19;
  void *__p[2];
  void *v21;
  void *v22;
  uint64_t v23;

  if (!a1)
    return 4294967290;
  result = 4294967290;
  if (a4 && v8)
  {
    *(_DWORD *)(a4 + 8) = 0;
    *(_QWORD *)a4 = 0;
    v10 = *(_QWORD *)(a1[133] + 24) + 16 * a2;
    v11 = *(_QWORD *)v10;
    std::string::basic_string[abi:ne180100]<0>(__p, a3);
    v12 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>((_QWORD *)(v11 + 136), (unsigned __int8 *)__p);
    v13 = v12;
    if (SHIBYTE(v21) < 0)
    {
      operator delete(__p[0]);
      if (!v13)
      {
LABEL_10:
        LODWORD(__p[0]) = 1065353216;
        *(void **)((char *)__p + 4) = (void *)0xFFFFFFFF00000000;
        HIDWORD(__p[1]) = 1;
        v22 = 0;
        v23 = 0;
        v21 = 0;
        v15 = *(_QWORD *)v10;
        std::string::basic_string[abi:ne180100]<0>(v18, a3);
        v16 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(v15 + 352, v18);
        if (v19 < 0)
          operator delete(v18[0]);
        if ((_QWORD *)(*(_QWORD *)v10 + 360) != v16)
        {
          *(_OWORD *)__p = *(_OWORD *)(v16 + 7);
          if (__p != v16 + 7)
            std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)&v21, (char *)v16[9], v16[10], (uint64_t)(v16[10] - v16[9]) >> 2);
        }
        default_compute_path = LODWORD(__p[1]);
        if (LODWORD(__p[1]) == -1)
        {
          default_compute_path = Espresso::get_default_compute_path(*(uint64_t (****)(_QWORD))(*(_QWORD *)(*(_QWORD *)v10 + 16) + 8));
          LODWORD(__p[1]) = default_compute_path;
        }
        *(_DWORD *)a4 = Espresso::keys_translation::c_api_storage_type_from_cpp_compute_path((Espresso::keys_translation *)default_compute_path);
        *(_DWORD *)(a4 + 8) = __p[0];
        if (v21)
        {
          v22 = v21;
          operator delete(v21);
        }
        return 0;
      }
    }
    else if (!v12)
    {
      goto LABEL_10;
    }
    v14 = (Espresso::keys_translation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)v13 + 5) + 32))(*((_QWORD *)v13 + 5));
    *(_DWORD *)(a4 + 4) = Espresso::keys_translation::c_api_storage_type_from_cpp_compute_path(v14);
    goto LABEL_10;
  }
  return result;
}

void sub_1913CFB40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  EspressoLight *v16;
  std::exception *v17;

  if (a2 == 1)
  {
    v16 = (EspressoLight *)__cxa_begin_catch(exception_object);
    EspressoLight::handle_ex_(v16, v17);
    __cxa_end_catch();
    JUMPOUT(0x1913CFB2CLL);
  }
  _Unwind_Resume(exception_object);
}

uint64_t espresso_upgrade_eir_to_mil(const char *a1, std::string *a2, std::string *a3, uint64_t *a4, uint64_t a5, int a6, int a7)
{
  std::__fs::filesystem::path *v13;
  std::string::size_type size;
  std::__fs::filesystem::path::__string_view v15;
  void *v16;
  void *v17;
  std::basic_string_view<_CharT, _Traits>::size_type v18;
  std::basic_string_view<_CharT, _Traits>::size_type v19;
  std::__fs::filesystem::path *v20;
  std::string::size_type v21;
  int v22;
  void *v23;
  std::string *v24;
  std::string::size_type v25;
  char v26;
  std::__fs::filesystem::path::__string_view v27;
  int v28;
  unsigned __int8 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  std::string *v37;
  unint64_t *p_shared_owners;
  unint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  void *v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  std::string::size_type v52;
  _BYTE *v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  std::string::size_type i;
  std::string::size_type v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  std::string::size_type v68;
  unint64_t *v69;
  unint64_t v70;
  uint64_t *j;
  uint64_t v72;
  __int128 v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::string::size_type v91;
  std::string::size_type v92;
  std::string::size_type v93;
  std::string::size_type v94;
  std::string *v95;
  uint64_t v96;
  std::string::size_type v97;
  std::string::size_type v98;
  std::string::size_type v99;
  std::string::size_type v100;
  uint64_t v101;
  std::string::size_type v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  _QWORD v113[3];
  std::string v114;
  std::string v115;
  std::string::size_type v116;
  void *v117[5];
  __int128 v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  uint64_t v121;
  uint64_t v122;
  std::__shared_weak_count *v123;
  uint64_t v124;
  std::__shared_weak_count *v125;
  std::string v126;
  std::string pn;
  std::__fs::filesystem::path v128;
  std::__fs::filesystem::path v129;
  std::__fs::filesystem::path v130;
  std::__fs::filesystem::path v131;
  std::__fs::filesystem::path v132;
  __int128 v133;
  uint64_t v134;
  void *__p[2];
  char v136;
  char v137[8];
  std::string v138;
  std::string::size_type v139;
  __int128 v140;
  __int128 v141;
  uint64_t v142;
  uint64_t v143;
  std::__fs::filesystem::path v144;
  std::string *v145;
  int v146;
  __int128 *v147;
  _BYTE __dst[32];
  _QWORD v149[4];
  _QWORD v150[4];
  _QWORD v151[4];
  _QWORD v152[4];
  _QWORD v153[4];
  _QWORD v154[4];
  _QWORD v155[3];
  _QWORD *v156;
  __int128 v157;
  std::string v158;
  std::string *v159;
  int v160;
  uint64_t v161;

  v161 = *MEMORY[0x1E0C80C00];
  if (a6 && a7)
    Espresso::throw_exception_selector<Espresso::generic_error>("Cannot generate fp16 model and share weight file at the same time. Please provide only one of the option.");
  std::string::basic_string[abi:ne180100]<0>(__p, "/tmp");
  Espresso::SharedUtils::TemporaryDirectory::TemporaryDirectory((uint64_t)v137, (const void **)__p);
  if (v136 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v158, v138.__r_.__value_.__l.__data_, v138.__r_.__value_.__l.__size_);
  else
    v158 = v138;
  Espresso::get_real_file_path((std::string *)__dst, (const char *)&v158);
  v133 = *(_OWORD *)__dst;
  v134 = *(_QWORD *)&__dst[16];
  memset(__dst, 0, 24);
  if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v158.__r_.__value_.__l.__data_);
  Espresso::get_real_file_path((std::string *)__dst, a1);
  v132 = *(std::__fs::filesystem::path *)__dst;
  std::__fs::filesystem::path::filename[abi:ne180100]((uint64_t)__dst, &v132);
  std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)__dst, (uint64_t)&v133, &v131);
  if ((__dst[23] & 0x80000000) != 0)
    operator delete(*(void **)__dst);
  std::__fs::filesystem::path::filename[abi:ne180100]((uint64_t)__dst, &v132);
  memset(&v158, 0, sizeof(v158));
  std::string::append[abi:ne180100]<char const*,0>(&v158, (std::string *)".shape", (std::string *)"");
  v13 = std::__fs::filesystem::path::replace_extension((std::__fs::filesystem::path *)__dst, (const std::__fs::filesystem::path *)&v158);
  std::__fs::filesystem::operator/[abi:ne180100](v13, (uint64_t)&v133, &v130);
  if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v158.__r_.__value_.__l.__data_);
  if ((__dst[23] & 0x80000000) != 0)
    operator delete(*(void **)__dst);
  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v129.__pn_, a2);
  size = HIBYTE(v129.__pn_.__r_.__value_.__r.__words[2]);
  if ((v129.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v129.__pn_.__r_.__value_.__l.__size_;
  if (size)
  {
    if (std::__fs::filesystem::path::__parent_path(&v129).__size_)
    {
      Espresso::get_real_file_path((std::string *)__dst, (const char *)a2);
      if (SHIBYTE(v129.__pn_.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v129.__pn_.__r_.__value_.__l.__data_);
      v129 = *(std::__fs::filesystem::path *)__dst;
      goto LABEL_46;
    }
    std::__fs::filesystem::path::parent_path[abi:ne180100]((uint64_t)&v158, &v132);
    std::__fs::filesystem::path::filename[abi:ne180100]((uint64_t)&v144, &v129);
    std::__fs::filesystem::operator/[abi:ne180100](&v144, (uint64_t)&v158, (std::__fs::filesystem::path *)__dst);
    if (SHIBYTE(v129.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v129.__pn_.__r_.__value_.__l.__data_);
    v129 = *(std::__fs::filesystem::path *)__dst;
    __dst[23] = 0;
    __dst[0] = 0;
    if (SHIBYTE(v144.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v144.__pn_.__r_.__value_.__l.__data_);
    if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0)
    {
      v17 = (void *)v158.__r_.__value_.__r.__words[0];
LABEL_45:
      operator delete(v17);
      goto LABEL_46;
    }
    goto LABEL_46;
  }
  std::__fs::filesystem::path::parent_path[abi:ne180100]((uint64_t)&v144, &v132);
  v15 = std::__fs::filesystem::path::__stem(&v132);
  if (v15.__size_ >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v15.__size_ >= 0x17)
  {
    v18 = (v15.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15.__size_ | 7) != 0x17)
      v18 = v15.__size_ | 7;
    v19 = v18 + 1;
    v16 = operator new(v18 + 1);
    *(_QWORD *)&__dst[16] = v19 | 0x8000000000000000;
    *(_QWORD *)__dst = v16;
    *(_QWORD *)&__dst[8] = v15.__size_;
    goto LABEL_36;
  }
  __dst[23] = v15.__size_;
  v16 = __dst;
  if (v15.__size_)
LABEL_36:
    memmove(v16, v15.__data_, v15.__size_);
  *((_BYTE *)v16 + v15.__size_) = 0;
  v128 = *(std::__fs::filesystem::path *)__dst;
  memset(__dst, 0, 24);
  std::string::append[abi:ne180100]<char const*,0>((std::string *)__dst, (std::string *)".mil", (std::string *)"");
  v20 = std::__fs::filesystem::path::replace_extension(&v128, (const std::__fs::filesystem::path *)__dst);
  std::__fs::filesystem::operator/[abi:ne180100](v20, (uint64_t)&v144, (std::__fs::filesystem::path *)&v158);
  if (SHIBYTE(v129.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v129.__pn_.__r_.__value_.__l.__data_);
  v129.__pn_ = v158;
  *((_BYTE *)&v158.__r_.__value_.__s + 23) = 0;
  v158.__r_.__value_.__s.__data_[0] = 0;
  if ((__dst[23] & 0x80000000) != 0)
    operator delete(*(void **)__dst);
  if (SHIBYTE(v128.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v128.__pn_.__r_.__value_.__l.__data_);
  if (SHIBYTE(v144.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    v17 = (void *)v144.__pn_.__r_.__value_.__r.__words[0];
    goto LABEL_45;
  }
LABEL_46:
  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v128.__pn_, a3);
  v21 = HIBYTE(v128.__pn_.__r_.__value_.__r.__words[2]);
  if ((v128.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v21 = v128.__pn_.__r_.__value_.__l.__size_;
  if (!v21)
  {
    std::__fs::filesystem::path::parent_path[abi:ne180100]((uint64_t)&v158, &v129);
    std::__fs::filesystem::path::filename[abi:ne180100]((uint64_t)&v126, &v129);
    v22 = SHIBYTE(v126.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&pn, v126.__r_.__value_.__l.__data_, v126.__r_.__value_.__l.__size_);
    else
      pn = v126;
    v24 = std::string::append(&pn, ".weights");
    v25 = v24->__r_.__value_.__r.__words[0];
    *(_QWORD *)&v157 = v24->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)&v157 + 7) = *(std::string::size_type *)((char *)&v24->__r_.__value_.__r.__words[1] + 7);
    v26 = HIBYTE(v24->__r_.__value_.__r.__words[2]);
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    *(std::string::size_type *)((char *)&v144.__pn_.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)&v157 + 7);
    v144.__pn_.__r_.__value_.__r.__words[0] = v25;
    v144.__pn_.__r_.__value_.__l.__size_ = v157;
    *((_BYTE *)&v144.__pn_.__r_.__value_.__s + 23) = v26;
    std::__fs::filesystem::operator/[abi:ne180100](&v144, (uint64_t)&v158, (std::__fs::filesystem::path *)__dst);
    if (SHIBYTE(v128.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v128.__pn_.__r_.__value_.__l.__data_);
    v128 = *(std::__fs::filesystem::path *)__dst;
    __dst[23] = 0;
    __dst[0] = 0;
    if (SHIBYTE(v144.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v144.__pn_.__r_.__value_.__l.__data_);
    if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(pn.__r_.__value_.__l.__data_);
      if ((v22 & 0x80000000) == 0)
        goto LABEL_70;
    }
    else if ((v22 & 0x80000000) == 0)
    {
      goto LABEL_70;
    }
    v23 = (void *)v126.__r_.__value_.__r.__words[0];
    goto LABEL_69;
  }
  if (std::__fs::filesystem::path::__parent_path(&v128).__size_)
  {
    Espresso::get_real_file_path((std::string *)__dst, (const char *)a3);
    if (SHIBYTE(v128.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v128.__pn_.__r_.__value_.__l.__data_);
    v128 = *(std::__fs::filesystem::path *)__dst;
    goto LABEL_72;
  }
  std::__fs::filesystem::path::parent_path[abi:ne180100]((uint64_t)&v158, &v129);
  std::__fs::filesystem::path::filename[abi:ne180100]((uint64_t)&v144, &v128);
  std::__fs::filesystem::operator/[abi:ne180100](&v144, (uint64_t)&v158, (std::__fs::filesystem::path *)__dst);
  if (SHIBYTE(v128.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v128.__pn_.__r_.__value_.__l.__data_);
  v128 = *(std::__fs::filesystem::path *)__dst;
  __dst[23] = 0;
  __dst[0] = 0;
  if (SHIBYTE(v144.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    v23 = (void *)v144.__pn_.__r_.__value_.__r.__words[0];
LABEL_69:
    operator delete(v23);
  }
LABEL_70:
  if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v158.__r_.__value_.__l.__data_);
LABEL_72:
  if (SHIBYTE(v129.__pn_.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&pn, v129.__pn_.__r_.__value_.__l.__data_, v129.__pn_.__r_.__value_.__l.__size_);
  else
    pn = v129.__pn_;
  std::__fs::filesystem::path::parent_path[abi:ne180100]((uint64_t)__dst, &v129);
  std::__fs::filesystem::path::parent_path[abi:ne180100]((uint64_t)&v158, &v128);
  if ((v158.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v27.__data_ = (const std::string_view::value_type *)&v158;
  else
    v27.__data_ = (const std::string_view::value_type *)v158.__r_.__value_.__r.__words[0];
  if ((v158.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v27.__size_ = HIBYTE(v158.__r_.__value_.__r.__words[2]);
  else
    v27.__size_ = v158.__r_.__value_.__l.__size_;
  v28 = std::__fs::filesystem::path::__compare((const std::__fs::filesystem::path *)__dst, v27);
  if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v158.__r_.__value_.__l.__data_);
  if ((__dst[23] & 0x80000000) != 0)
    operator delete(*(void **)__dst);
  if (v28)
  std::__fs::filesystem::path::parent_path[abi:ne180100]((uint64_t)__dst, &v129);
  std::__fs::filesystem::__status((const std::__fs::filesystem::path *)__dst, 0);
  v29 = v158.__r_.__value_.__s.__data_[0];
  if ((__dst[23] & 0x80000000) != 0)
    operator delete(*(void **)__dst);
  if (v29 == 255 || !v29)
    Espresso::throw_exception_selector<Espresso::io_error>("The output directory does not exist.");
  *(_DWORD *)__dst = 80000;
  Espresso::create_context((int *)__dst, &v124);
  v30 = v124;
  *(_BYTE *)(v124 + 53) = 1;
  *(_BYTE *)(v30 + 72) = 1;
  Espresso::load_network((uint64_t)a1, &v124, 0, 0, &v122);
  v31 = v122;
  if (!v122)
    Espresso::throw_exception_selector<Espresso::io_error>("unable to load network");
  if (a7)
  {
    v32 = *(_QWORD *)(v122 + 576);
    if (v32)
      (*(void (**)(_BYTE *__return_ptr))(*(_QWORD *)v32 + 40))(__dst);
    else
      std::string::basic_string[abi:ne180100]<0>(__dst, "");
    v33 = __dst[23];
    v34 = __dst[23];
    v35 = *(_QWORD *)&__dst[8];
    if (__dst[23] >= 0)
      v36 = __dst[23];
    else
      v36 = *(_QWORD *)&__dst[8];
    if (v36)
    {
      if (SHIBYTE(v128.__pn_.__r_.__value_.__r.__words[2]) < 0)
      {
        *v128.__pn_.__r_.__value_.__l.__data_ = 0;
        v128.__pn_.__r_.__value_.__l.__size_ = 0;
        v33 = __dst[23];
        v35 = *(_QWORD *)&__dst[8];
        v34 = __dst[23];
      }
      else
      {
        v128.__pn_.__r_.__value_.__s.__data_[0] = 0;
        *((_BYTE *)&v128.__pn_.__r_.__value_.__s + 23) = 0;
      }
      if (v34 >= 0)
        v37 = (std::string *)__dst;
      else
        v37 = *(std::string **)__dst;
      if (v34 < 0)
        v33 = v35;
      std::string::append[abi:ne180100]<char const*,0>(&v128.__pn_, v37, (std::string *)((char *)v37 + v33));
      v34 = __dst[23];
    }
    if (v34 < 0)
      operator delete(*(void **)__dst);
    v31 = v122;
  }
  v119 = v31;
  v120 = v123;
  if (v123)
  {
    p_shared_owners = (unint64_t *)&v123->__shared_owners_;
    do
      v39 = __ldxr(p_shared_owners);
    while (__stxr(v39 + 1, p_shared_owners));
  }
  Espresso::MILUtil::CreateMILContext((Espresso::MILUtil *)__dst);
  *(_QWORD *)&v118 = *(_QWORD *)__dst;
  if (*(_QWORD *)__dst)
  {
    v40 = (_QWORD *)operator new();
    v41 = *(_QWORD *)__dst;
    *v40 = &unk_1E2DC2E80;
    v40[1] = 0;
    v40[2] = 0;
    v40[3] = v41;
  }
  else
  {
    v40 = 0;
  }
  *((_QWORD *)&v118 + 1) = v40;
  *(_QWORD *)__dst = 0;
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>>>::__hash_table((uint64_t)v117, a4);
  Espresso::MILTranslator::TranslateNetwork((MIL::Attributes::FlexibleShapeInfo *)&v121, (const Espresso::net *)&v119, &v118, (uint64_t *)v117);
  std::__hash_table<std::__hash_value_type<std::string,Espresso::layer_shape>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::layer_shape>>>::__deallocate_node((_QWORD *)v117[2]);
  v42 = v117[0];
  v117[0] = 0;
  if (v42)
    operator delete(v42);
  v43 = (std::__shared_weak_count *)*((_QWORD *)&v118 + 1);
  if (*((_QWORD *)&v118 + 1))
  {
    v44 = (unint64_t *)(*((_QWORD *)&v118 + 1) + 8);
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  v46 = *(_QWORD *)__dst;
  *(_QWORD *)__dst = 0;
  if (v46)
    (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
  v47 = v120;
  if (v120)
  {
    v48 = (unint64_t *)&v120->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
      if (a6)
        goto LABEL_131;
LABEL_156:
      if ((a7 & 1) == 0)
        goto LABEL_157;
      goto LABEL_209;
    }
  }
  if (!a6)
    goto LABEL_156;
LABEL_131:
  v50 = v121;
  *(_QWORD *)__dst = &off_1E2DACE30;
  *(_QWORD *)&__dst[8] = Espresso::MILTransforms::PropagateFlexibleEnumeratedShape;
  *(_QWORD *)&__dst[24] = __dst;
  v149[0] = &off_1E2DACE30;
  v149[1] = Espresso::MILTransforms::InsertFp32Fp16ToAndFromCastPass;
  v149[3] = v149;
  v150[0] = &off_1E2DACE30;
  v150[1] = Espresso::MILTransforms::ConstCastFusion;
  v150[3] = v150;
  v151[0] = &off_1E2DACE30;
  v151[1] = Espresso::MILTransforms::MakeInputOutputFp16Pass;
  v151[3] = v151;
  v152[0] = &off_1E2DACE30;
  v152[1] = Espresso::MILTransforms::CastToIdentityPass;
  v152[3] = v152;
  v153[0] = &off_1E2DACE30;
  v153[1] = Espresso::MILTransforms::IdentityEliminationPass;
  v153[3] = v153;
  v154[0] = &off_1E2DACE30;
  v154[1] = Espresso::MILTransforms::PruneConsecutiveCastPass;
  v154[3] = v154;
  v155[0] = &off_1E2DACE30;
  v155[1] = Espresso::MILTransforms::DeadCodeEliminationPass;
  v156 = v155;
  memset(&v144, 0, sizeof(v144));
  v126.__r_.__value_.__r.__words[0] = (std::string::size_type)&v144;
  v126.__r_.__value_.__s.__data_[8] = 0;
  v51 = 0;
  v144.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x100uLL);
  v144.__pn_.__r_.__value_.__l.__size_ = v144.__pn_.__r_.__value_.__r.__words[0];
  v144.__pn_.__r_.__value_.__r.__words[2] = v144.__pn_.__r_.__value_.__r.__words[0] + 256;
  *(_QWORD *)&v157 = v144.__pn_.__r_.__value_.__r.__words[0];
  *(_QWORD *)&v141 = v144.__pn_.__r_.__value_.__r.__words[0];
  v158.__r_.__value_.__r.__words[0] = (std::string::size_type)&v144.__pn_.__r_.__value_.__r.__words[2];
  v158.__r_.__value_.__l.__size_ = (std::string::size_type)&v141;
  v158.__r_.__value_.__r.__words[2] = (std::string::size_type)&v157;
  v52 = v144.__pn_.__r_.__value_.__r.__words[0];
  LOBYTE(v159) = 0;
  do
  {
    v53 = &__dst[v51];
    v54 = *(_QWORD *)&__dst[v51 + 24];
    if (!v54)
      goto LABEL_135;
    if (v53 != (_BYTE *)v54)
    {
      v54 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v54 + 16))(v54);
LABEL_135:
      *(_QWORD *)(v52 + 24) = v54;
      goto LABEL_137;
    }
    *(_QWORD *)(v52 + 24) = v52;
    (*(void (**)(_QWORD, std::string::size_type))(**((_QWORD **)v53 + 3) + 24))(*((_QWORD *)v53 + 3), v52);
LABEL_137:
    v52 = v157 + 32;
    *(_QWORD *)&v157 = v157 + 32;
    v51 += 32;
  }
  while (v51 != 256);
  LOBYTE(v159) = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::function<std::unique_ptr<MIL::IRProgram> ()(MIL::IRProgram const&)>>,std::function<std::unique_ptr<MIL::IRProgram> ()(MIL::IRProgram const&)>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&v158);
  v55 = 0;
  v144.__pn_.__r_.__value_.__l.__size_ = v52;
  do
  {
    v56 = (&v156)[v55];
    if (&v155[v55] == v56)
    {
      v56 = &v155[v55];
      v57 = 4;
    }
    else
    {
      if (!v56)
        goto LABEL_144;
      v57 = 5;
    }
    (*(void (**)(void))(*v56 + 8 * v57))();
LABEL_144:
    v55 -= 4;
  }
  while (v55 != -32);
  (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)v50 + 32))(&v140, v50);
  v59 = v144.__pn_.__r_.__value_.__l.__size_;
  for (i = v144.__pn_.__r_.__value_.__r.__words[0]; i != v59; i += 32)
  {
    v60 = *(_QWORD *)(i + 24);
    if (!v60)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(_BYTE *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v60 + 48))(__dst, v60, v140);
    v61 = *(_QWORD *)__dst;
    *(_QWORD *)__dst = 0;
    v62 = v140;
    *(_QWORD *)&v140 = v61;
    if (v62)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
      v63 = *(_QWORD *)__dst;
      *(_QWORD *)__dst = 0;
      if (v63)
        (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
    }
  }
  *(_QWORD *)__dst = &v144;
  std::vector<std::function<std::unique_ptr<MIL::IRProgram> ()(MIL::IRProgram const&)>>::__destroy_vector::operator()[abi:ne180100]((void ***)__dst);
  v64 = v140;
  *(_QWORD *)&v140 = 0;
  v65 = v121;
  v121 = v64;
  if (v65)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v65 + 8))(v65);
    v66 = v140;
    *(_QWORD *)&v140 = 0;
    if (v66)
      (*(void (**)(uint64_t))(*(_QWORD *)v66 + 8))(v66);
  }
LABEL_157:
  v67 = v121;
  if (SHIBYTE(v128.__pn_.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v126, v128.__pn_.__r_.__value_.__l.__data_, v128.__pn_.__r_.__value_.__l.__size_);
  else
    v126 = v128.__pn_;
  (*(void (**)(std::string::size_type *__return_ptr, uint64_t))(*(_QWORD *)v67 + 32))(&v116, v67);
  v68 = v116;
  (*(void (**)(__int128 *__return_ptr, std::string::size_type))(*(_QWORD *)v116 + 48))(&v141, v116);
  v140 = v141;
  if (*((_QWORD *)&v141 + 1))
  {
    v69 = (unint64_t *)(*((_QWORD *)&v141 + 1) + 8);
    do
      v70 = __ldxr(v69);
    while (__stxr(v70 + 1, v69));
  }
  memset(__dst, 0, sizeof(__dst));
  LODWORD(v149[0]) = 1065353216;
  for (j = *(uint64_t **)((*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v68 + 72))(v68) + 16);
        j;
        j = (uint64_t *)*j)
  {
    v72 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)j[5] + 48))(j[5]);
    Espresso::MILTransforms::CollectNames((uint64_t)&v144, v72);
    v73 = *(_OWORD *)&v144.__pn_.__r_.__value_.__l.__data_;
    *(_OWORD *)&v144.__pn_.__r_.__value_.__l.__data_ = 0uLL;
    *(_OWORD *)&v158.__r_.__value_.__l.__data_ = v73;
    v158.__r_.__value_.__r.__words[2] = v144.__pn_.__r_.__value_.__r.__words[2];
    v159 = v145;
    v160 = v146;
    if (v145)
    {
      v74 = *(_QWORD *)(v144.__pn_.__r_.__value_.__r.__words[2] + 8);
      if ((*((_QWORD *)&v73 + 1) & (*((_QWORD *)&v73 + 1) - 1)) != 0)
      {
        if (v74 >= *((_QWORD *)&v73 + 1))
          v74 %= *((_QWORD *)&v73 + 1);
      }
      else
      {
        v74 &= *((_QWORD *)&v73 + 1) - 1;
      }
      *(_QWORD *)(v73 + 8 * v74) = (char *)&v158.__r_.__value_.__l + 16;
      v144.__pn_.__r_.__value_.__r.__words[2] = 0;
      v145 = 0;
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v144);
    v75 = (std::__shared_weak_count *)*((_QWORD *)&v140 + 1);
    v157 = v140;
    if (*((_QWORD *)&v140 + 1))
    {
      v76 = (unint64_t *)(*((_QWORD *)&v140 + 1) + 8);
      do
        v77 = __ldxr(v76);
      while (__stxr(v77 + 1, v76));
    }
    v78 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)j[5] + 32))(j[5]);
    v79 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)j[5] + 48))(j[5]);
    if (v75)
    {
      v80 = (unint64_t *)&v75->__shared_owners_;
      do
        v81 = __ldaxr(v80);
      while (__stlxr(v81 - 1, v80));
      if (!v81)
      {
        ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
        std::__shared_weak_count::__release_weak(v75);
      }
    }
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)j[5] + 192))(&v142, j[5], &v143);
    v147 = (__int128 *)(j + 2);
    v82 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)__dst, (unsigned __int8 *)j + 16, (uint64_t)&std::piecewise_construct, &v147);
    std::shared_ptr<MIL::IRFunction>::operator=[abi:ne180100]<MIL::IRFunction,std::default_delete<MIL::IRFunction>,void>((_QWORD *)v82 + 5, &v142);
    v83 = v142;
    v142 = 0;
    if (v83)
      (*(void (**)(uint64_t))(*(_QWORD *)v83 + 8))(v83);
    v84 = v143;
    v143 = 0;
    if (v84)
      (*(void (**)(uint64_t))(*(_QWORD *)v84 + 8))(v84);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v158);
  }
  (*(void (**)(std::string::size_type *__return_ptr, std::string::size_type, _BYTE *))(*(_QWORD *)v68 + 88))(&v139, v68, __dst);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob_cpu>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob_cpu>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob_cpu>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob_cpu>>>>::~__hash_table((uint64_t)__dst);
  v85 = (std::__shared_weak_count *)*((_QWORD *)&v140 + 1);
  if (*((_QWORD *)&v140 + 1))
  {
    v86 = (unint64_t *)(*((_QWORD *)&v140 + 1) + 8);
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
  v88 = (std::__shared_weak_count *)*((_QWORD *)&v141 + 1);
  if (*((_QWORD *)&v141 + 1))
  {
    v89 = (unint64_t *)(*((_QWORD *)&v141 + 1) + 8);
    do
      v90 = __ldaxr(v89);
    while (__stlxr(v90 - 1, v89));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
  v91 = v139;
  v139 = 0;
  v92 = v116;
  v116 = v91;
  if (v92)
  {
    (*(void (**)(std::string::size_type))(*(_QWORD *)v92 + 8))(v92);
    v93 = v139;
    v139 = 0;
    if (v93)
      (*(void (**)(std::string::size_type))(*(_QWORD *)v93 + 8))(v93);
  }
  v94 = v116;
  LODWORD(v157) = 10;
  memset(__dst, 0, sizeof(__dst));
  LODWORD(v149[0]) = 1065353216;
  v158.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E2DAEE80;
  v158.__r_.__value_.__l.__size_ = (std::string::size_type)__dst;
  v158.__r_.__value_.__r.__words[2] = (std::string::size_type)&v157;
  v159 = &v158;
  MIL::Util::Walk();
  v95 = v159;
  if (v159 == &v158)
  {
    v96 = 4;
    v95 = &v158;
LABEL_200:
    (*(void (**)(void))(v95->__r_.__value_.__r.__words[0] + 8 * v96))();
  }
  else if (v159)
  {
    v96 = 5;
    goto LABEL_200;
  }
  (*(void (**)(std::__fs::filesystem::path *__return_ptr, std::string::size_type))(*(_QWORD *)v94 + 32))(&v144, v94);
  Espresso::MILES::SerializeWeights((uint64_t)v144.__pn_.__r_.__value_.__l.__data_, (std::string::size_type)&v126, (std::string::size_type)__dst);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::~__hash_table((uint64_t)__dst);
  v97 = v144.__pn_.__r_.__value_.__r.__words[0];
  v144.__pn_.__r_.__value_.__r.__words[0] = 0;
  v98 = v116;
  v116 = v97;
  if (v98)
  {
    (*(void (**)(std::string::size_type))(*(_QWORD *)v98 + 8))(v98);
    v99 = v144.__pn_.__r_.__value_.__r.__words[0];
    v144.__pn_.__r_.__value_.__r.__words[0] = 0;
    if (v99)
      (*(void (**)(std::string::size_type))(*(_QWORD *)v99 + 8))(v99);
  }
  v100 = v116;
  v116 = 0;
  v101 = v121;
  v121 = v100;
  if (v101)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v101 + 8))(v101);
    v102 = v116;
    v116 = 0;
    if (v102)
      (*(void (**)(std::string::size_type))(*(_QWORD *)v102 + 8))(v102);
  }
  if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v126.__r_.__value_.__l.__data_);
LABEL_209:
  v103 = v121;
  if (SHIBYTE(v129.__pn_.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v115, v129.__pn_.__r_.__value_.__l.__data_, v129.__pn_.__r_.__value_.__l.__size_);
  else
    v115 = v129.__pn_;
  std::__fs::filesystem::path::parent_path[abi:ne180100]((uint64_t)__dst, &v129);
  v104 = __dst[23];
  if ((__dst[23] & 0x80000000) != 0)
    std::string::__init_copy_ctor_external(&v114, *(const std::string::value_type **)__dst, *(std::string::size_type *)&__dst[8]);
  else
    v114 = *(std::string *)__dst;
  memset(v113, 0, sizeof(v113));
  Espresso::MILUtil::SerializeProgram(v103, (uint64_t)&v115, (uint64_t)&v114, (uint64_t)v113, 0, 0);
  if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v114.__r_.__value_.__l.__data_);
    if (v104 < 0)
      goto LABEL_247;
  }
  else
  {
    if ((v104 & 0x80000000) == 0)
      goto LABEL_217;
LABEL_247:
    operator delete(*(void **)__dst);
  }
LABEL_217:
  if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v115.__r_.__value_.__l.__data_);
  v105 = v121;
  v121 = 0;
  if (v105)
    (*(void (**)(uint64_t))(*(_QWORD *)v105 + 8))(v105);
  v106 = v123;
  if (v123)
  {
    v107 = (unint64_t *)&v123->__shared_owners_;
    do
      v108 = __ldaxr(v107);
    while (__stlxr(v108 - 1, v107));
    if (!v108)
    {
      ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
      std::__shared_weak_count::__release_weak(v106);
    }
  }
  v109 = v125;
  if (v125)
  {
    v110 = (unint64_t *)&v125->__shared_owners_;
    do
      v111 = __ldaxr(v110);
    while (__stlxr(v111 - 1, v110));
    if (!v111)
    {
      ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
      std::__shared_weak_count::__release_weak(v109);
    }
  }
  if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0)
    operator delete(pn.__r_.__value_.__l.__data_);
  if (SHIBYTE(v128.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v128.__pn_.__r_.__value_.__l.__data_);
  if (SHIBYTE(v129.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v129.__pn_.__r_.__value_.__l.__data_);
  if (SHIBYTE(v130.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v130.__pn_.__r_.__value_.__l.__data_);
  if (SHIBYTE(v131.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v131.__pn_.__r_.__value_.__l.__data_);
  if (SHIBYTE(v132.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v132.__pn_.__r_.__value_.__l.__data_);
  if (SHIBYTE(v134) < 0)
    operator delete((void *)v133);
  Espresso::SharedUtils::TemporaryDirectory::~TemporaryDirectory((Espresso::SharedUtils::TemporaryDirectory *)v137);
  return 0;
}

void sub_1913D0D6C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,uint64_t a58,void *a59,uint64_t a60,int a61,__int16 a62,char a63)
{
  char a64;
  void *a65;
  char a70;
  void *a71;
  char a72;
  void *a73;
  char a74;
  char a75;
  uint64_t v75;
  EspressoLight *v78;
  std::exception *v79;

  operator delete(__p);
  if (*(char *)(v75 - 121) < 0)
    operator delete(*(void **)(v75 - 144));
  if (a50 < 0)
    operator delete(a45);
  if (a57 < 0)
    operator delete(a52);
  if (a64 < 0)
    operator delete(a59);
  if (a70 < 0)
    operator delete(a65);
  if (a72 < 0)
    operator delete(a71);
  if (a74 < 0)
    operator delete(a73);
  Espresso::SharedUtils::TemporaryDirectory::~TemporaryDirectory((Espresso::SharedUtils::TemporaryDirectory *)&a75);
  if (a2 == 1)
  {
    v78 = (EspressoLight *)__cxa_begin_catch(a1);
    EspressoLight::handle_ex_(v78, v79);
    __cxa_end_catch();
    JUMPOUT(0x1913D0CC0);
  }
  _Unwind_Resume(a1);
}

void sub_1913D1370()
{
  JUMPOUT(0x1913D1054);
}

void sub_1913D1378()
{
  __cxa_end_catch();
  JUMPOUT(0x1913D1054);
}

double std::__fs::filesystem::path::filename[abi:ne180100](uint64_t a1, std::__fs::filesystem::path *this)
{
  std::__fs::filesystem::path::__string_view v3;
  __int128 *p_dst;
  std::basic_string_view<_CharT, _Traits>::size_type v5;
  std::basic_string_view<_CharT, _Traits>::size_type v6;
  double result;
  __int128 __dst;
  unint64_t v9;

  v3 = std::__fs::filesystem::path::__filename(this);
  if (v3.__size_ >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v3.__size_ >= 0x17)
  {
    v5 = (v3.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3.__size_ | 7) != 0x17)
      v5 = v3.__size_ | 7;
    v6 = v5 + 1;
    p_dst = (__int128 *)operator new(v5 + 1);
    *((_QWORD *)&__dst + 1) = v3.__size_;
    v9 = v6 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
  }
  else
  {
    HIBYTE(v9) = v3.__size_;
    p_dst = &__dst;
    if (!v3.__size_)
      goto LABEL_9;
  }
  memmove(p_dst, v3.__data_, v3.__size_);
LABEL_9:
  *((_BYTE *)p_dst + v3.__size_) = 0;
  result = *(double *)&__dst;
  *(_OWORD *)a1 = __dst;
  *(_QWORD *)(a1 + 16) = v9;
  return result;
}

void sub_1913D1494(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

double std::__fs::filesystem::path::parent_path[abi:ne180100](uint64_t a1, std::__fs::filesystem::path *this)
{
  std::__fs::filesystem::path::__string_view v3;
  __int128 *p_dst;
  std::basic_string_view<_CharT, _Traits>::size_type v5;
  std::basic_string_view<_CharT, _Traits>::size_type v6;
  double result;
  __int128 __dst;
  unint64_t v9;

  v3 = std::__fs::filesystem::path::__parent_path(this);
  if (v3.__size_ >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v3.__size_ >= 0x17)
  {
    v5 = (v3.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3.__size_ | 7) != 0x17)
      v5 = v3.__size_ | 7;
    v6 = v5 + 1;
    p_dst = (__int128 *)operator new(v5 + 1);
    *((_QWORD *)&__dst + 1) = v3.__size_;
    v9 = v6 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
  }
  else
  {
    HIBYTE(v9) = v3.__size_;
    p_dst = &__dst;
    if (!v3.__size_)
      goto LABEL_9;
  }
  memmove(p_dst, v3.__data_, v3.__size_);
LABEL_9:
  *((_BYTE *)p_dst + v3.__size_) = 0;
  result = *(double *)&__dst;
  *(_OWORD *)a1 = __dst;
  *(_QWORD *)(a1 + 16) = v9;
  return result;
}

uint64_t espresso_upgrade_net_to_mil(const char *a1, std::string *a2, std::string *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v9;
  void *v10;
  void *__p;
  char v13;
  void *v14[5];

  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>>>::__hash_table((uint64_t)v14, a4);
  std::string::basic_string[abi:ne180100]<0>(&__p, "ios15");
  v9 = espresso_upgrade_eir_to_mil(a1, a2, a3, (uint64_t *)v14, a5, 0, 1);
  if (v13 < 0)
    operator delete(__p);
  std::__hash_table<std::__hash_value_type<std::string,Espresso::layer_shape>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::layer_shape>>>::__deallocate_node((_QWORD *)v14[2]);
  v10 = v14[0];
  v14[0] = 0;
  if (v10)
    operator delete(v10);
  return v9;
}

void sub_1913D161C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  EspressoLight *v17;
  std::exception *v18;

  if (a14 < 0)
    operator delete(__p);
  std::__hash_table<std::__hash_value_type<std::string,Espresso::layer_shape>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::layer_shape>>>::~__hash_table((uint64_t)&a15);
  if (a2 == 1)
  {
    v17 = (EspressoLight *)__cxa_begin_catch(a1);
    EspressoLight::handle_ex_(v17, v18);
    __cxa_end_catch();
    JUMPOUT(0x1913D1604);
  }
  _Unwind_Resume(a1);
}

uint64_t espresso_upgrade_to_mil(std::string *a1, char *a2, char *a3)
{
  _QWORD *v6;
  void *v7;
  std::string::size_type v8;
  _QWORD *v9;
  std::string::size_type v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  void *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *size;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  _QWORD v34[3];
  std::string v35;
  void *v36[2];
  char v37;
  void *__p[2];
  __int128 v39;
  int v40;
  __int128 v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  uint64_t v44;
  std::__fs::filesystem::path v45;
  std::string v46;
  std::string v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  std::string *v52;

  v52 = a1;
  LODWORD(v47.__r_.__value_.__l.__data_) = 80000;
  Espresso::create_context((int *)&v47, &v50);
  v6 = std::string::basic_string[abi:ne180100]<0>(&v47, (char *)a1);
  Espresso::load_network((uint64_t)v6, &v50, 0, 0, &v48);
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v47.__r_.__value_.__l.__data_);
  if (!v48)
    Espresso::throw_exception_selector<Espresso::io_error>("unable to load network");
  if (a2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v47, a2);
  }
  else
  {
    std::__fs::filesystem::path::path[abi:ne180100]<char const*,void>(&v45.__pn_, &v52);
    std::__fs::filesystem::path::parent_path[abi:ne180100]((uint64_t)&v46, &v45);
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    {
      v7 = (void *)v46.__r_.__value_.__r.__words[0];
      std::string::__init_copy_ctor_external(&v47, v46.__r_.__value_.__l.__data_, v46.__r_.__value_.__l.__size_);
      operator delete(v7);
    }
    else
    {
      v47 = v46;
    }
    if (SHIBYTE(v45.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v45.__pn_.__r_.__value_.__l.__data_);
  }
  Espresso::MILUtil::CreateMILContext((Espresso::MILUtil *)&v46);
  v8 = v46.__r_.__value_.__r.__words[0];
  v45.__pn_.__r_.__value_.__r.__words[0] = v46.__r_.__value_.__r.__words[0];
  if (v46.__r_.__value_.__r.__words[0])
  {
    v9 = (_QWORD *)operator new();
    v10 = v46.__r_.__value_.__r.__words[0];
    *v9 = &unk_1E2DC2E80;
    v9[1] = 0;
    v9[2] = 0;
    v9[3] = v10;
  }
  else
  {
    v9 = 0;
  }
  v45.__pn_.__r_.__value_.__l.__size_ = (std::string::size_type)v9;
  v42 = v48;
  v43 = v49;
  if (v49)
  {
    p_shared_owners = (unint64_t *)&v49->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  *(_QWORD *)&v41 = v8;
  *((_QWORD *)&v41 + 1) = v9;
  if (v9)
  {
    v13 = v9 + 1;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  *(_OWORD *)__p = 0u;
  v39 = 0u;
  v40 = 1065353216;
  std::string::basic_string[abi:ne180100]<0>(&v46, "ios15");
  Espresso::MILTranslator::TranslateNetwork((MIL::Attributes::FlexibleShapeInfo *)&v44, (const Espresso::net *)&v42, &v41, (uint64_t *)__p);
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  std::__hash_table<std::__hash_value_type<std::string,Espresso::layer_shape>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::layer_shape>>>::__deallocate_node((_QWORD *)v39);
  v15 = __p[0];
  __p[0] = 0;
  if (v15)
    operator delete(v15);
  v16 = (std::__shared_weak_count *)*((_QWORD *)&v41 + 1);
  if (*((_QWORD *)&v41 + 1))
  {
    v17 = (unint64_t *)(*((_QWORD *)&v41 + 1) + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = v43;
  if (v43)
  {
    v20 = (unint64_t *)&v43->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = v44;
  std::string::basic_string[abi:ne180100]<0>(v36, a3);
  Espresso::get_real_file_path(&v35, (const char *)&v47);
  memset(v34, 0, sizeof(v34));
  Espresso::MILUtil::SerializeProgram(v22, (uint64_t)v36, (uint64_t)&v35, (uint64_t)v34, 0, 0);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35.__r_.__value_.__l.__data_);
  if (v37 < 0)
    operator delete(v36[0]);
  v23 = v44;
  v44 = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  size = (std::__shared_weak_count *)v45.__pn_.__r_.__value_.__l.__size_;
  if (v45.__pn_.__r_.__value_.__l.__size_)
  {
    v25 = (unint64_t *)(v45.__pn_.__r_.__value_.__l.__size_ + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v47.__r_.__value_.__l.__data_);
  v27 = v49;
  if (v49)
  {
    v28 = (unint64_t *)&v49->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v30 = v51;
  if (v51)
  {
    v31 = (unint64_t *)&v51->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  return 0;
}

void sub_1913D1A20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34)
{
  void *v34;
  uint64_t v35;
  void *v36;
  EspressoLight *v39;
  std::exception *v40;

  v36 = v34;
  operator delete(v36);
  if (*(char *)(v35 - 121) < 0)
    operator delete(*(void **)(v35 - 144));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v35 - 72);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v35 - 56);
  if (a2 == 1)
  {
    v39 = (EspressoLight *)__cxa_begin_catch(a1);
    EspressoLight::handle_ex_(v39, v40);
    __cxa_end_catch();
    JUMPOUT(0x1913D19F8);
  }
  _Unwind_Resume(a1);
}

